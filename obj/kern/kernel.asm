
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 e0 17 00 	lgdtl  0x17e018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

    # Leave a few words on the stack for the user trap frame
	#2024: this line is changed since the trapframe is move to the user kernel stack of each process
	#movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
	movl	$(ptr_stack_top),%esp
f0100033:	bc 00 e0 17 f0       	mov    $0xf017e000,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 50 29 5a f0 01 	movl   $0x1,0xf05a2950
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 a4 28 5a f0 01 	movl   $0x1,0xf05a28a4
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
//=======================================

//First ever function called in FOS kernel
bool autograde ;
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 28             	sub    $0x28,%esp
	//cprintf("*	1) Global data (BSS) section...");
	{
		// Before doing anything else,
		// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
		// This ensures that all static/global variables start with zero value.
		memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba 30 54 5c f0       	mov    $0xf05c5430,%edx
f010006a:	b8 50 f1 59 f0       	mov    $0xf059f150,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 50 f1 59 f0       	push   $0xf059f150
f010007e:	e8 a9 26 02 00       	call   f012272c <memset>
f0100083:	83 c4 10             	add    $0x10,%esp
	//cprintf("[DONE]\n");

	{
		// Initialize the console.
		// Can't call cprintf until after we do this!
		cons_init();
f0100086:	e8 8d 0d 00 00       	call   f0100e18 <cons_init>
		//print welcome message
		print_welcome_message();
f010008b:	e8 11 02 00 00       	call   f01002a1 <print_welcome_message>
	}

	cprintf("\n********************************************************************\n");
f0100090:	83 ec 0c             	sub    $0xc,%esp
f0100093:	68 a0 3f 12 f0       	push   $0xf0123fa0
f0100098:	e8 cf 0e 00 00       	call   f0100f6c <cprintf>
f010009d:	83 c4 10             	add    $0x10,%esp
	cprintf("* INITIALIZATIONS:\n");
f01000a0:	83 ec 0c             	sub    $0xc,%esp
f01000a3:	68 e7 3f 12 f0       	push   $0xf0123fe7
f01000a8:	e8 bf 0e 00 00       	call   f0100f6c <cprintf>
f01000ad:	83 c4 10             	add    $0x10,%esp
	cprintf("*=================\n");
f01000b0:	83 ec 0c             	sub    $0xc,%esp
f01000b3:	68 fb 3f 12 f0       	push   $0xf0123ffb
f01000b8:	e8 af 0e 00 00       	call   f0100f6c <cprintf>
f01000bd:	83 c4 10             	add    $0x10,%esp

	cprintf("* 1) CPU...");
f01000c0:	83 ec 0c             	sub    $0xc,%esp
f01000c3:	68 0f 40 12 f0       	push   $0xf012400f
f01000c8:	e8 9f 0e 00 00       	call   f0100f6c <cprintf>
f01000cd:	83 c4 10             	add    $0x10,%esp
	{
		//Initialize the Main CPU
		cpu_init(0);
f01000d0:	83 ec 0c             	sub    $0xc,%esp
f01000d3:	6a 00                	push   $0x0
f01000d5:	e8 2d 70 00 00       	call   f0107107 <cpu_init>
f01000da:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("[DONE]\n");
f01000dd:	83 ec 0c             	sub    $0xc,%esp
f01000e0:	68 1b 40 12 f0       	push   $0xf012401b
f01000e5:	e8 82 0e 00 00       	call   f0100f6c <cprintf>
f01000ea:	83 c4 10             	add    $0x10,%esp

	cprintf("* 2) MEMORY:\n");
f01000ed:	83 ec 0c             	sub    $0xc,%esp
f01000f0:	68 23 40 12 f0       	push   $0xf0124023
f01000f5:	e8 72 0e 00 00       	call   f0100f6c <cprintf>
f01000fa:	83 c4 10             	add    $0x10,%esp
	{
		// Lab 2 memory management initialization functions
		detect_memory();
f01000fd:	e8 65 79 00 00       	call   f0107a67 <detect_memory>
		initialize_kernel_VM();
f0100102:	e8 13 75 00 00       	call   f010761a <initialize_kernel_VM>
		initialize_paging();
f0100107:	e8 e0 7c 00 00       	call   f0107dec <initialize_paging>
		initialize_kheap_dynamic_allocator(KERNEL_HEAP_START, PAGE_SIZE, KERNEL_HEAP_START + DYN_ALLOC_MAX_SIZE);
#endif
		//	page_check();
		//setPageReplacmentAlgorithmNchanceCLOCK();
		//setPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX);
		setPageReplacmentAlgorithmFIFO();
f010010c:	e8 b7 e5 00 00       	call   f010e6c8 <setPageReplacmentAlgorithmFIFO>
		//setPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX);

		setUHeapPlacementStrategyFIRSTFIT();
f0100111:	e8 39 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
		setKHeapPlacementStrategyFIRSTFIT();
f0100116:	e8 24 ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>

		enableBuffering(0);
f010011b:	83 ec 0c             	sub    $0xc,%esp
f010011e:	6a 00                	push   $0x0
f0100120:	e8 a0 e6 00 00       	call   f010e7c5 <enableBuffering>
f0100125:	83 c4 10             	add    $0x10,%esp
		//enableModifiedBuffer(1) ;
		enableModifiedBuffer(0) ;
f0100128:	83 ec 0c             	sub    $0xc,%esp
f010012b:	6a 00                	push   $0x0
f010012d:	e8 7b e6 00 00       	call   f010e7ad <enableModifiedBuffer>
f0100132:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(1000);
f0100135:	83 ec 0c             	sub    $0xc,%esp
f0100138:	68 e8 03 00 00       	push   $0x3e8
f010013d:	e8 9b e6 00 00       	call   f010e7dd <setModifiedBufferLength>
f0100142:	83 c4 10             	add    $0x10,%esp

		ide_init();
f0100145:	e8 39 2b 02 00       	call   f0122c83 <ide_init>
	}
	//cprintf("* [DONE]\n");

	cprintf("* 3) USER ENVs...");
f010014a:	83 ec 0c             	sub    $0xc,%esp
f010014d:	68 31 40 12 f0       	push   $0xf0124031
f0100152:	e8 15 0e 00 00       	call   f0100f6c <cprintf>
f0100157:	83 c4 10             	add    $0x10,%esp
	{
		// Lab 3 user environment initialization functions
		env_init();
f010015a:	e8 c3 96 00 00       	call   f0109822 <env_init>
		ts_init();
f010015f:	e8 30 bf 00 00       	call   f010c094 <ts_init>
		//2024: removed. called inside cpuinit()
		//idt_init();
	}
	cprintf("[DONE]\n");
f0100164:	83 ec 0c             	sub    $0xc,%esp
f0100167:	68 1b 40 12 f0       	push   $0xf012401b
f010016c:	e8 fb 0d 00 00       	call   f0100f6c <cprintf>
f0100171:	83 c4 10             	add    $0x10,%esp

	cprintf("* 4) PROGRAMMABLE INTERRUPT CONTROLLER:\n");
f0100174:	83 ec 0c             	sub    $0xc,%esp
f0100177:	68 44 40 12 f0       	push   $0xf0124044
f010017c:	e8 eb 0d 00 00       	call   f0100f6c <cprintf>
f0100181:	83 c4 10             	add    $0x10,%esp
	{
		pic_init();
f0100184:	e8 6a 6c 00 00       	call   f0106df3 <pic_init>
		cprintf("*	PIC is initialized\n");
f0100189:	83 ec 0c             	sub    $0xc,%esp
f010018c:	68 6d 40 12 f0       	push   $0xf012406d
f0100191:	e8 d6 0d 00 00       	call   f0100f6c <cprintf>
f0100196:	83 c4 10             	add    $0x10,%esp
		//Enable Clock Interrupt
		irq_clear_mask(0);
f0100199:	83 ec 0c             	sub    $0xc,%esp
f010019c:	6a 00                	push   $0x0
f010019e:	e8 42 6e 00 00       	call   f0106fe5 <irq_clear_mask>
f01001a3:	83 c4 10             	add    $0x10,%esp
		cprintf("*	IRQ0 (Clock): is Enabled\n");
f01001a6:	83 ec 0c             	sub    $0xc,%esp
f01001a9:	68 83 40 12 f0       	push   $0xf0124083
f01001ae:	e8 b9 0d 00 00       	call   f0100f6c <cprintf>
f01001b3:	83 c4 10             	add    $0x10,%esp
		//Enable KB Interrupt
		irq_clear_mask(1);
f01001b6:	83 ec 0c             	sub    $0xc,%esp
f01001b9:	6a 01                	push   $0x1
f01001bb:	e8 25 6e 00 00       	call   f0106fe5 <irq_clear_mask>
f01001c0:	83 c4 10             	add    $0x10,%esp
		cprintf("*	IRQ1 (Keyboard): is Enabled\n");
f01001c3:	83 ec 0c             	sub    $0xc,%esp
f01001c6:	68 a0 40 12 f0       	push   $0xf01240a0
f01001cb:	e8 9c 0d 00 00       	call   f0100f6c <cprintf>
f01001d0:	83 c4 10             	add    $0x10,%esp
		//Enable COM1 Interrupt
		irq_clear_mask(4);
f01001d3:	83 ec 0c             	sub    $0xc,%esp
f01001d6:	6a 04                	push   $0x4
f01001d8:	e8 08 6e 00 00       	call   f0106fe5 <irq_clear_mask>
f01001dd:	83 c4 10             	add    $0x10,%esp
		cprintf("*	IRQ4 (COM1): is Enabled\n");
f01001e0:	83 ec 0c             	sub    $0xc,%esp
f01001e3:	68 bf 40 12 f0       	push   $0xf01240bf
f01001e8:	e8 7f 0d 00 00       	call   f0100f6c <cprintf>
f01001ed:	83 c4 10             	add    $0x10,%esp
		//Enable Primary ATA Hard Disk Interrupt
//		irq_clear_mask(14);
//		cprintf("*	IRQ14 (Primary ATA Hard Disk): is Enabled\n");
	}
	cprintf("* 5) SCHEDULER & MULTI-TASKING:\n");
f01001f0:	83 ec 0c             	sub    $0xc,%esp
f01001f3:	68 dc 40 12 f0       	push   $0xf01240dc
f01001f8:	e8 6f 0d 00 00       	call   f0100f6c <cprintf>
f01001fd:	83 c4 10             	add    $0x10,%esp
	{
		// Lab 4 multitasking initialization functions
		kclock_init();
f0100200:	e8 c1 49 00 00       	call   f0104bc6 <kclock_init>
		sched_init() ;
f0100205:	e8 44 65 00 00       	call   f010674e <sched_init>
	}
	//cprintf("* [DONE]\n");

	cprintf("* 6) ESP to SCHED KERN STACK:\n");
f010020a:	83 ec 0c             	sub    $0xc,%esp
f010020d:	68 00 41 12 f0       	push   $0xf0124100
f0100212:	e8 55 0d 00 00       	call   f0100f6c <cprintf>
f0100217:	83 c4 10             	add    $0x10,%esp

static __inline uint32
read_esp(void)
{
        uint32 esp;
        __asm __volatile("movl %%esp,%0" : "=r" (esp));
f010021a:	89 e0                	mov    %esp,%eax
f010021c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        return esp;
f010021f:	8b 45 e8             	mov    -0x18(%ebp),%eax
	{
		//Relocate SP to its corresponding location in the specific stack area below KERN_BASE (SCHD_KERN_STACK_TOP)
		uint32 old_sp = read_esp();
f0100222:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32 sp_offset = (uint32)ptr_stack_top - old_sp ;
f0100225:	b8 00 e0 17 f0       	mov    $0xf017e000,%eax
f010022a:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010022d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 new_sp = KERN_STACK_TOP - sp_offset;
f0100230:	b8 00 00 c0 ef       	mov    $0xefc00000,%eax
f0100235:	2b 45 f0             	sub    -0x10(%ebp),%eax
f0100238:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010023b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010023e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
}

static __inline void
write_esp(uint32 esp)
{
	__asm __volatile("movl %0,%%esp" : : "r" (esp) );
f0100241:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100244:	89 c4                	mov    %eax,%esp

static __inline uint32
read_esp(void)
{
        uint32 esp;
        __asm __volatile("movl %%esp,%0" : "=r" (esp));
f0100246:	89 e0                	mov    %esp,%eax
f0100248:	89 45 e0             	mov    %eax,-0x20(%ebp)
        return esp;
f010024b:	8b 45 e0             	mov    -0x20(%ebp),%eax
		write_esp(new_sp);
		cprintf("*	old SP = %x - updated SP = %x\n", old_sp, read_esp());
f010024e:	83 ec 04             	sub    $0x4,%esp
f0100251:	50                   	push   %eax
f0100252:	ff 75 f4             	pushl  -0xc(%ebp)
f0100255:	68 20 41 12 f0       	push   $0xf0124120
f010025a:	e8 0d 0d 00 00       	call   f0100f6c <cprintf>
f010025f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("********************************************************************\n");
f0100262:	83 ec 0c             	sub    $0xc,%esp
f0100265:	68 44 41 12 f0       	push   $0xf0124144
f010026a:	e8 fd 0c 00 00       	call   f0100f6c <cprintf>
f010026f:	83 c4 10             	add    $0x10,%esp

	// start the kernel command prompt.
	autograde = 0;
f0100272:	c7 05 7c 2b 5a f0 00 	movl   $0x0,0xf05a2b7c
f0100279:	00 00 00 
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f010027c:	83 ec 0c             	sub    $0xc,%esp
f010027f:	68 8c 41 12 f0       	push   $0xf012418c
f0100284:	e8 e3 0c 00 00       	call   f0100f6c <cprintf>
f0100289:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f010028c:	83 ec 0c             	sub    $0xc,%esp
f010028f:	68 b8 41 12 f0       	push   $0xf01241b8
f0100294:	e8 d3 0c 00 00       	call   f0100f6c <cprintf>
f0100299:	83 c4 10             	add    $0x10,%esp
		get_into_prompt();
f010029c:	e8 02 1b 00 00       	call   f0101da3 <get_into_prompt>

f01002a1 <print_welcome_message>:
	}
}


void print_welcome_message()
{
f01002a1:	55                   	push   %ebp
f01002a2:	89 e5                	mov    %esp,%ebp
f01002a4:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f01002a7:	83 ec 0c             	sub    $0xc,%esp
f01002aa:	68 dd 41 12 f0       	push   $0xf01241dd
f01002af:	e8 b8 0c 00 00       	call   f0100f6c <cprintf>
f01002b4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01002b7:	83 ec 0c             	sub    $0xc,%esp
f01002ba:	68 e4 41 12 f0       	push   $0xf01241e4
f01002bf:	e8 a8 0c 00 00       	call   f0100f6c <cprintf>
f01002c4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01002c7:	83 ec 0c             	sub    $0xc,%esp
f01002ca:	68 2c 42 12 f0       	push   $0xf012422c
f01002cf:	e8 98 0c 00 00       	call   f0100f6c <cprintf>
f01002d4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f01002d7:	83 ec 0c             	sub    $0xc,%esp
f01002da:	68 74 42 12 f0       	push   $0xf0124274
f01002df:	e8 88 0c 00 00       	call   f0100f6c <cprintf>
f01002e4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01002e7:	83 ec 0c             	sub    $0xc,%esp
f01002ea:	68 2c 42 12 f0       	push   $0xf012422c
f01002ef:	e8 78 0c 00 00       	call   f0100f6c <cprintf>
f01002f4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01002f7:	83 ec 0c             	sub    $0xc,%esp
f01002fa:	68 e4 41 12 f0       	push   $0xf01241e4
f01002ff:	e8 68 0c 00 00       	call   f0100f6c <cprintf>
f0100304:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f0100307:	83 ec 0c             	sub    $0xc,%esp
f010030a:	68 b9 42 12 f0       	push   $0xf01242b9
f010030f:	e8 58 0c 00 00       	call   f0100f6c <cprintf>
f0100314:	83 c4 10             	add    $0x10,%esp
}
f0100317:	90                   	nop
f0100318:	c9                   	leave  
f0100319:	c3                   	ret    

f010031a <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f010031a:	55                   	push   %ebp
f010031b:	89 e5                	mov    %esp,%ebp
f010031d:	83 ec 18             	sub    $0x18,%esp
	struct Env* cur_env = get_cpu_proc();
f0100320:	e8 4b a4 00 00       	call   f010a770 <get_cpu_proc>
f0100325:	89 45 f4             	mov    %eax,-0xc(%ebp)

	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100328:	8b 45 10             	mov    0x10(%ebp),%eax
f010032b:	a3 60 f1 59 f0       	mov    %eax,0xf059f160

	va_start(ap, fmt);
f0100330:	8d 45 10             	lea    0x10(%ebp),%eax
f0100333:	83 c0 04             	add    $0x4,%eax
f0100336:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\nkernel [EVAL_FINAL]panic at %s:%d: ", file, line);
f0100339:	83 ec 04             	sub    $0x4,%esp
f010033c:	ff 75 0c             	pushl  0xc(%ebp)
f010033f:	ff 75 08             	pushl  0x8(%ebp)
f0100342:	68 c0 42 12 f0       	push   $0xf01242c0
f0100347:	e8 20 0c 00 00       	call   f0100f6c <cprintf>
f010034c:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010034f:	8b 45 10             	mov    0x10(%ebp),%eax
f0100352:	83 ec 08             	sub    $0x8,%esp
f0100355:	ff 75 f0             	pushl  -0x10(%ebp)
f0100358:	50                   	push   %eax
f0100359:	e8 e5 0b 00 00       	call   f0100f43 <vcprintf>
f010035e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100361:	83 ec 0c             	sub    $0xc,%esp
f0100364:	68 e5 42 12 f0       	push   $0xf01242e5
f0100369:	e8 fe 0b 00 00       	call   f0100f6c <cprintf>
f010036e:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (cur_env != NULL && cur_env->env_status == ENV_RUNNING)
f0100371:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100375:	74 10                	je     f0100387 <_panic+0x6d>
f0100377:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010037a:	8b 40 18             	mov    0x18(%eax),%eax
f010037d:	83 f8 02             	cmp    $0x2,%eax
f0100380:	75 05                	jne    f0100387 <_panic+0x6d>
	{
		//cprintf("\n>>>>>>>>>>> exiting the cur env<<<<<<<<<<<<\n");
		//Place the running env into the exit queue then switch to the scheduler
		env_exit(); //env_exit --> sched_exit_env --> sched --> context_switch into fos_scheduler
f0100382:	e8 a7 a3 00 00       	call   f010a72e <env_exit>

static __inline uint32
read_esp(void)
{
        uint32 esp;
        __asm __volatile("movl %%esp,%0" : "=r" (esp));
f0100387:	89 e0                	mov    %esp,%eax
f0100389:	89 45 e8             	mov    %eax,-0x18(%ebp)
        return esp;
f010038c:	8b 45 e8             	mov    -0x18(%ebp),%eax
	}
	//else //2024: panic from Kernel and no current running env
	{
		char* esp = (char*)read_esp();
f010038f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		cprintf("esp = %x\n", esp);
f0100392:	83 ec 08             	sub    $0x8,%esp
f0100395:	ff 75 ec             	pushl  -0x14(%ebp)
f0100398:	68 e7 42 12 f0       	push   $0xf01242e7
f010039d:	e8 ca 0b 00 00       	call   f0100f6c <cprintf>
f01003a2:	83 c4 10             	add    $0x10,%esp
		get_into_prompt();
f01003a5:	e8 f9 19 00 00       	call   f0101da3 <get_into_prompt>

f01003aa <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f01003aa:	55                   	push   %ebp
f01003ab:	89 e5                	mov    %esp,%ebp
f01003ad:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01003b0:	8b 45 10             	mov    0x10(%ebp),%eax
f01003b3:	a3 60 f1 59 f0       	mov    %eax,0xf059f160

	va_start(ap, fmt);
f01003b8:	8d 45 10             	lea    0x10(%ebp),%eax
f01003bb:	83 c0 04             	add    $0x4,%eax
f01003be:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01003c1:	83 ec 04             	sub    $0x4,%esp
f01003c4:	ff 75 0c             	pushl  0xc(%ebp)
f01003c7:	ff 75 08             	pushl  0x8(%ebp)
f01003ca:	68 f1 42 12 f0       	push   $0xf01242f1
f01003cf:	e8 98 0b 00 00       	call   f0100f6c <cprintf>
f01003d4:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01003d7:	8b 45 10             	mov    0x10(%ebp),%eax
f01003da:	83 ec 08             	sub    $0x8,%esp
f01003dd:	ff 75 f4             	pushl  -0xc(%ebp)
f01003e0:	50                   	push   %eax
f01003e1:	e8 5d 0b 00 00       	call   f0100f43 <vcprintf>
f01003e6:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003e9:	83 ec 0c             	sub    $0xc,%esp
f01003ec:	68 e5 42 12 f0       	push   $0xf01242e5
f01003f1:	e8 76 0b 00 00       	call   f0100f6c <cprintf>
f01003f6:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the command prompt */
	pushcli();
f01003f9:	e8 c2 6d 00 00       	call   f01071c0 <pushcli>
	struct cpu *c = mycpu();
f01003fe:	e8 fa 6c 00 00       	call   f01070fd <mycpu>
f0100403:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int sched_stat = c->scheduler_status;
f0100406:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100409:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
f010040f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	popcli();
f0100412:	e8 fb 6d 00 00       	call   f0107212 <popcli>
	/*2022*///Check if the scheduler is successfully initialized or not
	if (sched_stat != SCH_UNINITIALIZED)
f0100417:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
f010041b:	74 23                	je     f0100440 <_panic_all+0x96>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f010041d:	e8 b2 60 00 00       	call   f01064d4 <sched_exit_all_ready_envs>
		struct Env* cur_env = get_cpu_proc();
f0100422:	e8 49 a3 00 00       	call   f010a770 <get_cpu_proc>
f0100427:	89 45 e8             	mov    %eax,-0x18(%ebp)
		if (cur_env != NULL && cur_env->env_status == ENV_RUNNING)
f010042a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010042e:	74 10                	je     f0100440 <_panic_all+0x96>
f0100430:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100433:	8b 40 18             	mov    0x18(%eax),%eax
f0100436:	83 f8 02             	cmp    $0x2,%eax
f0100439:	75 05                	jne    f0100440 <_panic_all+0x96>
		{
			//cprintf("exit curenv...........\n");
			//Place the running env into the exit queue then switch to the scheduler
			env_exit(); //env_exit --> sched_exit_env --> sched --> context_switch into fos_scheduler
f010043b:	e8 ee a2 00 00       	call   f010a72e <env_exit>
		}
	}
	//else //2024: panic from Kernel and no current running env
	{
		get_into_prompt();
f0100440:	e8 5e 19 00 00       	call   f0101da3 <get_into_prompt>

f0100445 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f0100445:	55                   	push   %ebp
f0100446:	89 e5                	mov    %esp,%ebp
f0100448:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010044b:	8b 45 10             	mov    0x10(%ebp),%eax
f010044e:	a3 60 f1 59 f0       	mov    %eax,0xf059f160

	va_start(ap, fmt);
f0100453:	8d 45 10             	lea    0x10(%ebp),%eax
f0100456:	83 c0 04             	add    $0x4,%eax
f0100459:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010045c:	83 ec 04             	sub    $0x4,%esp
f010045f:	ff 75 0c             	pushl  0xc(%ebp)
f0100462:	ff 75 08             	pushl  0x8(%ebp)
f0100465:	68 f1 42 12 f0       	push   $0xf01242f1
f010046a:	e8 fd 0a 00 00       	call   f0100f6c <cprintf>
f010046f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100472:	8b 45 10             	mov    0x10(%ebp),%eax
f0100475:	83 ec 08             	sub    $0x8,%esp
f0100478:	ff 75 f4             	pushl  -0xc(%ebp)
f010047b:	50                   	push   %eax
f010047c:	e8 c2 0a 00 00       	call   f0100f43 <vcprintf>
f0100481:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100484:	83 ec 0c             	sub    $0xc,%esp
f0100487:	68 e5 42 12 f0       	push   $0xf01242e5
f010048c:	e8 db 0a 00 00       	call   f0100f6c <cprintf>
f0100491:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

//	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	struct Env* cur_env = get_cpu_proc();
f0100494:	e8 d7 a2 00 00       	call   f010a770 <get_cpu_proc>
f0100499:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (cur_env != NULL && cur_env->env_status == ENV_RUNNING)
f010049c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01004a0:	74 10                	je     f01004b2 <_panic_into_prompt+0x6d>
f01004a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01004a5:	8b 40 18             	mov    0x18(%eax),%eax
f01004a8:	83 f8 02             	cmp    $0x2,%eax
f01004ab:	75 05                	jne    f01004b2 <_panic_into_prompt+0x6d>
	{
		//Place the running env into the exit queue then switch to the scheduler
		env_exit(); //env_exit --> sched_exit_env --> sched --> context_switch into fos_scheduler
f01004ad:	e8 7c a2 00 00       	call   f010a72e <env_exit>
	}

	get_into_prompt();
f01004b2:	e8 ec 18 00 00       	call   f0101da3 <get_into_prompt>

f01004b7 <_warn>:
}


/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f01004b7:	55                   	push   %ebp
f01004b8:	89 e5                	mov    %esp,%ebp
f01004ba:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f01004bd:	8d 45 10             	lea    0x10(%ebp),%eax
f01004c0:	83 c0 04             	add    $0x4,%eax
f01004c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f01004c6:	83 ec 04             	sub    $0x4,%esp
f01004c9:	ff 75 0c             	pushl  0xc(%ebp)
f01004cc:	ff 75 08             	pushl  0x8(%ebp)
f01004cf:	68 0a 43 12 f0       	push   $0xf012430a
f01004d4:	e8 93 0a 00 00       	call   f0100f6c <cprintf>
f01004d9:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01004dc:	8b 45 10             	mov    0x10(%ebp),%eax
f01004df:	83 ec 08             	sub    $0x8,%esp
f01004e2:	ff 75 f4             	pushl  -0xc(%ebp)
f01004e5:	50                   	push   %eax
f01004e6:	e8 58 0a 00 00       	call   f0100f43 <vcprintf>
f01004eb:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01004ee:	83 ec 0c             	sub    $0xc,%esp
f01004f1:	68 e5 42 12 f0       	push   $0xf01242e5
f01004f6:	e8 71 0a 00 00       	call   f0100f6c <cprintf>
f01004fb:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f01004fe:	90                   	nop
f01004ff:	c9                   	leave  
f0100500:	c3                   	ret    

f0100501 <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f0100501:	55                   	push   %ebp
f0100502:	89 e5                	mov    %esp,%ebp
f0100504:	83 ec 10             	sub    $0x10,%esp
f0100507:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010050e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100511:	89 c2                	mov    %eax,%edx
f0100513:	ec                   	in     (%dx),%al
f0100514:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100517:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f010051a:	0f b6 c0             	movzbl %al,%eax
f010051d:	83 e0 01             	and    $0x1,%eax
f0100520:	85 c0                	test   %eax,%eax
f0100522:	75 07                	jne    f010052b <serial_proc_data+0x2a>
		return -1;
f0100524:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100529:	eb 16                	jmp    f0100541 <serial_proc_data+0x40>
f010052b:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100532:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100535:	89 c2                	mov    %eax,%edx
f0100537:	ec                   	in     (%dx),%al
f0100538:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f010053b:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f010053e:	0f b6 c0             	movzbl %al,%eax
}
f0100541:	c9                   	leave  
f0100542:	c3                   	ret    

f0100543 <serial_intr>:

void
serial_intr(void)
{
f0100543:	55                   	push   %ebp
f0100544:	89 e5                	mov    %esp,%ebp
f0100546:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f0100549:	a1 84 f1 59 f0       	mov    0xf059f184,%eax
f010054e:	85 c0                	test   %eax,%eax
f0100550:	74 10                	je     f0100562 <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f0100552:	83 ec 0c             	sub    $0xc,%esp
f0100555:	68 01 05 10 f0       	push   $0xf0100501
f010055a:	e8 9d 07 00 00       	call   f0100cfc <cons_intr>
f010055f:	83 c4 10             	add    $0x10,%esp
}
f0100562:	90                   	nop
f0100563:	c9                   	leave  
f0100564:	c3                   	ret    

f0100565 <serial_interrupt_handler>:

void serial_interrupt_handler(struct Trapframe* tf)
{
f0100565:	55                   	push   %ebp
f0100566:	89 e5                	mov    %esp,%ebp
f0100568:	83 ec 08             	sub    $0x8,%esp
	cprintf("\nserial interrupt\n");
f010056b:	83 ec 0c             	sub    $0xc,%esp
f010056e:	68 28 43 12 f0       	push   $0xf0124328
f0100573:	e8 f4 09 00 00       	call   f0100f6c <cprintf>
f0100578:	83 c4 10             	add    $0x10,%esp
	serial_intr();
f010057b:	e8 c3 ff ff ff       	call   f0100543 <serial_intr>
}
f0100580:	90                   	nop
f0100581:	c9                   	leave  
f0100582:	c3                   	ret    

f0100583 <serial_init>:

void
serial_init(void)
{
f0100583:	55                   	push   %ebp
f0100584:	89 e5                	mov    %esp,%ebp
f0100586:	83 ec 48             	sub    $0x48,%esp
f0100589:	c7 45 f4 fa 03 00 00 	movl   $0x3fa,-0xc(%ebp)
f0100590:	c6 45 c6 00          	movb   $0x0,-0x3a(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100594:	8a 45 c6             	mov    -0x3a(%ebp),%al
f0100597:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010059a:	ee                   	out    %al,(%dx)
f010059b:	c7 45 f0 fb 03 00 00 	movl   $0x3fb,-0x10(%ebp)
f01005a2:	c6 45 c7 80          	movb   $0x80,-0x39(%ebp)
f01005a6:	8a 45 c7             	mov    -0x39(%ebp),%al
f01005a9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01005ac:	ee                   	out    %al,(%dx)
f01005ad:	c7 45 ec f8 03 00 00 	movl   $0x3f8,-0x14(%ebp)
f01005b4:	c6 45 c8 0c          	movb   $0xc,-0x38(%ebp)
f01005b8:	8a 45 c8             	mov    -0x38(%ebp),%al
f01005bb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01005be:	ee                   	out    %al,(%dx)
f01005bf:	c7 45 e8 f9 03 00 00 	movl   $0x3f9,-0x18(%ebp)
f01005c6:	c6 45 c9 00          	movb   $0x0,-0x37(%ebp)
f01005ca:	8a 45 c9             	mov    -0x37(%ebp),%al
f01005cd:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01005d0:	ee                   	out    %al,(%dx)
f01005d1:	c7 45 e4 fb 03 00 00 	movl   $0x3fb,-0x1c(%ebp)
f01005d8:	c6 45 ca 03          	movb   $0x3,-0x36(%ebp)
f01005dc:	8a 45 ca             	mov    -0x36(%ebp),%al
f01005df:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01005e2:	ee                   	out    %al,(%dx)
f01005e3:	c7 45 e0 fc 03 00 00 	movl   $0x3fc,-0x20(%ebp)
f01005ea:	c6 45 cb 00          	movb   $0x0,-0x35(%ebp)
f01005ee:	8a 45 cb             	mov    -0x35(%ebp),%al
f01005f1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01005f4:	ee                   	out    %al,(%dx)
f01005f5:	c7 45 dc f9 03 00 00 	movl   $0x3f9,-0x24(%ebp)
f01005fc:	c6 45 cc 01          	movb   $0x1,-0x34(%ebp)
f0100600:	8a 45 cc             	mov    -0x34(%ebp),%al
f0100603:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0100606:	ee                   	out    %al,(%dx)
f0100607:	c7 45 d8 fd 03 00 00 	movl   $0x3fd,-0x28(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010060e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0100611:	89 c2                	mov    %eax,%edx
f0100613:	ec                   	in     (%dx),%al
f0100614:	88 45 cd             	mov    %al,-0x33(%ebp)
	return data;
f0100617:	8a 45 cd             	mov    -0x33(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f010061a:	3c ff                	cmp    $0xff,%al
f010061c:	0f 95 c0             	setne  %al
f010061f:	0f b6 c0             	movzbl %al,%eax
f0100622:	a3 84 f1 59 f0       	mov    %eax,0xf059f184
f0100627:	c7 45 d4 fa 03 00 00 	movl   $0x3fa,-0x2c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010062e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0100631:	89 c2                	mov    %eax,%edx
f0100633:	ec                   	in     (%dx),%al
f0100634:	88 45 ce             	mov    %al,-0x32(%ebp)
f0100637:	c7 45 d0 f8 03 00 00 	movl   $0x3f8,-0x30(%ebp)
f010063e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0100641:	89 c2                	mov    %eax,%edx
f0100643:	ec                   	in     (%dx),%al
f0100644:	88 45 cf             	mov    %al,-0x31(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

	irq_install_handler(4, &serial_interrupt_handler);
f0100647:	83 ec 08             	sub    $0x8,%esp
f010064a:	68 65 05 10 f0       	push   $0xf0100565
f010064f:	6a 04                	push   $0x4
f0100651:	e8 42 cd 00 00       	call   f010d398 <irq_install_handler>
f0100656:	83 c4 10             	add    $0x10,%esp

}
f0100659:	90                   	nop
f010065a:	c9                   	leave  
f010065b:	c3                   	ret    

f010065c <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f010065c:	55                   	push   %ebp
f010065d:	89 e5                	mov    %esp,%ebp
f010065f:	83 ec 20             	sub    $0x20,%esp
f0100662:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100669:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010066c:	89 c2                	mov    %eax,%edx
f010066e:	ec                   	in     (%dx),%al
f010066f:	88 45 ec             	mov    %al,-0x14(%ebp)
f0100672:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f0100679:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010067c:	89 c2                	mov    %eax,%edx
f010067e:	ec                   	in     (%dx),%al
f010067f:	88 45 ed             	mov    %al,-0x13(%ebp)
f0100682:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f0100689:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010068c:	89 c2                	mov    %eax,%edx
f010068e:	ec                   	in     (%dx),%al
f010068f:	88 45 ee             	mov    %al,-0x12(%ebp)
f0100692:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f0100699:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010069c:	89 c2                	mov    %eax,%edx
f010069e:	ec                   	in     (%dx),%al
f010069f:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01006a2:	90                   	nop
f01006a3:	c9                   	leave  
f01006a4:	c3                   	ret    

f01006a5 <lpt_putc>:

static void
lpt_putc(int c)
{
f01006a5:	55                   	push   %ebp
f01006a6:	89 e5                	mov    %esp,%ebp
f01006a8:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01006ab:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01006b2:	eb 08                	jmp    f01006bc <lpt_putc+0x17>
		delay();
f01006b4:	e8 a3 ff ff ff       	call   f010065c <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01006b9:	ff 45 fc             	incl   -0x4(%ebp)
f01006bc:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f01006c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01006c6:	89 c2                	mov    %eax,%edx
f01006c8:	ec                   	in     (%dx),%al
f01006c9:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01006cc:	8a 45 eb             	mov    -0x15(%ebp),%al
f01006cf:	84 c0                	test   %al,%al
f01006d1:	78 09                	js     f01006dc <lpt_putc+0x37>
f01006d3:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f01006da:	7e d8                	jle    f01006b4 <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f01006dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01006df:	0f b6 c0             	movzbl %al,%eax
f01006e2:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f01006e9:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01006ec:	8a 45 e8             	mov    -0x18(%ebp),%al
f01006ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01006f2:	ee                   	out    %al,(%dx)
f01006f3:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f01006fa:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f01006fe:	8a 45 e9             	mov    -0x17(%ebp),%al
f0100701:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100704:	ee                   	out    %al,(%dx)
f0100705:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f010070c:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f0100710:	8a 45 ea             	mov    -0x16(%ebp),%al
f0100713:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100716:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100717:	90                   	nop
f0100718:	c9                   	leave  
f0100719:	c3                   	ret    

f010071a <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f010071a:	55                   	push   %ebp
f010071b:	89 e5                	mov    %esp,%ebp
f010071d:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f0100720:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100727:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010072a:	66 8b 00             	mov    (%eax),%ax
f010072d:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f0100731:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100734:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100739:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010073c:	66 8b 00             	mov    (%eax),%ax
f010073f:	66 3d 5a a5          	cmp    $0xa55a,%ax
f0100743:	74 13                	je     f0100758 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100745:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f010074c:	c7 05 88 f1 59 f0 b4 	movl   $0x3b4,0xf059f188
f0100753:	03 00 00 
f0100756:	eb 14                	jmp    f010076c <cga_init+0x52>
	} else {
		*cp = was;
f0100758:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010075b:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f010075f:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f0100762:	c7 05 88 f1 59 f0 d4 	movl   $0x3d4,0xf059f188
f0100769:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f010076c:	a1 88 f1 59 f0       	mov    0xf059f188,%eax
f0100771:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100774:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f0100778:	8a 45 e0             	mov    -0x20(%ebp),%al
f010077b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010077e:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f010077f:	a1 88 f1 59 f0       	mov    0xf059f188,%eax
f0100784:	40                   	inc    %eax
f0100785:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100788:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010078b:	89 c2                	mov    %eax,%edx
f010078d:	ec                   	in     (%dx),%al
f010078e:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f0100791:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100794:	0f b6 c0             	movzbl %al,%eax
f0100797:	c1 e0 08             	shl    $0x8,%eax
f010079a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f010079d:	a1 88 f1 59 f0       	mov    0xf059f188,%eax
f01007a2:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01007a5:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01007a9:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01007ac:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01007af:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01007b0:	a1 88 f1 59 f0       	mov    0xf059f188,%eax
f01007b5:	40                   	inc    %eax
f01007b6:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01007b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01007bc:	89 c2                	mov    %eax,%edx
f01007be:	ec                   	in     (%dx),%al
f01007bf:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f01007c2:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01007c5:	0f b6 c0             	movzbl %al,%eax
f01007c8:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01007cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01007ce:	a3 8c f1 59 f0       	mov    %eax,0xf059f18c
	crt_pos = pos;
f01007d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01007d6:	66 a3 90 f1 59 f0    	mov    %ax,0xf059f190
}
f01007dc:	90                   	nop
f01007dd:	c9                   	leave  
f01007de:	c3                   	ret    

f01007df <cga_putc>:
//2016: Preliminary backward and forward cursor movement was added to FOS
// 		Thanks to student Abdullah Mohammad Ma3en, 3rd year, and TA Ghada Hamed.

void
cga_putc(int c)
{
f01007df:	55                   	push   %ebp
f01007e0:	89 e5                	mov    %esp,%ebp
f01007e2:	53                   	push   %ebx
f01007e3:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f01007e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01007e9:	b0 00                	mov    $0x0,%al
f01007eb:	85 c0                	test   %eax,%eax
f01007ed:	75 07                	jne    f01007f6 <cga_putc+0x17>
		c |= 0x0700;
f01007ef:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f01007f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01007f9:	0f b6 c0             	movzbl %al,%eax
f01007fc:	83 f8 0a             	cmp    $0xa,%eax
f01007ff:	74 77                	je     f0100878 <cga_putc+0x99>
f0100801:	83 f8 0a             	cmp    $0xa,%eax
f0100804:	7f 13                	jg     f0100819 <cga_putc+0x3a>
f0100806:	83 f8 08             	cmp    $0x8,%eax
f0100809:	74 2e                	je     f0100839 <cga_putc+0x5a>
f010080b:	83 f8 09             	cmp    $0x9,%eax
f010080e:	0f 84 a8 00 00 00    	je     f01008bc <cga_putc+0xdd>
f0100814:	e9 22 01 00 00       	jmp    f010093b <cga_putc+0x15c>
f0100819:	3d e4 00 00 00       	cmp    $0xe4,%eax
f010081e:	0f 84 de 00 00 00    	je     f0100902 <cga_putc+0x123>
f0100824:	3d e5 00 00 00       	cmp    $0xe5,%eax
f0100829:	0f 84 f1 00 00 00    	je     f0100920 <cga_putc+0x141>
f010082f:	83 f8 0d             	cmp    $0xd,%eax
f0100832:	74 5d                	je     f0100891 <cga_putc+0xb2>
f0100834:	e9 02 01 00 00       	jmp    f010093b <cga_putc+0x15c>
	case '\b':
		if (crt_pos > 0) {
f0100839:	66 a1 90 f1 59 f0    	mov    0xf059f190,%ax
f010083f:	66 85 c0             	test   %ax,%ax
f0100842:	0f 84 4f 01 00 00    	je     f0100997 <cga_putc+0x1b8>
			crt_pos--;
f0100848:	66 a1 90 f1 59 f0    	mov    0xf059f190,%ax
f010084e:	48                   	dec    %eax
f010084f:	66 a3 90 f1 59 f0    	mov    %ax,0xf059f190
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f0100855:	8b 15 8c f1 59 f0    	mov    0xf059f18c,%edx
f010085b:	66 a1 90 f1 59 f0    	mov    0xf059f190,%ax
f0100861:	0f b7 c0             	movzwl %ax,%eax
f0100864:	01 c0                	add    %eax,%eax
f0100866:	01 c2                	add    %eax,%edx
f0100868:	8b 45 08             	mov    0x8(%ebp),%eax
f010086b:	b0 00                	mov    $0x0,%al
f010086d:	83 c8 20             	or     $0x20,%eax
f0100870:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f0100873:	e9 1f 01 00 00       	jmp    f0100997 <cga_putc+0x1b8>
	case '\n':
		crt_pos += CRT_COLS;
f0100878:	66 a1 90 f1 59 f0    	mov    0xf059f190,%ax
f010087e:	83 c0 50             	add    $0x50,%eax
f0100881:	66 a3 90 f1 59 f0    	mov    %ax,0xf059f190
		text_length = 0;
f0100887:	c7 05 80 f1 59 f0 00 	movl   $0x0,0xf059f180
f010088e:	00 00 00 
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f0100891:	66 8b 0d 90 f1 59 f0 	mov    0xf059f190,%cx
f0100898:	66 a1 90 f1 59 f0    	mov    0xf059f190,%ax
f010089e:	bb 50 00 00 00       	mov    $0x50,%ebx
f01008a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01008a8:	66 f7 f3             	div    %bx
f01008ab:	89 d0                	mov    %edx,%eax
f01008ad:	29 c1                	sub    %eax,%ecx
f01008af:	89 c8                	mov    %ecx,%eax
f01008b1:	66 a3 90 f1 59 f0    	mov    %ax,0xf059f190
		break;
f01008b7:	e9 e5 00 00 00       	jmp    f01009a1 <cga_putc+0x1c2>
	case '\t':
		cons_putc(' ');
f01008bc:	83 ec 0c             	sub    $0xc,%esp
f01008bf:	6a 20                	push   $0x20
f01008c1:	e8 30 05 00 00       	call   f0100df6 <cons_putc>
f01008c6:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01008c9:	83 ec 0c             	sub    $0xc,%esp
f01008cc:	6a 20                	push   $0x20
f01008ce:	e8 23 05 00 00       	call   f0100df6 <cons_putc>
f01008d3:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01008d6:	83 ec 0c             	sub    $0xc,%esp
f01008d9:	6a 20                	push   $0x20
f01008db:	e8 16 05 00 00       	call   f0100df6 <cons_putc>
f01008e0:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01008e3:	83 ec 0c             	sub    $0xc,%esp
f01008e6:	6a 20                	push   $0x20
f01008e8:	e8 09 05 00 00       	call   f0100df6 <cons_putc>
f01008ed:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01008f0:	83 ec 0c             	sub    $0xc,%esp
f01008f3:	6a 20                	push   $0x20
f01008f5:	e8 fc 04 00 00       	call   f0100df6 <cons_putc>
f01008fa:	83 c4 10             	add    $0x10,%esp
		break;
f01008fd:	e9 9f 00 00 00       	jmp    f01009a1 <cga_putc+0x1c2>
	case 228:
		if(crt_pos>0)
f0100902:	66 a1 90 f1 59 f0    	mov    0xf059f190,%ax
f0100908:	66 85 c0             	test   %ax,%ax
f010090b:	0f 84 89 00 00 00    	je     f010099a <cga_putc+0x1bb>
			crt_pos--;
f0100911:	66 a1 90 f1 59 f0    	mov    0xf059f190,%ax
f0100917:	48                   	dec    %eax
f0100918:	66 a3 90 f1 59 f0    	mov    %ax,0xf059f190
		break;
f010091e:	eb 7a                	jmp    f010099a <cga_putc+0x1bb>
	case 229:
		if (crt_pos < CRT_SIZE)
f0100920:	66 a1 90 f1 59 f0    	mov    0xf059f190,%ax
f0100926:	66 3d cf 07          	cmp    $0x7cf,%ax
f010092a:	77 71                	ja     f010099d <cga_putc+0x1be>
			crt_pos++;
f010092c:	66 a1 90 f1 59 f0    	mov    0xf059f190,%ax
f0100932:	40                   	inc    %eax
f0100933:	66 a3 90 f1 59 f0    	mov    %ax,0xf059f190
		break;
f0100939:	eb 62                	jmp    f010099d <cga_putc+0x1be>
	default: {
		if (c != KEY_LF && c != KEY_RT) {
f010093b:	81 7d 08 e4 00 00 00 	cmpl   $0xe4,0x8(%ebp)
f0100942:	74 5c                	je     f01009a0 <cga_putc+0x1c1>
f0100944:	81 7d 08 e5 00 00 00 	cmpl   $0xe5,0x8(%ebp)
f010094b:	74 53                	je     f01009a0 <cga_putc+0x1c1>
			crt_buf[crt_pos++] = c;		/* write the character */
f010094d:	8b 0d 8c f1 59 f0    	mov    0xf059f18c,%ecx
f0100953:	66 a1 90 f1 59 f0    	mov    0xf059f190,%ax
f0100959:	8d 50 01             	lea    0x1(%eax),%edx
f010095c:	66 89 15 90 f1 59 f0 	mov    %dx,0xf059f190
f0100963:	0f b7 c0             	movzwl %ax,%eax
f0100966:	01 c0                	add    %eax,%eax
f0100968:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010096b:	8b 45 08             	mov    0x8(%ebp),%eax
f010096e:	66 89 02             	mov    %ax,(%edx)
			if (crt_pos > 1920 + text_length)
f0100971:	66 a1 90 f1 59 f0    	mov    0xf059f190,%ax
f0100977:	0f b7 c0             	movzwl %ax,%eax
f010097a:	8b 15 80 f1 59 f0    	mov    0xf059f180,%edx
f0100980:	81 c2 80 07 00 00    	add    $0x780,%edx
f0100986:	39 d0                	cmp    %edx,%eax
f0100988:	7e 16                	jle    f01009a0 <cga_putc+0x1c1>
				text_length++;
f010098a:	a1 80 f1 59 f0       	mov    0xf059f180,%eax
f010098f:	40                   	inc    %eax
f0100990:	a3 80 f1 59 f0       	mov    %eax,0xf059f180
		}
		break;
f0100995:	eb 09                	jmp    f01009a0 <cga_putc+0x1c1>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f0100997:	90                   	nop
f0100998:	eb 07                	jmp    f01009a1 <cga_putc+0x1c2>
		cons_putc(' ');
		break;
	case 228:
		if(crt_pos>0)
			crt_pos--;
		break;
f010099a:	90                   	nop
f010099b:	eb 04                	jmp    f01009a1 <cga_putc+0x1c2>
	case 229:
		if (crt_pos < CRT_SIZE)
			crt_pos++;
		break;
f010099d:	90                   	nop
f010099e:	eb 01                	jmp    f01009a1 <cga_putc+0x1c2>
		if (c != KEY_LF && c != KEY_RT) {
			crt_buf[crt_pos++] = c;		/* write the character */
			if (crt_pos > 1920 + text_length)
				text_length++;
		}
		break;
f01009a0:	90                   	nop
	}
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f01009a1:	66 a1 90 f1 59 f0    	mov    0xf059f190,%ax
f01009a7:	66 3d cf 07          	cmp    $0x7cf,%ax
f01009ab:	76 58                	jbe    f0100a05 <cga_putc+0x226>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f01009ad:	a1 8c f1 59 f0       	mov    0xf059f18c,%eax
f01009b2:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f01009b8:	a1 8c f1 59 f0       	mov    0xf059f18c,%eax
f01009bd:	83 ec 04             	sub    $0x4,%esp
f01009c0:	68 00 0f 00 00       	push   $0xf00
f01009c5:	52                   	push   %edx
f01009c6:	50                   	push   %eax
f01009c7:	e8 90 1d 02 00       	call   f012275c <memcpy>
f01009cc:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01009cf:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f01009d6:	eb 15                	jmp    f01009ed <cga_putc+0x20e>
			crt_buf[i] = 0x0700 | ' ';
f01009d8:	8b 15 8c f1 59 f0    	mov    0xf059f18c,%edx
f01009de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01009e1:	01 c0                	add    %eax,%eax
f01009e3:	01 d0                	add    %edx,%eax
f01009e5:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01009ea:	ff 45 f4             	incl   -0xc(%ebp)
f01009ed:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f01009f4:	7e e2                	jle    f01009d8 <cga_putc+0x1f9>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f01009f6:	66 a1 90 f1 59 f0    	mov    0xf059f190,%ax
f01009fc:	83 e8 50             	sub    $0x50,%eax
f01009ff:	66 a3 90 f1 59 f0    	mov    %ax,0xf059f190
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100a05:	a1 88 f1 59 f0       	mov    0xf059f188,%eax
f0100a0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100a0d:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100a11:	8a 45 e0             	mov    -0x20(%ebp),%al
f0100a14:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100a17:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f0100a18:	66 a1 90 f1 59 f0    	mov    0xf059f190,%ax
f0100a1e:	66 c1 e8 08          	shr    $0x8,%ax
f0100a22:	0f b6 c0             	movzbl %al,%eax
f0100a25:	8b 15 88 f1 59 f0    	mov    0xf059f188,%edx
f0100a2b:	42                   	inc    %edx
f0100a2c:	89 55 ec             	mov    %edx,-0x14(%ebp)
f0100a2f:	88 45 e1             	mov    %al,-0x1f(%ebp)
f0100a32:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100a35:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100a38:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f0100a39:	a1 88 f1 59 f0       	mov    0xf059f188,%eax
f0100a3e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100a41:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f0100a45:	8a 45 e2             	mov    -0x1e(%ebp),%al
f0100a48:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100a4b:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f0100a4c:	66 a1 90 f1 59 f0    	mov    0xf059f190,%ax
f0100a52:	0f b6 c0             	movzbl %al,%eax
f0100a55:	8b 15 88 f1 59 f0    	mov    0xf059f188,%edx
f0100a5b:	42                   	inc    %edx
f0100a5c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0100a5f:	88 45 e3             	mov    %al,-0x1d(%ebp)
f0100a62:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100a65:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100a68:	ee                   	out    %al,(%dx)
}
f0100a69:	90                   	nop
f0100a6a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0100a6d:	c9                   	leave  
f0100a6e:	c3                   	ret    

f0100a6f <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f0100a6f:	55                   	push   %ebp
f0100a70:	89 e5                	mov    %esp,%ebp
f0100a72:	83 ec 28             	sub    $0x28,%esp
f0100a75:	c7 45 dc 64 00 00 00 	movl   $0x64,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100a7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0100a7f:	89 c2                	mov    %eax,%edx
f0100a81:	ec                   	in     (%dx),%al
f0100a82:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0100a85:	8a 45 db             	mov    -0x25(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100a88:	0f b6 c0             	movzbl %al,%eax
f0100a8b:	83 e0 01             	and    $0x1,%eax
f0100a8e:	85 c0                	test   %eax,%eax
f0100a90:	75 0a                	jne    f0100a9c <kbd_proc_data+0x2d>
		return -1;
f0100a92:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100a97:	e9 2a 02 00 00       	jmp    f0100cc6 <kbd_proc_data+0x257>
f0100a9c:	c7 45 e4 60 00 00 00 	movl   $0x60,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100aa3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100aa6:	89 c2                	mov    %eax,%edx
f0100aa8:	ec                   	in     (%dx),%al
f0100aa9:	88 45 da             	mov    %al,-0x26(%ebp)
	return data;
f0100aac:	8a 45 da             	mov    -0x26(%ebp),%al

	data = inb(KBDATAP);
f0100aaf:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100ab2:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100ab6:	75 17                	jne    f0100acf <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100ab8:	a1 a8 f3 59 f0       	mov    0xf059f3a8,%eax
f0100abd:	83 c8 40             	or     $0x40,%eax
f0100ac0:	a3 a8 f3 59 f0       	mov    %eax,0xf059f3a8
		return 0;
f0100ac5:	b8 00 00 00 00       	mov    $0x0,%eax
f0100aca:	e9 f7 01 00 00       	jmp    f0100cc6 <kbd_proc_data+0x257>
	} else if (data & 0x80) {
f0100acf:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100ad2:	84 c0                	test   %al,%al
f0100ad4:	79 44                	jns    f0100b1a <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100ad6:	a1 a8 f3 59 f0       	mov    0xf059f3a8,%eax
f0100adb:	83 e0 40             	and    $0x40,%eax
f0100ade:	85 c0                	test   %eax,%eax
f0100ae0:	75 08                	jne    f0100aea <kbd_proc_data+0x7b>
f0100ae2:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100ae5:	83 e0 7f             	and    $0x7f,%eax
f0100ae8:	eb 03                	jmp    f0100aed <kbd_proc_data+0x7e>
f0100aea:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100aed:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f0100af0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100af4:	8a 80 20 e0 17 f0    	mov    -0xfe81fe0(%eax),%al
f0100afa:	83 c8 40             	or     $0x40,%eax
f0100afd:	0f b6 c0             	movzbl %al,%eax
f0100b00:	f7 d0                	not    %eax
f0100b02:	89 c2                	mov    %eax,%edx
f0100b04:	a1 a8 f3 59 f0       	mov    0xf059f3a8,%eax
f0100b09:	21 d0                	and    %edx,%eax
f0100b0b:	a3 a8 f3 59 f0       	mov    %eax,0xf059f3a8
		return 0;
f0100b10:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b15:	e9 ac 01 00 00       	jmp    f0100cc6 <kbd_proc_data+0x257>
	} else if (shift & E0ESC) {
f0100b1a:	a1 a8 f3 59 f0       	mov    0xf059f3a8,%eax
f0100b1f:	83 e0 40             	and    $0x40,%eax
f0100b22:	85 c0                	test   %eax,%eax
f0100b24:	74 11                	je     f0100b37 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f0100b26:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f0100b2a:	a1 a8 f3 59 f0       	mov    0xf059f3a8,%eax
f0100b2f:	83 e0 bf             	and    $0xffffffbf,%eax
f0100b32:	a3 a8 f3 59 f0       	mov    %eax,0xf059f3a8
	}

	shift |= shiftcode[data];
f0100b37:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100b3b:	8a 80 20 e0 17 f0    	mov    -0xfe81fe0(%eax),%al
f0100b41:	0f b6 d0             	movzbl %al,%edx
f0100b44:	a1 a8 f3 59 f0       	mov    0xf059f3a8,%eax
f0100b49:	09 d0                	or     %edx,%eax
f0100b4b:	a3 a8 f3 59 f0       	mov    %eax,0xf059f3a8
	shift ^= togglecode[data];
f0100b50:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100b54:	8a 80 20 e1 17 f0    	mov    -0xfe81ee0(%eax),%al
f0100b5a:	0f b6 d0             	movzbl %al,%edx
f0100b5d:	a1 a8 f3 59 f0       	mov    0xf059f3a8,%eax
f0100b62:	31 d0                	xor    %edx,%eax
f0100b64:	a3 a8 f3 59 f0       	mov    %eax,0xf059f3a8

	c = charcode[shift & (CTL | SHIFT)][data];
f0100b69:	a1 a8 f3 59 f0       	mov    0xf059f3a8,%eax
f0100b6e:	83 e0 03             	and    $0x3,%eax
f0100b71:	8b 14 85 20 e5 17 f0 	mov    -0xfe81ae0(,%eax,4),%edx
f0100b78:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100b7c:	01 d0                	add    %edx,%eax
f0100b7e:	8a 00                	mov    (%eax),%al
f0100b80:	0f b6 c0             	movzbl %al,%eax
f0100b83:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (c == KEY_DEL) {
f0100b86:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100b8d:	0f 85 9c 00 00 00    	jne    f0100c2f <kbd_proc_data+0x1c0>
		if (text_length > 0) {
f0100b93:	a1 80 f1 59 f0       	mov    0xf059f180,%eax
f0100b98:	85 c0                	test   %eax,%eax
f0100b9a:	0f 8e 85 00 00 00    	jle    f0100c25 <kbd_proc_data+0x1b6>
			if (crt_pos == 1920 + text_length)
f0100ba0:	66 a1 90 f1 59 f0    	mov    0xf059f190,%ax
f0100ba6:	0f b7 c0             	movzwl %ax,%eax
f0100ba9:	8b 15 80 f1 59 f0    	mov    0xf059f180,%edx
f0100baf:	81 c2 80 07 00 00    	add    $0x780,%edx
f0100bb5:	39 d0                	cmp    %edx,%eax
f0100bb7:	75 0a                	jne    f0100bc3 <kbd_proc_data+0x154>
				return 0;
f0100bb9:	b8 00 00 00 00       	mov    $0x0,%eax
f0100bbe:	e9 03 01 00 00       	jmp    f0100cc6 <kbd_proc_data+0x257>
			else {
				text_length--;
f0100bc3:	a1 80 f1 59 f0       	mov    0xf059f180,%eax
f0100bc8:	48                   	dec    %eax
f0100bc9:	a3 80 f1 59 f0       	mov    %eax,0xf059f180
				int crt_pos_Length = crt_pos - 1925;
f0100bce:	66 a1 90 f1 59 f0    	mov    0xf059f190,%ax
f0100bd4:	0f b7 c0             	movzwl %ax,%eax
f0100bd7:	2d 85 07 00 00       	sub    $0x785,%eax
f0100bdc:	89 45 ec             	mov    %eax,-0x14(%ebp)
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100bdf:	66 a1 90 f1 59 f0    	mov    0xf059f190,%ax
f0100be5:	0f b7 c0             	movzwl %ax,%eax
f0100be8:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100beb:	eb 26                	jmp    f0100c13 <kbd_proc_data+0x1a4>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
f0100bed:	8b 15 8c f1 59 f0    	mov    0xf059f18c,%edx
f0100bf3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100bf6:	01 c0                	add    %eax,%eax
f0100bf8:	01 c2                	add    %eax,%edx
f0100bfa:	a1 8c f1 59 f0       	mov    0xf059f18c,%eax
f0100bff:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f0100c02:	41                   	inc    %ecx
f0100c03:	01 c9                	add    %ecx,%ecx
f0100c05:	01 c8                	add    %ecx,%eax
f0100c07:	66 8b 00             	mov    (%eax),%ax
f0100c0a:	66 89 02             	mov    %ax,(%edx)
				return 0;
			else {
				text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
						++i, crt_pos_Length++) {
f0100c0d:	ff 45 e8             	incl   -0x18(%ebp)
f0100c10:	ff 45 ec             	incl   -0x14(%ebp)
			if (crt_pos == 1920 + text_length)
				return 0;
			else {
				text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100c13:	a1 80 f1 59 f0       	mov    0xf059f180,%eax
f0100c18:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0100c1b:	7e d0                	jle    f0100bed <kbd_proc_data+0x17e>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
				}
				return c;
f0100c1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100c20:	e9 a1 00 00 00       	jmp    f0100cc6 <kbd_proc_data+0x257>
			}
		}
		return 0;
f0100c25:	b8 00 00 00 00       	mov    $0x0,%eax
f0100c2a:	e9 97 00 00 00       	jmp    f0100cc6 <kbd_proc_data+0x257>
	}
	if (shift & CAPSLOCK) {
f0100c2f:	a1 a8 f3 59 f0       	mov    0xf059f3a8,%eax
f0100c34:	83 e0 08             	and    $0x8,%eax
f0100c37:	85 c0                	test   %eax,%eax
f0100c39:	74 22                	je     f0100c5d <kbd_proc_data+0x1ee>
		if ('a' <= c && c <= 'z')
f0100c3b:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100c3f:	7e 0c                	jle    f0100c4d <kbd_proc_data+0x1de>
f0100c41:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100c45:	7f 06                	jg     f0100c4d <kbd_proc_data+0x1de>
			c += 'A' - 'a';
f0100c47:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100c4b:	eb 10                	jmp    f0100c5d <kbd_proc_data+0x1ee>
		else if ('A' <= c && c <= 'Z')
f0100c4d:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100c51:	7e 0a                	jle    f0100c5d <kbd_proc_data+0x1ee>
f0100c53:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100c57:	7f 04                	jg     f0100c5d <kbd_proc_data+0x1ee>
			c += 'a' - 'A';
f0100c59:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	if ((int) shift == NUMLOCK && c >= '0' && c <= '9')
f0100c5d:	a1 a8 f3 59 f0       	mov    0xf059f3a8,%eax
f0100c62:	83 f8 10             	cmp    $0x10,%eax
f0100c65:	75 13                	jne    f0100c7a <kbd_proc_data+0x20b>
f0100c67:	83 7d f4 2f          	cmpl   $0x2f,-0xc(%ebp)
f0100c6b:	7e 0d                	jle    f0100c7a <kbd_proc_data+0x20b>
f0100c6d:	83 7d f4 39          	cmpl   $0x39,-0xc(%ebp)
f0100c71:	7f 07                	jg     f0100c7a <kbd_proc_data+0x20b>
		return 0;
f0100c73:	b8 00 00 00 00       	mov    $0x0,%eax
f0100c78:	eb 4c                	jmp    f0100cc6 <kbd_proc_data+0x257>
	if (c == 255)
f0100c7a:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0100c81:	75 07                	jne    f0100c8a <kbd_proc_data+0x21b>
		return 0;
f0100c83:	b8 00 00 00 00       	mov    $0x0,%eax
f0100c88:	eb 3c                	jmp    f0100cc6 <kbd_proc_data+0x257>
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100c8a:	a1 a8 f3 59 f0       	mov    0xf059f3a8,%eax
f0100c8f:	f7 d0                	not    %eax
f0100c91:	83 e0 06             	and    $0x6,%eax
f0100c94:	85 c0                	test   %eax,%eax
f0100c96:	75 2b                	jne    f0100cc3 <kbd_proc_data+0x254>
f0100c98:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100c9f:	75 22                	jne    f0100cc3 <kbd_proc_data+0x254>
		cprintf("Rebooting!\n");
f0100ca1:	83 ec 0c             	sub    $0xc,%esp
f0100ca4:	68 3b 43 12 f0       	push   $0xf012433b
f0100ca9:	e8 be 02 00 00       	call   f0100f6c <cprintf>
f0100cae:	83 c4 10             	add    $0x10,%esp
f0100cb1:	c7 45 e0 92 00 00 00 	movl   $0x92,-0x20(%ebp)
f0100cb8:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100cbc:	8a 45 d9             	mov    -0x27(%ebp),%al
f0100cbf:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100cc2:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100cc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100cc6:	c9                   	leave  
f0100cc7:	c3                   	ret    

f0100cc8 <kbd_intr>:

void
kbd_intr(void)
{
f0100cc8:	55                   	push   %ebp
f0100cc9:	89 e5                	mov    %esp,%ebp
f0100ccb:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100cce:	83 ec 0c             	sub    $0xc,%esp
f0100cd1:	68 6f 0a 10 f0       	push   $0xf0100a6f
f0100cd6:	e8 21 00 00 00       	call   f0100cfc <cons_intr>
f0100cdb:	83 c4 10             	add    $0x10,%esp
}
f0100cde:	90                   	nop
f0100cdf:	c9                   	leave  
f0100ce0:	c3                   	ret    

f0100ce1 <kbd_init>:

void
kbd_init(void)
{
f0100ce1:	55                   	push   %ebp
f0100ce2:	89 e5                	mov    %esp,%ebp
f0100ce4:	83 ec 08             	sub    $0x8,%esp
	irq_install_handler(1, &keyboard_interrupt_handler);
f0100ce7:	83 ec 08             	sub    $0x8,%esp
f0100cea:	68 83 0e 10 f0       	push   $0xf0100e83
f0100cef:	6a 01                	push   $0x1
f0100cf1:	e8 a2 c6 00 00       	call   f010d398 <irq_install_handler>
f0100cf6:	83 c4 10             	add    $0x10,%esp
	}
	else if (KBD_INT_BLK_METHOD == LCK_SEMAPHORE)
	{
		init_ksemaphore(&KBDsem, 0, "keyboard semaphore");
	}
}
f0100cf9:	90                   	nop
f0100cfa:	c9                   	leave  
f0100cfb:	c3                   	ret    

f0100cfc <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100cfc:	55                   	push   %ebp
f0100cfd:	89 e5                	mov    %esp,%ebp
f0100cff:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100d02:	eb 35                	jmp    f0100d39 <cons_intr+0x3d>
		if (c == 0)
f0100d04:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100d08:	75 02                	jne    f0100d0c <cons_intr+0x10>
			continue;
f0100d0a:	eb 2d                	jmp    f0100d39 <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100d0c:	a1 a4 f3 59 f0       	mov    0xf059f3a4,%eax
f0100d11:	8d 50 01             	lea    0x1(%eax),%edx
f0100d14:	89 15 a4 f3 59 f0    	mov    %edx,0xf059f3a4
f0100d1a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100d1d:	88 90 a0 f1 59 f0    	mov    %dl,-0xfa60e60(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100d23:	a1 a4 f3 59 f0       	mov    0xf059f3a4,%eax
f0100d28:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100d2d:	75 0a                	jne    f0100d39 <cons_intr+0x3d>
			cons.wpos = 0;
f0100d2f:	c7 05 a4 f3 59 f0 00 	movl   $0x0,0xf059f3a4
f0100d36:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100d39:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d3c:	ff d0                	call   *%eax
f0100d3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100d41:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100d45:	75 bd                	jne    f0100d04 <cons_intr+0x8>
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;

		//cprintf("\nCHAR %d is written into cons.buf\n", c);
	}
}
f0100d47:	90                   	nop
f0100d48:	c9                   	leave  
f0100d49:	c3                   	ret    

f0100d4a <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100d4a:	55                   	push   %ebp
f0100d4b:	89 e5                	mov    %esp,%ebp
f0100d4d:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100d50:	e8 ee f7 ff ff       	call   f0100543 <serial_intr>
	kbd_intr();
f0100d55:	e8 6e ff ff ff       	call   f0100cc8 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100d5a:	8b 15 a0 f3 59 f0    	mov    0xf059f3a0,%edx
f0100d60:	a1 a4 f3 59 f0       	mov    0xf059f3a4,%eax
f0100d65:	39 c2                	cmp    %eax,%edx
f0100d67:	74 35                	je     f0100d9e <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100d69:	a1 a0 f3 59 f0       	mov    0xf059f3a0,%eax
f0100d6e:	8d 50 01             	lea    0x1(%eax),%edx
f0100d71:	89 15 a0 f3 59 f0    	mov    %edx,0xf059f3a0
f0100d77:	8a 80 a0 f1 59 f0    	mov    -0xfa60e60(%eax),%al
f0100d7d:	0f b6 c0             	movzbl %al,%eax
f0100d80:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100d83:	a1 a0 f3 59 f0       	mov    0xf059f3a0,%eax
f0100d88:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100d8d:	75 0a                	jne    f0100d99 <cons_getc+0x4f>
			cons.rpos = 0;
f0100d8f:	c7 05 a0 f3 59 f0 00 	movl   $0x0,0xf059f3a0
f0100d96:	00 00 00 
		return c;
f0100d99:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100d9c:	eb 05                	jmp    f0100da3 <cons_getc+0x59>
	}
	return 0;
f0100d9e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100da3:	c9                   	leave  
f0100da4:	c3                   	ret    

f0100da5 <cons_getc2>:

//// return the next input character from the console buffer, or 0 if none
int
cons_getc2(void)
{
f0100da5:	55                   	push   %ebp
f0100da6:	89 e5                	mov    %esp,%ebp
f0100da8:	83 ec 10             	sub    $0x10,%esp
	int c;
	// grab the next character from the input buffer (if any).
	if (cons.rpos != cons.wpos) {
f0100dab:	8b 15 a0 f3 59 f0    	mov    0xf059f3a0,%edx
f0100db1:	a1 a4 f3 59 f0       	mov    0xf059f3a4,%eax
f0100db6:	39 c2                	cmp    %eax,%edx
f0100db8:	74 35                	je     f0100def <cons_getc2+0x4a>
		c = cons.buf[cons.rpos++];
f0100dba:	a1 a0 f3 59 f0       	mov    0xf059f3a0,%eax
f0100dbf:	8d 50 01             	lea    0x1(%eax),%edx
f0100dc2:	89 15 a0 f3 59 f0    	mov    %edx,0xf059f3a0
f0100dc8:	8a 80 a0 f1 59 f0    	mov    -0xfa60e60(%eax),%al
f0100dce:	0f b6 c0             	movzbl %al,%eax
f0100dd1:	89 45 fc             	mov    %eax,-0x4(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100dd4:	a1 a0 f3 59 f0       	mov    0xf059f3a0,%eax
f0100dd9:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100dde:	75 0a                	jne    f0100dea <cons_getc2+0x45>
			cons.rpos = 0;
f0100de0:	c7 05 a0 f3 59 f0 00 	movl   $0x0,0xf059f3a0
f0100de7:	00 00 00 
		return c;
f0100dea:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100ded:	eb 05                	jmp    f0100df4 <cons_getc2+0x4f>
	}
	return 0;
f0100def:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100df4:	c9                   	leave  
f0100df5:	c3                   	ret    

f0100df6 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100df6:	55                   	push   %ebp
f0100df7:	89 e5                	mov    %esp,%ebp
f0100df9:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100dfc:	ff 75 08             	pushl  0x8(%ebp)
f0100dff:	e8 a1 f8 ff ff       	call   f01006a5 <lpt_putc>
f0100e04:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100e07:	83 ec 0c             	sub    $0xc,%esp
f0100e0a:	ff 75 08             	pushl  0x8(%ebp)
f0100e0d:	e8 cd f9 ff ff       	call   f01007df <cga_putc>
f0100e12:	83 c4 10             	add    $0x10,%esp
}
f0100e15:	90                   	nop
f0100e16:	c9                   	leave  
f0100e17:	c3                   	ret    

f0100e18 <cons_init>:

// initialize the console devices
void
cons_init(void)
{
f0100e18:	55                   	push   %ebp
f0100e19:	89 e5                	mov    %esp,%ebp
f0100e1b:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100e1e:	e8 f7 f8 ff ff       	call   f010071a <cga_init>
	kbd_init();
f0100e23:	e8 b9 fe ff ff       	call   f0100ce1 <kbd_init>
	serial_init();
f0100e28:	e8 56 f7 ff ff       	call   f0100583 <serial_init>

	if (!serial_exists)
f0100e2d:	a1 84 f1 59 f0       	mov    0xf059f184,%eax
f0100e32:	85 c0                	test   %eax,%eax
f0100e34:	75 10                	jne    f0100e46 <cons_init+0x2e>
		cprintf("Serial port does not exist!\n");
f0100e36:	83 ec 0c             	sub    $0xc,%esp
f0100e39:	68 47 43 12 f0       	push   $0xf0124347
f0100e3e:	e8 29 01 00 00       	call   f0100f6c <cprintf>
f0100e43:	83 c4 10             	add    $0x10,%esp
	}
	else if (CONS_LCK_METHOD == LCK_SEMAPHORE)
	{
		init_ksemaphore(&conssem, 1, "console semaphore");
	}
}
f0100e46:	90                   	nop
f0100e47:	c9                   	leave  
f0100e48:	c3                   	ret    

f0100e49 <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf from KERNEL side

void
cputchar(int c)
{
f0100e49:	55                   	push   %ebp
f0100e4a:	89 e5                	mov    %esp,%ebp
f0100e4c:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100e4f:	83 ec 0c             	sub    $0xc,%esp
f0100e52:	ff 75 08             	pushl  0x8(%ebp)
f0100e55:	e8 9c ff ff ff       	call   f0100df6 <cons_putc>
f0100e5a:	83 c4 10             	add    $0x10,%esp
}
f0100e5d:	90                   	nop
f0100e5e:	c9                   	leave  
f0100e5f:	c3                   	ret    

f0100e60 <getchar>:

int
getchar(void)
{
f0100e60:	55                   	push   %ebp
f0100e61:	89 e5                	mov    %esp,%ebp
f0100e63:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100e66:	e8 df fe ff ff       	call   f0100d4a <cons_getc>
f0100e6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100e6e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100e72:	74 f2                	je     f0100e66 <getchar+0x6>
		/* do nothing */;
	return c;
f0100e74:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100e77:	c9                   	leave  
f0100e78:	c3                   	ret    

f0100e79 <iscons>:

int
iscons(int fdnum)
{
f0100e79:	55                   	push   %ebp
f0100e7a:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100e7c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100e81:	5d                   	pop    %ebp
f0100e82:	c3                   	ret    

f0100e83 <keyboard_interrupt_handler>:

/*Keyboard Interrupt Service Routine */
void keyboard_interrupt_handler()
{
f0100e83:	55                   	push   %ebp
f0100e84:	89 e5                	mov    %esp,%ebp
f0100e86:	83 ec 08             	sub    $0x8,%esp
	//	char scanCode = inb(0x60) & 0x7F; //What key is pressed
	//	char press = inb(0x60) & 0x80; //Press down, or released
	//
	//	cprintf("Scan code: %d, Press: %d\n", scanCode, press);
	//cprintf("char is pressed\n");
	kbd_intr();
f0100e89:	e8 3a fe ff ff       	call   f0100cc8 <kbd_intr>
		else if (KBD_INT_BLK_METHOD == LCK_SEMAPHORE)
		{
			signal_ksemaphore(&KBDsem);
		}
	}
}
f0100e8e:	90                   	nop
f0100e8f:	c9                   	leave  
f0100e90:	c3                   	ret    

f0100e91 <cons_lock>:

void cons_lock(void)
{
f0100e91:	55                   	push   %ebp
f0100e92:	89 e5                	mov    %esp,%ebp
f0100e94:	83 ec 18             	sub    $0x18,%esp
	if (CONS_LCK_METHOD == LCK_INT)
	{
		kclock_stop();
f0100e97:	e8 ec 3d 00 00       	call   f0104c88 <kclock_stop>
 */
//clear interrupt flag
static __inline void
cli(void)
{
	__asm __volatile("cli");
f0100e9c:	fa                   	cli    
		cli();
		struct Env * p = get_cpu_proc();
f0100e9d:	e8 ce 98 00 00       	call   f010a770 <get_cpu_proc>
f0100ea2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (p == NULL)
f0100ea5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100ea9:	75 17                	jne    f0100ec2 <cons_lock+0x31>
		{
			panic("cons_lock: no running process to block");
f0100eab:	83 ec 04             	sub    $0x4,%esp
f0100eae:	68 64 43 12 f0       	push   $0xf0124364
f0100eb3:	68 2d 02 00 00       	push   $0x22d
f0100eb8:	68 8b 43 12 f0       	push   $0xf012438b
f0100ebd:	e8 58 f4 ff ff       	call   f010031a <_panic>
		}
		p->env_tf->tf_eflags &= ~FL_IF ;
f0100ec2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100ec5:	8b 00                	mov    (%eax),%eax
f0100ec7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100eca:	8b 12                	mov    (%edx),%edx
f0100ecc:	8b 52 38             	mov    0x38(%edx),%edx
f0100ecf:	80 e6 fd             	and    $0xfd,%dh
f0100ed2:	89 50 38             	mov    %edx,0x38(%eax)
	else if (CONS_LCK_METHOD == LCK_SEMAPHORE)
	{
		wait_ksemaphore(&conssem);
	}

}
f0100ed5:	90                   	nop
f0100ed6:	c9                   	leave  
f0100ed7:	c3                   	ret    

f0100ed8 <cons_unlock>:

void cons_unlock(void)
{
f0100ed8:	55                   	push   %ebp
f0100ed9:	89 e5                	mov    %esp,%ebp
f0100edb:	83 ec 18             	sub    $0x18,%esp
	if (CONS_LCK_METHOD == LCK_INT)
	{
		kclock_stop();
f0100ede:	e8 a5 3d 00 00       	call   f0104c88 <kclock_stop>
f0100ee3:	fa                   	cli    
		cli();
		struct Env * p = get_cpu_proc();
f0100ee4:	e8 87 98 00 00       	call   f010a770 <get_cpu_proc>
f0100ee9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (p == NULL)
f0100eec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100ef0:	75 17                	jne    f0100f09 <cons_unlock+0x31>
		{
			panic("cons_unlock: no running process to block");
f0100ef2:	83 ec 04             	sub    $0x4,%esp
f0100ef5:	68 a0 43 12 f0       	push   $0xf01243a0
f0100efa:	68 46 02 00 00       	push   $0x246
f0100eff:	68 8b 43 12 f0       	push   $0xf012438b
f0100f04:	e8 11 f4 ff ff       	call   f010031a <_panic>
		}
		p->env_tf->tf_eflags |= FL_IF ;
f0100f09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100f0c:	8b 00                	mov    (%eax),%eax
f0100f0e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100f11:	8b 12                	mov    (%edx),%edx
f0100f13:	8b 52 38             	mov    0x38(%edx),%edx
f0100f16:	80 ce 02             	or     $0x2,%dh
f0100f19:	89 50 38             	mov    %edx,0x38(%eax)
	else if (CONS_LCK_METHOD == LCK_SEMAPHORE)
	{
		signal_ksemaphore(&conssem);
	}

}
f0100f1c:	90                   	nop
f0100f1d:	c9                   	leave  
f0100f1e:	c3                   	ret    

f0100f1f <putch>:
#include <kern/cpu/cpu.h>


static void
putch(int ch, int *cnt)
{
f0100f1f:	55                   	push   %ebp
f0100f20:	89 e5                	mov    %esp,%ebp
f0100f22:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100f25:	83 ec 0c             	sub    $0xc,%esp
f0100f28:	ff 75 08             	pushl  0x8(%ebp)
f0100f2b:	e8 19 ff ff ff       	call   f0100e49 <cputchar>
f0100f30:	83 c4 10             	add    $0x10,%esp
	(*cnt)++;
f0100f33:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100f36:	8b 00                	mov    (%eax),%eax
f0100f38:	8d 50 01             	lea    0x1(%eax),%edx
f0100f3b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100f3e:	89 10                	mov    %edx,(%eax)
}
f0100f40:	90                   	nop
f0100f41:	c9                   	leave  
f0100f42:	c3                   	ret    

f0100f43 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100f43:	55                   	push   %ebp
f0100f44:	89 e5                	mov    %esp,%ebp
f0100f46:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100f49:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100f50:	ff 75 0c             	pushl  0xc(%ebp)
f0100f53:	ff 75 08             	pushl  0x8(%ebp)
f0100f56:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100f59:	50                   	push   %eax
f0100f5a:	68 1f 0f 10 f0       	push   $0xf0100f1f
f0100f5f:	e8 18 0f 02 00       	call   f0121e7c <vprintfmt>
f0100f64:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100f67:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100f6a:	c9                   	leave  
f0100f6b:	c3                   	ret    

f0100f6c <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100f6c:	55                   	push   %ebp
f0100f6d:	89 e5                	mov    %esp,%ebp
f0100f6f:	83 ec 18             	sub    $0x18,%esp
	//2024 - better to use locks instead (to support multiprocessors)
	int cnt;
	pushcli();	//disable interrupts
f0100f72:	e8 49 62 00 00       	call   f01071c0 <pushcli>
	{
		va_list ap;

		va_start(ap, fmt);
f0100f77:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100f7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		cnt = vcprintf(fmt, ap);
f0100f7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f80:	83 ec 08             	sub    $0x8,%esp
f0100f83:	ff 75 f4             	pushl  -0xc(%ebp)
f0100f86:	50                   	push   %eax
f0100f87:	e8 b7 ff ff ff       	call   f0100f43 <vcprintf>
f0100f8c:	83 c4 10             	add    $0x10,%esp
f0100f8f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		va_end(ap);
	}
	popcli();	//enable interrupts
f0100f92:	e8 7b 62 00 00       	call   f0107212 <popcli>

	return cnt;
f0100f97:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100f9a:	c9                   	leave  
f0100f9b:	c3                   	ret    

f0100f9c <clearandwritecommand>:
#define HISTORY_MAX 19
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
f0100f9c:	55                   	push   %ebp
f0100f9d:	89 e5                	mov    %esp,%ebp
f0100f9f:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < *i; j++) {
f0100fa2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100fa9:	eb 10                	jmp    f0100fbb <clearandwritecommand+0x1f>
		cputchar('\b');
f0100fab:	83 ec 0c             	sub    $0xc,%esp
f0100fae:	6a 08                	push   $0x8
f0100fb0:	e8 94 fe ff ff       	call   f0100e49 <cputchar>
f0100fb5:	83 c4 10             	add    $0x10,%esp
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
	for (int j = 0; j < *i; j++) {
f0100fb8:	ff 45 f4             	incl   -0xc(%ebp)
f0100fbb:	8b 45 08             	mov    0x8(%ebp),%eax
f0100fbe:	8b 00                	mov    (%eax),%eax
f0100fc0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0100fc3:	7f e6                	jg     f0100fab <clearandwritecommand+0xf>
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
f0100fc5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100fc8:	c1 e0 0a             	shl    $0xa,%eax
f0100fcb:	05 40 bc 5b f0       	add    $0xf05bbc40,%eax
f0100fd0:	83 ec 0c             	sub    $0xc,%esp
f0100fd3:	50                   	push   %eax
f0100fd4:	e8 65 15 02 00       	call   f012253e <strlen>
f0100fd9:	83 c4 10             	add    $0x10,%esp
f0100fdc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100fdf:	83 ec 04             	sub    $0x4,%esp
f0100fe2:	68 00 04 00 00       	push   $0x400
f0100fe7:	68 60 0c 5c f0       	push   $0xf05c0c60
f0100fec:	ff 75 10             	pushl  0x10(%ebp)
f0100fef:	e8 68 17 02 00       	call   f012275c <memcpy>
f0100ff4:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100ff7:	8b 45 08             	mov    0x8(%ebp),%eax
f0100ffa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0101000:	eb 52                	jmp    f0101054 <clearandwritecommand+0xb8>
		cputchar(command_history[commandidx][*i]);
f0101002:	8b 45 08             	mov    0x8(%ebp),%eax
f0101005:	8b 00                	mov    (%eax),%eax
f0101007:	8b 55 0c             	mov    0xc(%ebp),%edx
f010100a:	c1 e2 0a             	shl    $0xa,%edx
f010100d:	01 d0                	add    %edx,%eax
f010100f:	05 40 bc 5b f0       	add    $0xf05bbc40,%eax
f0101014:	8a 00                	mov    (%eax),%al
f0101016:	0f be c0             	movsbl %al,%eax
f0101019:	83 ec 0c             	sub    $0xc,%esp
f010101c:	50                   	push   %eax
f010101d:	e8 27 fe ff ff       	call   f0100e49 <cputchar>
f0101022:	83 c4 10             	add    $0x10,%esp
		buf[*i] = command_history[commandidx][*i];
f0101025:	8b 45 08             	mov    0x8(%ebp),%eax
f0101028:	8b 00                	mov    (%eax),%eax
f010102a:	89 c2                	mov    %eax,%edx
f010102c:	8b 45 10             	mov    0x10(%ebp),%eax
f010102f:	01 c2                	add    %eax,%edx
f0101031:	8b 45 08             	mov    0x8(%ebp),%eax
f0101034:	8b 00                	mov    (%eax),%eax
f0101036:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0101039:	c1 e1 0a             	shl    $0xa,%ecx
f010103c:	01 c8                	add    %ecx,%eax
f010103e:	05 40 bc 5b f0       	add    $0xf05bbc40,%eax
f0101043:	8a 00                	mov    (%eax),%al
f0101045:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < *i; j++) {
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0101047:	8b 45 08             	mov    0x8(%ebp),%eax
f010104a:	8b 00                	mov    (%eax),%eax
f010104c:	8d 50 01             	lea    0x1(%eax),%edx
f010104f:	8b 45 08             	mov    0x8(%ebp),%eax
f0101052:	89 10                	mov    %edx,(%eax)
f0101054:	8b 45 08             	mov    0x8(%ebp),%eax
f0101057:	8b 00                	mov    (%eax),%eax
f0101059:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010105c:	7c a4                	jl     f0101002 <clearandwritecommand+0x66>
		cputchar(command_history[commandidx][*i]);
		buf[*i] = command_history[commandidx][*i];
	}
	*last_index = len;
f010105e:	8b 45 14             	mov    0x14(%ebp),%eax
f0101061:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101064:	89 10                	mov    %edx,(%eax)
}
f0101066:	90                   	nop
f0101067:	c9                   	leave  
f0101068:	c3                   	ret    

f0101069 <RoundAutoCompleteCommandWithTheSamePrefix>:

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
f0101069:	55                   	push   %ebp
f010106a:	89 e5                	mov    %esp,%ebp
f010106c:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < old_buf_len; j++) {
f010106f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101076:	eb 10                	jmp    f0101088 <RoundAutoCompleteCommandWithTheSamePrefix+0x1f>
		cputchar('\b');
f0101078:	83 ec 0c             	sub    $0xc,%esp
f010107b:	6a 08                	push   $0x8
f010107d:	e8 c7 fd ff ff       	call   f0100e49 <cputchar>
f0101082:	83 c4 10             	add    $0x10,%esp
	*last_index = len;
}

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
	for (int j = 0; j < old_buf_len; j++) {
f0101085:	ff 45 f4             	incl   -0xc(%ebp)
f0101088:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010108b:	3b 45 08             	cmp    0x8(%ebp),%eax
f010108e:	7c e8                	jl     f0101078 <RoundAutoCompleteCommandWithTheSamePrefix+0xf>
		cputchar('\b');
	}
	int len = strlen(prefix_element);
f0101090:	83 ec 0c             	sub    $0xc,%esp
f0101093:	ff 75 0c             	pushl  0xc(%ebp)
f0101096:	e8 a3 14 02 00       	call   f012253e <strlen>
f010109b:	83 c4 10             	add    $0x10,%esp
f010109e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f01010a1:	83 ec 04             	sub    $0x4,%esp
f01010a4:	68 00 04 00 00       	push   $0x400
f01010a9:	68 60 0c 5c f0       	push   $0xf05c0c60
f01010ae:	ff 75 10             	pushl  0x10(%ebp)
f01010b1:	e8 a6 16 02 00       	call   f012275c <memcpy>
f01010b6:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f01010b9:	8b 45 14             	mov    0x14(%ebp),%eax
f01010bc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01010c2:	eb 46                	jmp    f010110a <RoundAutoCompleteCommandWithTheSamePrefix+0xa1>
		cputchar(prefix_element[*i]);
f01010c4:	8b 45 14             	mov    0x14(%ebp),%eax
f01010c7:	8b 00                	mov    (%eax),%eax
f01010c9:	89 c2                	mov    %eax,%edx
f01010cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01010ce:	01 d0                	add    %edx,%eax
f01010d0:	8a 00                	mov    (%eax),%al
f01010d2:	0f be c0             	movsbl %al,%eax
f01010d5:	83 ec 0c             	sub    $0xc,%esp
f01010d8:	50                   	push   %eax
f01010d9:	e8 6b fd ff ff       	call   f0100e49 <cputchar>
f01010de:	83 c4 10             	add    $0x10,%esp
		buf[*i] = prefix_element[*i];
f01010e1:	8b 45 14             	mov    0x14(%ebp),%eax
f01010e4:	8b 00                	mov    (%eax),%eax
f01010e6:	89 c2                	mov    %eax,%edx
f01010e8:	8b 45 10             	mov    0x10(%ebp),%eax
f01010eb:	01 c2                	add    %eax,%edx
f01010ed:	8b 45 14             	mov    0x14(%ebp),%eax
f01010f0:	8b 00                	mov    (%eax),%eax
f01010f2:	89 c1                	mov    %eax,%ecx
f01010f4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01010f7:	01 c8                	add    %ecx,%eax
f01010f9:	8a 00                	mov    (%eax),%al
f01010fb:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < old_buf_len; j++) {
		cputchar('\b');
	}
	int len = strlen(prefix_element);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f01010fd:	8b 45 14             	mov    0x14(%ebp),%eax
f0101100:	8b 00                	mov    (%eax),%eax
f0101102:	8d 50 01             	lea    0x1(%eax),%edx
f0101105:	8b 45 14             	mov    0x14(%ebp),%eax
f0101108:	89 10                	mov    %edx,(%eax)
f010110a:	8b 45 14             	mov    0x14(%ebp),%eax
f010110d:	8b 00                	mov    (%eax),%eax
f010110f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101112:	7c b0                	jl     f01010c4 <RoundAutoCompleteCommandWithTheSamePrefix+0x5b>
		cputchar(prefix_element[*i]);
		buf[*i] = prefix_element[*i];
	}
	*last_index = len;
f0101114:	8b 45 18             	mov    0x18(%ebp),%eax
f0101117:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010111a:	89 10                	mov    %edx,(%eax)
}
f010111c:	90                   	nop
f010111d:	c9                   	leave  
f010111e:	c3                   	ret    

f010111f <clear_prefix_list>:

char PrefixList[100][1024];
void clear_prefix_list()
{
f010111f:	55                   	push   %ebp
f0101120:	89 e5                	mov    %esp,%ebp
f0101122:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < 100; ++i) {
f0101125:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010112c:	eb 21                	jmp    f010114f <clear_prefix_list+0x30>
		memset(PrefixList[i], 0, 1024);}
f010112e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101131:	c1 e0 0a             	shl    $0xa,%eax
f0101134:	05 40 2c 5a f0       	add    $0xf05a2c40,%eax
f0101139:	83 ec 04             	sub    $0x4,%esp
f010113c:	68 00 04 00 00       	push   $0x400
f0101141:	6a 00                	push   $0x0
f0101143:	50                   	push   %eax
f0101144:	e8 e3 15 02 00       	call   f012272c <memset>
f0101149:	83 c4 10             	add    $0x10,%esp
}

char PrefixList[100][1024];
void clear_prefix_list()
{
	for (int i = 0; i < 100; ++i) {
f010114c:	ff 45 f4             	incl   -0xc(%ebp)
f010114f:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0101153:	7e d9                	jle    f010112e <clear_prefix_list+0xf>
		memset(PrefixList[i], 0, 1024);}
}
f0101155:	90                   	nop
f0101156:	c9                   	leave  
f0101157:	c3                   	ret    

f0101158 <command_prompt_readline>:

void command_prompt_readline(const char *prompt, char* buf) {
f0101158:	55                   	push   %ebp
f0101159:	89 e5                	mov    %esp,%ebp
f010115b:	57                   	push   %edi
f010115c:	53                   	push   %ebx
f010115d:	81 ec d0 08 00 00    	sub    $0x8d0,%esp
	int i, c, echoing, lastIndex;
	if (prompt != NULL)
f0101163:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0101167:	74 13                	je     f010117c <command_prompt_readline+0x24>
		cprintf("%s", prompt);
f0101169:	83 ec 08             	sub    $0x8,%esp
f010116c:	ff 75 08             	pushl  0x8(%ebp)
f010116f:	68 cc 43 12 f0       	push   $0xf01243cc
f0101174:	e8 f3 fd ff ff       	call   f0100f6c <cprintf>
f0101179:	83 c4 10             	add    $0x10,%esp

	int commandidx = last_command_idx + 1;
f010117c:	a1 30 e5 17 f0       	mov    0xf017e530,%eax
f0101181:	40                   	inc    %eax
f0101182:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int prefix_list_idx = lastIndex = i = 0;
f0101185:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%ebp)
f010118c:	00 00 00 
f010118f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101195:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010119b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01011a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int prefix_list_size, last_c;
	echoing = iscons(0);
f01011a4:	83 ec 0c             	sub    $0xc,%esp
f01011a7:	6a 00                	push   $0x0
f01011a9:	e8 cb fc ff ff       	call   f0100e79 <iscons>
f01011ae:	83 c4 10             	add    $0x10,%esp
f01011b1:	89 45 98             	mov    %eax,-0x68(%ebp)
	bool is_run_cmd = 0;
f01011b4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_tst_cmd = 0;
f01011bb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	while (1) {
		c = getchar();
f01011c2:	e8 99 fc ff ff       	call   f0100e60 <getchar>
f01011c7:	89 45 94             	mov    %eax,-0x6c(%ebp)
		if (i > lastIndex)
f01011ca:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f01011d0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01011d6:	39 c2                	cmp    %eax,%edx
f01011d8:	7e 0c                	jle    f01011e6 <command_prompt_readline+0x8e>
			lastIndex = i;
f01011da:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01011e0:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
		if (c < 0) {
f01011e6:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
f01011ea:	79 22                	jns    f010120e <command_prompt_readline+0xb6>

			if (c != -E_EOF)
f01011ec:	83 7d 94 07          	cmpl   $0x7,-0x6c(%ebp)
f01011f0:	0f 84 94 0a 00 00    	je     f0101c8a <command_prompt_readline+0xb32>
				cprintf("read error: %e\n", c);
f01011f6:	83 ec 08             	sub    $0x8,%esp
f01011f9:	ff 75 94             	pushl  -0x6c(%ebp)
f01011fc:	68 cf 43 12 f0       	push   $0xf01243cf
f0101201:	e8 66 fd ff ff       	call   f0100f6c <cprintf>
f0101206:	83 c4 10             	add    $0x10,%esp
			return;
f0101209:	e9 7c 0a 00 00       	jmp    f0101c8a <command_prompt_readline+0xb32>
		} else if (c == 226) { // Up arrow
f010120e:	81 7d 94 e2 00 00 00 	cmpl   $0xe2,-0x6c(%ebp)
f0101215:	75 2a                	jne    f0101241 <command_prompt_readline+0xe9>
			if (commandidx)
f0101217:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010121b:	74 03                	je     f0101220 <command_prompt_readline+0xc8>
				commandidx--;
f010121d:	ff 4d f4             	decl   -0xc(%ebp)
			clearandwritecommand(&i, commandidx, buf, &lastIndex);
f0101220:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0101226:	50                   	push   %eax
f0101227:	ff 75 0c             	pushl  0xc(%ebp)
f010122a:	ff 75 f4             	pushl  -0xc(%ebp)
f010122d:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f0101233:	50                   	push   %eax
f0101234:	e8 63 fd ff ff       	call   f0100f9c <clearandwritecommand>
f0101239:	83 c4 10             	add    $0x10,%esp
f010123c:	e9 32 0a 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
		} else if (c == 227) { // Down arrow
f0101241:	81 7d 94 e3 00 00 00 	cmpl   $0xe3,-0x6c(%ebp)
f0101248:	75 3b                	jne    f0101285 <command_prompt_readline+0x12d>
			if (commandidx < last_command_idx)
f010124a:	a1 30 e5 17 f0       	mov    0xf017e530,%eax
f010124f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101252:	7d 03                	jge    f0101257 <command_prompt_readline+0xff>
				commandidx++;
f0101254:	ff 45 f4             	incl   -0xc(%ebp)
			if (last_command_idx >= 0)
f0101257:	a1 30 e5 17 f0       	mov    0xf017e530,%eax
f010125c:	85 c0                	test   %eax,%eax
f010125e:	0f 88 0f 0a 00 00    	js     f0101c73 <command_prompt_readline+0xb1b>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
f0101264:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f010126a:	50                   	push   %eax
f010126b:	ff 75 0c             	pushl  0xc(%ebp)
f010126e:	ff 75 f4             	pushl  -0xc(%ebp)
f0101271:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f0101277:	50                   	push   %eax
f0101278:	e8 1f fd ff ff       	call   f0100f9c <clearandwritecommand>
f010127d:	83 c4 10             	add    $0x10,%esp
f0101280:	e9 ee 09 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
		} else if (c == 9) { // Tab button
f0101285:	83 7d 94 09          	cmpl   $0x9,-0x6c(%ebp)
f0101289:	0f 85 6d 07 00 00    	jne    f01019fc <command_prompt_readline+0x8a4>
			if (last_c != 9) {
f010128f:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
f0101293:	0f 84 fc 06 00 00    	je     f0101995 <command_prompt_readline+0x83d>
				clear_prefix_list(PrefixList, 100);
f0101299:	83 ec 08             	sub    $0x8,%esp
f010129c:	6a 64                	push   $0x64
f010129e:	68 40 2c 5a f0       	push   $0xf05a2c40
f01012a3:	e8 77 fe ff ff       	call   f010111f <clear_prefix_list>
f01012a8:	83 c4 10             	add    $0x10,%esp
				if (strlen(buf) == 0 || last_c == 255)
f01012ab:	83 ec 0c             	sub    $0xc,%esp
f01012ae:	ff 75 0c             	pushl  0xc(%ebp)
f01012b1:	e8 88 12 02 00       	call   f012253e <strlen>
f01012b6:	83 c4 10             	add    $0x10,%esp
f01012b9:	85 c0                	test   %eax,%eax
f01012bb:	0f 84 bd 09 00 00    	je     f0101c7e <command_prompt_readline+0xb26>
f01012c1:	81 7d e8 ff 00 00 00 	cmpl   $0xff,-0x18(%ebp)
f01012c8:	0f 84 b0 09 00 00    	je     f0101c7e <command_prompt_readline+0xb26>
					continue;
				char *arguments[MAX_ARGUMENTS];
				int number_of_arguments = prefix_list_size = 0;
f01012ce:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01012d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01012d8:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
				char temp_buf[1024];
				strcpy(temp_buf, buf);
f01012de:	83 ec 08             	sub    $0x8,%esp
f01012e1:	ff 75 0c             	pushl  0xc(%ebp)
f01012e4:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01012ea:	50                   	push   %eax
f01012eb:	e8 9d 12 02 00       	call   f012258d <strcpy>
f01012f0:	83 c4 10             	add    $0x10,%esp
				int bufLength = strlen(buf);
f01012f3:	83 ec 0c             	sub    $0xc,%esp
f01012f6:	ff 75 0c             	pushl  0xc(%ebp)
f01012f9:	e8 40 12 02 00       	call   f012253e <strlen>
f01012fe:	83 c4 10             	add    $0x10,%esp
f0101301:	89 45 90             	mov    %eax,-0x70(%ebp)
				if (buf[bufLength - 1] == ' ')
f0101304:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101307:	8d 50 ff             	lea    -0x1(%eax),%edx
f010130a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010130d:	01 d0                	add    %edx,%eax
f010130f:	8a 00                	mov    (%eax),%al
f0101311:	3c 20                	cmp    $0x20,%al
f0101313:	0f 84 6b 09 00 00    	je     f0101c84 <command_prompt_readline+0xb2c>
					continue;
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
f0101319:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010131f:	50                   	push   %eax
f0101320:	8d 85 30 f7 ff ff    	lea    -0x8d0(%ebp),%eax
f0101326:	50                   	push   %eax
f0101327:	68 df 43 12 f0       	push   $0xf01243df
f010132c:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101332:	50                   	push   %eax
f0101333:	e8 1b 18 02 00       	call   f0122b53 <strsplit>
f0101338:	83 c4 10             	add    $0x10,%esp
				int it_str = 0;
f010133b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
				if (number_of_arguments > 1) {
f0101342:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101348:	83 f8 01             	cmp    $0x1,%eax
f010134b:	0f 8e 28 01 00 00    	jle    f0101479 <command_prompt_readline+0x321>
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
f0101351:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101357:	83 ec 08             	sub    $0x8,%esp
f010135a:	68 e4 43 12 f0       	push   $0xf01243e4
f010135f:	50                   	push   %eax
f0101360:	e8 e5 12 02 00       	call   f012264a <strcmp>
f0101365:	83 c4 10             	add    $0x10,%esp
f0101368:	85 c0                	test   %eax,%eax
f010136a:	74 3c                	je     f01013a8 <command_prompt_readline+0x250>
f010136c:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101372:	83 ec 08             	sub    $0x8,%esp
f0101375:	68 e8 43 12 f0       	push   $0xf01243e8
f010137a:	50                   	push   %eax
f010137b:	e8 ca 12 02 00       	call   f012264a <strcmp>
f0101380:	83 c4 10             	add    $0x10,%esp
f0101383:	85 c0                	test   %eax,%eax
f0101385:	74 21                	je     f01013a8 <command_prompt_readline+0x250>
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
f0101387:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f010138d:	83 ec 08             	sub    $0x8,%esp
f0101390:	68 ed 43 12 f0       	push   $0xf01243ed
f0101395:	50                   	push   %eax
f0101396:	e8 af 12 02 00       	call   f012264a <strcmp>
f010139b:	83 c4 10             	add    $0x10,%esp
f010139e:	85 c0                	test   %eax,%eax
f01013a0:	74 06                	je     f01013a8 <command_prompt_readline+0x250>
						continue;
f01013a2:	90                   	nop
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f01013a3:	e9 d6 08 00 00       	jmp    f0101c7e <command_prompt_readline+0xb26>
				int it_str = 0;
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
						continue;
					if ((strcmp(arguments[0], "tst") == 0))
f01013a8:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f01013ae:	83 ec 08             	sub    $0x8,%esp
f01013b1:	68 ed 43 12 f0       	push   $0xf01243ed
f01013b6:	50                   	push   %eax
f01013b7:	e8 8e 12 02 00       	call   f012264a <strcmp>
f01013bc:	83 c4 10             	add    $0x10,%esp
f01013bf:	85 c0                	test   %eax,%eax
f01013c1:	75 09                	jne    f01013cc <command_prompt_readline+0x274>
					{
						is_tst_cmd = 1;
f01013c3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
f01013ca:	eb 07                	jmp    f01013d3 <command_prompt_readline+0x27b>
					}
					else
					{
						is_run_cmd = 1;
f01013cc:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
					}
					char temp[1024] = "";
f01013d3:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01013da:	00 00 00 
f01013dd:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01013e3:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01013e8:	b8 00 00 00 00       	mov    $0x0,%eax
f01013ed:	89 d7                	mov    %edx,%edi
f01013ef:	f3 ab                	rep stos %eax,%es:(%edi)
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
f01013f1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01013f7:	48                   	dec    %eax
f01013f8:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f01013ff:	83 ec 0c             	sub    $0xc,%esp
f0101402:	50                   	push   %eax
f0101403:	e8 36 11 02 00       	call   f012253e <strlen>
f0101408:	83 c4 10             	add    $0x10,%esp
f010140b:	8b 55 90             	mov    -0x70(%ebp),%edx
f010140e:	29 c2                	sub    %eax,%edx
f0101410:	89 d0                	mov    %edx,%eax
f0101412:	89 45 8c             	mov    %eax,-0x74(%ebp)
					for (int var = 0; var < TotalLen; ++var) {
f0101415:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010141c:	eb 1d                	jmp    f010143b <command_prompt_readline+0x2e3>
						temp[it_str++] = buf[var];
f010141e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101421:	8d 50 01             	lea    0x1(%eax),%edx
f0101424:	89 55 dc             	mov    %edx,-0x24(%ebp)
f0101427:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f010142a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010142d:	01 ca                	add    %ecx,%edx
f010142f:	8a 12                	mov    (%edx),%dl
f0101431:	88 94 05 70 fb ff ff 	mov    %dl,-0x490(%ebp,%eax,1)
					{
						is_run_cmd = 1;
					}
					char temp[1024] = "";
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
					for (int var = 0; var < TotalLen; ++var) {
f0101438:	ff 45 d8             	incl   -0x28(%ebp)
f010143b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010143e:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f0101441:	7c db                	jl     f010141e <command_prompt_readline+0x2c6>
						temp[it_str++] = buf[var];
					}
					strcpy(buf, temp);   //buf contains all arguments except the last one
f0101443:	83 ec 08             	sub    $0x8,%esp
f0101446:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f010144c:	50                   	push   %eax
f010144d:	ff 75 0c             	pushl  0xc(%ebp)
f0101450:	e8 38 11 02 00       	call   f012258d <strcpy>
f0101455:	83 c4 10             	add    $0x10,%esp
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
f0101458:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010145e:	48                   	dec    %eax
f010145f:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f0101466:	83 ec 08             	sub    $0x8,%esp
f0101469:	50                   	push   %eax
f010146a:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101470:	50                   	push   %eax
f0101471:	e8 17 11 02 00       	call   f012258d <strcpy>
f0101476:	83 c4 10             	add    $0x10,%esp
				}
				int it_prefix_list = 0;
f0101479:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
				if(number_of_arguments == 1)
f0101480:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101486:	83 f8 01             	cmp    $0x1,%eax
f0101489:	0f 85 30 01 00 00    	jne    f01015bf <command_prompt_readline+0x467>
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f010148f:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0101496:	e9 0f 01 00 00       	jmp    f01015aa <command_prompt_readline+0x452>
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
f010149b:	83 ec 0c             	sub    $0xc,%esp
f010149e:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01014a4:	50                   	push   %eax
f01014a5:	e8 94 10 02 00       	call   f012253e <strlen>
f01014aa:	83 c4 10             	add    $0x10,%esp
f01014ad:	89 c1                	mov    %eax,%ecx
f01014af:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01014b2:	89 d0                	mov    %edx,%eax
f01014b4:	01 c0                	add    %eax,%eax
f01014b6:	01 d0                	add    %edx,%eax
f01014b8:	c1 e0 03             	shl    $0x3,%eax
f01014bb:	05 40 e5 17 f0       	add    $0xf017e540,%eax
f01014c0:	8b 00                	mov    (%eax),%eax
f01014c2:	83 ec 04             	sub    $0x4,%esp
f01014c5:	51                   	push   %ecx
f01014c6:	50                   	push   %eax
f01014c7:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01014cd:	50                   	push   %eax
f01014ce:	e8 af 11 02 00       	call   f0122682 <strncmp>
f01014d3:	83 c4 10             	add    $0x10,%esp
f01014d6:	89 45 88             	mov    %eax,-0x78(%ebp)
						if (x == 0) {
f01014d9:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
f01014dd:	0f 85 c4 00 00 00    	jne    f01015a7 <command_prompt_readline+0x44f>
							it_str = -1;
f01014e3:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
							char string[1024] = "";
f01014ea:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01014f1:	00 00 00 
f01014f4:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01014fa:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01014ff:	b8 00 00 00 00       	mov    $0x0,%eax
f0101504:	89 d7                	mov    %edx,%edi
f0101506:	f3 ab                	rep stos %eax,%es:(%edi)
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f0101508:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010150f:	eb 2d                	jmp    f010153e <command_prompt_readline+0x3e6>
								string[++it_str] = commands[var].name[var3];
f0101511:	ff 45 dc             	incl   -0x24(%ebp)
f0101514:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101517:	89 d0                	mov    %edx,%eax
f0101519:	01 c0                	add    %eax,%eax
f010151b:	01 d0                	add    %edx,%eax
f010151d:	c1 e0 03             	shl    $0x3,%eax
f0101520:	05 40 e5 17 f0       	add    $0xf017e540,%eax
f0101525:	8b 10                	mov    (%eax),%edx
f0101527:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010152a:	01 d0                	add    %edx,%eax
f010152c:	8a 00                	mov    (%eax),%al
f010152e:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101534:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0101537:	01 ca                	add    %ecx,%edx
f0101539:	88 02                	mov    %al,(%edx)
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f010153b:	ff 45 cc             	incl   -0x34(%ebp)
f010153e:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101541:	89 d0                	mov    %edx,%eax
f0101543:	01 c0                	add    %eax,%eax
f0101545:	01 d0                	add    %edx,%eax
f0101547:	c1 e0 03             	shl    $0x3,%eax
f010154a:	05 40 e5 17 f0       	add    $0xf017e540,%eax
f010154f:	8b 00                	mov    (%eax),%eax
f0101551:	83 ec 0c             	sub    $0xc,%esp
f0101554:	50                   	push   %eax
f0101555:	e8 e4 0f 02 00       	call   f012253e <strlen>
f010155a:	83 c4 10             	add    $0x10,%esp
f010155d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0101560:	7f af                	jg     f0101511 <command_prompt_readline+0x3b9>
								string[++it_str] = commands[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f0101562:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101565:	c1 e0 0a             	shl    $0xa,%eax
f0101568:	05 40 2c 5a f0       	add    $0xf05a2c40,%eax
f010156d:	83 ec 04             	sub    $0x4,%esp
f0101570:	68 00 04 00 00       	push   $0x400
f0101575:	6a 00                	push   $0x0
f0101577:	50                   	push   %eax
f0101578:	e8 af 11 02 00       	call   f012272c <memset>
f010157d:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f0101580:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101583:	40                   	inc    %eax
f0101584:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0101587:	c1 e2 0a             	shl    $0xa,%edx
f010158a:	81 c2 40 2c 5a f0    	add    $0xf05a2c40,%edx
f0101590:	83 ec 04             	sub    $0x4,%esp
f0101593:	50                   	push   %eax
f0101594:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f010159a:	50                   	push   %eax
f010159b:	52                   	push   %edx
f010159c:	e8 1a 10 02 00       	call   f01225bb <strncpy>
f01015a1:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f01015a4:	ff 45 d4             	incl   -0x2c(%ebp)
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
				}
				int it_prefix_list = 0;
				if(number_of_arguments == 1)
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f01015a7:	ff 45 d0             	incl   -0x30(%ebp)
f01015aa:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01015ad:	a1 48 e9 17 f0       	mov    0xf017e948,%eax
f01015b2:	39 c2                	cmp    %eax,%edx
f01015b4:	0f 82 e1 fe ff ff    	jb     f010149b <command_prompt_readline+0x343>
f01015ba:	e9 fe 02 00 00       	jmp    f01018bd <command_prompt_readline+0x765>
						}
					}
				}
				else
				{
					if(is_run_cmd)
f01015bf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01015c3:	0f 84 7b 01 00 00    	je     f0101744 <command_prompt_readline+0x5ec>
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f01015c9:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f01015d0:	e9 5c 01 00 00       	jmp    f0101731 <command_prompt_readline+0x5d9>
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
f01015d5:	83 ec 0c             	sub    $0xc,%esp
f01015d8:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01015de:	50                   	push   %eax
f01015df:	e8 5a 0f 02 00       	call   f012253e <strlen>
f01015e4:	83 c4 10             	add    $0x10,%esp
f01015e7:	89 c1                	mov    %eax,%ecx
f01015e9:	8b 1d e0 ec 17 f0    	mov    0xf017ece0,%ebx
f01015ef:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01015f2:	89 d0                	mov    %edx,%eax
f01015f4:	01 c0                	add    %eax,%eax
f01015f6:	01 d0                	add    %edx,%eax
f01015f8:	c1 e0 02             	shl    $0x2,%eax
f01015fb:	01 d8                	add    %ebx,%eax
f01015fd:	8b 00                	mov    (%eax),%eax
f01015ff:	83 ec 04             	sub    $0x4,%esp
f0101602:	51                   	push   %ecx
f0101603:	50                   	push   %eax
f0101604:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010160a:	50                   	push   %eax
f010160b:	e8 72 10 02 00       	call   f0122682 <strncmp>
f0101610:	83 c4 10             	add    $0x10,%esp
f0101613:	89 45 84             	mov    %eax,-0x7c(%ebp)
							if (x == 0) {
f0101616:	83 7d 84 00          	cmpl   $0x0,-0x7c(%ebp)
f010161a:	0f 85 0e 01 00 00    	jne    f010172e <command_prompt_readline+0x5d6>
								it_str = -1;
f0101620:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f0101627:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f010162e:	00 00 00 
f0101631:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f0101637:	b9 ff 00 00 00       	mov    $0xff,%ecx
f010163c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101641:	89 d7                	mov    %edx,%edi
f0101643:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f0101645:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010164b:	83 f8 01             	cmp    $0x1,%eax
f010164e:	7e 39                	jle    f0101689 <command_prompt_readline+0x531>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f0101650:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0101657:	eb 1d                	jmp    f0101676 <command_prompt_readline+0x51e>
										string[++it_str] = buf[var2];
f0101659:	ff 45 dc             	incl   -0x24(%ebp)
f010165c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010165f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101662:	01 d0                	add    %edx,%eax
f0101664:	8a 00                	mov    (%eax),%al
f0101666:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f010166c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010166f:	01 ca                	add    %ecx,%edx
f0101671:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f0101673:	ff 45 c4             	incl   -0x3c(%ebp)
f0101676:	83 ec 0c             	sub    $0xc,%esp
f0101679:	ff 75 0c             	pushl  0xc(%ebp)
f010167c:	e8 bd 0e 02 00       	call   f012253e <strlen>
f0101681:	83 c4 10             	add    $0x10,%esp
f0101684:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0101687:	7f d0                	jg     f0101659 <command_prompt_readline+0x501>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f0101689:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0101690:	eb 30                	jmp    f01016c2 <command_prompt_readline+0x56a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
f0101692:	ff 45 dc             	incl   -0x24(%ebp)
f0101695:	8b 0d e0 ec 17 f0    	mov    0xf017ece0,%ecx
f010169b:	8b 55 c8             	mov    -0x38(%ebp),%edx
f010169e:	89 d0                	mov    %edx,%eax
f01016a0:	01 c0                	add    %eax,%eax
f01016a2:	01 d0                	add    %edx,%eax
f01016a4:	c1 e0 02             	shl    $0x2,%eax
f01016a7:	01 c8                	add    %ecx,%eax
f01016a9:	8b 10                	mov    (%eax),%edx
f01016ab:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01016ae:	01 d0                	add    %edx,%eax
f01016b0:	8a 00                	mov    (%eax),%al
f01016b2:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01016b8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01016bb:	01 ca                	add    %ecx,%edx
f01016bd:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f01016bf:	ff 45 c0             	incl   -0x40(%ebp)
f01016c2:	8b 0d e0 ec 17 f0    	mov    0xf017ece0,%ecx
f01016c8:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01016cb:	89 d0                	mov    %edx,%eax
f01016cd:	01 c0                	add    %eax,%eax
f01016cf:	01 d0                	add    %edx,%eax
f01016d1:	c1 e0 02             	shl    $0x2,%eax
f01016d4:	01 c8                	add    %ecx,%eax
f01016d6:	8b 00                	mov    (%eax),%eax
f01016d8:	83 ec 0c             	sub    $0xc,%esp
f01016db:	50                   	push   %eax
f01016dc:	e8 5d 0e 02 00       	call   f012253e <strlen>
f01016e1:	83 c4 10             	add    $0x10,%esp
f01016e4:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01016e7:	7f a9                	jg     f0101692 <command_prompt_readline+0x53a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f01016e9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01016ec:	c1 e0 0a             	shl    $0xa,%eax
f01016ef:	05 40 2c 5a f0       	add    $0xf05a2c40,%eax
f01016f4:	83 ec 04             	sub    $0x4,%esp
f01016f7:	68 00 04 00 00       	push   $0x400
f01016fc:	6a 00                	push   $0x0
f01016fe:	50                   	push   %eax
f01016ff:	e8 28 10 02 00       	call   f012272c <memset>
f0101704:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f0101707:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010170a:	40                   	inc    %eax
f010170b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010170e:	c1 e2 0a             	shl    $0xa,%edx
f0101711:	81 c2 40 2c 5a f0    	add    $0xf05a2c40,%edx
f0101717:	83 ec 04             	sub    $0x4,%esp
f010171a:	50                   	push   %eax
f010171b:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101721:	50                   	push   %eax
f0101722:	52                   	push   %edx
f0101723:	e8 93 0e 02 00       	call   f01225bb <strncpy>
f0101728:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f010172b:	ff 45 d4             	incl   -0x2c(%ebp)
				}
				else
				{
					if(is_run_cmd)
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f010172e:	ff 45 c8             	incl   -0x38(%ebp)
f0101731:	a1 e4 ec 17 f0       	mov    0xf017ece4,%eax
f0101736:	39 45 c8             	cmp    %eax,-0x38(%ebp)
f0101739:	0f 8c 96 fe ff ff    	jl     f01015d5 <command_prompt_readline+0x47d>
f010173f:	e9 79 01 00 00       	jmp    f01018bd <command_prompt_readline+0x765>
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
								it_prefix_list++;
							}
						}
					}
					else if(is_tst_cmd)
f0101744:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0101748:	0f 84 6f 01 00 00    	je     f01018bd <command_prompt_readline+0x765>
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f010174e:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0101755:	e9 53 01 00 00       	jmp    f01018ad <command_prompt_readline+0x755>
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
f010175a:	83 ec 0c             	sub    $0xc,%esp
f010175d:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101763:	50                   	push   %eax
f0101764:	e8 d5 0d 02 00       	call   f012253e <strlen>
f0101769:	83 c4 10             	add    $0x10,%esp
f010176c:	89 c1                	mov    %eax,%ecx
f010176e:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0101771:	89 d0                	mov    %edx,%eax
f0101773:	01 c0                	add    %eax,%eax
f0101775:	01 d0                	add    %edx,%eax
f0101777:	c1 e0 02             	shl    $0x2,%eax
f010177a:	05 00 ed 17 f0       	add    $0xf017ed00,%eax
f010177f:	8b 00                	mov    (%eax),%eax
f0101781:	83 ec 04             	sub    $0x4,%esp
f0101784:	51                   	push   %ecx
f0101785:	50                   	push   %eax
f0101786:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010178c:	50                   	push   %eax
f010178d:	e8 f0 0e 02 00       	call   f0122682 <strncmp>
f0101792:	83 c4 10             	add    $0x10,%esp
f0101795:	89 45 80             	mov    %eax,-0x80(%ebp)
							if (x == 0) {
f0101798:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f010179c:	0f 85 08 01 00 00    	jne    f01018aa <command_prompt_readline+0x752>
								it_str = -1;
f01017a2:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f01017a9:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01017b0:	00 00 00 
f01017b3:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01017b9:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01017be:	b8 00 00 00 00       	mov    $0x0,%eax
f01017c3:	89 d7                	mov    %edx,%edi
f01017c5:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f01017c7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01017cd:	83 f8 01             	cmp    $0x1,%eax
f01017d0:	7e 39                	jle    f010180b <command_prompt_readline+0x6b3>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01017d2:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f01017d9:	eb 1d                	jmp    f01017f8 <command_prompt_readline+0x6a0>
										string[++it_str] = buf[var2];
f01017db:	ff 45 dc             	incl   -0x24(%ebp)
f01017de:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01017e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017e4:	01 d0                	add    %edx,%eax
f01017e6:	8a 00                	mov    (%eax),%al
f01017e8:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01017ee:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01017f1:	01 ca                	add    %ecx,%edx
f01017f3:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01017f5:	ff 45 b8             	incl   -0x48(%ebp)
f01017f8:	83 ec 0c             	sub    $0xc,%esp
f01017fb:	ff 75 0c             	pushl  0xc(%ebp)
f01017fe:	e8 3b 0d 02 00       	call   f012253e <strlen>
f0101803:	83 c4 10             	add    $0x10,%esp
f0101806:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0101809:	7f d0                	jg     f01017db <command_prompt_readline+0x683>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f010180b:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
f0101812:	eb 2d                	jmp    f0101841 <command_prompt_readline+0x6e9>
									string[++it_str] = tests[var].name[var3];
f0101814:	ff 45 dc             	incl   -0x24(%ebp)
f0101817:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010181a:	89 d0                	mov    %edx,%eax
f010181c:	01 c0                	add    %eax,%eax
f010181e:	01 d0                	add    %edx,%eax
f0101820:	c1 e0 02             	shl    $0x2,%eax
f0101823:	05 00 ed 17 f0       	add    $0xf017ed00,%eax
f0101828:	8b 10                	mov    (%eax),%edx
f010182a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010182d:	01 d0                	add    %edx,%eax
f010182f:	8a 00                	mov    (%eax),%al
f0101831:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101837:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010183a:	01 ca                	add    %ecx,%edx
f010183c:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f010183e:	ff 45 b4             	incl   -0x4c(%ebp)
f0101841:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0101844:	89 d0                	mov    %edx,%eax
f0101846:	01 c0                	add    %eax,%eax
f0101848:	01 d0                	add    %edx,%eax
f010184a:	c1 e0 02             	shl    $0x2,%eax
f010184d:	05 00 ed 17 f0       	add    $0xf017ed00,%eax
f0101852:	8b 00                	mov    (%eax),%eax
f0101854:	83 ec 0c             	sub    $0xc,%esp
f0101857:	50                   	push   %eax
f0101858:	e8 e1 0c 02 00       	call   f012253e <strlen>
f010185d:	83 c4 10             	add    $0x10,%esp
f0101860:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0101863:	7f af                	jg     f0101814 <command_prompt_readline+0x6bc>
									string[++it_str] = tests[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f0101865:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101868:	c1 e0 0a             	shl    $0xa,%eax
f010186b:	05 40 2c 5a f0       	add    $0xf05a2c40,%eax
f0101870:	83 ec 04             	sub    $0x4,%esp
f0101873:	68 00 04 00 00       	push   $0x400
f0101878:	6a 00                	push   $0x0
f010187a:	50                   	push   %eax
f010187b:	e8 ac 0e 02 00       	call   f012272c <memset>
f0101880:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f0101883:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101886:	40                   	inc    %eax
f0101887:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010188a:	c1 e2 0a             	shl    $0xa,%edx
f010188d:	81 c2 40 2c 5a f0    	add    $0xf05a2c40,%edx
f0101893:	83 ec 04             	sub    $0x4,%esp
f0101896:	50                   	push   %eax
f0101897:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f010189d:	50                   	push   %eax
f010189e:	52                   	push   %edx
f010189f:	e8 17 0d 02 00       	call   f01225bb <strncpy>
f01018a4:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f01018a7:	ff 45 d4             	incl   -0x2c(%ebp)
							}
						}
					}
					else if(is_tst_cmd)
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f01018aa:	ff 45 bc             	incl   -0x44(%ebp)
f01018ad:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01018b0:	a1 b4 ed 17 f0       	mov    0xf017edb4,%eax
f01018b5:	39 c2                	cmp    %eax,%edx
f01018b7:	0f 82 9d fe ff ff    	jb     f010175a <command_prompt_readline+0x602>
								it_prefix_list++;
							}
						}
					}
				}
				prefix_list_size = it_prefix_list;
f01018bd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01018c0:	89 45 ec             	mov    %eax,-0x14(%ebp)
				if (it_prefix_list) {
f01018c3:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01018c7:	0f 84 a6 03 00 00    	je     f0101c73 <command_prompt_readline+0xb1b>
					prefix_list_idx = it_str = 0;
f01018cd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01018d4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01018d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01018da:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
f01018e1:	eb 1f                	jmp    f0101902 <command_prompt_readline+0x7aa>
						buf[it_str++] = PrefixList[0][var2];}
f01018e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01018e6:	8d 50 01             	lea    0x1(%eax),%edx
f01018e9:	89 55 dc             	mov    %edx,-0x24(%ebp)
f01018ec:	89 c2                	mov    %eax,%edx
f01018ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018f1:	01 c2                	add    %eax,%edx
f01018f3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01018f6:	05 40 2c 5a f0       	add    $0xf05a2c40,%eax
f01018fb:	8a 00                	mov    (%eax),%al
f01018fd:	88 02                	mov    %al,(%edx)
					}
				}
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01018ff:	ff 45 b0             	incl   -0x50(%ebp)
f0101902:	83 ec 0c             	sub    $0xc,%esp
f0101905:	68 40 2c 5a f0       	push   $0xf05a2c40
f010190a:	e8 2f 0c 02 00       	call   f012253e <strlen>
f010190f:	83 c4 10             	add    $0x10,%esp
f0101912:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0101915:	7f cc                	jg     f01018e3 <command_prompt_readline+0x78b>
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f0101917:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
f010191e:	eb 10                	jmp    f0101930 <command_prompt_readline+0x7d8>
						cputchar('\b');}
f0101920:	83 ec 0c             	sub    $0xc,%esp
f0101923:	6a 08                	push   $0x8
f0101925:	e8 1f f5 ff ff       	call   f0100e49 <cputchar>
f010192a:	83 c4 10             	add    $0x10,%esp
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f010192d:	ff 45 ac             	incl   -0x54(%ebp)
f0101930:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0101933:	3b 45 90             	cmp    -0x70(%ebp),%eax
f0101936:	7c e8                	jl     f0101920 <command_prompt_readline+0x7c8>
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f0101938:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
f010193f:	eb 1c                	jmp    f010195d <command_prompt_readline+0x805>
						cputchar(buf[j]);}
f0101941:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0101944:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101947:	01 d0                	add    %edx,%eax
f0101949:	8a 00                	mov    (%eax),%al
f010194b:	0f be c0             	movsbl %al,%eax
f010194e:	83 ec 0c             	sub    $0xc,%esp
f0101951:	50                   	push   %eax
f0101952:	e8 f2 f4 ff ff       	call   f0100e49 <cputchar>
f0101957:	83 c4 10             	add    $0x10,%esp
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f010195a:	ff 45 a8             	incl   -0x58(%ebp)
f010195d:	83 ec 0c             	sub    $0xc,%esp
f0101960:	ff 75 0c             	pushl  0xc(%ebp)
f0101963:	e8 d6 0b 02 00       	call   f012253e <strlen>
f0101968:	83 c4 10             	add    $0x10,%esp
f010196b:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010196e:	7f d1                	jg     f0101941 <command_prompt_readline+0x7e9>
						cputchar(buf[j]);}
					i = lastIndex = strlen(buf);
f0101970:	83 ec 0c             	sub    $0xc,%esp
f0101973:	ff 75 0c             	pushl  0xc(%ebp)
f0101976:	e8 c3 0b 02 00       	call   f012253e <strlen>
f010197b:	83 c4 10             	add    $0x10,%esp
f010197e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0101984:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010198a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0101990:	e9 de 02 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
				}
			}
			else {
				if (prefix_list_size > 0) {	int prev = prefix_list_idx;
f0101995:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0101999:	0f 8e d4 02 00 00    	jle    f0101c73 <command_prompt_readline+0xb1b>
f010199f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01019a2:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
				prefix_list_idx = (prefix_list_idx + 1) % prefix_list_size;
f01019a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01019ab:	40                   	inc    %eax
f01019ac:	99                   	cltd   
f01019ad:	f7 7d ec             	idivl  -0x14(%ebp)
f01019b0:	89 55 f0             	mov    %edx,-0x10(%ebp)
				RoundAutoCompleteCommandWithTheSamePrefix(strlen(PrefixList[prev]), PrefixList[prefix_list_idx], buf, &i, &lastIndex);
f01019b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01019b6:	c1 e0 0a             	shl    $0xa,%eax
f01019b9:	8d 98 40 2c 5a f0    	lea    -0xfa5d3c0(%eax),%ebx
f01019bf:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01019c5:	c1 e0 0a             	shl    $0xa,%eax
f01019c8:	05 40 2c 5a f0       	add    $0xf05a2c40,%eax
f01019cd:	83 ec 0c             	sub    $0xc,%esp
f01019d0:	50                   	push   %eax
f01019d1:	e8 68 0b 02 00       	call   f012253e <strlen>
f01019d6:	83 c4 10             	add    $0x10,%esp
f01019d9:	83 ec 0c             	sub    $0xc,%esp
f01019dc:	8d 95 74 ff ff ff    	lea    -0x8c(%ebp),%edx
f01019e2:	52                   	push   %edx
f01019e3:	8d 95 78 ff ff ff    	lea    -0x88(%ebp),%edx
f01019e9:	52                   	push   %edx
f01019ea:	ff 75 0c             	pushl  0xc(%ebp)
f01019ed:	53                   	push   %ebx
f01019ee:	50                   	push   %eax
f01019ef:	e8 75 f6 ff ff       	call   f0101069 <RoundAutoCompleteCommandWithTheSamePrefix>
f01019f4:	83 c4 20             	add    $0x20,%esp
f01019f7:	e9 77 02 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
				}
			}
		}

		else if (c == 228) { // left arrow
f01019fc:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f0101a03:	75 2e                	jne    f0101a33 <command_prompt_readline+0x8db>
			if (i > 0) {
f0101a05:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a0b:	85 c0                	test   %eax,%eax
f0101a0d:	0f 8e 60 02 00 00    	jle    f0101c73 <command_prompt_readline+0xb1b>
				i--;
f0101a13:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a19:	48                   	dec    %eax
f0101a1a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f0101a20:	83 ec 0c             	sub    $0xc,%esp
f0101a23:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a26:	e8 1e f4 ff ff       	call   f0100e49 <cputchar>
f0101a2b:	83 c4 10             	add    $0x10,%esp
f0101a2e:	e9 40 02 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
			}
		} else if (c == 229) { // right arrow
f0101a33:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f0101a3a:	75 34                	jne    f0101a70 <command_prompt_readline+0x918>
			if (i < lastIndex) {
f0101a3c:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f0101a42:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101a48:	39 c2                	cmp    %eax,%edx
f0101a4a:	0f 8d 23 02 00 00    	jge    f0101c73 <command_prompt_readline+0xb1b>
				i++;
f0101a50:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a56:	40                   	inc    %eax
f0101a57:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f0101a5d:	83 ec 0c             	sub    $0xc,%esp
f0101a60:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a63:	e8 e1 f3 ff ff       	call   f0100e49 <cputchar>
f0101a68:	83 c4 10             	add    $0x10,%esp
f0101a6b:	e9 03 02 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
f0101a70:	81 7d 94 e9 00 00 00 	cmpl   $0xe9,-0x6c(%ebp)
f0101a77:	75 4c                	jne    f0101ac5 <command_prompt_readline+0x96d>
f0101a79:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a7f:	85 c0                	test   %eax,%eax
f0101a81:	7e 42                	jle    f0101ac5 <command_prompt_readline+0x96d>
			for (int var = i; var <= lastIndex; ++var) {
f0101a83:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a89:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0101a8c:	eb 1a                	jmp    f0101aa8 <command_prompt_readline+0x950>
				buf[var] = buf[var + 1];
f0101a8e:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0101a91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a94:	01 c2                	add    %eax,%edx
f0101a96:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0101a99:	8d 48 01             	lea    0x1(%eax),%ecx
f0101a9c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a9f:	01 c8                	add    %ecx,%eax
f0101aa1:	8a 00                	mov    (%eax),%al
f0101aa3:	88 02                	mov    %al,(%edx)
				i++;
				cputchar(c);
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
			for (int var = i; var <= lastIndex; ++var) {
f0101aa5:	ff 45 a4             	incl   -0x5c(%ebp)
f0101aa8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101aae:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
f0101ab1:	7e db                	jle    f0101a8e <command_prompt_readline+0x936>
				buf[var] = buf[var + 1];
			}
			lastIndex--;
f0101ab3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101ab9:	48                   	dec    %eax
f0101aba:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0101ac0:	e9 ae 01 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
		}
		else if (c >= ' ' && i < BUFLEN - 1 && c != 229 && c != 228) {
f0101ac5:	83 7d 94 1f          	cmpl   $0x1f,-0x6c(%ebp)
f0101ac9:	7e 60                	jle    f0101b2b <command_prompt_readline+0x9d3>
f0101acb:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101ad1:	3d fe 03 00 00       	cmp    $0x3fe,%eax
f0101ad6:	7f 53                	jg     f0101b2b <command_prompt_readline+0x9d3>
f0101ad8:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f0101adf:	74 4a                	je     f0101b2b <command_prompt_readline+0x9d3>
f0101ae1:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f0101ae8:	74 41                	je     f0101b2b <command_prompt_readline+0x9d3>
			if (echoing)
f0101aea:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101aee:	74 0e                	je     f0101afe <command_prompt_readline+0x9a6>
				cputchar(c);
f0101af0:	83 ec 0c             	sub    $0xc,%esp
f0101af3:	ff 75 94             	pushl  -0x6c(%ebp)
f0101af6:	e8 4e f3 ff ff       	call   f0100e49 <cputchar>
f0101afb:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0101afe:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101b04:	8d 50 01             	lea    0x1(%eax),%edx
f0101b07:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
f0101b0d:	89 c2                	mov    %eax,%edx
f0101b0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b12:	01 d0                	add    %edx,%eax
f0101b14:	8b 55 94             	mov    -0x6c(%ebp),%edx
f0101b17:	88 10                	mov    %dl,(%eax)
			lastIndex++;
f0101b19:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101b1f:	40                   	inc    %eax
f0101b20:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0101b26:	e9 48 01 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
		} else if (c == '\b' && i > 0) {
f0101b2b:	83 7d 94 08          	cmpl   $0x8,-0x6c(%ebp)
f0101b2f:	75 60                	jne    f0101b91 <command_prompt_readline+0xa39>
f0101b31:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101b37:	85 c0                	test   %eax,%eax
f0101b39:	7e 56                	jle    f0101b91 <command_prompt_readline+0xa39>

			if (echoing)
f0101b3b:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101b3f:	74 0e                	je     f0101b4f <command_prompt_readline+0x9f7>
				cputchar(c);
f0101b41:	83 ec 0c             	sub    $0xc,%esp
f0101b44:	ff 75 94             	pushl  -0x6c(%ebp)
f0101b47:	e8 fd f2 ff ff       	call   f0100e49 <cputchar>
f0101b4c:	83 c4 10             	add    $0x10,%esp
			for (int var = i; var <= i; ++var) {
f0101b4f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101b55:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0101b58:	eb 1a                	jmp    f0101b74 <command_prompt_readline+0xa1c>
				buf[var - 1] = buf[var];
f0101b5a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0101b5d:	8d 50 ff             	lea    -0x1(%eax),%edx
f0101b60:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b63:	01 c2                	add    %eax,%edx
f0101b65:	8b 4d a0             	mov    -0x60(%ebp),%ecx
f0101b68:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b6b:	01 c8                	add    %ecx,%eax
f0101b6d:	8a 00                	mov    (%eax),%al
f0101b6f:	88 02                	mov    %al,(%edx)
			lastIndex++;
		} else if (c == '\b' && i > 0) {

			if (echoing)
				cputchar(c);
			for (int var = i; var <= i; ++var) {
f0101b71:	ff 45 a0             	incl   -0x60(%ebp)
f0101b74:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101b7a:	39 45 a0             	cmp    %eax,-0x60(%ebp)
f0101b7d:	7e db                	jle    f0101b5a <command_prompt_readline+0xa02>
				buf[var - 1] = buf[var];
			}
			i--;
f0101b7f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101b85:	48                   	dec    %eax
f0101b86:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0101b8c:	e9 e2 00 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
		} else if (c == '\n' || c == '\r') {
f0101b91:	83 7d 94 0a          	cmpl   $0xa,-0x6c(%ebp)
f0101b95:	74 0a                	je     f0101ba1 <command_prompt_readline+0xa49>
f0101b97:	83 7d 94 0d          	cmpl   $0xd,-0x6c(%ebp)
f0101b9b:	0f 85 d2 00 00 00    	jne    f0101c73 <command_prompt_readline+0xb1b>

			if (echoing)
f0101ba1:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101ba5:	74 0e                	je     f0101bb5 <command_prompt_readline+0xa5d>
				cputchar(c);
f0101ba7:	83 ec 0c             	sub    $0xc,%esp
f0101baa:	ff 75 94             	pushl  -0x6c(%ebp)
f0101bad:	e8 97 f2 ff ff       	call   f0100e49 <cputchar>
f0101bb2:	83 c4 10             	add    $0x10,%esp

			buf[lastIndex] = 0;
f0101bb5:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101bbb:	89 c2                	mov    %eax,%edx
f0101bbd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bc0:	01 d0                	add    %edx,%eax
f0101bc2:	c6 00 00             	movb   $0x0,(%eax)
			if (last_command_idx == HISTORY_MAX) {
f0101bc5:	a1 30 e5 17 f0       	mov    0xf017e530,%eax
f0101bca:	83 f8 13             	cmp    $0x13,%eax
f0101bcd:	75 56                	jne    f0101c25 <command_prompt_readline+0xacd>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101bcf:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
f0101bd6:	eb 2d                	jmp    f0101c05 <command_prompt_readline+0xaad>
					memcpy(command_history[idx], command_history[idx + 1],
f0101bd8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101bdb:	40                   	inc    %eax
f0101bdc:	c1 e0 0a             	shl    $0xa,%eax
f0101bdf:	8d 90 40 bc 5b f0    	lea    -0xfa443c0(%eax),%edx
f0101be5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101be8:	c1 e0 0a             	shl    $0xa,%eax
f0101beb:	05 40 bc 5b f0       	add    $0xf05bbc40,%eax
f0101bf0:	83 ec 04             	sub    $0x4,%esp
f0101bf3:	68 00 04 00 00       	push   $0x400
f0101bf8:	52                   	push   %edx
f0101bf9:	50                   	push   %eax
f0101bfa:	e8 5d 0b 02 00       	call   f012275c <memcpy>
f0101bff:	83 c4 10             	add    $0x10,%esp
			if (echoing)
				cputchar(c);

			buf[lastIndex] = 0;
			if (last_command_idx == HISTORY_MAX) {
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101c02:	ff 45 9c             	incl   -0x64(%ebp)
f0101c05:	83 7d 9c 12          	cmpl   $0x12,-0x64(%ebp)
f0101c09:	7e cd                	jle    f0101bd8 <command_prompt_readline+0xa80>
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
f0101c0b:	83 ec 04             	sub    $0x4,%esp
f0101c0e:	68 00 04 00 00       	push   $0x400
f0101c13:	ff 75 0c             	pushl  0xc(%ebp)
f0101c16:	68 40 08 5c f0       	push   $0xf05c0840
f0101c1b:	e8 3c 0b 02 00       	call   f012275c <memcpy>
f0101c20:	83 c4 10             	add    $0x10,%esp
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101c23:	eb 68                	jmp    f0101c8d <command_prompt_readline+0xb35>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
f0101c25:	a1 30 e5 17 f0       	mov    0xf017e530,%eax
f0101c2a:	c1 e0 0a             	shl    $0xa,%eax
f0101c2d:	05 40 bc 5b f0       	add    $0xf05bbc40,%eax
f0101c32:	83 ec 08             	sub    $0x8,%esp
f0101c35:	ff 75 0c             	pushl  0xc(%ebp)
f0101c38:	50                   	push   %eax
f0101c39:	e8 0c 0a 02 00       	call   f012264a <strcmp>
f0101c3e:	83 c4 10             	add    $0x10,%esp
f0101c41:	85 c0                	test   %eax,%eax
f0101c43:	74 48                	je     f0101c8d <command_prompt_readline+0xb35>
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
f0101c45:	a1 30 e5 17 f0       	mov    0xf017e530,%eax
f0101c4a:	40                   	inc    %eax
f0101c4b:	a3 30 e5 17 f0       	mov    %eax,0xf017e530
f0101c50:	a1 30 e5 17 f0       	mov    0xf017e530,%eax
f0101c55:	c1 e0 0a             	shl    $0xa,%eax
f0101c58:	05 40 bc 5b f0       	add    $0xf05bbc40,%eax
f0101c5d:	83 ec 04             	sub    $0x4,%esp
f0101c60:	68 00 04 00 00       	push   $0x400
f0101c65:	ff 75 0c             	pushl  0xc(%ebp)
f0101c68:	50                   	push   %eax
f0101c69:	e8 ee 0a 02 00       	call   f012275c <memcpy>
f0101c6e:	83 c4 10             	add    $0x10,%esp
			}
			return;
f0101c71:	eb 1a                	jmp    f0101c8d <command_prompt_readline+0xb35>

		}
		last_c = c;
f0101c73:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0101c76:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0101c79:	e9 44 f5 ff ff       	jmp    f01011c2 <command_prompt_readline+0x6a>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f0101c7e:	90                   	nop
f0101c7f:	e9 3e f5 ff ff       	jmp    f01011c2 <command_prompt_readline+0x6a>
				int number_of_arguments = prefix_list_size = 0;
				char temp_buf[1024];
				strcpy(temp_buf, buf);
				int bufLength = strlen(buf);
				if (buf[bufLength - 1] == ' ')
					continue;
f0101c84:	90                   	nop
			}
			return;

		}
		last_c = c;
	}
f0101c85:	e9 38 f5 ff ff       	jmp    f01011c2 <command_prompt_readline+0x6a>
			lastIndex = i;
		if (c < 0) {

			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0101c8a:	90                   	nop
f0101c8b:	eb 01                	jmp    f0101c8e <command_prompt_readline+0xb36>
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101c8d:	90                   	nop

		}
		last_c = c;
	}
}
f0101c8e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101c91:	5b                   	pop    %ebx
f0101c92:	5f                   	pop    %edi
f0101c93:	5d                   	pop    %ebp
f0101c94:	c3                   	ret    

f0101c95 <run_command_prompt>:
// ******************************************************************
// ******************************************************************

extern bool autograde ;
void run_command_prompt()
{
f0101c95:	55                   	push   %ebp
f0101c96:	89 e5                	mov    %esp,%ebp
f0101c98:	57                   	push   %edi
f0101c99:	56                   	push   %esi
f0101c9a:	53                   	push   %ebx
f0101c9b:	81 ec 0c 10 00 00    	sub    $0x100c,%esp
	if (autograde)
f0101ca1:	a1 7c 2b 5a f0       	mov    0xf05a2b7c,%eax
f0101ca6:	85 c0                	test   %eax,%eax
f0101ca8:	0f 84 85 00 00 00    	je     f0101d33 <run_command_prompt+0x9e>
	{
		char cmd1_2[BUFLEN] = "tst bsd_nice 0";
f0101cae:	8d 85 e8 ef ff ff    	lea    -0x1018(%ebp),%eax
f0101cb4:	bb f7 43 12 f0       	mov    $0xf01243f7,%ebx
f0101cb9:	ba 0f 00 00 00       	mov    $0xf,%edx
f0101cbe:	89 c7                	mov    %eax,%edi
f0101cc0:	89 de                	mov    %ebx,%esi
f0101cc2:	89 d1                	mov    %edx,%ecx
f0101cc4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0101cc6:	8d 95 f7 ef ff ff    	lea    -0x1009(%ebp),%edx
f0101ccc:	b9 f1 03 00 00       	mov    $0x3f1,%ecx
f0101cd1:	b0 00                	mov    $0x0,%al
f0101cd3:	89 d7                	mov    %edx,%edi
f0101cd5:	f3 aa                	rep stos %al,%es:(%edi)
		char cmd2_2[BUFLEN] = "tst bsd_nice 1";
f0101cd7:	8d 85 e8 f3 ff ff    	lea    -0xc18(%ebp),%eax
f0101cdd:	bb f7 47 12 f0       	mov    $0xf01247f7,%ebx
f0101ce2:	ba 0f 00 00 00       	mov    $0xf,%edx
f0101ce7:	89 c7                	mov    %eax,%edi
f0101ce9:	89 de                	mov    %ebx,%esi
f0101ceb:	89 d1                	mov    %edx,%ecx
f0101ced:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0101cef:	8d 95 f7 f3 ff ff    	lea    -0xc09(%ebp),%edx
f0101cf5:	b9 f1 03 00 00       	mov    $0x3f1,%ecx
f0101cfa:	b0 00                	mov    $0x0,%al
f0101cfc:	89 d7                	mov    %edx,%edi
f0101cfe:	f3 aa                	rep stos %al,%es:(%edi)
		char cmd3_2[BUFLEN] = "tst bsd_nice 2";
f0101d00:	8d 85 e8 f7 ff ff    	lea    -0x818(%ebp),%eax
f0101d06:	bb f7 4b 12 f0       	mov    $0xf0124bf7,%ebx
f0101d0b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0101d10:	89 c7                	mov    %eax,%edi
f0101d12:	89 de                	mov    %ebx,%esi
f0101d14:	89 d1                	mov    %edx,%ecx
f0101d16:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0101d18:	8d 95 f7 f7 ff ff    	lea    -0x809(%ebp),%edx
f0101d1e:	b9 f1 03 00 00       	mov    $0x3f1,%ecx
f0101d23:	b0 00                	mov    $0x0,%al
f0101d25:	89 d7                	mov    %edx,%edi
f0101d27:	f3 aa                	rep stos %al,%es:(%edi)
		//execute_command(cmd3_2);
		autograde = 0;
f0101d29:	c7 05 7c 2b 5a f0 00 	movl   $0x0,0xf05a2b7c
f0101d30:	00 00 00 
	}
	/*2024*/
	LIST_INIT(&foundCommands);
f0101d33:	c7 05 0c 2b 5a f0 00 	movl   $0x0,0xf05a2b0c
f0101d3a:	00 00 00 
f0101d3d:	c7 05 10 2b 5a f0 00 	movl   $0x0,0xf05a2b10
f0101d44:	00 00 00 
f0101d47:	c7 05 18 2b 5a f0 00 	movl   $0x0,0xf05a2b18
f0101d4e:	00 00 00 
		//readline("FOS> ", command_line);

		// ********** This DosKey supported readline function is a combined implementation from **********
		// ********** 		Mohamed Raafat & Mohamed Yousry, 3rd year students, FCIS, 2017		**********
		// ********** 				Combined, edited and modified by TA\Ghada Hamed				**********
		memset(command_line, 0, sizeof(command_line));
f0101d51:	83 ec 04             	sub    $0x4,%esp
f0101d54:	68 00 04 00 00       	push   $0x400
f0101d59:	6a 00                	push   $0x0
f0101d5b:	8d 85 e8 fb ff ff    	lea    -0x418(%ebp),%eax
f0101d61:	50                   	push   %eax
f0101d62:	e8 c5 09 02 00       	call   f012272c <memset>
f0101d67:	83 c4 10             	add    $0x10,%esp
		command_prompt_readline("FOS> ", command_line);
f0101d6a:	83 ec 08             	sub    $0x8,%esp
f0101d6d:	8d 85 e8 fb ff ff    	lea    -0x418(%ebp),%eax
f0101d73:	50                   	push   %eax
f0101d74:	68 f1 43 12 f0       	push   $0xf01243f1
f0101d79:	e8 da f3 ff ff       	call   f0101158 <command_prompt_readline>
f0101d7e:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0101d81:	83 ec 0c             	sub    $0xc,%esp
f0101d84:	8d 85 e8 fb ff ff    	lea    -0x418(%ebp),%eax
f0101d8a:	50                   	push   %eax
f0101d8b:	e8 4c 01 00 00       	call   f0101edc <execute_command>
f0101d90:	83 c4 10             	add    $0x10,%esp
f0101d93:	85 c0                	test   %eax,%eax
f0101d95:	78 02                	js     f0101d99 <run_command_prompt+0x104>
				break;
	}
f0101d97:	eb b8                	jmp    f0101d51 <run_command_prompt+0xbc>
		command_prompt_readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0101d99:	90                   	nop
	}
}
f0101d9a:	90                   	nop
f0101d9b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0101d9e:	5b                   	pop    %ebx
f0101d9f:	5e                   	pop    %esi
f0101da0:	5f                   	pop    %edi
f0101da1:	5d                   	pop    %ebp
f0101da2:	c3                   	ret    

f0101da3 <get_into_prompt>:
 * They're placed globally (instead of locally) to avoid clearing them while they're in use [el7 :)]
 */
int m;
char *p ;
void get_into_prompt()
{
f0101da3:	55                   	push   %ebp
f0101da4:	89 e5                	mov    %esp,%ebp
f0101da6:	83 ec 28             	sub    $0x28,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f0101da9:	9c                   	pushf  
f0101daa:	58                   	pop    %eax
f0101dab:	89 45 d8             	mov    %eax,-0x28(%ebp)
        return eflags;
f0101dae:	8b 45 d8             	mov    -0x28(%ebp),%eax
	while (1)
	{
		//disable interrupt if it's already enabled
		if (read_eflags() & FL_IF)
f0101db1:	25 00 02 00 00       	and    $0x200,%eax
f0101db6:	85 c0                	test   %eax,%eax
f0101db8:	74 01                	je     f0101dbb <get_into_prompt+0x18>
 */
//clear interrupt flag
static __inline void
cli(void)
{
	__asm __volatile("cli");
f0101dba:	fa                   	cli    
			cli();

		//Switch to the kernel virtual memory
		switchkvm();
f0101dbb:	e8 49 8c 00 00       	call   f010aa09 <switchkvm>

		//Reset current CPU
		struct cpu *c = mycpu();
f0101dc0:	e8 38 53 00 00       	call   f01070fd <mycpu>
f0101dc5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		c->ncli = 0;
f0101dc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dcb:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f0101dd2:	00 00 00 
		c->intena = 0;
f0101dd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dd8:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
f0101ddf:	00 00 00 
		c->scheduler = NULL;
f0101de2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101de5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
		c->scheduler_status = SCH_STOPPED ;
f0101dec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101def:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f0101df6:	00 00 00 
		c->proc = NULL;
f0101df9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dfc:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f0101e03:	00 00 00 

static __inline uint32
read_esp(void)
{
        uint32 esp;
        __asm __volatile("movl %%esp,%0" : "=r" (esp));
f0101e06:	89 e0                	mov    %esp,%eax
f0101e08:	89 45 dc             	mov    %eax,-0x24(%ebp)
        return esp;
f0101e0b:	8b 45 dc             	mov    -0x24(%ebp),%eax

		//Read current ESP
		uint32 cur_esp = read_esp();
f0101e0e:	89 45 e8             	mov    %eax,-0x18(%ebp)

//		//Make sure it's in the correct stack (i.e. KERN STACK below KERN_BASE)
//		assert(cur_esp < SCHD_KERN_STACK_TOP && cur_esp >= SCHD_KERN_STACK_TOP - KERNEL_STACK_SIZE);

		//Reset ESP to the beginning of the SCHED KERNEL STACK of this CPU before getting into the cmd prmpt
		uint32 cpuStackTop = (uint32)c->stack + KERNEL_STACK_SIZE;
f0101e11:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e14:	8b 40 08             	mov    0x8(%eax),%eax
f0101e17:	05 00 80 00 00       	add    $0x8000,%eax
f0101e1c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		uint32 cpuStackBottom = (uint32)c->stack + PAGE_SIZE/*GUARD Page*/;
f0101e1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e22:	8b 40 08             	mov    0x8(%eax),%eax
f0101e25:	05 00 10 00 00       	add    $0x1000,%eax
f0101e2a:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0101e2d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101e30:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static __inline void
write_esp(uint32 esp)
{
	__asm __volatile("movl %0,%%esp" : : "r" (esp) );
f0101e33:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101e36:	89 c4                	mov    %eax,%esp
		write_esp(cpuStackTop);

		//cprintf("AFTER RESIT = %x ***\n", read_esp());

		//Clear the stack content to avoid any garbage data on it when getting back into prompt
		if (cur_esp < cpuStackTop && cur_esp >= cpuStackBottom)
f0101e38:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101e3b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101e3e:	73 44                	jae    f0101e84 <get_into_prompt+0xe1>
f0101e40:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101e43:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0101e46:	72 3c                	jb     f0101e84 <get_into_prompt+0xe1>
		{
			//memset((char*)cur_esp, 0, SCHD_KERN_STACK_TOP - cur_esp);
			p = (char*)cur_esp;
f0101e48:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101e4b:	a3 20 2c 5a f0       	mov    %eax,0xf05a2c20
			m = cpuStackTop - cur_esp;
f0101e50:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101e53:	2b 45 e8             	sub    -0x18(%ebp),%eax
f0101e56:	a3 40 0c 5c f0       	mov    %eax,0xf05c0c40
			while (--m >= 0)
f0101e5b:	eb 11                	jmp    f0101e6e <get_into_prompt+0xcb>
				*p++ = 0;
f0101e5d:	a1 20 2c 5a f0       	mov    0xf05a2c20,%eax
f0101e62:	8d 50 01             	lea    0x1(%eax),%edx
f0101e65:	89 15 20 2c 5a f0    	mov    %edx,0xf05a2c20
f0101e6b:	c6 00 00             	movb   $0x0,(%eax)
		if (cur_esp < cpuStackTop && cur_esp >= cpuStackBottom)
		{
			//memset((char*)cur_esp, 0, SCHD_KERN_STACK_TOP - cur_esp);
			p = (char*)cur_esp;
			m = cpuStackTop - cur_esp;
			while (--m >= 0)
f0101e6e:	a1 40 0c 5c f0       	mov    0xf05c0c40,%eax
f0101e73:	48                   	dec    %eax
f0101e74:	a3 40 0c 5c f0       	mov    %eax,0xf05c0c40
f0101e79:	a1 40 0c 5c f0       	mov    0xf05c0c40,%eax
f0101e7e:	85 c0                	test   %eax,%eax
f0101e80:	79 db                	jns    f0101e5d <get_into_prompt+0xba>
		write_esp(cpuStackTop);

		//cprintf("AFTER RESIT = %x ***\n", read_esp());

		//Clear the stack content to avoid any garbage data on it when getting back into prompt
		if (cur_esp < cpuStackTop && cur_esp >= cpuStackBottom)
f0101e82:	eb 3a                	jmp    f0101ebe <get_into_prompt+0x11b>
				*p++ = 0;
		}
		else	//clear the ENTIRE SCHED KERN STACK
		{
			//memset((char*)schd_kern_stack_bottom, 0, SCHD_KERN_STACK_TOP - schd_kern_stack_bottom);
			p = (char*)cpuStackBottom;
f0101e84:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101e87:	a3 20 2c 5a f0       	mov    %eax,0xf05a2c20
			m = cpuStackTop - cpuStackBottom;
f0101e8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101e8f:	2b 45 e0             	sub    -0x20(%ebp),%eax
f0101e92:	a3 40 0c 5c f0       	mov    %eax,0xf05c0c40
			while (--m >= 0)
f0101e97:	eb 11                	jmp    f0101eaa <get_into_prompt+0x107>
				*p++ = 0;
f0101e99:	a1 20 2c 5a f0       	mov    0xf05a2c20,%eax
f0101e9e:	8d 50 01             	lea    0x1(%eax),%edx
f0101ea1:	89 15 20 2c 5a f0    	mov    %edx,0xf05a2c20
f0101ea7:	c6 00 00             	movb   $0x0,(%eax)
		else	//clear the ENTIRE SCHED KERN STACK
		{
			//memset((char*)schd_kern_stack_bottom, 0, SCHD_KERN_STACK_TOP - schd_kern_stack_bottom);
			p = (char*)cpuStackBottom;
			m = cpuStackTop - cpuStackBottom;
			while (--m >= 0)
f0101eaa:	a1 40 0c 5c f0       	mov    0xf05c0c40,%eax
f0101eaf:	48                   	dec    %eax
f0101eb0:	a3 40 0c 5c f0       	mov    %eax,0xf05c0c40
f0101eb5:	a1 40 0c 5c f0       	mov    0xf05c0c40,%eax
f0101eba:	85 c0                	test   %eax,%eax
f0101ebc:	79 db                	jns    f0101e99 <get_into_prompt+0xf6>
f0101ebe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
}

static __inline void
write_ebp(uint32 ebp)
{
	__asm __volatile("movl %0,%%ebp" : : "r" (ebp) );
f0101ec5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101ec8:	89 c5                	mov    %eax,%ebp

		//Reset EBP to ZERO so that when calling the run_command_prompt() it pushes ZERO into the stack
		write_ebp(0);

		//Get into the prompt (should NOT return)
		run_command_prompt(NULL);
f0101eca:	83 ec 0c             	sub    $0xc,%esp
f0101ecd:	6a 00                	push   $0x0
f0101ecf:	e8 c1 fd ff ff       	call   f0101c95 <run_command_prompt>
f0101ed4:	83 c4 10             	add    $0x10,%esp
	}
f0101ed7:	e9 cd fe ff ff       	jmp    f0101da9 <get_into_prompt+0x6>

f0101edc <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0101edc:	55                   	push   %ebp
f0101edd:	89 e5                	mov    %esp,%ebp
f0101edf:	83 ec 78             	sub    $0x78,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0101ee2:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101ee5:	50                   	push   %eax
f0101ee6:	8d 45 90             	lea    -0x70(%ebp),%eax
f0101ee9:	50                   	push   %eax
f0101eea:	68 df 43 12 f0       	push   $0xf01243df
f0101eef:	ff 75 08             	pushl  0x8(%ebp)
f0101ef2:	e8 5c 0c 02 00       	call   f0122b53 <strsplit>
f0101ef7:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0101efa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101efd:	85 c0                	test   %eax,%eax
f0101eff:	75 0a                	jne    f0101f0b <execute_command+0x2f>
		return 0;
f0101f01:	b8 00 00 00 00       	mov    $0x0,%eax
f0101f06:	e9 a4 02 00 00       	jmp    f01021af <execute_command+0x2d3>

	int ret = process_command(number_of_arguments, arguments);
f0101f0b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101f0e:	83 ec 08             	sub    $0x8,%esp
f0101f11:	8d 55 90             	lea    -0x70(%ebp),%edx
f0101f14:	52                   	push   %edx
f0101f15:	50                   	push   %eax
f0101f16:	e8 96 02 00 00       	call   f01021b1 <process_command>
f0101f1b:	83 c4 10             	add    $0x10,%esp
f0101f1e:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//cprintf("cmd %s, num of args %d, return %d\n", arguments[0], number_of_arguments, ret);

	if (ret == CMD_INVALID)
f0101f21:	83 7d e0 fd          	cmpl   $0xfffffffd,-0x20(%ebp)
f0101f25:	75 19                	jne    f0101f40 <execute_command+0x64>
	{
		cprintf("Unknown command '%s'\n", arguments[0]);
f0101f27:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101f2a:	83 ec 08             	sub    $0x8,%esp
f0101f2d:	50                   	push   %eax
f0101f2e:	68 f7 4f 12 f0       	push   $0xf0124ff7
f0101f33:	e8 34 f0 ff ff       	call   f0100f6c <cprintf>
f0101f38:	83 c4 10             	add    $0x10,%esp
f0101f3b:	e9 6a 02 00 00       	jmp    f01021aa <execute_command+0x2ce>
	}
	else if (ret == CMD_INV_NUM_ARGS)
f0101f40:	83 7d e0 fe          	cmpl   $0xfffffffe,-0x20(%ebp)
f0101f44:	75 4f                	jne    f0101f95 <execute_command+0xb9>
	{
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101f46:	a1 18 2b 5a f0       	mov    0xf05a2b18,%eax
f0101f4b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		if (numOfFoundCmds != 1)
f0101f4e:	83 7d d8 01          	cmpl   $0x1,-0x28(%ebp)
f0101f52:	74 17                	je     f0101f6b <execute_command+0x8f>
		{
			panic("command is found but the list is either empty or contains more than one command!");
f0101f54:	83 ec 04             	sub    $0x4,%esp
f0101f57:	68 10 50 12 f0       	push   $0xf0125010
f0101f5c:	68 8b 01 00 00       	push   $0x18b
f0101f61:	68 61 50 12 f0       	push   $0xf0125061
f0101f66:	e8 af e3 ff ff       	call   f010031a <_panic>
		}
		struct Command * cmd = LIST_FIRST(&foundCommands);
f0101f6b:	a1 0c 2b 5a f0       	mov    0xf05a2b0c,%eax
f0101f70:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		cprintf("%s: invalid number of args.\nDescription: %s\n", cmd->name, cmd->description);
f0101f73:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101f76:	8b 50 04             	mov    0x4(%eax),%edx
f0101f79:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101f7c:	8b 00                	mov    (%eax),%eax
f0101f7e:	83 ec 04             	sub    $0x4,%esp
f0101f81:	52                   	push   %edx
f0101f82:	50                   	push   %eax
f0101f83:	68 7c 50 12 f0       	push   $0xf012507c
f0101f88:	e8 df ef ff ff       	call   f0100f6c <cprintf>
f0101f8d:	83 c4 10             	add    $0x10,%esp
f0101f90:	e9 15 02 00 00       	jmp    f01021aa <execute_command+0x2ce>
	}
	else if (ret == CMD_MATCHED)
f0101f95:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f0101f99:	0f 85 e6 01 00 00    	jne    f0102185 <execute_command+0x2a9>
	{
		int i = 1;
f0101f9f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101fa6:	a1 18 2b 5a f0       	mov    0xf05a2b18,%eax
f0101fab:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if (numOfFoundCmds == 0)
f0101fae:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0101fb2:	75 17                	jne    f0101fcb <execute_command+0xef>
		{
			panic("command is matched but the list is empty!");
f0101fb4:	83 ec 04             	sub    $0x4,%esp
f0101fb7:	68 ac 50 12 f0       	push   $0xf01250ac
f0101fbc:	68 96 01 00 00       	push   $0x196
f0101fc1:	68 61 50 12 f0       	push   $0xf0125061
f0101fc6:	e8 4f e3 ff ff       	call   f010031a <_panic>
		}
		struct Command * cmd = NULL;
f0101fcb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(cmd, &foundCommands)
f0101fd2:	a1 0c 2b 5a f0       	mov    0xf05a2b0c,%eax
f0101fd7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101fda:	eb 28                	jmp    f0102004 <execute_command+0x128>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
f0101fdc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101fdf:	8b 10                	mov    (%eax),%edx
f0101fe1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101fe4:	8d 48 01             	lea    0x1(%eax),%ecx
f0101fe7:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0101fea:	83 ec 04             	sub    $0x4,%esp
f0101fed:	52                   	push   %edx
f0101fee:	50                   	push   %eax
f0101fef:	68 d6 50 12 f0       	push   $0xf01250d6
f0101ff4:	e8 73 ef ff ff       	call   f0100f6c <cprintf>
f0101ff9:	83 c4 10             	add    $0x10,%esp
		if (numOfFoundCmds == 0)
		{
			panic("command is matched but the list is empty!");
		}
		struct Command * cmd = NULL;
		LIST_FOREACH(cmd, &foundCommands)
f0101ffc:	a1 14 2b 5a f0       	mov    0xf05a2b14,%eax
f0102001:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0102004:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102008:	74 08                	je     f0102012 <execute_command+0x136>
f010200a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010200d:	8b 40 10             	mov    0x10(%eax),%eax
f0102010:	eb 05                	jmp    f0102017 <execute_command+0x13b>
f0102012:	b8 00 00 00 00       	mov    $0x0,%eax
f0102017:	a3 14 2b 5a f0       	mov    %eax,0xf05a2b14
f010201c:	a1 14 2b 5a f0       	mov    0xf05a2b14,%eax
f0102021:	85 c0                	test   %eax,%eax
f0102023:	75 b7                	jne    f0101fdc <execute_command+0x100>
f0102025:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102029:	75 b1                	jne    f0101fdc <execute_command+0x100>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
f010202b:	83 ec 08             	sub    $0x8,%esp
f010202e:	ff 75 dc             	pushl  -0x24(%ebp)
f0102031:	68 e0 50 12 f0       	push   $0xf01250e0
f0102036:	e8 31 ef ff ff       	call   f0100f6c <cprintf>
f010203b:	83 c4 10             	add    $0x10,%esp
		char Chose = getchar();
f010203e:	e8 1d ee ff ff       	call   f0100e60 <getchar>
f0102043:	88 45 ef             	mov    %al,-0x11(%ebp)
		cputchar(Chose);
f0102046:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f010204a:	83 ec 0c             	sub    $0xc,%esp
f010204d:	50                   	push   %eax
f010204e:	e8 f6 ed ff ff       	call   f0100e49 <cputchar>
f0102053:	83 c4 10             	add    $0x10,%esp
		int selection = 0;
f0102056:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		while (Chose >= '0' && Chose <= '9')
f010205d:	eb 40                	jmp    f010209f <execute_command+0x1c3>
		{
			selection = selection*10 + (Chose - '0') ;
f010205f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0102062:	89 d0                	mov    %edx,%eax
f0102064:	c1 e0 02             	shl    $0x2,%eax
f0102067:	01 d0                	add    %edx,%eax
f0102069:	01 c0                	add    %eax,%eax
f010206b:	89 c2                	mov    %eax,%edx
f010206d:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0102071:	83 e8 30             	sub    $0x30,%eax
f0102074:	01 d0                	add    %edx,%eax
f0102076:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (selection < 1 || selection > numOfFoundCmds)
f0102079:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010207d:	7e 2c                	jle    f01020ab <execute_command+0x1cf>
f010207f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102082:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0102085:	7f 24                	jg     f01020ab <execute_command+0x1cf>
				break;

			Chose = getchar();
f0102087:	e8 d4 ed ff ff       	call   f0100e60 <getchar>
f010208c:	88 45 ef             	mov    %al,-0x11(%ebp)
			cputchar(Chose);
f010208f:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0102093:	83 ec 0c             	sub    $0xc,%esp
f0102096:	50                   	push   %eax
f0102097:	e8 ad ed ff ff       	call   f0100e49 <cputchar>
f010209c:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
		char Chose = getchar();
		cputchar(Chose);
		int selection = 0;
		while (Chose >= '0' && Chose <= '9')
f010209f:	80 7d ef 2f          	cmpb   $0x2f,-0x11(%ebp)
f01020a3:	7e 06                	jle    f01020ab <execute_command+0x1cf>
f01020a5:	80 7d ef 39          	cmpb   $0x39,-0x11(%ebp)
f01020a9:	7e b4                	jle    f010205f <execute_command+0x183>
				break;

			Chose = getchar();
			cputchar(Chose);
		}
		cputchar('\n');
f01020ab:	83 ec 0c             	sub    $0xc,%esp
f01020ae:	6a 0a                	push   $0xa
f01020b0:	e8 94 ed ff ff       	call   f0100e49 <cputchar>
f01020b5:	83 c4 10             	add    $0x10,%esp
		if (selection >= 1 && selection <= numOfFoundCmds)
f01020b8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01020bc:	0f 8e e8 00 00 00    	jle    f01021aa <execute_command+0x2ce>
f01020c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01020c5:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01020c8:	0f 8f dc 00 00 00    	jg     f01021aa <execute_command+0x2ce>
		{
			int c = 1;
f01020ce:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
			LIST_FOREACH(cmd, &foundCommands)
f01020d5:	a1 0c 2b 5a f0       	mov    0xf05a2b0c,%eax
f01020da:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01020dd:	eb 75                	jmp    f0102154 <execute_command+0x278>
			{
				if (c++ == selection)
f01020df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01020e2:	8d 50 01             	lea    0x1(%eax),%edx
f01020e5:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01020e8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01020eb:	75 5f                	jne    f010214c <execute_command+0x270>
				{
					if (cmd->num_of_args == 0)
f01020ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01020f0:	8b 40 0c             	mov    0xc(%eax),%eax
f01020f3:	85 c0                	test   %eax,%eax
f01020f5:	75 31                	jne    f0102128 <execute_command+0x24c>
					{
						cprintf("FOS> %s\n", cmd->name);
f01020f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01020fa:	8b 00                	mov    (%eax),%eax
f01020fc:	83 ec 08             	sub    $0x8,%esp
f01020ff:	50                   	push   %eax
f0102100:	68 43 51 12 f0       	push   $0xf0125143
f0102105:	e8 62 ee ff ff       	call   f0100f6c <cprintf>
f010210a:	83 c4 10             	add    $0x10,%esp
						return cmd->function_to_execute(number_of_arguments, arguments);
f010210d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102110:	8b 40 08             	mov    0x8(%eax),%eax
f0102113:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0102116:	83 ec 08             	sub    $0x8,%esp
f0102119:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f010211c:	51                   	push   %ecx
f010211d:	52                   	push   %edx
f010211e:	ff d0                	call   *%eax
f0102120:	83 c4 10             	add    $0x10,%esp
f0102123:	e9 87 00 00 00       	jmp    f01021af <execute_command+0x2d3>
					}
					else
					{
						cprintf("%s: %s\n", cmd->name, cmd->description);
f0102128:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010212b:	8b 50 04             	mov    0x4(%eax),%edx
f010212e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102131:	8b 00                	mov    (%eax),%eax
f0102133:	83 ec 04             	sub    $0x4,%esp
f0102136:	52                   	push   %edx
f0102137:	50                   	push   %eax
f0102138:	68 4c 51 12 f0       	push   $0xf012514c
f010213d:	e8 2a ee ff ff       	call   f0100f6c <cprintf>
f0102142:	83 c4 10             	add    $0x10,%esp
						return 0;
f0102145:	b8 00 00 00 00       	mov    $0x0,%eax
f010214a:	eb 63                	jmp    f01021af <execute_command+0x2d3>
		}
		cputchar('\n');
		if (selection >= 1 && selection <= numOfFoundCmds)
		{
			int c = 1;
			LIST_FOREACH(cmd, &foundCommands)
f010214c:	a1 14 2b 5a f0       	mov    0xf05a2b14,%eax
f0102151:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0102154:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102158:	74 08                	je     f0102162 <execute_command+0x286>
f010215a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010215d:	8b 40 10             	mov    0x10(%eax),%eax
f0102160:	eb 05                	jmp    f0102167 <execute_command+0x28b>
f0102162:	b8 00 00 00 00       	mov    $0x0,%eax
f0102167:	a3 14 2b 5a f0       	mov    %eax,0xf05a2b14
f010216c:	a1 14 2b 5a f0       	mov    0xf05a2b14,%eax
f0102171:	85 c0                	test   %eax,%eax
f0102173:	0f 85 66 ff ff ff    	jne    f01020df <execute_command+0x203>
f0102179:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010217d:	0f 85 5c ff ff ff    	jne    f01020df <execute_command+0x203>
f0102183:	eb 25                	jmp    f01021aa <execute_command+0x2ce>
			}
		}
	}
	else
	{
		return commands[ret].function_to_execute(number_of_arguments, arguments);
f0102185:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102188:	89 d0                	mov    %edx,%eax
f010218a:	01 c0                	add    %eax,%eax
f010218c:	01 d0                	add    %edx,%eax
f010218e:	c1 e0 03             	shl    $0x3,%eax
f0102191:	05 48 e5 17 f0       	add    $0xf017e548,%eax
f0102196:	8b 00                	mov    (%eax),%eax
f0102198:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010219b:	83 ec 08             	sub    $0x8,%esp
f010219e:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f01021a1:	51                   	push   %ecx
f01021a2:	52                   	push   %edx
f01021a3:	ff d0                	call   *%eax
f01021a5:	83 c4 10             	add    $0x10,%esp
f01021a8:	eb 05                	jmp    f01021af <execute_command+0x2d3>
	}
	return 0;
f01021aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01021af:	c9                   	leave  
f01021b0:	c3                   	ret    

f01021b1 <process_command>:

// Youssef Mohsen , Youssef Ahmed
int process_command(int number_of_arguments, char** arguments)
{
f01021b1:	55                   	push   %ebp
f01021b2:	89 e5                	mov    %esp,%ebp
f01021b4:	83 ec 28             	sub    $0x28,%esp
    struct Command * element = NULL;
f01021b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    LIST_FOREACH(element, &foundCommands)
f01021be:	a1 0c 2b 5a f0       	mov    0xf05a2b0c,%eax
f01021c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01021c6:	e9 90 00 00 00       	jmp    f010225b <process_command+0xaa>
    {
        LIST_REMOVE(&foundCommands,element);
f01021cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01021cf:	75 17                	jne    f01021e8 <process_command+0x37>
f01021d1:	83 ec 04             	sub    $0x4,%esp
f01021d4:	68 54 51 12 f0       	push   $0xf0125154
f01021d9:	68 cd 01 00 00       	push   $0x1cd
f01021de:	68 61 50 12 f0       	push   $0xf0125061
f01021e3:	e8 32 e1 ff ff       	call   f010031a <_panic>
f01021e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01021eb:	8b 40 10             	mov    0x10(%eax),%eax
f01021ee:	85 c0                	test   %eax,%eax
f01021f0:	74 11                	je     f0102203 <process_command+0x52>
f01021f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01021f5:	8b 40 10             	mov    0x10(%eax),%eax
f01021f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01021fb:	8b 52 14             	mov    0x14(%edx),%edx
f01021fe:	89 50 14             	mov    %edx,0x14(%eax)
f0102201:	eb 0b                	jmp    f010220e <process_command+0x5d>
f0102203:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102206:	8b 40 14             	mov    0x14(%eax),%eax
f0102209:	a3 10 2b 5a f0       	mov    %eax,0xf05a2b10
f010220e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102211:	8b 40 14             	mov    0x14(%eax),%eax
f0102214:	85 c0                	test   %eax,%eax
f0102216:	74 11                	je     f0102229 <process_command+0x78>
f0102218:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010221b:	8b 40 14             	mov    0x14(%eax),%eax
f010221e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102221:	8b 52 10             	mov    0x10(%edx),%edx
f0102224:	89 50 10             	mov    %edx,0x10(%eax)
f0102227:	eb 0b                	jmp    f0102234 <process_command+0x83>
f0102229:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010222c:	8b 40 10             	mov    0x10(%eax),%eax
f010222f:	a3 0c 2b 5a f0       	mov    %eax,0xf05a2b0c
f0102234:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102237:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010223e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102241:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0102248:	a1 18 2b 5a f0       	mov    0xf05a2b18,%eax
f010224d:	48                   	dec    %eax
f010224e:	a3 18 2b 5a f0       	mov    %eax,0xf05a2b18

// Youssef Mohsen , Youssef Ahmed
int process_command(int number_of_arguments, char** arguments)
{
    struct Command * element = NULL;
    LIST_FOREACH(element, &foundCommands)
f0102253:	a1 14 2b 5a f0       	mov    0xf05a2b14,%eax
f0102258:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010225b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010225f:	74 08                	je     f0102269 <process_command+0xb8>
f0102261:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102264:	8b 40 10             	mov    0x10(%eax),%eax
f0102267:	eb 05                	jmp    f010226e <process_command+0xbd>
f0102269:	b8 00 00 00 00       	mov    $0x0,%eax
f010226e:	a3 14 2b 5a f0       	mov    %eax,0xf05a2b14
f0102273:	a1 14 2b 5a f0       	mov    0xf05a2b14,%eax
f0102278:	85 c0                	test   %eax,%eax
f010227a:	0f 85 4b ff ff ff    	jne    f01021cb <process_command+0x1a>
f0102280:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102284:	0f 85 41 ff ff ff    	jne    f01021cb <process_command+0x1a>
    {
        LIST_REMOVE(&foundCommands,element);
    }
    int x=0;
f010228a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (int i = 0; i < NUM_OF_COMMANDS; i++)
f0102291:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0102298:	e9 42 02 00 00       	jmp    f01024df <process_command+0x32e>
    {
        if (strcmp(arguments[0], commands[i].name) == 0)
f010229d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01022a0:	89 d0                	mov    %edx,%eax
f01022a2:	01 c0                	add    %eax,%eax
f01022a4:	01 d0                	add    %edx,%eax
f01022a6:	c1 e0 03             	shl    $0x3,%eax
f01022a9:	05 40 e5 17 f0       	add    $0xf017e540,%eax
f01022ae:	8b 10                	mov    (%eax),%edx
f01022b0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01022b3:	8b 00                	mov    (%eax),%eax
f01022b5:	83 ec 08             	sub    $0x8,%esp
f01022b8:	52                   	push   %edx
f01022b9:	50                   	push   %eax
f01022ba:	e8 8b 03 02 00       	call   f012264a <strcmp>
f01022bf:	83 c4 10             	add    $0x10,%esp
f01022c2:	85 c0                	test   %eax,%eax
f01022c4:	0f 85 1e 01 00 00    	jne    f01023e8 <process_command+0x237>
        {
            cprintf("%d %d \n",commands[i].num_of_args,number_of_arguments-1);
f01022ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01022cd:	8d 48 ff             	lea    -0x1(%eax),%ecx
f01022d0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01022d3:	89 d0                	mov    %edx,%eax
f01022d5:	01 c0                	add    %eax,%eax
f01022d7:	01 d0                	add    %edx,%eax
f01022d9:	c1 e0 03             	shl    $0x3,%eax
f01022dc:	05 4c e5 17 f0       	add    $0xf017e54c,%eax
f01022e1:	8b 00                	mov    (%eax),%eax
f01022e3:	83 ec 04             	sub    $0x4,%esp
f01022e6:	51                   	push   %ecx
f01022e7:	50                   	push   %eax
f01022e8:	68 72 51 12 f0       	push   $0xf0125172
f01022ed:	e8 7a ec ff ff       	call   f0100f6c <cprintf>
f01022f2:	83 c4 10             	add    $0x10,%esp
            if(commands[i].num_of_args != number_of_arguments-1)
f01022f5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01022f8:	89 d0                	mov    %edx,%eax
f01022fa:	01 c0                	add    %eax,%eax
f01022fc:	01 d0                	add    %edx,%eax
f01022fe:	c1 e0 03             	shl    $0x3,%eax
f0102301:	05 4c e5 17 f0       	add    $0xf017e54c,%eax
f0102306:	8b 00                	mov    (%eax),%eax
f0102308:	8b 55 08             	mov    0x8(%ebp),%edx
f010230b:	4a                   	dec    %edx
f010230c:	39 d0                	cmp    %edx,%eax
f010230e:	0f 84 cc 00 00 00    	je     f01023e0 <process_command+0x22f>
            {
                if (commands[i].num_of_args == -1 && number_of_arguments-1 > 0)
f0102314:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0102317:	89 d0                	mov    %edx,%eax
f0102319:	01 c0                	add    %eax,%eax
f010231b:	01 d0                	add    %edx,%eax
f010231d:	c1 e0 03             	shl    $0x3,%eax
f0102320:	05 4c e5 17 f0       	add    $0xf017e54c,%eax
f0102325:	8b 00                	mov    (%eax),%eax
f0102327:	83 f8 ff             	cmp    $0xffffffff,%eax
f010232a:	75 10                	jne    f010233c <process_command+0x18b>
f010232c:	8b 45 08             	mov    0x8(%ebp),%eax
f010232f:	48                   	dec    %eax
f0102330:	85 c0                	test   %eax,%eax
f0102332:	7e 08                	jle    f010233c <process_command+0x18b>
                {
                    return i;
f0102334:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102337:	e9 c5 01 00 00       	jmp    f0102501 <process_command+0x350>
                }
                else
                {
                LIST_INSERT_HEAD(&foundCommands , &commands[i]);
f010233c:	8b 15 0c 2b 5a f0    	mov    0xf05a2b0c,%edx
f0102342:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0102345:	89 c8                	mov    %ecx,%eax
f0102347:	01 c0                	add    %eax,%eax
f0102349:	01 c8                	add    %ecx,%eax
f010234b:	c1 e0 03             	shl    $0x3,%eax
f010234e:	05 50 e5 17 f0       	add    $0xf017e550,%eax
f0102353:	89 10                	mov    %edx,(%eax)
f0102355:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0102358:	89 d0                	mov    %edx,%eax
f010235a:	01 c0                	add    %eax,%eax
f010235c:	01 d0                	add    %edx,%eax
f010235e:	c1 e0 03             	shl    $0x3,%eax
f0102361:	05 50 e5 17 f0       	add    $0xf017e550,%eax
f0102366:	8b 00                	mov    (%eax),%eax
f0102368:	85 c0                	test   %eax,%eax
f010236a:	74 1c                	je     f0102388 <process_command+0x1d7>
f010236c:	8b 15 0c 2b 5a f0    	mov    0xf05a2b0c,%edx
f0102372:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0102375:	89 c8                	mov    %ecx,%eax
f0102377:	01 c0                	add    %eax,%eax
f0102379:	01 c8                	add    %ecx,%eax
f010237b:	c1 e0 03             	shl    $0x3,%eax
f010237e:	05 40 e5 17 f0       	add    $0xf017e540,%eax
f0102383:	89 42 14             	mov    %eax,0x14(%edx)
f0102386:	eb 16                	jmp    f010239e <process_command+0x1ed>
f0102388:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010238b:	89 d0                	mov    %edx,%eax
f010238d:	01 c0                	add    %eax,%eax
f010238f:	01 d0                	add    %edx,%eax
f0102391:	c1 e0 03             	shl    $0x3,%eax
f0102394:	05 40 e5 17 f0       	add    $0xf017e540,%eax
f0102399:	a3 10 2b 5a f0       	mov    %eax,0xf05a2b10
f010239e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01023a1:	89 d0                	mov    %edx,%eax
f01023a3:	01 c0                	add    %eax,%eax
f01023a5:	01 d0                	add    %edx,%eax
f01023a7:	c1 e0 03             	shl    $0x3,%eax
f01023aa:	05 40 e5 17 f0       	add    $0xf017e540,%eax
f01023af:	a3 0c 2b 5a f0       	mov    %eax,0xf05a2b0c
f01023b4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01023b7:	89 d0                	mov    %edx,%eax
f01023b9:	01 c0                	add    %eax,%eax
f01023bb:	01 d0                	add    %edx,%eax
f01023bd:	c1 e0 03             	shl    $0x3,%eax
f01023c0:	05 54 e5 17 f0       	add    $0xf017e554,%eax
f01023c5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01023cb:	a1 18 2b 5a f0       	mov    0xf05a2b18,%eax
f01023d0:	40                   	inc    %eax
f01023d1:	a3 18 2b 5a f0       	mov    %eax,0xf05a2b18
                return CMD_INV_NUM_ARGS;
f01023d6:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f01023db:	e9 21 01 00 00       	jmp    f0102501 <process_command+0x350>
                }
            }
            else
            {
            return i;
f01023e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01023e3:	e9 19 01 00 00       	jmp    f0102501 <process_command+0x350>
            }
        }
        else
        {
            const char* ptr1 = arguments[0];
f01023e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01023eb:	8b 00                	mov    (%eax),%eax
f01023ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
            const char* ptr2 = commands[i].name;
f01023f0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01023f3:	89 d0                	mov    %edx,%eax
f01023f5:	01 c0                	add    %eax,%eax
f01023f7:	01 d0                	add    %edx,%eax
f01023f9:	c1 e0 03             	shl    $0x3,%eax
f01023fc:	05 40 e5 17 f0       	add    $0xf017e540,%eax
f0102401:	8b 00                	mov    (%eax),%eax
f0102403:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            while (*ptr1 != '\0' && *ptr2 != '\0')
f0102406:	eb 14                	jmp    f010241c <process_command+0x26b>
            {
                if (*ptr1 == *ptr2)
f0102408:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010240b:	8a 10                	mov    (%eax),%dl
f010240d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102410:	8a 00                	mov    (%eax),%al
f0102412:	38 c2                	cmp    %al,%dl
f0102414:	75 03                	jne    f0102419 <process_command+0x268>
                {
                    ptr1++;
f0102416:	ff 45 e8             	incl   -0x18(%ebp)
                }
                ptr2++;
f0102419:	ff 45 e4             	incl   -0x1c(%ebp)
        }
        else
        {
            const char* ptr1 = arguments[0];
            const char* ptr2 = commands[i].name;
            while (*ptr1 != '\0' && *ptr2 != '\0')
f010241c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010241f:	8a 00                	mov    (%eax),%al
f0102421:	84 c0                	test   %al,%al
f0102423:	74 09                	je     f010242e <process_command+0x27d>
f0102425:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102428:	8a 00                	mov    (%eax),%al
f010242a:	84 c0                	test   %al,%al
f010242c:	75 da                	jne    f0102408 <process_command+0x257>
                {
                    ptr1++;
                }
                ptr2++;
            }
            if (*ptr1 == '\0')
f010242e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102431:	8a 00                	mov    (%eax),%al
f0102433:	84 c0                	test   %al,%al
f0102435:	0f 85 a1 00 00 00    	jne    f01024dc <process_command+0x32b>
            {
                LIST_INSERT_HEAD(&foundCommands , &commands[i]);
f010243b:	8b 15 0c 2b 5a f0    	mov    0xf05a2b0c,%edx
f0102441:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0102444:	89 c8                	mov    %ecx,%eax
f0102446:	01 c0                	add    %eax,%eax
f0102448:	01 c8                	add    %ecx,%eax
f010244a:	c1 e0 03             	shl    $0x3,%eax
f010244d:	05 50 e5 17 f0       	add    $0xf017e550,%eax
f0102452:	89 10                	mov    %edx,(%eax)
f0102454:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0102457:	89 d0                	mov    %edx,%eax
f0102459:	01 c0                	add    %eax,%eax
f010245b:	01 d0                	add    %edx,%eax
f010245d:	c1 e0 03             	shl    $0x3,%eax
f0102460:	05 50 e5 17 f0       	add    $0xf017e550,%eax
f0102465:	8b 00                	mov    (%eax),%eax
f0102467:	85 c0                	test   %eax,%eax
f0102469:	74 1c                	je     f0102487 <process_command+0x2d6>
f010246b:	8b 15 0c 2b 5a f0    	mov    0xf05a2b0c,%edx
f0102471:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0102474:	89 c8                	mov    %ecx,%eax
f0102476:	01 c0                	add    %eax,%eax
f0102478:	01 c8                	add    %ecx,%eax
f010247a:	c1 e0 03             	shl    $0x3,%eax
f010247d:	05 40 e5 17 f0       	add    $0xf017e540,%eax
f0102482:	89 42 14             	mov    %eax,0x14(%edx)
f0102485:	eb 16                	jmp    f010249d <process_command+0x2ec>
f0102487:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010248a:	89 d0                	mov    %edx,%eax
f010248c:	01 c0                	add    %eax,%eax
f010248e:	01 d0                	add    %edx,%eax
f0102490:	c1 e0 03             	shl    $0x3,%eax
f0102493:	05 40 e5 17 f0       	add    $0xf017e540,%eax
f0102498:	a3 10 2b 5a f0       	mov    %eax,0xf05a2b10
f010249d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01024a0:	89 d0                	mov    %edx,%eax
f01024a2:	01 c0                	add    %eax,%eax
f01024a4:	01 d0                	add    %edx,%eax
f01024a6:	c1 e0 03             	shl    $0x3,%eax
f01024a9:	05 40 e5 17 f0       	add    $0xf017e540,%eax
f01024ae:	a3 0c 2b 5a f0       	mov    %eax,0xf05a2b0c
f01024b3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01024b6:	89 d0                	mov    %edx,%eax
f01024b8:	01 c0                	add    %eax,%eax
f01024ba:	01 d0                	add    %edx,%eax
f01024bc:	c1 e0 03             	shl    $0x3,%eax
f01024bf:	05 54 e5 17 f0       	add    $0xf017e554,%eax
f01024c4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01024ca:	a1 18 2b 5a f0       	mov    0xf05a2b18,%eax
f01024cf:	40                   	inc    %eax
f01024d0:	a3 18 2b 5a f0       	mov    %eax,0xf05a2b18
                x=1;
f01024d5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
    LIST_FOREACH(element, &foundCommands)
    {
        LIST_REMOVE(&foundCommands,element);
    }
    int x=0;
    for (int i = 0; i < NUM_OF_COMMANDS; i++)
f01024dc:	ff 45 ec             	incl   -0x14(%ebp)
f01024df:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01024e2:	a1 48 e9 17 f0       	mov    0xf017e948,%eax
f01024e7:	39 c2                	cmp    %eax,%edx
f01024e9:	0f 82 ae fd ff ff    	jb     f010229d <process_command+0xec>
                LIST_INSERT_HEAD(&foundCommands , &commands[i]);
                x=1;
            }
        }
    }
    if (x==1)
f01024ef:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01024f3:	75 07                	jne    f01024fc <process_command+0x34b>
    {
        return CMD_MATCHED;
f01024f5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01024fa:	eb 05                	jmp    f0102501 <process_command+0x350>
    }
    return CMD_INVALID;
f01024fc:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
f0102501:	c9                   	leave  
f0102502:	c3                   	ret    

f0102503 <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0102503:	55                   	push   %ebp
f0102504:	89 e5                	mov    %esp,%ebp
f0102506:	c7 05 50 29 5a f0 00 	movl   $0x0,0xf05a2950
f010250d:	00 00 00 
f0102510:	90                   	nop
f0102511:	5d                   	pop    %ebp
f0102512:	c3                   	ret    

f0102513 <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0102513:	55                   	push   %ebp
f0102514:	89 e5                	mov    %esp,%ebp
f0102516:	c7 05 50 29 5a f0 01 	movl   $0x1,0xf05a2950
f010251d:	00 00 00 
f0102520:	90                   	nop
f0102521:	5d                   	pop    %ebp
f0102522:	c3                   	ret    

f0102523 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0102523:	55                   	push   %ebp
f0102524:	89 e5                	mov    %esp,%ebp
f0102526:	c7 05 50 29 5a f0 02 	movl   $0x2,0xf05a2950
f010252d:	00 00 00 
f0102530:	90                   	nop
f0102531:	5d                   	pop    %ebp
f0102532:	c3                   	ret    

f0102533 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0102533:	55                   	push   %ebp
f0102534:	89 e5                	mov    %esp,%ebp
f0102536:	c7 05 50 29 5a f0 03 	movl   $0x3,0xf05a2950
f010253d:	00 00 00 
f0102540:	90                   	nop
f0102541:	5d                   	pop    %ebp
f0102542:	c3                   	ret    

f0102543 <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0102543:	55                   	push   %ebp
f0102544:	89 e5                	mov    %esp,%ebp
f0102546:	c7 05 50 29 5a f0 04 	movl   $0x4,0xf05a2950
f010254d:	00 00 00 
f0102550:	90                   	nop
f0102551:	5d                   	pop    %ebp
f0102552:	c3                   	ret    

f0102553 <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0102553:	55                   	push   %ebp
f0102554:	89 e5                	mov    %esp,%ebp
f0102556:	a1 50 29 5a f0       	mov    0xf05a2950,%eax
f010255b:	85 c0                	test   %eax,%eax
f010255d:	75 04                	jne    f0102563 <isKHeapPlacementStrategyCONTALLOC+0x10>
f010255f:	b0 01                	mov    $0x1,%al
f0102561:	eb 02                	jmp    f0102565 <isKHeapPlacementStrategyCONTALLOC+0x12>
f0102563:	b0 00                	mov    $0x0,%al
f0102565:	5d                   	pop    %ebp
f0102566:	c3                   	ret    

f0102567 <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0102567:	55                   	push   %ebp
f0102568:	89 e5                	mov    %esp,%ebp
f010256a:	a1 50 29 5a f0       	mov    0xf05a2950,%eax
f010256f:	83 f8 01             	cmp    $0x1,%eax
f0102572:	75 04                	jne    f0102578 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0102574:	b0 01                	mov    $0x1,%al
f0102576:	eb 02                	jmp    f010257a <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0102578:	b0 00                	mov    $0x0,%al
f010257a:	5d                   	pop    %ebp
f010257b:	c3                   	ret    

f010257c <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010257c:	55                   	push   %ebp
f010257d:	89 e5                	mov    %esp,%ebp
f010257f:	a1 50 29 5a f0       	mov    0xf05a2950,%eax
f0102584:	83 f8 02             	cmp    $0x2,%eax
f0102587:	75 04                	jne    f010258d <isKHeapPlacementStrategyBESTFIT+0x11>
f0102589:	b0 01                	mov    $0x1,%al
f010258b:	eb 02                	jmp    f010258f <isKHeapPlacementStrategyBESTFIT+0x13>
f010258d:	b0 00                	mov    $0x0,%al
f010258f:	5d                   	pop    %ebp
f0102590:	c3                   	ret    

f0102591 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0102591:	55                   	push   %ebp
f0102592:	89 e5                	mov    %esp,%ebp
f0102594:	a1 50 29 5a f0       	mov    0xf05a2950,%eax
f0102599:	83 f8 03             	cmp    $0x3,%eax
f010259c:	75 04                	jne    f01025a2 <isKHeapPlacementStrategyNEXTFIT+0x11>
f010259e:	b0 01                	mov    $0x1,%al
f01025a0:	eb 02                	jmp    f01025a4 <isKHeapPlacementStrategyNEXTFIT+0x13>
f01025a2:	b0 00                	mov    $0x0,%al
f01025a4:	5d                   	pop    %ebp
f01025a5:	c3                   	ret    

f01025a6 <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f01025a6:	55                   	push   %ebp
f01025a7:	89 e5                	mov    %esp,%ebp
f01025a9:	a1 50 29 5a f0       	mov    0xf05a2950,%eax
f01025ae:	83 f8 04             	cmp    $0x4,%eax
f01025b1:	75 04                	jne    f01025b7 <isKHeapPlacementStrategyWORSTFIT+0x11>
f01025b3:	b0 01                	mov    $0x1,%al
f01025b5:	eb 02                	jmp    f01025b9 <isKHeapPlacementStrategyWORSTFIT+0x13>
f01025b7:	b0 00                	mov    $0x0,%al
f01025b9:	5d                   	pop    %ebp
f01025ba:	c3                   	ret    

f01025bb <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f01025bb:	55                   	push   %ebp
f01025bc:	89 e5                	mov    %esp,%ebp
f01025be:	c7 05 a4 28 5a f0 01 	movl   $0x1,0xf05a28a4
f01025c5:	00 00 00 
f01025c8:	90                   	nop
f01025c9:	5d                   	pop    %ebp
f01025ca:	c3                   	ret    

f01025cb <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f01025cb:	55                   	push   %ebp
f01025cc:	89 e5                	mov    %esp,%ebp
f01025ce:	c7 05 a4 28 5a f0 02 	movl   $0x2,0xf05a28a4
f01025d5:	00 00 00 
f01025d8:	90                   	nop
f01025d9:	5d                   	pop    %ebp
f01025da:	c3                   	ret    

f01025db <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f01025db:	55                   	push   %ebp
f01025dc:	89 e5                	mov    %esp,%ebp
f01025de:	c7 05 a4 28 5a f0 03 	movl   $0x3,0xf05a28a4
f01025e5:	00 00 00 
f01025e8:	90                   	nop
f01025e9:	5d                   	pop    %ebp
f01025ea:	c3                   	ret    

f01025eb <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f01025eb:	55                   	push   %ebp
f01025ec:	89 e5                	mov    %esp,%ebp
f01025ee:	c7 05 a4 28 5a f0 04 	movl   $0x4,0xf05a28a4
f01025f5:	00 00 00 
f01025f8:	90                   	nop
f01025f9:	5d                   	pop    %ebp
f01025fa:	c3                   	ret    

f01025fb <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f01025fb:	55                   	push   %ebp
f01025fc:	89 e5                	mov    %esp,%ebp
f01025fe:	a1 a4 28 5a f0       	mov    0xf05a28a4,%eax
f0102603:	83 f8 01             	cmp    $0x1,%eax
f0102606:	75 04                	jne    f010260c <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0102608:	b0 01                	mov    $0x1,%al
f010260a:	eb 02                	jmp    f010260e <isUHeapPlacementStrategyFIRSTFIT+0x13>
f010260c:	b0 00                	mov    $0x0,%al
f010260e:	5d                   	pop    %ebp
f010260f:	c3                   	ret    

f0102610 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0102610:	55                   	push   %ebp
f0102611:	89 e5                	mov    %esp,%ebp
f0102613:	a1 a4 28 5a f0       	mov    0xf05a28a4,%eax
f0102618:	83 f8 02             	cmp    $0x2,%eax
f010261b:	75 04                	jne    f0102621 <isUHeapPlacementStrategyBESTFIT+0x11>
f010261d:	b0 01                	mov    $0x1,%al
f010261f:	eb 02                	jmp    f0102623 <isUHeapPlacementStrategyBESTFIT+0x13>
f0102621:	b0 00                	mov    $0x0,%al
f0102623:	5d                   	pop    %ebp
f0102624:	c3                   	ret    

f0102625 <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0102625:	55                   	push   %ebp
f0102626:	89 e5                	mov    %esp,%ebp
f0102628:	a1 a4 28 5a f0       	mov    0xf05a28a4,%eax
f010262d:	83 f8 03             	cmp    $0x3,%eax
f0102630:	75 04                	jne    f0102636 <isUHeapPlacementStrategyNEXTFIT+0x11>
f0102632:	b0 01                	mov    $0x1,%al
f0102634:	eb 02                	jmp    f0102638 <isUHeapPlacementStrategyNEXTFIT+0x13>
f0102636:	b0 00                	mov    $0x0,%al
f0102638:	5d                   	pop    %ebp
f0102639:	c3                   	ret    

f010263a <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f010263a:	55                   	push   %ebp
f010263b:	89 e5                	mov    %esp,%ebp
f010263d:	a1 a4 28 5a f0       	mov    0xf05a28a4,%eax
f0102642:	83 f8 04             	cmp    $0x4,%eax
f0102645:	75 04                	jne    f010264b <isUHeapPlacementStrategyWORSTFIT+0x11>
f0102647:	b0 01                	mov    $0x1,%al
f0102649:	eb 02                	jmp    f010264d <isUHeapPlacementStrategyWORSTFIT+0x13>
f010264b:	b0 00                	mov    $0x0,%al
f010264d:	5d                   	pop    %ebp
f010264e:	c3                   	ret    

f010264f <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010264f:	55                   	push   %ebp
f0102650:	89 e5                	mov    %esp,%ebp
f0102652:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0102655:	8b 45 08             	mov    0x8(%ebp),%eax
f0102658:	c1 e8 0c             	shr    $0xc,%eax
f010265b:	89 c2                	mov    %eax,%edx
f010265d:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f0102662:	39 c2                	cmp    %eax,%edx
f0102664:	72 14                	jb     f010267a <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0102666:	83 ec 04             	sub    $0x4,%esp
f0102669:	68 7c 51 12 f0       	push   $0xf012517c
f010266e:	6a 55                	push   $0x55
f0102670:	68 a4 51 12 f0       	push   $0xf01251a4
f0102675:	e8 a0 dc ff ff       	call   f010031a <_panic>
	return &frames_info[PPN(physical_address)];
f010267a:	8b 15 c0 28 5a f0    	mov    0xf05a28c0,%edx
f0102680:	8b 45 08             	mov    0x8(%ebp),%eax
f0102683:	c1 e8 0c             	shr    $0xc,%eax
f0102686:	89 c1                	mov    %eax,%ecx
f0102688:	89 c8                	mov    %ecx,%eax
f010268a:	01 c0                	add    %eax,%eax
f010268c:	01 c8                	add    %ecx,%eax
f010268e:	c1 e0 03             	shl    $0x3,%eax
f0102691:	01 d0                	add    %edx,%eax
}
f0102693:	c9                   	leave  
f0102694:	c3                   	ret    

f0102695 <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f0102695:	55                   	push   %ebp
f0102696:	89 e5                	mov    %esp,%ebp
f0102698:	53                   	push   %ebx
f0102699:	83 ec 14             	sub    $0x14,%esp

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f010269c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01026a3:	eb 3b                	jmp    f01026e0 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f01026a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01026a8:	89 d0                	mov    %edx,%eax
f01026aa:	01 c0                	add    %eax,%eax
f01026ac:	01 d0                	add    %edx,%eax
f01026ae:	c1 e0 03             	shl    $0x3,%eax
f01026b1:	05 44 e5 17 f0       	add    $0xf017e544,%eax
f01026b6:	8b 10                	mov    (%eax),%edx
f01026b8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01026bb:	89 c8                	mov    %ecx,%eax
f01026bd:	01 c0                	add    %eax,%eax
f01026bf:	01 c8                	add    %ecx,%eax
f01026c1:	c1 e0 03             	shl    $0x3,%eax
f01026c4:	05 40 e5 17 f0       	add    $0xf017e540,%eax
f01026c9:	8b 00                	mov    (%eax),%eax
f01026cb:	83 ec 04             	sub    $0x4,%esp
f01026ce:	52                   	push   %edx
f01026cf:	50                   	push   %eax
f01026d0:	68 27 5a 12 f0       	push   $0xf0125a27
f01026d5:	e8 92 e8 ff ff       	call   f0100f6c <cprintf>
f01026da:	83 c4 10             	add    $0x10,%esp
//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01026dd:	ff 45 f4             	incl   -0xc(%ebp)
f01026e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01026e3:	a1 48 e9 17 f0       	mov    0xf017e948,%eax
f01026e8:	39 c2                	cmp    %eax,%edx
f01026ea:	72 b9                	jb     f01026a5 <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f01026ec:	83 ec 0c             	sub    $0xc,%esp
f01026ef:	68 30 5a 12 f0       	push   $0xf0125a30
f01026f4:	e8 73 e8 ff ff       	call   f0100f6c <cprintf>
f01026f9:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f01026fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102703:	eb 42                	jmp    f0102747 <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f0102705:	8b 0d e0 ec 17 f0    	mov    0xf017ece0,%ecx
f010270b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010270e:	89 d0                	mov    %edx,%eax
f0102710:	01 c0                	add    %eax,%eax
f0102712:	01 d0                	add    %edx,%eax
f0102714:	c1 e0 02             	shl    $0x2,%eax
f0102717:	01 c8                	add    %ecx,%eax
f0102719:	8b 50 04             	mov    0x4(%eax),%edx
f010271c:	8b 1d e0 ec 17 f0    	mov    0xf017ece0,%ebx
f0102722:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102725:	89 c8                	mov    %ecx,%eax
f0102727:	01 c0                	add    %eax,%eax
f0102729:	01 c8                	add    %ecx,%eax
f010272b:	c1 e0 02             	shl    $0x2,%eax
f010272e:	01 d8                	add    %ebx,%eax
f0102730:	8b 00                	mov    (%eax),%eax
f0102732:	83 ec 04             	sub    $0x4,%esp
f0102735:	52                   	push   %edx
f0102736:	50                   	push   %eax
f0102737:	68 45 5a 12 f0       	push   $0xf0125a45
f010273c:	e8 2b e8 ff ff       	call   f0100f6c <cprintf>
f0102741:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f0102744:	ff 45 f4             	incl   -0xc(%ebp)
f0102747:	a1 e4 ec 17 f0       	mov    0xf017ece4,%eax
f010274c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010274f:	7c b4                	jl     f0102705 <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0102751:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102756:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0102759:	c9                   	leave  
f010275a:	c3                   	ret    

f010275b <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f010275b:	55                   	push   %ebp
f010275c:	89 e5                	mov    %esp,%ebp
f010275e:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0102761:	83 ec 0c             	sub    $0xc,%esp
f0102764:	68 61 5a 12 f0       	push   $0xf0125a61
f0102769:	e8 fe e7 ff ff       	call   f0100f6c <cprintf>
f010276e:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0102771:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f0102776:	83 ec 04             	sub    $0x4,%esp
f0102779:	50                   	push   %eax
f010277a:	68 0c 00 10 f0       	push   $0xf010000c
f010277f:	68 7c 5a 12 f0       	push   $0xf0125a7c
f0102784:	e8 e3 e7 ff ff       	call   f0100f6c <cprintf>
f0102789:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f010278c:	b8 91 3f 12 00       	mov    $0x123f91,%eax
f0102791:	83 ec 04             	sub    $0x4,%esp
f0102794:	50                   	push   %eax
f0102795:	68 91 3f 12 f0       	push   $0xf0123f91
f010279a:	68 b8 5a 12 f0       	push   $0xf0125ab8
f010279f:	e8 c8 e7 ff ff       	call   f0100f6c <cprintf>
f01027a4:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f01027a7:	b8 50 f1 59 00       	mov    $0x59f150,%eax
f01027ac:	83 ec 04             	sub    $0x4,%esp
f01027af:	50                   	push   %eax
f01027b0:	68 50 f1 59 f0       	push   $0xf059f150
f01027b5:	68 f4 5a 12 f0       	push   $0xf0125af4
f01027ba:	e8 ad e7 ff ff       	call   f0100f6c <cprintf>
f01027bf:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f01027c2:	b8 30 54 5c 00       	mov    $0x5c5430,%eax
f01027c7:	83 ec 04             	sub    $0x4,%esp
f01027ca:	50                   	push   %eax
f01027cb:	68 30 54 5c f0       	push   $0xf05c5430
f01027d0:	68 3c 5b 12 f0       	push   $0xf0125b3c
f01027d5:	e8 92 e7 ff ff       	call   f0100f6c <cprintf>
f01027da:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f01027dd:	b8 30 54 5c f0       	mov    $0xf05c5430,%eax
f01027e2:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f01027e8:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01027ed:	29 c2                	sub    %eax,%edx
f01027ef:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01027f1:	85 c0                	test   %eax,%eax
f01027f3:	79 05                	jns    f01027fa <command_kernel_info+0x9f>
f01027f5:	05 ff 03 00 00       	add    $0x3ff,%eax
f01027fa:	c1 f8 0a             	sar    $0xa,%eax
f01027fd:	83 ec 08             	sub    $0x8,%esp
f0102800:	50                   	push   %eax
f0102801:	68 78 5b 12 f0       	push   $0xf0125b78
f0102806:	e8 61 e7 ff ff       	call   f0100f6c <cprintf>
f010280b:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f010280e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102813:	c9                   	leave  
f0102814:	c3                   	ret    

f0102815 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f0102815:	55                   	push   %ebp
f0102816:	89 e5                	mov    %esp,%ebp
f0102818:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f010281b:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010281f:	75 37                	jne    f0102858 <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0102821:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102824:	83 c0 04             	add    $0x4,%eax
f0102827:	8b 00                	mov    (%eax),%eax
f0102829:	83 ec 04             	sub    $0x4,%esp
f010282c:	6a 10                	push   $0x10
f010282e:	6a 00                	push   $0x0
f0102830:	50                   	push   %eax
f0102831:	e8 68 00 02 00       	call   f012289e <strtol>
f0102836:	83 c4 10             	add    $0x10,%esp
f0102839:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f010283c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010283f:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f0102842:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102845:	83 c0 08             	add    $0x8,%eax
f0102848:	8b 00                	mov    (%eax),%eax
f010284a:	8a 00                	mov    (%eax),%al
f010284c:	88 c2                	mov    %al,%dl
f010284e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102851:	88 10                	mov    %dl,(%eax)
f0102853:	e9 b9 00 00 00       	jmp    f0102911 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f0102858:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010285c:	0f 85 9f 00 00 00    	jne    f0102901 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f0102862:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102865:	83 c0 04             	add    $0x4,%eax
f0102868:	8b 00                	mov    (%eax),%eax
f010286a:	83 ec 04             	sub    $0x4,%esp
f010286d:	6a 0a                	push   $0xa
f010286f:	6a 00                	push   $0x0
f0102871:	50                   	push   %eax
f0102872:	e8 27 00 02 00       	call   f012289e <strtol>
f0102877:	83 c4 10             	add    $0x10,%esp
f010287a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f010287d:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0102884:	83 ec 04             	sub    $0x4,%esp
f0102887:	6a 00                	push   $0x0
f0102889:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010288c:	50                   	push   %eax
f010288d:	ff 75 f4             	pushl  -0xc(%ebp)
f0102890:	e8 2b 7f 00 00       	call   f010a7c0 <envid2env>
f0102895:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0102898:	8b 45 0c             	mov    0xc(%ebp),%eax
f010289b:	83 c0 08             	add    $0x8,%eax
f010289e:	8b 00                	mov    (%eax),%eax
f01028a0:	83 ec 04             	sub    $0x4,%esp
f01028a3:	6a 10                	push   $0x10
f01028a5:	6a 00                	push   $0x0
f01028a7:	50                   	push   %eax
f01028a8:	e8 f1 ff 01 00       	call   f012289e <strtol>
f01028ad:	83 c4 10             	add    $0x10,%esp
f01028b0:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01028b3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01028b6:	85 c0                	test   %eax,%eax
f01028b8:	75 07                	jne    f01028c1 <command_writeusermem+0xac>
f01028ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01028bf:	eb 55                	jmp    f0102916 <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01028c1:	0f 20 d8             	mov    %cr3,%eax
f01028c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01028c7:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01028ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f01028cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01028d0:	8b 40 68             	mov    0x68(%eax),%eax
f01028d3:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01028d6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01028d9:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f01028dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01028df:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f01028e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028e5:	83 c0 0c             	add    $0xc,%eax
f01028e8:	8b 00                	mov    (%eax),%eax
f01028ea:	8a 00                	mov    (%eax),%al
f01028ec:	88 c2                	mov    %al,%dl
f01028ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01028f1:	88 10                	mov    %dl,(%eax)
f01028f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01028f6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01028f9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01028fc:	0f 22 d8             	mov    %eax,%cr3
f01028ff:	eb 10                	jmp    f0102911 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f0102901:	83 ec 0c             	sub    $0xc,%esp
f0102904:	68 a4 5b 12 f0       	push   $0xf0125ba4
f0102909:	e8 5e e6 ff ff       	call   f0100f6c <cprintf>
f010290e:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102911:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102916:	c9                   	leave  
f0102917:	c3                   	ret    

f0102918 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f0102918:	55                   	push   %ebp
f0102919:	89 e5                	mov    %esp,%ebp
f010291b:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f010291e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102921:	83 c0 04             	add    $0x4,%eax
f0102924:	8b 00                	mov    (%eax),%eax
f0102926:	83 ec 04             	sub    $0x4,%esp
f0102929:	6a 10                	push   $0x10
f010292b:	6a 00                	push   $0x0
f010292d:	50                   	push   %eax
f010292e:	e8 6b ff 01 00       	call   f012289e <strtol>
f0102933:	83 c4 10             	add    $0x10,%esp
f0102936:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010293b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int c, i=0;
f010293e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int stringLen = strlen(arguments[2]);
f0102945:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102948:	83 c0 08             	add    $0x8,%eax
f010294b:	8b 00                	mov    (%eax),%eax
f010294d:	83 ec 0c             	sub    $0xc,%esp
f0102950:	50                   	push   %eax
f0102951:	e8 e8 fb 01 00       	call   f012253e <strlen>
f0102956:	83 c4 10             	add    $0x10,%esp
f0102959:	89 45 ec             	mov    %eax,-0x14(%ebp)

	for(i=0;i < stringLen; i++)
f010295c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102963:	eb 1c                	jmp    f0102981 <command_writemem_k+0x69>
	{
		*address = arguments[2][i];
f0102965:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102968:	83 c0 08             	add    $0x8,%eax
f010296b:	8b 10                	mov    (%eax),%edx
f010296d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102970:	01 d0                	add    %edx,%eax
f0102972:	8a 00                	mov    (%eax),%al
f0102974:	88 c2                	mov    %al,%dl
f0102976:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102979:	88 10                	mov    %dl,(%eax)
		address++;
f010297b:	ff 45 f4             	incl   -0xc(%ebp)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int c, i=0;
	int stringLen = strlen(arguments[2]);

	for(i=0;i < stringLen; i++)
f010297e:	ff 45 f0             	incl   -0x10(%ebp)
f0102981:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102984:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0102987:	7c dc                	jl     f0102965 <command_writemem_k+0x4d>
	{
		*address = arguments[2][i];
		address++;
	}

	return 0;
f0102989:	b8 00 00 00 00       	mov    $0x0,%eax


}
f010298e:	c9                   	leave  
f010298f:	c3                   	ret    

f0102990 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0102990:	55                   	push   %ebp
f0102991:	89 e5                	mov    %esp,%ebp
f0102993:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0102996:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010299a:	75 42                	jne    f01029de <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010299c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010299f:	83 c0 04             	add    $0x4,%eax
f01029a2:	8b 00                	mov    (%eax),%eax
f01029a4:	83 ec 04             	sub    $0x4,%esp
f01029a7:	6a 10                	push   $0x10
f01029a9:	6a 00                	push   $0x0
f01029ab:	50                   	push   %eax
f01029ac:	e8 ed fe 01 00       	call   f012289e <strtol>
f01029b1:	83 c4 10             	add    $0x10,%esp
f01029b4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f01029b7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01029ba:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f01029bd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01029c0:	8a 00                	mov    (%eax),%al
f01029c2:	0f b6 c0             	movzbl %al,%eax
f01029c5:	83 ec 04             	sub    $0x4,%esp
f01029c8:	50                   	push   %eax
f01029c9:	ff 75 d8             	pushl  -0x28(%ebp)
f01029cc:	68 ce 5b 12 f0       	push   $0xf0125bce
f01029d1:	e8 96 e5 ff ff       	call   f0100f6c <cprintf>
f01029d6:	83 c4 10             	add    $0x10,%esp
f01029d9:	e9 c4 00 00 00       	jmp    f0102aa2 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f01029de:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01029e2:	0f 85 aa 00 00 00    	jne    f0102a92 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01029e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029eb:	83 c0 04             	add    $0x4,%eax
f01029ee:	8b 00                	mov    (%eax),%eax
f01029f0:	83 ec 04             	sub    $0x4,%esp
f01029f3:	6a 0a                	push   $0xa
f01029f5:	6a 00                	push   $0x0
f01029f7:	50                   	push   %eax
f01029f8:	e8 a1 fe 01 00       	call   f012289e <strtol>
f01029fd:	83 c4 10             	add    $0x10,%esp
f0102a00:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0102a03:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0102a0a:	83 ec 04             	sub    $0x4,%esp
f0102a0d:	6a 00                	push   $0x0
f0102a0f:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0102a12:	50                   	push   %eax
f0102a13:	ff 75 f4             	pushl  -0xc(%ebp)
f0102a16:	e8 a5 7d 00 00       	call   f010a7c0 <envid2env>
f0102a1b:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0102a1e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a21:	83 c0 08             	add    $0x8,%eax
f0102a24:	8b 00                	mov    (%eax),%eax
f0102a26:	83 ec 04             	sub    $0x4,%esp
f0102a29:	6a 10                	push   $0x10
f0102a2b:	6a 00                	push   $0x0
f0102a2d:	50                   	push   %eax
f0102a2e:	e8 6b fe 01 00       	call   f012289e <strtol>
f0102a33:	83 c4 10             	add    $0x10,%esp
f0102a36:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0102a39:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102a3c:	85 c0                	test   %eax,%eax
f0102a3e:	75 07                	jne    f0102a47 <command_readusermem+0xb7>
f0102a40:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a45:	eb 60                	jmp    f0102aa7 <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0102a47:	0f 20 d8             	mov    %cr3,%eax
f0102a4a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0102a4d:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0102a50:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f0102a53:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102a56:	8b 40 68             	mov    0x68(%eax),%eax
f0102a59:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102a5c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102a5f:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0102a62:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102a65:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f0102a68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102a6b:	8a 00                	mov    (%eax),%al
f0102a6d:	0f b6 c0             	movzbl %al,%eax
f0102a70:	83 ec 04             	sub    $0x4,%esp
f0102a73:	50                   	push   %eax
f0102a74:	ff 75 f0             	pushl  -0x10(%ebp)
f0102a77:	68 ce 5b 12 f0       	push   $0xf0125bce
f0102a7c:	e8 eb e4 ff ff       	call   f0100f6c <cprintf>
f0102a81:	83 c4 10             	add    $0x10,%esp
f0102a84:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102a87:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0102a8a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102a8d:	0f 22 d8             	mov    %eax,%cr3
f0102a90:	eb 10                	jmp    f0102aa2 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0102a92:	83 ec 0c             	sub    $0xc,%esp
f0102a95:	68 e8 5b 12 f0       	push   $0xf0125be8
f0102a9a:	e8 cd e4 ff ff       	call   f0100f6c <cprintf>
f0102a9f:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102aa2:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0102aa7:	c9                   	leave  
f0102aa8:	c3                   	ret    

f0102aa9 <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f0102aa9:	55                   	push   %ebp
f0102aaa:	89 e5                	mov    %esp,%ebp
f0102aac:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0102aaf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ab2:	83 c0 04             	add    $0x4,%eax
f0102ab5:	8b 00                	mov    (%eax),%eax
f0102ab7:	83 ec 04             	sub    $0x4,%esp
f0102aba:	6a 10                	push   $0x10
f0102abc:	6a 00                	push   $0x0
f0102abe:	50                   	push   %eax
f0102abf:	e8 da fd 01 00       	call   f012289e <strtol>
f0102ac4:	83 c4 10             	add    $0x10,%esp
f0102ac7:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0102acc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int i=0;
f0102acf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("%c",*address);
f0102ad6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102ad9:	8a 00                	mov    (%eax),%al
f0102adb:	0f b6 c0             	movzbl %al,%eax
f0102ade:	83 ec 08             	sub    $0x8,%esp
f0102ae1:	50                   	push   %eax
f0102ae2:	68 12 5c 12 f0       	push   $0xf0125c12
f0102ae7:	e8 80 e4 ff ff       	call   f0100f6c <cprintf>
f0102aec:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0102aef:	83 ec 0c             	sub    $0xc,%esp
f0102af2:	68 15 5c 12 f0       	push   $0xf0125c15
f0102af7:	e8 70 e4 ff ff       	call   f0100f6c <cprintf>
f0102afc:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102aff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b04:	c9                   	leave  
f0102b05:	c3                   	ret    

f0102b06 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f0102b06:	55                   	push   %ebp
f0102b07:	89 e5                	mov    %esp,%ebp
f0102b09:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0102b0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b0f:	83 c0 04             	add    $0x4,%eax
f0102b12:	8b 00                	mov    (%eax),%eax
f0102b14:	83 ec 04             	sub    $0x4,%esp
f0102b17:	6a 0a                	push   $0xa
f0102b19:	6a 00                	push   $0x0
f0102b1b:	50                   	push   %eax
f0102b1c:	e8 7d fd 01 00       	call   f012289e <strtol>
f0102b21:	83 c4 10             	add    $0x10,%esp
f0102b24:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f0102b27:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f0102b2e:	83 ec 04             	sub    $0x4,%esp
f0102b31:	6a 00                	push   $0x0
f0102b33:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0102b36:	50                   	push   %eax
f0102b37:	ff 75 ec             	pushl  -0x14(%ebp)
f0102b3a:	e8 81 7c 00 00       	call   f010a7c0 <envid2env>
f0102b3f:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0102b42:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b45:	83 c0 08             	add    $0x8,%eax
f0102b48:	8b 00                	mov    (%eax),%eax
f0102b4a:	83 ec 04             	sub    $0x4,%esp
f0102b4d:	6a 10                	push   $0x10
f0102b4f:	6a 00                	push   $0x0
f0102b51:	50                   	push   %eax
f0102b52:	e8 47 fd 01 00       	call   f012289e <strtol>
f0102b57:	83 c4 10             	add    $0x10,%esp
f0102b5a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f0102b5d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b60:	83 c0 0c             	add    $0xc,%eax
f0102b63:	8b 00                	mov    (%eax),%eax
f0102b65:	83 ec 04             	sub    $0x4,%esp
f0102b68:	6a 0a                	push   $0xa
f0102b6a:	6a 00                	push   $0x0
f0102b6c:	50                   	push   %eax
f0102b6d:	e8 2c fd 01 00       	call   f012289e <strtol>
f0102b72:	83 c4 10             	add    $0x10,%esp
f0102b75:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0102b78:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102b7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f0102b7e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102b81:	85 c0                	test   %eax,%eax
f0102b83:	75 07                	jne    f0102b8c <command_readuserblock+0x86>
f0102b85:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b8a:	eb 65                	jmp    f0102bf1 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0102b8c:	0f 20 d8             	mov    %cr3,%eax
f0102b8f:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0102b92:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0102b95:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0102b98:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102b9b:	8b 40 68             	mov    0x68(%eax),%eax
f0102b9e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102ba1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102ba4:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0102ba7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102bae:	eb 28                	jmp    f0102bd8 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0102bb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102bb3:	8a 00                	mov    (%eax),%al
f0102bb5:	0f b6 d0             	movzbl %al,%edx
f0102bb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102bbb:	8a 00                	mov    (%eax),%al
f0102bbd:	0f b6 c0             	movzbl %al,%eax
f0102bc0:	52                   	push   %edx
f0102bc1:	50                   	push   %eax
f0102bc2:	ff 75 f4             	pushl  -0xc(%ebp)
f0102bc5:	68 17 5c 12 f0       	push   $0xf0125c17
f0102bca:	e8 9d e3 ff ff       	call   f0100f6c <cprintf>
f0102bcf:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0102bd2:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f0102bd5:	ff 45 f0             	incl   -0x10(%ebp)
f0102bd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102bdb:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0102bde:	7c d0                	jl     f0102bb0 <command_readuserblock+0xaa>
f0102be0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102be3:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0102be6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102be9:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f0102bec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bf1:	c9                   	leave  
f0102bf2:	c3                   	ret    

f0102bf3 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f0102bf3:	55                   	push   %ebp
f0102bf4:	89 e5                	mov    %esp,%ebp
f0102bf6:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0102bf9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bfc:	83 c0 04             	add    $0x4,%eax
f0102bff:	8b 00                	mov    (%eax),%eax
f0102c01:	83 ec 04             	sub    $0x4,%esp
f0102c04:	6a 0a                	push   $0xa
f0102c06:	6a 00                	push   $0x0
f0102c08:	50                   	push   %eax
f0102c09:	e8 90 fc 01 00       	call   f012289e <strtol>
f0102c0e:	83 c4 10             	add    $0x10,%esp
f0102c11:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0102c14:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0102c1b:	83 ec 04             	sub    $0x4,%esp
f0102c1e:	6a 00                	push   $0x0
f0102c20:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0102c23:	50                   	push   %eax
f0102c24:	ff 75 f4             	pushl  -0xc(%ebp)
f0102c27:	e8 94 7b 00 00       	call   f010a7c0 <envid2env>
f0102c2c:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0102c2f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102c32:	85 c0                	test   %eax,%eax
f0102c34:	75 0a                	jne    f0102c40 <command_remove_table+0x4d>
f0102c36:	b8 00 00 00 00       	mov    $0x0,%eax
f0102c3b:	e9 a1 00 00 00       	jmp    f0102ce1 <command_remove_table+0xee>

	uint32 address = strtol(arguments[2], NULL, 16);
f0102c40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c43:	83 c0 08             	add    $0x8,%eax
f0102c46:	8b 00                	mov    (%eax),%eax
f0102c48:	83 ec 04             	sub    $0x4,%esp
f0102c4b:	6a 10                	push   $0x10
f0102c4d:	6a 00                	push   $0x0
f0102c4f:	50                   	push   %eax
f0102c50:	e8 49 fc 01 00       	call   f012289e <strtol>
f0102c55:	83 c4 10             	add    $0x10,%esp
f0102c58:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0102c5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102c5e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0102c61:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102c64:	8b 40 64             	mov    0x64(%eax),%eax
f0102c67:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102c6a:	c1 ea 16             	shr    $0x16,%edx
f0102c6d:	c1 e2 02             	shl    $0x2,%edx
f0102c70:	01 d0                	add    %edx,%eax
f0102c72:	8b 00                	mov    (%eax),%eax
f0102c74:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102c79:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree((void*)kheap_virtual_address(table_pa));
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f0102c7c:	83 ec 0c             	sub    $0xc,%esp
f0102c7f:	ff 75 e8             	pushl  -0x18(%ebp)
f0102c82:	e8 c8 f9 ff ff       	call   f010264f <to_frame_info>
f0102c87:	83 c4 10             	add    $0x10,%esp
f0102c8a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0102c8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102c90:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f0102c96:	83 ec 0c             	sub    $0xc,%esp
f0102c99:	ff 75 e4             	pushl  -0x1c(%ebp)
f0102c9c:	e8 83 56 00 00       	call   f0108324 <free_frame>
f0102ca1:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f0102ca4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102ca7:	c1 e8 16             	shr    $0x16,%eax
f0102caa:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0102cad:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102cb0:	8b 40 64             	mov    0x64(%eax),%eax
f0102cb3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102cb6:	c1 e2 02             	shl    $0x2,%edx
f0102cb9:	01 c2                	add    %eax,%edx
f0102cbb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102cbe:	8b 40 64             	mov    0x64(%eax),%eax
f0102cc1:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0102cc4:	c1 e1 02             	shl    $0x2,%ecx
f0102cc7:	01 c8                	add    %ecx,%eax
f0102cc9:	8b 00                	mov    (%eax),%eax
f0102ccb:	83 e0 fe             	and    $0xfffffffe,%eax
f0102cce:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0102cd0:	0f 20 d8             	mov    %cr3,%eax
f0102cd3:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0102cd6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102cd9:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f0102cdc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102ce1:	c9                   	leave  
f0102ce2:	c3                   	ret    

f0102ce3 <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f0102ce3:	55                   	push   %ebp
f0102ce4:	89 e5                	mov    %esp,%ebp
f0102ce6:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f0102ce9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102ced:	7e 06                	jle    f0102cf5 <command_allocuserpage+0x12>
f0102cef:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102cf3:	7e 1a                	jle    f0102d0f <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f0102cf5:	83 ec 0c             	sub    $0xc,%esp
f0102cf8:	68 28 5c 12 f0       	push   $0xf0125c28
f0102cfd:	e8 6a e2 ff ff       	call   f0100f6c <cprintf>
f0102d02:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102d05:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d0a:	e9 46 01 00 00       	jmp    f0102e55 <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0102d0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d12:	83 c0 04             	add    $0x4,%eax
f0102d15:	8b 00                	mov    (%eax),%eax
f0102d17:	83 ec 04             	sub    $0x4,%esp
f0102d1a:	6a 0a                	push   $0xa
f0102d1c:	6a 00                	push   $0x0
f0102d1e:	50                   	push   %eax
f0102d1f:	e8 7a fb 01 00       	call   f012289e <strtol>
f0102d24:	83 c4 10             	add    $0x10,%esp
f0102d27:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0102d2a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0102d31:	83 ec 04             	sub    $0x4,%esp
f0102d34:	6a 00                	push   $0x0
f0102d36:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0102d39:	50                   	push   %eax
f0102d3a:	ff 75 f0             	pushl  -0x10(%ebp)
f0102d3d:	e8 7e 7a 00 00       	call   f010a7c0 <envid2env>
f0102d42:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0102d45:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102d48:	85 c0                	test   %eax,%eax
f0102d4a:	75 0a                	jne    f0102d56 <command_allocuserpage+0x73>
f0102d4c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d51:	e9 ff 00 00 00       	jmp    f0102e55 <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f0102d56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d59:	83 c0 08             	add    $0x8,%eax
f0102d5c:	8b 00                	mov    (%eax),%eax
f0102d5e:	83 ec 04             	sub    $0x4,%esp
f0102d61:	6a 10                	push   $0x10
f0102d63:	6a 00                	push   $0x0
f0102d65:	50                   	push   %eax
f0102d66:	e8 33 fb 01 00       	call   f012289e <strtol>
f0102d6b:	83 c4 10             	add    $0x10,%esp
f0102d6e:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0102d71:	83 ec 0c             	sub    $0xc,%esp
f0102d74:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0102d77:	50                   	push   %eax
f0102d78:	e8 53 54 00 00       	call   f01081d0 <allocate_frame>
f0102d7d:	83 c4 10             	add    $0x10,%esp
f0102d80:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0102d83:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0102d87:	75 1a                	jne    f0102da3 <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0102d89:	83 ec 0c             	sub    $0xc,%esp
f0102d8c:	68 52 5c 12 f0       	push   $0xf0125c52
f0102d91:	e8 d6 e1 ff ff       	call   f0100f6c <cprintf>
f0102d96:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102d99:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d9e:	e9 b2 00 00 00       	jmp    f0102e55 <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f0102da3:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102da7:	75 1d                	jne    f0102dc6 <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f0102da9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102dac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102daf:	8b 40 64             	mov    0x64(%eax),%eax
f0102db2:	6a 06                	push   $0x6
f0102db4:	ff 75 ec             	pushl  -0x14(%ebp)
f0102db7:	52                   	push   %edx
f0102db8:	50                   	push   %eax
f0102db9:	e8 28 58 00 00       	call   f01085e6 <map_frame>
f0102dbe:	83 c4 10             	add    $0x10,%esp
f0102dc1:	e9 8a 00 00 00       	jmp    f0102e50 <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f0102dc6:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102dca:	0f 85 80 00 00 00    	jne    f0102e50 <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f0102dd0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dd3:	83 c0 0c             	add    $0xc,%eax
f0102dd6:	8b 00                	mov    (%eax),%eax
f0102dd8:	8a 00                	mov    (%eax),%al
f0102dda:	3c 72                	cmp    $0x72,%al
f0102ddc:	74 0e                	je     f0102dec <command_allocuserpage+0x109>
f0102dde:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102de1:	83 c0 0c             	add    $0xc,%eax
f0102de4:	8b 00                	mov    (%eax),%eax
f0102de6:	8a 00                	mov    (%eax),%al
f0102de8:	3c 52                	cmp    $0x52,%al
f0102dea:	75 09                	jne    f0102df5 <command_allocuserpage+0x112>
			rw = 0 ;
f0102dec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102df3:	eb 3c                	jmp    f0102e31 <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f0102df5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102df8:	83 c0 0c             	add    $0xc,%eax
f0102dfb:	8b 00                	mov    (%eax),%eax
f0102dfd:	8a 00                	mov    (%eax),%al
f0102dff:	3c 77                	cmp    $0x77,%al
f0102e01:	74 0e                	je     f0102e11 <command_allocuserpage+0x12e>
f0102e03:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e06:	83 c0 0c             	add    $0xc,%eax
f0102e09:	8b 00                	mov    (%eax),%eax
f0102e0b:	8a 00                	mov    (%eax),%al
f0102e0d:	3c 57                	cmp    $0x57,%al
f0102e0f:	75 09                	jne    f0102e1a <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f0102e11:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0102e18:	eb 17                	jmp    f0102e31 <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0102e1a:	83 ec 0c             	sub    $0xc,%esp
f0102e1d:	68 6c 5c 12 f0       	push   $0xf0125c6c
f0102e22:	e8 45 e1 ff ff       	call   f0100f6c <cprintf>
f0102e27:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0102e2a:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0102e31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102e34:	83 c8 04             	or     $0x4,%eax
f0102e37:	89 c1                	mov    %eax,%ecx
f0102e39:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102e3c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102e3f:	8b 40 64             	mov    0x64(%eax),%eax
f0102e42:	51                   	push   %ecx
f0102e43:	ff 75 ec             	pushl  -0x14(%ebp)
f0102e46:	52                   	push   %edx
f0102e47:	50                   	push   %eax
f0102e48:	e8 99 57 00 00       	call   f01085e6 <map_frame>
f0102e4d:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102e50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e55:	c9                   	leave  
f0102e56:	c3                   	ret    

f0102e57 <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0102e57:	55                   	push   %ebp
f0102e58:	89 e5                	mov    %esp,%ebp
f0102e5a:	56                   	push   %esi
f0102e5b:	53                   	push   %ebx
f0102e5c:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0102e5f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0102e62:	83 ec 0c             	sub    $0xc,%esp
f0102e65:	50                   	push   %eax
f0102e66:	e8 33 5a 00 00       	call   f010889e <calculate_available_frames>
f0102e6b:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102e6e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102e71:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102e74:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0102e77:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0102e7a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0102e7d:	01 de                	add    %ebx,%esi
f0102e7f:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102e82:	01 f3                	add    %esi,%ebx
f0102e84:	83 ec 0c             	sub    $0xc,%esp
f0102e87:	51                   	push   %ecx
f0102e88:	52                   	push   %edx
f0102e89:	50                   	push   %eax
f0102e8a:	53                   	push   %ebx
f0102e8b:	68 b0 5c 12 f0       	push   $0xf0125cb0
f0102e90:	e8 d7 e0 ff ff       	call   f0100f6c <cprintf>
f0102e95:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0102e98:	a1 70 2a 5a f0       	mov    0xf05a2a70,%eax
f0102e9d:	83 ec 08             	sub    $0x8,%esp
f0102ea0:	50                   	push   %eax
f0102ea1:	68 08 5d 12 f0       	push   $0xf0125d08
f0102ea6:	e8 c1 e0 ff ff       	call   f0100f6c <cprintf>
f0102eab:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102eae:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102eb3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0102eb6:	5b                   	pop    %ebx
f0102eb7:	5e                   	pop    %esi
f0102eb8:	5d                   	pop    %ebp
f0102eb9:	c3                   	ret    

f0102eba <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0102eba:	55                   	push   %ebp
f0102ebb:	89 e5                	mov    %esp,%ebp
f0102ebd:	83 ec 28             	sub    $0x28,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0102ec0:	c7 45 ec 88 13 00 00 	movl   $0x1388,-0x14(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0102ec7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0102ece:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int BSDSchedNiceVal = -100;				//arg#5 default
f0102ed5:	c7 45 e8 9c ff ff ff 	movl   $0xffffff9c,-0x18(%ebp)
//			assert(BSDSchedNiceVal >= -20 && BSDSchedNiceVal <= 20);
//		}
	}
#else
	{
		switch (number_of_arguments)
f0102edc:	8b 45 08             	mov    0x8(%ebp),%eax
f0102edf:	83 f8 02             	cmp    $0x2,%eax
f0102ee2:	74 3c                	je     f0102f20 <CreateEnv+0x66>
f0102ee4:	83 f8 03             	cmp    $0x3,%eax
f0102ee7:	75 1d                	jne    f0102f06 <CreateEnv+0x4c>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
f0102ee9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102eec:	83 c0 08             	add    $0x8,%eax
f0102eef:	8b 00                	mov    (%eax),%eax
f0102ef1:	83 ec 04             	sub    $0x4,%esp
f0102ef4:	6a 0a                	push   $0xa
f0102ef6:	6a 00                	push   $0x0
f0102ef8:	50                   	push   %eax
f0102ef9:	e8 a0 f9 01 00       	call   f012289e <strtol>
f0102efe:	83 c4 10             	add    $0x10,%esp
f0102f01:	89 45 f0             	mov    %eax,-0x10(%ebp)
			break;
f0102f04:	eb 1b                	jmp    f0102f21 <CreateEnv+0x67>
		case 2:
			break;
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0102f06:	83 ec 0c             	sub    $0xc,%esp
f0102f09:	68 44 5d 12 f0       	push   $0xf0125d44
f0102f0e:	e8 59 e0 ff ff       	call   f0100f6c <cprintf>
f0102f13:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0102f16:	b8 00 00 00 00       	mov    $0x0,%eax
f0102f1b:	e9 a7 00 00 00       	jmp    f0102fc7 <CreateEnv+0x10d>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
			break;
		case 2:
			break;
f0102f20:	90                   	nop
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
			return NULL;

			break;
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102f21:	83 ec 0c             	sub    $0xc,%esp
f0102f24:	6a 02                	push   $0x2
f0102f26:	e8 e5 b7 00 00       	call   f010e710 <isPageReplacmentAlgorithmLRU>
f0102f2b:	83 c4 10             	add    $0x10,%esp
f0102f2e:	85 c0                	test   %eax,%eax
f0102f30:	74 07                	je     f0102f39 <CreateEnv+0x7f>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
f0102f32:	c7 45 f4 f4 01 00 00 	movl   $0x1f4,-0xc(%ebp)
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0102f39:	83 7d f0 64          	cmpl   $0x64,-0x10(%ebp)
f0102f3d:	76 19                	jbe    f0102f58 <CreateEnv+0x9e>
f0102f3f:	68 b4 5d 12 f0       	push   $0xf0125db4
f0102f44:	68 f9 5d 12 f0       	push   $0xf0125df9
f0102f49:	68 c0 01 00 00       	push   $0x1c0
f0102f4e:	68 0e 5e 12 f0       	push   $0xf0125e0e
f0102f53:	e8 c2 d3 ff ff       	call   f010031a <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0102f58:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f5b:	83 c0 04             	add    $0x4,%eax
f0102f5e:	8b 00                	mov    (%eax),%eax
f0102f60:	ff 75 f0             	pushl  -0x10(%ebp)
f0102f63:	ff 75 f4             	pushl  -0xc(%ebp)
f0102f66:	ff 75 ec             	pushl  -0x14(%ebp)
f0102f69:	50                   	push   %eax
f0102f6a:	e8 01 6b 00 00       	call   f0109a70 <env_create>
f0102f6f:	83 c4 10             	add    $0x10,%esp
f0102f72:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (BSDSchedNiceVal != -100)
f0102f75:	83 7d e8 9c          	cmpl   $0xffffff9c,-0x18(%ebp)
f0102f79:	74 49                	je     f0102fc4 <CreateEnv+0x10a>
	{
		cprintf("nice value = %d\n", BSDSchedNiceVal);
f0102f7b:	83 ec 08             	sub    $0x8,%esp
f0102f7e:	ff 75 e8             	pushl  -0x18(%ebp)
f0102f81:	68 22 5e 12 f0       	push   $0xf0125e22
f0102f86:	e8 e1 df ff ff       	call   f0100f6c <cprintf>
f0102f8b:	83 c4 10             	add    $0x10,%esp
		assert(BSDSchedNiceVal >= -20 && BSDSchedNiceVal <= 20);
f0102f8e:	83 7d e8 ec          	cmpl   $0xffffffec,-0x18(%ebp)
f0102f92:	7c 06                	jl     f0102f9a <CreateEnv+0xe0>
f0102f94:	83 7d e8 14          	cmpl   $0x14,-0x18(%ebp)
f0102f98:	7e 19                	jle    f0102fb3 <CreateEnv+0xf9>
f0102f9a:	68 34 5e 12 f0       	push   $0xf0125e34
f0102f9f:	68 f9 5d 12 f0       	push   $0xf0125df9
f0102fa4:	68 c5 01 00 00       	push   $0x1c5
f0102fa9:	68 0e 5e 12 f0       	push   $0xf0125e0e
f0102fae:	e8 67 d3 ff ff       	call   f010031a <_panic>
		env_set_nice(env, BSDSchedNiceVal);
f0102fb3:	83 ec 08             	sub    $0x8,%esp
f0102fb6:	ff 75 e8             	pushl  -0x18(%ebp)
f0102fb9:	ff 75 e4             	pushl  -0x1c(%ebp)
f0102fbc:	e8 e6 36 00 00       	call   f01066a7 <env_set_nice>
f0102fc1:	83 c4 10             	add    $0x10,%esp
	}
	return env;
f0102fc4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0102fc7:	c9                   	leave  
f0102fc8:	c3                   	ret    

f0102fc9 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0102fc9:	55                   	push   %ebp
f0102fca:	89 e5                	mov    %esp,%ebp
f0102fcc:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0102fcf:	83 ec 08             	sub    $0x8,%esp
f0102fd2:	ff 75 0c             	pushl  0xc(%ebp)
f0102fd5:	ff 75 08             	pushl  0x8(%ebp)
f0102fd8:	e8 dd fe ff ff       	call   f0102eba <CreateEnv>
f0102fdd:	83 c4 10             	add    $0x10,%esp
f0102fe0:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0102fe3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102fe7:	75 07                	jne    f0102ff0 <command_run_program+0x27>
f0102fe9:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fee:	eb 46                	jmp    f0103036 <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102ff0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102ff3:	8b 40 10             	mov    0x10(%eax),%eax
f0102ff6:	83 ec 08             	sub    $0x8,%esp
f0102ff9:	50                   	push   %eax
f0102ffa:	68 64 5e 12 f0       	push   $0xf0125e64
f0102fff:	e8 68 df ff ff       	call   f0100f6c <cprintf>
f0103004:	83 c4 10             	add    $0x10,%esp

	//[2] Place it in the NEW queue
	sched_new_env(env);
f0103007:	83 ec 0c             	sub    $0xc,%esp
f010300a:	ff 75 f4             	pushl  -0xc(%ebp)
f010300d:	e8 93 26 00 00       	call   f01056a5 <sched_new_env>
f0103012:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0103015:	c7 05 70 2a 5a f0 00 	movl   $0x0,0xf05a2a70
f010301c:	00 00 00 

	//[3] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_run_env(env->env_id);
f010301f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103022:	8b 40 10             	mov    0x10(%eax),%eax
f0103025:	83 ec 0c             	sub    $0xc,%esp
f0103028:	50                   	push   %eax
f0103029:	e8 cd 26 00 00       	call   f01056fb <sched_run_env>
f010302e:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103031:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103036:	c9                   	leave  
f0103037:	c3                   	ret    

f0103038 <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0103038:	55                   	push   %ebp
f0103039:	89 e5                	mov    %esp,%ebp
f010303b:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010303e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103041:	83 c0 04             	add    $0x4,%eax
f0103044:	8b 00                	mov    (%eax),%eax
f0103046:	83 ec 04             	sub    $0x4,%esp
f0103049:	6a 0a                	push   $0xa
f010304b:	6a 00                	push   $0x0
f010304d:	50                   	push   %eax
f010304e:	e8 4b f8 01 00       	call   f012289e <strtol>
f0103053:	83 c4 10             	add    $0x10,%esp
f0103056:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0103059:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010305c:	83 ec 0c             	sub    $0xc,%esp
f010305f:	50                   	push   %eax
f0103060:	e8 fe 29 00 00       	call   f0105a63 <sched_kill_env>
f0103065:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103068:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010306d:	c9                   	leave  
f010306e:	c3                   	ret    

f010306f <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f010306f:	55                   	push   %ebp
f0103070:	89 e5                	mov    %esp,%ebp
f0103072:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0103075:	83 ec 08             	sub    $0x8,%esp
f0103078:	ff 75 0c             	pushl  0xc(%ebp)
f010307b:	ff 75 08             	pushl  0x8(%ebp)
f010307e:	e8 37 fe ff ff       	call   f0102eba <CreateEnv>
f0103083:	83 c4 10             	add    $0x10,%esp
f0103086:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0103089:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010308d:	75 07                	jne    f0103096 <commnad_load_env+0x27>
		return 0 ;
f010308f:	b8 00 00 00 00       	mov    $0x0,%eax
f0103094:	eb 2a                	jmp    f01030c0 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0103096:	83 ec 0c             	sub    $0xc,%esp
f0103099:	ff 75 f4             	pushl  -0xc(%ebp)
f010309c:	e8 04 26 00 00       	call   f01056a5 <sched_new_env>
f01030a1:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f01030a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01030a7:	8b 40 10             	mov    0x10(%eax),%eax
f01030aa:	83 ec 08             	sub    $0x8,%esp
f01030ad:	50                   	push   %eax
f01030ae:	68 64 5e 12 f0       	push   $0xf0125e64
f01030b3:	e8 b4 de ff ff       	call   f0100f6c <cprintf>
f01030b8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01030bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030c0:	c9                   	leave  
f01030c1:	c3                   	ret    

f01030c2 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f01030c2:	55                   	push   %ebp
f01030c3:	89 e5                	mov    %esp,%ebp
f01030c5:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f01030c8:	c7 05 70 2a 5a f0 00 	movl   $0x0,0xf05a2a70
f01030cf:	00 00 00 
	sched_run_all();
f01030d2:	e8 7b 2f 00 00       	call   f0106052 <sched_run_all>

	return 0 ;
f01030d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030dc:	c9                   	leave  
f01030dd:	c3                   	ret    

f01030de <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f01030de:	55                   	push   %ebp
f01030df:	89 e5                	mov    %esp,%ebp
f01030e1:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f01030e4:	e8 38 2d 00 00       	call   f0105e21 <sched_print_all>

	return 0 ;
f01030e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030ee:	c9                   	leave  
f01030ef:	c3                   	ret    

f01030f0 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f01030f0:	55                   	push   %ebp
f01030f1:	89 e5                	mov    %esp,%ebp
f01030f3:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f01030f6:	e8 ec 2f 00 00       	call   f01060e7 <sched_kill_all>

	return 0 ;
f01030fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103100:	c9                   	leave  
f0103101:	c3                   	ret    

f0103102 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0103102:	55                   	push   %ebp
f0103103:	89 e5                	mov    %esp,%ebp
f0103105:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0103108:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010310c:	7f 1a                	jg     f0103128 <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f010310e:	83 ec 0c             	sub    $0xc,%esp
f0103111:	68 7c 5e 12 f0       	push   $0xf0125e7c
f0103116:	e8 51 de ff ff       	call   f0100f6c <cprintf>
f010311b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010311e:	b8 00 00 00 00       	mov    $0x0,%eax
f0103123:	e9 83 00 00 00       	jmp    f01031ab <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0103128:	8b 45 0c             	mov    0xc(%ebp),%eax
f010312b:	83 c0 04             	add    $0x4,%eax
f010312e:	8b 00                	mov    (%eax),%eax
f0103130:	83 ec 04             	sub    $0x4,%esp
f0103133:	6a 0a                	push   $0xa
f0103135:	6a 00                	push   $0x0
f0103137:	50                   	push   %eax
f0103138:	e8 61 f7 01 00       	call   f012289e <strtol>
f010313d:	83 c4 10             	add    $0x10,%esp
f0103140:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0103143:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103147:	75 20                	jne    f0103169 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0103149:	83 ec 0c             	sub    $0xc,%esp
f010314c:	ff 75 f4             	pushl  -0xc(%ebp)
f010314f:	e8 31 b5 00 00       	call   f010e685 <setPageReplacmentAlgorithmLRU>
f0103154:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0103157:	83 ec 0c             	sub    $0xc,%esp
f010315a:	68 dc 5e 12 f0       	push   $0xf0125edc
f010315f:	e8 08 de ff ff       	call   f0100f6c <cprintf>
f0103164:	83 c4 10             	add    $0x10,%esp
f0103167:	eb 3d                	jmp    f01031a6 <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0103169:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010316d:	75 20                	jne    f010318f <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f010316f:	83 ec 0c             	sub    $0xc,%esp
f0103172:	ff 75 f4             	pushl  -0xc(%ebp)
f0103175:	e8 0b b5 00 00       	call   f010e685 <setPageReplacmentAlgorithmLRU>
f010317a:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f010317d:	83 ec 0c             	sub    $0xc,%esp
f0103180:	68 20 5f 12 f0       	push   $0xf0125f20
f0103185:	e8 e2 dd ff ff       	call   f0100f6c <cprintf>
f010318a:	83 c4 10             	add    $0x10,%esp
f010318d:	eb 17                	jmp    f01031a6 <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f010318f:	83 ec 0c             	sub    $0xc,%esp
f0103192:	68 60 5f 12 f0       	push   $0xf0125f60
f0103197:	e8 d0 dd ff ff       	call   f0100f6c <cprintf>
f010319c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010319f:	b8 00 00 00 00       	mov    $0x0,%eax
f01031a4:	eb 05                	jmp    f01031ab <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f01031a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01031ab:	c9                   	leave  
f01031ac:	c3                   	ret    

f01031ad <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f01031ad:	55                   	push   %ebp
f01031ae:	89 e5                	mov    %esp,%ebp
f01031b0:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f01031b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01031b6:	83 c0 04             	add    $0x4,%eax
f01031b9:	8b 00                	mov    (%eax),%eax
f01031bb:	83 ec 04             	sub    $0x4,%esp
f01031be:	6a 0a                	push   $0xa
f01031c0:	6a 00                	push   $0x0
f01031c2:	50                   	push   %eax
f01031c3:	e8 d6 f6 01 00       	call   f012289e <strtol>
f01031c8:	83 c4 10             	add    $0x10,%esp
f01031cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f01031ce:	83 ec 0c             	sub    $0xc,%esp
f01031d1:	ff 75 f4             	pushl  -0xc(%ebp)
f01031d4:	e8 1f b5 00 00       	call   f010e6f8 <setPageReplacmentAlgorithmNchanceCLOCK>
f01031d9:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f01031dc:	83 ec 0c             	sub    $0xc,%esp
f01031df:	68 b4 5f 12 f0       	push   $0xf0125fb4
f01031e4:	e8 83 dd ff ff       	call   f0100f6c <cprintf>
f01031e9:	83 c4 10             	add    $0x10,%esp
	return 0;
f01031ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01031f1:	c9                   	leave  
f01031f2:	c3                   	ret    

f01031f3 <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f01031f3:	55                   	push   %ebp
f01031f4:	89 e5                	mov    %esp,%ebp
f01031f6:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f01031f9:	e8 ba b4 00 00       	call   f010e6b8 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f01031fe:	83 ec 0c             	sub    $0xc,%esp
f0103201:	68 e8 5f 12 f0       	push   $0xf0125fe8
f0103206:	e8 61 dd ff ff       	call   f0100f6c <cprintf>
f010320b:	83 c4 10             	add    $0x10,%esp
	return 0;
f010320e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103213:	c9                   	leave  
f0103214:	c3                   	ret    

f0103215 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0103215:	55                   	push   %ebp
f0103216:	89 e5                	mov    %esp,%ebp
f0103218:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f010321b:	e8 a8 b4 00 00       	call   f010e6c8 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0103220:	83 ec 0c             	sub    $0xc,%esp
f0103223:	68 14 60 12 f0       	push   $0xf0126014
f0103228:	e8 3f dd ff ff       	call   f0100f6c <cprintf>
f010322d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103230:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103235:	c9                   	leave  
f0103236:	c3                   	ret    

f0103237 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0103237:	55                   	push   %ebp
f0103238:	89 e5                	mov    %esp,%ebp
f010323a:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f010323d:	e8 96 b4 00 00       	call   f010e6d8 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0103242:	83 ec 0c             	sub    $0xc,%esp
f0103245:	68 3c 60 12 f0       	push   $0xf012603c
f010324a:	e8 1d dd ff ff       	call   f0100f6c <cprintf>
f010324f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103252:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103257:	c9                   	leave  
f0103258:	c3                   	ret    

f0103259 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0103259:	55                   	push   %ebp
f010325a:	89 e5                	mov    %esp,%ebp
f010325c:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f010325f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103262:	83 c0 04             	add    $0x4,%eax
f0103265:	8b 00                	mov    (%eax),%eax
f0103267:	83 ec 04             	sub    $0x4,%esp
f010326a:	6a 0a                	push   $0xa
f010326c:	6a 00                	push   $0x0
f010326e:	50                   	push   %eax
f010326f:	e8 2a f6 01 00       	call   f012289e <strtol>
f0103274:	83 c4 10             	add    $0x10,%esp
f0103277:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f010327a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f010327e:	83 ec 0c             	sub    $0xc,%esp
f0103281:	50                   	push   %eax
f0103282:	e8 4e 37 00 00       	call   f01069d5 <sched_init_RR>
f0103287:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f010328a:	a0 84 27 5a f0       	mov    0xf05a2784,%al
f010328f:	0f b6 c0             	movzbl %al,%eax
f0103292:	83 ec 08             	sub    $0x8,%esp
f0103295:	50                   	push   %eax
f0103296:	68 70 60 12 f0       	push   $0xf0126070
f010329b:	e8 cc dc ff ff       	call   f0100f6c <cprintf>
f01032a0:	83 c4 10             	add    $0x10,%esp
	return 0;
f01032a3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01032a8:	c9                   	leave  
f01032a9:	c3                   	ret    

f01032aa <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f01032aa:	55                   	push   %ebp
f01032ab:	89 e5                	mov    %esp,%ebp
f01032ad:	53                   	push   %ebx
f01032ae:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f01032b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01032b4:	83 c0 04             	add    $0x4,%eax
f01032b7:	8b 00                	mov    (%eax),%eax
f01032b9:	83 ec 04             	sub    $0x4,%esp
f01032bc:	6a 0a                	push   $0xa
f01032be:	6a 00                	push   $0x0
f01032c0:	50                   	push   %eax
f01032c1:	e8 d8 f5 01 00       	call   f012289e <strtol>
f01032c6:	83 c4 10             	add    $0x10,%esp
f01032c9:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f01032cc:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f01032d3:	eb 2e                	jmp    f0103303 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f01032d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032d8:	8d 58 fe             	lea    -0x2(%eax),%ebx
f01032db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032de:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01032e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01032e8:	01 d0                	add    %edx,%eax
f01032ea:	8b 00                	mov    (%eax),%eax
f01032ec:	83 ec 04             	sub    $0x4,%esp
f01032ef:	6a 0a                	push   $0xa
f01032f1:	6a 00                	push   $0x0
f01032f3:	50                   	push   %eax
f01032f4:	e8 a5 f5 01 00       	call   f012289e <strtol>
f01032f9:	83 c4 10             	add    $0x10,%esp
f01032fc:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0103300:	ff 45 f4             	incl   -0xc(%ebp)
f0103303:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103306:	3b 45 08             	cmp    0x8(%ebp),%eax
f0103309:	7c ca                	jl     f01032d5 <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f010330b:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f010330f:	83 ec 08             	sub    $0x8,%esp
f0103312:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0103315:	52                   	push   %edx
f0103316:	50                   	push   %eax
f0103317:	e8 32 37 00 00       	call   f0106a4e <sched_init_MLFQ>
f010331c:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f010331f:	83 ec 0c             	sub    $0xc,%esp
f0103322:	68 a8 60 12 f0       	push   $0xf01260a8
f0103327:	e8 40 dc ff ff       	call   f0100f6c <cprintf>
f010332c:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010332f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103336:	eb 21                	jmp    f0103359 <command_sch_MLFQ+0xaf>
	{
		cprintf("%d   ", quantums[i]) ;
f0103338:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010333b:	05 84 27 5a f0       	add    $0xf05a2784,%eax
f0103340:	8a 00                	mov    (%eax),%al
f0103342:	0f b6 c0             	movzbl %al,%eax
f0103345:	83 ec 08             	sub    $0x8,%esp
f0103348:	50                   	push   %eax
f0103349:	68 d5 60 12 f0       	push   $0xf01260d5
f010334e:	e8 19 dc ff ff       	call   f0100f6c <cprintf>
f0103353:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0103356:	ff 45 f0             	incl   -0x10(%ebp)
f0103359:	a0 00 2b 5a f0       	mov    0xf05a2b00,%al
f010335e:	0f b6 c0             	movzbl %al,%eax
f0103361:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0103364:	7f d2                	jg     f0103338 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f0103366:	83 ec 0c             	sub    $0xc,%esp
f0103369:	68 15 5c 12 f0       	push   $0xf0125c15
f010336e:	e8 f9 db ff ff       	call   f0100f6c <cprintf>
f0103373:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103376:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010337b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010337e:	c9                   	leave  
f010337f:	c3                   	ret    

f0103380 <command_sch_BSD>:
int command_sch_BSD(int number_of_arguments, char **arguments)
{
f0103380:	55                   	push   %ebp
f0103381:	89 e5                	mov    %esp,%ebp
f0103383:	83 ec 18             	sub    $0x18,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0103386:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103389:	83 c0 04             	add    $0x4,%eax
f010338c:	8b 00                	mov    (%eax),%eax
f010338e:	83 ec 04             	sub    $0x4,%esp
f0103391:	6a 0a                	push   $0xa
f0103393:	6a 00                	push   $0x0
f0103395:	50                   	push   %eax
f0103396:	e8 03 f5 01 00       	call   f012289e <strtol>
f010339b:	83 c4 10             	add    $0x10,%esp
f010339e:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint8 quantum = strtol(arguments[2], NULL, 10);
f01033a1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01033a4:	83 c0 08             	add    $0x8,%eax
f01033a7:	8b 00                	mov    (%eax),%eax
f01033a9:	83 ec 04             	sub    $0x4,%esp
f01033ac:	6a 0a                	push   $0xa
f01033ae:	6a 00                	push   $0x0
f01033b0:	50                   	push   %eax
f01033b1:	e8 e8 f4 01 00       	call   f012289e <strtol>
f01033b6:	83 c4 10             	add    $0x10,%esp
f01033b9:	88 45 f6             	mov    %al,-0xa(%ebp)

	sched_init_BSD(numOfLevels, quantum);
f01033bc:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f01033c0:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01033c4:	83 ec 08             	sub    $0x8,%esp
f01033c7:	52                   	push   %edx
f01033c8:	50                   	push   %eax
f01033c9:	e8 a8 36 00 00       	call   f0106a76 <sched_init_BSD>
f01033ce:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", numOfLevels, quantum);
f01033d1:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f01033d5:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01033d9:	83 ec 04             	sub    $0x4,%esp
f01033dc:	52                   	push   %edx
f01033dd:	50                   	push   %eax
f01033de:	68 dc 60 12 f0       	push   $0xf01260dc
f01033e3:	e8 84 db ff ff       	call   f0100f6c <cprintf>
f01033e8:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01033eb:	83 ec 0c             	sub    $0xc,%esp
f01033ee:	68 15 5c 12 f0       	push   $0xf0125c15
f01033f3:	e8 74 db ff ff       	call   f0100f6c <cprintf>
f01033f8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01033fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103400:	c9                   	leave  
f0103401:	c3                   	ret    

f0103402 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f0103402:	55                   	push   %ebp
f0103403:	89 e5                	mov    %esp,%ebp
f0103405:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0103408:	e8 0b 33 00 00       	call   f0106718 <isSchedMethodMLFQ>
f010340d:	85 c0                	test   %eax,%eax
f010340f:	74 59                	je     f010346a <command_print_sch_method+0x68>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f0103411:	83 ec 0c             	sub    $0xc,%esp
f0103414:	68 18 61 12 f0       	push   $0xf0126118
f0103419:	e8 4e db ff ff       	call   f0100f6c <cprintf>
f010341e:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0103421:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103428:	eb 21                	jmp    f010344b <command_print_sch_method+0x49>
		{
			cprintf("%d   ", quantums[i]) ;
f010342a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010342d:	05 84 27 5a f0       	add    $0xf05a2784,%eax
f0103432:	8a 00                	mov    (%eax),%al
f0103434:	0f b6 c0             	movzbl %al,%eax
f0103437:	83 ec 08             	sub    $0x8,%esp
f010343a:	50                   	push   %eax
f010343b:	68 d5 60 12 f0       	push   $0xf01260d5
f0103440:	e8 27 db ff ff       	call   f0100f6c <cprintf>
f0103445:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0103448:	ff 45 f4             	incl   -0xc(%ebp)
f010344b:	a0 00 2b 5a f0       	mov    0xf05a2b00,%al
f0103450:	0f b6 c0             	movzbl %al,%eax
f0103453:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103456:	7f d2                	jg     f010342a <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0103458:	83 ec 0c             	sub    $0xc,%esp
f010345b:	68 15 5c 12 f0       	push   $0xf0125c15
f0103460:	e8 07 db ff ff       	call   f0100f6c <cprintf>
f0103465:	83 c4 10             	add    $0x10,%esp
f0103468:	eb 61                	jmp    f01034cb <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodRR())
f010346a:	e8 8f 32 00 00       	call   f01066fe <isSchedMethodRR>
f010346f:	85 c0                	test   %eax,%eax
f0103471:	74 1b                	je     f010348e <command_print_sch_method+0x8c>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0103473:	a0 84 27 5a f0       	mov    0xf05a2784,%al
f0103478:	0f b6 c0             	movzbl %al,%eax
f010347b:	83 ec 08             	sub    $0x8,%esp
f010347e:	50                   	push   %eax
f010347f:	68 4c 61 12 f0       	push   $0xf012614c
f0103484:	e8 e3 da ff ff       	call   f0100f6c <cprintf>
f0103489:	83 c4 10             	add    $0x10,%esp
f010348c:	eb 3d                	jmp    f01034cb <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodBSD())
f010348e:	e8 a0 32 00 00       	call   f0106733 <isSchedMethodBSD>
f0103493:	85 c0                	test   %eax,%eax
f0103495:	74 24                	je     f01034bb <command_print_sch_method+0xb9>
	{
		cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", num_of_ready_queues, quantums[0]);
f0103497:	a0 84 27 5a f0       	mov    0xf05a2784,%al
f010349c:	0f b6 d0             	movzbl %al,%edx
f010349f:	a0 00 2b 5a f0       	mov    0xf05a2b00,%al
f01034a4:	0f b6 c0             	movzbl %al,%eax
f01034a7:	83 ec 04             	sub    $0x4,%esp
f01034aa:	52                   	push   %edx
f01034ab:	50                   	push   %eax
f01034ac:	68 dc 60 12 f0       	push   $0xf01260dc
f01034b1:	e8 b6 da ff ff       	call   f0100f6c <cprintf>
f01034b6:	83 c4 10             	add    $0x10,%esp
f01034b9:	eb 10                	jmp    f01034cb <command_print_sch_method+0xc9>
	}
	else
		cprintf("Current scheduler method is UNDEFINED\n");
f01034bb:	83 ec 0c             	sub    $0xc,%esp
f01034be:	68 88 61 12 f0       	push   $0xf0126188
f01034c3:	e8 a4 da ff ff       	call   f0100f6c <cprintf>
f01034c8:	83 c4 10             	add    $0x10,%esp

	return 0;
f01034cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01034d0:	c9                   	leave  
f01034d1:	c3                   	ret    

f01034d2 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f01034d2:	55                   	push   %ebp
f01034d3:	89 e5                	mov    %esp,%ebp
f01034d5:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f01034d8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034db:	83 c0 04             	add    $0x4,%eax
f01034de:	8b 00                	mov    (%eax),%eax
f01034e0:	83 ec 04             	sub    $0x4,%esp
f01034e3:	6a 0a                	push   $0xa
f01034e5:	6a 00                	push   $0x0
f01034e7:	50                   	push   %eax
f01034e8:	e8 b1 f3 01 00       	call   f012289e <strtol>
f01034ed:	83 c4 10             	add    $0x10,%esp
f01034f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f01034f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01034f6:	0f b6 c0             	movzbl %al,%eax
f01034f9:	83 ec 0c             	sub    $0xc,%esp
f01034fc:	50                   	push   %eax
f01034fd:	e8 99 e1 01 00       	call   f012169b <chksch>
f0103502:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0103505:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103509:	75 12                	jne    f010351d <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f010350b:	83 ec 0c             	sub    $0xc,%esp
f010350e:	68 b0 61 12 f0       	push   $0xf01261b0
f0103513:	e8 54 da ff ff       	call   f0100f6c <cprintf>
f0103518:	83 c4 10             	add    $0x10,%esp
f010351b:	eb 16                	jmp    f0103533 <command_sch_test+0x61>
	else if (status == 1)
f010351d:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103521:	75 10                	jne    f0103533 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f0103523:	83 ec 0c             	sub    $0xc,%esp
f0103526:	68 d8 61 12 f0       	push   $0xf01261d8
f010352b:	e8 3c da ff ff       	call   f0100f6c <cprintf>
f0103530:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103533:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103538:	c9                   	leave  
f0103539:	c3                   	ret    

f010353a <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f010353a:	55                   	push   %ebp
f010353b:	89 e5                	mov    %esp,%ebp
f010353d:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0103540:	e8 e1 b1 00 00       	call   f010e726 <isPageReplacmentAlgorithmCLOCK>
f0103545:	85 c0                	test   %eax,%eax
f0103547:	74 15                	je     f010355e <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f0103549:	83 ec 0c             	sub    $0xc,%esp
f010354c:	68 fc 61 12 f0       	push   $0xf01261fc
f0103551:	e8 16 da ff ff       	call   f0100f6c <cprintf>
f0103556:	83 c4 10             	add    $0x10,%esp
f0103559:	e9 8c 00 00 00       	jmp    f01035ea <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010355e:	83 ec 0c             	sub    $0xc,%esp
f0103561:	6a 01                	push   $0x1
f0103563:	e8 a8 b1 00 00       	call   f010e710 <isPageReplacmentAlgorithmLRU>
f0103568:	83 c4 10             	add    $0x10,%esp
f010356b:	85 c0                	test   %eax,%eax
f010356d:	74 12                	je     f0103581 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f010356f:	83 ec 0c             	sub    $0xc,%esp
f0103572:	68 24 62 12 f0       	push   $0xf0126224
f0103577:	e8 f0 d9 ff ff       	call   f0100f6c <cprintf>
f010357c:	83 c4 10             	add    $0x10,%esp
f010357f:	eb 69                	jmp    f01035ea <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0103581:	83 ec 0c             	sub    $0xc,%esp
f0103584:	6a 02                	push   $0x2
f0103586:	e8 85 b1 00 00       	call   f010e710 <isPageReplacmentAlgorithmLRU>
f010358b:	83 c4 10             	add    $0x10,%esp
f010358e:	85 c0                	test   %eax,%eax
f0103590:	74 12                	je     f01035a4 <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0103592:	83 ec 0c             	sub    $0xc,%esp
f0103595:	68 64 62 12 f0       	push   $0xf0126264
f010359a:	e8 cd d9 ff ff       	call   f0100f6c <cprintf>
f010359f:	83 c4 10             	add    $0x10,%esp
f01035a2:	eb 46                	jmp    f01035ea <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f01035a4:	e8 98 b1 00 00       	call   f010e741 <isPageReplacmentAlgorithmFIFO>
f01035a9:	85 c0                	test   %eax,%eax
f01035ab:	74 12                	je     f01035bf <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f01035ad:	83 ec 0c             	sub    $0xc,%esp
f01035b0:	68 a0 62 12 f0       	push   $0xf01262a0
f01035b5:	e8 b2 d9 ff ff       	call   f0100f6c <cprintf>
f01035ba:	83 c4 10             	add    $0x10,%esp
f01035bd:	eb 2b                	jmp    f01035ea <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f01035bf:	e8 98 b1 00 00       	call   f010e75c <isPageReplacmentAlgorithmModifiedCLOCK>
f01035c4:	85 c0                	test   %eax,%eax
f01035c6:	74 12                	je     f01035da <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f01035c8:	83 ec 0c             	sub    $0xc,%esp
f01035cb:	68 c4 62 12 f0       	push   $0xf01262c4
f01035d0:	e8 97 d9 ff ff       	call   f0100f6c <cprintf>
f01035d5:	83 c4 10             	add    $0x10,%esp
f01035d8:	eb 10                	jmp    f01035ea <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f01035da:	83 ec 0c             	sub    $0xc,%esp
f01035dd:	68 f4 62 12 f0       	push   $0xf01262f4
f01035e2:	e8 85 d9 ff ff       	call   f0100f6c <cprintf>
f01035e7:	83 c4 10             	add    $0x10,%esp

	return 0;
f01035ea:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035ef:	c9                   	leave  
f01035f0:	c3                   	ret    

f01035f1 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01035f1:	55                   	push   %ebp
f01035f2:	89 e5                	mov    %esp,%ebp
f01035f4:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f01035f7:	e8 bf ef ff ff       	call   f01025bb <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f01035fc:	83 ec 0c             	sub    $0xc,%esp
f01035ff:	68 20 63 12 f0       	push   $0xf0126320
f0103604:	e8 63 d9 ff ff       	call   f0100f6c <cprintf>
f0103609:	83 c4 10             	add    $0x10,%esp
	return 0;
f010360c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103611:	c9                   	leave  
f0103612:	c3                   	ret    

f0103613 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0103613:	55                   	push   %ebp
f0103614:	89 e5                	mov    %esp,%ebp
f0103616:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0103619:	e8 ad ef ff ff       	call   f01025cb <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f010361e:	83 ec 0c             	sub    $0xc,%esp
f0103621:	68 50 63 12 f0       	push   $0xf0126350
f0103626:	e8 41 d9 ff ff       	call   f0100f6c <cprintf>
f010362b:	83 c4 10             	add    $0x10,%esp
	return 0;
f010362e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103633:	c9                   	leave  
f0103634:	c3                   	ret    

f0103635 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0103635:	55                   	push   %ebp
f0103636:	89 e5                	mov    %esp,%ebp
f0103638:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f010363b:	e8 9b ef ff ff       	call   f01025db <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f0103640:	83 ec 0c             	sub    $0xc,%esp
f0103643:	68 80 63 12 f0       	push   $0xf0126380
f0103648:	e8 1f d9 ff ff       	call   f0100f6c <cprintf>
f010364d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103650:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103655:	c9                   	leave  
f0103656:	c3                   	ret    

f0103657 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0103657:	55                   	push   %ebp
f0103658:	89 e5                	mov    %esp,%ebp
f010365a:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f010365d:	e8 89 ef ff ff       	call   f01025eb <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f0103662:	83 ec 0c             	sub    $0xc,%esp
f0103665:	68 b0 63 12 f0       	push   $0xf01263b0
f010366a:	e8 fd d8 ff ff       	call   f0100f6c <cprintf>
f010366f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103672:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103677:	c9                   	leave  
f0103678:	c3                   	ret    

f0103679 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f0103679:	55                   	push   %ebp
f010367a:	89 e5                	mov    %esp,%ebp
f010367c:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f010367f:	e8 77 ef ff ff       	call   f01025fb <isUHeapPlacementStrategyFIRSTFIT>
f0103684:	84 c0                	test   %al,%al
f0103686:	74 12                	je     f010369a <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0103688:	83 ec 0c             	sub    $0xc,%esp
f010368b:	68 e0 63 12 f0       	push   $0xf01263e0
f0103690:	e8 d7 d8 ff ff       	call   f0100f6c <cprintf>
f0103695:	83 c4 10             	add    $0x10,%esp
f0103698:	eb 61                	jmp    f01036fb <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f010369a:	e8 71 ef ff ff       	call   f0102610 <isUHeapPlacementStrategyBESTFIT>
f010369f:	84 c0                	test   %al,%al
f01036a1:	74 12                	je     f01036b5 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f01036a3:	83 ec 0c             	sub    $0xc,%esp
f01036a6:	68 0c 64 12 f0       	push   $0xf012640c
f01036ab:	e8 bc d8 ff ff       	call   f0100f6c <cprintf>
f01036b0:	83 c4 10             	add    $0x10,%esp
f01036b3:	eb 46                	jmp    f01036fb <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f01036b5:	e8 6b ef ff ff       	call   f0102625 <isUHeapPlacementStrategyNEXTFIT>
f01036ba:	84 c0                	test   %al,%al
f01036bc:	74 12                	je     f01036d0 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f01036be:	83 ec 0c             	sub    $0xc,%esp
f01036c1:	68 38 64 12 f0       	push   $0xf0126438
f01036c6:	e8 a1 d8 ff ff       	call   f0100f6c <cprintf>
f01036cb:	83 c4 10             	add    $0x10,%esp
f01036ce:	eb 2b                	jmp    f01036fb <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f01036d0:	e8 65 ef ff ff       	call   f010263a <isUHeapPlacementStrategyWORSTFIT>
f01036d5:	84 c0                	test   %al,%al
f01036d7:	74 12                	je     f01036eb <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f01036d9:	83 ec 0c             	sub    $0xc,%esp
f01036dc:	68 64 64 12 f0       	push   $0xf0126464
f01036e1:	e8 86 d8 ff ff       	call   f0100f6c <cprintf>
f01036e6:	83 c4 10             	add    $0x10,%esp
f01036e9:	eb 10                	jmp    f01036fb <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f01036eb:	83 ec 0c             	sub    $0xc,%esp
f01036ee:	68 90 64 12 f0       	push   $0xf0126490
f01036f3:	e8 74 d8 ff ff       	call   f0100f6c <cprintf>
f01036f8:	83 c4 10             	add    $0x10,%esp

	return 0;
f01036fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103700:	c9                   	leave  
f0103701:	c3                   	ret    

f0103702 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f0103702:	55                   	push   %ebp
f0103703:	89 e5                	mov    %esp,%ebp
f0103705:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0103708:	e8 f6 ed ff ff       	call   f0102503 <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010370d:	83 ec 0c             	sub    $0xc,%esp
f0103710:	68 bc 64 12 f0       	push   $0xf01264bc
f0103715:	e8 52 d8 ff ff       	call   f0100f6c <cprintf>
f010371a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010371d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103722:	c9                   	leave  
f0103723:	c3                   	ret    

f0103724 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0103724:	55                   	push   %ebp
f0103725:	89 e5                	mov    %esp,%ebp
f0103727:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f010372a:	e8 e4 ed ff ff       	call   f0102513 <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010372f:	83 ec 0c             	sub    $0xc,%esp
f0103732:	68 bc 64 12 f0       	push   $0xf01264bc
f0103737:	e8 30 d8 ff ff       	call   f0100f6c <cprintf>
f010373c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010373f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103744:	c9                   	leave  
f0103745:	c3                   	ret    

f0103746 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0103746:	55                   	push   %ebp
f0103747:	89 e5                	mov    %esp,%ebp
f0103749:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f010374c:	e8 d2 ed ff ff       	call   f0102523 <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f0103751:	83 ec 0c             	sub    $0xc,%esp
f0103754:	68 f0 64 12 f0       	push   $0xf01264f0
f0103759:	e8 0e d8 ff ff       	call   f0100f6c <cprintf>
f010375e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103761:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103766:	c9                   	leave  
f0103767:	c3                   	ret    

f0103768 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0103768:	55                   	push   %ebp
f0103769:	89 e5                	mov    %esp,%ebp
f010376b:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f010376e:	e8 c0 ed ff ff       	call   f0102533 <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f0103773:	83 ec 0c             	sub    $0xc,%esp
f0103776:	68 20 65 12 f0       	push   $0xf0126520
f010377b:	e8 ec d7 ff ff       	call   f0100f6c <cprintf>
f0103780:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103783:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103788:	c9                   	leave  
f0103789:	c3                   	ret    

f010378a <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f010378a:	55                   	push   %ebp
f010378b:	89 e5                	mov    %esp,%ebp
f010378d:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f0103790:	e8 ae ed ff ff       	call   f0102543 <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0103795:	83 ec 0c             	sub    $0xc,%esp
f0103798:	68 50 65 12 f0       	push   $0xf0126550
f010379d:	e8 ca d7 ff ff       	call   f0100f6c <cprintf>
f01037a2:	83 c4 10             	add    $0x10,%esp
	return 0;
f01037a5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01037aa:	c9                   	leave  
f01037ab:	c3                   	ret    

f01037ac <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f01037ac:	55                   	push   %ebp
f01037ad:	89 e5                	mov    %esp,%ebp
f01037af:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f01037b2:	e8 9c ed ff ff       	call   f0102553 <isKHeapPlacementStrategyCONTALLOC>
f01037b7:	84 c0                	test   %al,%al
f01037b9:	74 12                	je     f01037cd <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f01037bb:	83 ec 0c             	sub    $0xc,%esp
f01037be:	68 84 65 12 f0       	push   $0xf0126584
f01037c3:	e8 a4 d7 ff ff       	call   f0100f6c <cprintf>
f01037c8:	83 c4 10             	add    $0x10,%esp
f01037cb:	eb 7c                	jmp    f0103849 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01037cd:	e8 95 ed ff ff       	call   f0102567 <isKHeapPlacementStrategyFIRSTFIT>
f01037d2:	84 c0                	test   %al,%al
f01037d4:	74 12                	je     f01037e8 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f01037d6:	83 ec 0c             	sub    $0xc,%esp
f01037d9:	68 c0 65 12 f0       	push   $0xf01265c0
f01037de:	e8 89 d7 ff ff       	call   f0100f6c <cprintf>
f01037e3:	83 c4 10             	add    $0x10,%esp
f01037e6:	eb 61                	jmp    f0103849 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f01037e8:	e8 8f ed ff ff       	call   f010257c <isKHeapPlacementStrategyBESTFIT>
f01037ed:	84 c0                	test   %al,%al
f01037ef:	74 12                	je     f0103803 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f01037f1:	83 ec 0c             	sub    $0xc,%esp
f01037f4:	68 f0 65 12 f0       	push   $0xf01265f0
f01037f9:	e8 6e d7 ff ff       	call   f0100f6c <cprintf>
f01037fe:	83 c4 10             	add    $0x10,%esp
f0103801:	eb 46                	jmp    f0103849 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0103803:	e8 89 ed ff ff       	call   f0102591 <isKHeapPlacementStrategyNEXTFIT>
f0103808:	84 c0                	test   %al,%al
f010380a:	74 12                	je     f010381e <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010380c:	83 ec 0c             	sub    $0xc,%esp
f010380f:	68 1c 66 12 f0       	push   $0xf012661c
f0103814:	e8 53 d7 ff ff       	call   f0100f6c <cprintf>
f0103819:	83 c4 10             	add    $0x10,%esp
f010381c:	eb 2b                	jmp    f0103849 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f010381e:	e8 83 ed ff ff       	call   f01025a6 <isKHeapPlacementStrategyWORSTFIT>
f0103823:	84 c0                	test   %al,%al
f0103825:	74 12                	je     f0103839 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f0103827:	83 ec 0c             	sub    $0xc,%esp
f010382a:	68 48 66 12 f0       	push   $0xf0126648
f010382f:	e8 38 d7 ff ff       	call   f0100f6c <cprintf>
f0103834:	83 c4 10             	add    $0x10,%esp
f0103837:	eb 10                	jmp    f0103849 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f0103839:	83 ec 0c             	sub    $0xc,%esp
f010383c:	68 78 66 12 f0       	push   $0xf0126678
f0103841:	e8 26 d7 ff ff       	call   f0100f6c <cprintf>
f0103846:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103849:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010384e:	c9                   	leave  
f010384f:	c3                   	ret    

f0103850 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f0103850:	55                   	push   %ebp
f0103851:	89 e5                	mov    %esp,%ebp
f0103853:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0103856:	e8 78 af 00 00       	call   f010e7d3 <isBufferingEnabled>
f010385b:	84 c0                	test   %al,%al
f010385d:	75 12                	jne    f0103871 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f010385f:	83 ec 0c             	sub    $0xc,%esp
f0103862:	68 a8 66 12 f0       	push   $0xf01266a8
f0103867:	e8 00 d7 ff ff       	call   f0100f6c <cprintf>
f010386c:	83 c4 10             	add    $0x10,%esp
f010386f:	eb 1d                	jmp    f010388e <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f0103871:	83 ec 0c             	sub    $0xc,%esp
f0103874:	6a 00                	push   $0x0
f0103876:	e8 32 af 00 00       	call   f010e7ad <enableModifiedBuffer>
f010387b:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f010387e:	83 ec 0c             	sub    $0xc,%esp
f0103881:	68 e4 66 12 f0       	push   $0xf01266e4
f0103886:	e8 e1 d6 ff ff       	call   f0100f6c <cprintf>
f010388b:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010388e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103893:	c9                   	leave  
f0103894:	c3                   	ret    

f0103895 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0103895:	55                   	push   %ebp
f0103896:	89 e5                	mov    %esp,%ebp
f0103898:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010389b:	e8 33 af 00 00       	call   f010e7d3 <isBufferingEnabled>
f01038a0:	84 c0                	test   %al,%al
f01038a2:	75 12                	jne    f01038b6 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01038a4:	83 ec 0c             	sub    $0xc,%esp
f01038a7:	68 a8 66 12 f0       	push   $0xf01266a8
f01038ac:	e8 bb d6 ff ff       	call   f0100f6c <cprintf>
f01038b1:	83 c4 10             	add    $0x10,%esp
f01038b4:	eb 1d                	jmp    f01038d3 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f01038b6:	83 ec 0c             	sub    $0xc,%esp
f01038b9:	6a 01                	push   $0x1
f01038bb:	e8 ed ae 00 00       	call   f010e7ad <enableModifiedBuffer>
f01038c0:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f01038c3:	83 ec 0c             	sub    $0xc,%esp
f01038c6:	68 08 67 12 f0       	push   $0xf0126708
f01038cb:	e8 9c d6 ff ff       	call   f0100f6c <cprintf>
f01038d0:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01038d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01038d8:	c9                   	leave  
f01038d9:	c3                   	ret    

f01038da <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f01038da:	55                   	push   %ebp
f01038db:	89 e5                	mov    %esp,%ebp
f01038dd:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f01038e0:	83 ec 0c             	sub    $0xc,%esp
f01038e3:	6a 00                	push   $0x0
f01038e5:	e8 db ae 00 00       	call   f010e7c5 <enableBuffering>
f01038ea:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f01038ed:	83 ec 0c             	sub    $0xc,%esp
f01038f0:	6a 00                	push   $0x0
f01038f2:	e8 b6 ae 00 00       	call   f010e7ad <enableModifiedBuffer>
f01038f7:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f01038fa:	83 ec 0c             	sub    $0xc,%esp
f01038fd:	68 28 67 12 f0       	push   $0xf0126728
f0103902:	e8 65 d6 ff ff       	call   f0100f6c <cprintf>
f0103907:	83 c4 10             	add    $0x10,%esp
	return 0;
f010390a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010390f:	c9                   	leave  
f0103910:	c3                   	ret    

f0103911 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f0103911:	55                   	push   %ebp
f0103912:	89 e5                	mov    %esp,%ebp
f0103914:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0103917:	83 ec 0c             	sub    $0xc,%esp
f010391a:	6a 01                	push   $0x1
f010391c:	e8 a4 ae 00 00       	call   f010e7c5 <enableBuffering>
f0103921:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f0103924:	83 ec 0c             	sub    $0xc,%esp
f0103927:	6a 01                	push   $0x1
f0103929:	e8 7f ae 00 00       	call   f010e7ad <enableModifiedBuffer>
f010392e:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f0103931:	e8 b5 ae 00 00       	call   f010e7eb <getModifiedBufferLength>
f0103936:	85 c0                	test   %eax,%eax
f0103938:	75 59                	jne    f0103993 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f010393a:	83 ec 0c             	sub    $0xc,%esp
f010393d:	68 44 67 12 f0       	push   $0xf0126744
f0103942:	e8 25 d6 ff ff       	call   f0100f6c <cprintf>
f0103947:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f010394a:	83 ec 08             	sub    $0x8,%esp
f010394d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0103950:	50                   	push   %eax
f0103951:	68 74 67 12 f0       	push   $0xf0126774
f0103956:	e8 db e9 01 00       	call   f0122336 <readline>
f010395b:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f010395e:	83 ec 04             	sub    $0x4,%esp
f0103961:	6a 0a                	push   $0xa
f0103963:	6a 00                	push   $0x0
f0103965:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0103968:	50                   	push   %eax
f0103969:	e8 30 ef 01 00       	call   f012289e <strtol>
f010396e:	83 c4 10             	add    $0x10,%esp
f0103971:	83 ec 0c             	sub    $0xc,%esp
f0103974:	50                   	push   %eax
f0103975:	e8 63 ae 00 00       	call   f010e7dd <setModifiedBufferLength>
f010397a:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f010397d:	e8 69 ae 00 00       	call   f010e7eb <getModifiedBufferLength>
f0103982:	83 ec 08             	sub    $0x8,%esp
f0103985:	50                   	push   %eax
f0103986:	68 a0 67 12 f0       	push   $0xf01267a0
f010398b:	e8 dc d5 ff ff       	call   f0100f6c <cprintf>
f0103990:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0103993:	83 ec 0c             	sub    $0xc,%esp
f0103996:	68 c5 67 12 f0       	push   $0xf01267c5
f010399b:	e8 cc d5 ff ff       	call   f0100f6c <cprintf>
f01039a0:	83 c4 10             	add    $0x10,%esp
	return 0;
f01039a3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01039a8:	c9                   	leave  
f01039a9:	c3                   	ret    

f01039aa <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01039aa:	55                   	push   %ebp
f01039ab:	89 e5                	mov    %esp,%ebp
f01039ad:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01039b0:	e8 1e ae 00 00       	call   f010e7d3 <isBufferingEnabled>
f01039b5:	84 c0                	test   %al,%al
f01039b7:	75 12                	jne    f01039cb <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01039b9:	83 ec 0c             	sub    $0xc,%esp
f01039bc:	68 e0 67 12 f0       	push   $0xf01267e0
f01039c1:	e8 a6 d5 ff ff       	call   f0100f6c <cprintf>
f01039c6:	83 c4 10             	add    $0x10,%esp
f01039c9:	eb 19                	jmp    f01039e4 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01039cb:	e8 eb ad 00 00       	call   f010e7bb <isModifiedBufferEnabled>
f01039d0:	84 c0                	test   %al,%al
f01039d2:	75 10                	jne    f01039e4 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01039d4:	83 ec 0c             	sub    $0xc,%esp
f01039d7:	68 30 68 12 f0       	push   $0xf0126830
f01039dc:	e8 8b d5 ff ff       	call   f0100f6c <cprintf>
f01039e1:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f01039e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01039e7:	83 c0 04             	add    $0x4,%eax
f01039ea:	8b 00                	mov    (%eax),%eax
f01039ec:	83 ec 04             	sub    $0x4,%esp
f01039ef:	6a 0a                	push   $0xa
f01039f1:	6a 00                	push   $0x0
f01039f3:	50                   	push   %eax
f01039f4:	e8 a5 ee 01 00       	call   f012289e <strtol>
f01039f9:	83 c4 10             	add    $0x10,%esp
f01039fc:	83 ec 0c             	sub    $0xc,%esp
f01039ff:	50                   	push   %eax
f0103a00:	e8 d8 ad 00 00       	call   f010e7dd <setModifiedBufferLength>
f0103a05:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0103a08:	e8 de ad 00 00       	call   f010e7eb <getModifiedBufferLength>
f0103a0d:	83 ec 08             	sub    $0x8,%esp
f0103a10:	50                   	push   %eax
f0103a11:	68 a0 67 12 f0       	push   $0xf01267a0
f0103a16:	e8 51 d5 ff ff       	call   f0100f6c <cprintf>
f0103a1b:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103a1e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103a23:	c9                   	leave  
f0103a24:	c3                   	ret    

f0103a25 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0103a25:	55                   	push   %ebp
f0103a26:	89 e5                	mov    %esp,%ebp
f0103a28:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0103a2b:	e8 a3 ad 00 00       	call   f010e7d3 <isBufferingEnabled>
f0103a30:	84 c0                	test   %al,%al
f0103a32:	75 12                	jne    f0103a46 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0103a34:	83 ec 0c             	sub    $0xc,%esp
f0103a37:	68 e0 67 12 f0       	push   $0xf01267e0
f0103a3c:	e8 2b d5 ff ff       	call   f0100f6c <cprintf>
f0103a41:	83 c4 10             	add    $0x10,%esp
f0103a44:	eb 19                	jmp    f0103a5f <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0103a46:	e8 70 ad 00 00       	call   f010e7bb <isModifiedBufferEnabled>
f0103a4b:	84 c0                	test   %al,%al
f0103a4d:	75 10                	jne    f0103a5f <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0103a4f:	83 ec 0c             	sub    $0xc,%esp
f0103a52:	68 30 68 12 f0       	push   $0xf0126830
f0103a57:	e8 10 d5 ff ff       	call   f0100f6c <cprintf>
f0103a5c:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f0103a5f:	e8 87 ad 00 00       	call   f010e7eb <getModifiedBufferLength>
f0103a64:	83 ec 08             	sub    $0x8,%esp
f0103a67:	50                   	push   %eax
f0103a68:	68 76 68 12 f0       	push   $0xf0126876
f0103a6d:	e8 fa d4 ff ff       	call   f0100f6c <cprintf>
f0103a72:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103a75:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103a7a:	c9                   	leave  
f0103a7b:	c3                   	ret    

f0103a7c <command_tst>:

int command_tst(int number_of_arguments, char **arguments)
{
f0103a7c:	55                   	push   %ebp
f0103a7d:	89 e5                	mov    %esp,%ebp
f0103a7f:	83 ec 08             	sub    $0x8,%esp
	return tst_handler(number_of_arguments, arguments);
f0103a82:	83 ec 08             	sub    $0x8,%esp
f0103a85:	ff 75 0c             	pushl  0xc(%ebp)
f0103a88:	ff 75 08             	pushl  0x8(%ebp)
f0103a8b:	e8 e1 b5 00 00       	call   f010f071 <tst_handler>
f0103a90:	83 c4 10             	add    $0x10,%esp
}
f0103a93:	c9                   	leave  
f0103a94:	c3                   	ret    

f0103a95 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0103a95:	55                   	push   %ebp
f0103a96:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0103a98:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a9b:	8b 15 c0 28 5a f0    	mov    0xf05a28c0,%edx
f0103aa1:	29 d0                	sub    %edx,%eax
f0103aa3:	c1 f8 03             	sar    $0x3,%eax
f0103aa6:	89 c2                	mov    %eax,%edx
f0103aa8:	89 d0                	mov    %edx,%eax
f0103aaa:	c1 e0 02             	shl    $0x2,%eax
f0103aad:	01 d0                	add    %edx,%eax
f0103aaf:	c1 e0 02             	shl    $0x2,%eax
f0103ab2:	01 d0                	add    %edx,%eax
f0103ab4:	c1 e0 02             	shl    $0x2,%eax
f0103ab7:	01 d0                	add    %edx,%eax
f0103ab9:	89 c1                	mov    %eax,%ecx
f0103abb:	c1 e1 08             	shl    $0x8,%ecx
f0103abe:	01 c8                	add    %ecx,%eax
f0103ac0:	89 c1                	mov    %eax,%ecx
f0103ac2:	c1 e1 10             	shl    $0x10,%ecx
f0103ac5:	01 c8                	add    %ecx,%eax
f0103ac7:	01 c0                	add    %eax,%eax
f0103ac9:	01 d0                	add    %edx,%eax
}
f0103acb:	5d                   	pop    %ebp
f0103acc:	c3                   	ret    

f0103acd <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0103acd:	55                   	push   %ebp
f0103ace:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0103ad0:	ff 75 08             	pushl  0x8(%ebp)
f0103ad3:	e8 bd ff ff ff       	call   f0103a95 <to_frame_number>
f0103ad8:	83 c4 04             	add    $0x4,%esp
f0103adb:	c1 e0 0c             	shl    $0xc,%eax
}
f0103ade:	c9                   	leave  
f0103adf:	c3                   	ret    

f0103ae0 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0103ae0:	55                   	push   %ebp
f0103ae1:	89 e5                	mov    %esp,%ebp
f0103ae3:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0103ae6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ae9:	c1 e8 0c             	shr    $0xc,%eax
f0103aec:	89 c2                	mov    %eax,%edx
f0103aee:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f0103af3:	39 c2                	cmp    %eax,%edx
f0103af5:	72 14                	jb     f0103b0b <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0103af7:	83 ec 04             	sub    $0x4,%esp
f0103afa:	68 94 68 12 f0       	push   $0xf0126894
f0103aff:	6a 55                	push   $0x55
f0103b01:	68 bc 68 12 f0       	push   $0xf01268bc
f0103b06:	e8 0f c8 ff ff       	call   f010031a <_panic>
	return &frames_info[PPN(physical_address)];
f0103b0b:	8b 15 c0 28 5a f0    	mov    0xf05a28c0,%edx
f0103b11:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b14:	c1 e8 0c             	shr    $0xc,%eax
f0103b17:	89 c1                	mov    %eax,%ecx
f0103b19:	89 c8                	mov    %ecx,%eax
f0103b1b:	01 c0                	add    %eax,%eax
f0103b1d:	01 c8                	add    %ecx,%eax
f0103b1f:	c1 e0 03             	shl    $0x3,%eax
f0103b22:	01 d0                	add    %edx,%eax
}
f0103b24:	c9                   	leave  
f0103b25:	c3                   	ret    

f0103b26 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f0103b26:	55                   	push   %ebp
f0103b27:	89 e5                	mov    %esp,%ebp
f0103b29:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103b2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b2f:	05 00 14 00 00       	add    $0x1400,%eax
f0103b34:	c1 e0 03             	shl    $0x3,%eax
f0103b37:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103b3a:	83 ec 04             	sub    $0x4,%esp
f0103b3d:	6a 08                	push   $0x8
f0103b3f:	ff 75 0c             	pushl  0xc(%ebp)
f0103b42:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b45:	e8 dc f1 01 00       	call   f0122d26 <ide_read>
f0103b4a:	83 c4 10             	add    $0x10,%esp
f0103b4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f0103b50:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103b53:	c9                   	leave  
f0103b54:	c3                   	ret    

f0103b55 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f0103b55:	55                   	push   %ebp
f0103b56:	89 e5                	mov    %esp,%ebp
f0103b58:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103b5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b5e:	05 00 14 00 00       	add    $0x1400,%eax
f0103b63:	c1 e0 03             	shl    $0x3,%eax
f0103b66:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103b69:	83 ec 04             	sub    $0x4,%esp
f0103b6c:	6a 08                	push   $0x8
f0103b6e:	ff 75 0c             	pushl  0xc(%ebp)
f0103b71:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b74:	e8 ed f2 01 00       	call   f0122e66 <ide_write>
f0103b79:	83 c4 10             	add    $0x10,%esp
f0103b7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f0103b7f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103b83:	74 14                	je     f0103b99 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f0103b85:	83 ec 04             	sub    $0x4,%esp
f0103b88:	68 de 68 12 f0       	push   $0xf01268de
f0103b8d:	6a 2f                	push   $0x2f
f0103b8f:	68 f5 68 12 f0       	push   $0xf01268f5
f0103b94:	e8 81 c7 ff ff       	call   f010031a <_panic>
	return success;
f0103b99:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103b9c:	c9                   	leave  
f0103b9d:	c3                   	ret    

f0103b9e <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f0103b9e:	55                   	push   %ebp
f0103b9f:	89 e5                	mov    %esp,%ebp
f0103ba1:	53                   	push   %ebx
f0103ba2:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&DiskFrameLists.disk_free_frame_list);
f0103ba5:	c7 05 80 2a 5a f0 00 	movl   $0x0,0xf05a2a80
f0103bac:	00 00 00 
f0103baf:	c7 05 84 2a 5a f0 00 	movl   $0x0,0xf05a2a84
f0103bb6:	00 00 00 
f0103bb9:	c7 05 8c 2a 5a f0 00 	movl   $0x0,0xf05a2a8c
f0103bc0:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103bc3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f0103bca:	e9 e8 00 00 00       	jmp    f0103cb7 <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f0103bcf:	8b 0d 60 fc 59 f0    	mov    0xf059fc60,%ecx
f0103bd5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bd8:	89 d0                	mov    %edx,%eax
f0103bda:	01 c0                	add    %eax,%eax
f0103bdc:	01 d0                	add    %edx,%eax
f0103bde:	c1 e0 03             	shl    $0x3,%eax
f0103be1:	01 c8                	add    %ecx,%eax
f0103be3:	83 ec 0c             	sub    $0xc,%esp
f0103be6:	50                   	push   %eax
f0103be7:	e8 c9 45 00 00       	call   f01081b5 <initialize_frame_info>
f0103bec:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&DiskFrameLists.disk_free_frame_list, &disk_frames_info[i]);
f0103bef:	8b 0d 60 fc 59 f0    	mov    0xf059fc60,%ecx
f0103bf5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bf8:	89 d0                	mov    %edx,%eax
f0103bfa:	01 c0                	add    %eax,%eax
f0103bfc:	01 d0                	add    %edx,%eax
f0103bfe:	c1 e0 03             	shl    $0x3,%eax
f0103c01:	01 c8                	add    %ecx,%eax
f0103c03:	85 c0                	test   %eax,%eax
f0103c05:	75 14                	jne    f0103c1b <initialize_disk_page_file+0x7d>
f0103c07:	83 ec 04             	sub    $0x4,%esp
f0103c0a:	68 14 69 12 f0       	push   $0xf0126914
f0103c0f:	6a 56                	push   $0x56
f0103c11:	68 f5 68 12 f0       	push   $0xf01268f5
f0103c16:	e8 ff c6 ff ff       	call   f010031a <_panic>
f0103c1b:	8b 0d 60 fc 59 f0    	mov    0xf059fc60,%ecx
f0103c21:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c24:	89 d0                	mov    %edx,%eax
f0103c26:	01 c0                	add    %eax,%eax
f0103c28:	01 d0                	add    %edx,%eax
f0103c2a:	c1 e0 03             	shl    $0x3,%eax
f0103c2d:	01 c8                	add    %ecx,%eax
f0103c2f:	8b 15 80 2a 5a f0    	mov    0xf05a2a80,%edx
f0103c35:	89 10                	mov    %edx,(%eax)
f0103c37:	8b 00                	mov    (%eax),%eax
f0103c39:	85 c0                	test   %eax,%eax
f0103c3b:	74 1f                	je     f0103c5c <initialize_disk_page_file+0xbe>
f0103c3d:	8b 15 80 2a 5a f0    	mov    0xf05a2a80,%edx
f0103c43:	8b 1d 60 fc 59 f0    	mov    0xf059fc60,%ebx
f0103c49:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0103c4c:	89 c8                	mov    %ecx,%eax
f0103c4e:	01 c0                	add    %eax,%eax
f0103c50:	01 c8                	add    %ecx,%eax
f0103c52:	c1 e0 03             	shl    $0x3,%eax
f0103c55:	01 d8                	add    %ebx,%eax
f0103c57:	89 42 04             	mov    %eax,0x4(%edx)
f0103c5a:	eb 19                	jmp    f0103c75 <initialize_disk_page_file+0xd7>
f0103c5c:	8b 0d 60 fc 59 f0    	mov    0xf059fc60,%ecx
f0103c62:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c65:	89 d0                	mov    %edx,%eax
f0103c67:	01 c0                	add    %eax,%eax
f0103c69:	01 d0                	add    %edx,%eax
f0103c6b:	c1 e0 03             	shl    $0x3,%eax
f0103c6e:	01 c8                	add    %ecx,%eax
f0103c70:	a3 84 2a 5a f0       	mov    %eax,0xf05a2a84
f0103c75:	8b 0d 60 fc 59 f0    	mov    0xf059fc60,%ecx
f0103c7b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c7e:	89 d0                	mov    %edx,%eax
f0103c80:	01 c0                	add    %eax,%eax
f0103c82:	01 d0                	add    %edx,%eax
f0103c84:	c1 e0 03             	shl    $0x3,%eax
f0103c87:	01 c8                	add    %ecx,%eax
f0103c89:	a3 80 2a 5a f0       	mov    %eax,0xf05a2a80
f0103c8e:	8b 0d 60 fc 59 f0    	mov    0xf059fc60,%ecx
f0103c94:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c97:	89 d0                	mov    %edx,%eax
f0103c99:	01 c0                	add    %eax,%eax
f0103c9b:	01 d0                	add    %edx,%eax
f0103c9d:	c1 e0 03             	shl    $0x3,%eax
f0103ca0:	01 c8                	add    %ecx,%eax
f0103ca2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103ca9:	a1 8c 2a 5a f0       	mov    0xf05a2a8c,%eax
f0103cae:	40                   	inc    %eax
f0103caf:	a3 8c 2a 5a f0       	mov    %eax,0xf05a2a8c
{
	int i;
	LIST_INIT(&DiskFrameLists.disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103cb4:	ff 45 f4             	incl   -0xc(%ebp)
f0103cb7:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f0103cbe:	0f 8e 0b ff ff ff    	jle    f0103bcf <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&DiskFrameLists.disk_free_frame_list, &disk_frames_info[i]);
	}
}
f0103cc4:	90                   	nop
f0103cc5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103cc8:	c9                   	leave  
f0103cc9:	c3                   	ret    

f0103cca <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f0103cca:	55                   	push   %ebp
f0103ccb:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f0103ccd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cd0:	8b 15 60 fc 59 f0    	mov    0xf059fc60,%edx
f0103cd6:	29 d0                	sub    %edx,%eax
f0103cd8:	c1 f8 03             	sar    $0x3,%eax
f0103cdb:	89 c2                	mov    %eax,%edx
f0103cdd:	89 d0                	mov    %edx,%eax
f0103cdf:	c1 e0 02             	shl    $0x2,%eax
f0103ce2:	01 d0                	add    %edx,%eax
f0103ce4:	c1 e0 02             	shl    $0x2,%eax
f0103ce7:	01 d0                	add    %edx,%eax
f0103ce9:	c1 e0 02             	shl    $0x2,%eax
f0103cec:	01 d0                	add    %edx,%eax
f0103cee:	89 c1                	mov    %eax,%ecx
f0103cf0:	c1 e1 08             	shl    $0x8,%ecx
f0103cf3:	01 c8                	add    %ecx,%eax
f0103cf5:	89 c1                	mov    %eax,%ecx
f0103cf7:	c1 e1 10             	shl    $0x10,%ecx
f0103cfa:	01 c8                	add    %ecx,%eax
f0103cfc:	01 c0                	add    %eax,%eax
f0103cfe:	01 d0                	add    %edx,%eax
}
f0103d00:	5d                   	pop    %ebp
f0103d01:	c3                   	ret    

f0103d02 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103d02:	55                   	push   %ebp
f0103d03:	89 e5                	mov    %esp,%ebp
f0103d05:	83 ec 18             	sub    $0x18,%esp
	int ret = 0;
f0103d08:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	acquire_spinlock(&DiskFrameLists.dfllock);
f0103d0f:	83 ec 0c             	sub    $0xc,%esp
f0103d12:	68 90 2a 5a f0       	push   $0xf05a2a90
f0103d17:	e8 05 ae 00 00       	call   f010eb21 <acquire_spinlock>
f0103d1c:	83 c4 10             	add    $0x10,%esp
	{
		// Fill this function in
		struct FrameInfo *ptr_frame_info = LIST_FIRST(&DiskFrameLists.disk_free_frame_list);
f0103d1f:	a1 80 2a 5a f0       	mov    0xf05a2a80,%eax
f0103d24:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if(ptr_frame_info == NULL)
f0103d27:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103d2b:	75 0c                	jne    f0103d39 <allocate_disk_frame+0x37>
		{
			ret = E_NO_PAGE_FILE_SPACE;
f0103d2d:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
f0103d34:	e9 a2 00 00 00       	jmp    f0103ddb <allocate_disk_frame+0xd9>
		}
		else
		{
			LIST_REMOVE(&DiskFrameLists.disk_free_frame_list, ptr_frame_info);
f0103d39:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103d3d:	75 14                	jne    f0103d53 <allocate_disk_frame+0x51>
f0103d3f:	83 ec 04             	sub    $0x4,%esp
f0103d42:	68 37 69 12 f0       	push   $0xf0126937
f0103d47:	6a 7b                	push   $0x7b
f0103d49:	68 f5 68 12 f0       	push   $0xf01268f5
f0103d4e:	e8 c7 c5 ff ff       	call   f010031a <_panic>
f0103d53:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d56:	8b 00                	mov    (%eax),%eax
f0103d58:	85 c0                	test   %eax,%eax
f0103d5a:	74 10                	je     f0103d6c <allocate_disk_frame+0x6a>
f0103d5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d5f:	8b 00                	mov    (%eax),%eax
f0103d61:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0103d64:	8b 52 04             	mov    0x4(%edx),%edx
f0103d67:	89 50 04             	mov    %edx,0x4(%eax)
f0103d6a:	eb 0b                	jmp    f0103d77 <allocate_disk_frame+0x75>
f0103d6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d6f:	8b 40 04             	mov    0x4(%eax),%eax
f0103d72:	a3 84 2a 5a f0       	mov    %eax,0xf05a2a84
f0103d77:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d7a:	8b 40 04             	mov    0x4(%eax),%eax
f0103d7d:	85 c0                	test   %eax,%eax
f0103d7f:	74 0f                	je     f0103d90 <allocate_disk_frame+0x8e>
f0103d81:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d84:	8b 40 04             	mov    0x4(%eax),%eax
f0103d87:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0103d8a:	8b 12                	mov    (%edx),%edx
f0103d8c:	89 10                	mov    %edx,(%eax)
f0103d8e:	eb 0a                	jmp    f0103d9a <allocate_disk_frame+0x98>
f0103d90:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d93:	8b 00                	mov    (%eax),%eax
f0103d95:	a3 80 2a 5a f0       	mov    %eax,0xf05a2a80
f0103d9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d9d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0103da3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103da6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103dad:	a1 8c 2a 5a f0       	mov    0xf05a2a8c,%eax
f0103db2:	48                   	dec    %eax
f0103db3:	a3 8c 2a 5a f0       	mov    %eax,0xf05a2a8c
			initialize_frame_info(ptr_frame_info);
f0103db8:	83 ec 0c             	sub    $0xc,%esp
f0103dbb:	ff 75 f0             	pushl  -0x10(%ebp)
f0103dbe:	e8 f2 43 00 00       	call   f01081b5 <initialize_frame_info>
f0103dc3:	83 c4 10             	add    $0x10,%esp
			*dfn = to_disk_frame_number(ptr_frame_info);
f0103dc6:	83 ec 0c             	sub    $0xc,%esp
f0103dc9:	ff 75 f0             	pushl  -0x10(%ebp)
f0103dcc:	e8 f9 fe ff ff       	call   f0103cca <to_disk_frame_number>
f0103dd1:	83 c4 10             	add    $0x10,%esp
f0103dd4:	89 c2                	mov    %eax,%edx
f0103dd6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dd9:	89 10                	mov    %edx,(%eax)
		}
	}
	release_spinlock(&DiskFrameLists.dfllock);
f0103ddb:	83 ec 0c             	sub    $0xc,%esp
f0103dde:	68 90 2a 5a f0       	push   $0xf05a2a90
f0103de3:	e8 c0 ad 00 00       	call   f010eba8 <release_spinlock>
f0103de8:	83 c4 10             	add    $0x10,%esp

	return ret;
f0103deb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103dee:	c9                   	leave  
f0103def:	c3                   	ret    

f0103df0 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f0103df0:	55                   	push   %ebp
f0103df1:	89 e5                	mov    %esp,%ebp
f0103df3:	53                   	push   %ebx
f0103df4:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f0103df7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0103dfb:	0f 84 ea 00 00 00    	je     f0103eeb <free_disk_frame+0xfb>
	acquire_spinlock(&DiskFrameLists.dfllock);
f0103e01:	83 ec 0c             	sub    $0xc,%esp
f0103e04:	68 90 2a 5a f0       	push   $0xf05a2a90
f0103e09:	e8 13 ad 00 00       	call   f010eb21 <acquire_spinlock>
f0103e0e:	83 c4 10             	add    $0x10,%esp
	{
		LIST_INSERT_HEAD(&DiskFrameLists.disk_free_frame_list, &disk_frames_info[dfn]);
f0103e11:	8b 0d 60 fc 59 f0    	mov    0xf059fc60,%ecx
f0103e17:	8b 55 08             	mov    0x8(%ebp),%edx
f0103e1a:	89 d0                	mov    %edx,%eax
f0103e1c:	01 c0                	add    %eax,%eax
f0103e1e:	01 d0                	add    %edx,%eax
f0103e20:	c1 e0 03             	shl    $0x3,%eax
f0103e23:	01 c8                	add    %ecx,%eax
f0103e25:	85 c0                	test   %eax,%eax
f0103e27:	75 17                	jne    f0103e40 <free_disk_frame+0x50>
f0103e29:	83 ec 04             	sub    $0x4,%esp
f0103e2c:	68 14 69 12 f0       	push   $0xf0126914
f0103e31:	68 8e 00 00 00       	push   $0x8e
f0103e36:	68 f5 68 12 f0       	push   $0xf01268f5
f0103e3b:	e8 da c4 ff ff       	call   f010031a <_panic>
f0103e40:	8b 0d 60 fc 59 f0    	mov    0xf059fc60,%ecx
f0103e46:	8b 55 08             	mov    0x8(%ebp),%edx
f0103e49:	89 d0                	mov    %edx,%eax
f0103e4b:	01 c0                	add    %eax,%eax
f0103e4d:	01 d0                	add    %edx,%eax
f0103e4f:	c1 e0 03             	shl    $0x3,%eax
f0103e52:	01 c8                	add    %ecx,%eax
f0103e54:	8b 15 80 2a 5a f0    	mov    0xf05a2a80,%edx
f0103e5a:	89 10                	mov    %edx,(%eax)
f0103e5c:	8b 00                	mov    (%eax),%eax
f0103e5e:	85 c0                	test   %eax,%eax
f0103e60:	74 1f                	je     f0103e81 <free_disk_frame+0x91>
f0103e62:	8b 15 80 2a 5a f0    	mov    0xf05a2a80,%edx
f0103e68:	8b 1d 60 fc 59 f0    	mov    0xf059fc60,%ebx
f0103e6e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0103e71:	89 c8                	mov    %ecx,%eax
f0103e73:	01 c0                	add    %eax,%eax
f0103e75:	01 c8                	add    %ecx,%eax
f0103e77:	c1 e0 03             	shl    $0x3,%eax
f0103e7a:	01 d8                	add    %ebx,%eax
f0103e7c:	89 42 04             	mov    %eax,0x4(%edx)
f0103e7f:	eb 19                	jmp    f0103e9a <free_disk_frame+0xaa>
f0103e81:	8b 0d 60 fc 59 f0    	mov    0xf059fc60,%ecx
f0103e87:	8b 55 08             	mov    0x8(%ebp),%edx
f0103e8a:	89 d0                	mov    %edx,%eax
f0103e8c:	01 c0                	add    %eax,%eax
f0103e8e:	01 d0                	add    %edx,%eax
f0103e90:	c1 e0 03             	shl    $0x3,%eax
f0103e93:	01 c8                	add    %ecx,%eax
f0103e95:	a3 84 2a 5a f0       	mov    %eax,0xf05a2a84
f0103e9a:	8b 0d 60 fc 59 f0    	mov    0xf059fc60,%ecx
f0103ea0:	8b 55 08             	mov    0x8(%ebp),%edx
f0103ea3:	89 d0                	mov    %edx,%eax
f0103ea5:	01 c0                	add    %eax,%eax
f0103ea7:	01 d0                	add    %edx,%eax
f0103ea9:	c1 e0 03             	shl    $0x3,%eax
f0103eac:	01 c8                	add    %ecx,%eax
f0103eae:	a3 80 2a 5a f0       	mov    %eax,0xf05a2a80
f0103eb3:	8b 0d 60 fc 59 f0    	mov    0xf059fc60,%ecx
f0103eb9:	8b 55 08             	mov    0x8(%ebp),%edx
f0103ebc:	89 d0                	mov    %edx,%eax
f0103ebe:	01 c0                	add    %eax,%eax
f0103ec0:	01 d0                	add    %edx,%eax
f0103ec2:	c1 e0 03             	shl    $0x3,%eax
f0103ec5:	01 c8                	add    %ecx,%eax
f0103ec7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103ece:	a1 8c 2a 5a f0       	mov    0xf05a2a8c,%eax
f0103ed3:	40                   	inc    %eax
f0103ed4:	a3 8c 2a 5a f0       	mov    %eax,0xf05a2a8c
	}
	release_spinlock(&DiskFrameLists.dfllock);
f0103ed9:	83 ec 0c             	sub    $0xc,%esp
f0103edc:	68 90 2a 5a f0       	push   $0xf05a2a90
f0103ee1:	e8 c2 ac 00 00       	call   f010eba8 <release_spinlock>
f0103ee6:	83 c4 10             	add    $0x10,%esp
f0103ee9:	eb 01                	jmp    f0103eec <free_disk_frame+0xfc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f0103eeb:	90                   	nop
	acquire_spinlock(&DiskFrameLists.dfllock);
	{
		LIST_INSERT_HEAD(&DiskFrameLists.disk_free_frame_list, &disk_frames_info[dfn]);
	}
	release_spinlock(&DiskFrameLists.dfllock);
}
f0103eec:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103eef:	c9                   	leave  
f0103ef0:	c3                   	ret    

f0103ef1 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f0103ef1:	55                   	push   %ebp
f0103ef2:	89 e5                	mov    %esp,%ebp
f0103ef4:	83 ec 28             	sub    $0x28,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f0103ef7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103efa:	c1 e8 16             	shr    $0x16,%eax
f0103efd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103f04:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f07:	01 d0                	add    %edx,%eax
f0103f09:	8b 00                	mov    (%eax),%eax
f0103f0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f0103f0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103f11:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103f16:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103f19:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f1c:	c1 e8 0c             	shr    $0xc,%eax
f0103f1f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103f22:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f0103f27:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103f2a:	72 17                	jb     f0103f43 <get_disk_page_table+0x52>
f0103f2c:	ff 75 f0             	pushl  -0x10(%ebp)
f0103f2f:	68 58 69 12 f0       	push   $0xf0126958
f0103f34:	68 9d 00 00 00       	push   $0x9d
f0103f39:	68 f5 68 12 f0       	push   $0xf01268f5
f0103f3e:	e8 d7 c3 ff ff       	call   f010031a <_panic>
f0103f43:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f46:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103f4b:	89 c2                	mov    %eax,%edx
f0103f4d:	8b 45 14             	mov    0x14(%ebp),%eax
f0103f50:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103f52:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103f56:	0f 85 b7 00 00 00    	jne    f0104013 <get_disk_page_table+0x122>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f0103f5c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0103f60:	0f 84 9d 00 00 00    	je     f0104003 <get_disk_page_table+0x112>
						,PERM_PRESENT);
			}
#else
			{
				struct FrameInfo* ptr_frame_info;
				allocate_frame(&ptr_frame_info) ;
f0103f66:	83 ec 0c             	sub    $0xc,%esp
f0103f69:	8d 45 dc             	lea    -0x24(%ebp),%eax
f0103f6c:	50                   	push   %eax
f0103f6d:	e8 5e 42 00 00       	call   f01081d0 <allocate_frame>
f0103f72:	83 c4 10             	add    $0x10,%esp

				//LOG_STATMENT(cprintf("created table"));
				uint32 phys_page_table = to_physical_address(ptr_frame_info);
f0103f75:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103f78:	83 ec 0c             	sub    $0xc,%esp
f0103f7b:	50                   	push   %eax
f0103f7c:	e8 4c fb ff ff       	call   f0103acd <to_physical_address>
f0103f81:	83 c4 10             	add    $0x10,%esp
f0103f84:	89 45 e8             	mov    %eax,-0x18(%ebp)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0103f87:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103f8a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103f8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103f90:	c1 e8 0c             	shr    $0xc,%eax
f0103f93:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103f96:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f0103f9b:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0103f9e:	72 17                	jb     f0103fb7 <get_disk_page_table+0xc6>
f0103fa0:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103fa3:	68 58 69 12 f0       	push   $0xf0126958
f0103fa8:	68 b9 00 00 00       	push   $0xb9
f0103fad:	68 f5 68 12 f0       	push   $0xf01268f5
f0103fb2:	e8 63 c3 ff ff       	call   f010031a <_panic>
f0103fb7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103fba:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103fbf:	89 c2                	mov    %eax,%edx
f0103fc1:	8b 45 14             	mov    0x14(%ebp),%eax
f0103fc4:	89 10                	mov    %edx,(%eax)
				ptr_frame_info->references = 1;
f0103fc6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103fc9:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
f0103fcf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103fd2:	c1 e8 16             	shr    $0x16,%eax
f0103fd5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103fdc:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fdf:	01 d0                	add    %edx,%eax
f0103fe1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0103fe4:	83 ca 01             	or     $0x1,%edx
f0103fe7:	89 10                	mov    %edx,(%eax)
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f0103fe9:	8b 45 14             	mov    0x14(%ebp),%eax
f0103fec:	8b 00                	mov    (%eax),%eax
f0103fee:	83 ec 04             	sub    $0x4,%esp
f0103ff1:	68 00 10 00 00       	push   $0x1000
f0103ff6:	6a 00                	push   $0x0
f0103ff8:	50                   	push   %eax
f0103ff9:	e8 2e e7 01 00       	call   f012272c <memset>
f0103ffe:	83 c4 10             	add    $0x10,%esp
f0104001:	eb 10                	jmp    f0104013 <get_disk_page_table+0x122>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f0104003:	8b 45 14             	mov    0x14(%ebp),%eax
f0104006:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f010400c:	b8 00 00 00 00       	mov    $0x0,%eax
f0104011:	eb 05                	jmp    f0104018 <get_disk_page_table+0x127>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f0104013:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104018:	c9                   	leave  
f0104019:	c3                   	ret    

f010401a <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f010401a:	55                   	push   %ebp
f010401b:	89 e5                	mov    %esp,%ebp
f010401d:	83 ec 28             	sub    $0x28,%esp
f0104020:	8b 45 10             	mov    0x10(%ebp),%eax
f0104023:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f0104026:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f010402a:	74 72                	je     f010409e <pf_add_empty_env_page+0x84>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f010402c:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0104033:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104036:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010403b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010403e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104041:	ba 00 00 00 00       	mov    $0x0,%edx
f0104046:	f7 75 f4             	divl   -0xc(%ebp)
f0104049:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010404c:	29 d0                	sub    %edx,%eax
f010404e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104051:	73 2f                	jae    f0104082 <pf_add_empty_env_page+0x68>
f0104053:	8b 45 08             	mov    0x8(%ebp),%eax
f0104056:	8b 50 6c             	mov    0x6c(%eax),%edx
f0104059:	b8 00 00 00 00       	mov    $0x0,%eax
f010405e:	29 d0                	sub    %edx,%eax
f0104060:	c1 e0 0c             	shl    $0xc,%eax
f0104063:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0104068:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010406b:	76 15                	jbe    f0104082 <pf_add_empty_env_page+0x68>
			ptr_env->nNewPageAdded++ ;
f010406d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104070:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f0104076:	8d 50 01             	lea    0x1(%eax),%edx
f0104079:	8b 45 08             	mov    0x8(%ebp),%eax
f010407c:	89 90 64 da 01 00    	mov    %edx,0x1da64(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f0104082:	a1 54 29 5a f0       	mov    0xf05a2954,%eax
f0104087:	83 ec 04             	sub    $0x4,%esp
f010408a:	50                   	push   %eax
f010408b:	ff 75 0c             	pushl  0xc(%ebp)
f010408e:	ff 75 08             	pushl  0x8(%ebp)
f0104091:	e8 b2 00 00 00       	call   f0104148 <pf_add_env_page>
f0104096:	83 c4 10             	add    $0x10,%esp
f0104099:	e9 a8 00 00 00       	jmp    f0104146 <pf_add_empty_env_page+0x12c>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010409e:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01040a5:	76 19                	jbe    f01040c0 <pf_add_empty_env_page+0xa6>
f01040a7:	68 88 69 12 f0       	push   $0xf0126988
f01040ac:	68 ae 69 12 f0       	push   $0xf01269ae
f01040b1:	68 dc 00 00 00       	push   $0xdc
f01040b6:	68 f5 68 12 f0       	push   $0xf01268f5
f01040bb:	e8 5a c2 ff ff       	call   f010031a <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f01040c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01040c3:	83 c0 74             	add    $0x74,%eax
f01040c6:	83 ec 08             	sub    $0x8,%esp
f01040c9:	50                   	push   %eax
f01040ca:	ff 75 08             	pushl  0x8(%ebp)
f01040cd:	e8 ce 05 00 00       	call   f01046a0 <get_disk_page_directory>
f01040d2:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01040d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01040d8:	8b 40 74             	mov    0x74(%eax),%eax
f01040db:	8d 55 ec             	lea    -0x14(%ebp),%edx
f01040de:	52                   	push   %edx
f01040df:	6a 01                	push   $0x1
f01040e1:	ff 75 0c             	pushl  0xc(%ebp)
f01040e4:	50                   	push   %eax
f01040e5:	e8 07 fe ff ff       	call   f0103ef1 <get_disk_page_table>
f01040ea:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01040ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01040f0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01040f3:	c1 ea 0c             	shr    $0xc,%edx
f01040f6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01040fc:	c1 e2 02             	shl    $0x2,%edx
f01040ff:	01 d0                	add    %edx,%eax
f0104101:	8b 00                	mov    (%eax),%eax
f0104103:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f0104106:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104109:	85 c0                	test   %eax,%eax
f010410b:	75 34                	jne    f0104141 <pf_add_empty_env_page+0x127>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010410d:	83 ec 0c             	sub    $0xc,%esp
f0104110:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0104113:	50                   	push   %eax
f0104114:	e8 e9 fb ff ff       	call   f0103d02 <allocate_disk_frame>
f0104119:	83 c4 10             	add    $0x10,%esp
f010411c:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010411f:	75 07                	jne    f0104128 <pf_add_empty_env_page+0x10e>
f0104121:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0104126:	eb 1e                	jmp    f0104146 <pf_add_empty_env_page+0x12c>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0104128:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010412b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010412e:	c1 ea 0c             	shr    $0xc,%edx
f0104131:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104137:	c1 e2 02             	shl    $0x2,%edx
f010413a:	01 c2                	add    %eax,%edx
f010413c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010413f:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f0104141:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0104146:	c9                   	leave  
f0104147:	c3                   	ret    

f0104148 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0104148:	55                   	push   %ebp
f0104149:	89 e5                	mov    %esp,%ebp
f010414b:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010414e:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0104155:	76 19                	jbe    f0104170 <pf_add_env_page+0x28>
f0104157:	68 88 69 12 f0       	push   $0xf0126988
f010415c:	68 ae 69 12 f0       	push   $0xf01269ae
f0104161:	68 f1 00 00 00       	push   $0xf1
f0104166:	68 f5 68 12 f0       	push   $0xf01268f5
f010416b:	e8 aa c1 ff ff       	call   f010031a <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0104170:	8b 45 08             	mov    0x8(%ebp),%eax
f0104173:	83 c0 74             	add    $0x74,%eax
f0104176:	83 ec 08             	sub    $0x8,%esp
f0104179:	50                   	push   %eax
f010417a:	ff 75 08             	pushl  0x8(%ebp)
f010417d:	e8 1e 05 00 00       	call   f01046a0 <get_disk_page_directory>
f0104182:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0104185:	8b 45 08             	mov    0x8(%ebp),%eax
f0104188:	8b 40 74             	mov    0x74(%eax),%eax
f010418b:	8d 55 f0             	lea    -0x10(%ebp),%edx
f010418e:	52                   	push   %edx
f010418f:	6a 01                	push   $0x1
f0104191:	ff 75 0c             	pushl  0xc(%ebp)
f0104194:	50                   	push   %eax
f0104195:	e8 57 fd ff ff       	call   f0103ef1 <get_disk_page_table>
f010419a:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010419d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01041a0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01041a3:	c1 ea 0c             	shr    $0xc,%edx
f01041a6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01041ac:	c1 e2 02             	shl    $0x2,%edx
f01041af:	01 d0                	add    %edx,%eax
f01041b1:	8b 00                	mov    (%eax),%eax
f01041b3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f01041b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01041b9:	85 c0                	test   %eax,%eax
f01041bb:	75 34                	jne    f01041f1 <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01041bd:	83 ec 0c             	sub    $0xc,%esp
f01041c0:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01041c3:	50                   	push   %eax
f01041c4:	e8 39 fb ff ff       	call   f0103d02 <allocate_disk_frame>
f01041c9:	83 c4 10             	add    $0x10,%esp
f01041cc:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01041cf:	75 07                	jne    f01041d8 <pf_add_env_page+0x90>
f01041d1:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01041d6:	eb 31                	jmp    f0104209 <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01041d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01041db:	8b 55 0c             	mov    0xc(%ebp),%edx
f01041de:	c1 ea 0c             	shr    $0xc,%edx
f01041e1:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01041e7:	c1 e2 02             	shl    $0x2,%edx
f01041ea:	01 c2                	add    %eax,%edx
f01041ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01041ef:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f01041f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01041f4:	83 ec 08             	sub    $0x8,%esp
f01041f7:	ff 75 10             	pushl  0x10(%ebp)
f01041fa:	50                   	push   %eax
f01041fb:	e8 55 f9 ff ff       	call   f0103b55 <write_disk_page>
f0104200:	83 c4 10             	add    $0x10,%esp
f0104203:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f0104206:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104209:	c9                   	leave  
f010420a:	c3                   	ret    

f010420b <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f010420b:	55                   	push   %ebp
f010420c:	89 e5                	mov    %esp,%ebp
f010420e:	83 ec 28             	sub    $0x28,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f0104211:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0104218:	76 19                	jbe    f0104233 <pf_update_env_page+0x28>
f010421a:	68 88 69 12 f0       	push   $0xf0126988
f010421f:	68 ae 69 12 f0       	push   $0xf01269ae
f0104224:	68 13 01 00 00       	push   $0x113
f0104229:	68 f5 68 12 f0       	push   $0xf01268f5
f010422e:	e8 e7 c0 ff ff       	call   f010031a <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0104233:	8b 45 08             	mov    0x8(%ebp),%eax
f0104236:	83 c0 74             	add    $0x74,%eax
f0104239:	83 ec 08             	sub    $0x8,%esp
f010423c:	50                   	push   %eax
f010423d:	ff 75 08             	pushl  0x8(%ebp)
f0104240:	e8 5b 04 00 00       	call   f01046a0 <get_disk_page_directory>
f0104245:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0104248:	8b 45 08             	mov    0x8(%ebp),%eax
f010424b:	8b 40 74             	mov    0x74(%eax),%eax
f010424e:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0104251:	52                   	push   %edx
f0104252:	6a 00                	push   $0x0
f0104254:	ff 75 0c             	pushl  0xc(%ebp)
f0104257:	50                   	push   %eax
f0104258:	e8 94 fc ff ff       	call   f0103ef1 <get_disk_page_table>
f010425d:	83 c4 10             	add    $0x10,%esp

	//2022
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f0104260:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0104263:	85 c0                	test   %eax,%eax
f0104265:	74 29                	je     f0104290 <pf_update_env_page+0x85>
f0104267:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010426a:	85 c0                	test   %eax,%eax
f010426c:	0f 84 c5 00 00 00    	je     f0104337 <pf_update_env_page+0x12c>
f0104272:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0104275:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104278:	c1 ea 0c             	shr    $0xc,%edx
f010427b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104281:	c1 e2 02             	shl    $0x2,%edx
f0104284:	01 d0                	add    %edx,%eax
f0104286:	8b 00                	mov    (%eax),%eax
f0104288:	85 c0                	test   %eax,%eax
f010428a:	0f 85 a7 00 00 00    	jne    f0104337 <pf_update_env_page+0x12c>
	{

		uint32 VA = (uint32)virtual_address ;
f0104290:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104293:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0104296:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104299:	85 c0                	test   %eax,%eax
f010429b:	79 09                	jns    f01042a6 <pf_update_env_page+0x9b>
f010429d:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f01042a4:	76 30                	jbe    f01042d6 <pf_update_env_page+0xcb>
f01042a6:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01042ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042b0:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f01042b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01042b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01042bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01042c0:	f7 75 f0             	divl   -0x10(%ebp)
f01042c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01042c6:	29 d0                	sub    %edx,%eax
f01042c8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01042cb:	77 53                	ja     f0104320 <pf_update_env_page+0x115>
f01042cd:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f01042d4:	77 4a                	ja     f0104320 <pf_update_env_page+0x115>
			//				return ret ;
			//			}
			//			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			//			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f01042d6:	83 ec 04             	sub    $0x4,%esp
f01042d9:	6a 00                	push   $0x0
f01042db:	ff 75 f4             	pushl  -0xc(%ebp)
f01042de:	ff 75 08             	pushl  0x8(%ebp)
f01042e1:	e8 34 fd ff ff       	call   f010401a <pf_add_empty_env_page>
f01042e6:	83 c4 10             	add    $0x10,%esp
f01042e9:	89 45 e8             	mov    %eax,-0x18(%ebp)

				if (ret == E_NO_PAGE_FILE_SPACE)
f01042ec:	83 7d e8 f8          	cmpl   $0xfffffff8,-0x18(%ebp)
f01042f0:	75 17                	jne    f0104309 <pf_update_env_page+0xfe>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f01042f2:	83 ec 04             	sub    $0x4,%esp
f01042f5:	68 c4 69 12 f0       	push   $0xf01269c4
f01042fa:	68 43 01 00 00       	push   $0x143
f01042ff:	68 f5 68 12 f0       	push   $0xf01268f5
f0104304:	e8 11 c0 ff ff       	call   f010031a <_panic>
				}
				//cprintf("[%s] adding EMPTY page with content\n",ptr_env->prog_name);

				ptr_env->nNewPageAdded++ ;
f0104309:	8b 45 08             	mov    0x8(%ebp),%eax
f010430c:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f0104312:	8d 50 01             	lea    0x1(%eax),%edx
f0104315:	8b 45 08             	mov    0x8(%ebp),%eax
f0104318:	89 90 64 da 01 00    	mov    %edx,0x1da64(%eax)
f010431e:	eb 17                	jmp    f0104337 <pf_update_env_page+0x12c>
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f0104320:	83 ec 04             	sub    $0x4,%esp
f0104323:	68 10 6a 12 f0       	push   $0xf0126a10
f0104328:	68 4c 01 00 00       	push   $0x14c
f010432d:	68 f5 68 12 f0       	push   $0xf01268f5
f0104332:	e8 e3 bf ff ff       	call   f010031a <_panic>
		}
	}
	//2022 END========================================


	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0104337:	8b 45 08             	mov    0x8(%ebp),%eax
f010433a:	8b 40 74             	mov    0x74(%eax),%eax
f010433d:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0104340:	52                   	push   %edx
f0104341:	6a 00                	push   $0x0
f0104343:	ff 75 0c             	pushl  0xc(%ebp)
f0104346:	50                   	push   %eax
f0104347:	e8 a5 fb ff ff       	call   f0103ef1 <get_disk_page_table>
f010434c:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010434f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0104352:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104355:	c1 ea 0c             	shr    $0xc,%edx
f0104358:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010435e:	c1 e2 02             	shl    $0x2,%edx
f0104361:	01 d0                	add    %edx,%eax
f0104363:	8b 00                	mov    (%eax),%eax
f0104365:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//cprintf("[%s] updating page\n",ptr_env->prog_name);
	}
#else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
f0104368:	83 ec 0c             	sub    $0xc,%esp
f010436b:	ff 75 10             	pushl  0x10(%ebp)
f010436e:	e8 5a f7 ff ff       	call   f0103acd <to_physical_address>
f0104373:	83 c4 10             	add    $0x10,%esp
f0104376:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0104379:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010437c:	c1 e8 0c             	shr    $0xc,%eax
f010437f:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0104382:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f0104387:	39 45 dc             	cmp    %eax,-0x24(%ebp)
f010438a:	72 17                	jb     f01043a3 <pf_update_env_page+0x198>
f010438c:	ff 75 e0             	pushl  -0x20(%ebp)
f010438f:	68 58 69 12 f0       	push   $0xf0126958
f0104394:	68 68 01 00 00       	push   $0x168
f0104399:	68 f5 68 12 f0       	push   $0xf01268f5
f010439e:	e8 77 bf ff ff       	call   f010031a <_panic>
f01043a3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01043a6:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01043ab:	83 ec 08             	sub    $0x8,%esp
f01043ae:	50                   	push   %eax
f01043af:	ff 75 e4             	pushl  -0x1c(%ebp)
f01043b2:	e8 9e f7 ff ff       	call   f0103b55 <write_disk_page>
f01043b7:	83 c4 10             	add    $0x10,%esp
f01043ba:	89 45 e8             	mov    %eax,-0x18(%ebp)
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f01043bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01043c0:	8b 80 60 da 01 00    	mov    0x1da60(%eax),%eax
f01043c6:	8d 50 01             	lea    0x1(%eax),%edx
f01043c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01043cc:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)
	//======================

	return ret;
f01043d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f01043d5:	c9                   	leave  
f01043d6:	c3                   	ret    

f01043d7 <pf_read_env_page>:

	return write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(page_modified_frame_info)));
}
 */
int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f01043d7:	55                   	push   %ebp
f01043d8:	89 e5                	mov    %esp,%ebp
f01043da:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f01043dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01043e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01043e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01043e6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01043eb:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01043ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01043f1:	8b 40 74             	mov    0x74(%eax),%eax
f01043f4:	85 c0                	test   %eax,%eax
f01043f6:	75 0a                	jne    f0104402 <pf_read_env_page+0x2b>
f01043f8:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f01043fd:	e9 90 00 00 00       	jmp    f0104492 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0104402:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104405:	8b 45 08             	mov    0x8(%ebp),%eax
f0104408:	8b 40 74             	mov    0x74(%eax),%eax
f010440b:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f010440e:	51                   	push   %ecx
f010440f:	6a 00                	push   $0x0
f0104411:	52                   	push   %edx
f0104412:	50                   	push   %eax
f0104413:	e8 d9 fa ff ff       	call   f0103ef1 <get_disk_page_table>
f0104418:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010441b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010441e:	85 c0                	test   %eax,%eax
f0104420:	75 07                	jne    f0104429 <pf_read_env_page+0x52>
f0104422:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0104427:	eb 69                	jmp    f0104492 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0104429:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010442c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010442f:	c1 ea 0c             	shr    $0xc,%edx
f0104432:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104438:	c1 e2 02             	shl    $0x2,%edx
f010443b:	01 d0                	add    %edx,%eax
f010443d:	8b 00                	mov    (%eax),%eax
f010443f:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0104442:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104446:	75 07                	jne    f010444f <pf_read_env_page+0x78>
f0104448:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010444d:	eb 43                	jmp    f0104492 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f010444f:	83 ec 08             	sub    $0x8,%esp
f0104452:	ff 75 0c             	pushl  0xc(%ebp)
f0104455:	ff 75 f0             	pushl  -0x10(%ebp)
f0104458:	e8 c9 f6 ff ff       	call   f0103b26 <read_disk_page>
f010445d:	83 c4 10             	add    $0x10,%esp
f0104460:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0104463:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104466:	8b 45 08             	mov    0x8(%ebp),%eax
f0104469:	8b 40 64             	mov    0x64(%eax),%eax
f010446c:	6a 40                	push   $0x40
f010446e:	6a 00                	push   $0x0
f0104470:	52                   	push   %edx
f0104471:	50                   	push   %eax
f0104472:	e8 b1 46 00 00       	call   f0108b28 <pt_set_page_permissions>
f0104477:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f010447a:	8b 45 08             	mov    0x8(%ebp),%eax
f010447d:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0104483:	8d 50 01             	lea    0x1(%eax),%edx
f0104486:	8b 45 08             	mov    0x8(%ebp),%eax
f0104489:	89 90 5c da 01 00    	mov    %edx,0x1da5c(%eax)
	//======================

	return disk_read_error;
f010448f:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0104492:	c9                   	leave  
f0104493:	c3                   	ret    

f0104494 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0104494:	55                   	push   %ebp
f0104495:	89 e5                	mov    %esp,%ebp
f0104497:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f010449a:	8b 45 08             	mov    0x8(%ebp),%eax
f010449d:	8b 40 74             	mov    0x74(%eax),%eax
f01044a0:	85 c0                	test   %eax,%eax
f01044a2:	74 62                	je     f0104506 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01044a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01044a7:	8b 40 74             	mov    0x74(%eax),%eax
f01044aa:	8d 55 f0             	lea    -0x10(%ebp),%edx
f01044ad:	52                   	push   %edx
f01044ae:	6a 00                	push   $0x0
f01044b0:	ff 75 0c             	pushl  0xc(%ebp)
f01044b3:	50                   	push   %eax
f01044b4:	e8 38 fa ff ff       	call   f0103ef1 <get_disk_page_table>
f01044b9:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f01044bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01044bf:	85 c0                	test   %eax,%eax
f01044c1:	74 46                	je     f0104509 <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01044c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01044c6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044c9:	c1 ea 0c             	shr    $0xc,%edx
f01044cc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01044d2:	c1 e2 02             	shl    $0x2,%edx
f01044d5:	01 d0                	add    %edx,%eax
f01044d7:	8b 00                	mov    (%eax),%eax
f01044d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f01044dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01044df:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044e2:	c1 ea 0c             	shr    $0xc,%edx
f01044e5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01044eb:	c1 e2 02             	shl    $0x2,%edx
f01044ee:	01 d0                	add    %edx,%eax
f01044f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f01044f6:	83 ec 0c             	sub    $0xc,%esp
f01044f9:	ff 75 f4             	pushl  -0xc(%ebp)
f01044fc:	e8 ef f8 ff ff       	call   f0103df0 <free_disk_frame>
f0104501:	83 c4 10             	add    $0x10,%esp
f0104504:	eb 04                	jmp    f010450a <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0104506:	90                   	nop
f0104507:	eb 01                	jmp    f010450a <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0104509:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f010450a:	c9                   	leave  
f010450b:	c3                   	ret    

f010450c <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f010450c:	55                   	push   %ebp
f010450d:	89 e5                	mov    %esp,%ebp
f010450f:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104512:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104519:	e9 ee 00 00 00       	jmp    f010460c <pf_free_env+0x100>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f010451e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104521:	8b 40 74             	mov    0x74(%eax),%eax
f0104524:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104527:	c1 e2 02             	shl    $0x2,%edx
f010452a:	01 d0                	add    %edx,%eax
f010452c:	8b 00                	mov    (%eax),%eax
f010452e:	83 e0 01             	and    $0x1,%eax
f0104531:	85 c0                	test   %eax,%eax
f0104533:	0f 84 cf 00 00 00    	je     f0104608 <pf_free_env+0xfc>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0104539:	8b 45 08             	mov    0x8(%ebp),%eax
f010453c:	8b 40 74             	mov    0x74(%eax),%eax
f010453f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104542:	c1 e2 02             	shl    $0x2,%edx
f0104545:	01 d0                	add    %edx,%eax
f0104547:	8b 00                	mov    (%eax),%eax
f0104549:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010454e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f0104551:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104554:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0104557:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010455a:	c1 e8 0c             	shr    $0xc,%eax
f010455d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104560:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f0104565:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0104568:	72 17                	jb     f0104581 <pf_free_env+0x75>
f010456a:	ff 75 e8             	pushl  -0x18(%ebp)
f010456d:	68 58 69 12 f0       	push   $0xf0126958
f0104572:	68 c8 01 00 00       	push   $0x1c8
f0104577:	68 f5 68 12 f0       	push   $0xf01268f5
f010457c:	e8 99 bd ff ff       	call   f010031a <_panic>
f0104581:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104584:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104589:	89 45 e0             	mov    %eax,-0x20(%ebp)
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f010458c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104593:	eb 3a                	jmp    f01045cf <pf_free_env+0xc3>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f0104595:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104598:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010459f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01045a2:	01 d0                	add    %edx,%eax
f01045a4:	8b 00                	mov    (%eax),%eax
f01045a6:	89 45 dc             	mov    %eax,-0x24(%ebp)
			pt[pteno] = 0;
f01045a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01045ac:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01045b3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01045b6:	01 d0                	add    %edx,%eax
f01045b8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f01045be:	83 ec 0c             	sub    $0xc,%esp
f01045c1:	ff 75 dc             	pushl  -0x24(%ebp)
f01045c4:	e8 27 f8 ff ff       	call   f0103df0 <free_disk_frame>
f01045c9:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f01045cc:	ff 45 f0             	incl   -0x10(%ebp)
f01045cf:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f01045d6:	76 bd                	jbe    f0104595 <pf_free_env+0x89>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f01045d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01045db:	8b 40 74             	mov    0x74(%eax),%eax
f01045de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045e1:	c1 e2 02             	shl    $0x2,%edx
f01045e4:	01 d0                	add    %edx,%eax
f01045e6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		{
			kfree(pt);
		}
#else
		{
			decrement_references(to_frame_info(pa));
f01045ec:	83 ec 0c             	sub    $0xc,%esp
f01045ef:	ff 75 ec             	pushl  -0x14(%ebp)
f01045f2:	e8 e9 f4 ff ff       	call   f0103ae0 <to_frame_info>
f01045f7:	83 c4 10             	add    $0x10,%esp
f01045fa:	83 ec 0c             	sub    $0xc,%esp
f01045fd:	50                   	push   %eax
f01045fe:	e8 da 3d 00 00       	call   f01083dd <decrement_references>
f0104603:	83 c4 10             	add    $0x10,%esp
f0104606:	eb 01                	jmp    f0104609 <pf_free_env+0xfd>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0104608:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104609:	ff 45 f4             	incl   -0xc(%ebp)
f010460c:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0104613:	0f 86 05 ff ff ff    	jbe    f010451e <pf_free_env+0x12>
	{
		kfree(ptr_env->disk_env_pgdir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
f0104619:	8b 45 08             	mov    0x8(%ebp),%eax
f010461c:	8b 40 78             	mov    0x78(%eax),%eax
f010461f:	83 ec 0c             	sub    $0xc,%esp
f0104622:	50                   	push   %eax
f0104623:	e8 b8 f4 ff ff       	call   f0103ae0 <to_frame_info>
f0104628:	83 c4 10             	add    $0x10,%esp
f010462b:	83 ec 0c             	sub    $0xc,%esp
f010462e:	50                   	push   %eax
f010462f:	e8 a9 3d 00 00       	call   f01083dd <decrement_references>
f0104634:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0104637:	8b 45 08             	mov    0x8(%ebp),%eax
f010463a:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0104641:	8b 45 08             	mov    0x8(%ebp),%eax
f0104644:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f010464b:	8b 45 08             	mov    0x8(%ebp),%eax
f010464e:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104651:	85 c0                	test   %eax,%eax
f0104653:	74 48                	je     f010469d <pf_free_env+0x191>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0104655:	83 ec 0c             	sub    $0xc,%esp
f0104658:	ff 75 08             	pushl  0x8(%ebp)
f010465b:	e8 dd 03 00 00       	call   f0104a3d <__pf_remove_env_all_tables>
f0104660:	83 c4 10             	add    $0x10,%esp
	{
		kfree(ptr_env->disk_env_tabledir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
f0104663:	8b 45 08             	mov    0x8(%ebp),%eax
f0104666:	8b 80 80 00 00 00    	mov    0x80(%eax),%eax
f010466c:	83 ec 0c             	sub    $0xc,%esp
f010466f:	50                   	push   %eax
f0104670:	e8 6b f4 ff ff       	call   f0103ae0 <to_frame_info>
f0104675:	83 c4 10             	add    $0x10,%esp
f0104678:	83 ec 0c             	sub    $0xc,%esp
f010467b:	50                   	push   %eax
f010467c:	e8 5c 3d 00 00       	call   f01083dd <decrement_references>
f0104681:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0104684:	8b 45 08             	mov    0x8(%ebp),%eax
f0104687:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f010468e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104691:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
f0104698:	00 00 00 
f010469b:	eb 01                	jmp    f010469e <pf_free_env+0x192>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f010469d:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f010469e:	c9                   	leave  
f010469f:	c3                   	ret    

f01046a0 <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f01046a0:	55                   	push   %ebp
f01046a1:	89 e5                	mov    %esp,%ebp
f01046a3:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f01046a6:	8b 45 08             	mov    0x8(%ebp),%eax
f01046a9:	8b 50 74             	mov    0x74(%eax),%edx
f01046ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f01046af:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f01046b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01046b4:	8b 00                	mov    (%eax),%eax
f01046b6:	85 c0                	test   %eax,%eax
f01046b8:	0f 85 aa 00 00 00    	jne    f0104768 <get_disk_page_directory+0xc8>
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f01046be:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f01046c5:	83 ec 0c             	sub    $0xc,%esp
f01046c8:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01046cb:	50                   	push   %eax
f01046cc:	e8 ff 3a 00 00       	call   f01081d0 <allocate_frame>
f01046d1:	83 c4 10             	add    $0x10,%esp
f01046d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01046d7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01046db:	79 08                	jns    f01046e5 <get_disk_page_directory+0x45>
				return r;
f01046dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01046e0:	e9 88 00 00 00       	jmp    f010476d <get_disk_page_directory+0xcd>
			p->references = 1;
f01046e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01046e8:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f01046ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01046f1:	83 ec 0c             	sub    $0xc,%esp
f01046f4:	50                   	push   %eax
f01046f5:	e8 d3 f3 ff ff       	call   f0103acd <to_physical_address>
f01046fa:	83 c4 10             	add    $0x10,%esp
f01046fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104700:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104703:	c1 e8 0c             	shr    $0xc,%eax
f0104706:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104709:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f010470e:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0104711:	72 17                	jb     f010472a <get_disk_page_directory+0x8a>
f0104713:	ff 75 f0             	pushl  -0x10(%ebp)
f0104716:	68 58 69 12 f0       	push   $0xf0126958
f010471b:	68 20 02 00 00       	push   $0x220
f0104720:	68 f5 68 12 f0       	push   $0xf01268f5
f0104725:	e8 f0 bb ff ff       	call   f010031a <_panic>
f010472a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010472d:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104732:	89 c2                	mov    %eax,%edx
f0104734:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104737:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
f0104739:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010473c:	83 ec 0c             	sub    $0xc,%esp
f010473f:	50                   	push   %eax
f0104740:	e8 88 f3 ff ff       	call   f0103acd <to_physical_address>
f0104745:	83 c4 10             	add    $0x10,%esp
f0104748:	89 c2                	mov    %eax,%edx
f010474a:	8b 45 08             	mov    0x8(%ebp),%eax
f010474d:	89 50 78             	mov    %edx,0x78(%eax)
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0104750:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104753:	8b 00                	mov    (%eax),%eax
f0104755:	83 ec 04             	sub    $0x4,%esp
f0104758:	68 00 10 00 00       	push   $0x1000
f010475d:	6a 00                	push   $0x0
f010475f:	50                   	push   %eax
f0104760:	e8 c7 df 01 00       	call   f012272c <memset>
f0104765:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0104768:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010476d:	c9                   	leave  
f010476e:	c3                   	ret    

f010476f <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f010476f:	55                   	push   %ebp
f0104770:	89 e5                	mov    %esp,%ebp
f0104772:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0104775:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010477c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104783:	e9 a6 00 00 00       	jmp    f010482e <pf_calculate_allocated_pages+0xbf>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0104788:	8b 45 08             	mov    0x8(%ebp),%eax
f010478b:	8b 40 74             	mov    0x74(%eax),%eax
f010478e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104791:	c1 e2 02             	shl    $0x2,%edx
f0104794:	01 d0                	add    %edx,%eax
f0104796:	8b 00                	mov    (%eax),%eax
f0104798:	83 e0 01             	and    $0x1,%eax
f010479b:	85 c0                	test   %eax,%eax
f010479d:	0f 84 87 00 00 00    	je     f010482a <pf_calculate_allocated_pages+0xbb>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f01047a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01047a6:	8b 40 74             	mov    0x74(%eax),%eax
f01047a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01047ac:	c1 e2 02             	shl    $0x2,%edx
f01047af:	01 d0                	add    %edx,%eax
f01047b1:	8b 00                	mov    (%eax),%eax
f01047b3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01047b8:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f01047bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01047be:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01047c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01047c4:	c1 e8 0c             	shr    $0xc,%eax
f01047c7:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01047ca:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f01047cf:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f01047d2:	72 17                	jb     f01047eb <pf_calculate_allocated_pages+0x7c>
f01047d4:	ff 75 e4             	pushl  -0x1c(%ebp)
f01047d7:	68 58 69 12 f0       	push   $0xf0126958
f01047dc:	68 40 02 00 00       	push   $0x240
f01047e1:	68 f5 68 12 f0       	push   $0xf01268f5
f01047e6:	e8 2f bb ff ff       	call   f010031a <_panic>
f01047eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01047ee:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01047f3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f01047f6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01047fd:	eb 20                	jmp    f010481f <pf_calculate_allocated_pages+0xb0>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f01047ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104802:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104809:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010480c:	01 d0                	add    %edx,%eax
f010480e:	8b 00                	mov    (%eax),%eax
f0104810:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if(dfn != 0)
f0104813:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0104817:	74 03                	je     f010481c <pf_calculate_allocated_pages+0xad>
				counter ++;
f0104819:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010481c:	ff 45 ec             	incl   -0x14(%ebp)
f010481f:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0104826:	76 d7                	jbe    f01047ff <pf_calculate_allocated_pages+0x90>
f0104828:	eb 01                	jmp    f010482b <pf_calculate_allocated_pages+0xbc>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f010482a:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010482b:	ff 45 f4             	incl   -0xc(%ebp)
f010482e:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0104835:	0f 86 4d ff ff ff    	jbe    f0104788 <pf_calculate_allocated_pages+0x19>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f010483b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010483e:	c9                   	leave  
f010483f:	c3                   	ret    

f0104840 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0104840:	55                   	push   %ebp
f0104841:	89 e5                	mov    %esp,%ebp
f0104843:	83 ec 18             	sub    $0x18,%esp
	uint32 totalFreeDiskFrames ;
	acquire_spinlock(&DiskFrameLists.dfllock);
f0104846:	83 ec 0c             	sub    $0xc,%esp
f0104849:	68 90 2a 5a f0       	push   $0xf05a2a90
f010484e:	e8 ce a2 00 00       	call   f010eb21 <acquire_spinlock>
f0104853:	83 c4 10             	add    $0x10,%esp
	{
		/*2023: UPDATE beased on suggestion from T112 2023.Term1*/
		totalFreeDiskFrames = LIST_SIZE(&DiskFrameLists.disk_free_frame_list);
f0104856:	a1 8c 2a 5a f0       	mov    0xf05a2a8c,%eax
f010485b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		//	LIST_FOREACH(ptr, &disk_free_frame_list)
		//	{
		//		totalFreeDiskFrames++ ;
		//	}
	}
	release_spinlock(&DiskFrameLists.dfllock);
f010485e:	83 ec 0c             	sub    $0xc,%esp
f0104861:	68 90 2a 5a f0       	push   $0xf05a2a90
f0104866:	e8 3d a3 00 00       	call   f010eba8 <release_spinlock>
f010486b:	83 c4 10             	add    $0x10,%esp
	return totalFreeDiskFrames;
f010486e:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f0104871:	c9                   	leave  
f0104872:	c3                   	ret    

f0104873 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0104873:	55                   	push   %ebp
f0104874:	89 e5                	mov    %esp,%ebp
f0104876:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0104879:	8b 45 08             	mov    0x8(%ebp),%eax
f010487c:	8b 50 7c             	mov    0x7c(%eax),%edx
f010487f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104882:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0104884:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104887:	8b 00                	mov    (%eax),%eax
f0104889:	85 c0                	test   %eax,%eax
f010488b:	0f 85 ad 00 00 00    	jne    f010493e <get_disk_table_directory+0xcb>
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f0104891:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0104898:	83 ec 0c             	sub    $0xc,%esp
f010489b:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010489e:	50                   	push   %eax
f010489f:	e8 2c 39 00 00       	call   f01081d0 <allocate_frame>
f01048a4:	83 c4 10             	add    $0x10,%esp
f01048a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01048aa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01048ae:	79 08                	jns    f01048b8 <get_disk_table_directory+0x45>
				return r;
f01048b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01048b3:	e9 8b 00 00 00       	jmp    f0104943 <get_disk_table_directory+0xd0>
			p->references = 1;
f01048b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01048bb:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f01048c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01048c4:	83 ec 0c             	sub    $0xc,%esp
f01048c7:	50                   	push   %eax
f01048c8:	e8 00 f2 ff ff       	call   f0103acd <to_physical_address>
f01048cd:	83 c4 10             	add    $0x10,%esp
f01048d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01048d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01048d6:	c1 e8 0c             	shr    $0xc,%eax
f01048d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01048dc:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f01048e1:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01048e4:	72 17                	jb     f01048fd <get_disk_table_directory+0x8a>
f01048e6:	ff 75 f0             	pushl  -0x10(%ebp)
f01048e9:	68 58 69 12 f0       	push   $0xf0126958
f01048ee:	68 83 02 00 00       	push   $0x283
f01048f3:	68 f5 68 12 f0       	push   $0xf01268f5
f01048f8:	e8 1d ba ff ff       	call   f010031a <_panic>
f01048fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104900:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104905:	89 c2                	mov    %eax,%edx
f0104907:	8b 45 0c             	mov    0xc(%ebp),%eax
f010490a:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
f010490c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010490f:	83 ec 0c             	sub    $0xc,%esp
f0104912:	50                   	push   %eax
f0104913:	e8 b5 f1 ff ff       	call   f0103acd <to_physical_address>
f0104918:	83 c4 10             	add    $0x10,%esp
f010491b:	89 c2                	mov    %eax,%edx
f010491d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104920:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0104926:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104929:	8b 00                	mov    (%eax),%eax
f010492b:	83 ec 04             	sub    $0x4,%esp
f010492e:	68 00 10 00 00       	push   $0x1000
f0104933:	6a 00                	push   $0x0
f0104935:	50                   	push   %eax
f0104936:	e8 f1 dd 01 00       	call   f012272c <memset>
f010493b:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f010493e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104943:	c9                   	leave  
f0104944:	c3                   	ret    

f0104945 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0104945:	55                   	push   %ebp
f0104946:	89 e5                	mov    %esp,%ebp
f0104948:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f010494b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0104952:	76 19                	jbe    f010496d <__pf_write_env_table+0x28>
f0104954:	68 88 69 12 f0       	push   $0xf0126988
f0104959:	68 ae 69 12 f0       	push   $0xf01269ae
f010495e:	68 91 02 00 00       	push   $0x291
f0104963:	68 f5 68 12 f0       	push   $0xf01268f5
f0104968:	e8 ad b9 ff ff       	call   f010031a <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f010496d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104970:	83 c0 7c             	add    $0x7c,%eax
f0104973:	83 ec 08             	sub    $0x8,%esp
f0104976:	50                   	push   %eax
f0104977:	ff 75 08             	pushl  0x8(%ebp)
f010497a:	e8 f4 fe ff ff       	call   f0104873 <get_disk_table_directory>
f010497f:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0104982:	8b 45 08             	mov    0x8(%ebp),%eax
f0104985:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104988:	8b 55 0c             	mov    0xc(%ebp),%edx
f010498b:	c1 ea 16             	shr    $0x16,%edx
f010498e:	c1 e2 02             	shl    $0x2,%edx
f0104991:	01 d0                	add    %edx,%eax
f0104993:	8b 00                	mov    (%eax),%eax
f0104995:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0104998:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010499b:	85 c0                	test   %eax,%eax
f010499d:	75 31                	jne    f01049d0 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010499f:	83 ec 0c             	sub    $0xc,%esp
f01049a2:	8d 45 f0             	lea    -0x10(%ebp),%eax
f01049a5:	50                   	push   %eax
f01049a6:	e8 57 f3 ff ff       	call   f0103d02 <allocate_disk_frame>
f01049ab:	83 c4 10             	add    $0x10,%esp
f01049ae:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01049b1:	75 07                	jne    f01049ba <__pf_write_env_table+0x75>
f01049b3:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01049b8:	eb 2e                	jmp    f01049e8 <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f01049ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01049bd:	8b 40 7c             	mov    0x7c(%eax),%eax
f01049c0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01049c3:	c1 ea 16             	shr    $0x16,%edx
f01049c6:	c1 e2 02             	shl    $0x2,%edx
f01049c9:	01 c2                	add    %eax,%edx
f01049cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01049ce:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f01049d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01049d3:	83 ec 08             	sub    $0x8,%esp
f01049d6:	ff 75 10             	pushl  0x10(%ebp)
f01049d9:	50                   	push   %eax
f01049da:	e8 76 f1 ff ff       	call   f0103b55 <write_disk_page>
f01049df:	83 c4 10             	add    $0x10,%esp
f01049e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f01049e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01049e8:	c9                   	leave  
f01049e9:	c3                   	ret    

f01049ea <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f01049ea:	55                   	push   %ebp
f01049eb:	89 e5                	mov    %esp,%ebp
f01049ed:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f01049f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01049f3:	8b 40 7c             	mov    0x7c(%eax),%eax
f01049f6:	85 c0                	test   %eax,%eax
f01049f8:	75 07                	jne    f0104a01 <__pf_read_env_table+0x17>
f01049fa:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f01049ff:	eb 3a                	jmp    f0104a3b <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0104a01:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a04:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104a07:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104a0a:	c1 ea 16             	shr    $0x16,%edx
f0104a0d:	c1 e2 02             	shl    $0x2,%edx
f0104a10:	01 d0                	add    %edx,%eax
f0104a12:	8b 00                	mov    (%eax),%eax
f0104a14:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0104a17:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104a1b:	75 07                	jne    f0104a24 <__pf_read_env_table+0x3a>
f0104a1d:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0104a22:	eb 17                	jmp    f0104a3b <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0104a24:	83 ec 08             	sub    $0x8,%esp
f0104a27:	ff 75 10             	pushl  0x10(%ebp)
f0104a2a:	ff 75 f4             	pushl  -0xc(%ebp)
f0104a2d:	e8 f4 f0 ff ff       	call   f0103b26 <read_disk_page>
f0104a32:	83 c4 10             	add    $0x10,%esp
f0104a35:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0104a38:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0104a3b:	c9                   	leave  
f0104a3c:	c3                   	ret    

f0104a3d <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0104a3d:	55                   	push   %ebp
f0104a3e:	89 e5                	mov    %esp,%ebp
f0104a40:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0104a43:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a46:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104a49:	85 c0                	test   %eax,%eax
f0104a4b:	74 4c                	je     f0104a99 <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104a4d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104a54:	eb 38                	jmp    f0104a8e <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0104a56:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a59:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104a5c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a5f:	c1 e2 02             	shl    $0x2,%edx
f0104a62:	01 d0                	add    %edx,%eax
f0104a64:	8b 00                	mov    (%eax),%eax
f0104a66:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0104a69:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a6c:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104a6f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a72:	c1 e2 02             	shl    $0x2,%edx
f0104a75:	01 d0                	add    %edx,%eax
f0104a77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0104a7d:	83 ec 0c             	sub    $0xc,%esp
f0104a80:	ff 75 f0             	pushl  -0x10(%ebp)
f0104a83:	e8 68 f3 ff ff       	call   f0103df0 <free_disk_frame>
f0104a88:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104a8b:	ff 45 f4             	incl   -0xc(%ebp)
f0104a8e:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0104a95:	76 bf                	jbe    f0104a56 <__pf_remove_env_all_tables+0x19>
f0104a97:	eb 01                	jmp    f0104a9a <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0104a99:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0104a9a:	c9                   	leave  
f0104a9b:	c3                   	ret    

f0104a9c <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0104a9c:	55                   	push   %ebp
f0104a9d:	89 e5                	mov    %esp,%ebp
f0104a9f:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0104aa2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104aa6:	75 10                	jne    f0104ab8 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0104aa8:	83 ec 0c             	sub    $0xc,%esp
f0104aab:	68 8c 6a 12 f0       	push   $0xf0126a8c
f0104ab0:	e8 b7 c4 ff ff       	call   f0100f6c <cprintf>
f0104ab5:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0104ab8:	8b 45 08             	mov    0x8(%ebp),%eax
f0104abb:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104abe:	85 c0                	test   %eax,%eax
f0104ac0:	74 3d                	je     f0104aff <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0104ac2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ac5:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104ac8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104acb:	c1 ea 16             	shr    $0x16,%edx
f0104ace:	c1 e2 02             	shl    $0x2,%edx
f0104ad1:	01 d0                	add    %edx,%eax
f0104ad3:	8b 00                	mov    (%eax),%eax
f0104ad5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0104ad8:	8b 45 08             	mov    0x8(%ebp),%eax
f0104adb:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104ade:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104ae1:	c1 ea 16             	shr    $0x16,%edx
f0104ae4:	c1 e2 02             	shl    $0x2,%edx
f0104ae7:	01 d0                	add    %edx,%eax
f0104ae9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104aef:	83 ec 0c             	sub    $0xc,%esp
f0104af2:	ff 75 f4             	pushl  -0xc(%ebp)
f0104af5:	e8 f6 f2 ff ff       	call   f0103df0 <free_disk_frame>
f0104afa:	83 c4 10             	add    $0x10,%esp
f0104afd:	eb 01                	jmp    f0104b00 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0104aff:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0104b00:	c9                   	leave  
f0104b01:	c3                   	ret    

f0104b02 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0104b02:	55                   	push   %ebp
f0104b03:	89 e5                	mov    %esp,%ebp
f0104b05:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0104b08:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0104b0f:	eb 1f                	jmp    f0104b30 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0104b11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b14:	83 ec 04             	sub    $0x4,%esp
f0104b17:	6a 08                	push   $0x8
f0104b19:	ff 75 08             	pushl  0x8(%ebp)
f0104b1c:	50                   	push   %eax
f0104b1d:	e8 44 e3 01 00       	call   f0122e66 <ide_write>
f0104b22:	83 c4 10             	add    $0x10,%esp
f0104b25:	85 c0                	test   %eax,%eax
f0104b27:	75 12                	jne    f0104b3b <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0104b29:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0104b30:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0104b37:	7e d8                	jle    f0104b11 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104b39:	eb 01                	jmp    f0104b3c <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0104b3b:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104b3c:	90                   	nop
f0104b3d:	c9                   	leave  
f0104b3e:	c3                   	ret    

f0104b3f <context_switch>:
# Switch stacks to new and pop previously-saved registers.

.globl context_switch
context_switch:
  # Save old callee-saved registers
  pushl %ebp
f0104b3f:	55                   	push   %ebp
  pushl %eax
f0104b40:	50                   	push   %eax
  pushl %ebx
f0104b41:	53                   	push   %ebx
  pushl %ecx
f0104b42:	51                   	push   %ecx
  pushl %edx
f0104b43:	52                   	push   %edx
  pushl %esi
f0104b44:	56                   	push   %esi
  pushl %edi
f0104b45:	57                   	push   %edi

  # Switch stacks
  movl 32(%esp), %eax
f0104b46:	8b 44 24 20          	mov    0x20(%esp),%eax
  movl 36(%esp), %edx
f0104b4a:	8b 54 24 24          	mov    0x24(%esp),%edx
  movl %esp, (%eax)
f0104b4e:	89 20                	mov    %esp,(%eax)
  movl %edx, %esp
f0104b50:	89 d4                	mov    %edx,%esp

  # Load new callee-saved registers
  popl %edi
f0104b52:	5f                   	pop    %edi
  popl %esi
f0104b53:	5e                   	pop    %esi
  popl %edx
f0104b54:	5a                   	pop    %edx
  popl %ecx
f0104b55:	59                   	pop    %ecx
  popl %ebx
f0104b56:	5b                   	pop    %ebx
  popl %eax
f0104b57:	58                   	pop    %eax
  popl %ebp
f0104b58:	5d                   	pop    %ebp
  ret
f0104b59:	c3                   	ret    

f0104b5a <mc146818_read>:
#include <kern/trap/trap.h>


unsigned
mc146818_read(unsigned reg)
{
f0104b5a:	55                   	push   %ebp
f0104b5b:	89 e5                	mov    %esp,%ebp
f0104b5d:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0104b60:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b63:	0f b6 c0             	movzbl %al,%eax
f0104b66:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0104b6d:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104b70:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104b73:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104b76:	ee                   	out    %al,(%dx)
f0104b77:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104b7e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104b81:	89 c2                	mov    %eax,%edx
f0104b83:	ec                   	in     (%dx),%al
f0104b84:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0104b87:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f0104b8a:	0f b6 c0             	movzbl %al,%eax
}
f0104b8d:	c9                   	leave  
f0104b8e:	c3                   	ret    

f0104b8f <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f0104b8f:	55                   	push   %ebp
f0104b90:	89 e5                	mov    %esp,%ebp
f0104b92:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0104b95:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b98:	0f b6 c0             	movzbl %al,%eax
f0104b9b:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0104ba2:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104ba5:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104ba8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104bab:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0104bac:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104baf:	0f b6 c0             	movzbl %al,%eax
f0104bb2:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0104bb9:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104bbc:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104bbf:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104bc2:	ee                   	out    %al,(%dx)
}
f0104bc3:	90                   	nop
f0104bc4:	c9                   	leave  
f0104bc5:	c3                   	ret    

f0104bc6 <kclock_init>:
 * PIT channel is reset, and the output immediately goes to its initial state
 * (which depends on the mode).
 */

void kclock_init()
{
f0104bc6:	55                   	push   %ebp
f0104bc7:	89 e5                	mov    %esp,%ebp
f0104bc9:	83 ec 08             	sub    $0x8,%esp
	ticks = 0;
f0104bcc:	c7 05 68 2a 5a f0 00 	movl   $0x0,0xf05a2a68
f0104bd3:	00 00 00 
f0104bd6:	c7 05 6c 2a 5a f0 00 	movl   $0x0,0xf05a2a6c
f0104bdd:	00 00 00 
	irq_install_handler(0, &clock_interrupt_handler);
f0104be0:	83 ec 08             	sub    $0x8,%esp
f0104be3:	68 b4 6b 10 f0       	push   $0xf0106bb4
f0104be8:	6a 00                	push   $0x0
f0104bea:	e8 a9 87 00 00       	call   f010d398 <irq_install_handler>
f0104bef:	83 c4 10             	add    $0x10,%esp
}
f0104bf2:	90                   	nop
f0104bf3:	c9                   	leave  
f0104bf4:	c3                   	ret    

f0104bf5 <kclock_start>:
void
kclock_start(uint8 quantum_in_ms)
{
f0104bf5:	55                   	push   %ebp
f0104bf6:	89 e5                	mov    %esp,%ebp
f0104bf8:	53                   	push   %ebx
f0104bf9:	83 ec 24             	sub    $0x24,%esp
f0104bfc:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bff:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104c02:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104c09:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104c0d:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104c10:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c13:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104c14:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104c18:	77 48                	ja     f0104c62 <kclock_start+0x6d>
f0104c1a:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104c21:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104c25:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104c28:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104c2b:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0104c2c:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104c30:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104c35:	99                   	cltd   
f0104c36:	f7 fb                	idiv   %ebx
f0104c38:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104c3e:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104c42:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104c47:	99                   	cltd   
f0104c48:	f7 fb                	idiv   %ebx
f0104c4a:	89 c3                	mov    %eax,%ebx
f0104c4c:	89 c8                	mov    %ecx,%eax
f0104c4e:	99                   	cltd   
f0104c4f:	f7 fb                	idiv   %ebx
f0104c51:	0f b7 c0             	movzwl %ax,%eax
f0104c54:	83 ec 0c             	sub    $0xc,%esp
f0104c57:	50                   	push   %eax
f0104c58:	e8 b3 01 00 00       	call   f0104e10 <kclock_write_cnt0_LSB_first>
f0104c5d:	83 c4 10             	add    $0x10,%esp
f0104c60:	eb 13                	jmp    f0104c75 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104c62:	6a 35                	push   $0x35
f0104c64:	68 b0 6a 12 f0       	push   $0xf0126ab0
f0104c69:	6a 41                	push   $0x41
f0104c6b:	68 0c 6b 12 f0       	push   $0xf0126b0c
f0104c70:	e8 a5 b6 ff ff       	call   f010031a <_panic>
//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup IRQ0 (timer interrupts) via 8259A\n");

	//irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
	irq_clear_mask(0);
f0104c75:	83 ec 0c             	sub    $0xc,%esp
f0104c78:	6a 00                	push   $0x0
f0104c7a:	e8 66 23 00 00       	call   f0106fe5 <irq_clear_mask>
f0104c7f:	83 c4 10             	add    $0x10,%esp

	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f0104c82:	90                   	nop
f0104c83:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104c86:	c9                   	leave  
f0104c87:	c3                   	ret    

f0104c88 <kclock_stop>:

void
kclock_stop(void)
{
f0104c88:	55                   	push   %ebp
f0104c89:	89 e5                	mov    %esp,%ebp
f0104c8b:	83 ec 18             	sub    $0x18,%esp
f0104c8e:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104c95:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104c99:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104c9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104c9f:	ee                   	out    %al,(%dx)
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}

	/*Mask the IRQ0 (Timer Interrupt)*/
	//irq_setmask_8259A(0xFFFF);
	irq_set_mask(0);
f0104ca0:	83 ec 0c             	sub    $0xc,%esp
f0104ca3:	6a 00                	push   $0x0
f0104ca5:	e8 c6 22 00 00       	call   f0106f70 <irq_set_mask>
f0104caa:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f0104cad:	90                   	nop
f0104cae:	c9                   	leave  
f0104caf:	c3                   	ret    

f0104cb0 <kclock_resume>:

void
kclock_resume(void)
{
f0104cb0:	55                   	push   %ebp
f0104cb1:	89 e5                	mov    %esp,%ebp
f0104cb3:	83 ec 18             	sub    $0x18,%esp
	/*2024: changed to latch
	 * the current count is copied into an internal "latch register" which can then be read via the data port corresponding to the selected channel (I/O ports 0x40 to 0x42). The value kept in the latch register remains the same until it has been fully read, or until a new mode/command register is written.
	 * The main benefit of the latch command is that it allows both bytes of the current count to be read without inconsistencies. For example, if you didn't use the latch command, then the current count may decrease from 0x0200 to 0x01FF after you've read the low byte but before you've read the high byte, so that your software thinks the counter was 0x0100 instead of 0x0200 (or 0x01FF).
	 */
	//uint16 cnt0 = kclock_read_cnt0() ;
	uint16 cnt0 = kclock_read_cnt0_latch() ;
f0104cb6:	e8 f5 01 00 00       	call   f0104eb0 <kclock_read_cnt0_latch>
f0104cbb:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//cprintf("CLOCK RESUMED: Counter0 Value = %d\n", cnt0 );
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f0104cbf:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f0104cc4:	77 06                	ja     f0104ccc <kclock_resume+0x1c>
	{
		cnt0 = 20;
f0104cc6:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f0104ccc:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104cd0:	83 e0 01             	and    $0x1,%eax
f0104cd3:	66 85 c0             	test   %ax,%ax
f0104cd6:	74 09                	je     f0104ce1 <kclock_resume+0x31>
		cnt0++;
f0104cd8:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104cdc:	40                   	inc    %eax
f0104cdd:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f0104ce1:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104ce8:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104cec:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104cef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104cf2:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104cf3:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104cf7:	83 ec 0c             	sub    $0xc,%esp
f0104cfa:	50                   	push   %eax
f0104cfb:	e8 10 01 00 00       	call   f0104e10 <kclock_write_cnt0_LSB_first>
f0104d00:	83 c4 10             	add    $0x10,%esp
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup IRQ0: timer interrupts via 8259A\n");
	//irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
	irq_clear_mask(0);
f0104d03:	83 ec 0c             	sub    $0xc,%esp
f0104d06:	6a 00                	push   $0x0
f0104d08:	e8 d8 22 00 00       	call   f0106fe5 <irq_clear_mask>
f0104d0d:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0104d10:	90                   	nop
f0104d11:	c9                   	leave  
f0104d12:	c3                   	ret    

f0104d13 <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f0104d13:	55                   	push   %ebp
f0104d14:	89 e5                	mov    %esp,%ebp
f0104d16:	83 ec 28             	sub    $0x28,%esp
f0104d19:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d1c:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104d1f:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104d26:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104d2a:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104d2d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d30:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104d31:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0104d35:	83 ec 0c             	sub    $0xc,%esp
f0104d38:	50                   	push   %eax
f0104d39:	e8 d2 00 00 00       	call   f0104e10 <kclock_write_cnt0_LSB_first>
f0104d3e:	83 c4 10             	add    $0x10,%esp
	//irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
	irq_clear_mask(0);
f0104d41:	83 ec 0c             	sub    $0xc,%esp
f0104d44:	6a 00                	push   $0x0
f0104d46:	e8 9a 22 00 00       	call   f0106fe5 <irq_clear_mask>
f0104d4b:	83 c4 10             	add    $0x10,%esp
}
f0104d4e:	90                   	nop
f0104d4f:	c9                   	leave  
f0104d50:	c3                   	ret    

f0104d51 <kclock_set_quantum>:

//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f0104d51:	55                   	push   %ebp
f0104d52:	89 e5                	mov    %esp,%ebp
f0104d54:	56                   	push   %esi
f0104d55:	53                   	push   %ebx
f0104d56:	83 ec 20             	sub    $0x20,%esp
f0104d59:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d5c:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104d5f:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104d63:	0f 87 8a 00 00 00    	ja     f0104df3 <kclock_set_quantum+0xa2>
	{
		/*2023*/
//		int cnt = TIMER_DIV((1000/quantum_in_ms));
//		if (cnt%2 == 1)
//			cnt++;
		int cnt = NUM_CLKS_PER_QUANTUM(quantum_in_ms);
f0104d69:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104d6d:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104d72:	99                   	cltd   
f0104d73:	f7 fe                	idiv   %esi
f0104d75:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104d7b:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104d7f:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104d84:	99                   	cltd   
f0104d85:	f7 fb                	idiv   %ebx
f0104d87:	89 c6                	mov    %eax,%esi
f0104d89:	89 c8                	mov    %ecx,%eax
f0104d8b:	99                   	cltd   
f0104d8c:	f7 fe                	idiv   %esi
f0104d8e:	89 c3                	mov    %eax,%ebx
f0104d90:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
f0104d94:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104d99:	99                   	cltd   
f0104d9a:	f7 f9                	idiv   %ecx
f0104d9c:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104da2:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104da6:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104dab:	99                   	cltd   
f0104dac:	f7 fe                	idiv   %esi
f0104dae:	89 c6                	mov    %eax,%esi
f0104db0:	89 c8                	mov    %ecx,%eax
f0104db2:	99                   	cltd   
f0104db3:	f7 fe                	idiv   %esi
f0104db5:	25 01 00 00 80       	and    $0x80000001,%eax
f0104dba:	85 c0                	test   %eax,%eax
f0104dbc:	79 05                	jns    f0104dc3 <kclock_set_quantum+0x72>
f0104dbe:	48                   	dec    %eax
f0104dbf:	83 c8 fe             	or     $0xfffffffe,%eax
f0104dc2:	40                   	inc    %eax
f0104dc3:	01 d8                	add    %ebx,%eax
f0104dc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104dc8:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104dcf:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104dd3:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104dd6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104dd9:	ee                   	out    %al,(%dx)


		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f0104dda:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ddd:	0f b7 c0             	movzwl %ax,%eax
f0104de0:	83 ec 0c             	sub    $0xc,%esp
f0104de3:	50                   	push   %eax
f0104de4:	e8 27 00 00 00       	call   f0104e10 <kclock_write_cnt0_LSB_first>
f0104de9:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f0104dec:	e8 97 fe ff ff       	call   f0104c88 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0104df1:	eb 16                	jmp    f0104e09 <kclock_set_quantum+0xb8>
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
		//cprintf("\nkclock_set_quantum: clock after stop = %d\n",cnt0);
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104df3:	6a 35                	push   $0x35
f0104df5:	68 b0 6a 12 f0       	push   $0xf0126ab0
f0104dfa:	68 ea 00 00 00       	push   $0xea
f0104dff:	68 0c 6b 12 f0       	push   $0xf0126b0c
f0104e04:	e8 11 b5 ff ff       	call   f010031a <_panic>
	}
}
f0104e09:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0104e0c:	5b                   	pop    %ebx
f0104e0d:	5e                   	pop    %esi
f0104e0e:	5d                   	pop    %ebp
f0104e0f:	c3                   	ret    

f0104e10 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104e10:	55                   	push   %ebp
f0104e11:	89 e5                	mov    %esp,%ebp
f0104e13:	83 ec 28             	sub    $0x28,%esp
f0104e16:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e19:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
	/*You must prevent other code from setting the PIT channel's reload value or reading
	 * its current count once you've sent the lowest 8 bits. Disabling interrupts works
	 * for single CPU computers
	 * */
	pushcli();	//disable interrupt
f0104e1d:	e8 9e 23 00 00       	call   f01071c0 <pushcli>
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104e22:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104e25:	0f b6 c0             	movzbl %al,%eax
f0104e28:	c7 45 f4 40 00 00 00 	movl   $0x40,-0xc(%ebp)
f0104e2f:	88 45 ee             	mov    %al,-0x12(%ebp)
f0104e32:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104e35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104e38:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104e39:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104e3c:	66 c1 e8 08          	shr    $0x8,%ax
f0104e40:	0f b6 c0             	movzbl %al,%eax
f0104e43:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)
f0104e4a:	88 45 ef             	mov    %al,-0x11(%ebp)
f0104e4d:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104e50:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104e53:	ee                   	out    %al,(%dx)
	popcli();	//enable interrupt
f0104e54:	e8 b9 23 00 00       	call   f0107212 <popcli>

}
f0104e59:	90                   	nop
f0104e5a:	c9                   	leave  
f0104e5b:	c3                   	ret    

f0104e5c <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104e5c:	55                   	push   %ebp
f0104e5d:	89 e5                	mov    %esp,%ebp
f0104e5f:	83 ec 28             	sub    $0x28,%esp
	pushcli();	//disable interrupt
f0104e62:	e8 59 23 00 00       	call   f01071c0 <pushcli>
f0104e67:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104e6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104e71:	89 c2                	mov    %eax,%edx
f0104e73:	ec                   	in     (%dx),%al
f0104e74:	88 45 e6             	mov    %al,-0x1a(%ebp)
	return data;
f0104e77:	8a 45 e6             	mov    -0x1a(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104e7a:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104e7d:	c7 45 e8 40 00 00 00 	movl   $0x40,-0x18(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104e84:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104e87:	89 c2                	mov    %eax,%edx
f0104e89:	ec                   	in     (%dx),%al
f0104e8a:	88 45 e7             	mov    %al,-0x19(%ebp)
	return data;
f0104e8d:	8a 45 e7             	mov    -0x19(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104e90:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104e93:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0104e97:	c1 e0 08             	shl    $0x8,%eax
f0104e9a:	89 c2                	mov    %eax,%edx
f0104e9c:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0104ea0:	09 d0                	or     %edx,%eax
f0104ea2:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	popcli();	//enable interrupt
f0104ea6:	e8 67 23 00 00       	call   f0107212 <popcli>
	return cnt0 ;
f0104eab:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0104eae:	c9                   	leave  
f0104eaf:	c3                   	ret    

f0104eb0 <kclock_read_cnt0_latch>:
 * instead of 0x0200 (or 0x01FF).
 * REF: OSDev Wiki
 */
uint16
kclock_read_cnt0_latch(void)
{
f0104eb0:	55                   	push   %ebp
f0104eb1:	89 e5                	mov    %esp,%ebp
f0104eb3:	83 ec 30             	sub    $0x30,%esp
f0104eb6:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104ebd:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104ec0:	89 c2                	mov    %eax,%edx
f0104ec2:	ec                   	in     (%dx),%al
f0104ec3:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0104ec6:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f0104ec9:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104ecc:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104ed3:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104ed7:	8a 45 dc             	mov    -0x24(%ebp),%al
f0104eda:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104edd:	ee                   	out    %al,(%dx)
f0104ede:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104ee5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104ee8:	89 c2                	mov    %eax,%edx
f0104eea:	ec                   	in     (%dx),%al
f0104eeb:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f0104eee:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104ef1:	88 45 f3             	mov    %al,-0xd(%ebp)
f0104ef4:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104efb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104efe:	89 c2                	mov    %eax,%edx
f0104f00:	ec                   	in     (%dx),%al
f0104f01:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0104f04:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104f07:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104f0a:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0104f0e:	c1 e0 08             	shl    $0x8,%eax
f0104f11:	89 c2                	mov    %eax,%edx
f0104f13:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104f17:	09 d0                	or     %edx,%eax
f0104f19:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0104f1d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104f21:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104f28:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104f2b:	8a 45 df             	mov    -0x21(%ebp),%al
f0104f2e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104f31:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104f32:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104f35:	c9                   	leave  
f0104f36:	c3                   	ret    

f0104f37 <init_queue>:

//================================
// [1] Initialize the given queue:
//================================
void init_queue(struct Env_Queue* queue)
{
f0104f37:	55                   	push   %ebp
f0104f38:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104f3a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104f3e:	74 1d                	je     f0104f5d <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104f40:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f43:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104f49:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f4c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104f53:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f56:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0104f5d:	90                   	nop
f0104f5e:	5d                   	pop    %ebp
f0104f5f:	c3                   	ret    

f0104f60 <queue_size>:

//================================
// [2] Get queue size:
//================================
int queue_size(struct Env_Queue* queue)
{
f0104f60:	55                   	push   %ebp
f0104f61:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104f63:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104f67:	74 08                	je     f0104f71 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f0104f69:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f6c:	8b 40 0c             	mov    0xc(%eax),%eax
f0104f6f:	eb 05                	jmp    f0104f76 <queue_size+0x16>
	}
	else
	{
		return 0;
f0104f71:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f0104f76:	5d                   	pop    %ebp
f0104f77:	c3                   	ret    

f0104f78 <enqueue>:

//====================================
// [3] Enqueue env in the given queue:
//====================================
void enqueue(struct Env_Queue* queue, struct Env* env)
{
f0104f78:	55                   	push   %ebp
f0104f79:	89 e5                	mov    %esp,%ebp
f0104f7b:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104f7e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104f82:	75 16                	jne    f0104f9a <enqueue+0x22>
f0104f84:	68 20 6b 12 f0       	push   $0xf0126b20
f0104f89:	68 2e 6b 12 f0       	push   $0xf0126b2e
f0104f8e:	6a 34                	push   $0x34
f0104f90:	68 43 6b 12 f0       	push   $0xf0126b43
f0104f95:	e8 80 b3 ff ff       	call   f010031a <_panic>
	if(env != NULL)
f0104f9a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104f9e:	74 66                	je     f0105006 <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f0104fa0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104fa4:	75 14                	jne    f0104fba <enqueue+0x42>
f0104fa6:	83 ec 04             	sub    $0x4,%esp
f0104fa9:	68 5c 6b 12 f0       	push   $0xf0126b5c
f0104fae:	6a 37                	push   $0x37
f0104fb0:	68 43 6b 12 f0       	push   $0xf0126b43
f0104fb5:	e8 60 b3 ff ff       	call   f010031a <_panic>
f0104fba:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fbd:	8b 10                	mov    (%eax),%edx
f0104fbf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fc2:	89 50 08             	mov    %edx,0x8(%eax)
f0104fc5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fc8:	8b 40 08             	mov    0x8(%eax),%eax
f0104fcb:	85 c0                	test   %eax,%eax
f0104fcd:	74 0d                	je     f0104fdc <enqueue+0x64>
f0104fcf:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fd2:	8b 00                	mov    (%eax),%eax
f0104fd4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104fd7:	89 50 0c             	mov    %edx,0xc(%eax)
f0104fda:	eb 09                	jmp    f0104fe5 <enqueue+0x6d>
f0104fdc:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fdf:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104fe2:	89 50 04             	mov    %edx,0x4(%eax)
f0104fe5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fe8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104feb:	89 10                	mov    %edx,(%eax)
f0104fed:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104ff0:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0104ff7:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ffa:	8b 40 0c             	mov    0xc(%eax),%eax
f0104ffd:	8d 50 01             	lea    0x1(%eax),%edx
f0105000:	8b 45 08             	mov    0x8(%ebp),%eax
f0105003:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0105006:	90                   	nop
f0105007:	c9                   	leave  
f0105008:	c3                   	ret    

f0105009 <dequeue>:

//======================================
// [4] Dequeue env from the given queue:
//======================================
struct Env* dequeue(struct Env_Queue* queue)
{
f0105009:	55                   	push   %ebp
f010500a:	89 e5                	mov    %esp,%ebp
f010500c:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f010500f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105013:	75 0a                	jne    f010501f <dequeue+0x16>
f0105015:	b8 00 00 00 00       	mov    $0x0,%eax
f010501a:	e9 a0 00 00 00       	jmp    f01050bf <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f010501f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105022:	8b 40 04             	mov    0x4(%eax),%eax
f0105025:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f0105028:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010502c:	0f 84 8a 00 00 00    	je     f01050bc <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0105032:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105036:	75 14                	jne    f010504c <dequeue+0x43>
f0105038:	83 ec 04             	sub    $0x4,%esp
f010503b:	68 7f 6b 12 f0       	push   $0xf0126b7f
f0105040:	6a 44                	push   $0x44
f0105042:	68 43 6b 12 f0       	push   $0xf0126b43
f0105047:	e8 ce b2 ff ff       	call   f010031a <_panic>
f010504c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010504f:	8b 40 08             	mov    0x8(%eax),%eax
f0105052:	85 c0                	test   %eax,%eax
f0105054:	74 11                	je     f0105067 <dequeue+0x5e>
f0105056:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105059:	8b 40 08             	mov    0x8(%eax),%eax
f010505c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010505f:	8b 52 0c             	mov    0xc(%edx),%edx
f0105062:	89 50 0c             	mov    %edx,0xc(%eax)
f0105065:	eb 0c                	jmp    f0105073 <dequeue+0x6a>
f0105067:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010506a:	8b 50 0c             	mov    0xc(%eax),%edx
f010506d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105070:	89 50 04             	mov    %edx,0x4(%eax)
f0105073:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105076:	8b 40 0c             	mov    0xc(%eax),%eax
f0105079:	85 c0                	test   %eax,%eax
f010507b:	74 11                	je     f010508e <dequeue+0x85>
f010507d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105080:	8b 40 0c             	mov    0xc(%eax),%eax
f0105083:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105086:	8b 52 08             	mov    0x8(%edx),%edx
f0105089:	89 50 08             	mov    %edx,0x8(%eax)
f010508c:	eb 0b                	jmp    f0105099 <dequeue+0x90>
f010508e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105091:	8b 50 08             	mov    0x8(%eax),%edx
f0105094:	8b 45 08             	mov    0x8(%ebp),%eax
f0105097:	89 10                	mov    %edx,(%eax)
f0105099:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010509c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f01050a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050a6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f01050ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01050b0:	8b 40 0c             	mov    0xc(%eax),%eax
f01050b3:	8d 50 ff             	lea    -0x1(%eax),%edx
f01050b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01050b9:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f01050bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01050bf:	c9                   	leave  
f01050c0:	c3                   	ret    

f01050c1 <remove_from_queue>:

//====================================
// [5] Remove env from the given queue:
//====================================
void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f01050c1:	55                   	push   %ebp
f01050c2:	89 e5                	mov    %esp,%ebp
f01050c4:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01050c7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01050cb:	75 16                	jne    f01050e3 <remove_from_queue+0x22>
f01050cd:	68 20 6b 12 f0       	push   $0xf0126b20
f01050d2:	68 2e 6b 12 f0       	push   $0xf0126b2e
f01050d7:	6a 4e                	push   $0x4e
f01050d9:	68 43 6b 12 f0       	push   $0xf0126b43
f01050de:	e8 37 b2 ff ff       	call   f010031a <_panic>

	if (e != NULL)
f01050e3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01050e7:	0f 84 8a 00 00 00    	je     f0105177 <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f01050ed:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01050f1:	75 14                	jne    f0105107 <remove_from_queue+0x46>
f01050f3:	83 ec 04             	sub    $0x4,%esp
f01050f6:	68 7f 6b 12 f0       	push   $0xf0126b7f
f01050fb:	6a 52                	push   $0x52
f01050fd:	68 43 6b 12 f0       	push   $0xf0126b43
f0105102:	e8 13 b2 ff ff       	call   f010031a <_panic>
f0105107:	8b 45 0c             	mov    0xc(%ebp),%eax
f010510a:	8b 40 08             	mov    0x8(%eax),%eax
f010510d:	85 c0                	test   %eax,%eax
f010510f:	74 11                	je     f0105122 <remove_from_queue+0x61>
f0105111:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105114:	8b 40 08             	mov    0x8(%eax),%eax
f0105117:	8b 55 0c             	mov    0xc(%ebp),%edx
f010511a:	8b 52 0c             	mov    0xc(%edx),%edx
f010511d:	89 50 0c             	mov    %edx,0xc(%eax)
f0105120:	eb 0c                	jmp    f010512e <remove_from_queue+0x6d>
f0105122:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105125:	8b 50 0c             	mov    0xc(%eax),%edx
f0105128:	8b 45 08             	mov    0x8(%ebp),%eax
f010512b:	89 50 04             	mov    %edx,0x4(%eax)
f010512e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105131:	8b 40 0c             	mov    0xc(%eax),%eax
f0105134:	85 c0                	test   %eax,%eax
f0105136:	74 11                	je     f0105149 <remove_from_queue+0x88>
f0105138:	8b 45 0c             	mov    0xc(%ebp),%eax
f010513b:	8b 40 0c             	mov    0xc(%eax),%eax
f010513e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0105141:	8b 52 08             	mov    0x8(%edx),%edx
f0105144:	89 50 08             	mov    %edx,0x8(%eax)
f0105147:	eb 0b                	jmp    f0105154 <remove_from_queue+0x93>
f0105149:	8b 45 0c             	mov    0xc(%ebp),%eax
f010514c:	8b 50 08             	mov    0x8(%eax),%edx
f010514f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105152:	89 10                	mov    %edx,(%eax)
f0105154:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105157:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f010515e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105161:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0105168:	8b 45 08             	mov    0x8(%ebp),%eax
f010516b:	8b 40 0c             	mov    0xc(%eax),%eax
f010516e:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105171:	8b 45 08             	mov    0x8(%ebp),%eax
f0105174:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0105177:	90                   	nop
f0105178:	c9                   	leave  
f0105179:	c3                   	ret    

f010517a <find_env_in_queue>:

//========================================
// [6] Search by envID in the given queue:
//========================================
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f010517a:	55                   	push   %ebp
f010517b:	89 e5                	mov    %esp,%ebp
f010517d:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f0105180:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105184:	75 07                	jne    f010518d <find_env_in_queue+0x13>
f0105186:	b8 00 00 00 00       	mov    $0x0,%eax
f010518b:	eb 58                	jmp    f01051e5 <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f010518d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f0105194:	8b 45 08             	mov    0x8(%ebp),%eax
f0105197:	8b 00                	mov    (%eax),%eax
f0105199:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010519c:	eb 19                	jmp    f01051b7 <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f010519e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01051a1:	8b 40 10             	mov    0x10(%eax),%eax
f01051a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01051a7:	75 05                	jne    f01051ae <find_env_in_queue+0x34>
		{
			return ptr_env;
f01051a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01051ac:	eb 37                	jmp    f01051e5 <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f01051ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01051b1:	8b 40 08             	mov    0x8(%eax),%eax
f01051b4:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01051b7:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01051bb:	74 08                	je     f01051c5 <find_env_in_queue+0x4b>
f01051bd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01051c0:	8b 40 08             	mov    0x8(%eax),%eax
f01051c3:	eb 05                	jmp    f01051ca <find_env_in_queue+0x50>
f01051c5:	b8 00 00 00 00       	mov    $0x0,%eax
f01051ca:	8b 55 08             	mov    0x8(%ebp),%edx
f01051cd:	89 42 08             	mov    %eax,0x8(%edx)
f01051d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01051d3:	8b 40 08             	mov    0x8(%eax),%eax
f01051d6:	85 c0                	test   %eax,%eax
f01051d8:	75 c4                	jne    f010519e <find_env_in_queue+0x24>
f01051da:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01051de:	75 be                	jne    f010519e <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f01051e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01051e5:	c9                   	leave  
f01051e6:	c3                   	ret    

f01051e7 <sched_delete_ready_queues>:

//========================================
// [1] Delete all ready queues:
//========================================
void sched_delete_ready_queues()
{
f01051e7:	55                   	push   %ebp
f01051e8:	89 e5                	mov    %esp,%ebp
			kfree(quantums);
	}
	release_spinlock(&ProcessQueues.qlock);

#endif
}
f01051ea:	90                   	nop
f01051eb:	5d                   	pop    %ebp
f01051ec:	c3                   	ret    

f01051ed <sched_insert_ready0>:

//=================================================
// [2] Insert the given Env in the 1st Ready Queue:
//=================================================
void sched_insert_ready0(struct Env* env)
{
f01051ed:	55                   	push   %ebp
f01051ee:	89 e5                	mov    %esp,%ebp
f01051f0:	83 ec 08             	sub    $0x8,%esp
	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f01051f3:	83 ec 0c             	sub    $0xc,%esp
f01051f6:	68 00 fe 59 f0       	push   $0xf059fe00
f01051fb:	e8 3a 9b 00 00       	call   f010ed3a <holding_spinlock>
f0105200:	83 c4 10             	add    $0x10,%esp
f0105203:	85 c0                	test   %eax,%eax
f0105205:	75 17                	jne    f010521e <sched_insert_ready0+0x31>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
f0105207:	83 ec 04             	sub    $0x4,%esp
f010520a:	68 a0 6b 12 f0       	push   $0xf0126ba0
f010520f:	68 85 00 00 00       	push   $0x85
f0105214:	68 43 6b 12 f0       	push   $0xf0126b43
f0105219:	e8 fc b0 ff ff       	call   f010031a <_panic>
	/*********************************************************************/

	assert(env != NULL);
f010521e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105222:	75 19                	jne    f010523d <sched_insert_ready0+0x50>
f0105224:	68 e1 6b 12 f0       	push   $0xf0126be1
f0105229:	68 2e 6b 12 f0       	push   $0xf0126b2e
f010522e:	68 88 00 00 00       	push   $0x88
f0105233:	68 43 6b 12 f0       	push   $0xf0126b43
f0105238:	e8 dd b0 ff ff       	call   f010031a <_panic>
	{
		//cprintf("\nInserting %d into ready queue 0\n", env->env_id);
		env->env_status = ENV_READY ;
f010523d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105240:	c7 40 18 01 00 00 00 	movl   $0x1,0x18(%eax)
		enqueue(&(ProcessQueues.env_ready_queues[0]), env);
f0105247:	83 ec 08             	sub    $0x8,%esp
f010524a:	ff 75 08             	pushl  0x8(%ebp)
f010524d:	68 90 fe 59 f0       	push   $0xf059fe90
f0105252:	e8 21 fd ff ff       	call   f0104f78 <enqueue>
f0105257:	83 c4 10             	add    $0x10,%esp
	}
}
f010525a:	90                   	nop
f010525b:	c9                   	leave  
f010525c:	c3                   	ret    

f010525d <sched_remove_ready>:

//=================================================
// [3] Remove the given Env from the Ready Queue(s):
//=================================================
void sched_remove_ready(struct Env* env)
{
f010525d:	55                   	push   %ebp
f010525e:	89 e5                	mov    %esp,%ebp
f0105260:	83 ec 18             	sub    $0x18,%esp
	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f0105263:	83 ec 0c             	sub    $0xc,%esp
f0105266:	68 00 fe 59 f0       	push   $0xf059fe00
f010526b:	e8 ca 9a 00 00       	call   f010ed3a <holding_spinlock>
f0105270:	83 c4 10             	add    $0x10,%esp
f0105273:	85 c0                	test   %eax,%eax
f0105275:	75 17                	jne    f010528e <sched_remove_ready+0x31>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
f0105277:	83 ec 04             	sub    $0x4,%esp
f010527a:	68 a0 6b 12 f0       	push   $0xf0126ba0
f010527f:	68 97 00 00 00       	push   $0x97
f0105284:	68 43 6b 12 f0       	push   $0xf0126b43
f0105289:	e8 8c b0 ff ff       	call   f010031a <_panic>
	/*********************************************************************/

	assert(env != NULL && env->env_status == ENV_READY);
f010528e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105292:	74 0b                	je     f010529f <sched_remove_ready+0x42>
f0105294:	8b 45 08             	mov    0x8(%ebp),%eax
f0105297:	8b 40 18             	mov    0x18(%eax),%eax
f010529a:	83 f8 01             	cmp    $0x1,%eax
f010529d:	74 19                	je     f01052b8 <sched_remove_ready+0x5b>
f010529f:	68 f0 6b 12 f0       	push   $0xf0126bf0
f01052a4:	68 2e 6b 12 f0       	push   $0xf0126b2e
f01052a9:	68 9a 00 00 00       	push   $0x9a
f01052ae:	68 43 6b 12 f0       	push   $0xf0126b43
f01052b3:	e8 62 b0 ff ff       	call   f010031a <_panic>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01052b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01052bf:	e9 f7 00 00 00       	jmp    f01053bb <sched_remove_ready+0x15e>
		{
			struct Env * ptr_env = find_env_in_queue(&(ProcessQueues.env_ready_queues[i]), env->env_id);
f01052c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01052c7:	8b 40 10             	mov    0x10(%eax),%eax
f01052ca:	89 c2                	mov    %eax,%edx
f01052cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052cf:	83 c0 09             	add    $0x9,%eax
f01052d2:	c1 e0 04             	shl    $0x4,%eax
f01052d5:	05 00 fe 59 f0       	add    $0xf059fe00,%eax
f01052da:	83 ec 08             	sub    $0x8,%esp
f01052dd:	52                   	push   %edx
f01052de:	50                   	push   %eax
f01052df:	e8 96 fe ff ff       	call   f010517a <find_env_in_queue>
f01052e4:	83 c4 10             	add    $0x10,%esp
f01052e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f01052ea:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01052ee:	0f 84 c4 00 00 00    	je     f01053b8 <sched_remove_ready+0x15b>
			{
				LIST_REMOVE(&(ProcessQueues.env_ready_queues[i]), env);
f01052f4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01052f8:	75 17                	jne    f0105311 <sched_remove_ready+0xb4>
f01052fa:	83 ec 04             	sub    $0x4,%esp
f01052fd:	68 7f 6b 12 f0       	push   $0xf0126b7f
f0105302:	68 a1 00 00 00       	push   $0xa1
f0105307:	68 43 6b 12 f0       	push   $0xf0126b43
f010530c:	e8 09 b0 ff ff       	call   f010031a <_panic>
f0105311:	8b 45 08             	mov    0x8(%ebp),%eax
f0105314:	8b 40 08             	mov    0x8(%eax),%eax
f0105317:	85 c0                	test   %eax,%eax
f0105319:	74 11                	je     f010532c <sched_remove_ready+0xcf>
f010531b:	8b 45 08             	mov    0x8(%ebp),%eax
f010531e:	8b 40 08             	mov    0x8(%eax),%eax
f0105321:	8b 55 08             	mov    0x8(%ebp),%edx
f0105324:	8b 52 0c             	mov    0xc(%edx),%edx
f0105327:	89 50 0c             	mov    %edx,0xc(%eax)
f010532a:	eb 17                	jmp    f0105343 <sched_remove_ready+0xe6>
f010532c:	8b 45 08             	mov    0x8(%ebp),%eax
f010532f:	8b 40 0c             	mov    0xc(%eax),%eax
f0105332:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105335:	83 c2 09             	add    $0x9,%edx
f0105338:	c1 e2 04             	shl    $0x4,%edx
f010533b:	81 c2 04 fe 59 f0    	add    $0xf059fe04,%edx
f0105341:	89 02                	mov    %eax,(%edx)
f0105343:	8b 45 08             	mov    0x8(%ebp),%eax
f0105346:	8b 40 0c             	mov    0xc(%eax),%eax
f0105349:	85 c0                	test   %eax,%eax
f010534b:	74 11                	je     f010535e <sched_remove_ready+0x101>
f010534d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105350:	8b 40 0c             	mov    0xc(%eax),%eax
f0105353:	8b 55 08             	mov    0x8(%ebp),%edx
f0105356:	8b 52 08             	mov    0x8(%edx),%edx
f0105359:	89 50 08             	mov    %edx,0x8(%eax)
f010535c:	eb 17                	jmp    f0105375 <sched_remove_ready+0x118>
f010535e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105361:	8b 40 08             	mov    0x8(%eax),%eax
f0105364:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105367:	83 c2 09             	add    $0x9,%edx
f010536a:	c1 e2 04             	shl    $0x4,%edx
f010536d:	81 c2 00 fe 59 f0    	add    $0xf059fe00,%edx
f0105373:	89 02                	mov    %eax,(%edx)
f0105375:	8b 45 08             	mov    0x8(%ebp),%eax
f0105378:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f010537f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105382:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0105389:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010538c:	83 c0 09             	add    $0x9,%eax
f010538f:	c1 e0 04             	shl    $0x4,%eax
f0105392:	05 0c fe 59 f0       	add    $0xf059fe0c,%eax
f0105397:	8b 00                	mov    (%eax),%eax
f0105399:	8d 50 ff             	lea    -0x1(%eax),%edx
f010539c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010539f:	83 c0 09             	add    $0x9,%eax
f01053a2:	c1 e0 04             	shl    $0x4,%eax
f01053a5:	05 0c fe 59 f0       	add    $0xf059fe0c,%eax
f01053aa:	89 10                	mov    %edx,(%eax)
				env->env_status = ENV_UNKNOWN;
f01053ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01053af:	c7 40 18 06 00 00 00 	movl   $0x6,0x18(%eax)
				return ;
f01053b6:	eb 14                	jmp    f01053cc <sched_remove_ready+0x16f>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
	/*********************************************************************/

	assert(env != NULL && env->env_status == ENV_READY);
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01053b8:	ff 45 f4             	incl   -0xc(%ebp)
f01053bb:	a0 00 2b 5a f0       	mov    0xf05a2b00,%al
f01053c0:	0f b6 c0             	movzbl %al,%eax
f01053c3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01053c6:	0f 8f f8 fe ff ff    	jg     f01052c4 <sched_remove_ready+0x67>
				env->env_status = ENV_UNKNOWN;
				return ;
			}
		}
	}
}
f01053cc:	c9                   	leave  
f01053cd:	c3                   	ret    

f01053ce <sched_insert_new>:

//=================================================
// [4] Insert the given Env in NEW Queue:
//=================================================
void sched_insert_new(struct Env* env)
{
f01053ce:	55                   	push   %ebp
f01053cf:	89 e5                	mov    %esp,%ebp
f01053d1:	83 ec 08             	sub    $0x8,%esp
	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f01053d4:	83 ec 0c             	sub    $0xc,%esp
f01053d7:	68 00 fe 59 f0       	push   $0xf059fe00
f01053dc:	e8 59 99 00 00       	call   f010ed3a <holding_spinlock>
f01053e1:	83 c4 10             	add    $0x10,%esp
f01053e4:	85 c0                	test   %eax,%eax
f01053e6:	75 17                	jne    f01053ff <sched_insert_new+0x31>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
f01053e8:	83 ec 04             	sub    $0x4,%esp
f01053eb:	68 a0 6b 12 f0       	push   $0xf0126ba0
f01053f0:	68 b0 00 00 00       	push   $0xb0
f01053f5:	68 43 6b 12 f0       	push   $0xf0126b43
f01053fa:	e8 1b af ff ff       	call   f010031a <_panic>
	/*********************************************************************/

	assert(env != NULL);
f01053ff:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105403:	75 19                	jne    f010541e <sched_insert_new+0x50>
f0105405:	68 e1 6b 12 f0       	push   $0xf0126be1
f010540a:	68 2e 6b 12 f0       	push   $0xf0126b2e
f010540f:	68 b3 00 00 00       	push   $0xb3
f0105414:	68 43 6b 12 f0       	push   $0xf0126b43
f0105419:	e8 fc ae ff ff       	call   f010031a <_panic>
	{
		env->env_status = ENV_NEW ;
f010541e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105421:	c7 40 18 04 00 00 00 	movl   $0x4,0x18(%eax)
		enqueue(&ProcessQueues.env_new_queue, env);
f0105428:	83 ec 08             	sub    $0x8,%esp
f010542b:	ff 75 08             	pushl  0x8(%ebp)
f010542e:	68 70 fe 59 f0       	push   $0xf059fe70
f0105433:	e8 40 fb ff ff       	call   f0104f78 <enqueue>
f0105438:	83 c4 10             	add    $0x10,%esp
	}
}
f010543b:	90                   	nop
f010543c:	c9                   	leave  
f010543d:	c3                   	ret    

f010543e <sched_remove_new>:

//=================================================
// [5] Remove the given Env from NEW Queue:
//=================================================
void sched_remove_new(struct Env* env)
{
f010543e:	55                   	push   %ebp
f010543f:	89 e5                	mov    %esp,%ebp
f0105441:	83 ec 08             	sub    $0x8,%esp
	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f0105444:	83 ec 0c             	sub    $0xc,%esp
f0105447:	68 00 fe 59 f0       	push   $0xf059fe00
f010544c:	e8 e9 98 00 00       	call   f010ed3a <holding_spinlock>
f0105451:	83 c4 10             	add    $0x10,%esp
f0105454:	85 c0                	test   %eax,%eax
f0105456:	75 17                	jne    f010546f <sched_remove_new+0x31>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
f0105458:	83 ec 04             	sub    $0x4,%esp
f010545b:	68 a0 6b 12 f0       	push   $0xf0126ba0
f0105460:	68 c1 00 00 00       	push   $0xc1
f0105465:	68 43 6b 12 f0       	push   $0xf0126b43
f010546a:	e8 ab ae ff ff       	call   f010031a <_panic>
	/*********************************************************************/

	assert(env != NULL && env->env_status == ENV_NEW);
f010546f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105473:	74 0b                	je     f0105480 <sched_remove_new+0x42>
f0105475:	8b 45 08             	mov    0x8(%ebp),%eax
f0105478:	8b 40 18             	mov    0x18(%eax),%eax
f010547b:	83 f8 04             	cmp    $0x4,%eax
f010547e:	74 19                	je     f0105499 <sched_remove_new+0x5b>
f0105480:	68 1c 6c 12 f0       	push   $0xf0126c1c
f0105485:	68 2e 6b 12 f0       	push   $0xf0126b2e
f010548a:	68 c4 00 00 00       	push   $0xc4
f010548f:	68 43 6b 12 f0       	push   $0xf0126b43
f0105494:	e8 81 ae ff ff       	call   f010031a <_panic>
	{
		LIST_REMOVE(&ProcessQueues.env_new_queue, env) ;
f0105499:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010549d:	75 17                	jne    f01054b6 <sched_remove_new+0x78>
f010549f:	83 ec 04             	sub    $0x4,%esp
f01054a2:	68 7f 6b 12 f0       	push   $0xf0126b7f
f01054a7:	68 c6 00 00 00       	push   $0xc6
f01054ac:	68 43 6b 12 f0       	push   $0xf0126b43
f01054b1:	e8 64 ae ff ff       	call   f010031a <_panic>
f01054b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01054b9:	8b 40 08             	mov    0x8(%eax),%eax
f01054bc:	85 c0                	test   %eax,%eax
f01054be:	74 11                	je     f01054d1 <sched_remove_new+0x93>
f01054c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01054c3:	8b 40 08             	mov    0x8(%eax),%eax
f01054c6:	8b 55 08             	mov    0x8(%ebp),%edx
f01054c9:	8b 52 0c             	mov    0xc(%edx),%edx
f01054cc:	89 50 0c             	mov    %edx,0xc(%eax)
f01054cf:	eb 0b                	jmp    f01054dc <sched_remove_new+0x9e>
f01054d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01054d4:	8b 40 0c             	mov    0xc(%eax),%eax
f01054d7:	a3 74 fe 59 f0       	mov    %eax,0xf059fe74
f01054dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01054df:	8b 40 0c             	mov    0xc(%eax),%eax
f01054e2:	85 c0                	test   %eax,%eax
f01054e4:	74 11                	je     f01054f7 <sched_remove_new+0xb9>
f01054e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01054e9:	8b 40 0c             	mov    0xc(%eax),%eax
f01054ec:	8b 55 08             	mov    0x8(%ebp),%edx
f01054ef:	8b 52 08             	mov    0x8(%edx),%edx
f01054f2:	89 50 08             	mov    %edx,0x8(%eax)
f01054f5:	eb 0b                	jmp    f0105502 <sched_remove_new+0xc4>
f01054f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01054fa:	8b 40 08             	mov    0x8(%eax),%eax
f01054fd:	a3 70 fe 59 f0       	mov    %eax,0xf059fe70
f0105502:	8b 45 08             	mov    0x8(%ebp),%eax
f0105505:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f010550c:	8b 45 08             	mov    0x8(%ebp),%eax
f010550f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0105516:	a1 7c fe 59 f0       	mov    0xf059fe7c,%eax
f010551b:	48                   	dec    %eax
f010551c:	a3 7c fe 59 f0       	mov    %eax,0xf059fe7c
		env->env_status = ENV_UNKNOWN;
f0105521:	8b 45 08             	mov    0x8(%ebp),%eax
f0105524:	c7 40 18 06 00 00 00 	movl   $0x6,0x18(%eax)
	}
}
f010552b:	90                   	nop
f010552c:	c9                   	leave  
f010552d:	c3                   	ret    

f010552e <sched_insert_exit>:

//=================================================
// [6] Insert the given Env in EXIT Queue:
//=================================================
void sched_insert_exit(struct Env* env)
{
f010552e:	55                   	push   %ebp
f010552f:	89 e5                	mov    %esp,%ebp
f0105531:	83 ec 08             	sub    $0x8,%esp
	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f0105534:	83 ec 0c             	sub    $0xc,%esp
f0105537:	68 00 fe 59 f0       	push   $0xf059fe00
f010553c:	e8 f9 97 00 00       	call   f010ed3a <holding_spinlock>
f0105541:	83 c4 10             	add    $0x10,%esp
f0105544:	85 c0                	test   %eax,%eax
f0105546:	75 17                	jne    f010555f <sched_insert_exit+0x31>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
f0105548:	83 ec 04             	sub    $0x4,%esp
f010554b:	68 a0 6b 12 f0       	push   $0xf0126ba0
f0105550:	68 d2 00 00 00       	push   $0xd2
f0105555:	68 43 6b 12 f0       	push   $0xf0126b43
f010555a:	e8 bb ad ff ff       	call   f010031a <_panic>
	/*********************************************************************/

	assert(env != NULL);
f010555f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105563:	75 19                	jne    f010557e <sched_insert_exit+0x50>
f0105565:	68 e1 6b 12 f0       	push   $0xf0126be1
f010556a:	68 2e 6b 12 f0       	push   $0xf0126b2e
f010556f:	68 d5 00 00 00       	push   $0xd5
f0105574:	68 43 6b 12 f0       	push   $0xf0126b43
f0105579:	e8 9c ad ff ff       	call   f010031a <_panic>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f010557e:	e8 50 92 00 00       	call   f010e7d3 <isBufferingEnabled>
f0105583:	84 c0                	test   %al,%al
f0105585:	74 0e                	je     f0105595 <sched_insert_exit+0x67>
f0105587:	83 ec 0c             	sub    $0xc,%esp
f010558a:	ff 75 08             	pushl  0x8(%ebp)
f010558d:	e8 ef 67 00 00       	call   f010bd81 <cleanup_buffers>
f0105592:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0105595:	8b 45 08             	mov    0x8(%ebp),%eax
f0105598:	c7 40 18 05 00 00 00 	movl   $0x5,0x18(%eax)
		enqueue(&ProcessQueues.env_exit_queue, env);
f010559f:	83 ec 08             	sub    $0x8,%esp
f01055a2:	ff 75 08             	pushl  0x8(%ebp)
f01055a5:	68 80 fe 59 f0       	push   $0xf059fe80
f01055aa:	e8 c9 f9 ff ff       	call   f0104f78 <enqueue>
f01055af:	83 c4 10             	add    $0x10,%esp
	}
}
f01055b2:	90                   	nop
f01055b3:	c9                   	leave  
f01055b4:	c3                   	ret    

f01055b5 <sched_remove_exit>:
//=================================================
// [7] Remove the given Env from EXIT Queue:
//=================================================
void sched_remove_exit(struct Env* env)
{
f01055b5:	55                   	push   %ebp
f01055b6:	89 e5                	mov    %esp,%ebp
f01055b8:	83 ec 08             	sub    $0x8,%esp
	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f01055bb:	83 ec 0c             	sub    $0xc,%esp
f01055be:	68 00 fe 59 f0       	push   $0xf059fe00
f01055c3:	e8 72 97 00 00       	call   f010ed3a <holding_spinlock>
f01055c8:	83 c4 10             	add    $0x10,%esp
f01055cb:	85 c0                	test   %eax,%eax
f01055cd:	75 17                	jne    f01055e6 <sched_remove_exit+0x31>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
f01055cf:	83 ec 04             	sub    $0x4,%esp
f01055d2:	68 a0 6b 12 f0       	push   $0xf0126ba0
f01055d7:	68 e3 00 00 00       	push   $0xe3
f01055dc:	68 43 6b 12 f0       	push   $0xf0126b43
f01055e1:	e8 34 ad ff ff       	call   f010031a <_panic>
	/*********************************************************************/

	assert(env != NULL && env->env_status == ENV_EXIT);
f01055e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01055ea:	74 0b                	je     f01055f7 <sched_remove_exit+0x42>
f01055ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01055ef:	8b 40 18             	mov    0x18(%eax),%eax
f01055f2:	83 f8 05             	cmp    $0x5,%eax
f01055f5:	74 19                	je     f0105610 <sched_remove_exit+0x5b>
f01055f7:	68 48 6c 12 f0       	push   $0xf0126c48
f01055fc:	68 2e 6b 12 f0       	push   $0xf0126b2e
f0105601:	68 e6 00 00 00       	push   $0xe6
f0105606:	68 43 6b 12 f0       	push   $0xf0126b43
f010560b:	e8 0a ad ff ff       	call   f010031a <_panic>
	{
		LIST_REMOVE(&ProcessQueues.env_exit_queue, env) ;
f0105610:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105614:	75 17                	jne    f010562d <sched_remove_exit+0x78>
f0105616:	83 ec 04             	sub    $0x4,%esp
f0105619:	68 7f 6b 12 f0       	push   $0xf0126b7f
f010561e:	68 e8 00 00 00       	push   $0xe8
f0105623:	68 43 6b 12 f0       	push   $0xf0126b43
f0105628:	e8 ed ac ff ff       	call   f010031a <_panic>
f010562d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105630:	8b 40 08             	mov    0x8(%eax),%eax
f0105633:	85 c0                	test   %eax,%eax
f0105635:	74 11                	je     f0105648 <sched_remove_exit+0x93>
f0105637:	8b 45 08             	mov    0x8(%ebp),%eax
f010563a:	8b 40 08             	mov    0x8(%eax),%eax
f010563d:	8b 55 08             	mov    0x8(%ebp),%edx
f0105640:	8b 52 0c             	mov    0xc(%edx),%edx
f0105643:	89 50 0c             	mov    %edx,0xc(%eax)
f0105646:	eb 0b                	jmp    f0105653 <sched_remove_exit+0x9e>
f0105648:	8b 45 08             	mov    0x8(%ebp),%eax
f010564b:	8b 40 0c             	mov    0xc(%eax),%eax
f010564e:	a3 84 fe 59 f0       	mov    %eax,0xf059fe84
f0105653:	8b 45 08             	mov    0x8(%ebp),%eax
f0105656:	8b 40 0c             	mov    0xc(%eax),%eax
f0105659:	85 c0                	test   %eax,%eax
f010565b:	74 11                	je     f010566e <sched_remove_exit+0xb9>
f010565d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105660:	8b 40 0c             	mov    0xc(%eax),%eax
f0105663:	8b 55 08             	mov    0x8(%ebp),%edx
f0105666:	8b 52 08             	mov    0x8(%edx),%edx
f0105669:	89 50 08             	mov    %edx,0x8(%eax)
f010566c:	eb 0b                	jmp    f0105679 <sched_remove_exit+0xc4>
f010566e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105671:	8b 40 08             	mov    0x8(%eax),%eax
f0105674:	a3 80 fe 59 f0       	mov    %eax,0xf059fe80
f0105679:	8b 45 08             	mov    0x8(%ebp),%eax
f010567c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f0105683:	8b 45 08             	mov    0x8(%ebp),%eax
f0105686:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f010568d:	a1 8c fe 59 f0       	mov    0xf059fe8c,%eax
f0105692:	48                   	dec    %eax
f0105693:	a3 8c fe 59 f0       	mov    %eax,0xf059fe8c
		env->env_status = ENV_UNKNOWN;
f0105698:	8b 45 08             	mov    0x8(%ebp),%eax
f010569b:	c7 40 18 06 00 00 00 	movl   $0x6,0x18(%eax)
	}
}
f01056a2:	90                   	nop
f01056a3:	c9                   	leave  
f01056a4:	c3                   	ret    

f01056a5 <sched_new_env>:

//=================================================
// [8] Sched the given Env in NEW Queue:
//=================================================
void sched_new_env(struct Env* e)
{
f01056a5:	55                   	push   %ebp
f01056a6:	89 e5                	mov    %esp,%ebp
f01056a8:	83 ec 08             	sub    $0x8,%esp
	  //cprintf("\n[SCHED_NEW_ENV] acquire: lock status before acquire = %d\n", qlock.locked);
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f01056ab:	83 ec 0c             	sub    $0xc,%esp
f01056ae:	68 00 fe 59 f0       	push   $0xf059fe00
f01056b3:	e8 69 94 00 00       	call   f010eb21 <acquire_spinlock>
f01056b8:	83 c4 10             	add    $0x10,%esp

	//add the given env to the scheduler NEW queue
	assert (e!=NULL);
f01056bb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01056bf:	75 19                	jne    f01056da <sched_new_env+0x35>
f01056c1:	68 73 6c 12 f0       	push   $0xf0126c73
f01056c6:	68 2e 6b 12 f0       	push   $0xf0126b2e
f01056cb:	68 f6 00 00 00       	push   $0xf6
f01056d0:	68 43 6b 12 f0       	push   $0xf0126b43
f01056d5:	e8 40 ac ff ff       	call   f010031a <_panic>
	{
		sched_insert_new(e);
f01056da:	83 ec 0c             	sub    $0xc,%esp
f01056dd:	ff 75 08             	pushl  0x8(%ebp)
f01056e0:	e8 e9 fc ff ff       	call   f01053ce <sched_insert_new>
f01056e5:	83 c4 10             	add    $0x10,%esp
	}

	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f01056e8:	83 ec 0c             	sub    $0xc,%esp
f01056eb:	68 00 fe 59 f0       	push   $0xf059fe00
f01056f0:	e8 b3 94 00 00       	call   f010eba8 <release_spinlock>
f01056f5:	83 c4 10             	add    $0x10,%esp
	  //cprintf("\n[SCHED_NEW_ENV] release: lock status after = %d\n", qlock.locked);
}
f01056f8:	90                   	nop
f01056f9:	c9                   	leave  
f01056fa:	c3                   	ret    

f01056fb <sched_run_env>:

//=================================================
// [9] Run the given EnvID:
//=================================================
void sched_run_env(uint32 envId)
{
f01056fb:	55                   	push   %ebp
f01056fc:	89 e5                	mov    %esp,%ebp
f01056fe:	83 ec 18             	sub    $0x18,%esp
	  //cprintf("\n[SCHED_RUN_ENV] acquire: lock status before acquire = %d\n", qlock.locked);
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0105701:	83 ec 0c             	sub    $0xc,%esp
f0105704:	68 00 fe 59 f0       	push   $0xf059fe00
f0105709:	e8 13 94 00 00       	call   f010eb21 <acquire_spinlock>
f010570e:	83 c4 10             	add    $0x10,%esp
	struct Env* ptr_env=NULL;
f0105711:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f0105718:	a1 70 fe 59 f0       	mov    0xf059fe70,%eax
f010571d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105720:	eb 53                	jmp    f0105775 <sched_run_env+0x7a>
	{
		if(ptr_env->env_id == envId)
f0105722:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105725:	8b 40 10             	mov    0x10(%eax),%eax
f0105728:	3b 45 08             	cmp    0x8(%ebp),%eax
f010572b:	75 40                	jne    f010576d <sched_run_env+0x72>
		{
			sched_remove_new(ptr_env);
f010572d:	83 ec 0c             	sub    $0xc,%esp
f0105730:	ff 75 f4             	pushl  -0xc(%ebp)
f0105733:	e8 06 fd ff ff       	call   f010543e <sched_remove_new>
f0105738:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready0(ptr_env);
f010573b:	83 ec 0c             	sub    $0xc,%esp
f010573e:	ff 75 f4             	pushl  -0xc(%ebp)
f0105741:	e8 a7 fa ff ff       	call   f01051ed <sched_insert_ready0>
f0105746:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (mycpu()->scheduler_status == SCH_STOPPED)
f0105749:	e8 af 19 00 00       	call   f01070fd <mycpu>
f010574e:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
f0105754:	85 c0                	test   %eax,%eax
f0105756:	75 46                	jne    f010579e <sched_run_env+0xa3>
			{
				release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0105758:	83 ec 0c             	sub    $0xc,%esp
f010575b:	68 00 fe 59 f0       	push   $0xf059fe00
f0105760:	e8 43 94 00 00       	call   f010eba8 <release_spinlock>
f0105765:	83 c4 10             	add    $0x10,%esp
				  //cprintf("\n[SCHED_RUN_ENV] release#1: lock status after = %d\n", qlock.locked);
				fos_scheduler();
f0105768:	e8 45 10 00 00       	call   f01067b2 <fos_scheduler>
void sched_run_env(uint32 envId)
{
	  //cprintf("\n[SCHED_RUN_ENV] acquire: lock status before acquire = %d\n", qlock.locked);
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f010576d:	a1 78 fe 59 f0       	mov    0xf059fe78,%eax
f0105772:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105775:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105779:	74 08                	je     f0105783 <sched_run_env+0x88>
f010577b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010577e:	8b 40 08             	mov    0x8(%eax),%eax
f0105781:	eb 05                	jmp    f0105788 <sched_run_env+0x8d>
f0105783:	b8 00 00 00 00       	mov    $0x0,%eax
f0105788:	a3 78 fe 59 f0       	mov    %eax,0xf059fe78
f010578d:	a1 78 fe 59 f0       	mov    0xf059fe78,%eax
f0105792:	85 c0                	test   %eax,%eax
f0105794:	75 8c                	jne    f0105722 <sched_run_env+0x27>
f0105796:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010579a:	75 86                	jne    f0105722 <sched_run_env+0x27>
f010579c:	eb 01                	jmp    f010579f <sched_run_env+0xa4>
			}
			else
			{
				//can be invoked from a running environment via sys_run_env(), so just release the lock and resume
			}
			break;
f010579e:	90                   	nop
		}
	}
	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f010579f:	83 ec 0c             	sub    $0xc,%esp
f01057a2:	68 00 fe 59 f0       	push   $0xf059fe00
f01057a7:	e8 fc 93 00 00       	call   f010eba8 <release_spinlock>
f01057ac:	83 c4 10             	add    $0x10,%esp
	  //cprintf("\n[SCHED_RUN_ENV] release#2: lock status after = %d\n", qlock.locked);
}
f01057af:	90                   	nop
f01057b0:	c9                   	leave  
f01057b1:	c3                   	ret    

f01057b2 <sched_exit_env>:

//=================================================
// [10] Exit the given EnvID:
//=================================================
void sched_exit_env(uint32 envId)
{
f01057b2:	55                   	push   %ebp
f01057b3:	89 e5                	mov    %esp,%ebp
f01057b5:	83 ec 28             	sub    $0x28,%esp
	bool lock_already_held = holding_spinlock(&ProcessQueues.qlock);
f01057b8:	83 ec 0c             	sub    $0xc,%esp
f01057bb:	68 00 fe 59 f0       	push   $0xf059fe00
f01057c0:	e8 75 95 00 00       	call   f010ed3a <holding_spinlock>
f01057c5:	83 c4 10             	add    $0x10,%esp
f01057c8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	  //cprintf("\n[SCHED_EXIT_ENV] acquire: lock status before acquire = %d\n", qlock.locked);
	if (!lock_already_held)
f01057cb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01057cf:	75 10                	jne    f01057e1 <sched_exit_env+0x2f>
	{
		acquire_spinlock(&ProcessQueues.qlock);
f01057d1:	83 ec 0c             	sub    $0xc,%esp
f01057d4:	68 00 fe 59 f0       	push   $0xf059fe00
f01057d9:	e8 43 93 00 00       	call   f010eb21 <acquire_spinlock>
f01057de:	83 c4 10             	add    $0x10,%esp
	}
	struct Env* ptr_env=NULL;
f01057e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01057e8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01057ef:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01057f3:	75 59                	jne    f010584e <sched_exit_env+0x9c>
	{
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f01057f5:	a1 70 fe 59 f0       	mov    0xf059fe70,%eax
f01057fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01057fd:	eb 28                	jmp    f0105827 <sched_exit_env+0x75>
		{
			if(ptr_env->env_id == envId)
f01057ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105802:	8b 40 10             	mov    0x10(%eax),%eax
f0105805:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105808:	75 15                	jne    f010581f <sched_exit_env+0x6d>
			{
				sched_remove_new(ptr_env);
f010580a:	83 ec 0c             	sub    $0xc,%esp
f010580d:	ff 75 f4             	pushl  -0xc(%ebp)
f0105810:	e8 29 fc ff ff       	call   f010543e <sched_remove_new>
f0105815:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105818:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	}
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f010581f:	a1 78 fe 59 f0       	mov    0xf059fe78,%eax
f0105824:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105827:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010582b:	74 08                	je     f0105835 <sched_exit_env+0x83>
f010582d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105830:	8b 40 08             	mov    0x8(%eax),%eax
f0105833:	eb 05                	jmp    f010583a <sched_exit_env+0x88>
f0105835:	b8 00 00 00 00       	mov    $0x0,%eax
f010583a:	a3 78 fe 59 f0       	mov    %eax,0xf059fe78
f010583f:	a1 78 fe 59 f0       	mov    0xf059fe78,%eax
f0105844:	85 c0                	test   %eax,%eax
f0105846:	75 b7                	jne    f01057ff <sched_exit_env+0x4d>
f0105848:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010584c:	75 b1                	jne    f01057ff <sched_exit_env+0x4d>
				found = 1;
				//			return;
			}
		}
	}
	if (!found)
f010584e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105852:	0f 85 89 01 00 00    	jne    f01059e1 <sched_exit_env+0x22f>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105858:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010585f:	e9 69 01 00 00       	jmp    f01059cd <sched_exit_env+0x21b>
		{
			if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
f0105864:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105867:	83 c0 09             	add    $0x9,%eax
f010586a:	c1 e0 04             	shl    $0x4,%eax
f010586d:	05 00 fe 59 f0       	add    $0xf059fe00,%eax
f0105872:	8b 00                	mov    (%eax),%eax
f0105874:	85 c0                	test   %eax,%eax
f0105876:	0f 84 48 01 00 00    	je     f01059c4 <sched_exit_env+0x212>
			{
				ptr_env=NULL;
f010587c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f0105883:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105886:	83 c0 09             	add    $0x9,%eax
f0105889:	c1 e0 04             	shl    $0x4,%eax
f010588c:	05 00 fe 59 f0       	add    $0xf059fe00,%eax
f0105891:	8b 00                	mov    (%eax),%eax
f0105893:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105896:	e9 e3 00 00 00       	jmp    f010597e <sched_exit_env+0x1cc>
				{
					if(ptr_env->env_id == envId)
f010589b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010589e:	8b 40 10             	mov    0x10(%eax),%eax
f01058a1:	3b 45 08             	cmp    0x8(%ebp),%eax
f01058a4:	0f 85 c1 00 00 00    	jne    f010596b <sched_exit_env+0x1b9>
					{
						LIST_REMOVE(&(ProcessQueues.env_ready_queues[i]), ptr_env);
f01058aa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01058ae:	75 17                	jne    f01058c7 <sched_exit_env+0x115>
f01058b0:	83 ec 04             	sub    $0x4,%esp
f01058b3:	68 7f 6b 12 f0       	push   $0xf0126b7f
f01058b8:	68 44 01 00 00       	push   $0x144
f01058bd:	68 43 6b 12 f0       	push   $0xf0126b43
f01058c2:	e8 53 aa ff ff       	call   f010031a <_panic>
f01058c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058ca:	8b 40 08             	mov    0x8(%eax),%eax
f01058cd:	85 c0                	test   %eax,%eax
f01058cf:	74 11                	je     f01058e2 <sched_exit_env+0x130>
f01058d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058d4:	8b 40 08             	mov    0x8(%eax),%eax
f01058d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01058da:	8b 52 0c             	mov    0xc(%edx),%edx
f01058dd:	89 50 0c             	mov    %edx,0xc(%eax)
f01058e0:	eb 17                	jmp    f01058f9 <sched_exit_env+0x147>
f01058e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058e5:	8b 40 0c             	mov    0xc(%eax),%eax
f01058e8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01058eb:	83 c2 09             	add    $0x9,%edx
f01058ee:	c1 e2 04             	shl    $0x4,%edx
f01058f1:	81 c2 04 fe 59 f0    	add    $0xf059fe04,%edx
f01058f7:	89 02                	mov    %eax,(%edx)
f01058f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058fc:	8b 40 0c             	mov    0xc(%eax),%eax
f01058ff:	85 c0                	test   %eax,%eax
f0105901:	74 11                	je     f0105914 <sched_exit_env+0x162>
f0105903:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105906:	8b 40 0c             	mov    0xc(%eax),%eax
f0105909:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010590c:	8b 52 08             	mov    0x8(%edx),%edx
f010590f:	89 50 08             	mov    %edx,0x8(%eax)
f0105912:	eb 17                	jmp    f010592b <sched_exit_env+0x179>
f0105914:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105917:	8b 40 08             	mov    0x8(%eax),%eax
f010591a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010591d:	83 c2 09             	add    $0x9,%edx
f0105920:	c1 e2 04             	shl    $0x4,%edx
f0105923:	81 c2 00 fe 59 f0    	add    $0xf059fe00,%edx
f0105929:	89 02                	mov    %eax,(%edx)
f010592b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010592e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f0105935:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105938:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f010593f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105942:	83 c0 09             	add    $0x9,%eax
f0105945:	c1 e0 04             	shl    $0x4,%eax
f0105948:	05 0c fe 59 f0       	add    $0xf059fe0c,%eax
f010594d:	8b 00                	mov    (%eax),%eax
f010594f:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105952:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105955:	83 c0 09             	add    $0x9,%eax
f0105958:	c1 e0 04             	shl    $0x4,%eax
f010595b:	05 0c fe 59 f0       	add    $0xf059fe0c,%eax
f0105960:	89 10                	mov    %edx,(%eax)
						found = 1;
f0105962:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105969:	eb 59                	jmp    f01059c4 <sched_exit_env+0x212>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f010596b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010596e:	83 c0 09             	add    $0x9,%eax
f0105971:	c1 e0 04             	shl    $0x4,%eax
f0105974:	05 08 fe 59 f0       	add    $0xf059fe08,%eax
f0105979:	8b 00                	mov    (%eax),%eax
f010597b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010597e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105982:	74 08                	je     f010598c <sched_exit_env+0x1da>
f0105984:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105987:	8b 40 08             	mov    0x8(%eax),%eax
f010598a:	eb 05                	jmp    f0105991 <sched_exit_env+0x1df>
f010598c:	b8 00 00 00 00       	mov    $0x0,%eax
f0105991:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105994:	83 c2 09             	add    $0x9,%edx
f0105997:	c1 e2 04             	shl    $0x4,%edx
f010599a:	81 c2 08 fe 59 f0    	add    $0xf059fe08,%edx
f01059a0:	89 02                	mov    %eax,(%edx)
f01059a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059a5:	83 c0 09             	add    $0x9,%eax
f01059a8:	c1 e0 04             	shl    $0x4,%eax
f01059ab:	05 08 fe 59 f0       	add    $0xf059fe08,%eax
f01059b0:	8b 00                	mov    (%eax),%eax
f01059b2:	85 c0                	test   %eax,%eax
f01059b4:	0f 85 e1 fe ff ff    	jne    f010589b <sched_exit_env+0xe9>
f01059ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01059be:	0f 85 d7 fe ff ff    	jne    f010589b <sched_exit_env+0xe9>
						found = 1;
						break;
					}
				}
			}
			if (found) break;
f01059c4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01059c8:	75 16                	jne    f01059e0 <sched_exit_env+0x22e>
			}
		}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01059ca:	ff 45 ec             	incl   -0x14(%ebp)
f01059cd:	a0 00 2b 5a f0       	mov    0xf05a2b00,%al
f01059d2:	0f b6 c0             	movzbl %al,%eax
f01059d5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01059d8:	0f 8f 86 fe ff ff    	jg     f0105864 <sched_exit_env+0xb2>
f01059de:	eb 01                	jmp    f01059e1 <sched_exit_env+0x22f>
						found = 1;
						break;
					}
				}
			}
			if (found) break;
f01059e0:	90                   	nop
		}
	}
	struct Env* cur_env = get_cpu_proc();
f01059e1:	e8 8a 4d 00 00       	call   f010a770 <get_cpu_proc>
f01059e6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	assert(cur_env != NULL);
f01059e9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01059ed:	75 19                	jne    f0105a08 <sched_exit_env+0x256>
f01059ef:	68 7b 6c 12 f0       	push   $0xf0126c7b
f01059f4:	68 2e 6b 12 f0       	push   $0xf0126b2e
f01059f9:	68 4e 01 00 00       	push   $0x14e
f01059fe:	68 43 6b 12 f0       	push   $0xf0126b43
f0105a03:	e8 12 a9 ff ff       	call   f010031a <_panic>
	if (!found)
f0105a08:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105a0c:	75 18                	jne    f0105a26 <sched_exit_env+0x274>
	{
		if (cur_env->env_id == envId)
f0105a0e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105a11:	8b 40 10             	mov    0x10(%eax),%eax
f0105a14:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105a17:	75 0d                	jne    f0105a26 <sched_exit_env+0x274>
		{
			ptr_env = cur_env;
f0105a19:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105a1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f0105a1f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f0105a26:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105a2a:	74 1e                	je     f0105a4a <sched_exit_env+0x298>
	{
		sched_insert_exit(ptr_env);
f0105a2c:	83 ec 0c             	sub    $0xc,%esp
f0105a2f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105a32:	e8 f7 fa ff ff       	call   f010552e <sched_insert_exit>
f0105a37:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back
		//to an exited env. Status already set to EXIT in the sched_insert_exit()
		//It's the fos_scheduler task to release the lock on the Qs after context_switch to it from
		//this process
		if (cur_env->env_id == envId)
f0105a3a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105a3d:	8b 40 10             	mov    0x10(%eax),%eax
f0105a40:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105a43:	75 05                	jne    f0105a4a <sched_exit_env+0x298>
		{
			//2024: Replaced by sched() which call context switch
			//fos_scheduler();
			sched();
f0105a45:	e8 b3 4e 00 00       	call   f010a8fd <sched>
		}
	}
	if (!lock_already_held)
f0105a4a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0105a4e:	75 10                	jne    f0105a60 <sched_exit_env+0x2ae>
	{
		release_spinlock(&ProcessQueues.qlock);
f0105a50:	83 ec 0c             	sub    $0xc,%esp
f0105a53:	68 00 fe 59 f0       	push   $0xf059fe00
f0105a58:	e8 4b 91 00 00       	call   f010eba8 <release_spinlock>
f0105a5d:	83 c4 10             	add    $0x10,%esp
	}
	//cprintf("\n[SCHED_EXIT_ENV] release: lock status after = %d\n", qlock.locked);
}
f0105a60:	90                   	nop
f0105a61:	c9                   	leave  
f0105a62:	c3                   	ret    

f0105a63 <sched_kill_env>:
/*2015*/
//=================================================
// [11] KILL the given EnvID:
//=================================================
void sched_kill_env(uint32 envId)
{
f0105a63:	55                   	push   %ebp
f0105a64:	89 e5                	mov    %esp,%ebp
f0105a66:	83 ec 18             	sub    $0x18,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0105a69:	83 ec 0c             	sub    $0xc,%esp
f0105a6c:	68 00 fe 59 f0       	push   $0xf059fe00
f0105a71:	e8 ab 90 00 00       	call   f010eb21 <acquire_spinlock>
f0105a76:	83 c4 10             	add    $0x10,%esp
	struct Env* ptr_env=NULL;
f0105a79:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0105a80:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105a87:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105a8b:	75 79                	jne    f0105b06 <sched_kill_env+0xa3>
	{
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f0105a8d:	a1 70 fe 59 f0       	mov    0xf059fe70,%eax
f0105a92:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105a95:	eb 48                	jmp    f0105adf <sched_kill_env+0x7c>
		{
			if(ptr_env->env_id == envId)
f0105a97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a9a:	8b 40 10             	mov    0x10(%eax),%eax
f0105a9d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105aa0:	75 35                	jne    f0105ad7 <sched_kill_env+0x74>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0105aa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105aa5:	8d 50 20             	lea    0x20(%eax),%edx
f0105aa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105aab:	8b 40 10             	mov    0x10(%eax),%eax
f0105aae:	83 ec 04             	sub    $0x4,%esp
f0105ab1:	52                   	push   %edx
f0105ab2:	50                   	push   %eax
f0105ab3:	68 8c 6c 12 f0       	push   $0xf0126c8c
f0105ab8:	e8 af b4 ff ff       	call   f0100f6c <cprintf>
f0105abd:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105ac0:	83 ec 0c             	sub    $0xc,%esp
f0105ac3:	ff 75 f4             	pushl  -0xc(%ebp)
f0105ac6:	e8 73 f9 ff ff       	call   f010543e <sched_remove_new>
f0105acb:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105ace:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
				break;
f0105ad5:	eb 2f                	jmp    f0105b06 <sched_kill_env+0xa3>
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f0105ad7:	a1 78 fe 59 f0       	mov    0xf059fe78,%eax
f0105adc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105adf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ae3:	74 08                	je     f0105aed <sched_kill_env+0x8a>
f0105ae5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ae8:	8b 40 08             	mov    0x8(%eax),%eax
f0105aeb:	eb 05                	jmp    f0105af2 <sched_kill_env+0x8f>
f0105aed:	b8 00 00 00 00       	mov    $0x0,%eax
f0105af2:	a3 78 fe 59 f0       	mov    %eax,0xf059fe78
f0105af7:	a1 78 fe 59 f0       	mov    0xf059fe78,%eax
f0105afc:	85 c0                	test   %eax,%eax
f0105afe:	75 97                	jne    f0105a97 <sched_kill_env+0x34>
f0105b00:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105b04:	75 91                	jne    f0105a97 <sched_kill_env+0x34>
				found = 1;
				break;
			}
		}
	}
	if (!found)
f0105b06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105b0a:	0f 85 a7 01 00 00    	jne    f0105cb7 <sched_kill_env+0x254>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105b10:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105b17:	e9 87 01 00 00       	jmp    f0105ca3 <sched_kill_env+0x240>
		{
			if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
f0105b1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b1f:	83 c0 09             	add    $0x9,%eax
f0105b22:	c1 e0 04             	shl    $0x4,%eax
f0105b25:	05 00 fe 59 f0       	add    $0xf059fe00,%eax
f0105b2a:	8b 00                	mov    (%eax),%eax
f0105b2c:	85 c0                	test   %eax,%eax
f0105b2e:	0f 84 66 01 00 00    	je     f0105c9a <sched_kill_env+0x237>
			{
				ptr_env=NULL;
f0105b34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f0105b3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b3e:	83 c0 09             	add    $0x9,%eax
f0105b41:	c1 e0 04             	shl    $0x4,%eax
f0105b44:	05 00 fe 59 f0       	add    $0xf059fe00,%eax
f0105b49:	8b 00                	mov    (%eax),%eax
f0105b4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b4e:	e9 01 01 00 00       	jmp    f0105c54 <sched_kill_env+0x1f1>
				{
					if(ptr_env->env_id == envId)
f0105b53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b56:	8b 40 10             	mov    0x10(%eax),%eax
f0105b59:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105b5c:	0f 85 df 00 00 00    	jne    f0105c41 <sched_kill_env+0x1de>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105b62:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b65:	8d 50 20             	lea    0x20(%eax),%edx
f0105b68:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b6b:	8b 40 10             	mov    0x10(%eax),%eax
f0105b6e:	ff 75 ec             	pushl  -0x14(%ebp)
f0105b71:	52                   	push   %edx
f0105b72:	50                   	push   %eax
f0105b73:	68 b4 6c 12 f0       	push   $0xf0126cb4
f0105b78:	e8 ef b3 ff ff       	call   f0100f6c <cprintf>
f0105b7d:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(ProcessQueues.env_ready_queues[i]), ptr_env);
f0105b80:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105b84:	75 17                	jne    f0105b9d <sched_kill_env+0x13a>
f0105b86:	83 ec 04             	sub    $0x4,%esp
f0105b89:	68 7f 6b 12 f0       	push   $0xf0126b7f
f0105b8e:	68 91 01 00 00       	push   $0x191
f0105b93:	68 43 6b 12 f0       	push   $0xf0126b43
f0105b98:	e8 7d a7 ff ff       	call   f010031a <_panic>
f0105b9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ba0:	8b 40 08             	mov    0x8(%eax),%eax
f0105ba3:	85 c0                	test   %eax,%eax
f0105ba5:	74 11                	je     f0105bb8 <sched_kill_env+0x155>
f0105ba7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105baa:	8b 40 08             	mov    0x8(%eax),%eax
f0105bad:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105bb0:	8b 52 0c             	mov    0xc(%edx),%edx
f0105bb3:	89 50 0c             	mov    %edx,0xc(%eax)
f0105bb6:	eb 17                	jmp    f0105bcf <sched_kill_env+0x16c>
f0105bb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105bbb:	8b 40 0c             	mov    0xc(%eax),%eax
f0105bbe:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105bc1:	83 c2 09             	add    $0x9,%edx
f0105bc4:	c1 e2 04             	shl    $0x4,%edx
f0105bc7:	81 c2 04 fe 59 f0    	add    $0xf059fe04,%edx
f0105bcd:	89 02                	mov    %eax,(%edx)
f0105bcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105bd2:	8b 40 0c             	mov    0xc(%eax),%eax
f0105bd5:	85 c0                	test   %eax,%eax
f0105bd7:	74 11                	je     f0105bea <sched_kill_env+0x187>
f0105bd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105bdc:	8b 40 0c             	mov    0xc(%eax),%eax
f0105bdf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105be2:	8b 52 08             	mov    0x8(%edx),%edx
f0105be5:	89 50 08             	mov    %edx,0x8(%eax)
f0105be8:	eb 17                	jmp    f0105c01 <sched_kill_env+0x19e>
f0105bea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105bed:	8b 40 08             	mov    0x8(%eax),%eax
f0105bf0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105bf3:	83 c2 09             	add    $0x9,%edx
f0105bf6:	c1 e2 04             	shl    $0x4,%edx
f0105bf9:	81 c2 00 fe 59 f0    	add    $0xf059fe00,%edx
f0105bff:	89 02                	mov    %eax,(%edx)
f0105c01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c04:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f0105c0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c0e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0105c15:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c18:	83 c0 09             	add    $0x9,%eax
f0105c1b:	c1 e0 04             	shl    $0x4,%eax
f0105c1e:	05 0c fe 59 f0       	add    $0xf059fe0c,%eax
f0105c23:	8b 00                	mov    (%eax),%eax
f0105c25:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105c28:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c2b:	83 c0 09             	add    $0x9,%eax
f0105c2e:	c1 e0 04             	shl    $0x4,%eax
f0105c31:	05 0c fe 59 f0       	add    $0xf059fe0c,%eax
f0105c36:	89 10                	mov    %edx,(%eax)
						found = 1;
f0105c38:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105c3f:	eb 59                	jmp    f0105c9a <sched_kill_env+0x237>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f0105c41:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c44:	83 c0 09             	add    $0x9,%eax
f0105c47:	c1 e0 04             	shl    $0x4,%eax
f0105c4a:	05 08 fe 59 f0       	add    $0xf059fe08,%eax
f0105c4f:	8b 00                	mov    (%eax),%eax
f0105c51:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105c54:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c58:	74 08                	je     f0105c62 <sched_kill_env+0x1ff>
f0105c5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c5d:	8b 40 08             	mov    0x8(%eax),%eax
f0105c60:	eb 05                	jmp    f0105c67 <sched_kill_env+0x204>
f0105c62:	b8 00 00 00 00       	mov    $0x0,%eax
f0105c67:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105c6a:	83 c2 09             	add    $0x9,%edx
f0105c6d:	c1 e2 04             	shl    $0x4,%edx
f0105c70:	81 c2 08 fe 59 f0    	add    $0xf059fe08,%edx
f0105c76:	89 02                	mov    %eax,(%edx)
f0105c78:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c7b:	83 c0 09             	add    $0x9,%eax
f0105c7e:	c1 e0 04             	shl    $0x4,%eax
f0105c81:	05 08 fe 59 f0       	add    $0xf059fe08,%eax
f0105c86:	8b 00                	mov    (%eax),%eax
f0105c88:	85 c0                	test   %eax,%eax
f0105c8a:	0f 85 c3 fe ff ff    	jne    f0105b53 <sched_kill_env+0xf0>
f0105c90:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c94:	0f 85 b9 fe ff ff    	jne    f0105b53 <sched_kill_env+0xf0>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0105c9a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105c9e:	75 16                	jne    f0105cb6 <sched_kill_env+0x253>
			}
		}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105ca0:	ff 45 ec             	incl   -0x14(%ebp)
f0105ca3:	a0 00 2b 5a f0       	mov    0xf05a2b00,%al
f0105ca8:	0f b6 c0             	movzbl %al,%eax
f0105cab:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0105cae:	0f 8f 68 fe ff ff    	jg     f0105b1c <sched_kill_env+0xb9>
f0105cb4:	eb 01                	jmp    f0105cb7 <sched_kill_env+0x254>
						break;
					}
				}
			}
			if (found)
				break;
f0105cb6:	90                   	nop
		}
	}
	if (!found)
f0105cb7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105cbb:	0f 85 80 00 00 00    	jne    f0105d41 <sched_kill_env+0x2de>
	{
		ptr_env=NULL;
f0105cc1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f0105cc8:	a1 80 fe 59 f0       	mov    0xf059fe80,%eax
f0105ccd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105cd0:	eb 48                	jmp    f0105d1a <sched_kill_env+0x2b7>
		{
			if(ptr_env->env_id == envId)
f0105cd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105cd5:	8b 40 10             	mov    0x10(%eax),%eax
f0105cd8:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105cdb:	75 35                	jne    f0105d12 <sched_kill_env+0x2af>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f0105cdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ce0:	8d 50 20             	lea    0x20(%eax),%edx
f0105ce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ce6:	8b 40 10             	mov    0x10(%eax),%eax
f0105ce9:	83 ec 04             	sub    $0x4,%esp
f0105cec:	52                   	push   %edx
f0105ced:	50                   	push   %eax
f0105cee:	68 e0 6c 12 f0       	push   $0xf0126ce0
f0105cf3:	e8 74 b2 ff ff       	call   f0100f6c <cprintf>
f0105cf8:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f0105cfb:	83 ec 0c             	sub    $0xc,%esp
f0105cfe:	ff 75 f4             	pushl  -0xc(%ebp)
f0105d01:	e8 af f8 ff ff       	call   f01055b5 <sched_remove_exit>
f0105d06:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105d09:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
				break;
f0105d10:	eb 2f                	jmp    f0105d41 <sched_kill_env+0x2de>
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f0105d12:	a1 88 fe 59 f0       	mov    0xf059fe88,%eax
f0105d17:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105d1a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d1e:	74 08                	je     f0105d28 <sched_kill_env+0x2c5>
f0105d20:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d23:	8b 40 08             	mov    0x8(%eax),%eax
f0105d26:	eb 05                	jmp    f0105d2d <sched_kill_env+0x2ca>
f0105d28:	b8 00 00 00 00       	mov    $0x0,%eax
f0105d2d:	a3 88 fe 59 f0       	mov    %eax,0xf059fe88
f0105d32:	a1 88 fe 59 f0       	mov    0xf059fe88,%eax
f0105d37:	85 c0                	test   %eax,%eax
f0105d39:	75 97                	jne    f0105cd2 <sched_kill_env+0x26f>
f0105d3b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d3f:	75 91                	jne    f0105cd2 <sched_kill_env+0x26f>
				found = 1;
				break;
			}
		}
	}
	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0105d41:	83 ec 0c             	sub    $0xc,%esp
f0105d44:	68 00 fe 59 f0       	push   $0xf059fe00
f0105d49:	e8 5a 8e 00 00       	call   f010eba8 <release_spinlock>
f0105d4e:	83 c4 10             	add    $0x10,%esp

	if (found)
f0105d51:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105d55:	74 23                	je     f0105d7a <sched_kill_env+0x317>
	{
		env_free(ptr_env);
f0105d57:	83 ec 0c             	sub    $0xc,%esp
f0105d5a:	ff 75 f4             	pushl  -0xc(%ebp)
f0105d5d:	e8 c6 49 00 00       	call   f010a728 <env_free>
f0105d62:	83 c4 10             	add    $0x10,%esp
		cprintf("DONE\n");
f0105d65:	83 ec 0c             	sub    $0xc,%esp
f0105d68:	68 06 6d 12 f0       	push   $0xf0126d06
f0105d6d:	e8 fa b1 ff ff       	call   f0100f6c <cprintf>
f0105d72:	83 c4 10             	add    $0x10,%esp
			//fos_scheduler();
			sched();
		}
	}

}
f0105d75:	e9 a4 00 00 00       	jmp    f0105e1e <sched_kill_env+0x3bb>
		env_free(ptr_env);
		cprintf("DONE\n");
	}
	else
	{
		struct Env* cur_env = get_cpu_proc();
f0105d7a:	e8 f1 49 00 00       	call   f010a770 <get_cpu_proc>
f0105d7f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		assert(cur_env != NULL);
f0105d82:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0105d86:	75 19                	jne    f0105da1 <sched_kill_env+0x33e>
f0105d88:	68 7b 6c 12 f0       	push   $0xf0126c7b
f0105d8d:	68 2e 6b 12 f0       	push   $0xf0126b2e
f0105d92:	68 b3 01 00 00       	push   $0x1b3
f0105d97:	68 43 6b 12 f0       	push   $0xf0126b43
f0105d9c:	e8 79 a5 ff ff       	call   f010031a <_panic>

		if (cur_env->env_id == envId)
f0105da1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105da4:	8b 40 10             	mov    0x10(%eax),%eax
f0105da7:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105daa:	75 72                	jne    f0105e1e <sched_kill_env+0x3bb>
		{
			ptr_env = cur_env;
f0105dac:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105daf:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_status == ENV_RUNNING);
f0105db2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105db5:	8b 40 18             	mov    0x18(%eax),%eax
f0105db8:	83 f8 02             	cmp    $0x2,%eax
f0105dbb:	74 19                	je     f0105dd6 <sched_kill_env+0x373>
f0105dbd:	68 0c 6d 12 f0       	push   $0xf0126d0c
f0105dc2:	68 2e 6b 12 f0       	push   $0xf0126b2e
f0105dc7:	68 b8 01 00 00       	push   $0x1b8
f0105dcc:	68 43 6b 12 f0       	push   $0xf0126b43
f0105dd1:	e8 44 a5 ff ff       	call   f010031a <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105dd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105dd9:	8d 50 20             	lea    0x20(%eax),%edx
f0105ddc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ddf:	8b 40 10             	mov    0x10(%eax),%eax
f0105de2:	83 ec 04             	sub    $0x4,%esp
f0105de5:	52                   	push   %edx
f0105de6:	50                   	push   %eax
f0105de7:	68 30 6d 12 f0       	push   $0xf0126d30
f0105dec:	e8 7b b1 ff ff       	call   f0100f6c <cprintf>
f0105df1:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105df4:	83 ec 0c             	sub    $0xc,%esp
f0105df7:	ff 75 f4             	pushl  -0xc(%ebp)
f0105dfa:	e8 29 49 00 00       	call   f010a728 <env_free>
f0105dff:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105e02:	83 ec 0c             	sub    $0xc,%esp
f0105e05:	68 06 6d 12 f0       	push   $0xf0126d06
f0105e0a:	e8 5d b1 ff ff       	call   f0100f6c <cprintf>
f0105e0f:	83 c4 10             	add    $0x10,%esp
			found = 1;
f0105e12:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//this process
			/*2024: replaced by sched() to apply context_switch*/
			//lcr3(phys_page_directory);
			//switchkvm();
			//fos_scheduler();
			sched();
f0105e19:	e8 df 4a 00 00       	call   f010a8fd <sched>
		}
	}

}
f0105e1e:	90                   	nop
f0105e1f:	c9                   	leave  
f0105e20:	c3                   	ret    

f0105e21 <sched_print_all>:

//=================================================
// [12] PRINT ALL Envs from all queues:
//=================================================
void sched_print_all()
{
f0105e21:	55                   	push   %ebp
f0105e22:	89 e5                	mov    %esp,%ebp
f0105e24:	83 ec 18             	sub    $0x18,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0105e27:	83 ec 0c             	sub    $0xc,%esp
f0105e2a:	68 00 fe 59 f0       	push   $0xf059fe00
f0105e2f:	e8 ed 8c 00 00       	call   f010eb21 <acquire_spinlock>
f0105e34:	83 c4 10             	add    $0x10,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&ProcessQueues.env_new_queue))
f0105e37:	a1 70 fe 59 f0       	mov    0xf059fe70,%eax
f0105e3c:	85 c0                	test   %eax,%eax
f0105e3e:	74 69                	je     f0105ea9 <sched_print_all+0x88>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0105e40:	83 ec 0c             	sub    $0xc,%esp
f0105e43:	68 5c 6d 12 f0       	push   $0xf0126d5c
f0105e48:	e8 1f b1 ff ff       	call   f0100f6c <cprintf>
f0105e4d:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f0105e50:	a1 70 fe 59 f0       	mov    0xf059fe70,%eax
f0105e55:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105e58:	eb 26                	jmp    f0105e80 <sched_print_all+0x5f>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105e5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e5d:	8d 50 20             	lea    0x20(%eax),%edx
f0105e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e63:	8b 40 10             	mov    0x10(%eax),%eax
f0105e66:	83 ec 04             	sub    $0x4,%esp
f0105e69:	52                   	push   %edx
f0105e6a:	50                   	push   %eax
f0105e6b:	68 7e 6d 12 f0       	push   $0xf0126d7e
f0105e70:	e8 f7 b0 ff ff       	call   f0100f6c <cprintf>
f0105e75:	83 c4 10             	add    $0x10,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&ProcessQueues.env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f0105e78:	a1 78 fe 59 f0       	mov    0xf059fe78,%eax
f0105e7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105e80:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e84:	74 08                	je     f0105e8e <sched_print_all+0x6d>
f0105e86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e89:	8b 40 08             	mov    0x8(%eax),%eax
f0105e8c:	eb 05                	jmp    f0105e93 <sched_print_all+0x72>
f0105e8e:	b8 00 00 00 00       	mov    $0x0,%eax
f0105e93:	a3 78 fe 59 f0       	mov    %eax,0xf059fe78
f0105e98:	a1 78 fe 59 f0       	mov    0xf059fe78,%eax
f0105e9d:	85 c0                	test   %eax,%eax
f0105e9f:	75 b9                	jne    f0105e5a <sched_print_all+0x39>
f0105ea1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ea5:	75 b3                	jne    f0105e5a <sched_print_all+0x39>
f0105ea7:	eb 10                	jmp    f0105eb9 <sched_print_all+0x98>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0105ea9:	83 ec 0c             	sub    $0xc,%esp
f0105eac:	68 88 6d 12 f0       	push   $0xf0126d88
f0105eb1:	e8 b6 b0 ff ff       	call   f0100f6c <cprintf>
f0105eb6:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0105eb9:	83 ec 0c             	sub    $0xc,%esp
f0105ebc:	68 a4 6d 12 f0       	push   $0xf0126da4
f0105ec1:	e8 a6 b0 ff ff       	call   f0100f6c <cprintf>
f0105ec6:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105ec9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105ed0:	e9 d7 00 00 00       	jmp    f0105fac <sched_print_all+0x18b>
	{
		if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
f0105ed5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105ed8:	83 c0 09             	add    $0x9,%eax
f0105edb:	c1 e0 04             	shl    $0x4,%eax
f0105ede:	05 00 fe 59 f0       	add    $0xf059fe00,%eax
f0105ee3:	8b 00                	mov    (%eax),%eax
f0105ee5:	85 c0                	test   %eax,%eax
f0105ee7:	0f 84 99 00 00 00    	je     f0105f86 <sched_print_all+0x165>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0105eed:	83 ec 08             	sub    $0x8,%esp
f0105ef0:	ff 75 f0             	pushl  -0x10(%ebp)
f0105ef3:	68 d8 6d 12 f0       	push   $0xf0126dd8
f0105ef8:	e8 6f b0 ff ff       	call   f0100f6c <cprintf>
f0105efd:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f0105f00:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f03:	83 c0 09             	add    $0x9,%eax
f0105f06:	c1 e0 04             	shl    $0x4,%eax
f0105f09:	05 00 fe 59 f0       	add    $0xf059fe00,%eax
f0105f0e:	8b 00                	mov    (%eax),%eax
f0105f10:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105f13:	eb 31                	jmp    f0105f46 <sched_print_all+0x125>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105f15:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f18:	8d 50 20             	lea    0x20(%eax),%edx
f0105f1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f1e:	8b 40 10             	mov    0x10(%eax),%eax
f0105f21:	83 ec 04             	sub    $0x4,%esp
f0105f24:	52                   	push   %edx
f0105f25:	50                   	push   %eax
f0105f26:	68 7e 6d 12 f0       	push   $0xf0126d7e
f0105f2b:	e8 3c b0 ff ff       	call   f0100f6c <cprintf>
f0105f30:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f0105f33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f36:	83 c0 09             	add    $0x9,%eax
f0105f39:	c1 e0 04             	shl    $0x4,%eax
f0105f3c:	05 08 fe 59 f0       	add    $0xf059fe08,%eax
f0105f41:	8b 00                	mov    (%eax),%eax
f0105f43:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105f46:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f4a:	74 08                	je     f0105f54 <sched_print_all+0x133>
f0105f4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f4f:	8b 40 08             	mov    0x8(%eax),%eax
f0105f52:	eb 05                	jmp    f0105f59 <sched_print_all+0x138>
f0105f54:	b8 00 00 00 00       	mov    $0x0,%eax
f0105f59:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105f5c:	83 c2 09             	add    $0x9,%edx
f0105f5f:	c1 e2 04             	shl    $0x4,%edx
f0105f62:	81 c2 08 fe 59 f0    	add    $0xf059fe08,%edx
f0105f68:	89 02                	mov    %eax,(%edx)
f0105f6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f6d:	83 c0 09             	add    $0x9,%eax
f0105f70:	c1 e0 04             	shl    $0x4,%eax
f0105f73:	05 08 fe 59 f0       	add    $0xf059fe08,%eax
f0105f78:	8b 00                	mov    (%eax),%eax
f0105f7a:	85 c0                	test   %eax,%eax
f0105f7c:	75 97                	jne    f0105f15 <sched_print_all+0xf4>
f0105f7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f82:	75 91                	jne    f0105f15 <sched_print_all+0xf4>
f0105f84:	eb 13                	jmp    f0105f99 <sched_print_all+0x178>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0105f86:	83 ec 08             	sub    $0x8,%esp
f0105f89:	ff 75 f0             	pushl  -0x10(%ebp)
f0105f8c:	68 00 6e 12 f0       	push   $0xf0126e00
f0105f91:	e8 d6 af ff ff       	call   f0100f6c <cprintf>
f0105f96:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105f99:	83 ec 0c             	sub    $0xc,%esp
f0105f9c:	68 a4 6d 12 f0       	push   $0xf0126da4
f0105fa1:	e8 c6 af ff ff       	call   f0100f6c <cprintf>
f0105fa6:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105fa9:	ff 45 f0             	incl   -0x10(%ebp)
f0105fac:	a0 00 2b 5a f0       	mov    0xf05a2b00,%al
f0105fb1:	0f b6 c0             	movzbl %al,%eax
f0105fb4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105fb7:	0f 8f 18 ff ff ff    	jg     f0105ed5 <sched_print_all+0xb4>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&ProcessQueues.env_exit_queue))
f0105fbd:	a1 80 fe 59 f0       	mov    0xf059fe80,%eax
f0105fc2:	85 c0                	test   %eax,%eax
f0105fc4:	74 69                	je     f010602f <sched_print_all+0x20e>
	{
		cprintf("The processes in EXIT queue are:\n");
f0105fc6:	83 ec 0c             	sub    $0xc,%esp
f0105fc9:	68 24 6e 12 f0       	push   $0xf0126e24
f0105fce:	e8 99 af ff ff       	call   f0100f6c <cprintf>
f0105fd3:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f0105fd6:	a1 80 fe 59 f0       	mov    0xf059fe80,%eax
f0105fdb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105fde:	eb 26                	jmp    f0106006 <sched_print_all+0x1e5>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105fe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105fe3:	8d 50 20             	lea    0x20(%eax),%edx
f0105fe6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105fe9:	8b 40 10             	mov    0x10(%eax),%eax
f0105fec:	83 ec 04             	sub    $0x4,%esp
f0105fef:	52                   	push   %edx
f0105ff0:	50                   	push   %eax
f0105ff1:	68 7e 6d 12 f0       	push   $0xf0126d7e
f0105ff6:	e8 71 af ff ff       	call   f0100f6c <cprintf>
f0105ffb:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&ProcessQueues.env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f0105ffe:	a1 88 fe 59 f0       	mov    0xf059fe88,%eax
f0106003:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106006:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010600a:	74 08                	je     f0106014 <sched_print_all+0x1f3>
f010600c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010600f:	8b 40 08             	mov    0x8(%eax),%eax
f0106012:	eb 05                	jmp    f0106019 <sched_print_all+0x1f8>
f0106014:	b8 00 00 00 00       	mov    $0x0,%eax
f0106019:	a3 88 fe 59 f0       	mov    %eax,0xf059fe88
f010601e:	a1 88 fe 59 f0       	mov    0xf059fe88,%eax
f0106023:	85 c0                	test   %eax,%eax
f0106025:	75 b9                	jne    f0105fe0 <sched_print_all+0x1bf>
f0106027:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010602b:	75 b3                	jne    f0105fe0 <sched_print_all+0x1bf>
f010602d:	eb 10                	jmp    f010603f <sched_print_all+0x21e>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f010602f:	83 ec 0c             	sub    $0xc,%esp
f0106032:	68 46 6e 12 f0       	push   $0xf0126e46
f0106037:	e8 30 af ff ff       	call   f0100f6c <cprintf>
f010603c:	83 c4 10             	add    $0x10,%esp
	}
	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f010603f:	83 ec 0c             	sub    $0xc,%esp
f0106042:	68 00 fe 59 f0       	push   $0xf059fe00
f0106047:	e8 5c 8b 00 00       	call   f010eba8 <release_spinlock>
f010604c:	83 c4 10             	add    $0x10,%esp
}
f010604f:	90                   	nop
f0106050:	c9                   	leave  
f0106051:	c3                   	ret    

f0106052 <sched_run_all>:

//=================================================
// [13] MOVE ALL NEW Envs into READY Q:
//=================================================
void sched_run_all()
{
f0106052:	55                   	push   %ebp
f0106053:	89 e5                	mov    %esp,%ebp
f0106055:	83 ec 18             	sub    $0x18,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0106058:	83 ec 0c             	sub    $0xc,%esp
f010605b:	68 00 fe 59 f0       	push   $0xf059fe00
f0106060:	e8 bc 8a 00 00       	call   f010eb21 <acquire_spinlock>
f0106065:	83 c4 10             	add    $0x10,%esp
	struct Env* ptr_env=NULL;
f0106068:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*2023: Changed from LIST_FOREACH into DEQUEUE (based on suggestion from T52 & T73 2023.Term1)
	 * to move the processes in FIFO order instead of LIFO in case of LIST_FOREACH
	 * */
	int q_size = LIST_SIZE(&ProcessQueues.env_new_queue);
f010606f:	a1 7c fe 59 f0       	mov    0xf059fe7c,%eax
f0106074:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (int i = 0; i < q_size; ++i)
f0106077:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010607e:	eb 24                	jmp    f01060a4 <sched_run_all+0x52>
	{
		ptr_env = dequeue(&ProcessQueues.env_new_queue);
f0106080:	83 ec 0c             	sub    $0xc,%esp
f0106083:	68 70 fe 59 f0       	push   $0xf059fe70
f0106088:	e8 7c ef ff ff       	call   f0105009 <dequeue>
f010608d:	83 c4 10             	add    $0x10,%esp
f0106090:	89 45 f0             	mov    %eax,-0x10(%ebp)
		sched_insert_ready0(ptr_env);
f0106093:	83 ec 0c             	sub    $0xc,%esp
f0106096:	ff 75 f0             	pushl  -0x10(%ebp)
f0106099:	e8 4f f1 ff ff       	call   f01051ed <sched_insert_ready0>
f010609e:	83 c4 10             	add    $0x10,%esp

	/*2023: Changed from LIST_FOREACH into DEQUEUE (based on suggestion from T52 & T73 2023.Term1)
	 * to move the processes in FIFO order instead of LIFO in case of LIST_FOREACH
	 * */
	int q_size = LIST_SIZE(&ProcessQueues.env_new_queue);
	for (int i = 0; i < q_size; ++i)
f01060a1:	ff 45 f4             	incl   -0xc(%ebp)
f01060a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060a7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01060aa:	7c d4                	jl     f0106080 <sched_run_all+0x2e>
	{
		ptr_env = dequeue(&ProcessQueues.env_new_queue);
		sched_insert_ready0(ptr_env);
	}

	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f01060ac:	83 ec 0c             	sub    $0xc,%esp
f01060af:	68 00 fe 59 f0       	push   $0xf059fe00
f01060b4:	e8 ef 8a 00 00       	call   f010eba8 <release_spinlock>
f01060b9:	83 c4 10             	add    $0x10,%esp
	/*2015*///if scheduler not run yet, then invoke it!
	if (mycpu()->scheduler_status == SCH_STOPPED)
f01060bc:	e8 3c 10 00 00       	call   f01070fd <mycpu>
f01060c1:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
f01060c7:	85 c0                	test   %eax,%eax
f01060c9:	75 05                	jne    f01060d0 <sched_run_all+0x7e>
		fos_scheduler();
f01060cb:	e8 e2 06 00 00       	call   f01067b2 <fos_scheduler>
	else
		panic("scheduler status is NOT STOPPED while it's expected to be!!");
f01060d0:	83 ec 04             	sub    $0x4,%esp
f01060d3:	68 64 6e 12 f0       	push   $0xf0126e64
f01060d8:	68 15 02 00 00       	push   $0x215
f01060dd:	68 43 6b 12 f0       	push   $0xf0126b43
f01060e2:	e8 33 a2 ff ff       	call   f010031a <_panic>

f01060e7 <sched_kill_all>:

//=================================================
// [14] KILL ALL Envs in the System:
//=================================================
void sched_kill_all()
{
f01060e7:	55                   	push   %ebp
f01060e8:	89 e5                	mov    %esp,%ebp
f01060ea:	83 ec 18             	sub    $0x18,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f01060ed:	83 ec 0c             	sub    $0xc,%esp
f01060f0:	68 00 fe 59 f0       	push   $0xf059fe00
f01060f5:	e8 27 8a 00 00       	call   f010eb21 <acquire_spinlock>
f01060fa:	83 c4 10             	add    $0x10,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&ProcessQueues.env_new_queue))
f01060fd:	a1 70 fe 59 f0       	mov    0xf059fe70,%eax
f0106102:	85 c0                	test   %eax,%eax
f0106104:	0f 84 95 00 00 00    	je     f010619f <sched_kill_all+0xb8>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f010610a:	83 ec 0c             	sub    $0xc,%esp
f010610d:	68 a0 6e 12 f0       	push   $0xf0126ea0
f0106112:	e8 55 ae ff ff       	call   f0100f6c <cprintf>
f0106117:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f010611a:	a1 70 fe 59 f0       	mov    0xf059fe70,%eax
f010611f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106122:	eb 52                	jmp    f0106176 <sched_kill_all+0x8f>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0106124:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106127:	8d 50 20             	lea    0x20(%eax),%edx
f010612a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010612d:	8b 40 10             	mov    0x10(%eax),%eax
f0106130:	83 ec 04             	sub    $0x4,%esp
f0106133:	52                   	push   %edx
f0106134:	50                   	push   %eax
f0106135:	68 cc 6e 12 f0       	push   $0xf0126ecc
f010613a:	e8 2d ae ff ff       	call   f0100f6c <cprintf>
f010613f:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0106142:	83 ec 0c             	sub    $0xc,%esp
f0106145:	ff 75 f4             	pushl  -0xc(%ebp)
f0106148:	e8 f1 f2 ff ff       	call   f010543e <sched_remove_new>
f010614d:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0106150:	83 ec 0c             	sub    $0xc,%esp
f0106153:	ff 75 f4             	pushl  -0xc(%ebp)
f0106156:	e8 cd 45 00 00       	call   f010a728 <env_free>
f010615b:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f010615e:	83 ec 0c             	sub    $0xc,%esp
f0106161:	68 06 6d 12 f0       	push   $0xf0126d06
f0106166:	e8 01 ae ff ff       	call   f0100f6c <cprintf>
f010616b:	83 c4 10             	add    $0x10,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&ProcessQueues.env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f010616e:	a1 78 fe 59 f0       	mov    0xf059fe78,%eax
f0106173:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106176:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010617a:	74 08                	je     f0106184 <sched_kill_all+0x9d>
f010617c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010617f:	8b 40 08             	mov    0x8(%eax),%eax
f0106182:	eb 05                	jmp    f0106189 <sched_kill_all+0xa2>
f0106184:	b8 00 00 00 00       	mov    $0x0,%eax
f0106189:	a3 78 fe 59 f0       	mov    %eax,0xf059fe78
f010618e:	a1 78 fe 59 f0       	mov    0xf059fe78,%eax
f0106193:	85 c0                	test   %eax,%eax
f0106195:	75 8d                	jne    f0106124 <sched_kill_all+0x3d>
f0106197:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010619b:	75 87                	jne    f0106124 <sched_kill_all+0x3d>
f010619d:	eb 10                	jmp    f01061af <sched_kill_all+0xc8>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f010619f:	83 ec 0c             	sub    $0xc,%esp
f01061a2:	68 df 6e 12 f0       	push   $0xf0126edf
f01061a7:	e8 c0 ad ff ff       	call   f0100f6c <cprintf>
f01061ac:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f01061af:	83 ec 0c             	sub    $0xc,%esp
f01061b2:	68 a4 6d 12 f0       	push   $0xf0126da4
f01061b7:	e8 b0 ad ff ff       	call   f0100f6c <cprintf>
f01061bc:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01061bf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01061c6:	e9 b8 01 00 00       	jmp    f0106383 <sched_kill_all+0x29c>
	{
		if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
f01061cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01061ce:	83 c0 09             	add    $0x9,%eax
f01061d1:	c1 e0 04             	shl    $0x4,%eax
f01061d4:	05 00 fe 59 f0       	add    $0xf059fe00,%eax
f01061d9:	8b 00                	mov    (%eax),%eax
f01061db:	85 c0                	test   %eax,%eax
f01061dd:	0f 84 7a 01 00 00    	je     f010635d <sched_kill_all+0x276>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f01061e3:	83 ec 08             	sub    $0x8,%esp
f01061e6:	ff 75 f0             	pushl  -0x10(%ebp)
f01061e9:	68 fc 6e 12 f0       	push   $0xf0126efc
f01061ee:	e8 79 ad ff ff       	call   f0100f6c <cprintf>
f01061f3:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f01061f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01061f9:	83 c0 09             	add    $0x9,%eax
f01061fc:	c1 e0 04             	shl    $0x4,%eax
f01061ff:	05 00 fe 59 f0       	add    $0xf059fe00,%eax
f0106204:	8b 00                	mov    (%eax),%eax
f0106206:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106209:	e9 07 01 00 00       	jmp    f0106315 <sched_kill_all+0x22e>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f010620e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106211:	8d 50 20             	lea    0x20(%eax),%edx
f0106214:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106217:	8b 40 10             	mov    0x10(%eax),%eax
f010621a:	83 ec 04             	sub    $0x4,%esp
f010621d:	52                   	push   %edx
f010621e:	50                   	push   %eax
f010621f:	68 cc 6e 12 f0       	push   $0xf0126ecc
f0106224:	e8 43 ad ff ff       	call   f0100f6c <cprintf>
f0106229:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(ProcessQueues.env_ready_queues[i]), ptr_env);
f010622c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106230:	75 17                	jne    f0106249 <sched_kill_all+0x162>
f0106232:	83 ec 04             	sub    $0x4,%esp
f0106235:	68 7f 6b 12 f0       	push   $0xf0126b7f
f010623a:	68 37 02 00 00       	push   $0x237
f010623f:	68 43 6b 12 f0       	push   $0xf0126b43
f0106244:	e8 d1 a0 ff ff       	call   f010031a <_panic>
f0106249:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010624c:	8b 40 08             	mov    0x8(%eax),%eax
f010624f:	85 c0                	test   %eax,%eax
f0106251:	74 11                	je     f0106264 <sched_kill_all+0x17d>
f0106253:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106256:	8b 40 08             	mov    0x8(%eax),%eax
f0106259:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010625c:	8b 52 0c             	mov    0xc(%edx),%edx
f010625f:	89 50 0c             	mov    %edx,0xc(%eax)
f0106262:	eb 17                	jmp    f010627b <sched_kill_all+0x194>
f0106264:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106267:	8b 40 0c             	mov    0xc(%eax),%eax
f010626a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010626d:	83 c2 09             	add    $0x9,%edx
f0106270:	c1 e2 04             	shl    $0x4,%edx
f0106273:	81 c2 04 fe 59 f0    	add    $0xf059fe04,%edx
f0106279:	89 02                	mov    %eax,(%edx)
f010627b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010627e:	8b 40 0c             	mov    0xc(%eax),%eax
f0106281:	85 c0                	test   %eax,%eax
f0106283:	74 11                	je     f0106296 <sched_kill_all+0x1af>
f0106285:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106288:	8b 40 0c             	mov    0xc(%eax),%eax
f010628b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010628e:	8b 52 08             	mov    0x8(%edx),%edx
f0106291:	89 50 08             	mov    %edx,0x8(%eax)
f0106294:	eb 17                	jmp    f01062ad <sched_kill_all+0x1c6>
f0106296:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106299:	8b 40 08             	mov    0x8(%eax),%eax
f010629c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010629f:	83 c2 09             	add    $0x9,%edx
f01062a2:	c1 e2 04             	shl    $0x4,%edx
f01062a5:	81 c2 00 fe 59 f0    	add    $0xf059fe00,%edx
f01062ab:	89 02                	mov    %eax,(%edx)
f01062ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062b0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f01062b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062ba:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f01062c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062c4:	83 c0 09             	add    $0x9,%eax
f01062c7:	c1 e0 04             	shl    $0x4,%eax
f01062ca:	05 0c fe 59 f0       	add    $0xf059fe0c,%eax
f01062cf:	8b 00                	mov    (%eax),%eax
f01062d1:	8d 50 ff             	lea    -0x1(%eax),%edx
f01062d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062d7:	83 c0 09             	add    $0x9,%eax
f01062da:	c1 e0 04             	shl    $0x4,%eax
f01062dd:	05 0c fe 59 f0       	add    $0xf059fe0c,%eax
f01062e2:	89 10                	mov    %edx,(%eax)
				env_free(ptr_env);
f01062e4:	83 ec 0c             	sub    $0xc,%esp
f01062e7:	ff 75 f4             	pushl  -0xc(%ebp)
f01062ea:	e8 39 44 00 00       	call   f010a728 <env_free>
f01062ef:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01062f2:	83 ec 0c             	sub    $0xc,%esp
f01062f5:	68 06 6d 12 f0       	push   $0xf0126d06
f01062fa:	e8 6d ac ff ff       	call   f0100f6c <cprintf>
f01062ff:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f0106302:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106305:	83 c0 09             	add    $0x9,%eax
f0106308:	c1 e0 04             	shl    $0x4,%eax
f010630b:	05 08 fe 59 f0       	add    $0xf059fe08,%eax
f0106310:	8b 00                	mov    (%eax),%eax
f0106312:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106315:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106319:	74 08                	je     f0106323 <sched_kill_all+0x23c>
f010631b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010631e:	8b 40 08             	mov    0x8(%eax),%eax
f0106321:	eb 05                	jmp    f0106328 <sched_kill_all+0x241>
f0106323:	b8 00 00 00 00       	mov    $0x0,%eax
f0106328:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010632b:	83 c2 09             	add    $0x9,%edx
f010632e:	c1 e2 04             	shl    $0x4,%edx
f0106331:	81 c2 08 fe 59 f0    	add    $0xf059fe08,%edx
f0106337:	89 02                	mov    %eax,(%edx)
f0106339:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010633c:	83 c0 09             	add    $0x9,%eax
f010633f:	c1 e0 04             	shl    $0x4,%eax
f0106342:	05 08 fe 59 f0       	add    $0xf059fe08,%eax
f0106347:	8b 00                	mov    (%eax),%eax
f0106349:	85 c0                	test   %eax,%eax
f010634b:	0f 85 bd fe ff ff    	jne    f010620e <sched_kill_all+0x127>
f0106351:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106355:	0f 85 b3 fe ff ff    	jne    f010620e <sched_kill_all+0x127>
f010635b:	eb 13                	jmp    f0106370 <sched_kill_all+0x289>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f010635d:	83 ec 08             	sub    $0x8,%esp
f0106360:	ff 75 f0             	pushl  -0x10(%ebp)
f0106363:	68 00 6e 12 f0       	push   $0xf0126e00
f0106368:	e8 ff ab ff ff       	call   f0100f6c <cprintf>
f010636d:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0106370:	83 ec 0c             	sub    $0xc,%esp
f0106373:	68 a4 6d 12 f0       	push   $0xf0126da4
f0106378:	e8 ef ab ff ff       	call   f0100f6c <cprintf>
f010637d:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0106380:	ff 45 f0             	incl   -0x10(%ebp)
f0106383:	a0 00 2b 5a f0       	mov    0xf05a2b00,%al
f0106388:	0f b6 c0             	movzbl %al,%eax
f010638b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010638e:	0f 8f 37 fe ff ff    	jg     f01061cb <sched_kill_all+0xe4>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&ProcessQueues.env_exit_queue))
f0106394:	a1 80 fe 59 f0       	mov    0xf059fe80,%eax
f0106399:	85 c0                	test   %eax,%eax
f010639b:	0f 84 95 00 00 00    	je     f0106436 <sched_kill_all+0x34f>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f01063a1:	83 ec 0c             	sub    $0xc,%esp
f01063a4:	68 30 6f 12 f0       	push   $0xf0126f30
f01063a9:	e8 be ab ff ff       	call   f0100f6c <cprintf>
f01063ae:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f01063b1:	a1 80 fe 59 f0       	mov    0xf059fe80,%eax
f01063b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01063b9:	eb 52                	jmp    f010640d <sched_kill_all+0x326>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01063bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01063be:	8d 50 20             	lea    0x20(%eax),%edx
f01063c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01063c4:	8b 40 10             	mov    0x10(%eax),%eax
f01063c7:	83 ec 04             	sub    $0x4,%esp
f01063ca:	52                   	push   %edx
f01063cb:	50                   	push   %eax
f01063cc:	68 cc 6e 12 f0       	push   $0xf0126ecc
f01063d1:	e8 96 ab ff ff       	call   f0100f6c <cprintf>
f01063d6:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f01063d9:	83 ec 0c             	sub    $0xc,%esp
f01063dc:	ff 75 f4             	pushl  -0xc(%ebp)
f01063df:	e8 d1 f1 ff ff       	call   f01055b5 <sched_remove_exit>
f01063e4:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01063e7:	83 ec 0c             	sub    $0xc,%esp
f01063ea:	ff 75 f4             	pushl  -0xc(%ebp)
f01063ed:	e8 36 43 00 00       	call   f010a728 <env_free>
f01063f2:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01063f5:	83 ec 0c             	sub    $0xc,%esp
f01063f8:	68 06 6d 12 f0       	push   $0xf0126d06
f01063fd:	e8 6a ab ff ff       	call   f0100f6c <cprintf>
f0106402:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&ProcessQueues.env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f0106405:	a1 88 fe 59 f0       	mov    0xf059fe88,%eax
f010640a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010640d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106411:	74 08                	je     f010641b <sched_kill_all+0x334>
f0106413:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106416:	8b 40 08             	mov    0x8(%eax),%eax
f0106419:	eb 05                	jmp    f0106420 <sched_kill_all+0x339>
f010641b:	b8 00 00 00 00       	mov    $0x0,%eax
f0106420:	a3 88 fe 59 f0       	mov    %eax,0xf059fe88
f0106425:	a1 88 fe 59 f0       	mov    0xf059fe88,%eax
f010642a:	85 c0                	test   %eax,%eax
f010642c:	75 8d                	jne    f01063bb <sched_kill_all+0x2d4>
f010642e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106432:	75 87                	jne    f01063bb <sched_kill_all+0x2d4>
f0106434:	eb 10                	jmp    f0106446 <sched_kill_all+0x35f>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0106436:	83 ec 0c             	sub    $0xc,%esp
f0106439:	68 46 6e 12 f0       	push   $0xf0126e46
f010643e:	e8 29 ab ff ff       	call   f0100f6c <cprintf>
f0106443:	83 c4 10             	add    $0x10,%esp
	}

	struct Env* cur_env = get_cpu_proc();
f0106446:	e8 25 43 00 00       	call   f010a770 <get_cpu_proc>
f010644b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if (cur_env)
f010644e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106452:	74 6b                	je     f01064bf <sched_kill_all+0x3d8>
	{
		ptr_env = cur_env;
f0106454:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106457:	89 45 f4             	mov    %eax,-0xc(%ebp)
		assert(ptr_env->env_status == ENV_RUNNING);
f010645a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010645d:	8b 40 18             	mov    0x18(%eax),%eax
f0106460:	83 f8 02             	cmp    $0x2,%eax
f0106463:	74 19                	je     f010647e <sched_kill_all+0x397>
f0106465:	68 0c 6d 12 f0       	push   $0xf0126d0c
f010646a:	68 2e 6b 12 f0       	push   $0xf0126b2e
f010646f:	68 57 02 00 00       	push   $0x257
f0106474:	68 43 6b 12 f0       	push   $0xf0126b43
f0106479:	e8 9c 9e ff ff       	call   f010031a <_panic>
		cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f010647e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106481:	8d 50 20             	lea    0x20(%eax),%edx
f0106484:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106487:	8b 40 10             	mov    0x10(%eax),%eax
f010648a:	83 ec 04             	sub    $0x4,%esp
f010648d:	52                   	push   %edx
f010648e:	50                   	push   %eax
f010648f:	68 30 6d 12 f0       	push   $0xf0126d30
f0106494:	e8 d3 aa ff ff       	call   f0100f6c <cprintf>
f0106499:	83 c4 10             	add    $0x10,%esp
		env_free(ptr_env);
f010649c:	83 ec 0c             	sub    $0xc,%esp
f010649f:	ff 75 f4             	pushl  -0xc(%ebp)
f01064a2:	e8 81 42 00 00       	call   f010a728 <env_free>
f01064a7:	83 c4 10             	add    $0x10,%esp
		cprintf("DONE\n");
f01064aa:	83 ec 0c             	sub    $0xc,%esp
f01064ad:	68 06 6d 12 f0       	push   $0xf0126d06
f01064b2:	e8 b5 aa ff ff       	call   f0100f6c <cprintf>
f01064b7:	83 c4 10             	add    $0x10,%esp
		//return back to a killed env. Status already set to EXIT in the env_free()
		//It's the fos_scheduler task to release the lock on the Qs after context_switch to it from
		//this process
		//reinvoke the scheduler since there're no env to return back to it
		/*2024: replaced by sched() to apply context_switch*/
		sched();
f01064ba:	e8 3e 44 00 00       	call   f010a8fd <sched>
	}
	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f01064bf:	83 ec 0c             	sub    $0xc,%esp
f01064c2:	68 00 fe 59 f0       	push   $0xf059fe00
f01064c7:	e8 dc 86 00 00       	call   f010eba8 <release_spinlock>
f01064cc:	83 c4 10             	add    $0x10,%esp
	//get into the command prompt since there're no env to return back to it
	//fos_scheduler(); //2024: commented
	get_into_prompt();
f01064cf:	e8 cf b8 ff ff       	call   f0101da3 <get_into_prompt>

f01064d4 <sched_exit_all_ready_envs>:
/*2018*/
//=================================================
// [14] EXIT ALL Ready Envs:
//=================================================
void sched_exit_all_ready_envs()
{
f01064d4:	55                   	push   %ebp
f01064d5:	89 e5                	mov    %esp,%ebp
f01064d7:	83 ec 18             	sub    $0x18,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f01064da:	83 ec 0c             	sub    $0xc,%esp
f01064dd:	68 00 fe 59 f0       	push   $0xf059fe00
f01064e2:	e8 3a 86 00 00       	call   f010eb21 <acquire_spinlock>
f01064e7:	83 c4 10             	add    $0x10,%esp
	struct Env* ptr_env=NULL;
f01064ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01064f1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01064f8:	e9 59 01 00 00       	jmp    f0106656 <sched_exit_all_ready_envs+0x182>
	{
		if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
f01064fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106500:	83 c0 09             	add    $0x9,%eax
f0106503:	c1 e0 04             	shl    $0x4,%eax
f0106506:	05 00 fe 59 f0       	add    $0xf059fe00,%eax
f010650b:	8b 00                	mov    (%eax),%eax
f010650d:	85 c0                	test   %eax,%eax
f010650f:	0f 84 3e 01 00 00    	je     f0106653 <sched_exit_all_ready_envs+0x17f>
		{
			ptr_env=NULL;
f0106515:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f010651c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010651f:	83 c0 09             	add    $0x9,%eax
f0106522:	c1 e0 04             	shl    $0x4,%eax
f0106525:	05 00 fe 59 f0       	add    $0xf059fe00,%eax
f010652a:	8b 00                	mov    (%eax),%eax
f010652c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010652f:	e9 d9 00 00 00       	jmp    f010660d <sched_exit_all_ready_envs+0x139>
			{
				LIST_REMOVE(&(ProcessQueues.env_ready_queues[i]), ptr_env);
f0106534:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106538:	75 17                	jne    f0106551 <sched_exit_all_ready_envs+0x7d>
f010653a:	83 ec 04             	sub    $0x4,%esp
f010653d:	68 7f 6b 12 f0       	push   $0xf0126b7f
f0106542:	68 79 02 00 00       	push   $0x279
f0106547:	68 43 6b 12 f0       	push   $0xf0126b43
f010654c:	e8 c9 9d ff ff       	call   f010031a <_panic>
f0106551:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106554:	8b 40 08             	mov    0x8(%eax),%eax
f0106557:	85 c0                	test   %eax,%eax
f0106559:	74 11                	je     f010656c <sched_exit_all_ready_envs+0x98>
f010655b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010655e:	8b 40 08             	mov    0x8(%eax),%eax
f0106561:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106564:	8b 52 0c             	mov    0xc(%edx),%edx
f0106567:	89 50 0c             	mov    %edx,0xc(%eax)
f010656a:	eb 17                	jmp    f0106583 <sched_exit_all_ready_envs+0xaf>
f010656c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010656f:	8b 40 0c             	mov    0xc(%eax),%eax
f0106572:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106575:	83 c2 09             	add    $0x9,%edx
f0106578:	c1 e2 04             	shl    $0x4,%edx
f010657b:	81 c2 04 fe 59 f0    	add    $0xf059fe04,%edx
f0106581:	89 02                	mov    %eax,(%edx)
f0106583:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106586:	8b 40 0c             	mov    0xc(%eax),%eax
f0106589:	85 c0                	test   %eax,%eax
f010658b:	74 11                	je     f010659e <sched_exit_all_ready_envs+0xca>
f010658d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106590:	8b 40 0c             	mov    0xc(%eax),%eax
f0106593:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106596:	8b 52 08             	mov    0x8(%edx),%edx
f0106599:	89 50 08             	mov    %edx,0x8(%eax)
f010659c:	eb 17                	jmp    f01065b5 <sched_exit_all_ready_envs+0xe1>
f010659e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065a1:	8b 40 08             	mov    0x8(%eax),%eax
f01065a4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01065a7:	83 c2 09             	add    $0x9,%edx
f01065aa:	c1 e2 04             	shl    $0x4,%edx
f01065ad:	81 c2 00 fe 59 f0    	add    $0xf059fe00,%edx
f01065b3:	89 02                	mov    %eax,(%edx)
f01065b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065b8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f01065bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065c2:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f01065c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065cc:	83 c0 09             	add    $0x9,%eax
f01065cf:	c1 e0 04             	shl    $0x4,%eax
f01065d2:	05 0c fe 59 f0       	add    $0xf059fe0c,%eax
f01065d7:	8b 00                	mov    (%eax),%eax
f01065d9:	8d 50 ff             	lea    -0x1(%eax),%edx
f01065dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065df:	83 c0 09             	add    $0x9,%eax
f01065e2:	c1 e0 04             	shl    $0x4,%eax
f01065e5:	05 0c fe 59 f0       	add    $0xf059fe0c,%eax
f01065ea:	89 10                	mov    %edx,(%eax)
				sched_insert_exit(ptr_env);
f01065ec:	83 ec 0c             	sub    $0xc,%esp
f01065ef:	ff 75 f4             	pushl  -0xc(%ebp)
f01065f2:	e8 37 ef ff ff       	call   f010552e <sched_insert_exit>
f01065f7:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f01065fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065fd:	83 c0 09             	add    $0x9,%eax
f0106600:	c1 e0 04             	shl    $0x4,%eax
f0106603:	05 08 fe 59 f0       	add    $0xf059fe08,%eax
f0106608:	8b 00                	mov    (%eax),%eax
f010660a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010660d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106611:	74 08                	je     f010661b <sched_exit_all_ready_envs+0x147>
f0106613:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106616:	8b 40 08             	mov    0x8(%eax),%eax
f0106619:	eb 05                	jmp    f0106620 <sched_exit_all_ready_envs+0x14c>
f010661b:	b8 00 00 00 00       	mov    $0x0,%eax
f0106620:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106623:	83 c2 09             	add    $0x9,%edx
f0106626:	c1 e2 04             	shl    $0x4,%edx
f0106629:	81 c2 08 fe 59 f0    	add    $0xf059fe08,%edx
f010662f:	89 02                	mov    %eax,(%edx)
f0106631:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106634:	83 c0 09             	add    $0x9,%eax
f0106637:	c1 e0 04             	shl    $0x4,%eax
f010663a:	05 08 fe 59 f0       	add    $0xf059fe08,%eax
f010663f:	8b 00                	mov    (%eax),%eax
f0106641:	85 c0                	test   %eax,%eax
f0106643:	0f 85 eb fe ff ff    	jne    f0106534 <sched_exit_all_ready_envs+0x60>
f0106649:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010664d:	0f 85 e1 fe ff ff    	jne    f0106534 <sched_exit_all_ready_envs+0x60>
//=================================================
void sched_exit_all_ready_envs()
{
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0106653:	ff 45 f0             	incl   -0x10(%ebp)
f0106656:	a0 00 2b 5a f0       	mov    0xf05a2b00,%al
f010665b:	0f b6 c0             	movzbl %al,%eax
f010665e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0106661:	0f 8f 96 fe ff ff    	jg     f01064fd <sched_exit_all_ready_envs+0x29>
				LIST_REMOVE(&(ProcessQueues.env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0106667:	83 ec 0c             	sub    $0xc,%esp
f010666a:	68 00 fe 59 f0       	push   $0xf059fe00
f010666f:	e8 34 85 00 00       	call   f010eba8 <release_spinlock>
f0106674:	83 c4 10             	add    $0x10,%esp
}
f0106677:	90                   	nop
f0106678:	c9                   	leave  
f0106679:	c3                   	ret    

f010667a <timer_ticks>:

/*2023*/
/********* for BSD Priority Scheduler *************/
int64 timer_ticks()
{
f010667a:	55                   	push   %ebp
f010667b:	89 e5                	mov    %esp,%ebp
	return ticks;
f010667d:	a1 68 2a 5a f0       	mov    0xf05a2a68,%eax
f0106682:	8b 15 6c 2a 5a f0    	mov    0xf05a2a6c,%edx
}
f0106688:	5d                   	pop    %ebp
f0106689:	c3                   	ret    

f010668a <env_get_nice>:
int env_get_nice(struct Env* e)
{
f010668a:	55                   	push   %ebp
f010668b:	89 e5                	mov    %esp,%ebp
f010668d:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] BSD Scheduler - env_get_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106690:	83 ec 04             	sub    $0x4,%esp
f0106693:	68 5c 6f 12 f0       	push   $0xf0126f5c
f0106698:	68 8c 02 00 00       	push   $0x28c
f010669d:	68 43 6b 12 f0       	push   $0xf0126b43
f01066a2:	e8 73 9c ff ff       	call   f010031a <_panic>

f01066a7 <env_set_nice>:
}

void env_set_nice(struct Env* e, int nice_value)
{
f01066a7:	55                   	push   %ebp
f01066a8:	89 e5                	mov    %esp,%ebp
f01066aa:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] BSD Scheduler - env_set_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f01066ad:	83 ec 04             	sub    $0x4,%esp
f01066b0:	68 5c 6f 12 f0       	push   $0xf0126f5c
f01066b5:	68 94 02 00 00       	push   $0x294
f01066ba:	68 43 6b 12 f0       	push   $0xf0126b43
f01066bf:	e8 56 9c ff ff       	call   f010031a <_panic>

f01066c4 <env_get_recent_cpu>:
}

int env_get_recent_cpu(struct Env* e)
{
f01066c4:	55                   	push   %ebp
f01066c5:	89 e5                	mov    %esp,%ebp
f01066c7:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] BSD Scheduler - env_get_recent_cpu
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f01066ca:	83 ec 04             	sub    $0x4,%esp
f01066cd:	68 5c 6f 12 f0       	push   $0xf0126f5c
f01066d2:	68 9c 02 00 00       	push   $0x29c
f01066d7:	68 43 6b 12 f0       	push   $0xf0126b43
f01066dc:	e8 39 9c ff ff       	call   f010031a <_panic>

f01066e1 <get_load_average>:
}
int get_load_average()
{
f01066e1:	55                   	push   %ebp
f01066e2:	89 e5                	mov    %esp,%ebp
f01066e4:	83 ec 08             	sub    $0x8,%esp
	//return 1;
	//[PROJECT] BSD Scheduler - get_load_average
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f01066e7:	83 ec 04             	sub    $0x4,%esp
f01066ea:	68 5c 6f 12 f0       	push   $0xf0126f5c
f01066ef:	68 a4 02 00 00       	push   $0x2a4
f01066f4:	68 43 6b 12 f0       	push   $0xf0126b43
f01066f9:	e8 1c 9c ff ff       	call   f010031a <_panic>

f01066fe <isSchedMethodRR>:
#include <kern/cmd/command_prompt.h>
#include <kern/cpu/cpu.h>
#include <kern/cpu/picirq.h>


uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f01066fe:	55                   	push   %ebp
f01066ff:	89 e5                	mov    %esp,%ebp
f0106701:	a1 b4 28 5a f0       	mov    0xf05a28b4,%eax
f0106706:	85 c0                	test   %eax,%eax
f0106708:	75 07                	jne    f0106711 <isSchedMethodRR+0x13>
f010670a:	b8 01 00 00 00       	mov    $0x1,%eax
f010670f:	eb 05                	jmp    f0106716 <isSchedMethodRR+0x18>
f0106711:	b8 00 00 00 00       	mov    $0x0,%eax
f0106716:	5d                   	pop    %ebp
f0106717:	c3                   	ret    

f0106718 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0106718:	55                   	push   %ebp
f0106719:	89 e5                	mov    %esp,%ebp
f010671b:	a1 b4 28 5a f0       	mov    0xf05a28b4,%eax
f0106720:	83 f8 01             	cmp    $0x1,%eax
f0106723:	75 07                	jne    f010672c <isSchedMethodMLFQ+0x14>
f0106725:	b8 01 00 00 00       	mov    $0x1,%eax
f010672a:	eb 05                	jmp    f0106731 <isSchedMethodMLFQ+0x19>
f010672c:	b8 00 00 00 00       	mov    $0x0,%eax
f0106731:	5d                   	pop    %ebp
f0106732:	c3                   	ret    

f0106733 <isSchedMethodBSD>:
uint32 isSchedMethodBSD(){if(scheduler_method == SCH_BSD) return 1; return 0;}
f0106733:	55                   	push   %ebp
f0106734:	89 e5                	mov    %esp,%ebp
f0106736:	a1 b4 28 5a f0       	mov    0xf05a28b4,%eax
f010673b:	83 f8 02             	cmp    $0x2,%eax
f010673e:	75 07                	jne    f0106747 <isSchedMethodBSD+0x14>
f0106740:	b8 01 00 00 00       	mov    $0x1,%eax
f0106745:	eb 05                	jmp    f010674c <isSchedMethodBSD+0x19>
f0106747:	b8 00 00 00 00       	mov    $0x0,%eax
f010674c:	5d                   	pop    %ebp
f010674d:	c3                   	ret    

f010674e <sched_init>:

//===================================
// [1] Default Scheduler Initializer:
//===================================
void sched_init()
{
f010674e:	55                   	push   %ebp
f010674f:	89 e5                	mov    %esp,%ebp
f0106751:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f0106754:	c7 05 88 25 5a f0 00 	movl   $0x0,0xf05a2588
f010675b:	00 00 00 

	sched_init_RR(INIT_QUANTUM_IN_MS);
f010675e:	83 ec 0c             	sub    $0xc,%esp
f0106761:	6a 0a                	push   $0xa
f0106763:	e8 6d 02 00 00       	call   f01069d5 <sched_init_RR>
f0106768:	83 c4 10             	add    $0x10,%esp

	init_queue(&ProcessQueues.env_new_queue);
f010676b:	83 ec 0c             	sub    $0xc,%esp
f010676e:	68 70 fe 59 f0       	push   $0xf059fe70
f0106773:	e8 bf e7 ff ff       	call   f0104f37 <init_queue>
f0106778:	83 c4 10             	add    $0x10,%esp
	init_queue(&ProcessQueues.env_exit_queue);
f010677b:	83 ec 0c             	sub    $0xc,%esp
f010677e:	68 80 fe 59 f0       	push   $0xf059fe80
f0106783:	e8 af e7 ff ff       	call   f0104f37 <init_queue>
f0106788:	83 c4 10             	add    $0x10,%esp

	mycpu()->scheduler_status = SCH_STOPPED;
f010678b:	e8 6d 09 00 00       	call   f01070fd <mycpu>
f0106790:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f0106797:	00 00 00 

	/*2024: initialize lock to protect these Qs in MULTI-CORE case only*/
	init_spinlock(&ProcessQueues.qlock, "process queues lock");
f010679a:	83 ec 08             	sub    $0x8,%esp
f010679d:	68 70 6f 12 f0       	push   $0xf0126f70
f01067a2:	68 00 fe 59 f0       	push   $0xf059fe00
f01067a7:	e8 44 83 00 00       	call   f010eaf0 <init_spinlock>
f01067ac:	83 c4 10             	add    $0x10,%esp
}
f01067af:	90                   	nop
f01067b0:	c9                   	leave  
f01067b1:	c3                   	ret    

f01067b2 <fos_scheduler>:
// [2] Main FOS Scheduler:
//=========================

void
fos_scheduler(void)
{
f01067b2:	55                   	push   %ebp
f01067b3:	89 e5                	mov    %esp,%ebp
f01067b5:	53                   	push   %ebx
f01067b6:	83 ec 24             	sub    $0x24,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f01067b9:	9c                   	pushf  
f01067ba:	58                   	pop    %eax
f01067bb:	89 45 d8             	mov    %eax,-0x28(%ebp)
        return eflags;
f01067be:	8b 45 d8             	mov    -0x28(%ebp),%eax
	//ensure that the scheduler is invoked while interrupt is disabled
	if (read_eflags() & FL_IF)
f01067c1:	25 00 02 00 00       	and    $0x200,%eax
f01067c6:	85 c0                	test   %eax,%eax
f01067c8:	74 14                	je     f01067de <fos_scheduler+0x2c>
		panic("fos_scheduler: called while the interrupt is enabled!");
f01067ca:	83 ec 04             	sub    $0x4,%esp
f01067cd:	68 84 6f 12 f0       	push   $0xf0126f84
f01067d2:	6a 37                	push   $0x37
f01067d4:	68 ba 6f 12 f0       	push   $0xf0126fba
f01067d9:	e8 3c 9b ff ff       	call   f010031a <_panic>

	//cprintf("inside scheduler - timer cnt = %d\n", kclock_read_cnt0());
	struct Env *p;
	struct cpu *c = mycpu();
f01067de:	e8 1a 09 00 00       	call   f01070fd <mycpu>
f01067e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	c->proc = 0;
f01067e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01067e9:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f01067f0:	00 00 00 

	chk1();
f01067f3:	e8 0b af 01 00       	call   f0121703 <chk1>
	c->scheduler_status = SCH_STARTED;
f01067f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01067fb:	c7 80 b4 00 00 00 01 	movl   $0x1,0xb4(%eax)
f0106802:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f0106805:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

	//2024: should be outer loop as long as there's any BLOCKED processes.
	//Ref: xv6-x86 OS
	int is_any_blocked = 0;
f010680c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

//set interrupt flag
static __inline void
sti(void)
{
	__asm __volatile("sti");
f0106813:	fb                   	sti    
		// to avoid a deadlock if all processes are waiting.
		sti();

		// Check ready queue(s) looking for process to run.
		//cprintf("\n[FOS_SCHEDULER] acquire: lock status before acquire = %d\n", qlock.locked);
		acquire_spinlock(&(ProcessQueues.qlock));  //lock: to protect ready & blocked Qs in multi-CPU
f0106814:	83 ec 0c             	sub    $0xc,%esp
f0106817:	68 00 fe 59 f0       	push   $0xf059fe00
f010681c:	e8 00 83 00 00       	call   f010eb21 <acquire_spinlock>
f0106821:	83 c4 10             	add    $0x10,%esp
		//cprintf("ACQUIRED\n");
		do
		{
			//Get next env according to the current scheduler
			next_env = sched_next[scheduler_method]() ;
f0106824:	a1 b4 28 5a f0       	mov    0xf05a28b4,%eax
f0106829:	8b 04 85 4c e9 17 f0 	mov    -0xfe816b4(,%eax,4),%eax
f0106830:	ff d0                	call   *%eax
f0106832:	89 45 e8             	mov    %eax,-0x18(%ebp)

			//temporarily set the curenv by the next env JUST for checking the scheduler
			//Then: reset it again
			struct Env* old_curenv = get_cpu_proc();
f0106835:	e8 36 3f 00 00       	call   f010a770 <get_cpu_proc>
f010683a:	89 45 e0             	mov    %eax,-0x20(%ebp)
			set_cpu_proc(next_env) ;
f010683d:	83 ec 0c             	sub    $0xc,%esp
f0106840:	ff 75 e8             	pushl  -0x18(%ebp)
f0106843:	e8 51 3f 00 00       	call   f010a799 <set_cpu_proc>
f0106848:	83 c4 10             	add    $0x10,%esp
			chk2(next_env) ;
f010684b:	83 ec 0c             	sub    $0xc,%esp
f010684e:	ff 75 e8             	pushl  -0x18(%ebp)
f0106851:	e8 b3 ae 01 00       	call   f0121709 <chk2>
f0106856:	83 c4 10             	add    $0x10,%esp
			set_cpu_proc(old_curenv) ;
f0106859:	83 ec 0c             	sub    $0xc,%esp
f010685c:	ff 75 e0             	pushl  -0x20(%ebp)
f010685f:	e8 35 3f 00 00       	call   f010a799 <set_cpu_proc>
f0106864:	83 c4 10             	add    $0x10,%esp

			//sched_print_all();

			if(next_env != NULL)
f0106867:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010686b:	0f 84 d6 00 00 00    	je     f0106947 <fos_scheduler+0x195>
				/*2024: Replaced by context_switch()*/
				//env_run(next_env);

				// Switch to chosen process. It is the process's job to release qlock
				// and then reacquire it before jumping back to us.
				set_cpu_proc(next_env);
f0106871:	83 ec 0c             	sub    $0xc,%esp
f0106874:	ff 75 e8             	pushl  -0x18(%ebp)
f0106877:	e8 1d 3f 00 00       	call   f010a799 <set_cpu_proc>
f010687c:	83 c4 10             	add    $0x10,%esp
				switchuvm(next_env);
f010687f:	83 ec 0c             	sub    $0xc,%esp
f0106882:	ff 75 e8             	pushl  -0x18(%ebp)
f0106885:	e8 96 41 00 00       	call   f010aa20 <switchuvm>
f010688a:	83 c4 10             	add    $0x10,%esp

				//Change its status to RUNNING
				next_env->env_status = ENV_RUNNING;
f010688d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106890:	c7 40 18 02 00 00 00 	movl   $0x2,0x18(%eax)

				//Context switch to it
				context_switch(&(c->scheduler), next_env->context);
f0106897:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010689a:	8b 40 04             	mov    0x4(%eax),%eax
f010689d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01068a0:	83 c2 04             	add    $0x4,%edx
f01068a3:	83 ec 08             	sub    $0x8,%esp
f01068a6:	50                   	push   %eax
f01068a7:	52                   	push   %edx
f01068a8:	e8 92 e2 ff ff       	call   f0104b3f <context_switch>
f01068ad:	83 c4 10             	add    $0x10,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f01068b0:	9c                   	pushf  
f01068b1:	58                   	pop    %eax
f01068b2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        return eflags;
f01068b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax

				//ensure that the scheduler is invoked while interrupt is disabled
				if (read_eflags() & FL_IF)
f01068b8:	25 00 02 00 00       	and    $0x200,%eax
f01068bd:	85 c0                	test   %eax,%eax
f01068bf:	74 14                	je     f01068d5 <fos_scheduler+0x123>
					panic("fos_scheduler: invoked while the interrupt is enabled!");
f01068c1:	83 ec 04             	sub    $0x4,%esp
f01068c4:	68 cc 6f 12 f0       	push   $0xf0126fcc
f01068c9:	6a 74                	push   $0x74
f01068cb:	68 ba 6f 12 f0       	push   $0xf0126fba
f01068d0:	e8 45 9a ff ff       	call   f010031a <_panic>

				//Stop the clock now till finding a next proc (if any).
				//This is to avoid clock interrupt inside the scheduler after sti() of the outer loop
				kclock_stop();
f01068d5:	e8 ae e3 ff ff       	call   f0104c88 <kclock_stop>
				//cprintf("\n[IEN = %d] clock is stopped! returned to scheduler after context_switch. curenv = %d\n", (read_eflags() & FL_IF) == 0? 0:1, curenv == NULL? 0 : curenv->env_id);

				// Process is done running for now. It should have changed its p->status before coming back.
				//If no process on CPU, switch to the kernel
				assert(get_cpu_proc() == c->proc);
f01068da:	e8 91 3e 00 00       	call   f010a770 <get_cpu_proc>
f01068df:	89 c2                	mov    %eax,%edx
f01068e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01068e4:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01068ea:	39 c2                	cmp    %eax,%edx
f01068ec:	74 16                	je     f0106904 <fos_scheduler+0x152>
f01068ee:	68 03 70 12 f0       	push   $0xf0127003
f01068f3:	68 1d 70 12 f0       	push   $0xf012701d
f01068f8:	6a 7d                	push   $0x7d
f01068fa:	68 ba 6f 12 f0       	push   $0xf0126fba
f01068ff:	e8 16 9a ff ff       	call   f010031a <_panic>
				int status = c->proc->env_status ;
f0106904:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106907:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010690d:	8b 40 18             	mov    0x18(%eax),%eax
f0106910:	89 45 dc             	mov    %eax,-0x24(%ebp)
				assert(status != ENV_RUNNING);
f0106913:	83 7d dc 02          	cmpl   $0x2,-0x24(%ebp)
f0106917:	75 16                	jne    f010692f <fos_scheduler+0x17d>
f0106919:	68 32 70 12 f0       	push   $0xf0127032
f010691e:	68 1d 70 12 f0       	push   $0xf012701d
f0106923:	6a 7f                	push   $0x7f
f0106925:	68 ba 6f 12 f0       	push   $0xf0126fba
f010692a:	e8 eb 99 ff ff       	call   f010031a <_panic>
				if (status == ENV_READY)
f010692f:	83 7d dc 01          	cmpl   $0x1,-0x24(%ebp)
f0106933:	74 12                	je     f0106947 <fos_scheduler+0x195>
					//OK... will be placed to the correct ready Q in the next iteration
				}
				else
				{
					//					cprintf("scheduler: process %d is BLOCKED/EXITED\n", c->proc->env_id);
					switchkvm();
f0106935:	e8 cf 40 00 00       	call   f010aa09 <switchkvm>
					set_cpu_proc(NULL);
f010693a:	83 ec 0c             	sub    $0xc,%esp
f010693d:	6a 00                	push   $0x0
f010693f:	e8 55 3e 00 00       	call   f010a799 <set_cpu_proc>
f0106944:	83 c4 10             	add    $0x10,%esp
				}
			}
		} while(next_env);
f0106947:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010694b:	0f 85 d3 fe ff ff    	jne    f0106824 <fos_scheduler+0x72>

		//2024 - check if there's any blocked process?
		is_any_blocked = 0;
f0106951:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		for (int i = 0; i < NENV; ++i)
f0106958:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010695f:	eb 4d                	jmp    f01069ae <fos_scheduler+0x1fc>
		{
			if (envs[i].env_status == ENV_BLOCKED)
f0106961:	8b 0d b0 f3 59 f0    	mov    0xf059f3b0,%ecx
f0106967:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010696a:	89 d0                	mov    %edx,%eax
f010696c:	c1 e0 06             	shl    $0x6,%eax
f010696f:	29 d0                	sub    %edx,%eax
f0106971:	c1 e0 02             	shl    $0x2,%eax
f0106974:	01 d0                	add    %edx,%eax
f0106976:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f010697d:	01 d8                	add    %ebx,%eax
f010697f:	c1 e0 03             	shl    $0x3,%eax
f0106982:	01 d0                	add    %edx,%eax
f0106984:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010698b:	29 c2                	sub    %eax,%edx
f010698d:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f0106994:	89 c2                	mov    %eax,%edx
f0106996:	89 d0                	mov    %edx,%eax
f0106998:	01 c8                	add    %ecx,%eax
f010699a:	8b 40 18             	mov    0x18(%eax),%eax
f010699d:	83 f8 03             	cmp    $0x3,%eax
f01069a0:	75 09                	jne    f01069ab <fos_scheduler+0x1f9>
			{
				is_any_blocked = 1;
f01069a2:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
				break;
f01069a9:	eb 0b                	jmp    f01069b6 <fos_scheduler+0x204>
			}
		} while(next_env);

		//2024 - check if there's any blocked process?
		is_any_blocked = 0;
		for (int i = 0; i < NENV; ++i)
f01069ab:	ff 45 f0             	incl   -0x10(%ebp)
f01069ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01069b1:	83 f8 07             	cmp    $0x7,%eax
f01069b4:	76 ab                	jbe    f0106961 <fos_scheduler+0x1af>
			{
				is_any_blocked = 1;
				break;
			}
		}
		release_spinlock(&ProcessQueues.qlock);  //release lock: to protect ready & blocked Qs in multi-CPU
f01069b6:	83 ec 0c             	sub    $0xc,%esp
f01069b9:	68 00 fe 59 f0       	push   $0xf059fe00
f01069be:	e8 e5 81 00 00       	call   f010eba8 <release_spinlock>
f01069c3:	83 c4 10             	add    $0x10,%esp
		//cprintf("\n[FOS_SCHEDULER] release: lock status after = %d\n", qlock.locked);

	} while (is_any_blocked > 0);
f01069c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01069ca:	0f 8f 43 fe ff ff    	jg     f0106813 <fos_scheduler+0x61>

	/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
	{
		//cprintf("[sched] no envs - nothing more to do!\n");
		get_into_prompt();
f01069d0:	e8 ce b3 ff ff       	call   f0101da3 <get_into_prompt>

f01069d5 <sched_init_RR>:

//=============================
// [3] Initialize RR Scheduler:
//=============================
void sched_init_RR(uint8 quantum)
{
f01069d5:	55                   	push   %ebp
f01069d6:	89 e5                	mov    %esp,%ebp
f01069d8:	83 ec 28             	sub    $0x28,%esp
f01069db:	8b 45 08             	mov    0x8(%ebp),%eax
f01069de:	88 45 e4             	mov    %al,-0x1c(%ebp)

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f01069e1:	c6 05 00 2b 5a f0 01 	movb   $0x1,0xf05a2b00
	//cprintf("sizeof(struct Env_Queue) = %x\n", sizeof(struct Env_Queue));
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
	//cprintf("num_of_ready_queues * sizeof(uint8) = %x\n", num_of_ready_queues * sizeof(uint8));

#endif
	quantums[0] = quantum;
f01069e8:	8a 45 e4             	mov    -0x1c(%ebp),%al
f01069eb:	a2 84 27 5a f0       	mov    %al,0xf05a2784
	kclock_set_quantum(quantums[0]);
f01069f0:	a0 84 27 5a f0       	mov    0xf05a2784,%al
f01069f5:	0f b6 c0             	movzbl %al,%eax
f01069f8:	83 ec 0c             	sub    $0xc,%esp
f01069fb:	50                   	push   %eax
f01069fc:	e8 50 e3 ff ff       	call   f0104d51 <kclock_set_quantum>
f0106a01:	83 c4 10             	add    $0x10,%esp
	init_queue(&(ProcessQueues.env_ready_queues[0]));
f0106a04:	83 ec 0c             	sub    $0xc,%esp
f0106a07:	68 90 fe 59 f0       	push   $0xf059fe90
f0106a0c:	e8 26 e5 ff ff       	call   f0104f37 <init_queue>
f0106a11:	83 c4 10             	add    $0x10,%esp
	//=========================================
	//DON'T CHANGE THESE LINES=================
	uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
f0106a14:	e8 97 e4 ff ff       	call   f0104eb0 <kclock_read_cnt0_latch>
f0106a19:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	cprintf("*	RR scheduler with initial clock = %d\n", cnt0);
f0106a1d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0106a21:	83 ec 08             	sub    $0x8,%esp
f0106a24:	50                   	push   %eax
f0106a25:	68 48 70 12 f0       	push   $0xf0127048
f0106a2a:	e8 3d a5 ff ff       	call   f0100f6c <cprintf>
f0106a2f:	83 c4 10             	add    $0x10,%esp
	mycpu()->scheduler_status = SCH_STOPPED;
f0106a32:	e8 c6 06 00 00       	call   f01070fd <mycpu>
f0106a37:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f0106a3e:	00 00 00 
	scheduler_method = SCH_RR;
f0106a41:	c7 05 b4 28 5a f0 00 	movl   $0x0,0xf05a28b4
f0106a48:	00 00 00 
	//=========================================
	//=========================================
}
f0106a4b:	90                   	nop
f0106a4c:	c9                   	leave  
f0106a4d:	c3                   	ret    

f0106a4e <sched_init_MLFQ>:

//===============================
// [4] Initialize MLFQ Scheduler:
//===============================
void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f0106a4e:	55                   	push   %ebp
f0106a4f:	89 e5                	mov    %esp,%ebp
f0106a51:	83 ec 18             	sub    $0x18,%esp
f0106a54:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a57:	88 45 f4             	mov    %al,-0xc(%ebp)
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f0106a5a:	e8 88 e7 ff ff       	call   f01051e7 <sched_delete_ready_queues>
	//=========================================
	//=========================================
	//[PROJECT] MLFQ Scheduler - sched_init_MLFQ
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106a5f:	83 ec 04             	sub    $0x4,%esp
f0106a62:	68 70 70 12 f0       	push   $0xf0127070
f0106a67:	68 ce 00 00 00       	push   $0xce
f0106a6c:	68 ba 6f 12 f0       	push   $0xf0126fba
f0106a71:	e8 a4 98 ff ff       	call   f010031a <_panic>

f0106a76 <sched_init_BSD>:

//===============================
// [5] Initialize BSD Scheduler:
//===============================
void sched_init_BSD(uint8 numOfLevels, uint8 quantum)
{
f0106a76:	55                   	push   %ebp
f0106a77:	89 e5                	mov    %esp,%ebp
f0106a79:	83 ec 18             	sub    $0x18,%esp
f0106a7c:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a82:	88 55 f4             	mov    %dl,-0xc(%ebp)
f0106a85:	88 45 f0             	mov    %al,-0x10(%ebp)
	//[PROJECT] BSD Scheduler - sched_init_BSD
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106a88:	83 ec 04             	sub    $0x4,%esp
f0106a8b:	68 70 70 12 f0       	push   $0xf0127070
f0106a90:	68 e4 00 00 00       	push   $0xe4
f0106a95:	68 ba 6f 12 f0       	push   $0xf0126fba
f0106a9a:	e8 7b 98 ff ff       	call   f010031a <_panic>

f0106a9f <fos_scheduler_RR>:

//=========================
// [6] RR Scheduler:
//=========================
struct Env* fos_scheduler_RR()
{
f0106a9f:	55                   	push   %ebp
f0106aa0:	89 e5                	mov    %esp,%ebp
f0106aa2:	83 ec 18             	sub    $0x18,%esp
	// Pick next environment from the ready queue,
	// and switch to such environment if found.
	// It's OK to choose the previously running env if no other env
	// is runnable.
	/*To protect process Qs (or info of current process) in multi-CPU************************/
	if(!holding_spinlock(&ProcessQueues.qlock))
f0106aa5:	83 ec 0c             	sub    $0xc,%esp
f0106aa8:	68 00 fe 59 f0       	push   $0xf059fe00
f0106aad:	e8 88 82 00 00       	call   f010ed3a <holding_spinlock>
f0106ab2:	83 c4 10             	add    $0x10,%esp
f0106ab5:	85 c0                	test   %eax,%eax
f0106ab7:	75 17                	jne    f0106ad0 <fos_scheduler_RR+0x31>
		panic("fos_scheduler_RR: q.lock is not held by this CPU while it's expected to be.");
f0106ab9:	83 ec 04             	sub    $0x4,%esp
f0106abc:	68 84 70 12 f0       	push   $0xf0127084
f0106ac1:	68 fe 00 00 00       	push   $0xfe
f0106ac6:	68 ba 6f 12 f0       	push   $0xf0126fba
f0106acb:	e8 4a 98 ff ff       	call   f010031a <_panic>
	/****************************************************************************************/
	struct Env *next_env = NULL;
f0106ad0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct Env *cur_env = get_cpu_proc();
f0106ad7:	e8 94 3c 00 00       	call   f010a770 <get_cpu_proc>
f0106adc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//If the curenv is still exist, then insert it again in the ready queue
	if (cur_env != NULL)
f0106adf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106ae3:	74 13                	je     f0106af8 <fos_scheduler_RR+0x59>
	{
		enqueue(&(ProcessQueues.env_ready_queues[0]), cur_env);
f0106ae5:	83 ec 08             	sub    $0x8,%esp
f0106ae8:	ff 75 f0             	pushl  -0x10(%ebp)
f0106aeb:	68 90 fe 59 f0       	push   $0xf059fe90
f0106af0:	e8 83 e4 ff ff       	call   f0104f78 <enqueue>
f0106af5:	83 c4 10             	add    $0x10,%esp
	}

	//Pick the next environment from the ready queue
	next_env = dequeue(&(ProcessQueues.env_ready_queues[0]));
f0106af8:	83 ec 0c             	sub    $0xc,%esp
f0106afb:	68 90 fe 59 f0       	push   $0xf059fe90
f0106b00:	e8 04 e5 ff ff       	call   f0105009 <dequeue>
f0106b05:	83 c4 10             	add    $0x10,%esp
f0106b08:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//Reset the quantum
	//2017: Reset the value of CNT0 for the next clock interval
	kclock_set_quantum(quantums[0]);
f0106b0b:	a0 84 27 5a f0       	mov    0xf05a2784,%al
f0106b10:	0f b6 c0             	movzbl %al,%eax
f0106b13:	83 ec 0c             	sub    $0xc,%esp
f0106b16:	50                   	push   %eax
f0106b17:	e8 35 e2 ff ff       	call   f0104d51 <kclock_set_quantum>
f0106b1c:	83 c4 10             	add    $0x10,%esp
	//uint16 cnt0 = kclock_read_cnt0_latch() ;
	//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	return next_env;
f0106b1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106b22:	c9                   	leave  
f0106b23:	c3                   	ret    

f0106b24 <fos_scheduler_MLFQ>:

//=========================
// [6] MLFQ Scheduler:
//=========================
struct Env* fos_scheduler_MLFQ()
{
f0106b24:	55                   	push   %ebp
f0106b25:	89 e5                	mov    %esp,%ebp
f0106b27:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	/*To protect process Qs (or info of current process) in multi-CPU************************/
	if(!holding_spinlock(&ProcessQueues.qlock))
f0106b2a:	83 ec 0c             	sub    $0xc,%esp
f0106b2d:	68 00 fe 59 f0       	push   $0xf059fe00
f0106b32:	e8 03 82 00 00       	call   f010ed3a <holding_spinlock>
f0106b37:	83 c4 10             	add    $0x10,%esp
f0106b3a:	85 c0                	test   %eax,%eax
f0106b3c:	75 17                	jne    f0106b55 <fos_scheduler_MLFQ+0x31>
		panic("fos_scheduler_MLFQ: q.lock is not held by this CPU while it's expected to be.");
f0106b3e:	83 ec 04             	sub    $0x4,%esp
f0106b41:	68 d0 70 12 f0       	push   $0xf01270d0
f0106b46:	68 1d 01 00 00       	push   $0x11d
f0106b4b:	68 ba 6f 12 f0       	push   $0xf0126fba
f0106b50:	e8 c5 97 ff ff       	call   f010031a <_panic>
	/****************************************************************************************/

	//[PROJECT] MLFQ Scheduler - fos_scheduler_MLFQ
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106b55:	83 ec 04             	sub    $0x4,%esp
f0106b58:	68 70 70 12 f0       	push   $0xf0127070
f0106b5d:	68 23 01 00 00       	push   $0x123
f0106b62:	68 ba 6f 12 f0       	push   $0xf0126fba
f0106b67:	e8 ae 97 ff ff       	call   f010031a <_panic>

f0106b6c <fos_scheduler_BSD>:

//=========================
// [7] BSD Scheduler:
//=========================
struct Env* fos_scheduler_BSD()
{
f0106b6c:	55                   	push   %ebp
f0106b6d:	89 e5                	mov    %esp,%ebp
f0106b6f:	83 ec 08             	sub    $0x8,%esp
	/*To protect process Qs (or info of current process) in multi-CPU************************/
	if(!holding_spinlock(&ProcessQueues.qlock))
f0106b72:	83 ec 0c             	sub    $0xc,%esp
f0106b75:	68 00 fe 59 f0       	push   $0xf059fe00
f0106b7a:	e8 bb 81 00 00       	call   f010ed3a <holding_spinlock>
f0106b7f:	83 c4 10             	add    $0x10,%esp
f0106b82:	85 c0                	test   %eax,%eax
f0106b84:	75 17                	jne    f0106b9d <fos_scheduler_BSD+0x31>
		panic("fos_scheduler_BSD: q.lock is not held by this CPU while it's expected to be.");
f0106b86:	83 ec 04             	sub    $0x4,%esp
f0106b89:	68 20 71 12 f0       	push   $0xf0127120
f0106b8e:	68 2e 01 00 00       	push   $0x12e
f0106b93:	68 ba 6f 12 f0       	push   $0xf0126fba
f0106b98:	e8 7d 97 ff ff       	call   f010031a <_panic>
	/****************************************************************************************/

	//[PROJECT] BSD Scheduler - fos_scheduler_BSD
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106b9d:	83 ec 04             	sub    $0x4,%esp
f0106ba0:	68 70 70 12 f0       	push   $0xf0127070
f0106ba5:	68 34 01 00 00       	push   $0x134
f0106baa:	68 ba 6f 12 f0       	push   $0xf0126fba
f0106baf:	e8 66 97 ff ff       	call   f010031a <_panic>

f0106bb4 <clock_interrupt_handler>:
//========================================
// [8] Clock Interrupt Handler
//	  (Automatically Called Every Quantum)
//========================================
void clock_interrupt_handler(struct Trapframe* tf)
{
f0106bb4:	55                   	push   %ebp
f0106bb5:	89 e5                	mov    %esp,%ebp
f0106bb7:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodBSD())
f0106bba:	e8 74 fb ff ff       	call   f0106733 <isSchedMethodBSD>
f0106bbf:	85 c0                	test   %eax,%eax
f0106bc1:	74 17                	je     f0106bda <clock_interrupt_handler+0x26>
	{
		//[PROJECT] BSD Scheduler - clock_interrupt_handler
		//Your code is here
		//Comment the following line
		panic("Not implemented yet");
f0106bc3:	83 ec 04             	sub    $0x4,%esp
f0106bc6:	68 70 70 12 f0       	push   $0xf0127070
f0106bcb:	68 43 01 00 00       	push   $0x143
f0106bd0:	68 ba 6f 12 f0       	push   $0xf0126fba
f0106bd5:	e8 40 97 ff ff       	call   f010031a <_panic>
	}



	/********DON'T CHANGE THESE LINES***********/
	ticks++ ;
f0106bda:	a1 68 2a 5a f0       	mov    0xf05a2a68,%eax
f0106bdf:	8b 15 6c 2a 5a f0    	mov    0xf05a2a6c,%edx
f0106be5:	83 c0 01             	add    $0x1,%eax
f0106be8:	83 d2 00             	adc    $0x0,%edx
f0106beb:	a3 68 2a 5a f0       	mov    %eax,0xf05a2a68
f0106bf0:	89 15 6c 2a 5a f0    	mov    %edx,0xf05a2a6c
	struct Env* p = get_cpu_proc();
f0106bf6:	e8 75 3b 00 00       	call   f010a770 <get_cpu_proc>
f0106bfb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (p == NULL)
f0106bfe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c02:	74 30                	je     f0106c34 <clock_interrupt_handler+0x80>
	{
	}
	else
	{
		p->nClocks++ ;
f0106c04:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c07:	8b 80 68 da 01 00    	mov    0x1da68(%eax),%eax
f0106c0d:	8d 50 01             	lea    0x1(%eax),%edx
f0106c10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c13:	89 90 68 da 01 00    	mov    %edx,0x1da68(%eax)
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0106c19:	83 ec 0c             	sub    $0xc,%esp
f0106c1c:	6a 01                	push   $0x1
f0106c1e:	e8 ed 7a 00 00       	call   f010e710 <isPageReplacmentAlgorithmLRU>
f0106c23:	83 c4 10             	add    $0x10,%esp
f0106c26:	85 c0                	test   %eax,%eax
f0106c28:	74 05                	je     f0106c2f <clock_interrupt_handler+0x7b>
		{
			update_WS_time_stamps();
f0106c2a:	e8 08 00 00 00       	call   f0106c37 <update_WS_time_stamps>
		}
		//cprintf("\n***************\nClock Handler\n***************\n") ;
		//fos_scheduler();
		yield();
f0106c2f:	e8 6a 3c 00 00       	call   f010a89e <yield>
	}
	/*****************************************/
}
f0106c34:	90                   	nop
f0106c35:	c9                   	leave  
f0106c36:	c3                   	ret    

f0106c37 <update_WS_time_stamps>:
//===================================================================
// [9] Update LRU Timestamp of WS Elements
//	  (Automatically Called Every Quantum in case of LRU Time Approx)
//===================================================================
void update_WS_time_stamps()
{
f0106c37:	55                   	push   %ebp
f0106c38:	89 e5                	mov    %esp,%ebp
f0106c3a:	53                   	push   %ebx
f0106c3b:	83 ec 34             	sub    $0x34,%esp
	struct Env *curr_env_ptr = get_cpu_proc();
f0106c3e:	e8 2d 3b 00 00       	call   f010a770 <get_cpu_proc>
f0106c43:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0106c46:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106c4a:	0f 84 9d 01 00 00    	je     f0106ded <update_WS_time_stamps+0x1b6>
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
				for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0106c50:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106c57:	e9 99 00 00 00       	jmp    f0106cf5 <update_WS_time_stamps+0xbe>
				{
					wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
f0106c5c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106c5f:	89 d0                	mov    %edx,%eax
f0106c61:	01 c0                	add    %eax,%eax
f0106c63:	01 d0                	add    %edx,%eax
f0106c65:	c1 e0 03             	shl    $0x3,%eax
f0106c68:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f0106c6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c71:	01 d0                	add    %edx,%eax
f0106c73:	83 c0 08             	add    $0x8,%eax
f0106c76:	89 45 e8             	mov    %eax,-0x18(%ebp)
					if( wse->empty == 1)
f0106c79:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106c7c:	8a 40 04             	mov    0x4(%eax),%al
f0106c7f:	3c 01                	cmp    $0x1,%al
f0106c81:	74 6e                	je     f0106cf1 <update_WS_time_stamps+0xba>
						continue;
#endif
					//update the time if the page was referenced
					uint32 page_va = wse->virtual_address ;
f0106c83:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106c86:	8b 00                	mov    (%eax),%eax
f0106c88:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0106c8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c8e:	8b 40 64             	mov    0x64(%eax),%eax
f0106c91:	83 ec 08             	sub    $0x8,%esp
f0106c94:	ff 75 e4             	pushl  -0x1c(%ebp)
f0106c97:	50                   	push   %eax
f0106c98:	e8 4f 1f 00 00       	call   f0108bec <pt_get_page_permissions>
f0106c9d:	83 c4 10             	add    $0x10,%esp
f0106ca0:	89 45 e0             	mov    %eax,-0x20(%ebp)
					uint32 oldTimeStamp = wse->time_stamp;
f0106ca3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106ca6:	8b 40 08             	mov    0x8(%eax),%eax
f0106ca9:	89 45 dc             	mov    %eax,-0x24(%ebp)

					if (perm & PERM_USED)
f0106cac:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106caf:	83 e0 20             	and    $0x20,%eax
f0106cb2:	85 c0                	test   %eax,%eax
f0106cb4:	74 2b                	je     f0106ce1 <update_WS_time_stamps+0xaa>
					{
						wse->time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0106cb6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106cb9:	c1 e8 02             	shr    $0x2,%eax
f0106cbc:	0d 00 00 00 80       	or     $0x80000000,%eax
f0106cc1:	89 c2                	mov    %eax,%edx
f0106cc3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106cc6:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0106cc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ccc:	8b 40 64             	mov    0x64(%eax),%eax
f0106ccf:	6a 20                	push   $0x20
f0106cd1:	6a 00                	push   $0x0
f0106cd3:	ff 75 e4             	pushl  -0x1c(%ebp)
f0106cd6:	50                   	push   %eax
f0106cd7:	e8 4c 1e 00 00       	call   f0108b28 <pt_set_page_permissions>
f0106cdc:	83 c4 10             	add    $0x10,%esp
f0106cdf:	eb 11                	jmp    f0106cf2 <update_WS_time_stamps+0xbb>
					}
					else
					{
						wse->time_stamp = (oldTimeStamp>>2);
f0106ce1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106ce4:	c1 e8 02             	shr    $0x2,%eax
f0106ce7:	89 c2                	mov    %eax,%edx
f0106ce9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106cec:	89 50 08             	mov    %edx,0x8(%eax)
f0106cef:	eb 01                	jmp    f0106cf2 <update_WS_time_stamps+0xbb>
#else
				for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
				{
					wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
					if( wse->empty == 1)
						continue;
f0106cf1:	90                   	nop
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
				for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0106cf2:	ff 45 f4             	incl   -0xc(%ebp)
f0106cf5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106cf8:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f0106cfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106d01:	39 c2                	cmp    %eax,%edx
f0106d03:	0f 87 53 ff ff ff    	ja     f0106c5c <update_WS_time_stamps+0x25>
				}
			}

			{
				int t ;
				for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0106d09:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0106d10:	e9 ce 00 00 00       	jmp    f0106de3 <update_WS_time_stamps+0x1ac>
				{
					if( curr_env_ptr->__ptr_tws[t].empty != 1)
f0106d15:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0106d18:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d1b:	89 d0                	mov    %edx,%eax
f0106d1d:	01 c0                	add    %eax,%eax
f0106d1f:	01 d0                	add    %edx,%eax
f0106d21:	c1 e0 03             	shl    $0x3,%eax
f0106d24:	01 c8                	add    %ecx,%eax
f0106d26:	05 60 d5 01 00       	add    $0x1d560,%eax
f0106d2b:	8a 00                	mov    (%eax),%al
f0106d2d:	3c 01                	cmp    $0x1,%al
f0106d2f:	0f 84 ab 00 00 00    	je     f0106de0 <update_WS_time_stamps+0x1a9>
					{
						//update the time if the page was referenced
						uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0106d35:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0106d38:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d3b:	89 d0                	mov    %edx,%eax
f0106d3d:	01 c0                	add    %eax,%eax
f0106d3f:	01 d0                	add    %edx,%eax
f0106d41:	c1 e0 03             	shl    $0x3,%eax
f0106d44:	01 c8                	add    %ecx,%eax
f0106d46:	05 5c d5 01 00       	add    $0x1d55c,%eax
f0106d4b:	8b 00                	mov    (%eax),%eax
f0106d4d:	89 45 d8             	mov    %eax,-0x28(%ebp)
						uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0106d50:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0106d53:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d56:	89 d0                	mov    %edx,%eax
f0106d58:	01 c0                	add    %eax,%eax
f0106d5a:	01 d0                	add    %edx,%eax
f0106d5c:	c1 e0 03             	shl    $0x3,%eax
f0106d5f:	01 c8                	add    %ecx,%eax
f0106d61:	05 64 d5 01 00       	add    $0x1d564,%eax
f0106d66:	8b 00                	mov    (%eax),%eax
f0106d68:	89 45 d4             	mov    %eax,-0x2c(%ebp)

						if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0106d6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d6e:	8b 40 64             	mov    0x64(%eax),%eax
f0106d71:	83 ec 08             	sub    $0x8,%esp
f0106d74:	ff 75 d8             	pushl  -0x28(%ebp)
f0106d77:	50                   	push   %eax
f0106d78:	e8 4b 1f 00 00       	call   f0108cc8 <pd_is_table_used>
f0106d7d:	83 c4 10             	add    $0x10,%esp
f0106d80:	85 c0                	test   %eax,%eax
f0106d82:	74 3c                	je     f0106dc0 <update_WS_time_stamps+0x189>
						{
							curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0106d84:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0106d87:	c1 e8 02             	shr    $0x2,%eax
f0106d8a:	0d 00 00 00 80       	or     $0x80000000,%eax
f0106d8f:	89 c1                	mov    %eax,%ecx
f0106d91:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0106d94:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d97:	89 d0                	mov    %edx,%eax
f0106d99:	01 c0                	add    %eax,%eax
f0106d9b:	01 d0                	add    %edx,%eax
f0106d9d:	c1 e0 03             	shl    $0x3,%eax
f0106da0:	01 d8                	add    %ebx,%eax
f0106da2:	05 64 d5 01 00       	add    $0x1d564,%eax
f0106da7:	89 08                	mov    %ecx,(%eax)
							pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0106da9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106dac:	8b 40 64             	mov    0x64(%eax),%eax
f0106daf:	83 ec 08             	sub    $0x8,%esp
f0106db2:	ff 75 d8             	pushl  -0x28(%ebp)
f0106db5:	50                   	push   %eax
f0106db6:	e8 31 1f 00 00       	call   f0108cec <pd_set_table_unused>
f0106dbb:	83 c4 10             	add    $0x10,%esp
f0106dbe:	eb 20                	jmp    f0106de0 <update_WS_time_stamps+0x1a9>
						}
						else
						{
							curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0106dc0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0106dc3:	c1 e8 02             	shr    $0x2,%eax
f0106dc6:	89 c1                	mov    %eax,%ecx
f0106dc8:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0106dcb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106dce:	89 d0                	mov    %edx,%eax
f0106dd0:	01 c0                	add    %eax,%eax
f0106dd2:	01 d0                	add    %edx,%eax
f0106dd4:	c1 e0 03             	shl    $0x3,%eax
f0106dd7:	01 d8                	add    %ebx,%eax
f0106dd9:	05 64 d5 01 00       	add    $0x1d564,%eax
f0106dde:	89 08                	mov    %ecx,(%eax)
				}
			}

			{
				int t ;
				for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0106de0:	ff 45 f0             	incl   -0x10(%ebp)
f0106de3:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0106de7:	0f 8e 28 ff ff ff    	jle    f0106d15 <update_WS_time_stamps+0xde>
						}
					}
				}
			}
		}
	}
f0106ded:	90                   	nop
f0106dee:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106df1:	c9                   	leave  
f0106df2:	c3                   	ret    

f0106df3 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0106df3:	55                   	push   %ebp
f0106df4:	89 e5                	mov    %esp,%ebp
f0106df6:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0106df9:	c7 05 ac f3 59 f0 01 	movl   $0x1,0xf059f3ac
f0106e00:	00 00 00 
f0106e03:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0106e0a:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0106e0e:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0106e11:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106e14:	ee                   	out    %al,(%dx)
f0106e15:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0106e1c:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0106e20:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0106e23:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106e26:	ee                   	out    %al,(%dx)
f0106e27:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0106e2e:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0106e32:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0106e35:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106e38:	ee                   	out    %al,(%dx)
f0106e39:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0106e40:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0106e44:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0106e47:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0106e4a:	ee                   	out    %al,(%dx)
f0106e4b:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0106e52:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0106e56:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0106e59:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0106e5c:	ee                   	out    %al,(%dx)
f0106e5d:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0106e64:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0106e68:	8a 45 b7             	mov    -0x49(%ebp),%al
f0106e6b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0106e6e:	ee                   	out    %al,(%dx)
f0106e6f:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0106e76:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0106e7a:	8a 45 b8             	mov    -0x48(%ebp),%al
f0106e7d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0106e80:	ee                   	out    %al,(%dx)
f0106e81:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0106e88:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0106e8c:	8a 45 b9             	mov    -0x47(%ebp),%al
f0106e8f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0106e92:	ee                   	out    %al,(%dx)
f0106e93:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0106e9a:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0106e9e:	8a 45 ba             	mov    -0x46(%ebp),%al
f0106ea1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0106ea4:	ee                   	out    %al,(%dx)
f0106ea5:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0106eac:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0106eb0:	8a 45 bb             	mov    -0x45(%ebp),%al
f0106eb3:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0106eb6:	ee                   	out    %al,(%dx)
f0106eb7:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0106ebe:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0106ec2:	8a 45 bc             	mov    -0x44(%ebp),%al
f0106ec5:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0106ec8:	ee                   	out    %al,(%dx)
f0106ec9:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0106ed0:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0106ed4:	8a 45 bd             	mov    -0x43(%ebp),%al
f0106ed7:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0106eda:	ee                   	out    %al,(%dx)
f0106edb:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0106ee2:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0106ee6:	8a 45 be             	mov    -0x42(%ebp),%al
f0106ee9:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0106eec:	ee                   	out    %al,(%dx)
f0106eed:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0106ef4:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0106ef8:	8a 45 bf             	mov    -0x41(%ebp),%al
f0106efb:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0106efe:	ee                   	out    %al,(%dx)
	outb(PIC1_CMD, 0x0a);             /* read IRR by default */

	outb(PIC2_CMD, 0x68);               /* OCW3 */
	outb(PIC2_CMD, 0x0a);               /* OCW3 */

	if (irq_init_mask_8259A != 0xFFFF)
f0106eff:	66 a1 58 e9 17 f0    	mov    0xf017e958,%ax
f0106f05:	66 83 f8 ff          	cmp    $0xffff,%ax
f0106f09:	74 15                	je     f0106f20 <pic_init+0x12d>
		irq_setmask_8259A(irq_init_mask_8259A);
f0106f0b:	66 a1 58 e9 17 f0    	mov    0xf017e958,%ax
f0106f11:	0f b7 c0             	movzwl %ax,%eax
f0106f14:	83 ec 0c             	sub    $0xc,%esp
f0106f17:	50                   	push   %eax
f0106f18:	e8 06 00 00 00       	call   f0106f23 <irq_setmask_8259A>
f0106f1d:	83 c4 10             	add    $0x10,%esp
}
f0106f20:	90                   	nop
f0106f21:	c9                   	leave  
f0106f22:	c3                   	ret    

f0106f23 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0106f23:	55                   	push   %ebp
f0106f24:	89 e5                	mov    %esp,%ebp
f0106f26:	83 ec 14             	sub    $0x14,%esp
f0106f29:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f2c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	 * We then use the new functions irq_set_mask() and irq_clear_mask()
	 * to manipulate a specific IRQ mask
	 */
	//irq_init_mask_8259A = mask;

	if (!didinit)
f0106f30:	a1 ac f3 59 f0       	mov    0xf059f3ac,%eax
f0106f35:	85 c0                	test   %eax,%eax
f0106f37:	74 34                	je     f0106f6d <irq_setmask_8259A+0x4a>
		return;

	outb(PIC1_DATA, (char)mask);
f0106f39:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f3c:	0f b6 c0             	movzbl %al,%eax
f0106f3f:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0106f46:	88 45 f6             	mov    %al,-0xa(%ebp)
f0106f49:	8a 45 f6             	mov    -0xa(%ebp),%al
f0106f4c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106f4f:	ee                   	out    %al,(%dx)
	outb(PIC2_DATA, (char)(mask >> 8));
f0106f50:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f53:	66 c1 e8 08          	shr    $0x8,%ax
f0106f57:	0f b6 c0             	movzbl %al,%eax
f0106f5a:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0106f61:	88 45 f7             	mov    %al,-0x9(%ebp)
f0106f64:	8a 45 f7             	mov    -0x9(%ebp),%al
f0106f67:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106f6a:	ee                   	out    %al,(%dx)
f0106f6b:	eb 01                	jmp    f0106f6e <irq_setmask_8259A+0x4b>
	 * to manipulate a specific IRQ mask
	 */
	//irq_init_mask_8259A = mask;

	if (!didinit)
		return;
f0106f6d:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (int i = 0; i < 16; i++)
	//if (~mask & (1<<i))
	//cprintf(" %d", i);
	//cprintf("\n");
}
f0106f6e:	c9                   	leave  
f0106f6f:	c3                   	ret    

f0106f70 <irq_set_mask>:

/*Ref: OSDev Wiki*/
void irq_set_mask(uint8 IRQline)
{
f0106f70:	55                   	push   %ebp
f0106f71:	89 e5                	mov    %esp,%ebp
f0106f73:	53                   	push   %ebx
f0106f74:	83 ec 14             	sub    $0x14,%esp
f0106f77:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f7a:	88 45 e8             	mov    %al,-0x18(%ebp)
	if (!didinit)
f0106f7d:	a1 ac f3 59 f0       	mov    0xf059f3ac,%eax
f0106f82:	85 c0                	test   %eax,%eax
f0106f84:	74 58                	je     f0106fde <irq_set_mask+0x6e>
		return;

	uint16 port;
	uint8 value;

	if(IRQline < 8) {
f0106f86:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
f0106f8a:	77 08                	ja     f0106f94 <irq_set_mask+0x24>
		port = PIC1_DATA;
f0106f8c:	66 c7 45 fa 21 00    	movw   $0x21,-0x6(%ebp)
f0106f92:	eb 0a                	jmp    f0106f9e <irq_set_mask+0x2e>
	} else {
		port = PIC2_DATA;
f0106f94:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
		IRQline -= 8;
f0106f9a:	80 6d e8 08          	subb   $0x8,-0x18(%ebp)
	}
	value = inb(port) | (1 << IRQline);
f0106f9e:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
f0106fa2:	89 45 f4             	mov    %eax,-0xc(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106fa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106fa8:	89 c2                	mov    %eax,%edx
f0106faa:	ec                   	in     (%dx),%al
f0106fab:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0106fae:	8a 45 ee             	mov    -0x12(%ebp),%al
f0106fb1:	88 c2                	mov    %al,%dl
f0106fb3:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
f0106fb7:	bb 01 00 00 00       	mov    $0x1,%ebx
f0106fbc:	88 c1                	mov    %al,%cl
f0106fbe:	d3 e3                	shl    %cl,%ebx
f0106fc0:	89 d8                	mov    %ebx,%eax
f0106fc2:	09 d0                	or     %edx,%eax
f0106fc4:	88 45 f9             	mov    %al,-0x7(%ebp)
	outb(port, value);
f0106fc7:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
f0106fcb:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
f0106fcf:	89 55 f0             	mov    %edx,-0x10(%ebp)
f0106fd2:	88 45 ef             	mov    %al,-0x11(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0106fd5:	8a 45 ef             	mov    -0x11(%ebp),%al
f0106fd8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106fdb:	ee                   	out    %al,(%dx)
f0106fdc:	eb 01                	jmp    f0106fdf <irq_set_mask+0x6f>

/*Ref: OSDev Wiki*/
void irq_set_mask(uint8 IRQline)
{
	if (!didinit)
		return;
f0106fde:	90                   	nop
		port = PIC2_DATA;
		IRQline -= 8;
	}
	value = inb(port) | (1 << IRQline);
	outb(port, value);
}
f0106fdf:	83 c4 14             	add    $0x14,%esp
f0106fe2:	5b                   	pop    %ebx
f0106fe3:	5d                   	pop    %ebp
f0106fe4:	c3                   	ret    

f0106fe5 <irq_clear_mask>:

/*Ref: OSDev Wiki*/
void irq_clear_mask(uint8 IRQline)
{
f0106fe5:	55                   	push   %ebp
f0106fe6:	89 e5                	mov    %esp,%ebp
f0106fe8:	53                   	push   %ebx
f0106fe9:	83 ec 14             	sub    $0x14,%esp
f0106fec:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fef:	88 45 e8             	mov    %al,-0x18(%ebp)
	if (!didinit)
f0106ff2:	a1 ac f3 59 f0       	mov    0xf059f3ac,%eax
f0106ff7:	85 c0                	test   %eax,%eax
f0106ff9:	74 5a                	je     f0107055 <irq_clear_mask+0x70>
		return;

	uint16 port;
	uint8 value;

	if(IRQline < 8) {
f0106ffb:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
f0106fff:	77 08                	ja     f0107009 <irq_clear_mask+0x24>
		port = PIC1_DATA;
f0107001:	66 c7 45 fa 21 00    	movw   $0x21,-0x6(%ebp)
f0107007:	eb 0a                	jmp    f0107013 <irq_clear_mask+0x2e>
	} else {
		port = PIC2_DATA;
f0107009:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
		IRQline -= 8;
f010700f:	80 6d e8 08          	subb   $0x8,-0x18(%ebp)
	}
	value = inb(port) & ~(1 << IRQline);
f0107013:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
f0107017:	89 45 f4             	mov    %eax,-0xc(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010701a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010701d:	89 c2                	mov    %eax,%edx
f010701f:	ec                   	in     (%dx),%al
f0107020:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0107023:	8a 45 ee             	mov    -0x12(%ebp),%al
f0107026:	88 c2                	mov    %al,%dl
f0107028:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
f010702c:	bb 01 00 00 00       	mov    $0x1,%ebx
f0107031:	88 c1                	mov    %al,%cl
f0107033:	d3 e3                	shl    %cl,%ebx
f0107035:	89 d8                	mov    %ebx,%eax
f0107037:	f7 d0                	not    %eax
f0107039:	21 d0                	and    %edx,%eax
f010703b:	88 45 f9             	mov    %al,-0x7(%ebp)
	outb(port, value);
f010703e:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
f0107042:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
f0107046:	89 55 f0             	mov    %edx,-0x10(%ebp)
f0107049:	88 45 ef             	mov    %al,-0x11(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010704c:	8a 45 ef             	mov    -0x11(%ebp),%al
f010704f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107052:	ee                   	out    %al,(%dx)
f0107053:	eb 01                	jmp    f0107056 <irq_clear_mask+0x71>

/*Ref: OSDev Wiki*/
void irq_clear_mask(uint8 IRQline)
{
	if (!didinit)
		return;
f0107055:	90                   	nop
		port = PIC2_DATA;
		IRQline -= 8;
	}
	value = inb(port) & ~(1 << IRQline);
	outb(port, value);
}
f0107056:	83 c4 14             	add    $0x14,%esp
f0107059:	5b                   	pop    %ebx
f010705a:	5d                   	pop    %ebp
f010705b:	c3                   	ret    

f010705c <irq_get_mask>:


int irq_get_mask(uint8 IRQline)
{
f010705c:	55                   	push   %ebp
f010705d:	89 e5                	mov    %esp,%ebp
f010705f:	53                   	push   %ebx
f0107060:	83 ec 14             	sub    $0x14,%esp
f0107063:	8b 45 08             	mov    0x8(%ebp),%eax
f0107066:	88 45 e8             	mov    %al,-0x18(%ebp)
	if (!didinit)
f0107069:	a1 ac f3 59 f0       	mov    0xf059f3ac,%eax
f010706e:	85 c0                	test   %eax,%eax
f0107070:	75 07                	jne    f0107079 <irq_get_mask+0x1d>
		return -1;
f0107072:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0107077:	eb 45                	jmp    f01070be <irq_get_mask+0x62>

	uint16 port;
	uint8 value;

	if(IRQline < 8) {
f0107079:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
f010707d:	77 08                	ja     f0107087 <irq_get_mask+0x2b>
		port = PIC1_DATA;
f010707f:	66 c7 45 fa 21 00    	movw   $0x21,-0x6(%ebp)
f0107085:	eb 0a                	jmp    f0107091 <irq_get_mask+0x35>
	} else {
		port = PIC2_DATA;
f0107087:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
		IRQline -= 8;
f010708d:	80 6d e8 08          	subb   $0x8,-0x18(%ebp)
	}
	value = inb(port) & (1 << IRQline);
f0107091:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
f0107095:	89 45 f4             	mov    %eax,-0xc(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0107098:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010709b:	89 c2                	mov    %eax,%edx
f010709d:	ec                   	in     (%dx),%al
f010709e:	88 45 f3             	mov    %al,-0xd(%ebp)
	return data;
f01070a1:	8a 45 f3             	mov    -0xd(%ebp),%al
f01070a4:	88 c2                	mov    %al,%dl
f01070a6:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
f01070aa:	bb 01 00 00 00       	mov    $0x1,%ebx
f01070af:	88 c1                	mov    %al,%cl
f01070b1:	d3 e3                	shl    %cl,%ebx
f01070b3:	89 d8                	mov    %ebx,%eax
f01070b5:	21 d0                	and    %edx,%eax
f01070b7:	88 45 f9             	mov    %al,-0x7(%ebp)
	return value;
f01070ba:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
}
f01070be:	83 c4 14             	add    $0x14,%esp
f01070c1:	5b                   	pop    %ebx
f01070c2:	5d                   	pop    %ebp
f01070c3:	c3                   	ret    

f01070c4 <pic_sendEOI>:
 * If the IRQ came from the Master PIC, it is sufficient to issue this command only to the
 * Master PIC; however if the IRQ came from the Slave PIC, it is necessary to issue the command
 * to both PIC chips.
 */
void pic_sendEOI(uint8 irq)
{
f01070c4:	55                   	push   %ebp
f01070c5:	89 e5                	mov    %esp,%ebp
f01070c7:	83 ec 14             	sub    $0x14,%esp
f01070ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01070cd:	88 45 ec             	mov    %al,-0x14(%ebp)
	if(irq >= 8)
f01070d0:	80 7d ec 07          	cmpb   $0x7,-0x14(%ebp)
f01070d4:	76 12                	jbe    f01070e8 <pic_sendEOI+0x24>
f01070d6:	c7 45 f8 a0 00 00 00 	movl   $0xa0,-0x8(%ebp)
f01070dd:	c6 45 f7 20          	movb   $0x20,-0x9(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01070e1:	8a 45 f7             	mov    -0x9(%ebp),%al
f01070e4:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01070e7:	ee                   	out    %al,(%dx)
f01070e8:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%ebp)
f01070ef:	c6 45 f6 20          	movb   $0x20,-0xa(%ebp)
f01070f3:	8a 45 f6             	mov    -0xa(%ebp),%al
f01070f6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01070f9:	ee                   	out    %al,(%dx)
		outb(PIC2_CMD,PIC_EOI);

	outb(PIC1_CMD,PIC_EOI);
}
f01070fa:	90                   	nop
f01070fb:	c9                   	leave  
f01070fc:	c3                   	ret    

f01070fd <mycpu>:
extern void idt_init(void);

// Must be called with interrupts disabled to avoid the caller being
// rescheduled between reading lapicid and running through the loop.
struct cpu* mycpu()
{
f01070fd:	55                   	push   %ebp
f01070fe:	89 e5                	mov    %esp,%ebp
	return &CPUS[0]; //main CPU
f0107100:	b8 a0 25 5a f0       	mov    $0xf05a25a0,%eax
//  for (i = 0; i < ncpu; ++i) {
//    if (cpus[i].apicid == apicid)
//      return &cpus[i];
//  }
//  panic("unknown apicid\n");
}
f0107105:	5d                   	pop    %ebp
f0107106:	c3                   	ret    

f0107107 <cpu_init>:

// Common CPU setup code.
void cpu_init(int cpuIndx)
{
f0107107:	55                   	push   %ebp
f0107108:	89 e5                	mov    %esp,%ebp
f010710a:	83 ec 28             	sub    $0x28,%esp
  struct cpu* c = mycpu();
f010710d:	e8 eb ff ff ff       	call   f01070fd <mycpu>
f0107112:	89 45 f4             	mov    %eax,-0xc(%ebp)
  c->proc = NULL;
f0107115:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107118:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f010711f:	00 00 00 
  c->ncli = 0;
f0107122:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107125:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f010712c:	00 00 00 

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f010712f:	9c                   	pushf  
f0107130:	58                   	pop    %eax
f0107131:	89 45 f0             	mov    %eax,-0x10(%ebp)
        return eflags;
f0107134:	8b 45 f0             	mov    -0x10(%ebp),%eax
  c->intena = read_eflags() & FL_IF ? 1 : 0;
f0107137:	25 00 02 00 00       	and    $0x200,%eax
f010713c:	85 c0                	test   %eax,%eax
f010713e:	0f 95 c0             	setne  %al
f0107141:	0f b6 d0             	movzbl %al,%edx
f0107144:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107147:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
  //c->apicid = ?? ;

  //Initialize the CPU Context to NULL.
  //to be set later to the correct position on the stack during the
  //first switch from scheduler to the first process
  c->scheduler = NULL ;
f010714d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107150:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  c->scheduler_status = SCH_UNINITIALIZED;
f0107157:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010715a:	c7 80 b4 00 00 00 ff 	movl   $0xffffffff,0xb4(%eax)
f0107161:	ff ff ff 

  //Initialize its sched stack
  c->stack = (char*)(KERN_STACK_TOP - (cpuIndx+1)*KERNEL_STACK_SIZE);
f0107164:	8b 45 08             	mov    0x8(%ebp),%eax
f0107167:	40                   	inc    %eax
f0107168:	c1 e0 0f             	shl    $0xf,%eax
f010716b:	ba 00 00 c0 ef       	mov    $0xefc00000,%edx
f0107170:	29 c2                	sub    %eax,%edx
f0107172:	89 d0                	mov    %edx,%eax
f0107174:	89 c2                	mov    %eax,%edx
f0107176:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107179:	89 50 08             	mov    %edx,0x8(%eax)

  //initialize GDT & set it to this CPU
  seg_init();
f010717c:	e8 18 01 00 00       	call   f0107299 <seg_init>

  //initialize IDT
  idt_init();       // load idt register
f0107181:	e8 49 50 00 00       	call   f010c1cf <idt_init>

  //Initialize the TaskState to ZERO.
  //to be initialized later in init.c
  memset(&(c->ts), 0, sizeof(c->ts)) ;
f0107186:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107189:	83 c0 0c             	add    $0xc,%eax
f010718c:	83 ec 04             	sub    $0x4,%esp
f010718f:	6a 68                	push   $0x68
f0107191:	6a 00                	push   $0x0
f0107193:	50                   	push   %eax
f0107194:	e8 93 b5 01 00       	call   f012272c <memset>
f0107199:	83 c4 10             	add    $0x10,%esp

  //Indicate it's started
  xchg(&(c->started), 1); // tell startothers() we're up
f010719c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010719f:	05 a4 00 00 00       	add    $0xa4,%eax
f01071a4:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01071a7:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
xchg(volatile uint32 *addr, uint32 newval)
{
  uint32 result;

  // The + in "+m" denotes a read-modify-write operand.
  __asm __volatile("lock; xchgl %0, %1" :
f01071ae:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01071b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01071b4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01071b7:	f0 87 02             	lock xchg %eax,(%edx)
f01071ba:	89 45 e4             	mov    %eax,-0x1c(%ebp)

  //scheduler();     // start running processes
}
f01071bd:	90                   	nop
f01071be:	c9                   	leave  
f01071bf:	c3                   	ret    

f01071c0 <pushcli>:
// Pushcli/popcli are like cli/sti except that they are matched:
// it takes two popcli to undo two pushcli.  Also, if interrupts
// are off, then pushcli, popcli leaves them off.

void pushcli(void)
{
f01071c0:	55                   	push   %ebp
f01071c1:	89 e5                	mov    %esp,%ebp
f01071c3:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f01071c6:	9c                   	pushf  
f01071c7:	58                   	pop    %eax
f01071c8:	89 45 f8             	mov    %eax,-0x8(%ebp)
        return eflags;
f01071cb:	8b 45 f8             	mov    -0x8(%ebp),%eax
  int eflags = read_eflags();
f01071ce:	89 45 fc             	mov    %eax,-0x4(%ebp)
 */
//clear interrupt flag
static __inline void
cli(void)
{
	__asm __volatile("cli");
f01071d1:	fa                   	cli    
  cli();
  struct cpu* c = mycpu();
f01071d2:	e8 26 ff ff ff       	call   f01070fd <mycpu>
f01071d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(c->ncli == 0)
f01071da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01071dd:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01071e3:	85 c0                	test   %eax,%eax
f01071e5:	75 13                	jne    f01071fa <pushcli+0x3a>
    c->intena = eflags & FL_IF;
f01071e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01071ea:	25 00 02 00 00       	and    $0x200,%eax
f01071ef:	89 c2                	mov    %eax,%edx
f01071f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01071f4:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
  c->ncli += 1;
f01071fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01071fd:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0107203:	8d 50 01             	lea    0x1(%eax),%edx
f0107206:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107209:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
}
f010720f:	90                   	nop
f0107210:	c9                   	leave  
f0107211:	c3                   	ret    

f0107212 <popcli>:

void popcli(void)
{
f0107212:	55                   	push   %ebp
f0107213:	89 e5                	mov    %esp,%ebp
f0107215:	83 ec 18             	sub    $0x18,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f0107218:	9c                   	pushf  
f0107219:	58                   	pop    %eax
f010721a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        return eflags;
f010721d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  if(read_eflags()&FL_IF)
f0107220:	25 00 02 00 00       	and    $0x200,%eax
f0107225:	85 c0                	test   %eax,%eax
f0107227:	74 14                	je     f010723d <popcli+0x2b>
    panic("popcli - interruptible");
f0107229:	83 ec 04             	sub    $0x4,%esp
f010722c:	68 6d 71 12 f0       	push   $0xf012716d
f0107231:	6a 5e                	push   $0x5e
f0107233:	68 84 71 12 f0       	push   $0xf0127184
f0107238:	e8 dd 90 ff ff       	call   f010031a <_panic>
  struct cpu* c = mycpu();
f010723d:	e8 bb fe ff ff       	call   f01070fd <mycpu>
f0107242:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(--c->ncli < 0)
f0107245:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107248:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f010724e:	8d 50 ff             	lea    -0x1(%eax),%edx
f0107251:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107254:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
f010725a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010725d:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0107263:	85 c0                	test   %eax,%eax
f0107265:	79 14                	jns    f010727b <popcli+0x69>
    panic("popcli");
f0107267:	83 ec 04             	sub    $0x4,%esp
f010726a:	68 93 71 12 f0       	push   $0xf0127193
f010726f:	6a 61                	push   $0x61
f0107271:	68 84 71 12 f0       	push   $0xf0127184
f0107276:	e8 9f 90 ff ff       	call   f010031a <_panic>
  if(c->ncli == 0 && c->intena)
f010727b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010727e:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0107284:	85 c0                	test   %eax,%eax
f0107286:	75 0e                	jne    f0107296 <popcli+0x84>
f0107288:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010728b:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
f0107291:	85 c0                	test   %eax,%eax
f0107293:	74 01                	je     f0107296 <popcli+0x84>

//set interrupt flag
static __inline void
sti(void)
{
	__asm __volatile("sti");
f0107295:	fb                   	sti    
    sti();
}
f0107296:	90                   	nop
f0107297:	c9                   	leave  
f0107298:	c3                   	ret    

f0107299 <seg_init>:

// Set up CPU's kernel segment descriptors.
// Run once on entry on each CPU.
void
seg_init(void)
{
f0107299:	55                   	push   %ebp
f010729a:	89 e5                	mov    %esp,%ebp
f010729c:	83 ec 18             	sub    $0x18,%esp
	// The kernel and user segments are identical(except for the DPL).
	// To load the SS register, the CPL must equal the DPL.  Thus,
	// we must duplicate the segments for the user and the kernel.
	//

	pushcli();	//disable interrupt
f010729f:	e8 1c ff ff ff       	call   f01071c0 <pushcli>

	c = mycpu();
f01072a4:	e8 54 fe ff ff       	call   f01070fd <mycpu>
f01072a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// 0x0 - unused (always faults -- for trapping NULL far pointers)
	c->gdt[0] = SEG_NULL;
f01072ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072af:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
f01072b6:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%eax)

	// 0x8 - kernel code segment
	c->gdt[GD_KT >> 3] = SEG(STA_X | STA_R, 0x0, 0xffffffff, 0);
f01072bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072c0:	66 c7 40 7c ff ff    	movw   $0xffff,0x7c(%eax)
f01072c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072c9:	66 c7 40 7e 00 00    	movw   $0x0,0x7e(%eax)
f01072cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072d2:	c6 80 80 00 00 00 00 	movb   $0x0,0x80(%eax)
f01072d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072dc:	8a 90 81 00 00 00    	mov    0x81(%eax),%dl
f01072e2:	83 e2 f0             	and    $0xfffffff0,%edx
f01072e5:	83 ca 0a             	or     $0xa,%edx
f01072e8:	88 90 81 00 00 00    	mov    %dl,0x81(%eax)
f01072ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072f1:	8a 90 81 00 00 00    	mov    0x81(%eax),%dl
f01072f7:	83 ca 10             	or     $0x10,%edx
f01072fa:	88 90 81 00 00 00    	mov    %dl,0x81(%eax)
f0107300:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107303:	8a 90 81 00 00 00    	mov    0x81(%eax),%dl
f0107309:	83 e2 9f             	and    $0xffffff9f,%edx
f010730c:	88 90 81 00 00 00    	mov    %dl,0x81(%eax)
f0107312:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107315:	8a 90 81 00 00 00    	mov    0x81(%eax),%dl
f010731b:	83 ca 80             	or     $0xffffff80,%edx
f010731e:	88 90 81 00 00 00    	mov    %dl,0x81(%eax)
f0107324:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107327:	8a 90 82 00 00 00    	mov    0x82(%eax),%dl
f010732d:	83 ca 0f             	or     $0xf,%edx
f0107330:	88 90 82 00 00 00    	mov    %dl,0x82(%eax)
f0107336:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107339:	8a 90 82 00 00 00    	mov    0x82(%eax),%dl
f010733f:	83 e2 ef             	and    $0xffffffef,%edx
f0107342:	88 90 82 00 00 00    	mov    %dl,0x82(%eax)
f0107348:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010734b:	8a 90 82 00 00 00    	mov    0x82(%eax),%dl
f0107351:	83 e2 df             	and    $0xffffffdf,%edx
f0107354:	88 90 82 00 00 00    	mov    %dl,0x82(%eax)
f010735a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010735d:	8a 90 82 00 00 00    	mov    0x82(%eax),%dl
f0107363:	83 ca 40             	or     $0x40,%edx
f0107366:	88 90 82 00 00 00    	mov    %dl,0x82(%eax)
f010736c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010736f:	8a 90 82 00 00 00    	mov    0x82(%eax),%dl
f0107375:	83 ca 80             	or     $0xffffff80,%edx
f0107378:	88 90 82 00 00 00    	mov    %dl,0x82(%eax)
f010737e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107381:	c6 80 83 00 00 00 00 	movb   $0x0,0x83(%eax)

	// 0x10 - kernel data segment
	c->gdt[GD_KD >> 3] = SEG(STA_W, 0x0, 0xffffffff, 0);
f0107388:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010738b:	66 c7 80 84 00 00 00 	movw   $0xffff,0x84(%eax)
f0107392:	ff ff 
f0107394:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107397:	66 c7 80 86 00 00 00 	movw   $0x0,0x86(%eax)
f010739e:	00 00 
f01073a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01073a3:	c6 80 88 00 00 00 00 	movb   $0x0,0x88(%eax)
f01073aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01073ad:	8a 90 89 00 00 00    	mov    0x89(%eax),%dl
f01073b3:	83 e2 f0             	and    $0xfffffff0,%edx
f01073b6:	83 ca 02             	or     $0x2,%edx
f01073b9:	88 90 89 00 00 00    	mov    %dl,0x89(%eax)
f01073bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01073c2:	8a 90 89 00 00 00    	mov    0x89(%eax),%dl
f01073c8:	83 ca 10             	or     $0x10,%edx
f01073cb:	88 90 89 00 00 00    	mov    %dl,0x89(%eax)
f01073d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01073d4:	8a 90 89 00 00 00    	mov    0x89(%eax),%dl
f01073da:	83 e2 9f             	and    $0xffffff9f,%edx
f01073dd:	88 90 89 00 00 00    	mov    %dl,0x89(%eax)
f01073e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01073e6:	8a 90 89 00 00 00    	mov    0x89(%eax),%dl
f01073ec:	83 ca 80             	or     $0xffffff80,%edx
f01073ef:	88 90 89 00 00 00    	mov    %dl,0x89(%eax)
f01073f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01073f8:	8a 90 8a 00 00 00    	mov    0x8a(%eax),%dl
f01073fe:	83 ca 0f             	or     $0xf,%edx
f0107401:	88 90 8a 00 00 00    	mov    %dl,0x8a(%eax)
f0107407:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010740a:	8a 90 8a 00 00 00    	mov    0x8a(%eax),%dl
f0107410:	83 e2 ef             	and    $0xffffffef,%edx
f0107413:	88 90 8a 00 00 00    	mov    %dl,0x8a(%eax)
f0107419:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010741c:	8a 90 8a 00 00 00    	mov    0x8a(%eax),%dl
f0107422:	83 e2 df             	and    $0xffffffdf,%edx
f0107425:	88 90 8a 00 00 00    	mov    %dl,0x8a(%eax)
f010742b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010742e:	8a 90 8a 00 00 00    	mov    0x8a(%eax),%dl
f0107434:	83 ca 40             	or     $0x40,%edx
f0107437:	88 90 8a 00 00 00    	mov    %dl,0x8a(%eax)
f010743d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107440:	8a 90 8a 00 00 00    	mov    0x8a(%eax),%dl
f0107446:	83 ca 80             	or     $0xffffff80,%edx
f0107449:	88 90 8a 00 00 00    	mov    %dl,0x8a(%eax)
f010744f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107452:	c6 80 8b 00 00 00 00 	movb   $0x0,0x8b(%eax)

	// 0x18 - user code segment
	c->gdt[GD_UT >> 3] = SEG(STA_X | STA_R, 0x0, 0xffffffff, 3);
f0107459:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010745c:	66 c7 80 8c 00 00 00 	movw   $0xffff,0x8c(%eax)
f0107463:	ff ff 
f0107465:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107468:	66 c7 80 8e 00 00 00 	movw   $0x0,0x8e(%eax)
f010746f:	00 00 
f0107471:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107474:	c6 80 90 00 00 00 00 	movb   $0x0,0x90(%eax)
f010747b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010747e:	8a 90 91 00 00 00    	mov    0x91(%eax),%dl
f0107484:	83 e2 f0             	and    $0xfffffff0,%edx
f0107487:	83 ca 0a             	or     $0xa,%edx
f010748a:	88 90 91 00 00 00    	mov    %dl,0x91(%eax)
f0107490:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107493:	8a 90 91 00 00 00    	mov    0x91(%eax),%dl
f0107499:	83 ca 10             	or     $0x10,%edx
f010749c:	88 90 91 00 00 00    	mov    %dl,0x91(%eax)
f01074a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074a5:	8a 90 91 00 00 00    	mov    0x91(%eax),%dl
f01074ab:	83 ca 60             	or     $0x60,%edx
f01074ae:	88 90 91 00 00 00    	mov    %dl,0x91(%eax)
f01074b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074b7:	8a 90 91 00 00 00    	mov    0x91(%eax),%dl
f01074bd:	83 ca 80             	or     $0xffffff80,%edx
f01074c0:	88 90 91 00 00 00    	mov    %dl,0x91(%eax)
f01074c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074c9:	8a 90 92 00 00 00    	mov    0x92(%eax),%dl
f01074cf:	83 ca 0f             	or     $0xf,%edx
f01074d2:	88 90 92 00 00 00    	mov    %dl,0x92(%eax)
f01074d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074db:	8a 90 92 00 00 00    	mov    0x92(%eax),%dl
f01074e1:	83 e2 ef             	and    $0xffffffef,%edx
f01074e4:	88 90 92 00 00 00    	mov    %dl,0x92(%eax)
f01074ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074ed:	8a 90 92 00 00 00    	mov    0x92(%eax),%dl
f01074f3:	83 e2 df             	and    $0xffffffdf,%edx
f01074f6:	88 90 92 00 00 00    	mov    %dl,0x92(%eax)
f01074fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074ff:	8a 90 92 00 00 00    	mov    0x92(%eax),%dl
f0107505:	83 ca 40             	or     $0x40,%edx
f0107508:	88 90 92 00 00 00    	mov    %dl,0x92(%eax)
f010750e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107511:	8a 90 92 00 00 00    	mov    0x92(%eax),%dl
f0107517:	83 ca 80             	or     $0xffffff80,%edx
f010751a:	88 90 92 00 00 00    	mov    %dl,0x92(%eax)
f0107520:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107523:	c6 80 93 00 00 00 00 	movb   $0x0,0x93(%eax)

	// 0x20 - user data segment
	c->gdt[GD_UD >> 3] = SEG(STA_W, 0x0, 0xffffffff, 3);
f010752a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010752d:	66 c7 80 94 00 00 00 	movw   $0xffff,0x94(%eax)
f0107534:	ff ff 
f0107536:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107539:	66 c7 80 96 00 00 00 	movw   $0x0,0x96(%eax)
f0107540:	00 00 
f0107542:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107545:	c6 80 98 00 00 00 00 	movb   $0x0,0x98(%eax)
f010754c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010754f:	8a 90 99 00 00 00    	mov    0x99(%eax),%dl
f0107555:	83 e2 f0             	and    $0xfffffff0,%edx
f0107558:	83 ca 02             	or     $0x2,%edx
f010755b:	88 90 99 00 00 00    	mov    %dl,0x99(%eax)
f0107561:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107564:	8a 90 99 00 00 00    	mov    0x99(%eax),%dl
f010756a:	83 ca 10             	or     $0x10,%edx
f010756d:	88 90 99 00 00 00    	mov    %dl,0x99(%eax)
f0107573:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107576:	8a 90 99 00 00 00    	mov    0x99(%eax),%dl
f010757c:	83 ca 60             	or     $0x60,%edx
f010757f:	88 90 99 00 00 00    	mov    %dl,0x99(%eax)
f0107585:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107588:	8a 90 99 00 00 00    	mov    0x99(%eax),%dl
f010758e:	83 ca 80             	or     $0xffffff80,%edx
f0107591:	88 90 99 00 00 00    	mov    %dl,0x99(%eax)
f0107597:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010759a:	8a 90 9a 00 00 00    	mov    0x9a(%eax),%dl
f01075a0:	83 ca 0f             	or     $0xf,%edx
f01075a3:	88 90 9a 00 00 00    	mov    %dl,0x9a(%eax)
f01075a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075ac:	8a 90 9a 00 00 00    	mov    0x9a(%eax),%dl
f01075b2:	83 e2 ef             	and    $0xffffffef,%edx
f01075b5:	88 90 9a 00 00 00    	mov    %dl,0x9a(%eax)
f01075bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075be:	8a 90 9a 00 00 00    	mov    0x9a(%eax),%dl
f01075c4:	83 e2 df             	and    $0xffffffdf,%edx
f01075c7:	88 90 9a 00 00 00    	mov    %dl,0x9a(%eax)
f01075cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075d0:	8a 90 9a 00 00 00    	mov    0x9a(%eax),%dl
f01075d6:	83 ca 40             	or     $0x40,%edx
f01075d9:	88 90 9a 00 00 00    	mov    %dl,0x9a(%eax)
f01075df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075e2:	8a 90 9a 00 00 00    	mov    0x9a(%eax),%dl
f01075e8:	83 ca 80             	or     $0xffffff80,%edx
f01075eb:	88 90 9a 00 00 00    	mov    %dl,0x9a(%eax)
f01075f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075f4:	c6 80 9b 00 00 00 00 	movb   $0x0,0x9b(%eax)

	// 0x28 - tss, initialized in idt_init()
	c->gdt[GD_TSS >> 3] = SEG_NULL;
f01075fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075fe:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%eax)
f0107605:	00 00 00 
f0107608:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
f010760f:	00 00 00 

	popcli();	//enable interrupt
f0107612:	e8 fb fb ff ff       	call   f0107212 <popcli>


}
f0107617:	90                   	nop
f0107618:	c9                   	leave  
f0107619:	c3                   	ret    

f010761a <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f010761a:	55                   	push   %ebp
f010761b:	89 e5                	mov    %esp,%ebp
f010761d:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0107620:	83 ec 08             	sub    $0x8,%esp
f0107623:	68 00 10 00 00       	push   $0x1000
f0107628:	68 00 10 00 00       	push   $0x1000
f010762d:	e8 35 02 00 00       	call   f0107867 <boot_allocate_space>
f0107632:	83 c4 10             	add    $0x10,%esp
f0107635:	a3 7c 2a 5a f0       	mov    %eax,0xf05a2a7c
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(ptr_page_directory, 0, PAGE_SIZE);
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f010763a:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f010763f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107642:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0107649:	77 14                	ja     f010765f <initialize_kernel_VM+0x45>
f010764b:	ff 75 e0             	pushl  -0x20(%ebp)
f010764e:	68 9c 71 12 f0       	push   $0xf012719c
f0107653:	6a 57                	push   $0x57
f0107655:	68 d0 71 12 f0       	push   $0xf01271d0
f010765a:	e8 bb 8c ff ff       	call   f010031a <_panic>
f010765f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107662:	05 00 00 00 10       	add    $0x10000000,%eax
f0107667:	a3 84 2b 5a f0       	mov    %eax,0xf05a2b84
	// Your code goes here:

	//Ensure that the total size of SCHED Kernel Stack for ALL CPUs is less than PTSIZE (specified area for them)
	assert(NCPUS*KERNEL_STACK_SIZE < PTSIZE);

	boot_map_range(ptr_page_directory, KERN_STACK_TOP - NCPUS*KERNEL_STACK_SIZE, NCPUS*KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f010766c:	c7 45 dc 00 60 17 f0 	movl   $0xf0176000,-0x24(%ebp)
f0107673:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f010767a:	77 14                	ja     f0107690 <initialize_kernel_VM+0x76>
f010767c:	ff 75 dc             	pushl  -0x24(%ebp)
f010767f:	68 9c 71 12 f0       	push   $0xf012719c
f0107684:	6a 63                	push   $0x63
f0107686:	68 d0 71 12 f0       	push   $0xf01271d0
f010768b:	e8 8a 8c ff ff       	call   f010031a <_panic>
f0107690:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107693:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0107699:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f010769e:	83 ec 0c             	sub    $0xc,%esp
f01076a1:	6a 02                	push   $0x2
f01076a3:	52                   	push   %edx
f01076a4:	68 00 80 00 00       	push   $0x8000
f01076a9:	68 00 80 bf ef       	push   $0xefbf8000
f01076ae:	50                   	push   %eax
f01076af:	e8 27 02 00 00       	call   f01078db <boot_map_range>
f01076b4:	83 c4 20             	add    $0x20,%esp
	//set bottom page of each stack as a GUARD page
	for (int c = 0; c < NCPUS; ++c)
f01076b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01076be:	eb 24                	jmp    f01076e4 <initialize_kernel_VM+0xca>
	{
		pt_set_page_permissions(ptr_page_directory, KERN_STACK_TOP - ((c+1)*KERNEL_STACK_SIZE), 0, PERM_PRESENT);
f01076c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01076c3:	40                   	inc    %eax
f01076c4:	c1 e0 0f             	shl    $0xf,%eax
f01076c7:	ba 00 00 c0 ef       	mov    $0xefc00000,%edx
f01076cc:	29 c2                	sub    %eax,%edx
f01076ce:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f01076d3:	6a 01                	push   $0x1
f01076d5:	6a 00                	push   $0x0
f01076d7:	52                   	push   %edx
f01076d8:	50                   	push   %eax
f01076d9:	e8 4a 14 00 00       	call   f0108b28 <pt_set_page_permissions>
f01076de:	83 c4 10             	add    $0x10,%esp
	//Ensure that the total size of SCHED Kernel Stack for ALL CPUs is less than PTSIZE (specified area for them)
	assert(NCPUS*KERNEL_STACK_SIZE < PTSIZE);

	boot_map_range(ptr_page_directory, KERN_STACK_TOP - NCPUS*KERNEL_STACK_SIZE, NCPUS*KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
	//set bottom page of each stack as a GUARD page
	for (int c = 0; c < NCPUS; ++c)
f01076e1:	ff 45 f4             	incl   -0xc(%ebp)
f01076e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01076e8:	7e d6                	jle    f01076c0 <initialize_kernel_VM+0xa6>
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f01076ea:	c7 45 e8 00 00 00 f0 	movl   $0xf0000000,-0x18(%ebp)
f01076f1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	unsigned int nTables=0;
f01076f8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f01076ff:	eb 25                	jmp    f0107726 <initialize_kernel_VM+0x10c>
	{
		++nTables;
f0107701:	ff 45 e4             	incl   -0x1c(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0107704:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107707:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f010770c:	83 ec 04             	sub    $0x4,%esp
f010770f:	6a 01                	push   $0x1
f0107711:	52                   	push   %edx
f0107712:	50                   	push   %eax
f0107713:	e8 37 02 00 00       	call   f010794f <boot_get_page_table>
f0107718:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f010771b:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0107722:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0107726:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010772a:	72 d5                	jb     f0107701 <initialize_kernel_VM+0xe7>
f010772c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0107730:	77 06                	ja     f0107738 <initialize_kernel_VM+0x11e>
f0107732:	83 7d e8 fe          	cmpl   $0xfffffffe,-0x18(%ebp)
f0107736:	76 c9                	jbe    f0107701 <initialize_kernel_VM+0xe7>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0107738:	8b 15 58 26 5a f0    	mov    0xf05a2658,%edx
f010773e:	89 d0                	mov    %edx,%eax
f0107740:	01 c0                	add    %eax,%eax
f0107742:	01 d0                	add    %edx,%eax
f0107744:	c1 e0 03             	shl    $0x3,%eax
f0107747:	89 45 d8             	mov    %eax,-0x28(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f010774a:	83 ec 08             	sub    $0x8,%esp
f010774d:	68 00 10 00 00       	push   $0x1000
f0107752:	ff 75 d8             	pushl  -0x28(%ebp)
f0107755:	e8 0d 01 00 00       	call   f0107867 <boot_allocate_space>
f010775a:	83 c4 10             	add    $0x10,%esp
f010775d:	a3 c0 28 5a f0       	mov    %eax,0xf05a28c0
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0107762:	c7 45 d4 00 c0 30 00 	movl   $0x30c000,-0x2c(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0107769:	83 ec 08             	sub    $0x8,%esp
f010776c:	68 00 10 00 00       	push   $0x1000
f0107771:	ff 75 d4             	pushl  -0x2c(%ebp)
f0107774:	e8 ee 00 00 00       	call   f0107867 <boot_allocate_space>
f0107779:	83 c4 10             	add    $0x10,%esp
f010777c:	a3 60 fc 59 f0       	mov    %eax,0xf059fc60
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(disk_frames_info , 0, disk_array_size);

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0107781:	e8 32 05 00 00       	call   f0107cb8 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("*	Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0107786:	83 ec 0c             	sub    $0xc,%esp
f0107789:	6a 08                	push   $0x8
f010778b:	e8 06 94 01 00       	call   f0120b96 <nearest_pow2_ceil>
f0107790:	83 c4 10             	add    $0x10,%esp
f0107793:	83 ec 04             	sub    $0x4,%esp
f0107796:	50                   	push   %eax
f0107797:	6a 08                	push   $0x8
f0107799:	68 f0 71 12 f0       	push   $0xf01271f0
f010779e:	e8 c9 97 ff ff       	call   f0100f6c <cprintf>
f01077a3:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f01077a6:	c7 45 d0 60 d3 0e 00 	movl   $0xed360,-0x30(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f01077ad:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01077b0:	83 ec 08             	sub    $0x8,%esp
f01077b3:	68 00 10 00 00       	push   $0x1000
f01077b8:	50                   	push   %eax
f01077b9:	e8 a9 00 00 00       	call   f0107867 <boot_allocate_space>
f01077be:	83 c4 10             	add    $0x10,%esp
f01077c1:	a3 b0 f3 59 f0       	mov    %eax,0xf059f3b0
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(envs , 0, envs_size);

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f01077c6:	a1 b0 f3 59 f0       	mov    0xf059f3b0,%eax
f01077cb:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01077ce:	81 7d cc ff ff ff ef 	cmpl   $0xefffffff,-0x34(%ebp)
f01077d5:	77 17                	ja     f01077ee <initialize_kernel_VM+0x1d4>
f01077d7:	ff 75 cc             	pushl  -0x34(%ebp)
f01077da:	68 9c 71 12 f0       	push   $0xf012719c
f01077df:	68 b1 00 00 00       	push   $0xb1
f01077e4:	68 d0 71 12 f0       	push   $0xf01271d0
f01077e9:	e8 2c 8b ff ff       	call   f010031a <_panic>
f01077ee:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01077f1:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f01077f7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01077fa:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f01077ff:	83 ec 0c             	sub    $0xc,%esp
f0107802:	6a 04                	push   $0x4
f0107804:	51                   	push   %ecx
f0107805:	52                   	push   %edx
f0107806:	68 00 00 c0 ee       	push   $0xeec00000
f010780b:	50                   	push   %eax
f010780c:	e8 ca 00 00 00       	call   f01078db <boot_map_range>
f0107811:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0107814:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0107819:	05 ec 0e 00 00       	add    $0xeec,%eax
f010781e:	8b 15 7c 2a 5a f0    	mov    0xf05a2a7c,%edx
f0107824:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f010782a:	8b 12                	mov    (%edx),%edx
f010782c:	83 ca 05             	or     $0x5,%edx
f010782f:	89 10                	mov    %edx,(%eax)
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#else
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0107831:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0107836:	83 ec 0c             	sub    $0xc,%esp
f0107839:	6a 02                	push   $0x2
f010783b:	6a 00                	push   $0x0
f010783d:	68 ff ff ff 0f       	push   $0xfffffff
f0107842:	68 00 00 00 f0       	push   $0xf0000000
f0107847:	50                   	push   %eax
f0107848:	e8 8e 00 00 00       	call   f01078db <boot_map_range>
f010784d:	83 c4 20             	add    $0x20,%esp
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0107850:	e8 23 a2 01 00       	call   f0121a78 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0107855:	c7 05 80 25 5a f0 19 	movl   $0x19,0xf05a2580
f010785c:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f010785f:	e8 20 03 00 00       	call   f0107b84 <turn_on_paging>
}
f0107864:	90                   	nop
f0107865:	c9                   	leave  
f0107866:	c3                   	ret    

f0107867 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0107867:	55                   	push   %ebp
f0107868:	89 e5                	mov    %esp,%ebp
f010786a:	83 ec 18             	sub    $0x18,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f010786d:	a1 78 2a 5a f0       	mov    0xf05a2a78,%eax
f0107872:	85 c0                	test   %eax,%eax
f0107874:	75 0a                	jne    f0107880 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0107876:	c7 05 78 2a 5a f0 30 	movl   $0xf05c5430,0xf05a2a78
f010787d:	54 5c f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0107880:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107883:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107886:	a1 78 2a 5a f0       	mov    0xf05a2a78,%eax
f010788b:	89 c2                	mov    %eax,%edx
f010788d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107890:	01 d0                	add    %edx,%eax
f0107892:	48                   	dec    %eax
f0107893:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107896:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107899:	ba 00 00 00 00       	mov    $0x0,%edx
f010789e:	f7 75 f4             	divl   -0xc(%ebp)
f01078a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01078a4:	29 d0                	sub    %edx,%eax
f01078a6:	a3 78 2a 5a f0       	mov    %eax,0xf05a2a78

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f01078ab:	a1 78 2a 5a f0       	mov    0xf05a2a78,%eax
f01078b0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f01078b3:	8b 15 78 2a 5a f0    	mov    0xf05a2a78,%edx
f01078b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01078bc:	01 d0                	add    %edx,%eax
f01078be:	a3 78 2a 5a f0       	mov    %eax,0xf05a2a78

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	/*2023*/ /*THIS LINE IS UNCOMMENTED To Ensure that any boot allocations ARE SET TO ZERO
	 * This is mainly to ensure that any restart will be fresh and no grabage data will be exist
	 */
	memset(ptr_allocated_mem, 0, size);
f01078c3:	83 ec 04             	sub    $0x4,%esp
f01078c6:	ff 75 08             	pushl  0x8(%ebp)
f01078c9:	6a 00                	push   $0x0
f01078cb:	ff 75 ec             	pushl  -0x14(%ebp)
f01078ce:	e8 59 ae 01 00       	call   f012272c <memset>
f01078d3:	83 c4 10             	add    $0x10,%esp

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f01078d6:	8b 45 ec             	mov    -0x14(%ebp),%eax

}
f01078d9:	c9                   	leave  
f01078da:	c3                   	ret    

f01078db <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f01078db:	55                   	push   %ebp
f01078dc:	89 e5                	mov    %esp,%ebp
f01078de:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f01078e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01078e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01078ef:	eb 53                	jmp    f0107944 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f01078f1:	83 ec 04             	sub    $0x4,%esp
f01078f4:	6a 01                	push   $0x1
f01078f6:	ff 75 0c             	pushl  0xc(%ebp)
f01078f9:	ff 75 08             	pushl  0x8(%ebp)
f01078fc:	e8 4e 00 00 00       	call   f010794f <boot_get_page_table>
f0107901:	83 c4 10             	add    $0x10,%esp
f0107904:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0107907:	8b 45 0c             	mov    0xc(%ebp),%eax
f010790a:	c1 e8 0c             	shr    $0xc,%eax
f010790d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0107912:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0107915:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107918:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010791f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107922:	01 c2                	add    %eax,%edx
f0107924:	8b 45 18             	mov    0x18(%ebp),%eax
f0107927:	0b 45 14             	or     0x14(%ebp),%eax
f010792a:	83 c8 01             	or     $0x1,%eax
f010792d:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f010792f:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0107936:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010793d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0107944:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107947:	3b 45 10             	cmp    0x10(%ebp),%eax
f010794a:	72 a5                	jb     f01078f1 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f010794c:	90                   	nop
f010794d:	c9                   	leave  
f010794e:	c3                   	ret    

f010794f <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f010794f:	55                   	push   %ebp
f0107950:	89 e5                	mov    %esp,%ebp
f0107952:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0107955:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107958:	c1 e8 16             	shr    $0x16,%eax
f010795b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f010795e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107961:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107968:	8b 45 08             	mov    0x8(%ebp),%eax
f010796b:	01 d0                	add    %edx,%eax
f010796d:	8b 00                	mov    (%eax),%eax
f010796f:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0107972:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107975:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010797a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f010797d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107980:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0107983:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107986:	c1 e8 0c             	shr    $0xc,%eax
f0107989:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010798c:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f0107991:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0107994:	72 17                	jb     f01079ad <boot_get_page_table+0x5e>
f0107996:	ff 75 e8             	pushl  -0x18(%ebp)
f0107999:	68 18 72 12 f0       	push   $0xf0127218
f010799e:	68 33 01 00 00       	push   $0x133
f01079a3:	68 d0 71 12 f0       	push   $0xf01271d0
f01079a8:	e8 6d 89 ff ff       	call   f010031a <_panic>
f01079ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01079b0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01079b5:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f01079b8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01079bc:	75 72                	jne    f0107a30 <boot_get_page_table+0xe1>
	{
		if (create)
f01079be:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01079c2:	74 65                	je     f0107a29 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f01079c4:	83 ec 08             	sub    $0x8,%esp
f01079c7:	68 00 10 00 00       	push   $0x1000
f01079cc:	68 00 10 00 00       	push   $0x1000
f01079d1:	e8 91 fe ff ff       	call   f0107867 <boot_allocate_space>
f01079d6:	83 c4 10             	add    $0x10,%esp
f01079d9:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f01079dc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01079df:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01079e2:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f01079e9:	77 17                	ja     f0107a02 <boot_get_page_table+0xb3>
f01079eb:	ff 75 dc             	pushl  -0x24(%ebp)
f01079ee:	68 9c 71 12 f0       	push   $0xf012719c
f01079f3:	68 39 01 00 00       	push   $0x139
f01079f8:	68 d0 71 12 f0       	push   $0xf01271d0
f01079fd:	e8 18 89 ff ff       	call   f010031a <_panic>
f0107a02:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107a05:	05 00 00 00 10       	add    $0x10000000,%eax
f0107a0a:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f0107a0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a10:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107a17:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a1a:	01 d0                	add    %edx,%eax
f0107a1c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107a1f:	83 ca 03             	or     $0x3,%edx
f0107a22:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f0107a24:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107a27:	eb 0a                	jmp    f0107a33 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f0107a29:	b8 00 00 00 00       	mov    $0x0,%eax
f0107a2e:	eb 03                	jmp    f0107a33 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0107a30:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0107a33:	c9                   	leave  
f0107a34:	c3                   	ret    

f0107a35 <nvram_read>:


int nvram_read(int r)
{
f0107a35:	55                   	push   %ebp
f0107a36:	89 e5                	mov    %esp,%ebp
f0107a38:	53                   	push   %ebx
f0107a39:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f0107a3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a3f:	83 ec 0c             	sub    $0xc,%esp
f0107a42:	50                   	push   %eax
f0107a43:	e8 12 d1 ff ff       	call   f0104b5a <mc146818_read>
f0107a48:	83 c4 10             	add    $0x10,%esp
f0107a4b:	89 c3                	mov    %eax,%ebx
f0107a4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a50:	40                   	inc    %eax
f0107a51:	83 ec 0c             	sub    $0xc,%esp
f0107a54:	50                   	push   %eax
f0107a55:	e8 00 d1 ff ff       	call   f0104b5a <mc146818_read>
f0107a5a:	83 c4 10             	add    $0x10,%esp
f0107a5d:	c1 e0 08             	shl    $0x8,%eax
f0107a60:	09 d8                	or     %ebx,%eax
}
f0107a62:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107a65:	c9                   	leave  
f0107a66:	c3                   	ret    

f0107a67 <detect_memory>:

void detect_memory()
{
f0107a67:	55                   	push   %ebp
f0107a68:	89 e5                	mov    %esp,%ebp
f0107a6a:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0107a6d:	83 ec 0c             	sub    $0xc,%esp
f0107a70:	6a 15                	push   $0x15
f0107a72:	e8 be ff ff ff       	call   f0107a35 <nvram_read>
f0107a77:	83 c4 10             	add    $0x10,%esp
f0107a7a:	c1 e0 0a             	shl    $0xa,%eax
f0107a7d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107a80:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107a83:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107a88:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0107a8b:	83 ec 0c             	sub    $0xc,%esp
f0107a8e:	6a 17                	push   $0x17
f0107a90:	e8 a0 ff ff ff       	call   f0107a35 <nvram_read>
f0107a95:	83 c4 10             	add    $0x10,%esp
f0107a98:	c1 e0 0a             	shl    $0xa,%eax
f0107a9b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0107a9e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107aa1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107aa6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f0107aa9:	83 ec 0c             	sub    $0xc,%esp
f0107aac:	6a 34                	push   $0x34
f0107aae:	e8 82 ff ff ff       	call   f0107a35 <nvram_read>
f0107ab3:	83 c4 10             	add    $0x10,%esp
f0107ab6:	c1 e0 10             	shl    $0x10,%eax
f0107ab9:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107abc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107abf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107ac4:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0107ac7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0107acb:	74 18                	je     f0107ae5 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0107acd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107ad0:	05 00 00 00 01       	add    $0x1000000,%eax
f0107ad5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f0107ad8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107adb:	2d 00 00 10 00       	sub    $0x100000,%eax
f0107ae0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107ae3:	eb 19                	jmp    f0107afe <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0107ae5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107ae9:	74 0d                	je     f0107af8 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0107aeb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107aee:	05 00 00 10 00       	add    $0x100000,%eax
f0107af3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107af6:	eb 06                	jmp    f0107afe <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f0107af8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107afb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0107afe:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	if(USE_KHEAP == 0 && maxpa > kernel_virtual_area)
f0107b05:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b08:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0107b0b:	76 32                	jbe    f0107b3f <detect_memory+0xd8>
	{
		cprintf("*	Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
f0107b0d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0107b10:	c1 e8 0a             	shr    $0xa,%eax
f0107b13:	89 c2                	mov    %eax,%edx
f0107b15:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b18:	c1 e8 0a             	shr    $0xa,%eax
f0107b1b:	83 ec 04             	sub    $0x4,%esp
f0107b1e:	52                   	push   %edx
f0107b1f:	50                   	push   %eax
f0107b20:	68 48 72 12 f0       	push   $0xf0127248
f0107b25:	e8 42 94 ff ff       	call   f0100f6c <cprintf>
f0107b2a:	83 c4 10             	add    $0x10,%esp
		cprintf("*	Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
f0107b2d:	83 ec 0c             	sub    $0xc,%esp
f0107b30:	68 90 72 12 f0       	push   $0xf0127290
f0107b35:	e8 32 94 ff ff       	call   f0100f6c <cprintf>
f0107b3a:	83 c4 10             	add    $0x10,%esp
		while(1);
f0107b3d:	eb fe                	jmp    f0107b3d <detect_memory+0xd6>
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0107b3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b42:	c1 e8 0c             	shr    $0xc,%eax
f0107b45:	a3 58 26 5a f0       	mov    %eax,0xf05a2658

	cprintf("*	Physical memory: %dK available, ", (int)(maxpa/1024));
f0107b4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b4d:	c1 e8 0a             	shr    $0xa,%eax
f0107b50:	83 ec 08             	sub    $0x8,%esp
f0107b53:	50                   	push   %eax
f0107b54:	68 28 73 12 f0       	push   $0xf0127328
f0107b59:	e8 0e 94 ff ff       	call   f0100f6c <cprintf>
f0107b5e:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f0107b61:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b64:	c1 e8 0a             	shr    $0xa,%eax
f0107b67:	89 c2                	mov    %eax,%edx
f0107b69:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b6c:	c1 e8 0a             	shr    $0xa,%eax
f0107b6f:	83 ec 04             	sub    $0x4,%esp
f0107b72:	52                   	push   %edx
f0107b73:	50                   	push   %eax
f0107b74:	68 4b 73 12 f0       	push   $0xf012734b
f0107b79:	e8 ee 93 ff ff       	call   f0100f6c <cprintf>
f0107b7e:	83 c4 10             	add    $0x10,%esp
}
f0107b81:	90                   	nop
f0107b82:	c9                   	leave  
f0107b83:	c3                   	ret    

f0107b84 <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f0107b84:	55                   	push   %ebp
f0107b85:	89 e5                	mov    %esp,%ebp
f0107b87:	83 ec 48             	sub    $0x48,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f0107b8a:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0107b91:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0107b98:	eb 24                	jmp    f0107bbe <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0107b9a:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0107b9f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107ba2:	c1 e2 02             	shl    $0x2,%edx
f0107ba5:	01 c2                	add    %eax,%edx
f0107ba7:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0107bac:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0107baf:	c1 e1 02             	shl    $0x2,%ecx
f0107bb2:	01 c8                	add    %ecx,%eax
f0107bb4:	8b 00                	mov    (%eax),%eax
f0107bb6:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0107bb8:	ff 45 f4             	incl   -0xc(%ebp)
f0107bbb:	ff 45 f0             	incl   -0x10(%ebp)
f0107bbe:	a1 78 2a 5a f0       	mov    0xf05a2a78,%eax
f0107bc3:	c1 e8 16             	shr    $0x16,%eax
f0107bc6:	89 c2                	mov    %eax,%edx
f0107bc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107bcb:	39 c2                	cmp    %eax,%edx
f0107bcd:	77 cb                	ja     f0107b9a <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0107bcf:	a1 84 2b 5a f0       	mov    0xf05a2b84,%eax
f0107bd4:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0107bd7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107bda:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0107bdd:	0f 20 c0             	mov    %cr0,%eax
f0107be0:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0107be3:	8b 45 d8             	mov    -0x28(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0107be6:	89 45 dc             	mov    %eax,-0x24(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0107be9:	81 4d dc 2f 00 05 80 	orl    $0x8005002f,-0x24(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0107bf0:	83 65 dc f3          	andl   $0xfffffff3,-0x24(%ebp)
f0107bf4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107bf7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0107bfa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0107bfd:	0f 22 c0             	mov    %eax,%cr0
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	//2024: replaced by lgdt()
	//asm volatile("lgdt gdt_pd");
	pushcli();	//disable interrupt
f0107c00:	e8 bb f5 ff ff       	call   f01071c0 <pushcli>
	lgdt(mycpu()->gdt, sizeof(mycpu()->gdt));
f0107c05:	e8 f3 f4 ff ff       	call   f01070fd <mycpu>
f0107c0a:	83 c0 74             	add    $0x74,%eax
f0107c0d:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0107c10:	c7 45 cc 30 00 00 00 	movl   $0x30,-0x34(%ebp)
static __inline void
lgdt(struct Segdesc *p, int size)
{
  volatile unsigned short pd[3];

  pd[0] = size-1;
f0107c17:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0107c1a:	48                   	dec    %eax
f0107c1b:	66 89 45 c6          	mov    %ax,-0x3a(%ebp)
  pd[1] = (uint32)p;
f0107c1f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0107c22:	66 89 45 c8          	mov    %ax,-0x38(%ebp)
  pd[2] = (uint32)p >> 16;
f0107c26:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0107c29:	c1 e8 10             	shr    $0x10,%eax
f0107c2c:	66 89 45 ca          	mov    %ax,-0x36(%ebp)

  __asm __volatile("lgdt (%0)" : : "r" (pd));
f0107c30:	8d 45 c6             	lea    -0x3a(%ebp),%eax
f0107c33:	0f 01 10             	lgdtl  (%eax)
	popcli();	//enable interrupt
f0107c36:	e8 d7 f5 ff ff       	call   f0107212 <popcli>
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0107c3b:	b8 23 00 00 00       	mov    $0x23,%eax
f0107c40:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0107c42:	b8 23 00 00 00       	mov    $0x23,%eax
f0107c47:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0107c49:	b8 10 00 00 00       	mov    $0x10,%eax
f0107c4e:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0107c50:	b8 10 00 00 00       	mov    $0x10,%eax
f0107c55:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0107c57:	b8 10 00 00 00       	mov    $0x10,%eax
f0107c5c:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0107c5e:	ea 65 7c 10 f0 08 00 	ljmp   $0x8,$0xf0107c65
	asm volatile("lldt %%ax" :: "a" (0));
f0107c65:	b8 00 00 00 00       	mov    $0x0,%eax
f0107c6a:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f0107c6d:	c7 45 ec c0 03 00 00 	movl   $0x3c0,-0x14(%ebp)
		int j = 0;
f0107c74:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0107c7b:	eb 19                	jmp    f0107c96 <turn_on_paging+0x112>
		{
			ptr_page_directory[j] = 0;
f0107c7d:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0107c82:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107c85:	c1 e2 02             	shl    $0x2,%edx
f0107c88:	01 d0                	add    %edx,%eax
f0107c8a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0107c90:	ff 45 ec             	incl   -0x14(%ebp)
f0107c93:	ff 45 e8             	incl   -0x18(%ebp)
f0107c96:	a1 78 2a 5a f0       	mov    0xf05a2a78,%eax
f0107c9b:	c1 e8 16             	shr    $0x16,%eax
f0107c9e:	89 c2                	mov    %eax,%edx
f0107ca0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107ca3:	39 c2                	cmp    %eax,%edx
f0107ca5:	77 d6                	ja     f0107c7d <turn_on_paging+0xf9>
			ptr_page_directory[j] = 0;
		}
	}

	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0107ca7:	a1 84 2b 5a f0       	mov    0xf05a2b84,%eax
f0107cac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0107caf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107cb2:	0f 22 d8             	mov    %eax,%cr3

}
f0107cb5:	90                   	nop
f0107cb6:	c9                   	leave  
f0107cb7:	c3                   	ret    

f0107cb8 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f0107cb8:	55                   	push   %ebp
f0107cb9:	89 e5                	mov    %esp,%ebp
f0107cbb:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0107cbe:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0107cc3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107cc6:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0107ccd:	77 17                	ja     f0107ce6 <setup_listing_to_all_page_tables_entries+0x2e>
f0107ccf:	ff 75 f4             	pushl  -0xc(%ebp)
f0107cd2:	68 9c 71 12 f0       	push   $0xf012719c
f0107cd7:	68 cf 01 00 00       	push   $0x1cf
f0107cdc:	68 d0 71 12 f0       	push   $0xf01271d0
f0107ce1:	e8 34 86 ff ff       	call   f010031a <_panic>
f0107ce6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ce9:	05 00 00 00 10       	add    $0x10000000,%eax
f0107cee:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0107cf1:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0107cf6:	05 fc 0e 00 00       	add    $0xefc,%eax
f0107cfb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107cfe:	83 ca 03             	or     $0x3,%edx
f0107d01:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0107d03:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0107d08:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0107d0e:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0107d13:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107d16:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0107d1d:	77 17                	ja     f0107d36 <setup_listing_to_all_page_tables_entries+0x7e>
f0107d1f:	ff 75 ec             	pushl  -0x14(%ebp)
f0107d22:	68 9c 71 12 f0       	push   $0xf012719c
f0107d27:	68 d4 01 00 00       	push   $0x1d4
f0107d2c:	68 d0 71 12 f0       	push   $0xf01271d0
f0107d31:	e8 e4 85 ff ff       	call   f010031a <_panic>
f0107d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107d39:	05 00 00 00 10       	add    $0x10000000,%eax
f0107d3e:	83 c8 05             	or     $0x5,%eax
f0107d41:	89 02                	mov    %eax,(%edx)

}
f0107d43:	90                   	nop
f0107d44:	c9                   	leave  
f0107d45:	c3                   	ret    

f0107d46 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107d46:	55                   	push   %ebp
f0107d47:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107d49:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d4c:	8b 15 c0 28 5a f0    	mov    0xf05a28c0,%edx
f0107d52:	29 d0                	sub    %edx,%eax
f0107d54:	c1 f8 03             	sar    $0x3,%eax
f0107d57:	89 c2                	mov    %eax,%edx
f0107d59:	89 d0                	mov    %edx,%eax
f0107d5b:	c1 e0 02             	shl    $0x2,%eax
f0107d5e:	01 d0                	add    %edx,%eax
f0107d60:	c1 e0 02             	shl    $0x2,%eax
f0107d63:	01 d0                	add    %edx,%eax
f0107d65:	c1 e0 02             	shl    $0x2,%eax
f0107d68:	01 d0                	add    %edx,%eax
f0107d6a:	89 c1                	mov    %eax,%ecx
f0107d6c:	c1 e1 08             	shl    $0x8,%ecx
f0107d6f:	01 c8                	add    %ecx,%eax
f0107d71:	89 c1                	mov    %eax,%ecx
f0107d73:	c1 e1 10             	shl    $0x10,%ecx
f0107d76:	01 c8                	add    %ecx,%eax
f0107d78:	01 c0                	add    %eax,%eax
f0107d7a:	01 d0                	add    %edx,%eax
}
f0107d7c:	5d                   	pop    %ebp
f0107d7d:	c3                   	ret    

f0107d7e <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107d7e:	55                   	push   %ebp
f0107d7f:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107d81:	ff 75 08             	pushl  0x8(%ebp)
f0107d84:	e8 bd ff ff ff       	call   f0107d46 <to_frame_number>
f0107d89:	83 c4 04             	add    $0x4,%esp
f0107d8c:	c1 e0 0c             	shl    $0xc,%eax
}
f0107d8f:	c9                   	leave  
f0107d90:	c3                   	ret    

f0107d91 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0107d91:	55                   	push   %ebp
f0107d92:	89 e5                	mov    %esp,%ebp
f0107d94:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0107d97:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d9a:	c1 e8 0c             	shr    $0xc,%eax
f0107d9d:	89 c2                	mov    %eax,%edx
f0107d9f:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f0107da4:	39 c2                	cmp    %eax,%edx
f0107da6:	72 14                	jb     f0107dbc <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0107da8:	83 ec 04             	sub    $0x4,%esp
f0107dab:	68 68 73 12 f0       	push   $0xf0127368
f0107db0:	6a 55                	push   $0x55
f0107db2:	68 8d 73 12 f0       	push   $0xf012738d
f0107db7:	e8 5e 85 ff ff       	call   f010031a <_panic>
	return &frames_info[PPN(physical_address)];
f0107dbc:	8b 15 c0 28 5a f0    	mov    0xf05a28c0,%edx
f0107dc2:	8b 45 08             	mov    0x8(%ebp),%eax
f0107dc5:	c1 e8 0c             	shr    $0xc,%eax
f0107dc8:	89 c1                	mov    %eax,%ecx
f0107dca:	89 c8                	mov    %ecx,%eax
f0107dcc:	01 c0                	add    %eax,%eax
f0107dce:	01 c8                	add    %ecx,%eax
f0107dd0:	c1 e0 03             	shl    $0x3,%eax
f0107dd3:	01 d0                	add    %edx,%eax
}
f0107dd5:	c9                   	leave  
f0107dd6:	c3                   	ret    

f0107dd7 <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0107dd7:	55                   	push   %ebp
f0107dd8:	89 e5                	mov    %esp,%ebp
f0107dda:	83 ec 10             	sub    $0x10,%esp
f0107ddd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107de0:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void
invlpg(void *addr)
{
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0107de3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107de6:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0107de9:	90                   	nop
f0107dea:	c9                   	leave  
f0107deb:	c3                   	ret    

f0107dec <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0107dec:	55                   	push   %ebp
f0107ded:	89 e5                	mov    %esp,%ebp
f0107def:	53                   	push   %ebx
f0107df0:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&MemFrameLists.free_frame_list);
f0107df3:	c7 05 c0 fe 59 f0 00 	movl   $0x0,0xf059fec0
f0107dfa:	00 00 00 
f0107dfd:	c7 05 c4 fe 59 f0 00 	movl   $0x0,0xf059fec4
f0107e04:	00 00 00 
f0107e07:	c7 05 cc fe 59 f0 00 	movl   $0x0,0xf059fecc
f0107e0e:	00 00 00 
	LIST_INIT(&MemFrameLists.modified_frame_list);
f0107e11:	c7 05 d0 fe 59 f0 00 	movl   $0x0,0xf059fed0
f0107e18:	00 00 00 
f0107e1b:	c7 05 d4 fe 59 f0 00 	movl   $0x0,0xf059fed4
f0107e22:	00 00 00 
f0107e25:	c7 05 dc fe 59 f0 00 	movl   $0x0,0xf059fedc
f0107e2c:	00 00 00 

	//Initialize the corresponding lock
	init_spinlock(&MemFrameLists.mfllock, "Frame Info Lock");
f0107e2f:	83 ec 08             	sub    $0x8,%esp
f0107e32:	68 a7 73 12 f0       	push   $0xf01273a7
f0107e37:	68 e0 fe 59 f0       	push   $0xf059fee0
f0107e3c:	e8 af 6c 00 00       	call   f010eaf0 <init_spinlock>
f0107e41:	83 c4 10             	add    $0x10,%esp

	frames_info[0].references = 1;
f0107e44:	a1 c0 28 5a f0       	mov    0xf05a28c0,%eax
f0107e49:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0107e4f:	a1 c0 28 5a f0       	mov    0xf05a28c0,%eax
f0107e54:	83 c0 18             	add    $0x18,%eax
f0107e57:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f0107e5d:	a1 c0 28 5a f0       	mov    0xf05a28c0,%eax
f0107e62:	83 c0 30             	add    $0x30,%eax
f0107e65:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f0107e6b:	c7 05 54 29 5a f0 00 	movl   $0xf0001000,0xf05a2954
f0107e72:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0107e75:	c7 05 04 2b 5a f0 00 	movl   $0xf0002000,0xf05a2b04
f0107e7c:	20 00 f0 
	i =0;
f0107e7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f0107e86:	eb 1f                	jmp    f0107ea7 <initialize_paging+0xbb>
	{
		ptr_zero_page[i]=0;
f0107e88:	8b 15 54 29 5a f0    	mov    0xf05a2954,%edx
f0107e8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e91:	01 d0                	add    %edx,%eax
f0107e93:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f0107e96:	8b 15 04 2b 5a f0    	mov    0xf05a2b04,%edx
f0107e9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e9f:	01 d0                	add    %edx,%eax
f0107ea1:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f0107ea4:	ff 45 f4             	incl   -0xc(%ebp)
f0107ea7:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107eae:	7e d8                	jle    f0107e88 <initialize_paging+0x9c>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f0107eb0:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0107eb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107eba:	05 ff ff 09 00       	add    $0x9ffff,%eax
f0107ebf:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107ec2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107ec5:	ba 00 00 00 00       	mov    $0x0,%edx
f0107eca:	f7 75 f0             	divl   -0x10(%ebp)
f0107ecd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107ed0:	29 d0                	sub    %edx,%eax
f0107ed2:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0107ed5:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f0107edc:	e9 e8 00 00 00       	jmp    f0107fc9 <initialize_paging+0x1dd>
	{

		initialize_frame_info(&(frames_info[i]));
f0107ee1:	8b 0d c0 28 5a f0    	mov    0xf05a28c0,%ecx
f0107ee7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107eea:	89 d0                	mov    %edx,%eax
f0107eec:	01 c0                	add    %eax,%eax
f0107eee:	01 d0                	add    %edx,%eax
f0107ef0:	c1 e0 03             	shl    $0x3,%eax
f0107ef3:	01 c8                	add    %ecx,%eax
f0107ef5:	83 ec 0c             	sub    $0xc,%esp
f0107ef8:	50                   	push   %eax
f0107ef9:	e8 b7 02 00 00       	call   f01081b5 <initialize_frame_info>
f0107efe:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&MemFrameLists.free_frame_list, &frames_info[i]);
f0107f01:	8b 0d c0 28 5a f0    	mov    0xf05a28c0,%ecx
f0107f07:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f0a:	89 d0                	mov    %edx,%eax
f0107f0c:	01 c0                	add    %eax,%eax
f0107f0e:	01 d0                	add    %edx,%eax
f0107f10:	c1 e0 03             	shl    $0x3,%eax
f0107f13:	01 c8                	add    %ecx,%eax
f0107f15:	85 c0                	test   %eax,%eax
f0107f17:	75 14                	jne    f0107f2d <initialize_paging+0x141>
f0107f19:	83 ec 04             	sub    $0x4,%esp
f0107f1c:	68 b8 73 12 f0       	push   $0xf01273b8
f0107f21:	6a 60                	push   $0x60
f0107f23:	68 db 73 12 f0       	push   $0xf01273db
f0107f28:	e8 ed 83 ff ff       	call   f010031a <_panic>
f0107f2d:	8b 0d c0 28 5a f0    	mov    0xf05a28c0,%ecx
f0107f33:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f36:	89 d0                	mov    %edx,%eax
f0107f38:	01 c0                	add    %eax,%eax
f0107f3a:	01 d0                	add    %edx,%eax
f0107f3c:	c1 e0 03             	shl    $0x3,%eax
f0107f3f:	01 c8                	add    %ecx,%eax
f0107f41:	8b 15 c0 fe 59 f0    	mov    0xf059fec0,%edx
f0107f47:	89 10                	mov    %edx,(%eax)
f0107f49:	8b 00                	mov    (%eax),%eax
f0107f4b:	85 c0                	test   %eax,%eax
f0107f4d:	74 1f                	je     f0107f6e <initialize_paging+0x182>
f0107f4f:	8b 15 c0 fe 59 f0    	mov    0xf059fec0,%edx
f0107f55:	8b 1d c0 28 5a f0    	mov    0xf05a28c0,%ebx
f0107f5b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0107f5e:	89 c8                	mov    %ecx,%eax
f0107f60:	01 c0                	add    %eax,%eax
f0107f62:	01 c8                	add    %ecx,%eax
f0107f64:	c1 e0 03             	shl    $0x3,%eax
f0107f67:	01 d8                	add    %ebx,%eax
f0107f69:	89 42 04             	mov    %eax,0x4(%edx)
f0107f6c:	eb 19                	jmp    f0107f87 <initialize_paging+0x19b>
f0107f6e:	8b 0d c0 28 5a f0    	mov    0xf05a28c0,%ecx
f0107f74:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f77:	89 d0                	mov    %edx,%eax
f0107f79:	01 c0                	add    %eax,%eax
f0107f7b:	01 d0                	add    %edx,%eax
f0107f7d:	c1 e0 03             	shl    $0x3,%eax
f0107f80:	01 c8                	add    %ecx,%eax
f0107f82:	a3 c4 fe 59 f0       	mov    %eax,0xf059fec4
f0107f87:	8b 0d c0 28 5a f0    	mov    0xf05a28c0,%ecx
f0107f8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f90:	89 d0                	mov    %edx,%eax
f0107f92:	01 c0                	add    %eax,%eax
f0107f94:	01 d0                	add    %edx,%eax
f0107f96:	c1 e0 03             	shl    $0x3,%eax
f0107f99:	01 c8                	add    %ecx,%eax
f0107f9b:	a3 c0 fe 59 f0       	mov    %eax,0xf059fec0
f0107fa0:	8b 0d c0 28 5a f0    	mov    0xf05a28c0,%ecx
f0107fa6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107fa9:	89 d0                	mov    %edx,%eax
f0107fab:	01 c0                	add    %eax,%eax
f0107fad:	01 d0                	add    %edx,%eax
f0107faf:	c1 e0 03             	shl    $0x3,%eax
f0107fb2:	01 c8                	add    %ecx,%eax
f0107fb4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107fbb:	a1 cc fe 59 f0       	mov    0xf059fecc,%eax
f0107fc0:	40                   	inc    %eax
f0107fc1:	a3 cc fe 59 f0       	mov    %eax,0xf059fecc
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0107fc6:	ff 45 f4             	incl   -0xc(%ebp)
f0107fc9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107fcc:	85 c0                	test   %eax,%eax
f0107fce:	79 05                	jns    f0107fd5 <initialize_paging+0x1e9>
f0107fd0:	05 ff 0f 00 00       	add    $0xfff,%eax
f0107fd5:	c1 f8 0c             	sar    $0xc,%eax
f0107fd8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107fdb:	0f 8f 00 ff ff ff    	jg     f0107ee1 <initialize_paging+0xf5>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&MemFrameLists.free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0107fe1:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f0107fe8:	eb 1d                	jmp    f0108007 <initialize_paging+0x21b>
	{
		frames_info[i].references = 1;
f0107fea:	8b 0d c0 28 5a f0    	mov    0xf05a28c0,%ecx
f0107ff0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107ff3:	89 d0                	mov    %edx,%eax
f0107ff5:	01 c0                	add    %eax,%eax
f0107ff7:	01 d0                	add    %edx,%eax
f0107ff9:	c1 e0 03             	shl    $0x3,%eax
f0107ffc:	01 c8                	add    %ecx,%eax
f0107ffe:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&MemFrameLists.free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0108004:	ff 45 f4             	incl   -0xc(%ebp)
f0108007:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f010800e:	7e da                	jle    f0107fea <initialize_paging+0x1fe>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0108010:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0108017:	a1 78 2a 5a f0       	mov    0xf05a2a78,%eax
f010801c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010801f:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0108026:	77 14                	ja     f010803c <initialize_paging+0x250>
f0108028:	ff 75 e0             	pushl  -0x20(%ebp)
f010802b:	68 f8 73 12 f0       	push   $0xf01273f8
f0108030:	6a 68                	push   $0x68
f0108032:	68 db 73 12 f0       	push   $0xf01273db
f0108037:	e8 de 82 ff ff       	call   f010031a <_panic>
f010803c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010803f:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0108045:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108048:	01 d0                	add    %edx,%eax
f010804a:	48                   	dec    %eax
f010804b:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010804e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108051:	ba 00 00 00 00       	mov    $0x0,%edx
f0108056:	f7 75 e4             	divl   -0x1c(%ebp)
f0108059:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010805c:	29 d0                	sub    %edx,%eax
f010805e:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0108061:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f0108068:	eb 1d                	jmp    f0108087 <initialize_paging+0x29b>
	{
		frames_info[i].references = 1;
f010806a:	8b 0d c0 28 5a f0    	mov    0xf05a28c0,%ecx
f0108070:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108073:	89 d0                	mov    %edx,%eax
f0108075:	01 c0                	add    %eax,%eax
f0108077:	01 d0                	add    %edx,%eax
f0108079:	c1 e0 03             	shl    $0x3,%eax
f010807c:	01 c8                	add    %ecx,%eax
f010807e:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0108084:	ff 45 f4             	incl   -0xc(%ebp)
f0108087:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010808a:	85 c0                	test   %eax,%eax
f010808c:	79 05                	jns    f0108093 <initialize_paging+0x2a7>
f010808e:	05 ff 0f 00 00       	add    $0xfff,%eax
f0108093:	c1 f8 0c             	sar    $0xc,%eax
f0108096:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108099:	7f cf                	jg     f010806a <initialize_paging+0x27e>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f010809b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010809e:	85 c0                	test   %eax,%eax
f01080a0:	79 05                	jns    f01080a7 <initialize_paging+0x2bb>
f01080a2:	05 ff 0f 00 00       	add    $0xfff,%eax
f01080a7:	c1 f8 0c             	sar    $0xc,%eax
f01080aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01080ad:	e9 e8 00 00 00       	jmp    f010819a <initialize_paging+0x3ae>
	{
		initialize_frame_info(&(frames_info[i]));
f01080b2:	8b 0d c0 28 5a f0    	mov    0xf05a28c0,%ecx
f01080b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01080bb:	89 d0                	mov    %edx,%eax
f01080bd:	01 c0                	add    %eax,%eax
f01080bf:	01 d0                	add    %edx,%eax
f01080c1:	c1 e0 03             	shl    $0x3,%eax
f01080c4:	01 c8                	add    %ecx,%eax
f01080c6:	83 ec 0c             	sub    $0xc,%esp
f01080c9:	50                   	push   %eax
f01080ca:	e8 e6 00 00 00       	call   f01081b5 <initialize_frame_info>
f01080cf:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&MemFrameLists.free_frame_list, &frames_info[i]);
f01080d2:	8b 0d c0 28 5a f0    	mov    0xf05a28c0,%ecx
f01080d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01080db:	89 d0                	mov    %edx,%eax
f01080dd:	01 c0                	add    %eax,%eax
f01080df:	01 d0                	add    %edx,%eax
f01080e1:	c1 e0 03             	shl    $0x3,%eax
f01080e4:	01 c8                	add    %ecx,%eax
f01080e6:	85 c0                	test   %eax,%eax
f01080e8:	75 14                	jne    f01080fe <initialize_paging+0x312>
f01080ea:	83 ec 04             	sub    $0x4,%esp
f01080ed:	68 b8 73 12 f0       	push   $0xf01273b8
f01080f2:	6a 74                	push   $0x74
f01080f4:	68 db 73 12 f0       	push   $0xf01273db
f01080f9:	e8 1c 82 ff ff       	call   f010031a <_panic>
f01080fe:	8b 0d c0 28 5a f0    	mov    0xf05a28c0,%ecx
f0108104:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108107:	89 d0                	mov    %edx,%eax
f0108109:	01 c0                	add    %eax,%eax
f010810b:	01 d0                	add    %edx,%eax
f010810d:	c1 e0 03             	shl    $0x3,%eax
f0108110:	01 c8                	add    %ecx,%eax
f0108112:	8b 15 c0 fe 59 f0    	mov    0xf059fec0,%edx
f0108118:	89 10                	mov    %edx,(%eax)
f010811a:	8b 00                	mov    (%eax),%eax
f010811c:	85 c0                	test   %eax,%eax
f010811e:	74 1f                	je     f010813f <initialize_paging+0x353>
f0108120:	8b 15 c0 fe 59 f0    	mov    0xf059fec0,%edx
f0108126:	8b 1d c0 28 5a f0    	mov    0xf05a28c0,%ebx
f010812c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010812f:	89 c8                	mov    %ecx,%eax
f0108131:	01 c0                	add    %eax,%eax
f0108133:	01 c8                	add    %ecx,%eax
f0108135:	c1 e0 03             	shl    $0x3,%eax
f0108138:	01 d8                	add    %ebx,%eax
f010813a:	89 42 04             	mov    %eax,0x4(%edx)
f010813d:	eb 19                	jmp    f0108158 <initialize_paging+0x36c>
f010813f:	8b 0d c0 28 5a f0    	mov    0xf05a28c0,%ecx
f0108145:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108148:	89 d0                	mov    %edx,%eax
f010814a:	01 c0                	add    %eax,%eax
f010814c:	01 d0                	add    %edx,%eax
f010814e:	c1 e0 03             	shl    $0x3,%eax
f0108151:	01 c8                	add    %ecx,%eax
f0108153:	a3 c4 fe 59 f0       	mov    %eax,0xf059fec4
f0108158:	8b 0d c0 28 5a f0    	mov    0xf05a28c0,%ecx
f010815e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108161:	89 d0                	mov    %edx,%eax
f0108163:	01 c0                	add    %eax,%eax
f0108165:	01 d0                	add    %edx,%eax
f0108167:	c1 e0 03             	shl    $0x3,%eax
f010816a:	01 c8                	add    %ecx,%eax
f010816c:	a3 c0 fe 59 f0       	mov    %eax,0xf059fec0
f0108171:	8b 0d c0 28 5a f0    	mov    0xf05a28c0,%ecx
f0108177:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010817a:	89 d0                	mov    %edx,%eax
f010817c:	01 c0                	add    %eax,%eax
f010817e:	01 d0                	add    %edx,%eax
f0108180:	c1 e0 03             	shl    $0x3,%eax
f0108183:	01 c8                	add    %ecx,%eax
f0108185:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010818c:	a1 cc fe 59 f0       	mov    0xf059fecc,%eax
f0108191:	40                   	inc    %eax
f0108192:	a3 cc fe 59 f0       	mov    %eax,0xf059fecc
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0108197:	ff 45 f4             	incl   -0xc(%ebp)
f010819a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010819d:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f01081a2:	39 c2                	cmp    %eax,%edx
f01081a4:	0f 82 08 ff ff ff    	jb     f01080b2 <initialize_paging+0x2c6>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&MemFrameLists.free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01081aa:	e8 ef b9 ff ff       	call   f0103b9e <initialize_disk_page_file>
}
f01081af:	90                   	nop
f01081b0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01081b3:	c9                   	leave  
f01081b4:	c3                   	ret    

f01081b5 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f01081b5:	55                   	push   %ebp
f01081b6:	89 e5                	mov    %esp,%ebp
f01081b8:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f01081bb:	83 ec 04             	sub    $0x4,%esp
f01081be:	6a 18                	push   $0x18
f01081c0:	6a 00                	push   $0x0
f01081c2:	ff 75 08             	pushl  0x8(%ebp)
f01081c5:	e8 62 a5 01 00       	call   f012272c <memset>
f01081ca:	83 c4 10             	add    $0x10,%esp
}
f01081cd:	90                   	nop
f01081ce:	c9                   	leave  
f01081cf:	c3                   	ret    

f01081d0 <allocate_frame>:
//   If failed, it panic.
//
// Hint: use LIST_FIRST, LIST_REMOVE, and initialize_frame_info
// Hint: references should not be incremented
int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f01081d0:	55                   	push   %ebp
f01081d1:	89 e5                	mov    %esp,%ebp
f01081d3:	83 ec 18             	sub    $0x18,%esp
	//cprintf("allocate_frame...\n");

	bool lock_already_held = holding_spinlock(&MemFrameLists.mfllock);
f01081d6:	83 ec 0c             	sub    $0xc,%esp
f01081d9:	68 e0 fe 59 f0       	push   $0xf059fee0
f01081de:	e8 57 6b 00 00       	call   f010ed3a <holding_spinlock>
f01081e3:	83 c4 10             	add    $0x10,%esp
f01081e6:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (!lock_already_held)
f01081e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01081ed:	75 10                	jne    f01081ff <allocate_frame+0x2f>
	{
		acquire_spinlock(&MemFrameLists.mfllock);
f01081ef:	83 ec 0c             	sub    $0xc,%esp
f01081f2:	68 e0 fe 59 f0       	push   $0xf059fee0
f01081f7:	e8 25 69 00 00       	call   f010eb21 <acquire_spinlock>
f01081fc:	83 c4 10             	add    $0x10,%esp
	}

	*ptr_frame_info = LIST_FIRST(&MemFrameLists.free_frame_list);
f01081ff:	8b 15 c0 fe 59 f0    	mov    0xf059fec0,%edx
f0108205:	8b 45 08             	mov    0x8(%ebp),%eax
f0108208:	89 10                	mov    %edx,(%eax)
	int c = 0;
f010820a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (*ptr_frame_info == NULL)
f0108211:	8b 45 08             	mov    0x8(%ebp),%eax
f0108214:	8b 00                	mov    (%eax),%eax
f0108216:	85 c0                	test   %eax,%eax
f0108218:	75 17                	jne    f0108231 <allocate_frame+0x61>
	{
		//[PROJECT] Free RAM when it's FULL
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f010821a:	83 ec 04             	sub    $0x4,%esp
f010821d:	68 2c 74 12 f0       	push   $0xf012742c
f0108222:	68 a2 00 00 00       	push   $0xa2
f0108227:	68 db 73 12 f0       	push   $0xf01273db
f010822c:	e8 e9 80 ff ff       	call   f010031a <_panic>
		// When allocating new frame, if there's no free frame, then you should:
		//	1-	If any process has exited (those with status ENV_EXIT), then remove one or more of these exited processes from the main memory
		//	2-	otherwise, free at least 1 frame from the user working set by applying the FIFO algorithm
	}

	LIST_REMOVE(&MemFrameLists.free_frame_list,*ptr_frame_info);
f0108231:	8b 45 08             	mov    0x8(%ebp),%eax
f0108234:	8b 00                	mov    (%eax),%eax
f0108236:	85 c0                	test   %eax,%eax
f0108238:	75 17                	jne    f0108251 <allocate_frame+0x81>
f010823a:	83 ec 04             	sub    $0x4,%esp
f010823d:	68 79 74 12 f0       	push   $0xf0127479
f0108242:	68 a8 00 00 00       	push   $0xa8
f0108247:	68 db 73 12 f0       	push   $0xf01273db
f010824c:	e8 c9 80 ff ff       	call   f010031a <_panic>
f0108251:	8b 45 08             	mov    0x8(%ebp),%eax
f0108254:	8b 00                	mov    (%eax),%eax
f0108256:	8b 00                	mov    (%eax),%eax
f0108258:	85 c0                	test   %eax,%eax
f010825a:	74 14                	je     f0108270 <allocate_frame+0xa0>
f010825c:	8b 45 08             	mov    0x8(%ebp),%eax
f010825f:	8b 00                	mov    (%eax),%eax
f0108261:	8b 00                	mov    (%eax),%eax
f0108263:	8b 55 08             	mov    0x8(%ebp),%edx
f0108266:	8b 12                	mov    (%edx),%edx
f0108268:	8b 52 04             	mov    0x4(%edx),%edx
f010826b:	89 50 04             	mov    %edx,0x4(%eax)
f010826e:	eb 0d                	jmp    f010827d <allocate_frame+0xad>
f0108270:	8b 45 08             	mov    0x8(%ebp),%eax
f0108273:	8b 00                	mov    (%eax),%eax
f0108275:	8b 40 04             	mov    0x4(%eax),%eax
f0108278:	a3 c4 fe 59 f0       	mov    %eax,0xf059fec4
f010827d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108280:	8b 00                	mov    (%eax),%eax
f0108282:	8b 40 04             	mov    0x4(%eax),%eax
f0108285:	85 c0                	test   %eax,%eax
f0108287:	74 13                	je     f010829c <allocate_frame+0xcc>
f0108289:	8b 45 08             	mov    0x8(%ebp),%eax
f010828c:	8b 00                	mov    (%eax),%eax
f010828e:	8b 40 04             	mov    0x4(%eax),%eax
f0108291:	8b 55 08             	mov    0x8(%ebp),%edx
f0108294:	8b 12                	mov    (%edx),%edx
f0108296:	8b 12                	mov    (%edx),%edx
f0108298:	89 10                	mov    %edx,(%eax)
f010829a:	eb 0c                	jmp    f01082a8 <allocate_frame+0xd8>
f010829c:	8b 45 08             	mov    0x8(%ebp),%eax
f010829f:	8b 00                	mov    (%eax),%eax
f01082a1:	8b 00                	mov    (%eax),%eax
f01082a3:	a3 c0 fe 59 f0       	mov    %eax,0xf059fec0
f01082a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01082ab:	8b 00                	mov    (%eax),%eax
f01082ad:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01082b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01082b6:	8b 00                	mov    (%eax),%eax
f01082b8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01082bf:	a1 cc fe 59 f0       	mov    0xf059fecc,%eax
f01082c4:	48                   	dec    %eax
f01082c5:	a3 cc fe 59 f0       	mov    %eax,0xf059fecc

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/
	if((*ptr_frame_info)->isBuffered)
f01082ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01082cd:	8b 00                	mov    (%eax),%eax
f01082cf:	8a 40 14             	mov    0x14(%eax),%al
f01082d2:	84 c0                	test   %al,%al
f01082d4:	74 20                	je     f01082f6 <allocate_frame+0x126>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->proc->env_page_directory,(*ptr_frame_info)->bufferedVA);
f01082d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01082d9:	8b 00                	mov    (%eax),%eax
f01082db:	8b 50 10             	mov    0x10(%eax),%edx
f01082de:	8b 45 08             	mov    0x8(%ebp),%eax
f01082e1:	8b 00                	mov    (%eax),%eax
f01082e3:	8b 40 0c             	mov    0xc(%eax),%eax
f01082e6:	8b 40 64             	mov    0x64(%eax),%eax
f01082e9:	83 ec 08             	sub    $0x8,%esp
f01082ec:	52                   	push   %edx
f01082ed:	50                   	push   %eax
f01082ee:	e8 42 09 00 00       	call   f0108c35 <pt_clear_page_table_entry>
f01082f3:	83 c4 10             	add    $0x10,%esp
		//pt_set_page_permissions((*ptr_frame_info)->environment->env_pgdir, (*ptr_frame_info)->va, 0, PERM_BUFFERED);
	}
	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f01082f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01082f9:	8b 00                	mov    (%eax),%eax
f01082fb:	83 ec 0c             	sub    $0xc,%esp
f01082fe:	50                   	push   %eax
f01082ff:	e8 b1 fe ff ff       	call   f01081b5 <initialize_frame_info>
f0108304:	83 c4 10             	add    $0x10,%esp

	if (!lock_already_held)
f0108307:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010830b:	75 10                	jne    f010831d <allocate_frame+0x14d>
	{
		release_spinlock(&MemFrameLists.mfllock);
f010830d:	83 ec 0c             	sub    $0xc,%esp
f0108310:	68 e0 fe 59 f0       	push   $0xf059fee0
f0108315:	e8 8e 68 00 00       	call   f010eba8 <release_spinlock>
f010831a:	83 c4 10             	add    $0x10,%esp
	}

	return 0;
f010831d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108322:	c9                   	leave  
f0108323:	c3                   	ret    

f0108324 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f0108324:	55                   	push   %ebp
f0108325:	89 e5                	mov    %esp,%ebp
f0108327:	83 ec 18             	sub    $0x18,%esp
	bool lock_already_held = holding_spinlock(&MemFrameLists.mfllock);
f010832a:	83 ec 0c             	sub    $0xc,%esp
f010832d:	68 e0 fe 59 f0       	push   $0xf059fee0
f0108332:	e8 03 6a 00 00       	call   f010ed3a <holding_spinlock>
f0108337:	83 c4 10             	add    $0x10,%esp
f010833a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (!lock_already_held)
f010833d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108341:	75 10                	jne    f0108353 <free_frame+0x2f>
	{
		acquire_spinlock(&MemFrameLists.mfllock);
f0108343:	83 ec 0c             	sub    $0xc,%esp
f0108346:	68 e0 fe 59 f0       	push   $0xf059fee0
f010834b:	e8 d1 67 00 00       	call   f010eb21 <acquire_spinlock>
f0108350:	83 c4 10             	add    $0x10,%esp
	}
	{
		/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
		initialize_frame_info(ptr_frame_info);
f0108353:	83 ec 0c             	sub    $0xc,%esp
f0108356:	ff 75 08             	pushl  0x8(%ebp)
f0108359:	e8 57 fe ff ff       	call   f01081b5 <initialize_frame_info>
f010835e:	83 c4 10             	add    $0x10,%esp
		/*=============================================================================*/
		// Fill this function in
		LIST_INSERT_HEAD(&MemFrameLists.free_frame_list, ptr_frame_info);
f0108361:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0108365:	75 17                	jne    f010837e <free_frame+0x5a>
f0108367:	83 ec 04             	sub    $0x4,%esp
f010836a:	68 b8 73 12 f0       	push   $0xf01273b8
f010836f:	68 cf 00 00 00       	push   $0xcf
f0108374:	68 db 73 12 f0       	push   $0xf01273db
f0108379:	e8 9c 7f ff ff       	call   f010031a <_panic>
f010837e:	8b 15 c0 fe 59 f0    	mov    0xf059fec0,%edx
f0108384:	8b 45 08             	mov    0x8(%ebp),%eax
f0108387:	89 10                	mov    %edx,(%eax)
f0108389:	8b 45 08             	mov    0x8(%ebp),%eax
f010838c:	8b 00                	mov    (%eax),%eax
f010838e:	85 c0                	test   %eax,%eax
f0108390:	74 0d                	je     f010839f <free_frame+0x7b>
f0108392:	a1 c0 fe 59 f0       	mov    0xf059fec0,%eax
f0108397:	8b 55 08             	mov    0x8(%ebp),%edx
f010839a:	89 50 04             	mov    %edx,0x4(%eax)
f010839d:	eb 08                	jmp    f01083a7 <free_frame+0x83>
f010839f:	8b 45 08             	mov    0x8(%ebp),%eax
f01083a2:	a3 c4 fe 59 f0       	mov    %eax,0xf059fec4
f01083a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01083aa:	a3 c0 fe 59 f0       	mov    %eax,0xf059fec0
f01083af:	8b 45 08             	mov    0x8(%ebp),%eax
f01083b2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01083b9:	a1 cc fe 59 f0       	mov    0xf059fecc,%eax
f01083be:	40                   	inc    %eax
f01083bf:	a3 cc fe 59 f0       	mov    %eax,0xf059fecc
		//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));
	}
	if (!lock_already_held)
f01083c4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01083c8:	75 10                	jne    f01083da <free_frame+0xb6>
	{
		release_spinlock(&MemFrameLists.mfllock);
f01083ca:	83 ec 0c             	sub    $0xc,%esp
f01083cd:	68 e0 fe 59 f0       	push   $0xf059fee0
f01083d2:	e8 d1 67 00 00       	call   f010eba8 <release_spinlock>
f01083d7:	83 c4 10             	add    $0x10,%esp
	}
}
f01083da:	90                   	nop
f01083db:	c9                   	leave  
f01083dc:	c3                   	ret    

f01083dd <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f01083dd:	55                   	push   %ebp
f01083de:	89 e5                	mov    %esp,%ebp
f01083e0:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f01083e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01083e6:	8b 40 08             	mov    0x8(%eax),%eax
f01083e9:	48                   	dec    %eax
f01083ea:	8b 55 08             	mov    0x8(%ebp),%edx
f01083ed:	66 89 42 08          	mov    %ax,0x8(%edx)
f01083f1:	8b 45 08             	mov    0x8(%ebp),%eax
f01083f4:	8b 40 08             	mov    0x8(%eax),%eax
f01083f7:	66 85 c0             	test   %ax,%ax
f01083fa:	75 0e                	jne    f010840a <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f01083fc:	83 ec 0c             	sub    $0xc,%esp
f01083ff:	ff 75 08             	pushl  0x8(%ebp)
f0108402:	e8 1d ff ff ff       	call   f0108324 <free_frame>
f0108407:	83 c4 10             	add    $0x10,%esp
}
f010840a:	90                   	nop
f010840b:	c9                   	leave  
f010840c:	c3                   	ret    

f010840d <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f010840d:	55                   	push   %ebp
f010840e:	89 e5                	mov    %esp,%ebp
f0108410:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0108413:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108416:	c1 e8 16             	shr    $0x16,%eax
f0108419:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108420:	8b 45 08             	mov    0x8(%ebp),%eax
f0108423:	01 d0                	add    %edx,%eax
f0108425:	8b 00                	mov    (%eax),%eax
f0108427:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f010842a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010842d:	83 e0 01             	and    $0x1,%eax
f0108430:	85 c0                	test   %eax,%eax
f0108432:	74 4e                	je     f0108482 <get_page_table+0x75>
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0108434:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108437:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010843c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010843f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108442:	c1 e8 0c             	shr    $0xc,%eax
f0108445:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108448:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f010844d:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0108450:	72 17                	jb     f0108469 <get_page_table+0x5c>
f0108452:	ff 75 f0             	pushl  -0x10(%ebp)
f0108455:	68 98 74 12 f0       	push   $0xf0127498
f010845a:	68 fb 00 00 00       	push   $0xfb
f010845f:	68 db 73 12 f0       	push   $0xf01273db
f0108464:	e8 b1 7e ff ff       	call   f010031a <_panic>
f0108469:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010846c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0108471:	89 c2                	mov    %eax,%edx
f0108473:	8b 45 10             	mov    0x10(%ebp),%eax
f0108476:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0108478:	b8 00 00 00 00       	mov    $0x0,%eax
f010847d:	e9 8f 00 00 00       	jmp    f0108511 <get_page_table+0x104>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0108482:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108486:	74 7b                	je     f0108503 <get_page_table+0xf6>
f0108488:	8b 45 0c             	mov    0xc(%ebp),%eax
f010848b:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f010848e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108491:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0108494:	83 ec 0c             	sub    $0xc,%esp
f0108497:	6a 00                	push   $0x0
f0108499:	e8 57 63 00 00       	call   f010e7f5 <fault_handler>
f010849e:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01084a1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01084a4:	c1 e8 16             	shr    $0x16,%eax
f01084a7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01084ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01084b1:	01 d0                	add    %edx,%eax
f01084b3:	8b 00                	mov    (%eax),%eax
f01084b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f01084b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01084bb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01084c0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01084c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01084c6:	c1 e8 0c             	shr    $0xc,%eax
f01084c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01084cc:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f01084d1:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f01084d4:	72 17                	jb     f01084ed <get_page_table+0xe0>
f01084d6:	ff 75 e8             	pushl  -0x18(%ebp)
f01084d9:	68 98 74 12 f0       	push   $0xf0127498
f01084de:	68 13 01 00 00       	push   $0x113
f01084e3:	68 db 73 12 f0       	push   $0xf01273db
f01084e8:	e8 2d 7e ff ff       	call   f010031a <_panic>
f01084ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01084f0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01084f5:	89 c2                	mov    %eax,%edx
f01084f7:	8b 45 10             	mov    0x10(%ebp),%eax
f01084fa:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f01084fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0108501:	eb 0e                	jmp    f0108511 <get_page_table+0x104>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0108503:	8b 45 10             	mov    0x10(%ebp),%eax
f0108506:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f010850c:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0108511:	c9                   	leave  
f0108512:	c3                   	ret    

f0108513 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0108513:	55                   	push   %ebp
f0108514:	89 e5                	mov    %esp,%ebp
f0108516:	83 ec 18             	sub    $0x18,%esp
	memset(ptr_page_table , 0, PAGE_SIZE);
	tlbflush();

#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
f0108519:	83 ec 04             	sub    $0x4,%esp
f010851c:	8d 45 f4             	lea    -0xc(%ebp),%eax
f010851f:	50                   	push   %eax
f0108520:	ff 75 0c             	pushl  0xc(%ebp)
f0108523:	ff 75 08             	pushl  0x8(%ebp)
f0108526:	e8 08 00 00 00       	call   f0108533 <__static_cpt>
f010852b:	83 c4 10             	add    $0x10,%esp
#endif

	//cprintf("KERNEL: NEW TABLE for va %x \n", virtual_address);

	return ptr_page_table;
f010852e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0108531:	c9                   	leave  
f0108532:	c3                   	ret    

f0108533 <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0108533:	55                   	push   %ebp
f0108534:	89 e5                	mov    %esp,%ebp
f0108536:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0108539:	83 ec 0c             	sub    $0xc,%esp
f010853c:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010853f:	50                   	push   %eax
f0108540:	e8 8b fc ff ff       	call   f01081d0 <allocate_frame>
f0108545:	83 c4 10             	add    $0x10,%esp
f0108548:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f010854b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010854e:	83 ec 0c             	sub    $0xc,%esp
f0108551:	50                   	push   %eax
f0108552:	e8 27 f8 ff ff       	call   f0107d7e <to_physical_address>
f0108557:	83 c4 10             	add    $0x10,%esp
f010855a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f010855d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108560:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108563:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108566:	c1 e8 0c             	shr    $0xc,%eax
f0108569:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010856c:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f0108571:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0108574:	72 17                	jb     f010858d <__static_cpt+0x5a>
f0108576:	ff 75 ec             	pushl  -0x14(%ebp)
f0108579:	68 98 74 12 f0       	push   $0xf0127498
f010857e:	68 4e 01 00 00       	push   $0x14e
f0108583:	68 db 73 12 f0       	push   $0xf01273db
f0108588:	e8 8d 7d ff ff       	call   f010031a <_panic>
f010858d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108590:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0108595:	89 c2                	mov    %eax,%edx
f0108597:	8b 45 10             	mov    0x10(%ebp),%eax
f010859a:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f010859c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010859f:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f01085a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01085a8:	c1 e8 16             	shr    $0x16,%eax
f01085ab:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01085b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01085b5:	01 d0                	add    %edx,%eax
f01085b7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01085ba:	83 ca 07             	or     $0x7,%edx
f01085bd:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f01085bf:	8b 45 10             	mov    0x10(%ebp),%eax
f01085c2:	8b 00                	mov    (%eax),%eax
f01085c4:	83 ec 04             	sub    $0x4,%esp
f01085c7:	68 00 10 00 00       	push   $0x1000
f01085cc:	6a 00                	push   $0x0
f01085ce:	50                   	push   %eax
f01085cf:	e8 58 a1 01 00       	call   f012272c <memset>
f01085d4:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01085d7:	0f 20 d8             	mov    %cr3,%eax
f01085da:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01085dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01085e0:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f01085e3:	90                   	nop
f01085e4:	c9                   	leave  
f01085e5:	c3                   	ret    

f01085e6 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f01085e6:	55                   	push   %ebp
f01085e7:	89 e5                	mov    %esp,%ebp
f01085e9:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f01085ec:	ff 75 0c             	pushl  0xc(%ebp)
f01085ef:	e8 8a f7 ff ff       	call   f0107d7e <to_physical_address>
f01085f4:	83 c4 04             	add    $0x4,%esp
f01085f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f01085fa:	83 ec 04             	sub    $0x4,%esp
f01085fd:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0108600:	50                   	push   %eax
f0108601:	ff 75 10             	pushl  0x10(%ebp)
f0108604:	ff 75 08             	pushl  0x8(%ebp)
f0108607:	e8 01 fe ff ff       	call   f010840d <get_page_table>
f010860c:	83 c4 10             	add    $0x10,%esp
f010860f:	83 f8 01             	cmp    $0x1,%eax
f0108612:	75 15                	jne    f0108629 <map_frame+0x43>
			uint32* ptr_page_table2 =NULL;
			//cprintf("======> After the table created at %x\n\n", get_page_table(ptr_page_directory, virtual_address,&ptr_page_table2));
		}
#else
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
f0108614:	83 ec 04             	sub    $0x4,%esp
f0108617:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010861a:	50                   	push   %eax
f010861b:	ff 75 10             	pushl  0x10(%ebp)
f010861e:	ff 75 08             	pushl  0x8(%ebp)
f0108621:	e8 0d ff ff ff       	call   f0108533 <__static_cpt>
f0108626:	83 c4 10             	add    $0x10,%esp
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0108629:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010862c:	8b 55 10             	mov    0x10(%ebp),%edx
f010862f:	c1 ea 0c             	shr    $0xc,%edx
f0108632:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108638:	c1 e2 02             	shl    $0x2,%edx
f010863b:	01 d0                	add    %edx,%eax
f010863d:	8b 00                	mov    (%eax),%eax
f010863f:	89 45 f0             	mov    %eax,-0x10(%ebp)

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0108642:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108645:	83 e0 01             	and    $0x1,%eax
f0108648:	85 c0                	test   %eax,%eax
f010864a:	74 25                	je     f0108671 <map_frame+0x8b>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f010864c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010864f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108654:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108657:	75 07                	jne    f0108660 <map_frame+0x7a>
			return 0;
f0108659:	b8 00 00 00 00       	mov    $0x0,%eax
f010865e:	eb 68                	jmp    f01086c8 <map_frame+0xe2>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0108660:	83 ec 08             	sub    $0x8,%esp
f0108663:	ff 75 10             	pushl  0x10(%ebp)
f0108666:	ff 75 08             	pushl  0x8(%ebp)
f0108669:	e8 d2 00 00 00       	call   f0108740 <unmap_frame>
f010866e:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0108671:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108674:	8b 40 08             	mov    0x8(%eax),%eax
f0108677:	40                   	inc    %eax
f0108678:	8b 55 0c             	mov    0xc(%ebp),%edx
f010867b:	66 89 42 08          	mov    %ax,0x8(%edx)

	/*********************************************************************************/
	/*NEW'23 el7:)
	 * [DONE] map_frame(): KEEP THE VALUES OF THE AVAILABLE BITS*/
	uint32 pte_available_bits = ptr_page_table[PTX(virtual_address)] & PERM_AVAILABLE;
f010867f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108682:	8b 55 10             	mov    0x10(%ebp),%edx
f0108685:	c1 ea 0c             	shr    $0xc,%edx
f0108688:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010868e:	c1 e2 02             	shl    $0x2,%edx
f0108691:	01 d0                	add    %edx,%eax
f0108693:	8b 00                	mov    (%eax),%eax
f0108695:	25 00 0e 00 00       	and    $0xe00,%eax
f010869a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , pte_available_bits | perm | PERM_PRESENT);
f010869d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01086a0:	8b 55 10             	mov    0x10(%ebp),%edx
f01086a3:	c1 ea 0c             	shr    $0xc,%edx
f01086a6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01086ac:	c1 e2 02             	shl    $0x2,%edx
f01086af:	01 c2                	add    %eax,%edx
f01086b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01086b4:	0b 45 ec             	or     -0x14(%ebp),%eax
f01086b7:	89 c1                	mov    %eax,%ecx
f01086b9:	8b 45 14             	mov    0x14(%ebp),%eax
f01086bc:	09 c8                	or     %ecx,%eax
f01086be:	83 c8 01             	or     $0x1,%eax
f01086c1:	89 02                	mov    %eax,(%edx)
	/*********************************************************************************/

	return 0;
f01086c3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01086c8:	c9                   	leave  
f01086c9:	c3                   	ret    

f01086ca <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f01086ca:	55                   	push   %ebp
f01086cb:	89 e5                	mov    %esp,%ebp
f01086cd:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f01086d0:	83 ec 04             	sub    $0x4,%esp
f01086d3:	ff 75 10             	pushl  0x10(%ebp)
f01086d6:	ff 75 0c             	pushl  0xc(%ebp)
f01086d9:	ff 75 08             	pushl  0x8(%ebp)
f01086dc:	e8 2c fd ff ff       	call   f010840d <get_page_table>
f01086e1:	83 c4 10             	add    $0x10,%esp
f01086e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f01086e7:	8b 45 10             	mov    0x10(%ebp),%eax
f01086ea:	8b 00                	mov    (%eax),%eax
f01086ec:	85 c0                	test   %eax,%eax
f01086ee:	74 49                	je     f0108739 <get_frame_info+0x6f>
	{
		uint32 index_page_table = PTX(virtual_address);
f01086f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01086f3:	c1 e8 0c             	shr    $0xc,%eax
f01086f6:	25 ff 03 00 00       	and    $0x3ff,%eax
f01086fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f01086fe:	8b 45 10             	mov    0x10(%ebp),%eax
f0108701:	8b 00                	mov    (%eax),%eax
f0108703:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108706:	c1 e2 02             	shl    $0x2,%edx
f0108709:	01 d0                	add    %edx,%eax
f010870b:	8b 00                	mov    (%eax),%eax
f010870d:	89 45 ec             	mov    %eax,-0x14(%ebp)

		/*2023 el7:)*///Make sure it has a frame number other than 0 (not just a marked page from the page allocator)
		//if( page_table_entry != 0)
		if( (page_table_entry & ~0xFFF) != 0)
f0108710:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108713:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108718:	85 c0                	test   %eax,%eax
f010871a:	74 16                	je     f0108732 <get_frame_info+0x68>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f010871c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010871f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108724:	83 ec 0c             	sub    $0xc,%esp
f0108727:	50                   	push   %eax
f0108728:	e8 64 f6 ff ff       	call   f0107d91 <to_frame_info>
f010872d:	83 c4 10             	add    $0x10,%esp
f0108730:	eb 0c                	jmp    f010873e <get_frame_info+0x74>
		}
		return 0;
f0108732:	b8 00 00 00 00       	mov    $0x0,%eax
f0108737:	eb 05                	jmp    f010873e <get_frame_info+0x74>
	}
	return 0;
f0108739:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010873e:	c9                   	leave  
f010873f:	c3                   	ret    

f0108740 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0108740:	55                   	push   %ebp
f0108741:	89 e5                	mov    %esp,%ebp
f0108743:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0108746:	83 ec 04             	sub    $0x4,%esp
f0108749:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010874c:	50                   	push   %eax
f010874d:	ff 75 0c             	pushl  0xc(%ebp)
f0108750:	ff 75 08             	pushl  0x8(%ebp)
f0108753:	e8 72 ff ff ff       	call   f01086ca <get_frame_info>
f0108758:	83 c4 10             	add    $0x10,%esp
f010875b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f010875e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108762:	74 7d                	je     f01087e1 <unmap_frame+0xa1>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0108764:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108767:	8a 40 14             	mov    0x14(%eax),%al
f010876a:	84 c0                	test   %al,%al
f010876c:	74 1c                	je     f010878a <unmap_frame+0x4a>
f010876e:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0108775:	77 13                	ja     f010878a <unmap_frame+0x4a>
			cprintf("WARNING: Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0108777:	83 ec 08             	sub    $0x8,%esp
f010877a:	ff 75 0c             	pushl  0xc(%ebp)
f010877d:	68 c8 74 12 f0       	push   $0xf01274c8
f0108782:	e8 e5 87 ff ff       	call   f0100f6c <cprintf>
f0108787:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f010878a:	83 ec 0c             	sub    $0xc,%esp
f010878d:	ff 75 f4             	pushl  -0xc(%ebp)
f0108790:	e8 48 fc ff ff       	call   f01083dd <decrement_references>
f0108795:	83 c4 10             	add    $0x10,%esp

		/*********************************************************************************/
		/*NEW'23 el7:)
		 * [DONE] unmap_frame(): KEEP THE VALUES OF THE AVAILABLE BITS*/
		uint32 pte_available_bits = ptr_page_table[PTX(virtual_address)] & PERM_AVAILABLE;
f0108798:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010879b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010879e:	c1 ea 0c             	shr    $0xc,%edx
f01087a1:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01087a7:	c1 e2 02             	shl    $0x2,%edx
f01087aa:	01 d0                	add    %edx,%eax
f01087ac:	8b 00                	mov    (%eax),%eax
f01087ae:	25 00 0e 00 00       	and    $0xe00,%eax
f01087b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_page_table[PTX(virtual_address)] = pte_available_bits;
f01087b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01087b9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01087bc:	c1 ea 0c             	shr    $0xc,%edx
f01087bf:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01087c5:	c1 e2 02             	shl    $0x2,%edx
f01087c8:	01 c2                	add    %eax,%edx
f01087ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01087cd:	89 02                	mov    %eax,(%edx)
		/*********************************************************************************/

		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f01087cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01087d2:	83 ec 08             	sub    $0x8,%esp
f01087d5:	50                   	push   %eax
f01087d6:	ff 75 08             	pushl  0x8(%ebp)
f01087d9:	e8 f9 f5 ff ff       	call   f0107dd7 <tlb_invalidate>
f01087de:	83 c4 10             	add    $0x10,%esp
	}
}
f01087e1:	90                   	nop
f01087e2:	c9                   	leave  
f01087e3:	c3                   	ret    

f01087e4 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f01087e4:	55                   	push   %ebp
f01087e5:	89 e5                	mov    %esp,%ebp
f01087e7:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f01087ea:	ff 75 0c             	pushl  0xc(%ebp)
f01087ed:	e8 8c f5 ff ff       	call   f0107d7e <to_physical_address>
f01087f2:	83 c4 04             	add    $0x4,%esp
f01087f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01087f8:	8b 45 10             	mov    0x10(%ebp),%eax
f01087fb:	c1 e8 16             	shr    $0x16,%eax
f01087fe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108805:	8b 45 08             	mov    0x8(%ebp),%eax
f0108808:	01 d0                	add    %edx,%eax
f010880a:	8b 00                	mov    (%eax),%eax
f010880c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f010880f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108812:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108817:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010881a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010881d:	c1 e8 0c             	shr    $0xc,%eax
f0108820:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108823:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f0108828:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f010882b:	72 17                	jb     f0108844 <loadtime_map_frame+0x60>
f010882d:	ff 75 ec             	pushl  -0x14(%ebp)
f0108830:	68 98 74 12 f0       	push   $0xf0127498
f0108835:	68 f9 01 00 00       	push   $0x1f9
f010883a:	68 db 73 12 f0       	push   $0xf01273db
f010883f:	e8 d6 7a ff ff       	call   f010031a <_panic>
f0108844:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108847:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010884c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f010884f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108853:	75 15                	jne    f010886a <loadtime_map_frame+0x86>
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
		}
#else
		{
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
f0108855:	83 ec 04             	sub    $0x4,%esp
f0108858:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f010885b:	50                   	push   %eax
f010885c:	ff 75 10             	pushl  0x10(%ebp)
f010885f:	ff 75 08             	pushl  0x8(%ebp)
f0108862:	e8 cc fc ff ff       	call   f0108533 <__static_cpt>
f0108867:	83 c4 10             	add    $0x10,%esp
		}
#endif
	}

	ptr_frame_info->references++;
f010886a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010886d:	8b 40 08             	mov    0x8(%eax),%eax
f0108870:	40                   	inc    %eax
f0108871:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108874:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0108878:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010887b:	8b 55 10             	mov    0x10(%ebp),%edx
f010887e:	c1 ea 0c             	shr    $0xc,%edx
f0108881:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108887:	c1 e2 02             	shl    $0x2,%edx
f010888a:	01 c2                	add    %eax,%edx
f010888c:	8b 45 14             	mov    0x14(%ebp),%eax
f010888f:	0b 45 f4             	or     -0xc(%ebp),%eax
f0108892:	83 c8 01             	or     $0x1,%eax
f0108895:	89 02                	mov    %eax,(%edx)

	return 0;
f0108897:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010889c:	c9                   	leave  
f010889d:	c3                   	ret    

f010889e <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f010889e:	55                   	push   %ebp
f010889f:	89 e5                	mov    %esp,%ebp
f01088a1:	57                   	push   %edi
f01088a2:	56                   	push   %esi
f01088a3:	53                   	push   %ebx
f01088a4:	83 ec 2c             	sub    $0x2c,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f01088a7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 totalFreeBuffered = 0 ;
f01088ae:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	uint32 totalModified = 0 ;
f01088b5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	bool lock_is_held = holding_spinlock(&MemFrameLists.mfllock);
f01088bc:	83 ec 0c             	sub    $0xc,%esp
f01088bf:	68 e0 fe 59 f0       	push   $0xf059fee0
f01088c4:	e8 71 64 00 00       	call   f010ed3a <holding_spinlock>
f01088c9:	83 c4 10             	add    $0x10,%esp
f01088cc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if (!lock_is_held)
f01088cf:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01088d3:	75 10                	jne    f01088e5 <calculate_available_frames+0x47>
	{
		acquire_spinlock(&MemFrameLists.mfllock);
f01088d5:	83 ec 0c             	sub    $0xc,%esp
f01088d8:	68 e0 fe 59 f0       	push   $0xf059fee0
f01088dd:	e8 3f 62 00 00       	call   f010eb21 <acquire_spinlock>
f01088e2:	83 c4 10             	add    $0x10,%esp
	}
	{
		//calculate the free frames from the free frame list

		LIST_FOREACH(ptr, &MemFrameLists.free_frame_list)
f01088e5:	a1 c0 fe 59 f0       	mov    0xf059fec0,%eax
f01088ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01088ed:	eb 1a                	jmp    f0108909 <calculate_available_frames+0x6b>
		{
			if (ptr->isBuffered)
f01088ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01088f2:	8a 40 14             	mov    0x14(%eax),%al
f01088f5:	84 c0                	test   %al,%al
f01088f7:	74 05                	je     f01088fe <calculate_available_frames+0x60>
				totalFreeBuffered++ ;
f01088f9:	ff 45 dc             	incl   -0x24(%ebp)
f01088fc:	eb 03                	jmp    f0108901 <calculate_available_frames+0x63>
			else
				totalFreeUnBuffered++ ;
f01088fe:	ff 45 e0             	incl   -0x20(%ebp)
		acquire_spinlock(&MemFrameLists.mfllock);
	}
	{
		//calculate the free frames from the free frame list

		LIST_FOREACH(ptr, &MemFrameLists.free_frame_list)
f0108901:	a1 c8 fe 59 f0       	mov    0xf059fec8,%eax
f0108906:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108909:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010890d:	74 07                	je     f0108916 <calculate_available_frames+0x78>
f010890f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108912:	8b 00                	mov    (%eax),%eax
f0108914:	eb 05                	jmp    f010891b <calculate_available_frames+0x7d>
f0108916:	b8 00 00 00 00       	mov    $0x0,%eax
f010891b:	a3 c8 fe 59 f0       	mov    %eax,0xf059fec8
f0108920:	a1 c8 fe 59 f0       	mov    0xf059fec8,%eax
f0108925:	85 c0                	test   %eax,%eax
f0108927:	75 c6                	jne    f01088ef <calculate_available_frames+0x51>
f0108929:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010892d:	75 c0                	jne    f01088ef <calculate_available_frames+0x51>
			else
				totalFreeUnBuffered++ ;
		}

		/*2023: UPDATE based on suggestion from T112 2023.Term1*/
		totalModified= LIST_SIZE(&MemFrameLists.modified_frame_list);
f010892f:	a1 dc fe 59 f0       	mov    0xf059fedc,%eax
f0108934:	89 45 d8             	mov    %eax,-0x28(%ebp)
		//	LIST_FOREACH(ptr, &modified_frame_list)
		//	{
		//		totalModified++ ;
		//	}
	}
	if (!lock_is_held)
f0108937:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f010893b:	75 10                	jne    f010894d <calculate_available_frames+0xaf>
	{
		release_spinlock(&MemFrameLists.mfllock);
f010893d:	83 ec 0c             	sub    $0xc,%esp
f0108940:	68 e0 fe 59 f0       	push   $0xf059fee0
f0108945:	e8 5e 62 00 00       	call   f010eba8 <release_spinlock>
f010894a:	83 c4 10             	add    $0x10,%esp
	}
	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f010894d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108950:	89 45 c8             	mov    %eax,-0x38(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0108953:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108956:	89 45 cc             	mov    %eax,-0x34(%ebp)
	counters.modified = totalModified;
f0108959:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010895c:	89 45 d0             	mov    %eax,-0x30(%ebp)
	return counters;
f010895f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108962:	89 c3                	mov    %eax,%ebx
f0108964:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0108967:	ba 03 00 00 00       	mov    $0x3,%edx
f010896c:	89 df                	mov    %ebx,%edi
f010896e:	89 c6                	mov    %eax,%esi
f0108970:	89 d1                	mov    %edx,%ecx
f0108972:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f0108974:	8b 45 08             	mov    0x8(%ebp),%eax
f0108977:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010897a:	5b                   	pop    %ebx
f010897b:	5e                   	pop    %esi
f010897c:	5f                   	pop    %edi
f010897d:	5d                   	pop    %ebp
f010897e:	c2 04 00             	ret    $0x4

f0108981 <sharing_init>:
//===========================
// [1] INITIALIZE SHARES:
//===========================
//Initialize the list and the corresponding lock
void sharing_init(uint32 numOfElements)
{
f0108981:	55                   	push   %ebp
f0108982:	89 e5                	mov    %esp,%ebp
f0108984:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	LIST_INIT(&AllShares.shares_list) ;
	init_spinlock(&AllShares.shareslock, "shares lock");
#else
	panic("not handled when KERN HEAP is disabled");
f0108987:	83 ec 04             	sub    $0x4,%esp
f010898a:	68 f8 74 12 f0       	push   $0xf01274f8
f010898f:	6a 1e                	push   $0x1e
f0108991:	68 20 75 12 f0       	push   $0xf0127520
f0108996:	e8 7f 79 ff ff       	call   f010031a <_panic>

f010899b <create_share>:
//=====================================
//Allocates a new shared object and initialize its member
//It dynamically creates the "framesStorage"
//Return: allocatedObject (pointer to struct Share) passed by reference
struct Share* create_share(int32 ownerID, char* shareName, uint32 size, uint8 isWritable)
{
f010899b:	55                   	push   %ebp
f010899c:	89 e5                	mov    %esp,%ebp
f010899e:	83 ec 18             	sub    $0x18,%esp
f01089a1:	8b 45 14             	mov    0x14(%ebp),%eax
f01089a4:	88 45 f4             	mov    %al,-0xc(%ebp)
	//[PROJECT'24.MS2]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("create_share is not implemented yet");
f01089a7:	83 ec 04             	sub    $0x4,%esp
f01089aa:	68 44 75 12 f0       	push   $0xf0127544
f01089af:	6a 32                	push   $0x32
f01089b1:	68 20 75 12 f0       	push   $0xf0127520
f01089b6:	e8 5f 79 ff ff       	call   f010031a <_panic>

f01089bb <get_share>:
//Search for the given shared object in the "shares_list"
//Return:
//	a) if found: ptr to Share object
//	b) else: NULL
struct Share* get_share(int32 ownerID, char* name)
{
f01089bb:	55                   	push   %ebp
f01089bc:	89 e5                	mov    %esp,%ebp
f01089be:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("get_share is not implemented yet");
f01089c1:	83 ec 04             	sub    $0x4,%esp
f01089c4:	68 68 75 12 f0       	push   $0xf0127568
f01089c9:	6a 42                	push   $0x42
f01089cb:	68 20 75 12 f0       	push   $0xf0127520
f01089d0:	e8 45 79 ff ff       	call   f010031a <_panic>

f01089d5 <free_share>:
// [3] Delete Share Object:
//=========================
//delete the given shared object from the "shares_list"
//it should free its framesStorage and the share object itself
void free_share(struct Share* ptrShare)
{
f01089d5:	55                   	push   %ebp
f01089d6:	89 e5                	mov    %esp,%ebp
f01089d8:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] BONUS
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("free_share is not implemented yet");
f01089db:	83 ec 04             	sub    $0x4,%esp
f01089de:	68 8c 75 12 f0       	push   $0xf012758c
f01089e3:	6a 50                	push   $0x50
f01089e5:	68 20 75 12 f0       	push   $0xf0127520
f01089ea:	e8 2b 79 ff ff       	call   f010031a <_panic>

f01089ef <create_frames_storage>:
//===========================
// [4] Create frames_storage:
//===========================
// Create the frames_storage and initialize it by 0
inline struct FrameInfo** create_frames_storage(int numOfFrames)
{
f01089ef:	55                   	push   %ebp
f01089f0:	89 e5                	mov    %esp,%ebp
f01089f2:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("create_frames_storage is not implemented yet");
f01089f5:	83 ec 04             	sub    $0x4,%esp
f01089f8:	68 b0 75 12 f0       	push   $0xf01275b0
f01089fd:	6a 5c                	push   $0x5c
f01089ff:	68 20 75 12 f0       	push   $0xf0127520
f0108a04:	e8 11 79 ff ff       	call   f010031a <_panic>

f0108a09 <createSharedObject>:

//=========================
// [5] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0108a09:	55                   	push   %ebp
f0108a0a:	89 e5                	mov    %esp,%ebp
f0108a0c:	83 ec 18             	sub    $0x18,%esp
f0108a0f:	8b 45 14             	mov    0x14(%ebp),%eax
f0108a12:	88 45 f4             	mov    %al,-0xc(%ebp)
	//[PROJECT'24.MS2]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("createSharedObject is not implemented yet");
f0108a15:	83 ec 04             	sub    $0x4,%esp
f0108a18:	68 e0 75 12 f0       	push   $0xf01275e0
f0108a1d:	6a 68                	push   $0x68
f0108a1f:	68 20 75 12 f0       	push   $0xf0127520
f0108a24:	e8 f1 78 ff ff       	call   f010031a <_panic>

f0108a29 <getSizeOfSharedObject>:

//==============================
// [6] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0108a29:	55                   	push   %ebp
f0108a2a:	89 e5                	mov    %esp,%ebp
f0108a2c:	83 ec 18             	sub    $0x18,%esp
	// This function should return the size of the given shared object
	// RETURN:
	//	a) If found, return size of shared object
	//	b) Else, return E_SHARED_MEM_NOT_EXISTS
	//
	struct Share* ptr_share = get_share(ownerID, shareName);
f0108a2f:	83 ec 08             	sub    $0x8,%esp
f0108a32:	ff 75 0c             	pushl  0xc(%ebp)
f0108a35:	ff 75 08             	pushl  0x8(%ebp)
f0108a38:	e8 7e ff ff ff       	call   f01089bb <get_share>
f0108a3d:	83 c4 10             	add    $0x10,%esp
f0108a40:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (ptr_share == NULL)
f0108a43:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108a47:	75 07                	jne    f0108a50 <getSizeOfSharedObject+0x27>
		return E_SHARED_MEM_NOT_EXISTS;
f0108a49:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0108a4e:	eb 06                	jmp    f0108a56 <getSizeOfSharedObject+0x2d>
	else
		return ptr_share->size;
f0108a50:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108a53:	8b 40 48             	mov    0x48(%eax),%eax

	return 0;
}
f0108a56:	c9                   	leave  
f0108a57:	c3                   	ret    

f0108a58 <getSharedObject>:

//======================
// [7] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0108a58:	55                   	push   %ebp
f0108a59:	89 e5                	mov    %esp,%ebp
f0108a5b:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("getSharedObject is not implemented yet");
f0108a5e:	83 ec 04             	sub    $0x4,%esp
f0108a61:	68 0c 76 12 f0       	push   $0xf012760c
f0108a66:	68 89 00 00 00       	push   $0x89
f0108a6b:	68 20 75 12 f0       	push   $0xf0127520
f0108a70:	e8 a5 78 ff ff       	call   f010031a <_panic>

f0108a75 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f0108a75:	55                   	push   %ebp
f0108a76:	89 e5                	mov    %esp,%ebp
f0108a78:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] BONUS
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("freeSharedObject is not implemented yet");
f0108a7b:	83 ec 04             	sub    $0x4,%esp
f0108a7e:	68 34 76 12 f0       	push   $0xf0127634
f0108a83:	68 9a 00 00 00       	push   $0x9a
f0108a88:	68 20 75 12 f0       	push   $0xf0127520
f0108a8d:	e8 88 78 ff ff       	call   f010031a <_panic>

f0108a92 <initialize_kheap_dynamic_allocator>:
//Remember: call the initialize_dynamic_allocator(..) to complete the initialization
//Return:
//	On success: 0
//	Otherwise (if no memory OR initial size exceed the given limit): E_NO_MEM
int initialize_kheap_dynamic_allocator(uint32 daStart, uint32 initSizeToAllocate, uint32 daLimit)
{
f0108a92:	55                   	push   %ebp
f0108a93:	89 e5                	mov    %esp,%ebp
f0108a95:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] [USER HEAP - KERNEL SIDE] initialize_kheap_dynamic_allocator
	// Write your code here, remove the panic and write your code
	panic("initialize_kheap_dynamic_allocator() is not implemented yet...!!");
f0108a98:	83 ec 04             	sub    $0x4,%esp
f0108a9b:	68 5c 76 12 f0       	push   $0xf012765c
f0108aa0:	6a 11                	push   $0x11
f0108aa2:	68 9d 76 12 f0       	push   $0xf012769d
f0108aa7:	e8 6e 78 ff ff       	call   f010031a <_panic>

f0108aac <sbrk>:
}

void* sbrk(int numOfPages)
{
f0108aac:	55                   	push   %ebp
f0108aad:	89 e5                	mov    %esp,%ebp
	 * 	1) Allocating additional pages for a kernel dynamic allocator will fail if the free frames are exhausted
	 * 		or the break exceed the limit of the dynamic allocator. If sbrk fails, kernel should panic(...)
	 */

	//MS2: COMMENT THIS LINE BEFORE START CODING====
	return (void*)-1 ;
f0108aaf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	//====================================================

	//[PROJECT'24.MS2] Implement this function
	// Write your code here, remove the panic and write your code
	panic("sbrk() is not implemented yet...!!");
}
f0108ab4:	5d                   	pop    %ebp
f0108ab5:	c3                   	ret    

f0108ab6 <kmalloc>:


void* kmalloc(unsigned int size)
{
f0108ab6:	55                   	push   %ebp
f0108ab7:	89 e5                	mov    %esp,%ebp
f0108ab9:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] Implement this function
	// Write your code here, remove the panic and write your code
	kpanic_into_prompt("kmalloc() is not implemented yet...!!");
f0108abc:	83 ec 04             	sub    $0x4,%esp
f0108abf:	68 b0 76 12 f0       	push   $0xf01276b0
f0108ac4:	6a 2e                	push   $0x2e
f0108ac6:	68 9d 76 12 f0       	push   $0xf012769d
f0108acb:	e8 75 79 ff ff       	call   f0100445 <_panic_into_prompt>

f0108ad0 <kfree>:
	// use "isKHeapPlacementStrategyFIRSTFIT() ..." functions to check the current strategy

}

void kfree(void* virtual_address)
{
f0108ad0:	55                   	push   %ebp
f0108ad1:	89 e5                	mov    %esp,%ebp
f0108ad3:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] Implement this function
	// Write your code here, remove the panic and write your code
	panic("kfree() is not implemented yet...!!");
f0108ad6:	83 ec 04             	sub    $0x4,%esp
f0108ad9:	68 d8 76 12 f0       	push   $0xf01276d8
f0108ade:	6a 38                	push   $0x38
f0108ae0:	68 9d 76 12 f0       	push   $0xf012769d
f0108ae5:	e8 30 78 ff ff       	call   f010031a <_panic>

f0108aea <kheap_virtual_address>:
	//refer to the project presentation and documentation for details

}

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0108aea:	55                   	push   %ebp
f0108aeb:	89 e5                	mov    %esp,%ebp
f0108aed:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
	panic("kheap_virtual_address() is not implemented yet...!!");
f0108af0:	83 ec 04             	sub    $0x4,%esp
f0108af3:	68 fc 76 12 f0       	push   $0xf01276fc
f0108af8:	6a 43                	push   $0x43
f0108afa:	68 9d 76 12 f0       	push   $0xf012769d
f0108aff:	e8 16 78 ff ff       	call   f010031a <_panic>

f0108b04 <kheap_physical_address>:

	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0108b04:	55                   	push   %ebp
f0108b05:	89 e5                	mov    %esp,%ebp
f0108b07:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	panic("kheap_physical_address() is not implemented yet...!!");
f0108b0a:	83 ec 04             	sub    $0x4,%esp
f0108b0d:	68 30 77 12 f0       	push   $0xf0127730
f0108b12:	6a 4f                	push   $0x4f
f0108b14:	68 9d 76 12 f0       	push   $0xf012769d
f0108b19:	e8 fc 77 ff ff       	call   f010031a <_panic>

f0108b1e <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0108b1e:	55                   	push   %ebp
f0108b1f:	89 e5                	mov    %esp,%ebp
	//[PROJECT'24.MS2 BONUS2] Kernel Heap Realloc
	// Write your code here, remove the panic and write your code
	return NULL;
f0108b21:	b8 00 00 00 00       	mov    $0x0,%eax
	panic("krealloc() is not implemented yet...!!");
}
f0108b26:	5d                   	pop    %ebp
f0108b27:	c3                   	ret    

f0108b28 <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0108b28:	55                   	push   %ebp
f0108b29:	89 e5                	mov    %esp,%ebp
f0108b2b:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108b2e:	83 ec 04             	sub    $0x4,%esp
f0108b31:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108b34:	50                   	push   %eax
f0108b35:	ff 75 0c             	pushl  0xc(%ebp)
f0108b38:	ff 75 08             	pushl  0x8(%ebp)
f0108b3b:	e8 cd f8 ff ff       	call   f010840d <get_page_table>
f0108b40:	83 c4 10             	add    $0x10,%esp
f0108b43:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f0108b46:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b49:	85 c0                	test   %eax,%eax
f0108b4b:	74 64                	je     f0108bb1 <pt_set_page_permissions+0x89>
	{
		ptr_page_table[PTX(virtual_address)] |= (permissions_to_set);
f0108b4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b50:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b53:	c1 ea 0c             	shr    $0xc,%edx
f0108b56:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108b5c:	c1 e2 02             	shl    $0x2,%edx
f0108b5f:	01 c2                	add    %eax,%edx
f0108b61:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b64:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0108b67:	c1 e9 0c             	shr    $0xc,%ecx
f0108b6a:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108b70:	c1 e1 02             	shl    $0x2,%ecx
f0108b73:	01 c8                	add    %ecx,%eax
f0108b75:	8b 00                	mov    (%eax),%eax
f0108b77:	0b 45 10             	or     0x10(%ebp),%eax
f0108b7a:	89 02                	mov    %eax,(%edx)
		ptr_page_table[PTX(virtual_address)] &= (~permissions_to_clear);
f0108b7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b7f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b82:	c1 ea 0c             	shr    $0xc,%edx
f0108b85:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108b8b:	c1 e2 02             	shl    $0x2,%edx
f0108b8e:	01 d0                	add    %edx,%eax
f0108b90:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108b93:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0108b96:	c1 e9 0c             	shr    $0xc,%ecx
f0108b99:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108b9f:	c1 e1 02             	shl    $0x2,%ecx
f0108ba2:	01 ca                	add    %ecx,%edx
f0108ba4:	8b 12                	mov    (%edx),%edx
f0108ba6:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0108ba9:	f7 d1                	not    %ecx
f0108bab:	21 ca                	and    %ecx,%edx
f0108bad:	89 10                	mov    %edx,(%eax)
f0108baf:	eb 27                	jmp    f0108bd8 <pt_set_page_permissions+0xb0>

	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		cprintf("va=%x not exist and has no page table\n", virtual_address);
f0108bb1:	83 ec 08             	sub    $0x8,%esp
f0108bb4:	ff 75 0c             	pushl  0xc(%ebp)
f0108bb7:	68 68 77 12 f0       	push   $0xf0127768
f0108bbc:	e8 ab 83 ff ff       	call   f0100f6c <cprintf>
f0108bc1:	83 c4 10             	add    $0x10,%esp
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_set_page_permissions() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0108bc4:	83 ec 04             	sub    $0x4,%esp
f0108bc7:	68 90 77 12 f0       	push   $0xf0127790
f0108bcc:	6a 1c                	push   $0x1c
f0108bce:	68 04 78 12 f0       	push   $0xf0127804
f0108bd3:	e8 42 77 ff ff       	call   f010031a <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108bd8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108bdb:	83 ec 08             	sub    $0x8,%esp
f0108bde:	50                   	push   %eax
f0108bdf:	6a 00                	push   $0x0
f0108be1:	e8 f1 f1 ff ff       	call   f0107dd7 <tlb_invalidate>
f0108be6:	83 c4 10             	add    $0x10,%esp
}
f0108be9:	90                   	nop
f0108bea:	c9                   	leave  
f0108beb:	c3                   	ret    

f0108bec <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0108bec:	55                   	push   %ebp
f0108bed:	89 e5                	mov    %esp,%ebp
f0108bef:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108bf2:	83 ec 04             	sub    $0x4,%esp
f0108bf5:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108bf8:	50                   	push   %eax
f0108bf9:	ff 75 0c             	pushl  0xc(%ebp)
f0108bfc:	ff 75 08             	pushl  0x8(%ebp)
f0108bff:	e8 09 f8 ff ff       	call   f010840d <get_page_table>
f0108c04:	83 c4 10             	add    $0x10,%esp
f0108c07:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, return the permissions
	if (ptr_page_table != NULL)
f0108c0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c0d:	85 c0                	test   %eax,%eax
f0108c0f:	74 1d                	je     f0108c2e <pt_get_page_permissions+0x42>
	{
		//cprintf("va=%x perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
		return (ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
f0108c11:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c14:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108c17:	c1 ea 0c             	shr    $0xc,%edx
f0108c1a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108c20:	c1 e2 02             	shl    $0x2,%edx
f0108c23:	01 d0                	add    %edx,%eax
f0108c25:	8b 00                	mov    (%eax),%eax
f0108c27:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108c2c:	eb 05                	jmp    f0108c33 <pt_get_page_permissions+0x47>
	}
	//[3] Else, return -1
	else
	{
		//cprintf("va=%x not exist and has no page table\n", virtual_address);
		return -1;
f0108c2e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f0108c33:	c9                   	leave  
f0108c34:	c3                   	ret    

f0108c35 <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0108c35:	55                   	push   %ebp
f0108c36:	89 e5                	mov    %esp,%ebp
f0108c38:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108c3b:	83 ec 04             	sub    $0x4,%esp
f0108c3e:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108c41:	50                   	push   %eax
f0108c42:	ff 75 0c             	pushl  0xc(%ebp)
f0108c45:	ff 75 08             	pushl  0x8(%ebp)
f0108c48:	e8 c0 f7 ff ff       	call   f010840d <get_page_table>
f0108c4d:	83 c4 10             	add    $0x10,%esp
f0108c50:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f0108c53:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c56:	85 c0                	test   %eax,%eax
f0108c58:	74 46                	je     f0108ca0 <pt_clear_page_table_entry+0x6b>
	{
		cprintf("va=%x before clearing has perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)]);
f0108c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c5d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108c60:	c1 ea 0c             	shr    $0xc,%edx
f0108c63:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108c69:	c1 e2 02             	shl    $0x2,%edx
f0108c6c:	01 d0                	add    %edx,%eax
f0108c6e:	8b 00                	mov    (%eax),%eax
f0108c70:	83 ec 04             	sub    $0x4,%esp
f0108c73:	50                   	push   %eax
f0108c74:	ff 75 0c             	pushl  0xc(%ebp)
f0108c77:	68 20 78 12 f0       	push   $0xf0127820
f0108c7c:	e8 eb 82 ff ff       	call   f0100f6c <cprintf>
f0108c81:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0108c84:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c87:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108c8a:	c1 ea 0c             	shr    $0xc,%edx
f0108c8d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108c93:	c1 e2 02             	shl    $0x2,%edx
f0108c96:	01 d0                	add    %edx,%eax
f0108c98:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108c9e:	eb 14                	jmp    f0108cb4 <pt_clear_page_table_entry+0x7f>
	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_clear_page_table_entry() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0108ca0:	83 ec 04             	sub    $0x4,%esp
f0108ca3:	68 48 78 12 f0       	push   $0xf0127848
f0108ca8:	6a 47                	push   $0x47
f0108caa:	68 04 78 12 f0       	push   $0xf0127804
f0108caf:	e8 66 76 ff ff       	call   f010031a <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108cb4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108cb7:	83 ec 08             	sub    $0x8,%esp
f0108cba:	50                   	push   %eax
f0108cbb:	6a 00                	push   $0x0
f0108cbd:	e8 15 f1 ff ff       	call   f0107dd7 <tlb_invalidate>
f0108cc2:	83 c4 10             	add    $0x10,%esp
}
f0108cc5:	90                   	nop
f0108cc6:	c9                   	leave  
f0108cc7:	c3                   	ret    

f0108cc8 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0108cc8:	55                   	push   %ebp
f0108cc9:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0108ccb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108cce:	c1 e8 16             	shr    $0x16,%eax
f0108cd1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108cd8:	8b 45 08             	mov    0x8(%ebp),%eax
f0108cdb:	01 d0                	add    %edx,%eax
f0108cdd:	8b 00                	mov    (%eax),%eax
f0108cdf:	83 e0 20             	and    $0x20,%eax
f0108ce2:	85 c0                	test   %eax,%eax
f0108ce4:	0f 95 c0             	setne  %al
f0108ce7:	0f b6 c0             	movzbl %al,%eax
}
f0108cea:	5d                   	pop    %ebp
f0108ceb:	c3                   	ret    

f0108cec <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0108cec:	55                   	push   %ebp
f0108ced:	89 e5                	mov    %esp,%ebp
f0108cef:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0108cf2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108cf5:	c1 e8 16             	shr    $0x16,%eax
f0108cf8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108cff:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d02:	01 d0                	add    %edx,%eax
f0108d04:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108d07:	c1 ea 16             	shr    $0x16,%edx
f0108d0a:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0108d11:	8b 55 08             	mov    0x8(%ebp),%edx
f0108d14:	01 ca                	add    %ecx,%edx
f0108d16:	8b 12                	mov    (%edx),%edx
f0108d18:	83 e2 df             	and    $0xffffffdf,%edx
f0108d1b:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108d1d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108d20:	83 ec 08             	sub    $0x8,%esp
f0108d23:	50                   	push   %eax
f0108d24:	6a 00                	push   $0x0
f0108d26:	e8 ac f0 ff ff       	call   f0107dd7 <tlb_invalidate>
f0108d2b:	83 c4 10             	add    $0x10,%esp
}
f0108d2e:	90                   	nop
f0108d2f:	c9                   	leave  
f0108d30:	c3                   	ret    

f0108d31 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0108d31:	55                   	push   %ebp
f0108d32:	89 e5                	mov    %esp,%ebp
f0108d34:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0108d37:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108d3a:	c1 e8 16             	shr    $0x16,%eax
f0108d3d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108d44:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d47:	01 d0                	add    %edx,%eax
f0108d49:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0108d4f:	0f 20 d8             	mov    %cr3,%eax
f0108d52:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0108d55:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108d58:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0108d5b:	90                   	nop
f0108d5c:	c9                   	leave  
f0108d5d:	c3                   	ret    

f0108d5e <env_page_ws_get_size>:
		}
	}
}
#else
inline uint32 env_page_ws_get_size(struct Env *e)
{
f0108d5e:	55                   	push   %ebp
f0108d5f:	89 e5                	mov    %esp,%ebp
f0108d61:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108d64:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108d6b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0108d72:	eb 22                	jmp    f0108d96 <env_page_ws_get_size+0x38>
f0108d74:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108d77:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0108d7a:	89 d0                	mov    %edx,%eax
f0108d7c:	01 c0                	add    %eax,%eax
f0108d7e:	01 d0                	add    %edx,%eax
f0108d80:	c1 e0 03             	shl    $0x3,%eax
f0108d83:	01 c8                	add    %ecx,%eax
f0108d85:	05 8c 00 00 00       	add    $0x8c,%eax
f0108d8a:	8a 00                	mov    (%eax),%al
f0108d8c:	84 c0                	test   %al,%al
f0108d8e:	75 03                	jne    f0108d93 <env_page_ws_get_size+0x35>
f0108d90:	ff 45 f8             	incl   -0x8(%ebp)
f0108d93:	ff 45 fc             	incl   -0x4(%ebp)
f0108d96:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d99:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f0108d9f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108da2:	39 c2                	cmp    %eax,%edx
f0108da4:	77 ce                	ja     f0108d74 <env_page_ws_get_size+0x16>
	return counter;
f0108da6:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0108da9:	c9                   	leave  
f0108daa:	c3                   	ret    

f0108dab <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0108dab:	55                   	push   %ebp
f0108dac:	89 e5                	mov    %esp,%ebp
f0108dae:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0108db1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0108db8:	eb 4e                	jmp    f0108e08 <env_page_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0108dba:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108dbd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108dc0:	89 d0                	mov    %edx,%eax
f0108dc2:	01 c0                	add    %eax,%eax
f0108dc4:	01 d0                	add    %edx,%eax
f0108dc6:	c1 e0 03             	shl    $0x3,%eax
f0108dc9:	01 c8                	add    %ecx,%eax
f0108dcb:	05 88 00 00 00       	add    $0x88,%eax
f0108dd0:	8b 00                	mov    (%eax),%eax
f0108dd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108dd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108dd8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108ddd:	89 c2                	mov    %eax,%edx
f0108ddf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108de2:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108de5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108de8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108ded:	39 c2                	cmp    %eax,%edx
f0108def:	75 14                	jne    f0108e05 <env_page_ws_invalidate+0x5a>
		{
			env_page_ws_clear_entry(e, i);
f0108df1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108df4:	83 ec 08             	sub    $0x8,%esp
f0108df7:	50                   	push   %eax
f0108df8:	ff 75 08             	pushl  0x8(%ebp)
f0108dfb:	e8 ce 00 00 00       	call   f0108ece <env_page_ws_clear_entry>
f0108e00:	83 c4 10             	add    $0x10,%esp
			break;
f0108e03:	eb 13                	jmp    f0108e18 <env_page_ws_invalidate+0x6d>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0108e05:	ff 45 f4             	incl   -0xc(%ebp)
f0108e08:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e0b:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f0108e11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108e14:	39 c2                	cmp    %eax,%edx
f0108e16:	77 a2                	ja     f0108dba <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0108e18:	90                   	nop
f0108e19:	c9                   	leave  
f0108e1a:	c3                   	ret    

f0108e1b <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0108e1b:	55                   	push   %ebp
f0108e1c:	89 e5                	mov    %esp,%ebp
f0108e1e:	53                   	push   %ebx
f0108e1f:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0108e22:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e25:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0108e2b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108e2e:	77 19                	ja     f0108e49 <env_page_ws_set_entry+0x2e>
f0108e30:	68 c0 78 12 f0       	push   $0xf01278c0
f0108e35:	68 f6 78 12 f0       	push   $0xf01278f6
f0108e3a:	68 a7 00 00 00       	push   $0xa7
f0108e3f:	68 0c 79 12 f0       	push   $0xf012790c
f0108e44:	e8 d1 74 ff ff       	call   f010031a <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0108e49:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0108e50:	76 19                	jbe    f0108e6b <env_page_ws_set_entry+0x50>
f0108e52:	68 2c 79 12 f0       	push   $0xf012792c
f0108e57:	68 f6 78 12 f0       	push   $0xf01278f6
f0108e5c:	68 a8 00 00 00       	push   $0xa8
f0108e61:	68 0c 79 12 f0       	push   $0xf012790c
f0108e66:	e8 af 74 ff ff       	call   f010031a <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f0108e6b:	8b 45 10             	mov    0x10(%ebp),%eax
f0108e6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108e71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108e74:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108e79:	89 c1                	mov    %eax,%ecx
f0108e7b:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108e7e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108e81:	89 d0                	mov    %edx,%eax
f0108e83:	01 c0                	add    %eax,%eax
f0108e85:	01 d0                	add    %edx,%eax
f0108e87:	c1 e0 03             	shl    $0x3,%eax
f0108e8a:	01 d8                	add    %ebx,%eax
f0108e8c:	05 88 00 00 00       	add    $0x88,%eax
f0108e91:	89 08                	mov    %ecx,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0108e93:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108e96:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108e99:	89 d0                	mov    %edx,%eax
f0108e9b:	01 c0                	add    %eax,%eax
f0108e9d:	01 d0                	add    %edx,%eax
f0108e9f:	c1 e0 03             	shl    $0x3,%eax
f0108ea2:	01 c8                	add    %ecx,%eax
f0108ea4:	05 8c 00 00 00       	add    $0x8c,%eax
f0108ea9:	c6 00 00             	movb   $0x0,(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0108eac:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108eaf:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108eb2:	89 d0                	mov    %edx,%eax
f0108eb4:	01 c0                	add    %eax,%eax
f0108eb6:	01 d0                	add    %edx,%eax
f0108eb8:	c1 e0 03             	shl    $0x3,%eax
f0108ebb:	01 c8                	add    %ecx,%eax
f0108ebd:	05 90 00 00 00       	add    $0x90,%eax
f0108ec2:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0108ec8:	90                   	nop
}
f0108ec9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108ecc:	c9                   	leave  
f0108ecd:	c3                   	ret    

f0108ece <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0108ece:	55                   	push   %ebp
f0108ecf:	89 e5                	mov    %esp,%ebp
f0108ed1:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108ed4:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ed7:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0108edd:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108ee0:	77 19                	ja     f0108efb <env_page_ws_clear_entry+0x2d>
f0108ee2:	68 60 79 12 f0       	push   $0xf0127960
f0108ee7:	68 f6 78 12 f0       	push   $0xf01278f6
f0108eec:	68 b3 00 00 00       	push   $0xb3
f0108ef1:	68 0c 79 12 f0       	push   $0xf012790c
f0108ef6:	e8 1f 74 ff ff       	call   f010031a <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0108efb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108efe:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f01:	89 d0                	mov    %edx,%eax
f0108f03:	01 c0                	add    %eax,%eax
f0108f05:	01 d0                	add    %edx,%eax
f0108f07:	c1 e0 03             	shl    $0x3,%eax
f0108f0a:	01 c8                	add    %ecx,%eax
f0108f0c:	05 88 00 00 00       	add    $0x88,%eax
f0108f11:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f0108f17:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108f1a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f1d:	89 d0                	mov    %edx,%eax
f0108f1f:	01 c0                	add    %eax,%eax
f0108f21:	01 d0                	add    %edx,%eax
f0108f23:	c1 e0 03             	shl    $0x3,%eax
f0108f26:	01 c8                	add    %ecx,%eax
f0108f28:	05 8c 00 00 00       	add    $0x8c,%eax
f0108f2d:	c6 00 01             	movb   $0x1,(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0108f30:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108f33:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f36:	89 d0                	mov    %edx,%eax
f0108f38:	01 c0                	add    %eax,%eax
f0108f3a:	01 d0                	add    %edx,%eax
f0108f3c:	c1 e0 03             	shl    $0x3,%eax
f0108f3f:	01 c8                	add    %ecx,%eax
f0108f41:	05 90 00 00 00       	add    $0x90,%eax
f0108f46:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108f4c:	90                   	nop
f0108f4d:	c9                   	leave  
f0108f4e:	c3                   	ret    

f0108f4f <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108f4f:	55                   	push   %ebp
f0108f50:	89 e5                	mov    %esp,%ebp
f0108f52:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108f55:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f58:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0108f5e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108f61:	77 19                	ja     f0108f7c <env_page_ws_get_virtual_address+0x2d>
f0108f63:	68 60 79 12 f0       	push   $0xf0127960
f0108f68:	68 f6 78 12 f0       	push   $0xf01278f6
f0108f6d:	68 bb 00 00 00       	push   $0xbb
f0108f72:	68 0c 79 12 f0       	push   $0xf012790c
f0108f77:	e8 9e 73 ff ff       	call   f010031a <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f0108f7c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108f7f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f82:	89 d0                	mov    %edx,%eax
f0108f84:	01 c0                	add    %eax,%eax
f0108f86:	01 d0                	add    %edx,%eax
f0108f88:	c1 e0 03             	shl    $0x3,%eax
f0108f8b:	01 c8                	add    %ecx,%eax
f0108f8d:	05 88 00 00 00       	add    $0x88,%eax
f0108f92:	8b 00                	mov    (%eax),%eax
f0108f94:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108f9a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0108f9f:	c9                   	leave  
f0108fa0:	c3                   	ret    

f0108fa1 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108fa1:	55                   	push   %ebp
f0108fa2:	89 e5                	mov    %esp,%ebp
f0108fa4:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108fa7:	8b 45 08             	mov    0x8(%ebp),%eax
f0108faa:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0108fb0:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108fb3:	77 19                	ja     f0108fce <env_page_ws_get_time_stamp+0x2d>
f0108fb5:	68 60 79 12 f0       	push   $0xf0127960
f0108fba:	68 f6 78 12 f0       	push   $0xf01278f6
f0108fbf:	68 c1 00 00 00       	push   $0xc1
f0108fc4:	68 0c 79 12 f0       	push   $0xf012790c
f0108fc9:	e8 4c 73 ff ff       	call   f010031a <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0108fce:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108fd1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108fd4:	89 d0                	mov    %edx,%eax
f0108fd6:	01 c0                	add    %eax,%eax
f0108fd8:	01 d0                	add    %edx,%eax
f0108fda:	c1 e0 03             	shl    $0x3,%eax
f0108fdd:	01 c8                	add    %ecx,%eax
f0108fdf:	05 90 00 00 00       	add    $0x90,%eax
f0108fe4:	8b 00                	mov    (%eax),%eax
}
f0108fe6:	c9                   	leave  
f0108fe7:	c3                   	ret    

f0108fe8 <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108fe8:	55                   	push   %ebp
f0108fe9:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f0108feb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108fee:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108ff1:	89 d0                	mov    %edx,%eax
f0108ff3:	01 c0                	add    %eax,%eax
f0108ff5:	01 d0                	add    %edx,%eax
f0108ff7:	c1 e0 03             	shl    $0x3,%eax
f0108ffa:	01 c8                	add    %ecx,%eax
f0108ffc:	05 8c 00 00 00       	add    $0x8c,%eax
f0109001:	8a 00                	mov    (%eax),%al
f0109003:	0f b6 c0             	movzbl %al,%eax
}
f0109006:	5d                   	pop    %ebp
f0109007:	c3                   	ret    

f0109008 <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f0109008:	55                   	push   %ebp
f0109009:	89 e5                	mov    %esp,%ebp
f010900b:	53                   	push   %ebx
f010900c:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010900f:	83 ec 0c             	sub    $0xc,%esp
f0109012:	6a 02                	push   $0x2
f0109014:	e8 f7 56 00 00       	call   f010e710 <isPageReplacmentAlgorithmLRU>
f0109019:	83 c4 10             	add    $0x10,%esp
f010901c:	85 c0                	test   %eax,%eax
f010901e:	0f 84 fe 00 00 00    	je     f0109122 <env_page_ws_print+0x11a>
	{
		int i = 0;
f0109024:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f010902b:	83 ec 0c             	sub    $0xc,%esp
f010902e:	68 98 79 12 f0       	push   $0xf0127998
f0109033:	e8 34 7f ff ff       	call   f0100f6c <cprintf>
f0109038:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010903b:	8b 45 08             	mov    0x8(%ebp),%eax
f010903e:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f0109044:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0109047:	eb 2c                	jmp    f0109075 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0109049:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010904c:	8b 10                	mov    (%eax),%edx
f010904e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109051:	8d 48 01             	lea    0x1(%eax),%ecx
f0109054:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0109057:	83 ec 04             	sub    $0x4,%esp
f010905a:	52                   	push   %edx
f010905b:	50                   	push   %eax
f010905c:	68 b2 79 12 f0       	push   $0xf01279b2
f0109061:	e8 06 7f ff ff       	call   f0100f6c <cprintf>
f0109066:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f0109069:	8b 45 08             	mov    0x8(%ebp),%eax
f010906c:	8b 80 18 da 01 00    	mov    0x1da18(%eax),%eax
f0109072:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0109075:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109079:	74 08                	je     f0109083 <env_page_ws_print+0x7b>
f010907b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010907e:	8b 40 10             	mov    0x10(%eax),%eax
f0109081:	eb 05                	jmp    f0109088 <env_page_ws_print+0x80>
f0109083:	b8 00 00 00 00       	mov    $0x0,%eax
f0109088:	8b 55 08             	mov    0x8(%ebp),%edx
f010908b:	89 82 18 da 01 00    	mov    %eax,0x1da18(%edx)
f0109091:	8b 45 08             	mov    0x8(%ebp),%eax
f0109094:	8b 80 18 da 01 00    	mov    0x1da18(%eax),%eax
f010909a:	85 c0                	test   %eax,%eax
f010909c:	75 ab                	jne    f0109049 <env_page_ws_print+0x41>
f010909e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01090a2:	75 a5                	jne    f0109049 <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f01090a4:	83 ec 0c             	sub    $0xc,%esp
f01090a7:	68 ba 79 12 f0       	push   $0xf01279ba
f01090ac:	e8 bb 7e ff ff       	call   f0100f6c <cprintf>
f01090b1:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01090b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01090b7:	8b 80 20 da 01 00    	mov    0x1da20(%eax),%eax
f01090bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01090c0:	eb 2c                	jmp    f01090ee <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01090c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01090c5:	8b 10                	mov    (%eax),%edx
f01090c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01090ca:	8d 48 01             	lea    0x1(%eax),%ecx
f01090cd:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01090d0:	83 ec 04             	sub    $0x4,%esp
f01090d3:	52                   	push   %edx
f01090d4:	50                   	push   %eax
f01090d5:	68 b2 79 12 f0       	push   $0xf01279b2
f01090da:	e8 8d 7e ff ff       	call   f0100f6c <cprintf>
f01090df:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01090e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01090e5:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f01090eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01090ee:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01090f2:	74 08                	je     f01090fc <env_page_ws_print+0xf4>
f01090f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01090f7:	8b 40 10             	mov    0x10(%eax),%eax
f01090fa:	eb 05                	jmp    f0109101 <env_page_ws_print+0xf9>
f01090fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0109101:	8b 55 08             	mov    0x8(%ebp),%edx
f0109104:	89 82 28 da 01 00    	mov    %eax,0x1da28(%edx)
f010910a:	8b 45 08             	mov    0x8(%ebp),%eax
f010910d:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f0109113:	85 c0                	test   %eax,%eax
f0109115:	75 ab                	jne    f01090c2 <env_page_ws_print+0xba>
f0109117:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010911b:	75 a5                	jne    f01090c2 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f010911d:	e9 9f 01 00 00       	jmp    f01092c1 <env_page_ws_print+0x2b9>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f0109122:	83 ec 0c             	sub    $0xc,%esp
f0109125:	68 d5 79 12 f0       	push   $0xf01279d5
f010912a:	e8 3d 7e ff ff       	call   f0100f6c <cprintf>
f010912f:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0109132:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0109139:	e9 71 01 00 00       	jmp    f01092af <env_page_ws_print+0x2a7>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f010913e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109141:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109144:	89 d0                	mov    %edx,%eax
f0109146:	01 c0                	add    %eax,%eax
f0109148:	01 d0                	add    %edx,%eax
f010914a:	c1 e0 03             	shl    $0x3,%eax
f010914d:	01 c8                	add    %ecx,%eax
f010914f:	05 8c 00 00 00       	add    $0x8c,%eax
f0109154:	8a 00                	mov    (%eax),%al
f0109156:	84 c0                	test   %al,%al
f0109158:	74 43                	je     f010919d <env_page_ws_print+0x195>
			{
				cprintf("EMPTY LOCATION");
f010915a:	83 ec 0c             	sub    $0xc,%esp
f010915d:	68 df 79 12 f0       	push   $0xf01279df
f0109162:	e8 05 7e ff ff       	call   f0100f6c <cprintf>
f0109167:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f010916a:	8b 45 08             	mov    0x8(%ebp),%eax
f010916d:	8b 80 58 d5 01 00    	mov    0x1d558(%eax),%eax
f0109173:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0109176:	75 10                	jne    f0109188 <env_page_ws_print+0x180>
				{
					cprintf("		<--");
f0109178:	83 ec 0c             	sub    $0xc,%esp
f010917b:	68 ee 79 12 f0       	push   $0xf01279ee
f0109180:	e8 e7 7d ff ff       	call   f0100f6c <cprintf>
f0109185:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f0109188:	83 ec 0c             	sub    $0xc,%esp
f010918b:	68 f4 79 12 f0       	push   $0xf01279f4
f0109190:	e8 d7 7d ff ff       	call   f0100f6c <cprintf>
f0109195:	83 c4 10             	add    $0x10,%esp
				continue;
f0109198:	e9 0f 01 00 00       	jmp    f01092ac <env_page_ws_print+0x2a4>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010919d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01091a0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01091a3:	89 d0                	mov    %edx,%eax
f01091a5:	01 c0                	add    %eax,%eax
f01091a7:	01 d0                	add    %edx,%eax
f01091a9:	c1 e0 03             	shl    $0x3,%eax
f01091ac:	01 c8                	add    %ecx,%eax
f01091ae:	05 88 00 00 00       	add    $0x88,%eax
f01091b3:	8b 00                	mov    (%eax),%eax
f01091b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f01091b8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01091bb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01091be:	89 d0                	mov    %edx,%eax
f01091c0:	01 c0                	add    %eax,%eax
f01091c2:	01 d0                	add    %edx,%eax
f01091c4:	c1 e0 03             	shl    $0x3,%eax
f01091c7:	01 c8                	add    %ecx,%eax
f01091c9:	05 90 00 00 00       	add    $0x90,%eax
f01091ce:	8b 00                	mov    (%eax),%eax
f01091d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f01091d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01091d6:	8b 40 64             	mov    0x64(%eax),%eax
f01091d9:	83 ec 08             	sub    $0x8,%esp
f01091dc:	ff 75 e8             	pushl  -0x18(%ebp)
f01091df:	50                   	push   %eax
f01091e0:	e8 07 fa ff ff       	call   f0108bec <pt_get_page_permissions>
f01091e5:	83 c4 10             	add    $0x10,%esp
f01091e8:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f01091eb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01091ee:	83 e0 40             	and    $0x40,%eax
f01091f1:	85 c0                	test   %eax,%eax
f01091f3:	0f 95 c0             	setne  %al
f01091f6:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f01091f9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01091fc:	83 e0 20             	and    $0x20,%eax
f01091ff:	85 c0                	test   %eax,%eax
f0109201:	0f 95 c0             	setne  %al
f0109204:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f0109207:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010920a:	25 00 02 00 00       	and    $0x200,%eax
f010920f:	85 c0                	test   %eax,%eax
f0109211:	0f 95 c0             	setne  %al
f0109214:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f0109217:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010921a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010921d:	89 d0                	mov    %edx,%eax
f010921f:	01 c0                	add    %eax,%eax
f0109221:	01 d0                	add    %edx,%eax
f0109223:	c1 e0 03             	shl    $0x3,%eax
f0109226:	01 c8                	add    %ecx,%eax
f0109228:	05 88 00 00 00       	add    $0x88,%eax
f010922d:	8b 00                	mov    (%eax),%eax
f010922f:	83 ec 04             	sub    $0x4,%esp
f0109232:	50                   	push   %eax
f0109233:	ff 75 ec             	pushl  -0x14(%ebp)
f0109236:	68 f6 79 12 f0       	push   $0xf01279f6
f010923b:	e8 2c 7d ff ff       	call   f0100f6c <cprintf>
f0109240:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f0109243:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109246:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109249:	89 d0                	mov    %edx,%eax
f010924b:	01 c0                	add    %eax,%eax
f010924d:	01 d0                	add    %edx,%eax
f010924f:	c1 e0 03             	shl    $0x3,%eax
f0109252:	01 c8                	add    %ecx,%eax
f0109254:	05 94 00 00 00       	add    $0x94,%eax
f0109259:	8b 18                	mov    (%eax),%ebx
f010925b:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f010925f:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f0109263:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f0109267:	83 ec 08             	sub    $0x8,%esp
f010926a:	53                   	push   %ebx
f010926b:	ff 75 e4             	pushl  -0x1c(%ebp)
f010926e:	51                   	push   %ecx
f010926f:	52                   	push   %edx
f0109270:	50                   	push   %eax
f0109271:	68 08 7a 12 f0       	push   $0xf0127a08
f0109276:	e8 f1 7c ff ff       	call   f0100f6c <cprintf>
f010927b:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f010927e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109281:	8b 80 58 d5 01 00    	mov    0x1d558(%eax),%eax
f0109287:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010928a:	75 10                	jne    f010929c <env_page_ws_print+0x294>
			{
				cprintf(" <--");
f010928c:	83 ec 0c             	sub    $0xc,%esp
f010928f:	68 4f 7a 12 f0       	push   $0xf0127a4f
f0109294:	e8 d3 7c ff ff       	call   f0100f6c <cprintf>
f0109299:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f010929c:	83 ec 0c             	sub    $0xc,%esp
f010929f:	68 f4 79 12 f0       	push   $0xf01279f4
f01092a4:	e8 c3 7c ff ff       	call   f0100f6c <cprintf>
f01092a9:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f01092ac:	ff 45 ec             	incl   -0x14(%ebp)
f01092af:	8b 45 08             	mov    0x8(%ebp),%eax
f01092b2:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01092b8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01092bb:	0f 87 7d fe ff ff    	ja     f010913e <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01092c1:	90                   	nop
f01092c2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01092c5:	c9                   	leave  
f01092c6:	c3                   	ret    

f01092c7 <env_table_ws_print>:
#endif
// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f01092c7:	55                   	push   %ebp
f01092c8:	89 e5                	mov    %esp,%ebp
f01092ca:	53                   	push   %ebx
f01092cb:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f01092ce:	83 ec 0c             	sub    $0xc,%esp
f01092d1:	68 54 7a 12 f0       	push   $0xf0127a54
f01092d6:	e8 91 7c ff ff       	call   f0100f6c <cprintf>
f01092db:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f01092de:	83 ec 0c             	sub    $0xc,%esp
f01092e1:	68 89 7a 12 f0       	push   $0xf0127a89
f01092e6:	e8 81 7c ff ff       	call   f0100f6c <cprintf>
f01092eb:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f01092ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01092f5:	e9 16 01 00 00       	jmp    f0109410 <env_table_ws_print+0x149>
	{
		if (e->__ptr_tws[i].empty)
f01092fa:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01092fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109300:	89 d0                	mov    %edx,%eax
f0109302:	01 c0                	add    %eax,%eax
f0109304:	01 d0                	add    %edx,%eax
f0109306:	c1 e0 03             	shl    $0x3,%eax
f0109309:	01 c8                	add    %ecx,%eax
f010930b:	05 60 d5 01 00       	add    $0x1d560,%eax
f0109310:	8a 00                	mov    (%eax),%al
f0109312:	84 c0                	test   %al,%al
f0109314:	74 43                	je     f0109359 <env_table_ws_print+0x92>
		{
			cprintf("EMPTY LOCATION");
f0109316:	83 ec 0c             	sub    $0xc,%esp
f0109319:	68 df 79 12 f0       	push   $0xf01279df
f010931e:	e8 49 7c ff ff       	call   f0100f6c <cprintf>
f0109323:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f0109326:	8b 45 08             	mov    0x8(%ebp),%eax
f0109329:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f010932f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0109332:	75 10                	jne    f0109344 <env_table_ws_print+0x7d>
			{
				cprintf("		<--");
f0109334:	83 ec 0c             	sub    $0xc,%esp
f0109337:	68 ee 79 12 f0       	push   $0xf01279ee
f010933c:	e8 2b 7c ff ff       	call   f0100f6c <cprintf>
f0109341:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0109344:	83 ec 0c             	sub    $0xc,%esp
f0109347:	68 f4 79 12 f0       	push   $0xf01279f4
f010934c:	e8 1b 7c ff ff       	call   f0100f6c <cprintf>
f0109351:	83 c4 10             	add    $0x10,%esp
			continue;
f0109354:	e9 b4 00 00 00       	jmp    f010940d <env_table_ws_print+0x146>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f0109359:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010935c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010935f:	89 d0                	mov    %edx,%eax
f0109361:	01 c0                	add    %eax,%eax
f0109363:	01 d0                	add    %edx,%eax
f0109365:	c1 e0 03             	shl    $0x3,%eax
f0109368:	01 c8                	add    %ecx,%eax
f010936a:	05 5c d5 01 00       	add    $0x1d55c,%eax
f010936f:	8b 00                	mov    (%eax),%eax
f0109371:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f0109374:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109377:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010937a:	89 d0                	mov    %edx,%eax
f010937c:	01 c0                	add    %eax,%eax
f010937e:	01 d0                	add    %edx,%eax
f0109380:	c1 e0 03             	shl    $0x3,%eax
f0109383:	01 c8                	add    %ecx,%eax
f0109385:	05 5c d5 01 00       	add    $0x1d55c,%eax
f010938a:	8b 00                	mov    (%eax),%eax
f010938c:	83 ec 04             	sub    $0x4,%esp
f010938f:	50                   	push   %eax
f0109390:	ff 75 f4             	pushl  -0xc(%ebp)
f0109393:	68 94 7a 12 f0       	push   $0xf0127a94
f0109398:	e8 cf 7b ff ff       	call   f0100f6c <cprintf>
f010939d:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f01093a0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01093a3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01093a6:	89 d0                	mov    %edx,%eax
f01093a8:	01 c0                	add    %eax,%eax
f01093aa:	01 d0                	add    %edx,%eax
f01093ac:	c1 e0 03             	shl    $0x3,%eax
f01093af:	01 c8                	add    %ecx,%eax
f01093b1:	05 64 d5 01 00       	add    $0x1d564,%eax
f01093b6:	8b 18                	mov    (%eax),%ebx
f01093b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01093bb:	8b 40 64             	mov    0x64(%eax),%eax
f01093be:	83 ec 08             	sub    $0x8,%esp
f01093c1:	ff 75 f0             	pushl  -0x10(%ebp)
f01093c4:	50                   	push   %eax
f01093c5:	e8 fe f8 ff ff       	call   f0108cc8 <pd_is_table_used>
f01093ca:	83 c4 10             	add    $0x10,%esp
f01093cd:	83 ec 04             	sub    $0x4,%esp
f01093d0:	53                   	push   %ebx
f01093d1:	50                   	push   %eax
f01093d2:	68 ac 7a 12 f0       	push   $0xf0127aac
f01093d7:	e8 90 7b ff ff       	call   f0100f6c <cprintf>
f01093dc:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f01093df:	8b 45 08             	mov    0x8(%ebp),%eax
f01093e2:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f01093e8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01093eb:	75 10                	jne    f01093fd <env_table_ws_print+0x136>
		{
			cprintf(" <--");
f01093ed:	83 ec 0c             	sub    $0xc,%esp
f01093f0:	68 4f 7a 12 f0       	push   $0xf0127a4f
f01093f5:	e8 72 7b ff ff       	call   f0100f6c <cprintf>
f01093fa:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f01093fd:	83 ec 0c             	sub    $0xc,%esp
f0109400:	68 f4 79 12 f0       	push   $0xf01279f4
f0109405:	e8 62 7b ff ff       	call   f0100f6c <cprintf>
f010940a:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f010940d:	ff 45 f4             	incl   -0xc(%ebp)
f0109410:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0109414:	0f 86 e0 fe ff ff    	jbe    f01092fa <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f010941a:	90                   	nop
f010941b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010941e:	c9                   	leave  
f010941f:	c3                   	ret    

f0109420 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0109420:	55                   	push   %ebp
f0109421:	89 e5                	mov    %esp,%ebp
f0109423:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0109426:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f010942d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f0109434:	eb 22                	jmp    f0109458 <env_table_ws_get_size+0x38>
f0109436:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109439:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010943c:	89 d0                	mov    %edx,%eax
f010943e:	01 c0                	add    %eax,%eax
f0109440:	01 d0                	add    %edx,%eax
f0109442:	c1 e0 03             	shl    $0x3,%eax
f0109445:	01 c8                	add    %ecx,%eax
f0109447:	05 60 d5 01 00       	add    $0x1d560,%eax
f010944c:	8a 00                	mov    (%eax),%al
f010944e:	84 c0                	test   %al,%al
f0109450:	75 03                	jne    f0109455 <env_table_ws_get_size+0x35>
f0109452:	ff 45 f8             	incl   -0x8(%ebp)
f0109455:	ff 45 fc             	incl   -0x4(%ebp)
f0109458:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f010945c:	7e d8                	jle    f0109436 <env_table_ws_get_size+0x16>
	return counter;
f010945e:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0109461:	c9                   	leave  
f0109462:	c3                   	ret    

f0109463 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0109463:	55                   	push   %ebp
f0109464:	89 e5                	mov    %esp,%ebp
f0109466:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0109469:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f0109470:	eb 4e                	jmp    f01094c0 <env_table_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f0109472:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109475:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109478:	89 d0                	mov    %edx,%eax
f010947a:	01 c0                	add    %eax,%eax
f010947c:	01 d0                	add    %edx,%eax
f010947e:	c1 e0 03             	shl    $0x3,%eax
f0109481:	01 c8                	add    %ecx,%eax
f0109483:	05 5c d5 01 00       	add    $0x1d55c,%eax
f0109488:	8b 00                	mov    (%eax),%eax
f010948a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010948d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109490:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0109495:	89 c2                	mov    %eax,%edx
f0109497:	8b 45 0c             	mov    0xc(%ebp),%eax
f010949a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010949d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01094a0:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01094a5:	39 c2                	cmp    %eax,%edx
f01094a7:	75 14                	jne    f01094bd <env_table_ws_invalidate+0x5a>
		{
			env_table_ws_clear_entry(e, i);
f01094a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01094ac:	83 ec 08             	sub    $0x8,%esp
f01094af:	50                   	push   %eax
f01094b0:	ff 75 08             	pushl  0x8(%ebp)
f01094b3:	e8 bc 00 00 00       	call   f0109574 <env_table_ws_clear_entry>
f01094b8:	83 c4 10             	add    $0x10,%esp
			break;
f01094bb:	eb 09                	jmp    f01094c6 <env_table_ws_invalidate+0x63>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f01094bd:	ff 45 f4             	incl   -0xc(%ebp)
f01094c0:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01094c4:	7e ac                	jle    f0109472 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f01094c6:	90                   	nop
f01094c7:	c9                   	leave  
f01094c8:	c3                   	ret    

f01094c9 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01094c9:	55                   	push   %ebp
f01094ca:	89 e5                	mov    %esp,%ebp
f01094cc:	53                   	push   %ebx
f01094cd:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01094d0:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01094d4:	76 19                	jbe    f01094ef <env_table_ws_set_entry+0x26>
f01094d6:	68 d0 7a 12 f0       	push   $0xf0127ad0
f01094db:	68 f6 78 12 f0       	push   $0xf01278f6
f01094e0:	68 37 01 00 00       	push   $0x137
f01094e5:	68 0c 79 12 f0       	push   $0xf012790c
f01094ea:	e8 2b 6e ff ff       	call   f010031a <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01094ef:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01094f6:	76 19                	jbe    f0109511 <env_table_ws_set_entry+0x48>
f01094f8:	68 2c 79 12 f0       	push   $0xf012792c
f01094fd:	68 f6 78 12 f0       	push   $0xf01278f6
f0109502:	68 38 01 00 00       	push   $0x138
f0109507:	68 0c 79 12 f0       	push   $0xf012790c
f010950c:	e8 09 6e ff ff       	call   f010031a <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0109511:	8b 45 10             	mov    0x10(%ebp),%eax
f0109514:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109517:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010951a:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010951f:	89 c1                	mov    %eax,%ecx
f0109521:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109524:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109527:	89 d0                	mov    %edx,%eax
f0109529:	01 c0                	add    %eax,%eax
f010952b:	01 d0                	add    %edx,%eax
f010952d:	c1 e0 03             	shl    $0x3,%eax
f0109530:	01 d8                	add    %ebx,%eax
f0109532:	05 5c d5 01 00       	add    $0x1d55c,%eax
f0109537:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0109539:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010953c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010953f:	89 d0                	mov    %edx,%eax
f0109541:	01 c0                	add    %eax,%eax
f0109543:	01 d0                	add    %edx,%eax
f0109545:	c1 e0 03             	shl    $0x3,%eax
f0109548:	01 c8                	add    %ecx,%eax
f010954a:	05 60 d5 01 00       	add    $0x1d560,%eax
f010954f:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f0109552:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109555:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109558:	89 d0                	mov    %edx,%eax
f010955a:	01 c0                	add    %eax,%eax
f010955c:	01 d0                	add    %edx,%eax
f010955e:	c1 e0 03             	shl    $0x3,%eax
f0109561:	01 c8                	add    %ecx,%eax
f0109563:	05 64 d5 01 00       	add    $0x1d564,%eax
f0109568:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f010956e:	90                   	nop
}
f010956f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109572:	c9                   	leave  
f0109573:	c3                   	ret    

f0109574 <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0109574:	55                   	push   %ebp
f0109575:	89 e5                	mov    %esp,%ebp
f0109577:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010957a:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f010957e:	76 19                	jbe    f0109599 <env_table_ws_clear_entry+0x25>
f0109580:	68 d0 7a 12 f0       	push   $0xf0127ad0
f0109585:	68 f6 78 12 f0       	push   $0xf01278f6
f010958a:	68 43 01 00 00       	push   $0x143
f010958f:	68 0c 79 12 f0       	push   $0xf012790c
f0109594:	e8 81 6d ff ff       	call   f010031a <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0109599:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010959c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010959f:	89 d0                	mov    %edx,%eax
f01095a1:	01 c0                	add    %eax,%eax
f01095a3:	01 d0                	add    %edx,%eax
f01095a5:	c1 e0 03             	shl    $0x3,%eax
f01095a8:	01 c8                	add    %ecx,%eax
f01095aa:	05 5c d5 01 00       	add    $0x1d55c,%eax
f01095af:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f01095b5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01095b8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01095bb:	89 d0                	mov    %edx,%eax
f01095bd:	01 c0                	add    %eax,%eax
f01095bf:	01 d0                	add    %edx,%eax
f01095c1:	c1 e0 03             	shl    $0x3,%eax
f01095c4:	01 c8                	add    %ecx,%eax
f01095c6:	05 60 d5 01 00       	add    $0x1d560,%eax
f01095cb:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f01095ce:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01095d1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01095d4:	89 d0                	mov    %edx,%eax
f01095d6:	01 c0                	add    %eax,%eax
f01095d8:	01 d0                	add    %edx,%eax
f01095da:	c1 e0 03             	shl    $0x3,%eax
f01095dd:	01 c8                	add    %ecx,%eax
f01095df:	05 64 d5 01 00       	add    $0x1d564,%eax
f01095e4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f01095ea:	90                   	nop
f01095eb:	c9                   	leave  
f01095ec:	c3                   	ret    

f01095ed <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01095ed:	55                   	push   %ebp
f01095ee:	89 e5                	mov    %esp,%ebp
f01095f0:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01095f3:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01095f7:	76 19                	jbe    f0109612 <env_table_ws_get_virtual_address+0x25>
f01095f9:	68 d0 7a 12 f0       	push   $0xf0127ad0
f01095fe:	68 f6 78 12 f0       	push   $0xf01278f6
f0109603:	68 4b 01 00 00       	push   $0x14b
f0109608:	68 0c 79 12 f0       	push   $0xf012790c
f010960d:	e8 08 6d ff ff       	call   f010031a <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0109612:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109615:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109618:	89 d0                	mov    %edx,%eax
f010961a:	01 c0                	add    %eax,%eax
f010961c:	01 d0                	add    %edx,%eax
f010961e:	c1 e0 03             	shl    $0x3,%eax
f0109621:	01 c8                	add    %ecx,%eax
f0109623:	05 5c d5 01 00       	add    $0x1d55c,%eax
f0109628:	8b 00                	mov    (%eax),%eax
f010962a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010962d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109630:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0109635:	c9                   	leave  
f0109636:	c3                   	ret    

f0109637 <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0109637:	55                   	push   %ebp
f0109638:	89 e5                	mov    %esp,%ebp
f010963a:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010963d:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0109641:	76 19                	jbe    f010965c <env_table_ws_get_time_stamp+0x25>
f0109643:	68 d0 7a 12 f0       	push   $0xf0127ad0
f0109648:	68 f6 78 12 f0       	push   $0xf01278f6
f010964d:	68 52 01 00 00       	push   $0x152
f0109652:	68 0c 79 12 f0       	push   $0xf012790c
f0109657:	e8 be 6c ff ff       	call   f010031a <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f010965c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010965f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109662:	89 d0                	mov    %edx,%eax
f0109664:	01 c0                	add    %eax,%eax
f0109666:	01 d0                	add    %edx,%eax
f0109668:	c1 e0 03             	shl    $0x3,%eax
f010966b:	01 c8                	add    %ecx,%eax
f010966d:	05 64 d5 01 00       	add    $0x1d564,%eax
f0109672:	8b 00                	mov    (%eax),%eax
}
f0109674:	c9                   	leave  
f0109675:	c3                   	ret    

f0109676 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0109676:	55                   	push   %ebp
f0109677:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f0109679:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010967c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010967f:	89 d0                	mov    %edx,%eax
f0109681:	01 c0                	add    %eax,%eax
f0109683:	01 d0                	add    %edx,%eax
f0109685:	c1 e0 03             	shl    $0x3,%eax
f0109688:	01 c8                	add    %ecx,%eax
f010968a:	05 60 d5 01 00       	add    $0x1d560,%eax
f010968f:	8a 00                	mov    (%eax),%al
f0109691:	0f b6 c0             	movzbl %al,%eax
}
f0109694:	5d                   	pop    %ebp
f0109695:	c3                   	ret    

f0109696 <double_WS_Size>:
///=================================================================================================
///=================================================================================================
///=================================================================================================

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f0109696:	55                   	push   %ebp
f0109697:	89 e5                	mov    %esp,%ebp
f0109699:	83 ec 08             	sub    $0x8,%esp
	panic("not handled yet");
f010969c:	83 ec 04             	sub    $0x4,%esp
f010969f:	68 01 7b 12 f0       	push   $0xf0127b01
f01096a4:	68 62 01 00 00       	push   $0x162
f01096a9:	68 0c 79 12 f0       	push   $0xf012790c
f01096ae:	e8 67 6c ff ff       	call   f010031a <_panic>

f01096b3 <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f01096b3:	55                   	push   %ebp
f01096b4:	89 e5                	mov    %esp,%ebp
f01096b6:	83 ec 08             	sub    $0x8,%esp
	panic("not handled yet");
f01096b9:	83 ec 04             	sub    $0x4,%esp
f01096bc:	68 01 7b 12 f0       	push   $0xf0127b01
f01096c1:	68 67 01 00 00       	push   $0x167
f01096c6:	68 0c 79 12 f0       	push   $0xf012790c
f01096cb:	e8 4a 6c ff ff       	call   f010031a <_panic>

f01096d0 <cut_paste_pages>:
//	If the page table at any destination page in the range is not exist, it should create it
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, cut-paste the number of pages and return 0
//	ALL 12 permission bits of the destination should be TYPICAL to those of the source
//	The given addresses may be not aligned on 4 KB
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f01096d0:	55                   	push   %ebp
f01096d1:	89 e5                	mov    %esp,%ebp
f01096d3:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	panic("cut_paste_pages() is not implemented yet...!!");
f01096d6:	83 ec 04             	sub    $0x4,%esp
f01096d9:	68 14 7b 12 f0       	push   $0xf0127b14
f01096de:	6a 21                	push   $0x21
f01096e0:	68 42 7b 12 f0       	push   $0xf0127b42
f01096e5:	e8 30 6c ff ff       	call   f010031a <_panic>

f01096ea <copy_paste_chunk>:
//	Otherwise, just copy!
//		1. WRITABLE permission
//		2. USER/SUPERVISOR permission must be SAME as the one of the source
//	The given range(s) may be not aligned on 4 KB
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f01096ea:	55                   	push   %ebp
f01096eb:	89 e5                	mov    %esp,%ebp
f01096ed:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the //panic and write your code
	panic("copy_paste_chunk() is not implemented yet...!!");
f01096f0:	83 ec 04             	sub    $0x4,%esp
f01096f3:	68 60 7b 12 f0       	push   $0xf0127b60
f01096f8:	6a 34                	push   $0x34
f01096fa:	68 42 7b 12 f0       	push   $0xf0127b42
f01096ff:	e8 16 6c ff ff       	call   f010031a <_panic>

f0109704 <share_chunk>:
//	It should set the permissions of the second range by the given perms
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, share the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	The given range(s) may be not aligned on 4 KB
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0109704:	55                   	push   %ebp
f0109705:	89 e5                	mov    %esp,%ebp
f0109707:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the //panic and write your code
	panic("share_chunk() is not implemented yet...!!");
f010970a:	83 ec 04             	sub    $0x4,%esp
f010970d:	68 90 7b 12 f0       	push   $0xf0127b90
f0109712:	6a 44                	push   $0x44
f0109714:	68 42 7b 12 f0       	push   $0xf0127b42
f0109719:	e8 fc 6b ff ff       	call   f010031a <_panic>

f010971e <allocate_chunk>:
//This function should allocate the given virtual range [<va>, <va> + <size>) in the given address space  <page_directory> with the given permissions <perms>.
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, allocate the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	Allocation should be aligned on page boundary. However, the given range may be not aligned.
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f010971e:	55                   	push   %ebp
f010971f:	89 e5                	mov    %esp,%ebp
f0109721:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the //panic and write your code
	panic("allocate_chunk() is not implemented yet...!!");
f0109724:	83 ec 04             	sub    $0x4,%esp
f0109727:	68 bc 7b 12 f0       	push   $0xf0127bbc
f010972c:	6a 52                	push   $0x52
f010972e:	68 42 7b 12 f0       	push   $0xf0127b42
f0109733:	e8 e2 6b ff ff       	call   f010031a <_panic>

f0109738 <calculate_allocated_space>:

//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0109738:	55                   	push   %ebp
f0109739:	89 e5                	mov    %esp,%ebp
f010973b:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	panic("calculate_allocated_space() is not implemented yet...!!");
f010973e:	83 ec 04             	sub    $0x4,%esp
f0109741:	68 ec 7b 12 f0       	push   $0xf0127bec
f0109746:	6a 5c                	push   $0x5c
f0109748:	68 42 7b 12 f0       	push   $0xf0127b42
f010974d:	e8 c8 6b ff ff       	call   f010031a <_panic>

f0109752 <calculate_required_frames>:
//=====================================
//This function should calculate the required number of pages for allocating and mapping the given range [start va, start va + size) (either for the pages themselves or for the page tables required for mapping)
//	Pages and/or page tables that are already exist in the range SHOULD NOT be counted.
//	The given range(s) may be not aligned on 4 KB
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0109752:	55                   	push   %ebp
f0109753:	89 e5                	mov    %esp,%ebp
f0109755:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	panic("calculate_required_frames() is not implemented yet...!!");
f0109758:	83 ec 04             	sub    $0x4,%esp
f010975b:	68 24 7c 12 f0       	push   $0xf0127c24
f0109760:	6a 69                	push   $0x69
f0109762:	68 42 7b 12 f0       	push   $0xf0127b42
f0109767:	e8 ae 6b ff ff       	call   f010031a <_panic>

f010976c <sys_sbrk>:

//=====================================
/* DYNAMIC ALLOCATOR SYSTEM CALLS */
//=====================================
void* sys_sbrk(int numOfPages)
{
f010976c:	55                   	push   %ebp
f010976d:	89 e5                	mov    %esp,%ebp
f010976f:	83 ec 18             	sub    $0x18,%esp
	 * 		or the break exceed the limit of the dynamic allocator. If sys_sbrk fails, the net effect should
	 * 		be that sys_sbrk returns (void*) -1 and that the segment break and the process heap are unaffected.
	 * 		You might have to undo any operations you have done so far in this case.
	 */

	struct Env* env = get_cpu_proc(); //the current running Environment to adjust its break limit
f0109772:	e8 f9 0f 00 00       	call   f010a770 <get_cpu_proc>
f0109777:	89 45 f4             	mov    %eax,-0xc(%ebp)

	/*====================================*/
	/*Remove this line before start coding*/
	return (void*)-1 ;
f010977a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	/*====================================*/

	//[PROJECT'24.MS2] Implement this function

}
f010977f:	c9                   	leave  
f0109780:	c3                   	ret    

f0109781 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0109781:	55                   	push   %ebp
f0109782:	89 e5                	mov    %esp,%ebp
f0109784:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f0109787:	e8 6a 72 01 00       	call   f01209f6 <inctst>
	return;
f010978c:	90                   	nop
	/*====================================*/

	//[PROJECT'24.MS2] [USER HEAP - KERNEL SIDE] allocate_user_mem
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
}
f010978d:	c9                   	leave  
f010978e:	c3                   	ret    

f010978f <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f010978f:	55                   	push   %ebp
f0109790:	89 e5                	mov    %esp,%ebp
f0109792:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f0109795:	e8 5c 72 01 00       	call   f01209f6 <inctst>
	return;
f010979a:	90                   	nop
	/*====================================*/

	//[PROJECT'24.MS2] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
}
f010979b:	c9                   	leave  
f010979c:	c3                   	ret    

f010979d <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f010979d:	55                   	push   %ebp
f010979e:	89 e5                	mov    %esp,%ebp
f01097a0:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f01097a3:	83 ec 04             	sub    $0x4,%esp
f01097a6:	68 5c 7c 12 f0       	push   $0xf0127c5c
f01097ab:	68 bc 00 00 00       	push   $0xbc
f01097b0:	68 42 7b 12 f0       	push   $0xf0127b42
f01097b5:	e8 60 6b ff ff       	call   f010031a <_panic>

f01097ba <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f01097ba:	55                   	push   %ebp
f01097bb:	89 e5                	mov    %esp,%ebp
f01097bd:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f01097c0:	83 ec 04             	sub    $0x4,%esp
f01097c3:	68 9c 7c 12 f0       	push   $0xf0127c9c
f01097c8:	68 c6 00 00 00       	push   $0xc6
f01097cd:	68 42 7b 12 f0       	push   $0xf0127b42
f01097d2:	e8 43 6b ff ff       	call   f010031a <_panic>

f01097d7 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01097d7:	55                   	push   %ebp
f01097d8:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01097da:	8b 45 08             	mov    0x8(%ebp),%eax
f01097dd:	8b 15 c0 28 5a f0    	mov    0xf05a28c0,%edx
f01097e3:	29 d0                	sub    %edx,%eax
f01097e5:	c1 f8 03             	sar    $0x3,%eax
f01097e8:	89 c2                	mov    %eax,%edx
f01097ea:	89 d0                	mov    %edx,%eax
f01097ec:	c1 e0 02             	shl    $0x2,%eax
f01097ef:	01 d0                	add    %edx,%eax
f01097f1:	c1 e0 02             	shl    $0x2,%eax
f01097f4:	01 d0                	add    %edx,%eax
f01097f6:	c1 e0 02             	shl    $0x2,%eax
f01097f9:	01 d0                	add    %edx,%eax
f01097fb:	89 c1                	mov    %eax,%ecx
f01097fd:	c1 e1 08             	shl    $0x8,%ecx
f0109800:	01 c8                	add    %ecx,%eax
f0109802:	89 c1                	mov    %eax,%ecx
f0109804:	c1 e1 10             	shl    $0x10,%ecx
f0109807:	01 c8                	add    %ecx,%eax
f0109809:	01 c0                	add    %eax,%eax
f010980b:	01 d0                	add    %edx,%eax
}
f010980d:	5d                   	pop    %ebp
f010980e:	c3                   	ret    

f010980f <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010980f:	55                   	push   %ebp
f0109810:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0109812:	ff 75 08             	pushl  0x8(%ebp)
f0109815:	e8 bd ff ff ff       	call   f01097d7 <to_frame_number>
f010981a:	83 c4 04             	add    $0x4,%esp
f010981d:	c1 e0 0c             	shl    $0xc,%eax
}
f0109820:	c9                   	leave  
f0109821:	c3                   	ret    

f0109822 <env_init>:
// and insert them into the env_free_list.
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//
void env_init(void)
{
f0109822:	55                   	push   %ebp
f0109823:	89 e5                	mov    %esp,%ebp
f0109825:	56                   	push   %esi
f0109826:	53                   	push   %ebx
f0109827:	83 ec 10             	sub    $0x10,%esp
	int iEnv = NENV-1;
f010982a:	c7 45 f4 07 00 00 00 	movl   $0x7,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109831:	e9 28 02 00 00       	jmp    f0109a5e <env_init+0x23c>
	{
		envs[iEnv].env_status = ENV_FREE;
f0109836:	8b 0d b0 f3 59 f0    	mov    0xf059f3b0,%ecx
f010983c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010983f:	89 d0                	mov    %edx,%eax
f0109841:	c1 e0 06             	shl    $0x6,%eax
f0109844:	29 d0                	sub    %edx,%eax
f0109846:	c1 e0 02             	shl    $0x2,%eax
f0109849:	01 d0                	add    %edx,%eax
f010984b:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f0109852:	01 d8                	add    %ebx,%eax
f0109854:	c1 e0 03             	shl    $0x3,%eax
f0109857:	01 d0                	add    %edx,%eax
f0109859:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109860:	29 c2                	sub    %eax,%edx
f0109862:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f0109869:	89 c2                	mov    %eax,%edx
f010986b:	89 d0                	mov    %edx,%eax
f010986d:	01 c8                	add    %ecx,%eax
f010986f:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
		envs[iEnv].env_id = 0;
f0109876:	8b 0d b0 f3 59 f0    	mov    0xf059f3b0,%ecx
f010987c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010987f:	89 d0                	mov    %edx,%eax
f0109881:	c1 e0 06             	shl    $0x6,%eax
f0109884:	29 d0                	sub    %edx,%eax
f0109886:	c1 e0 02             	shl    $0x2,%eax
f0109889:	01 d0                	add    %edx,%eax
f010988b:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f0109892:	01 d8                	add    %ebx,%eax
f0109894:	c1 e0 03             	shl    $0x3,%eax
f0109897:	01 d0                	add    %edx,%eax
f0109899:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01098a0:	29 c2                	sub    %eax,%edx
f01098a2:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f01098a9:	89 c2                	mov    %eax,%edx
f01098ab:	89 d0                	mov    %edx,%eax
f01098ad:	01 c8                	add    %ecx,%eax
f01098af:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f01098b6:	8b 0d b0 f3 59 f0    	mov    0xf059f3b0,%ecx
f01098bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01098bf:	89 d0                	mov    %edx,%eax
f01098c1:	c1 e0 06             	shl    $0x6,%eax
f01098c4:	29 d0                	sub    %edx,%eax
f01098c6:	c1 e0 02             	shl    $0x2,%eax
f01098c9:	01 d0                	add    %edx,%eax
f01098cb:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f01098d2:	01 d8                	add    %ebx,%eax
f01098d4:	c1 e0 03             	shl    $0x3,%eax
f01098d7:	01 d0                	add    %edx,%eax
f01098d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01098e0:	29 c2                	sub    %eax,%edx
f01098e2:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f01098e9:	89 c2                	mov    %eax,%edx
f01098eb:	89 d0                	mov    %edx,%eax
f01098ed:	01 c8                	add    %ecx,%eax
f01098ef:	85 c0                	test   %eax,%eax
f01098f1:	75 14                	jne    f0109907 <env_init+0xe5>
f01098f3:	83 ec 04             	sub    $0x4,%esp
f01098f6:	68 c8 7c 12 f0       	push   $0xf0127cc8
f01098fb:	6a 64                	push   $0x64
f01098fd:	68 eb 7c 12 f0       	push   $0xf0127ceb
f0109902:	e8 13 6a ff ff       	call   f010031a <_panic>
f0109907:	8b 0d b0 f3 59 f0    	mov    0xf059f3b0,%ecx
f010990d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109910:	89 d0                	mov    %edx,%eax
f0109912:	c1 e0 06             	shl    $0x6,%eax
f0109915:	29 d0                	sub    %edx,%eax
f0109917:	c1 e0 02             	shl    $0x2,%eax
f010991a:	01 d0                	add    %edx,%eax
f010991c:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f0109923:	01 d8                	add    %ebx,%eax
f0109925:	c1 e0 03             	shl    $0x3,%eax
f0109928:	01 d0                	add    %edx,%eax
f010992a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109931:	29 c2                	sub    %eax,%edx
f0109933:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f010993a:	89 c2                	mov    %eax,%edx
f010993c:	89 d0                	mov    %edx,%eax
f010993e:	01 c8                	add    %ecx,%eax
f0109940:	8b 15 b4 f3 59 f0    	mov    0xf059f3b4,%edx
f0109946:	89 50 08             	mov    %edx,0x8(%eax)
f0109949:	8b 40 08             	mov    0x8(%eax),%eax
f010994c:	85 c0                	test   %eax,%eax
f010994e:	74 44                	je     f0109994 <env_init+0x172>
f0109950:	8b 0d b4 f3 59 f0    	mov    0xf059f3b4,%ecx
f0109956:	8b 1d b0 f3 59 f0    	mov    0xf059f3b0,%ebx
f010995c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010995f:	89 d0                	mov    %edx,%eax
f0109961:	c1 e0 06             	shl    $0x6,%eax
f0109964:	29 d0                	sub    %edx,%eax
f0109966:	c1 e0 02             	shl    $0x2,%eax
f0109969:	01 d0                	add    %edx,%eax
f010996b:	8d 34 85 00 00 00 00 	lea    0x0(,%eax,4),%esi
f0109972:	01 f0                	add    %esi,%eax
f0109974:	c1 e0 03             	shl    $0x3,%eax
f0109977:	01 d0                	add    %edx,%eax
f0109979:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109980:	29 c2                	sub    %eax,%edx
f0109982:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f0109989:	89 c2                	mov    %eax,%edx
f010998b:	89 d0                	mov    %edx,%eax
f010998d:	01 d8                	add    %ebx,%eax
f010998f:	89 41 0c             	mov    %eax,0xc(%ecx)
f0109992:	eb 3e                	jmp    f01099d2 <env_init+0x1b0>
f0109994:	8b 0d b0 f3 59 f0    	mov    0xf059f3b0,%ecx
f010999a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010999d:	89 d0                	mov    %edx,%eax
f010999f:	c1 e0 06             	shl    $0x6,%eax
f01099a2:	29 d0                	sub    %edx,%eax
f01099a4:	c1 e0 02             	shl    $0x2,%eax
f01099a7:	01 d0                	add    %edx,%eax
f01099a9:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f01099b0:	01 d8                	add    %ebx,%eax
f01099b2:	c1 e0 03             	shl    $0x3,%eax
f01099b5:	01 d0                	add    %edx,%eax
f01099b7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01099be:	29 c2                	sub    %eax,%edx
f01099c0:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f01099c7:	89 c2                	mov    %eax,%edx
f01099c9:	89 d0                	mov    %edx,%eax
f01099cb:	01 c8                	add    %ecx,%eax
f01099cd:	a3 b8 f3 59 f0       	mov    %eax,0xf059f3b8
f01099d2:	8b 0d b0 f3 59 f0    	mov    0xf059f3b0,%ecx
f01099d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01099db:	89 d0                	mov    %edx,%eax
f01099dd:	c1 e0 06             	shl    $0x6,%eax
f01099e0:	29 d0                	sub    %edx,%eax
f01099e2:	c1 e0 02             	shl    $0x2,%eax
f01099e5:	01 d0                	add    %edx,%eax
f01099e7:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f01099ee:	01 d8                	add    %ebx,%eax
f01099f0:	c1 e0 03             	shl    $0x3,%eax
f01099f3:	01 d0                	add    %edx,%eax
f01099f5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01099fc:	29 c2                	sub    %eax,%edx
f01099fe:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f0109a05:	89 c2                	mov    %eax,%edx
f0109a07:	89 d0                	mov    %edx,%eax
f0109a09:	01 c8                	add    %ecx,%eax
f0109a0b:	a3 b4 f3 59 f0       	mov    %eax,0xf059f3b4
f0109a10:	8b 0d b0 f3 59 f0    	mov    0xf059f3b0,%ecx
f0109a16:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a19:	89 d0                	mov    %edx,%eax
f0109a1b:	c1 e0 06             	shl    $0x6,%eax
f0109a1e:	29 d0                	sub    %edx,%eax
f0109a20:	c1 e0 02             	shl    $0x2,%eax
f0109a23:	01 d0                	add    %edx,%eax
f0109a25:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f0109a2c:	01 d8                	add    %ebx,%eax
f0109a2e:	c1 e0 03             	shl    $0x3,%eax
f0109a31:	01 d0                	add    %edx,%eax
f0109a33:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109a3a:	29 c2                	sub    %eax,%edx
f0109a3c:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f0109a43:	89 c2                	mov    %eax,%edx
f0109a45:	89 d0                	mov    %edx,%eax
f0109a47:	01 c8                	add    %ecx,%eax
f0109a49:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0109a50:	a1 c0 f3 59 f0       	mov    0xf059f3c0,%eax
f0109a55:	40                   	inc    %eax
f0109a56:	a3 c0 f3 59 f0       	mov    %eax,0xf059f3c0
// returns envs[0].
//
void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f0109a5b:	ff 4d f4             	decl   -0xc(%ebp)
f0109a5e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109a62:	0f 89 ce fd ff ff    	jns    f0109836 <env_init+0x14>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f0109a68:	90                   	nop
f0109a69:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0109a6c:	5b                   	pop    %ebx
f0109a6d:	5e                   	pop    %esi
f0109a6e:	5d                   	pop    %ebp
f0109a6f:	c3                   	ret    

f0109a70 <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0109a70:	55                   	push   %ebp
f0109a71:	89 e5                	mov    %esp,%ebp
f0109a73:	57                   	push   %edi
f0109a74:	56                   	push   %esi
f0109a75:	53                   	push   %ebx
f0109a76:	81 ec fc 00 00 00    	sub    $0xfc,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0109a7c:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0109a83:	83 ec 0c             	sub    $0xc,%esp
f0109a86:	ff 75 08             	pushl  0x8(%ebp)
f0109a89:	e8 c8 24 00 00       	call   f010bf56 <get_user_program_info>
f0109a8e:	83 c4 10             	add    $0x10,%esp
f0109a91:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0)
f0109a94:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0109a98:	75 0a                	jne    f0109aa4 <env_create+0x34>
	{
		return NULL;
f0109a9a:	b8 00 00 00 00       	mov    $0x0,%eax
f0109a9f:	e9 2a 0c 00 00       	jmp    f010a6ce <env_create+0xc5e>
	}
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0109aa4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109aa7:	8b 40 08             	mov    0x8(%eax),%eax
f0109aaa:	89 45 b8             	mov    %eax,-0x48(%ebp)

	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0109aad:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%ebp)
f0109ab4:	00 00 00 
	if(allocate_environment(&e) < 0)
f0109ab7:	83 ec 0c             	sub    $0xc,%esp
f0109aba:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0109ac0:	50                   	push   %eax
f0109ac1:	e8 23 11 00 00       	call   f010abe9 <allocate_environment>
f0109ac6:	83 c4 10             	add    $0x10,%esp
f0109ac9:	85 c0                	test   %eax,%eax
f0109acb:	79 0a                	jns    f0109ad7 <env_create+0x67>
	{
		return NULL;
f0109acd:	b8 00 00 00 00       	mov    $0x0,%eax
f0109ad2:	e9 f7 0b 00 00       	jmp    f010a6ce <env_create+0xc5e>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0109ad7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109ada:	8b 00                	mov    (%eax),%eax
f0109adc:	83 ec 0c             	sub    $0xc,%esp
f0109adf:	50                   	push   %eax
f0109ae0:	e8 59 8a 01 00       	call   f012253e <strlen>
f0109ae5:	83 c4 10             	add    $0x10,%esp
f0109ae8:	83 f8 3f             	cmp    $0x3f,%eax
f0109aeb:	7f 1d                	jg     f0109b0a <env_create+0x9a>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0109aed:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109af0:	8b 00                	mov    (%eax),%eax
f0109af2:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109af8:	83 c2 20             	add    $0x20,%edx
f0109afb:	83 ec 08             	sub    $0x8,%esp
f0109afe:	50                   	push   %eax
f0109aff:	52                   	push   %edx
f0109b00:	e8 88 8a 01 00       	call   f012258d <strcpy>
f0109b05:	83 c4 10             	add    $0x10,%esp
f0109b08:	eb 1d                	jmp    f0109b27 <env_create+0xb7>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0109b0a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109b0d:	8b 00                	mov    (%eax),%eax
f0109b0f:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109b15:	83 c2 20             	add    $0x20,%edx
f0109b18:	83 ec 04             	sub    $0x4,%esp
f0109b1b:	6a 3f                	push   $0x3f
f0109b1d:	50                   	push   %eax
f0109b1e:	52                   	push   %edx
f0109b1f:	e8 97 8a 01 00       	call   f01225bb <strncpy>
f0109b24:	83 c4 10             	add    $0x10,%esp
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
	}
#else
	{
		int r;
		struct FrameInfo *p = NULL;
f0109b27:	c7 85 3c ff ff ff 00 	movl   $0x0,-0xc4(%ebp)
f0109b2e:	00 00 00 

		allocate_frame(&p) ;
f0109b31:	83 ec 0c             	sub    $0xc,%esp
f0109b34:	8d 85 3c ff ff ff    	lea    -0xc4(%ebp),%eax
f0109b3a:	50                   	push   %eax
f0109b3b:	e8 90 e6 ff ff       	call   f01081d0 <allocate_frame>
f0109b40:	83 c4 10             	add    $0x10,%esp
		p->references = 1;
f0109b43:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0109b49:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

		ptr_user_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0109b4f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0109b55:	83 ec 0c             	sub    $0xc,%esp
f0109b58:	50                   	push   %eax
f0109b59:	e8 b1 fc ff ff       	call   f010980f <to_physical_address>
f0109b5e:	83 c4 10             	add    $0x10,%esp
f0109b61:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0109b64:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0109b67:	c1 e8 0c             	shr    $0xc,%eax
f0109b6a:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0109b6d:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f0109b72:	39 45 ac             	cmp    %eax,-0x54(%ebp)
f0109b75:	72 17                	jb     f0109b8e <env_create+0x11e>
f0109b77:	ff 75 b0             	pushl  -0x50(%ebp)
f0109b7a:	68 08 7d 12 f0       	push   $0xf0127d08
f0109b7f:	68 9c 00 00 00       	push   $0x9c
f0109b84:	68 eb 7c 12 f0       	push   $0xf0127ceb
f0109b89:	e8 8c 67 ff ff       	call   f010031a <_panic>
f0109b8e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0109b91:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0109b96:	89 45 a8             	mov    %eax,-0x58(%ebp)
		phys_user_page_directory = to_physical_address(p);
f0109b99:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0109b9f:	83 ec 0c             	sub    $0xc,%esp
f0109ba2:	50                   	push   %eax
f0109ba3:	e8 67 fc ff ff       	call   f010980f <to_physical_address>
f0109ba8:	83 c4 10             	add    $0x10,%esp
f0109bab:	89 45 a4             	mov    %eax,-0x5c(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0109bae:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109bb4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109bb7:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109bbd:	83 ec 0c             	sub    $0xc,%esp
f0109bc0:	6a 02                	push   $0x2
f0109bc2:	e8 49 4b 00 00       	call   f010e710 <isPageReplacmentAlgorithmLRU>
f0109bc7:	83 c4 10             	add    $0x10,%esp
f0109bca:	85 c0                	test   %eax,%eax
f0109bcc:	74 21                	je     f0109bef <env_create+0x17f>
	{
		e->SecondListSize = LRU_second_list_size;
f0109bce:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109bd4:	8b 55 10             	mov    0x10(%ebp),%edx
f0109bd7:	89 90 34 da 01 00    	mov    %edx,0x1da34(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0109bdd:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109be3:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109be6:	2b 55 10             	sub    0x10(%ebp),%edx
f0109be9:	89 90 30 da 01 00    	mov    %edx,0x1da30(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0109bef:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0109bf3:	75 12                	jne    f0109c07 <env_create+0x197>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0109bf5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109bfb:	c7 80 3c da 01 00 0a 	movl   $0xa,0x1da3c(%eax)
f0109c02:	00 00 00 
f0109c05:	eb 0f                	jmp    f0109c16 <env_create+0x1a6>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0109c07:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109c0d:	8b 55 14             	mov    0x14(%ebp),%edx
f0109c10:	89 90 3c da 01 00    	mov    %edx,0x1da3c(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0109c16:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109c1c:	83 ec 04             	sub    $0x4,%esp
f0109c1f:	ff 75 a4             	pushl  -0x5c(%ebp)
f0109c22:	ff 75 a8             	pushl  -0x58(%ebp)
f0109c25:	50                   	push   %eax
f0109c26:	e8 76 18 00 00       	call   f010b4a1 <initialize_environment>
f0109c2b:	83 c4 10             	add    $0x10,%esp
	//	3- uint32 size_in_memory: actual size required by this segment in memory
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[5] 2024: Disable the interrupt before switching the directories
	pushcli();
f0109c2e:	e8 8d d5 ff ff       	call   f01071c0 <pushcli>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0109c33:	0f 20 d8             	mov    %cr3,%eax
f0109c36:	89 45 98             	mov    %eax,-0x68(%ebp)
	return val;
f0109c39:	8b 45 98             	mov    -0x68(%ebp),%eax
	{
		//[6] switch to user page directory
		uint32 cur_phys_pgdir = rcr3() ;
f0109c3c:	89 45 9c             	mov    %eax,-0x64(%ebp)
		lcr3(e->env_cr3) ;
f0109c3f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109c45:	8b 40 68             	mov    0x68(%eax),%eax
f0109c48:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0109c4e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109c54:	0f 22 d8             	mov    %eax,%cr3

		//[7] load each program segment into user virtual space
		struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0109c57:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int segment_counter=0;
f0109c5e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0109c65:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109c6b:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0109c71:	48                   	dec    %eax
f0109c72:	89 45 dc             	mov    %eax,-0x24(%ebp)
		uint32 lastTableNumber=0xffffffff;
f0109c75:	c7 85 38 ff ff ff ff 	movl   $0xffffffff,-0xc8(%ebp)
f0109c7c:	ff ff ff 

		PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109c7f:	8d 85 f8 fe ff ff    	lea    -0x108(%ebp),%eax
f0109c85:	83 ec 08             	sub    $0x8,%esp
f0109c88:	ff 75 b8             	pushl  -0x48(%ebp)
f0109c8b:	50                   	push   %eax
f0109c8c:	e8 d7 1f 00 00       	call   f010bc68 <PROGRAM_SEGMENT_FIRST>
f0109c91:	83 c4 0c             	add    $0xc,%esp
f0109c94:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0109c9a:	8d 95 f8 fe ff ff    	lea    -0x108(%ebp),%edx
f0109ca0:	b9 05 00 00 00       	mov    $0x5,%ecx
f0109ca5:	89 c7                	mov    %eax,%edi
f0109ca7:	89 d6                	mov    %edx,%esi
f0109ca9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0109cab:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0109cb1:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109cb4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109cb7:	8b 40 10             	mov    0x10(%eax),%eax
f0109cba:	83 f8 ff             	cmp    $0xffffffff,%eax
f0109cbd:	75 07                	jne    f0109cc6 <env_create+0x256>
f0109cbf:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0109cc6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109cc9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109ccc:	e9 24 03 00 00       	jmp    f0109ff5 <env_create+0x585>
		{
			segment_counter++;
f0109cd1:	ff 45 e0             	incl   -0x20(%ebp)
			LOG_STRING("===============================================================================");
			LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
					seg->size_in_memory, seg->virtual_address));
			LOG_STRING("===============================================================================");

			uint32 allocated_pages=0;
f0109cd4:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0109cdb:	00 00 00 
			program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0109cde:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109ce4:	83 ec 0c             	sub    $0xc,%esp
f0109ce7:	8d 95 38 ff ff ff    	lea    -0xc8(%ebp),%edx
f0109ced:	52                   	push   %edx
f0109cee:	ff 75 dc             	pushl  -0x24(%ebp)
f0109cf1:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0109cf7:	52                   	push   %edx
f0109cf8:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109cfb:	50                   	push   %eax
f0109cfc:	e8 a6 0f 00 00       	call   f010aca7 <program_segment_alloc_map_copy_workingset>
f0109d01:	83 c4 20             	add    $0x20,%esp

			remaining_ws_pages -= allocated_pages;
f0109d04:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0109d0a:	29 45 dc             	sub    %eax,-0x24(%ebp)
			LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
			LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


			/// 7.2) temporary initialize 1st page in memory then writing it on page file
			uint32 dataSrc_va = (uint32) seg->ptr_start;
f0109d0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109d10:	8b 00                	mov    (%eax),%eax
f0109d12:	89 45 94             	mov    %eax,-0x6c(%ebp)
			uint32 seg_va = (uint32) seg->virtual_address ;
f0109d15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109d18:	8b 40 0c             	mov    0xc(%eax),%eax
f0109d1b:	89 45 90             	mov    %eax,-0x70(%ebp)

			uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0109d1e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109d21:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0109d24:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0109d27:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109d2c:	89 45 88             	mov    %eax,-0x78(%ebp)
			uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0109d2f:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0109d36:	8b 55 90             	mov    -0x70(%ebp),%edx
f0109d39:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0109d3c:	01 d0                	add    %edx,%eax
f0109d3e:	48                   	dec    %eax
f0109d3f:	89 45 80             	mov    %eax,-0x80(%ebp)
f0109d42:	8b 45 80             	mov    -0x80(%ebp),%eax
f0109d45:	ba 00 00 00 00       	mov    $0x0,%edx
f0109d4a:	f7 75 84             	divl   -0x7c(%ebp)
f0109d4d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0109d50:	29 d0                	sub    %edx,%eax
f0109d52:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
			uint32 offset_first_page = seg_va  - start_first_page ;
f0109d58:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109d5b:	2b 45 88             	sub    -0x78(%ebp),%eax
f0109d5e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

			memset(ptr_temp_page , 0, PAGE_SIZE);
f0109d64:	a1 04 2b 5a f0       	mov    0xf05a2b04,%eax
f0109d69:	83 ec 04             	sub    $0x4,%esp
f0109d6c:	68 00 10 00 00       	push   $0x1000
f0109d71:	6a 00                	push   $0x0
f0109d73:	50                   	push   %eax
f0109d74:	e8 b3 89 01 00       	call   f012272c <memset>
f0109d79:	83 c4 10             	add    $0x10,%esp
			uint8 *src_ptr =  (uint8*) dataSrc_va;
f0109d7c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0109d7f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0109d82:	8b 15 04 2b 5a f0    	mov    0xf05a2b04,%edx
f0109d88:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0109d8e:	01 d0                	add    %edx,%eax
f0109d90:	89 45 d0             	mov    %eax,-0x30(%ebp)
			int i;
			for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109d93:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109d96:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109d99:	eb 13                	jmp    f0109dae <env_create+0x33e>
			{
				*dst_ptr = *src_ptr ;
f0109d9b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109d9e:	8a 10                	mov    (%eax),%dl
f0109da0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109da3:	88 10                	mov    %dl,(%eax)

			memset(ptr_temp_page , 0, PAGE_SIZE);
			uint8 *src_ptr =  (uint8*) dataSrc_va;
			uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
			int i;
			for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109da5:	ff 45 cc             	incl   -0x34(%ebp)
f0109da8:	ff 45 d4             	incl   -0x2c(%ebp)
f0109dab:	ff 45 d0             	incl   -0x30(%ebp)
f0109dae:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109db1:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f0109db7:	72 e2                	jb     f0109d9b <env_create+0x32b>
			{
				*dst_ptr = *src_ptr ;
			}

			if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109db9:	8b 15 04 2b 5a f0    	mov    0xf05a2b04,%edx
f0109dbf:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109dc5:	83 ec 04             	sub    $0x4,%esp
f0109dc8:	52                   	push   %edx
f0109dc9:	ff 75 88             	pushl  -0x78(%ebp)
f0109dcc:	50                   	push   %eax
f0109dcd:	e8 76 a3 ff ff       	call   f0104148 <pf_add_env_page>
f0109dd2:	83 c4 10             	add    $0x10,%esp
f0109dd5:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109dd8:	75 17                	jne    f0109df1 <env_create+0x381>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109dda:	83 ec 04             	sub    $0x4,%esp
f0109ddd:	68 38 7d 12 f0       	push   $0xf0127d38
f0109de2:	68 f2 00 00 00       	push   $0xf2
f0109de7:	68 eb 7c 12 f0       	push   $0xf0127ceb
f0109dec:	e8 29 65 ff ff       	call   f010031a <_panic>
			//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


			/// 7.3) Start writing the segment ,from 2nd page until before last page, to page file ...

			uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0109df1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109df4:	8b 50 04             	mov    0x4(%eax),%edx
f0109df7:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109dfa:	01 d0                	add    %edx,%eax
f0109dfc:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0109e02:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0109e08:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109e0d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
			uint32 end_last_page = seg_va  + seg->size_in_file;
f0109e13:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109e16:	8b 50 04             	mov    0x4(%eax),%edx
f0109e19:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109e1c:	01 d0                	add    %edx,%eax
f0109e1e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

			for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109e24:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0109e2a:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109e2d:	eb 43                	jmp    f0109e72 <env_create+0x402>
			{
				if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0109e2f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0109e32:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109e38:	83 ec 04             	sub    $0x4,%esp
f0109e3b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0109e3e:	52                   	push   %edx
f0109e3f:	50                   	push   %eax
f0109e40:	e8 03 a3 ff ff       	call   f0104148 <pf_add_env_page>
f0109e45:	83 c4 10             	add    $0x10,%esp
f0109e48:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109e4b:	75 17                	jne    f0109e64 <env_create+0x3f4>
					panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109e4d:	83 ec 04             	sub    $0x4,%esp
f0109e50:	68 38 7d 12 f0       	push   $0xf0127d38
f0109e55:	68 ff 00 00 00       	push   $0xff
f0109e5a:	68 eb 7c 12 f0       	push   $0xf0127ceb
f0109e5f:	e8 b6 64 ff ff       	call   f010031a <_panic>
			/// 7.3) Start writing the segment ,from 2nd page until before last page, to page file ...

			uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
			uint32 end_last_page = seg_va  + seg->size_in_file;

			for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109e64:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0109e6b:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0109e72:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109e75:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f0109e7b:	72 b2                	jb     f0109e2f <env_create+0x3bf>
			}
			//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

			/// 7.4) temporary initialize last page in memory then writing it on page file

			dst_ptr =  (uint8*) ptr_temp_page;
f0109e7d:	a1 04 2b 5a f0       	mov    0xf05a2b04,%eax
f0109e82:	89 45 d0             	mov    %eax,-0x30(%ebp)
			memset(dst_ptr, 0, PAGE_SIZE);
f0109e85:	83 ec 04             	sub    $0x4,%esp
f0109e88:	68 00 10 00 00       	push   $0x1000
f0109e8d:	6a 00                	push   $0x0
f0109e8f:	ff 75 d0             	pushl  -0x30(%ebp)
f0109e92:	e8 95 88 01 00       	call   f012272c <memset>
f0109e97:	83 c4 10             	add    $0x10,%esp

			for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109e9a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0109ea0:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109ea3:	eb 13                	jmp    f0109eb8 <env_create+0x448>
			{
				*dst_ptr = *src_ptr;
f0109ea5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109ea8:	8a 10                	mov    (%eax),%dl
f0109eaa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109ead:	88 10                	mov    %dl,(%eax)
			/// 7.4) temporary initialize last page in memory then writing it on page file

			dst_ptr =  (uint8*) ptr_temp_page;
			memset(dst_ptr, 0, PAGE_SIZE);

			for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109eaf:	ff 45 cc             	incl   -0x34(%ebp)
f0109eb2:	ff 45 d4             	incl   -0x2c(%ebp)
f0109eb5:	ff 45 d0             	incl   -0x30(%ebp)
f0109eb8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109ebb:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f0109ec1:	72 e2                	jb     f0109ea5 <env_create+0x435>
			{
				*dst_ptr = *src_ptr;
			}
			if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109ec3:	8b 15 04 2b 5a f0    	mov    0xf05a2b04,%edx
f0109ec9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109ecf:	83 ec 04             	sub    $0x4,%esp
f0109ed2:	52                   	push   %edx
f0109ed3:	ff b5 70 ff ff ff    	pushl  -0x90(%ebp)
f0109ed9:	50                   	push   %eax
f0109eda:	e8 69 a2 ff ff       	call   f0104148 <pf_add_env_page>
f0109edf:	83 c4 10             	add    $0x10,%esp
f0109ee2:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109ee5:	75 17                	jne    f0109efe <env_create+0x48e>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109ee7:	83 ec 04             	sub    $0x4,%esp
f0109eea:	68 38 7d 12 f0       	push   $0xf0127d38
f0109eef:	68 0e 01 00 00       	push   $0x10e
f0109ef4:	68 eb 7c 12 f0       	push   $0xf0127ceb
f0109ef9:	e8 1c 64 ff ff       	call   f010031a <_panic>

			//LOG_STRING(" -------------------- PAGE FILE: last page is written");

			/// 7.5) writing the remaining seg->size_in_memory pages to disk

			uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0109efe:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0109f05:	10 00 00 
f0109f08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109f0b:	8b 50 04             	mov    0x4(%eax),%edx
f0109f0e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109f11:	01 c2                	add    %eax,%edx
f0109f13:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0109f19:	01 d0                	add    %edx,%eax
f0109f1b:	48                   	dec    %eax
f0109f1c:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0109f22:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109f28:	ba 00 00 00 00       	mov    $0x0,%edx
f0109f2d:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0109f33:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109f39:	29 d0                	sub    %edx,%eax
f0109f3b:	89 45 c8             	mov    %eax,-0x38(%ebp)
			uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0109f3e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109f41:	8b 50 08             	mov    0x8(%eax),%edx
f0109f44:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109f47:	01 d0                	add    %edx,%eax
f0109f49:	2b 45 c8             	sub    -0x38(%ebp),%eax
f0109f4c:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

			for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109f52:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0109f59:	eb 41                	jmp    f0109f9c <env_create+0x52c>
			{
				if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f0109f5b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109f61:	83 ec 04             	sub    $0x4,%esp
f0109f64:	6a 01                	push   $0x1
f0109f66:	ff 75 c8             	pushl  -0x38(%ebp)
f0109f69:	50                   	push   %eax
f0109f6a:	e8 ab a0 ff ff       	call   f010401a <pf_add_empty_env_page>
f0109f6f:	83 c4 10             	add    $0x10,%esp
f0109f72:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109f75:	75 17                	jne    f0109f8e <env_create+0x51e>
					panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109f77:	83 ec 04             	sub    $0x4,%esp
f0109f7a:	68 38 7d 12 f0       	push   $0xf0127d38
f0109f7f:	68 1b 01 00 00       	push   $0x11b
f0109f84:	68 eb 7c 12 f0       	push   $0xf0127ceb
f0109f89:	e8 8c 63 ff ff       	call   f010031a <_panic>
			/// 7.5) writing the remaining seg->size_in_memory pages to disk

			uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
			uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

			for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109f8e:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0109f95:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0109f9c:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0109fa3:	10 00 00 
f0109fa6:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f0109fac:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0109fb2:	01 d0                	add    %edx,%eax
f0109fb4:	48                   	dec    %eax
f0109fb5:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0109fbb:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0109fc1:	ba 00 00 00 00       	mov    $0x0,%edx
f0109fc6:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0109fcc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0109fd2:	29 d0                	sub    %edx,%eax
f0109fd4:	89 c2                	mov    %eax,%edx
f0109fd6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109fd9:	39 c2                	cmp    %eax,%edx
f0109fdb:	0f 87 7a ff ff ff    	ja     f0109f5b <env_create+0x4eb>
		struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
		int segment_counter=0;
		uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
		uint32 lastTableNumber=0xffffffff;

		PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109fe1:	83 ec 08             	sub    $0x8,%esp
f0109fe4:	ff 75 b8             	pushl  -0x48(%ebp)
f0109fe7:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109fea:	e8 6e 1b 00 00       	call   f010bb5d <PROGRAM_SEGMENT_NEXT>
f0109fef:	83 c4 10             	add    $0x10,%esp
f0109ff2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109ff5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0109ff9:	0f 85 d2 fc ff ff    	jne    f0109cd1 <env_create+0x261>
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
		}
#else
		int i=0;
f0109fff:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		for(;i<(e->page_WS_max_size); i++)
f010a006:	e9 a0 00 00 00       	jmp    f010a0ab <env_create+0x63b>
		{
			if(e->ptr_pageWorkingSet[i].empty == 0)
f010a00b:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a011:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010a014:	89 d0                	mov    %edx,%eax
f010a016:	01 c0                	add    %eax,%eax
f010a018:	01 d0                	add    %edx,%eax
f010a01a:	c1 e0 03             	shl    $0x3,%eax
f010a01d:	01 c8                	add    %ecx,%eax
f010a01f:	05 8c 00 00 00       	add    $0x8c,%eax
f010a024:	8a 00                	mov    (%eax),%al
f010a026:	84 c0                	test   %al,%al
f010a028:	75 7e                	jne    f010a0a8 <env_create+0x638>
			{
				uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010a02a:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a030:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010a033:	89 d0                	mov    %edx,%eax
f010a035:	01 c0                	add    %eax,%eax
f010a037:	01 d0                	add    %edx,%eax
f010a039:	c1 e0 03             	shl    $0x3,%eax
f010a03c:	01 c8                	add    %ecx,%eax
f010a03e:	05 88 00 00 00       	add    $0x88,%eax
f010a043:	8b 00                	mov    (%eax),%eax
f010a045:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
				uint32* ptr_page_table;

				//Here, page tables of all working set pages should be exist in memory
				//So, get_page_table should return the existing table
				get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f010a04b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a051:	8b 40 64             	mov    0x64(%eax),%eax
f010a054:	83 ec 04             	sub    $0x4,%esp
f010a057:	8d 95 1c ff ff ff    	lea    -0xe4(%ebp),%edx
f010a05d:	52                   	push   %edx
f010a05e:	ff b5 54 ff ff ff    	pushl  -0xac(%ebp)
f010a064:	50                   	push   %eax
f010a065:	e8 a3 e3 ff ff       	call   f010840d <get_page_table>
f010a06a:	83 c4 10             	add    $0x10,%esp
				ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f010a06d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010a073:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f010a079:	c1 ea 0c             	shr    $0xc,%edx
f010a07c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010a082:	c1 e2 02             	shl    $0x2,%edx
f010a085:	01 d0                	add    %edx,%eax
f010a087:	8b 95 1c ff ff ff    	mov    -0xe4(%ebp),%edx
f010a08d:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
f010a093:	c1 e9 0c             	shr    $0xc,%ecx
f010a096:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f010a09c:	c1 e1 02             	shl    $0x2,%ecx
f010a09f:	01 ca                	add    %ecx,%edx
f010a0a1:	8b 12                	mov    (%edx),%edx
f010a0a3:	83 e2 bf             	and    $0xffffffbf,%edx
f010a0a6:	89 10                	mov    %edx,(%eax)
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
		}
#else
		int i=0;
		for(;i<(e->page_WS_max_size); i++)
f010a0a8:	ff 45 c4             	incl   -0x3c(%ebp)
f010a0ab:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a0b1:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f010a0b7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a0ba:	39 c2                	cmp    %eax,%edx
f010a0bc:	0f 87 49 ff ff ff    	ja     f010a00b <env_create+0x59b>
			}
		}
#endif

		//[9] now set the entry point of the environment
		set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f010a0c2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010a0c5:	8b 50 08             	mov    0x8(%eax),%edx
f010a0c8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a0ce:	83 ec 08             	sub    $0x8,%esp
f010a0d1:	52                   	push   %edx
f010a0d2:	50                   	push   %eax
f010a0d3:	e8 45 1a 00 00       	call   f010bb1d <set_environment_entry_point>
f010a0d8:	83 c4 10             	add    $0x10,%esp

		//[10] Allocate and map ONE page for the program's initial stack
		// at virtual address USTACKTOP - PAGE_SIZE.
		// we assume that the stack is counted in the environment working set

		e->initNumStackPages = 1;
f010a0db:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a0e1:	c7 40 6c 01 00 00 00 	movl   $0x1,0x6c(%eax)

		//cprintf("\nwill allocate stack pages\n");
		uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f010a0e8:	c7 85 50 ff ff ff 00 	movl   $0xeebfd000,-0xb0(%ebp)
f010a0ef:	d0 bf ee 

		uint32 stackVa = USTACKTOP - PAGE_SIZE;
f010a0f2:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
		for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f010a0f9:	e9 27 05 00 00       	jmp    f010a625 <env_create+0xbb5>
		{
			//allocate and map
			struct FrameInfo *pp = NULL;
f010a0fe:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f010a105:	00 00 00 
			allocate_frame(&pp);
f010a108:	83 ec 0c             	sub    $0xc,%esp
f010a10b:	8d 85 18 ff ff ff    	lea    -0xe8(%ebp),%eax
f010a111:	50                   	push   %eax
f010a112:	e8 b9 e0 ff ff       	call   f01081d0 <allocate_frame>
f010a117:	83 c4 10             	add    $0x10,%esp
			loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f010a11a:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f010a120:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a126:	8b 40 64             	mov    0x64(%eax),%eax
f010a129:	6a 06                	push   $0x6
f010a12b:	ff 75 c0             	pushl  -0x40(%ebp)
f010a12e:	52                   	push   %edx
f010a12f:	50                   	push   %eax
f010a130:	e8 af e6 ff ff       	call   f01087e4 <loadtime_map_frame>
f010a135:	83 c4 10             	add    $0x10,%esp

			//initialize new page by 0's
			memset((void*)stackVa, 0, PAGE_SIZE);
f010a138:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010a13b:	83 ec 04             	sub    $0x4,%esp
f010a13e:	68 00 10 00 00       	push   $0x1000
f010a143:	6a 00                	push   $0x0
f010a145:	50                   	push   %eax
f010a146:	e8 e1 85 01 00       	call   f012272c <memset>
f010a14b:	83 c4 10             	add    $0x10,%esp
					{
						LIST_INSERT_HEAD(&(e->SecondList), wse);
					}
				}
#else
				env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f010a14e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a154:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010a15a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a160:	83 ec 04             	sub    $0x4,%esp
f010a163:	ff 75 c0             	pushl  -0x40(%ebp)
f010a166:	52                   	push   %edx
f010a167:	50                   	push   %eax
f010a168:	e8 ae ec ff ff       	call   f0108e1b <env_page_ws_set_entry>
f010a16d:	83 c4 10             	add    $0x10,%esp
				uint32 lastWSIndex = e->page_last_WS_index ++;
f010a170:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a176:	8b 82 58 d5 01 00    	mov    0x1d558(%edx),%eax
f010a17c:	8d 48 01             	lea    0x1(%eax),%ecx
f010a17f:	89 8a 58 d5 01 00    	mov    %ecx,0x1d558(%edx)
f010a185:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
				e->page_last_WS_index %= (e->page_WS_max_size);
f010a18b:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a191:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a197:	8b 80 58 d5 01 00    	mov    0x1d558(%eax),%eax
f010a19d:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a1a3:	8b 9a 84 00 00 00    	mov    0x84(%edx),%ebx
f010a1a9:	ba 00 00 00 00       	mov    $0x0,%edx
f010a1ae:	f7 f3                	div    %ebx
f010a1b0:	89 d0                	mov    %edx,%eax
f010a1b2:	89 81 58 d5 01 00    	mov    %eax,0x1d558(%ecx)

				if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a1b8:	83 ec 0c             	sub    $0xc,%esp
f010a1bb:	6a 02                	push   $0x2
f010a1bd:	e8 4e 45 00 00       	call   f010e710 <isPageReplacmentAlgorithmLRU>
f010a1c2:	83 c4 10             	add    $0x10,%esp
f010a1c5:	85 c0                	test   %eax,%eax
f010a1c7:	0f 84 34 04 00 00    	je     f010a601 <env_create+0xb91>
				{
					LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f010a1cd:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a1d3:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a1d9:	89 d0                	mov    %edx,%eax
f010a1db:	01 c0                	add    %eax,%eax
f010a1dd:	01 d0                	add    %edx,%eax
f010a1df:	c1 e0 03             	shl    $0x3,%eax
f010a1e2:	83 e8 80             	sub    $0xffffff80,%eax
f010a1e5:	01 c8                	add    %ecx,%eax
f010a1e7:	83 c0 08             	add    $0x8,%eax
f010a1ea:	85 c0                	test   %eax,%eax
f010a1ec:	75 17                	jne    f010a205 <env_create+0x795>
f010a1ee:	83 ec 04             	sub    $0x4,%esp
f010a1f1:	68 7d 7d 12 f0       	push   $0xf0127d7d
f010a1f6:	68 7a 01 00 00       	push   $0x17a
f010a1fb:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010a200:	e8 15 61 ff ff       	call   f010031a <_panic>
f010a205:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a20b:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a211:	89 d0                	mov    %edx,%eax
f010a213:	01 c0                	add    %eax,%eax
f010a215:	01 d0                	add    %edx,%eax
f010a217:	c1 e0 03             	shl    $0x3,%eax
f010a21a:	01 c8                	add    %ecx,%eax
f010a21c:	05 98 00 00 00       	add    $0x98,%eax
f010a221:	8b 00                	mov    (%eax),%eax
f010a223:	85 c0                	test   %eax,%eax
f010a225:	74 41                	je     f010a268 <env_create+0x7f8>
f010a227:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a22d:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a233:	89 d0                	mov    %edx,%eax
f010a235:	01 c0                	add    %eax,%eax
f010a237:	01 d0                	add    %edx,%eax
f010a239:	c1 e0 03             	shl    $0x3,%eax
f010a23c:	01 c8                	add    %ecx,%eax
f010a23e:	05 98 00 00 00       	add    $0x98,%eax
f010a243:	8b 10                	mov    (%eax),%edx
f010a245:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a24b:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a251:	89 c8                	mov    %ecx,%eax
f010a253:	01 c0                	add    %eax,%eax
f010a255:	01 c8                	add    %ecx,%eax
f010a257:	c1 e0 03             	shl    $0x3,%eax
f010a25a:	01 d8                	add    %ebx,%eax
f010a25c:	05 9c 00 00 00       	add    $0x9c,%eax
f010a261:	8b 00                	mov    (%eax),%eax
f010a263:	89 42 14             	mov    %eax,0x14(%edx)
f010a266:	eb 2a                	jmp    f010a292 <env_create+0x822>
f010a268:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a26e:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a274:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a27a:	89 c8                	mov    %ecx,%eax
f010a27c:	01 c0                	add    %eax,%eax
f010a27e:	01 c8                	add    %ecx,%eax
f010a280:	c1 e0 03             	shl    $0x3,%eax
f010a283:	01 d8                	add    %ebx,%eax
f010a285:	05 9c 00 00 00       	add    $0x9c,%eax
f010a28a:	8b 00                	mov    (%eax),%eax
f010a28c:	89 82 4c d5 01 00    	mov    %eax,0x1d54c(%edx)
f010a292:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a298:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a29e:	89 d0                	mov    %edx,%eax
f010a2a0:	01 c0                	add    %eax,%eax
f010a2a2:	01 d0                	add    %edx,%eax
f010a2a4:	c1 e0 03             	shl    $0x3,%eax
f010a2a7:	01 c8                	add    %ecx,%eax
f010a2a9:	05 9c 00 00 00       	add    $0x9c,%eax
f010a2ae:	8b 00                	mov    (%eax),%eax
f010a2b0:	85 c0                	test   %eax,%eax
f010a2b2:	74 41                	je     f010a2f5 <env_create+0x885>
f010a2b4:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a2ba:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a2c0:	89 d0                	mov    %edx,%eax
f010a2c2:	01 c0                	add    %eax,%eax
f010a2c4:	01 d0                	add    %edx,%eax
f010a2c6:	c1 e0 03             	shl    $0x3,%eax
f010a2c9:	01 c8                	add    %ecx,%eax
f010a2cb:	05 9c 00 00 00       	add    $0x9c,%eax
f010a2d0:	8b 10                	mov    (%eax),%edx
f010a2d2:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a2d8:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a2de:	89 c8                	mov    %ecx,%eax
f010a2e0:	01 c0                	add    %eax,%eax
f010a2e2:	01 c8                	add    %ecx,%eax
f010a2e4:	c1 e0 03             	shl    $0x3,%eax
f010a2e7:	01 d8                	add    %ebx,%eax
f010a2e9:	05 98 00 00 00       	add    $0x98,%eax
f010a2ee:	8b 00                	mov    (%eax),%eax
f010a2f0:	89 42 10             	mov    %eax,0x10(%edx)
f010a2f3:	eb 2a                	jmp    f010a31f <env_create+0x8af>
f010a2f5:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a2fb:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a301:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a307:	89 c8                	mov    %ecx,%eax
f010a309:	01 c0                	add    %eax,%eax
f010a30b:	01 c8                	add    %ecx,%eax
f010a30d:	c1 e0 03             	shl    $0x3,%eax
f010a310:	01 d8                	add    %ebx,%eax
f010a312:	05 98 00 00 00       	add    $0x98,%eax
f010a317:	8b 00                	mov    (%eax),%eax
f010a319:	89 82 48 d5 01 00    	mov    %eax,0x1d548(%edx)
f010a31f:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a325:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a32b:	89 d0                	mov    %edx,%eax
f010a32d:	01 c0                	add    %eax,%eax
f010a32f:	01 d0                	add    %edx,%eax
f010a331:	c1 e0 03             	shl    $0x3,%eax
f010a334:	01 c8                	add    %ecx,%eax
f010a336:	05 98 00 00 00       	add    $0x98,%eax
f010a33b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a341:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a347:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a34d:	89 d0                	mov    %edx,%eax
f010a34f:	01 c0                	add    %eax,%eax
f010a351:	01 d0                	add    %edx,%eax
f010a353:	c1 e0 03             	shl    $0x3,%eax
f010a356:	01 c8                	add    %ecx,%eax
f010a358:	05 9c 00 00 00       	add    $0x9c,%eax
f010a35d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a363:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a369:	8b 90 54 d5 01 00    	mov    0x1d554(%eax),%edx
f010a36f:	4a                   	dec    %edx
f010a370:	89 90 54 d5 01 00    	mov    %edx,0x1d554(%eax)
					//Now: we are sure that at least the top page in the stack will be added to Active list
					//Since we left 1 empty location in the Active list when we loaded the program segments
					if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f010a376:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a37c:	8b 90 1c da 01 00    	mov    0x1da1c(%eax),%edx
f010a382:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a388:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a38e:	39 c2                	cmp    %eax,%edx
f010a390:	0f 83 38 01 00 00    	jae    f010a4ce <env_create+0xa5e>
					{
						LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f010a396:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a39c:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a3a2:	89 d0                	mov    %edx,%eax
f010a3a4:	01 c0                	add    %eax,%eax
f010a3a6:	01 d0                	add    %edx,%eax
f010a3a8:	c1 e0 03             	shl    $0x3,%eax
f010a3ab:	83 e8 80             	sub    $0xffffff80,%eax
f010a3ae:	01 c8                	add    %ecx,%eax
f010a3b0:	83 c0 08             	add    $0x8,%eax
f010a3b3:	85 c0                	test   %eax,%eax
f010a3b5:	75 17                	jne    f010a3ce <env_create+0x95e>
f010a3b7:	83 ec 04             	sub    $0x4,%esp
f010a3ba:	68 c8 7c 12 f0       	push   $0xf0127cc8
f010a3bf:	68 7f 01 00 00       	push   $0x17f
f010a3c4:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010a3c9:	e8 4c 5f ff ff       	call   f010031a <_panic>
f010a3ce:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a3d4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a3da:	8b 88 10 da 01 00    	mov    0x1da10(%eax),%ecx
f010a3e0:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f010a3e6:	89 d8                	mov    %ebx,%eax
f010a3e8:	01 c0                	add    %eax,%eax
f010a3ea:	01 d8                	add    %ebx,%eax
f010a3ec:	c1 e0 03             	shl    $0x3,%eax
f010a3ef:	01 d0                	add    %edx,%eax
f010a3f1:	05 98 00 00 00       	add    $0x98,%eax
f010a3f6:	89 08                	mov    %ecx,(%eax)
f010a3f8:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a3fe:	89 c8                	mov    %ecx,%eax
f010a400:	01 c0                	add    %eax,%eax
f010a402:	01 c8                	add    %ecx,%eax
f010a404:	c1 e0 03             	shl    $0x3,%eax
f010a407:	01 d0                	add    %edx,%eax
f010a409:	05 98 00 00 00       	add    $0x98,%eax
f010a40e:	8b 00                	mov    (%eax),%eax
f010a410:	85 c0                	test   %eax,%eax
f010a412:	74 2e                	je     f010a442 <env_create+0x9d2>
f010a414:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a41a:	8b 90 10 da 01 00    	mov    0x1da10(%eax),%edx
f010a420:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a426:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a42c:	89 c8                	mov    %ecx,%eax
f010a42e:	01 c0                	add    %eax,%eax
f010a430:	01 c8                	add    %ecx,%eax
f010a432:	c1 e0 03             	shl    $0x3,%eax
f010a435:	83 e8 80             	sub    $0xffffff80,%eax
f010a438:	01 d8                	add    %ebx,%eax
f010a43a:	83 c0 08             	add    $0x8,%eax
f010a43d:	89 42 14             	mov    %eax,0x14(%edx)
f010a440:	eb 29                	jmp    f010a46b <env_create+0x9fb>
f010a442:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a448:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a44e:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a454:	89 c8                	mov    %ecx,%eax
f010a456:	01 c0                	add    %eax,%eax
f010a458:	01 c8                	add    %ecx,%eax
f010a45a:	c1 e0 03             	shl    $0x3,%eax
f010a45d:	83 e8 80             	sub    $0xffffff80,%eax
f010a460:	01 d8                	add    %ebx,%eax
f010a462:	83 c0 08             	add    $0x8,%eax
f010a465:	89 82 14 da 01 00    	mov    %eax,0x1da14(%edx)
f010a46b:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a471:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a477:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a47d:	89 c8                	mov    %ecx,%eax
f010a47f:	01 c0                	add    %eax,%eax
f010a481:	01 c8                	add    %ecx,%eax
f010a483:	c1 e0 03             	shl    $0x3,%eax
f010a486:	83 e8 80             	sub    $0xffffff80,%eax
f010a489:	01 d8                	add    %ebx,%eax
f010a48b:	83 c0 08             	add    $0x8,%eax
f010a48e:	89 82 10 da 01 00    	mov    %eax,0x1da10(%edx)
f010a494:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a49a:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a4a0:	89 d0                	mov    %edx,%eax
f010a4a2:	01 c0                	add    %eax,%eax
f010a4a4:	01 d0                	add    %edx,%eax
f010a4a6:	c1 e0 03             	shl    $0x3,%eax
f010a4a9:	01 c8                	add    %ecx,%eax
f010a4ab:	05 9c 00 00 00       	add    $0x9c,%eax
f010a4b0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a4b6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a4bc:	8b 90 1c da 01 00    	mov    0x1da1c(%eax),%edx
f010a4c2:	42                   	inc    %edx
f010a4c3:	89 90 1c da 01 00    	mov    %edx,0x1da1c(%eax)
f010a4c9:	e9 33 01 00 00       	jmp    f010a601 <env_create+0xb91>
					}
					else
					{
						LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f010a4ce:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a4d4:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a4da:	89 d0                	mov    %edx,%eax
f010a4dc:	01 c0                	add    %eax,%eax
f010a4de:	01 d0                	add    %edx,%eax
f010a4e0:	c1 e0 03             	shl    $0x3,%eax
f010a4e3:	83 e8 80             	sub    $0xffffff80,%eax
f010a4e6:	01 c8                	add    %ecx,%eax
f010a4e8:	83 c0 08             	add    $0x8,%eax
f010a4eb:	85 c0                	test   %eax,%eax
f010a4ed:	75 17                	jne    f010a506 <env_create+0xa96>
f010a4ef:	83 ec 04             	sub    $0x4,%esp
f010a4f2:	68 c8 7c 12 f0       	push   $0xf0127cc8
f010a4f7:	68 83 01 00 00       	push   $0x183
f010a4fc:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010a501:	e8 14 5e ff ff       	call   f010031a <_panic>
f010a506:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a50c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a512:	8b 88 20 da 01 00    	mov    0x1da20(%eax),%ecx
f010a518:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f010a51e:	89 d8                	mov    %ebx,%eax
f010a520:	01 c0                	add    %eax,%eax
f010a522:	01 d8                	add    %ebx,%eax
f010a524:	c1 e0 03             	shl    $0x3,%eax
f010a527:	01 d0                	add    %edx,%eax
f010a529:	05 98 00 00 00       	add    $0x98,%eax
f010a52e:	89 08                	mov    %ecx,(%eax)
f010a530:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a536:	89 c8                	mov    %ecx,%eax
f010a538:	01 c0                	add    %eax,%eax
f010a53a:	01 c8                	add    %ecx,%eax
f010a53c:	c1 e0 03             	shl    $0x3,%eax
f010a53f:	01 d0                	add    %edx,%eax
f010a541:	05 98 00 00 00       	add    $0x98,%eax
f010a546:	8b 00                	mov    (%eax),%eax
f010a548:	85 c0                	test   %eax,%eax
f010a54a:	74 2e                	je     f010a57a <env_create+0xb0a>
f010a54c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a552:	8b 90 20 da 01 00    	mov    0x1da20(%eax),%edx
f010a558:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a55e:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a564:	89 c8                	mov    %ecx,%eax
f010a566:	01 c0                	add    %eax,%eax
f010a568:	01 c8                	add    %ecx,%eax
f010a56a:	c1 e0 03             	shl    $0x3,%eax
f010a56d:	83 e8 80             	sub    $0xffffff80,%eax
f010a570:	01 d8                	add    %ebx,%eax
f010a572:	83 c0 08             	add    $0x8,%eax
f010a575:	89 42 14             	mov    %eax,0x14(%edx)
f010a578:	eb 29                	jmp    f010a5a3 <env_create+0xb33>
f010a57a:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a580:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a586:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a58c:	89 c8                	mov    %ecx,%eax
f010a58e:	01 c0                	add    %eax,%eax
f010a590:	01 c8                	add    %ecx,%eax
f010a592:	c1 e0 03             	shl    $0x3,%eax
f010a595:	83 e8 80             	sub    $0xffffff80,%eax
f010a598:	01 d8                	add    %ebx,%eax
f010a59a:	83 c0 08             	add    $0x8,%eax
f010a59d:	89 82 24 da 01 00    	mov    %eax,0x1da24(%edx)
f010a5a3:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a5a9:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a5af:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a5b5:	89 c8                	mov    %ecx,%eax
f010a5b7:	01 c0                	add    %eax,%eax
f010a5b9:	01 c8                	add    %ecx,%eax
f010a5bb:	c1 e0 03             	shl    $0x3,%eax
f010a5be:	83 e8 80             	sub    $0xffffff80,%eax
f010a5c1:	01 d8                	add    %ebx,%eax
f010a5c3:	83 c0 08             	add    $0x8,%eax
f010a5c6:	89 82 20 da 01 00    	mov    %eax,0x1da20(%edx)
f010a5cc:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a5d2:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a5d8:	89 d0                	mov    %edx,%eax
f010a5da:	01 c0                	add    %eax,%eax
f010a5dc:	01 d0                	add    %edx,%eax
f010a5de:	c1 e0 03             	shl    $0x3,%eax
f010a5e1:	01 c8                	add    %ecx,%eax
f010a5e3:	05 9c 00 00 00       	add    $0x9c,%eax
f010a5e8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a5ee:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a5f4:	8b 90 2c da 01 00    	mov    0x1da2c(%eax),%edx
f010a5fa:	42                   	inc    %edx
f010a5fb:	89 90 2c da 01 00    	mov    %edx,0x1da2c(%eax)

				//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));
			}

			//add this page to the page file
			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f010a601:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a607:	83 ec 04             	sub    $0x4,%esp
f010a60a:	6a 01                	push   $0x1
f010a60c:	ff 75 c0             	pushl  -0x40(%ebp)
f010a60f:	50                   	push   %eax
f010a610:	e8 05 9a ff ff       	call   f010401a <pf_add_empty_env_page>
f010a615:	83 c4 10             	add    $0x10,%esp
f010a618:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)

		//cprintf("\nwill allocate stack pages\n");
		uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

		uint32 stackVa = USTACKTOP - PAGE_SIZE;
		for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f010a61e:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f010a625:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010a628:	3b 85 50 ff ff ff    	cmp    -0xb0(%ebp),%eax
f010a62e:	0f 83 ca fa ff ff    	jae    f010a0fe <env_create+0x68e>
			//if(success == 0) LOG_STATMENT(cprintf("STACK Page added to page file successfully\n"));
		}

		//2020
		//LRU Lists: Reset PRESENT bit of all pages in Second List
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a634:	83 ec 0c             	sub    $0xc,%esp
f010a637:	6a 02                	push   $0x2
f010a639:	e8 d2 40 00 00       	call   f010e710 <isPageReplacmentAlgorithmLRU>
f010a63e:	83 c4 10             	add    $0x10,%esp
f010a641:	85 c0                	test   %eax,%eax
f010a643:	74 72                	je     f010a6b7 <env_create+0xc47>
		{
			struct WorkingSetElement * elm = NULL;
f010a645:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
			LIST_FOREACH(elm, &(e->SecondList))
f010a64c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a652:	8b 80 20 da 01 00    	mov    0x1da20(%eax),%eax
f010a658:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010a65b:	eb 2b                	jmp    f010a688 <env_create+0xc18>
			{
				//set it's PRESENT bit to 0
				pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f010a65d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010a660:	8b 10                	mov    (%eax),%edx
f010a662:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a668:	8b 40 64             	mov    0x64(%eax),%eax
f010a66b:	6a 01                	push   $0x1
f010a66d:	6a 00                	push   $0x0
f010a66f:	52                   	push   %edx
f010a670:	50                   	push   %eax
f010a671:	e8 b2 e4 ff ff       	call   f0108b28 <pt_set_page_permissions>
f010a676:	83 c4 10             	add    $0x10,%esp
		//2020
		//LRU Lists: Reset PRESENT bit of all pages in Second List
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
		{
			struct WorkingSetElement * elm = NULL;
			LIST_FOREACH(elm, &(e->SecondList))
f010a679:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a67f:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f010a685:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010a688:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a68e:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f010a692:	74 08                	je     f010a69c <env_create+0xc2c>
f010a694:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010a697:	8b 52 10             	mov    0x10(%edx),%edx
f010a69a:	eb 05                	jmp    f010a6a1 <env_create+0xc31>
f010a69c:	ba 00 00 00 00       	mov    $0x0,%edx
f010a6a1:	89 90 28 da 01 00    	mov    %edx,0x1da28(%eax)
f010a6a7:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f010a6ad:	85 c0                	test   %eax,%eax
f010a6af:	75 ac                	jne    f010a65d <env_create+0xbed>
f010a6b1:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f010a6b5:	75 a6                	jne    f010a65d <env_create+0xbed>
f010a6b7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010a6ba:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010a6bd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010a6c0:	0f 22 d8             	mov    %eax,%cr3

		///[11] switch back to the page directory exists before segment loading
		lcr3(cur_phys_pgdir) ;
	}
	//[12] Re-enable the interrupt (if it was too)
	popcli();
f010a6c3:	e8 4a cb ff ff       	call   f0107212 <popcli>
//		env_page_ws_print(e);

		//	cprintf("Table working set after loading the program...\n");
		//	env_table_ws_print(e);
	}
	return e;
f010a6c8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
}
f010a6ce:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010a6d1:	5b                   	pop    %ebx
f010a6d2:	5e                   	pop    %esi
f010a6d3:	5f                   	pop    %edi
f010a6d4:	5d                   	pop    %ebp
f010a6d5:	c3                   	ret    

f010a6d6 <env_start>:
// 2) START EXECUTING THE PROCESS:
//===============================
// called only at the very first scheduling by scheduler()
// will context_switch() here.  "Return" to user space.
void env_start(void)
{
f010a6d6:	55                   	push   %ebp
f010a6d7:	89 e5                	mov    %esp,%ebp
f010a6d9:	83 ec 18             	sub    $0x18,%esp
	static int first = 1;
	// Still holding q.lock from scheduler.
	release_spinlock(&ProcessQueues.qlock);
f010a6dc:	83 ec 0c             	sub    $0xc,%esp
f010a6df:	68 00 fe 59 f0       	push   $0xf059fe00
f010a6e4:	e8 bf 44 00 00       	call   f010eba8 <release_spinlock>
f010a6e9:	83 c4 10             	add    $0x10,%esp

	if (first)
f010a6ec:	a1 60 e9 17 f0       	mov    0xf017e960,%eax
f010a6f1:	85 c0                	test   %eax,%eax
f010a6f3:	74 30                	je     f010a725 <env_start+0x4f>
	{
		struct Env* p = get_cpu_proc();
f010a6f5:	e8 76 00 00 00       	call   f010a770 <get_cpu_proc>
f010a6fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
		cprintf("\n[ENV_START] %s - %d\n", p->prog_name, p->env_id);
f010a6fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a700:	8b 40 10             	mov    0x10(%eax),%eax
f010a703:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a706:	83 c2 20             	add    $0x20,%edx
f010a709:	83 ec 04             	sub    $0x4,%esp
f010a70c:	50                   	push   %eax
f010a70d:	52                   	push   %edx
f010a70e:	68 9b 7d 12 f0       	push   $0xf0127d9b
f010a713:	e8 54 68 ff ff       	call   f0100f6c <cprintf>
f010a718:	83 c4 10             	add    $0x10,%esp

		// Some initialization functions must be run in the context
		// of a regular process (e.g., they call sleep), and thus cannot
		// be run from main().
		first = 0;
f010a71b:	c7 05 60 e9 17 f0 00 	movl   $0x0,0xf017e960
f010a722:	00 00 00 
	}

	// Return to "caller", actually trapret (see initialize_environment()).
}
f010a725:	90                   	nop
f010a726:	c9                   	leave  
f010a727:	c3                   	ret    

f010a728 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f010a728:	55                   	push   %ebp
f010a729:	89 e5                	mov    %esp,%ebp
	/*REMOVE THIS LINE BEFORE START CODING*/
	return;
f010a72b:	90                   	nop

	// [10] free the environment (return it back to the free environment list)
	/*(ALREADY DONE for you)*/
	free_environment(e); /*(ALREADY DONE for you)*/ // (frees the environment (returns it back to the free environment list))
	/*========================*/
}
f010a72c:	5d                   	pop    %ebp
f010a72d:	c3                   	ret    

f010a72e <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
//Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit(void)
{
f010a72e:	55                   	push   %ebp
f010a72f:	89 e5                	mov    %esp,%ebp
f010a731:	83 ec 18             	sub    $0x18,%esp
	struct Env* cur_env = get_cpu_proc();
f010a734:	e8 37 00 00 00       	call   f010a770 <get_cpu_proc>
f010a739:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(cur_env != NULL);
f010a73c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a740:	75 19                	jne    f010a75b <env_exit+0x2d>
f010a742:	68 b1 7d 12 f0       	push   $0xf0127db1
f010a747:	68 c1 7d 12 f0       	push   $0xf0127dc1
f010a74c:	68 ea 01 00 00       	push   $0x1ea
f010a751:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010a756:	e8 bf 5b ff ff       	call   f010031a <_panic>
	sched_exit_env(cur_env->env_id);
f010a75b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a75e:	8b 40 10             	mov    0x10(%eax),%eax
f010a761:	83 ec 0c             	sub    $0xc,%esp
f010a764:	50                   	push   %eax
f010a765:	e8 48 b0 ff ff       	call   f01057b2 <sched_exit_env>
f010a76a:	83 c4 10             	add    $0x10,%esp
	//2024: Replaced by context switch
	//fos_scheduler();
	//context_switch(&(curenv->context), mycpu()->scheduler);
}
f010a76d:	90                   	nop
f010a76e:	c9                   	leave  
f010a76f:	c3                   	ret    

f010a770 <get_cpu_proc>:
//===================================
// Disable interrupts so that we are not rescheduled
// while reading proc from the cpu structure
// Ref: xv6-x86 OS
struct Env* get_cpu_proc(void)
{
f010a770:	55                   	push   %ebp
f010a771:	89 e5                	mov    %esp,%ebp
f010a773:	83 ec 18             	sub    $0x18,%esp
	struct cpu *c;
	struct Env *p;
	pushcli();
f010a776:	e8 45 ca ff ff       	call   f01071c0 <pushcli>
	c = mycpu();
f010a77b:	e8 7d c9 ff ff       	call   f01070fd <mycpu>
f010a780:	89 45 f4             	mov    %eax,-0xc(%ebp)
	p = c->proc;
f010a783:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a786:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010a78c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	popcli();
f010a78f:	e8 7e ca ff ff       	call   f0107212 <popcli>
	return p;
f010a794:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010a797:	c9                   	leave  
f010a798:	c3                   	ret    

f010a799 <set_cpu_proc>:
//===================================
// Disable interrupts so that we are not rescheduled
// while setting proc into the cpu structure
// Ref: xv6-x86 OS
void set_cpu_proc(struct Env* p)
{
f010a799:	55                   	push   %ebp
f010a79a:	89 e5                	mov    %esp,%ebp
f010a79c:	83 ec 18             	sub    $0x18,%esp
	struct cpu *c;
	pushcli();
f010a79f:	e8 1c ca ff ff       	call   f01071c0 <pushcli>
	c = mycpu();
f010a7a4:	e8 54 c9 ff ff       	call   f01070fd <mycpu>
f010a7a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	c->proc = p;
f010a7ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7af:	8b 55 08             	mov    0x8(%ebp),%edx
f010a7b2:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
	popcli();
f010a7b8:	e8 55 ca ff ff       	call   f0107212 <popcli>
}
f010a7bd:	90                   	nop
f010a7be:	c9                   	leave  
f010a7bf:	c3                   	ret    

f010a7c0 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f010a7c0:	55                   	push   %ebp
f010a7c1:	89 e5                	mov    %esp,%ebp
f010a7c3:	53                   	push   %ebx
f010a7c4:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f010a7c7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a7cb:	75 16                	jne    f010a7e3 <envid2env+0x23>
		*env_store = get_cpu_proc();
f010a7cd:	e8 9e ff ff ff       	call   f010a770 <get_cpu_proc>
f010a7d2:	89 c2                	mov    %eax,%edx
f010a7d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a7d7:	89 10                	mov    %edx,(%eax)
		return 0;
f010a7d9:	b8 00 00 00 00       	mov    $0x0,%eax
f010a7de:	e9 b6 00 00 00       	jmp    f010a899 <envid2env+0xd9>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f010a7e3:	8b 1d b0 f3 59 f0    	mov    0xf059f3b0,%ebx
f010a7e9:	83 ec 0c             	sub    $0xc,%esp
f010a7ec:	6a 08                	push   $0x8
f010a7ee:	e8 a3 63 01 00       	call   f0120b96 <nearest_pow2_ceil>
f010a7f3:	83 c4 10             	add    $0x10,%esp
f010a7f6:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a7f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7fc:	21 c2                	and    %eax,%edx
f010a7fe:	89 d0                	mov    %edx,%eax
f010a800:	c1 e0 06             	shl    $0x6,%eax
f010a803:	29 d0                	sub    %edx,%eax
f010a805:	c1 e0 02             	shl    $0x2,%eax
f010a808:	01 d0                	add    %edx,%eax
f010a80a:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010a811:	01 c8                	add    %ecx,%eax
f010a813:	c1 e0 03             	shl    $0x3,%eax
f010a816:	01 d0                	add    %edx,%eax
f010a818:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a81f:	29 c2                	sub    %eax,%edx
f010a821:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f010a828:	89 c2                	mov    %eax,%edx
f010a82a:	89 d0                	mov    %edx,%eax
f010a82c:	01 d8                	add    %ebx,%eax
f010a82e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f010a831:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a834:	8b 40 18             	mov    0x18(%eax),%eax
f010a837:	85 c0                	test   %eax,%eax
f010a839:	74 0b                	je     f010a846 <envid2env+0x86>
f010a83b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a83e:	8b 40 10             	mov    0x10(%eax),%eax
f010a841:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a844:	74 10                	je     f010a856 <envid2env+0x96>
		*env_store = 0;
f010a846:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a849:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010a84f:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010a854:	eb 43                	jmp    f010a899 <envid2env+0xd9>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	struct Env* cur_env = get_cpu_proc();
f010a856:	e8 15 ff ff ff       	call   f010a770 <get_cpu_proc>
f010a85b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (checkperm && e != cur_env && e->env_parent_id != cur_env->env_id) {
f010a85e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010a862:	74 28                	je     f010a88c <envid2env+0xcc>
f010a864:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a867:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010a86a:	74 20                	je     f010a88c <envid2env+0xcc>
f010a86c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a86f:	8b 50 14             	mov    0x14(%eax),%edx
f010a872:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a875:	8b 40 10             	mov    0x10(%eax),%eax
f010a878:	39 c2                	cmp    %eax,%edx
f010a87a:	74 10                	je     f010a88c <envid2env+0xcc>
		*env_store = 0;
f010a87c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a87f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010a885:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010a88a:	eb 0d                	jmp    f010a899 <envid2env+0xd9>
	}

	*env_store = e;
f010a88c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a88f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a892:	89 10                	mov    %edx,(%eax)
	return 0;
f010a894:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a899:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a89c:	c9                   	leave  
f010a89d:	c3                   	ret    

f010a89e <yield>:
// 8) GIVE-UP CPU TO THE SCHEDULER:
//=================================
// Give up the CPU for one scheduling round.
// Ref: xv6-x86 OS
void yield(void)
{
f010a89e:	55                   	push   %ebp
f010a89f:	89 e5                	mov    %esp,%ebp
f010a8a1:	83 ec 18             	sub    $0x18,%esp
	//cprintf("\n[YIELD] acquire: lock status before acquire = %d\n", qlock.locked);
	acquire_spinlock(&ProcessQueues.qlock);  //lock: to protect process Qs in multi-CPU
f010a8a4:	83 ec 0c             	sub    $0xc,%esp
f010a8a7:	68 00 fe 59 f0       	push   $0xf059fe00
f010a8ac:	e8 70 42 00 00       	call   f010eb21 <acquire_spinlock>
f010a8b1:	83 c4 10             	add    $0x10,%esp
	{
		struct Env* p = get_cpu_proc();
f010a8b4:	e8 b7 fe ff ff       	call   f010a770 <get_cpu_proc>
f010a8b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		assert(p != NULL);
f010a8bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a8c0:	75 19                	jne    f010a8db <yield+0x3d>
f010a8c2:	68 d6 7d 12 f0       	push   $0xf0127dd6
f010a8c7:	68 c1 7d 12 f0       	push   $0xf0127dc1
f010a8cc:	68 49 02 00 00       	push   $0x249
f010a8d1:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010a8d6:	e8 3f 5a ff ff       	call   f010031a <_panic>
		p->env_status = ENV_READY;
f010a8db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a8de:	c7 40 18 01 00 00 00 	movl   $0x1,0x18(%eax)
		sched();
f010a8e5:	e8 13 00 00 00       	call   f010a8fd <sched>
	}
	release_spinlock(&ProcessQueues.qlock); ////release lock
f010a8ea:	83 ec 0c             	sub    $0xc,%esp
f010a8ed:	68 00 fe 59 f0       	push   $0xf059fe00
f010a8f2:	e8 b1 42 00 00       	call   f010eba8 <release_spinlock>
f010a8f7:	83 c4 10             	add    $0x10,%esp
	//cprintf("\n[YIELD] release: lock status after release = %d\n", qlock.locked);
}
f010a8fa:	90                   	nop
f010a8fb:	c9                   	leave  
f010a8fc:	c3                   	ret    

f010a8fd <sched>:
// Saves and restores intena because intena is a property of this kernel thread, not this CPU.
// It should be proc->intena and proc->ncli, but that would break in the few places
// where a lock is held but there's no process.
// Ref: xv6-x86 OS
void sched(void)
{
f010a8fd:	55                   	push   %ebp
f010a8fe:	89 e5                	mov    %esp,%ebp
f010a900:	83 ec 18             	sub    $0x18,%esp
	int intena;
	struct Env *p = get_cpu_proc();
f010a903:	e8 68 fe ff ff       	call   f010a770 <get_cpu_proc>
f010a908:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(p != NULL);
f010a90b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a90f:	75 19                	jne    f010a92a <sched+0x2d>
f010a911:	68 d6 7d 12 f0       	push   $0xf0127dd6
f010a916:	68 c1 7d 12 f0       	push   $0xf0127dc1
f010a91b:	68 5d 02 00 00       	push   $0x25d
f010a920:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010a925:	e8 f0 59 ff ff       	call   f010031a <_panic>

	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f010a92a:	83 ec 0c             	sub    $0xc,%esp
f010a92d:	68 00 fe 59 f0       	push   $0xf059fe00
f010a932:	e8 03 44 00 00       	call   f010ed3a <holding_spinlock>
f010a937:	83 c4 10             	add    $0x10,%esp
f010a93a:	85 c0                	test   %eax,%eax
f010a93c:	75 17                	jne    f010a955 <sched+0x58>
		panic("sched: q.lock is not held by this CPU while it's expected to be. ");
f010a93e:	83 ec 04             	sub    $0x4,%esp
f010a941:	68 e0 7d 12 f0       	push   $0xf0127de0
f010a946:	68 61 02 00 00       	push   $0x261
f010a94b:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010a950:	e8 c5 59 ff ff       	call   f010031a <_panic>
	/*Should ensure that the ncli = 1 so that the interrupt will be released after scheduling the next proc*/
	if(mycpu()->ncli != 1)
f010a955:	e8 a3 c7 ff ff       	call   f01070fd <mycpu>
f010a95a:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f010a960:	83 f8 01             	cmp    $0x1,%eax
f010a963:	74 20                	je     f010a985 <sched+0x88>
		panic("sched locks: ncli = %d", mycpu()->ncli);
f010a965:	e8 93 c7 ff ff       	call   f01070fd <mycpu>
f010a96a:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f010a970:	50                   	push   %eax
f010a971:	68 22 7e 12 f0       	push   $0xf0127e22
f010a976:	68 64 02 00 00       	push   $0x264
f010a97b:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010a980:	e8 95 59 ff ff       	call   f010031a <_panic>
	/*********************************************************************/
	if(p->env_status == ENV_RUNNING)
f010a985:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a988:	8b 40 18             	mov    0x18(%eax),%eax
f010a98b:	83 f8 02             	cmp    $0x2,%eax
f010a98e:	75 17                	jne    f010a9a7 <sched+0xaa>
		panic("sched a running process");
f010a990:	83 ec 04             	sub    $0x4,%esp
f010a993:	68 39 7e 12 f0       	push   $0xf0127e39
f010a998:	68 67 02 00 00       	push   $0x267
f010a99d:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010a9a2:	e8 73 59 ff ff       	call   f010031a <_panic>

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f010a9a7:	9c                   	pushf  
f010a9a8:	58                   	pop    %eax
f010a9a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        return eflags;
f010a9ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
	if(read_eflags()&FL_IF)
f010a9af:	25 00 02 00 00       	and    $0x200,%eax
f010a9b4:	85 c0                	test   %eax,%eax
f010a9b6:	74 17                	je     f010a9cf <sched+0xd2>
		panic("sched is interruptible!");
f010a9b8:	83 ec 04             	sub    $0x4,%esp
f010a9bb:	68 51 7e 12 f0       	push   $0xf0127e51
f010a9c0:	68 69 02 00 00       	push   $0x269
f010a9c5:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010a9ca:	e8 4b 59 ff ff       	call   f010031a <_panic>
	intena = mycpu()->intena;
f010a9cf:	e8 29 c7 ff ff       	call   f01070fd <mycpu>
f010a9d4:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
f010a9da:	89 45 f0             	mov    %eax,-0x10(%ebp)
	context_switch(&(p->context), mycpu()->scheduler);
f010a9dd:	e8 1b c7 ff ff       	call   f01070fd <mycpu>
f010a9e2:	8b 40 04             	mov    0x4(%eax),%eax
f010a9e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a9e8:	83 c2 04             	add    $0x4,%edx
f010a9eb:	83 ec 08             	sub    $0x8,%esp
f010a9ee:	50                   	push   %eax
f010a9ef:	52                   	push   %edx
f010a9f0:	e8 4a a1 ff ff       	call   f0104b3f <context_switch>
f010a9f5:	83 c4 10             	add    $0x10,%esp
	mycpu()->intena = intena;
f010a9f8:	e8 00 c7 ff ff       	call   f01070fd <mycpu>
f010a9fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010aa00:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
}
f010aa06:	90                   	nop
f010aa07:	c9                   	leave  
f010aa08:	c3                   	ret    

f010aa09 <switchkvm>:
// 10) SWITCH VIRTUAL MEMORYs:
//===============================
// [10.1] Switch h/w page table register to the kernel-only page table,
// for when no process is running.
void switchkvm(void)
{
f010aa09:	55                   	push   %ebp
f010aa0a:	89 e5                	mov    %esp,%ebp
f010aa0c:	83 ec 10             	sub    $0x10,%esp
	lcr3(phys_page_directory);   // switch to the kernel page table
f010aa0f:	a1 84 2b 5a f0       	mov    0xf05a2b84,%eax
f010aa14:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010aa17:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010aa1a:	0f 22 d8             	mov    %eax,%cr3
}
f010aa1d:	90                   	nop
f010aa1e:	c9                   	leave  
f010aa1f:	c3                   	ret    

f010aa20 <switchuvm>:

// [10.2] Switch TSS and h/w page table to correspond to process p.
void switchuvm(struct Env *proc)
{
f010aa20:	55                   	push   %ebp
f010aa21:	89 e5                	mov    %esp,%ebp
f010aa23:	53                   	push   %ebx
f010aa24:	83 ec 14             	sub    $0x14,%esp
	if(proc == 0)
f010aa27:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010aa2b:	75 17                	jne    f010aa44 <switchuvm+0x24>
		panic("switchuvm: no process");
f010aa2d:	83 ec 04             	sub    $0x4,%esp
f010aa30:	68 69 7e 12 f0       	push   $0xf0127e69
f010aa35:	68 7e 02 00 00       	push   $0x27e
f010aa3a:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010aa3f:	e8 d6 58 ff ff       	call   f010031a <_panic>
	if(proc->kstack == 0)
f010aa44:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa47:	8b 40 70             	mov    0x70(%eax),%eax
f010aa4a:	85 c0                	test   %eax,%eax
f010aa4c:	75 17                	jne    f010aa65 <switchuvm+0x45>
		panic("switchuvm: no kstack");
f010aa4e:	83 ec 04             	sub    $0x4,%esp
f010aa51:	68 7f 7e 12 f0       	push   $0xf0127e7f
f010aa56:	68 80 02 00 00       	push   $0x280
f010aa5b:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010aa60:	e8 b5 58 ff ff       	call   f010031a <_panic>
	if(proc->env_page_directory == 0)
f010aa65:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa68:	8b 40 64             	mov    0x64(%eax),%eax
f010aa6b:	85 c0                	test   %eax,%eax
f010aa6d:	75 17                	jne    f010aa86 <switchuvm+0x66>
		panic("switchuvm: no pgdir");
f010aa6f:	83 ec 04             	sub    $0x4,%esp
f010aa72:	68 94 7e 12 f0       	push   $0xf0127e94
f010aa77:	68 82 02 00 00       	push   $0x282
f010aa7c:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010aa81:	e8 94 58 ff ff       	call   f010031a <_panic>

	pushcli();	//disable interrupt - lock: to protect CPU info
f010aa86:	e8 35 c7 ff ff       	call   f01071c0 <pushcli>
	struct cpu* c = mycpu();
f010aa8b:	e8 6d c6 ff ff       	call   f01070fd <mycpu>
f010aa90:	89 45 f4             	mov    %eax,-0xc(%ebp)
	c->proc = proc;
f010aa93:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa96:	8b 55 08             	mov    0x8(%ebp),%edx
f010aa99:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)

	// Initialize the TSS field of the gdt.
	c->gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&(c->ts)), sizeof(struct Taskstate), 0);
f010aa9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aaa2:	83 c0 0c             	add    $0xc,%eax
f010aaa5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aaa8:	83 c2 0c             	add    $0xc,%edx
f010aaab:	c1 ea 10             	shr    $0x10,%edx
f010aaae:	88 d3                	mov    %dl,%bl
f010aab0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aab3:	83 c2 0c             	add    $0xc,%edx
f010aab6:	c1 ea 18             	shr    $0x18,%edx
f010aab9:	88 d1                	mov    %dl,%cl
f010aabb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aabe:	66 c7 82 9c 00 00 00 	movw   $0x68,0x9c(%edx)
f010aac5:	68 00 
f010aac7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aaca:	66 89 82 9e 00 00 00 	mov    %ax,0x9e(%edx)
f010aad1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aad4:	88 98 a0 00 00 00    	mov    %bl,0xa0(%eax)
f010aada:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aadd:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010aae3:	83 e2 f0             	and    $0xfffffff0,%edx
f010aae6:	83 ca 09             	or     $0x9,%edx
f010aae9:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010aaef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aaf2:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010aaf8:	83 ca 10             	or     $0x10,%edx
f010aafb:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010ab01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab04:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010ab0a:	83 e2 9f             	and    $0xffffff9f,%edx
f010ab0d:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010ab13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab16:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010ab1c:	83 ca 80             	or     $0xffffff80,%edx
f010ab1f:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010ab25:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab28:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010ab2e:	83 e2 f0             	and    $0xfffffff0,%edx
f010ab31:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010ab37:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab3a:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010ab40:	83 e2 ef             	and    $0xffffffef,%edx
f010ab43:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010ab49:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab4c:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010ab52:	83 e2 df             	and    $0xffffffdf,%edx
f010ab55:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010ab5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab5e:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010ab64:	83 ca 40             	or     $0x40,%edx
f010ab67:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010ab6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab70:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010ab76:	83 e2 7f             	and    $0x7f,%edx
f010ab79:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010ab7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab82:	88 88 a3 00 00 00    	mov    %cl,0xa3(%eax)
	c->gdt[GD_TSS >> 3].sd_s = 0;
f010ab88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab8b:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010ab91:	83 e2 ef             	and    $0xffffffef,%edx
f010ab94:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)

	//adjust the default stack for the trap to be the user kernel stack
	c->ts.ts_esp0 = (uint32)(c->proc->kstack + KERNEL_STACK_SIZE);
f010ab9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab9d:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010aba3:	8b 40 70             	mov    0x70(%eax),%eax
f010aba6:	05 00 80 00 00       	add    $0x8000,%eax
f010abab:	89 c2                	mov    %eax,%edx
f010abad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abb0:	89 50 10             	mov    %edx,0x10(%eax)
	c->ts.ts_ss0 = GD_KD;
f010abb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abb6:	66 c7 40 14 10 00    	movw   $0x10,0x14(%eax)
f010abbc:	66 c7 45 f2 28 00    	movw   $0x28,-0xe(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010abc2:	66 8b 45 f2          	mov    -0xe(%ebp),%ax
f010abc6:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	//load the user page directory
	lcr3(c->proc->env_cr3) ;
f010abc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abcc:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010abd2:	8b 40 68             	mov    0x68(%eax),%eax
f010abd5:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010abd8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010abdb:	0f 22 d8             	mov    %eax,%cr3

	popcli();	//enable interrupt
f010abde:	e8 2f c6 ff ff       	call   f0107212 <popcli>
}
f010abe3:	90                   	nop
f010abe4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010abe7:	c9                   	leave  
f010abe8:	c3                   	ret    

f010abe9 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f010abe9:	55                   	push   %ebp
f010abea:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f010abec:	8b 15 b4 f3 59 f0    	mov    0xf059f3b4,%edx
f010abf2:	8b 45 08             	mov    0x8(%ebp),%eax
f010abf5:	89 10                	mov    %edx,(%eax)
f010abf7:	8b 45 08             	mov    0x8(%ebp),%eax
f010abfa:	8b 00                	mov    (%eax),%eax
f010abfc:	85 c0                	test   %eax,%eax
f010abfe:	75 07                	jne    f010ac07 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f010ac00:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f010ac05:	eb 11                	jmp    f010ac18 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f010ac07:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac0a:	8b 00                	mov    (%eax),%eax
f010ac0c:	c7 40 18 06 00 00 00 	movl   $0x6,0x18(%eax)
	return 0;
f010ac13:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ac18:	5d                   	pop    %ebp
f010ac19:	c3                   	ret    

f010ac1a <free_environment>:
//===============================
// 2) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f010ac1a:	55                   	push   %ebp
f010ac1b:	89 e5                	mov    %esp,%ebp
f010ac1d:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f010ac20:	83 ec 04             	sub    $0x4,%esp
f010ac23:	68 6c da 01 00       	push   $0x1da6c
f010ac28:	6a 00                	push   $0x0
f010ac2a:	ff 75 08             	pushl  0x8(%ebp)
f010ac2d:	e8 fa 7a 01 00       	call   f012272c <memset>
f010ac32:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f010ac35:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac38:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f010ac3f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010ac43:	75 17                	jne    f010ac5c <free_environment+0x42>
f010ac45:	83 ec 04             	sub    $0x4,%esp
f010ac48:	68 c8 7c 12 f0       	push   $0xf0127cc8
f010ac4d:	68 bd 02 00 00       	push   $0x2bd
f010ac52:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010ac57:	e8 be 56 ff ff       	call   f010031a <_panic>
f010ac5c:	8b 15 b4 f3 59 f0    	mov    0xf059f3b4,%edx
f010ac62:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac65:	89 50 08             	mov    %edx,0x8(%eax)
f010ac68:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac6b:	8b 40 08             	mov    0x8(%eax),%eax
f010ac6e:	85 c0                	test   %eax,%eax
f010ac70:	74 0d                	je     f010ac7f <free_environment+0x65>
f010ac72:	a1 b4 f3 59 f0       	mov    0xf059f3b4,%eax
f010ac77:	8b 55 08             	mov    0x8(%ebp),%edx
f010ac7a:	89 50 0c             	mov    %edx,0xc(%eax)
f010ac7d:	eb 08                	jmp    f010ac87 <free_environment+0x6d>
f010ac7f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac82:	a3 b8 f3 59 f0       	mov    %eax,0xf059f3b8
f010ac87:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac8a:	a3 b4 f3 59 f0       	mov    %eax,0xf059f3b4
f010ac8f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac92:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f010ac99:	a1 c0 f3 59 f0       	mov    0xf059f3c0,%eax
f010ac9e:	40                   	inc    %eax
f010ac9f:	a3 c0 f3 59 f0       	mov    %eax,0xf059f3c0
}
f010aca4:	90                   	nop
f010aca5:	c9                   	leave  
f010aca6:	c3                   	ret    

f010aca7 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f010aca7:	55                   	push   %ebp
f010aca8:	89 e5                	mov    %esp,%ebp
f010acaa:	53                   	push   %ebx
f010acab:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f010acae:	8b 45 0c             	mov    0xc(%ebp),%eax
f010acb1:	8b 40 0c             	mov    0xc(%eax),%eax
f010acb4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f010acb7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010acba:	8b 40 08             	mov    0x8(%eax),%eax
f010acbd:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f010acc0:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010acc7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010acca:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010accd:	01 c2                	add    %eax,%edx
f010accf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010acd2:	01 d0                	add    %edx,%eax
f010acd4:	48                   	dec    %eax
f010acd5:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010acd8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010acdb:	ba 00 00 00 00       	mov    $0x0,%edx
f010ace0:	f7 75 dc             	divl   -0x24(%ebp)
f010ace3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ace6:	29 d0                	sub    %edx,%eax
f010ace8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f010aceb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010acee:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010acf1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010acf4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010acf9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f010acfc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f010ad03:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f010ad0a:	8b 45 10             	mov    0x10(%ebp),%eax
f010ad0d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f010ad13:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f010ad1a:	0f 85 35 06 00 00    	jne    f010b355 <program_segment_alloc_map_copy_workingset+0x6ae>
f010ad20:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad23:	83 c0 20             	add    $0x20,%eax
f010ad26:	83 ec 08             	sub    $0x8,%esp
f010ad29:	68 a8 7e 12 f0       	push   $0xf0127ea8
f010ad2e:	50                   	push   %eax
f010ad2f:	e8 16 79 01 00       	call   f012264a <strcmp>
f010ad34:	83 c4 10             	add    $0x10,%esp
f010ad37:	85 c0                	test   %eax,%eax
f010ad39:	0f 84 16 06 00 00    	je     f010b355 <program_segment_alloc_map_copy_workingset+0x6ae>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f010ad3f:	8b 45 14             	mov    0x14(%ebp),%eax
f010ad42:	83 f8 06             	cmp    $0x6,%eax
f010ad45:	76 05                	jbe    f010ad4c <program_segment_alloc_map_copy_workingset+0xa5>
f010ad47:	b8 06 00 00 00       	mov    $0x6,%eax
f010ad4c:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010ad4f:	e9 01 06 00 00       	jmp    f010b355 <program_segment_alloc_map_copy_workingset+0x6ae>
	{
		// Allocate a page
		allocate_frame(&p) ;
f010ad54:	83 ec 0c             	sub    $0xc,%esp
f010ad57:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ad5a:	50                   	push   %eax
f010ad5b:	e8 70 d4 ff ff       	call   f01081d0 <allocate_frame>
f010ad60:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f010ad63:	8b 55 c0             	mov    -0x40(%ebp),%edx
f010ad66:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad69:	8b 40 64             	mov    0x64(%eax),%eax
f010ad6c:	6a 06                	push   $0x6
f010ad6e:	ff 75 f4             	pushl  -0xc(%ebp)
f010ad71:	52                   	push   %edx
f010ad72:	50                   	push   %eax
f010ad73:	e8 6c da ff ff       	call   f01087e4 <loadtime_map_frame>
f010ad78:	83 c4 10             	add    $0x10,%esp
		wse->time_stamp = 0;
		LIST_INSERT_TAIL(&(e->page_WS_list), wse);

#else
		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));
		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f010ad7b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad7e:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010ad84:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ad87:	89 d0                	mov    %edx,%eax
f010ad89:	01 c0                	add    %eax,%eax
f010ad8b:	01 d0                	add    %edx,%eax
f010ad8d:	c1 e0 03             	shl    $0x3,%eax
f010ad90:	01 c8                	add    %ecx,%eax
f010ad92:	8d 90 88 00 00 00    	lea    0x88(%eax),%edx
f010ad98:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad9b:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f010ad9d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ada0:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010ada6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ada9:	89 d0                	mov    %edx,%eax
f010adab:	01 c0                	add    %eax,%eax
f010adad:	01 d0                	add    %edx,%eax
f010adaf:	c1 e0 03             	shl    $0x3,%eax
f010adb2:	01 c8                	add    %ecx,%eax
f010adb4:	05 8c 00 00 00       	add    $0x8c,%eax
f010adb9:	c6 00 00             	movb   $0x0,(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f010adbc:	8b 45 08             	mov    0x8(%ebp),%eax
f010adbf:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010adc5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010adc8:	89 d0                	mov    %edx,%eax
f010adca:	01 c0                	add    %eax,%eax
f010adcc:	01 d0                	add    %edx,%eax
f010adce:	c1 e0 03             	shl    $0x3,%eax
f010add1:	01 c8                	add    %ecx,%eax
f010add3:	05 90 00 00 00       	add    $0x90,%eax
f010add8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#endif
		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010adde:	83 ec 0c             	sub    $0xc,%esp
f010ade1:	6a 02                	push   $0x2
f010ade3:	e8 28 39 00 00       	call   f010e710 <isPageReplacmentAlgorithmLRU>
f010ade8:	83 c4 10             	add    $0x10,%esp
f010adeb:	85 c0                	test   %eax,%eax
f010aded:	0f 84 2c 04 00 00    	je     f010b21f <program_segment_alloc_map_copy_workingset+0x578>
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), wse);
			}
#else

			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010adf3:	8b 45 08             	mov    0x8(%ebp),%eax
f010adf6:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010adfc:	89 d0                	mov    %edx,%eax
f010adfe:	01 c0                	add    %eax,%eax
f010ae00:	01 d0                	add    %edx,%eax
f010ae02:	c1 e0 03             	shl    $0x3,%eax
f010ae05:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010ae0b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae0e:	01 d0                	add    %edx,%eax
f010ae10:	83 c0 08             	add    $0x8,%eax
f010ae13:	85 c0                	test   %eax,%eax
f010ae15:	75 17                	jne    f010ae2e <program_segment_alloc_map_copy_workingset+0x187>
f010ae17:	83 ec 04             	sub    $0x4,%esp
f010ae1a:	68 7d 7d 12 f0       	push   $0xf0127d7d
f010ae1f:	68 00 03 00 00       	push   $0x300
f010ae24:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010ae29:	e8 ec 54 ff ff       	call   f010031a <_panic>
f010ae2e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae31:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010ae37:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ae3a:	89 d0                	mov    %edx,%eax
f010ae3c:	01 c0                	add    %eax,%eax
f010ae3e:	01 d0                	add    %edx,%eax
f010ae40:	c1 e0 03             	shl    $0x3,%eax
f010ae43:	01 c8                	add    %ecx,%eax
f010ae45:	05 98 00 00 00       	add    $0x98,%eax
f010ae4a:	8b 00                	mov    (%eax),%eax
f010ae4c:	85 c0                	test   %eax,%eax
f010ae4e:	74 41                	je     f010ae91 <program_segment_alloc_map_copy_workingset+0x1ea>
f010ae50:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae53:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010ae59:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ae5c:	89 d0                	mov    %edx,%eax
f010ae5e:	01 c0                	add    %eax,%eax
f010ae60:	01 d0                	add    %edx,%eax
f010ae62:	c1 e0 03             	shl    $0x3,%eax
f010ae65:	01 c8                	add    %ecx,%eax
f010ae67:	05 98 00 00 00       	add    $0x98,%eax
f010ae6c:	8b 10                	mov    (%eax),%edx
f010ae6e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae71:	8b 88 58 d5 01 00    	mov    0x1d558(%eax),%ecx
f010ae77:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010ae7a:	89 c8                	mov    %ecx,%eax
f010ae7c:	01 c0                	add    %eax,%eax
f010ae7e:	01 c8                	add    %ecx,%eax
f010ae80:	c1 e0 03             	shl    $0x3,%eax
f010ae83:	01 d8                	add    %ebx,%eax
f010ae85:	05 9c 00 00 00       	add    $0x9c,%eax
f010ae8a:	8b 00                	mov    (%eax),%eax
f010ae8c:	89 42 14             	mov    %eax,0x14(%edx)
f010ae8f:	eb 27                	jmp    f010aeb8 <program_segment_alloc_map_copy_workingset+0x211>
f010ae91:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae94:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010ae9a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ae9d:	89 d0                	mov    %edx,%eax
f010ae9f:	01 c0                	add    %eax,%eax
f010aea1:	01 d0                	add    %edx,%eax
f010aea3:	c1 e0 03             	shl    $0x3,%eax
f010aea6:	01 c8                	add    %ecx,%eax
f010aea8:	05 9c 00 00 00       	add    $0x9c,%eax
f010aead:	8b 10                	mov    (%eax),%edx
f010aeaf:	8b 45 08             	mov    0x8(%ebp),%eax
f010aeb2:	89 90 4c d5 01 00    	mov    %edx,0x1d54c(%eax)
f010aeb8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aebb:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010aec1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010aec4:	89 d0                	mov    %edx,%eax
f010aec6:	01 c0                	add    %eax,%eax
f010aec8:	01 d0                	add    %edx,%eax
f010aeca:	c1 e0 03             	shl    $0x3,%eax
f010aecd:	01 c8                	add    %ecx,%eax
f010aecf:	05 9c 00 00 00       	add    $0x9c,%eax
f010aed4:	8b 00                	mov    (%eax),%eax
f010aed6:	85 c0                	test   %eax,%eax
f010aed8:	74 41                	je     f010af1b <program_segment_alloc_map_copy_workingset+0x274>
f010aeda:	8b 45 08             	mov    0x8(%ebp),%eax
f010aedd:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010aee3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010aee6:	89 d0                	mov    %edx,%eax
f010aee8:	01 c0                	add    %eax,%eax
f010aeea:	01 d0                	add    %edx,%eax
f010aeec:	c1 e0 03             	shl    $0x3,%eax
f010aeef:	01 c8                	add    %ecx,%eax
f010aef1:	05 9c 00 00 00       	add    $0x9c,%eax
f010aef6:	8b 10                	mov    (%eax),%edx
f010aef8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aefb:	8b 88 58 d5 01 00    	mov    0x1d558(%eax),%ecx
f010af01:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010af04:	89 c8                	mov    %ecx,%eax
f010af06:	01 c0                	add    %eax,%eax
f010af08:	01 c8                	add    %ecx,%eax
f010af0a:	c1 e0 03             	shl    $0x3,%eax
f010af0d:	01 d8                	add    %ebx,%eax
f010af0f:	05 98 00 00 00       	add    $0x98,%eax
f010af14:	8b 00                	mov    (%eax),%eax
f010af16:	89 42 10             	mov    %eax,0x10(%edx)
f010af19:	eb 27                	jmp    f010af42 <program_segment_alloc_map_copy_workingset+0x29b>
f010af1b:	8b 45 08             	mov    0x8(%ebp),%eax
f010af1e:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010af24:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010af27:	89 d0                	mov    %edx,%eax
f010af29:	01 c0                	add    %eax,%eax
f010af2b:	01 d0                	add    %edx,%eax
f010af2d:	c1 e0 03             	shl    $0x3,%eax
f010af30:	01 c8                	add    %ecx,%eax
f010af32:	05 98 00 00 00       	add    $0x98,%eax
f010af37:	8b 10                	mov    (%eax),%edx
f010af39:	8b 45 08             	mov    0x8(%ebp),%eax
f010af3c:	89 90 48 d5 01 00    	mov    %edx,0x1d548(%eax)
f010af42:	8b 45 08             	mov    0x8(%ebp),%eax
f010af45:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010af4b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010af4e:	89 d0                	mov    %edx,%eax
f010af50:	01 c0                	add    %eax,%eax
f010af52:	01 d0                	add    %edx,%eax
f010af54:	c1 e0 03             	shl    $0x3,%eax
f010af57:	01 c8                	add    %ecx,%eax
f010af59:	05 98 00 00 00       	add    $0x98,%eax
f010af5e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010af64:	8b 45 08             	mov    0x8(%ebp),%eax
f010af67:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010af6d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010af70:	89 d0                	mov    %edx,%eax
f010af72:	01 c0                	add    %eax,%eax
f010af74:	01 d0                	add    %edx,%eax
f010af76:	c1 e0 03             	shl    $0x3,%eax
f010af79:	01 c8                	add    %ecx,%eax
f010af7b:	05 9c 00 00 00       	add    $0x9c,%eax
f010af80:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010af86:	8b 45 08             	mov    0x8(%ebp),%eax
f010af89:	8b 80 54 d5 01 00    	mov    0x1d554(%eax),%eax
f010af8f:	8d 50 ff             	lea    -0x1(%eax),%edx
f010af92:	8b 45 08             	mov    0x8(%ebp),%eax
f010af95:	89 90 54 d5 01 00    	mov    %edx,0x1d554(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010af9b:	8b 45 08             	mov    0x8(%ebp),%eax
f010af9e:	8b 90 1c da 01 00    	mov    0x1da1c(%eax),%edx
f010afa4:	8b 45 08             	mov    0x8(%ebp),%eax
f010afa7:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010afad:	48                   	dec    %eax
f010afae:	39 c2                	cmp    %eax,%edx
f010afb0:	0f 83 37 01 00 00    	jae    f010b0ed <program_segment_alloc_map_copy_workingset+0x446>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010afb6:	8b 45 08             	mov    0x8(%ebp),%eax
f010afb9:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010afbf:	89 d0                	mov    %edx,%eax
f010afc1:	01 c0                	add    %eax,%eax
f010afc3:	01 d0                	add    %edx,%eax
f010afc5:	c1 e0 03             	shl    $0x3,%eax
f010afc8:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010afce:	8b 45 08             	mov    0x8(%ebp),%eax
f010afd1:	01 d0                	add    %edx,%eax
f010afd3:	83 c0 08             	add    $0x8,%eax
f010afd6:	85 c0                	test   %eax,%eax
f010afd8:	75 17                	jne    f010aff1 <program_segment_alloc_map_copy_workingset+0x34a>
f010afda:	83 ec 04             	sub    $0x4,%esp
f010afdd:	68 c8 7c 12 f0       	push   $0xf0127cc8
f010afe2:	68 04 03 00 00       	push   $0x304
f010afe7:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010afec:	e8 29 53 ff ff       	call   f010031a <_panic>
f010aff1:	8b 45 08             	mov    0x8(%ebp),%eax
f010aff4:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010affa:	8b 45 08             	mov    0x8(%ebp),%eax
f010affd:	8b 88 10 da 01 00    	mov    0x1da10(%eax),%ecx
f010b003:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010b006:	89 d0                	mov    %edx,%eax
f010b008:	01 c0                	add    %eax,%eax
f010b00a:	01 d0                	add    %edx,%eax
f010b00c:	c1 e0 03             	shl    $0x3,%eax
f010b00f:	01 d8                	add    %ebx,%eax
f010b011:	05 98 00 00 00       	add    $0x98,%eax
f010b016:	89 08                	mov    %ecx,(%eax)
f010b018:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b01b:	89 d0                	mov    %edx,%eax
f010b01d:	01 c0                	add    %eax,%eax
f010b01f:	01 d0                	add    %edx,%eax
f010b021:	c1 e0 03             	shl    $0x3,%eax
f010b024:	01 c8                	add    %ecx,%eax
f010b026:	05 98 00 00 00       	add    $0x98,%eax
f010b02b:	8b 00                	mov    (%eax),%eax
f010b02d:	85 c0                	test   %eax,%eax
f010b02f:	74 2e                	je     f010b05f <program_segment_alloc_map_copy_workingset+0x3b8>
f010b031:	8b 45 08             	mov    0x8(%ebp),%eax
f010b034:	8b 90 10 da 01 00    	mov    0x1da10(%eax),%edx
f010b03a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b03d:	8b 88 58 d5 01 00    	mov    0x1d558(%eax),%ecx
f010b043:	89 c8                	mov    %ecx,%eax
f010b045:	01 c0                	add    %eax,%eax
f010b047:	01 c8                	add    %ecx,%eax
f010b049:	c1 e0 03             	shl    $0x3,%eax
f010b04c:	8d 88 80 00 00 00    	lea    0x80(%eax),%ecx
f010b052:	8b 45 08             	mov    0x8(%ebp),%eax
f010b055:	01 c8                	add    %ecx,%eax
f010b057:	83 c0 08             	add    $0x8,%eax
f010b05a:	89 42 14             	mov    %eax,0x14(%edx)
f010b05d:	eb 29                	jmp    f010b088 <program_segment_alloc_map_copy_workingset+0x3e1>
f010b05f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b062:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b068:	89 d0                	mov    %edx,%eax
f010b06a:	01 c0                	add    %eax,%eax
f010b06c:	01 d0                	add    %edx,%eax
f010b06e:	c1 e0 03             	shl    $0x3,%eax
f010b071:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b077:	8b 45 08             	mov    0x8(%ebp),%eax
f010b07a:	01 d0                	add    %edx,%eax
f010b07c:	8d 50 08             	lea    0x8(%eax),%edx
f010b07f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b082:	89 90 14 da 01 00    	mov    %edx,0x1da14(%eax)
f010b088:	8b 45 08             	mov    0x8(%ebp),%eax
f010b08b:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b091:	89 d0                	mov    %edx,%eax
f010b093:	01 c0                	add    %eax,%eax
f010b095:	01 d0                	add    %edx,%eax
f010b097:	c1 e0 03             	shl    $0x3,%eax
f010b09a:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b0a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0a3:	01 d0                	add    %edx,%eax
f010b0a5:	8d 50 08             	lea    0x8(%eax),%edx
f010b0a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0ab:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
f010b0b1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0b4:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b0ba:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b0bd:	89 d0                	mov    %edx,%eax
f010b0bf:	01 c0                	add    %eax,%eax
f010b0c1:	01 d0                	add    %edx,%eax
f010b0c3:	c1 e0 03             	shl    $0x3,%eax
f010b0c6:	01 c8                	add    %ecx,%eax
f010b0c8:	05 9c 00 00 00       	add    $0x9c,%eax
f010b0cd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b0d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0d6:	8b 80 1c da 01 00    	mov    0x1da1c(%eax),%eax
f010b0dc:	8d 50 01             	lea    0x1(%eax),%edx
f010b0df:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0e2:	89 90 1c da 01 00    	mov    %edx,0x1da1c(%eax)
f010b0e8:	e9 32 01 00 00       	jmp    f010b21f <program_segment_alloc_map_copy_workingset+0x578>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010b0ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0f0:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b0f6:	89 d0                	mov    %edx,%eax
f010b0f8:	01 c0                	add    %eax,%eax
f010b0fa:	01 d0                	add    %edx,%eax
f010b0fc:	c1 e0 03             	shl    $0x3,%eax
f010b0ff:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b105:	8b 45 08             	mov    0x8(%ebp),%eax
f010b108:	01 d0                	add    %edx,%eax
f010b10a:	83 c0 08             	add    $0x8,%eax
f010b10d:	85 c0                	test   %eax,%eax
f010b10f:	75 17                	jne    f010b128 <program_segment_alloc_map_copy_workingset+0x481>
f010b111:	83 ec 04             	sub    $0x4,%esp
f010b114:	68 c8 7c 12 f0       	push   $0xf0127cc8
f010b119:	68 09 03 00 00       	push   $0x309
f010b11e:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010b123:	e8 f2 51 ff ff       	call   f010031a <_panic>
f010b128:	8b 45 08             	mov    0x8(%ebp),%eax
f010b12b:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b131:	8b 45 08             	mov    0x8(%ebp),%eax
f010b134:	8b 88 20 da 01 00    	mov    0x1da20(%eax),%ecx
f010b13a:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010b13d:	89 d0                	mov    %edx,%eax
f010b13f:	01 c0                	add    %eax,%eax
f010b141:	01 d0                	add    %edx,%eax
f010b143:	c1 e0 03             	shl    $0x3,%eax
f010b146:	01 d8                	add    %ebx,%eax
f010b148:	05 98 00 00 00       	add    $0x98,%eax
f010b14d:	89 08                	mov    %ecx,(%eax)
f010b14f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b152:	89 d0                	mov    %edx,%eax
f010b154:	01 c0                	add    %eax,%eax
f010b156:	01 d0                	add    %edx,%eax
f010b158:	c1 e0 03             	shl    $0x3,%eax
f010b15b:	01 c8                	add    %ecx,%eax
f010b15d:	05 98 00 00 00       	add    $0x98,%eax
f010b162:	8b 00                	mov    (%eax),%eax
f010b164:	85 c0                	test   %eax,%eax
f010b166:	74 2e                	je     f010b196 <program_segment_alloc_map_copy_workingset+0x4ef>
f010b168:	8b 45 08             	mov    0x8(%ebp),%eax
f010b16b:	8b 90 20 da 01 00    	mov    0x1da20(%eax),%edx
f010b171:	8b 45 08             	mov    0x8(%ebp),%eax
f010b174:	8b 88 58 d5 01 00    	mov    0x1d558(%eax),%ecx
f010b17a:	89 c8                	mov    %ecx,%eax
f010b17c:	01 c0                	add    %eax,%eax
f010b17e:	01 c8                	add    %ecx,%eax
f010b180:	c1 e0 03             	shl    $0x3,%eax
f010b183:	8d 88 80 00 00 00    	lea    0x80(%eax),%ecx
f010b189:	8b 45 08             	mov    0x8(%ebp),%eax
f010b18c:	01 c8                	add    %ecx,%eax
f010b18e:	83 c0 08             	add    $0x8,%eax
f010b191:	89 42 14             	mov    %eax,0x14(%edx)
f010b194:	eb 29                	jmp    f010b1bf <program_segment_alloc_map_copy_workingset+0x518>
f010b196:	8b 45 08             	mov    0x8(%ebp),%eax
f010b199:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b19f:	89 d0                	mov    %edx,%eax
f010b1a1:	01 c0                	add    %eax,%eax
f010b1a3:	01 d0                	add    %edx,%eax
f010b1a5:	c1 e0 03             	shl    $0x3,%eax
f010b1a8:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b1ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1b1:	01 d0                	add    %edx,%eax
f010b1b3:	8d 50 08             	lea    0x8(%eax),%edx
f010b1b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1b9:	89 90 24 da 01 00    	mov    %edx,0x1da24(%eax)
f010b1bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1c2:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b1c8:	89 d0                	mov    %edx,%eax
f010b1ca:	01 c0                	add    %eax,%eax
f010b1cc:	01 d0                	add    %edx,%eax
f010b1ce:	c1 e0 03             	shl    $0x3,%eax
f010b1d1:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b1d7:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1da:	01 d0                	add    %edx,%eax
f010b1dc:	8d 50 08             	lea    0x8(%eax),%edx
f010b1df:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1e2:	89 90 20 da 01 00    	mov    %edx,0x1da20(%eax)
f010b1e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1eb:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b1f1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b1f4:	89 d0                	mov    %edx,%eax
f010b1f6:	01 c0                	add    %eax,%eax
f010b1f8:	01 d0                	add    %edx,%eax
f010b1fa:	c1 e0 03             	shl    $0x3,%eax
f010b1fd:	01 c8                	add    %ecx,%eax
f010b1ff:	05 9c 00 00 00       	add    $0x9c,%eax
f010b204:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b20a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b20d:	8b 80 2c da 01 00    	mov    0x1da2c(%eax),%eax
f010b213:	8d 50 01             	lea    0x1(%eax),%edx
f010b216:	8b 45 08             	mov    0x8(%ebp),%eax
f010b219:	89 90 2c da 01 00    	mov    %edx,0x1da2c(%eax)
		else
		{
			e->page_last_WS_element = NULL;
		}
#else
		e->page_last_WS_index ++;
f010b21f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b222:	8b 80 58 d5 01 00    	mov    0x1d558(%eax),%eax
f010b228:	8d 50 01             	lea    0x1(%eax),%edx
f010b22b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b22e:	89 90 58 d5 01 00    	mov    %edx,0x1d558(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010b234:	8b 45 08             	mov    0x8(%ebp),%eax
f010b237:	8b 80 58 d5 01 00    	mov    0x1d558(%eax),%eax
f010b23d:	8b 55 08             	mov    0x8(%ebp),%edx
f010b240:	8b 8a 84 00 00 00    	mov    0x84(%edx),%ecx
f010b246:	ba 00 00 00 00       	mov    $0x0,%edx
f010b24b:	f7 f1                	div    %ecx
f010b24d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b250:	89 90 58 d5 01 00    	mov    %edx,0x1d558(%eax)
#endif
		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010b256:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b259:	c1 e8 16             	shr    $0x16,%eax
f010b25c:	89 c2                	mov    %eax,%edx
f010b25e:	8b 45 18             	mov    0x18(%ebp),%eax
f010b261:	8b 00                	mov    (%eax),%eax
f010b263:	39 c2                	cmp    %eax,%edx
f010b265:	0f 84 d3 00 00 00    	je     f010b33e <program_segment_alloc_map_copy_workingset+0x697>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010b26b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b26e:	8b 90 0c da 01 00    	mov    0x1da0c(%eax),%edx
f010b274:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b277:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010b27a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010b27d:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010b282:	89 c1                	mov    %eax,%ecx
f010b284:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010b287:	89 d0                	mov    %edx,%eax
f010b289:	01 c0                	add    %eax,%eax
f010b28b:	01 d0                	add    %edx,%eax
f010b28d:	c1 e0 03             	shl    $0x3,%eax
f010b290:	01 d8                	add    %ebx,%eax
f010b292:	05 5c d5 01 00       	add    $0x1d55c,%eax
f010b297:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010b299:	8b 45 08             	mov    0x8(%ebp),%eax
f010b29c:	8b 90 0c da 01 00    	mov    0x1da0c(%eax),%edx
f010b2a2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b2a5:	89 d0                	mov    %edx,%eax
f010b2a7:	01 c0                	add    %eax,%eax
f010b2a9:	01 d0                	add    %edx,%eax
f010b2ab:	c1 e0 03             	shl    $0x3,%eax
f010b2ae:	01 c8                	add    %ecx,%eax
f010b2b0:	05 60 d5 01 00       	add    $0x1d560,%eax
f010b2b5:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010b2b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2bb:	8b 90 0c da 01 00    	mov    0x1da0c(%eax),%edx
f010b2c1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b2c4:	89 d0                	mov    %edx,%eax
f010b2c6:	01 c0                	add    %eax,%eax
f010b2c8:	01 d0                	add    %edx,%eax
f010b2ca:	c1 e0 03             	shl    $0x3,%eax
f010b2cd:	01 c8                	add    %ecx,%eax
f010b2cf:	05 64 d5 01 00       	add    $0x1d564,%eax
f010b2d4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010b2da:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2dd:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f010b2e3:	8d 50 01             	lea    0x1(%eax),%edx
f010b2e6:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2e9:	89 90 0c da 01 00    	mov    %edx,0x1da0c(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010b2ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2f2:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f010b2f8:	b9 32 00 00 00       	mov    $0x32,%ecx
f010b2fd:	ba 00 00 00 00       	mov    $0x0,%edx
f010b302:	f7 f1                	div    %ecx
f010b304:	8b 45 08             	mov    0x8(%ebp),%eax
f010b307:	89 90 0c da 01 00    	mov    %edx,0x1da0c(%eax)
			if (e->table_last_WS_index == 0)
f010b30d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b310:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f010b316:	85 c0                	test   %eax,%eax
f010b318:	75 17                	jne    f010b331 <program_segment_alloc_map_copy_workingset+0x68a>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010b31a:	83 ec 04             	sub    $0x4,%esp
f010b31d:	68 ac 7e 12 f0       	push   $0xf0127eac
f010b322:	68 24 03 00 00       	push   $0x324
f010b327:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010b32c:	e8 e9 4f ff ff       	call   f010031a <_panic>
			(*lastTableNumber) = PDX(iVA);
f010b331:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b334:	c1 e8 16             	shr    $0x16,%eax
f010b337:	89 c2                	mov    %eax,%edx
f010b339:	8b 45 18             	mov    0x18(%ebp),%eax
f010b33c:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010b33e:	8b 45 10             	mov    0x10(%ebp),%eax
f010b341:	8b 00                	mov    (%eax),%eax
f010b343:	8d 50 01             	lea    0x1(%eax),%edx
f010b346:	8b 45 10             	mov    0x10(%ebp),%eax
f010b349:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010b34b:	ff 45 f0             	incl   -0x10(%ebp)
f010b34e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010b355:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b358:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010b35b:	73 0c                	jae    f010b369 <program_segment_alloc_map_copy_workingset+0x6c2>
f010b35d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b360:	3b 45 14             	cmp    0x14(%ebp),%eax
f010b363:	0f 82 eb f9 ff ff    	jb     f010ad54 <program_segment_alloc_map_copy_workingset+0xad>

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}
	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010b369:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b36c:	8b 00                	mov    (%eax),%eax
f010b36e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010b371:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b374:	8b 40 0c             	mov    0xc(%eax),%eax
f010b377:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010b37a:	eb 10                	jmp    f010b38c <program_segment_alloc_map_copy_workingset+0x6e5>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010b37c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b37f:	8a 10                	mov    (%eax),%dl
f010b381:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b384:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010b386:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010b389:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010b38c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b38f:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010b392:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010b395:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b39a:	89 c2                	mov    %eax,%edx
f010b39c:	8b 45 10             	mov    0x10(%ebp),%eax
f010b39f:	8b 00                	mov    (%eax),%eax
f010b3a1:	c1 e0 0c             	shl    $0xc,%eax
f010b3a4:	01 c2                	add    %eax,%edx
f010b3a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b3a9:	39 c2                	cmp    %eax,%edx
f010b3ab:	76 1d                	jbe    f010b3ca <program_segment_alloc_map_copy_workingset+0x723>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010b3ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b3b0:	8b 50 04             	mov    0x4(%eax),%edx
f010b3b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b3b6:	01 c2                	add    %eax,%edx
f010b3b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010b3bb:	39 c2                	cmp    %eax,%edx
f010b3bd:	77 bd                	ja     f010b37c <program_segment_alloc_map_copy_workingset+0x6d5>
		dst_ptr++ ;
		src_ptr++ ;
	}

	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010b3bf:	eb 09                	jmp    f010b3ca <program_segment_alloc_map_copy_workingset+0x723>
	{
		*dst_ptr = 0;
f010b3c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b3c4:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010b3c7:	ff 45 e8             	incl   -0x18(%ebp)
		dst_ptr++ ;
		src_ptr++ ;
	}

	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010b3ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b3cd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010b3d0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010b3d3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b3d8:	89 c2                	mov    %eax,%edx
f010b3da:	8b 45 10             	mov    0x10(%ebp),%eax
f010b3dd:	8b 00                	mov    (%eax),%eax
f010b3df:	c1 e0 0c             	shl    $0xc,%eax
f010b3e2:	01 c2                	add    %eax,%edx
f010b3e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b3e7:	39 c2                	cmp    %eax,%edx
f010b3e9:	77 d6                	ja     f010b3c1 <program_segment_alloc_map_copy_workingset+0x71a>
	{
		*dst_ptr = 0;
		dst_ptr++ ;
	}

	return 0;
f010b3eb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b3f0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010b3f3:	c9                   	leave  
f010b3f4:	c3                   	ret    

f010b3f5 <create_user_directory>:

//==================================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f010b3f5:	55                   	push   %ebp
f010b3f6:	89 e5                	mov    %esp,%ebp
f010b3f8:	83 ec 18             	sub    $0x18,%esp
	//panic("create_user_directory() is not implemented yet...!!");

	//Use kmalloc() to allocate a new directory

	//change this "return" according to your answer
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f010b3fb:	83 ec 0c             	sub    $0xc,%esp
f010b3fe:	68 00 10 00 00       	push   $0x1000
f010b403:	e8 ae d6 ff ff       	call   f0108ab6 <kmalloc>
f010b408:	83 c4 10             	add    $0x10,%esp
f010b40b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f010b40e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b412:	75 17                	jne    f010b42b <create_user_directory+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010b414:	83 ec 04             	sub    $0x4,%esp
f010b417:	68 4f 7f 12 f0       	push   $0xf0127f4f
f010b41c:	68 54 03 00 00       	push   $0x354
f010b421:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010b426:	e8 ef 4e ff ff       	call   f010031a <_panic>
	}
	return ptr_user_page_directory;
f010b42b:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//return 0;
}
f010b42e:	c9                   	leave  
f010b42f:	c3                   	ret    

f010b430 <create_user_kern_stack>:
uint32 __cur_k_stk = KERNEL_HEAP_START;
//===========================================================
// 5) ALLOCATE SPACE FOR USER KERNEL STACK (One Per Process):
//===========================================================
void* create_user_kern_stack(uint32* ptr_user_page_directory)
{
f010b430:	55                   	push   %ebp
f010b431:	89 e5                	mov    %esp,%ebp
f010b433:	83 ec 18             	sub    $0x18,%esp
	//remember to leave its bottom page as a GUARD PAGE (i.e. not mapped)
	//return a pointer to the start of the allocated space (including the GUARD PAGE)


#else
	if (KERNEL_HEAP_MAX - __cur_k_stk < KERNEL_STACK_SIZE)
f010b436:	a1 5c e9 17 f0       	mov    0xf017e95c,%eax
f010b43b:	ba 00 f0 ff ff       	mov    $0xfffff000,%edx
f010b440:	29 c2                	sub    %eax,%edx
f010b442:	89 d0                	mov    %edx,%eax
f010b444:	3d ff 7f 00 00       	cmp    $0x7fff,%eax
f010b449:	77 17                	ja     f010b462 <create_user_kern_stack+0x32>
		panic("Run out of kernel heap!! Unable to create a kernel stack for the process. Can't create more processes!");
f010b44b:	83 ec 04             	sub    $0x4,%esp
f010b44e:	68 6c 7f 12 f0       	push   $0xf0127f6c
f010b453:	68 6d 03 00 00       	push   $0x36d
f010b458:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010b45d:	e8 b8 4e ff ff       	call   f010031a <_panic>
	void* kstack = (void*) __cur_k_stk;
f010b462:	a1 5c e9 17 f0       	mov    0xf017e95c,%eax
f010b467:	89 45 f4             	mov    %eax,-0xc(%ebp)
	__cur_k_stk += KERNEL_STACK_SIZE;
f010b46a:	a1 5c e9 17 f0       	mov    0xf017e95c,%eax
f010b46f:	05 00 80 00 00       	add    $0x8000,%eax
f010b474:	a3 5c e9 17 f0       	mov    %eax,0xf017e95c
	return kstack ;
f010b479:	8b 45 f4             	mov    -0xc(%ebp),%eax
//	panic("KERNEL HEAP is OFF! user kernel stack is not supported");
#endif
}
f010b47c:	c9                   	leave  
f010b47d:	c3                   	ret    

f010b47e <delete_user_kern_stack>:
/*2024*/
//===========================================================
// 6) DELETE USER KERNEL STACK (One Per Process):
//===========================================================
void delete_user_kern_stack(struct Env* e)
{
f010b47e:	55                   	push   %ebp
f010b47f:	89 e5                	mov    %esp,%ebp
f010b481:	83 ec 08             	sub    $0x8,%esp
	panic("delete_user_kern_stack() is not implemented yet...!!");

	//Delete the allocated space for the user kernel stack of this process "e"
	//remember to delete the bottom GUARD PAGE (i.e. not mapped)
#else
	panic("KERNEL HEAP is OFF! user kernel stack can't be deleted");
f010b484:	83 ec 04             	sub    $0x4,%esp
f010b487:	68 d4 7f 12 f0       	push   $0xf0127fd4
f010b48c:	68 83 03 00 00       	push   $0x383
f010b491:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010b496:	e8 7f 4e ff ff       	call   f010031a <_panic>

f010b49b <initialize_uheap_dynamic_allocator>:
}
//===============================================
// 7) INITIALIZE DYNAMIC ALLOCATOR OF UHEAP:
//===============================================
void initialize_uheap_dynamic_allocator(struct Env* e, uint32 daStart, uint32 daLimit)
{
f010b49b:	55                   	push   %ebp
f010b49c:	89 e5                	mov    %esp,%ebp
	//[PROJECT'24.MS2] Initialize the dynamic allocator of the user heap
	//Remember:
	//	1) there's no initial allocations for the dynamic allocator of the user heap (=0)
	//	2) call the initialize_dynamic_allocator(..) to complete the initialization
	//panic("initialize_uheap_dynamic_allocator() is not implemented yet...!!");
}
f010b49e:	90                   	nop
f010b49f:	5d                   	pop    %ebp
f010b4a0:	c3                   	ret    

f010b4a1 <initialize_environment>:
//	  3.3 Setup the context to return to env_start() at the early first run from the scheduler
// 4. Initialize the working set
// 5. Initialize the user dynamic allocator
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010b4a1:	55                   	push   %ebp
f010b4a2:	89 e5                	mov    %esp,%ebp
f010b4a4:	53                   	push   %ebx
f010b4a5:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010b4a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4ab:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b4ae:	89 50 64             	mov    %edx,0x64(%eax)
	e->env_cr3 = phys_user_page_directory;
f010b4b1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4b4:	8b 55 10             	mov    0x10(%ebp),%edx
f010b4b7:	89 50 68             	mov    %edx,0x68(%eax)

	//copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010b4ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b4c1:	eb 17                	jmp    f010b4da <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010b4c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4c6:	8b 40 64             	mov    0x64(%eax),%eax
f010b4c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b4cc:	c1 e2 02             	shl    $0x2,%edx
f010b4cf:	01 d0                	add    %edx,%eax
f010b4d1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010b4d7:	ff 45 f4             	incl   -0xc(%ebp)
f010b4da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b4dd:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010b4e2:	76 df                	jbe    f010b4c3 <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}
	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010b4e4:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010b4eb:	eb 22                	jmp    f010b50f <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010b4ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4f0:	8b 40 64             	mov    0x64(%eax),%eax
f010b4f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b4f6:	c1 e2 02             	shl    $0x2,%edx
f010b4f9:	01 c2                	add    %eax,%edx
f010b4fb:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f010b500:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010b503:	c1 e1 02             	shl    $0x2,%ecx
f010b506:	01 c8                	add    %ecx,%eax
f010b508:	8b 00                	mov    (%eax),%eax
f010b50a:	89 02                	mov    %eax,(%edx)
	//copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}
	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010b50c:	ff 45 f4             	incl   -0xc(%ebp)
f010b50f:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010b516:	7e d5                	jle    f010b4ed <initialize_environment+0x4c>
	 * Setup the new context to start executing at the env_start() to do some initializations then
	 * returns to trapret() to pop the trap frame and invoke iret
	 */
	{
		//[1] Create the stack
		e->kstack = create_user_kern_stack(e->env_page_directory);
f010b518:	8b 45 08             	mov    0x8(%ebp),%eax
f010b51b:	8b 40 64             	mov    0x64(%eax),%eax
f010b51e:	83 ec 0c             	sub    $0xc,%esp
f010b521:	50                   	push   %eax
f010b522:	e8 09 ff ff ff       	call   f010b430 <create_user_kern_stack>
f010b527:	83 c4 10             	add    $0x10,%esp
f010b52a:	89 c2                	mov    %eax,%edx
f010b52c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b52f:	89 50 70             	mov    %edx,0x70(%eax)

		//[2] Leave room for the trap frame
		void* sp = e->kstack + KERNEL_STACK_SIZE;
f010b532:	8b 45 08             	mov    0x8(%ebp),%eax
f010b535:	8b 40 70             	mov    0x70(%eax),%eax
f010b538:	05 00 80 00 00       	add    $0x8000,%eax
f010b53d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		sp -= sizeof(struct Trapframe);
f010b540:	83 6d ec 44          	subl   $0x44,-0x14(%ebp)
		e->env_tf = (struct Trapframe *) sp;
f010b544:	8b 45 08             	mov    0x8(%ebp),%eax
f010b547:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010b54a:	89 10                	mov    %edx,(%eax)

		//[3] Set the address of trapret() first - to return on it after env_start() is returned,
		sp -= 4;
f010b54c:	83 6d ec 04          	subl   $0x4,-0x14(%ebp)
		*(uint32*)sp = (uint32)trapret;
f010b550:	ba 84 d7 10 f0       	mov    $0xf010d784,%edx
f010b555:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b558:	89 10                	mov    %edx,(%eax)

		//[4] Place the context next
		sp -= sizeof(struct Context);
f010b55a:	83 6d ec 20          	subl   $0x20,-0x14(%ebp)
		e->context = (struct Context *) sp;
f010b55e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b561:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010b564:	89 50 04             	mov    %edx,0x4(%eax)

		//[4] Setup the context to return to env_start() at the early first run from the scheduler
		memset(e->context, 0, sizeof(*(e->context)));
f010b567:	8b 45 08             	mov    0x8(%ebp),%eax
f010b56a:	8b 40 04             	mov    0x4(%eax),%eax
f010b56d:	83 ec 04             	sub    $0x4,%esp
f010b570:	6a 20                	push   $0x20
f010b572:	6a 00                	push   $0x0
f010b574:	50                   	push   %eax
f010b575:	e8 b2 71 01 00       	call   f012272c <memset>
f010b57a:	83 c4 10             	add    $0x10,%esp
		e->context->eip = (uint32) (env_start);
f010b57d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b580:	8b 40 04             	mov    0x4(%eax),%eax
f010b583:	ba d6 a6 10 f0       	mov    $0xf010a6d6,%edx
f010b588:	89 50 1c             	mov    %edx,0x1c(%eax)
	{
		LIST_INIT(&(e->page_WS_list));
	}
#else
	{
		uint32 env_index = (uint32)(e-envs);
f010b58b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b58e:	8b 15 b0 f3 59 f0    	mov    0xf059f3b0,%edx
f010b594:	29 d0                	sub    %edx,%eax
f010b596:	c1 f8 02             	sar    $0x2,%eax
f010b599:	89 c2                	mov    %eax,%edx
f010b59b:	89 d0                	mov    %edx,%eax
f010b59d:	c1 e0 02             	shl    $0x2,%eax
f010b5a0:	01 d0                	add    %edx,%eax
f010b5a2:	c1 e0 02             	shl    $0x2,%eax
f010b5a5:	01 d0                	add    %edx,%eax
f010b5a7:	c1 e0 02             	shl    $0x2,%eax
f010b5aa:	01 d0                	add    %edx,%eax
f010b5ac:	c1 e0 02             	shl    $0x2,%eax
f010b5af:	01 d0                	add    %edx,%eax
f010b5b1:	c1 e0 08             	shl    $0x8,%eax
f010b5b4:	29 d0                	sub    %edx,%eax
f010b5b6:	c1 e0 08             	shl    $0x8,%eax
f010b5b9:	29 d0                	sub    %edx,%eax
f010b5bb:	c1 e0 03             	shl    $0x3,%eax
f010b5be:	01 d0                	add    %edx,%eax
f010b5c0:	c1 e0 03             	shl    $0x3,%eax
f010b5c3:	01 d0                	add    %edx,%eax
f010b5c5:	01 c0                	add    %eax,%eax
f010b5c7:	01 d0                	add    %edx,%eax
f010b5c9:	89 45 e8             	mov    %eax,-0x18(%ebp)
		e->__uptr_pws = (struct WorkingSetElement*) ( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
f010b5cc:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010b5cf:	89 d0                	mov    %edx,%eax
f010b5d1:	c1 e0 06             	shl    $0x6,%eax
f010b5d4:	29 d0                	sub    %edx,%eax
f010b5d6:	c1 e0 02             	shl    $0x2,%eax
f010b5d9:	01 d0                	add    %edx,%eax
f010b5db:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010b5e2:	01 c8                	add    %ecx,%eax
f010b5e4:	c1 e0 03             	shl    $0x3,%eax
f010b5e7:	01 d0                	add    %edx,%eax
f010b5e9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010b5f0:	29 c2                	sub    %eax,%edx
f010b5f2:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f010b5f9:	89 c2                	mov    %eax,%edx
f010b5fb:	89 d0                	mov    %edx,%eax
f010b5fd:	2d 00 00 40 11       	sub    $0x11400000,%eax
f010b602:	8d 90 88 00 00 00    	lea    0x88(%eax),%edx
f010b608:	8b 45 08             	mov    0x8(%ebp),%eax
f010b60b:	89 90 38 da 01 00    	mov    %edx,0x1da38(%eax)
	}
#endif

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010b611:	83 ec 0c             	sub    $0xc,%esp
f010b614:	6a 02                	push   $0x2
f010b616:	e8 f5 30 00 00       	call   f010e710 <isPageReplacmentAlgorithmLRU>
f010b61b:	83 c4 10             	add    $0x10,%esp
f010b61e:	85 c0                	test   %eax,%eax
f010b620:	0f 84 34 01 00 00    	je     f010b75a <initialize_environment+0x2b9>
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010b626:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010b62d:	e9 14 01 00 00       	jmp    f010b746 <initialize_environment+0x2a5>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010b632:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b635:	89 d0                	mov    %edx,%eax
f010b637:	01 c0                	add    %eax,%eax
f010b639:	01 d0                	add    %edx,%eax
f010b63b:	c1 e0 03             	shl    $0x3,%eax
f010b63e:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b644:	8b 45 08             	mov    0x8(%ebp),%eax
f010b647:	01 d0                	add    %edx,%eax
f010b649:	83 c0 08             	add    $0x8,%eax
f010b64c:	85 c0                	test   %eax,%eax
f010b64e:	75 17                	jne    f010b667 <initialize_environment+0x1c6>
f010b650:	83 ec 04             	sub    $0x4,%esp
f010b653:	68 c8 7c 12 f0       	push   $0xf0127cc8
f010b658:	68 e6 03 00 00       	push   $0x3e6
f010b65d:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010b662:	e8 b3 4c ff ff       	call   f010031a <_panic>
f010b667:	8b 45 08             	mov    0x8(%ebp),%eax
f010b66a:	8b 90 48 d5 01 00    	mov    0x1d548(%eax),%edx
f010b670:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010b673:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010b676:	89 c8                	mov    %ecx,%eax
f010b678:	01 c0                	add    %eax,%eax
f010b67a:	01 c8                	add    %ecx,%eax
f010b67c:	c1 e0 03             	shl    $0x3,%eax
f010b67f:	01 d8                	add    %ebx,%eax
f010b681:	05 98 00 00 00       	add    $0x98,%eax
f010b686:	89 10                	mov    %edx,(%eax)
f010b688:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b68b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b68e:	89 d0                	mov    %edx,%eax
f010b690:	01 c0                	add    %eax,%eax
f010b692:	01 d0                	add    %edx,%eax
f010b694:	c1 e0 03             	shl    $0x3,%eax
f010b697:	01 c8                	add    %ecx,%eax
f010b699:	05 98 00 00 00       	add    $0x98,%eax
f010b69e:	8b 00                	mov    (%eax),%eax
f010b6a0:	85 c0                	test   %eax,%eax
f010b6a2:	74 28                	je     f010b6cc <initialize_environment+0x22b>
f010b6a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6a7:	8b 90 48 d5 01 00    	mov    0x1d548(%eax),%edx
f010b6ad:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010b6b0:	89 c8                	mov    %ecx,%eax
f010b6b2:	01 c0                	add    %eax,%eax
f010b6b4:	01 c8                	add    %ecx,%eax
f010b6b6:	c1 e0 03             	shl    $0x3,%eax
f010b6b9:	8d 88 80 00 00 00    	lea    0x80(%eax),%ecx
f010b6bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6c2:	01 c8                	add    %ecx,%eax
f010b6c4:	83 c0 08             	add    $0x8,%eax
f010b6c7:	89 42 14             	mov    %eax,0x14(%edx)
f010b6ca:	eb 23                	jmp    f010b6ef <initialize_environment+0x24e>
f010b6cc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b6cf:	89 d0                	mov    %edx,%eax
f010b6d1:	01 c0                	add    %eax,%eax
f010b6d3:	01 d0                	add    %edx,%eax
f010b6d5:	c1 e0 03             	shl    $0x3,%eax
f010b6d8:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b6de:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6e1:	01 d0                	add    %edx,%eax
f010b6e3:	8d 50 08             	lea    0x8(%eax),%edx
f010b6e6:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6e9:	89 90 4c d5 01 00    	mov    %edx,0x1d54c(%eax)
f010b6ef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b6f2:	89 d0                	mov    %edx,%eax
f010b6f4:	01 c0                	add    %eax,%eax
f010b6f6:	01 d0                	add    %edx,%eax
f010b6f8:	c1 e0 03             	shl    $0x3,%eax
f010b6fb:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b701:	8b 45 08             	mov    0x8(%ebp),%eax
f010b704:	01 d0                	add    %edx,%eax
f010b706:	8d 50 08             	lea    0x8(%eax),%edx
f010b709:	8b 45 08             	mov    0x8(%ebp),%eax
f010b70c:	89 90 48 d5 01 00    	mov    %edx,0x1d548(%eax)
f010b712:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b715:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b718:	89 d0                	mov    %edx,%eax
f010b71a:	01 c0                	add    %eax,%eax
f010b71c:	01 d0                	add    %edx,%eax
f010b71e:	c1 e0 03             	shl    $0x3,%eax
f010b721:	01 c8                	add    %ecx,%eax
f010b723:	05 9c 00 00 00       	add    $0x9c,%eax
f010b728:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b72e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b731:	8b 80 54 d5 01 00    	mov    0x1d554(%eax),%eax
f010b737:	8d 50 01             	lea    0x1(%eax),%edx
f010b73a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b73d:	89 90 54 d5 01 00    	mov    %edx,0x1d554(%eax)
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010b743:	ff 45 f0             	incl   -0x10(%ebp)
f010b746:	8b 45 08             	mov    0x8(%ebp),%eax
f010b749:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f010b74f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b752:	39 c2                	cmp    %eax,%edx
f010b754:	0f 87 d8 fe ff ff    	ja     f010b632 <initialize_environment+0x191>
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010b75a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b761:	eb 54                	jmp    f010b7b7 <initialize_environment+0x316>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010b763:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b766:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b769:	89 d0                	mov    %edx,%eax
f010b76b:	01 c0                	add    %eax,%eax
f010b76d:	01 d0                	add    %edx,%eax
f010b76f:	c1 e0 03             	shl    $0x3,%eax
f010b772:	01 c8                	add    %ecx,%eax
f010b774:	05 88 00 00 00       	add    $0x88,%eax
f010b779:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010b77f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b782:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b785:	89 d0                	mov    %edx,%eax
f010b787:	01 c0                	add    %eax,%eax
f010b789:	01 d0                	add    %edx,%eax
f010b78b:	c1 e0 03             	shl    $0x3,%eax
f010b78e:	01 c8                	add    %ecx,%eax
f010b790:	05 8c 00 00 00       	add    $0x8c,%eax
f010b795:	c6 00 01             	movb   $0x1,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010b798:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b79b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b79e:	89 d0                	mov    %edx,%eax
f010b7a0:	01 c0                	add    %eax,%eax
f010b7a2:	01 d0                	add    %edx,%eax
f010b7a4:	c1 e0 03             	shl    $0x3,%eax
f010b7a7:	01 c8                	add    %ecx,%eax
f010b7a9:	05 90 00 00 00       	add    $0x90,%eax
f010b7ae:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010b7b4:	ff 45 f4             	incl   -0xc(%ebp)
f010b7b7:	8b 45 08             	mov    0x8(%ebp),%eax
f010b7ba:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f010b7c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b7c3:	39 c2                	cmp    %eax,%edx
f010b7c5:	77 9c                	ja     f010b763 <initialize_environment+0x2c2>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010b7c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010b7ca:	c7 80 58 d5 01 00 00 	movl   $0x0,0x1d558(%eax)
f010b7d1:	00 00 00 
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010b7d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b7db:	eb 54                	jmp    f010b831 <initialize_environment+0x390>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010b7dd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b7e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b7e3:	89 d0                	mov    %edx,%eax
f010b7e5:	01 c0                	add    %eax,%eax
f010b7e7:	01 d0                	add    %edx,%eax
f010b7e9:	c1 e0 03             	shl    $0x3,%eax
f010b7ec:	01 c8                	add    %ecx,%eax
f010b7ee:	05 5c d5 01 00       	add    $0x1d55c,%eax
f010b7f3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010b7f9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b7fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b7ff:	89 d0                	mov    %edx,%eax
f010b801:	01 c0                	add    %eax,%eax
f010b803:	01 d0                	add    %edx,%eax
f010b805:	c1 e0 03             	shl    $0x3,%eax
f010b808:	01 c8                	add    %ecx,%eax
f010b80a:	05 60 d5 01 00       	add    $0x1d560,%eax
f010b80f:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010b812:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b815:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b818:	89 d0                	mov    %edx,%eax
f010b81a:	01 c0                	add    %eax,%eax
f010b81c:	01 d0                	add    %edx,%eax
f010b81e:	c1 e0 03             	shl    $0x3,%eax
f010b821:	01 c8                	add    %ecx,%eax
f010b823:	05 64 d5 01 00       	add    $0x1d564,%eax
f010b828:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010b82e:	ff 45 f4             	incl   -0xc(%ebp)
f010b831:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010b835:	7e a6                	jle    f010b7dd <initialize_environment+0x33c>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010b837:	8b 45 08             	mov    0x8(%ebp),%eax
f010b83a:	c7 80 0c da 01 00 00 	movl   $0x0,0x1da0c(%eax)
f010b841:	00 00 00 

	e->pageFaultsCounter=0;
f010b844:	8b 45 08             	mov    0x8(%ebp),%eax
f010b847:	c7 80 40 da 01 00 00 	movl   $0x0,0x1da40(%eax)
f010b84e:	00 00 00 
	e->tableFaultsCounter=0;
f010b851:	8b 45 08             	mov    0x8(%ebp),%eax
f010b854:	c7 80 44 da 01 00 00 	movl   $0x0,0x1da44(%eax)
f010b85b:	00 00 00 

	e->freeingFullWSCounter = 0;
f010b85e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b861:	c7 80 48 da 01 00 00 	movl   $0x0,0x1da48(%eax)
f010b868:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010b86b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b86e:	c7 80 4c da 01 00 00 	movl   $0x0,0x1da4c(%eax)
f010b875:	00 00 00 

	e->nModifiedPages=0;
f010b878:	8b 45 08             	mov    0x8(%ebp),%eax
f010b87b:	c7 80 50 da 01 00 00 	movl   $0x0,0x1da50(%eax)
f010b882:	00 00 00 
	e->nNotModifiedPages=0;
f010b885:	8b 45 08             	mov    0x8(%ebp),%eax
f010b888:	c7 80 54 da 01 00 00 	movl   $0x0,0x1da54(%eax)
f010b88f:	00 00 00 
	e->nClocks = 0;
f010b892:	8b 45 08             	mov    0x8(%ebp),%eax
f010b895:	c7 80 68 da 01 00 00 	movl   $0x0,0x1da68(%eax)
f010b89c:	00 00 00 

	//2020
	e->nPageIn = 0;
f010b89f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8a2:	c7 80 5c da 01 00 00 	movl   $0x0,0x1da5c(%eax)
f010b8a9:	00 00 00 
	e->nPageOut = 0;
f010b8ac:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8af:	c7 80 60 da 01 00 00 	movl   $0x0,0x1da60(%eax)
f010b8b6:	00 00 00 
	e->nNewPageAdded = 0;
f010b8b9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8bc:	c7 80 64 da 01 00 00 	movl   $0x0,0x1da64(%eax)
f010b8c3:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//[PROJECT'24.DONE] call initialize_uheap_dynamic_allocator(...)
	initialize_uheap_dynamic_allocator(e, USER_HEAP_START, USER_HEAP_START + DYN_ALLOC_MAX_SIZE);
f010b8c6:	83 ec 04             	sub    $0x4,%esp
f010b8c9:	68 00 00 00 82       	push   $0x82000000
f010b8ce:	68 00 00 00 80       	push   $0x80000000
f010b8d3:	ff 75 08             	pushl  0x8(%ebp)
f010b8d6:	e8 c0 fb ff ff       	call   f010b49b <initialize_uheap_dynamic_allocator>
f010b8db:	83 c4 10             	add    $0x10,%esp

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010b8de:	83 ec 0c             	sub    $0xc,%esp
f010b8e1:	ff 75 08             	pushl  0x8(%ebp)
f010b8e4:	e8 09 00 00 00       	call   f010b8f2 <complete_environment_initialization>
f010b8e9:	83 c4 10             	add    $0x10,%esp
}
f010b8ec:	90                   	nop
f010b8ed:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010b8f0:	c9                   	leave  
f010b8f1:	c3                   	ret    

f010b8f2 <complete_environment_initialization>:

//========================================================
// 9) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010b8f2:	55                   	push   %ebp
f010b8f3:	89 e5                	mov    %esp,%ebp
f010b8f5:	53                   	push   %ebx
f010b8f6:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010b8f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8fc:	8b 40 64             	mov    0x64(%eax),%eax
f010b8ff:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010b905:	8b 45 08             	mov    0x8(%ebp),%eax
f010b908:	8b 40 68             	mov    0x68(%eax),%eax
f010b90b:	83 c8 03             	or     $0x3,%eax
f010b90e:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010b910:	8b 45 08             	mov    0x8(%ebp),%eax
f010b913:	8b 40 64             	mov    0x64(%eax),%eax
f010b916:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010b91c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b91f:	8b 40 68             	mov    0x68(%eax),%eax
f010b922:	83 c8 05             	or     $0x5,%eax
f010b925:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010b927:	8b 45 08             	mov    0x8(%ebp),%eax
f010b92a:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
	e->disk_env_pgdir_PA= 0;
f010b931:	8b 45 08             	mov    0x8(%ebp),%eax
f010b934:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%eax)
	e->disk_env_tabledir = 0;
f010b93b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b93e:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%eax)
	e->disk_env_tabledir_PA = 0;
f010b945:	8b 45 08             	mov    0x8(%ebp),%eax
f010b948:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
f010b94f:	00 00 00 

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010b952:	8b 45 08             	mov    0x8(%ebp),%eax
f010b955:	8b 58 10             	mov    0x10(%eax),%ebx
f010b958:	83 ec 0c             	sub    $0xc,%esp
f010b95b:	6a 08                	push   $0x8
f010b95d:	e8 69 52 01 00       	call   f0120bcb <log2_ceil>
f010b962:	83 c4 10             	add    $0x10,%esp
f010b965:	ba 01 00 00 00       	mov    $0x1,%edx
f010b96a:	88 c1                	mov    %al,%cl
f010b96c:	d3 e2                	shl    %cl,%edx
f010b96e:	89 d0                	mov    %edx,%eax
f010b970:	01 d8                	add    %ebx,%eax
f010b972:	89 c3                	mov    %eax,%ebx
f010b974:	83 ec 0c             	sub    $0xc,%esp
f010b977:	6a 08                	push   $0x8
f010b979:	e8 18 52 01 00       	call   f0120b96 <nearest_pow2_ceil>
f010b97e:	83 c4 10             	add    $0x10,%esp
f010b981:	f7 d8                	neg    %eax
f010b983:	21 d8                	and    %ebx,%eax
f010b985:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010b988:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b98c:	7f 1b                	jg     f010b9a9 <complete_environment_initialization+0xb7>
		generation = 1 << ENVGENSHIFT;
f010b98e:	83 ec 0c             	sub    $0xc,%esp
f010b991:	6a 08                	push   $0x8
f010b993:	e8 33 52 01 00       	call   f0120bcb <log2_ceil>
f010b998:	83 c4 10             	add    $0x10,%esp
f010b99b:	ba 01 00 00 00       	mov    $0x1,%edx
f010b9a0:	88 c1                	mov    %al,%cl
f010b9a2:	d3 e2                	shl    %cl,%edx
f010b9a4:	89 d0                	mov    %edx,%eax
f010b9a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010b9a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b9ac:	8b 15 b0 f3 59 f0    	mov    0xf059f3b0,%edx
f010b9b2:	29 d0                	sub    %edx,%eax
f010b9b4:	c1 f8 02             	sar    $0x2,%eax
f010b9b7:	89 c2                	mov    %eax,%edx
f010b9b9:	89 d0                	mov    %edx,%eax
f010b9bb:	c1 e0 02             	shl    $0x2,%eax
f010b9be:	01 d0                	add    %edx,%eax
f010b9c0:	c1 e0 02             	shl    $0x2,%eax
f010b9c3:	01 d0                	add    %edx,%eax
f010b9c5:	c1 e0 02             	shl    $0x2,%eax
f010b9c8:	01 d0                	add    %edx,%eax
f010b9ca:	c1 e0 02             	shl    $0x2,%eax
f010b9cd:	01 d0                	add    %edx,%eax
f010b9cf:	c1 e0 08             	shl    $0x8,%eax
f010b9d2:	29 d0                	sub    %edx,%eax
f010b9d4:	c1 e0 08             	shl    $0x8,%eax
f010b9d7:	29 d0                	sub    %edx,%eax
f010b9d9:	c1 e0 03             	shl    $0x3,%eax
f010b9dc:	01 d0                	add    %edx,%eax
f010b9de:	c1 e0 03             	shl    $0x3,%eax
f010b9e1:	01 d0                	add    %edx,%eax
f010b9e3:	01 c0                	add    %eax,%eax
f010b9e5:	01 d0                	add    %edx,%eax
f010b9e7:	0b 45 f4             	or     -0xc(%ebp),%eax
f010b9ea:	89 c2                	mov    %eax,%edx
f010b9ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010b9ef:	89 50 10             	mov    %edx,0x10(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	struct Env* cur_env = get_cpu_proc();
f010b9f2:	e8 79 ed ff ff       	call   f010a770 <get_cpu_proc>
f010b9f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (cur_env == NULL)
f010b9fa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010b9fe:	75 0c                	jne    f010ba0c <complete_environment_initialization+0x11a>
		e->env_parent_id = 0;//no parent;
f010ba00:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba03:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010ba0a:	eb 0c                	jmp    f010ba18 <complete_environment_initialization+0x126>
	else
		e->env_parent_id = cur_env->env_id;//curenv is the parent;
f010ba0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ba0f:	8b 50 10             	mov    0x10(%eax),%edx
f010ba12:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba15:	89 50 14             	mov    %edx,0x14(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010ba18:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba1b:	c7 40 18 04 00 00 00 	movl   $0x4,0x18(%eax)
	e->env_runs = 0;
f010ba22:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba25:	c7 80 58 da 01 00 00 	movl   $0x0,0x1da58(%eax)
f010ba2c:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(e->env_tf, 0, sizeof(*(e->env_tf)));
f010ba2f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba32:	8b 00                	mov    (%eax),%eax
f010ba34:	83 ec 04             	sub    $0x4,%esp
f010ba37:	6a 44                	push   $0x44
f010ba39:	6a 00                	push   $0x0
f010ba3b:	50                   	push   %eax
f010ba3c:	e8 eb 6c 01 00       	call   f012272c <memset>
f010ba41:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf->tf_ds = GD_UD | 3;
f010ba44:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba47:	8b 00                	mov    (%eax),%eax
f010ba49:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf->tf_es = GD_UD | 3;
f010ba4f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba52:	8b 00                	mov    (%eax),%eax
f010ba54:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf->tf_ss = GD_UD | 3;
f010ba5a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba5d:	8b 00                	mov    (%eax),%eax
f010ba5f:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf->tf_esp = (uint32*)USTACKTOP;
f010ba65:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba68:	8b 00                	mov    (%eax),%eax
f010ba6a:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf->tf_cs = GD_UT | 3;
f010ba71:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba74:	8b 00                	mov    (%eax),%eax
f010ba76:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf->tf_eflags |= FL_IF;
f010ba7c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba7f:	8b 00                	mov    (%eax),%eax
f010ba81:	8b 55 08             	mov    0x8(%ebp),%edx
f010ba84:	8b 12                	mov    (%edx),%edx
f010ba86:	8b 52 38             	mov    0x38(%edx),%edx
f010ba89:	80 ce 02             	or     $0x2,%dh
f010ba8c:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010ba8f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010ba93:	75 17                	jne    f010baac <complete_environment_initialization+0x1ba>
f010ba95:	83 ec 04             	sub    $0x4,%esp
f010ba98:	68 7d 7d 12 f0       	push   $0xf0127d7d
f010ba9d:	68 52 04 00 00       	push   $0x452
f010baa2:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010baa7:	e8 6e 48 ff ff       	call   f010031a <_panic>
f010baac:	8b 45 08             	mov    0x8(%ebp),%eax
f010baaf:	8b 40 08             	mov    0x8(%eax),%eax
f010bab2:	85 c0                	test   %eax,%eax
f010bab4:	74 11                	je     f010bac7 <complete_environment_initialization+0x1d5>
f010bab6:	8b 45 08             	mov    0x8(%ebp),%eax
f010bab9:	8b 40 08             	mov    0x8(%eax),%eax
f010babc:	8b 55 08             	mov    0x8(%ebp),%edx
f010babf:	8b 52 0c             	mov    0xc(%edx),%edx
f010bac2:	89 50 0c             	mov    %edx,0xc(%eax)
f010bac5:	eb 0b                	jmp    f010bad2 <complete_environment_initialization+0x1e0>
f010bac7:	8b 45 08             	mov    0x8(%ebp),%eax
f010baca:	8b 40 0c             	mov    0xc(%eax),%eax
f010bacd:	a3 b8 f3 59 f0       	mov    %eax,0xf059f3b8
f010bad2:	8b 45 08             	mov    0x8(%ebp),%eax
f010bad5:	8b 40 0c             	mov    0xc(%eax),%eax
f010bad8:	85 c0                	test   %eax,%eax
f010bada:	74 11                	je     f010baed <complete_environment_initialization+0x1fb>
f010badc:	8b 45 08             	mov    0x8(%ebp),%eax
f010badf:	8b 40 0c             	mov    0xc(%eax),%eax
f010bae2:	8b 55 08             	mov    0x8(%ebp),%edx
f010bae5:	8b 52 08             	mov    0x8(%edx),%edx
f010bae8:	89 50 08             	mov    %edx,0x8(%eax)
f010baeb:	eb 0b                	jmp    f010baf8 <complete_environment_initialization+0x206>
f010baed:	8b 45 08             	mov    0x8(%ebp),%eax
f010baf0:	8b 40 08             	mov    0x8(%eax),%eax
f010baf3:	a3 b4 f3 59 f0       	mov    %eax,0xf059f3b4
f010baf8:	8b 45 08             	mov    0x8(%ebp),%eax
f010bafb:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f010bb02:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb05:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f010bb0c:	a1 c0 f3 59 f0       	mov    0xf059f3c0,%eax
f010bb11:	48                   	dec    %eax
f010bb12:	a3 c0 f3 59 f0       	mov    %eax,0xf059f3c0
	return ;
f010bb17:	90                   	nop
}
f010bb18:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010bb1b:	c9                   	leave  
f010bb1c:	c3                   	ret    

f010bb1d <set_environment_entry_point>:

//===============================================
// 10) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010bb1d:	55                   	push   %ebp
f010bb1e:	89 e5                	mov    %esp,%ebp
f010bb20:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010bb23:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bb26:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010bb29:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bb2c:	8b 00                	mov    (%eax),%eax
f010bb2e:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010bb33:	74 17                	je     f010bb4c <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010bb35:	83 ec 04             	sub    $0x4,%esp
f010bb38:	68 0b 80 12 f0       	push   $0xf012800b
f010bb3d:	68 5e 04 00 00       	push   $0x45e
f010bb42:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010bb47:	e8 ce 47 ff ff       	call   f010031a <_panic>
	e->env_tf->tf_eip = (uint32*)pELFHDR->e_entry ;
f010bb4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb4f:	8b 00                	mov    (%eax),%eax
f010bb51:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bb54:	8b 52 18             	mov    0x18(%edx),%edx
f010bb57:	89 50 30             	mov    %edx,0x30(%eax)
}
f010bb5a:	90                   	nop
f010bb5b:	c9                   	leave  
f010bb5c:	c3                   	ret    

f010bb5d <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 11) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010bb5d:	55                   	push   %ebp
f010bb5e:	89 e5                	mov    %esp,%ebp
f010bb60:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010bb63:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb66:	8b 40 10             	mov    0x10(%eax),%eax
f010bb69:	8d 48 01             	lea    0x1(%eax),%ecx
f010bb6c:	8b 55 08             	mov    0x8(%ebp),%edx
f010bb6f:	89 4a 10             	mov    %ecx,0x10(%edx)
f010bb72:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010bb75:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bb78:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010bb7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bb7e:	8b 00                	mov    (%eax),%eax
f010bb80:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010bb85:	74 17                	je     f010bb9e <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010bb87:	83 ec 04             	sub    $0x4,%esp
f010bb8a:	68 0b 80 12 f0       	push   $0xf012800b
f010bb8f:	68 6c 04 00 00       	push   $0x46c
f010bb94:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010bb99:	e8 7c 47 ff ff       	call   f010031a <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010bb9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bba1:	8b 50 1c             	mov    0x1c(%eax),%edx
f010bba4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bba7:	01 d0                	add    %edx,%eax
f010bba9:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010bbac:	eb 0f                	jmp    f010bbbd <PROGRAM_SEGMENT_NEXT+0x60>
f010bbae:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbb1:	8b 40 10             	mov    0x10(%eax),%eax
f010bbb4:	8d 50 01             	lea    0x1(%eax),%edx
f010bbb7:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbba:	89 50 10             	mov    %edx,0x10(%eax)
f010bbbd:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbc0:	8b 40 10             	mov    0x10(%eax),%eax
f010bbc3:	c1 e0 05             	shl    $0x5,%eax
f010bbc6:	89 c2                	mov    %eax,%edx
f010bbc8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bbcb:	01 d0                	add    %edx,%eax
f010bbcd:	8b 00                	mov    (%eax),%eax
f010bbcf:	83 f8 01             	cmp    $0x1,%eax
f010bbd2:	74 13                	je     f010bbe7 <PROGRAM_SEGMENT_NEXT+0x8a>
f010bbd4:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbd7:	8b 50 10             	mov    0x10(%eax),%edx
f010bbda:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bbdd:	8b 40 2c             	mov    0x2c(%eax),%eax
f010bbe0:	0f b7 c0             	movzwl %ax,%eax
f010bbe3:	39 c2                	cmp    %eax,%edx
f010bbe5:	72 c7                	jb     f010bbae <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010bbe7:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbea:	8b 40 10             	mov    0x10(%eax),%eax
f010bbed:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010bbf0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bbf3:	8b 40 2c             	mov    0x2c(%eax),%eax
f010bbf6:	0f b7 c0             	movzwl %ax,%eax
f010bbf9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010bbfc:	7e 63                	jle    f010bc61 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010bbfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc01:	c1 e0 05             	shl    $0x5,%eax
f010bc04:	89 c2                	mov    %eax,%edx
f010bc06:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bc09:	01 d0                	add    %edx,%eax
f010bc0b:	8b 50 04             	mov    0x4(%eax),%edx
f010bc0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bc11:	01 c2                	add    %eax,%edx
f010bc13:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc16:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010bc18:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc1b:	c1 e0 05             	shl    $0x5,%eax
f010bc1e:	89 c2                	mov    %eax,%edx
f010bc20:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bc23:	01 d0                	add    %edx,%eax
f010bc25:	8b 50 14             	mov    0x14(%eax),%edx
f010bc28:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc2b:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010bc2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc31:	c1 e0 05             	shl    $0x5,%eax
f010bc34:	89 c2                	mov    %eax,%edx
f010bc36:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bc39:	01 d0                	add    %edx,%eax
f010bc3b:	8b 50 10             	mov    0x10(%eax),%edx
f010bc3e:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc41:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010bc44:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc47:	c1 e0 05             	shl    $0x5,%eax
f010bc4a:	89 c2                	mov    %eax,%edx
f010bc4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bc4f:	01 d0                	add    %edx,%eax
f010bc51:	8b 40 08             	mov    0x8(%eax),%eax
f010bc54:	89 c2                	mov    %eax,%edx
f010bc56:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc59:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010bc5c:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc5f:	eb 05                	jmp    f010bc66 <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010bc61:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010bc66:	c9                   	leave  
f010bc67:	c3                   	ret    

f010bc68 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 12) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010bc68:	55                   	push   %ebp
f010bc69:	89 e5                	mov    %esp,%ebp
f010bc6b:	57                   	push   %edi
f010bc6c:	56                   	push   %esi
f010bc6d:	53                   	push   %ebx
f010bc6e:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010bc71:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010bc78:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bc7b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010bc7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010bc81:	8b 00                	mov    (%eax),%eax
f010bc83:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010bc88:	74 17                	je     f010bca1 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010bc8a:	83 ec 04             	sub    $0x4,%esp
f010bc8d:	68 0b 80 12 f0       	push   $0xf012800b
f010bc92:	68 88 04 00 00       	push   $0x488
f010bc97:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010bc9c:	e8 79 46 ff ff       	call   f010031a <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010bca1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010bca4:	8b 50 1c             	mov    0x1c(%eax),%edx
f010bca7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bcaa:	01 d0                	add    %edx,%eax
f010bcac:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010bcaf:	eb 07                	jmp    f010bcb8 <PROGRAM_SEGMENT_FIRST+0x50>
f010bcb1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010bcb4:	40                   	inc    %eax
f010bcb5:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010bcb8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010bcbb:	c1 e0 05             	shl    $0x5,%eax
f010bcbe:	89 c2                	mov    %eax,%edx
f010bcc0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bcc3:	01 d0                	add    %edx,%eax
f010bcc5:	8b 00                	mov    (%eax),%eax
f010bcc7:	83 f8 01             	cmp    $0x1,%eax
f010bcca:	74 10                	je     f010bcdc <PROGRAM_SEGMENT_FIRST+0x74>
f010bccc:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010bccf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010bcd2:	8b 40 2c             	mov    0x2c(%eax),%eax
f010bcd5:	0f b7 c0             	movzwl %ax,%eax
f010bcd8:	39 c2                	cmp    %eax,%edx
f010bcda:	72 d5                	jb     f010bcb1 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010bcdc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010bcdf:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010bce2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010bce5:	8b 40 2c             	mov    0x2c(%eax),%eax
f010bce8:	0f b7 c0             	movzwl %ax,%eax
f010bceb:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010bcee:	7e 68                	jle    f010bd58 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010bcf0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010bcf3:	c1 e0 05             	shl    $0x5,%eax
f010bcf6:	89 c2                	mov    %eax,%edx
f010bcf8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bcfb:	01 d0                	add    %edx,%eax
f010bcfd:	8b 50 04             	mov    0x4(%eax),%edx
f010bd00:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bd03:	01 d0                	add    %edx,%eax
f010bd05:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010bd08:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010bd0b:	c1 e0 05             	shl    $0x5,%eax
f010bd0e:	89 c2                	mov    %eax,%edx
f010bd10:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bd13:	01 d0                	add    %edx,%eax
f010bd15:	8b 40 14             	mov    0x14(%eax),%eax
f010bd18:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010bd1b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010bd1e:	c1 e0 05             	shl    $0x5,%eax
f010bd21:	89 c2                	mov    %eax,%edx
f010bd23:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bd26:	01 d0                	add    %edx,%eax
f010bd28:	8b 40 10             	mov    0x10(%eax),%eax
f010bd2b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010bd2e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010bd31:	c1 e0 05             	shl    $0x5,%eax
f010bd34:	89 c2                	mov    %eax,%edx
f010bd36:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bd39:	01 d0                	add    %edx,%eax
f010bd3b:	8b 40 08             	mov    0x8(%eax),%eax
f010bd3e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010bd41:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd44:	89 c3                	mov    %eax,%ebx
f010bd46:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010bd49:	ba 05 00 00 00       	mov    $0x5,%edx
f010bd4e:	89 df                	mov    %ebx,%edi
f010bd50:	89 c6                	mov    %eax,%esi
f010bd52:	89 d1                	mov    %edx,%ecx
f010bd54:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010bd56:	eb 1c                	jmp    f010bd74 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010bd58:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010bd5f:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd62:	89 c3                	mov    %eax,%ebx
f010bd64:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010bd67:	ba 05 00 00 00       	mov    $0x5,%edx
f010bd6c:	89 df                	mov    %ebx,%edi
f010bd6e:	89 c6                	mov    %eax,%esi
f010bd70:	89 d1                	mov    %edx,%ecx
f010bd72:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010bd74:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd77:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010bd7a:	5b                   	pop    %ebx
f010bd7b:	5e                   	pop    %esi
f010bd7c:	5f                   	pop    %edi
f010bd7d:	5d                   	pop    %ebp
f010bd7e:	c2 04 00             	ret    $0x4

f010bd81 <cleanup_buffers>:

//===============================================================================
// 13) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================================================
void cleanup_buffers(struct Env* e)
{
f010bd81:	55                   	push   %ebp
f010bd82:	89 e5                	mov    %esp,%ebp
f010bd84:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010bd87:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	acquire_spinlock(&MemFrameLists.mfllock);
f010bd8e:	83 ec 0c             	sub    $0xc,%esp
f010bd91:	68 e0 fe 59 f0       	push   $0xf059fee0
f010bd96:	e8 86 2d 00 00       	call   f010eb21 <acquire_spinlock>
f010bd9b:	83 c4 10             	add    $0x10,%esp
	{
		LIST_FOREACH(ptr_fi, &MemFrameLists.modified_frame_list)
f010bd9e:	a1 d0 fe 59 f0       	mov    0xf059fed0,%eax
f010bda3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010bda6:	e9 c3 00 00 00       	jmp    f010be6e <cleanup_buffers+0xed>
		{
			if(ptr_fi->proc == e)
f010bdab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bdae:	8b 40 0c             	mov    0xc(%eax),%eax
f010bdb1:	3b 45 08             	cmp    0x8(%ebp),%eax
f010bdb4:	0f 85 ac 00 00 00    	jne    f010be66 <cleanup_buffers+0xe5>
			{
				pt_clear_page_table_entry(ptr_fi->proc->env_page_directory,ptr_fi->bufferedVA);
f010bdba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bdbd:	8b 50 10             	mov    0x10(%eax),%edx
f010bdc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bdc3:	8b 40 0c             	mov    0xc(%eax),%eax
f010bdc6:	8b 40 64             	mov    0x64(%eax),%eax
f010bdc9:	83 ec 08             	sub    $0x8,%esp
f010bdcc:	52                   	push   %edx
f010bdcd:	50                   	push   %eax
f010bdce:	e8 62 ce ff ff       	call   f0108c35 <pt_clear_page_table_entry>
f010bdd3:	83 c4 10             	add    $0x10,%esp

				//cprintf("==================\n");
				//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
				LIST_REMOVE(&MemFrameLists.modified_frame_list, ptr_fi);
f010bdd6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010bdda:	75 17                	jne    f010bdf3 <cleanup_buffers+0x72>
f010bddc:	83 ec 04             	sub    $0x4,%esp
f010bddf:	68 7d 7d 12 f0       	push   $0xf0127d7d
f010bde4:	68 b1 04 00 00       	push   $0x4b1
f010bde9:	68 eb 7c 12 f0       	push   $0xf0127ceb
f010bdee:	e8 27 45 ff ff       	call   f010031a <_panic>
f010bdf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bdf6:	8b 00                	mov    (%eax),%eax
f010bdf8:	85 c0                	test   %eax,%eax
f010bdfa:	74 10                	je     f010be0c <cleanup_buffers+0x8b>
f010bdfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bdff:	8b 00                	mov    (%eax),%eax
f010be01:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010be04:	8b 52 04             	mov    0x4(%edx),%edx
f010be07:	89 50 04             	mov    %edx,0x4(%eax)
f010be0a:	eb 0b                	jmp    f010be17 <cleanup_buffers+0x96>
f010be0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be0f:	8b 40 04             	mov    0x4(%eax),%eax
f010be12:	a3 d4 fe 59 f0       	mov    %eax,0xf059fed4
f010be17:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be1a:	8b 40 04             	mov    0x4(%eax),%eax
f010be1d:	85 c0                	test   %eax,%eax
f010be1f:	74 0f                	je     f010be30 <cleanup_buffers+0xaf>
f010be21:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be24:	8b 40 04             	mov    0x4(%eax),%eax
f010be27:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010be2a:	8b 12                	mov    (%edx),%edx
f010be2c:	89 10                	mov    %edx,(%eax)
f010be2e:	eb 0a                	jmp    f010be3a <cleanup_buffers+0xb9>
f010be30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be33:	8b 00                	mov    (%eax),%eax
f010be35:	a3 d0 fe 59 f0       	mov    %eax,0xf059fed0
f010be3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be3d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010be43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be46:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010be4d:	a1 dc fe 59 f0       	mov    0xf059fedc,%eax
f010be52:	48                   	dec    %eax
f010be53:	a3 dc fe 59 f0       	mov    %eax,0xf059fedc

				free_frame(ptr_fi);
f010be58:	83 ec 0c             	sub    $0xc,%esp
f010be5b:	ff 75 f4             	pushl  -0xc(%ebp)
f010be5e:	e8 c1 c4 ff ff       	call   f0108324 <free_frame>
f010be63:	83 c4 10             	add    $0x10,%esp
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	acquire_spinlock(&MemFrameLists.mfllock);
	{
		LIST_FOREACH(ptr_fi, &MemFrameLists.modified_frame_list)
f010be66:	a1 d8 fe 59 f0       	mov    0xf059fed8,%eax
f010be6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010be6e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010be72:	74 07                	je     f010be7b <cleanup_buffers+0xfa>
f010be74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be77:	8b 00                	mov    (%eax),%eax
f010be79:	eb 05                	jmp    f010be80 <cleanup_buffers+0xff>
f010be7b:	b8 00 00 00 00       	mov    $0x0,%eax
f010be80:	a3 d8 fe 59 f0       	mov    %eax,0xf059fed8
f010be85:	a1 d8 fe 59 f0       	mov    0xf059fed8,%eax
f010be8a:	85 c0                	test   %eax,%eax
f010be8c:	0f 85 19 ff ff ff    	jne    f010bdab <cleanup_buffers+0x2a>
f010be92:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010be96:	0f 85 0f ff ff ff    	jne    f010bdab <cleanup_buffers+0x2a>
				//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x, saved next = %x \n", curenv->prog_name ,ptr_fi, LIST_NEXT(ptr_fi), ___ptr_next);
				//cprintf("==================\n");
			}
		}
	}
	release_spinlock(&MemFrameLists.mfllock);
f010be9c:	83 ec 0c             	sub    $0xc,%esp
f010be9f:	68 e0 fe 59 f0       	push   $0xf059fee0
f010bea4:	e8 ff 2c 00 00       	call   f010eba8 <release_spinlock>
f010bea9:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010beac:	90                   	nop
f010bead:	c9                   	leave  
f010beae:	c3                   	ret    

f010beaf <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010beaf:	55                   	push   %ebp
f010beb0:	89 e5                	mov    %esp,%ebp
f010beb2:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010beb5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010beb9:	7e 06                	jle    f010bec1 <set_program_priority+0x12>
f010bebb:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010bebf:	7e 14                	jle    f010bed5 <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010bec1:	83 ec 04             	sub    $0x4,%esp
f010bec4:	68 24 80 12 f0       	push   $0xf0128024
f010bec9:	6a 10                	push   $0x10
f010becb:	68 48 80 12 f0       	push   $0xf0128048
f010bed0:	e8 45 44 ff ff       	call   f010031a <_panic>
		return;
	}
	if(env == NULL)
f010bed5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010bed9:	74 78                	je     f010bf53 <set_program_priority+0xa4>
		return;
	switch(priority)
f010bedb:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010bedf:	77 56                	ja     f010bf37 <set_program_priority+0x88>
f010bee1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bee4:	c1 e0 02             	shl    $0x2,%eax
f010bee7:	05 84 80 12 f0       	add    $0xf0128084,%eax
f010beec:	8b 00                	mov    (%eax),%eax
f010beee:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010bef0:	83 ec 08             	sub    $0x8,%esp
f010bef3:	6a 01                	push   $0x1
f010bef5:	ff 75 08             	pushl  0x8(%ebp)
f010bef8:	e8 b6 d7 ff ff       	call   f01096b3 <half_WS_Size>
f010befd:	83 c4 10             	add    $0x10,%esp
			break;
f010bf00:	eb 35                	jmp    f010bf37 <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010bf02:	83 ec 08             	sub    $0x8,%esp
f010bf05:	6a 00                	push   $0x0
f010bf07:	ff 75 08             	pushl  0x8(%ebp)
f010bf0a:	e8 a4 d7 ff ff       	call   f01096b3 <half_WS_Size>
f010bf0f:	83 c4 10             	add    $0x10,%esp
			break;
f010bf12:	eb 23                	jmp    f010bf37 <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010bf14:	83 ec 08             	sub    $0x8,%esp
f010bf17:	6a 01                	push   $0x1
f010bf19:	ff 75 08             	pushl  0x8(%ebp)
f010bf1c:	e8 75 d7 ff ff       	call   f0109696 <double_WS_Size>
f010bf21:	83 c4 10             	add    $0x10,%esp
			break;
f010bf24:	eb 11                	jmp    f010bf37 <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010bf26:	83 ec 08             	sub    $0x8,%esp
f010bf29:	6a 00                	push   $0x0
f010bf2b:	ff 75 08             	pushl  0x8(%ebp)
f010bf2e:	e8 63 d7 ff ff       	call   f0109696 <double_WS_Size>
f010bf33:	83 c4 10             	add    $0x10,%esp
			break;
f010bf36:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010bf37:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf3a:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f010bf40:	83 ec 08             	sub    $0x8,%esp
f010bf43:	50                   	push   %eax
f010bf44:	68 65 80 12 f0       	push   $0xf0128065
f010bf49:	e8 1e 50 ff ff       	call   f0100f6c <cprintf>
f010bf4e:	83 c4 10             	add    $0x10,%esp
f010bf51:	eb 01                	jmp    f010bf54 <set_program_priority+0xa5>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010bf53:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010bf54:	c9                   	leave  
f010bf55:	c3                   	ret    

f010bf56 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010bf56:	55                   	push   %ebp
f010bf57:	89 e5                	mov    %esp,%ebp
f010bf59:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010bf5c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010bf63:	eb 29                	jmp    f010bf8e <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010bf65:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bf68:	89 d0                	mov    %edx,%eax
f010bf6a:	01 c0                	add    %eax,%eax
f010bf6c:	01 d0                	add    %edx,%eax
f010bf6e:	c1 e0 02             	shl    $0x2,%eax
f010bf71:	05 80 e9 17 f0       	add    $0xf017e980,%eax
f010bf76:	8b 00                	mov    (%eax),%eax
f010bf78:	83 ec 08             	sub    $0x8,%esp
f010bf7b:	50                   	push   %eax
f010bf7c:	ff 75 08             	pushl  0x8(%ebp)
f010bf7f:	e8 c6 66 01 00       	call   f012264a <strcmp>
f010bf84:	83 c4 10             	add    $0x10,%esp
f010bf87:	85 c0                	test   %eax,%eax
f010bf89:	74 0f                	je     f010bf9a <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010bf8b:	ff 45 f4             	incl   -0xc(%ebp)
f010bf8e:	a1 e4 ec 17 f0       	mov    0xf017ece4,%eax
f010bf93:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010bf96:	7c cd                	jl     f010bf65 <get_user_program_info+0xf>
f010bf98:	eb 01                	jmp    f010bf9b <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010bf9a:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010bf9b:	a1 e4 ec 17 f0       	mov    0xf017ece4,%eax
f010bfa0:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010bfa3:	75 1a                	jne    f010bfbf <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010bfa5:	83 ec 08             	sub    $0x8,%esp
f010bfa8:	ff 75 08             	pushl  0x8(%ebp)
f010bfab:	68 e9 8d 12 f0       	push   $0xf0128de9
f010bfb0:	e8 b7 4f ff ff       	call   f0100f6c <cprintf>
f010bfb5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010bfb8:	b8 00 00 00 00       	mov    $0x0,%eax
f010bfbd:	eb 11                	jmp    f010bfd0 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010bfbf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bfc2:	89 d0                	mov    %edx,%eax
f010bfc4:	01 c0                	add    %eax,%eax
f010bfc6:	01 d0                	add    %edx,%eax
f010bfc8:	c1 e0 02             	shl    $0x2,%eax
f010bfcb:	05 80 e9 17 f0       	add    $0xf017e980,%eax
}
f010bfd0:	c9                   	leave  
f010bfd1:	c3                   	ret    

f010bfd2 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010bfd2:	55                   	push   %ebp
f010bfd3:	89 e5                	mov    %esp,%ebp
f010bfd5:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010bfd8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010bfdf:	eb 2d                	jmp    f010c00e <get_user_program_info_by_env+0x3c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010bfe1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bfe4:	89 d0                	mov    %edx,%eax
f010bfe6:	01 c0                	add    %eax,%eax
f010bfe8:	01 d0                	add    %edx,%eax
f010bfea:	c1 e0 02             	shl    $0x2,%eax
f010bfed:	05 80 e9 17 f0       	add    $0xf017e980,%eax
f010bff2:	8b 00                	mov    (%eax),%eax
f010bff4:	8b 55 08             	mov    0x8(%ebp),%edx
f010bff7:	83 c2 20             	add    $0x20,%edx
f010bffa:	83 ec 08             	sub    $0x8,%esp
f010bffd:	50                   	push   %eax
f010bffe:	52                   	push   %edx
f010bfff:	e8 46 66 01 00       	call   f012264a <strcmp>
f010c004:	83 c4 10             	add    $0x10,%esp
f010c007:	85 c0                	test   %eax,%eax
f010c009:	74 0f                	je     f010c01a <get_user_program_info_by_env+0x48>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010c00b:	ff 45 f4             	incl   -0xc(%ebp)
f010c00e:	a1 e4 ec 17 f0       	mov    0xf017ece4,%eax
f010c013:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010c016:	7c c9                	jl     f010bfe1 <get_user_program_info_by_env+0xf>
f010c018:	eb 01                	jmp    f010c01b <get_user_program_info_by_env+0x49>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010c01a:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010c01b:	a1 e4 ec 17 f0       	mov    0xf017ece4,%eax
f010c020:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010c023:	75 17                	jne    f010c03c <get_user_program_info_by_env+0x6a>
	{
		cprintf("Unknown user program \n");
f010c025:	83 ec 0c             	sub    $0xc,%esp
f010c028:	68 04 8e 12 f0       	push   $0xf0128e04
f010c02d:	e8 3a 4f ff ff       	call   f0100f6c <cprintf>
f010c032:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c035:	b8 00 00 00 00       	mov    $0x0,%eax
f010c03a:	eb 11                	jmp    f010c04d <get_user_program_info_by_env+0x7b>
	}

	return &userPrograms[i];
f010c03c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c03f:	89 d0                	mov    %edx,%eax
f010c041:	01 c0                	add    %eax,%eax
f010c043:	01 d0                	add    %edx,%eax
f010c045:	c1 e0 02             	shl    $0x2,%eax
f010c048:	05 80 e9 17 f0       	add    $0xf017e980,%eax
}
f010c04d:	c9                   	leave  
f010c04e:	c3                   	ret    

f010c04f <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010c04f:	55                   	push   %ebp
f010c050:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010c052:	8b 45 08             	mov    0x8(%ebp),%eax
f010c055:	83 f8 13             	cmp    $0x13,%eax
f010c058:	77 0c                	ja     f010c066 <trapname+0x17>
		return excnames[trapno];
f010c05a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c05d:	8b 04 85 e0 91 12 f0 	mov    -0xfed6e20(,%eax,4),%eax
f010c064:	eb 2c                	jmp    f010c092 <trapname+0x43>
	if (trapno == T_SYSCALL)
f010c066:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010c06a:	75 07                	jne    f010c073 <trapname+0x24>
		return "System call";
f010c06c:	b8 20 8e 12 f0       	mov    $0xf0128e20,%eax
f010c071:	eb 1f                	jmp    f010c092 <trapname+0x43>
	else if (trapno == IRQ0_Clock)
f010c073:	83 7d 08 20          	cmpl   $0x20,0x8(%ebp)
f010c077:	75 07                	jne    f010c080 <trapname+0x31>
		return "Clock Interrupt";
f010c079:	b8 2c 8e 12 f0       	mov    $0xf0128e2c,%eax
f010c07e:	eb 12                	jmp    f010c092 <trapname+0x43>
	else if (trapno == IRQ1_KB)
f010c080:	83 7d 08 21          	cmpl   $0x21,0x8(%ebp)
f010c084:	75 07                	jne    f010c08d <trapname+0x3e>
		return "Keyboard Interrupt";
f010c086:	b8 3c 8e 12 f0       	mov    $0xf0128e3c,%eax
f010c08b:	eb 05                	jmp    f010c092 <trapname+0x43>
	return "(unknown trap)";
f010c08d:	b8 4f 8e 12 f0       	mov    $0xf0128e4f,%eax
}
f010c092:	5d                   	pop    %ebp
f010c093:	c3                   	ret    

f010c094 <ts_init>:


void ts_init(void)
{
f010c094:	55                   	push   %ebp
f010c095:	89 e5                	mov    %esp,%ebp
f010c097:	53                   	push   %ebx
f010c098:	83 ec 14             	sub    $0x14,%esp
	pushcli();	//disable interrupt - lock: to protect CPU info in multi-CPU
f010c09b:	e8 20 b1 ff ff       	call   f01071c0 <pushcli>

	struct cpu* c = mycpu();
f010c0a0:	e8 58 b0 ff ff       	call   f01070fd <mycpu>
f010c0a5:	89 45 f4             	mov    %eax,-0xc(%ebp)

	// Setup a TSS so that we get the right user kernel stack
	// when we trap to the kernel.
	// 2024: for now, temporarily set it to 0
	// since the scheduler will run first then switch to the first process
	c->ts.ts_esp0 = 0;
f010c0a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c0ab:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
	c->ts.ts_ss0 = GD_KD;
f010c0b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c0b5:	66 c7 40 14 10 00    	movw   $0x10,0x14(%eax)

	// Initialize the TSS field of the gdt.
	c->gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&(c->ts)), sizeof(struct Taskstate), 0);
f010c0bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c0be:	83 c0 0c             	add    $0xc,%eax
f010c0c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c0c4:	83 c2 0c             	add    $0xc,%edx
f010c0c7:	c1 ea 10             	shr    $0x10,%edx
f010c0ca:	88 d3                	mov    %dl,%bl
f010c0cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c0cf:	83 c2 0c             	add    $0xc,%edx
f010c0d2:	c1 ea 18             	shr    $0x18,%edx
f010c0d5:	88 d1                	mov    %dl,%cl
f010c0d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c0da:	66 c7 82 9c 00 00 00 	movw   $0x68,0x9c(%edx)
f010c0e1:	68 00 
f010c0e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c0e6:	66 89 82 9e 00 00 00 	mov    %ax,0x9e(%edx)
f010c0ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c0f0:	88 98 a0 00 00 00    	mov    %bl,0xa0(%eax)
f010c0f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c0f9:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010c0ff:	83 e2 f0             	and    $0xfffffff0,%edx
f010c102:	83 ca 09             	or     $0x9,%edx
f010c105:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010c10b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c10e:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010c114:	83 ca 10             	or     $0x10,%edx
f010c117:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010c11d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c120:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010c126:	83 e2 9f             	and    $0xffffff9f,%edx
f010c129:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010c12f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c132:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010c138:	83 ca 80             	or     $0xffffff80,%edx
f010c13b:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010c141:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c144:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010c14a:	83 e2 f0             	and    $0xfffffff0,%edx
f010c14d:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010c153:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c156:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010c15c:	83 e2 ef             	and    $0xffffffef,%edx
f010c15f:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010c165:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c168:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010c16e:	83 e2 df             	and    $0xffffffdf,%edx
f010c171:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010c177:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c17a:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010c180:	83 ca 40             	or     $0x40,%edx
f010c183:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010c189:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c18c:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010c192:	83 e2 7f             	and    $0x7f,%edx
f010c195:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010c19b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c19e:	88 88 a3 00 00 00    	mov    %cl,0xa3(%eax)
	c->gdt[GD_TSS >> 3].sd_s = 0;
f010c1a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c1a7:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010c1ad:	83 e2 ef             	and    $0xffffffef,%edx
f010c1b0:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)

	popcli();	//enable interrupt - lock: to protect CPU info in multi-CPU
f010c1b6:	e8 57 b0 ff ff       	call   f0107212 <popcli>
f010c1bb:	66 c7 45 f2 28 00    	movw   $0x28,-0xe(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c1c1:	66 8b 45 f2          	mov    -0xe(%ebp),%ax
f010c1c5:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);
}
f010c1c8:	90                   	nop
f010c1c9:	83 c4 14             	add    $0x14,%esp
f010c1cc:	5b                   	pop    %ebx
f010c1cd:	5d                   	pop    %ebp
f010c1ce:	c3                   	ret    

f010c1cf <idt_init>:
/// shifted function addresses can't be represented in relocation records.)
///
struct Gatedesc idt[256] = { { 0 } };

void idt_init(void)
{
f010c1cf:	55                   	push   %ebp
f010c1d0:	89 e5                	mov    %esp,%ebp
f010c1d2:	83 ec 10             	sub    $0x10,%esp
	//initialize idt
	SETGATE(idt[T_DBLFLT  ], 0, GD_KT , &DBL_FAULT, 0) ;		//8
f010c1d5:	b8 7e d6 10 f0       	mov    $0xf010d67e,%eax
f010c1da:	66 a3 20 f4 59 f0    	mov    %ax,0xf059f420
f010c1e0:	66 c7 05 22 f4 59 f0 	movw   $0x8,0xf059f422
f010c1e7:	08 00 
f010c1e9:	a0 24 f4 59 f0       	mov    0xf059f424,%al
f010c1ee:	83 e0 e0             	and    $0xffffffe0,%eax
f010c1f1:	a2 24 f4 59 f0       	mov    %al,0xf059f424
f010c1f6:	a0 24 f4 59 f0       	mov    0xf059f424,%al
f010c1fb:	83 e0 1f             	and    $0x1f,%eax
f010c1fe:	a2 24 f4 59 f0       	mov    %al,0xf059f424
f010c203:	a0 25 f4 59 f0       	mov    0xf059f425,%al
f010c208:	83 e0 f0             	and    $0xfffffff0,%eax
f010c20b:	83 c8 0e             	or     $0xe,%eax
f010c20e:	a2 25 f4 59 f0       	mov    %al,0xf059f425
f010c213:	a0 25 f4 59 f0       	mov    0xf059f425,%al
f010c218:	83 e0 ef             	and    $0xffffffef,%eax
f010c21b:	a2 25 f4 59 f0       	mov    %al,0xf059f425
f010c220:	a0 25 f4 59 f0       	mov    0xf059f425,%al
f010c225:	83 e0 9f             	and    $0xffffff9f,%eax
f010c228:	a2 25 f4 59 f0       	mov    %al,0xf059f425
f010c22d:	a0 25 f4 59 f0       	mov    0xf059f425,%al
f010c232:	83 c8 80             	or     $0xffffff80,%eax
f010c235:	a2 25 f4 59 f0       	mov    %al,0xf059f425
f010c23a:	b8 7e d6 10 f0       	mov    $0xf010d67e,%eax
f010c23f:	c1 e8 10             	shr    $0x10,%eax
f010c242:	66 a3 26 f4 59 f0    	mov    %ax,0xf059f426
	SETGATE(idt[T_PGFLT   ], 0, GD_KT , &PAGE_FAULT, 0) ;		//14
f010c248:	b8 86 d6 10 f0       	mov    $0xf010d686,%eax
f010c24d:	66 a3 50 f4 59 f0    	mov    %ax,0xf059f450
f010c253:	66 c7 05 52 f4 59 f0 	movw   $0x8,0xf059f452
f010c25a:	08 00 
f010c25c:	a0 54 f4 59 f0       	mov    0xf059f454,%al
f010c261:	83 e0 e0             	and    $0xffffffe0,%eax
f010c264:	a2 54 f4 59 f0       	mov    %al,0xf059f454
f010c269:	a0 54 f4 59 f0       	mov    0xf059f454,%al
f010c26e:	83 e0 1f             	and    $0x1f,%eax
f010c271:	a2 54 f4 59 f0       	mov    %al,0xf059f454
f010c276:	a0 55 f4 59 f0       	mov    0xf059f455,%al
f010c27b:	83 e0 f0             	and    $0xfffffff0,%eax
f010c27e:	83 c8 0e             	or     $0xe,%eax
f010c281:	a2 55 f4 59 f0       	mov    %al,0xf059f455
f010c286:	a0 55 f4 59 f0       	mov    0xf059f455,%al
f010c28b:	83 e0 ef             	and    $0xffffffef,%eax
f010c28e:	a2 55 f4 59 f0       	mov    %al,0xf059f455
f010c293:	a0 55 f4 59 f0       	mov    0xf059f455,%al
f010c298:	83 e0 9f             	and    $0xffffff9f,%eax
f010c29b:	a2 55 f4 59 f0       	mov    %al,0xf059f455
f010c2a0:	a0 55 f4 59 f0       	mov    0xf059f455,%al
f010c2a5:	83 c8 80             	or     $0xffffff80,%eax
f010c2a8:	a2 55 f4 59 f0       	mov    %al,0xf059f455
f010c2ad:	b8 86 d6 10 f0       	mov    $0xf010d686,%eax
f010c2b2:	c1 e8 10             	shr    $0x10,%eax
f010c2b5:	66 a3 56 f4 59 f0    	mov    %ax,0xf059f456
	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &IRQ0_CLK_HANDLER, 3) ;	//32
f010c2bb:	b8 8e d6 10 f0       	mov    $0xf010d68e,%eax
f010c2c0:	66 a3 e0 f4 59 f0    	mov    %ax,0xf059f4e0
f010c2c6:	66 c7 05 e2 f4 59 f0 	movw   $0x8,0xf059f4e2
f010c2cd:	08 00 
f010c2cf:	a0 e4 f4 59 f0       	mov    0xf059f4e4,%al
f010c2d4:	83 e0 e0             	and    $0xffffffe0,%eax
f010c2d7:	a2 e4 f4 59 f0       	mov    %al,0xf059f4e4
f010c2dc:	a0 e4 f4 59 f0       	mov    0xf059f4e4,%al
f010c2e1:	83 e0 1f             	and    $0x1f,%eax
f010c2e4:	a2 e4 f4 59 f0       	mov    %al,0xf059f4e4
f010c2e9:	a0 e5 f4 59 f0       	mov    0xf059f4e5,%al
f010c2ee:	83 e0 f0             	and    $0xfffffff0,%eax
f010c2f1:	83 c8 0e             	or     $0xe,%eax
f010c2f4:	a2 e5 f4 59 f0       	mov    %al,0xf059f4e5
f010c2f9:	a0 e5 f4 59 f0       	mov    0xf059f4e5,%al
f010c2fe:	83 e0 ef             	and    $0xffffffef,%eax
f010c301:	a2 e5 f4 59 f0       	mov    %al,0xf059f4e5
f010c306:	a0 e5 f4 59 f0       	mov    0xf059f4e5,%al
f010c30b:	83 c8 60             	or     $0x60,%eax
f010c30e:	a2 e5 f4 59 f0       	mov    %al,0xf059f4e5
f010c313:	a0 e5 f4 59 f0       	mov    0xf059f4e5,%al
f010c318:	83 c8 80             	or     $0xffffff80,%eax
f010c31b:	a2 e5 f4 59 f0       	mov    %al,0xf059f4e5
f010c320:	b8 8e d6 10 f0       	mov    $0xf010d68e,%eax
f010c325:	c1 e8 10             	shr    $0x10,%eax
f010c328:	66 a3 e6 f4 59 f0    	mov    %ax,0xf059f4e6
	SETGATE(idt[IRQ1_KB	  ], 0, GD_KT , &IRQ1_KBD_HANDLER, 3) ;	//33
f010c32e:	b8 98 d6 10 f0       	mov    $0xf010d698,%eax
f010c333:	66 a3 e8 f4 59 f0    	mov    %ax,0xf059f4e8
f010c339:	66 c7 05 ea f4 59 f0 	movw   $0x8,0xf059f4ea
f010c340:	08 00 
f010c342:	a0 ec f4 59 f0       	mov    0xf059f4ec,%al
f010c347:	83 e0 e0             	and    $0xffffffe0,%eax
f010c34a:	a2 ec f4 59 f0       	mov    %al,0xf059f4ec
f010c34f:	a0 ec f4 59 f0       	mov    0xf059f4ec,%al
f010c354:	83 e0 1f             	and    $0x1f,%eax
f010c357:	a2 ec f4 59 f0       	mov    %al,0xf059f4ec
f010c35c:	a0 ed f4 59 f0       	mov    0xf059f4ed,%al
f010c361:	83 e0 f0             	and    $0xfffffff0,%eax
f010c364:	83 c8 0e             	or     $0xe,%eax
f010c367:	a2 ed f4 59 f0       	mov    %al,0xf059f4ed
f010c36c:	a0 ed f4 59 f0       	mov    0xf059f4ed,%al
f010c371:	83 e0 ef             	and    $0xffffffef,%eax
f010c374:	a2 ed f4 59 f0       	mov    %al,0xf059f4ed
f010c379:	a0 ed f4 59 f0       	mov    0xf059f4ed,%al
f010c37e:	83 c8 60             	or     $0x60,%eax
f010c381:	a2 ed f4 59 f0       	mov    %al,0xf059f4ed
f010c386:	a0 ed f4 59 f0       	mov    0xf059f4ed,%al
f010c38b:	83 c8 80             	or     $0xffffff80,%eax
f010c38e:	a2 ed f4 59 f0       	mov    %al,0xf059f4ed
f010c393:	b8 98 d6 10 f0       	mov    $0xf010d698,%eax
f010c398:	c1 e8 10             	shr    $0x10,%eax
f010c39b:	66 a3 ee f4 59 f0    	mov    %ax,0xf059f4ee
	SETGATE(idt[T_SYSCALL ], 0, GD_KT , &SYSCALL_HANDLER, 3) ;	//48
f010c3a1:	b8 a2 d6 10 f0       	mov    $0xf010d6a2,%eax
f010c3a6:	66 a3 60 f5 59 f0    	mov    %ax,0xf059f560
f010c3ac:	66 c7 05 62 f5 59 f0 	movw   $0x8,0xf059f562
f010c3b3:	08 00 
f010c3b5:	a0 64 f5 59 f0       	mov    0xf059f564,%al
f010c3ba:	83 e0 e0             	and    $0xffffffe0,%eax
f010c3bd:	a2 64 f5 59 f0       	mov    %al,0xf059f564
f010c3c2:	a0 64 f5 59 f0       	mov    0xf059f564,%al
f010c3c7:	83 e0 1f             	and    $0x1f,%eax
f010c3ca:	a2 64 f5 59 f0       	mov    %al,0xf059f564
f010c3cf:	a0 65 f5 59 f0       	mov    0xf059f565,%al
f010c3d4:	83 e0 f0             	and    $0xfffffff0,%eax
f010c3d7:	83 c8 0e             	or     $0xe,%eax
f010c3da:	a2 65 f5 59 f0       	mov    %al,0xf059f565
f010c3df:	a0 65 f5 59 f0       	mov    0xf059f565,%al
f010c3e4:	83 e0 ef             	and    $0xffffffef,%eax
f010c3e7:	a2 65 f5 59 f0       	mov    %al,0xf059f565
f010c3ec:	a0 65 f5 59 f0       	mov    0xf059f565,%al
f010c3f1:	83 c8 60             	or     $0x60,%eax
f010c3f4:	a2 65 f5 59 f0       	mov    %al,0xf059f565
f010c3f9:	a0 65 f5 59 f0       	mov    0xf059f565,%al
f010c3fe:	83 c8 80             	or     $0xffffff80,%eax
f010c401:	a2 65 f5 59 f0       	mov    %al,0xf059f565
f010c406:	b8 a2 d6 10 f0       	mov    $0xf010d6a2,%eax
f010c40b:	c1 e8 10             	shr    $0x10,%eax
f010c40e:	66 a3 66 f5 59 f0    	mov    %ax,0xf059f566

	//S/W Exceptions
	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010c414:	b8 ac d6 10 f0       	mov    $0xf010d6ac,%eax
f010c419:	66 a3 e0 f3 59 f0    	mov    %ax,0xf059f3e0
f010c41f:	66 c7 05 e2 f3 59 f0 	movw   $0x8,0xf059f3e2
f010c426:	08 00 
f010c428:	a0 e4 f3 59 f0       	mov    0xf059f3e4,%al
f010c42d:	83 e0 e0             	and    $0xffffffe0,%eax
f010c430:	a2 e4 f3 59 f0       	mov    %al,0xf059f3e4
f010c435:	a0 e4 f3 59 f0       	mov    0xf059f3e4,%al
f010c43a:	83 e0 1f             	and    $0x1f,%eax
f010c43d:	a2 e4 f3 59 f0       	mov    %al,0xf059f3e4
f010c442:	a0 e5 f3 59 f0       	mov    0xf059f3e5,%al
f010c447:	83 e0 f0             	and    $0xfffffff0,%eax
f010c44a:	83 c8 0e             	or     $0xe,%eax
f010c44d:	a2 e5 f3 59 f0       	mov    %al,0xf059f3e5
f010c452:	a0 e5 f3 59 f0       	mov    0xf059f3e5,%al
f010c457:	83 e0 ef             	and    $0xffffffef,%eax
f010c45a:	a2 e5 f3 59 f0       	mov    %al,0xf059f3e5
f010c45f:	a0 e5 f3 59 f0       	mov    0xf059f3e5,%al
f010c464:	83 c8 60             	or     $0x60,%eax
f010c467:	a2 e5 f3 59 f0       	mov    %al,0xf059f3e5
f010c46c:	a0 e5 f3 59 f0       	mov    0xf059f3e5,%al
f010c471:	83 c8 80             	or     $0xffffff80,%eax
f010c474:	a2 e5 f3 59 f0       	mov    %al,0xf059f3e5
f010c479:	b8 ac d6 10 f0       	mov    $0xf010d6ac,%eax
f010c47e:	c1 e8 10             	shr    $0x10,%eax
f010c481:	66 a3 e6 f3 59 f0    	mov    %ax,0xf059f3e6
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010c487:	b8 b6 d6 10 f0       	mov    $0xf010d6b6,%eax
f010c48c:	66 a3 e8 f3 59 f0    	mov    %ax,0xf059f3e8
f010c492:	66 c7 05 ea f3 59 f0 	movw   $0x8,0xf059f3ea
f010c499:	08 00 
f010c49b:	a0 ec f3 59 f0       	mov    0xf059f3ec,%al
f010c4a0:	83 e0 e0             	and    $0xffffffe0,%eax
f010c4a3:	a2 ec f3 59 f0       	mov    %al,0xf059f3ec
f010c4a8:	a0 ec f3 59 f0       	mov    0xf059f3ec,%al
f010c4ad:	83 e0 1f             	and    $0x1f,%eax
f010c4b0:	a2 ec f3 59 f0       	mov    %al,0xf059f3ec
f010c4b5:	a0 ed f3 59 f0       	mov    0xf059f3ed,%al
f010c4ba:	83 c8 0f             	or     $0xf,%eax
f010c4bd:	a2 ed f3 59 f0       	mov    %al,0xf059f3ed
f010c4c2:	a0 ed f3 59 f0       	mov    0xf059f3ed,%al
f010c4c7:	83 e0 ef             	and    $0xffffffef,%eax
f010c4ca:	a2 ed f3 59 f0       	mov    %al,0xf059f3ed
f010c4cf:	a0 ed f3 59 f0       	mov    0xf059f3ed,%al
f010c4d4:	83 c8 60             	or     $0x60,%eax
f010c4d7:	a2 ed f3 59 f0       	mov    %al,0xf059f3ed
f010c4dc:	a0 ed f3 59 f0       	mov    0xf059f3ed,%al
f010c4e1:	83 c8 80             	or     $0xffffff80,%eax
f010c4e4:	a2 ed f3 59 f0       	mov    %al,0xf059f3ed
f010c4e9:	b8 b6 d6 10 f0       	mov    $0xf010d6b6,%eax
f010c4ee:	c1 e8 10             	shr    $0x10,%eax
f010c4f1:	66 a3 ee f3 59 f0    	mov    %ax,0xf059f3ee
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010c4f7:	b8 c0 d6 10 f0       	mov    $0xf010d6c0,%eax
f010c4fc:	66 a3 f0 f3 59 f0    	mov    %ax,0xf059f3f0
f010c502:	66 c7 05 f2 f3 59 f0 	movw   $0x8,0xf059f3f2
f010c509:	08 00 
f010c50b:	a0 f4 f3 59 f0       	mov    0xf059f3f4,%al
f010c510:	83 e0 e0             	and    $0xffffffe0,%eax
f010c513:	a2 f4 f3 59 f0       	mov    %al,0xf059f3f4
f010c518:	a0 f4 f3 59 f0       	mov    0xf059f3f4,%al
f010c51d:	83 e0 1f             	and    $0x1f,%eax
f010c520:	a2 f4 f3 59 f0       	mov    %al,0xf059f3f4
f010c525:	a0 f5 f3 59 f0       	mov    0xf059f3f5,%al
f010c52a:	83 e0 f0             	and    $0xfffffff0,%eax
f010c52d:	83 c8 0e             	or     $0xe,%eax
f010c530:	a2 f5 f3 59 f0       	mov    %al,0xf059f3f5
f010c535:	a0 f5 f3 59 f0       	mov    0xf059f3f5,%al
f010c53a:	83 e0 ef             	and    $0xffffffef,%eax
f010c53d:	a2 f5 f3 59 f0       	mov    %al,0xf059f3f5
f010c542:	a0 f5 f3 59 f0       	mov    0xf059f3f5,%al
f010c547:	83 c8 60             	or     $0x60,%eax
f010c54a:	a2 f5 f3 59 f0       	mov    %al,0xf059f3f5
f010c54f:	a0 f5 f3 59 f0       	mov    0xf059f3f5,%al
f010c554:	83 c8 80             	or     $0xffffff80,%eax
f010c557:	a2 f5 f3 59 f0       	mov    %al,0xf059f3f5
f010c55c:	b8 c0 d6 10 f0       	mov    $0xf010d6c0,%eax
f010c561:	c1 e8 10             	shr    $0x10,%eax
f010c564:	66 a3 f6 f3 59 f0    	mov    %ax,0xf059f3f6
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010c56a:	b8 ca d6 10 f0       	mov    $0xf010d6ca,%eax
f010c56f:	66 a3 f8 f3 59 f0    	mov    %ax,0xf059f3f8
f010c575:	66 c7 05 fa f3 59 f0 	movw   $0x8,0xf059f3fa
f010c57c:	08 00 
f010c57e:	a0 fc f3 59 f0       	mov    0xf059f3fc,%al
f010c583:	83 e0 e0             	and    $0xffffffe0,%eax
f010c586:	a2 fc f3 59 f0       	mov    %al,0xf059f3fc
f010c58b:	a0 fc f3 59 f0       	mov    0xf059f3fc,%al
f010c590:	83 e0 1f             	and    $0x1f,%eax
f010c593:	a2 fc f3 59 f0       	mov    %al,0xf059f3fc
f010c598:	a0 fd f3 59 f0       	mov    0xf059f3fd,%al
f010c59d:	83 c8 0f             	or     $0xf,%eax
f010c5a0:	a2 fd f3 59 f0       	mov    %al,0xf059f3fd
f010c5a5:	a0 fd f3 59 f0       	mov    0xf059f3fd,%al
f010c5aa:	83 e0 ef             	and    $0xffffffef,%eax
f010c5ad:	a2 fd f3 59 f0       	mov    %al,0xf059f3fd
f010c5b2:	a0 fd f3 59 f0       	mov    0xf059f3fd,%al
f010c5b7:	83 c8 60             	or     $0x60,%eax
f010c5ba:	a2 fd f3 59 f0       	mov    %al,0xf059f3fd
f010c5bf:	a0 fd f3 59 f0       	mov    0xf059f3fd,%al
f010c5c4:	83 c8 80             	or     $0xffffff80,%eax
f010c5c7:	a2 fd f3 59 f0       	mov    %al,0xf059f3fd
f010c5cc:	b8 ca d6 10 f0       	mov    $0xf010d6ca,%eax
f010c5d1:	c1 e8 10             	shr    $0x10,%eax
f010c5d4:	66 a3 fe f3 59 f0    	mov    %ax,0xf059f3fe
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010c5da:	b8 d4 d6 10 f0       	mov    $0xf010d6d4,%eax
f010c5df:	66 a3 00 f4 59 f0    	mov    %ax,0xf059f400
f010c5e5:	66 c7 05 02 f4 59 f0 	movw   $0x8,0xf059f402
f010c5ec:	08 00 
f010c5ee:	a0 04 f4 59 f0       	mov    0xf059f404,%al
f010c5f3:	83 e0 e0             	and    $0xffffffe0,%eax
f010c5f6:	a2 04 f4 59 f0       	mov    %al,0xf059f404
f010c5fb:	a0 04 f4 59 f0       	mov    0xf059f404,%al
f010c600:	83 e0 1f             	and    $0x1f,%eax
f010c603:	a2 04 f4 59 f0       	mov    %al,0xf059f404
f010c608:	a0 05 f4 59 f0       	mov    0xf059f405,%al
f010c60d:	83 c8 0f             	or     $0xf,%eax
f010c610:	a2 05 f4 59 f0       	mov    %al,0xf059f405
f010c615:	a0 05 f4 59 f0       	mov    0xf059f405,%al
f010c61a:	83 e0 ef             	and    $0xffffffef,%eax
f010c61d:	a2 05 f4 59 f0       	mov    %al,0xf059f405
f010c622:	a0 05 f4 59 f0       	mov    0xf059f405,%al
f010c627:	83 c8 60             	or     $0x60,%eax
f010c62a:	a2 05 f4 59 f0       	mov    %al,0xf059f405
f010c62f:	a0 05 f4 59 f0       	mov    0xf059f405,%al
f010c634:	83 c8 80             	or     $0xffffff80,%eax
f010c637:	a2 05 f4 59 f0       	mov    %al,0xf059f405
f010c63c:	b8 d4 d6 10 f0       	mov    $0xf010d6d4,%eax
f010c641:	c1 e8 10             	shr    $0x10,%eax
f010c644:	66 a3 06 f4 59 f0    	mov    %ax,0xf059f406
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010c64a:	b8 de d6 10 f0       	mov    $0xf010d6de,%eax
f010c64f:	66 a3 08 f4 59 f0    	mov    %ax,0xf059f408
f010c655:	66 c7 05 0a f4 59 f0 	movw   $0x8,0xf059f40a
f010c65c:	08 00 
f010c65e:	a0 0c f4 59 f0       	mov    0xf059f40c,%al
f010c663:	83 e0 e0             	and    $0xffffffe0,%eax
f010c666:	a2 0c f4 59 f0       	mov    %al,0xf059f40c
f010c66b:	a0 0c f4 59 f0       	mov    0xf059f40c,%al
f010c670:	83 e0 1f             	and    $0x1f,%eax
f010c673:	a2 0c f4 59 f0       	mov    %al,0xf059f40c
f010c678:	a0 0d f4 59 f0       	mov    0xf059f40d,%al
f010c67d:	83 e0 f0             	and    $0xfffffff0,%eax
f010c680:	83 c8 0e             	or     $0xe,%eax
f010c683:	a2 0d f4 59 f0       	mov    %al,0xf059f40d
f010c688:	a0 0d f4 59 f0       	mov    0xf059f40d,%al
f010c68d:	83 e0 ef             	and    $0xffffffef,%eax
f010c690:	a2 0d f4 59 f0       	mov    %al,0xf059f40d
f010c695:	a0 0d f4 59 f0       	mov    0xf059f40d,%al
f010c69a:	83 c8 60             	or     $0x60,%eax
f010c69d:	a2 0d f4 59 f0       	mov    %al,0xf059f40d
f010c6a2:	a0 0d f4 59 f0       	mov    0xf059f40d,%al
f010c6a7:	83 c8 80             	or     $0xffffff80,%eax
f010c6aa:	a2 0d f4 59 f0       	mov    %al,0xf059f40d
f010c6af:	b8 de d6 10 f0       	mov    $0xf010d6de,%eax
f010c6b4:	c1 e8 10             	shr    $0x10,%eax
f010c6b7:	66 a3 0e f4 59 f0    	mov    %ax,0xf059f40e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010c6bd:	b8 e8 d6 10 f0       	mov    $0xf010d6e8,%eax
f010c6c2:	66 a3 10 f4 59 f0    	mov    %ax,0xf059f410
f010c6c8:	66 c7 05 12 f4 59 f0 	movw   $0x8,0xf059f412
f010c6cf:	08 00 
f010c6d1:	a0 14 f4 59 f0       	mov    0xf059f414,%al
f010c6d6:	83 e0 e0             	and    $0xffffffe0,%eax
f010c6d9:	a2 14 f4 59 f0       	mov    %al,0xf059f414
f010c6de:	a0 14 f4 59 f0       	mov    0xf059f414,%al
f010c6e3:	83 e0 1f             	and    $0x1f,%eax
f010c6e6:	a2 14 f4 59 f0       	mov    %al,0xf059f414
f010c6eb:	a0 15 f4 59 f0       	mov    0xf059f415,%al
f010c6f0:	83 e0 f0             	and    $0xfffffff0,%eax
f010c6f3:	83 c8 0e             	or     $0xe,%eax
f010c6f6:	a2 15 f4 59 f0       	mov    %al,0xf059f415
f010c6fb:	a0 15 f4 59 f0       	mov    0xf059f415,%al
f010c700:	83 e0 ef             	and    $0xffffffef,%eax
f010c703:	a2 15 f4 59 f0       	mov    %al,0xf059f415
f010c708:	a0 15 f4 59 f0       	mov    0xf059f415,%al
f010c70d:	83 c8 60             	or     $0x60,%eax
f010c710:	a2 15 f4 59 f0       	mov    %al,0xf059f415
f010c715:	a0 15 f4 59 f0       	mov    0xf059f415,%al
f010c71a:	83 c8 80             	or     $0xffffff80,%eax
f010c71d:	a2 15 f4 59 f0       	mov    %al,0xf059f415
f010c722:	b8 e8 d6 10 f0       	mov    $0xf010d6e8,%eax
f010c727:	c1 e8 10             	shr    $0x10,%eax
f010c72a:	66 a3 16 f4 59 f0    	mov    %ax,0xf059f416
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010c730:	b8 f2 d6 10 f0       	mov    $0xf010d6f2,%eax
f010c735:	66 a3 18 f4 59 f0    	mov    %ax,0xf059f418
f010c73b:	66 c7 05 1a f4 59 f0 	movw   $0x8,0xf059f41a
f010c742:	08 00 
f010c744:	a0 1c f4 59 f0       	mov    0xf059f41c,%al
f010c749:	83 e0 e0             	and    $0xffffffe0,%eax
f010c74c:	a2 1c f4 59 f0       	mov    %al,0xf059f41c
f010c751:	a0 1c f4 59 f0       	mov    0xf059f41c,%al
f010c756:	83 e0 1f             	and    $0x1f,%eax
f010c759:	a2 1c f4 59 f0       	mov    %al,0xf059f41c
f010c75e:	a0 1d f4 59 f0       	mov    0xf059f41d,%al
f010c763:	83 e0 f0             	and    $0xfffffff0,%eax
f010c766:	83 c8 0e             	or     $0xe,%eax
f010c769:	a2 1d f4 59 f0       	mov    %al,0xf059f41d
f010c76e:	a0 1d f4 59 f0       	mov    0xf059f41d,%al
f010c773:	83 e0 ef             	and    $0xffffffef,%eax
f010c776:	a2 1d f4 59 f0       	mov    %al,0xf059f41d
f010c77b:	a0 1d f4 59 f0       	mov    0xf059f41d,%al
f010c780:	83 c8 60             	or     $0x60,%eax
f010c783:	a2 1d f4 59 f0       	mov    %al,0xf059f41d
f010c788:	a0 1d f4 59 f0       	mov    0xf059f41d,%al
f010c78d:	83 c8 80             	or     $0xffffff80,%eax
f010c790:	a2 1d f4 59 f0       	mov    %al,0xf059f41d
f010c795:	b8 f2 d6 10 f0       	mov    $0xf010d6f2,%eax
f010c79a:	c1 e8 10             	shr    $0x10,%eax
f010c79d:	66 a3 1e f4 59 f0    	mov    %ax,0xf059f41e
	//SETGATE(idt[T_DBLFLT ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010c7a3:	b8 f8 d6 10 f0       	mov    $0xf010d6f8,%eax
f010c7a8:	66 a3 30 f4 59 f0    	mov    %ax,0xf059f430
f010c7ae:	66 c7 05 32 f4 59 f0 	movw   $0x8,0xf059f432
f010c7b5:	08 00 
f010c7b7:	a0 34 f4 59 f0       	mov    0xf059f434,%al
f010c7bc:	83 e0 e0             	and    $0xffffffe0,%eax
f010c7bf:	a2 34 f4 59 f0       	mov    %al,0xf059f434
f010c7c4:	a0 34 f4 59 f0       	mov    0xf059f434,%al
f010c7c9:	83 e0 1f             	and    $0x1f,%eax
f010c7cc:	a2 34 f4 59 f0       	mov    %al,0xf059f434
f010c7d1:	a0 35 f4 59 f0       	mov    0xf059f435,%al
f010c7d6:	83 e0 f0             	and    $0xfffffff0,%eax
f010c7d9:	83 c8 0e             	or     $0xe,%eax
f010c7dc:	a2 35 f4 59 f0       	mov    %al,0xf059f435
f010c7e1:	a0 35 f4 59 f0       	mov    0xf059f435,%al
f010c7e6:	83 e0 ef             	and    $0xffffffef,%eax
f010c7e9:	a2 35 f4 59 f0       	mov    %al,0xf059f435
f010c7ee:	a0 35 f4 59 f0       	mov    0xf059f435,%al
f010c7f3:	83 c8 60             	or     $0x60,%eax
f010c7f6:	a2 35 f4 59 f0       	mov    %al,0xf059f435
f010c7fb:	a0 35 f4 59 f0       	mov    0xf059f435,%al
f010c800:	83 c8 80             	or     $0xffffff80,%eax
f010c803:	a2 35 f4 59 f0       	mov    %al,0xf059f435
f010c808:	b8 f8 d6 10 f0       	mov    $0xf010d6f8,%eax
f010c80d:	c1 e8 10             	shr    $0x10,%eax
f010c810:	66 a3 36 f4 59 f0    	mov    %ax,0xf059f436
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010c816:	b8 fc d6 10 f0       	mov    $0xf010d6fc,%eax
f010c81b:	66 a3 38 f4 59 f0    	mov    %ax,0xf059f438
f010c821:	66 c7 05 3a f4 59 f0 	movw   $0x8,0xf059f43a
f010c828:	08 00 
f010c82a:	a0 3c f4 59 f0       	mov    0xf059f43c,%al
f010c82f:	83 e0 e0             	and    $0xffffffe0,%eax
f010c832:	a2 3c f4 59 f0       	mov    %al,0xf059f43c
f010c837:	a0 3c f4 59 f0       	mov    0xf059f43c,%al
f010c83c:	83 e0 1f             	and    $0x1f,%eax
f010c83f:	a2 3c f4 59 f0       	mov    %al,0xf059f43c
f010c844:	a0 3d f4 59 f0       	mov    0xf059f43d,%al
f010c849:	83 e0 f0             	and    $0xfffffff0,%eax
f010c84c:	83 c8 0e             	or     $0xe,%eax
f010c84f:	a2 3d f4 59 f0       	mov    %al,0xf059f43d
f010c854:	a0 3d f4 59 f0       	mov    0xf059f43d,%al
f010c859:	83 e0 ef             	and    $0xffffffef,%eax
f010c85c:	a2 3d f4 59 f0       	mov    %al,0xf059f43d
f010c861:	a0 3d f4 59 f0       	mov    0xf059f43d,%al
f010c866:	83 c8 60             	or     $0x60,%eax
f010c869:	a2 3d f4 59 f0       	mov    %al,0xf059f43d
f010c86e:	a0 3d f4 59 f0       	mov    0xf059f43d,%al
f010c873:	83 c8 80             	or     $0xffffff80,%eax
f010c876:	a2 3d f4 59 f0       	mov    %al,0xf059f43d
f010c87b:	b8 fc d6 10 f0       	mov    $0xf010d6fc,%eax
f010c880:	c1 e8 10             	shr    $0x10,%eax
f010c883:	66 a3 3e f4 59 f0    	mov    %ax,0xf059f43e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010c889:	b8 00 d7 10 f0       	mov    $0xf010d700,%eax
f010c88e:	66 a3 40 f4 59 f0    	mov    %ax,0xf059f440
f010c894:	66 c7 05 42 f4 59 f0 	movw   $0x8,0xf059f442
f010c89b:	08 00 
f010c89d:	a0 44 f4 59 f0       	mov    0xf059f444,%al
f010c8a2:	83 e0 e0             	and    $0xffffffe0,%eax
f010c8a5:	a2 44 f4 59 f0       	mov    %al,0xf059f444
f010c8aa:	a0 44 f4 59 f0       	mov    0xf059f444,%al
f010c8af:	83 e0 1f             	and    $0x1f,%eax
f010c8b2:	a2 44 f4 59 f0       	mov    %al,0xf059f444
f010c8b7:	a0 45 f4 59 f0       	mov    0xf059f445,%al
f010c8bc:	83 e0 f0             	and    $0xfffffff0,%eax
f010c8bf:	83 c8 0e             	or     $0xe,%eax
f010c8c2:	a2 45 f4 59 f0       	mov    %al,0xf059f445
f010c8c7:	a0 45 f4 59 f0       	mov    0xf059f445,%al
f010c8cc:	83 e0 ef             	and    $0xffffffef,%eax
f010c8cf:	a2 45 f4 59 f0       	mov    %al,0xf059f445
f010c8d4:	a0 45 f4 59 f0       	mov    0xf059f445,%al
f010c8d9:	83 c8 60             	or     $0x60,%eax
f010c8dc:	a2 45 f4 59 f0       	mov    %al,0xf059f445
f010c8e1:	a0 45 f4 59 f0       	mov    0xf059f445,%al
f010c8e6:	83 c8 80             	or     $0xffffff80,%eax
f010c8e9:	a2 45 f4 59 f0       	mov    %al,0xf059f445
f010c8ee:	b8 00 d7 10 f0       	mov    $0xf010d700,%eax
f010c8f3:	c1 e8 10             	shr    $0x10,%eax
f010c8f6:	66 a3 46 f4 59 f0    	mov    %ax,0xf059f446
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010c8fc:	b8 04 d7 10 f0       	mov    $0xf010d704,%eax
f010c901:	66 a3 48 f4 59 f0    	mov    %ax,0xf059f448
f010c907:	66 c7 05 4a f4 59 f0 	movw   $0x8,0xf059f44a
f010c90e:	08 00 
f010c910:	a0 4c f4 59 f0       	mov    0xf059f44c,%al
f010c915:	83 e0 e0             	and    $0xffffffe0,%eax
f010c918:	a2 4c f4 59 f0       	mov    %al,0xf059f44c
f010c91d:	a0 4c f4 59 f0       	mov    0xf059f44c,%al
f010c922:	83 e0 1f             	and    $0x1f,%eax
f010c925:	a2 4c f4 59 f0       	mov    %al,0xf059f44c
f010c92a:	a0 4d f4 59 f0       	mov    0xf059f44d,%al
f010c92f:	83 e0 f0             	and    $0xfffffff0,%eax
f010c932:	83 c8 0e             	or     $0xe,%eax
f010c935:	a2 4d f4 59 f0       	mov    %al,0xf059f44d
f010c93a:	a0 4d f4 59 f0       	mov    0xf059f44d,%al
f010c93f:	83 e0 ef             	and    $0xffffffef,%eax
f010c942:	a2 4d f4 59 f0       	mov    %al,0xf059f44d
f010c947:	a0 4d f4 59 f0       	mov    0xf059f44d,%al
f010c94c:	83 c8 60             	or     $0x60,%eax
f010c94f:	a2 4d f4 59 f0       	mov    %al,0xf059f44d
f010c954:	a0 4d f4 59 f0       	mov    0xf059f44d,%al
f010c959:	83 c8 80             	or     $0xffffff80,%eax
f010c95c:	a2 4d f4 59 f0       	mov    %al,0xf059f44d
f010c961:	b8 04 d7 10 f0       	mov    $0xf010d704,%eax
f010c966:	c1 e8 10             	shr    $0x10,%eax
f010c969:	66 a3 4e f4 59 f0    	mov    %ax,0xf059f44e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010c96f:	b8 08 d7 10 f0       	mov    $0xf010d708,%eax
f010c974:	66 a3 60 f4 59 f0    	mov    %ax,0xf059f460
f010c97a:	66 c7 05 62 f4 59 f0 	movw   $0x8,0xf059f462
f010c981:	08 00 
f010c983:	a0 64 f4 59 f0       	mov    0xf059f464,%al
f010c988:	83 e0 e0             	and    $0xffffffe0,%eax
f010c98b:	a2 64 f4 59 f0       	mov    %al,0xf059f464
f010c990:	a0 64 f4 59 f0       	mov    0xf059f464,%al
f010c995:	83 e0 1f             	and    $0x1f,%eax
f010c998:	a2 64 f4 59 f0       	mov    %al,0xf059f464
f010c99d:	a0 65 f4 59 f0       	mov    0xf059f465,%al
f010c9a2:	83 e0 f0             	and    $0xfffffff0,%eax
f010c9a5:	83 c8 0e             	or     $0xe,%eax
f010c9a8:	a2 65 f4 59 f0       	mov    %al,0xf059f465
f010c9ad:	a0 65 f4 59 f0       	mov    0xf059f465,%al
f010c9b2:	83 e0 ef             	and    $0xffffffef,%eax
f010c9b5:	a2 65 f4 59 f0       	mov    %al,0xf059f465
f010c9ba:	a0 65 f4 59 f0       	mov    0xf059f465,%al
f010c9bf:	83 c8 60             	or     $0x60,%eax
f010c9c2:	a2 65 f4 59 f0       	mov    %al,0xf059f465
f010c9c7:	a0 65 f4 59 f0       	mov    0xf059f465,%al
f010c9cc:	83 c8 80             	or     $0xffffff80,%eax
f010c9cf:	a2 65 f4 59 f0       	mov    %al,0xf059f465
f010c9d4:	b8 08 d7 10 f0       	mov    $0xf010d708,%eax
f010c9d9:	c1 e8 10             	shr    $0x10,%eax
f010c9dc:	66 a3 66 f4 59 f0    	mov    %ax,0xf059f466
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010c9e2:	b8 0e d7 10 f0       	mov    $0xf010d70e,%eax
f010c9e7:	66 a3 68 f4 59 f0    	mov    %ax,0xf059f468
f010c9ed:	66 c7 05 6a f4 59 f0 	movw   $0x8,0xf059f46a
f010c9f4:	08 00 
f010c9f6:	a0 6c f4 59 f0       	mov    0xf059f46c,%al
f010c9fb:	83 e0 e0             	and    $0xffffffe0,%eax
f010c9fe:	a2 6c f4 59 f0       	mov    %al,0xf059f46c
f010ca03:	a0 6c f4 59 f0       	mov    0xf059f46c,%al
f010ca08:	83 e0 1f             	and    $0x1f,%eax
f010ca0b:	a2 6c f4 59 f0       	mov    %al,0xf059f46c
f010ca10:	a0 6d f4 59 f0       	mov    0xf059f46d,%al
f010ca15:	83 e0 f0             	and    $0xfffffff0,%eax
f010ca18:	83 c8 0e             	or     $0xe,%eax
f010ca1b:	a2 6d f4 59 f0       	mov    %al,0xf059f46d
f010ca20:	a0 6d f4 59 f0       	mov    0xf059f46d,%al
f010ca25:	83 e0 ef             	and    $0xffffffef,%eax
f010ca28:	a2 6d f4 59 f0       	mov    %al,0xf059f46d
f010ca2d:	a0 6d f4 59 f0       	mov    0xf059f46d,%al
f010ca32:	83 c8 60             	or     $0x60,%eax
f010ca35:	a2 6d f4 59 f0       	mov    %al,0xf059f46d
f010ca3a:	a0 6d f4 59 f0       	mov    0xf059f46d,%al
f010ca3f:	83 c8 80             	or     $0xffffff80,%eax
f010ca42:	a2 6d f4 59 f0       	mov    %al,0xf059f46d
f010ca47:	b8 0e d7 10 f0       	mov    $0xf010d70e,%eax
f010ca4c:	c1 e8 10             	shr    $0x10,%eax
f010ca4f:	66 a3 6e f4 59 f0    	mov    %ax,0xf059f46e
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010ca55:	b8 12 d7 10 f0       	mov    $0xf010d712,%eax
f010ca5a:	66 a3 70 f4 59 f0    	mov    %ax,0xf059f470
f010ca60:	66 c7 05 72 f4 59 f0 	movw   $0x8,0xf059f472
f010ca67:	08 00 
f010ca69:	a0 74 f4 59 f0       	mov    0xf059f474,%al
f010ca6e:	83 e0 e0             	and    $0xffffffe0,%eax
f010ca71:	a2 74 f4 59 f0       	mov    %al,0xf059f474
f010ca76:	a0 74 f4 59 f0       	mov    0xf059f474,%al
f010ca7b:	83 e0 1f             	and    $0x1f,%eax
f010ca7e:	a2 74 f4 59 f0       	mov    %al,0xf059f474
f010ca83:	a0 75 f4 59 f0       	mov    0xf059f475,%al
f010ca88:	83 e0 f0             	and    $0xfffffff0,%eax
f010ca8b:	83 c8 0e             	or     $0xe,%eax
f010ca8e:	a2 75 f4 59 f0       	mov    %al,0xf059f475
f010ca93:	a0 75 f4 59 f0       	mov    0xf059f475,%al
f010ca98:	83 e0 ef             	and    $0xffffffef,%eax
f010ca9b:	a2 75 f4 59 f0       	mov    %al,0xf059f475
f010caa0:	a0 75 f4 59 f0       	mov    0xf059f475,%al
f010caa5:	83 c8 60             	or     $0x60,%eax
f010caa8:	a2 75 f4 59 f0       	mov    %al,0xf059f475
f010caad:	a0 75 f4 59 f0       	mov    0xf059f475,%al
f010cab2:	83 c8 80             	or     $0xffffff80,%eax
f010cab5:	a2 75 f4 59 f0       	mov    %al,0xf059f475
f010caba:	b8 12 d7 10 f0       	mov    $0xf010d712,%eax
f010cabf:	c1 e8 10             	shr    $0x10,%eax
f010cac2:	66 a3 76 f4 59 f0    	mov    %ax,0xf059f476
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010cac8:	b8 18 d7 10 f0       	mov    $0xf010d718,%eax
f010cacd:	66 a3 78 f4 59 f0    	mov    %ax,0xf059f478
f010cad3:	66 c7 05 7a f4 59 f0 	movw   $0x8,0xf059f47a
f010cada:	08 00 
f010cadc:	a0 7c f4 59 f0       	mov    0xf059f47c,%al
f010cae1:	83 e0 e0             	and    $0xffffffe0,%eax
f010cae4:	a2 7c f4 59 f0       	mov    %al,0xf059f47c
f010cae9:	a0 7c f4 59 f0       	mov    0xf059f47c,%al
f010caee:	83 e0 1f             	and    $0x1f,%eax
f010caf1:	a2 7c f4 59 f0       	mov    %al,0xf059f47c
f010caf6:	a0 7d f4 59 f0       	mov    0xf059f47d,%al
f010cafb:	83 e0 f0             	and    $0xfffffff0,%eax
f010cafe:	83 c8 0e             	or     $0xe,%eax
f010cb01:	a2 7d f4 59 f0       	mov    %al,0xf059f47d
f010cb06:	a0 7d f4 59 f0       	mov    0xf059f47d,%al
f010cb0b:	83 e0 ef             	and    $0xffffffef,%eax
f010cb0e:	a2 7d f4 59 f0       	mov    %al,0xf059f47d
f010cb13:	a0 7d f4 59 f0       	mov    0xf059f47d,%al
f010cb18:	83 c8 60             	or     $0x60,%eax
f010cb1b:	a2 7d f4 59 f0       	mov    %al,0xf059f47d
f010cb20:	a0 7d f4 59 f0       	mov    0xf059f47d,%al
f010cb25:	83 c8 80             	or     $0xffffff80,%eax
f010cb28:	a2 7d f4 59 f0       	mov    %al,0xf059f47d
f010cb2d:	b8 18 d7 10 f0       	mov    $0xf010d718,%eax
f010cb32:	c1 e8 10             	shr    $0x10,%eax
f010cb35:	66 a3 7e f4 59 f0    	mov    %ax,0xf059f47e

	//IRQs
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010cb3b:	b8 1e d7 10 f0       	mov    $0xf010d71e,%eax
f010cb40:	66 a3 f0 f4 59 f0    	mov    %ax,0xf059f4f0
f010cb46:	66 c7 05 f2 f4 59 f0 	movw   $0x8,0xf059f4f2
f010cb4d:	08 00 
f010cb4f:	a0 f4 f4 59 f0       	mov    0xf059f4f4,%al
f010cb54:	83 e0 e0             	and    $0xffffffe0,%eax
f010cb57:	a2 f4 f4 59 f0       	mov    %al,0xf059f4f4
f010cb5c:	a0 f4 f4 59 f0       	mov    0xf059f4f4,%al
f010cb61:	83 e0 1f             	and    $0x1f,%eax
f010cb64:	a2 f4 f4 59 f0       	mov    %al,0xf059f4f4
f010cb69:	a0 f5 f4 59 f0       	mov    0xf059f4f5,%al
f010cb6e:	83 e0 f0             	and    $0xfffffff0,%eax
f010cb71:	83 c8 0e             	or     $0xe,%eax
f010cb74:	a2 f5 f4 59 f0       	mov    %al,0xf059f4f5
f010cb79:	a0 f5 f4 59 f0       	mov    0xf059f4f5,%al
f010cb7e:	83 e0 ef             	and    $0xffffffef,%eax
f010cb81:	a2 f5 f4 59 f0       	mov    %al,0xf059f4f5
f010cb86:	a0 f5 f4 59 f0       	mov    0xf059f4f5,%al
f010cb8b:	83 c8 60             	or     $0x60,%eax
f010cb8e:	a2 f5 f4 59 f0       	mov    %al,0xf059f4f5
f010cb93:	a0 f5 f4 59 f0       	mov    0xf059f4f5,%al
f010cb98:	83 c8 80             	or     $0xffffff80,%eax
f010cb9b:	a2 f5 f4 59 f0       	mov    %al,0xf059f4f5
f010cba0:	b8 1e d7 10 f0       	mov    $0xf010d71e,%eax
f010cba5:	c1 e8 10             	shr    $0x10,%eax
f010cba8:	66 a3 f6 f4 59 f0    	mov    %ax,0xf059f4f6
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010cbae:	b8 24 d7 10 f0       	mov    $0xf010d724,%eax
f010cbb3:	66 a3 f8 f4 59 f0    	mov    %ax,0xf059f4f8
f010cbb9:	66 c7 05 fa f4 59 f0 	movw   $0x8,0xf059f4fa
f010cbc0:	08 00 
f010cbc2:	a0 fc f4 59 f0       	mov    0xf059f4fc,%al
f010cbc7:	83 e0 e0             	and    $0xffffffe0,%eax
f010cbca:	a2 fc f4 59 f0       	mov    %al,0xf059f4fc
f010cbcf:	a0 fc f4 59 f0       	mov    0xf059f4fc,%al
f010cbd4:	83 e0 1f             	and    $0x1f,%eax
f010cbd7:	a2 fc f4 59 f0       	mov    %al,0xf059f4fc
f010cbdc:	a0 fd f4 59 f0       	mov    0xf059f4fd,%al
f010cbe1:	83 e0 f0             	and    $0xfffffff0,%eax
f010cbe4:	83 c8 0e             	or     $0xe,%eax
f010cbe7:	a2 fd f4 59 f0       	mov    %al,0xf059f4fd
f010cbec:	a0 fd f4 59 f0       	mov    0xf059f4fd,%al
f010cbf1:	83 e0 ef             	and    $0xffffffef,%eax
f010cbf4:	a2 fd f4 59 f0       	mov    %al,0xf059f4fd
f010cbf9:	a0 fd f4 59 f0       	mov    0xf059f4fd,%al
f010cbfe:	83 c8 60             	or     $0x60,%eax
f010cc01:	a2 fd f4 59 f0       	mov    %al,0xf059f4fd
f010cc06:	a0 fd f4 59 f0       	mov    0xf059f4fd,%al
f010cc0b:	83 c8 80             	or     $0xffffff80,%eax
f010cc0e:	a2 fd f4 59 f0       	mov    %al,0xf059f4fd
f010cc13:	b8 24 d7 10 f0       	mov    $0xf010d724,%eax
f010cc18:	c1 e8 10             	shr    $0x10,%eax
f010cc1b:	66 a3 fe f4 59 f0    	mov    %ax,0xf059f4fe
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010cc21:	b8 2a d7 10 f0       	mov    $0xf010d72a,%eax
f010cc26:	66 a3 00 f5 59 f0    	mov    %ax,0xf059f500
f010cc2c:	66 c7 05 02 f5 59 f0 	movw   $0x8,0xf059f502
f010cc33:	08 00 
f010cc35:	a0 04 f5 59 f0       	mov    0xf059f504,%al
f010cc3a:	83 e0 e0             	and    $0xffffffe0,%eax
f010cc3d:	a2 04 f5 59 f0       	mov    %al,0xf059f504
f010cc42:	a0 04 f5 59 f0       	mov    0xf059f504,%al
f010cc47:	83 e0 1f             	and    $0x1f,%eax
f010cc4a:	a2 04 f5 59 f0       	mov    %al,0xf059f504
f010cc4f:	a0 05 f5 59 f0       	mov    0xf059f505,%al
f010cc54:	83 e0 f0             	and    $0xfffffff0,%eax
f010cc57:	83 c8 0e             	or     $0xe,%eax
f010cc5a:	a2 05 f5 59 f0       	mov    %al,0xf059f505
f010cc5f:	a0 05 f5 59 f0       	mov    0xf059f505,%al
f010cc64:	83 e0 ef             	and    $0xffffffef,%eax
f010cc67:	a2 05 f5 59 f0       	mov    %al,0xf059f505
f010cc6c:	a0 05 f5 59 f0       	mov    0xf059f505,%al
f010cc71:	83 c8 60             	or     $0x60,%eax
f010cc74:	a2 05 f5 59 f0       	mov    %al,0xf059f505
f010cc79:	a0 05 f5 59 f0       	mov    0xf059f505,%al
f010cc7e:	83 c8 80             	or     $0xffffff80,%eax
f010cc81:	a2 05 f5 59 f0       	mov    %al,0xf059f505
f010cc86:	b8 2a d7 10 f0       	mov    $0xf010d72a,%eax
f010cc8b:	c1 e8 10             	shr    $0x10,%eax
f010cc8e:	66 a3 06 f5 59 f0    	mov    %ax,0xf059f506
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010cc94:	b8 30 d7 10 f0       	mov    $0xf010d730,%eax
f010cc99:	66 a3 08 f5 59 f0    	mov    %ax,0xf059f508
f010cc9f:	66 c7 05 0a f5 59 f0 	movw   $0x8,0xf059f50a
f010cca6:	08 00 
f010cca8:	a0 0c f5 59 f0       	mov    0xf059f50c,%al
f010ccad:	83 e0 e0             	and    $0xffffffe0,%eax
f010ccb0:	a2 0c f5 59 f0       	mov    %al,0xf059f50c
f010ccb5:	a0 0c f5 59 f0       	mov    0xf059f50c,%al
f010ccba:	83 e0 1f             	and    $0x1f,%eax
f010ccbd:	a2 0c f5 59 f0       	mov    %al,0xf059f50c
f010ccc2:	a0 0d f5 59 f0       	mov    0xf059f50d,%al
f010ccc7:	83 e0 f0             	and    $0xfffffff0,%eax
f010ccca:	83 c8 0e             	or     $0xe,%eax
f010cccd:	a2 0d f5 59 f0       	mov    %al,0xf059f50d
f010ccd2:	a0 0d f5 59 f0       	mov    0xf059f50d,%al
f010ccd7:	83 e0 ef             	and    $0xffffffef,%eax
f010ccda:	a2 0d f5 59 f0       	mov    %al,0xf059f50d
f010ccdf:	a0 0d f5 59 f0       	mov    0xf059f50d,%al
f010cce4:	83 c8 60             	or     $0x60,%eax
f010cce7:	a2 0d f5 59 f0       	mov    %al,0xf059f50d
f010ccec:	a0 0d f5 59 f0       	mov    0xf059f50d,%al
f010ccf1:	83 c8 80             	or     $0xffffff80,%eax
f010ccf4:	a2 0d f5 59 f0       	mov    %al,0xf059f50d
f010ccf9:	b8 30 d7 10 f0       	mov    $0xf010d730,%eax
f010ccfe:	c1 e8 10             	shr    $0x10,%eax
f010cd01:	66 a3 0e f5 59 f0    	mov    %ax,0xf059f50e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010cd07:	b8 36 d7 10 f0       	mov    $0xf010d736,%eax
f010cd0c:	66 a3 10 f5 59 f0    	mov    %ax,0xf059f510
f010cd12:	66 c7 05 12 f5 59 f0 	movw   $0x8,0xf059f512
f010cd19:	08 00 
f010cd1b:	a0 14 f5 59 f0       	mov    0xf059f514,%al
f010cd20:	83 e0 e0             	and    $0xffffffe0,%eax
f010cd23:	a2 14 f5 59 f0       	mov    %al,0xf059f514
f010cd28:	a0 14 f5 59 f0       	mov    0xf059f514,%al
f010cd2d:	83 e0 1f             	and    $0x1f,%eax
f010cd30:	a2 14 f5 59 f0       	mov    %al,0xf059f514
f010cd35:	a0 15 f5 59 f0       	mov    0xf059f515,%al
f010cd3a:	83 e0 f0             	and    $0xfffffff0,%eax
f010cd3d:	83 c8 0e             	or     $0xe,%eax
f010cd40:	a2 15 f5 59 f0       	mov    %al,0xf059f515
f010cd45:	a0 15 f5 59 f0       	mov    0xf059f515,%al
f010cd4a:	83 e0 ef             	and    $0xffffffef,%eax
f010cd4d:	a2 15 f5 59 f0       	mov    %al,0xf059f515
f010cd52:	a0 15 f5 59 f0       	mov    0xf059f515,%al
f010cd57:	83 c8 60             	or     $0x60,%eax
f010cd5a:	a2 15 f5 59 f0       	mov    %al,0xf059f515
f010cd5f:	a0 15 f5 59 f0       	mov    0xf059f515,%al
f010cd64:	83 c8 80             	or     $0xffffff80,%eax
f010cd67:	a2 15 f5 59 f0       	mov    %al,0xf059f515
f010cd6c:	b8 36 d7 10 f0       	mov    $0xf010d736,%eax
f010cd71:	c1 e8 10             	shr    $0x10,%eax
f010cd74:	66 a3 16 f5 59 f0    	mov    %ax,0xf059f516
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010cd7a:	b8 3c d7 10 f0       	mov    $0xf010d73c,%eax
f010cd7f:	66 a3 18 f5 59 f0    	mov    %ax,0xf059f518
f010cd85:	66 c7 05 1a f5 59 f0 	movw   $0x8,0xf059f51a
f010cd8c:	08 00 
f010cd8e:	a0 1c f5 59 f0       	mov    0xf059f51c,%al
f010cd93:	83 e0 e0             	and    $0xffffffe0,%eax
f010cd96:	a2 1c f5 59 f0       	mov    %al,0xf059f51c
f010cd9b:	a0 1c f5 59 f0       	mov    0xf059f51c,%al
f010cda0:	83 e0 1f             	and    $0x1f,%eax
f010cda3:	a2 1c f5 59 f0       	mov    %al,0xf059f51c
f010cda8:	a0 1d f5 59 f0       	mov    0xf059f51d,%al
f010cdad:	83 e0 f0             	and    $0xfffffff0,%eax
f010cdb0:	83 c8 0e             	or     $0xe,%eax
f010cdb3:	a2 1d f5 59 f0       	mov    %al,0xf059f51d
f010cdb8:	a0 1d f5 59 f0       	mov    0xf059f51d,%al
f010cdbd:	83 e0 ef             	and    $0xffffffef,%eax
f010cdc0:	a2 1d f5 59 f0       	mov    %al,0xf059f51d
f010cdc5:	a0 1d f5 59 f0       	mov    0xf059f51d,%al
f010cdca:	83 c8 60             	or     $0x60,%eax
f010cdcd:	a2 1d f5 59 f0       	mov    %al,0xf059f51d
f010cdd2:	a0 1d f5 59 f0       	mov    0xf059f51d,%al
f010cdd7:	83 c8 80             	or     $0xffffff80,%eax
f010cdda:	a2 1d f5 59 f0       	mov    %al,0xf059f51d
f010cddf:	b8 3c d7 10 f0       	mov    $0xf010d73c,%eax
f010cde4:	c1 e8 10             	shr    $0x10,%eax
f010cde7:	66 a3 1e f5 59 f0    	mov    %ax,0xf059f51e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010cded:	b8 42 d7 10 f0       	mov    $0xf010d742,%eax
f010cdf2:	66 a3 20 f5 59 f0    	mov    %ax,0xf059f520
f010cdf8:	66 c7 05 22 f5 59 f0 	movw   $0x8,0xf059f522
f010cdff:	08 00 
f010ce01:	a0 24 f5 59 f0       	mov    0xf059f524,%al
f010ce06:	83 e0 e0             	and    $0xffffffe0,%eax
f010ce09:	a2 24 f5 59 f0       	mov    %al,0xf059f524
f010ce0e:	a0 24 f5 59 f0       	mov    0xf059f524,%al
f010ce13:	83 e0 1f             	and    $0x1f,%eax
f010ce16:	a2 24 f5 59 f0       	mov    %al,0xf059f524
f010ce1b:	a0 25 f5 59 f0       	mov    0xf059f525,%al
f010ce20:	83 e0 f0             	and    $0xfffffff0,%eax
f010ce23:	83 c8 0e             	or     $0xe,%eax
f010ce26:	a2 25 f5 59 f0       	mov    %al,0xf059f525
f010ce2b:	a0 25 f5 59 f0       	mov    0xf059f525,%al
f010ce30:	83 e0 ef             	and    $0xffffffef,%eax
f010ce33:	a2 25 f5 59 f0       	mov    %al,0xf059f525
f010ce38:	a0 25 f5 59 f0       	mov    0xf059f525,%al
f010ce3d:	83 c8 60             	or     $0x60,%eax
f010ce40:	a2 25 f5 59 f0       	mov    %al,0xf059f525
f010ce45:	a0 25 f5 59 f0       	mov    0xf059f525,%al
f010ce4a:	83 c8 80             	or     $0xffffff80,%eax
f010ce4d:	a2 25 f5 59 f0       	mov    %al,0xf059f525
f010ce52:	b8 42 d7 10 f0       	mov    $0xf010d742,%eax
f010ce57:	c1 e8 10             	shr    $0x10,%eax
f010ce5a:	66 a3 26 f5 59 f0    	mov    %ax,0xf059f526
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010ce60:	b8 48 d7 10 f0       	mov    $0xf010d748,%eax
f010ce65:	66 a3 28 f5 59 f0    	mov    %ax,0xf059f528
f010ce6b:	66 c7 05 2a f5 59 f0 	movw   $0x8,0xf059f52a
f010ce72:	08 00 
f010ce74:	a0 2c f5 59 f0       	mov    0xf059f52c,%al
f010ce79:	83 e0 e0             	and    $0xffffffe0,%eax
f010ce7c:	a2 2c f5 59 f0       	mov    %al,0xf059f52c
f010ce81:	a0 2c f5 59 f0       	mov    0xf059f52c,%al
f010ce86:	83 e0 1f             	and    $0x1f,%eax
f010ce89:	a2 2c f5 59 f0       	mov    %al,0xf059f52c
f010ce8e:	a0 2d f5 59 f0       	mov    0xf059f52d,%al
f010ce93:	83 e0 f0             	and    $0xfffffff0,%eax
f010ce96:	83 c8 0e             	or     $0xe,%eax
f010ce99:	a2 2d f5 59 f0       	mov    %al,0xf059f52d
f010ce9e:	a0 2d f5 59 f0       	mov    0xf059f52d,%al
f010cea3:	83 e0 ef             	and    $0xffffffef,%eax
f010cea6:	a2 2d f5 59 f0       	mov    %al,0xf059f52d
f010ceab:	a0 2d f5 59 f0       	mov    0xf059f52d,%al
f010ceb0:	83 c8 60             	or     $0x60,%eax
f010ceb3:	a2 2d f5 59 f0       	mov    %al,0xf059f52d
f010ceb8:	a0 2d f5 59 f0       	mov    0xf059f52d,%al
f010cebd:	83 c8 80             	or     $0xffffff80,%eax
f010cec0:	a2 2d f5 59 f0       	mov    %al,0xf059f52d
f010cec5:	b8 48 d7 10 f0       	mov    $0xf010d748,%eax
f010ceca:	c1 e8 10             	shr    $0x10,%eax
f010cecd:	66 a3 2e f5 59 f0    	mov    %ax,0xf059f52e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010ced3:	b8 4e d7 10 f0       	mov    $0xf010d74e,%eax
f010ced8:	66 a3 30 f5 59 f0    	mov    %ax,0xf059f530
f010cede:	66 c7 05 32 f5 59 f0 	movw   $0x8,0xf059f532
f010cee5:	08 00 
f010cee7:	a0 34 f5 59 f0       	mov    0xf059f534,%al
f010ceec:	83 e0 e0             	and    $0xffffffe0,%eax
f010ceef:	a2 34 f5 59 f0       	mov    %al,0xf059f534
f010cef4:	a0 34 f5 59 f0       	mov    0xf059f534,%al
f010cef9:	83 e0 1f             	and    $0x1f,%eax
f010cefc:	a2 34 f5 59 f0       	mov    %al,0xf059f534
f010cf01:	a0 35 f5 59 f0       	mov    0xf059f535,%al
f010cf06:	83 e0 f0             	and    $0xfffffff0,%eax
f010cf09:	83 c8 0e             	or     $0xe,%eax
f010cf0c:	a2 35 f5 59 f0       	mov    %al,0xf059f535
f010cf11:	a0 35 f5 59 f0       	mov    0xf059f535,%al
f010cf16:	83 e0 ef             	and    $0xffffffef,%eax
f010cf19:	a2 35 f5 59 f0       	mov    %al,0xf059f535
f010cf1e:	a0 35 f5 59 f0       	mov    0xf059f535,%al
f010cf23:	83 c8 60             	or     $0x60,%eax
f010cf26:	a2 35 f5 59 f0       	mov    %al,0xf059f535
f010cf2b:	a0 35 f5 59 f0       	mov    0xf059f535,%al
f010cf30:	83 c8 80             	or     $0xffffff80,%eax
f010cf33:	a2 35 f5 59 f0       	mov    %al,0xf059f535
f010cf38:	b8 4e d7 10 f0       	mov    $0xf010d74e,%eax
f010cf3d:	c1 e8 10             	shr    $0x10,%eax
f010cf40:	66 a3 36 f5 59 f0    	mov    %ax,0xf059f536
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010cf46:	b8 54 d7 10 f0       	mov    $0xf010d754,%eax
f010cf4b:	66 a3 38 f5 59 f0    	mov    %ax,0xf059f538
f010cf51:	66 c7 05 3a f5 59 f0 	movw   $0x8,0xf059f53a
f010cf58:	08 00 
f010cf5a:	a0 3c f5 59 f0       	mov    0xf059f53c,%al
f010cf5f:	83 e0 e0             	and    $0xffffffe0,%eax
f010cf62:	a2 3c f5 59 f0       	mov    %al,0xf059f53c
f010cf67:	a0 3c f5 59 f0       	mov    0xf059f53c,%al
f010cf6c:	83 e0 1f             	and    $0x1f,%eax
f010cf6f:	a2 3c f5 59 f0       	mov    %al,0xf059f53c
f010cf74:	a0 3d f5 59 f0       	mov    0xf059f53d,%al
f010cf79:	83 e0 f0             	and    $0xfffffff0,%eax
f010cf7c:	83 c8 0e             	or     $0xe,%eax
f010cf7f:	a2 3d f5 59 f0       	mov    %al,0xf059f53d
f010cf84:	a0 3d f5 59 f0       	mov    0xf059f53d,%al
f010cf89:	83 e0 ef             	and    $0xffffffef,%eax
f010cf8c:	a2 3d f5 59 f0       	mov    %al,0xf059f53d
f010cf91:	a0 3d f5 59 f0       	mov    0xf059f53d,%al
f010cf96:	83 c8 60             	or     $0x60,%eax
f010cf99:	a2 3d f5 59 f0       	mov    %al,0xf059f53d
f010cf9e:	a0 3d f5 59 f0       	mov    0xf059f53d,%al
f010cfa3:	83 c8 80             	or     $0xffffff80,%eax
f010cfa6:	a2 3d f5 59 f0       	mov    %al,0xf059f53d
f010cfab:	b8 54 d7 10 f0       	mov    $0xf010d754,%eax
f010cfb0:	c1 e8 10             	shr    $0x10,%eax
f010cfb3:	66 a3 3e f5 59 f0    	mov    %ax,0xf059f53e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010cfb9:	b8 5a d7 10 f0       	mov    $0xf010d75a,%eax
f010cfbe:	66 a3 40 f5 59 f0    	mov    %ax,0xf059f540
f010cfc4:	66 c7 05 42 f5 59 f0 	movw   $0x8,0xf059f542
f010cfcb:	08 00 
f010cfcd:	a0 44 f5 59 f0       	mov    0xf059f544,%al
f010cfd2:	83 e0 e0             	and    $0xffffffe0,%eax
f010cfd5:	a2 44 f5 59 f0       	mov    %al,0xf059f544
f010cfda:	a0 44 f5 59 f0       	mov    0xf059f544,%al
f010cfdf:	83 e0 1f             	and    $0x1f,%eax
f010cfe2:	a2 44 f5 59 f0       	mov    %al,0xf059f544
f010cfe7:	a0 45 f5 59 f0       	mov    0xf059f545,%al
f010cfec:	83 e0 f0             	and    $0xfffffff0,%eax
f010cfef:	83 c8 0e             	or     $0xe,%eax
f010cff2:	a2 45 f5 59 f0       	mov    %al,0xf059f545
f010cff7:	a0 45 f5 59 f0       	mov    0xf059f545,%al
f010cffc:	83 e0 ef             	and    $0xffffffef,%eax
f010cfff:	a2 45 f5 59 f0       	mov    %al,0xf059f545
f010d004:	a0 45 f5 59 f0       	mov    0xf059f545,%al
f010d009:	83 c8 60             	or     $0x60,%eax
f010d00c:	a2 45 f5 59 f0       	mov    %al,0xf059f545
f010d011:	a0 45 f5 59 f0       	mov    0xf059f545,%al
f010d016:	83 c8 80             	or     $0xffffff80,%eax
f010d019:	a2 45 f5 59 f0       	mov    %al,0xf059f545
f010d01e:	b8 5a d7 10 f0       	mov    $0xf010d75a,%eax
f010d023:	c1 e8 10             	shr    $0x10,%eax
f010d026:	66 a3 46 f5 59 f0    	mov    %ax,0xf059f546
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010d02c:	b8 60 d7 10 f0       	mov    $0xf010d760,%eax
f010d031:	66 a3 48 f5 59 f0    	mov    %ax,0xf059f548
f010d037:	66 c7 05 4a f5 59 f0 	movw   $0x8,0xf059f54a
f010d03e:	08 00 
f010d040:	a0 4c f5 59 f0       	mov    0xf059f54c,%al
f010d045:	83 e0 e0             	and    $0xffffffe0,%eax
f010d048:	a2 4c f5 59 f0       	mov    %al,0xf059f54c
f010d04d:	a0 4c f5 59 f0       	mov    0xf059f54c,%al
f010d052:	83 e0 1f             	and    $0x1f,%eax
f010d055:	a2 4c f5 59 f0       	mov    %al,0xf059f54c
f010d05a:	a0 4d f5 59 f0       	mov    0xf059f54d,%al
f010d05f:	83 e0 f0             	and    $0xfffffff0,%eax
f010d062:	83 c8 0e             	or     $0xe,%eax
f010d065:	a2 4d f5 59 f0       	mov    %al,0xf059f54d
f010d06a:	a0 4d f5 59 f0       	mov    0xf059f54d,%al
f010d06f:	83 e0 ef             	and    $0xffffffef,%eax
f010d072:	a2 4d f5 59 f0       	mov    %al,0xf059f54d
f010d077:	a0 4d f5 59 f0       	mov    0xf059f54d,%al
f010d07c:	83 c8 60             	or     $0x60,%eax
f010d07f:	a2 4d f5 59 f0       	mov    %al,0xf059f54d
f010d084:	a0 4d f5 59 f0       	mov    0xf059f54d,%al
f010d089:	83 c8 80             	or     $0xffffff80,%eax
f010d08c:	a2 4d f5 59 f0       	mov    %al,0xf059f54d
f010d091:	b8 60 d7 10 f0       	mov    $0xf010d760,%eax
f010d096:	c1 e8 10             	shr    $0x10,%eax
f010d099:	66 a3 4e f5 59 f0    	mov    %ax,0xf059f54e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010d09f:	b8 66 d7 10 f0       	mov    $0xf010d766,%eax
f010d0a4:	66 a3 50 f5 59 f0    	mov    %ax,0xf059f550
f010d0aa:	66 c7 05 52 f5 59 f0 	movw   $0x8,0xf059f552
f010d0b1:	08 00 
f010d0b3:	a0 54 f5 59 f0       	mov    0xf059f554,%al
f010d0b8:	83 e0 e0             	and    $0xffffffe0,%eax
f010d0bb:	a2 54 f5 59 f0       	mov    %al,0xf059f554
f010d0c0:	a0 54 f5 59 f0       	mov    0xf059f554,%al
f010d0c5:	83 e0 1f             	and    $0x1f,%eax
f010d0c8:	a2 54 f5 59 f0       	mov    %al,0xf059f554
f010d0cd:	a0 55 f5 59 f0       	mov    0xf059f555,%al
f010d0d2:	83 e0 f0             	and    $0xfffffff0,%eax
f010d0d5:	83 c8 0e             	or     $0xe,%eax
f010d0d8:	a2 55 f5 59 f0       	mov    %al,0xf059f555
f010d0dd:	a0 55 f5 59 f0       	mov    0xf059f555,%al
f010d0e2:	83 e0 ef             	and    $0xffffffef,%eax
f010d0e5:	a2 55 f5 59 f0       	mov    %al,0xf059f555
f010d0ea:	a0 55 f5 59 f0       	mov    0xf059f555,%al
f010d0ef:	83 c8 60             	or     $0x60,%eax
f010d0f2:	a2 55 f5 59 f0       	mov    %al,0xf059f555
f010d0f7:	a0 55 f5 59 f0       	mov    0xf059f555,%al
f010d0fc:	83 c8 80             	or     $0xffffff80,%eax
f010d0ff:	a2 55 f5 59 f0       	mov    %al,0xf059f555
f010d104:	b8 66 d7 10 f0       	mov    $0xf010d766,%eax
f010d109:	c1 e8 10             	shr    $0x10,%eax
f010d10c:	66 a3 56 f5 59 f0    	mov    %ax,0xf059f556
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010d112:	b8 6c d7 10 f0       	mov    $0xf010d76c,%eax
f010d117:	66 a3 58 f5 59 f0    	mov    %ax,0xf059f558
f010d11d:	66 c7 05 5a f5 59 f0 	movw   $0x8,0xf059f55a
f010d124:	08 00 
f010d126:	a0 5c f5 59 f0       	mov    0xf059f55c,%al
f010d12b:	83 e0 e0             	and    $0xffffffe0,%eax
f010d12e:	a2 5c f5 59 f0       	mov    %al,0xf059f55c
f010d133:	a0 5c f5 59 f0       	mov    0xf059f55c,%al
f010d138:	83 e0 1f             	and    $0x1f,%eax
f010d13b:	a2 5c f5 59 f0       	mov    %al,0xf059f55c
f010d140:	a0 5d f5 59 f0       	mov    0xf059f55d,%al
f010d145:	83 e0 f0             	and    $0xfffffff0,%eax
f010d148:	83 c8 0e             	or     $0xe,%eax
f010d14b:	a2 5d f5 59 f0       	mov    %al,0xf059f55d
f010d150:	a0 5d f5 59 f0       	mov    0xf059f55d,%al
f010d155:	83 e0 ef             	and    $0xffffffef,%eax
f010d158:	a2 5d f5 59 f0       	mov    %al,0xf059f55d
f010d15d:	a0 5d f5 59 f0       	mov    0xf059f55d,%al
f010d162:	83 c8 60             	or     $0x60,%eax
f010d165:	a2 5d f5 59 f0       	mov    %al,0xf059f55d
f010d16a:	a0 5d f5 59 f0       	mov    0xf059f55d,%al
f010d16f:	83 c8 80             	or     $0xffffff80,%eax
f010d172:	a2 5d f5 59 f0       	mov    %al,0xf059f55d
f010d177:	b8 6c d7 10 f0       	mov    $0xf010d76c,%eax
f010d17c:	c1 e8 10             	shr    $0x10,%eax
f010d17f:	66 a3 5e f5 59 f0    	mov    %ax,0xf059f55e
f010d185:	c7 45 fc e0 f3 59 f0 	movl   $0xf059f3e0,-0x4(%ebp)
f010d18c:	c7 45 f8 00 08 00 00 	movl   $0x800,-0x8(%ebp)
//load IDT register
static __inline void lidt(struct Gatedesc *p, int size)
{
  volatile unsigned short pd[3];

  pd[0] = size-1;
f010d193:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d196:	48                   	dec    %eax
f010d197:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
  pd[1] = (uint32)p;
f010d19b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d19e:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
  pd[2] = (uint32)p >> 16;
f010d1a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d1a5:	c1 e8 10             	shr    $0x10,%eax
f010d1a8:	66 89 45 f6          	mov    %ax,-0xa(%ebp)

  asm volatile("lidt (%0)" : : "r" (pd));
f010d1ac:	8d 45 f2             	lea    -0xe(%ebp),%eax
f010d1af:	0f 01 18             	lidtl  (%eax)

	// Load the IDT
	//asm volatile("lidt idt_pd");
	lidt(idt, sizeof(idt));

}
f010d1b2:	90                   	nop
f010d1b3:	c9                   	leave  
f010d1b4:	c3                   	ret    

f010d1b5 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010d1b5:	55                   	push   %ebp
f010d1b6:	89 e5                	mov    %esp,%ebp
f010d1b8:	53                   	push   %ebx
f010d1b9:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010d1bc:	83 ec 08             	sub    $0x8,%esp
f010d1bf:	ff 75 08             	pushl  0x8(%ebp)
f010d1c2:	68 5e 8e 12 f0       	push   $0xf0128e5e
f010d1c7:	e8 a0 3d ff ff       	call   f0100f6c <cprintf>
f010d1cc:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010d1cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1d2:	83 ec 0c             	sub    $0xc,%esp
f010d1d5:	50                   	push   %eax
f010d1d6:	e8 fd 00 00 00       	call   f010d2d8 <print_regs>
f010d1db:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010d1de:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1e1:	8b 40 20             	mov    0x20(%eax),%eax
f010d1e4:	0f b7 c0             	movzwl %ax,%eax
f010d1e7:	83 ec 08             	sub    $0x8,%esp
f010d1ea:	50                   	push   %eax
f010d1eb:	68 70 8e 12 f0       	push   $0xf0128e70
f010d1f0:	e8 77 3d ff ff       	call   f0100f6c <cprintf>
f010d1f5:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010d1f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1fb:	8b 40 24             	mov    0x24(%eax),%eax
f010d1fe:	0f b7 c0             	movzwl %ax,%eax
f010d201:	83 ec 08             	sub    $0x8,%esp
f010d204:	50                   	push   %eax
f010d205:	68 83 8e 12 f0       	push   $0xf0128e83
f010d20a:	e8 5d 3d ff ff       	call   f0100f6c <cprintf>
f010d20f:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010d212:	8b 45 08             	mov    0x8(%ebp),%eax
f010d215:	8b 58 28             	mov    0x28(%eax),%ebx
f010d218:	8b 45 08             	mov    0x8(%ebp),%eax
f010d21b:	8b 40 28             	mov    0x28(%eax),%eax
f010d21e:	83 ec 0c             	sub    $0xc,%esp
f010d221:	50                   	push   %eax
f010d222:	e8 28 ee ff ff       	call   f010c04f <trapname>
f010d227:	83 c4 10             	add    $0x10,%esp
f010d22a:	89 c2                	mov    %eax,%edx
f010d22c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d22f:	8b 40 28             	mov    0x28(%eax),%eax
f010d232:	53                   	push   %ebx
f010d233:	52                   	push   %edx
f010d234:	50                   	push   %eax
f010d235:	68 96 8e 12 f0       	push   $0xf0128e96
f010d23a:	e8 2d 3d ff ff       	call   f0100f6c <cprintf>
f010d23f:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010d242:	8b 45 08             	mov    0x8(%ebp),%eax
f010d245:	8b 40 2c             	mov    0x2c(%eax),%eax
f010d248:	83 ec 08             	sub    $0x8,%esp
f010d24b:	50                   	push   %eax
f010d24c:	68 ad 8e 12 f0       	push   $0xf0128ead
f010d251:	e8 16 3d ff ff       	call   f0100f6c <cprintf>
f010d256:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010d259:	8b 45 08             	mov    0x8(%ebp),%eax
f010d25c:	8b 40 30             	mov    0x30(%eax),%eax
f010d25f:	83 ec 08             	sub    $0x8,%esp
f010d262:	50                   	push   %eax
f010d263:	68 bc 8e 12 f0       	push   $0xf0128ebc
f010d268:	e8 ff 3c ff ff       	call   f0100f6c <cprintf>
f010d26d:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010d270:	8b 45 08             	mov    0x8(%ebp),%eax
f010d273:	8b 40 34             	mov    0x34(%eax),%eax
f010d276:	0f b7 c0             	movzwl %ax,%eax
f010d279:	83 ec 08             	sub    $0x8,%esp
f010d27c:	50                   	push   %eax
f010d27d:	68 cb 8e 12 f0       	push   $0xf0128ecb
f010d282:	e8 e5 3c ff ff       	call   f0100f6c <cprintf>
f010d287:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010d28a:	8b 45 08             	mov    0x8(%ebp),%eax
f010d28d:	8b 40 38             	mov    0x38(%eax),%eax
f010d290:	83 ec 08             	sub    $0x8,%esp
f010d293:	50                   	push   %eax
f010d294:	68 de 8e 12 f0       	push   $0xf0128ede
f010d299:	e8 ce 3c ff ff       	call   f0100f6c <cprintf>
f010d29e:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010d2a1:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2a4:	8b 40 3c             	mov    0x3c(%eax),%eax
f010d2a7:	83 ec 08             	sub    $0x8,%esp
f010d2aa:	50                   	push   %eax
f010d2ab:	68 ed 8e 12 f0       	push   $0xf0128eed
f010d2b0:	e8 b7 3c ff ff       	call   f0100f6c <cprintf>
f010d2b5:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010d2b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2bb:	8b 40 40             	mov    0x40(%eax),%eax
f010d2be:	0f b7 c0             	movzwl %ax,%eax
f010d2c1:	83 ec 08             	sub    $0x8,%esp
f010d2c4:	50                   	push   %eax
f010d2c5:	68 fc 8e 12 f0       	push   $0xf0128efc
f010d2ca:	e8 9d 3c ff ff       	call   f0100f6c <cprintf>
f010d2cf:	83 c4 10             	add    $0x10,%esp
}
f010d2d2:	90                   	nop
f010d2d3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010d2d6:	c9                   	leave  
f010d2d7:	c3                   	ret    

f010d2d8 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010d2d8:	55                   	push   %ebp
f010d2d9:	89 e5                	mov    %esp,%ebp
f010d2db:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010d2de:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2e1:	8b 00                	mov    (%eax),%eax
f010d2e3:	83 ec 08             	sub    $0x8,%esp
f010d2e6:	50                   	push   %eax
f010d2e7:	68 0f 8f 12 f0       	push   $0xf0128f0f
f010d2ec:	e8 7b 3c ff ff       	call   f0100f6c <cprintf>
f010d2f1:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010d2f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2f7:	8b 40 04             	mov    0x4(%eax),%eax
f010d2fa:	83 ec 08             	sub    $0x8,%esp
f010d2fd:	50                   	push   %eax
f010d2fe:	68 1e 8f 12 f0       	push   $0xf0128f1e
f010d303:	e8 64 3c ff ff       	call   f0100f6c <cprintf>
f010d308:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010d30b:	8b 45 08             	mov    0x8(%ebp),%eax
f010d30e:	8b 40 08             	mov    0x8(%eax),%eax
f010d311:	83 ec 08             	sub    $0x8,%esp
f010d314:	50                   	push   %eax
f010d315:	68 2d 8f 12 f0       	push   $0xf0128f2d
f010d31a:	e8 4d 3c ff ff       	call   f0100f6c <cprintf>
f010d31f:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010d322:	8b 45 08             	mov    0x8(%ebp),%eax
f010d325:	8b 40 0c             	mov    0xc(%eax),%eax
f010d328:	83 ec 08             	sub    $0x8,%esp
f010d32b:	50                   	push   %eax
f010d32c:	68 3c 8f 12 f0       	push   $0xf0128f3c
f010d331:	e8 36 3c ff ff       	call   f0100f6c <cprintf>
f010d336:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010d339:	8b 45 08             	mov    0x8(%ebp),%eax
f010d33c:	8b 40 10             	mov    0x10(%eax),%eax
f010d33f:	83 ec 08             	sub    $0x8,%esp
f010d342:	50                   	push   %eax
f010d343:	68 4b 8f 12 f0       	push   $0xf0128f4b
f010d348:	e8 1f 3c ff ff       	call   f0100f6c <cprintf>
f010d34d:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010d350:	8b 45 08             	mov    0x8(%ebp),%eax
f010d353:	8b 40 14             	mov    0x14(%eax),%eax
f010d356:	83 ec 08             	sub    $0x8,%esp
f010d359:	50                   	push   %eax
f010d35a:	68 5a 8f 12 f0       	push   $0xf0128f5a
f010d35f:	e8 08 3c ff ff       	call   f0100f6c <cprintf>
f010d364:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010d367:	8b 45 08             	mov    0x8(%ebp),%eax
f010d36a:	8b 40 18             	mov    0x18(%eax),%eax
f010d36d:	83 ec 08             	sub    $0x8,%esp
f010d370:	50                   	push   %eax
f010d371:	68 69 8f 12 f0       	push   $0xf0128f69
f010d376:	e8 f1 3b ff ff       	call   f0100f6c <cprintf>
f010d37b:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010d37e:	8b 45 08             	mov    0x8(%ebp),%eax
f010d381:	8b 40 1c             	mov    0x1c(%eax),%eax
f010d384:	83 ec 08             	sub    $0x8,%esp
f010d387:	50                   	push   %eax
f010d388:	68 78 8f 12 f0       	push   $0xf0128f78
f010d38d:	e8 da 3b ff ff       	call   f0100f6c <cprintf>
f010d392:	83 c4 10             	add    $0x10,%esp
}
f010d395:	90                   	nop
f010d396:	c9                   	leave  
f010d397:	c3                   	ret    

f010d398 <irq_install_handler>:


void *irq_handlers[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ;
void irq_install_handler(int irq, void (*handler)(struct Trapframe *tf))
{
f010d398:	55                   	push   %ebp
f010d399:	89 e5                	mov    %esp,%ebp
	irq_handlers[irq] = handler;
f010d39b:	8b 45 08             	mov    0x8(%ebp),%eax
f010d39e:	8b 55 0c             	mov    0xc(%ebp),%edx
f010d3a1:	89 14 85 e0 fb 59 f0 	mov    %edx,-0xfa60420(,%eax,4)
}
f010d3a8:	90                   	nop
f010d3a9:	5d                   	pop    %ebp
f010d3aa:	c3                   	ret    

f010d3ab <irq_uninstall_handler>:
void irq_uninstall_handler(int irq)
{
f010d3ab:	55                   	push   %ebp
f010d3ac:	89 e5                	mov    %esp,%ebp
	irq_handlers[irq] = NULL;
f010d3ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010d3b1:	c7 04 85 e0 fb 59 f0 	movl   $0x0,-0xfa60420(,%eax,4)
f010d3b8:	00 00 00 00 
}
f010d3bc:	90                   	nop
f010d3bd:	5d                   	pop    %ebp
f010d3be:	c3                   	ret    

f010d3bf <irq_dispatch>:
void irq_dispatch(struct Trapframe *tf)
{
f010d3bf:	55                   	push   %ebp
f010d3c0:	89 e5                	mov    %esp,%ebp
f010d3c2:	83 ec 18             	sub    $0x18,%esp
	void (*handler)(struct Trapframe *tf);
	int IRQNum = tf->tf_trapno - IRQ_OFFSET;
f010d3c5:	8b 45 08             	mov    0x8(%ebp),%eax
f010d3c8:	8b 40 28             	mov    0x28(%eax),%eax
f010d3cb:	83 e8 20             	sub    $0x20,%eax
f010d3ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
	handler = irq_handlers[IRQNum] ;
f010d3d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d3d4:	8b 04 85 e0 fb 59 f0 	mov    -0xfa60420(,%eax,4),%eax
f010d3db:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (handler)
f010d3de:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010d3e2:	74 0e                	je     f010d3f2 <irq_dispatch+0x33>
	{
		handler(tf);
f010d3e4:	83 ec 0c             	sub    $0xc,%esp
f010d3e7:	ff 75 08             	pushl  0x8(%ebp)
f010d3ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d3ed:	ff d0                	call   *%eax
f010d3ef:	83 c4 10             	add    $0x10,%esp
	}

	//Send End Of Interrupt CMD to PIC
	pic_sendEOI(IRQNum);
f010d3f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d3f5:	0f b6 c0             	movzbl %al,%eax
f010d3f8:	83 ec 0c             	sub    $0xc,%esp
f010d3fb:	50                   	push   %eax
f010d3fc:	e8 c3 9c ff ff       	call   f01070c4 <pic_sendEOI>
f010d401:	83 c4 10             	add    $0x10,%esp
}
f010d404:	90                   	nop
f010d405:	c9                   	leave  
f010d406:	c3                   	ret    

f010d407 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010d407:	55                   	push   %ebp
f010d408:	89 e5                	mov    %esp,%ebp
f010d40a:	57                   	push   %edi
f010d40b:	56                   	push   %esi
f010d40c:	53                   	push   %ebx
f010d40d:	83 ec 1c             	sub    $0x1c,%esp
	if(tf->tf_trapno == T_PGFLT)
f010d410:	8b 45 08             	mov    0x8(%ebp),%eax
f010d413:	8b 40 28             	mov    0x28(%eax),%eax
f010d416:	83 f8 0e             	cmp    $0xe,%eax
f010d419:	75 51                	jne    f010d46c <trap_dispatch+0x65>
	{
		//2016: Bypass the faulted instruction [used for some tests in which we need to resume the execution after an intended page fault]
		if (bypassInstrLength != 0)
f010d41b:	a0 20 fc 59 f0       	mov    0xf059fc20,%al
f010d420:	84 c0                	test   %al,%al
f010d422:	74 1f                	je     f010d443 <trap_dispatch+0x3c>
		{
			tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010d424:	8b 45 08             	mov    0x8(%ebp),%eax
f010d427:	8b 40 30             	mov    0x30(%eax),%eax
f010d42a:	89 c2                	mov    %eax,%edx
f010d42c:	a0 20 fc 59 f0       	mov    0xf059fc20,%al
f010d431:	0f b6 c0             	movzbl %al,%eax
f010d434:	01 d0                	add    %edx,%eax
f010d436:	89 c2                	mov    %eax,%edx
f010d438:	8b 45 08             	mov    0x8(%ebp),%eax
f010d43b:	89 50 30             	mov    %edx,0x30(%eax)
			/*2024: commented. already will be returned to the trapret() in trapentry.S which return to the user/kernel caller code*/
			//kclock_resume();
			//env_pop_tf(tf);
			return;
f010d43e:	e9 0c 01 00 00       	jmp    f010d54f <trap_dispatch+0x148>
		}

		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010d443:	83 ec 0c             	sub    $0xc,%esp
f010d446:	6a 01                	push   $0x1
f010d448:	e8 c3 12 00 00       	call   f010e710 <isPageReplacmentAlgorithmLRU>
f010d44d:	83 c4 10             	add    $0x10,%esp
f010d450:	85 c0                	test   %eax,%eax
f010d452:	74 05                	je     f010d459 <trap_dispatch+0x52>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010d454:	e8 de 97 ff ff       	call   f0106c37 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010d459:	83 ec 0c             	sub    $0xc,%esp
f010d45c:	ff 75 08             	pushl  0x8(%ebp)
f010d45f:	e8 91 13 00 00       	call   f010e7f5 <fault_handler>
f010d464:	83 c4 10             	add    $0x10,%esp
f010d467:	e9 e3 00 00 00       	jmp    f010d54f <trap_dispatch+0x148>
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010d46c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d46f:	8b 40 28             	mov    0x28(%eax),%eax
f010d472:	83 f8 30             	cmp    $0x30,%eax
f010d475:	75 6e                	jne    f010d4e5 <trap_dispatch+0xde>
	{
		/* If the original status of the interrupt is ENABLED (before getting into kernel),
		 * Then, re-enable the interrupts & resume the clock during the system calls
		 * to allow switching between processes
		 */
		if (tf->tf_eflags & FL_IF)
f010d477:	8b 45 08             	mov    0x8(%ebp),%eax
f010d47a:	8b 40 38             	mov    0x38(%eax),%eax
f010d47d:	25 00 02 00 00       	and    $0x200,%eax
f010d482:	85 c0                	test   %eax,%eax
f010d484:	74 06                	je     f010d48c <trap_dispatch+0x85>

//set interrupt flag
static __inline void
sti(void)
{
	__asm __volatile("sti");
f010d486:	fb                   	sti    
		{
			sti();
			kclock_resume();
f010d487:	e8 24 78 ff ff       	call   f0104cb0 <kclock_resume>
		}
		//cprintf("\nserving system call #%d\n", tf->tf_regs.reg_eax);
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010d48c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d48f:	8b 78 04             	mov    0x4(%eax),%edi
f010d492:	8b 45 08             	mov    0x8(%ebp),%eax
f010d495:	8b 30                	mov    (%eax),%esi
f010d497:	8b 45 08             	mov    0x8(%ebp),%eax
f010d49a:	8b 58 10             	mov    0x10(%eax),%ebx
f010d49d:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4a0:	8b 48 18             	mov    0x18(%eax),%ecx
f010d4a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4a6:	8b 50 14             	mov    0x14(%eax),%edx
f010d4a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4ac:	8b 40 1c             	mov    0x1c(%eax),%eax
f010d4af:	83 ec 08             	sub    $0x8,%esp
f010d4b2:	57                   	push   %edi
f010d4b3:	56                   	push   %esi
f010d4b4:	53                   	push   %ebx
f010d4b5:	51                   	push   %ecx
f010d4b6:	52                   	push   %edx
f010d4b7:	50                   	push   %eax
f010d4b8:	e8 7a 09 00 00       	call   f010de37 <syscall>
f010d4bd:	83 c4 20             	add    $0x20,%esp
f010d4c0:	89 45 e0             	mov    %eax,-0x20(%ebp)
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);

		tf->tf_regs.reg_eax = ret;
f010d4c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4c6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010d4c9:	89 50 1c             	mov    %edx,0x1c(%eax)

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f010d4cc:	9c                   	pushf  
f010d4cd:	58                   	pop    %eax
f010d4ce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        return eflags;
f010d4d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax

		/*If still enabled, Disable the interrupt & stop clock before getting into user again
		 */
		if (read_eflags() & FL_IF)
f010d4d4:	25 00 02 00 00       	and    $0x200,%eax
f010d4d9:	85 c0                	test   %eax,%eax
f010d4db:	74 72                	je     f010d54f <trap_dispatch+0x148>
 */
//clear interrupt flag
static __inline void
cli(void)
{
	__asm __volatile("cli");
f010d4dd:	fa                   	cli    
		{
			cli();
			kclock_stop();
f010d4de:	e8 a5 77 ff ff       	call   f0104c88 <kclock_stop>
f010d4e3:	eb 6a                	jmp    f010d54f <trap_dispatch+0x148>
		}
		//cprintf("ret val form syscall = %d\n", ret);
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010d4e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4e8:	8b 40 28             	mov    0x28(%eax),%eax
f010d4eb:	83 f8 08             	cmp    $0x8,%eax
f010d4ee:	75 17                	jne    f010d507 <trap_dispatch+0x100>
	{
		panic("double fault!!");
f010d4f0:	83 ec 04             	sub    $0x4,%esp
f010d4f3:	68 87 8f 12 f0       	push   $0xf0128f87
f010d4f8:	68 22 01 00 00       	push   $0x122
f010d4fd:	68 96 8f 12 f0       	push   $0xf0128f96
f010d502:	e8 13 2e ff ff       	call   f010031a <_panic>
	}
	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		print_trapframe(tf);
f010d507:	83 ec 0c             	sub    $0xc,%esp
f010d50a:	ff 75 08             	pushl  0x8(%ebp)
f010d50d:	e8 a3 fc ff ff       	call   f010d1b5 <print_trapframe>
f010d512:	83 c4 10             	add    $0x10,%esp
		if (tf->tf_cs == GD_KT)
f010d515:	8b 45 08             	mov    0x8(%ebp),%eax
f010d518:	8b 40 34             	mov    0x34(%eax),%eax
f010d51b:	66 83 f8 08          	cmp    $0x8,%ax
f010d51f:	75 17                	jne    f010d538 <trap_dispatch+0x131>
		{
			panic("unhandled trap in kernel");
f010d521:	83 ec 04             	sub    $0x4,%esp
f010d524:	68 a7 8f 12 f0       	push   $0xf0128fa7
f010d529:	68 2a 01 00 00       	push   $0x12a
f010d52e:	68 96 8f 12 f0       	push   $0xf0128f96
f010d533:	e8 e2 2d ff ff       	call   f010031a <_panic>
		}
		else
		{
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010d538:	83 ec 04             	sub    $0x4,%esp
f010d53b:	68 c0 8f 12 f0       	push   $0xf0128fc0
f010d540:	68 2f 01 00 00       	push   $0x12f
f010d545:	68 96 8f 12 f0       	push   $0xf0128f96
f010d54a:	e8 cb 2d ff ff       	call   f010031a <_panic>
		}
	}
}
f010d54f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010d552:	5b                   	pop    %ebx
f010d553:	5e                   	pop    %esi
f010d554:	5f                   	pop    %edi
f010d555:	5d                   	pop    %ebp
f010d556:	c3                   	ret    

f010d557 <trap>:

void trap(struct Trapframe *tf)
{
f010d557:	55                   	push   %ebp
f010d558:	89 e5                	mov    %esp,%ebp
f010d55a:	83 ec 28             	sub    $0x28,%esp
	/* to avoid counting down on the current process while handling exceptions
	 * This avoid pending clock interrupt after returning from the trap.
	 * NOTE: interrupt is automatically disabled by the interrupt cycle (by marking all traps as "Interrupt Gates").
	 * Resume the clock and Re-enable the interrupt whenever required (e.g. in system calls).
	 */
	kclock_stop();
f010d55d:	e8 26 77 ff ff       	call   f0104c88 <kclock_stop>

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f010d562:	9c                   	pushf  
f010d563:	58                   	pop    %eax
f010d564:	89 45 e0             	mov    %eax,-0x20(%ebp)
        return eflags;
f010d567:	8b 45 e0             	mov    -0x20(%ebp),%eax

	//[2] Some validations

	//2024 check if interrupt is enabled during the trap handler, then panic
	uint32 flags = read_eflags();
f010d56a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (flags & FL_IF)
f010d56d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d570:	25 00 02 00 00       	and    $0x200,%eax
f010d575:	85 c0                	test   %eax,%eax
f010d577:	74 25                	je     f010d59e <trap+0x47>
	{
		print_trapframe(tf);
f010d579:	83 ec 0c             	sub    $0xc,%esp
f010d57c:	ff 75 08             	pushl  0x8(%ebp)
f010d57f:	e8 31 fc ff ff       	call   f010d1b5 <print_trapframe>
f010d584:	83 c4 10             	add    $0x10,%esp
		panic("trap(): interrupt is enabled while it's expected to be disabled\n");
f010d587:	83 ec 04             	sub    $0x4,%esp
f010d58a:	68 e0 8f 12 f0       	push   $0xf0128fe0
f010d58f:	68 45 01 00 00       	push   $0x145
f010d594:	68 96 8f 12 f0       	push   $0xf0128f96
f010d599:	e8 7c 2d ff ff       	call   f010031a <_panic>
	}

	int userTrap = 0;
f010d59e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct Env* cur_env = get_cpu_proc(); //the current running Environment (if any)
f010d5a5:	e8 c6 d1 ff ff       	call   f010a770 <get_cpu_proc>
f010d5aa:	89 45 e8             	mov    %eax,-0x18(%ebp)

	if ((tf->tf_cs & 3) == 3)
f010d5ad:	8b 45 08             	mov    0x8(%ebp),%eax
f010d5b0:	8b 40 34             	mov    0x34(%eax),%eax
f010d5b3:	0f b7 c0             	movzwl %ax,%eax
f010d5b6:	83 e0 03             	and    $0x3,%eax
f010d5b9:	83 f8 03             	cmp    $0x3,%eax
f010d5bc:	75 54                	jne    f010d612 <trap+0xbb>
	{
		assert(cur_env && cur_env->env_status == ENV_RUNNING);	//environment should be exist & run
f010d5be:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010d5c2:	74 0b                	je     f010d5cf <trap+0x78>
f010d5c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d5c7:	8b 40 18             	mov    0x18(%eax),%eax
f010d5ca:	83 f8 02             	cmp    $0x2,%eax
f010d5cd:	74 19                	je     f010d5e8 <trap+0x91>
f010d5cf:	68 24 90 12 f0       	push   $0xf0129024
f010d5d4:	68 52 90 12 f0       	push   $0xf0129052
f010d5d9:	68 4d 01 00 00       	push   $0x14d
f010d5de:	68 96 8f 12 f0       	push   $0xf0128f96
f010d5e3:	e8 32 2d ff ff       	call   f010031a <_panic>
		//cprintf("curenv->env_tf @ %x, tf param @ %x\n", curenv->env_tf , tf);
		assert(cur_env->env_tf == tf);	//tf should be placed in the kernel stack of this process (@e->env_tf)
f010d5e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d5eb:	8b 00                	mov    (%eax),%eax
f010d5ed:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d5f0:	74 19                	je     f010d60b <trap+0xb4>
f010d5f2:	68 67 90 12 f0       	push   $0xf0129067
f010d5f7:	68 52 90 12 f0       	push   $0xf0129052
f010d5fc:	68 4f 01 00 00       	push   $0x14f
f010d601:	68 96 8f 12 f0       	push   $0xf0128f96
f010d606:	e8 0f 2d ff ff       	call   f010031a <_panic>
		userTrap = 1;
f010d60b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//	if (tf->tf_trapno == T_SYSCALL)
	//	{
	//		cprintf("System Call #%d\n", tf->tf_regs.reg_eax);
	//	}
	//[3] Handle the incoming trap/interrupt
	if (tf->tf_trapno >= IRQ_OFFSET && tf->tf_trapno < IRQ_OFFSET + MAX_IRQS)
f010d612:	8b 45 08             	mov    0x8(%ebp),%eax
f010d615:	8b 40 28             	mov    0x28(%eax),%eax
f010d618:	83 f8 1f             	cmp    $0x1f,%eax
f010d61b:	76 1b                	jbe    f010d638 <trap+0xe1>
f010d61d:	8b 45 08             	mov    0x8(%ebp),%eax
f010d620:	8b 40 28             	mov    0x28(%eax),%eax
f010d623:	83 f8 2f             	cmp    $0x2f,%eax
f010d626:	77 10                	ja     f010d638 <trap+0xe1>
	{
		irq_dispatch(tf);
f010d628:	83 ec 0c             	sub    $0xc,%esp
f010d62b:	ff 75 08             	pushl  0x8(%ebp)
f010d62e:	e8 8c fd ff ff       	call   f010d3bf <irq_dispatch>
f010d633:	83 c4 10             	add    $0x10,%esp
f010d636:	eb 0e                	jmp    f010d646 <trap+0xef>
	}
	else
	{
		trap_dispatch(tf);
f010d638:	83 ec 0c             	sub    $0xc,%esp
f010d63b:	ff 75 08             	pushl  0x8(%ebp)
f010d63e:	e8 c4 fd ff ff       	call   f010d407 <trap_dispatch>
f010d643:	83 c4 10             	add    $0x10,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f010d646:	9c                   	pushf  
f010d647:	58                   	pop    %eax
f010d648:	89 45 f4             	mov    %eax,-0xc(%ebp)
        return eflags;
f010d64b:	8b 45 f4             	mov    -0xc(%ebp),%eax

	//cprintf("will be returned to the trapret() \n");
	/*2024: will be returned to the trapret() in trapentry.S which return to the caller*/

	//[4] Make sure that the interrupt is disabled before executing the trapret()
	uint32 IEN = read_eflags() & FL_IF;
f010d64e:	25 00 02 00 00       	and    $0x200,%eax
f010d653:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	assert(IEN == 0);
f010d656:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010d65a:	74 19                	je     f010d675 <trap+0x11e>
f010d65c:	68 7d 90 12 f0       	push   $0xf012907d
f010d661:	68 52 90 12 f0       	push   $0xf0129052
f010d666:	68 66 01 00 00       	push   $0x166
f010d66b:	68 96 8f 12 f0       	push   $0xf0128f96
f010d670:	e8 a5 2c ff ff       	call   f010031a <_panic>

	//cprintf("will resume the clock\n");

	//[5] Resume the clock
	kclock_resume();
f010d675:	e8 36 76 ff ff       	call   f0104cb0 <kclock_resume>
	//	cprintf("\nclock is resumed with counter = %d.\n", kclock_read_cnt0_latch());
	//	cprintf("[tf] tf @%x - tf.cs = %x - tf.eip = %x - tf.eax = %d\n", tf, tf->tf_cs,tf->tf_eip, tf->tf_regs.reg_eax );
}
f010d67a:	90                   	nop
f010d67b:	c9                   	leave  
f010d67c:	c3                   	ret    
f010d67d:	90                   	nop

f010d67e <DBL_FAULT>:
	jmp _alltraps

.text
/* Lab 3: Your code here for generating entry points for the different traps.
*/
TRAPHANDLER(DBL_FAULT, T_DBLFLT)					//8 double fault
f010d67e:	6a 08                	push   $0x8
f010d680:	e9 ed 00 00 00       	jmp    f010d772 <_alltraps>
f010d685:	90                   	nop

f010d686 <PAGE_FAULT>:
TRAPHANDLER(PAGE_FAULT, T_PGFLT)					//14 page fault
f010d686:	6a 0e                	push   $0xe
f010d688:	e9 e5 00 00 00       	jmp    f010d772 <_alltraps>
f010d68d:	90                   	nop

f010d68e <IRQ0_CLK_HANDLER>:
TRAPHANDLER_NOEC(IRQ0_CLK_HANDLER, IRQ0_Clock)		//32 the first IRQ (clock iterrrupt)
f010d68e:	6a 00                	push   $0x0
f010d690:	6a 20                	push   $0x20
f010d692:	e9 db 00 00 00       	jmp    f010d772 <_alltraps>
f010d697:	90                   	nop

f010d698 <IRQ1_KBD_HANDLER>:
TRAPHANDLER_NOEC(IRQ1_KBD_HANDLER, IRQ1_KB	)		//33 keyboard interrupt request
f010d698:	6a 00                	push   $0x0
f010d69a:	6a 21                	push   $0x21
f010d69c:	e9 d1 00 00 00       	jmp    f010d772 <_alltraps>
f010d6a1:	90                   	nop

f010d6a2 <SYSCALL_HANDLER>:
TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)		//48 SYSTEM CALLS
f010d6a2:	6a 00                	push   $0x0
f010d6a4:	6a 30                	push   $0x30
f010d6a6:	e9 c7 00 00 00       	jmp    f010d772 <_alltraps>
f010d6ab:	90                   	nop

f010d6ac <ALL_FAULTS0>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)		//0			// divide error
f010d6ac:	6a 00                	push   $0x0
f010d6ae:	6a 00                	push   $0x0
f010d6b0:	e9 bd 00 00 00       	jmp    f010d772 <_alltraps>
f010d6b5:	90                   	nop

f010d6b6 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )	//1			// debug exception
f010d6b6:	6a 00                	push   $0x0
f010d6b8:	6a 01                	push   $0x1
f010d6ba:	e9 b3 00 00 00       	jmp    f010d772 <_alltraps>
f010d6bf:	90                   	nop

f010d6c0 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )//2			// NMI: non-maskable interrupt
f010d6c0:	6a 00                	push   $0x0
f010d6c2:	6a 02                	push   $0x2
f010d6c4:	e9 a9 00 00 00       	jmp    f010d772 <_alltraps>
f010d6c9:	90                   	nop

f010d6ca <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT     )//3			// breakpoint
f010d6ca:	6a 00                	push   $0x0
f010d6cc:	6a 03                	push   $0x3
f010d6ce:	e9 9f 00 00 00       	jmp    f010d772 <_alltraps>
f010d6d3:	90                   	nop

f010d6d4 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW     )//4			// overflow
f010d6d4:	6a 00                	push   $0x0
f010d6d6:	6a 04                	push   $0x4
f010d6d8:	e9 95 00 00 00       	jmp    f010d772 <_alltraps>
f010d6dd:	90                   	nop

f010d6de <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND     )//5			// bounds check
f010d6de:	6a 00                	push   $0x0
f010d6e0:	6a 05                	push   $0x5
f010d6e2:	e9 8b 00 00 00       	jmp    f010d772 <_alltraps>
f010d6e7:	90                   	nop

f010d6e8 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP     )//6			// illegal opcode
f010d6e8:	6a 00                	push   $0x0
f010d6ea:	6a 06                	push   $0x6
f010d6ec:	e9 81 00 00 00       	jmp    f010d772 <_alltraps>
f010d6f1:	90                   	nop

f010d6f2 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE    )//7			// device not available
f010d6f2:	6a 00                	push   $0x0
f010d6f4:	6a 07                	push   $0x7
f010d6f6:	eb 7a                	jmp    f010d772 <_alltraps>

f010d6f8 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS8,  T_DBLFLT)     	//8			// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS9,  9   )		//9			// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )	//10		// invalid task switch segment
f010d6f8:	6a 0a                	push   $0xa
f010d6fa:	eb 76                	jmp    f010d772 <_alltraps>

f010d6fc <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )	//11		// segment not present
f010d6fc:	6a 0b                	push   $0xb
f010d6fe:	eb 72                	jmp    f010d772 <_alltraps>

f010d700 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )	//12		// stack exception
f010d700:	6a 0c                	push   $0xc
f010d702:	eb 6e                	jmp    f010d772 <_alltraps>

f010d704 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )	//13		// General protection fault
f010d704:	6a 0d                	push   $0xd
f010d706:	eb 6a                	jmp    f010d772 <_alltraps>

f010d708 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS14,  T_PGFLT)     	//14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )			//15 		// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR    )//16		// floating point error
f010d708:	6a 00                	push   $0x0
f010d70a:	6a 10                	push   $0x10
f010d70c:	eb 64                	jmp    f010d772 <_alltraps>

f010d70e <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )	//17		// Alignment check
f010d70e:	6a 11                	push   $0x11
f010d710:	eb 60                	jmp    f010d772 <_alltraps>

f010d712 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK     )//18		// machine check
f010d712:	6a 00                	push   $0x0
f010d714:	6a 12                	push   $0x12
f010d716:	eb 5a                	jmp    f010d772 <_alltraps>

f010d718 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )	//19		// the last one
f010d718:	6a 00                	push   $0x0
f010d71a:	6a 13                	push   $0x13
f010d71c:	eb 54                	jmp    f010d772 <_alltraps>

f010d71e <ALL_FAULTS34>:

//TRAPHANDLER_NOEC(IRQ0_CLK_HANDLER,IRQ0_Clock)			//32 the first IRQ (clock iterrrupt)
//TRAPHANDLER_NOEC(IRQ1_KBD_HANDLER,IRQ1_KB	)			//33 keyboard interrupt request
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010d71e:	6a 00                	push   $0x0
f010d720:	6a 22                	push   $0x22
f010d722:	eb 4e                	jmp    f010d772 <_alltraps>

f010d724 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010d724:	6a 00                	push   $0x0
f010d726:	6a 23                	push   $0x23
f010d728:	eb 48                	jmp    f010d772 <_alltraps>

f010d72a <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010d72a:	6a 00                	push   $0x0
f010d72c:	6a 24                	push   $0x24
f010d72e:	eb 42                	jmp    f010d772 <_alltraps>

f010d730 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010d730:	6a 00                	push   $0x0
f010d732:	6a 25                	push   $0x25
f010d734:	eb 3c                	jmp    f010d772 <_alltraps>

f010d736 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010d736:	6a 00                	push   $0x0
f010d738:	6a 26                	push   $0x26
f010d73a:	eb 36                	jmp    f010d772 <_alltraps>

f010d73c <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010d73c:	6a 00                	push   $0x0
f010d73e:	6a 27                	push   $0x27
f010d740:	eb 30                	jmp    f010d772 <_alltraps>

f010d742 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010d742:	6a 00                	push   $0x0
f010d744:	6a 28                	push   $0x28
f010d746:	eb 2a                	jmp    f010d772 <_alltraps>

f010d748 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010d748:	6a 00                	push   $0x0
f010d74a:	6a 29                	push   $0x29
f010d74c:	eb 24                	jmp    f010d772 <_alltraps>

f010d74e <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010d74e:	6a 00                	push   $0x0
f010d750:	6a 2a                	push   $0x2a
f010d752:	eb 1e                	jmp    f010d772 <_alltraps>

f010d754 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010d754:	6a 00                	push   $0x0
f010d756:	6a 2b                	push   $0x2b
f010d758:	eb 18                	jmp    f010d772 <_alltraps>

f010d75a <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010d75a:	6a 00                	push   $0x0
f010d75c:	6a 2c                	push   $0x2c
f010d75e:	eb 12                	jmp    f010d772 <_alltraps>

f010d760 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010d760:	6a 00                	push   $0x0
f010d762:	6a 2d                	push   $0x2d
f010d764:	eb 0c                	jmp    f010d772 <_alltraps>

f010d766 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010d766:	6a 00                	push   $0x0
f010d768:	6a 2e                	push   $0x2e
f010d76a:	eb 06                	jmp    f010d772 <_alltraps>

f010d76c <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 		//the last IRQ
f010d76c:	6a 00                	push   $0x0
f010d76e:	6a 2f                	push   $0x2f
f010d770:	eb 00                	jmp    f010d772 <_alltraps>

f010d772 <_alltraps>:

/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:
push 	%ds
f010d772:	1e                   	push   %ds
push 	%es
f010d773:	06                   	push   %es
pushal
f010d774:	60                   	pusha  

mov 	$(GD_KD), %ax
f010d775:	66 b8 10 00          	mov    $0x10,%ax
mov 	%ax,%ds
f010d779:	8e d8                	mov    %eax,%ds
mov 	%ax,%es
f010d77b:	8e c0                	mov    %eax,%es

push 	%esp /* push the pointer to the tf into the stack to be passed as a param to the trap()*/
f010d77d:	54                   	push   %esp
call 	trap
f010d77e:	e8 d4 fd ff ff       	call   f010d557 <trap>

pop 	%ecx /* pop the pointer to the tf from the stack so that the stack top is at the beginning values of the registers pushed by pusha*/
f010d783:	59                   	pop    %ecx

f010d784 <trapret>:
.globl trapret
trapret:
popal
f010d784:	61                   	popa   
pop 	%es
f010d785:	07                   	pop    %es
pop 	%ds
f010d786:	1f                   	pop    %ds
add 	$(8),%esp /*skipping the trap_no and the error code so that the stack top is at the old eip value*/
f010d787:	83 c4 08             	add    $0x8,%esp
iret
f010d78a:	cf                   	iret   

f010d78b <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010d78b:	55                   	push   %ebp
f010d78c:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010d78e:	8b 45 08             	mov    0x8(%ebp),%eax
f010d791:	8b 15 c0 28 5a f0    	mov    0xf05a28c0,%edx
f010d797:	29 d0                	sub    %edx,%eax
f010d799:	c1 f8 03             	sar    $0x3,%eax
f010d79c:	89 c2                	mov    %eax,%edx
f010d79e:	89 d0                	mov    %edx,%eax
f010d7a0:	c1 e0 02             	shl    $0x2,%eax
f010d7a3:	01 d0                	add    %edx,%eax
f010d7a5:	c1 e0 02             	shl    $0x2,%eax
f010d7a8:	01 d0                	add    %edx,%eax
f010d7aa:	c1 e0 02             	shl    $0x2,%eax
f010d7ad:	01 d0                	add    %edx,%eax
f010d7af:	89 c1                	mov    %eax,%ecx
f010d7b1:	c1 e1 08             	shl    $0x8,%ecx
f010d7b4:	01 c8                	add    %ecx,%eax
f010d7b6:	89 c1                	mov    %eax,%ecx
f010d7b8:	c1 e1 10             	shl    $0x10,%ecx
f010d7bb:	01 c8                	add    %ecx,%eax
f010d7bd:	01 c0                	add    %eax,%eax
f010d7bf:	01 d0                	add    %edx,%eax
}
f010d7c1:	5d                   	pop    %ebp
f010d7c2:	c3                   	ret    

f010d7c3 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010d7c3:	55                   	push   %ebp
f010d7c4:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010d7c6:	ff 75 08             	pushl  0x8(%ebp)
f010d7c9:	e8 bd ff ff ff       	call   f010d78b <to_frame_number>
f010d7ce:	83 c4 04             	add    $0x4,%esp
f010d7d1:	c1 e0 0c             	shl    $0xc,%eax
}
f010d7d4:	c9                   	leave  
f010d7d5:	c3                   	ret    

f010d7d6 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010d7d6:	55                   	push   %ebp
f010d7d7:	89 e5                	mov    %esp,%ebp
f010d7d9:	83 ec 18             	sub    $0x18,%esp
f010d7dc:	8b 45 10             	mov    0x10(%ebp),%eax
f010d7df:	88 45 f4             	mov    %al,-0xc(%ebp)
	//2024 - better to use locks instead (to support multiprocessors)
	pushcli();	//disable interrupts
f010d7e2:	e8 d9 99 ff ff       	call   f01071c0 <pushcli>
		// Destroy the environment if not.

		// LAB 3: Your code here.

		// Print the string supplied by the user.
		if (printProgName)
f010d7e7:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010d7eb:	74 23                	je     f010d810 <sys_cputs+0x3a>
			cprintf("[%s %d] ",cur_env->prog_name, cur_env->env_id);
f010d7ed:	a1 64 10 5c f0       	mov    0xf05c1064,%eax
f010d7f2:	8b 40 10             	mov    0x10(%eax),%eax
f010d7f5:	8b 15 64 10 5c f0    	mov    0xf05c1064,%edx
f010d7fb:	83 c2 20             	add    $0x20,%edx
f010d7fe:	83 ec 04             	sub    $0x4,%esp
f010d801:	50                   	push   %eax
f010d802:	52                   	push   %edx
f010d803:	68 30 92 12 f0       	push   $0xf0129230
f010d808:	e8 5f 37 ff ff       	call   f0100f6c <cprintf>
f010d80d:	83 c4 10             	add    $0x10,%esp
		cprintf("%.*s",len, s);
f010d810:	83 ec 04             	sub    $0x4,%esp
f010d813:	ff 75 08             	pushl  0x8(%ebp)
f010d816:	ff 75 0c             	pushl  0xc(%ebp)
f010d819:	68 39 92 12 f0       	push   $0xf0129239
f010d81e:	e8 49 37 ff ff       	call   f0100f6c <cprintf>
f010d823:	83 c4 10             	add    $0x10,%esp
	}
	popcli();	//enable interrupts
f010d826:	e8 e7 99 ff ff       	call   f0107212 <popcli>
}
f010d82b:	90                   	nop
f010d82c:	c9                   	leave  
f010d82d:	c3                   	ret    

f010d82e <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010d82e:	55                   	push   %ebp
f010d82f:	89 e5                	mov    %esp,%ebp
f010d831:	83 ec 18             	sub    $0x18,%esp
f010d834:	8b 45 08             	mov    0x8(%ebp),%eax
f010d837:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010d83a:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010d83e:	83 ec 08             	sub    $0x8,%esp
f010d841:	50                   	push   %eax
f010d842:	68 3e 92 12 f0       	push   $0xf012923e
f010d847:	e8 20 37 ff ff       	call   f0100f6c <cprintf>
f010d84c:	83 c4 10             	add    $0x10,%esp
}
f010d84f:	90                   	nop
f010d850:	c9                   	leave  
f010d851:	c3                   	ret    

f010d852 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010d852:	55                   	push   %ebp
f010d853:	89 e5                	mov    %esp,%ebp
f010d855:	83 ec 18             	sub    $0x18,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f010d858:	9c                   	pushf  
f010d859:	58                   	pop    %eax
f010d85a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        return eflags;
f010d85d:	8b 45 ec             	mov    -0x14(%ebp),%eax
	int c;
	int IEN = read_eflags() & FL_IF;
f010d860:	25 00 02 00 00       	and    $0x200,%eax
f010d865:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if (IEN) /*Interrupt-Enabled I/O*/
f010d868:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010d86c:	74 10                	je     f010d87e <sys_cgetc+0x2c>
	{
		// The cons_getc2() primitive doesn't wait for a character
		while ((c = cons_getc2()) == 0)
f010d86e:	e8 32 35 ff ff       	call   f0100da5 <cons_getc2>
f010d873:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d876:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d87a:	74 f2                	je     f010d86e <sys_cgetc+0x1c>
f010d87c:	eb 0e                	jmp    f010d88c <sys_cgetc+0x3a>
	else	/*Programmed I/O*/
	{
		//cprintf("\n(((((((Programmed I/O))))))\n");
		// The cons_getc() primitive doesn't wait for a character,
		// but the sys_cgetc() system call does.
		while ((c = cons_getc()) == 0)
f010d87e:	e8 c7 34 ff ff       	call   f0100d4a <cons_getc>
f010d883:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d886:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d88a:	74 f2                	je     f010d87e <sys_cgetc+0x2c>
			/* do nothing */;
		}
	}
	//cprintf("\nCHAR %d is READ from KB, IEN = %d\n", c, read_eflags() & FL_IF);

	return c;
f010d88c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010d88f:	c9                   	leave  
f010d890:	c3                   	ret    

f010d891 <sys_lock_cons>:

//Lock the console so that no other processes can read from KB or output to the monitor
void sys_lock_cons(void)
{
f010d891:	55                   	push   %ebp
f010d892:	89 e5                	mov    %esp,%ebp
f010d894:	83 ec 08             	sub    $0x8,%esp
	cons_lock();
f010d897:	e8 f5 35 ff ff       	call   f0100e91 <cons_lock>
}
f010d89c:	90                   	nop
f010d89d:	c9                   	leave  
f010d89e:	c3                   	ret    

f010d89f <sys_unlock_cons>:
//Unlock the console so that other processes can read from KB or output to the monitor
void sys_unlock_cons(void)
{
f010d89f:	55                   	push   %ebp
f010d8a0:	89 e5                	mov    %esp,%ebp
f010d8a2:	83 ec 08             	sub    $0x8,%esp
	cons_unlock();
f010d8a5:	e8 2e 36 ff ff       	call   f0100ed8 <cons_unlock>
}
f010d8aa:	90                   	nop
f010d8ab:	c9                   	leave  
f010d8ac:	c3                   	ret    

f010d8ad <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010d8ad:	55                   	push   %ebp
f010d8ae:	89 e5                	mov    %esp,%ebp
f010d8b0:	83 ec 28             	sub    $0x28,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = cur_env;
f010d8b3:	a1 64 10 5c f0       	mov    0xf05c1064,%eax
f010d8b8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010d8bb:	83 ec 0c             	sub    $0xc,%esp
f010d8be:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010d8c1:	50                   	push   %eax
f010d8c2:	e8 09 a9 ff ff       	call   f01081d0 <allocate_frame>
f010d8c7:	83 c4 10             	add    $0x10,%esp
f010d8ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010d8cd:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010d8d1:	75 08                	jne    f010d8db <__sys_allocate_page+0x2e>
		return r ;
f010d8d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d8d6:	e9 d0 00 00 00       	jmp    f010d9ab <__sys_allocate_page+0xfe>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010d8db:	8b 45 08             	mov    0x8(%ebp),%eax
f010d8de:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010d8e3:	77 0c                	ja     f010d8f1 <__sys_allocate_page+0x44>
f010d8e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010d8e8:	25 ff 0f 00 00       	and    $0xfff,%eax
f010d8ed:	85 c0                	test   %eax,%eax
f010d8ef:	74 0a                	je     f010d8fb <__sys_allocate_page+0x4e>
		return E_INVAL;
f010d8f1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010d8f6:	e9 b0 00 00 00       	jmp    f010d9ab <__sys_allocate_page+0xfe>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010d8fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8fe:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010d903:	83 f8 04             	cmp    $0x4,%eax
f010d906:	74 0a                	je     f010d912 <__sys_allocate_page+0x65>
		return E_INVAL;
f010d908:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010d90d:	e9 99 00 00 00       	jmp    f010d9ab <__sys_allocate_page+0xfe>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010d912:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d915:	83 ec 0c             	sub    $0xc,%esp
f010d918:	50                   	push   %eax
f010d919:	e8 a5 fe ff ff       	call   f010d7c3 <to_physical_address>
f010d91e:	83 c4 10             	add    $0x10,%esp
f010d921:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//return it to the original status
		ptr_frame_info->references -= 1;
	}
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
f010d924:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d927:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010d92a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d92d:	c1 e8 0c             	shr    $0xc,%eax
f010d930:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d933:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f010d938:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d93b:	72 17                	jb     f010d954 <__sys_allocate_page+0xa7>
f010d93d:	ff 75 e8             	pushl  -0x18(%ebp)
f010d940:	68 44 92 12 f0       	push   $0xf0129244
f010d945:	68 b5 00 00 00       	push   $0xb5
f010d94a:	68 73 92 12 f0       	push   $0xf0129273
f010d94f:	e8 c6 29 ff ff       	call   f010031a <_panic>
f010d954:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d957:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010d95c:	83 ec 04             	sub    $0x4,%esp
f010d95f:	68 00 10 00 00       	push   $0x1000
f010d964:	6a 00                	push   $0x0
f010d966:	50                   	push   %eax
f010d967:	e8 c0 4d 01 00       	call   f012272c <memset>
f010d96c:	83 c4 10             	add    $0x10,%esp
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010d96f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d972:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010d975:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d978:	8b 40 64             	mov    0x64(%eax),%eax
f010d97b:	ff 75 0c             	pushl  0xc(%ebp)
f010d97e:	51                   	push   %ecx
f010d97f:	52                   	push   %edx
f010d980:	50                   	push   %eax
f010d981:	e8 60 ac ff ff       	call   f01085e6 <map_frame>
f010d986:	83 c4 10             	add    $0x10,%esp
f010d989:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010d98c:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010d990:	75 14                	jne    f010d9a6 <__sys_allocate_page+0xf9>
	{
		decrement_references(ptr_frame_info);
f010d992:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d995:	83 ec 0c             	sub    $0xc,%esp
f010d998:	50                   	push   %eax
f010d999:	e8 3f aa ff ff       	call   f01083dd <decrement_references>
f010d99e:	83 c4 10             	add    $0x10,%esp
		return r;
f010d9a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d9a4:	eb 05                	jmp    f010d9ab <__sys_allocate_page+0xfe>
	}
	return 0 ;
f010d9a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d9ab:	c9                   	leave  
f010d9ac:	c3                   	ret    

f010d9ad <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010d9ad:	55                   	push   %ebp
f010d9ae:	89 e5                	mov    %esp,%ebp
f010d9b0:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010d9b3:	83 ec 04             	sub    $0x4,%esp
f010d9b6:	68 87 92 12 f0       	push   $0xf0129287
f010d9bb:	68 dc 00 00 00       	push   $0xdc
f010d9c0:	68 73 92 12 f0       	push   $0xf0129273
f010d9c5:	e8 50 29 ff ff       	call   f010031a <_panic>

f010d9ca <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010d9ca:	55                   	push   %ebp
f010d9cb:	89 e5                	mov    %esp,%ebp
f010d9cd:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010d9d0:	83 ec 04             	sub    $0x4,%esp
f010d9d3:	68 a8 92 12 f0       	push   $0xf01292a8
f010d9d8:	68 ed 00 00 00       	push   $0xed
f010d9dd:	68 73 92 12 f0       	push   $0xf0129273
f010d9e2:	e8 33 29 ff ff       	call   f010031a <_panic>

f010d9e7 <sys_calculate_required_frames>:
	return 0;
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010d9e7:	55                   	push   %ebp
f010d9e8:	89 e5                	mov    %esp,%ebp
f010d9ea:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(cur_env->env_page_directory, start_virtual_address, size);
f010d9ed:	a1 64 10 5c f0       	mov    0xf05c1064,%eax
f010d9f2:	8b 40 64             	mov    0x64(%eax),%eax
f010d9f5:	83 ec 04             	sub    $0x4,%esp
f010d9f8:	ff 75 0c             	pushl  0xc(%ebp)
f010d9fb:	ff 75 08             	pushl  0x8(%ebp)
f010d9fe:	50                   	push   %eax
f010d9ff:	e8 4e bd ff ff       	call   f0109752 <calculate_required_frames>
f010da04:	83 c4 10             	add    $0x10,%esp
}
f010da07:	c9                   	leave  
f010da08:	c3                   	ret    

f010da09 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010da09:	55                   	push   %ebp
f010da0a:	89 e5                	mov    %esp,%ebp
f010da0c:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010da0f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010da12:	83 ec 0c             	sub    $0xc,%esp
f010da15:	50                   	push   %eax
f010da16:	e8 83 ae ff ff       	call   f010889e <calculate_available_frames>
f010da1b:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010da1e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010da21:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010da24:	01 d0                	add    %edx,%eax
}
f010da26:	c9                   	leave  
f010da27:	c3                   	ret    

f010da28 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010da28:	55                   	push   %ebp
f010da29:	89 e5                	mov    %esp,%ebp
f010da2b:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010da2e:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010da31:	83 ec 0c             	sub    $0xc,%esp
f010da34:	50                   	push   %eax
f010da35:	e8 64 ae ff ff       	call   f010889e <calculate_available_frames>
f010da3a:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010da3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010da40:	c9                   	leave  
f010da41:	c3                   	ret    

f010da42 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010da42:	55                   	push   %ebp
f010da43:	89 e5                	mov    %esp,%ebp
f010da45:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010da48:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010da4b:	83 ec 0c             	sub    $0xc,%esp
f010da4e:	50                   	push   %eax
f010da4f:	e8 4a ae ff ff       	call   f010889e <calculate_available_frames>
f010da54:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010da57:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010da5a:	c9                   	leave  
f010da5b:	c3                   	ret    

f010da5c <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010da5c:	55                   	push   %ebp
f010da5d:	89 e5                	mov    %esp,%ebp
f010da5f:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010da62:	83 ec 0c             	sub    $0xc,%esp
f010da65:	ff 75 08             	pushl  0x8(%ebp)
f010da68:	e8 4a 38 01 00       	call   f01212b7 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010da6d:	83 c4 10             	add    $0x10,%esp
}
f010da70:	c9                   	leave  
f010da71:	c3                   	ret    

f010da72 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010da72:	55                   	push   %ebp
f010da73:	89 e5                	mov    %esp,%ebp
f010da75:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010da78:	e8 65 37 01 00       	call   f01211e2 <scarce_memory>
}
f010da7d:	90                   	nop
f010da7e:	c9                   	leave  
f010da7f:	c3                   	ret    

f010da80 <sys_clearFFL>:

void sys_clearFFL()
{
f010da80:	55                   	push   %ebp
f010da81:	89 e5                	mov    %esp,%ebp
f010da83:	83 ec 18             	sub    $0x18,%esp
	int size;
	acquire_spinlock(&MemFrameLists.mfllock);
f010da86:	83 ec 0c             	sub    $0xc,%esp
f010da89:	68 e0 fe 59 f0       	push   $0xf059fee0
f010da8e:	e8 8e 10 00 00       	call   f010eb21 <acquire_spinlock>
f010da93:	83 c4 10             	add    $0x10,%esp
	{
		size = LIST_SIZE(&MemFrameLists.free_frame_list) ;
f010da96:	a1 cc fe 59 f0       	mov    0xf059fecc,%eax
f010da9b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		struct FrameInfo* ptr_tmp_FI ;
		for (int i = 0; i < size ; i++)
f010da9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010daa5:	eb 12                	jmp    f010dab9 <sys_clearFFL+0x39>
		{
			allocate_frame(&ptr_tmp_FI) ;
f010daa7:	83 ec 0c             	sub    $0xc,%esp
f010daaa:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010daad:	50                   	push   %eax
f010daae:	e8 1d a7 ff ff       	call   f01081d0 <allocate_frame>
f010dab3:	83 c4 10             	add    $0x10,%esp
	int size;
	acquire_spinlock(&MemFrameLists.mfllock);
	{
		size = LIST_SIZE(&MemFrameLists.free_frame_list) ;
		struct FrameInfo* ptr_tmp_FI ;
		for (int i = 0; i < size ; i++)
f010dab6:	ff 45 f4             	incl   -0xc(%ebp)
f010dab9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dabc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010dabf:	7c e6                	jl     f010daa7 <sys_clearFFL+0x27>
		{
			allocate_frame(&ptr_tmp_FI) ;
		}
	}
	release_spinlock(&MemFrameLists.mfllock);
f010dac1:	83 ec 0c             	sub    $0xc,%esp
f010dac4:	68 e0 fe 59 f0       	push   $0xf059fee0
f010dac9:	e8 da 10 00 00       	call   f010eba8 <release_spinlock>
f010dace:	83 c4 10             	add    $0x10,%esp
}
f010dad1:	90                   	nop
f010dad2:	c9                   	leave  
f010dad3:	c3                   	ret    

f010dad4 <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010dad4:	55                   	push   %ebp
f010dad5:	89 e5                	mov    %esp,%ebp
f010dad7:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(cur_env);
f010dada:	a1 64 10 5c f0       	mov    0xf05c1064,%eax
f010dadf:	83 ec 0c             	sub    $0xc,%esp
f010dae2:	50                   	push   %eax
f010dae3:	e8 87 6c ff ff       	call   f010476f <pf_calculate_allocated_pages>
f010dae8:	83 c4 10             	add    $0x10,%esp
}
f010daeb:	c9                   	leave  
f010daec:	c3                   	ret    

f010daed <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010daed:	55                   	push   %ebp
f010daee:	89 e5                	mov    %esp,%ebp
f010daf0:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010daf3:	e8 db 0c 00 00       	call   f010e7d3 <isBufferingEnabled>
f010daf8:	84 c0                	test   %al,%al
f010dafa:	74 19                	je     f010db15 <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(cur_env, virtual_address, size);
f010dafc:	a1 64 10 5c f0       	mov    0xf05c1064,%eax
f010db01:	83 ec 04             	sub    $0x4,%esp
f010db04:	ff 75 0c             	pushl  0xc(%ebp)
f010db07:	ff 75 08             	pushl  0x8(%ebp)
f010db0a:	50                   	push   %eax
f010db0b:	e8 8d bc ff ff       	call   f010979d <__free_user_mem_with_buffering>
f010db10:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(cur_env, virtual_address, size);
	}
	return;
f010db13:	eb 18                	jmp    f010db2d <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(cur_env, virtual_address, size);
	}
	else
	{
		free_user_mem(cur_env, virtual_address, size);
f010db15:	a1 64 10 5c f0       	mov    0xf05c1064,%eax
f010db1a:	83 ec 04             	sub    $0x4,%esp
f010db1d:	ff 75 0c             	pushl  0xc(%ebp)
f010db20:	ff 75 08             	pushl  0x8(%ebp)
f010db23:	50                   	push   %eax
f010db24:	e8 66 bc ff ff       	call   f010978f <free_user_mem>
f010db29:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010db2c:	90                   	nop
}
f010db2d:	c9                   	leave  
f010db2e:	c3                   	ret    

f010db2f <check_Param>:
// Youssef Mohsen
void check_Param(uint32 virtual_address)
{
f010db2f:	55                   	push   %ebp
f010db30:	89 e5                	mov    %esp,%ebp
f010db32:	83 ec 08             	sub    $0x8,%esp
	if(virtual_address == 0)
f010db35:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010db39:	75 07                	jne    f010db42 <check_Param+0x13>
	{
		env_exit();
f010db3b:	e8 ee cb ff ff       	call   f010a72e <env_exit>
	}
	else if(virtual_address >= KERNEL_BASE)
	{
		env_exit();
	}
}
f010db40:	eb 25                	jmp    f010db67 <check_Param+0x38>
{
	if(virtual_address == 0)
	{
		env_exit();
	}
	else if(virtual_address > USER_HEAP_MAX || virtual_address < USER_HEAP_START)
f010db42:	81 7d 08 00 00 00 a0 	cmpl   $0xa0000000,0x8(%ebp)
f010db49:	77 07                	ja     f010db52 <check_Param+0x23>
f010db4b:	8b 45 08             	mov    0x8(%ebp),%eax
f010db4e:	85 c0                	test   %eax,%eax
f010db50:	78 07                	js     f010db59 <check_Param+0x2a>
	{
		env_exit();
f010db52:	e8 d7 cb ff ff       	call   f010a72e <env_exit>
	}
	else if(virtual_address >= KERNEL_BASE)
	{
		env_exit();
	}
}
f010db57:	eb 0e                	jmp    f010db67 <check_Param+0x38>
	}
	else if(virtual_address > USER_HEAP_MAX || virtual_address < USER_HEAP_START)
	{
		env_exit();
	}
	else if(virtual_address >= KERNEL_BASE)
f010db59:	81 7d 08 ff ff ff ef 	cmpl   $0xefffffff,0x8(%ebp)
f010db60:	76 05                	jbe    f010db67 <check_Param+0x38>
	{
		env_exit();
f010db62:	e8 c7 cb ff ff       	call   f010a72e <env_exit>
	}
}
f010db67:	90                   	nop
f010db68:	c9                   	leave  
f010db69:	c3                   	ret    

f010db6a <sys_allocate_user_mem>:
// Youssef Mohsen
void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010db6a:	55                   	push   %ebp
f010db6b:	89 e5                	mov    %esp,%ebp
f010db6d:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #03] [2] SYSTEM CALLS - Params Validation
	check_Param(virtual_address);
f010db70:	83 ec 0c             	sub    $0xc,%esp
f010db73:	ff 75 08             	pushl  0x8(%ebp)
f010db76:	e8 b4 ff ff ff       	call   f010db2f <check_Param>
f010db7b:	83 c4 10             	add    $0x10,%esp
	allocate_user_mem(cur_env, virtual_address, size);
f010db7e:	a1 64 10 5c f0       	mov    0xf05c1064,%eax
f010db83:	83 ec 04             	sub    $0x4,%esp
f010db86:	ff 75 0c             	pushl  0xc(%ebp)
f010db89:	ff 75 08             	pushl  0x8(%ebp)
f010db8c:	50                   	push   %eax
f010db8d:	e8 ef bb ff ff       	call   f0109781 <allocate_user_mem>
f010db92:	83 c4 10             	add    $0x10,%esp
	return;
f010db95:	90                   	nop
}
f010db96:	c9                   	leave  
f010db97:	c3                   	ret    

f010db98 <sys_allocate_chunk>:
// Youssef Mohsen
void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010db98:	55                   	push   %ebp
f010db99:	89 e5                	mov    %esp,%ebp
f010db9b:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #03] [2] SYSTEM CALLS - Params Validation
	check_Param(virtual_address);
f010db9e:	83 ec 0c             	sub    $0xc,%esp
f010dba1:	ff 75 08             	pushl  0x8(%ebp)
f010dba4:	e8 86 ff ff ff       	call   f010db2f <check_Param>
f010dba9:	83 c4 10             	add    $0x10,%esp
	allocate_chunk(cur_env->env_page_directory, virtual_address, size, perms);
f010dbac:	a1 64 10 5c f0       	mov    0xf05c1064,%eax
f010dbb1:	8b 40 64             	mov    0x64(%eax),%eax
f010dbb4:	ff 75 10             	pushl  0x10(%ebp)
f010dbb7:	ff 75 0c             	pushl  0xc(%ebp)
f010dbba:	ff 75 08             	pushl  0x8(%ebp)
f010dbbd:	50                   	push   %eax
f010dbbe:	e8 5b bb ff ff       	call   f010971e <allocate_chunk>
f010dbc3:	83 c4 10             	add    $0x10,%esp
	return;
f010dbc6:	90                   	nop
}
f010dbc7:	c9                   	leave  
f010dbc8:	c3                   	ret    

f010dbc9 <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010dbc9:	55                   	push   %ebp
f010dbca:	89 e5                	mov    %esp,%ebp
f010dbcc:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(cur_env, src_virtual_address, dst_virtual_address, size);
f010dbcf:	a1 64 10 5c f0       	mov    0xf05c1064,%eax
f010dbd4:	ff 75 10             	pushl  0x10(%ebp)
f010dbd7:	ff 75 0c             	pushl  0xc(%ebp)
f010dbda:	ff 75 08             	pushl  0x8(%ebp)
f010dbdd:	50                   	push   %eax
f010dbde:	e8 d7 bb ff ff       	call   f01097ba <move_user_mem>
f010dbe3:	83 c4 10             	add    $0x10,%esp
	return;
f010dbe6:	90                   	nop
}
f010dbe7:	c9                   	leave  
f010dbe8:	c3                   	ret    

f010dbe9 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010dbe9:	55                   	push   %ebp
f010dbea:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010dbec:	a1 a4 28 5a f0       	mov    0xf05a28a4,%eax
}
f010dbf1:	5d                   	pop    %ebp
f010dbf2:	c3                   	ret    

f010dbf3 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010dbf3:	55                   	push   %ebp
f010dbf4:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010dbf6:	8b 45 08             	mov    0x8(%ebp),%eax
f010dbf9:	a3 a4 28 5a f0       	mov    %eax,0xf05a28a4
}
f010dbfe:	90                   	nop
f010dbff:	5d                   	pop    %ebp
f010dc00:	c3                   	ret    

f010dc01 <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010dc01:	55                   	push   %ebp
f010dc02:	89 e5                	mov    %esp,%ebp
f010dc04:	83 ec 18             	sub    $0x18,%esp
f010dc07:	8b 45 10             	mov    0x10(%ebp),%eax
f010dc0a:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(cur_env->env_id, shareName, size, isWritable, virtual_address);
f010dc0d:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010dc11:	a1 64 10 5c f0       	mov    0xf05c1064,%eax
f010dc16:	8b 40 10             	mov    0x10(%eax),%eax
f010dc19:	83 ec 0c             	sub    $0xc,%esp
f010dc1c:	ff 75 14             	pushl  0x14(%ebp)
f010dc1f:	52                   	push   %edx
f010dc20:	ff 75 0c             	pushl  0xc(%ebp)
f010dc23:	ff 75 08             	pushl  0x8(%ebp)
f010dc26:	50                   	push   %eax
f010dc27:	e8 dd ad ff ff       	call   f0108a09 <createSharedObject>
f010dc2c:	83 c4 20             	add    $0x20,%esp
}
f010dc2f:	c9                   	leave  
f010dc30:	c3                   	ret    

f010dc31 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010dc31:	55                   	push   %ebp
f010dc32:	89 e5                	mov    %esp,%ebp
f010dc34:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010dc37:	83 ec 08             	sub    $0x8,%esp
f010dc3a:	ff 75 0c             	pushl  0xc(%ebp)
f010dc3d:	ff 75 08             	pushl  0x8(%ebp)
f010dc40:	e8 e4 ad ff ff       	call   f0108a29 <getSizeOfSharedObject>
f010dc45:	83 c4 10             	add    $0x10,%esp
}
f010dc48:	c9                   	leave  
f010dc49:	c3                   	ret    

f010dc4a <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010dc4a:	55                   	push   %ebp
f010dc4b:	89 e5                	mov    %esp,%ebp
f010dc4d:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010dc50:	83 ec 04             	sub    $0x4,%esp
f010dc53:	ff 75 10             	pushl  0x10(%ebp)
f010dc56:	ff 75 0c             	pushl  0xc(%ebp)
f010dc59:	ff 75 08             	pushl  0x8(%ebp)
f010dc5c:	e8 f7 ad ff ff       	call   f0108a58 <getSharedObject>
f010dc61:	83 c4 10             	add    $0x10,%esp
}
f010dc64:	c9                   	leave  
f010dc65:	c3                   	ret    

f010dc66 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010dc66:	55                   	push   %ebp
f010dc67:	89 e5                	mov    %esp,%ebp
f010dc69:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010dc6c:	83 ec 08             	sub    $0x8,%esp
f010dc6f:	ff 75 0c             	pushl  0xc(%ebp)
f010dc72:	ff 75 08             	pushl  0x8(%ebp)
f010dc75:	e8 fb ad ff ff       	call   f0108a75 <freeSharedObject>
f010dc7a:	83 c4 10             	add    $0x10,%esp
}
f010dc7d:	c9                   	leave  
f010dc7e:	c3                   	ret    

f010dc7f <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010dc7f:	55                   	push   %ebp
f010dc80:	89 e5                	mov    %esp,%ebp
	return cur_env->env_id;
f010dc82:	a1 64 10 5c f0       	mov    0xf05c1064,%eax
f010dc87:	8b 40 10             	mov    0x10(%eax),%eax
}
f010dc8a:	5d                   	pop    %ebp
f010dc8b:	c3                   	ret    

f010dc8c <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010dc8c:	55                   	push   %ebp
f010dc8d:	89 e5                	mov    %esp,%ebp
	//return cur_env->env_id;
	return (cur_env - envs) ;
f010dc8f:	a1 64 10 5c f0       	mov    0xf05c1064,%eax
f010dc94:	89 c2                	mov    %eax,%edx
f010dc96:	a1 b0 f3 59 f0       	mov    0xf059f3b0,%eax
f010dc9b:	29 c2                	sub    %eax,%edx
f010dc9d:	89 d0                	mov    %edx,%eax
f010dc9f:	c1 f8 02             	sar    $0x2,%eax
f010dca2:	89 c2                	mov    %eax,%edx
f010dca4:	89 d0                	mov    %edx,%eax
f010dca6:	c1 e0 02             	shl    $0x2,%eax
f010dca9:	01 d0                	add    %edx,%eax
f010dcab:	c1 e0 02             	shl    $0x2,%eax
f010dcae:	01 d0                	add    %edx,%eax
f010dcb0:	c1 e0 02             	shl    $0x2,%eax
f010dcb3:	01 d0                	add    %edx,%eax
f010dcb5:	c1 e0 02             	shl    $0x2,%eax
f010dcb8:	01 d0                	add    %edx,%eax
f010dcba:	c1 e0 08             	shl    $0x8,%eax
f010dcbd:	29 d0                	sub    %edx,%eax
f010dcbf:	c1 e0 08             	shl    $0x8,%eax
f010dcc2:	29 d0                	sub    %edx,%eax
f010dcc4:	c1 e0 03             	shl    $0x3,%eax
f010dcc7:	01 d0                	add    %edx,%eax
f010dcc9:	c1 e0 03             	shl    $0x3,%eax
f010dccc:	01 d0                	add    %edx,%eax
f010dcce:	01 c0                	add    %eax,%eax
f010dcd0:	01 d0                	add    %edx,%eax
}
f010dcd2:	5d                   	pop    %ebp
f010dcd3:	c3                   	ret    

f010dcd4 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010dcd4:	55                   	push   %ebp
f010dcd5:	89 e5                	mov    %esp,%ebp
	return cur_env->env_parent_id;
f010dcd7:	a1 64 10 5c f0       	mov    0xf05c1064,%eax
f010dcdc:	8b 40 14             	mov    0x14(%eax),%eax
}
f010dcdf:	5d                   	pop    %ebp
f010dce0:	c3                   	ret    

f010dce1 <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010dce1:	55                   	push   %ebp
f010dce2:	89 e5                	mov    %esp,%ebp
f010dce4:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010dce7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010dceb:	75 0a                	jne    f010dcf7 <sys_destroy_env+0x16>
	{
		e = cur_env ;
f010dced:	a1 64 10 5c f0       	mov    0xf05c1064,%eax
f010dcf2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010dcf5:	eb 22                	jmp    f010dd19 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010dcf7:	83 ec 04             	sub    $0x4,%esp
f010dcfa:	6a 00                	push   $0x0
f010dcfc:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010dcff:	50                   	push   %eax
f010dd00:	ff 75 08             	pushl  0x8(%ebp)
f010dd03:	e8 b8 ca ff ff       	call   f010a7c0 <envid2env>
f010dd08:	83 c4 10             	add    $0x10,%esp
f010dd0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010dd0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010dd12:	79 05                	jns    f010dd19 <sys_destroy_env+0x38>
	{
		return r;
f010dd14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dd17:	eb 5e                	jmp    f010dd77 <sys_destroy_env+0x96>
	}

	if (e == cur_env)
f010dd19:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dd1c:	a1 64 10 5c f0       	mov    0xf05c1064,%eax
f010dd21:	39 c2                	cmp    %eax,%edx
f010dd23:	75 1b                	jne    f010dd40 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", cur_env->env_id);
f010dd25:	a1 64 10 5c f0       	mov    0xf05c1064,%eax
f010dd2a:	8b 40 10             	mov    0x10(%eax),%eax
f010dd2d:	83 ec 08             	sub    $0x8,%esp
f010dd30:	50                   	push   %eax
f010dd31:	68 c7 92 12 f0       	push   $0xf01292c7
f010dd36:	e8 31 32 ff ff       	call   f0100f6c <cprintf>
f010dd3b:	83 c4 10             	add    $0x10,%esp
f010dd3e:	eb 20                	jmp    f010dd60 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", cur_env->env_id, e->env_id);
f010dd40:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dd43:	8b 50 10             	mov    0x10(%eax),%edx
f010dd46:	a1 64 10 5c f0       	mov    0xf05c1064,%eax
f010dd4b:	8b 40 10             	mov    0x10(%eax),%eax
f010dd4e:	83 ec 04             	sub    $0x4,%esp
f010dd51:	52                   	push   %edx
f010dd52:	50                   	push   %eax
f010dd53:	68 e2 92 12 f0       	push   $0xf01292e2
f010dd58:	e8 0f 32 ff ff       	call   f0100f6c <cprintf>
f010dd5d:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010dd60:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dd63:	8b 40 10             	mov    0x10(%eax),%eax
f010dd66:	83 ec 0c             	sub    $0xc,%esp
f010dd69:	50                   	push   %eax
f010dd6a:	e8 f4 7c ff ff       	call   f0105a63 <sched_kill_env>
f010dd6f:	83 c4 10             	add    $0x10,%esp

	return 0;
f010dd72:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd77:	c9                   	leave  
f010dd78:	c3                   	ret    

f010dd79 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010dd79:	55                   	push   %ebp
f010dd7a:	89 e5                	mov    %esp,%ebp
f010dd7c:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010dd7f:	e8 aa c9 ff ff       	call   f010a72e <env_exit>

	//2024: if returned here, then it's not the current environment. So, just return
	//env_run_cmd_prmpt();
	//context_switch(&(cur_env->context), mycpu()->scheduler);

}
f010dd84:	90                   	nop
f010dd85:	c9                   	leave  
f010dd86:	c3                   	ret    

f010dd87 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010dd87:	55                   	push   %ebp
f010dd88:	89 e5                	mov    %esp,%ebp
f010dd8a:	83 ec 18             	sub    $0x18,%esp
	//cprintf("\nAttempt to create a new env\n");

	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010dd8d:	ff 75 14             	pushl  0x14(%ebp)
f010dd90:	ff 75 10             	pushl  0x10(%ebp)
f010dd93:	ff 75 0c             	pushl  0xc(%ebp)
f010dd96:	ff 75 08             	pushl  0x8(%ebp)
f010dd99:	e8 d2 bc ff ff       	call   f0109a70 <env_create>
f010dd9e:	83 c4 10             	add    $0x10,%esp
f010dda1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010dda4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010dda8:	75 07                	jne    f010ddb1 <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010ddaa:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010ddaf:	eb 14                	jmp    f010ddc5 <sys_create_env+0x3e>
	}
	//cprintf("\nENV %d is created\n", env->env_id);

	//2015
	sched_new_env(env);
f010ddb1:	83 ec 0c             	sub    $0xc,%esp
f010ddb4:	ff 75 f4             	pushl  -0xc(%ebp)
f010ddb7:	e8 e9 78 ff ff       	call   f01056a5 <sched_new_env>
f010ddbc:	83 c4 10             	add    $0x10,%esp

	//cprintf("\nENV %d is scheduled as NEW\n", env->env_id);

	return env->env_id;
f010ddbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ddc2:	8b 40 10             	mov    0x10(%eax),%eax
}
f010ddc5:	c9                   	leave  
f010ddc6:	c3                   	ret    

f010ddc7 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010ddc7:	55                   	push   %ebp
f010ddc8:	89 e5                	mov    %esp,%ebp
f010ddca:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010ddcd:	8b 45 08             	mov    0x8(%ebp),%eax
f010ddd0:	83 ec 0c             	sub    $0xc,%esp
f010ddd3:	50                   	push   %eax
f010ddd4:	e8 22 79 ff ff       	call   f01056fb <sched_run_env>
f010ddd9:	83 c4 10             	add    $0x10,%esp
}
f010dddc:	90                   	nop
f010dddd:	c9                   	leave  
f010ddde:	c3                   	ret    

f010dddf <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010dddf:	55                   	push   %ebp
f010dde0:	89 e5                	mov    %esp,%ebp
f010dde2:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010dde5:	0f 31                	rdtsc  
f010dde7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010ddea:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010dded:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ddf0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ddf3:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010ddf6:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010ddf9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ddfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010ddff:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010de02:	89 01                	mov    %eax,(%ecx)
f010de04:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010de07:	8b 45 08             	mov    0x8(%ebp),%eax
f010de0a:	c9                   	leave  
f010de0b:	c2 04 00             	ret    $0x4

f010de0e <sys_rcr2>:

uint32 sys_rcr2()
{
f010de0e:	55                   	push   %ebp
f010de0f:	89 e5                	mov    %esp,%ebp
f010de11:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010de14:	0f 20 d0             	mov    %cr2,%eax
f010de17:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010de1a:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010de1d:	90                   	nop
}
f010de1e:	c9                   	leave  
f010de1f:	c3                   	ret    

f010de20 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010de20:	55                   	push   %ebp
f010de21:	89 e5                	mov    %esp,%ebp
f010de23:	83 ec 04             	sub    $0x4,%esp
f010de26:	8b 45 08             	mov    0x8(%ebp),%eax
f010de29:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010de2c:	8a 45 fc             	mov    -0x4(%ebp),%al
f010de2f:	a2 20 fc 59 f0       	mov    %al,0xf059fc20
}
f010de34:	90                   	nop
f010de35:	c9                   	leave  
f010de36:	c3                   	ret    

f010de37 <syscall>:
/**************************************************************************/
/************************* SYSTEM CALLS HANDLER ***************************/
/**************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010de37:	55                   	push   %ebp
f010de38:	89 e5                	mov    %esp,%ebp
f010de3a:	56                   	push   %esi
f010de3b:	53                   	push   %ebx
f010de3c:	83 ec 10             	sub    $0x10,%esp
	cur_env = get_cpu_proc();
f010de3f:	e8 2c c9 ff ff       	call   f010a770 <get_cpu_proc>
f010de44:	a3 64 10 5c f0       	mov    %eax,0xf05c1064
	assert(cur_env != NULL);
f010de49:	a1 64 10 5c f0       	mov    0xf05c1064,%eax
f010de4e:	85 c0                	test   %eax,%eax
f010de50:	75 19                	jne    f010de6b <syscall+0x34>
f010de52:	68 fa 92 12 f0       	push   $0xf01292fa
f010de57:	68 0a 93 12 f0       	push   $0xf012930a
f010de5c:	68 05 02 00 00       	push   $0x205
f010de61:	68 73 92 12 f0       	push   $0xf0129273
f010de66:	e8 af 24 ff ff       	call   f010031a <_panic>

	//cprintf("syscallno = %d\n", syscallno);
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	switch(syscallno)
f010de6b:	83 7d 08 2e          	cmpl   $0x2e,0x8(%ebp)
f010de6f:	0f 87 06 04 00 00    	ja     f010e27b <syscall+0x444>
f010de75:	8b 45 08             	mov    0x8(%ebp),%eax
f010de78:	c1 e0 02             	shl    $0x2,%eax
f010de7b:	05 20 93 12 f0       	add    $0xf0129320,%eax
f010de80:	8b 00                	mov    (%eax),%eax
f010de82:	ff e0                	jmp    *%eax
	{
	//TODO: [PROJECT'24.MS1 - #02] [2] SYSTEM CALLS - Add suitable code here
	case SYS_sbrk:
		return (uint32)sys_sbrk(a1);
f010de84:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de87:	83 ec 0c             	sub    $0xc,%esp
f010de8a:	50                   	push   %eax
f010de8b:	e8 dc b8 ff ff       	call   f010976c <sys_sbrk>
f010de90:	83 c4 10             	add    $0x10,%esp
f010de93:	e9 e8 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1,a2);
f010de98:	83 ec 08             	sub    $0x8,%esp
f010de9b:	ff 75 10             	pushl  0x10(%ebp)
f010de9e:	ff 75 0c             	pushl  0xc(%ebp)
f010dea1:	e8 47 fc ff ff       	call   f010daed <sys_free_user_mem>
f010dea6:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dea9:	b8 00 00 00 00       	mov    $0x0,%eax
f010deae:	e9 cd 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;

	case SYS_allocate_user_mem:
		sys_allocate_user_mem(a1,a2);
f010deb3:	83 ec 08             	sub    $0x8,%esp
f010deb6:	ff 75 10             	pushl  0x10(%ebp)
f010deb9:	ff 75 0c             	pushl  0xc(%ebp)
f010debc:	e8 a9 fc ff ff       	call   f010db6a <sys_allocate_user_mem>
f010dec1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dec4:	b8 00 00 00 00       	mov    $0x0,%eax
f010dec9:	e9 b2 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	//======================================================================
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010dece:	8b 45 14             	mov    0x14(%ebp),%eax
f010ded1:	0f b6 d0             	movzbl %al,%edx
f010ded4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ded7:	83 ec 04             	sub    $0x4,%esp
f010deda:	52                   	push   %edx
f010dedb:	ff 75 10             	pushl  0x10(%ebp)
f010dede:	50                   	push   %eax
f010dedf:	e8 f2 f8 ff ff       	call   f010d7d6 <sys_cputs>
f010dee4:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dee7:	b8 00 00 00 00       	mov    $0x0,%eax
f010deec:	e9 8f 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010def1:	e8 5c f9 ff ff       	call   f010d852 <sys_cgetc>
f010def6:	e9 85 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_lock_cons:
		sys_lock_cons();
f010defb:	e8 91 f9 ff ff       	call   f010d891 <sys_lock_cons>
		return 0;
f010df00:	b8 00 00 00 00       	mov    $0x0,%eax
f010df05:	e9 76 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_unlock_cons:
		sys_unlock_cons();
f010df0a:	e8 90 f9 ff ff       	call   f010d89f <sys_unlock_cons>
		return 0;
f010df0f:	b8 00 00 00 00       	mov    $0x0,%eax
f010df14:	e9 67 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010df19:	83 ec 08             	sub    $0x8,%esp
f010df1c:	ff 75 10             	pushl  0x10(%ebp)
f010df1f:	ff 75 0c             	pushl  0xc(%ebp)
f010df22:	e8 c0 fa ff ff       	call   f010d9e7 <sys_calculate_required_frames>
f010df27:	83 c4 10             	add    $0x10,%esp
f010df2a:	e9 51 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010df2f:	e8 d5 fa ff ff       	call   f010da09 <sys_calculate_free_frames>
f010df34:	e9 47 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010df39:	e8 ea fa ff ff       	call   f010da28 <sys_calculate_modified_frames>
f010df3e:	e9 3d 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010df43:	e8 fa fa ff ff       	call   f010da42 <sys_calculate_notmod_frames>
f010df48:	e9 33 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010df4d:	e8 82 fb ff ff       	call   f010dad4 <sys_pf_calculate_allocated_pages>
f010df52:	e9 29 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010df57:	83 ec 0c             	sub    $0xc,%esp
f010df5a:	ff 75 0c             	pushl  0xc(%ebp)
f010df5d:	e8 fa fa ff ff       	call   f010da5c <sys_calculate_pages_tobe_removed_ready_exit>
f010df62:	83 c4 10             	add    $0x10,%esp
f010df65:	e9 16 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010df6a:	e8 03 fb ff ff       	call   f010da72 <sys_scarce_memory>
		return 0;
f010df6f:	b8 00 00 00 00       	mov    $0x0,%eax
f010df74:	e9 07 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010df79:	83 ec 04             	sub    $0x4,%esp
f010df7c:	ff 75 14             	pushl  0x14(%ebp)
f010df7f:	ff 75 10             	pushl  0x10(%ebp)
f010df82:	ff 75 0c             	pushl  0xc(%ebp)
f010df85:	e8 0e fc ff ff       	call   f010db98 <sys_allocate_chunk>
f010df8a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010df8d:	b8 00 00 00 00       	mov    $0x0,%eax
f010df92:	e9 e9 02 00 00       	jmp    f010e280 <syscall+0x449>
		break;

		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010df97:	8b 55 10             	mov    0x10(%ebp),%edx
f010df9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df9d:	83 ec 08             	sub    $0x8,%esp
f010dfa0:	52                   	push   %edx
f010dfa1:	50                   	push   %eax
f010dfa2:	e8 06 f9 ff ff       	call   f010d8ad <__sys_allocate_page>
f010dfa7:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dfaa:	b8 00 00 00 00       	mov    $0x0,%eax
f010dfaf:	e9 cc 02 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010dfb4:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010dfb7:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010dfba:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010dfbd:	8b 55 10             	mov    0x10(%ebp),%edx
f010dfc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfc3:	83 ec 0c             	sub    $0xc,%esp
f010dfc6:	56                   	push   %esi
f010dfc7:	53                   	push   %ebx
f010dfc8:	51                   	push   %ecx
f010dfc9:	52                   	push   %edx
f010dfca:	50                   	push   %eax
f010dfcb:	e8 dd f9 ff ff       	call   f010d9ad <__sys_map_frame>
f010dfd0:	83 c4 20             	add    $0x20,%esp
		return 0;
f010dfd3:	b8 00 00 00 00       	mov    $0x0,%eax
f010dfd8:	e9 a3 02 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010dfdd:	8b 55 10             	mov    0x10(%ebp),%edx
f010dfe0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfe3:	83 ec 08             	sub    $0x8,%esp
f010dfe6:	52                   	push   %edx
f010dfe7:	50                   	push   %eax
f010dfe8:	e8 dd f9 ff ff       	call   f010d9ca <__sys_unmap_frame>
f010dfed:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dff0:	b8 00 00 00 00       	mov    $0x0,%eax
f010dff5:	e9 86 02 00 00       	jmp    f010e280 <syscall+0x449>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010dffa:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dffd:	0f be c0             	movsbl %al,%eax
f010e000:	83 ec 0c             	sub    $0xc,%esp
f010e003:	50                   	push   %eax
f010e004:	e8 25 f8 ff ff       	call   f010d82e <sys_cputc>
f010e009:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e00c:	b8 00 00 00 00       	mov    $0x0,%eax
f010e011:	e9 6a 02 00 00       	jmp    f010e280 <syscall+0x449>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010e016:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e019:	0f be c0             	movsbl %al,%eax
f010e01c:	83 ec 0c             	sub    $0xc,%esp
f010e01f:	50                   	push   %eax
f010e020:	e8 5b fa ff ff       	call   f010da80 <sys_clearFFL>
f010e025:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e028:	b8 00 00 00 00       	mov    $0x0,%eax
f010e02d:	e9 4e 02 00 00       	jmp    f010e280 <syscall+0x449>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010e032:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010e035:	8b 45 14             	mov    0x14(%ebp),%eax
f010e038:	0f b6 d0             	movzbl %al,%edx
f010e03b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e03e:	51                   	push   %ecx
f010e03f:	52                   	push   %edx
f010e040:	ff 75 10             	pushl  0x10(%ebp)
f010e043:	50                   	push   %eax
f010e044:	e8 b8 fb ff ff       	call   f010dc01 <sys_createSharedObject>
f010e049:	83 c4 10             	add    $0x10,%esp
f010e04c:	e9 2f 02 00 00       	jmp    f010e280 <syscall+0x449>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010e051:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010e054:	8b 55 10             	mov    0x10(%ebp),%edx
f010e057:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e05a:	83 ec 04             	sub    $0x4,%esp
f010e05d:	51                   	push   %ecx
f010e05e:	52                   	push   %edx
f010e05f:	50                   	push   %eax
f010e060:	e8 e5 fb ff ff       	call   f010dc4a <sys_getSharedObject>
f010e065:	83 c4 10             	add    $0x10,%esp
f010e068:	e9 13 02 00 00       	jmp    f010e280 <syscall+0x449>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010e06d:	8b 55 10             	mov    0x10(%ebp),%edx
f010e070:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e073:	83 ec 08             	sub    $0x8,%esp
f010e076:	52                   	push   %edx
f010e077:	50                   	push   %eax
f010e078:	e8 e9 fb ff ff       	call   f010dc66 <sys_freeSharedObject>
f010e07d:	83 c4 10             	add    $0x10,%esp
f010e080:	e9 fb 01 00 00       	jmp    f010e280 <syscall+0x449>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010e085:	8b 55 10             	mov    0x10(%ebp),%edx
f010e088:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e08b:	83 ec 08             	sub    $0x8,%esp
f010e08e:	52                   	push   %edx
f010e08f:	50                   	push   %eax
f010e090:	e8 9c fb ff ff       	call   f010dc31 <sys_getSizeOfSharedObject>
f010e095:	83 c4 10             	add    $0x10,%esp
f010e098:	e9 e3 01 00 00       	jmp    f010e280 <syscall+0x449>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010e09d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0a0:	ff 75 18             	pushl  0x18(%ebp)
f010e0a3:	ff 75 14             	pushl  0x14(%ebp)
f010e0a6:	ff 75 10             	pushl  0x10(%ebp)
f010e0a9:	50                   	push   %eax
f010e0aa:	e8 d8 fc ff ff       	call   f010dd87 <sys_create_env>
f010e0af:	83 c4 10             	add    $0x10,%esp
f010e0b2:	e9 c9 01 00 00       	jmp    f010e280 <syscall+0x449>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010e0b7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0ba:	83 ec 0c             	sub    $0xc,%esp
f010e0bd:	50                   	push   %eax
f010e0be:	e8 04 fd ff ff       	call   f010ddc7 <sys_run_env>
f010e0c3:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e0c6:	b8 00 00 00 00       	mov    $0x0,%eax
f010e0cb:	e9 b0 01 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010e0d0:	e8 b7 fb ff ff       	call   f010dc8c <sys_getenvindex>
f010e0d5:	e9 a6 01 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010e0da:	e8 a0 fb ff ff       	call   f010dc7f <sys_getenvid>
f010e0df:	e9 9c 01 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010e0e4:	e8 eb fb ff ff       	call   f010dcd4 <sys_getparentenvid>
f010e0e9:	e9 92 01 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010e0ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0f1:	83 ec 0c             	sub    $0xc,%esp
f010e0f4:	50                   	push   %eax
f010e0f5:	e8 e7 fb ff ff       	call   f010dce1 <sys_destroy_env>
f010e0fa:	83 c4 10             	add    $0x10,%esp
f010e0fd:	e9 7e 01 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010e102:	e8 72 fc ff ff       	call   f010dd79 <sys_exit_env>
		return 0;
f010e107:	b8 00 00 00 00       	mov    $0x0,%eax
f010e10c:	e9 6f 01 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010e111:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010e114:	83 ec 0c             	sub    $0xc,%esp
f010e117:	50                   	push   %eax
f010e118:	e8 c2 fc ff ff       	call   f010dddf <sys_get_virtual_time>
f010e11d:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010e120:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e123:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010e126:	8b 45 10             	mov    0x10(%ebp),%eax
f010e129:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010e12c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010e12f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e132:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010e134:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e137:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e13a:	89 10                	mov    %edx,(%eax)
		return 0;
f010e13c:	b8 00 00 00 00       	mov    $0x0,%eax
f010e141:	e9 3a 01 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010e146:	83 ec 04             	sub    $0x4,%esp
f010e149:	ff 75 14             	pushl  0x14(%ebp)
f010e14c:	ff 75 10             	pushl  0x10(%ebp)
f010e14f:	ff 75 0c             	pushl  0xc(%ebp)
f010e152:	e8 72 fa ff ff       	call   f010dbc9 <sys_move_user_mem>
f010e157:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e15a:	b8 00 00 00 00       	mov    $0x0,%eax
f010e15f:	e9 1c 01 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010e164:	e8 a5 fc ff ff       	call   f010de0e <sys_rcr2>
f010e169:	e9 12 01 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010e16e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e171:	0f b6 c0             	movzbl %al,%eax
f010e174:	83 ec 0c             	sub    $0xc,%esp
f010e177:	50                   	push   %eax
f010e178:	e8 a3 fc ff ff       	call   f010de20 <sys_bypassPageFault>
f010e17d:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e180:	b8 00 00 00 00       	mov    $0x0,%eax
f010e185:	e9 f6 00 00 00       	jmp    f010e280 <syscall+0x449>

	case SYS_rsttst:
		rsttst();
f010e18a:	e8 1f 28 01 00       	call   f01209ae <rsttst>
		return 0;
f010e18f:	b8 00 00 00 00       	mov    $0x0,%eax
f010e194:	e9 e7 00 00 00       	jmp    f010e280 <syscall+0x449>
	case SYS_inctst:
		inctst();
f010e199:	e8 58 28 01 00       	call   f01209f6 <inctst>
		return 0;
f010e19e:	b8 00 00 00 00       	mov    $0x0,%eax
f010e1a3:	e9 d8 00 00 00       	jmp    f010e280 <syscall+0x449>
	case SYS_chktst:
		chktst(a1);
f010e1a8:	83 ec 0c             	sub    $0xc,%esp
f010e1ab:	ff 75 0c             	pushl  0xc(%ebp)
f010e1ae:	e8 85 29 01 00       	call   f0120b38 <chktst>
f010e1b3:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e1b6:	b8 00 00 00 00       	mov    $0x0,%eax
f010e1bb:	e9 c0 00 00 00       	jmp    f010e280 <syscall+0x449>
	case SYS_gettst:
		return gettst();
f010e1c0:	e8 65 28 01 00       	call   f0120a2a <gettst>
f010e1c5:	e9 b6 00 00 00       	jmp    f010e280 <syscall+0x449>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010e1ca:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010e1cd:	8b 45 18             	mov    0x18(%ebp),%eax
f010e1d0:	0f be c0             	movsbl %al,%eax
f010e1d3:	83 ec 0c             	sub    $0xc,%esp
f010e1d6:	52                   	push   %edx
f010e1d7:	50                   	push   %eax
f010e1d8:	ff 75 14             	pushl  0x14(%ebp)
f010e1db:	ff 75 10             	pushl  0x10(%ebp)
f010e1de:	ff 75 0c             	pushl  0xc(%ebp)
f010e1e1:	e8 4e 28 01 00       	call   f0120a34 <tst>
f010e1e6:	83 c4 20             	add    $0x20,%esp
		return 0;
f010e1e9:	b8 00 00 00 00       	mov    $0x0,%eax
f010e1ee:	e9 8d 00 00 00       	jmp    f010e280 <syscall+0x449>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010e1f3:	e8 f1 f9 ff ff       	call   f010dbe9 <sys_get_heap_strategy>
f010e1f8:	e9 83 00 00 00       	jmp    f010e280 <syscall+0x449>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010e1fd:	83 ec 0c             	sub    $0xc,%esp
f010e200:	ff 75 0c             	pushl  0xc(%ebp)
f010e203:	e8 eb f9 ff ff       	call   f010dbf3 <sys_set_uheap_strategy>
f010e208:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e20b:	b8 00 00 00 00       	mov    $0x0,%eax
f010e210:	eb 6e                	jmp    f010e280 <syscall+0x449>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010e212:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010e215:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010e218:	8b 55 10             	mov    0x10(%ebp),%edx
f010e21b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e21e:	53                   	push   %ebx
f010e21f:	51                   	push   %ecx
f010e220:	52                   	push   %edx
f010e221:	50                   	push   %eax
f010e222:	e8 9e 4c 00 00       	call   f0112ec5 <sys_check_LRU_lists>
f010e227:	83 c4 10             	add    $0x10,%esp
f010e22a:	eb 54                	jmp    f010e280 <syscall+0x449>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010e22c:	8b 55 10             	mov    0x10(%ebp),%edx
f010e22f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e232:	83 ec 08             	sub    $0x8,%esp
f010e235:	52                   	push   %edx
f010e236:	50                   	push   %eax
f010e237:	e8 4b 4e 00 00       	call   f0113087 <sys_check_LRU_lists_free>
f010e23c:	83 c4 10             	add    $0x10,%esp
f010e23f:	eb 3f                	jmp    f010e280 <syscall+0x449>

	case SYS_check_WS_list:
		return sys_check_WS_list((uint32*)a1, (int)a2, (uint32)a3, (bool)a4);
f010e241:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010e244:	8b 55 10             	mov    0x10(%ebp),%edx
f010e247:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e24a:	51                   	push   %ecx
f010e24b:	ff 75 14             	pushl  0x14(%ebp)
f010e24e:	52                   	push   %edx
f010e24f:	50                   	push   %eax
f010e250:	e8 bf 4f 00 00       	call   f0113214 <sys_check_WS_list>
f010e255:	83 c4 10             	add    $0x10,%esp
f010e258:	eb 26                	jmp    f010e280 <syscall+0x449>

	case SYS_utilities:
		sys_utilities((char*)a1, (int)a2);
f010e25a:	8b 55 10             	mov    0x10(%ebp),%edx
f010e25d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e260:	83 ec 08             	sub    $0x8,%esp
f010e263:	52                   	push   %edx
f010e264:	50                   	push   %eax
f010e265:	e8 cf 2a 01 00       	call   f0120d39 <sys_utilities>
f010e26a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e26d:	b8 00 00 00 00       	mov    $0x0,%eax
f010e272:	eb 0c                	jmp    f010e280 <syscall+0x449>

	case NSYSCALLS:
		return 	-E_INVAL;
f010e274:	b8 03 00 00 00       	mov    $0x3,%eax
f010e279:	eb 05                	jmp    f010e280 <syscall+0x449>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010e27b:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010e280:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010e283:	5b                   	pop    %ebx
f010e284:	5e                   	pop    %esi
f010e285:	5d                   	pop    %ebp
f010e286:	c3                   	ret    

f010e287 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010e287:	55                   	push   %ebp
f010e288:	89 e5                	mov    %esp,%ebp
f010e28a:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010e28d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e290:	8b 00                	mov    (%eax),%eax
f010e292:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010e295:	8b 45 10             	mov    0x10(%ebp),%eax
f010e298:	8b 00                	mov    (%eax),%eax
f010e29a:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010e29d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010e2a4:	e9 ca 00 00 00       	jmp    f010e373 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010e2a9:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010e2ac:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010e2af:	01 d0                	add    %edx,%eax
f010e2b1:	89 c2                	mov    %eax,%edx
f010e2b3:	c1 ea 1f             	shr    $0x1f,%edx
f010e2b6:	01 d0                	add    %edx,%eax
f010e2b8:	d1 f8                	sar    %eax
f010e2ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010e2bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e2c0:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010e2c3:	eb 03                	jmp    f010e2c8 <stab_binsearch+0x41>
			m--;
f010e2c5:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010e2c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e2cb:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010e2ce:	7c 1e                	jl     f010e2ee <stab_binsearch+0x67>
f010e2d0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e2d3:	89 d0                	mov    %edx,%eax
f010e2d5:	01 c0                	add    %eax,%eax
f010e2d7:	01 d0                	add    %edx,%eax
f010e2d9:	c1 e0 02             	shl    $0x2,%eax
f010e2dc:	89 c2                	mov    %eax,%edx
f010e2de:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2e1:	01 d0                	add    %edx,%eax
f010e2e3:	8a 40 04             	mov    0x4(%eax),%al
f010e2e6:	0f b6 c0             	movzbl %al,%eax
f010e2e9:	3b 45 14             	cmp    0x14(%ebp),%eax
f010e2ec:	75 d7                	jne    f010e2c5 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010e2ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e2f1:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010e2f4:	7d 09                	jge    f010e2ff <stab_binsearch+0x78>
			l = true_m + 1;
f010e2f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e2f9:	40                   	inc    %eax
f010e2fa:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010e2fd:	eb 74                	jmp    f010e373 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010e2ff:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010e306:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e309:	89 d0                	mov    %edx,%eax
f010e30b:	01 c0                	add    %eax,%eax
f010e30d:	01 d0                	add    %edx,%eax
f010e30f:	c1 e0 02             	shl    $0x2,%eax
f010e312:	89 c2                	mov    %eax,%edx
f010e314:	8b 45 08             	mov    0x8(%ebp),%eax
f010e317:	01 d0                	add    %edx,%eax
f010e319:	8b 40 08             	mov    0x8(%eax),%eax
f010e31c:	3b 45 18             	cmp    0x18(%ebp),%eax
f010e31f:	73 11                	jae    f010e332 <stab_binsearch+0xab>
			*region_left = m;
f010e321:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e324:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e327:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010e329:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e32c:	40                   	inc    %eax
f010e32d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010e330:	eb 41                	jmp    f010e373 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010e332:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e335:	89 d0                	mov    %edx,%eax
f010e337:	01 c0                	add    %eax,%eax
f010e339:	01 d0                	add    %edx,%eax
f010e33b:	c1 e0 02             	shl    $0x2,%eax
f010e33e:	89 c2                	mov    %eax,%edx
f010e340:	8b 45 08             	mov    0x8(%ebp),%eax
f010e343:	01 d0                	add    %edx,%eax
f010e345:	8b 40 08             	mov    0x8(%eax),%eax
f010e348:	3b 45 18             	cmp    0x18(%ebp),%eax
f010e34b:	76 14                	jbe    f010e361 <stab_binsearch+0xda>
			*region_right = m - 1;
f010e34d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e350:	8d 50 ff             	lea    -0x1(%eax),%edx
f010e353:	8b 45 10             	mov    0x10(%ebp),%eax
f010e356:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010e358:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e35b:	48                   	dec    %eax
f010e35c:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010e35f:	eb 12                	jmp    f010e373 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010e361:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e364:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e367:	89 10                	mov    %edx,(%eax)
			l = m;
f010e369:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e36c:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010e36f:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010e373:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010e376:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010e379:	0f 8e 2a ff ff ff    	jle    f010e2a9 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010e37f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e383:	75 0f                	jne    f010e394 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010e385:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e388:	8b 00                	mov    (%eax),%eax
f010e38a:	8d 50 ff             	lea    -0x1(%eax),%edx
f010e38d:	8b 45 10             	mov    0x10(%ebp),%eax
f010e390:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010e392:	eb 3d                	jmp    f010e3d1 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010e394:	8b 45 10             	mov    0x10(%ebp),%eax
f010e397:	8b 00                	mov    (%eax),%eax
f010e399:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010e39c:	eb 03                	jmp    f010e3a1 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010e39e:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010e3a1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3a4:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010e3a6:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010e3a9:	7d 1e                	jge    f010e3c9 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010e3ab:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010e3ae:	89 d0                	mov    %edx,%eax
f010e3b0:	01 c0                	add    %eax,%eax
f010e3b2:	01 d0                	add    %edx,%eax
f010e3b4:	c1 e0 02             	shl    $0x2,%eax
f010e3b7:	89 c2                	mov    %eax,%edx
f010e3b9:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3bc:	01 d0                	add    %edx,%eax
f010e3be:	8a 40 04             	mov    0x4(%eax),%al
f010e3c1:	0f b6 c0             	movzbl %al,%eax
f010e3c4:	3b 45 14             	cmp    0x14(%ebp),%eax
f010e3c7:	75 d5                	jne    f010e39e <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010e3c9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3cc:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010e3cf:	89 10                	mov    %edx,(%eax)
	}
}
f010e3d1:	90                   	nop
f010e3d2:	c9                   	leave  
f010e3d3:	c3                   	ret    

f010e3d4 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010e3d4:	55                   	push   %ebp
f010e3d5:	89 e5                	mov    %esp,%ebp
f010e3d7:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010e3da:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3dd:	c7 00 dc 93 12 f0    	movl   $0xf01293dc,(%eax)
	info->eip_line = 0;
f010e3e3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3e6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010e3ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3f0:	c7 40 08 dc 93 12 f0 	movl   $0xf01293dc,0x8(%eax)
	info->eip_fn_namelen = 9;
f010e3f7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3fa:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010e401:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e404:	8b 55 08             	mov    0x8(%ebp),%edx
f010e407:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010e40a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e40d:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010e414:	8b 45 08             	mov    0x8(%ebp),%eax
f010e417:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010e41c:	76 1e                	jbe    f010e43c <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010e41e:	c7 45 f4 04 07 13 f0 	movl   $0xf0130704,-0xc(%ebp)
		stab_end = __STAB_END__;
f010e425:	c7 45 f0 1c 46 16 f0 	movl   $0xf016461c,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010e42c:	c7 45 ec 1d 46 16 f0 	movl   $0xf016461d,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010e433:	c7 45 e8 7f 5e 17 f0 	movl   $0xf0175e7f,-0x18(%ebp)
f010e43a:	eb 2a                	jmp    f010e466 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010e43c:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010e443:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e446:	8b 00                	mov    (%eax),%eax
f010e448:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010e44b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e44e:	8b 40 04             	mov    0x4(%eax),%eax
f010e451:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010e454:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e457:	8b 40 08             	mov    0x8(%eax),%eax
f010e45a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010e45d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e460:	8b 40 0c             	mov    0xc(%eax),%eax
f010e463:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010e466:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e469:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e46c:	76 0a                	jbe    f010e478 <debuginfo_eip+0xa4>
f010e46e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e471:	48                   	dec    %eax
f010e472:	8a 00                	mov    (%eax),%al
f010e474:	84 c0                	test   %al,%al
f010e476:	74 0a                	je     f010e482 <debuginfo_eip+0xae>
		return -1;
f010e478:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010e47d:	e9 01 02 00 00       	jmp    f010e683 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010e482:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010e489:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e48c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e48f:	29 c2                	sub    %eax,%edx
f010e491:	89 d0                	mov    %edx,%eax
f010e493:	c1 f8 02             	sar    $0x2,%eax
f010e496:	89 c2                	mov    %eax,%edx
f010e498:	89 d0                	mov    %edx,%eax
f010e49a:	c1 e0 02             	shl    $0x2,%eax
f010e49d:	01 d0                	add    %edx,%eax
f010e49f:	c1 e0 02             	shl    $0x2,%eax
f010e4a2:	01 d0                	add    %edx,%eax
f010e4a4:	c1 e0 02             	shl    $0x2,%eax
f010e4a7:	01 d0                	add    %edx,%eax
f010e4a9:	89 c1                	mov    %eax,%ecx
f010e4ab:	c1 e1 08             	shl    $0x8,%ecx
f010e4ae:	01 c8                	add    %ecx,%eax
f010e4b0:	89 c1                	mov    %eax,%ecx
f010e4b2:	c1 e1 10             	shl    $0x10,%ecx
f010e4b5:	01 c8                	add    %ecx,%eax
f010e4b7:	01 c0                	add    %eax,%eax
f010e4b9:	01 d0                	add    %edx,%eax
f010e4bb:	48                   	dec    %eax
f010e4bc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010e4bf:	ff 75 08             	pushl  0x8(%ebp)
f010e4c2:	6a 64                	push   $0x64
f010e4c4:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010e4c7:	50                   	push   %eax
f010e4c8:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e4cb:	50                   	push   %eax
f010e4cc:	ff 75 f4             	pushl  -0xc(%ebp)
f010e4cf:	e8 b3 fd ff ff       	call   f010e287 <stab_binsearch>
f010e4d4:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010e4d7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e4da:	85 c0                	test   %eax,%eax
f010e4dc:	75 0a                	jne    f010e4e8 <debuginfo_eip+0x114>
		return -1;
f010e4de:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010e4e3:	e9 9b 01 00 00       	jmp    f010e683 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010e4e8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e4eb:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010e4ee:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e4f1:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010e4f4:	ff 75 08             	pushl  0x8(%ebp)
f010e4f7:	6a 24                	push   $0x24
f010e4f9:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010e4fc:	50                   	push   %eax
f010e4fd:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010e500:	50                   	push   %eax
f010e501:	ff 75 f4             	pushl  -0xc(%ebp)
f010e504:	e8 7e fd ff ff       	call   f010e287 <stab_binsearch>
f010e509:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010e50c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010e50f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e512:	39 c2                	cmp    %eax,%edx
f010e514:	0f 8f 86 00 00 00    	jg     f010e5a0 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010e51a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e51d:	89 c2                	mov    %eax,%edx
f010e51f:	89 d0                	mov    %edx,%eax
f010e521:	01 c0                	add    %eax,%eax
f010e523:	01 d0                	add    %edx,%eax
f010e525:	c1 e0 02             	shl    $0x2,%eax
f010e528:	89 c2                	mov    %eax,%edx
f010e52a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e52d:	01 d0                	add    %edx,%eax
f010e52f:	8b 00                	mov    (%eax),%eax
f010e531:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010e534:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e537:	29 d1                	sub    %edx,%ecx
f010e539:	89 ca                	mov    %ecx,%edx
f010e53b:	39 d0                	cmp    %edx,%eax
f010e53d:	73 22                	jae    f010e561 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010e53f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e542:	89 c2                	mov    %eax,%edx
f010e544:	89 d0                	mov    %edx,%eax
f010e546:	01 c0                	add    %eax,%eax
f010e548:	01 d0                	add    %edx,%eax
f010e54a:	c1 e0 02             	shl    $0x2,%eax
f010e54d:	89 c2                	mov    %eax,%edx
f010e54f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e552:	01 d0                	add    %edx,%eax
f010e554:	8b 10                	mov    (%eax),%edx
f010e556:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e559:	01 c2                	add    %eax,%edx
f010e55b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e55e:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010e561:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e564:	89 c2                	mov    %eax,%edx
f010e566:	89 d0                	mov    %edx,%eax
f010e568:	01 c0                	add    %eax,%eax
f010e56a:	01 d0                	add    %edx,%eax
f010e56c:	c1 e0 02             	shl    $0x2,%eax
f010e56f:	89 c2                	mov    %eax,%edx
f010e571:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e574:	01 d0                	add    %edx,%eax
f010e576:	8b 50 08             	mov    0x8(%eax),%edx
f010e579:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e57c:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010e57f:	8b 55 08             	mov    0x8(%ebp),%edx
f010e582:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e585:	8b 40 10             	mov    0x10(%eax),%eax
f010e588:	29 c2                	sub    %eax,%edx
f010e58a:	89 d0                	mov    %edx,%eax
f010e58c:	c1 f8 02             	sar    $0x2,%eax
f010e58f:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010e592:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e595:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010e598:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e59b:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010e59e:	eb 15                	jmp    f010e5b5 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010e5a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e5a3:	8b 55 08             	mov    0x8(%ebp),%edx
f010e5a6:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010e5a9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e5ac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010e5af:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e5b2:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010e5b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e5b8:	8b 40 08             	mov    0x8(%eax),%eax
f010e5bb:	83 ec 08             	sub    $0x8,%esp
f010e5be:	6a 3a                	push   $0x3a
f010e5c0:	50                   	push   %eax
f010e5c1:	e8 3a 41 01 00       	call   f0122700 <strfind>
f010e5c6:	83 c4 10             	add    $0x10,%esp
f010e5c9:	89 c2                	mov    %eax,%edx
f010e5cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e5ce:	8b 40 08             	mov    0x8(%eax),%eax
f010e5d1:	29 c2                	sub    %eax,%edx
f010e5d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e5d6:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010e5d9:	eb 03                	jmp    f010e5de <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010e5db:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010e5de:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e5e1:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010e5e4:	7c 4e                	jl     f010e634 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010e5e6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e5e9:	89 d0                	mov    %edx,%eax
f010e5eb:	01 c0                	add    %eax,%eax
f010e5ed:	01 d0                	add    %edx,%eax
f010e5ef:	c1 e0 02             	shl    $0x2,%eax
f010e5f2:	89 c2                	mov    %eax,%edx
f010e5f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e5f7:	01 d0                	add    %edx,%eax
f010e5f9:	8a 40 04             	mov    0x4(%eax),%al
f010e5fc:	3c 84                	cmp    $0x84,%al
f010e5fe:	74 34                	je     f010e634 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010e600:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e603:	89 d0                	mov    %edx,%eax
f010e605:	01 c0                	add    %eax,%eax
f010e607:	01 d0                	add    %edx,%eax
f010e609:	c1 e0 02             	shl    $0x2,%eax
f010e60c:	89 c2                	mov    %eax,%edx
f010e60e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e611:	01 d0                	add    %edx,%eax
f010e613:	8a 40 04             	mov    0x4(%eax),%al
f010e616:	3c 64                	cmp    $0x64,%al
f010e618:	75 c1                	jne    f010e5db <debuginfo_eip+0x207>
f010e61a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e61d:	89 d0                	mov    %edx,%eax
f010e61f:	01 c0                	add    %eax,%eax
f010e621:	01 d0                	add    %edx,%eax
f010e623:	c1 e0 02             	shl    $0x2,%eax
f010e626:	89 c2                	mov    %eax,%edx
f010e628:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e62b:	01 d0                	add    %edx,%eax
f010e62d:	8b 40 08             	mov    0x8(%eax),%eax
f010e630:	85 c0                	test   %eax,%eax
f010e632:	74 a7                	je     f010e5db <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010e634:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e637:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010e63a:	7c 42                	jl     f010e67e <debuginfo_eip+0x2aa>
f010e63c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e63f:	89 d0                	mov    %edx,%eax
f010e641:	01 c0                	add    %eax,%eax
f010e643:	01 d0                	add    %edx,%eax
f010e645:	c1 e0 02             	shl    $0x2,%eax
f010e648:	89 c2                	mov    %eax,%edx
f010e64a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e64d:	01 d0                	add    %edx,%eax
f010e64f:	8b 00                	mov    (%eax),%eax
f010e651:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010e654:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e657:	29 d1                	sub    %edx,%ecx
f010e659:	89 ca                	mov    %ecx,%edx
f010e65b:	39 d0                	cmp    %edx,%eax
f010e65d:	73 1f                	jae    f010e67e <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010e65f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e662:	89 d0                	mov    %edx,%eax
f010e664:	01 c0                	add    %eax,%eax
f010e666:	01 d0                	add    %edx,%eax
f010e668:	c1 e0 02             	shl    $0x2,%eax
f010e66b:	89 c2                	mov    %eax,%edx
f010e66d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e670:	01 d0                	add    %edx,%eax
f010e672:	8b 10                	mov    (%eax),%edx
f010e674:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e677:	01 c2                	add    %eax,%edx
f010e679:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e67c:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010e67e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e683:	c9                   	leave  
f010e684:	c3                   	ret    

f010e685 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010e685:	55                   	push   %ebp
f010e686:	89 e5                	mov    %esp,%ebp
f010e688:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010e68b:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010e68f:	74 1c                	je     f010e6ad <setPageReplacmentAlgorithmLRU+0x28>
f010e691:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e695:	74 16                	je     f010e6ad <setPageReplacmentAlgorithmLRU+0x28>
f010e697:	68 e8 93 12 f0       	push   $0xf01293e8
f010e69c:	68 32 94 12 f0       	push   $0xf0129432
f010e6a1:	6a 19                	push   $0x19
f010e6a3:	68 47 94 12 f0       	push   $0xf0129447
f010e6a8:	e8 6d 1c ff ff       	call   f010031a <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010e6ad:	8b 45 08             	mov    0x8(%ebp),%eax
f010e6b0:	a3 08 2b 5a f0       	mov    %eax,0xf05a2b08
}
f010e6b5:	90                   	nop
f010e6b6:	c9                   	leave  
f010e6b7:	c3                   	ret    

f010e6b8 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010e6b8:	55                   	push   %ebp
f010e6b9:	89 e5                	mov    %esp,%ebp
f010e6bb:	c7 05 08 2b 5a f0 03 	movl   $0x3,0xf05a2b08
f010e6c2:	00 00 00 
f010e6c5:	90                   	nop
f010e6c6:	5d                   	pop    %ebp
f010e6c7:	c3                   	ret    

f010e6c8 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010e6c8:	55                   	push   %ebp
f010e6c9:	89 e5                	mov    %esp,%ebp
f010e6cb:	c7 05 08 2b 5a f0 04 	movl   $0x4,0xf05a2b08
f010e6d2:	00 00 00 
f010e6d5:	90                   	nop
f010e6d6:	5d                   	pop    %ebp
f010e6d7:	c3                   	ret    

f010e6d8 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010e6d8:	55                   	push   %ebp
f010e6d9:	89 e5                	mov    %esp,%ebp
f010e6db:	c7 05 08 2b 5a f0 05 	movl   $0x5,0xf05a2b08
f010e6e2:	00 00 00 
f010e6e5:	90                   	nop
f010e6e6:	5d                   	pop    %ebp
f010e6e7:	c3                   	ret    

f010e6e8 <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010e6e8:	55                   	push   %ebp
f010e6e9:	89 e5                	mov    %esp,%ebp
f010e6eb:	c7 05 08 2b 5a f0 07 	movl   $0x7,0xf05a2b08
f010e6f2:	00 00 00 
f010e6f5:	90                   	nop
f010e6f6:	5d                   	pop    %ebp
f010e6f7:	c3                   	ret    

f010e6f8 <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010e6f8:	55                   	push   %ebp
f010e6f9:	89 e5                	mov    %esp,%ebp
f010e6fb:	c7 05 08 2b 5a f0 06 	movl   $0x6,0xf05a2b08
f010e702:	00 00 00 
f010e705:	8b 45 08             	mov    0x8(%ebp),%eax
f010e708:	a3 a0 fe 59 f0       	mov    %eax,0xf059fea0
f010e70d:	90                   	nop
f010e70e:	5d                   	pop    %ebp
f010e70f:	c3                   	ret    

f010e710 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010e710:	55                   	push   %ebp
f010e711:	89 e5                	mov    %esp,%ebp
f010e713:	8b 15 08 2b 5a f0    	mov    0xf05a2b08,%edx
f010e719:	8b 45 08             	mov    0x8(%ebp),%eax
f010e71c:	39 c2                	cmp    %eax,%edx
f010e71e:	0f 94 c0             	sete   %al
f010e721:	0f b6 c0             	movzbl %al,%eax
f010e724:	5d                   	pop    %ebp
f010e725:	c3                   	ret    

f010e726 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010e726:	55                   	push   %ebp
f010e727:	89 e5                	mov    %esp,%ebp
f010e729:	a1 08 2b 5a f0       	mov    0xf05a2b08,%eax
f010e72e:	83 f8 03             	cmp    $0x3,%eax
f010e731:	75 07                	jne    f010e73a <isPageReplacmentAlgorithmCLOCK+0x14>
f010e733:	b8 01 00 00 00       	mov    $0x1,%eax
f010e738:	eb 05                	jmp    f010e73f <isPageReplacmentAlgorithmCLOCK+0x19>
f010e73a:	b8 00 00 00 00       	mov    $0x0,%eax
f010e73f:	5d                   	pop    %ebp
f010e740:	c3                   	ret    

f010e741 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010e741:	55                   	push   %ebp
f010e742:	89 e5                	mov    %esp,%ebp
f010e744:	a1 08 2b 5a f0       	mov    0xf05a2b08,%eax
f010e749:	83 f8 04             	cmp    $0x4,%eax
f010e74c:	75 07                	jne    f010e755 <isPageReplacmentAlgorithmFIFO+0x14>
f010e74e:	b8 01 00 00 00       	mov    $0x1,%eax
f010e753:	eb 05                	jmp    f010e75a <isPageReplacmentAlgorithmFIFO+0x19>
f010e755:	b8 00 00 00 00       	mov    $0x0,%eax
f010e75a:	5d                   	pop    %ebp
f010e75b:	c3                   	ret    

f010e75c <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010e75c:	55                   	push   %ebp
f010e75d:	89 e5                	mov    %esp,%ebp
f010e75f:	a1 08 2b 5a f0       	mov    0xf05a2b08,%eax
f010e764:	83 f8 05             	cmp    $0x5,%eax
f010e767:	75 07                	jne    f010e770 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010e769:	b8 01 00 00 00       	mov    $0x1,%eax
f010e76e:	eb 05                	jmp    f010e775 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010e770:	b8 00 00 00 00       	mov    $0x0,%eax
f010e775:	5d                   	pop    %ebp
f010e776:	c3                   	ret    

f010e777 <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010e777:	55                   	push   %ebp
f010e778:	89 e5                	mov    %esp,%ebp
f010e77a:	a1 08 2b 5a f0       	mov    0xf05a2b08,%eax
f010e77f:	83 f8 07             	cmp    $0x7,%eax
f010e782:	75 07                	jne    f010e78b <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010e784:	b8 01 00 00 00       	mov    $0x1,%eax
f010e789:	eb 05                	jmp    f010e790 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010e78b:	b8 00 00 00 00       	mov    $0x0,%eax
f010e790:	5d                   	pop    %ebp
f010e791:	c3                   	ret    

f010e792 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010e792:	55                   	push   %ebp
f010e793:	89 e5                	mov    %esp,%ebp
f010e795:	a1 08 2b 5a f0       	mov    0xf05a2b08,%eax
f010e79a:	83 f8 06             	cmp    $0x6,%eax
f010e79d:	75 07                	jne    f010e7a6 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010e79f:	b8 01 00 00 00       	mov    $0x1,%eax
f010e7a4:	eb 05                	jmp    f010e7ab <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010e7a6:	b8 00 00 00 00       	mov    $0x0,%eax
f010e7ab:	5d                   	pop    %ebp
f010e7ac:	c3                   	ret    

f010e7ad <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010e7ad:	55                   	push   %ebp
f010e7ae:	89 e5                	mov    %esp,%ebp
f010e7b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010e7b3:	a3 b8 28 5a f0       	mov    %eax,0xf05a28b8
f010e7b8:	90                   	nop
f010e7b9:	5d                   	pop    %ebp
f010e7ba:	c3                   	ret    

f010e7bb <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010e7bb:	55                   	push   %ebp
f010e7bc:	89 e5                	mov    %esp,%ebp
f010e7be:	a1 b8 28 5a f0       	mov    0xf05a28b8,%eax
f010e7c3:	5d                   	pop    %ebp
f010e7c4:	c3                   	ret    

f010e7c5 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010e7c5:	55                   	push   %ebp
f010e7c6:	89 e5                	mov    %esp,%ebp
f010e7c8:	8b 45 08             	mov    0x8(%ebp),%eax
f010e7cb:	a3 74 2b 5a f0       	mov    %eax,0xf05a2b74
f010e7d0:	90                   	nop
f010e7d1:	5d                   	pop    %ebp
f010e7d2:	c3                   	ret    

f010e7d3 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010e7d3:	55                   	push   %ebp
f010e7d4:	89 e5                	mov    %esp,%ebp
f010e7d6:	a1 74 2b 5a f0       	mov    0xf05a2b74,%eax
f010e7db:	5d                   	pop    %ebp
f010e7dc:	c3                   	ret    

f010e7dd <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010e7dd:	55                   	push   %ebp
f010e7de:	89 e5                	mov    %esp,%ebp
f010e7e0:	8b 45 08             	mov    0x8(%ebp),%eax
f010e7e3:	a3 10 2c 5a f0       	mov    %eax,0xf05a2c10
f010e7e8:	90                   	nop
f010e7e9:	5d                   	pop    %ebp
f010e7ea:	c3                   	ret    

f010e7eb <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010e7eb:	55                   	push   %ebp
f010e7ec:	89 e5                	mov    %esp,%ebp
f010e7ee:	a1 10 2c 5a f0       	mov    0xf05a2c10,%eax
f010e7f3:	5d                   	pop    %ebp
f010e7f4:	c3                   	ret    

f010e7f5 <fault_handler>:
uint32 before_last_fault_va = 0;
int8 num_repeated_fault  = 0;

struct Env* last_faulted_env = NULL;
void fault_handler(struct Trapframe *tf)
{
f010e7f5:	55                   	push   %ebp
f010e7f6:	89 e5                	mov    %esp,%ebp
f010e7f8:	83 ec 28             	sub    $0x28,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010e7fb:	0f 20 d0             	mov    %cr2,%eax
f010e7fe:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f010e801:	8b 45 d8             	mov    -0x28(%ebp),%eax
	/******************************************************/
	// Read processor's CR2 register to find the faulting address
	uint32 fault_va = rcr2();
f010e804:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//	print_trapframe(tf);
	/******************************************************/

	//If same fault va for 3 times, then panic
	//UPDATE: 3 FAULTS MUST come from the same environment (or the kernel)
	struct Env* cur_env = get_cpu_proc();
f010e807:	e8 64 bf ff ff       	call   f010a770 <get_cpu_proc>
f010e80c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (last_fault_va == fault_va && last_faulted_env == cur_env)
f010e80f:	a1 2c fc 59 f0       	mov    0xf059fc2c,%eax
f010e814:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e817:	75 50                	jne    f010e869 <fault_handler+0x74>
f010e819:	a1 38 fc 59 f0       	mov    0xf059fc38,%eax
f010e81e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010e821:	75 46                	jne    f010e869 <fault_handler+0x74>
	{
		num_repeated_fault++ ;
f010e823:	a0 34 fc 59 f0       	mov    0xf059fc34,%al
f010e828:	40                   	inc    %eax
f010e829:	a2 34 fc 59 f0       	mov    %al,0xf059fc34
		if (num_repeated_fault == 3)
f010e82e:	a0 34 fc 59 f0       	mov    0xf059fc34,%al
f010e833:	3c 03                	cmp    $0x3,%al
f010e835:	75 4d                	jne    f010e884 <fault_handler+0x8f>
		{
			print_trapframe(tf);
f010e837:	83 ec 0c             	sub    $0xc,%esp
f010e83a:	ff 75 08             	pushl  0x8(%ebp)
f010e83d:	e8 73 e9 ff ff       	call   f010d1b5 <print_trapframe>
f010e842:	83 c4 10             	add    $0x10,%esp
			panic("Failed to handle fault! fault @ at va = %x from eip = %x causes va (%x) to be faulted for 3 successive times\n", before_last_fault_va, before_last_eip, fault_va);
f010e845:	8b 15 28 fc 59 f0    	mov    0xf059fc28,%edx
f010e84b:	a1 30 fc 59 f0       	mov    0xf059fc30,%eax
f010e850:	83 ec 08             	sub    $0x8,%esp
f010e853:	ff 75 ec             	pushl  -0x14(%ebp)
f010e856:	52                   	push   %edx
f010e857:	50                   	push   %eax
f010e858:	68 64 94 12 f0       	push   $0xf0129464
f010e85d:	6a 57                	push   $0x57
f010e85f:	68 47 94 12 f0       	push   $0xf0129447
f010e864:	e8 b1 1a ff ff       	call   f010031a <_panic>
		}
	}
	else
	{
		before_last_fault_va = last_fault_va;
f010e869:	a1 2c fc 59 f0       	mov    0xf059fc2c,%eax
f010e86e:	a3 30 fc 59 f0       	mov    %eax,0xf059fc30
		before_last_eip = last_eip;
f010e873:	a1 24 fc 59 f0       	mov    0xf059fc24,%eax
f010e878:	a3 28 fc 59 f0       	mov    %eax,0xf059fc28
		num_repeated_fault = 0;
f010e87d:	c6 05 34 fc 59 f0 00 	movb   $0x0,0xf059fc34
	}
	last_eip = (uint32)tf->tf_eip;
f010e884:	8b 45 08             	mov    0x8(%ebp),%eax
f010e887:	8b 40 30             	mov    0x30(%eax),%eax
f010e88a:	a3 24 fc 59 f0       	mov    %eax,0xf059fc24
	last_fault_va = fault_va ;
f010e88f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e892:	a3 2c fc 59 f0       	mov    %eax,0xf059fc2c
	last_faulted_env = cur_env;
f010e897:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e89a:	a3 38 fc 59 f0       	mov    %eax,0xf059fc38
	/******************************************************/
	//2017: Check stack overflow for Kernel
	int userTrap = 0;
f010e89f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010e8a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010e8a9:	8b 40 34             	mov    0x34(%eax),%eax
f010e8ac:	0f b7 c0             	movzwl %ax,%eax
f010e8af:	83 e0 03             	and    $0x3,%eax
f010e8b2:	83 f8 03             	cmp    $0x3,%eax
f010e8b5:	75 07                	jne    f010e8be <fault_handler+0xc9>
		userTrap = 1;
f010e8b7:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	}
	if (!userTrap)
f010e8be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e8c2:	0f 85 a9 00 00 00    	jne    f010e971 <fault_handler+0x17c>
	{
		struct cpu* c = mycpu();
f010e8c8:	e8 30 88 ff ff       	call   f01070fd <mycpu>
f010e8cd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		//cprintf("trap from KERNEL\n");
		if (cur_env && fault_va >= (uint32)cur_env->kstack && fault_va < (uint32)cur_env->kstack + PAGE_SIZE)
f010e8d0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010e8d4:	74 2f                	je     f010e905 <fault_handler+0x110>
f010e8d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e8d9:	8b 40 70             	mov    0x70(%eax),%eax
f010e8dc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e8df:	77 24                	ja     f010e905 <fault_handler+0x110>
f010e8e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e8e4:	8b 40 70             	mov    0x70(%eax),%eax
f010e8e7:	05 00 10 00 00       	add    $0x1000,%eax
f010e8ec:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e8ef:	76 14                	jbe    f010e905 <fault_handler+0x110>
			panic("User Kernel Stack: overflow exception!");
f010e8f1:	83 ec 04             	sub    $0x4,%esp
f010e8f4:	68 d4 94 12 f0       	push   $0xf01294d4
f010e8f9:	6a 6e                	push   $0x6e
f010e8fb:	68 47 94 12 f0       	push   $0xf0129447
f010e900:	e8 15 1a ff ff       	call   f010031a <_panic>
		else if (fault_va >= (uint32)c->stack && fault_va < (uint32)c->stack + PAGE_SIZE)
f010e905:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e908:	8b 40 08             	mov    0x8(%eax),%eax
f010e90b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e90e:	0f 87 83 00 00 00    	ja     f010e997 <fault_handler+0x1a2>
f010e914:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e917:	8b 40 08             	mov    0x8(%eax),%eax
f010e91a:	05 00 10 00 00       	add    $0x1000,%eax
f010e91f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e922:	76 73                	jbe    f010e997 <fault_handler+0x1a2>
			panic("Sched Kernel Stack of CPU #%d: overflow exception!", c - CPUS);
f010e924:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e927:	ba a0 25 5a f0       	mov    $0xf05a25a0,%edx
f010e92c:	29 d0                	sub    %edx,%eax
f010e92e:	c1 f8 03             	sar    $0x3,%eax
f010e931:	89 c2                	mov    %eax,%edx
f010e933:	89 d0                	mov    %edx,%eax
f010e935:	c1 e0 02             	shl    $0x2,%eax
f010e938:	01 d0                	add    %edx,%eax
f010e93a:	01 c0                	add    %eax,%eax
f010e93c:	01 d0                	add    %edx,%eax
f010e93e:	c1 e0 03             	shl    $0x3,%eax
f010e941:	01 d0                	add    %edx,%eax
f010e943:	89 c1                	mov    %eax,%ecx
f010e945:	c1 e1 0b             	shl    $0xb,%ecx
f010e948:	01 c8                	add    %ecx,%eax
f010e94a:	c1 e0 05             	shl    $0x5,%eax
f010e94d:	01 d0                	add    %edx,%eax
f010e94f:	c1 e0 02             	shl    $0x2,%eax
f010e952:	01 d0                	add    %edx,%eax
f010e954:	01 c0                	add    %eax,%eax
f010e956:	01 d0                	add    %edx,%eax
f010e958:	c1 e0 03             	shl    $0x3,%eax
f010e95b:	01 d0                	add    %edx,%eax
f010e95d:	f7 d8                	neg    %eax
f010e95f:	50                   	push   %eax
f010e960:	68 fc 94 12 f0       	push   $0xf01294fc
f010e965:	6a 70                	push   $0x70
f010e967:	68 47 94 12 f0       	push   $0xf0129447
f010e96c:	e8 a9 19 ff ff       	call   f010031a <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		//cprintf("trap from USER\n");
		if (fault_va >= USTACKTOP && fault_va < USER_TOP)
f010e971:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010e978:	76 1d                	jbe    f010e997 <fault_handler+0x1a2>
f010e97a:	81 7d ec ff ff bf ee 	cmpl   $0xeebfffff,-0x14(%ebp)
f010e981:	77 14                	ja     f010e997 <fault_handler+0x1a2>
			panic("User: stack underflow exception!");
f010e983:	83 ec 04             	sub    $0x4,%esp
f010e986:	68 30 95 12 f0       	push   $0xf0129530
f010e98b:	6a 7b                	push   $0x7b
f010e98d:	68 47 94 12 f0       	push   $0xf0129447
f010e992:	e8 83 19 ff ff       	call   f010031a <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	//cprintf("curenv = %x\n", curenv);
	struct Env* faulted_env = cur_env;
f010e997:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e99a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (faulted_env == NULL)
f010e99d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010e9a1:	75 25                	jne    f010e9c8 <fault_handler+0x1d3>
	{
		print_trapframe(tf);
f010e9a3:	83 ec 0c             	sub    $0xc,%esp
f010e9a6:	ff 75 08             	pushl  0x8(%ebp)
f010e9a9:	e8 07 e8 ff ff       	call   f010d1b5 <print_trapframe>
f010e9ae:	83 c4 10             	add    $0x10,%esp
		panic("faulted env == NULL!");
f010e9b1:	83 ec 04             	sub    $0x4,%esp
f010e9b4:	68 51 95 12 f0       	push   $0xf0129551
f010e9b9:	68 84 00 00 00       	push   $0x84
f010e9be:	68 47 94 12 f0       	push   $0xf0129447
f010e9c3:	e8 52 19 ff ff       	call   f010031a <_panic>
	}
	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010e9c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e9cb:	8b 40 64             	mov    0x64(%eax),%eax
f010e9ce:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e9d1:	c1 ea 16             	shr    $0x16,%edx
f010e9d4:	c1 e2 02             	shl    $0x2,%edx
f010e9d7:	01 d0                	add    %edx,%eax
f010e9d9:	8b 00                	mov    (%eax),%eax
f010e9db:	83 e0 01             	and    $0x1,%eax
f010e9de:	85 c0                	test   %eax,%eax
f010e9e0:	75 28                	jne    f010ea0a <fault_handler+0x215>
	{
		// we have a table fault =============================================================
		//		cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		//		print_trapframe(tf);

		faulted_env->tableFaultsCounter ++ ;
f010e9e2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e9e5:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f010e9eb:	8d 50 01             	lea    0x1(%eax),%edx
f010e9ee:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e9f1:	89 90 44 da 01 00    	mov    %edx,0x1da44(%eax)

		table_fault_handler(faulted_env, fault_va);
f010e9f7:	83 ec 08             	sub    $0x8,%esp
f010e9fa:	ff 75 ec             	pushl  -0x14(%ebp)
f010e9fd:	ff 75 e0             	pushl  -0x20(%ebp)
f010ea00:	e8 8f 00 00 00       	call   f010ea94 <table_fault_handler>
f010ea05:	83 c4 10             	add    $0x10,%esp
f010ea08:	eb 7b                	jmp    f010ea85 <fault_handler+0x290>

			/*============================================================================================*/
		}

		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010ea0a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ea0d:	8b 40 64             	mov    0x64(%eax),%eax
f010ea10:	83 ec 08             	sub    $0x8,%esp
f010ea13:	ff 75 ec             	pushl  -0x14(%ebp)
f010ea16:	50                   	push   %eax
f010ea17:	e8 d0 a1 ff ff       	call   f0108bec <pt_get_page_permissions>
f010ea1c:	83 c4 10             	add    $0x10,%esp
f010ea1f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if (perms & PERM_PRESENT)
f010ea22:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ea25:	83 e0 01             	and    $0x1,%eax
f010ea28:	85 c0                	test   %eax,%eax
f010ea2a:	74 17                	je     f010ea43 <fault_handler+0x24e>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010ea2c:	ff 75 ec             	pushl  -0x14(%ebp)
f010ea2f:	68 68 95 12 f0       	push   $0xf0129568
f010ea34:	68 a1 00 00 00       	push   $0xa1
f010ea39:	68 47 94 12 f0       	push   $0xf0129447
f010ea3e:	e8 d7 18 ff ff       	call   f010031a <_panic>
		/*============================================================================================*/


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010ea43:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ea46:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f010ea4c:	8d 50 01             	lea    0x1(%eax),%edx
f010ea4f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ea52:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)

		//		cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//		cprintf("\nPage working set BEFORE fault handler...\n");
		//		env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010ea58:	e8 76 fd ff ff       	call   f010e7d3 <isBufferingEnabled>
f010ea5d:	84 c0                	test   %al,%al
f010ea5f:	74 13                	je     f010ea74 <fault_handler+0x27f>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010ea61:	83 ec 08             	sub    $0x8,%esp
f010ea64:	ff 75 ec             	pushl  -0x14(%ebp)
f010ea67:	ff 75 e0             	pushl  -0x20(%ebp)
f010ea6a:	e8 64 00 00 00       	call   f010ead3 <__page_fault_handler_with_buffering>
f010ea6f:	83 c4 10             	add    $0x10,%esp
f010ea72:	eb 11                	jmp    f010ea85 <fault_handler+0x290>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010ea74:	83 ec 08             	sub    $0x8,%esp
f010ea77:	ff 75 ec             	pushl  -0x14(%ebp)
f010ea7a:	ff 75 e0             	pushl  -0x20(%ebp)
f010ea7d:	e8 34 00 00 00       	call   f010eab6 <page_fault_handler>
f010ea82:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010ea85:	0f 20 d8             	mov    %cr3,%eax
f010ea88:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010ea8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ea8e:	0f 22 d8             	mov    %eax,%cr3

	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/
}
f010ea91:	90                   	nop
f010ea92:	c9                   	leave  
f010ea93:	c3                   	ret    

f010ea94 <table_fault_handler>:

//=========================
// [2] TABLE FAULT HANDLER:
//=========================
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010ea94:	55                   	push   %ebp
f010ea95:	89 e5                	mov    %esp,%ebp
f010ea97:	83 ec 18             	sub    $0x18,%esp
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
	}
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
f010ea9a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ea9d:	8b 40 64             	mov    0x64(%eax),%eax
f010eaa0:	83 ec 04             	sub    $0x4,%esp
f010eaa3:	8d 55 f4             	lea    -0xc(%ebp),%edx
f010eaa6:	52                   	push   %edx
f010eaa7:	ff 75 0c             	pushl  0xc(%ebp)
f010eaaa:	50                   	push   %eax
f010eaab:	e8 83 9a ff ff       	call   f0108533 <__static_cpt>
f010eab0:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f010eab3:	90                   	nop
f010eab4:	c9                   	leave  
f010eab5:	c3                   	ret    

f010eab6 <page_fault_handler>:

//=========================
// [3] PAGE FAULT HANDLER:
//=========================
void page_fault_handler(struct Env * faulted_env, uint32 fault_va)
{
f010eab6:	55                   	push   %ebp
f010eab7:	89 e5                	mov    %esp,%ebp
f010eab9:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24] [3] PAGE FAULT HANDLER
	// Write your code here, remove the panic and write your code
	panic("page_fault_handler() is not implemented yet...!!");
f010eabc:	83 ec 04             	sub    $0x4,%esp
f010eabf:	68 ac 95 12 f0       	push   $0xf01295ac
f010eac4:	68 db 00 00 00       	push   $0xdb
f010eac9:	68 47 94 12 f0       	push   $0xf0129447
f010eace:	e8 47 18 ff ff       	call   f010031a <_panic>

f010ead3 <__page_fault_handler_with_buffering>:
		panic("page_fault_handler() Replacement is not implemented yet...!!");
	}
}

void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010ead3:	55                   	push   %ebp
f010ead4:	89 e5                	mov    %esp,%ebp
f010ead6:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] PAGE FAULT HANDLER WITH BUFFERING
	// your code is here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010ead9:	83 ec 04             	sub    $0x4,%esp
f010eadc:	68 e0 95 12 f0       	push   $0xf01295e0
f010eae1:	68 fc 00 00 00       	push   $0xfc
f010eae6:	68 47 94 12 f0       	push   $0xf0129447
f010eaeb:	e8 2a 18 ff ff       	call   f010031a <_panic>

f010eaf0 <init_spinlock>:
#include "spinlock.h"
#include "../cpu/cpu.h"
#include "../proc/user_environment.h"

void init_spinlock(struct spinlock *lk, char *name)
{
f010eaf0:	55                   	push   %ebp
f010eaf1:	89 e5                	mov    %esp,%ebp
f010eaf3:	83 ec 08             	sub    $0x8,%esp
	strcpy(lk->name, name);
f010eaf6:	8b 45 08             	mov    0x8(%ebp),%eax
f010eaf9:	83 c0 04             	add    $0x4,%eax
f010eafc:	83 ec 08             	sub    $0x8,%esp
f010eaff:	ff 75 0c             	pushl  0xc(%ebp)
f010eb02:	50                   	push   %eax
f010eb03:	e8 85 3a 01 00       	call   f012258d <strcpy>
f010eb08:	83 c4 10             	add    $0x10,%esp
	lk->locked = 0;
f010eb0b:	8b 45 08             	mov    0x8(%ebp),%eax
f010eb0e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	lk->cpu = 0;
f010eb14:	8b 45 08             	mov    0x8(%ebp),%eax
f010eb17:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
}
f010eb1e:	90                   	nop
f010eb1f:	c9                   	leave  
f010eb20:	c3                   	ret    

f010eb21 <acquire_spinlock>:
// Acquire the lock.
// Loops (spins) until the lock is acquired.
// Holding a lock for a long time may cause
// other CPUs to waste time spinning to acquire it.
void acquire_spinlock(struct spinlock *lk)
{
f010eb21:	55                   	push   %ebp
f010eb22:	89 e5                	mov    %esp,%ebp
f010eb24:	53                   	push   %ebx
f010eb25:	83 ec 14             	sub    $0x14,%esp
	if(holding_spinlock(lk))
f010eb28:	8b 45 08             	mov    0x8(%ebp),%eax
f010eb2b:	83 ec 0c             	sub    $0xc,%esp
f010eb2e:	50                   	push   %eax
f010eb2f:	e8 06 02 00 00       	call   f010ed3a <holding_spinlock>
f010eb34:	83 c4 10             	add    $0x10,%esp
f010eb37:	85 c0                	test   %eax,%eax
f010eb39:	74 18                	je     f010eb53 <acquire_spinlock+0x32>
		panic("acquire_spinlock: lock \"%s\" is already held by the same CPU.", lk->name);
f010eb3b:	8b 45 08             	mov    0x8(%ebp),%eax
f010eb3e:	83 c0 04             	add    $0x4,%eax
f010eb41:	50                   	push   %eax
f010eb42:	68 24 96 12 f0       	push   $0xf0129624
f010eb47:	6a 1f                	push   $0x1f
f010eb49:	68 61 96 12 f0       	push   $0xf0129661
f010eb4e:	e8 c7 17 ff ff       	call   f010031a <_panic>

	pushcli(); // disable interrupts to avoid deadlock (in case if interrupted from a higher priority (or event handler) just after holding the lock => the handler will stuck in busy-waiting and prevent the other from resuming)
f010eb53:	e8 68 86 ff ff       	call   f01071c0 <pushcli>

	//cprintf("\nAttempt to acquire SPIN lock [%s] by [%d]\n", lk->name, myproc() != NULL? myproc()->env_id : 0);

	// The xchg is atomic.
	while(xchg(&lk->locked, 1) != 0) ;
f010eb58:	90                   	nop
f010eb59:	8b 45 08             	mov    0x8(%ebp),%eax
f010eb5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010eb5f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
xchg(volatile uint32 *addr, uint32 newval)
{
  uint32 result;

  // The + in "+m" denotes a read-modify-write operand.
  __asm __volatile("lock; xchgl %0, %1" :
f010eb66:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010eb69:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010eb6c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010eb6f:	f0 87 02             	lock xchg %eax,(%edx)
f010eb72:	89 45 ec             	mov    %eax,-0x14(%ebp)
               "+m" (*addr), "=a" (result) :
               "1" (newval) :
               "cc");
  return result;
f010eb75:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010eb78:	85 c0                	test   %eax,%eax
f010eb7a:	75 dd                	jne    f010eb59 <acquire_spinlock+0x38>
	//cprintf("SPIN lock [%s] is ACQUIRED  by [%d]\n", lk->name, myproc() != NULL? myproc()->env_id : 0);

	// Tell the C compiler and the processor to not move loads or stores
	// past this point, to ensure that the critical section's memory
	// references happen after the lock is acquired.
	__sync_synchronize();
f010eb7c:	f0 83 0c 24 00       	lock orl $0x0,(%esp)

	// Record info about lock acquisition for debugging.
	lk->cpu = mycpu();
f010eb81:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010eb84:	e8 74 85 ff ff       	call   f01070fd <mycpu>
f010eb89:	89 43 44             	mov    %eax,0x44(%ebx)
	getcallerpcs(&lk, lk->pcs);
f010eb8c:	8b 45 08             	mov    0x8(%ebp),%eax
f010eb8f:	83 c0 48             	add    $0x48,%eax
f010eb92:	83 ec 08             	sub    $0x8,%esp
f010eb95:	50                   	push   %eax
f010eb96:	8d 45 08             	lea    0x8(%ebp),%eax
f010eb99:	50                   	push   %eax
f010eb9a:	e8 74 00 00 00       	call   f010ec13 <getcallerpcs>
f010eb9f:	83 c4 10             	add    $0x10,%esp

}
f010eba2:	90                   	nop
f010eba3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010eba6:	c9                   	leave  
f010eba7:	c3                   	ret    

f010eba8 <release_spinlock>:

// Release the lock.
void release_spinlock(struct spinlock *lk)
{
f010eba8:	55                   	push   %ebp
f010eba9:	89 e5                	mov    %esp,%ebp
f010ebab:	83 ec 08             	sub    $0x8,%esp
	if(!holding_spinlock(lk))
f010ebae:	83 ec 0c             	sub    $0xc,%esp
f010ebb1:	ff 75 08             	pushl  0x8(%ebp)
f010ebb4:	e8 81 01 00 00       	call   f010ed3a <holding_spinlock>
f010ebb9:	83 c4 10             	add    $0x10,%esp
f010ebbc:	85 c0                	test   %eax,%eax
f010ebbe:	75 26                	jne    f010ebe6 <release_spinlock+0x3e>
	{
		printcallstack(lk);
f010ebc0:	83 ec 0c             	sub    $0xc,%esp
f010ebc3:	ff 75 08             	pushl  0x8(%ebp)
f010ebc6:	e8 08 01 00 00       	call   f010ecd3 <printcallstack>
f010ebcb:	83 c4 10             	add    $0x10,%esp
		panic("release: lock \"%s\" is either not held or held by another CPU!", lk->name);
f010ebce:	8b 45 08             	mov    0x8(%ebp),%eax
f010ebd1:	83 c0 04             	add    $0x4,%eax
f010ebd4:	50                   	push   %eax
f010ebd5:	68 78 96 12 f0       	push   $0xf0129678
f010ebda:	6a 3b                	push   $0x3b
f010ebdc:	68 61 96 12 f0       	push   $0xf0129661
f010ebe1:	e8 34 17 ff ff       	call   f010031a <_panic>
	}
	lk->pcs[0] = 0;
f010ebe6:	8b 45 08             	mov    0x8(%ebp),%eax
f010ebe9:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
	lk->cpu = 0;
f010ebf0:	8b 45 08             	mov    0x8(%ebp),%eax
f010ebf3:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
	// Tell the C compiler and the processor to not move loads or stores
	// past this point, to ensure that all the stores in the critical
	// section are visible to other cores before the lock is released.
	// Both the C compiler and the hardware may re-order loads and
	// stores; __sync_synchronize() tells them both not to.
	__sync_synchronize();
f010ebfa:	f0 83 0c 24 00       	lock orl $0x0,(%esp)

	// Release the lock, equivalent to lk->locked = 0.
	// This code can't use a C assignment, since it might
	// not be atomic. A real OS would use C atomics here.
	asm volatile("movl $0, %0" : "+m" (lk->locked) : );
f010ebff:	8b 45 08             	mov    0x8(%ebp),%eax
f010ec02:	8b 55 08             	mov    0x8(%ebp),%edx
f010ec05:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	popcli();
f010ec0b:	e8 02 86 ff ff       	call   f0107212 <popcli>
}
f010ec10:	90                   	nop
f010ec11:	c9                   	leave  
f010ec12:	c3                   	ret    

f010ec13 <getcallerpcs>:

// Record the current call stack in pcs[] by following the %ebp chain.
int getcallerpcs(void *v, uint32 pcs[])
{
f010ec13:	55                   	push   %ebp
f010ec14:	89 e5                	mov    %esp,%ebp
f010ec16:	83 ec 28             	sub    $0x28,%esp
	uint32 *ebp;
	int i;
	struct Env* p = get_cpu_proc();
f010ec19:	e8 52 bb ff ff       	call   f010a770 <get_cpu_proc>
f010ec1e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct cpu* c = mycpu();
f010ec21:	e8 d7 84 ff ff       	call   f01070fd <mycpu>
f010ec26:	89 45 e8             	mov    %eax,-0x18(%ebp)
	ebp = (uint32*)v - 2;
f010ec29:	8b 45 08             	mov    0x8(%ebp),%eax
f010ec2c:	83 e8 08             	sub    $0x8,%eax
f010ec2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for(i = 0; i < 10; i++)
f010ec32:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010ec39:	eb 67                	jmp    f010eca2 <getcallerpcs+0x8f>
	{
		//cprintf("old ebp = %x\n", ebp);
		if	(	ebp == 0 || (ebp < (uint32*) USER_LIMIT) ||
f010ec3b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ec3f:	74 67                	je     f010eca8 <getcallerpcs+0x95>
f010ec41:	81 7d f4 ff ff 7f ef 	cmpl   $0xef7fffff,-0xc(%ebp)
f010ec48:	76 5e                	jbe    f010eca8 <getcallerpcs+0x95>
				(ebp >= (uint32*)(c->stack + KERNEL_STACK_SIZE) && ebp < (uint32*)(c->stack + KERNEL_STACK_SIZE + PAGE_SIZE)) ||
f010ec4a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ec4d:	8b 40 08             	mov    0x8(%eax),%eax
f010ec50:	05 00 80 00 00       	add    $0x8000,%eax
	struct cpu* c = mycpu();
	ebp = (uint32*)v - 2;
	for(i = 0; i < 10; i++)
	{
		//cprintf("old ebp = %x\n", ebp);
		if	(	ebp == 0 || (ebp < (uint32*) USER_LIMIT) ||
f010ec55:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ec58:	77 10                	ja     f010ec6a <getcallerpcs+0x57>
				(ebp >= (uint32*)(c->stack + KERNEL_STACK_SIZE) && ebp < (uint32*)(c->stack + KERNEL_STACK_SIZE + PAGE_SIZE)) ||
f010ec5a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ec5d:	8b 40 08             	mov    0x8(%eax),%eax
f010ec60:	05 00 90 00 00       	add    $0x9000,%eax
f010ec65:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ec68:	77 3e                	ja     f010eca8 <getcallerpcs+0x95>
f010ec6a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010ec6e:	74 10                	je     f010ec80 <getcallerpcs+0x6d>
				(p && ebp >= (uint32*) (p->kstack + KERNEL_STACK_SIZE)))
f010ec70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ec73:	8b 40 70             	mov    0x70(%eax),%eax
f010ec76:	05 00 80 00 00       	add    $0x8000,%eax
f010ec7b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ec7e:	76 28                	jbe    f010eca8 <getcallerpcs+0x95>
			break;
		pcs[i] = ebp[1];     // saved %eip
f010ec80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ec83:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ec8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ec8d:	01 c2                	add    %eax,%edx
f010ec8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ec92:	8b 40 04             	mov    0x4(%eax),%eax
f010ec95:	89 02                	mov    %eax,(%edx)
		ebp = (uint32*)ebp[0]; // saved %ebp
f010ec97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ec9a:	8b 00                	mov    (%eax),%eax
f010ec9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ebp;
	int i;
	struct Env* p = get_cpu_proc();
	struct cpu* c = mycpu();
	ebp = (uint32*)v - 2;
	for(i = 0; i < 10; i++)
f010ec9f:	ff 45 f0             	incl   -0x10(%ebp)
f010eca2:	83 7d f0 09          	cmpl   $0x9,-0x10(%ebp)
f010eca6:	7e 93                	jle    f010ec3b <getcallerpcs+0x28>
		pcs[i] = ebp[1];     // saved %eip
		ebp = (uint32*)ebp[0]; // saved %ebp
		//		cprintf("new ebp = %x\n", ebp);
		//		cprintf("pc[%d] = %x\n", i, pcs[i]);
	}
	int length = i ;
f010eca8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ecab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	for(; i < 10; i++)
f010ecae:	eb 18                	jmp    f010ecc8 <getcallerpcs+0xb5>
		pcs[i] = 0;
f010ecb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ecb3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ecba:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ecbd:	01 d0                	add    %edx,%eax
f010ecbf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		ebp = (uint32*)ebp[0]; // saved %ebp
		//		cprintf("new ebp = %x\n", ebp);
		//		cprintf("pc[%d] = %x\n", i, pcs[i]);
	}
	int length = i ;
	for(; i < 10; i++)
f010ecc5:	ff 45 f0             	incl   -0x10(%ebp)
f010ecc8:	83 7d f0 09          	cmpl   $0x9,-0x10(%ebp)
f010eccc:	7e e2                	jle    f010ecb0 <getcallerpcs+0x9d>
		pcs[i] = 0;
	return length ;
f010ecce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f010ecd1:	c9                   	leave  
f010ecd2:	c3                   	ret    

f010ecd3 <printcallstack>:

void printcallstack(struct spinlock *lk)
{
f010ecd3:	55                   	push   %ebp
f010ecd4:	89 e5                	mov    %esp,%ebp
f010ecd6:	83 ec 18             	sub    $0x18,%esp
	cprintf("\nCaller Stack:\n");
f010ecd9:	83 ec 0c             	sub    $0xc,%esp
f010ecdc:	68 b6 96 12 f0       	push   $0xf01296b6
f010ece1:	e8 86 22 ff ff       	call   f0100f6c <cprintf>
f010ece6:	83 c4 10             	add    $0x10,%esp
	int stacklen = 	getcallerpcs(&lk, lk->pcs);
f010ece9:	8b 45 08             	mov    0x8(%ebp),%eax
f010ecec:	83 c0 48             	add    $0x48,%eax
f010ecef:	83 ec 08             	sub    $0x8,%esp
f010ecf2:	50                   	push   %eax
f010ecf3:	8d 45 08             	lea    0x8(%ebp),%eax
f010ecf6:	50                   	push   %eax
f010ecf7:	e8 17 ff ff ff       	call   f010ec13 <getcallerpcs>
f010ecfc:	83 c4 10             	add    $0x10,%esp
f010ecff:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (int i = 0; i < stacklen; ++i) {
f010ed02:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ed09:	eb 24                	jmp    f010ed2f <printcallstack+0x5c>
		cprintf("  PC[%d] = %x\n", i, lk->pcs[i]);
f010ed0b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ed0e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ed11:	83 c2 10             	add    $0x10,%edx
f010ed14:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
f010ed18:	83 ec 04             	sub    $0x4,%esp
f010ed1b:	50                   	push   %eax
f010ed1c:	ff 75 f4             	pushl  -0xc(%ebp)
f010ed1f:	68 c6 96 12 f0       	push   $0xf01296c6
f010ed24:	e8 43 22 ff ff       	call   f0100f6c <cprintf>
f010ed29:	83 c4 10             	add    $0x10,%esp

void printcallstack(struct spinlock *lk)
{
	cprintf("\nCaller Stack:\n");
	int stacklen = 	getcallerpcs(&lk, lk->pcs);
	for (int i = 0; i < stacklen; ++i) {
f010ed2c:	ff 45 f4             	incl   -0xc(%ebp)
f010ed2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ed32:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ed35:	7c d4                	jl     f010ed0b <printcallstack+0x38>
		cprintf("  PC[%d] = %x\n", i, lk->pcs[i]);
	}
}
f010ed37:	90                   	nop
f010ed38:	c9                   	leave  
f010ed39:	c3                   	ret    

f010ed3a <holding_spinlock>:
// Check whether this cpu is holding the lock.
int holding_spinlock(struct spinlock *lock)
{
f010ed3a:	55                   	push   %ebp
f010ed3b:	89 e5                	mov    %esp,%ebp
f010ed3d:	53                   	push   %ebx
f010ed3e:	83 ec 14             	sub    $0x14,%esp
	int r;
	pushcli();
f010ed41:	e8 7a 84 ff ff       	call   f01071c0 <pushcli>
	r = lock->locked && lock->cpu == mycpu();
f010ed46:	8b 45 08             	mov    0x8(%ebp),%eax
f010ed49:	8b 00                	mov    (%eax),%eax
f010ed4b:	85 c0                	test   %eax,%eax
f010ed4d:	74 16                	je     f010ed65 <holding_spinlock+0x2b>
f010ed4f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ed52:	8b 58 44             	mov    0x44(%eax),%ebx
f010ed55:	e8 a3 83 ff ff       	call   f01070fd <mycpu>
f010ed5a:	39 c3                	cmp    %eax,%ebx
f010ed5c:	75 07                	jne    f010ed65 <holding_spinlock+0x2b>
f010ed5e:	b8 01 00 00 00       	mov    $0x1,%eax
f010ed63:	eb 05                	jmp    f010ed6a <holding_spinlock+0x30>
f010ed65:	b8 00 00 00 00       	mov    $0x0,%eax
f010ed6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	popcli();
f010ed6d:	e8 a0 84 ff ff       	call   f0107212 <popcli>
	return r;
f010ed72:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ed75:	83 c4 14             	add    $0x14,%esp
f010ed78:	5b                   	pop    %ebx
f010ed79:	5d                   	pop    %ebp
f010ed7a:	c3                   	ret    

f010ed7b <init_sleeplock>:
#include "channel.h"
#include "../cpu/cpu.h"
#include "../proc/user_environment.h"

void init_sleeplock(struct sleeplock *lk, char *name)
{
f010ed7b:	55                   	push   %ebp
f010ed7c:	89 e5                	mov    %esp,%ebp
f010ed7e:	83 ec 08             	sub    $0x8,%esp
	init_channel(&(lk->chan), "sleep lock channel");
f010ed81:	8b 45 08             	mov    0x8(%ebp),%eax
f010ed84:	83 c0 74             	add    $0x74,%eax
f010ed87:	83 ec 08             	sub    $0x8,%esp
f010ed8a:	68 d5 96 12 f0       	push   $0xf01296d5
f010ed8f:	50                   	push   %eax
f010ed90:	e8 4c 01 00 00       	call   f010eee1 <init_channel>
f010ed95:	83 c4 10             	add    $0x10,%esp
	init_spinlock(&(lk->lk), "lock of sleep lock");
f010ed98:	8b 45 08             	mov    0x8(%ebp),%eax
f010ed9b:	83 c0 04             	add    $0x4,%eax
f010ed9e:	83 ec 08             	sub    $0x8,%esp
f010eda1:	68 e8 96 12 f0       	push   $0xf01296e8
f010eda6:	50                   	push   %eax
f010eda7:	e8 44 fd ff ff       	call   f010eaf0 <init_spinlock>
f010edac:	83 c4 10             	add    $0x10,%esp
	strcpy(lk->name, name);
f010edaf:	8b 45 08             	mov    0x8(%ebp),%eax
f010edb2:	05 c4 00 00 00       	add    $0xc4,%eax
f010edb7:	83 ec 08             	sub    $0x8,%esp
f010edba:	ff 75 0c             	pushl  0xc(%ebp)
f010edbd:	50                   	push   %eax
f010edbe:	e8 ca 37 01 00       	call   f012258d <strcpy>
f010edc3:	83 c4 10             	add    $0x10,%esp
	lk->locked = 0;
f010edc6:	8b 45 08             	mov    0x8(%ebp),%eax
f010edc9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	lk->pid = 0;
f010edcf:	8b 45 08             	mov    0x8(%ebp),%eax
f010edd2:	c7 80 04 01 00 00 00 	movl   $0x0,0x104(%eax)
f010edd9:	00 00 00 
}
f010eddc:	90                   	nop
f010eddd:	c9                   	leave  
f010edde:	c3                   	ret    

f010eddf <holding_sleeplock>:
int holding_sleeplock(struct sleeplock *lk) // is the sleeplock holded by this process or not
{
f010eddf:	55                   	push   %ebp
f010ede0:	89 e5                	mov    %esp,%ebp
f010ede2:	53                   	push   %ebx
f010ede3:	83 ec 14             	sub    $0x14,%esp
	int r;
	acquire_spinlock(&(lk->lk));
f010ede6:	8b 45 08             	mov    0x8(%ebp),%eax
f010ede9:	83 c0 04             	add    $0x4,%eax
f010edec:	83 ec 0c             	sub    $0xc,%esp
f010edef:	50                   	push   %eax
f010edf0:	e8 2c fd ff ff       	call   f010eb21 <acquire_spinlock>
f010edf5:	83 c4 10             	add    $0x10,%esp
	r = lk->locked && (lk->pid == get_cpu_proc()->env_id);
f010edf8:	8b 45 08             	mov    0x8(%ebp),%eax
f010edfb:	8b 00                	mov    (%eax),%eax
f010edfd:	85 c0                	test   %eax,%eax
f010edff:	74 1c                	je     f010ee1d <holding_sleeplock+0x3e>
f010ee01:	8b 45 08             	mov    0x8(%ebp),%eax
f010ee04:	8b 98 04 01 00 00    	mov    0x104(%eax),%ebx
f010ee0a:	e8 61 b9 ff ff       	call   f010a770 <get_cpu_proc>
f010ee0f:	8b 40 10             	mov    0x10(%eax),%eax
f010ee12:	39 c3                	cmp    %eax,%ebx
f010ee14:	75 07                	jne    f010ee1d <holding_sleeplock+0x3e>
f010ee16:	b8 01 00 00 00       	mov    $0x1,%eax
f010ee1b:	eb 05                	jmp    f010ee22 <holding_sleeplock+0x43>
f010ee1d:	b8 00 00 00 00       	mov    $0x0,%eax
f010ee22:	89 45 f4             	mov    %eax,-0xc(%ebp)
	release_spinlock(&(lk->lk));
f010ee25:	8b 45 08             	mov    0x8(%ebp),%eax
f010ee28:	83 c0 04             	add    $0x4,%eax
f010ee2b:	83 ec 0c             	sub    $0xc,%esp
f010ee2e:	50                   	push   %eax
f010ee2f:	e8 74 fd ff ff       	call   f010eba8 <release_spinlock>
f010ee34:	83 c4 10             	add    $0x10,%esp
	return r;
f010ee37:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ee3a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010ee3d:	c9                   	leave  
f010ee3e:	c3                   	ret    

f010ee3f <acquire_sleeplock>:
//==========================================================================

void acquire_sleeplock(struct sleeplock *lk)
{
f010ee3f:	55                   	push   %ebp
f010ee40:	89 e5                	mov    %esp,%ebp
f010ee42:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #13] [4] LOCKS - acquire_sleeplock
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	//panic("acquire_sleeplock is not implemented yet");
	 acquire_spinlock(&(lk->lk));
f010ee45:	8b 45 08             	mov    0x8(%ebp),%eax
f010ee48:	83 c0 04             	add    $0x4,%eax
f010ee4b:	83 ec 0c             	sub    $0xc,%esp
f010ee4e:	50                   	push   %eax
f010ee4f:	e8 cd fc ff ff       	call   f010eb21 <acquire_spinlock>
f010ee54:	83 c4 10             	add    $0x10,%esp
	    while (lk->locked) {
f010ee57:	eb 19                	jmp    f010ee72 <acquire_sleeplock+0x33>
	        sleep(&lk->chan, &(lk->lk));
f010ee59:	8b 45 08             	mov    0x8(%ebp),%eax
f010ee5c:	8d 50 04             	lea    0x4(%eax),%edx
f010ee5f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ee62:	83 c0 74             	add    $0x74,%eax
f010ee65:	83 ec 08             	sub    $0x8,%esp
f010ee68:	52                   	push   %edx
f010ee69:	50                   	push   %eax
f010ee6a:	e8 9f 00 00 00       	call   f010ef0e <sleep>
f010ee6f:	83 c4 10             	add    $0x10,%esp
{
	//TODO: [PROJECT'24.MS1 - #13] [4] LOCKS - acquire_sleeplock
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	//panic("acquire_sleeplock is not implemented yet");
	 acquire_spinlock(&(lk->lk));
	    while (lk->locked) {
f010ee72:	8b 45 08             	mov    0x8(%ebp),%eax
f010ee75:	8b 00                	mov    (%eax),%eax
f010ee77:	85 c0                	test   %eax,%eax
f010ee79:	75 de                	jne    f010ee59 <acquire_sleeplock+0x1a>
	        sleep(&lk->chan, &(lk->lk));
	    }

	    lk->locked = 1;
f010ee7b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ee7e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
	    //lk->pid = get_cpu_proc()->env_id;
	  release_spinlock(&(lk->lk));
f010ee84:	8b 45 08             	mov    0x8(%ebp),%eax
f010ee87:	83 c0 04             	add    $0x4,%eax
f010ee8a:	83 ec 0c             	sub    $0xc,%esp
f010ee8d:	50                   	push   %eax
f010ee8e:	e8 15 fd ff ff       	call   f010eba8 <release_spinlock>
f010ee93:	83 c4 10             	add    $0x10,%esp

}
f010ee96:	90                   	nop
f010ee97:	c9                   	leave  
f010ee98:	c3                   	ret    

f010ee99 <release_sleeplock>:

void release_sleeplock(struct sleeplock *lk)
{
f010ee99:	55                   	push   %ebp
f010ee9a:	89 e5                	mov    %esp,%ebp
f010ee9c:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #14] [4] LOCKS - release_sleeplock
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	//panic("release_sleeplock is not implemented yet");
	//cprintf("sleep_lock 57");
	 acquire_spinlock(&(lk->lk));
f010ee9f:	8b 45 08             	mov    0x8(%ebp),%eax
f010eea2:	83 c0 04             	add    $0x4,%eax
f010eea5:	83 ec 0c             	sub    $0xc,%esp
f010eea8:	50                   	push   %eax
f010eea9:	e8 73 fc ff ff       	call   f010eb21 <acquire_spinlock>
f010eeae:	83 c4 10             	add    $0x10,%esp
	//cprintf("sleep_lock 59");
	 wakeup_all(&(lk->chan));
f010eeb1:	8b 45 08             	mov    0x8(%ebp),%eax
f010eeb4:	83 c0 74             	add    $0x74,%eax
f010eeb7:	83 ec 0c             	sub    $0xc,%esp
f010eeba:	50                   	push   %eax
f010eebb:	e8 c8 00 00 00       	call   f010ef88 <wakeup_all>
f010eec0:	83 c4 10             	add    $0x10,%esp
	 //cprintf("sleep_lock 61");
	 lk->locked = 0;
f010eec3:	8b 45 08             	mov    0x8(%ebp),%eax
f010eec6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	    //lk->pid = get_cpu_proc()->env_id;
	 release_spinlock(&(lk->lk));
f010eecc:	8b 45 08             	mov    0x8(%ebp),%eax
f010eecf:	83 c0 04             	add    $0x4,%eax
f010eed2:	83 ec 0c             	sub    $0xc,%esp
f010eed5:	50                   	push   %eax
f010eed6:	e8 cd fc ff ff       	call   f010eba8 <release_spinlock>
f010eedb:	83 c4 10             	add    $0x10,%esp
}
f010eede:	90                   	nop
f010eedf:	c9                   	leave  
f010eee0:	c3                   	ret    

f010eee1 <init_channel>:
//===============================
// 1) INITIALIZE THE CHANNEL:
//===============================
// initialize its lock & queue
void init_channel(struct Channel *chan, char *name)
{
f010eee1:	55                   	push   %ebp
f010eee2:	89 e5                	mov    %esp,%ebp
f010eee4:	83 ec 08             	sub    $0x8,%esp
	strcpy(chan->name, name);
f010eee7:	8b 45 08             	mov    0x8(%ebp),%eax
f010eeea:	83 c0 10             	add    $0x10,%eax
f010eeed:	83 ec 08             	sub    $0x8,%esp
f010eef0:	ff 75 0c             	pushl  0xc(%ebp)
f010eef3:	50                   	push   %eax
f010eef4:	e8 94 36 01 00       	call   f012258d <strcpy>
f010eef9:	83 c4 10             	add    $0x10,%esp
	init_queue(&(chan->queue));
f010eefc:	8b 45 08             	mov    0x8(%ebp),%eax
f010eeff:	83 ec 0c             	sub    $0xc,%esp
f010ef02:	50                   	push   %eax
f010ef03:	e8 2f 60 ff ff       	call   f0104f37 <init_queue>
f010ef08:	83 c4 10             	add    $0x10,%esp
}
f010ef0b:	90                   	nop
f010ef0c:	c9                   	leave  
f010ef0d:	c3                   	ret    

f010ef0e <sleep>:
//===============================
// Atomically release lock and sleep on chan.
// Reacquires lock when awakened.
// Ref: xv6-x86 OS code
void sleep(struct Channel *chan, struct spinlock* lk)
{
f010ef0e:	55                   	push   %ebp
f010ef0f:	89 e5                	mov    %esp,%ebp
f010ef11:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #10] [4] LOCKS - sleep
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	//panic("sleep is not implemented yet");
	//Your Code is Here...

	acquire_spinlock(&ProcessQueues.qlock);
f010ef14:	83 ec 0c             	sub    $0xc,%esp
f010ef17:	68 00 fe 59 f0       	push   $0xf059fe00
f010ef1c:	e8 00 fc ff ff       	call   f010eb21 <acquire_spinlock>
f010ef21:	83 c4 10             	add    $0x10,%esp
	enqueue(&chan->queue,get_cpu_proc());
f010ef24:	e8 47 b8 ff ff       	call   f010a770 <get_cpu_proc>
f010ef29:	89 c2                	mov    %eax,%edx
f010ef2b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ef2e:	83 ec 08             	sub    $0x8,%esp
f010ef31:	52                   	push   %edx
f010ef32:	50                   	push   %eax
f010ef33:	e8 40 60 ff ff       	call   f0104f78 <enqueue>
f010ef38:	83 c4 10             	add    $0x10,%esp
//	get_cpu_proc()->env_status = ENV_BLOCKED;
	release_spinlock(lk);
f010ef3b:	83 ec 0c             	sub    $0xc,%esp
f010ef3e:	ff 75 0c             	pushl  0xc(%ebp)
f010ef41:	e8 62 fc ff ff       	call   f010eba8 <release_spinlock>
f010ef46:	83 c4 10             	add    $0x10,%esp
	sched();
f010ef49:	e8 af b9 ff ff       	call   f010a8fd <sched>
	acquire_spinlock(lk);
f010ef4e:	83 ec 0c             	sub    $0xc,%esp
f010ef51:	ff 75 0c             	pushl  0xc(%ebp)
f010ef54:	e8 c8 fb ff ff       	call   f010eb21 <acquire_spinlock>
f010ef59:	83 c4 10             	add    $0x10,%esp
}
f010ef5c:	90                   	nop
f010ef5d:	c9                   	leave  
f010ef5e:	c3                   	ret    

f010ef5f <wakeup_one>:
// Wake up ONE process sleeping on chan.
// The qlock must be held.
// Ref: xv6-x86 OS code
// chan MUST be of type "struct Env_Queue" to hold the blocked processes
void wakeup_one(struct Channel *chan)
{
f010ef5f:	55                   	push   %ebp
f010ef60:	89 e5                	mov    %esp,%ebp
f010ef62:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT'24.MS1 - #11] [4] LOCKS - wakeup_one
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
//	panic("wakeup_one is not implemented yet");
	//Your Code is Here...

	struct Env* waked_up_process = dequeue(&chan->queue);
f010ef65:	8b 45 08             	mov    0x8(%ebp),%eax
f010ef68:	83 ec 0c             	sub    $0xc,%esp
f010ef6b:	50                   	push   %eax
f010ef6c:	e8 98 60 ff ff       	call   f0105009 <dequeue>
f010ef71:	83 c4 10             	add    $0x10,%esp
f010ef74:	89 45 f4             	mov    %eax,-0xc(%ebp)
	sched_insert_ready0(waked_up_process);
f010ef77:	83 ec 0c             	sub    $0xc,%esp
f010ef7a:	ff 75 f4             	pushl  -0xc(%ebp)
f010ef7d:	e8 6b 62 ff ff       	call   f01051ed <sched_insert_ready0>
f010ef82:	83 c4 10             	add    $0x10,%esp
//	cprintf("Process ID: %d is waked up\n", waked_up_process->env_id);
//	cprintf("Its status is: %s\n", waked_up_process->env_status);
}
f010ef85:	90                   	nop
f010ef86:	c9                   	leave  
f010ef87:	c3                   	ret    

f010ef88 <wakeup_all>:
// The queues lock must be held.
// Ref: xv6-x86 OS code
// chan MUST be of type "struct Env_Queue" to hold the blocked processes

void wakeup_all(struct Channel *chan)
{
f010ef88:	55                   	push   %ebp
f010ef89:	89 e5                	mov    %esp,%ebp
f010ef8b:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #12] [4] LOCKS - wakeup_all
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
//	panic("wakeup_all is not implemented yet");
	//Your Code is Here...
//	cprintf("The Blocked queue size = %d", queue_size(&chan->queue));
	while(queue_size(&chan->queue)){
f010ef8e:	eb 0e                	jmp    f010ef9e <wakeup_all+0x16>
		wakeup_one(chan);
f010ef90:	83 ec 0c             	sub    $0xc,%esp
f010ef93:	ff 75 08             	pushl  0x8(%ebp)
f010ef96:	e8 c4 ff ff ff       	call   f010ef5f <wakeup_one>
f010ef9b:	83 c4 10             	add    $0x10,%esp
	//TODO: [PROJECT'24.MS1 - #12] [4] LOCKS - wakeup_all
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
//	panic("wakeup_all is not implemented yet");
	//Your Code is Here...
//	cprintf("The Blocked queue size = %d", queue_size(&chan->queue));
	while(queue_size(&chan->queue)){
f010ef9e:	8b 45 08             	mov    0x8(%ebp),%eax
f010efa1:	83 ec 0c             	sub    $0xc,%esp
f010efa4:	50                   	push   %eax
f010efa5:	e8 b6 5f ff ff       	call   f0104f60 <queue_size>
f010efaa:	83 c4 10             	add    $0x10,%esp
f010efad:	85 c0                	test   %eax,%eax
f010efaf:	75 df                	jne    f010ef90 <wakeup_all+0x8>
		wakeup_one(chan);
	}
//	cprintf("The Blocked queue size = %d", queue_size(&chan->queue));
}
f010efb1:	90                   	nop
f010efb2:	c9                   	leave  
f010efb3:	c3                   	ret    

f010efb4 <init_ksemaphore>:
#include "channel.h"
#include "../cpu/cpu.h"
#include "../proc/user_environment.h"

void init_ksemaphore(struct ksemaphore *ksem, int value, char *name)
{
f010efb4:	55                   	push   %ebp
f010efb5:	89 e5                	mov    %esp,%ebp
f010efb7:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS3]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("init_ksemaphore is not implemented yet");
f010efba:	83 ec 04             	sub    $0x4,%esp
f010efbd:	68 fc 96 12 f0       	push   $0xf01296fc
f010efc2:	6a 13                	push   $0x13
f010efc4:	68 23 97 12 f0       	push   $0xf0129723
f010efc9:	e8 4c 13 ff ff       	call   f010031a <_panic>

f010efce <wait_ksemaphore>:
	//Your Code is Here...
}

void wait_ksemaphore(struct ksemaphore *ksem)
{
f010efce:	55                   	push   %ebp
f010efcf:	89 e5                	mov    %esp,%ebp
f010efd1:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS3]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("wait_ksemaphore is not implemented yet");
f010efd4:	83 ec 04             	sub    $0x4,%esp
f010efd7:	68 3c 97 12 f0       	push   $0xf012973c
f010efdc:	6a 1b                	push   $0x1b
f010efde:	68 23 97 12 f0       	push   $0xf0129723
f010efe3:	e8 32 13 ff ff       	call   f010031a <_panic>

f010efe8 <signal_ksemaphore>:
	//Your Code is Here...

}

void signal_ksemaphore(struct ksemaphore *ksem)
{
f010efe8:	55                   	push   %ebp
f010efe9:	89 e5                	mov    %esp,%ebp
f010efeb:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS3]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("signal_ksemaphore is not implemented yet");
f010efee:	83 ec 04             	sub    $0x4,%esp
f010eff1:	68 64 97 12 f0       	push   $0xf0129764
f010eff6:	6a 24                	push   $0x24
f010eff8:	68 23 97 12 f0       	push   $0xf0129723
f010effd:	e8 18 13 ff ff       	call   f010031a <_panic>

f010f002 <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010f002:	55                   	push   %ebp
f010f003:	89 e5                	mov    %esp,%ebp
f010f005:	c7 05 50 29 5a f0 01 	movl   $0x1,0xf05a2950
f010f00c:	00 00 00 
f010f00f:	90                   	nop
f010f010:	5d                   	pop    %ebp
f010f011:	c3                   	ret    

f010f012 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f010f012:	55                   	push   %ebp
f010f013:	89 e5                	mov    %esp,%ebp
f010f015:	c7 05 50 29 5a f0 02 	movl   $0x2,0xf05a2950
f010f01c:	00 00 00 
f010f01f:	90                   	nop
f010f020:	5d                   	pop    %ebp
f010f021:	c3                   	ret    

f010f022 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f010f022:	55                   	push   %ebp
f010f023:	89 e5                	mov    %esp,%ebp
f010f025:	c7 05 50 29 5a f0 03 	movl   $0x3,0xf05a2950
f010f02c:	00 00 00 
f010f02f:	90                   	nop
f010f030:	5d                   	pop    %ebp
f010f031:	c3                   	ret    

f010f032 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f010f032:	55                   	push   %ebp
f010f033:	89 e5                	mov    %esp,%ebp
f010f035:	a1 50 29 5a f0       	mov    0xf05a2950,%eax
f010f03a:	83 f8 01             	cmp    $0x1,%eax
f010f03d:	75 04                	jne    f010f043 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f010f03f:	b0 01                	mov    $0x1,%al
f010f041:	eb 02                	jmp    f010f045 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f010f043:	b0 00                	mov    $0x0,%al
f010f045:	5d                   	pop    %ebp
f010f046:	c3                   	ret    

f010f047 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010f047:	55                   	push   %ebp
f010f048:	89 e5                	mov    %esp,%ebp
f010f04a:	a1 50 29 5a f0       	mov    0xf05a2950,%eax
f010f04f:	83 f8 02             	cmp    $0x2,%eax
f010f052:	75 04                	jne    f010f058 <isKHeapPlacementStrategyBESTFIT+0x11>
f010f054:	b0 01                	mov    $0x1,%al
f010f056:	eb 02                	jmp    f010f05a <isKHeapPlacementStrategyBESTFIT+0x13>
f010f058:	b0 00                	mov    $0x0,%al
f010f05a:	5d                   	pop    %ebp
f010f05b:	c3                   	ret    

f010f05c <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f010f05c:	55                   	push   %ebp
f010f05d:	89 e5                	mov    %esp,%ebp
f010f05f:	a1 50 29 5a f0       	mov    0xf05a2950,%eax
f010f064:	83 f8 03             	cmp    $0x3,%eax
f010f067:	75 04                	jne    f010f06d <isKHeapPlacementStrategyNEXTFIT+0x11>
f010f069:	b0 01                	mov    $0x1,%al
f010f06b:	eb 02                	jmp    f010f06f <isKHeapPlacementStrategyNEXTFIT+0x13>
f010f06d:	b0 00                	mov    $0x0,%al
f010f06f:	5d                   	pop    %ebp
f010f070:	c3                   	ret    

f010f071 <tst_handler>:

//=================//
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
f010f071:	55                   	push   %ebp
f010f072:	89 e5                	mov    %esp,%ebp
f010f074:	83 ec 18             	sub    $0x18,%esp
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010f077:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010f07e:	eb 26                	jmp    f010f0a6 <tst_handler+0x35>
	{
		arguments[a] = arguments[a+1] ;
f010f080:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f083:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010f08a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f08d:	01 c2                	add    %eax,%edx
f010f08f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f092:	40                   	inc    %eax
f010f093:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010f09a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f09d:	01 c8                	add    %ecx,%eax
f010f09f:	8b 00                	mov    (%eax),%eax
f010f0a1:	89 02                	mov    %eax,(%edx)
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010f0a3:	ff 45 f4             	incl   -0xc(%ebp)
f010f0a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010f0a9:	48                   	dec    %eax
f010f0aa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f0ad:	7f d1                	jg     f010f080 <tst_handler+0xf>
	{
		arguments[a] = arguments[a+1] ;
	}
	number_of_arguments--;
f010f0af:	ff 4d 08             	decl   0x8(%ebp)

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
f010f0b2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010f0b9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010f0c0:	eb 35                	jmp    f010f0f7 <tst_handler+0x86>
	{
		if (strcmp(arguments[0], tests[i].name) == 0)
f010f0c2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010f0c5:	89 d0                	mov    %edx,%eax
f010f0c7:	01 c0                	add    %eax,%eax
f010f0c9:	01 d0                	add    %edx,%eax
f010f0cb:	c1 e0 02             	shl    $0x2,%eax
f010f0ce:	05 00 ed 17 f0       	add    $0xf017ed00,%eax
f010f0d3:	8b 10                	mov    (%eax),%edx
f010f0d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f0d8:	8b 00                	mov    (%eax),%eax
f010f0da:	83 ec 08             	sub    $0x8,%esp
f010f0dd:	52                   	push   %edx
f010f0de:	50                   	push   %eax
f010f0df:	e8 66 35 01 00       	call   f012264a <strcmp>
f010f0e4:	83 c4 10             	add    $0x10,%esp
f010f0e7:	85 c0                	test   %eax,%eax
f010f0e9:	75 09                	jne    f010f0f4 <tst_handler+0x83>
		{
			test_found = 1;
f010f0eb:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			break;
f010f0f2:	eb 0f                	jmp    f010f103 <tst_handler+0x92>
	number_of_arguments--;

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010f0f4:	ff 45 ec             	incl   -0x14(%ebp)
f010f0f7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010f0fa:	a1 b4 ed 17 f0       	mov    0xf017edb4,%eax
f010f0ff:	39 c2                	cmp    %eax,%edx
f010f101:	72 bf                	jb     f010f0c2 <tst_handler+0x51>
			test_found = 1;
			break;
		}
	}

	if(test_found)
f010f103:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f107:	74 29                	je     f010f132 <tst_handler+0xc1>
	{
		int return_value;
		return_value = tests[i].function_to_execute(number_of_arguments, arguments);
f010f109:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010f10c:	89 d0                	mov    %edx,%eax
f010f10e:	01 c0                	add    %eax,%eax
f010f110:	01 d0                	add    %edx,%eax
f010f112:	c1 e0 02             	shl    $0x2,%eax
f010f115:	05 08 ed 17 f0       	add    $0xf017ed08,%eax
f010f11a:	8b 00                	mov    (%eax),%eax
f010f11c:	83 ec 08             	sub    $0x8,%esp
f010f11f:	ff 75 0c             	pushl  0xc(%ebp)
f010f122:	ff 75 08             	pushl  0x8(%ebp)
f010f125:	ff d0                	call   *%eax
f010f127:	83 c4 10             	add    $0x10,%esp
f010f12a:	89 45 e8             	mov    %eax,-0x18(%ebp)
		return return_value;
f010f12d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f130:	eb 1b                	jmp    f010f14d <tst_handler+0xdc>
	}
	else
	{
		cprintf("Unknown test '%s'\n", arguments[0]);
f010f132:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f135:	8b 00                	mov    (%eax),%eax
f010f137:	83 ec 08             	sub    $0x8,%esp
f010f13a:	50                   	push   %eax
f010f13b:	68 a4 9a 12 f0       	push   $0xf0129aa4
f010f140:	e8 27 1e ff ff       	call   f0100f6c <cprintf>
f010f145:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f148:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010f14d:	c9                   	leave  
f010f14e:	c3                   	ret    

f010f14f <tst_three_creation_functions>:

//=================//
/*TESTING Functions*/
//=================//
int tst_three_creation_functions(int number_of_arguments, char **arguments)
{
f010f14f:	55                   	push   %ebp
f010f150:	89 e5                	mov    %esp,%ebp
f010f152:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f010f155:	e8 74 0b 01 00       	call   f011fcce <test_three_creation_functions>
	return 0;
f010f15a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f15f:	c9                   	leave  
f010f160:	c3                   	ret    

f010f161 <tst_priority1>:

int tst_priority1(int number_of_arguments, char **arguments)
{
f010f161:	55                   	push   %ebp
f010f162:	89 e5                	mov    %esp,%ebp
f010f164:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f010f167:	e8 b6 9a 00 00       	call   f0118c22 <test_priority_normal_and_higher>
	return 0;
f010f16c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f171:	c9                   	leave  
f010f172:	c3                   	ret    

f010f173 <tst_priority2>:

int tst_priority2(int number_of_arguments, char **arguments)
{
f010f173:	55                   	push   %ebp
f010f174:	89 e5                	mov    %esp,%ebp
f010f176:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f010f179:	e8 0e a5 00 00       	call   f011968c <test_priority_normal_and_lower>
	return 0;
f010f17e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f183:	c9                   	leave  
f010f184:	c3                   	ret    

f010f185 <tst_kfreeall>:

int tst_kfreeall(int number_of_arguments, char **arguments)
{
f010f185:	55                   	push   %ebp
f010f186:	89 e5                	mov    %esp,%ebp
f010f188:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f010f18b:	e8 f6 0c 01 00       	call   f011fe86 <test_kfreeall>
	return 0;
f010f190:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f195:	c9                   	leave  
f010f196:	c3                   	ret    

f010f197 <tst_kexpand>:

int tst_kexpand(int number_of_arguments, char **arguments)
{
f010f197:	55                   	push   %ebp
f010f198:	89 e5                	mov    %esp,%ebp
f010f19a:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f010f19d:	e8 01 0d 01 00       	call   f011fea3 <test_kexpand>
	return 0;
f010f1a2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f1a7:	c9                   	leave  
f010f1a8:	c3                   	ret    

f010f1a9 <tst_kshrink>:

int tst_kshrink(int number_of_arguments, char **arguments)
{
f010f1a9:	55                   	push   %ebp
f010f1aa:	89 e5                	mov    %esp,%ebp
f010f1ac:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f010f1af:	e8 0c 0d 01 00       	call   f011fec0 <test_kshrink>
	return 0;
f010f1b4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f1b9:	c9                   	leave  
f010f1ba:	c3                   	ret    

f010f1bb <tst_kfreelast>:

int tst_kfreelast(int number_of_arguments, char **arguments)
{
f010f1bb:	55                   	push   %ebp
f010f1bc:	89 e5                	mov    %esp,%ebp
f010f1be:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f010f1c1:	e8 17 0d 01 00       	call   f011fedd <test_kfreelast>
	return 0;
f010f1c6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f1cb:	c9                   	leave  
f010f1cc:	c3                   	ret    

f010f1cd <tst_sc_MLFQ>:

int tst_sc_MLFQ(int number_of_arguments, char **arguments)
{
f010f1cd:	55                   	push   %ebp
f010f1ce:	89 e5                	mov    %esp,%ebp
f010f1d0:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f010f1d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f1d6:	83 c0 04             	add    $0x4,%eax
f010f1d9:	8b 00                	mov    (%eax),%eax
f010f1db:	83 ec 04             	sub    $0x4,%esp
f010f1de:	6a 0a                	push   $0xa
f010f1e0:	6a 00                	push   $0x0
f010f1e2:	50                   	push   %eax
f010f1e3:	e8 b6 36 01 00       	call   f012289e <strtol>
f010f1e8:	83 c4 10             	add    $0x10,%esp
f010f1eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f010f1ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f010f1f5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	acquire_spinlock(&ProcessQueues.qlock);
f010f1fc:	83 ec 0c             	sub    $0xc,%esp
f010f1ff:	68 00 fe 59 f0       	push   $0xf059fe00
f010f204:	e8 18 f9 ff ff       	call   f010eb21 <acquire_spinlock>
f010f209:	83 c4 10             	add    $0x10,%esp
	{
		LIST_FOREACH(e, &ProcessQueues.env_exit_queue)
f010f20c:	a1 80 fe 59 f0       	mov    0xf059fe80,%eax
f010f211:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010f214:	eb 3b                	jmp    f010f251 <tst_sc_MLFQ+0x84>
			{
			if (strcmp(e->prog_name, "tmlfq_2") == 0)
f010f216:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f219:	83 c0 20             	add    $0x20,%eax
f010f21c:	83 ec 08             	sub    $0x8,%esp
f010f21f:	68 b7 9a 12 f0       	push   $0xf0129ab7
f010f224:	50                   	push   %eax
f010f225:	e8 20 34 01 00       	call   f012264a <strcmp>
f010f22a:	83 c4 10             	add    $0x10,%esp
f010f22d:	85 c0                	test   %eax,%eax
f010f22f:	75 12                	jne    f010f243 <tst_sc_MLFQ+0x76>
			{
				if (firstTime)
f010f231:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f235:	74 07                	je     f010f23e <tst_sc_MLFQ+0x71>
					firstTime = 0;
f010f237:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				cnt++ ;
f010f23e:	ff 45 f4             	incl   -0xc(%ebp)
f010f241:	eb 06                	jmp    f010f249 <tst_sc_MLFQ+0x7c>
			}
			else if (!firstTime)
f010f243:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f247:	74 31                	je     f010f27a <tst_sc_MLFQ+0xad>
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	acquire_spinlock(&ProcessQueues.qlock);
	{
		LIST_FOREACH(e, &ProcessQueues.env_exit_queue)
f010f249:	a1 88 fe 59 f0       	mov    0xf059fe88,%eax
f010f24e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010f251:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010f255:	74 08                	je     f010f25f <tst_sc_MLFQ+0x92>
f010f257:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f25a:	8b 40 08             	mov    0x8(%eax),%eax
f010f25d:	eb 05                	jmp    f010f264 <tst_sc_MLFQ+0x97>
f010f25f:	b8 00 00 00 00       	mov    $0x0,%eax
f010f264:	a3 88 fe 59 f0       	mov    %eax,0xf059fe88
f010f269:	a1 88 fe 59 f0       	mov    0xf059fe88,%eax
f010f26e:	85 c0                	test   %eax,%eax
f010f270:	75 a4                	jne    f010f216 <tst_sc_MLFQ+0x49>
f010f272:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010f276:	75 9e                	jne    f010f216 <tst_sc_MLFQ+0x49>
f010f278:	eb 01                	jmp    f010f27b <tst_sc_MLFQ+0xae>
				if (firstTime)
					firstTime = 0;
				cnt++ ;
			}
			else if (!firstTime)
				break;
f010f27a:	90                   	nop
			}
		if(cnt == numOfSlave2)
f010f27b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f27e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010f281:	75 12                	jne    f010f295 <tst_sc_MLFQ+0xc8>
		{
			cprintf("Congratulations... MLFQScenario# completed successfully\n");
f010f283:	83 ec 0c             	sub    $0xc,%esp
f010f286:	68 c0 9a 12 f0       	push   $0xf0129ac0
f010f28b:	e8 dc 1c ff ff       	call   f0100f6c <cprintf>
f010f290:	83 c4 10             	add    $0x10,%esp
f010f293:	eb 17                	jmp    f010f2ac <tst_sc_MLFQ+0xdf>
		}
		else
		{
			panic("MLFQScenario# failed\n");
f010f295:	83 ec 04             	sub    $0x4,%esp
f010f298:	68 f9 9a 12 f0       	push   $0xf0129af9
f010f29d:	68 9b 00 00 00       	push   $0x9b
f010f2a2:	68 0f 9b 12 f0       	push   $0xf0129b0f
f010f2a7:	e8 6e 10 ff ff       	call   f010031a <_panic>
		}
	}
	release_spinlock(&ProcessQueues.qlock);
f010f2ac:	83 ec 0c             	sub    $0xc,%esp
f010f2af:	68 00 fe 59 f0       	push   $0xf059fe00
f010f2b4:	e8 ef f8 ff ff       	call   f010eba8 <release_spinlock>
f010f2b9:	83 c4 10             	add    $0x10,%esp
	return 0;
f010f2bc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f2c1:	c9                   	leave  
f010f2c2:	c3                   	ret    

f010f2c3 <tst_bsd_nice>:


/*2023*/
int tst_bsd_nice(int number_of_arguments, char **arguments)
{
f010f2c3:	55                   	push   %ebp
f010f2c4:	89 e5                	mov    %esp,%ebp
f010f2c6:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments != 2)
f010f2c9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010f2cd:	74 17                	je     f010f2e6 <tst_bsd_nice+0x23>
	{
		cprintf("Invalid number of arguments! USAGE: tst bsd_nice <testnumber>\n");
f010f2cf:	83 ec 0c             	sub    $0xc,%esp
f010f2d2:	68 28 9b 12 f0       	push   $0xf0129b28
f010f2d7:	e8 90 1c ff ff       	call   f0100f6c <cprintf>
f010f2dc:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f2df:	b8 00 00 00 00       	mov    $0x0,%eax
f010f2e4:	eb 45                	jmp    f010f32b <tst_bsd_nice+0x68>
	}
	int testNumber = strtol(arguments[1], NULL, 10);
f010f2e6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f2e9:	83 c0 04             	add    $0x4,%eax
f010f2ec:	8b 00                	mov    (%eax),%eax
f010f2ee:	83 ec 04             	sub    $0x4,%esp
f010f2f1:	6a 0a                	push   $0xa
f010f2f3:	6a 00                	push   $0x0
f010f2f5:	50                   	push   %eax
f010f2f6:	e8 a3 35 01 00       	call   f012289e <strtol>
f010f2fb:	83 c4 10             	add    $0x10,%esp
f010f2fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
	switch (testNumber)
f010f301:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f304:	83 f8 01             	cmp    $0x1,%eax
f010f307:	74 10                	je     f010f319 <tst_bsd_nice+0x56>
f010f309:	83 f8 02             	cmp    $0x2,%eax
f010f30c:	74 12                	je     f010f320 <tst_bsd_nice+0x5d>
f010f30e:	85 c0                	test   %eax,%eax
f010f310:	75 14                	jne    f010f326 <tst_bsd_nice+0x63>
	{
	case 0:
		test_bsd_nice_0();
f010f312:	e8 b9 0e 01 00       	call   f01201d0 <test_bsd_nice_0>
		break;
f010f317:	eb 0d                	jmp    f010f326 <tst_bsd_nice+0x63>
	case 1:
		test_bsd_nice_1();
f010f319:	e8 3c 11 01 00       	call   f012045a <test_bsd_nice_1>
		break;
f010f31e:	eb 06                	jmp    f010f326 <tst_bsd_nice+0x63>
	case 2:
		test_bsd_nice_2();
f010f320:	e8 49 13 01 00       	call   f012066e <test_bsd_nice_2>
		break;
f010f325:	90                   	nop
	}
	return 0;
f010f326:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f32b:	c9                   	leave  
f010f32c:	c3                   	ret    

f010f32d <tst_str2lower>:

int tst_str2lower(int number_of_arguments, char **arguments)
{
f010f32d:	55                   	push   %ebp
f010f32e:	89 e5                	mov    %esp,%ebp
f010f330:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 1)
f010f333:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010f337:	74 17                	je     f010f350 <tst_str2lower+0x23>
	{
		cprintf("Invalid number of arguments! USAGE: tst str2lower\n");
f010f339:	83 ec 0c             	sub    $0xc,%esp
f010f33c:	68 68 9b 12 f0       	push   $0xf0129b68
f010f341:	e8 26 1c ff ff       	call   f0100f6c <cprintf>
f010f346:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f349:	b8 00 00 00 00       	mov    $0x0,%eax
f010f34e:	eb 0a                	jmp    f010f35a <tst_str2lower+0x2d>
	}

	test_str2lower_function();
f010f350:	e8 a7 43 00 00       	call   f01136fc <test_str2lower_function>
	return 0;
f010f355:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f35a:	c9                   	leave  
f010f35b:	c3                   	ret    

f010f35c <tst_autocomplete>:

int tst_autocomplete(int number_of_arguments, char **arguments)
{
f010f35c:	55                   	push   %ebp
f010f35d:	89 e5                	mov    %esp,%ebp
f010f35f:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f010f362:	e8 cb 3f 00 00       	call   f0113332 <TestAutoCompleteCommand>
f010f367:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f010f36a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f36f:	c9                   	leave  
f010f370:	c3                   	ret    

f010f371 <tst_dyn_alloc>:
int tst_dyn_alloc(int number_of_arguments, char **arguments)
{
f010f371:	55                   	push   %ebp
f010f372:	89 e5                	mov    %esp,%ebp
f010f374:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010f377:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010f37b:	74 1a                	je     f010f397 <tst_dyn_alloc+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tst dynalloc <testname>\n") ;
f010f37d:	83 ec 0c             	sub    $0xc,%esp
f010f380:	68 9c 9b 12 f0       	push   $0xf0129b9c
f010f385:	e8 e2 1b ff ff       	call   f0100f6c <cprintf>
f010f38a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f38d:	b8 00 00 00 00       	mov    $0x0,%eax
f010f392:	e9 2f 01 00 00       	jmp    f010f4c6 <tst_dyn_alloc+0x155>
	}
	//str2lower(arguments[1]);
	// Test 1 Example for initialize_MemBlocksList: tstdynalloc init
	if(strcmp(arguments[1], "init") == 0)
f010f397:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f39a:	83 c0 04             	add    $0x4,%eax
f010f39d:	8b 00                	mov    (%eax),%eax
f010f39f:	83 ec 08             	sub    $0x8,%esp
f010f3a2:	68 d9 9b 12 f0       	push   $0xf0129bd9
f010f3a7:	50                   	push   %eax
f010f3a8:	e8 9d 32 01 00       	call   f012264a <strcmp>
f010f3ad:	83 c4 10             	add    $0x10,%esp
f010f3b0:	85 c0                	test   %eax,%eax
f010f3b2:	75 0a                	jne    f010f3be <tst_dyn_alloc+0x4d>
	{
		test_initialize_dynamic_allocator();
f010f3b4:	e8 f4 07 00 00       	call   f010fbad <test_initialize_dynamic_allocator>
f010f3b9:	e9 03 01 00 00       	jmp    f010f4c1 <tst_dyn_alloc+0x150>
	}
	// Test 2 Example for alloc_block_FF: tstdynalloc allocFF
	else if(strcmp(arguments[1], "allocff") == 0)
f010f3be:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f3c1:	83 c0 04             	add    $0x4,%eax
f010f3c4:	8b 00                	mov    (%eax),%eax
f010f3c6:	83 ec 08             	sub    $0x8,%esp
f010f3c9:	68 de 9b 12 f0       	push   $0xf0129bde
f010f3ce:	50                   	push   %eax
f010f3cf:	e8 76 32 01 00       	call   f012264a <strcmp>
f010f3d4:	83 c4 10             	add    $0x10,%esp
f010f3d7:	85 c0                	test   %eax,%eax
f010f3d9:	75 0a                	jne    f010f3e5 <tst_dyn_alloc+0x74>
	{
		test_alloc_block_FF();
f010f3db:	e8 9d 0c 00 00       	call   f011007d <test_alloc_block_FF>
f010f3e0:	e9 dc 00 00 00       	jmp    f010f4c1 <tst_dyn_alloc+0x150>
	}
	// Test 3 Example for alloc_block_BF: tstdynalloc allocBF
	else if(strcmp(arguments[1], "allocbf") == 0)
f010f3e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f3e8:	83 c0 04             	add    $0x4,%eax
f010f3eb:	8b 00                	mov    (%eax),%eax
f010f3ed:	83 ec 08             	sub    $0x8,%esp
f010f3f0:	68 e6 9b 12 f0       	push   $0xf0129be6
f010f3f5:	50                   	push   %eax
f010f3f6:	e8 4f 32 01 00       	call   f012264a <strcmp>
f010f3fb:	83 c4 10             	add    $0x10,%esp
f010f3fe:	85 c0                	test   %eax,%eax
f010f400:	75 0a                	jne    f010f40c <tst_dyn_alloc+0x9b>
	{
		test_alloc_block_BF();
f010f402:	e8 d3 11 00 00       	call   f01105da <test_alloc_block_BF>
f010f407:	e9 b5 00 00 00       	jmp    f010f4c1 <tst_dyn_alloc+0x150>
	}
	// Test 4 Example for alloc_block_NF: tstdynalloc allocNF
	else if(strcmp(arguments[1], "allocnf") == 0)
f010f40c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f40f:	83 c0 04             	add    $0x4,%eax
f010f412:	8b 00                	mov    (%eax),%eax
f010f414:	83 ec 08             	sub    $0x8,%esp
f010f417:	68 ee 9b 12 f0       	push   $0xf0129bee
f010f41c:	50                   	push   %eax
f010f41d:	e8 28 32 01 00       	call   f012264a <strcmp>
f010f422:	83 c4 10             	add    $0x10,%esp
f010f425:	85 c0                	test   %eax,%eax
f010f427:	75 0a                	jne    f010f433 <tst_dyn_alloc+0xc2>
	{
		test_alloc_block_NF();
f010f429:	e8 eb 16 00 00       	call   f0110b19 <test_alloc_block_NF>
f010f42e:	e9 8e 00 00 00       	jmp    f010f4c1 <tst_dyn_alloc+0x150>
	}
	// Test 5 Example for free_block: tstdynalloc freeFF
	else if(strcmp(arguments[1], "freeff") == 0)
f010f433:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f436:	83 c0 04             	add    $0x4,%eax
f010f439:	8b 00                	mov    (%eax),%eax
f010f43b:	83 ec 08             	sub    $0x8,%esp
f010f43e:	68 f6 9b 12 f0       	push   $0xf0129bf6
f010f443:	50                   	push   %eax
f010f444:	e8 01 32 01 00       	call   f012264a <strcmp>
f010f449:	83 c4 10             	add    $0x10,%esp
f010f44c:	85 c0                	test   %eax,%eax
f010f44e:	75 07                	jne    f010f457 <tst_dyn_alloc+0xe6>
	{
		test_free_block_FF();
f010f450:	e8 ca 16 00 00       	call   f0110b1f <test_free_block_FF>
f010f455:	eb 6a                	jmp    f010f4c1 <tst_dyn_alloc+0x150>
	}
	// Test 6 Example for free_block: tstdynalloc freeBF
	else if(strcmp(arguments[1], "freebf") == 0)
f010f457:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f45a:	83 c0 04             	add    $0x4,%eax
f010f45d:	8b 00                	mov    (%eax),%eax
f010f45f:	83 ec 08             	sub    $0x8,%esp
f010f462:	68 fd 9b 12 f0       	push   $0xf0129bfd
f010f467:	50                   	push   %eax
f010f468:	e8 dd 31 01 00       	call   f012264a <strcmp>
f010f46d:	83 c4 10             	add    $0x10,%esp
f010f470:	85 c0                	test   %eax,%eax
f010f472:	75 07                	jne    f010f47b <tst_dyn_alloc+0x10a>
	{
		test_free_block_BF();
f010f474:	e8 0d 23 00 00       	call   f0111786 <test_free_block_BF>
f010f479:	eb 46                	jmp    f010f4c1 <tst_dyn_alloc+0x150>
	}
	// Test 7 Example for free_block: tstdynalloc freeNF
	else if(strcmp(arguments[1], "freenf") == 0)
f010f47b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f47e:	83 c0 04             	add    $0x4,%eax
f010f481:	8b 00                	mov    (%eax),%eax
f010f483:	83 ec 08             	sub    $0x8,%esp
f010f486:	68 04 9c 12 f0       	push   $0xf0129c04
f010f48b:	50                   	push   %eax
f010f48c:	e8 b9 31 01 00       	call   f012264a <strcmp>
f010f491:	83 c4 10             	add    $0x10,%esp
f010f494:	85 c0                	test   %eax,%eax
f010f496:	75 07                	jne    f010f49f <tst_dyn_alloc+0x12e>
	{
		test_free_block_NF();
f010f498:	e8 60 2f 00 00       	call   f01123fd <test_free_block_NF>
f010f49d:	eb 22                	jmp    f010f4c1 <tst_dyn_alloc+0x150>
	}
	// Test 8 Example for realloc_block_ff: tstdynalloc reallocFF
	else if(strcmp(arguments[1], "reallocff") == 0)
f010f49f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f4a2:	83 c0 04             	add    $0x4,%eax
f010f4a5:	8b 00                	mov    (%eax),%eax
f010f4a7:	83 ec 08             	sub    $0x8,%esp
f010f4aa:	68 0b 9c 12 f0       	push   $0xf0129c0b
f010f4af:	50                   	push   %eax
f010f4b0:	e8 95 31 01 00       	call   f012264a <strcmp>
f010f4b5:	83 c4 10             	add    $0x10,%esp
f010f4b8:	85 c0                	test   %eax,%eax
f010f4ba:	75 05                	jne    f010f4c1 <tst_dyn_alloc+0x150>
	{
		test_realloc_block_FF();
f010f4bc:	e8 59 2f 00 00       	call   f011241a <test_realloc_block_FF>
		//test_realloc_block_FF_COMPLETE();
	}
	return 0;
f010f4c1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f4c6:	c9                   	leave  
f010f4c7:	c3                   	ret    

f010f4c8 <tst_chunks>:

int tst_chunks(int number_of_arguments, char **arguments)
{
f010f4c8:	55                   	push   %ebp
f010f4c9:	89 e5                	mov    %esp,%ebp
f010f4cb:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010f4ce:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010f4d2:	74 1a                	je     f010f4ee <tst_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f010f4d4:	83 ec 0c             	sub    $0xc,%esp
f010f4d7:	68 18 9c 12 f0       	push   $0xf0129c18
f010f4dc:	e8 8b 1a ff ff       	call   f0100f6c <cprintf>
f010f4e1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f4e4:	b8 00 00 00 00       	mov    $0x0,%eax
f010f4e9:	e9 e1 00 00 00       	jmp    f010f5cf <tst_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f010f4ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f4f1:	83 c0 04             	add    $0x4,%eax
f010f4f4:	8b 00                	mov    (%eax),%eax
f010f4f6:	83 ec 08             	sub    $0x8,%esp
f010f4f9:	68 51 9c 12 f0       	push   $0xf0129c51
f010f4fe:	50                   	push   %eax
f010f4ff:	e8 46 31 01 00       	call   f012264a <strcmp>
f010f504:	83 c4 10             	add    $0x10,%esp
f010f507:	85 c0                	test   %eax,%eax
f010f509:	75 0a                	jne    f010f515 <tst_chunks+0x4d>
	{
		test_cut_paste_pages();
f010f50b:	e8 ff 4a 00 00       	call   f011400f <test_cut_paste_pages>
f010f510:	e9 b5 00 00 00       	jmp    f010f5ca <tst_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f010f515:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f518:	83 c0 04             	add    $0x4,%eax
f010f51b:	8b 00                	mov    (%eax),%eax
f010f51d:	83 ec 08             	sub    $0x8,%esp
f010f520:	68 5a 9c 12 f0       	push   $0xf0129c5a
f010f525:	50                   	push   %eax
f010f526:	e8 1f 31 01 00       	call   f012264a <strcmp>
f010f52b:	83 c4 10             	add    $0x10,%esp
f010f52e:	85 c0                	test   %eax,%eax
f010f530:	75 0a                	jne    f010f53c <tst_chunks+0x74>
	{
		test_copy_paste_chunk();
f010f532:	e8 23 55 00 00       	call   f0114a5a <test_copy_paste_chunk>
f010f537:	e9 8e 00 00 00       	jmp    f010f5ca <tst_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f010f53c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f53f:	83 c0 04             	add    $0x4,%eax
f010f542:	8b 00                	mov    (%eax),%eax
f010f544:	83 ec 08             	sub    $0x8,%esp
f010f547:	68 64 9c 12 f0       	push   $0xf0129c64
f010f54c:	50                   	push   %eax
f010f54d:	e8 f8 30 01 00       	call   f012264a <strcmp>
f010f552:	83 c4 10             	add    $0x10,%esp
f010f555:	85 c0                	test   %eax,%eax
f010f557:	75 07                	jne    f010f560 <tst_chunks+0x98>
	{
		test_share_chunk();
f010f559:	e8 fa 65 00 00       	call   f0115b58 <test_share_chunk>
f010f55e:	eb 6a                	jmp    f010f5ca <tst_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f010f560:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f563:	83 c0 04             	add    $0x4,%eax
f010f566:	8b 00                	mov    (%eax),%eax
f010f568:	83 ec 08             	sub    $0x8,%esp
f010f56b:	68 6a 9c 12 f0       	push   $0xf0129c6a
f010f570:	50                   	push   %eax
f010f571:	e8 d4 30 01 00       	call   f012264a <strcmp>
f010f576:	83 c4 10             	add    $0x10,%esp
f010f579:	85 c0                	test   %eax,%eax
f010f57b:	75 07                	jne    f010f584 <tst_chunks+0xbc>
	{
		test_allocate_chunk();
f010f57d:	e8 fe 6f 00 00       	call   f0116580 <test_allocate_chunk>
f010f582:	eb 46                	jmp    f010f5ca <tst_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f010f584:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f587:	83 c0 04             	add    $0x4,%eax
f010f58a:	8b 00                	mov    (%eax),%eax
f010f58c:	83 ec 08             	sub    $0x8,%esp
f010f58f:	68 73 9c 12 f0       	push   $0xf0129c73
f010f594:	50                   	push   %eax
f010f595:	e8 b0 30 01 00       	call   f012264a <strcmp>
f010f59a:	83 c4 10             	add    $0x10,%esp
f010f59d:	85 c0                	test   %eax,%eax
f010f59f:	75 07                	jne    f010f5a8 <tst_chunks+0xe0>
	{
		test_calculate_required_frames();
f010f5a1:	e8 e1 78 00 00       	call   f0116e87 <test_calculate_required_frames>
f010f5a6:	eb 22                	jmp    f010f5ca <tst_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f010f5a8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f5ab:	83 c0 04             	add    $0x4,%eax
f010f5ae:	8b 00                	mov    (%eax),%eax
f010f5b0:	83 ec 08             	sub    $0x8,%esp
f010f5b3:	68 82 9c 12 f0       	push   $0xf0129c82
f010f5b8:	50                   	push   %eax
f010f5b9:	e8 8c 30 01 00       	call   f012264a <strcmp>
f010f5be:	83 c4 10             	add    $0x10,%esp
f010f5c1:	85 c0                	test   %eax,%eax
f010f5c3:	75 05                	jne    f010f5ca <tst_chunks+0x102>
	{
		test_calculate_allocated_space();
f010f5c5:	e8 31 81 00 00       	call   f01176fb <test_calculate_allocated_space>
	}
	return 0;
f010f5ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f5cf:	c9                   	leave  
f010f5d0:	c3                   	ret    

f010f5d1 <tst_paging_manipulation>:

int tst_paging_manipulation(int number_of_arguments, char **arguments)
{
f010f5d1:	55                   	push   %ebp
f010f5d2:	89 e5                	mov    %esp,%ebp
f010f5d4:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010f5d7:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010f5db:	74 1a                	je     f010f5f7 <tst_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f010f5dd:	83 ec 0c             	sub    $0xc,%esp
f010f5e0:	68 94 9c 12 f0       	push   $0xf0129c94
f010f5e5:	e8 82 19 ff ff       	call   f0100f6c <cprintf>
f010f5ea:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f5ed:	b8 00 00 00 00       	mov    $0x0,%eax
f010f5f2:	e9 ba 00 00 00       	jmp    f010f6b1 <tst_paging_manipulation+0xe0>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f010f5f7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f5fa:	83 c0 04             	add    $0x4,%eax
f010f5fd:	8b 00                	mov    (%eax),%eax
f010f5ff:	83 ec 08             	sub    $0x8,%esp
f010f602:	68 ca 9c 12 f0       	push   $0xf0129cca
f010f607:	50                   	push   %eax
f010f608:	e8 3d 30 01 00       	call   f012264a <strcmp>
f010f60d:	83 c4 10             	add    $0x10,%esp
f010f610:	85 c0                	test   %eax,%eax
f010f612:	75 0a                	jne    f010f61e <tst_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f010f614:	e8 69 44 00 00       	call   f0113a82 <test_pt_set_page_permissions>
f010f619:	e9 8e 00 00 00       	jmp    f010f6ac <tst_paging_manipulation+0xdb>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f010f61e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f621:	83 c0 04             	add    $0x4,%eax
f010f624:	8b 00                	mov    (%eax),%eax
f010f626:	83 ec 08             	sub    $0x8,%esp
f010f629:	68 d2 9c 12 f0       	push   $0xf0129cd2
f010f62e:	50                   	push   %eax
f010f62f:	e8 16 30 01 00       	call   f012264a <strcmp>
f010f634:	83 c4 10             	add    $0x10,%esp
f010f637:	85 c0                	test   %eax,%eax
f010f639:	75 07                	jne    f010f642 <tst_paging_manipulation+0x71>
	{
		test_pt_set_page_permissions_invalid_va();
f010f63b:	e8 b1 46 00 00       	call   f0113cf1 <test_pt_set_page_permissions_invalid_va>
f010f640:	eb 6a                	jmp    f010f6ac <tst_paging_manipulation+0xdb>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f010f642:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f645:	83 c0 04             	add    $0x4,%eax
f010f648:	8b 00                	mov    (%eax),%eax
f010f64a:	83 ec 08             	sub    $0x8,%esp
f010f64d:	68 da 9c 12 f0       	push   $0xf0129cda
f010f652:	50                   	push   %eax
f010f653:	e8 f2 2f 01 00       	call   f012264a <strcmp>
f010f658:	83 c4 10             	add    $0x10,%esp
f010f65b:	85 c0                	test   %eax,%eax
f010f65d:	75 07                	jne    f010f666 <tst_paging_manipulation+0x95>
	{
		test_pt_get_page_permissions();
f010f65f:	e8 d6 46 00 00       	call   f0113d3a <test_pt_get_page_permissions>
f010f664:	eb 46                	jmp    f010f6ac <tst_paging_manipulation+0xdb>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f010f666:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f669:	83 c0 04             	add    $0x4,%eax
f010f66c:	8b 00                	mov    (%eax),%eax
f010f66e:	83 ec 08             	sub    $0x8,%esp
f010f671:	68 e2 9c 12 f0       	push   $0xf0129ce2
f010f676:	50                   	push   %eax
f010f677:	e8 ce 2f 01 00       	call   f012264a <strcmp>
f010f67c:	83 c4 10             	add    $0x10,%esp
f010f67f:	85 c0                	test   %eax,%eax
f010f681:	75 07                	jne    f010f68a <tst_paging_manipulation+0xb9>
	{
		test_pt_clear_page_table_entry();
f010f683:	e8 f6 47 00 00       	call   f0113e7e <test_pt_clear_page_table_entry>
f010f688:	eb 22                	jmp    f010f6ac <tst_paging_manipulation+0xdb>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f010f68a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f68d:	83 c0 04             	add    $0x4,%eax
f010f690:	8b 00                	mov    (%eax),%eax
f010f692:	83 ec 08             	sub    $0x8,%esp
f010f695:	68 e9 9c 12 f0       	push   $0xf0129ce9
f010f69a:	50                   	push   %eax
f010f69b:	e8 aa 2f 01 00       	call   f012264a <strcmp>
f010f6a0:	83 c4 10             	add    $0x10,%esp
f010f6a3:	85 c0                	test   %eax,%eax
f010f6a5:	75 05                	jne    f010f6ac <tst_paging_manipulation+0xdb>
	{
		test_pt_clear_page_table_entry_invalid_va();
f010f6a7:	e8 2b 49 00 00       	call   f0113fd7 <test_pt_clear_page_table_entry_invalid_va>
	// Test 4-Convert virtual to physical: tstpg v2p
//	else if(strcmp(arguments[1], "v2p") == 0)
//	{
//		test_virtual_to_physical();
//	}
	return 0;
f010f6ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f6b1:	c9                   	leave  
f010f6b2:	c3                   	ret    

f010f6b3 <tst_kheap>:

int tst_kheap(int number_of_arguments, char **arguments)
{
f010f6b3:	55                   	push   %ebp
f010f6b4:	89 e5                	mov    %esp,%ebp
f010f6b6:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f010f6b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f6bc:	83 c0 08             	add    $0x8,%eax
f010f6bf:	8b 00                	mov    (%eax),%eax
f010f6c1:	83 ec 08             	sub    $0x8,%esp
f010f6c4:	68 f0 9c 12 f0       	push   $0xf0129cf0
f010f6c9:	50                   	push   %eax
f010f6ca:	e8 7b 2f 01 00       	call   f012264a <strcmp>
f010f6cf:	83 c4 10             	add    $0x10,%esp
f010f6d2:	85 c0                	test   %eax,%eax
f010f6d4:	75 20                	jne    f010f6f6 <tst_kheap+0x43>
f010f6d6:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010f6da:	74 1a                	je     f010f6f6 <tst_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f010f6dc:	83 ec 0c             	sub    $0xc,%esp
f010f6df:	68 f8 9c 12 f0       	push   $0xf0129cf8
f010f6e4:	e8 83 18 ff ff       	call   f0100f6c <cprintf>
f010f6e9:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f6ec:	b8 00 00 00 00       	mov    $0x0,%eax
f010f6f1:	e9 f6 03 00 00       	jmp    f010faec <tst_kheap+0x439>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f010f6f6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f6f9:	83 c0 08             	add    $0x8,%eax
f010f6fc:	8b 00                	mov    (%eax),%eax
f010f6fe:	83 ec 08             	sub    $0x8,%esp
f010f701:	68 f0 9c 12 f0       	push   $0xf0129cf0
f010f706:	50                   	push   %eax
f010f707:	e8 3e 2f 01 00       	call   f012264a <strcmp>
f010f70c:	83 c4 10             	add    $0x10,%esp
f010f70f:	85 c0                	test   %eax,%eax
f010f711:	74 43                	je     f010f756 <tst_kheap+0xa3>
f010f713:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010f717:	74 3d                	je     f010f756 <tst_kheap+0xa3>
	{
		if (strcmp(arguments[2], "krealloc") != 0 && number_of_arguments != 5)
f010f719:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f71c:	83 c0 08             	add    $0x8,%eax
f010f71f:	8b 00                	mov    (%eax),%eax
f010f721:	83 ec 08             	sub    $0x8,%esp
f010f724:	68 48 9d 12 f0       	push   $0xf0129d48
f010f729:	50                   	push   %eax
f010f72a:	e8 1b 2f 01 00       	call   f012264a <strcmp>
f010f72f:	83 c4 10             	add    $0x10,%esp
f010f732:	85 c0                	test   %eax,%eax
f010f734:	74 20                	je     f010f756 <tst_kheap+0xa3>
f010f736:	83 7d 08 05          	cmpl   $0x5,0x8(%ebp)
f010f73a:	74 1a                	je     f010f756 <tst_kheap+0xa3>
		{
			cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> <testname>\n") ;
f010f73c:	83 ec 0c             	sub    $0xc,%esp
f010f73f:	68 54 9d 12 f0       	push   $0xf0129d54
f010f744:	e8 23 18 ff ff       	call   f0100f6c <cprintf>
f010f749:	83 c4 10             	add    $0x10,%esp
			return 0;
f010f74c:	b8 00 00 00 00       	mov    $0x0,%eax
f010f751:	e9 96 03 00 00       	jmp    f010faec <tst_kheap+0x439>
		}
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f010f756:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f759:	83 c0 04             	add    $0x4,%eax
f010f75c:	8b 00                	mov    (%eax),%eax
f010f75e:	83 ec 08             	sub    $0x8,%esp
f010f761:	68 99 9d 12 f0       	push   $0xf0129d99
f010f766:	50                   	push   %eax
f010f767:	e8 de 2e 01 00       	call   f012264a <strcmp>
f010f76c:	83 c4 10             	add    $0x10,%esp
f010f76f:	85 c0                	test   %eax,%eax
f010f771:	74 1d                	je     f010f790 <tst_kheap+0xdd>
f010f773:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f776:	83 c0 04             	add    $0x4,%eax
f010f779:	8b 00                	mov    (%eax),%eax
f010f77b:	83 ec 08             	sub    $0x8,%esp
f010f77e:	68 9c 9d 12 f0       	push   $0xf0129d9c
f010f783:	50                   	push   %eax
f010f784:	e8 c1 2e 01 00       	call   f012264a <strcmp>
f010f789:	83 c4 10             	add    $0x10,%esp
f010f78c:	85 c0                	test   %eax,%eax
f010f78e:	75 1a                	jne    f010f7aa <tst_kheap+0xf7>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f010f790:	e8 6d f8 ff ff       	call   f010f002 <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f010f795:	83 ec 0c             	sub    $0xc,%esp
f010f798:	68 a0 9d 12 f0       	push   $0xf0129da0
f010f79d:	e8 ca 17 ff ff       	call   f0100f6c <cprintf>
f010f7a2:	83 c4 10             	add    $0x10,%esp
f010f7a5:	e9 a0 00 00 00       	jmp    f010f84a <tst_kheap+0x197>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f010f7aa:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f7ad:	83 c0 04             	add    $0x4,%eax
f010f7b0:	8b 00                	mov    (%eax),%eax
f010f7b2:	83 ec 08             	sub    $0x8,%esp
f010f7b5:	68 cd 9d 12 f0       	push   $0xf0129dcd
f010f7ba:	50                   	push   %eax
f010f7bb:	e8 8a 2e 01 00       	call   f012264a <strcmp>
f010f7c0:	83 c4 10             	add    $0x10,%esp
f010f7c3:	85 c0                	test   %eax,%eax
f010f7c5:	74 1d                	je     f010f7e4 <tst_kheap+0x131>
f010f7c7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f7ca:	83 c0 04             	add    $0x4,%eax
f010f7cd:	8b 00                	mov    (%eax),%eax
f010f7cf:	83 ec 08             	sub    $0x8,%esp
f010f7d2:	68 d0 9d 12 f0       	push   $0xf0129dd0
f010f7d7:	50                   	push   %eax
f010f7d8:	e8 6d 2e 01 00       	call   f012264a <strcmp>
f010f7dd:	83 c4 10             	add    $0x10,%esp
f010f7e0:	85 c0                	test   %eax,%eax
f010f7e2:	75 17                	jne    f010f7fb <tst_kheap+0x148>
	{
		setKHeapPlacementStrategyBESTFIT();
f010f7e4:	e8 29 f8 ff ff       	call   f010f012 <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010f7e9:	83 ec 0c             	sub    $0xc,%esp
f010f7ec:	68 d4 9d 12 f0       	push   $0xf0129dd4
f010f7f1:	e8 76 17 ff ff       	call   f0100f6c <cprintf>
f010f7f6:	83 c4 10             	add    $0x10,%esp
f010f7f9:	eb 4f                	jmp    f010f84a <tst_kheap+0x197>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f010f7fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f7fe:	83 c0 04             	add    $0x4,%eax
f010f801:	8b 00                	mov    (%eax),%eax
f010f803:	83 ec 08             	sub    $0x8,%esp
f010f806:	68 00 9e 12 f0       	push   $0xf0129e00
f010f80b:	50                   	push   %eax
f010f80c:	e8 39 2e 01 00       	call   f012264a <strcmp>
f010f811:	83 c4 10             	add    $0x10,%esp
f010f814:	85 c0                	test   %eax,%eax
f010f816:	74 1d                	je     f010f835 <tst_kheap+0x182>
f010f818:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f81b:	83 c0 04             	add    $0x4,%eax
f010f81e:	8b 00                	mov    (%eax),%eax
f010f820:	83 ec 08             	sub    $0x8,%esp
f010f823:	68 03 9e 12 f0       	push   $0xf0129e03
f010f828:	50                   	push   %eax
f010f829:	e8 1c 2e 01 00       	call   f012264a <strcmp>
f010f82e:	83 c4 10             	add    $0x10,%esp
f010f831:	85 c0                	test   %eax,%eax
f010f833:	75 15                	jne    f010f84a <tst_kheap+0x197>
	{
		setKHeapPlacementStrategyNEXTFIT();
f010f835:	e8 e8 f7 ff ff       	call   f010f022 <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010f83a:	83 ec 0c             	sub    $0xc,%esp
f010f83d:	68 08 9e 12 f0       	push   $0xf0129e08
f010f842:	e8 25 17 ff ff       	call   f0100f6c <cprintf>
f010f847:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tst kheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f010f84a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f84d:	83 c0 08             	add    $0x8,%eax
f010f850:	8b 00                	mov    (%eax),%eax
f010f852:	83 ec 08             	sub    $0x8,%esp
f010f855:	68 f0 9c 12 f0       	push   $0xf0129cf0
f010f85a:	50                   	push   %eax
f010f85b:	e8 ea 2d 01 00       	call   f012264a <strcmp>
f010f860:	83 c4 10             	add    $0x10,%esp
f010f863:	85 c0                	test   %eax,%eax
f010f865:	0f 85 13 01 00 00    	jne    f010f97e <tst_kheap+0x2cb>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f010f86b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f86e:	83 c0 0c             	add    $0xc,%eax
f010f871:	8b 00                	mov    (%eax),%eax
f010f873:	83 ec 04             	sub    $0x4,%esp
f010f876:	6a 0a                	push   $0xa
f010f878:	6a 00                	push   $0x0
f010f87a:	50                   	push   %eax
f010f87b:	e8 1e 30 01 00       	call   f012289e <strtol>
f010f880:	83 c4 10             	add    $0x10,%esp
f010f883:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f010f886:	e8 a7 f7 ff ff       	call   f010f032 <isKHeapPlacementStrategyFIRSTFIT>
f010f88b:	84 c0                	test   %al,%al
f010f88d:	74 54                	je     f010f8e3 <tst_kheap+0x230>
		{
			if (testNum == 0)
f010f88f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010f893:	75 1a                	jne    f010f8af <tst_kheap+0x1fc>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010f895:	83 ec 0c             	sub    $0xc,%esp
f010f898:	68 34 9e 12 f0       	push   $0xf0129e34
f010f89d:	e8 ca 16 ff ff       	call   f0100f6c <cprintf>
f010f8a2:	83 c4 10             	add    $0x10,%esp
				return 0;
f010f8a5:	b8 00 00 00 00       	mov    $0x0,%eax
f010f8aa:	e9 3d 02 00 00       	jmp    f010faec <tst_kheap+0x439>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f010f8af:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010f8b3:	75 0a                	jne    f010f8bf <tst_kheap+0x20c>
				test_kmalloc();
f010f8b5:	e8 1f a8 00 00       	call   f011a0d9 <test_kmalloc>
f010f8ba:	e9 b5 00 00 00       	jmp    f010f974 <tst_kheap+0x2c1>
			else if (testNum == 2)
f010f8bf:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010f8c3:	75 0a                	jne    f010f8cf <tst_kheap+0x21c>
				test_kmalloc_firstfit1();
f010f8c5:	e8 29 b3 00 00       	call   f011abf3 <test_kmalloc_firstfit1>
f010f8ca:	e9 a5 00 00 00       	jmp    f010f974 <tst_kheap+0x2c1>
			else if (testNum == 3)
f010f8cf:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010f8d3:	0f 85 9b 00 00 00    	jne    f010f974 <tst_kheap+0x2c1>
				test_kmalloc_firstfit2();
f010f8d9:	e8 a9 bd 00 00       	call   f011b687 <test_kmalloc_firstfit2>
f010f8de:	e9 91 00 00 00       	jmp    f010f974 <tst_kheap+0x2c1>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f010f8e3:	e8 5f f7 ff ff       	call   f010f047 <isKHeapPlacementStrategyBESTFIT>
f010f8e8:	84 c0                	test   %al,%al
f010f8ea:	74 47                	je     f010f933 <tst_kheap+0x280>
		{
			if (testNum == 0)
f010f8ec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010f8f0:	75 1a                	jne    f010f90c <tst_kheap+0x259>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f010f8f2:	83 ec 0c             	sub    $0xc,%esp
f010f8f5:	68 84 9e 12 f0       	push   $0xf0129e84
f010f8fa:	e8 6d 16 ff ff       	call   f0100f6c <cprintf>
f010f8ff:	83 c4 10             	add    $0x10,%esp
				return 0;
f010f902:	b8 00 00 00 00       	mov    $0x0,%eax
f010f907:	e9 e0 01 00 00       	jmp    f010faec <tst_kheap+0x439>
			}
			if (testNum == 1)
f010f90c:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010f910:	75 07                	jne    f010f919 <tst_kheap+0x266>
				test_kmalloc();
f010f912:	e8 c2 a7 00 00       	call   f011a0d9 <test_kmalloc>
f010f917:	eb 5b                	jmp    f010f974 <tst_kheap+0x2c1>
			else if (testNum == 2)
f010f919:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010f91d:	75 07                	jne    f010f926 <tst_kheap+0x273>
				test_kmalloc_bestfit1();
f010f91f:	e8 30 03 01 00       	call   f011fc54 <test_kmalloc_bestfit1>
f010f924:	eb 4e                	jmp    f010f974 <tst_kheap+0x2c1>
			else if (testNum == 3)
f010f926:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010f92a:	75 48                	jne    f010f974 <tst_kheap+0x2c1>
				test_kmalloc_bestfit2();
f010f92c:	e8 40 03 01 00       	call   f011fc71 <test_kmalloc_bestfit2>
f010f931:	eb 41                	jmp    f010f974 <tst_kheap+0x2c1>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f010f933:	e8 24 f7 ff ff       	call   f010f05c <isKHeapPlacementStrategyNEXTFIT>
f010f938:	84 c0                	test   %al,%al
f010f93a:	74 38                	je     f010f974 <tst_kheap+0x2c1>
		{
			if (testNum == 0)
f010f93c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010f940:	75 1a                	jne    f010f95c <tst_kheap+0x2a9>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f010f942:	83 ec 0c             	sub    $0xc,%esp
f010f945:	68 d4 9e 12 f0       	push   $0xf0129ed4
f010f94a:	e8 1d 16 ff ff       	call   f0100f6c <cprintf>
f010f94f:	83 c4 10             	add    $0x10,%esp
				return 0;
f010f952:	b8 00 00 00 00       	mov    $0x0,%eax
f010f957:	e9 90 01 00 00       	jmp    f010faec <tst_kheap+0x439>
			}
			//Test cont. allocation
			if (testNum == 1)
f010f95c:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010f960:	75 07                	jne    f010f969 <tst_kheap+0x2b6>
				test_kmalloc();
f010f962:	e8 72 a7 00 00       	call   f011a0d9 <test_kmalloc>
f010f967:	eb 0b                	jmp    f010f974 <tst_kheap+0x2c1>
			//Test nextfit strategy
			else if (testNum == 2)
f010f969:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010f96d:	75 05                	jne    f010f974 <tst_kheap+0x2c1>
				test_kmalloc_nextfit();
f010f96f:	e8 c0 02 01 00       	call   f011fc34 <test_kmalloc_nextfit>
		}
		return 0;
f010f974:	b8 00 00 00 00       	mov    $0x0,%eax
f010f979:	e9 6e 01 00 00       	jmp    f010faec <tst_kheap+0x439>
	}
	// Test 2-kfree: tst kheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f010f97e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f981:	83 c0 08             	add    $0x8,%eax
f010f984:	8b 00                	mov    (%eax),%eax
f010f986:	83 ec 08             	sub    $0x8,%esp
f010f989:	68 22 9f 12 f0       	push   $0xf0129f22
f010f98e:	50                   	push   %eax
f010f98f:	e8 b6 2c 01 00       	call   f012264a <strcmp>
f010f994:	83 c4 10             	add    $0x10,%esp
f010f997:	85 c0                	test   %eax,%eax
f010f999:	75 28                	jne    f010f9c3 <tst_kheap+0x310>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f010f99b:	e8 a7 f6 ff ff       	call   f010f047 <isKHeapPlacementStrategyBESTFIT>
f010f9a0:	84 c0                	test   %al,%al
f010f9a2:	75 09                	jne    f010f9ad <tst_kheap+0x2fa>
f010f9a4:	e8 89 f6 ff ff       	call   f010f032 <isKHeapPlacementStrategyFIRSTFIT>
f010f9a9:	84 c0                	test   %al,%al
f010f9ab:	74 07                	je     f010f9b4 <tst_kheap+0x301>
		{
			test_kfree_bestfirstfit();
f010f9ad:	e8 8e c7 00 00       	call   f011c140 <test_kfree_bestfirstfit>
f010f9b2:	eb 05                	jmp    f010f9b9 <tst_kheap+0x306>
		}
		else //NEXT & CONT
		{
			test_kfree();
f010f9b4:	e8 f5 02 01 00       	call   f011fcae <test_kfree>
		}
		return 0;
f010f9b9:	b8 00 00 00 00       	mov    $0x0,%eax
f010f9be:	e9 29 01 00 00       	jmp    f010faec <tst_kheap+0x439>
	}
	// Test 3-kphysaddr: tst kheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f010f9c3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f9c6:	83 c0 08             	add    $0x8,%eax
f010f9c9:	8b 00                	mov    (%eax),%eax
f010f9cb:	83 ec 08             	sub    $0x8,%esp
f010f9ce:	68 28 9f 12 f0       	push   $0xf0129f28
f010f9d3:	50                   	push   %eax
f010f9d4:	e8 71 2c 01 00       	call   f012264a <strcmp>
f010f9d9:	83 c4 10             	add    $0x10,%esp
f010f9dc:	85 c0                	test   %eax,%eax
f010f9de:	75 0f                	jne    f010f9ef <tst_kheap+0x33c>
	{
		test_kheap_phys_addr();
f010f9e0:	e8 66 dd 00 00       	call   f011d74b <test_kheap_phys_addr>
		return 0;
f010f9e5:	b8 00 00 00 00       	mov    $0x0,%eax
f010f9ea:	e9 fd 00 00 00       	jmp    f010faec <tst_kheap+0x439>
	}
	// Test 4-kvirtaddr: tst kheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f010f9ef:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f9f2:	83 c0 08             	add    $0x8,%eax
f010f9f5:	8b 00                	mov    (%eax),%eax
f010f9f7:	83 ec 08             	sub    $0x8,%esp
f010f9fa:	68 32 9f 12 f0       	push   $0xf0129f32
f010f9ff:	50                   	push   %eax
f010fa00:	e8 45 2c 01 00       	call   f012264a <strcmp>
f010fa05:	83 c4 10             	add    $0x10,%esp
f010fa08:	85 c0                	test   %eax,%eax
f010fa0a:	75 0f                	jne    f010fa1b <tst_kheap+0x368>
	{
		test_kheap_virt_addr();
f010fa0c:	e8 b4 ea 00 00       	call   f011e4c5 <test_kheap_virt_addr>
		return 0;
f010fa11:	b8 00 00 00 00       	mov    $0x0,%eax
f010fa16:	e9 d1 00 00 00       	jmp    f010faec <tst_kheap+0x439>
	}
	// Test 5-krealloc: tst kheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010fa1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010fa1e:	83 c0 08             	add    $0x8,%eax
f010fa21:	8b 00                	mov    (%eax),%eax
f010fa23:	83 ec 08             	sub    $0x8,%esp
f010fa26:	68 48 9d 12 f0       	push   $0xf0129d48
f010fa2b:	50                   	push   %eax
f010fa2c:	e8 19 2c 01 00       	call   f012264a <strcmp>
f010fa31:	83 c4 10             	add    $0x10,%esp
f010fa34:	85 c0                	test   %eax,%eax
f010fa36:	0f 85 89 00 00 00    	jne    f010fac5 <tst_kheap+0x412>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f010fa3c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010fa3f:	83 c0 0c             	add    $0xc,%eax
f010fa42:	8b 00                	mov    (%eax),%eax
f010fa44:	83 ec 04             	sub    $0x4,%esp
f010fa47:	6a 0a                	push   $0xa
f010fa49:	6a 00                	push   $0x0
f010fa4b:	50                   	push   %eax
f010fa4c:	e8 4d 2e 01 00       	call   f012289e <strtol>
f010fa51:	83 c4 10             	add    $0x10,%esp
f010fa54:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f010fa57:	e8 d6 f5 ff ff       	call   f010f032 <isKHeapPlacementStrategyFIRSTFIT>
f010fa5c:	84 c0                	test   %al,%al
f010fa5e:	74 42                	je     f010faa2 <tst_kheap+0x3ef>
		{
			if (testNum == 0)
f010fa60:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fa64:	75 17                	jne    f010fa7d <tst_kheap+0x3ca>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010fa66:	83 ec 0c             	sub    $0xc,%esp
f010fa69:	68 34 9e 12 f0       	push   $0xf0129e34
f010fa6e:	e8 f9 14 ff ff       	call   f0100f6c <cprintf>
f010fa73:	83 c4 10             	add    $0x10,%esp
				return 0;
f010fa76:	b8 00 00 00 00       	mov    $0x0,%eax
f010fa7b:	eb 6f                	jmp    f010faec <tst_kheap+0x439>
			}
			if (testNum==1)
f010fa7d:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f010fa81:	75 07                	jne    f010fa8a <tst_kheap+0x3d7>
				test_krealloc_FF1();
f010fa83:	e8 0c 05 01 00       	call   f011ff94 <test_krealloc_FF1>
f010fa88:	eb 18                	jmp    f010faa2 <tst_kheap+0x3ef>
			else if (testNum==2)
f010fa8a:	83 7d f0 02          	cmpl   $0x2,-0x10(%ebp)
f010fa8e:	75 07                	jne    f010fa97 <tst_kheap+0x3e4>
				test_krealloc_FF2();
f010fa90:	e8 4c 05 01 00       	call   f011ffe1 <test_krealloc_FF2>
f010fa95:	eb 0b                	jmp    f010faa2 <tst_kheap+0x3ef>
			else if (testNum==3)
f010fa97:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f010fa9b:	75 05                	jne    f010faa2 <tst_kheap+0x3ef>
				test_krealloc_FF3();
f010fa9d:	e8 8c 05 01 00       	call   f012002e <test_krealloc_FF3>
		}
		if (isKHeapPlacementStrategyNEXTFIT())
f010faa2:	e8 b5 f5 ff ff       	call   f010f05c <isKHeapPlacementStrategyNEXTFIT>
f010faa7:	84 c0                	test   %al,%al
f010faa9:	74 05                	je     f010fab0 <tst_kheap+0x3fd>
		{
			test_krealloc();
f010faab:	e8 4a 04 01 00       	call   f011fefa <test_krealloc>
		}
		if (isKHeapPlacementStrategyBESTFIT())
f010fab0:	e8 92 f5 ff ff       	call   f010f047 <isKHeapPlacementStrategyBESTFIT>
f010fab5:	84 c0                	test   %al,%al
f010fab7:	74 05                	je     f010fabe <tst_kheap+0x40b>
		{
			test_krealloc_BF();
f010fab9:	e8 89 04 01 00       	call   f011ff47 <test_krealloc_BF>
		}
		return 0;
f010fabe:	b8 00 00 00 00       	mov    $0x0,%eax
f010fac3:	eb 27                	jmp    f010faec <tst_kheap+0x439>
	}
	// Test 6-sbr: tst kheap FF sbrk
	else if (strcmp(arguments[2], "sbrk") == 0)
f010fac5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010fac8:	83 c0 08             	add    $0x8,%eax
f010facb:	8b 00                	mov    (%eax),%eax
f010facd:	83 ec 08             	sub    $0x8,%esp
f010fad0:	68 3c 9f 12 f0       	push   $0xf0129f3c
f010fad5:	50                   	push   %eax
f010fad6:	e8 6f 2b 01 00       	call   f012264a <strcmp>
f010fadb:	83 c4 10             	add    $0x10,%esp
f010fade:	85 c0                	test   %eax,%eax
f010fae0:	75 05                	jne    f010fae7 <tst_kheap+0x434>
	{
		test_ksbrk();
f010fae2:	e8 78 f6 00 00       	call   f011f15f <test_ksbrk>
	}
	return 0;
f010fae7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010faec:	c9                   	leave  
f010faed:	c3                   	ret    

f010faee <check_block>:
short* startVAs[numOfAllocs*allocCntPerSize+1] ;
short* midVAs[numOfAllocs*allocCntPerSize+1] ;
short* endVAs[numOfAllocs*allocCntPerSize+1] ;

int check_block(void* va, void* expectedVA, uint32 expectedSize, uint8 expectedFlag)
{
f010faee:	55                   	push   %ebp
f010faef:	89 e5                	mov    %esp,%ebp
f010faf1:	83 ec 28             	sub    $0x28,%esp
f010faf4:	8b 45 14             	mov    0x14(%ebp),%eax
f010faf7:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//Check returned va
	if(va != expectedVA)
f010fafa:	8b 45 08             	mov    0x8(%ebp),%eax
f010fafd:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010fb00:	74 1d                	je     f010fb1f <check_block+0x31>
	{
		cprintf("wrong block address. Expected %x, Actual %x\n", expectedVA, va);
f010fb02:	83 ec 04             	sub    $0x4,%esp
f010fb05:	ff 75 08             	pushl  0x8(%ebp)
f010fb08:	ff 75 0c             	pushl  0xc(%ebp)
f010fb0b:	68 44 9f 12 f0       	push   $0xf0129f44
f010fb10:	e8 57 14 ff ff       	call   f0100f6c <cprintf>
f010fb15:	83 c4 10             	add    $0x10,%esp
		return 0;
f010fb18:	b8 00 00 00 00       	mov    $0x0,%eax
f010fb1d:	eb 55                	jmp    f010fb74 <check_block+0x86>
	}
	//Check header & footer
	uint32 header = *((uint32*)va-1);
f010fb1f:	8b 45 08             	mov    0x8(%ebp),%eax
f010fb22:	8b 40 fc             	mov    -0x4(%eax),%eax
f010fb25:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 footer = *((uint32*)(va + expectedSize - 8));
f010fb28:	8b 45 10             	mov    0x10(%ebp),%eax
f010fb2b:	8d 50 f8             	lea    -0x8(%eax),%edx
f010fb2e:	8b 45 08             	mov    0x8(%ebp),%eax
f010fb31:	01 d0                	add    %edx,%eax
f010fb33:	8b 00                	mov    (%eax),%eax
f010fb35:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 expectedData = expectedSize | expectedFlag ;
f010fb38:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f010fb3c:	0b 45 10             	or     0x10(%ebp),%eax
f010fb3f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(header != expectedData || footer != expectedData)
f010fb42:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fb45:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010fb48:	75 08                	jne    f010fb52 <check_block+0x64>
f010fb4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010fb4d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010fb50:	74 1d                	je     f010fb6f <check_block+0x81>
	{

		cprintf("wrong header/footer data. Expected %d, Actual H:%d F:%d\n", expectedData, header, footer);
f010fb52:	ff 75 f0             	pushl  -0x10(%ebp)
f010fb55:	ff 75 f4             	pushl  -0xc(%ebp)
f010fb58:	ff 75 ec             	pushl  -0x14(%ebp)
f010fb5b:	68 74 9f 12 f0       	push   $0xf0129f74
f010fb60:	e8 07 14 ff ff       	call   f0100f6c <cprintf>
f010fb65:	83 c4 10             	add    $0x10,%esp
		return 0;
f010fb68:	b8 00 00 00 00       	mov    $0x0,%eax
f010fb6d:	eb 05                	jmp    f010fb74 <check_block+0x86>
	}
	return 1;
f010fb6f:	b8 01 00 00 00       	mov    $0x1,%eax
}
f010fb74:	c9                   	leave  
f010fb75:	c3                   	ret    

f010fb76 <check_list_size>:
int check_list_size(uint32 expectedListSize)
{
f010fb76:	55                   	push   %ebp
f010fb77:	89 e5                	mov    %esp,%ebp
f010fb79:	83 ec 08             	sub    $0x8,%esp
	if (LIST_SIZE(&freeBlocksList) != expectedListSize)
f010fb7c:	a1 5c ff 59 f0       	mov    0xf059ff5c,%eax
f010fb81:	3b 45 08             	cmp    0x8(%ebp),%eax
f010fb84:	74 20                	je     f010fba6 <check_list_size+0x30>
	{
		cprintf("freeBlocksList: wrong size! expected %d, actual %d\n", expectedListSize, LIST_SIZE(&freeBlocksList));
f010fb86:	a1 5c ff 59 f0       	mov    0xf059ff5c,%eax
f010fb8b:	83 ec 04             	sub    $0x4,%esp
f010fb8e:	50                   	push   %eax
f010fb8f:	ff 75 08             	pushl  0x8(%ebp)
f010fb92:	68 b0 9f 12 f0       	push   $0xf0129fb0
f010fb97:	e8 d0 13 ff ff       	call   f0100f6c <cprintf>
f010fb9c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010fb9f:	b8 00 00 00 00       	mov    $0x0,%eax
f010fba4:	eb 05                	jmp    f010fbab <check_list_size+0x35>
	}
	return 1;
f010fba6:	b8 01 00 00 00       	mov    $0x1,%eax
}
f010fbab:	c9                   	leave  
f010fbac:	c3                   	ret    

f010fbad <test_initialize_dynamic_allocator>:
/***********************************************************************************************************************/

void test_initialize_dynamic_allocator()
{
f010fbad:	55                   	push   %ebp
f010fbae:	89 e5                	mov    %esp,%ebp
f010fbb0:	83 ec 28             	sub    $0x28,%esp
	panic("test_initialize_dynamic_allocator: the kernel heap should be diabled. make sure USE_KHEAP = 0");
	return;
#endif

	//write initial data at the start (for checking)
	int* tmp_ptr = (int*)KERNEL_HEAP_START;
f010fbb3:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
	*tmp_ptr = -1 ;
f010fbba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fbbd:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	*(tmp_ptr+1) = 1 ;
f010fbc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fbc6:	83 c0 04             	add    $0x4,%eax
f010fbc9:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

	uint32 initAllocatedSpace = 2*Mega;
f010fbcf:	c7 45 f0 00 00 20 00 	movl   $0x200000,-0x10(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010fbd6:	83 ec 08             	sub    $0x8,%esp
f010fbd9:	ff 75 f0             	pushl  -0x10(%ebp)
f010fbdc:	68 00 00 00 f6       	push   $0xf6000000
f010fbe1:	e8 27 35 01 00       	call   f012310d <initialize_dynamic_allocator>
f010fbe6:	83 c4 10             	add    $0x10,%esp


	//Check#1: Metadata
	uint32* daBeg = (uint32*) KERNEL_HEAP_START ;
f010fbe9:	c7 45 ec 00 00 00 f6 	movl   $0xf6000000,-0x14(%ebp)
	uint32* daEnd = (uint32*) (KERNEL_HEAP_START +  initAllocatedSpace - sizeof(int));
f010fbf0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010fbf3:	2d 04 00 00 0a       	sub    $0xa000004,%eax
f010fbf8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32* blkHeader = (uint32*) (KERNEL_HEAP_START + sizeof(int));
f010fbfb:	c7 45 e4 04 00 00 f6 	movl   $0xf6000004,-0x1c(%ebp)
	uint32* blkFooter = (uint32*) (KERNEL_HEAP_START +  initAllocatedSpace - 2*sizeof(int));
f010fc02:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010fc05:	2d 08 00 00 0a       	sub    $0xa000008,%eax
f010fc0a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (*daBeg != 1 || *daEnd != 1 || (*blkHeader != initAllocatedSpace - 2*sizeof(int))|| (*blkFooter != initAllocatedSpace - 2*sizeof(int)))
f010fc0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fc10:	8b 00                	mov    (%eax),%eax
f010fc12:	83 f8 01             	cmp    $0x1,%eax
f010fc15:	75 28                	jne    f010fc3f <test_initialize_dynamic_allocator+0x92>
f010fc17:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010fc1a:	8b 00                	mov    (%eax),%eax
f010fc1c:	83 f8 01             	cmp    $0x1,%eax
f010fc1f:	75 1e                	jne    f010fc3f <test_initialize_dynamic_allocator+0x92>
f010fc21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fc24:	8b 00                	mov    (%eax),%eax
f010fc26:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010fc29:	83 ea 08             	sub    $0x8,%edx
f010fc2c:	39 d0                	cmp    %edx,%eax
f010fc2e:	75 0f                	jne    f010fc3f <test_initialize_dynamic_allocator+0x92>
f010fc30:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010fc33:	8b 00                	mov    (%eax),%eax
f010fc35:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010fc38:	83 ea 08             	sub    $0x8,%edx
f010fc3b:	39 d0                	cmp    %edx,%eax
f010fc3d:	74 14                	je     f010fc53 <test_initialize_dynamic_allocator+0xa6>
	{
		panic("Content of header/footer and/or DA begin/end are not set correctly");
f010fc3f:	83 ec 04             	sub    $0x4,%esp
f010fc42:	68 e4 9f 12 f0       	push   $0xf0129fe4
f010fc47:	6a 54                	push   $0x54
f010fc49:	68 28 a0 12 f0       	push   $0xf012a028
f010fc4e:	e8 c7 06 ff ff       	call   f010031a <_panic>
	}
	if (LIST_SIZE(&freeBlocksList) != 1 || (uint32)LIST_FIRST(&freeBlocksList) != KERNEL_HEAP_START + 2*sizeof(int))
f010fc53:	a1 5c ff 59 f0       	mov    0xf059ff5c,%eax
f010fc58:	83 f8 01             	cmp    $0x1,%eax
f010fc5b:	75 0c                	jne    f010fc69 <test_initialize_dynamic_allocator+0xbc>
f010fc5d:	a1 50 ff 59 f0       	mov    0xf059ff50,%eax
f010fc62:	3d 08 00 00 f6       	cmp    $0xf6000008,%eax
f010fc67:	74 14                	je     f010fc7d <test_initialize_dynamic_allocator+0xd0>
	{
		panic("free block is not added correctly");
f010fc69:	83 ec 04             	sub    $0x4,%esp
f010fc6c:	68 4c a0 12 f0       	push   $0xf012a04c
f010fc71:	6a 58                	push   $0x58
f010fc73:	68 28 a0 12 f0       	push   $0xf012a028
f010fc78:	e8 9d 06 ff ff       	call   f010031a <_panic>
	}

	cprintf("Congratulations!! test initialize_dynamic_allocator completed successfully.\n");
f010fc7d:	83 ec 0c             	sub    $0xc,%esp
f010fc80:	68 70 a0 12 f0       	push   $0xf012a070
f010fc85:	e8 e2 12 ff ff       	call   f0100f6c <cprintf>
f010fc8a:	83 c4 10             	add    $0x10,%esp
}
f010fc8d:	90                   	nop
f010fc8e:	c9                   	leave  
f010fc8f:	c3                   	ret    

f010fc90 <test_initial_alloc>:


int test_initial_alloc(int ALLOC_STRATEGY)
{
f010fc90:	55                   	push   %ebp
f010fc91:	89 e5                	mov    %esp,%ebp
f010fc93:	83 ec 48             	sub    $0x48,%esp
#if USE_KHEAP
	panic("test_initial_alloc: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return 0;
#endif

	int eval = 0;
f010fc96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct = 1;
f010fc9d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int initAllocatedSpace = 3*Mega;
f010fca4:	c7 45 d0 00 00 30 00 	movl   $0x300000,-0x30(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010fcab:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010fcae:	83 ec 08             	sub    $0x8,%esp
f010fcb1:	50                   	push   %eax
f010fcb2:	68 00 00 00 f6       	push   $0xf6000000
f010fcb7:	e8 51 34 01 00       	call   f012310d <initialize_dynamic_allocator>
f010fcbc:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/*INITIAL ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010fcbf:	83 ec 0c             	sub    $0xc,%esp
f010fcc2:	68 c0 a0 12 f0       	push   $0xf012a0c0
f010fcc7:	e8 a0 12 ff ff       	call   f0100f6c <cprintf>
f010fccc:	83 c4 10             	add    $0x10,%esp

	is_correct = 1;
f010fccf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	va = alloc_block(3*initAllocatedSpace, ALLOC_STRATEGY);
f010fcd6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010fcd9:	89 c2                	mov    %eax,%edx
f010fcdb:	01 d2                	add    %edx,%edx
f010fcdd:	01 d0                	add    %edx,%eax
f010fcdf:	83 ec 08             	sub    $0x8,%esp
f010fce2:	ff 75 08             	pushl  0x8(%ebp)
f010fce5:	50                   	push   %eax
f010fce6:	e8 f5 32 01 00       	call   f0122fe0 <alloc_block>
f010fceb:	83 c4 10             	add    $0x10,%esp
f010fcee:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010fcf1:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010fcf5:	74 17                	je     f010fd0e <test_initial_alloc+0x7e>
	{
		is_correct = 0;
f010fcf7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #1: should not be allocated.\n");
f010fcfe:	83 ec 0c             	sub    $0xc,%esp
f010fd01:	68 fc a0 12 f0       	push   $0xf012a0fc
f010fd06:	e8 61 12 ff ff       	call   f0100f6c <cprintf>
f010fd0b:	83 c4 10             	add    $0x10,%esp
	}
	va = alloc_block(initAllocatedSpace, ALLOC_STRATEGY);
f010fd0e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010fd11:	83 ec 08             	sub    $0x8,%esp
f010fd14:	ff 75 08             	pushl  0x8(%ebp)
f010fd17:	50                   	push   %eax
f010fd18:	e8 c3 32 01 00       	call   f0122fe0 <alloc_block>
f010fd1d:	83 c4 10             	add    $0x10,%esp
f010fd20:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010fd23:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010fd27:	74 17                	je     f010fd40 <test_initial_alloc+0xb0>
	{
		is_correct = 0;
f010fd29:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #2: should not be allocated.\n");
f010fd30:	83 ec 0c             	sub    $0xc,%esp
f010fd33:	68 2c a1 12 f0       	push   $0xf012a12c
f010fd38:	e8 2f 12 ff ff       	call   f0100f6c <cprintf>
f010fd3d:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010fd40:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fd44:	74 04                	je     f010fd4a <test_initial_alloc+0xba>
	{
		eval += 5;
f010fd46:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 2: Try to allocate set of blocks with different sizes*/
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
f010fd4a:	83 ec 0c             	sub    $0xc,%esp
f010fd4d:	68 5c a1 12 f0       	push   $0xf012a15c
f010fd52:	e8 15 12 ff ff       	call   f0100f6c <cprintf>
f010fd57:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fd5a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	void* expectedVA;
	uint32 expectedNumFreeBlks;
	int totalSizes = 0;
f010fd61:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010fd68:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010fd6f:	eb 2a                	jmp    f010fd9b <test_initial_alloc+0x10b>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f010fd71:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010fd74:	8b 14 85 b8 ed 17 f0 	mov    -0xfe81248(,%eax,4),%edx
f010fd7b:	89 d0                	mov    %edx,%eax
f010fd7d:	c1 e0 02             	shl    $0x2,%eax
f010fd80:	01 d0                	add    %edx,%eax
f010fd82:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010fd89:	01 d0                	add    %edx,%eax
f010fd8b:	c1 e0 03             	shl    $0x3,%eax
f010fd8e:	89 c2                	mov    %eax,%edx
f010fd90:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fd93:	01 d0                	add    %edx,%eax
f010fd95:	89 45 ec             	mov    %eax,-0x14(%ebp)
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
	is_correct = 1;
	void* expectedVA;
	uint32 expectedNumFreeBlks;
	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f010fd98:	ff 45 e8             	incl   -0x18(%ebp)
f010fd9b:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f010fd9f:	7e d0                	jle    f010fd71 <test_initial_alloc+0xe1>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;

	}

	int remainSize = initAllocatedSpace - totalSizes - 2*sizeof(int) ;
f010fda1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010fda4:	2b 45 ec             	sub    -0x14(%ebp),%eax
f010fda7:	83 e8 08             	sub    $0x8,%eax
f010fdaa:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//exclude size of "DA Begin & End" blocks
	//cprintf("\n********* Remaining size = %d\n", remainSize);
	if (remainSize <= 0)
f010fdad:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010fdb1:	7f 17                	jg     f010fdca <test_initial_alloc+0x13a>
	{
		is_correct = 0;
f010fdb3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
f010fdba:	83 ec 0c             	sub    $0xc,%esp
f010fdbd:	68 a8 a1 12 f0       	push   $0xf012a1a8
f010fdc2:	e8 a5 11 ff ff       	call   f0100f6c <cprintf>
f010fdc7:	83 c4 10             	add    $0x10,%esp
	}
	int idx = 0;
f010fdca:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
f010fdd1:	c7 45 e0 04 00 00 f6 	movl   $0xf6000004,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010fdd8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010fddf:	e9 f3 00 00 00       	jmp    f010fed7 <test_initial_alloc+0x247>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010fde4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010fdeb:	e9 d7 00 00 00       	jmp    f010fec7 <test_initial_alloc+0x237>
		{

			actualSize = allocSizes[i] - sizeOfMetaData;
f010fdf0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fdf3:	8b 04 85 b8 ed 17 f0 	mov    -0xfe81248(,%eax,4),%eax
f010fdfa:	83 e8 08             	sub    $0x8,%eax
f010fdfd:	89 45 c4             	mov    %eax,-0x3c(%ebp)

			va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010fe00:	83 ec 08             	sub    $0x8,%esp
f010fe03:	ff 75 08             	pushl  0x8(%ebp)
f010fe06:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fe09:	e8 d2 31 01 00       	call   f0122fe0 <alloc_block>
f010fe0e:	83 c4 10             	add    $0x10,%esp
f010fe11:	89 c2                	mov    %eax,%edx
f010fe13:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe16:	89 14 85 80 10 5c f0 	mov    %edx,-0xfa3ef80(,%eax,4)
f010fe1d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe20:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f010fe27:	89 45 cc             	mov    %eax,-0x34(%ebp)

			midVAs[idx] = va + actualSize/2 ;
f010fe2a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010fe2d:	d1 e8                	shr    %eax
f010fe2f:	89 c2                	mov    %eax,%edx
f010fe31:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010fe34:	01 c2                	add    %eax,%edx
f010fe36:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe39:	89 14 85 80 3c 5c f0 	mov    %edx,-0xfa3c380(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f010fe40:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010fe43:	8d 50 fe             	lea    -0x2(%eax),%edx
f010fe46:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010fe49:	01 c2                	add    %eax,%edx
f010fe4b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe4e:	89 14 85 80 26 5c f0 	mov    %edx,-0xfa3d980(,%eax,4)
			//Check block
			expectedVA = (curVA + sizeOfMetaData/2);
f010fe55:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010fe58:	83 c0 04             	add    $0x4,%eax
f010fe5b:	89 45 c0             	mov    %eax,-0x40(%ebp)

			if (check_block(va, expectedVA, allocSizes[i], 1) == 0)
f010fe5e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fe61:	8b 04 85 b8 ed 17 f0 	mov    -0xfe81248(,%eax,4),%eax
f010fe68:	6a 01                	push   $0x1
f010fe6a:	50                   	push   %eax
f010fe6b:	ff 75 c0             	pushl  -0x40(%ebp)
f010fe6e:	ff 75 cc             	pushl  -0x34(%ebp)
f010fe71:	e8 78 fc ff ff       	call   f010faee <check_block>
f010fe76:	83 c4 10             	add    $0x10,%esp
f010fe79:	85 c0                	test   %eax,%eax
f010fe7b:	75 07                	jne    f010fe84 <test_initial_alloc+0x1f4>
			{

				is_correct = 0;
f010fe7d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			}

			curVA += allocSizes[i] ;
f010fe84:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fe87:	8b 04 85 b8 ed 17 f0 	mov    -0xfe81248(,%eax,4),%eax
f010fe8e:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f010fe91:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe94:	8b 14 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%edx
f010fe9b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe9e:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f010fea1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fea4:	8b 14 85 80 3c 5c f0 	mov    -0xfa3c380(,%eax,4),%edx
f010feab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010feae:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f010feb1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010feb4:	8b 14 85 80 26 5c f0 	mov    -0xfa3d980(,%eax,4),%edx
f010febb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010febe:	66 89 02             	mov    %ax,(%edx)
			idx++;
f010fec1:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010fec4:	ff 45 d8             	incl   -0x28(%ebp)
f010fec7:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f010fece:	0f 8e 1c ff ff ff    	jle    f010fdf0 <test_initial_alloc+0x160>
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
	}
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010fed4:	ff 45 dc             	incl   -0x24(%ebp)
f010fed7:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010fedb:	0f 8e 03 ff ff ff    	jle    f010fde4 <test_initial_alloc+0x154>
			idx++;
		}
		//if (is_correct == 0)
		//break;
	}
	if (is_correct)
f010fee1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fee5:	74 04                	je     f010feeb <test_initial_alloc+0x25b>
	{
		eval += 15;
f010fee7:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}
	if (check_list_size(1))
f010feeb:	83 ec 0c             	sub    $0xc,%esp
f010feee:	6a 01                	push   $0x1
f010fef0:	e8 81 fc ff ff       	call   f010fb76 <check_list_size>
f010fef5:	83 c4 10             	add    $0x10,%esp
f010fef8:	85 c0                	test   %eax,%eax
f010fefa:	74 04                	je     f010ff00 <test_initial_alloc+0x270>
	{
		eval += 5;
f010fefc:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f010ff00:	83 ec 0c             	sub    $0xc,%esp
f010ff03:	68 24 a2 12 f0       	push   $0xf012a224
f010ff08:	e8 5f 10 ff ff       	call   f0100f6c <cprintf>
f010ff0d:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ff10:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	actualSize = remainSize - sizeOfMetaData;
f010ff17:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ff1a:	83 e8 08             	sub    $0x8,%eax
f010ff1d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010ff20:	83 ec 08             	sub    $0x8,%esp
f010ff23:	ff 75 08             	pushl  0x8(%ebp)
f010ff26:	ff 75 c4             	pushl  -0x3c(%ebp)
f010ff29:	e8 b2 30 01 00       	call   f0122fe0 <alloc_block>
f010ff2e:	83 c4 10             	add    $0x10,%esp
f010ff31:	89 c2                	mov    %eax,%edx
f010ff33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ff36:	89 14 85 80 10 5c f0 	mov    %edx,-0xfa3ef80(,%eax,4)
f010ff3d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ff40:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f010ff47:	89 45 cc             	mov    %eax,-0x34(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f010ff4a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ff4d:	d1 e8                	shr    %eax
f010ff4f:	89 c2                	mov    %eax,%edx
f010ff51:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ff54:	01 c2                	add    %eax,%edx
f010ff56:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ff59:	89 14 85 80 3c 5c f0 	mov    %edx,-0xfa3c380(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f010ff60:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010ff63:	8d 50 fe             	lea    -0x2(%eax),%edx
f010ff66:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010ff69:	01 c2                	add    %eax,%edx
f010ff6b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ff6e:	89 14 85 80 26 5c f0 	mov    %edx,-0xfa3d980(,%eax,4)
	//Check block
	expectedVA = (curVA + sizeOfMetaData/2);
f010ff75:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ff78:	83 c0 04             	add    $0x4,%eax
f010ff7b:	89 45 c0             	mov    %eax,-0x40(%ebp)

	if (is_correct) is_correct = check_block(va, expectedVA, remainSize, 1) ;
f010ff7e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ff82:	74 17                	je     f010ff9b <test_initial_alloc+0x30b>
f010ff84:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010ff87:	6a 01                	push   $0x1
f010ff89:	50                   	push   %eax
f010ff8a:	ff 75 c0             	pushl  -0x40(%ebp)
f010ff8d:	ff 75 cc             	pushl  -0x34(%ebp)
f010ff90:	e8 59 fb ff ff       	call   f010faee <check_block>
f010ff95:	83 c4 10             	add    $0x10,%esp
f010ff98:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (is_correct) is_correct = check_list_size(0);
f010ff9b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ff9f:	74 10                	je     f010ffb1 <test_initial_alloc+0x321>
f010ffa1:	83 ec 0c             	sub    $0xc,%esp
f010ffa4:	6a 00                	push   $0x0
f010ffa6:	e8 cb fb ff ff       	call   f010fb76 <check_list_size>
f010ffab:	83 c4 10             	add    $0x10,%esp
f010ffae:	89 45 f0             	mov    %eax,-0x10(%ebp)

	*(startVAs[idx]) = idx ;
f010ffb1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ffb4:	8b 14 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%edx
f010ffbb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ffbe:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f010ffc1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ffc4:	8b 14 85 80 3c 5c f0 	mov    -0xfa3c380(,%eax,4),%edx
f010ffcb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ffce:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f010ffd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ffd4:	8b 14 85 80 26 5c f0 	mov    -0xfa3d980(,%eax,4),%edx
f010ffdb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ffde:	66 89 02             	mov    %ax,(%edx)
	if (is_correct)
f010ffe1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ffe5:	74 04                	je     f010ffeb <test_initial_alloc+0x35b>
	{
		eval += 5;
f010ffe7:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010ffeb:	83 ec 0c             	sub    $0xc,%esp
f010ffee:	68 70 a2 12 f0       	push   $0xf012a270
f010fff3:	e8 74 0f ff ff       	call   f0100f6c <cprintf>
f010fff8:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fffb:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f0110002:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0110009:	eb 5b                	jmp    f0110066 <test_initial_alloc+0x3d6>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f011000b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011000e:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0110015:	66 8b 00             	mov    (%eax),%ax
f0110018:	98                   	cwtl   
f0110019:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011001c:	75 26                	jne    f0110044 <test_initial_alloc+0x3b4>
f011001e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110021:	8b 04 85 80 3c 5c f0 	mov    -0xfa3c380(,%eax,4),%eax
f0110028:	66 8b 00             	mov    (%eax),%ax
f011002b:	98                   	cwtl   
f011002c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011002f:	75 13                	jne    f0110044 <test_initial_alloc+0x3b4>
f0110031:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110034:	8b 04 85 80 26 5c f0 	mov    -0xfa3d980(,%eax,4),%eax
f011003b:	66 8b 00             	mov    (%eax),%ax
f011003e:	98                   	cwtl   
f011003f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0110042:	74 1f                	je     f0110063 <test_initial_alloc+0x3d3>
		{
			is_correct = 0;
f0110044:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f011004b:	83 ec 04             	sub    $0x4,%esp
f011004e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110051:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110054:	68 a4 a2 12 f0       	push   $0xf012a2a4
f0110059:	e8 0e 0f ff ff       	call   f0100f6c <cprintf>
f011005e:	83 c4 10             	add    $0x10,%esp
			break;
f0110061:	eb 0b                	jmp    f011006e <test_initial_alloc+0x3de>
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f0110063:	ff 45 d4             	incl   -0x2c(%ebp)
f0110066:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110069:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011006c:	7c 9d                	jl     f011000b <test_initial_alloc+0x37b>
			is_correct = 0;
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
			break;
		}
	}
	if (is_correct)
f011006e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110072:	74 04                	je     f0110078 <test_initial_alloc+0x3e8>
	{
		eval += 10;
f0110074:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}
	return eval;
f0110078:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f011007b:	c9                   	leave  
f011007c:	c3                   	ret    

f011007d <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f011007d:	55                   	push   %ebp
f011007e:	89 e5                	mov    %esp,%ebp
f0110080:	57                   	push   %edi
f0110081:	56                   	push   %esi
f0110082:	53                   	push   %ebx
f0110083:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
#if USE_KHEAP
	panic("test_alloc_block_FF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f0110089:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f0110090:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f0110097:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=======================================================\n") ;
f011009e:	83 ec 0c             	sub    $0xc,%esp
f01100a1:	68 f4 a2 12 f0       	push   $0xf012a2f4
f01100a6:	e8 c1 0e ff ff       	call   f0100f6c <cprintf>
f01100ab:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY [40%]\n") ;
f01100ae:	83 ec 0c             	sub    $0xc,%esp
f01100b1:	68 30 a3 12 f0       	push   $0xf012a330
f01100b6:	e8 b1 0e ff ff       	call   f0100f6c <cprintf>
f01100bb:	83 c4 10             	add    $0x10,%esp
	cprintf("=======================================================\n") ;
f01100be:	83 ec 0c             	sub    $0xc,%esp
f01100c1:	68 f4 a2 12 f0       	push   $0xf012a2f4
f01100c6:	e8 a1 0e ff ff       	call   f0100f6c <cprintf>
f01100cb:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_FF);
f01100ce:	83 ec 0c             	sub    $0xc,%esp
f01100d1:	6a 01                	push   $0x1
f01100d3:	e8 b8 fb ff ff       	call   f010fc90 <test_initial_alloc>
f01100d8:	83 c4 10             	add    $0x10,%esp
f01100db:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("====================================================\n") ;
f01100de:	83 ec 0c             	sub    $0xc,%esp
f01100e1:	68 6c a3 12 f0       	push   $0xf012a36c
f01100e6:	e8 81 0e ff ff       	call   f0100f6c <cprintf>
f01100eb:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
f01100ee:	83 ec 0c             	sub    $0xc,%esp
f01100f1:	68 a4 a3 12 f0       	push   $0xf012a3a4
f01100f6:	e8 71 0e ff ff       	call   f0100f6c <cprintf>
f01100fb:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
f01100fe:	83 ec 0c             	sub    $0xc,%esp
f0110101:	68 6c a3 12 f0       	push   $0xf012a36c
f0110106:	e8 61 0e ff ff       	call   f0100f6c <cprintf>
f011010b:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f011010e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0110115:	eb 2c                	jmp    f0110143 <test_alloc_block_FF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f0110117:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011011a:	89 d0                	mov    %edx,%eax
f011011c:	c1 e0 02             	shl    $0x2,%eax
f011011f:	01 d0                	add    %edx,%eax
f0110121:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110128:	01 d0                	add    %edx,%eax
f011012a:	c1 e0 03             	shl    $0x3,%eax
f011012d:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0110134:	83 ec 0c             	sub    $0xc,%esp
f0110137:	50                   	push   %eax
f0110138:	e8 41 39 01 00       	call   f0123a7e <free_block>
f011013d:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
	cprintf("====================================================\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110140:	ff 45 dc             	incl   -0x24(%ebp)
f0110143:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f0110147:	7e ce                	jle    f0110117 <test_alloc_block_FF+0x9a>
	{
		free_block(startVAs[i*allocCntPerSize]);
	}
	//Check number of freed blocks
	is_correct = check_list_size(numOfAllocs);
f0110149:	83 ec 0c             	sub    $0xc,%esp
f011014c:	6a 07                	push   $0x7
f011014e:	e8 23 fa ff ff       	call   f010fb76 <check_list_size>
f0110153:	83 c4 10             	add    $0x10,%esp
f0110156:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (is_correct)
f0110159:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011015d:	74 04                	je     f0110163 <test_alloc_block_FF+0xe6>
	{
		eval += 10;
f011015f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f0110163:	83 ec 0c             	sub    $0xc,%esp
f0110166:	68 c0 a0 12 f0       	push   $0xf012a0c0
f011016b:	e8 fc 0d ff ff       	call   f0100f6c <cprintf>
f0110170:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110173:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f011017a:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f0110181:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0110188:	eb 1f                	jmp    f01101a9 <test_alloc_block_FF+0x12c>
	{
		if (allocSizes[i] > maxSize)
f011018a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011018d:	8b 04 85 b8 ed 17 f0 	mov    -0xfe81248(,%eax,4),%eax
f0110194:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110197:	76 0d                	jbe    f01101a6 <test_alloc_block_FF+0x129>
			maxSize = allocSizes[i] ;
f0110199:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011019c:	8b 04 85 b8 ed 17 f0 	mov    -0xfe81248(,%eax,4),%eax
f01101a3:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f01101a6:	ff 45 d4             	incl   -0x2c(%ebp)
f01101a9:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f01101ad:	7e db                	jle    f011018a <test_alloc_block_FF+0x10d>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_FF);
f01101af:	83 ec 08             	sub    $0x8,%esp
f01101b2:	6a 01                	push   $0x1
f01101b4:	ff 75 d8             	pushl  -0x28(%ebp)
f01101b7:	e8 24 2e 01 00       	call   f0122fe0 <alloc_block>
f01101bc:	83 c4 10             	add    $0x10,%esp
f01101bf:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f01101c2:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f01101c6:	74 17                	je     f01101df <test_alloc_block_FF+0x162>
	{
		is_correct = 0;
f01101c8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #5: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.\n");
f01101cf:	83 ec 0c             	sub    $0xc,%esp
f01101d2:	68 dc a3 12 f0       	push   $0xf012a3dc
f01101d7:	e8 90 0d ff ff       	call   f0100f6c <cprintf>
f01101dc:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f01101df:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01101e3:	74 04                	je     f01101e9 <test_alloc_block_FF+0x16c>
	{
		eval += 5;
f01101e5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f01101e9:	83 ec 0c             	sub    $0xc,%esp
f01101ec:	68 54 a4 12 f0       	push   $0xf012a454
f01101f1:	e8 76 0d ff ff       	call   f0100f6c <cprintf>
f01101f6:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01101f9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	void* expectedVA;
	uint32 expectedNumFreeBlks;
#define numOfFFTests 3
	uint32 startVA = KERNEL_HEAP_START + sizeof(int); //just after the DA Begin block
f0110200:	c7 45 c0 04 00 00 f6 	movl   $0xf6000004,-0x40(%ebp)
	uint32 testSizes[numOfFFTests] = {1*kilo + kilo/2, 3*kilo, kilo/2} ;
f0110207:	8d 45 ac             	lea    -0x54(%ebp),%eax
f011020a:	bb f4 a5 12 f0       	mov    $0xf012a5f4,%ebx
f011020f:	ba 03 00 00 00       	mov    $0x3,%edx
f0110214:	89 c7                	mov    %eax,%edi
f0110216:	89 de                	mov    %ebx,%esi
f0110218:	89 d1                	mov    %edx,%ecx
f011021a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f011021c:	a1 40 23 5c f0       	mov    0xf05c2340,%eax
f0110221:	89 45 bc             	mov    %eax,-0x44(%ebp)
	uint32 expectedVAs[numOfFFTests] = {startVA + sizeOfMetaData/2, startOf1st7KB, startVA + testSizes[0] + sizeOfMetaData/2};
f0110224:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110227:	83 c0 04             	add    $0x4,%eax
f011022a:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011022d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0110230:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0110233:	8b 55 ac             	mov    -0x54(%ebp),%edx
f0110236:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110239:	01 d0                	add    %edx,%eax
f011023b:	83 c0 04             	add    $0x4,%eax
f011023e:	89 45 a8             	mov    %eax,-0x58(%ebp)
	short* tstStartVAs[numOfFFTests+2] ;
	short* tstMidVAs[numOfFFTests+2] ;
	short* tstEndVAs[numOfFFTests+2] ;
	for (int i = 0; i < numOfFFTests; ++i)
f0110241:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0110248:	e9 08 01 00 00       	jmp    f0110355 <test_alloc_block_FF+0x2d8>
	{
		actualSize = testSizes[i] - sizeOfMetaData;
f011024d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110250:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f0110254:	83 e8 08             	sub    $0x8,%eax
f0110257:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		cprintf("311\n");
f011025a:	83 ec 0c             	sub    $0xc,%esp
f011025d:	68 af a4 12 f0       	push   $0xf012a4af
f0110262:	e8 05 0d ff ff       	call   f0100f6c <cprintf>
f0110267:	83 c4 10             	add    $0x10,%esp
		va = tstStartVAs[i] = alloc_block(actualSize, DA_FF);
f011026a:	83 ec 08             	sub    $0x8,%esp
f011026d:	6a 01                	push   $0x1
f011026f:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110272:	e8 69 2d 01 00       	call   f0122fe0 <alloc_block>
f0110277:	83 c4 10             	add    $0x10,%esp
f011027a:	89 c2                	mov    %eax,%edx
f011027c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011027f:	89 54 85 8c          	mov    %edx,-0x74(%ebp,%eax,4)
f0110283:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110286:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f011028a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		cprintf("313\n");
f011028d:	83 ec 0c             	sub    $0xc,%esp
f0110290:	68 b4 a4 12 f0       	push   $0xf012a4b4
f0110295:	e8 d2 0c ff ff       	call   f0100f6c <cprintf>
f011029a:	83 c4 10             	add    $0x10,%esp
		tstMidVAs[i] = va + actualSize/2 ;
f011029d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01102a0:	d1 e8                	shr    %eax
f01102a2:	89 c2                	mov    %eax,%edx
f01102a4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01102a7:	01 c2                	add    %eax,%edx
f01102a9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01102ac:	89 94 85 78 ff ff ff 	mov    %edx,-0x88(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f01102b3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01102b6:	8d 50 fe             	lea    -0x2(%eax),%edx
f01102b9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01102bc:	01 c2                	add    %eax,%edx
f01102be:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01102c1:	89 94 85 64 ff ff ff 	mov    %edx,-0x9c(%ebp,%eax,4)
		//Check block
		cprintf("test#%d\n",i);
f01102c8:	83 ec 08             	sub    $0x8,%esp
f01102cb:	ff 75 d0             	pushl  -0x30(%ebp)
f01102ce:	68 b9 a4 12 f0       	push   $0xf012a4b9
f01102d3:	e8 94 0c ff ff       	call   f0100f6c <cprintf>
f01102d8:	83 c4 10             	add    $0x10,%esp
		expectedVA = (void*)expectedVAs[i];
f01102db:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01102de:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
f01102e2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		cprintf("319\n");
f01102e5:	83 ec 0c             	sub    $0xc,%esp
f01102e8:	68 c2 a4 12 f0       	push   $0xf012a4c2
f01102ed:	e8 7a 0c ff ff       	call   f0100f6c <cprintf>
f01102f2:	83 c4 10             	add    $0x10,%esp
		if (check_block(va, expectedVA, testSizes[i], 1) == 0)
f01102f5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01102f8:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f01102fc:	6a 01                	push   $0x1
f01102fe:	50                   	push   %eax
f01102ff:	ff 75 b8             	pushl  -0x48(%ebp)
f0110302:	ff 75 c8             	pushl  -0x38(%ebp)
f0110305:	e8 e4 f7 ff ff       	call   f010faee <check_block>
f011030a:	83 c4 10             	add    $0x10,%esp
f011030d:	85 c0                	test   %eax,%eax
f011030f:	75 07                	jne    f0110318 <test_alloc_block_FF+0x29b>
		{
			is_correct = 0;
f0110311:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		cprintf("324\n");
f0110318:	83 ec 0c             	sub    $0xc,%esp
f011031b:	68 c7 a4 12 f0       	push   $0xf012a4c7
f0110320:	e8 47 0c ff ff       	call   f0100f6c <cprintf>
f0110325:	83 c4 10             	add    $0x10,%esp
		*(tstStartVAs[i]) = 353;
f0110328:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011032b:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f011032f:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f0110334:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110337:	8b 84 85 78 ff ff ff 	mov    -0x88(%ebp,%eax,4),%eax
f011033e:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f0110343:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110346:	8b 84 85 64 ff ff ff 	mov    -0x9c(%ebp,%eax,4),%eax
f011034d:	66 c7 00 61 01       	movw   $0x161,(%eax)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
	uint32 expectedVAs[numOfFFTests] = {startVA + sizeOfMetaData/2, startOf1st7KB, startVA + testSizes[0] + sizeOfMetaData/2};
	short* tstStartVAs[numOfFFTests+2] ;
	short* tstMidVAs[numOfFFTests+2] ;
	short* tstEndVAs[numOfFFTests+2] ;
	for (int i = 0; i < numOfFFTests; ++i)
f0110352:	ff 45 d0             	incl   -0x30(%ebp)
f0110355:	83 7d d0 02          	cmpl   $0x2,-0x30(%ebp)
f0110359:	0f 8e ee fe ff ff    	jle    f011024d <test_alloc_block_FF+0x1d0>
		cprintf("324\n");
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}
	if (is_correct) is_correct = check_list_size(numOfAllocs);
f011035f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110363:	74 10                	je     f0110375 <test_alloc_block_FF+0x2f8>
f0110365:	83 ec 0c             	sub    $0xc,%esp
f0110368:	6a 07                	push   $0x7
f011036a:	e8 07 f8 ff ff       	call   f010fb76 <check_list_size>
f011036f:	83 c4 10             	add    $0x10,%esp
f0110372:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (is_correct)
f0110375:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110379:	74 04                	je     f011037f <test_alloc_block_FF+0x302>
	{
		eval += 15;
f011037b:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f011037f:	83 ec 0c             	sub    $0xc,%esp
f0110382:	68 24 a2 12 f0       	push   $0xf012a224
f0110387:	e8 e0 0b ff ff       	call   f0100f6c <cprintf>
f011038c:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f011038f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = 2*kilo - sizeOfMetaData;
f0110396:	c7 45 c4 f8 07 00 00 	movl   $0x7f8,-0x3c(%ebp)
	va = tstStartVAs[numOfFFTests] = alloc_block(actualSize, DA_FF);
f011039d:	83 ec 08             	sub    $0x8,%esp
f01103a0:	6a 01                	push   $0x1
f01103a2:	ff 75 c4             	pushl  -0x3c(%ebp)
f01103a5:	e8 36 2c 01 00       	call   f0122fe0 <alloc_block>
f01103aa:	83 c4 10             	add    $0x10,%esp
f01103ad:	89 45 98             	mov    %eax,-0x68(%ebp)
f01103b0:	8b 45 98             	mov    -0x68(%ebp),%eax
f01103b3:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfFFTests] = va + actualSize/2 ;
f01103b6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01103b9:	d1 e8                	shr    %eax
f01103bb:	89 c2                	mov    %eax,%edx
f01103bd:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01103c0:	01 d0                	add    %edx,%eax
f01103c2:	89 45 84             	mov    %eax,-0x7c(%ebp)
	tstEndVAs[numOfFFTests] = va + actualSize - sizeof(short);
f01103c5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01103c8:	8d 50 fe             	lea    -0x2(%eax),%edx
f01103cb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01103ce:	01 d0                	add    %edx,%eax
f01103d0:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
	//Check block
	expectedVA = (void*)(startVA + testSizes[0] + testSizes[2] + sizeOfMetaData/2) ;
f01103d6:	8b 55 ac             	mov    -0x54(%ebp),%edx
f01103d9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01103dc:	01 c2                	add    %eax,%edx
f01103de:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01103e1:	01 d0                	add    %edx,%eax
f01103e3:	83 c0 04             	add    $0x4,%eax
f01103e6:	89 45 b8             	mov    %eax,-0x48(%ebp)

	if (is_correct) is_correct = check_block(va, expectedVA, 2*kilo, 1);
f01103e9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01103ed:	74 18                	je     f0110407 <test_alloc_block_FF+0x38a>
f01103ef:	6a 01                	push   $0x1
f01103f1:	68 00 08 00 00       	push   $0x800
f01103f6:	ff 75 b8             	pushl  -0x48(%ebp)
f01103f9:	ff 75 c8             	pushl  -0x38(%ebp)
f01103fc:	e8 ed f6 ff ff       	call   f010faee <check_block>
f0110401:	83 c4 10             	add    $0x10,%esp
f0110404:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (is_correct) is_correct = check_list_size(numOfAllocs - 1);
f0110407:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011040b:	74 10                	je     f011041d <test_alloc_block_FF+0x3a0>
f011040d:	83 ec 0c             	sub    $0xc,%esp
f0110410:	6a 06                	push   $0x6
f0110412:	e8 5f f7 ff ff       	call   f010fb76 <check_list_size>
f0110417:	83 c4 10             	add    $0x10,%esp
f011041a:	89 45 e0             	mov    %eax,-0x20(%ebp)

	*(tstStartVAs[numOfFFTests]) = 353 ;
f011041d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0110420:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfFFTests]) = 353 ;
f0110425:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0110428:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfFFTests]) = 353 ;
f011042d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0110433:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f0110438:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011043c:	74 04                	je     f0110442 <test_alloc_block_FF+0x3c5>
	{
		eval += 10;
f011043e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 4: Try to allocate a block with a bit smaller size [internal fragmentation case]*/
	cprintf("	4: Try to allocate a block with a bit smaller size [internal fragmentation case]\n\n") ;
f0110442:	83 ec 0c             	sub    $0xc,%esp
f0110445:	68 cc a4 12 f0       	push   $0xf012a4cc
f011044a:	e8 1d 0b ff ff       	call   f0100f6c <cprintf>
f011044f:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110452:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = allocSizes[1] - sizeOfMetaData - 10;
f0110459:	a1 bc ed 17 f0       	mov    0xf017edbc,%eax
f011045e:	83 e8 12             	sub    $0x12,%eax
f0110461:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = tstStartVAs[numOfFFTests+1] = alloc_block(actualSize, DA_FF);
f0110464:	83 ec 08             	sub    $0x8,%esp
f0110467:	6a 01                	push   $0x1
f0110469:	ff 75 c4             	pushl  -0x3c(%ebp)
f011046c:	e8 6f 2b 01 00       	call   f0122fe0 <alloc_block>
f0110471:	83 c4 10             	add    $0x10,%esp
f0110474:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0110477:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011047a:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfFFTests+1] = va + actualSize/2 ;
f011047d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110480:	d1 e8                	shr    %eax
f0110482:	89 c2                	mov    %eax,%edx
f0110484:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110487:	01 d0                	add    %edx,%eax
f0110489:	89 45 88             	mov    %eax,-0x78(%ebp)
	tstEndVAs[numOfFFTests+1] = va + actualSize - sizeof(short);
f011048c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011048f:	8d 50 fe             	lea    -0x2(%eax),%edx
f0110492:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110495:	01 d0                	add    %edx,%eax
f0110497:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
	//Check block
	expectedVA = startVAs[1*allocCntPerSize];
f011049d:	a1 a0 13 5c f0       	mov    0xf05c13a0,%eax
f01104a2:	89 45 b8             	mov    %eax,-0x48(%ebp)

	if (is_correct) is_correct = check_block(va, expectedVA, allocSizes[1], 1);
f01104a5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01104a9:	74 19                	je     f01104c4 <test_alloc_block_FF+0x447>
f01104ab:	a1 bc ed 17 f0       	mov    0xf017edbc,%eax
f01104b0:	6a 01                	push   $0x1
f01104b2:	50                   	push   %eax
f01104b3:	ff 75 b8             	pushl  -0x48(%ebp)
f01104b6:	ff 75 c8             	pushl  -0x38(%ebp)
f01104b9:	e8 30 f6 ff ff       	call   f010faee <check_block>
f01104be:	83 c4 10             	add    $0x10,%esp
f01104c1:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (is_correct) is_correct = check_list_size(numOfAllocs - 2);
f01104c4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01104c8:	74 10                	je     f01104da <test_alloc_block_FF+0x45d>
f01104ca:	83 ec 0c             	sub    $0xc,%esp
f01104cd:	6a 05                	push   $0x5
f01104cf:	e8 a2 f6 ff ff       	call   f010fb76 <check_list_size>
f01104d4:	83 c4 10             	add    $0x10,%esp
f01104d7:	89 45 e0             	mov    %eax,-0x20(%ebp)

	*(tstStartVAs[numOfFFTests+1]) = 353 ;
f01104da:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01104dd:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfFFTests+1]) = 353 ;
f01104e2:	8b 45 88             	mov    -0x78(%ebp),%eax
f01104e5:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfFFTests+1]) = 353 ;
f01104ea:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01104f0:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f01104f5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01104f9:	74 04                	je     f01104ff <test_alloc_block_FF+0x482>
	{
		eval += 10;
f01104fb:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 5: Check stored data inside each allocated block*/
	cprintf("	5: Check stored data inside each allocated block\n\n") ;
f01104ff:	83 ec 0c             	sub    $0xc,%esp
f0110502:	68 20 a5 12 f0       	push   $0xf012a520
f0110507:	e8 60 0a ff ff       	call   f0100f6c <cprintf>
f011050c:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f011050f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i < numOfFFTests + 2; ++i)
f0110516:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f011051d:	e9 88 00 00 00       	jmp    f01105aa <test_alloc_block_FF+0x52d>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f0110522:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110525:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f0110529:	66 8b 00             	mov    (%eax),%ax
f011052c:	66 3d 61 01          	cmp    $0x161,%ax
f0110530:	75 26                	jne    f0110558 <test_alloc_block_FF+0x4db>
f0110532:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110535:	8b 84 85 78 ff ff ff 	mov    -0x88(%ebp,%eax,4),%eax
f011053c:	66 8b 00             	mov    (%eax),%ax
f011053f:	66 3d 61 01          	cmp    $0x161,%ax
f0110543:	75 13                	jne    f0110558 <test_alloc_block_FF+0x4db>
f0110545:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110548:	8b 84 85 64 ff ff ff 	mov    -0x9c(%ebp,%eax,4),%eax
f011054f:	66 8b 00             	mov    (%eax),%ax
f0110552:	66 3d 61 01          	cmp    $0x161,%ax
f0110556:	74 4f                	je     f01105a7 <test_alloc_block_FF+0x52a>
		{
			is_correct = 0;
f0110558:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f011055f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110562:	8b 84 85 64 ff ff ff 	mov    -0x9c(%ebp,%eax,4),%eax
f0110569:	66 8b 00             	mov    (%eax),%ax
f011056c:	0f bf c8             	movswl %ax,%ecx
f011056f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110572:	8b 84 85 78 ff ff ff 	mov    -0x88(%ebp,%eax,4),%eax
f0110579:	66 8b 00             	mov    (%eax),%ax
f011057c:	0f bf d0             	movswl %ax,%edx
f011057f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110582:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f0110586:	66 8b 00             	mov    (%eax),%ax
f0110589:	98                   	cwtl   
f011058a:	83 ec 08             	sub    $0x8,%esp
f011058d:	51                   	push   %ecx
f011058e:	52                   	push   %edx
f011058f:	50                   	push   %eax
f0110590:	68 61 01 00 00       	push   $0x161
f0110595:	ff 75 cc             	pushl  -0x34(%ebp)
f0110598:	68 54 a5 12 f0       	push   $0xf012a554
f011059d:	e8 ca 09 ff ff       	call   f0100f6c <cprintf>
f01105a2:	83 c4 20             	add    $0x20,%esp
			break;
f01105a5:	eb 0d                	jmp    f01105b4 <test_alloc_block_FF+0x537>
	//====================================================================//
	/*FF ALLOC Scenario 5: Check stored data inside each allocated block*/
	cprintf("	5: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < numOfFFTests + 2; ++i)
f01105a7:	ff 45 cc             	incl   -0x34(%ebp)
f01105aa:	83 7d cc 04          	cmpl   $0x4,-0x34(%ebp)
f01105ae:	0f 8e 6e ff ff ff    	jle    f0110522 <test_alloc_block_FF+0x4a5>
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f01105b4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01105b8:	74 04                	je     f01105be <test_alloc_block_FF+0x541>
	{
		eval += 10;
f01105ba:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	cprintf("test alloc_block_FF completed. Evaluation = %d%\n", eval);
f01105be:	83 ec 08             	sub    $0x8,%esp
f01105c1:	ff 75 e4             	pushl  -0x1c(%ebp)
f01105c4:	68 c0 a5 12 f0       	push   $0xf012a5c0
f01105c9:	e8 9e 09 ff ff       	call   f0100f6c <cprintf>
f01105ce:	83 c4 10             	add    $0x10,%esp
}
f01105d1:	90                   	nop
f01105d2:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01105d5:	5b                   	pop    %ebx
f01105d6:	5e                   	pop    %esi
f01105d7:	5f                   	pop    %edi
f01105d8:	5d                   	pop    %ebp
f01105d9:	c3                   	ret    

f01105da <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f01105da:	55                   	push   %ebp
f01105db:	89 e5                	mov    %esp,%ebp
f01105dd:	57                   	push   %edi
f01105de:	56                   	push   %esi
f01105df:	53                   	push   %ebx
f01105e0:	81 ec bc 00 00 00    	sub    $0xbc,%esp
#if USE_KHEAP
	panic("test_alloc_block_BF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f01105e6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f01105ed:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f01105f4:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=======================================================\n") ;
f01105fb:	83 ec 0c             	sub    $0xc,%esp
f01105fe:	68 f4 a2 12 f0       	push   $0xf012a2f4
f0110603:	e8 64 09 ff ff       	call   f0100f6c <cprintf>
f0110608:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY [40%]\n") ;
f011060b:	83 ec 0c             	sub    $0xc,%esp
f011060e:	68 30 a3 12 f0       	push   $0xf012a330
f0110613:	e8 54 09 ff ff       	call   f0100f6c <cprintf>
f0110618:	83 c4 10             	add    $0x10,%esp
	cprintf("=======================================================\n") ;
f011061b:	83 ec 0c             	sub    $0xc,%esp
f011061e:	68 f4 a2 12 f0       	push   $0xf012a2f4
f0110623:	e8 44 09 ff ff       	call   f0100f6c <cprintf>
f0110628:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_BF);
f011062b:	83 ec 0c             	sub    $0xc,%esp
f011062e:	6a 03                	push   $0x3
f0110630:	e8 5b f6 ff ff       	call   f010fc90 <test_initial_alloc>
f0110635:	83 c4 10             	add    $0x10,%esp
f0110638:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("====================================================\n") ;
f011063b:	83 ec 0c             	sub    $0xc,%esp
f011063e:	68 6c a3 12 f0       	push   $0xf012a36c
f0110643:	e8 24 09 ff ff       	call   f0100f6c <cprintf>
f0110648:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
f011064b:	83 ec 0c             	sub    $0xc,%esp
f011064e:	68 a4 a3 12 f0       	push   $0xf012a3a4
f0110653:	e8 14 09 ff ff       	call   f0100f6c <cprintf>
f0110658:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
f011065b:	83 ec 0c             	sub    $0xc,%esp
f011065e:	68 6c a3 12 f0       	push   $0xf012a36c
f0110663:	e8 04 09 ff ff       	call   f0100f6c <cprintf>
f0110668:	83 c4 10             	add    $0x10,%esp
	void* expectedVA;
	uint32 expectedNumFreeBlks;
	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f011066b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0110672:	eb 2c                	jmp    f01106a0 <test_alloc_block_BF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f0110674:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0110677:	89 d0                	mov    %edx,%eax
f0110679:	c1 e0 02             	shl    $0x2,%eax
f011067c:	01 d0                	add    %edx,%eax
f011067e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110685:	01 d0                	add    %edx,%eax
f0110687:	c1 e0 03             	shl    $0x3,%eax
f011068a:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0110691:	83 ec 0c             	sub    $0xc,%esp
f0110694:	50                   	push   %eax
f0110695:	e8 e4 33 01 00       	call   f0123a7e <free_block>
f011069a:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
	cprintf("====================================================\n") ;
	void* expectedVA;
	uint32 expectedNumFreeBlks;
	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f011069d:	ff 45 dc             	incl   -0x24(%ebp)
f01106a0:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f01106a4:	7e ce                	jle    f0110674 <test_alloc_block_BF+0x9a>
	{
		free_block(startVAs[i*allocCntPerSize]);
	}
	//Check number of freed blocks
	is_correct = check_list_size(numOfAllocs);
f01106a6:	83 ec 0c             	sub    $0xc,%esp
f01106a9:	6a 07                	push   $0x7
f01106ab:	e8 c6 f4 ff ff       	call   f010fb76 <check_list_size>
f01106b0:	83 c4 10             	add    $0x10,%esp
f01106b3:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (is_correct)
f01106b6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01106ba:	74 04                	je     f01106c0 <test_alloc_block_BF+0xe6>
	{
		eval += 10;
f01106bc:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f01106c0:	83 ec 0c             	sub    $0xc,%esp
f01106c3:	68 c0 a0 12 f0       	push   $0xf012a0c0
f01106c8:	e8 9f 08 ff ff       	call   f0100f6c <cprintf>
f01106cd:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01106d0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f01106d7:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f01106de:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01106e5:	eb 1f                	jmp    f0110706 <test_alloc_block_BF+0x12c>
	{
		if (allocSizes[i] > maxSize)
f01106e7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01106ea:	8b 04 85 b8 ed 17 f0 	mov    -0xfe81248(,%eax,4),%eax
f01106f1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01106f4:	76 0d                	jbe    f0110703 <test_alloc_block_BF+0x129>
			maxSize = allocSizes[i] ;
f01106f6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01106f9:	8b 04 85 b8 ed 17 f0 	mov    -0xfe81248(,%eax,4),%eax
f0110700:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f0110703:	ff 45 d4             	incl   -0x2c(%ebp)
f0110706:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f011070a:	7e db                	jle    f01106e7 <test_alloc_block_BF+0x10d>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_BF);
f011070c:	83 ec 08             	sub    $0x8,%esp
f011070f:	6a 03                	push   $0x3
f0110711:	ff 75 d8             	pushl  -0x28(%ebp)
f0110714:	e8 c7 28 01 00       	call   f0122fe0 <alloc_block>
f0110719:	83 c4 10             	add    $0x10,%esp
f011071c:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f011071f:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110723:	74 17                	je     f011073c <test_alloc_block_BF+0x162>
	{
		is_correct = 0;
f0110725:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_BF #5: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.\n");
f011072c:	83 ec 0c             	sub    $0xc,%esp
f011072f:	68 00 a6 12 f0       	push   $0xf012a600
f0110734:	e8 33 08 ff ff       	call   f0100f6c <cprintf>
f0110739:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f011073c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110740:	74 04                	je     f0110746 <test_alloc_block_BF+0x16c>
	{
		eval += 5;
f0110742:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f0110746:	83 ec 0c             	sub    $0xc,%esp
f0110749:	68 54 a4 12 f0       	push   $0xf012a454
f011074e:	e8 19 08 ff ff       	call   f0100f6c <cprintf>
f0110753:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110756:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

#define numOfBFTests 5
	uint32 testSizes[numOfBFTests] = {
f011075d:	8d 45 a0             	lea    -0x60(%ebp),%eax
f0110760:	bb 5c a7 12 f0       	mov    $0xf012a75c,%ebx
f0110765:	ba 05 00 00 00       	mov    $0x5,%edx
f011076a:	89 c7                	mov    %eax,%edi
f011076c:	89 de                	mov    %ebx,%esi
f011076e:	89 d1                	mov    %edx,%ecx
f0110770:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
			/*only 1 can fit*/4*kilo + kilo/2,
			/*many can fit*/ 1*kilo + kilo/4,
			/*many can fit*/kilo/2,
			/*many can fit*/kilo/2,
			/*only 1 can fit (@head)*/3*kilo } ;
	uint32 startOf1st1KB = (uint32)startVAs[2*allocCntPerSize];
f0110772:	a1 c0 16 5c f0       	mov    0xf05c16c0,%eax
f0110777:	89 45 c0             	mov    %eax,-0x40(%ebp)
	uint32 startOf1st2KB = (uint32)startVAs[4*allocCntPerSize];
f011077a:	a1 00 1d 5c f0       	mov    0xf05c1d00,%eax
f011077f:	89 45 bc             	mov    %eax,-0x44(%ebp)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f0110782:	a1 40 23 5c f0       	mov    0xf05c2340,%eax
f0110787:	89 45 b8             	mov    %eax,-0x48(%ebp)

	uint32 expectedVAs[numOfBFTests] = {startOf1st7KB, startOf1st2KB, startOf1st2KB + testSizes[1],startOf1st1KB, KERNEL_HEAP_START + 2*sizeof(int)};
f011078a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011078d:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0110790:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0110793:	89 45 90             	mov    %eax,-0x70(%ebp)
f0110796:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0110799:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011079c:	01 d0                	add    %edx,%eax
f011079e:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01107a1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01107a4:	89 45 98             	mov    %eax,-0x68(%ebp)
f01107a7:	c7 45 9c 08 00 00 f6 	movl   $0xf6000008,-0x64(%ebp)
	short* tstStartVAs[numOfBFTests+2] ;
	short* tstMidVAs[numOfBFTests+2] ;
	short* tstEndVAs[numOfBFTests+2] ;
	for (int i = 0; i < numOfBFTests; ++i)
f01107ae:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f01107b5:	e9 d1 00 00 00       	jmp    f011088b <test_alloc_block_BF+0x2b1>
	{
		actualSize = testSizes[i] - sizeOfMetaData;
f01107ba:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01107bd:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
f01107c1:	83 e8 08             	sub    $0x8,%eax
f01107c4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		va = tstStartVAs[i] = alloc_block(actualSize, DA_BF);
f01107c7:	83 ec 08             	sub    $0x8,%esp
f01107ca:	6a 03                	push   $0x3
f01107cc:	ff 75 c4             	pushl  -0x3c(%ebp)
f01107cf:	e8 0c 28 01 00       	call   f0122fe0 <alloc_block>
f01107d4:	83 c4 10             	add    $0x10,%esp
f01107d7:	89 c2                	mov    %eax,%edx
f01107d9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01107dc:	89 94 85 70 ff ff ff 	mov    %edx,-0x90(%ebp,%eax,4)
f01107e3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01107e6:	8b 84 85 70 ff ff ff 	mov    -0x90(%ebp,%eax,4),%eax
f01107ed:	89 45 c8             	mov    %eax,-0x38(%ebp)
		tstMidVAs[i] = va + actualSize/2 ;
f01107f0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01107f3:	d1 e8                	shr    %eax
f01107f5:	89 c2                	mov    %eax,%edx
f01107f7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01107fa:	01 c2                	add    %eax,%edx
f01107fc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01107ff:	89 94 85 54 ff ff ff 	mov    %edx,-0xac(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f0110806:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110809:	8d 50 fe             	lea    -0x2(%eax),%edx
f011080c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011080f:	01 c2                	add    %eax,%edx
f0110811:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110814:	89 94 85 38 ff ff ff 	mov    %edx,-0xc8(%ebp,%eax,4)

		//Check block
		cprintf("test#%d\n",i);
f011081b:	83 ec 08             	sub    $0x8,%esp
f011081e:	ff 75 d0             	pushl  -0x30(%ebp)
f0110821:	68 b9 a4 12 f0       	push   $0xf012a4b9
f0110826:	e8 41 07 ff ff       	call   f0100f6c <cprintf>
f011082b:	83 c4 10             	add    $0x10,%esp
		expectedVA = (void*)expectedVAs[i];
f011082e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110831:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f0110835:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		if (check_block(va, expectedVA, testSizes[i], 1) == 0)
f0110838:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011083b:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
f011083f:	6a 01                	push   $0x1
f0110841:	50                   	push   %eax
f0110842:	ff 75 b4             	pushl  -0x4c(%ebp)
f0110845:	ff 75 c8             	pushl  -0x38(%ebp)
f0110848:	e8 a1 f2 ff ff       	call   f010faee <check_block>
f011084d:	83 c4 10             	add    $0x10,%esp
f0110850:	85 c0                	test   %eax,%eax
f0110852:	75 07                	jne    f011085b <test_alloc_block_BF+0x281>
		{
			is_correct = 0;
f0110854:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		*(tstStartVAs[i]) = 353;
f011085b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011085e:	8b 84 85 70 ff ff ff 	mov    -0x90(%ebp,%eax,4),%eax
f0110865:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f011086a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011086d:	8b 84 85 54 ff ff ff 	mov    -0xac(%ebp,%eax,4),%eax
f0110874:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f0110879:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011087c:	8b 84 85 38 ff ff ff 	mov    -0xc8(%ebp,%eax,4),%eax
f0110883:	66 c7 00 61 01       	movw   $0x161,(%eax)

	uint32 expectedVAs[numOfBFTests] = {startOf1st7KB, startOf1st2KB, startOf1st2KB + testSizes[1],startOf1st1KB, KERNEL_HEAP_START + 2*sizeof(int)};
	short* tstStartVAs[numOfBFTests+2] ;
	short* tstMidVAs[numOfBFTests+2] ;
	short* tstEndVAs[numOfBFTests+2] ;
	for (int i = 0; i < numOfBFTests; ++i)
f0110888:	ff 45 d0             	incl   -0x30(%ebp)
f011088b:	83 7d d0 04          	cmpl   $0x4,-0x30(%ebp)
f011088f:	0f 8e 25 ff ff ff    	jle    f01107ba <test_alloc_block_BF+0x1e0>
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}

	if (is_correct) is_correct = check_list_size(numOfAllocs);
f0110895:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110899:	74 10                	je     f01108ab <test_alloc_block_BF+0x2d1>
f011089b:	83 ec 0c             	sub    $0xc,%esp
f011089e:	6a 07                	push   $0x7
f01108a0:	e8 d1 f2 ff ff       	call   f010fb76 <check_list_size>
f01108a5:	83 c4 10             	add    $0x10,%esp
f01108a8:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (is_correct)
f01108ab:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01108af:	74 04                	je     f01108b5 <test_alloc_block_BF+0x2db>
	{
		eval += 15;
f01108b1:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of an existing free block*/
	cprintf("	3: Try to allocate a block with equal to an existing free block\n\n") ;
f01108b5:	83 ec 0c             	sub    $0xc,%esp
f01108b8:	68 78 a6 12 f0       	push   $0xf012a678
f01108bd:	e8 aa 06 ff ff       	call   f0100f6c <cprintf>
f01108c2:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01108c5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = kilo/4 - sizeOfMetaData;
f01108cc:	c7 45 c4 f8 00 00 00 	movl   $0xf8,-0x3c(%ebp)
	va = tstStartVAs[numOfBFTests] = alloc_block(actualSize, DA_BF);
f01108d3:	83 ec 08             	sub    $0x8,%esp
f01108d6:	6a 03                	push   $0x3
f01108d8:	ff 75 c4             	pushl  -0x3c(%ebp)
f01108db:	e8 00 27 01 00       	call   f0122fe0 <alloc_block>
f01108e0:	83 c4 10             	add    $0x10,%esp
f01108e3:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01108e6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01108e9:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfBFTests] = va + actualSize/2 ;
f01108ec:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01108ef:	d1 e8                	shr    %eax
f01108f1:	89 c2                	mov    %eax,%edx
f01108f3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01108f6:	01 d0                	add    %edx,%eax
f01108f8:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
	tstEndVAs[numOfBFTests] = va + actualSize - sizeof(short);
f01108fe:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110901:	8d 50 fe             	lea    -0x2(%eax),%edx
f0110904:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110907:	01 d0                	add    %edx,%eax
f0110909:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	//Check returned va
	expectedVA = (void*)(startOf1st2KB + testSizes[1] + testSizes[3]) ;
f011090f:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0110912:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0110915:	01 c2                	add    %eax,%edx
f0110917:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011091a:	01 d0                	add    %edx,%eax
f011091c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (is_correct) is_correct = check_block(va, expectedVA, kilo/4, 1);
f011091f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110923:	74 18                	je     f011093d <test_alloc_block_BF+0x363>
f0110925:	6a 01                	push   $0x1
f0110927:	68 00 01 00 00       	push   $0x100
f011092c:	ff 75 b4             	pushl  -0x4c(%ebp)
f011092f:	ff 75 c8             	pushl  -0x38(%ebp)
f0110932:	e8 b7 f1 ff ff       	call   f010faee <check_block>
f0110937:	83 c4 10             	add    $0x10,%esp
f011093a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (is_correct) is_correct = check_list_size(numOfAllocs-1);
f011093d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110941:	74 10                	je     f0110953 <test_alloc_block_BF+0x379>
f0110943:	83 ec 0c             	sub    $0xc,%esp
f0110946:	6a 06                	push   $0x6
f0110948:	e8 29 f2 ff ff       	call   f010fb76 <check_list_size>
f011094d:	83 c4 10             	add    $0x10,%esp
f0110950:	89 45 e0             	mov    %eax,-0x20(%ebp)

	*(tstStartVAs[numOfBFTests]) = 353 ;
f0110953:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0110956:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfBFTests]) = 353 ;
f011095b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0110961:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfBFTests]) = 353 ;
f0110966:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011096c:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f0110971:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110975:	74 04                	je     f011097b <test_alloc_block_BF+0x3a1>
	{
		eval += 10;
f0110977:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 4: Try to allocate a block with a bit smaller size [internal fragmentation case]*/
	cprintf("	4: Try to allocate a block with a bit smaller size [internal fragmentation case]\n\n") ;
f011097b:	83 ec 0c             	sub    $0xc,%esp
f011097e:	68 cc a4 12 f0       	push   $0xf012a4cc
f0110983:	e8 e4 05 ff ff       	call   f0100f6c <cprintf>
f0110988:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f011098b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = allocSizes[5] - sizeOfMetaData - 2;
f0110992:	a1 cc ed 17 f0       	mov    0xf017edcc,%eax
f0110997:	83 e8 0a             	sub    $0xa,%eax
f011099a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = tstStartVAs[numOfBFTests+1] = alloc_block(actualSize, DA_BF);
f011099d:	83 ec 08             	sub    $0x8,%esp
f01109a0:	6a 03                	push   $0x3
f01109a2:	ff 75 c4             	pushl  -0x3c(%ebp)
f01109a5:	e8 36 26 01 00       	call   f0122fe0 <alloc_block>
f01109aa:	83 c4 10             	add    $0x10,%esp
f01109ad:	89 45 88             	mov    %eax,-0x78(%ebp)
f01109b0:	8b 45 88             	mov    -0x78(%ebp),%eax
f01109b3:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfBFTests+1] = va + 2 ;
f01109b6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01109b9:	83 c0 02             	add    $0x2,%eax
f01109bc:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	tstEndVAs[numOfBFTests+1] = va + actualSize - sizeof(short);
f01109c2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01109c5:	8d 50 fe             	lea    -0x2(%eax),%edx
f01109c8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01109cb:	01 d0                	add    %edx,%eax
f01109cd:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
	//Check block
	expectedVA = startVAs[5*allocCntPerSize];
f01109d3:	a1 20 20 5c f0       	mov    0xf05c2020,%eax
f01109d8:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	if (is_correct) is_correct = check_block(va, expectedVA, allocSizes[5], 1);
f01109db:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01109df:	74 19                	je     f01109fa <test_alloc_block_BF+0x420>
f01109e1:	a1 cc ed 17 f0       	mov    0xf017edcc,%eax
f01109e6:	6a 01                	push   $0x1
f01109e8:	50                   	push   %eax
f01109e9:	ff 75 b4             	pushl  -0x4c(%ebp)
f01109ec:	ff 75 c8             	pushl  -0x38(%ebp)
f01109ef:	e8 fa f0 ff ff       	call   f010faee <check_block>
f01109f4:	83 c4 10             	add    $0x10,%esp
f01109f7:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (is_correct) is_correct = check_list_size(numOfAllocs - 2);
f01109fa:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01109fe:	74 10                	je     f0110a10 <test_alloc_block_BF+0x436>
f0110a00:	83 ec 0c             	sub    $0xc,%esp
f0110a03:	6a 05                	push   $0x5
f0110a05:	e8 6c f1 ff ff       	call   f010fb76 <check_list_size>
f0110a0a:	83 c4 10             	add    $0x10,%esp
f0110a0d:	89 45 e0             	mov    %eax,-0x20(%ebp)

	*(tstStartVAs[numOfBFTests+1]) = 353 ;
f0110a10:	8b 45 88             	mov    -0x78(%ebp),%eax
f0110a13:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfBFTests+1]) = 353 ;
f0110a18:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0110a1e:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfBFTests+1]) = 353 ;
f0110a23:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0110a29:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f0110a2e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110a32:	74 04                	je     f0110a38 <test_alloc_block_BF+0x45e>
	{
		eval += 10;
f0110a34:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 5: Check stored data inside each allocated block*/
	cprintf("	5: Check stored data inside each allocated block\n\n") ;
f0110a38:	83 ec 0c             	sub    $0xc,%esp
f0110a3b:	68 20 a5 12 f0       	push   $0xf012a520
f0110a40:	e8 27 05 ff ff       	call   f0100f6c <cprintf>
f0110a45:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110a48:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i < numOfBFTests+2; ++i)
f0110a4f:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0110a56:	e9 8e 00 00 00       	jmp    f0110ae9 <test_alloc_block_BF+0x50f>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f0110a5b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110a5e:	8b 84 85 70 ff ff ff 	mov    -0x90(%ebp,%eax,4),%eax
f0110a65:	66 8b 00             	mov    (%eax),%ax
f0110a68:	66 3d 61 01          	cmp    $0x161,%ax
f0110a6c:	75 26                	jne    f0110a94 <test_alloc_block_BF+0x4ba>
f0110a6e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110a71:	8b 84 85 54 ff ff ff 	mov    -0xac(%ebp,%eax,4),%eax
f0110a78:	66 8b 00             	mov    (%eax),%ax
f0110a7b:	66 3d 61 01          	cmp    $0x161,%ax
f0110a7f:	75 13                	jne    f0110a94 <test_alloc_block_BF+0x4ba>
f0110a81:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110a84:	8b 84 85 38 ff ff ff 	mov    -0xc8(%ebp,%eax,4),%eax
f0110a8b:	66 8b 00             	mov    (%eax),%ax
f0110a8e:	66 3d 61 01          	cmp    $0x161,%ax
f0110a92:	74 52                	je     f0110ae6 <test_alloc_block_BF+0x50c>
		{
			//cprintf("start VA = %x, mid VA = %x, end VA = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
			is_correct = 0;
f0110a94:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_BF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f0110a9b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110a9e:	8b 84 85 38 ff ff ff 	mov    -0xc8(%ebp,%eax,4),%eax
f0110aa5:	66 8b 00             	mov    (%eax),%ax
f0110aa8:	0f bf c8             	movswl %ax,%ecx
f0110aab:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110aae:	8b 84 85 54 ff ff ff 	mov    -0xac(%ebp,%eax,4),%eax
f0110ab5:	66 8b 00             	mov    (%eax),%ax
f0110ab8:	0f bf d0             	movswl %ax,%edx
f0110abb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110abe:	8b 84 85 70 ff ff ff 	mov    -0x90(%ebp,%eax,4),%eax
f0110ac5:	66 8b 00             	mov    (%eax),%ax
f0110ac8:	98                   	cwtl   
f0110ac9:	83 ec 08             	sub    $0x8,%esp
f0110acc:	51                   	push   %ecx
f0110acd:	52                   	push   %edx
f0110ace:	50                   	push   %eax
f0110acf:	68 61 01 00 00       	push   $0x161
f0110ad4:	ff 75 cc             	pushl  -0x34(%ebp)
f0110ad7:	68 bc a6 12 f0       	push   $0xf012a6bc
f0110adc:	e8 8b 04 ff ff       	call   f0100f6c <cprintf>
f0110ae1:	83 c4 20             	add    $0x20,%esp
			break;
f0110ae4:	eb 0d                	jmp    f0110af3 <test_alloc_block_BF+0x519>
	//====================================================================//
	/*BF ALLOC Scenario 5: Check stored data inside each allocated block*/
	cprintf("	5: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < numOfBFTests+2; ++i)
f0110ae6:	ff 45 cc             	incl   -0x34(%ebp)
f0110ae9:	83 7d cc 06          	cmpl   $0x6,-0x34(%ebp)
f0110aed:	0f 8e 68 ff ff ff    	jle    f0110a5b <test_alloc_block_BF+0x481>
			cprintf("alloc_block_BF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f0110af3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110af7:	74 04                	je     f0110afd <test_alloc_block_BF+0x523>
	{
		eval += 10;
f0110af9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	cprintf("test alloc_block_BF completed. Evaluation = %d%\n", eval);
f0110afd:	83 ec 08             	sub    $0x8,%esp
f0110b00:	ff 75 e4             	pushl  -0x1c(%ebp)
f0110b03:	68 28 a7 12 f0       	push   $0xf012a728
f0110b08:	e8 5f 04 ff ff       	call   f0100f6c <cprintf>
f0110b0d:	83 c4 10             	add    $0x10,%esp
}
f0110b10:	90                   	nop
f0110b11:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110b14:	5b                   	pop    %ebx
f0110b15:	5e                   	pop    %esi
f0110b16:	5f                   	pop    %edi
f0110b17:	5d                   	pop    %ebp
f0110b18:	c3                   	ret    

f0110b19 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f0110b19:	55                   	push   %ebp
f0110b1a:	89 e5                	mov    %esp,%ebp
	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/

	//cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");

}
f0110b1c:	90                   	nop
f0110b1d:	5d                   	pop    %ebp
f0110b1e:	c3                   	ret    

f0110b1f <test_free_block_FF>:

void test_free_block_FF()
{
f0110b1f:	55                   	push   %ebp
f0110b20:	89 e5                	mov    %esp,%ebp
f0110b22:	53                   	push   %ebx
f0110b23:	81 ec 94 00 00 00    	sub    $0x94,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f0110b29:	83 ec 0c             	sub    $0xc,%esp
f0110b2c:	68 70 a7 12 f0       	push   $0xf012a770
f0110b31:	e8 36 04 ff ff       	call   f0100f6c <cprintf>
f0110b36:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f0110b39:	83 ec 0c             	sub    $0xc,%esp
f0110b3c:	68 b0 a7 12 f0       	push   $0xf012a7b0
f0110b41:	e8 26 04 ff ff       	call   f0100f6c <cprintf>
f0110b46:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f0110b49:	83 ec 0c             	sub    $0xc,%esp
f0110b4c:	68 70 a7 12 f0       	push   $0xf012a770
f0110b51:	e8 16 04 ff ff       	call   f0100f6c <cprintf>
f0110b56:	83 c4 10             	add    $0x10,%esp
	void*expected_va ;

	int eval = 0;
f0110b59:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;
	int initAllocatedSpace = 3*Mega;
f0110b60:	c7 45 cc 00 00 30 00 	movl   $0x300000,-0x34(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f0110b67:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110b6a:	83 ec 08             	sub    $0x8,%esp
f0110b6d:	50                   	push   %eax
f0110b6e:	68 00 00 00 f6       	push   $0xf6000000
f0110b73:	e8 95 25 01 00       	call   f012310d <initialize_dynamic_allocator>
f0110b78:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f0110b7b:	83 ec 0c             	sub    $0xc,%esp
f0110b7e:	68 f0 a7 12 f0       	push   $0xf012a7f0
f0110b83:	e8 e4 03 ff ff       	call   f0100f6c <cprintf>
f0110b88:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f0110b8b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f0110b92:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0110b99:	eb 2a                	jmp    f0110bc5 <test_free_block_FF+0xa6>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f0110b9b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0110b9e:	8b 14 85 b8 ed 17 f0 	mov    -0xfe81248(,%eax,4),%edx
f0110ba5:	89 d0                	mov    %edx,%eax
f0110ba7:	c1 e0 02             	shl    $0x2,%eax
f0110baa:	01 d0                	add    %edx,%eax
f0110bac:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110bb3:	01 d0                	add    %edx,%eax
f0110bb5:	c1 e0 03             	shl    $0x3,%eax
f0110bb8:	89 c2                	mov    %eax,%edx
f0110bba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110bbd:	01 d0                	add    %edx,%eax
f0110bbf:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f0110bc2:	ff 45 e8             	incl   -0x18(%ebp)
f0110bc5:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f0110bc9:	7e d0                	jle    f0110b9b <test_free_block_FF+0x7c>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes - 2*sizeof(int) ; //exclude size of "DA Begin & End" blocks
f0110bcb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110bce:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0110bd1:	83 e8 08             	sub    $0x8,%eax
f0110bd4:	89 45 c8             	mov    %eax,-0x38(%ebp)
	if (remainSize <= 0)
f0110bd7:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110bdb:	7f 17                	jg     f0110bf4 <test_free_block_FF+0xd5>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f0110bdd:	83 ec 04             	sub    $0x4,%esp
f0110be0:	68 48 a8 12 f0       	push   $0xf012a848
f0110be5:	68 76 02 00 00       	push   $0x276
f0110bea:	68 28 a0 12 f0       	push   $0xf012a028
f0110bef:	e8 26 f7 fe ff       	call   f010031a <_panic>

	int idx = 0;
f0110bf4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
f0110bfb:	c7 45 e0 04 00 00 f6 	movl   $0xf6000004,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0110c02:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0110c09:	e9 0b 01 00 00       	jmp    f0110d19 <test_free_block_FF+0x1fa>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0110c0e:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0110c15:	e9 ef 00 00 00       	jmp    f0110d09 <test_free_block_FF+0x1ea>
		{
			actualSize = allocSizes[i] - sizeOfMetaData;
f0110c1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110c1d:	8b 04 85 b8 ed 17 f0 	mov    -0xfe81248(,%eax,4),%eax
f0110c24:	83 e8 08             	sub    $0x8,%eax
f0110c27:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f0110c2a:	83 ec 08             	sub    $0x8,%esp
f0110c2d:	6a 01                	push   $0x1
f0110c2f:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110c32:	e8 a9 23 01 00       	call   f0122fe0 <alloc_block>
f0110c37:	83 c4 10             	add    $0x10,%esp
f0110c3a:	89 c2                	mov    %eax,%edx
f0110c3c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110c3f:	89 14 85 80 10 5c f0 	mov    %edx,-0xfa3ef80(,%eax,4)
f0110c46:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110c49:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0110c50:	89 45 c0             	mov    %eax,-0x40(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f0110c53:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110c56:	d1 e8                	shr    %eax
f0110c58:	89 c2                	mov    %eax,%edx
f0110c5a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110c5d:	01 c2                	add    %eax,%edx
f0110c5f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110c62:	89 14 85 80 3c 5c f0 	mov    %edx,-0xfa3c380(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f0110c69:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110c6c:	8d 50 fe             	lea    -0x2(%eax),%edx
f0110c6f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110c72:	01 c2                	add    %eax,%edx
f0110c74:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110c77:	89 14 85 80 26 5c f0 	mov    %edx,-0xfa3d980(,%eax,4)
			//Check returned va
			expected_va = curVA + sizeOfMetaData/2;
f0110c7e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0110c81:	83 c0 04             	add    $0x4,%eax
f0110c84:	89 45 bc             	mov    %eax,-0x44(%ebp)
			if (check_block(va, expected_va, allocSizes[i], 1) == 0)
f0110c87:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110c8a:	8b 04 85 b8 ed 17 f0 	mov    -0xfe81248(,%eax,4),%eax
f0110c91:	6a 01                	push   $0x1
f0110c93:	50                   	push   %eax
f0110c94:	ff 75 bc             	pushl  -0x44(%ebp)
f0110c97:	ff 75 c0             	pushl  -0x40(%ebp)
f0110c9a:	e8 4f ee ff ff       	call   f010faee <check_block>
f0110c9f:	83 c4 10             	add    $0x10,%esp
f0110ca2:	85 c0                	test   %eax,%eax
f0110ca4:	75 20                	jne    f0110cc6 <test_free_block_FF+0x1a7>
				//			if(va != (curVA + sizeOfMetaData/2))
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x", idx, expected_va ,va);
f0110ca6:	83 ec 08             	sub    $0x8,%esp
f0110ca9:	ff 75 c0             	pushl  -0x40(%ebp)
f0110cac:	ff 75 bc             	pushl  -0x44(%ebp)
f0110caf:	ff 75 e4             	pushl  -0x1c(%ebp)
f0110cb2:	68 c0 a8 12 f0       	push   $0xf012a8c0
f0110cb7:	68 87 02 00 00       	push   $0x287
f0110cbc:	68 28 a0 12 f0       	push   $0xf012a028
f0110cc1:	e8 54 f6 fe ff       	call   f010031a <_panic>
			curVA += allocSizes[i] ;
f0110cc6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110cc9:	8b 04 85 b8 ed 17 f0 	mov    -0xfe81248(,%eax,4),%eax
f0110cd0:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f0110cd3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110cd6:	8b 14 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%edx
f0110cdd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110ce0:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f0110ce3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110ce6:	8b 14 85 80 3c 5c f0 	mov    -0xfa3c380(,%eax,4),%edx
f0110ced:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110cf0:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f0110cf3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110cf6:	8b 14 85 80 26 5c f0 	mov    -0xfa3d980(,%eax,4),%edx
f0110cfd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110d00:	66 89 02             	mov    %ax,(%edx)
			idx++;
f0110d03:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0110d06:	ff 45 d8             	incl   -0x28(%ebp)
f0110d09:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f0110d10:	0f 8e 04 ff ff ff    	jle    f0110c1a <test_free_block_FF+0xfb>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0110d16:	ff 45 dc             	incl   -0x24(%ebp)
f0110d19:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f0110d1d:	0f 8e eb fe ff ff    	jle    f0110c0e <test_free_block_FF+0xef>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData;
f0110d23:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110d26:	83 e8 08             	sub    $0x8,%eax
f0110d29:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f0110d2c:	83 ec 08             	sub    $0x8,%esp
f0110d2f:	6a 01                	push   $0x1
f0110d31:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110d34:	e8 a7 22 01 00       	call   f0122fe0 <alloc_block>
f0110d39:	83 c4 10             	add    $0x10,%esp
f0110d3c:	89 c2                	mov    %eax,%edx
f0110d3e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110d41:	89 14 85 80 10 5c f0 	mov    %edx,-0xfa3ef80(,%eax,4)
f0110d48:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110d4b:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0110d52:	89 45 c0             	mov    %eax,-0x40(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f0110d55:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110d58:	d1 e8                	shr    %eax
f0110d5a:	89 c2                	mov    %eax,%edx
f0110d5c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110d5f:	01 c2                	add    %eax,%edx
f0110d61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110d64:	89 14 85 80 3c 5c f0 	mov    %edx,-0xfa3c380(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f0110d6b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110d6e:	8d 50 fe             	lea    -0x2(%eax),%edx
f0110d71:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110d74:	01 c2                	add    %eax,%edx
f0110d76:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110d79:	89 14 85 80 26 5c f0 	mov    %edx,-0xfa3d980(,%eax,4)
	//Check returned va
	expected_va = curVA + sizeOfMetaData/2;
f0110d80:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0110d83:	83 c0 04             	add    $0x4,%eax
f0110d86:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (check_block(va, expected_va, remainSize, 1) == 0)
f0110d89:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110d8c:	6a 01                	push   $0x1
f0110d8e:	50                   	push   %eax
f0110d8f:	ff 75 bc             	pushl  -0x44(%ebp)
f0110d92:	ff 75 c0             	pushl  -0x40(%ebp)
f0110d95:	e8 54 ed ff ff       	call   f010faee <check_block>
f0110d9a:	83 c4 10             	add    $0x10,%esp
f0110d9d:	85 c0                	test   %eax,%eax
f0110d9f:	75 1d                	jne    f0110dbe <test_free_block_FF+0x29f>
		//			if(va != (curVA + sizeOfMetaData/2))
		panic("test_free_block #2: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x",  expected_va ,va);
f0110da1:	83 ec 0c             	sub    $0xc,%esp
f0110da4:	ff 75 c0             	pushl  -0x40(%ebp)
f0110da7:	ff 75 bc             	pushl  -0x44(%ebp)
f0110daa:	68 24 a9 12 f0       	push   $0xf012a924
f0110daf:	68 9a 02 00 00       	push   $0x29a
f0110db4:	68 28 a0 12 f0       	push   $0xf012a028
f0110db9:	e8 5c f5 fe ff       	call   f010031a <_panic>
	*(startVAs[idx]) = idx ;
f0110dbe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110dc1:	8b 14 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%edx
f0110dc8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110dcb:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f0110dce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110dd1:	8b 14 85 80 3c 5c f0 	mov    -0xfa3c380(,%eax,4),%edx
f0110dd8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110ddb:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f0110dde:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110de1:	8b 14 85 80 26 5c f0 	mov    -0xfa3d980(,%eax,4),%edx
f0110de8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110deb:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f0110dee:	83 ec 0c             	sub    $0xc,%esp
f0110df1:	68 84 a9 12 f0       	push   $0xf012a984
f0110df6:	e8 71 01 ff ff       	call   f0100f6c <cprintf>
f0110dfb:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110dfe:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f0110e05:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0110e0c:	eb 5b                	jmp    f0110e69 <test_free_block_FF+0x34a>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f0110e0e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110e11:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0110e18:	66 8b 00             	mov    (%eax),%ax
f0110e1b:	98                   	cwtl   
f0110e1c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0110e1f:	75 26                	jne    f0110e47 <test_free_block_FF+0x328>
f0110e21:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110e24:	8b 04 85 80 3c 5c f0 	mov    -0xfa3c380(,%eax,4),%eax
f0110e2b:	66 8b 00             	mov    (%eax),%ax
f0110e2e:	98                   	cwtl   
f0110e2f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0110e32:	75 13                	jne    f0110e47 <test_free_block_FF+0x328>
f0110e34:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110e37:	8b 04 85 80 26 5c f0 	mov    -0xfa3d980(,%eax,4),%eax
f0110e3e:	66 8b 00             	mov    (%eax),%ax
f0110e41:	98                   	cwtl   
f0110e42:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0110e45:	74 1f                	je     f0110e66 <test_free_block_FF+0x347>
		{
			is_correct = 0;
f0110e47:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f0110e4e:	83 ec 04             	sub    $0x4,%esp
f0110e51:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110e54:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110e57:	68 b8 a9 12 f0       	push   $0xf012a9b8
f0110e5c:	e8 0b 01 ff ff       	call   f0100f6c <cprintf>
f0110e61:	83 c4 10             	add    $0x10,%esp
			break;
f0110e64:	eb 0b                	jmp    f0110e71 <test_free_block_FF+0x352>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f0110e66:	ff 45 d4             	incl   -0x2c(%ebp)
f0110e69:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110e6c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0110e6f:	7c 9d                	jl     f0110e0e <test_free_block_FF+0x2ef>
		}
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f0110e71:	83 ec 0c             	sub    $0xc,%esp
f0110e74:	68 08 aa 12 f0       	push   $0xf012aa08
f0110e79:	e8 ee 00 ff ff       	call   f0100f6c <cprintf>
f0110e7e:	83 c4 10             	add    $0x10,%esp
	uint32 block_size, block_status, expected_size, *blk_header, *blk_footer;
	is_correct = 1;
f0110e81:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110e88:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0110e8f:	e9 9b 00 00 00       	jmp    f0110f2f <test_free_block_FF+0x410>
	{
		cprintf("test#%d\n",i);
f0110e94:	83 ec 08             	sub    $0x8,%esp
f0110e97:	ff 75 d0             	pushl  -0x30(%ebp)
f0110e9a:	68 b9 a4 12 f0       	push   $0xf012a4b9
f0110e9f:	e8 c8 00 ff ff       	call   f0100f6c <cprintf>
f0110ea4:	83 c4 10             	add    $0x10,%esp
		free_block(startVAs[i*allocCntPerSize]);
f0110ea7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0110eaa:	89 d0                	mov    %edx,%eax
f0110eac:	c1 e0 02             	shl    $0x2,%eax
f0110eaf:	01 d0                	add    %edx,%eax
f0110eb1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110eb8:	01 d0                	add    %edx,%eax
f0110eba:	c1 e0 03             	shl    $0x3,%eax
f0110ebd:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0110ec4:	83 ec 0c             	sub    $0xc,%esp
f0110ec7:	50                   	push   %eax
f0110ec8:	e8 b1 2b 01 00       	call   f0123a7e <free_block>
f0110ecd:	83 c4 10             	add    $0x10,%esp
		if (check_block(startVAs[i*allocCntPerSize], startVAs[i*allocCntPerSize], allocSizes[i], 0) == 0)
f0110ed0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110ed3:	8b 0c 85 b8 ed 17 f0 	mov    -0xfe81248(,%eax,4),%ecx
f0110eda:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0110edd:	89 d0                	mov    %edx,%eax
f0110edf:	c1 e0 02             	shl    $0x2,%eax
f0110ee2:	01 d0                	add    %edx,%eax
f0110ee4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110eeb:	01 d0                	add    %edx,%eax
f0110eed:	c1 e0 03             	shl    $0x3,%eax
f0110ef0:	8b 14 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%edx
f0110ef7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0110efa:	89 d8                	mov    %ebx,%eax
f0110efc:	c1 e0 02             	shl    $0x2,%eax
f0110eff:	01 d8                	add    %ebx,%eax
f0110f01:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f0110f08:	01 d8                	add    %ebx,%eax
f0110f0a:	c1 e0 03             	shl    $0x3,%eax
f0110f0d:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0110f14:	6a 00                	push   $0x0
f0110f16:	51                   	push   %ecx
f0110f17:	52                   	push   %edx
f0110f18:	50                   	push   %eax
f0110f19:	e8 d0 eb ff ff       	call   f010faee <check_block>
f0110f1e:	83 c4 10             	add    $0x10,%esp
f0110f21:	85 c0                	test   %eax,%eax
f0110f23:	75 07                	jne    f0110f2c <test_free_block_FF+0x40d>
		{
			is_correct = 0;
f0110f25:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
	uint32 block_size, block_status, expected_size, *blk_header, *blk_footer;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110f2c:	ff 45 d0             	incl   -0x30(%ebp)
f0110f2f:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f0110f33:	0f 8e 5b ff ff ff    	jle    f0110e94 <test_free_block_FF+0x375>
		if (check_block(startVAs[i*allocCntPerSize], startVAs[i*allocCntPerSize], allocSizes[i], 0) == 0)
		{
			is_correct = 0;
		}
	}
	uint32 expectedNumOfFreeBlks = numOfAllocs;
f0110f39:	c7 45 b8 07 00 00 00 	movl   $0x7,-0x48(%ebp)
	if (is_correct) is_correct = check_list_size(expectedNumOfFreeBlks);
f0110f40:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110f44:	74 11                	je     f0110f57 <test_free_block_FF+0x438>
f0110f46:	83 ec 0c             	sub    $0xc,%esp
f0110f49:	ff 75 b8             	pushl  -0x48(%ebp)
f0110f4c:	e8 25 ec ff ff       	call   f010fb76 <check_list_size>
f0110f51:	83 c4 10             	add    $0x10,%esp
f0110f54:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (is_correct)
f0110f57:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110f5b:	74 04                	je     f0110f61 <test_free_block_FF+0x442>
	{
		eval += 10;
f0110f5d:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	is_correct = 1;
f0110f61:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f0110f68:	a1 60 26 5c f0       	mov    0xf05c2660,%eax
f0110f6d:	83 ec 0c             	sub    $0xc,%esp
f0110f70:	50                   	push   %eax
f0110f71:	e8 08 2b 01 00       	call   f0123a7e <free_block>
f0110f76:	83 c4 10             	add    $0x10,%esp
	if (is_correct) is_correct = check_block(startVAs[numOfAllocs*allocCntPerSize], startVAs[numOfAllocs*allocCntPerSize], remainSize, 0);
f0110f79:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110f7d:	74 1e                	je     f0110f9d <test_free_block_FF+0x47e>
f0110f7f:	8b 4d c8             	mov    -0x38(%ebp),%ecx
f0110f82:	8b 15 60 26 5c f0    	mov    0xf05c2660,%edx
f0110f88:	a1 60 26 5c f0       	mov    0xf05c2660,%eax
f0110f8d:	6a 00                	push   $0x0
f0110f8f:	51                   	push   %ecx
f0110f90:	52                   	push   %edx
f0110f91:	50                   	push   %eax
f0110f92:	e8 57 eb ff ff       	call   f010faee <check_block>
f0110f97:	83 c4 10             	add    $0x10,%esp
f0110f9a:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData;
f0110f9d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110fa0:	83 e8 08             	sub    $0x8,%eax
f0110fa3:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0110fa6:	83 ec 08             	sub    $0x8,%esp
f0110fa9:	6a 01                	push   $0x1
f0110fab:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110fae:	e8 2d 20 01 00       	call   f0122fe0 <alloc_block>
f0110fb3:	83 c4 10             	add    $0x10,%esp
f0110fb6:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check block
	expected_va = (curVA + sizeOfMetaData/2);
f0110fb9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0110fbc:	83 c0 04             	add    $0x4,%eax
f0110fbf:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (is_correct) is_correct = check_block(va, expected_va, remainSize, 1);
f0110fc2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110fc6:	74 17                	je     f0110fdf <test_free_block_FF+0x4c0>
f0110fc8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110fcb:	6a 01                	push   $0x1
f0110fcd:	50                   	push   %eax
f0110fce:	ff 75 bc             	pushl  -0x44(%ebp)
f0110fd1:	ff 75 c0             	pushl  -0x40(%ebp)
f0110fd4:	e8 15 eb ff ff       	call   f010faee <check_block>
f0110fd9:	83 c4 10             	add    $0x10,%esp
f0110fdc:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f0110fdf:	a1 5c 26 5c f0       	mov    0xf05c265c,%eax
f0110fe4:	83 ec 0c             	sub    $0xc,%esp
f0110fe7:	50                   	push   %eax
f0110fe8:	e8 91 2a 01 00       	call   f0123a7e <free_block>
f0110fed:	83 c4 10             	add    $0x10,%esp
	if (is_correct) is_correct = check_block(startVAs[numOfAllocs*allocCntPerSize-1], startVAs[numOfAllocs*allocCntPerSize-1], allocSizes[numOfAllocs-1], 0);
f0110ff0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110ff4:	74 21                	je     f0111017 <test_free_block_FF+0x4f8>
f0110ff6:	8b 0d d0 ed 17 f0    	mov    0xf017edd0,%ecx
f0110ffc:	8b 15 5c 26 5c f0    	mov    0xf05c265c,%edx
f0111002:	a1 5c 26 5c f0       	mov    0xf05c265c,%eax
f0111007:	6a 00                	push   $0x0
f0111009:	51                   	push   %ecx
f011100a:	52                   	push   %edx
f011100b:	50                   	push   %eax
f011100c:	e8 dd ea ff ff       	call   f010faee <check_block>
f0111011:	83 c4 10             	add    $0x10,%esp
f0111014:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData;
f0111017:	a1 b8 ed 17 f0       	mov    0xf017edb8,%eax
f011101c:	83 e8 08             	sub    $0x8,%eax
f011101f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0111022:	83 ec 08             	sub    $0x8,%esp
f0111025:	6a 01                	push   $0x1
f0111027:	ff 75 c4             	pushl  -0x3c(%ebp)
f011102a:	e8 b1 1f 01 00       	call   f0122fe0 <alloc_block>
f011102f:	83 c4 10             	add    $0x10,%esp
f0111032:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected_va = (void*)(KERNEL_HEAP_START + sizeof(int) + sizeOfMetaData/2);
f0111035:	c7 45 bc 08 00 00 f6 	movl   $0xf6000008,-0x44(%ebp)
	if (is_correct) is_correct = check_block(va, expected_va, allocSizes[0], 1);
f011103c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111040:	74 19                	je     f011105b <test_free_block_FF+0x53c>
f0111042:	a1 b8 ed 17 f0       	mov    0xf017edb8,%eax
f0111047:	6a 01                	push   $0x1
f0111049:	50                   	push   %eax
f011104a:	ff 75 bc             	pushl  -0x44(%ebp)
f011104d:	ff 75 c0             	pushl  -0x40(%ebp)
f0111050:	e8 99 ea ff ff       	call   f010faee <check_block>
f0111055:	83 c4 10             	add    $0x10,%esp
f0111058:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//Free 2nd block
	free_block(startVAs[1]);
f011105b:	a1 84 10 5c f0       	mov    0xf05c1084,%eax
f0111060:	83 ec 0c             	sub    $0xc,%esp
f0111063:	50                   	push   %eax
f0111064:	e8 15 2a 01 00       	call   f0123a7e <free_block>
f0111069:	83 c4 10             	add    $0x10,%esp
	if (is_correct) is_correct = check_block(startVAs[1], startVAs[1], allocSizes[0], 0);
f011106c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111070:	74 21                	je     f0111093 <test_free_block_FF+0x574>
f0111072:	8b 0d b8 ed 17 f0    	mov    0xf017edb8,%ecx
f0111078:	8b 15 84 10 5c f0    	mov    0xf05c1084,%edx
f011107e:	a1 84 10 5c f0       	mov    0xf05c1084,%eax
f0111083:	6a 00                	push   $0x0
f0111085:	51                   	push   %ecx
f0111086:	52                   	push   %edx
f0111087:	50                   	push   %eax
f0111088:	e8 61 ea ff ff       	call   f010faee <check_block>
f011108d:	83 c4 10             	add    $0x10,%esp
f0111090:	89 45 f0             	mov    %eax,-0x10(%ebp)

	expectedNumOfFreeBlks++ ;
f0111093:	ff 45 b8             	incl   -0x48(%ebp)
	if (is_correct) is_correct = check_list_size(expectedNumOfFreeBlks);
f0111096:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011109a:	74 11                	je     f01110ad <test_free_block_FF+0x58e>
f011109c:	83 ec 0c             	sub    $0xc,%esp
f011109f:	ff 75 b8             	pushl  -0x48(%ebp)
f01110a2:	e8 cf ea ff ff       	call   f010fb76 <check_list_size>
f01110a7:	83 c4 10             	add    $0x10,%esp
f01110aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (is_correct)
f01110ad:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01110b1:	74 04                	je     f01110b7 <test_free_block_FF+0x598>
	{
		eval += 10;
f01110b3:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f01110b7:	83 ec 0c             	sub    $0xc,%esp
f01110ba:	68 38 aa 12 f0       	push   $0xf012aa38
f01110bf:	e8 a8 fe fe ff       	call   f0100f6c <cprintf>
f01110c4:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f01110c7:	83 ec 0c             	sub    $0xc,%esp
f01110ca:	68 74 aa 12 f0       	push   $0xf012aa74
f01110cf:	e8 98 fe fe ff       	call   f0100f6c <cprintf>
f01110d4:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01110d7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f01110de:	c7 45 b4 78 05 00 00 	movl   $0x578,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f01110e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01110e8:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f01110ef:	83 ec 0c             	sub    $0xc,%esp
f01110f2:	50                   	push   %eax
f01110f3:	e8 86 29 01 00       	call   f0123a7e <free_block>
f01110f8:	83 c4 10             	add    $0x10,%esp
	expected_size = remainSize + allocSizes[numOfAllocs-1];
f01110fb:	8b 15 d0 ed 17 f0    	mov    0xf017edd0,%edx
f0111101:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0111104:	01 d0                	add    %edx,%eax
f0111106:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if (check_block(startVAs[blockIndex-1], startVAs[blockIndex-1], expected_size, 0) == 0)
f0111109:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011110c:	48                   	dec    %eax
f011110d:	8b 14 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%edx
f0111114:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111117:	48                   	dec    %eax
f0111118:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f011111f:	6a 00                	push   $0x0
f0111121:	ff 75 b0             	pushl  -0x50(%ebp)
f0111124:	52                   	push   %edx
f0111125:	50                   	push   %eax
f0111126:	e8 c3 e9 ff ff       	call   f010faee <check_block>
f011112b:	83 c4 10             	add    $0x10,%esp
f011112e:	85 c0                	test   %eax,%eax
f0111130:	75 07                	jne    f0111139 <test_free_block_FF+0x61a>
	{
		is_correct = 0;
f0111132:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	}
	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f0111139:	83 ec 0c             	sub    $0xc,%esp
f011113c:	68 89 aa 12 f0       	push   $0xf012aa89
f0111141:	e8 26 fe fe ff       	call   f0100f6c <cprintf>
f0111146:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f0111149:	c7 45 b4 91 01 00 00 	movl   $0x191,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0111150:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111153:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f011115a:	83 ec 0c             	sub    $0xc,%esp
f011115d:	50                   	push   %eax
f011115e:	e8 1b 29 01 00       	call   f0123a7e <free_block>
f0111163:	83 c4 10             	add    $0x10,%esp
	expected_size = allocSizes[2]+allocSizes[2];
f0111166:	8b 15 c0 ed 17 f0    	mov    0xf017edc0,%edx
f011116c:	a1 c0 ed 17 f0       	mov    0xf017edc0,%eax
f0111171:	01 d0                	add    %edx,%eax
f0111173:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if (check_block(startVAs[blockIndex-1], startVAs[blockIndex-1], expected_size, 0) == 0)
f0111176:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111179:	48                   	dec    %eax
f011117a:	8b 14 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%edx
f0111181:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111184:	48                   	dec    %eax
f0111185:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f011118c:	6a 00                	push   $0x0
f011118e:	ff 75 b0             	pushl  -0x50(%ebp)
f0111191:	52                   	push   %edx
f0111192:	50                   	push   %eax
f0111193:	e8 56 e9 ff ff       	call   f010faee <check_block>
f0111198:	83 c4 10             	add    $0x10,%esp
f011119b:	85 c0                	test   %eax,%eax
f011119d:	75 07                	jne    f01111a6 <test_free_block_FF+0x687>
	{
		is_correct = 0;
f011119f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	}
	if (check_list_size(expectedNumOfFreeBlks) == 0)
f01111a6:	83 ec 0c             	sub    $0xc,%esp
f01111a9:	ff 75 b8             	pushl  -0x48(%ebp)
f01111ac:	e8 c5 e9 ff ff       	call   f010fb76 <check_list_size>
f01111b1:	83 c4 10             	add    $0x10,%esp
f01111b4:	85 c0                	test   %eax,%eax
f01111b6:	75 07                	jne    f01111bf <test_free_block_FF+0x6a0>
	{
		is_correct = 0;
f01111b8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	}
	if (is_correct)
f01111bf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01111c3:	74 04                	je     f01111c9 <test_free_block_FF+0x6aa>
	{
		eval += 15;
f01111c5:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f01111c9:	83 ec 0c             	sub    $0xc,%esp
f01111cc:	68 a4 aa 12 f0       	push   $0xf012aaa4
f01111d1:	e8 96 fd fe ff       	call   f0100f6c <cprintf>
f01111d6:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f01111d9:	83 ec 0c             	sub    $0xc,%esp
f01111dc:	68 dc aa 12 f0       	push   $0xf012aadc
f01111e1:	e8 86 fd fe ff       	call   f0100f6c <cprintf>
f01111e6:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01111e9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 0 ;
f01111f0:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f01111f7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01111fa:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0111201:	83 ec 0c             	sub    $0xc,%esp
f0111204:	50                   	push   %eax
f0111205:	e8 74 28 01 00       	call   f0123a7e <free_block>
f011120a:	83 c4 10             	add    $0x10,%esp
	expected_size = allocSizes[0]+allocSizes[0];
f011120d:	8b 15 b8 ed 17 f0    	mov    0xf017edb8,%edx
f0111213:	a1 b8 ed 17 f0       	mov    0xf017edb8,%eax
f0111218:	01 d0                	add    %edx,%eax
f011121a:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if (check_block(startVAs[blockIndex], startVAs[blockIndex], expected_size, 0) == 0)
f011121d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111220:	8b 14 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%edx
f0111227:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011122a:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0111231:	6a 00                	push   $0x0
f0111233:	ff 75 b0             	pushl  -0x50(%ebp)
f0111236:	52                   	push   %edx
f0111237:	50                   	push   %eax
f0111238:	e8 b1 e8 ff ff       	call   f010faee <check_block>
f011123d:	83 c4 10             	add    $0x10,%esp
f0111240:	85 c0                	test   %eax,%eax
f0111242:	75 07                	jne    f011124b <test_free_block_FF+0x72c>
	{
		is_correct = 0;
f0111244:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f011124b:	83 ec 0c             	sub    $0xc,%esp
f011124e:	68 f1 aa 12 f0       	push   $0xf012aaf1
f0111253:	e8 14 fd fe ff       	call   f0100f6c <cprintf>
f0111258:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f011125b:	c7 45 b4 c7 00 00 00 	movl   $0xc7,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0111262:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111265:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f011126c:	83 ec 0c             	sub    $0xc,%esp
f011126f:	50                   	push   %eax
f0111270:	e8 09 28 01 00       	call   f0123a7e <free_block>
f0111275:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f0111278:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011127b:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0111282:	83 ec 0c             	sub    $0xc,%esp
f0111285:	50                   	push   %eax
f0111286:	e8 1e 1d 01 00       	call   f0122fa9 <get_block_size>
f011128b:	83 c4 10             	add    $0x10,%esp
f011128e:	89 45 ac             	mov    %eax,-0x54(%ebp)
	expected_size = allocSizes[0]+allocSizes[1];
f0111291:	8b 15 b8 ed 17 f0    	mov    0xf017edb8,%edx
f0111297:	a1 bc ed 17 f0       	mov    0xf017edbc,%eax
f011129c:	01 d0                	add    %edx,%eax
f011129e:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if (check_block(startVAs[blockIndex], startVAs[blockIndex], expected_size, 0) == 0)
f01112a1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01112a4:	8b 14 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%edx
f01112ab:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01112ae:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f01112b5:	6a 00                	push   $0x0
f01112b7:	ff 75 b0             	pushl  -0x50(%ebp)
f01112ba:	52                   	push   %edx
f01112bb:	50                   	push   %eax
f01112bc:	e8 2d e8 ff ff       	call   f010faee <check_block>
f01112c1:	83 c4 10             	add    $0x10,%esp
f01112c4:	85 c0                	test   %eax,%eax
f01112c6:	75 07                	jne    f01112cf <test_free_block_FF+0x7b0>
	{
		is_correct = 0;
f01112c8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	}

	if (is_correct) is_correct = check_list_size(expectedNumOfFreeBlks);
f01112cf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01112d3:	74 11                	je     f01112e6 <test_free_block_FF+0x7c7>
f01112d5:	83 ec 0c             	sub    $0xc,%esp
f01112d8:	ff 75 b8             	pushl  -0x48(%ebp)
f01112db:	e8 96 e8 ff ff       	call   f010fb76 <check_list_size>
f01112e0:	83 c4 10             	add    $0x10,%esp
f01112e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (is_correct)
f01112e6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01112ea:	74 04                	je     f01112f0 <test_free_block_FF+0x7d1>
	{
		eval += 15;
f01112ec:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f01112f0:	83 ec 0c             	sub    $0xc,%esp
f01112f3:	68 0c ab 12 f0       	push   $0xf012ab0c
f01112f8:	e8 6f fc fe ff       	call   f0100f6c <cprintf>
f01112fd:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111300:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 4*allocCntPerSize - 2 ;
f0111307:	c7 45 b4 1e 03 00 00 	movl   $0x31e,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);	//no merge
f011130e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111311:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0111318:	83 ec 0c             	sub    $0xc,%esp
f011131b:	50                   	push   %eax
f011131c:	e8 5d 27 01 00       	call   f0123a7e <free_block>
f0111321:	83 c4 10             	add    $0x10,%esp
	expectedNumOfFreeBlks++;
f0111324:	ff 45 b8             	incl   -0x48(%ebp)

	blockIndex = 4*allocCntPerSize - 1 ;
f0111327:	c7 45 b4 1f 03 00 00 	movl   $0x31f,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);	//merge with prev & next
f011132e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111331:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0111338:	83 ec 0c             	sub    $0xc,%esp
f011133b:	50                   	push   %eax
f011133c:	e8 3d 27 01 00       	call   f0123a7e <free_block>
f0111341:	83 c4 10             	add    $0x10,%esp
	expectedNumOfFreeBlks--;
f0111344:	ff 4d b8             	decl   -0x48(%ebp)

	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0111347:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011134a:	48                   	dec    %eax
f011134b:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0111352:	83 ec 0c             	sub    $0xc,%esp
f0111355:	50                   	push   %eax
f0111356:	e8 4e 1c 01 00       	call   f0122fa9 <get_block_size>
f011135b:	83 c4 10             	add    $0x10,%esp
f011135e:	89 45 ac             	mov    %eax,-0x54(%ebp)
	expected_size = allocSizes[3]+allocSizes[3]+allocSizes[4];
f0111361:	8b 15 c4 ed 17 f0    	mov    0xf017edc4,%edx
f0111367:	a1 c4 ed 17 f0       	mov    0xf017edc4,%eax
f011136c:	01 c2                	add    %eax,%edx
f011136e:	a1 c8 ed 17 f0       	mov    0xf017edc8,%eax
f0111373:	01 d0                	add    %edx,%eax
f0111375:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if (check_block(startVAs[blockIndex-1], startVAs[blockIndex-1], expected_size, 0) == 0)
f0111378:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011137b:	48                   	dec    %eax
f011137c:	8b 14 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%edx
f0111383:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111386:	48                   	dec    %eax
f0111387:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f011138e:	6a 00                	push   $0x0
f0111390:	ff 75 b0             	pushl  -0x50(%ebp)
f0111393:	52                   	push   %edx
f0111394:	50                   	push   %eax
f0111395:	e8 54 e7 ff ff       	call   f010faee <check_block>
f011139a:	83 c4 10             	add    $0x10,%esp
f011139d:	85 c0                	test   %eax,%eax
f011139f:	75 07                	jne    f01113a8 <test_free_block_FF+0x889>
	{
		is_correct = 0;
f01113a1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	}

	if (is_correct) is_correct = check_list_size(expectedNumOfFreeBlks);
f01113a8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01113ac:	74 11                	je     f01113bf <test_free_block_FF+0x8a0>
f01113ae:	83 ec 0c             	sub    $0xc,%esp
f01113b1:	ff 75 b8             	pushl  -0x48(%ebp)
f01113b4:	e8 bd e7 ff ff       	call   f010fb76 <check_list_size>
f01113b9:	83 c4 10             	add    $0x10,%esp
f01113bc:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if (is_correct)
f01113bf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01113c3:	74 04                	je     f01113c9 <test_free_block_FF+0x8aa>
	{
		eval += 20;
f01113c5:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
	}

	//====================================================================//
	/*Allocate After Free Scenarios */
	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f01113c9:	83 ec 0c             	sub    $0xc,%esp
f01113cc:	68 4c ab 12 f0       	push   $0xf012ab4c
f01113d1:	e8 96 fb fe ff       	call   f0100f6c <cprintf>
f01113d6:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with NEXT\n\n") ;
f01113d9:	83 ec 0c             	sub    $0xc,%esp
f01113dc:	68 90 ab 12 f0       	push   $0xf012ab90
f01113e1:	e8 86 fb fe ff       	call   f0100f6c <cprintf>
f01113e6:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01113e9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 5*kilo - sizeOfMetaData;
f01113f0:	c7 45 c4 f8 13 00 00 	movl   $0x13f8,-0x3c(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData, 2);
f01113f7:	c7 45 a8 02 00 00 00 	movl   $0x2,-0x58(%ebp)
f01113fe:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0111401:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111404:	01 d0                	add    %edx,%eax
f0111406:	83 c0 07             	add    $0x7,%eax
f0111409:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011140c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011140f:	ba 00 00 00 00       	mov    $0x0,%edx
f0111414:	f7 75 a8             	divl   -0x58(%ebp)
f0111417:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011141a:	29 d0                	sub    %edx,%eax
f011141c:	89 45 b0             	mov    %eax,-0x50(%ebp)
	va = alloc_block(actualSize, DA_FF);
f011141f:	83 ec 08             	sub    $0x8,%esp
f0111422:	6a 01                	push   $0x1
f0111424:	ff 75 c4             	pushl  -0x3c(%ebp)
f0111427:	e8 b4 1b 01 00       	call   f0122fe0 <alloc_block>
f011142c:	83 c4 10             	add    $0x10,%esp
f011142f:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	void* expected = (void*)(KERNEL_HEAP_START + sizeof(int) + sizeOfMetaData/2);
f0111432:	c7 45 a0 08 00 00 f6 	movl   $0xf6000008,-0x60(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f0111439:	6a 01                	push   $0x1
f011143b:	ff 75 b0             	pushl  -0x50(%ebp)
f011143e:	ff 75 a0             	pushl  -0x60(%ebp)
f0111441:	ff 75 c0             	pushl  -0x40(%ebp)
f0111444:	e8 a5 e6 ff ff       	call   f010faee <check_block>
f0111449:	83 c4 10             	add    $0x10,%esp
f011144c:	85 c0                	test   %eax,%eax
f011144e:	75 17                	jne    f0111467 <test_free_block_FF+0x948>
	{
		is_correct = 0;
f0111450:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.1: Failed\n");
f0111457:	83 ec 0c             	sub    $0xc,%esp
f011145a:	68 b6 ab 12 f0       	push   $0xf012abb6
f011145f:	e8 08 fb fe ff       	call   f0100f6c <cprintf>
f0111464:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 3*kilo - sizeOfMetaData;
f0111467:	c7 45 c4 f8 0b 00 00 	movl   $0xbf8,-0x3c(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData, 2);
f011146e:	c7 45 9c 02 00 00 00 	movl   $0x2,-0x64(%ebp)
f0111475:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0111478:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011147b:	01 d0                	add    %edx,%eax
f011147d:	83 c0 07             	add    $0x7,%eax
f0111480:	89 45 98             	mov    %eax,-0x68(%ebp)
f0111483:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111486:	ba 00 00 00 00       	mov    $0x0,%edx
f011148b:	f7 75 9c             	divl   -0x64(%ebp)
f011148e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111491:	29 d0                	sub    %edx,%eax
f0111493:	89 45 b0             	mov    %eax,-0x50(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0111496:	83 ec 08             	sub    $0x8,%esp
f0111499:	6a 01                	push   $0x1
f011149b:	ff 75 c4             	pushl  -0x3c(%ebp)
f011149e:	e8 3d 1b 01 00       	call   f0122fe0 <alloc_block>
f01114a3:	83 c4 10             	add    $0x10,%esp
f01114a6:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + sizeof(int) + 5*kilo + sizeOfMetaData/2);
f01114a9:	c7 45 a0 08 14 00 f6 	movl   $0xf6001408,-0x60(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f01114b0:	6a 01                	push   $0x1
f01114b2:	ff 75 b0             	pushl  -0x50(%ebp)
f01114b5:	ff 75 a0             	pushl  -0x60(%ebp)
f01114b8:	ff 75 c0             	pushl  -0x40(%ebp)
f01114bb:	e8 2e e6 ff ff       	call   f010faee <check_block>
f01114c0:	83 c4 10             	add    $0x10,%esp
f01114c3:	85 c0                	test   %eax,%eax
f01114c5:	75 17                	jne    f01114de <test_free_block_FF+0x9bf>
	{
		is_correct = 0;
f01114c7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.2: Failed\n");
f01114ce:	83 ec 0c             	sub    $0xc,%esp
f01114d1:	68 d4 ab 12 f0       	push   $0xf012abd4
f01114d6:	e8 91 fa fe ff       	call   f0100f6c <cprintf>
f01114db:	83 c4 10             	add    $0x10,%esp
	}

	expectedNumOfFreeBlks--;
f01114de:	ff 4d b8             	decl   -0x48(%ebp)

	/*INTERNAL FRAGMENTATION CASE*/
	actualSize = 4*kilo + 10 ;
f01114e1:	c7 45 c4 0a 10 00 00 	movl   $0x100a,-0x3c(%ebp)
	expected_size = MAX(ROUNDUP(actualSize + sizeOfMetaData, 2), allocSizes[0]+allocSizes[1]) ;
f01114e8:	c7 45 94 02 00 00 00 	movl   $0x2,-0x6c(%ebp)
f01114ef:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01114f2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01114f5:	01 d0                	add    %edx,%eax
f01114f7:	83 c0 07             	add    $0x7,%eax
f01114fa:	89 45 90             	mov    %eax,-0x70(%ebp)
f01114fd:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111500:	ba 00 00 00 00       	mov    $0x0,%edx
f0111505:	f7 75 94             	divl   -0x6c(%ebp)
f0111508:	8b 45 90             	mov    -0x70(%ebp),%eax
f011150b:	29 d0                	sub    %edx,%eax
f011150d:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0111510:	8b 15 b8 ed 17 f0    	mov    0xf017edb8,%edx
f0111516:	a1 bc ed 17 f0       	mov    0xf017edbc,%eax
f011151b:	01 d0                	add    %edx,%eax
f011151d:	89 45 88             	mov    %eax,-0x78(%ebp)
f0111520:	8b 55 88             	mov    -0x78(%ebp),%edx
f0111523:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111526:	39 d0                	cmp    %edx,%eax
f0111528:	73 02                	jae    f011152c <test_free_block_FF+0xa0d>
f011152a:	89 d0                	mov    %edx,%eax
f011152c:	89 45 b0             	mov    %eax,-0x50(%ebp)
	va = alloc_block(actualSize, DA_FF);
f011152f:	83 ec 08             	sub    $0x8,%esp
f0111532:	6a 01                	push   $0x1
f0111534:	ff 75 c4             	pushl  -0x3c(%ebp)
f0111537:	e8 a4 1a 01 00       	call   f0122fe0 <alloc_block>
f011153c:	83 c4 10             	add    $0x10,%esp
f011153f:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f0111542:	a1 9c 13 5c f0       	mov    0xf05c139c,%eax
f0111547:	89 45 a0             	mov    %eax,-0x60(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f011154a:	6a 01                	push   $0x1
f011154c:	ff 75 b0             	pushl  -0x50(%ebp)
f011154f:	ff 75 a0             	pushl  -0x60(%ebp)
f0111552:	ff 75 c0             	pushl  -0x40(%ebp)
f0111555:	e8 94 e5 ff ff       	call   f010faee <check_block>
f011155a:	83 c4 10             	add    $0x10,%esp
f011155d:	85 c0                	test   %eax,%eax
f011155f:	75 17                	jne    f0111578 <test_free_block_FF+0xa59>
	{
		is_correct = 0;
f0111561:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.3: Failed INTERNAL FRAGMENTATION CASE\n");
f0111568:	83 ec 0c             	sub    $0xc,%esp
f011156b:	68 f4 ab 12 f0       	push   $0xf012abf4
f0111570:	e8 f7 f9 fe ff       	call   f0100f6c <cprintf>
f0111575:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f0111578:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011157c:	74 04                	je     f0111582 <test_free_block_FF+0xa63>
	{
		eval += 10;
f011157e:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	expectedNumOfFreeBlks--;
f0111582:	ff 4d b8             	decl   -0x48(%ebp)

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f0111585:	83 ec 0c             	sub    $0xc,%esp
f0111588:	68 30 ac 12 f0       	push   $0xf012ac30
f011158d:	e8 da f9 fe ff       	call   f0100f6c <cprintf>
f0111592:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111595:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo + 1;
f011159c:	c7 45 c4 01 08 00 00 	movl   $0x801,-0x3c(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData, 2);
f01115a3:	c7 45 84 02 00 00 00 	movl   $0x2,-0x7c(%ebp)
f01115aa:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01115ad:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01115b0:	01 d0                	add    %edx,%eax
f01115b2:	83 c0 07             	add    $0x7,%eax
f01115b5:	89 45 80             	mov    %eax,-0x80(%ebp)
f01115b8:	8b 45 80             	mov    -0x80(%ebp),%eax
f01115bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01115c0:	f7 75 84             	divl   -0x7c(%ebp)
f01115c3:	8b 45 80             	mov    -0x80(%ebp),%eax
f01115c6:	29 d0                	sub    %edx,%eax
f01115c8:	89 45 b0             	mov    %eax,-0x50(%ebp)
	va = alloc_block(actualSize, DA_FF);
f01115cb:	83 ec 08             	sub    $0x8,%esp
f01115ce:	6a 01                	push   $0x1
f01115d0:	ff 75 c4             	pushl  -0x3c(%ebp)
f01115d3:	e8 08 1a 01 00       	call   f0122fe0 <alloc_block>
f01115d8:	83 c4 10             	add    $0x10,%esp
f01115db:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f01115de:	a1 f8 1c 5c f0       	mov    0xf05c1cf8,%eax
f01115e3:	89 45 a0             	mov    %eax,-0x60(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f01115e6:	6a 01                	push   $0x1
f01115e8:	ff 75 b0             	pushl  -0x50(%ebp)
f01115eb:	ff 75 a0             	pushl  -0x60(%ebp)
f01115ee:	ff 75 c0             	pushl  -0x40(%ebp)
f01115f1:	e8 f8 e4 ff ff       	call   f010faee <check_block>
f01115f6:	83 c4 10             	add    $0x10,%esp
f01115f9:	85 c0                	test   %eax,%eax
f01115fb:	75 17                	jne    f0111614 <test_free_block_FF+0xaf5>
	{
		is_correct = 0;
f01115fd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.4: Failed\n");
f0111604:	83 ec 0c             	sub    $0xc,%esp
f0111607:	68 5d ac 12 f0       	push   $0xf012ac5d
f011160c:	e8 5b f9 fe ff       	call   f0100f6c <cprintf>
f0111611:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f0111614:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111618:	74 04                	je     f011161e <test_free_block_FF+0xaff>
	{
		eval += 10;
f011161a:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("		7.3: in block coalesces with PREV\n\n") ;
f011161e:	83 ec 0c             	sub    $0xc,%esp
f0111621:	68 7c ac 12 f0       	push   $0xf012ac7c
f0111626:	e8 41 f9 fe ff       	call   f0100f6c <cprintf>
f011162b:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f011162e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo - sizeOfMetaData;
f0111635:	c7 45 c4 f8 07 00 00 	movl   $0x7f8,-0x3c(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData, 2);
f011163c:	c7 85 7c ff ff ff 02 	movl   $0x2,-0x84(%ebp)
f0111643:	00 00 00 
f0111646:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0111649:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011164f:	01 d0                	add    %edx,%eax
f0111651:	83 c0 07             	add    $0x7,%eax
f0111654:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011165a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0111660:	ba 00 00 00 00       	mov    $0x0,%edx
f0111665:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011166b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0111671:	29 d0                	sub    %edx,%eax
f0111673:	89 45 b0             	mov    %eax,-0x50(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0111676:	83 ec 08             	sub    $0x8,%esp
f0111679:	6a 01                	push   $0x1
f011167b:	ff 75 c4             	pushl  -0x3c(%ebp)
f011167e:	e8 5d 19 01 00       	call   f0122fe0 <alloc_block>
f0111683:	83 c4 10             	add    $0x10,%esp
f0111686:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f0111689:	a1 c0 16 5c f0       	mov    0xf05c16c0,%eax
f011168e:	89 45 a0             	mov    %eax,-0x60(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f0111691:	6a 01                	push   $0x1
f0111693:	ff 75 b0             	pushl  -0x50(%ebp)
f0111696:	ff 75 a0             	pushl  -0x60(%ebp)
f0111699:	ff 75 c0             	pushl  -0x40(%ebp)
f011169c:	e8 4d e4 ff ff       	call   f010faee <check_block>
f01116a1:	83 c4 10             	add    $0x10,%esp
f01116a4:	85 c0                	test   %eax,%eax
f01116a6:	75 17                	jne    f01116bf <test_free_block_FF+0xba0>
	{
		is_correct = 0;
f01116a8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.5: Failed\n");
f01116af:	83 ec 0c             	sub    $0xc,%esp
f01116b2:	68 a2 ac 12 f0       	push   $0xf012aca2
f01116b7:	e8 b0 f8 fe ff       	call   f0100f6c <cprintf>
f01116bc:	83 c4 10             	add    $0x10,%esp
	}

	expectedNumOfFreeBlks--;
f01116bf:	ff 4d b8             	decl   -0x48(%ebp)

	actualSize = 8*kilo - sizeOfMetaData;
f01116c2:	c7 45 c4 f8 1f 00 00 	movl   $0x1ff8,-0x3c(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData, 2);
f01116c9:	c7 85 74 ff ff ff 02 	movl   $0x2,-0x8c(%ebp)
f01116d0:	00 00 00 
f01116d3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01116d6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01116dc:	01 d0                	add    %edx,%eax
f01116de:	83 c0 07             	add    $0x7,%eax
f01116e1:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01116e7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01116ed:	ba 00 00 00 00       	mov    $0x0,%edx
f01116f2:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01116f8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01116fe:	29 d0                	sub    %edx,%eax
f0111700:	89 45 b0             	mov    %eax,-0x50(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0111703:	83 ec 08             	sub    $0x8,%esp
f0111706:	6a 01                	push   $0x1
f0111708:	ff 75 c4             	pushl  -0x3c(%ebp)
f011170b:	e8 d0 18 01 00       	call   f0122fe0 <alloc_block>
f0111710:	83 c4 10             	add    $0x10,%esp
f0111713:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f0111716:	a1 5c 26 5c f0       	mov    0xf05c265c,%eax
f011171b:	89 45 a0             	mov    %eax,-0x60(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f011171e:	6a 01                	push   $0x1
f0111720:	ff 75 b0             	pushl  -0x50(%ebp)
f0111723:	ff 75 a0             	pushl  -0x60(%ebp)
f0111726:	ff 75 c0             	pushl  -0x40(%ebp)
f0111729:	e8 c0 e3 ff ff       	call   f010faee <check_block>
f011172e:	83 c4 10             	add    $0x10,%esp
f0111731:	85 c0                	test   %eax,%eax
f0111733:	75 17                	jne    f011174c <test_free_block_FF+0xc2d>
	{
		is_correct = 0;
f0111735:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.6: Failed\n");
f011173c:	83 ec 0c             	sub    $0xc,%esp
f011173f:	68 c0 ac 12 f0       	push   $0xf012acc0
f0111744:	e8 23 f8 fe ff       	call   f0100f6c <cprintf>
f0111749:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct) is_correct = check_list_size(expectedNumOfFreeBlks);
f011174c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111750:	74 11                	je     f0111763 <test_free_block_FF+0xc44>
f0111752:	83 ec 0c             	sub    $0xc,%esp
f0111755:	ff 75 b8             	pushl  -0x48(%ebp)
f0111758:	e8 19 e4 ff ff       	call   f010fb76 <check_list_size>
f011175d:	83 c4 10             	add    $0x10,%esp
f0111760:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if (is_correct)
f0111763:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111767:	74 04                	je     f011176d <test_free_block_FF+0xc4e>
	{
		eval += 10;
f0111769:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("test free_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f011176d:	83 ec 08             	sub    $0x8,%esp
f0111770:	ff 75 f4             	pushl  -0xc(%ebp)
f0111773:	68 e0 ac 12 f0       	push   $0xf012ace0
f0111778:	e8 ef f7 fe ff       	call   f0100f6c <cprintf>
f011177d:	83 c4 10             	add    $0x10,%esp

}
f0111780:	90                   	nop
f0111781:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0111784:	c9                   	leave  
f0111785:	c3                   	ret    

f0111786 <test_free_block_BF>:

void test_free_block_BF()
{
f0111786:	55                   	push   %ebp
f0111787:	89 e5                	mov    %esp,%ebp
f0111789:	53                   	push   %ebx
f011178a:	81 ec 84 00 00 00    	sub    $0x84,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f0111790:	83 ec 0c             	sub    $0xc,%esp
f0111793:	68 70 a7 12 f0       	push   $0xf012a770
f0111798:	e8 cf f7 fe ff       	call   f0100f6c <cprintf>
f011179d:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f01117a0:	83 ec 0c             	sub    $0xc,%esp
f01117a3:	68 b0 a7 12 f0       	push   $0xf012a7b0
f01117a8:	e8 bf f7 fe ff       	call   f0100f6c <cprintf>
f01117ad:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f01117b0:	83 ec 0c             	sub    $0xc,%esp
f01117b3:	68 70 a7 12 f0       	push   $0xf012a770
f01117b8:	e8 af f7 fe ff       	call   f0100f6c <cprintf>
f01117bd:	83 c4 10             	add    $0x10,%esp

	int initAllocatedSpace = 3*Mega;
f01117c0:	c7 45 d4 00 00 30 00 	movl   $0x300000,-0x2c(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f01117c7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01117ca:	83 ec 08             	sub    $0x8,%esp
f01117cd:	50                   	push   %eax
f01117ce:	68 00 00 00 f6       	push   $0xf6000000
f01117d3:	e8 35 19 01 00       	call   f012310d <initialize_dynamic_allocator>
f01117d8:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f01117db:	83 ec 0c             	sub    $0xc,%esp
f01117de:	68 f0 a7 12 f0       	push   $0xf012a7f0
f01117e3:	e8 84 f7 fe ff       	call   f0100f6c <cprintf>
f01117e8:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f01117eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f01117f2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01117f9:	eb 2a                	jmp    f0111825 <test_free_block_BF+0x9f>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f01117fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01117fe:	8b 14 85 b8 ed 17 f0 	mov    -0xfe81248(,%eax,4),%edx
f0111805:	89 d0                	mov    %edx,%eax
f0111807:	c1 e0 02             	shl    $0x2,%eax
f011180a:	01 d0                	add    %edx,%eax
f011180c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0111813:	01 d0                	add    %edx,%eax
f0111815:	c1 e0 03             	shl    $0x3,%eax
f0111818:	89 c2                	mov    %eax,%edx
f011181a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011181d:	01 d0                	add    %edx,%eax
f011181f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f0111822:	ff 45 f0             	incl   -0x10(%ebp)
f0111825:	83 7d f0 06          	cmpl   $0x6,-0x10(%ebp)
f0111829:	7e d0                	jle    f01117fb <test_free_block_BF+0x75>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes - 2*sizeof(int) ; //exclude size of "DA Begin & End" blocks
f011182b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011182e:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0111831:	83 e8 08             	sub    $0x8,%eax
f0111834:	89 45 d0             	mov    %eax,-0x30(%ebp)
	if (remainSize <= 0)
f0111837:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
f011183b:	7f 17                	jg     f0111854 <test_free_block_BF+0xce>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f011183d:	83 ec 04             	sub    $0x4,%esp
f0111840:	68 48 a8 12 f0       	push   $0xf012a848
f0111845:	68 bf 03 00 00       	push   $0x3bf
f011184a:	68 28 a0 12 f0       	push   $0xf012a028
f011184f:	e8 c6 ea fe ff       	call   f010031a <_panic>

	int idx = 0;
f0111854:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
f011185b:	c7 45 e8 04 00 00 f6 	movl   $0xf6000004,-0x18(%ebp)

	uint32 actualSize, expected_size;
	void* expected_va;
	for (int i = 0; i < numOfAllocs; ++i)
f0111862:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0111869:	e9 0f 01 00 00       	jmp    f011197d <test_free_block_BF+0x1f7>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f011186e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0111875:	e9 f3 00 00 00       	jmp    f011196d <test_free_block_BF+0x1e7>
		{
			actualSize = allocSizes[i] - sizeOfMetaData;
f011187a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011187d:	8b 04 85 b8 ed 17 f0 	mov    -0xfe81248(,%eax,4),%eax
f0111884:	83 e8 08             	sub    $0x8,%eax
f0111887:	89 45 cc             	mov    %eax,-0x34(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_BF);
f011188a:	83 ec 08             	sub    $0x8,%esp
f011188d:	6a 03                	push   $0x3
f011188f:	ff 75 cc             	pushl  -0x34(%ebp)
f0111892:	e8 49 17 01 00       	call   f0122fe0 <alloc_block>
f0111897:	83 c4 10             	add    $0x10,%esp
f011189a:	89 c2                	mov    %eax,%edx
f011189c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011189f:	89 14 85 80 10 5c f0 	mov    %edx,-0xfa3ef80(,%eax,4)
f01118a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01118a9:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f01118b0:	89 45 c8             	mov    %eax,-0x38(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f01118b3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01118b6:	d1 e8                	shr    %eax
f01118b8:	89 c2                	mov    %eax,%edx
f01118ba:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01118bd:	01 c2                	add    %eax,%edx
f01118bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01118c2:	89 14 85 80 3c 5c f0 	mov    %edx,-0xfa3c380(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f01118c9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01118cc:	8d 50 fe             	lea    -0x2(%eax),%edx
f01118cf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01118d2:	01 c2                	add    %eax,%edx
f01118d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01118d7:	89 14 85 80 26 5c f0 	mov    %edx,-0xfa3d980(,%eax,4)
			//Check returned va
			expected_va = curVA + sizeOfMetaData/2;
f01118de:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01118e1:	83 c0 04             	add    $0x4,%eax
f01118e4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			if (check_block(va, expected_va, allocSizes[i], 1) == 0)
f01118e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01118ea:	8b 04 85 b8 ed 17 f0 	mov    -0xfe81248(,%eax,4),%eax
f01118f1:	6a 01                	push   $0x1
f01118f3:	50                   	push   %eax
f01118f4:	ff 75 c4             	pushl  -0x3c(%ebp)
f01118f7:	ff 75 c8             	pushl  -0x38(%ebp)
f01118fa:	e8 ef e1 ff ff       	call   f010faee <check_block>
f01118ff:	83 c4 10             	add    $0x10,%esp
f0111902:	85 c0                	test   %eax,%eax
f0111904:	75 24                	jne    f011192a <test_free_block_BF+0x1a4>
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData ,va);
f0111906:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111909:	83 c0 08             	add    $0x8,%eax
f011190c:	83 ec 08             	sub    $0x8,%esp
f011190f:	ff 75 c8             	pushl  -0x38(%ebp)
f0111912:	50                   	push   %eax
f0111913:	ff 75 ec             	pushl  -0x14(%ebp)
f0111916:	68 1c ad 12 f0       	push   $0xf012ad1c
f011191b:	68 d1 03 00 00       	push   $0x3d1
f0111920:	68 28 a0 12 f0       	push   $0xf012a028
f0111925:	e8 f0 e9 fe ff       	call   f010031a <_panic>
			curVA += allocSizes[i] ;
f011192a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011192d:	8b 04 85 b8 ed 17 f0 	mov    -0xfe81248(,%eax,4),%eax
f0111934:	01 45 e8             	add    %eax,-0x18(%ebp)
			*(startVAs[idx]) = idx ;
f0111937:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011193a:	8b 14 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%edx
f0111941:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111944:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f0111947:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011194a:	8b 14 85 80 3c 5c f0 	mov    -0xfa3c380(,%eax,4),%edx
f0111951:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111954:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f0111957:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011195a:	8b 14 85 80 26 5c f0 	mov    -0xfa3d980(,%eax,4),%edx
f0111961:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111964:	66 89 02             	mov    %ax,(%edx)
			idx++;
f0111967:	ff 45 ec             	incl   -0x14(%ebp)

	uint32 actualSize, expected_size;
	void* expected_va;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f011196a:	ff 45 e0             	incl   -0x20(%ebp)
f011196d:	81 7d e0 c7 00 00 00 	cmpl   $0xc7,-0x20(%ebp)
f0111974:	0f 8e 00 ff ff ff    	jle    f011187a <test_free_block_BF+0xf4>
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block

	uint32 actualSize, expected_size;
	void* expected_va;
	for (int i = 0; i < numOfAllocs; ++i)
f011197a:	ff 45 e4             	incl   -0x1c(%ebp)
f011197d:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f0111981:	0f 8e e7 fe ff ff    	jle    f011186e <test_free_block_BF+0xe8>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData;
f0111987:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011198a:	83 e8 08             	sub    $0x8,%eax
f011198d:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_BF);
f0111990:	83 ec 08             	sub    $0x8,%esp
f0111993:	6a 03                	push   $0x3
f0111995:	ff 75 cc             	pushl  -0x34(%ebp)
f0111998:	e8 43 16 01 00       	call   f0122fe0 <alloc_block>
f011199d:	83 c4 10             	add    $0x10,%esp
f01119a0:	89 c2                	mov    %eax,%edx
f01119a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01119a5:	89 14 85 80 10 5c f0 	mov    %edx,-0xfa3ef80(,%eax,4)
f01119ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01119af:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f01119b6:	89 45 c8             	mov    %eax,-0x38(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f01119b9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01119bc:	d1 e8                	shr    %eax
f01119be:	89 c2                	mov    %eax,%edx
f01119c0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01119c3:	01 c2                	add    %eax,%edx
f01119c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01119c8:	89 14 85 80 3c 5c f0 	mov    %edx,-0xfa3c380(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f01119cf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01119d2:	8d 50 fe             	lea    -0x2(%eax),%edx
f01119d5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01119d8:	01 c2                	add    %eax,%edx
f01119da:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01119dd:	89 14 85 80 26 5c f0 	mov    %edx,-0xfa3d980(,%eax,4)
	//Check returned va
	expected_va = curVA + sizeOfMetaData/2;
f01119e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01119e7:	83 c0 04             	add    $0x4,%eax
f01119ea:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	if (check_block(va, expected_va, remainSize, 1) == 0)
f01119ed:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01119f0:	6a 01                	push   $0x1
f01119f2:	50                   	push   %eax
f01119f3:	ff 75 c4             	pushl  -0x3c(%ebp)
f01119f6:	ff 75 c8             	pushl  -0x38(%ebp)
f01119f9:	e8 f0 e0 ff ff       	call   f010faee <check_block>
f01119fe:	83 c4 10             	add    $0x10,%esp
f0111a01:	85 c0                	test   %eax,%eax
f0111a03:	75 17                	jne    f0111a1c <test_free_block_BF+0x296>
		panic("test_free_block #1: WRONG ALLOC - alloc_block_BF return wrong address.");
f0111a05:	83 ec 04             	sub    $0x4,%esp
f0111a08:	68 80 ad 12 f0       	push   $0xf012ad80
f0111a0d:	68 e3 03 00 00       	push   $0x3e3
f0111a12:	68 28 a0 12 f0       	push   $0xf012a028
f0111a17:	e8 fe e8 fe ff       	call   f010031a <_panic>
	*(startVAs[idx]) = idx ;
f0111a1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111a1f:	8b 14 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%edx
f0111a26:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111a29:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f0111a2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111a2f:	8b 14 85 80 3c 5c f0 	mov    -0xfa3c380(,%eax,4),%edx
f0111a36:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111a39:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f0111a3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111a3f:	8b 14 85 80 26 5c f0 	mov    -0xfa3d980(,%eax,4),%edx
f0111a46:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111a49:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f0111a4c:	83 ec 0c             	sub    $0xc,%esp
f0111a4f:	68 84 a9 12 f0       	push   $0xf012a984
f0111a54:	e8 13 f5 fe ff       	call   f0100f6c <cprintf>
f0111a59:	83 c4 10             	add    $0x10,%esp

	for (int i = 0; i < idx; ++i)
f0111a5c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0111a63:	eb 59                	jmp    f0111abe <test_free_block_BF+0x338>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f0111a65:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111a68:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0111a6f:	66 8b 00             	mov    (%eax),%ax
f0111a72:	98                   	cwtl   
f0111a73:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0111a76:	75 26                	jne    f0111a9e <test_free_block_BF+0x318>
f0111a78:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111a7b:	8b 04 85 80 3c 5c f0 	mov    -0xfa3c380(,%eax,4),%eax
f0111a82:	66 8b 00             	mov    (%eax),%ax
f0111a85:	98                   	cwtl   
f0111a86:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0111a89:	75 13                	jne    f0111a9e <test_free_block_BF+0x318>
f0111a8b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111a8e:	8b 04 85 80 26 5c f0 	mov    -0xfa3d980(,%eax,4),%eax
f0111a95:	66 8b 00             	mov    (%eax),%ax
f0111a98:	98                   	cwtl   
f0111a99:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0111a9c:	74 1d                	je     f0111abb <test_free_block_BF+0x335>
			panic("test_free_block #2.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f0111a9e:	83 ec 0c             	sub    $0xc,%esp
f0111aa1:	ff 75 dc             	pushl  -0x24(%ebp)
f0111aa4:	ff 75 dc             	pushl  -0x24(%ebp)
f0111aa7:	68 c8 ad 12 f0       	push   $0xf012adc8
f0111aac:	68 ef 03 00 00       	push   $0x3ef
f0111ab1:	68 28 a0 12 f0       	push   $0xf012a028
f0111ab6:	e8 5f e8 fe ff       	call   f010031a <_panic>

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;

	for (int i = 0; i < idx; ++i)
f0111abb:	ff 45 dc             	incl   -0x24(%ebp)
f0111abe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111ac1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0111ac4:	7c 9f                	jl     f0111a65 <test_free_block_BF+0x2df>
			panic("test_free_block #2.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f0111ac6:	83 ec 0c             	sub    $0xc,%esp
f0111ac9:	68 08 aa 12 f0       	push   $0xf012aa08
f0111ace:	e8 99 f4 fe ff       	call   f0100f6c <cprintf>
f0111ad3:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0111ad6:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0111add:	e9 98 00 00 00       	jmp    f0111b7a <test_free_block_BF+0x3f4>
	{
		free_block(startVAs[i*allocCntPerSize]);
f0111ae2:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0111ae5:	89 d0                	mov    %edx,%eax
f0111ae7:	c1 e0 02             	shl    $0x2,%eax
f0111aea:	01 d0                	add    %edx,%eax
f0111aec:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0111af3:	01 d0                	add    %edx,%eax
f0111af5:	c1 e0 03             	shl    $0x3,%eax
f0111af8:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0111aff:	83 ec 0c             	sub    $0xc,%esp
f0111b02:	50                   	push   %eax
f0111b03:	e8 76 1f 01 00       	call   f0123a7e <free_block>
f0111b08:	83 c4 10             	add    $0x10,%esp
		if (check_block(startVAs[i*allocCntPerSize], startVAs[i*allocCntPerSize], allocSizes[i], 0) == 0)
f0111b0b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111b0e:	8b 0c 85 b8 ed 17 f0 	mov    -0xfe81248(,%eax,4),%ecx
f0111b15:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0111b18:	89 d0                	mov    %edx,%eax
f0111b1a:	c1 e0 02             	shl    $0x2,%eax
f0111b1d:	01 d0                	add    %edx,%eax
f0111b1f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0111b26:	01 d0                	add    %edx,%eax
f0111b28:	c1 e0 03             	shl    $0x3,%eax
f0111b2b:	8b 14 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%edx
f0111b32:	8b 5d d8             	mov    -0x28(%ebp),%ebx
f0111b35:	89 d8                	mov    %ebx,%eax
f0111b37:	c1 e0 02             	shl    $0x2,%eax
f0111b3a:	01 d8                	add    %ebx,%eax
f0111b3c:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f0111b43:	01 d8                	add    %ebx,%eax
f0111b45:	c1 e0 03             	shl    $0x3,%eax
f0111b48:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0111b4f:	6a 00                	push   $0x0
f0111b51:	51                   	push   %ecx
f0111b52:	52                   	push   %edx
f0111b53:	50                   	push   %eax
f0111b54:	e8 95 df ff ff       	call   f010faee <check_block>
f0111b59:	83 c4 10             	add    $0x10,%esp
f0111b5c:	85 c0                	test   %eax,%eax
f0111b5e:	75 17                	jne    f0111b77 <test_free_block_BF+0x3f1>
		{
			panic("3.1 Failed");
f0111b60:	83 ec 04             	sub    $0x4,%esp
f0111b63:	68 17 ae 12 f0       	push   $0xf012ae17
f0111b68:	68 fc 03 00 00       	push   $0x3fc
f0111b6d:	68 28 a0 12 f0       	push   $0xf012a028
f0111b72:	e8 a3 e7 fe ff       	call   f010031a <_panic>
	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0111b77:	ff 45 d8             	incl   -0x28(%ebp)
f0111b7a:	83 7d d8 06          	cmpl   $0x6,-0x28(%ebp)
f0111b7e:	0f 8e 5e ff ff ff    	jle    f0111ae2 <test_free_block_BF+0x35c>
		if (check_block(startVAs[i*allocCntPerSize], startVAs[i*allocCntPerSize], allocSizes[i], 0) == 0)
		{
			panic("3.1 Failed");
		}
	}
	uint32 expectedNumOfFreeBlks = numOfAllocs;
f0111b84:	c7 45 c0 07 00 00 00 	movl   $0x7,-0x40(%ebp)
	if (check_list_size(expectedNumOfFreeBlks) == 0)
f0111b8b:	83 ec 0c             	sub    $0xc,%esp
f0111b8e:	ff 75 c0             	pushl  -0x40(%ebp)
f0111b91:	e8 e0 df ff ff       	call   f010fb76 <check_list_size>
f0111b96:	83 c4 10             	add    $0x10,%esp
f0111b99:	85 c0                	test   %eax,%eax
f0111b9b:	75 17                	jne    f0111bb4 <test_free_block_BF+0x42e>
	{
		panic("3.2 Failed");
f0111b9d:	83 ec 04             	sub    $0x4,%esp
f0111ba0:	68 22 ae 12 f0       	push   $0xf012ae22
f0111ba5:	68 02 04 00 00       	push   $0x402
f0111baa:	68 28 a0 12 f0       	push   $0xf012a028
f0111baf:	e8 66 e7 fe ff       	call   f010031a <_panic>
	}

	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f0111bb4:	a1 60 26 5c f0       	mov    0xf05c2660,%eax
f0111bb9:	83 ec 0c             	sub    $0xc,%esp
f0111bbc:	50                   	push   %eax
f0111bbd:	e8 bc 1e 01 00       	call   f0123a7e <free_block>
f0111bc2:	83 c4 10             	add    $0x10,%esp
	if (check_block(startVAs[numOfAllocs*allocCntPerSize], startVAs[numOfAllocs*allocCntPerSize], remainSize, 0) == 0)
f0111bc5:	8b 4d d0             	mov    -0x30(%ebp),%ecx
f0111bc8:	8b 15 60 26 5c f0    	mov    0xf05c2660,%edx
f0111bce:	a1 60 26 5c f0       	mov    0xf05c2660,%eax
f0111bd3:	6a 00                	push   $0x0
f0111bd5:	51                   	push   %ecx
f0111bd6:	52                   	push   %edx
f0111bd7:	50                   	push   %eax
f0111bd8:	e8 11 df ff ff       	call   f010faee <check_block>
f0111bdd:	83 c4 10             	add    $0x10,%esp
f0111be0:	85 c0                	test   %eax,%eax
f0111be2:	75 17                	jne    f0111bfb <test_free_block_BF+0x475>
		panic("3.3 Failed");
f0111be4:	83 ec 04             	sub    $0x4,%esp
f0111be7:	68 2d ae 12 f0       	push   $0xf012ae2d
f0111bec:	68 08 04 00 00       	push   $0x408
f0111bf1:	68 28 a0 12 f0       	push   $0xf012a028
f0111bf6:	e8 1f e7 fe ff       	call   f010031a <_panic>

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData;
f0111bfb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111bfe:	83 e8 08             	sub    $0x8,%eax
f0111c01:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0111c04:	83 ec 08             	sub    $0x8,%esp
f0111c07:	6a 03                	push   $0x3
f0111c09:	ff 75 cc             	pushl  -0x34(%ebp)
f0111c0c:	e8 cf 13 01 00       	call   f0122fe0 <alloc_block>
f0111c11:	83 c4 10             	add    $0x10,%esp
f0111c14:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected_va = (curVA + sizeOfMetaData/2);
f0111c17:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111c1a:	83 c0 04             	add    $0x4,%eax
f0111c1d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	if(check_block(va, expected_va, remainSize, 1) == 0)
f0111c20:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111c23:	6a 01                	push   $0x1
f0111c25:	50                   	push   %eax
f0111c26:	ff 75 c4             	pushl  -0x3c(%ebp)
f0111c29:	ff 75 c8             	pushl  -0x38(%ebp)
f0111c2c:	e8 bd de ff ff       	call   f010faee <check_block>
f0111c31:	83 c4 10             	add    $0x10,%esp
f0111c34:	85 c0                	test   %eax,%eax
f0111c36:	75 17                	jne    f0111c4f <test_free_block_BF+0x4c9>
		panic("3.4 Failed");
f0111c38:	83 ec 04             	sub    $0x4,%esp
f0111c3b:	68 38 ae 12 f0       	push   $0xf012ae38
f0111c40:	68 10 04 00 00       	push   $0x410
f0111c45:	68 28 a0 12 f0       	push   $0xf012a028
f0111c4a:	e8 cb e6 fe ff       	call   f010031a <_panic>

	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f0111c4f:	a1 5c 26 5c f0       	mov    0xf05c265c,%eax
f0111c54:	83 ec 0c             	sub    $0xc,%esp
f0111c57:	50                   	push   %eax
f0111c58:	e8 21 1e 01 00       	call   f0123a7e <free_block>
f0111c5d:	83 c4 10             	add    $0x10,%esp
	if (check_block(startVAs[numOfAllocs*allocCntPerSize-1], startVAs[numOfAllocs*allocCntPerSize-1], allocSizes[numOfAllocs-1], 0) == 0)
f0111c60:	8b 0d d0 ed 17 f0    	mov    0xf017edd0,%ecx
f0111c66:	8b 15 5c 26 5c f0    	mov    0xf05c265c,%edx
f0111c6c:	a1 5c 26 5c f0       	mov    0xf05c265c,%eax
f0111c71:	6a 00                	push   $0x0
f0111c73:	51                   	push   %ecx
f0111c74:	52                   	push   %edx
f0111c75:	50                   	push   %eax
f0111c76:	e8 73 de ff ff       	call   f010faee <check_block>
f0111c7b:	83 c4 10             	add    $0x10,%esp
f0111c7e:	85 c0                	test   %eax,%eax
f0111c80:	75 17                	jne    f0111c99 <test_free_block_BF+0x513>
		panic("3.5 Failed");
f0111c82:	83 ec 04             	sub    $0x4,%esp
f0111c85:	68 43 ae 12 f0       	push   $0xf012ae43
f0111c8a:	68 15 04 00 00       	push   $0x415
f0111c8f:	68 28 a0 12 f0       	push   $0xf012a028
f0111c94:	e8 81 e6 fe ff       	call   f010031a <_panic>

	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData;
f0111c99:	a1 b8 ed 17 f0       	mov    0xf017edb8,%eax
f0111c9e:	83 e8 08             	sub    $0x8,%eax
f0111ca1:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0111ca4:	83 ec 08             	sub    $0x8,%esp
f0111ca7:	6a 03                	push   $0x3
f0111ca9:	ff 75 cc             	pushl  -0x34(%ebp)
f0111cac:	e8 2f 13 01 00       	call   f0122fe0 <alloc_block>
f0111cb1:	83 c4 10             	add    $0x10,%esp
f0111cb4:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected_va = (void*)(KERNEL_HEAP_START + 2*sizeof(int));
f0111cb7:	c7 45 c4 08 00 00 f6 	movl   $0xf6000008,-0x3c(%ebp)
	if(check_block(va, expected_va, allocSizes[0], 1) == 0)
f0111cbe:	a1 b8 ed 17 f0       	mov    0xf017edb8,%eax
f0111cc3:	6a 01                	push   $0x1
f0111cc5:	50                   	push   %eax
f0111cc6:	ff 75 c4             	pushl  -0x3c(%ebp)
f0111cc9:	ff 75 c8             	pushl  -0x38(%ebp)
f0111ccc:	e8 1d de ff ff       	call   f010faee <check_block>
f0111cd1:	83 c4 10             	add    $0x10,%esp
f0111cd4:	85 c0                	test   %eax,%eax
f0111cd6:	75 17                	jne    f0111cef <test_free_block_BF+0x569>
		panic("3.6 Failed");
f0111cd8:	83 ec 04             	sub    $0x4,%esp
f0111cdb:	68 4e ae 12 f0       	push   $0xf012ae4e
f0111ce0:	68 1d 04 00 00       	push   $0x41d
f0111ce5:	68 28 a0 12 f0       	push   $0xf012a028
f0111cea:	e8 2b e6 fe ff       	call   f010031a <_panic>

	//Free 2nd block
	free_block(startVAs[1]);
f0111cef:	a1 84 10 5c f0       	mov    0xf05c1084,%eax
f0111cf4:	83 ec 0c             	sub    $0xc,%esp
f0111cf7:	50                   	push   %eax
f0111cf8:	e8 81 1d 01 00       	call   f0123a7e <free_block>
f0111cfd:	83 c4 10             	add    $0x10,%esp
	if (check_block(startVAs[1], startVAs[1], allocSizes[0], 0) == 0)
f0111d00:	8b 0d b8 ed 17 f0    	mov    0xf017edb8,%ecx
f0111d06:	8b 15 84 10 5c f0    	mov    0xf05c1084,%edx
f0111d0c:	a1 84 10 5c f0       	mov    0xf05c1084,%eax
f0111d11:	6a 00                	push   $0x0
f0111d13:	51                   	push   %ecx
f0111d14:	52                   	push   %edx
f0111d15:	50                   	push   %eax
f0111d16:	e8 d3 dd ff ff       	call   f010faee <check_block>
f0111d1b:	83 c4 10             	add    $0x10,%esp
f0111d1e:	85 c0                	test   %eax,%eax
f0111d20:	75 17                	jne    f0111d39 <test_free_block_BF+0x5b3>
		panic("3.7 Failed");
f0111d22:	83 ec 04             	sub    $0x4,%esp
f0111d25:	68 59 ae 12 f0       	push   $0xf012ae59
f0111d2a:	68 22 04 00 00       	push   $0x422
f0111d2f:	68 28 a0 12 f0       	push   $0xf012a028
f0111d34:	e8 e1 e5 fe ff       	call   f010031a <_panic>

	expectedNumOfFreeBlks++ ;
f0111d39:	ff 45 c0             	incl   -0x40(%ebp)
	if (check_list_size(expectedNumOfFreeBlks) == 0)
f0111d3c:	83 ec 0c             	sub    $0xc,%esp
f0111d3f:	ff 75 c0             	pushl  -0x40(%ebp)
f0111d42:	e8 2f de ff ff       	call   f010fb76 <check_list_size>
f0111d47:	83 c4 10             	add    $0x10,%esp
f0111d4a:	85 c0                	test   %eax,%eax
f0111d4c:	75 17                	jne    f0111d65 <test_free_block_BF+0x5df>
	{
		panic("3.8 Failed");
f0111d4e:	83 ec 04             	sub    $0x4,%esp
f0111d51:	68 64 ae 12 f0       	push   $0xf012ae64
f0111d56:	68 27 04 00 00       	push   $0x427
f0111d5b:	68 28 a0 12 f0       	push   $0xf012a028
f0111d60:	e8 b5 e5 fe ff       	call   f010031a <_panic>
	}

	uint32 block_size, block_status;
	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f0111d65:	83 ec 0c             	sub    $0xc,%esp
f0111d68:	68 38 aa 12 f0       	push   $0xf012aa38
f0111d6d:	e8 fa f1 fe ff       	call   f0100f6c <cprintf>
f0111d72:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f0111d75:	83 ec 0c             	sub    $0xc,%esp
f0111d78:	68 74 aa 12 f0       	push   $0xf012aa74
f0111d7d:	e8 ea f1 fe ff       	call   f0100f6c <cprintf>
f0111d82:	83 c4 10             	add    $0x10,%esp
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f0111d85:	c7 45 bc 78 05 00 00 	movl   $0x578,-0x44(%ebp)
	free_block(startVAs[blockIndex]);
f0111d8c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111d8f:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0111d96:	83 ec 0c             	sub    $0xc,%esp
f0111d99:	50                   	push   %eax
f0111d9a:	e8 df 1c 01 00       	call   f0123a7e <free_block>
f0111d9f:	83 c4 10             	add    $0x10,%esp
	expected_size = remainSize + allocSizes[numOfAllocs-1];
f0111da2:	8b 15 d0 ed 17 f0    	mov    0xf017edd0,%edx
f0111da8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111dab:	01 d0                	add    %edx,%eax
f0111dad:	89 45 b8             	mov    %eax,-0x48(%ebp)
	if (check_block(startVAs[blockIndex-1], startVAs[blockIndex-1], expected_size, 0) == 0)
f0111db0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111db3:	48                   	dec    %eax
f0111db4:	8b 14 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%edx
f0111dbb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111dbe:	48                   	dec    %eax
f0111dbf:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0111dc6:	6a 00                	push   $0x0
f0111dc8:	ff 75 b8             	pushl  -0x48(%ebp)
f0111dcb:	52                   	push   %edx
f0111dcc:	50                   	push   %eax
f0111dcd:	e8 1c dd ff ff       	call   f010faee <check_block>
f0111dd2:	83 c4 10             	add    $0x10,%esp
f0111dd5:	85 c0                	test   %eax,%eax
f0111dd7:	75 17                	jne    f0111df0 <test_free_block_BF+0x66a>
	{
		panic("4.1 Failed");
f0111dd9:	83 ec 04             	sub    $0x4,%esp
f0111ddc:	68 6f ae 12 f0       	push   $0xf012ae6f
f0111de1:	68 35 04 00 00       	push   $0x435
f0111de6:	68 28 a0 12 f0       	push   $0xf012a028
f0111deb:	e8 2a e5 fe ff       	call   f010031a <_panic>
	}
	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f0111df0:	83 ec 0c             	sub    $0xc,%esp
f0111df3:	68 89 aa 12 f0       	push   $0xf012aa89
f0111df8:	e8 6f f1 fe ff       	call   f0100f6c <cprintf>
f0111dfd:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f0111e00:	c7 45 bc 91 01 00 00 	movl   $0x191,-0x44(%ebp)
	free_block(startVAs[blockIndex]);
f0111e07:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111e0a:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0111e11:	83 ec 0c             	sub    $0xc,%esp
f0111e14:	50                   	push   %eax
f0111e15:	e8 64 1c 01 00       	call   f0123a7e <free_block>
f0111e1a:	83 c4 10             	add    $0x10,%esp
	expected_size = allocSizes[2]+allocSizes[2];
f0111e1d:	8b 15 c0 ed 17 f0    	mov    0xf017edc0,%edx
f0111e23:	a1 c0 ed 17 f0       	mov    0xf017edc0,%eax
f0111e28:	01 d0                	add    %edx,%eax
f0111e2a:	89 45 b8             	mov    %eax,-0x48(%ebp)
	if (check_block(startVAs[blockIndex-1], startVAs[blockIndex-1], expected_size, 0) == 0)
f0111e2d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111e30:	48                   	dec    %eax
f0111e31:	8b 14 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%edx
f0111e38:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111e3b:	48                   	dec    %eax
f0111e3c:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0111e43:	6a 00                	push   $0x0
f0111e45:	ff 75 b8             	pushl  -0x48(%ebp)
f0111e48:	52                   	push   %edx
f0111e49:	50                   	push   %eax
f0111e4a:	e8 9f dc ff ff       	call   f010faee <check_block>
f0111e4f:	83 c4 10             	add    $0x10,%esp
f0111e52:	85 c0                	test   %eax,%eax
f0111e54:	75 17                	jne    f0111e6d <test_free_block_BF+0x6e7>
	{
		panic("4.2 Failed");
f0111e56:	83 ec 04             	sub    $0x4,%esp
f0111e59:	68 7a ae 12 f0       	push   $0xf012ae7a
f0111e5e:	68 3f 04 00 00       	push   $0x43f
f0111e63:	68 28 a0 12 f0       	push   $0xf012a028
f0111e68:	e8 ad e4 fe ff       	call   f010031a <_panic>
	}
	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f0111e6d:	83 ec 0c             	sub    $0xc,%esp
f0111e70:	68 a4 aa 12 f0       	push   $0xf012aaa4
f0111e75:	e8 f2 f0 fe ff       	call   f0100f6c <cprintf>
f0111e7a:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f0111e7d:	83 ec 0c             	sub    $0xc,%esp
f0111e80:	68 dc aa 12 f0       	push   $0xf012aadc
f0111e85:	e8 e2 f0 fe ff       	call   f0100f6c <cprintf>
f0111e8a:	83 c4 10             	add    $0x10,%esp
	blockIndex = 0 ;
f0111e8d:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	free_block(startVAs[blockIndex]);
f0111e94:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111e97:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0111e9e:	83 ec 0c             	sub    $0xc,%esp
f0111ea1:	50                   	push   %eax
f0111ea2:	e8 d7 1b 01 00       	call   f0123a7e <free_block>
f0111ea7:	83 c4 10             	add    $0x10,%esp
	expected_size = allocSizes[0]+allocSizes[0];
f0111eaa:	8b 15 b8 ed 17 f0    	mov    0xf017edb8,%edx
f0111eb0:	a1 b8 ed 17 f0       	mov    0xf017edb8,%eax
f0111eb5:	01 d0                	add    %edx,%eax
f0111eb7:	89 45 b8             	mov    %eax,-0x48(%ebp)
	if (check_block(startVAs[blockIndex], startVAs[blockIndex], expected_size, 0) == 0)
f0111eba:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111ebd:	8b 14 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%edx
f0111ec4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111ec7:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0111ece:	6a 00                	push   $0x0
f0111ed0:	ff 75 b8             	pushl  -0x48(%ebp)
f0111ed3:	52                   	push   %edx
f0111ed4:	50                   	push   %eax
f0111ed5:	e8 14 dc ff ff       	call   f010faee <check_block>
f0111eda:	83 c4 10             	add    $0x10,%esp
f0111edd:	85 c0                	test   %eax,%eax
f0111edf:	75 17                	jne    f0111ef8 <test_free_block_BF+0x772>
	{
		panic("5.1 Failed");
f0111ee1:	83 ec 04             	sub    $0x4,%esp
f0111ee4:	68 85 ae 12 f0       	push   $0xf012ae85
f0111ee9:	68 4a 04 00 00       	push   $0x44a
f0111eee:	68 28 a0 12 f0       	push   $0xf012a028
f0111ef3:	e8 22 e4 fe ff       	call   f010031a <_panic>
	}
	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f0111ef8:	83 ec 0c             	sub    $0xc,%esp
f0111efb:	68 f1 aa 12 f0       	push   $0xf012aaf1
f0111f00:	e8 67 f0 fe ff       	call   f0100f6c <cprintf>
f0111f05:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f0111f08:	c7 45 bc c7 00 00 00 	movl   $0xc7,-0x44(%ebp)
	free_block(startVAs[blockIndex]);
f0111f0f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111f12:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0111f19:	83 ec 0c             	sub    $0xc,%esp
f0111f1c:	50                   	push   %eax
f0111f1d:	e8 5c 1b 01 00       	call   f0123a7e <free_block>
f0111f22:	83 c4 10             	add    $0x10,%esp
	expected_size = allocSizes[0]+allocSizes[1];
f0111f25:	8b 15 b8 ed 17 f0    	mov    0xf017edb8,%edx
f0111f2b:	a1 bc ed 17 f0       	mov    0xf017edbc,%eax
f0111f30:	01 d0                	add    %edx,%eax
f0111f32:	89 45 b8             	mov    %eax,-0x48(%ebp)
	if (check_block(startVAs[blockIndex], startVAs[blockIndex], expected_size, 0) == 0)
f0111f35:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111f38:	8b 14 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%edx
f0111f3f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111f42:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0111f49:	6a 00                	push   $0x0
f0111f4b:	ff 75 b8             	pushl  -0x48(%ebp)
f0111f4e:	52                   	push   %edx
f0111f4f:	50                   	push   %eax
f0111f50:	e8 99 db ff ff       	call   f010faee <check_block>
f0111f55:	83 c4 10             	add    $0x10,%esp
f0111f58:	85 c0                	test   %eax,%eax
f0111f5a:	75 17                	jne    f0111f73 <test_free_block_BF+0x7ed>
	{
		panic("5.2 Failed");
f0111f5c:	83 ec 04             	sub    $0x4,%esp
f0111f5f:	68 90 ae 12 f0       	push   $0xf012ae90
f0111f64:	68 54 04 00 00       	push   $0x454
f0111f69:	68 28 a0 12 f0       	push   $0xf012a028
f0111f6e:	e8 a7 e3 fe ff       	call   f010031a <_panic>
	}
	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f0111f73:	83 ec 0c             	sub    $0xc,%esp
f0111f76:	68 0c ab 12 f0       	push   $0xf012ab0c
f0111f7b:	e8 ec ef fe ff       	call   f0100f6c <cprintf>
f0111f80:	83 c4 10             	add    $0x10,%esp
	blockIndex = 4*allocCntPerSize - 2 ;
f0111f83:	c7 45 bc 1e 03 00 00 	movl   $0x31e,-0x44(%ebp)
	free_block(startVAs[blockIndex]);
f0111f8a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111f8d:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0111f94:	83 ec 0c             	sub    $0xc,%esp
f0111f97:	50                   	push   %eax
f0111f98:	e8 e1 1a 01 00       	call   f0123a7e <free_block>
f0111f9d:	83 c4 10             	add    $0x10,%esp

	blockIndex = 4*allocCntPerSize - 1 ;
f0111fa0:	c7 45 bc 1f 03 00 00 	movl   $0x31f,-0x44(%ebp)
	free_block(startVAs[blockIndex]);
f0111fa7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111faa:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0111fb1:	83 ec 0c             	sub    $0xc,%esp
f0111fb4:	50                   	push   %eax
f0111fb5:	e8 c4 1a 01 00       	call   f0123a7e <free_block>
f0111fba:	83 c4 10             	add    $0x10,%esp
	expected_size = allocSizes[3]+allocSizes[3]+allocSizes[4];
f0111fbd:	8b 15 c4 ed 17 f0    	mov    0xf017edc4,%edx
f0111fc3:	a1 c4 ed 17 f0       	mov    0xf017edc4,%eax
f0111fc8:	01 c2                	add    %eax,%edx
f0111fca:	a1 c8 ed 17 f0       	mov    0xf017edc8,%eax
f0111fcf:	01 d0                	add    %edx,%eax
f0111fd1:	89 45 b8             	mov    %eax,-0x48(%ebp)
	if (check_block(startVAs[blockIndex-1], startVAs[blockIndex-1], expected_size, 0) == 0)
f0111fd4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111fd7:	48                   	dec    %eax
f0111fd8:	8b 14 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%edx
f0111fdf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111fe2:	48                   	dec    %eax
f0111fe3:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0111fea:	6a 00                	push   $0x0
f0111fec:	ff 75 b8             	pushl  -0x48(%ebp)
f0111fef:	52                   	push   %edx
f0111ff0:	50                   	push   %eax
f0111ff1:	e8 f8 da ff ff       	call   f010faee <check_block>
f0111ff6:	83 c4 10             	add    $0x10,%esp
f0111ff9:	85 c0                	test   %eax,%eax
f0111ffb:	75 17                	jne    f0112014 <test_free_block_BF+0x88e>
	{
		panic("6.1 Failed");
f0111ffd:	83 ec 04             	sub    $0x4,%esp
f0112000:	68 9b ae 12 f0       	push   $0xf012ae9b
f0112005:	68 61 04 00 00       	push   $0x461
f011200a:	68 28 a0 12 f0       	push   $0xf012a028
f011200f:	e8 06 e3 fe ff       	call   f010031a <_panic>
	}
	if (check_list_size(expectedNumOfFreeBlks) == 0)
f0112014:	83 ec 0c             	sub    $0xc,%esp
f0112017:	ff 75 c0             	pushl  -0x40(%ebp)
f011201a:	e8 57 db ff ff       	call   f010fb76 <check_list_size>
f011201f:	83 c4 10             	add    $0x10,%esp
f0112022:	85 c0                	test   %eax,%eax
f0112024:	75 17                	jne    f011203d <test_free_block_BF+0x8b7>
	{
		panic("6.2 Failed");
f0112026:	83 ec 04             	sub    $0x4,%esp
f0112029:	68 a6 ae 12 f0       	push   $0xf012aea6
f011202e:	68 65 04 00 00       	push   $0x465
f0112033:	68 28 a0 12 f0       	push   $0xf012a028
f0112038:	e8 dd e2 fe ff       	call   f010031a <_panic>
	}
	//====================================================================//
	/*Allocate After Free Scenarios */
	void* expected = NULL;
f011203d:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	{
		//Consume 1st 7KB Block
		actualSize = 7*kilo - sizeOfMetaData ;
f0112044:	c7 45 cc f8 1b 00 00 	movl   $0x1bf8,-0x34(%ebp)
		expected_size = ROUNDUP(actualSize + sizeOfMetaData,2) ;
f011204b:	c7 45 b0 02 00 00 00 	movl   $0x2,-0x50(%ebp)
f0112052:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0112055:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112058:	01 d0                	add    %edx,%eax
f011205a:	83 c0 07             	add    $0x7,%eax
f011205d:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0112060:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112063:	ba 00 00 00 00       	mov    $0x0,%edx
f0112068:	f7 75 b0             	divl   -0x50(%ebp)
f011206b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011206e:	29 d0                	sub    %edx,%eax
f0112070:	89 45 b8             	mov    %eax,-0x48(%ebp)
		va = alloc_block(actualSize, DA_BF);
f0112073:	83 ec 08             	sub    $0x8,%esp
f0112076:	6a 03                	push   $0x3
f0112078:	ff 75 cc             	pushl  -0x34(%ebp)
f011207b:	e8 60 0f 01 00       	call   f0122fe0 <alloc_block>
f0112080:	83 c4 10             	add    $0x10,%esp
f0112083:	89 45 c8             	mov    %eax,-0x38(%ebp)
		//Check returned va
		expected = (void*)(startVAs[6*allocCntPerSize]);
f0112086:	a1 40 23 5c f0       	mov    0xf05c2340,%eax
f011208b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		if (check_block(va, expected, expected_size, 1) == 0)
f011208e:	6a 01                	push   $0x1
f0112090:	ff 75 b8             	pushl  -0x48(%ebp)
f0112093:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112096:	ff 75 c8             	pushl  -0x38(%ebp)
f0112099:	e8 50 da ff ff       	call   f010faee <check_block>
f011209e:	83 c4 10             	add    $0x10,%esp
f01120a1:	85 c0                	test   %eax,%eax
f01120a3:	75 17                	jne    f01120bc <test_free_block_BF+0x936>
		{
			panic("6.3 Failed");
f01120a5:	83 ec 04             	sub    $0x4,%esp
f01120a8:	68 b1 ae 12 f0       	push   $0xf012aeb1
f01120ad:	68 73 04 00 00       	push   $0x473
f01120b2:	68 28 a0 12 f0       	push   $0xf012a028
f01120b7:	e8 5e e2 fe ff       	call   f010031a <_panic>
		}
		expectedNumOfFreeBlks--;
f01120bc:	ff 4d c0             	decl   -0x40(%ebp)
	}

	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f01120bf:	83 ec 0c             	sub    $0xc,%esp
f01120c2:	68 4c ab 12 f0       	push   $0xf012ab4c
f01120c7:	e8 a0 ee fe ff       	call   f0100f6c <cprintf>
f01120cc:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with PREV\n\n") ;
f01120cf:	83 ec 0c             	sub    $0xc,%esp
f01120d2:	68 bc ae 12 f0       	push   $0xf012aebc
f01120d7:	e8 90 ee fe ff       	call   f0100f6c <cprintf>
f01120dc:	83 c4 10             	add    $0x10,%esp
	actualSize = 2*kilo - sizeOfMetaData;
f01120df:	c7 45 cc f8 07 00 00 	movl   $0x7f8,-0x34(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData,2) ;
f01120e6:	c7 45 a8 02 00 00 00 	movl   $0x2,-0x58(%ebp)
f01120ed:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01120f0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01120f3:	01 d0                	add    %edx,%eax
f01120f5:	83 c0 07             	add    $0x7,%eax
f01120f8:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01120fb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01120fe:	ba 00 00 00 00       	mov    $0x0,%edx
f0112103:	f7 75 a8             	divl   -0x58(%ebp)
f0112106:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112109:	29 d0                	sub    %edx,%eax
f011210b:	89 45 b8             	mov    %eax,-0x48(%ebp)
	va = alloc_block(actualSize, DA_BF);
f011210e:	83 ec 08             	sub    $0x8,%esp
f0112111:	6a 03                	push   $0x3
f0112113:	ff 75 cc             	pushl  -0x34(%ebp)
f0112116:	e8 c5 0e 01 00       	call   f0122fe0 <alloc_block>
f011211b:	83 c4 10             	add    $0x10,%esp
f011211e:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f0112121:	a1 c0 16 5c f0       	mov    0xf05c16c0,%eax
f0112126:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f0112129:	6a 01                	push   $0x1
f011212b:	ff 75 b8             	pushl  -0x48(%ebp)
f011212e:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112131:	ff 75 c8             	pushl  -0x38(%ebp)
f0112134:	e8 b5 d9 ff ff       	call   f010faee <check_block>
f0112139:	83 c4 10             	add    $0x10,%esp
f011213c:	85 c0                	test   %eax,%eax
f011213e:	75 17                	jne    f0112157 <test_free_block_BF+0x9d1>
	{
		panic("7.1 Failed");
f0112140:	83 ec 04             	sub    $0x4,%esp
f0112143:	68 e2 ae 12 f0       	push   $0xf012aee2
f0112148:	68 82 04 00 00       	push   $0x482
f011214d:	68 28 a0 12 f0       	push   $0xf012a028
f0112152:	e8 c3 e1 fe ff       	call   f010031a <_panic>
	}

	expectedNumOfFreeBlks--;
f0112157:	ff 4d c0             	decl   -0x40(%ebp)

	actualSize = 8*kilo;
f011215a:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData,2) ;
f0112161:	c7 45 a0 02 00 00 00 	movl   $0x2,-0x60(%ebp)
f0112168:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011216b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011216e:	01 d0                	add    %edx,%eax
f0112170:	83 c0 07             	add    $0x7,%eax
f0112173:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0112176:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112179:	ba 00 00 00 00       	mov    $0x0,%edx
f011217e:	f7 75 a0             	divl   -0x60(%ebp)
f0112181:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112184:	29 d0                	sub    %edx,%eax
f0112186:	89 45 b8             	mov    %eax,-0x48(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0112189:	83 ec 08             	sub    $0x8,%esp
f011218c:	6a 03                	push   $0x3
f011218e:	ff 75 cc             	pushl  -0x34(%ebp)
f0112191:	e8 4a 0e 01 00       	call   f0122fe0 <alloc_block>
f0112196:	83 c4 10             	add    $0x10,%esp
f0112199:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f011219c:	a1 5c 26 5c f0       	mov    0xf05c265c,%eax
f01121a1:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f01121a4:	6a 01                	push   $0x1
f01121a6:	ff 75 b8             	pushl  -0x48(%ebp)
f01121a9:	ff 75 b4             	pushl  -0x4c(%ebp)
f01121ac:	ff 75 c8             	pushl  -0x38(%ebp)
f01121af:	e8 3a d9 ff ff       	call   f010faee <check_block>
f01121b4:	83 c4 10             	add    $0x10,%esp
f01121b7:	85 c0                	test   %eax,%eax
f01121b9:	75 17                	jne    f01121d2 <test_free_block_BF+0xa4c>
	{
		panic("7.2 Failed");
f01121bb:	83 ec 04             	sub    $0x4,%esp
f01121be:	68 ed ae 12 f0       	push   $0xf012aeed
f01121c3:	68 8e 04 00 00       	push   $0x48e
f01121c8:	68 28 a0 12 f0       	push   $0xf012a028
f01121cd:	e8 48 e1 fe ff       	call   f010031a <_panic>
	}

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f01121d2:	83 ec 0c             	sub    $0xc,%esp
f01121d5:	68 30 ac 12 f0       	push   $0xf012ac30
f01121da:	e8 8d ed fe ff       	call   f0100f6c <cprintf>
f01121df:	83 c4 10             	add    $0x10,%esp
	actualSize = 2*kilo + 1;
f01121e2:	c7 45 cc 01 08 00 00 	movl   $0x801,-0x34(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData,2) ;
f01121e9:	c7 45 98 02 00 00 00 	movl   $0x2,-0x68(%ebp)
f01121f0:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01121f3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01121f6:	01 d0                	add    %edx,%eax
f01121f8:	83 c0 07             	add    $0x7,%eax
f01121fb:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01121fe:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112201:	ba 00 00 00 00       	mov    $0x0,%edx
f0112206:	f7 75 98             	divl   -0x68(%ebp)
f0112209:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011220c:	29 d0                	sub    %edx,%eax
f011220e:	89 45 b8             	mov    %eax,-0x48(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0112211:	83 ec 08             	sub    $0x8,%esp
f0112214:	6a 03                	push   $0x3
f0112216:	ff 75 cc             	pushl  -0x34(%ebp)
f0112219:	e8 c2 0d 01 00       	call   f0122fe0 <alloc_block>
f011221e:	83 c4 10             	add    $0x10,%esp
f0112221:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f0112224:	a1 f8 1c 5c f0       	mov    0xf05c1cf8,%eax
f0112229:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f011222c:	6a 01                	push   $0x1
f011222e:	ff 75 b8             	pushl  -0x48(%ebp)
f0112231:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112234:	ff 75 c8             	pushl  -0x38(%ebp)
f0112237:	e8 b2 d8 ff ff       	call   f010faee <check_block>
f011223c:	83 c4 10             	add    $0x10,%esp
f011223f:	85 c0                	test   %eax,%eax
f0112241:	75 17                	jne    f011225a <test_free_block_BF+0xad4>
	{
		panic("7.3 Failed");
f0112243:	83 ec 04             	sub    $0x4,%esp
f0112246:	68 f8 ae 12 f0       	push   $0xf012aef8
f011224b:	68 99 04 00 00       	push   $0x499
f0112250:	68 28 a0 12 f0       	push   $0xf012a028
f0112255:	e8 c0 e0 fe ff       	call   f010031a <_panic>
	}

	cprintf("		7.3: in block coalesces with NEXT [INTERNAL FRAGMENTATION]\n\n") ;
f011225a:	83 ec 0c             	sub    $0xc,%esp
f011225d:	68 04 af 12 f0       	push   $0xf012af04
f0112262:	e8 05 ed fe ff       	call   f0100f6c <cprintf>
f0112267:	83 c4 10             	add    $0x10,%esp
	actualSize = 4*kilo + 10;
f011226a:	c7 45 cc 0a 10 00 00 	movl   $0x100a,-0x34(%ebp)
	expected_size = allocSizes[0]+allocSizes[1]; //ROUNDUP(actualSize + sizeOfMetaData,2) ;
f0112271:	8b 15 b8 ed 17 f0    	mov    0xf017edb8,%edx
f0112277:	a1 bc ed 17 f0       	mov    0xf017edbc,%eax
f011227c:	01 d0                	add    %edx,%eax
f011227e:	89 45 b8             	mov    %eax,-0x48(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0112281:	83 ec 08             	sub    $0x8,%esp
f0112284:	6a 03                	push   $0x3
f0112286:	ff 75 cc             	pushl  -0x34(%ebp)
f0112289:	e8 52 0d 01 00       	call   f0122fe0 <alloc_block>
f011228e:	83 c4 10             	add    $0x10,%esp
f0112291:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f0112294:	a1 9c 13 5c f0       	mov    0xf05c139c,%eax
f0112299:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f011229c:	6a 01                	push   $0x1
f011229e:	ff 75 b8             	pushl  -0x48(%ebp)
f01122a1:	ff 75 b4             	pushl  -0x4c(%ebp)
f01122a4:	ff 75 c8             	pushl  -0x38(%ebp)
f01122a7:	e8 42 d8 ff ff       	call   f010faee <check_block>
f01122ac:	83 c4 10             	add    $0x10,%esp
f01122af:	85 c0                	test   %eax,%eax
f01122b1:	75 17                	jne    f01122ca <test_free_block_BF+0xb44>
	{
		panic("7.4 Failed");
f01122b3:	83 ec 04             	sub    $0x4,%esp
f01122b6:	68 43 af 12 f0       	push   $0xf012af43
f01122bb:	68 a4 04 00 00       	push   $0x4a4
f01122c0:	68 28 a0 12 f0       	push   $0xf012a028
f01122c5:	e8 50 e0 fe ff       	call   f010031a <_panic>
	}
	expectedNumOfFreeBlks--;
f01122ca:	ff 4d c0             	decl   -0x40(%ebp)

	actualSize = 5*kilo - sizeOfMetaData;
f01122cd:	c7 45 cc f8 13 00 00 	movl   $0x13f8,-0x34(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData,2) ;
f01122d4:	c7 45 90 02 00 00 00 	movl   $0x2,-0x70(%ebp)
f01122db:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01122de:	8b 45 90             	mov    -0x70(%ebp),%eax
f01122e1:	01 d0                	add    %edx,%eax
f01122e3:	83 c0 07             	add    $0x7,%eax
f01122e6:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01122e9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01122ec:	ba 00 00 00 00       	mov    $0x0,%edx
f01122f1:	f7 75 90             	divl   -0x70(%ebp)
f01122f4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01122f7:	29 d0                	sub    %edx,%eax
f01122f9:	89 45 b8             	mov    %eax,-0x48(%ebp)
	va = alloc_block(actualSize, DA_BF);
f01122fc:	83 ec 08             	sub    $0x8,%esp
f01122ff:	6a 03                	push   $0x3
f0112301:	ff 75 cc             	pushl  -0x34(%ebp)
f0112304:	e8 d7 0c 01 00       	call   f0122fe0 <alloc_block>
f0112309:	83 c4 10             	add    $0x10,%esp
f011230c:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + sizeOfMetaData);
f011230f:	c7 45 b4 08 00 00 f6 	movl   $0xf6000008,-0x4c(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f0112316:	6a 01                	push   $0x1
f0112318:	ff 75 b8             	pushl  -0x48(%ebp)
f011231b:	ff 75 b4             	pushl  -0x4c(%ebp)
f011231e:	ff 75 c8             	pushl  -0x38(%ebp)
f0112321:	e8 c8 d7 ff ff       	call   f010faee <check_block>
f0112326:	83 c4 10             	add    $0x10,%esp
f0112329:	85 c0                	test   %eax,%eax
f011232b:	75 17                	jne    f0112344 <test_free_block_BF+0xbbe>
	{
		panic("7.5 Failed");
f011232d:	83 ec 04             	sub    $0x4,%esp
f0112330:	68 4e af 12 f0       	push   $0xf012af4e
f0112335:	68 af 04 00 00       	push   $0x4af
f011233a:	68 28 a0 12 f0       	push   $0xf012a028
f011233f:	e8 d6 df fe ff       	call   f010031a <_panic>
	}

	actualSize = 3*kilo - sizeOfMetaData;
f0112344:	c7 45 cc f8 0b 00 00 	movl   $0xbf8,-0x34(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData,2) ;
f011234b:	c7 45 88 02 00 00 00 	movl   $0x2,-0x78(%ebp)
f0112352:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0112355:	8b 45 88             	mov    -0x78(%ebp),%eax
f0112358:	01 d0                	add    %edx,%eax
f011235a:	83 c0 07             	add    $0x7,%eax
f011235d:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0112360:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0112363:	ba 00 00 00 00       	mov    $0x0,%edx
f0112368:	f7 75 88             	divl   -0x78(%ebp)
f011236b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011236e:	29 d0                	sub    %edx,%eax
f0112370:	89 45 b8             	mov    %eax,-0x48(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0112373:	83 ec 08             	sub    $0x8,%esp
f0112376:	6a 03                	push   $0x3
f0112378:	ff 75 cc             	pushl  -0x34(%ebp)
f011237b:	e8 60 0c 01 00       	call   f0122fe0 <alloc_block>
f0112380:	83 c4 10             	add    $0x10,%esp
f0112383:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + 5*kilo + sizeOfMetaData);
f0112386:	c7 45 b4 08 14 00 f6 	movl   $0xf6001408,-0x4c(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f011238d:	6a 01                	push   $0x1
f011238f:	ff 75 b8             	pushl  -0x48(%ebp)
f0112392:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112395:	ff 75 c8             	pushl  -0x38(%ebp)
f0112398:	e8 51 d7 ff ff       	call   f010faee <check_block>
f011239d:	83 c4 10             	add    $0x10,%esp
f01123a0:	85 c0                	test   %eax,%eax
f01123a2:	75 17                	jne    f01123bb <test_free_block_BF+0xc35>
	{
		panic("7.6 Failed");
f01123a4:	83 ec 04             	sub    $0x4,%esp
f01123a7:	68 59 af 12 f0       	push   $0xf012af59
f01123ac:	68 b9 04 00 00       	push   $0x4b9
f01123b1:	68 28 a0 12 f0       	push   $0xf012a028
f01123b6:	e8 5f df fe ff       	call   f010031a <_panic>
	}
	expectedNumOfFreeBlks--;
f01123bb:	ff 4d c0             	decl   -0x40(%ebp)

	if (check_list_size(expectedNumOfFreeBlks) == 0)
f01123be:	83 ec 0c             	sub    $0xc,%esp
f01123c1:	ff 75 c0             	pushl  -0x40(%ebp)
f01123c4:	e8 ad d7 ff ff       	call   f010fb76 <check_list_size>
f01123c9:	83 c4 10             	add    $0x10,%esp
f01123cc:	85 c0                	test   %eax,%eax
f01123ce:	75 17                	jne    f01123e7 <test_free_block_BF+0xc61>
	{
		panic("7.7 Failed");
f01123d0:	83 ec 04             	sub    $0x4,%esp
f01123d3:	68 64 af 12 f0       	push   $0xf012af64
f01123d8:	68 bf 04 00 00       	push   $0x4bf
f01123dd:	68 28 a0 12 f0       	push   $0xf012a028
f01123e2:	e8 33 df fe ff       	call   f010031a <_panic>
	}

	cprintf("Congratulations!! test free_block with BEST FIT completed successfully.\n");
f01123e7:	83 ec 0c             	sub    $0xc,%esp
f01123ea:	68 70 af 12 f0       	push   $0xf012af70
f01123ef:	e8 78 eb fe ff       	call   f0100f6c <cprintf>
f01123f4:	83 c4 10             	add    $0x10,%esp

}
f01123f7:	90                   	nop
f01123f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01123fb:	c9                   	leave  
f01123fc:	c3                   	ret    

f01123fd <test_free_block_NF>:

void test_free_block_NF()
{
f01123fd:	55                   	push   %ebp
f01123fe:	89 e5                	mov    %esp,%ebp
f0112400:	83 ec 08             	sub    $0x8,%esp
	panic("not implemented");
f0112403:	83 ec 04             	sub    $0x4,%esp
f0112406:	68 b9 af 12 f0       	push   $0xf012afb9
f011240b:	68 c8 04 00 00       	push   $0x4c8
f0112410:	68 28 a0 12 f0       	push   $0xf012a028
f0112415:	e8 00 df fe ff       	call   f010031a <_panic>

f011241a <test_realloc_block_FF>:
}

void test_realloc_block_FF()
{
f011241a:	55                   	push   %ebp
f011241b:	89 e5                	mov    %esp,%ebp
f011241d:	81 ec 98 00 00 00    	sub    $0x98,%esp
#endif

	//TODO: [PROJECT'24.MS1 - #09] [3] DYNAMIC ALLOCATOR - test_realloc_block_FF()
	//CHECK MISSING CASES AND TRY TO TEST THEM !

	cprintf("===================================================\n");
f0112423:	83 ec 0c             	sub    $0xc,%esp
f0112426:	68 cc af 12 f0       	push   $0xf012afcc
f011242b:	e8 3c eb fe ff       	call   f0100f6c <cprintf>
f0112430:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A PARTIAL TEST FOR REALLOC******\n") ;
f0112433:	83 ec 0c             	sub    $0xc,%esp
f0112436:	68 04 b0 12 f0       	push   $0xf012b004
f011243b:	e8 2c eb fe ff       	call   f0100f6c <cprintf>
f0112440:	83 c4 10             	add    $0x10,%esp
	cprintf("You need to pick-up the missing tests and test them\n") ;
f0112443:	83 ec 0c             	sub    $0xc,%esp
f0112446:	68 3c b0 12 f0       	push   $0xf012b03c
f011244b:	e8 1c eb fe ff       	call   f0100f6c <cprintf>
f0112450:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f0112453:	83 ec 0c             	sub    $0xc,%esp
f0112456:	68 cc af 12 f0       	push   $0xf012afcc
f011245b:	e8 0c eb fe ff       	call   f0100f6c <cprintf>
f0112460:	83 c4 10             	add    $0x10,%esp

	int eval = 0;
f0112463:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;

	int initAllocatedSpace = 3*Mega;
f011246a:	c7 45 c8 00 00 30 00 	movl   $0x300000,-0x38(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f0112471:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0112474:	83 ec 08             	sub    $0x8,%esp
f0112477:	50                   	push   %eax
f0112478:	68 00 00 00 f6       	push   $0xf6000000
f011247d:	e8 8b 0c 01 00       	call   f012310d <initialize_dynamic_allocator>
f0112482:	83 c4 10             	add    $0x10,%esp
	void * va, *expectedVA ;
	//====================================================================//
	//[1] Test calling realloc with VA = NULL. It should call malloc
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("1: Test calling realloc with VA = NULL.[10%]\n\n") ;
f0112485:	83 ec 0c             	sub    $0xc,%esp
f0112488:	68 74 b0 12 f0       	push   $0xf012b074
f011248d:	e8 da ea fe ff       	call   f0100f6c <cprintf>
f0112492:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0112495:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	int totalSizes = 0;
f011249c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f01124a3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f01124aa:	eb 2a                	jmp    f01124d6 <test_realloc_block_FF+0xbc>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f01124ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01124af:	8b 14 85 b8 ed 17 f0 	mov    -0xfe81248(,%eax,4),%edx
f01124b6:	89 d0                	mov    %edx,%eax
f01124b8:	c1 e0 02             	shl    $0x2,%eax
f01124bb:	01 d0                	add    %edx,%eax
f01124bd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01124c4:	01 d0                	add    %edx,%eax
f01124c6:	c1 e0 03             	shl    $0x3,%eax
f01124c9:	89 c2                	mov    %eax,%edx
f01124cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01124ce:	01 d0                	add    %edx,%eax
f01124d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/* Try to allocate set of blocks with different sizes*/
	cprintf("1: Test calling realloc with VA = NULL.[10%]\n\n") ;
	is_correct = 1;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f01124d3:	ff 45 e8             	incl   -0x18(%ebp)
f01124d6:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f01124da:	7e d0                	jle    f01124ac <test_realloc_block_FF+0x92>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes - 2*sizeof(int) ; //exclude size of "DA Begin & End" blocks
f01124dc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01124df:	2b 45 ec             	sub    -0x14(%ebp),%eax
f01124e2:	83 e8 08             	sub    $0x8,%eax
f01124e5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	if (remainSize <= 0)
f01124e8:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f01124ec:	7f 17                	jg     f0112505 <test_realloc_block_FF+0xeb>
		panic("test_realloc_block_FF is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f01124ee:	83 ec 04             	sub    $0x4,%esp
f01124f1:	68 a4 b0 12 f0       	push   $0xf012b0a4
f01124f6:	68 ef 04 00 00       	push   $0x4ef
f01124fb:	68 28 a0 12 f0       	push   $0xf012a028
f0112500:	e8 15 de fe ff       	call   f010031a <_panic>

	int idx = 0;
f0112505:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) /*BEG block*/ ;
f011250c:	c7 45 e0 04 00 00 f6 	movl   $0xf6000004,-0x20(%ebp)
	uint32 actualSize, expectedSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0112513:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011251a:	e9 2f 01 00 00       	jmp    f011264e <test_realloc_block_FF+0x234>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f011251f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0112526:	e9 13 01 00 00       	jmp    f011263e <test_realloc_block_FF+0x224>
		{
			actualSize = allocSizes[i] - sizeOfMetaData;
f011252b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011252e:	8b 04 85 b8 ed 17 f0 	mov    -0xfe81248(,%eax,4),%eax
f0112535:	83 e8 08             	sub    $0x8,%eax
f0112538:	89 45 c0             	mov    %eax,-0x40(%ebp)
			expectedSize = ROUNDUP(actualSize + sizeOfMetaData, 2);
f011253b:	c7 45 bc 02 00 00 00 	movl   $0x2,-0x44(%ebp)
f0112542:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0112545:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112548:	01 d0                	add    %edx,%eax
f011254a:	83 c0 07             	add    $0x7,%eax
f011254d:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0112550:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112553:	ba 00 00 00 00       	mov    $0x0,%edx
f0112558:	f7 75 bc             	divl   -0x44(%ebp)
f011255b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011255e:	29 d0                	sub    %edx,%eax
f0112560:	89 45 b4             	mov    %eax,-0x4c(%ebp)
			expectedVA = (curVA + sizeOfMetaData/2);
f0112563:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0112566:	83 c0 04             	add    $0x4,%eax
f0112569:	89 45 b0             	mov    %eax,-0x50(%ebp)
			va = startVAs[idx] = realloc_block_FF(NULL, actualSize);
f011256c:	83 ec 08             	sub    $0x8,%esp
f011256f:	ff 75 c0             	pushl  -0x40(%ebp)
f0112572:	6a 00                	push   $0x0
f0112574:	e8 c6 15 01 00       	call   f0123b3f <realloc_block_FF>
f0112579:	83 c4 10             	add    $0x10,%esp
f011257c:	89 c2                	mov    %eax,%edx
f011257e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112581:	89 14 85 80 10 5c f0 	mov    %edx,-0xfa3ef80(,%eax,4)
f0112588:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011258b:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0112592:	89 45 ac             	mov    %eax,-0x54(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f0112595:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112598:	d1 e8                	shr    %eax
f011259a:	89 c2                	mov    %eax,%edx
f011259c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011259f:	01 c2                	add    %eax,%edx
f01125a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01125a4:	89 14 85 80 3c 5c f0 	mov    %edx,-0xfa3c380(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f01125ab:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01125ae:	8d 50 fe             	lea    -0x2(%eax),%edx
f01125b1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01125b4:	01 c2                	add    %eax,%edx
f01125b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01125b9:	89 14 85 80 26 5c f0 	mov    %edx,-0xfa3d980(,%eax,4)
			if (check_block(va, expectedVA, expectedSize, 1) == 0)
f01125c0:	6a 01                	push   $0x1
f01125c2:	ff 75 b4             	pushl  -0x4c(%ebp)
f01125c5:	ff 75 b0             	pushl  -0x50(%ebp)
f01125c8:	ff 75 ac             	pushl  -0x54(%ebp)
f01125cb:	e8 1e d5 ff ff       	call   f010faee <check_block>
f01125d0:	83 c4 10             	add    $0x10,%esp
f01125d3:	85 c0                	test   %eax,%eax
f01125d5:	75 24                	jne    f01125fb <test_realloc_block_FF+0x1e1>
			{
				panic("test_realloc_block_FF #1.1.%d: WRONG ALLOC - it return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData ,va);
f01125d7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01125da:	83 c0 08             	add    $0x8,%eax
f01125dd:	83 ec 08             	sub    $0x8,%esp
f01125e0:	ff 75 ac             	pushl  -0x54(%ebp)
f01125e3:	50                   	push   %eax
f01125e4:	ff 75 e4             	pushl  -0x1c(%ebp)
f01125e7:	68 24 b1 12 f0       	push   $0xf012b124
f01125ec:	68 00 05 00 00       	push   $0x500
f01125f1:	68 28 a0 12 f0       	push   $0xf012a028
f01125f6:	e8 1f dd fe ff       	call   f010031a <_panic>
			}
			curVA += allocSizes[i] ;
f01125fb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01125fe:	8b 04 85 b8 ed 17 f0 	mov    -0xfe81248(,%eax,4),%eax
f0112605:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f0112608:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011260b:	8b 14 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%edx
f0112612:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112615:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f0112618:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011261b:	8b 14 85 80 3c 5c f0 	mov    -0xfa3c380(,%eax,4),%edx
f0112622:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112625:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f0112628:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011262b:	8b 14 85 80 26 5c f0 	mov    -0xfa3d980(,%eax,4),%edx
f0112632:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112635:	66 89 02             	mov    %ax,(%edx)
			idx++;
f0112638:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) /*BEG block*/ ;
	uint32 actualSize, expectedSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f011263b:	ff 45 d8             	incl   -0x28(%ebp)
f011263e:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f0112645:	0f 8e e0 fe ff ff    	jle    f011252b <test_realloc_block_FF+0x111>
		panic("test_realloc_block_FF is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) /*BEG block*/ ;
	uint32 actualSize, expectedSize;
	for (int i = 0; i < numOfAllocs; ++i)
f011264b:	ff 45 dc             	incl   -0x24(%ebp)
f011264e:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f0112652:	0f 8e c7 fe ff ff    	jle    f011251f <test_realloc_block_FF+0x105>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData;
f0112658:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011265b:	83 e8 08             	sub    $0x8,%eax
f011265e:	89 45 c0             	mov    %eax,-0x40(%ebp)
	expectedSize = ROUNDUP(actualSize + sizeOfMetaData, 2);
f0112661:	c7 45 a8 02 00 00 00 	movl   $0x2,-0x58(%ebp)
f0112668:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011266b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011266e:	01 d0                	add    %edx,%eax
f0112670:	83 c0 07             	add    $0x7,%eax
f0112673:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0112676:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112679:	ba 00 00 00 00       	mov    $0x0,%edx
f011267e:	f7 75 a8             	divl   -0x58(%ebp)
f0112681:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112684:	29 d0                	sub    %edx,%eax
f0112686:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	expectedVA = (curVA + sizeOfMetaData/2);
f0112689:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011268c:	83 c0 04             	add    $0x4,%eax
f011268f:	89 45 b0             	mov    %eax,-0x50(%ebp)

	va = startVAs[idx] = realloc_block_FF(NULL, actualSize);
f0112692:	83 ec 08             	sub    $0x8,%esp
f0112695:	ff 75 c0             	pushl  -0x40(%ebp)
f0112698:	6a 00                	push   $0x0
f011269a:	e8 a0 14 01 00       	call   f0123b3f <realloc_block_FF>
f011269f:	83 c4 10             	add    $0x10,%esp
f01126a2:	89 c2                	mov    %eax,%edx
f01126a4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01126a7:	89 14 85 80 10 5c f0 	mov    %edx,-0xfa3ef80(,%eax,4)
f01126ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01126b1:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f01126b8:	89 45 ac             	mov    %eax,-0x54(%ebp)

	midVAs[idx] = va + actualSize/2 ;
f01126bb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01126be:	d1 e8                	shr    %eax
f01126c0:	89 c2                	mov    %eax,%edx
f01126c2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01126c5:	01 c2                	add    %eax,%edx
f01126c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01126ca:	89 14 85 80 3c 5c f0 	mov    %edx,-0xfa3c380(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f01126d1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01126d4:	8d 50 fe             	lea    -0x2(%eax),%edx
f01126d7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01126da:	01 c2                	add    %eax,%edx
f01126dc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01126df:	89 14 85 80 26 5c f0 	mov    %edx,-0xfa3d980(,%eax,4)
	//Check returned va
	if (check_block(va, expectedVA, expectedSize, 1) == 0)
f01126e6:	6a 01                	push   $0x1
f01126e8:	ff 75 b4             	pushl  -0x4c(%ebp)
f01126eb:	ff 75 b0             	pushl  -0x50(%ebp)
f01126ee:	ff 75 ac             	pushl  -0x54(%ebp)
f01126f1:	e8 f8 d3 ff ff       	call   f010faee <check_block>
f01126f6:	83 c4 10             	add    $0x10,%esp
f01126f9:	85 c0                	test   %eax,%eax
f01126fb:	75 17                	jne    f0112714 <test_realloc_block_FF+0x2fa>
	{
		panic("test_realloc_block_FF #1.2.0: WRONG ALLOC - it return wrong address.");
f01126fd:	83 ec 04             	sub    $0x4,%esp
f0112700:	68 84 b1 12 f0       	push   $0xf012b184
f0112705:	68 17 05 00 00       	push   $0x517
f011270a:	68 28 a0 12 f0       	push   $0xf012a028
f011270f:	e8 06 dc fe ff       	call   f010031a <_panic>
	}
	*(startVAs[idx]) = idx ;
f0112714:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112717:	8b 14 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%edx
f011271e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112721:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f0112724:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112727:	8b 14 85 80 3c 5c f0 	mov    -0xfa3c380(,%eax,4),%edx
f011272e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112731:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f0112734:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112737:	8b 14 85 80 26 5c f0 	mov    -0xfa3d980(,%eax,4),%edx
f011273e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112741:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0112744:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f011274b:	eb 59                	jmp    f01127a6 <test_realloc_block_FF+0x38c>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f011274d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0112750:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0112757:	66 8b 00             	mov    (%eax),%ax
f011275a:	98                   	cwtl   
f011275b:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011275e:	75 26                	jne    f0112786 <test_realloc_block_FF+0x36c>
f0112760:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0112763:	8b 04 85 80 3c 5c f0 	mov    -0xfa3c380(,%eax,4),%eax
f011276a:	66 8b 00             	mov    (%eax),%ax
f011276d:	98                   	cwtl   
f011276e:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0112771:	75 13                	jne    f0112786 <test_realloc_block_FF+0x36c>
f0112773:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0112776:	8b 04 85 80 26 5c f0 	mov    -0xfa3d980(,%eax,4),%eax
f011277d:	66 8b 00             	mov    (%eax),%ax
f0112780:	98                   	cwtl   
f0112781:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0112784:	74 1d                	je     f01127a3 <test_realloc_block_FF+0x389>
			panic("test_realloc_block_FF #1.3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f0112786:	83 ec 0c             	sub    $0xc,%esp
f0112789:	ff 75 d4             	pushl  -0x2c(%ebp)
f011278c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011278f:	68 cc b1 12 f0       	push   $0xf012b1cc
f0112794:	68 22 05 00 00       	push   $0x522
f0112799:	68 28 a0 12 f0       	push   $0xf012a028
f011279e:	e8 77 db fe ff       	call   f010031a <_panic>
	*(midVAs[idx]) = idx ;
	*(endVAs[idx]) = idx ;

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f01127a3:	ff 45 d4             	incl   -0x2c(%ebp)
f01127a6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01127a9:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01127ac:	7c 9f                	jl     f011274d <test_realloc_block_FF+0x333>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
			panic("test_realloc_block_FF #1.3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	if (is_correct)
f01127ae:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01127b2:	74 04                	je     f01127b8 <test_realloc_block_FF+0x39e>
	{
		eval += 10;
f01127b4:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	//[2] Test krealloc by passing size = 0. It should call free
	//====================================================================//
	cprintf("2: Test calling realloc with SIZE = 0.[10%]\n\n") ;
f01127b8:	83 ec 0c             	sub    $0xc,%esp
f01127bb:	68 24 b2 12 f0       	push   $0xf012b224
f01127c0:	e8 a7 e7 fe ff       	call   f0100f6c <cprintf>
f01127c5:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01127c8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f01127cf:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f01127d6:	e9 f1 00 00 00       	jmp    f01128cc <test_realloc_block_FF+0x4b2>
	{
		va = realloc_block_FF(startVAs[i*allocCntPerSize], 0);
f01127db:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01127de:	89 d0                	mov    %edx,%eax
f01127e0:	c1 e0 02             	shl    $0x2,%eax
f01127e3:	01 d0                	add    %edx,%eax
f01127e5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01127ec:	01 d0                	add    %edx,%eax
f01127ee:	c1 e0 03             	shl    $0x3,%eax
f01127f1:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f01127f8:	83 ec 08             	sub    $0x8,%esp
f01127fb:	6a 00                	push   $0x0
f01127fd:	50                   	push   %eax
f01127fe:	e8 3c 13 01 00       	call   f0123b3f <realloc_block_FF>
f0112803:	83 c4 10             	add    $0x10,%esp
f0112806:	89 45 ac             	mov    %eax,-0x54(%ebp)

		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f0112809:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011280c:	89 d0                	mov    %edx,%eax
f011280e:	c1 e0 02             	shl    $0x2,%eax
f0112811:	01 d0                	add    %edx,%eax
f0112813:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011281a:	01 d0                	add    %edx,%eax
f011281c:	c1 e0 03             	shl    $0x3,%eax
f011281f:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0112826:	83 ec 0c             	sub    $0xc,%esp
f0112829:	50                   	push   %eax
f011282a:	e8 7a 07 01 00       	call   f0122fa9 <get_block_size>
f011282f:	83 c4 10             	add    $0x10,%esp
f0112832:	89 45 a0             	mov    %eax,-0x60(%ebp)
		expectedSize = allocSizes[i];
f0112835:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112838:	8b 04 85 b8 ed 17 f0 	mov    -0xfe81248(,%eax,4),%eax
f011283f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		expectedVA = va;
f0112842:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112845:	89 45 b0             	mov    %eax,-0x50(%ebp)
		if (check_block(startVAs[i*allocCntPerSize], startVAs[i*allocCntPerSize], expectedSize, 0) == 0)
f0112848:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011284b:	89 d0                	mov    %edx,%eax
f011284d:	c1 e0 02             	shl    $0x2,%eax
f0112850:	01 d0                	add    %edx,%eax
f0112852:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0112859:	01 d0                	add    %edx,%eax
f011285b:	c1 e0 03             	shl    $0x3,%eax
f011285e:	8b 14 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%edx
f0112865:	8b 4d d0             	mov    -0x30(%ebp),%ecx
f0112868:	89 c8                	mov    %ecx,%eax
f011286a:	c1 e0 02             	shl    $0x2,%eax
f011286d:	01 c8                	add    %ecx,%eax
f011286f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0112876:	01 c8                	add    %ecx,%eax
f0112878:	c1 e0 03             	shl    $0x3,%eax
f011287b:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0112882:	6a 00                	push   $0x0
f0112884:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112887:	52                   	push   %edx
f0112888:	50                   	push   %eax
f0112889:	e8 60 d2 ff ff       	call   f010faee <check_block>
f011288e:	83 c4 10             	add    $0x10,%esp
f0112891:	85 c0                	test   %eax,%eax
f0112893:	75 17                	jne    f01128ac <test_realloc_block_FF+0x492>
		{
			panic("test_realloc_block_FF #2.1.%d: Failed.", i);
f0112895:	ff 75 d0             	pushl  -0x30(%ebp)
f0112898:	68 54 b2 12 f0       	push   $0xf012b254
f011289d:	68 3a 05 00 00       	push   $0x53a
f01128a2:	68 28 a0 12 f0       	push   $0xf012a028
f01128a7:	e8 6e da fe ff       	call   f010031a <_panic>
		}
		if(va != NULL)
f01128ac:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
f01128b0:	74 17                	je     f01128c9 <test_realloc_block_FF+0x4af>
			panic("test_realloc_block_FF #2.2.%d: it should return NULL.", i);
f01128b2:	ff 75 d0             	pushl  -0x30(%ebp)
f01128b5:	68 7c b2 12 f0       	push   $0xf012b27c
f01128ba:	68 3d 05 00 00       	push   $0x53d
f01128bf:	68 28 a0 12 f0       	push   $0xf012a028
f01128c4:	e8 51 da fe ff       	call   f010031a <_panic>
	//====================================================================//
	cprintf("2: Test calling realloc with SIZE = 0.[10%]\n\n") ;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f01128c9:	ff 45 d0             	incl   -0x30(%ebp)
f01128cc:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f01128d0:	0f 8e 05 ff ff ff    	jle    f01127db <test_realloc_block_FF+0x3c1>
		if(va != NULL)
			panic("test_realloc_block_FF #2.2.%d: it should return NULL.", i);
	}

	//test calling it with NULL & ZERO
	va = realloc_block_FF(NULL, 0);
f01128d6:	83 ec 08             	sub    $0x8,%esp
f01128d9:	6a 00                	push   $0x0
f01128db:	6a 00                	push   $0x0
f01128dd:	e8 5d 12 01 00       	call   f0123b3f <realloc_block_FF>
f01128e2:	83 c4 10             	add    $0x10,%esp
f01128e5:	89 45 ac             	mov    %eax,-0x54(%ebp)
	if(va != NULL)
f01128e8:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
f01128ec:	74 17                	je     f0112905 <test_realloc_block_FF+0x4eb>
		panic("test_realloc_block_FF #2.3.0: it should return NULL.");
f01128ee:	83 ec 04             	sub    $0x4,%esp
f01128f1:	68 b4 b2 12 f0       	push   $0xf012b2b4
f01128f6:	68 43 05 00 00       	push   $0x543
f01128fb:	68 28 a0 12 f0       	push   $0xf012a028
f0112900:	e8 15 da fe ff       	call   f010031a <_panic>

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0112905:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f011290c:	eb 6b                	jmp    f0112979 <test_realloc_block_FF+0x55f>
	{
		if (i % allocCntPerSize == 0)
f011290e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0112911:	b9 c8 00 00 00       	mov    $0xc8,%ecx
f0112916:	99                   	cltd   
f0112917:	f7 f9                	idiv   %ecx
f0112919:	89 d0                	mov    %edx,%eax
f011291b:	85 c0                	test   %eax,%eax
f011291d:	74 56                	je     f0112975 <test_realloc_block_FF+0x55b>
			continue;
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f011291f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0112922:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0112929:	66 8b 00             	mov    (%eax),%ax
f011292c:	98                   	cwtl   
f011292d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112930:	75 26                	jne    f0112958 <test_realloc_block_FF+0x53e>
f0112932:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0112935:	8b 04 85 80 3c 5c f0 	mov    -0xfa3c380(,%eax,4),%eax
f011293c:	66 8b 00             	mov    (%eax),%ax
f011293f:	98                   	cwtl   
f0112940:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112943:	75 13                	jne    f0112958 <test_realloc_block_FF+0x53e>
f0112945:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0112948:	8b 04 85 80 26 5c f0 	mov    -0xfa3d980(,%eax,4),%eax
f011294f:	66 8b 00             	mov    (%eax),%ax
f0112952:	98                   	cwtl   
f0112953:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112956:	74 1e                	je     f0112976 <test_realloc_block_FF+0x55c>
			panic("test_realloc_block_FF #2.4.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f0112958:	83 ec 0c             	sub    $0xc,%esp
f011295b:	ff 75 cc             	pushl  -0x34(%ebp)
f011295e:	ff 75 cc             	pushl  -0x34(%ebp)
f0112961:	68 ec b2 12 f0       	push   $0xf012b2ec
f0112966:	68 4c 05 00 00       	push   $0x54c
f011296b:	68 28 a0 12 f0       	push   $0xf012a028
f0112970:	e8 a5 d9 fe ff       	call   f010031a <_panic>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
	{
		if (i % allocCntPerSize == 0)
			continue;
f0112975:	90                   	nop
	if(va != NULL)
		panic("test_realloc_block_FF #2.3.0: it should return NULL.");

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0112976:	ff 45 cc             	incl   -0x34(%ebp)
f0112979:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011297c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011297f:	7c 8d                	jl     f011290e <test_realloc_block_FF+0x4f4>
			continue;
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
			panic("test_realloc_block_FF #2.4.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	uint32 expectedNumOfFreeBlks = numOfAllocs;
f0112981:	c7 45 9c 07 00 00 00 	movl   $0x7,-0x64(%ebp)
	if (check_list_size(expectedNumOfFreeBlks) == 0)
f0112988:	83 ec 0c             	sub    $0xc,%esp
f011298b:	ff 75 9c             	pushl  -0x64(%ebp)
f011298e:	e8 e3 d1 ff ff       	call   f010fb76 <check_list_size>
f0112993:	83 c4 10             	add    $0x10,%esp
f0112996:	85 c0                	test   %eax,%eax
f0112998:	75 17                	jne    f01129b1 <test_realloc_block_FF+0x597>
	{
		panic("2.5 Failed");
f011299a:	83 ec 04             	sub    $0x4,%esp
f011299d:	68 43 b3 12 f0       	push   $0xf012b343
f01129a2:	68 52 05 00 00       	push   $0x552
f01129a7:	68 28 a0 12 f0       	push   $0xf012a028
f01129ac:	e8 69 d9 fe ff       	call   f010031a <_panic>
	}

	if (is_correct)
f01129b1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01129b5:	74 04                	je     f01129bb <test_realloc_block_FF+0x5a1>
	{
		eval += 10;
f01129b7:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	//[3] Test realloc with increased sizes
	//====================================================================//
	cprintf("3: Test calling realloc with increased sizes [50%].\n\n") ;
f01129bb:	83 ec 0c             	sub    $0xc,%esp
f01129be:	68 50 b3 12 f0       	push   $0xf012b350
f01129c3:	e8 a4 e5 fe ff       	call   f0100f6c <cprintf>
f01129c8:	83 c4 10             	add    $0x10,%esp
	int blockIndex, block_size, block_status, old_size, new_size, newBlockIndex;
	//[3.1] reallocate in same place (NO relocate - split)
	cprintf("	3.1: reallocate in same place (NO relocate - split)\n\n") ;
f01129cb:	83 ec 0c             	sub    $0xc,%esp
f01129ce:	68 88 b3 12 f0       	push   $0xf012b388
f01129d3:	e8 94 e5 fe ff       	call   f0100f6c <cprintf>
f01129d8:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01129db:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 4*allocCntPerSize - 1 ;
f01129e2:	c7 45 98 1f 03 00 00 	movl   $0x31f,-0x68(%ebp)
		new_size = allocSizes[3] /*12+16 B*/ + allocSizes[4]/2 /*2KB/2*/ - sizeOfMetaData;
f01129e9:	a1 c4 ed 17 f0       	mov    0xf017edc4,%eax
f01129ee:	8b 15 c8 ed 17 f0    	mov    0xf017edc8,%edx
f01129f4:	d1 ea                	shr    %edx
f01129f6:	01 d0                	add    %edx,%eax
f01129f8:	83 e8 08             	sub    $0x8,%eax
f01129fb:	89 45 94             	mov    %eax,-0x6c(%ebp)
		expectedSize = ROUNDUP(new_size + sizeOfMetaData, 2);
f01129fe:	c7 45 90 02 00 00 00 	movl   $0x2,-0x70(%ebp)
f0112a05:	8b 55 94             	mov    -0x6c(%ebp),%edx
f0112a08:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112a0b:	01 d0                	add    %edx,%eax
f0112a0d:	83 c0 07             	add    $0x7,%eax
f0112a10:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0112a13:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112a16:	ba 00 00 00 00       	mov    $0x0,%edx
f0112a1b:	f7 75 90             	divl   -0x70(%ebp)
f0112a1e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112a21:	29 d0                	sub    %edx,%eax
f0112a23:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		expectedVA = startVAs[blockIndex];
f0112a26:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112a29:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0112a30:	89 45 b0             	mov    %eax,-0x50(%ebp)

		va = realloc_block_FF(startVAs[blockIndex], new_size);
f0112a33:	8b 55 94             	mov    -0x6c(%ebp),%edx
f0112a36:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112a39:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0112a40:	83 ec 08             	sub    $0x8,%esp
f0112a43:	52                   	push   %edx
f0112a44:	50                   	push   %eax
f0112a45:	e8 f5 10 01 00       	call   f0123b3f <realloc_block_FF>
f0112a4a:	83 c4 10             	add    $0x10,%esp
f0112a4d:	89 45 ac             	mov    %eax,-0x54(%ebp)

		//check return address
		if (check_block(va, expectedVA, expectedSize, 1) == 0)
f0112a50:	6a 01                	push   $0x1
f0112a52:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112a55:	ff 75 b0             	pushl  -0x50(%ebp)
f0112a58:	ff 75 ac             	pushl  -0x54(%ebp)
f0112a5b:	e8 8e d0 ff ff       	call   f010faee <check_block>
f0112a60:	83 c4 10             	add    $0x10,%esp
f0112a63:	85 c0                	test   %eax,%eax
f0112a65:	75 17                	jne    f0112a7e <test_realloc_block_FF+0x664>
		{
			is_correct = 0;
f0112a67:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #3.1.1: Failed\n");
f0112a6e:	83 ec 0c             	sub    $0xc,%esp
f0112a71:	68 c0 b3 12 f0       	push   $0xf012b3c0
f0112a76:	e8 f1 e4 fe ff       	call   f0100f6c <cprintf>
f0112a7b:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex ||	*(endVAs[blockIndex]) != blockIndex)
f0112a7e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112a81:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0112a88:	66 8b 00             	mov    (%eax),%ax
f0112a8b:	98                   	cwtl   
f0112a8c:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112a8f:	75 26                	jne    f0112ab7 <test_realloc_block_FF+0x69d>
f0112a91:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112a94:	8b 04 85 80 3c 5c f0 	mov    -0xfa3c380(,%eax,4),%eax
f0112a9b:	66 8b 00             	mov    (%eax),%ax
f0112a9e:	98                   	cwtl   
f0112a9f:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112aa2:	75 13                	jne    f0112ab7 <test_realloc_block_FF+0x69d>
f0112aa4:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112aa7:	8b 04 85 80 26 5c f0 	mov    -0xfa3d980(,%eax,4),%eax
f0112aae:	66 8b 00             	mov    (%eax),%ax
f0112ab1:	98                   	cwtl   
f0112ab2:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112ab5:	74 1a                	je     f0112ad1 <test_realloc_block_FF+0x6b7>
		{
			is_correct = 0;
f0112ab7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #3.1.2: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0112abe:	83 ec 08             	sub    $0x8,%esp
f0112ac1:	ff 75 98             	pushl  -0x68(%ebp)
f0112ac4:	68 e8 b3 12 f0       	push   $0xf012b3e8
f0112ac9:	e8 9e e4 fe ff       	call   f0100f6c <cprintf>
f0112ace:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f0112ad1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112ad5:	74 04                	je     f0112adb <test_realloc_block_FF+0x6c1>
	{
		eval += 25;
f0112ad7:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
	}

	//[3.2] reallocate in same place (NO relocate - NO split)
	cprintf("	3.2: reallocate in same place (NO relocate - NO split)\n\n") ;
f0112adb:	83 ec 0c             	sub    $0xc,%esp
f0112ade:	68 48 b4 12 f0       	push   $0xf012b448
f0112ae3:	e8 84 e4 fe ff       	call   f0100f6c <cprintf>
f0112ae8:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0112aeb:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 4*allocCntPerSize - 1 ;
f0112af2:	c7 45 98 1f 03 00 00 	movl   $0x31f,-0x68(%ebp)
		//new_size = allocSizes[3] /*12+16B + 2KB/2*/ + allocSizes[4]/2 /*2KB/2*/ - sizeOfMetaData;
		new_size = allocSizes[3] + allocSizes[4] - sizeOfMetaData;
f0112af9:	8b 15 c4 ed 17 f0    	mov    0xf017edc4,%edx
f0112aff:	a1 c8 ed 17 f0       	mov    0xf017edc8,%eax
f0112b04:	01 d0                	add    %edx,%eax
f0112b06:	83 e8 08             	sub    $0x8,%eax
f0112b09:	89 45 94             	mov    %eax,-0x6c(%ebp)
		expectedSize = ROUNDUP(new_size + sizeOfMetaData, 2);
f0112b0c:	c7 45 88 02 00 00 00 	movl   $0x2,-0x78(%ebp)
f0112b13:	8b 55 94             	mov    -0x6c(%ebp),%edx
f0112b16:	8b 45 88             	mov    -0x78(%ebp),%eax
f0112b19:	01 d0                	add    %edx,%eax
f0112b1b:	83 c0 07             	add    $0x7,%eax
f0112b1e:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0112b21:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0112b24:	ba 00 00 00 00       	mov    $0x0,%edx
f0112b29:	f7 75 88             	divl   -0x78(%ebp)
f0112b2c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0112b2f:	29 d0                	sub    %edx,%eax
f0112b31:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		expectedVA = startVAs[blockIndex];
f0112b34:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112b37:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0112b3e:	89 45 b0             	mov    %eax,-0x50(%ebp)

		va = realloc_block_FF(startVAs[blockIndex], new_size);
f0112b41:	8b 55 94             	mov    -0x6c(%ebp),%edx
f0112b44:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112b47:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0112b4e:	83 ec 08             	sub    $0x8,%esp
f0112b51:	52                   	push   %edx
f0112b52:	50                   	push   %eax
f0112b53:	e8 e7 0f 01 00       	call   f0123b3f <realloc_block_FF>
f0112b58:	83 c4 10             	add    $0x10,%esp
f0112b5b:	89 45 ac             	mov    %eax,-0x54(%ebp)

		expectedNumOfFreeBlks--;
f0112b5e:	ff 4d 9c             	decl   -0x64(%ebp)

		if (check_block(va, expectedVA, expectedSize, 1) == 0)
f0112b61:	6a 01                	push   $0x1
f0112b63:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112b66:	ff 75 b0             	pushl  -0x50(%ebp)
f0112b69:	ff 75 ac             	pushl  -0x54(%ebp)
f0112b6c:	e8 7d cf ff ff       	call   f010faee <check_block>
f0112b71:	83 c4 10             	add    $0x10,%esp
f0112b74:	85 c0                	test   %eax,%eax
f0112b76:	75 17                	jne    f0112b8f <test_realloc_block_FF+0x775>
		{
			is_correct = 0;
f0112b78:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #3.2.1: Failed\n");
f0112b7f:	83 ec 0c             	sub    $0xc,%esp
f0112b82:	68 84 b4 12 f0       	push   $0xf012b484
f0112b87:	e8 e0 e3 fe ff       	call   f0100f6c <cprintf>
f0112b8c:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex ||	*(endVAs[blockIndex]) != blockIndex)
f0112b8f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112b92:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0112b99:	66 8b 00             	mov    (%eax),%ax
f0112b9c:	98                   	cwtl   
f0112b9d:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112ba0:	75 26                	jne    f0112bc8 <test_realloc_block_FF+0x7ae>
f0112ba2:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112ba5:	8b 04 85 80 3c 5c f0 	mov    -0xfa3c380(,%eax,4),%eax
f0112bac:	66 8b 00             	mov    (%eax),%ax
f0112baf:	98                   	cwtl   
f0112bb0:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112bb3:	75 13                	jne    f0112bc8 <test_realloc_block_FF+0x7ae>
f0112bb5:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112bb8:	8b 04 85 80 26 5c f0 	mov    -0xfa3d980(,%eax,4),%eax
f0112bbf:	66 8b 00             	mov    (%eax),%ax
f0112bc2:	98                   	cwtl   
f0112bc3:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112bc6:	74 1a                	je     f0112be2 <test_realloc_block_FF+0x7c8>
		{
			is_correct = 0;
f0112bc8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #3.2.2: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0112bcf:	83 ec 08             	sub    $0x8,%esp
f0112bd2:	ff 75 98             	pushl  -0x68(%ebp)
f0112bd5:	68 ac b4 12 f0       	push   $0xf012b4ac
f0112bda:	e8 8d e3 fe ff       	call   f0100f6c <cprintf>
f0112bdf:	83 c4 10             	add    $0x10,%esp
		}

		if (is_correct) is_correct = check_list_size(expectedNumOfFreeBlks);
f0112be2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112be6:	74 11                	je     f0112bf9 <test_realloc_block_FF+0x7df>
f0112be8:	83 ec 0c             	sub    $0xc,%esp
f0112beb:	ff 75 9c             	pushl  -0x64(%ebp)
f0112bee:	e8 83 cf ff ff       	call   f010fb76 <check_list_size>
f0112bf3:	83 c4 10             	add    $0x10,%esp
f0112bf6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	}
	if (is_correct)
f0112bf9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112bfd:	74 04                	je     f0112c03 <test_realloc_block_FF+0x7e9>
	{
		eval += 25;
f0112bff:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
	}

	//====================================================================//
	//[4] Test realloc with decreased sizes
	//====================================================================//
	cprintf("4: Test calling realloc with decreased sizes.[30%]\n\n") ;
f0112c03:	83 ec 0c             	sub    $0xc,%esp
f0112c06:	68 0c b5 12 f0       	push   $0xf012b50c
f0112c0b:	e8 5c e3 fe ff       	call   f0100f6c <cprintf>
f0112c10:	83 c4 10             	add    $0x10,%esp
	//[4.1] next block is full (NO coalesce)
	cprintf("	4.1: next block is full (NO coalesce)\n\n") ;
f0112c13:	83 ec 0c             	sub    $0xc,%esp
f0112c16:	68 44 b5 12 f0       	push   $0xf012b544
f0112c1b:	e8 4c e3 fe ff       	call   f0100f6c <cprintf>
f0112c20:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0112c23:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 0*allocCntPerSize + 1; /*4KB*/
f0112c2a:	c7 45 98 01 00 00 00 	movl   $0x1,-0x68(%ebp)
		old_size = allocSizes[0] - sizeOfMetaData; /*4KB - sizeOfMetaData*/;
f0112c31:	a1 b8 ed 17 f0       	mov    0xf017edb8,%eax
f0112c36:	83 e8 08             	sub    $0x8,%eax
f0112c39:	89 45 80             	mov    %eax,-0x80(%ebp)
		new_size = old_size - 1*kilo ;
f0112c3c:	8b 45 80             	mov    -0x80(%ebp),%eax
f0112c3f:	2d 00 04 00 00       	sub    $0x400,%eax
f0112c44:	89 45 94             	mov    %eax,-0x6c(%ebp)
		expectedSize = ROUNDUP(new_size + sizeOfMetaData, 2);
f0112c47:	c7 85 7c ff ff ff 02 	movl   $0x2,-0x84(%ebp)
f0112c4e:	00 00 00 
f0112c51:	8b 55 94             	mov    -0x6c(%ebp),%edx
f0112c54:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0112c5a:	01 d0                	add    %edx,%eax
f0112c5c:	83 c0 07             	add    $0x7,%eax
f0112c5f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0112c65:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0112c6b:	ba 00 00 00 00       	mov    $0x0,%edx
f0112c70:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0112c76:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0112c7c:	29 d0                	sub    %edx,%eax
f0112c7e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		expectedVA = startVAs[blockIndex];
f0112c81:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112c84:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0112c8b:	89 45 b0             	mov    %eax,-0x50(%ebp)

		va = realloc_block_FF(startVAs[blockIndex], new_size);
f0112c8e:	8b 55 94             	mov    -0x6c(%ebp),%edx
f0112c91:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112c94:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0112c9b:	83 ec 08             	sub    $0x8,%esp
f0112c9e:	52                   	push   %edx
f0112c9f:	50                   	push   %eax
f0112ca0:	e8 9a 0e 01 00       	call   f0123b3f <realloc_block_FF>
f0112ca5:	83 c4 10             	add    $0x10,%esp
f0112ca8:	89 45 ac             	mov    %eax,-0x54(%ebp)

		expectedNumOfFreeBlks++;
f0112cab:	ff 45 9c             	incl   -0x64(%ebp)

		if (check_block(va, expectedVA, expectedSize, 1) == 0)
f0112cae:	6a 01                	push   $0x1
f0112cb0:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112cb3:	ff 75 b0             	pushl  -0x50(%ebp)
f0112cb6:	ff 75 ac             	pushl  -0x54(%ebp)
f0112cb9:	e8 30 ce ff ff       	call   f010faee <check_block>
f0112cbe:	83 c4 10             	add    $0x10,%esp
f0112cc1:	85 c0                	test   %eax,%eax
f0112cc3:	75 17                	jne    f0112cdc <test_realloc_block_FF+0x8c2>
		{
			is_correct = 0;
f0112cc5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #4.1.1: Failed\n");
f0112ccc:	83 ec 0c             	sub    $0xc,%esp
f0112ccf:	68 70 b5 12 f0       	push   $0xf012b570
f0112cd4:	e8 93 e2 fe ff       	call   f0100f6c <cprintf>
f0112cd9:	83 c4 10             	add    $0x10,%esp
		}
		//check new free block
		struct BlockElement *newBlkAddr = (struct BlockElement *)(va + new_size + 2*sizeof(int));
f0112cdc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112cdf:	8d 50 08             	lea    0x8(%eax),%edx
f0112ce2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112ce5:	01 d0                	add    %edx,%eax
f0112ce7:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
		cprintf("\nrealloc Test: newBlkAddr @va %x\n", newBlkAddr);
f0112ced:	83 ec 08             	sub    $0x8,%esp
f0112cf0:	ff b5 74 ff ff ff    	pushl  -0x8c(%ebp)
f0112cf6:	68 98 b5 12 f0       	push   $0xf012b598
f0112cfb:	e8 6c e2 fe ff       	call   f0100f6c <cprintf>
f0112d00:	83 c4 10             	add    $0x10,%esp
		expectedSize = 1*kilo ;
f0112d03:	c7 45 b4 00 04 00 00 	movl   $0x400,-0x4c(%ebp)
		if (check_block(newBlkAddr, newBlkAddr, expectedSize, 0) == 0)
f0112d0a:	6a 00                	push   $0x0
f0112d0c:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112d0f:	ff b5 74 ff ff ff    	pushl  -0x8c(%ebp)
f0112d15:	ff b5 74 ff ff ff    	pushl  -0x8c(%ebp)
f0112d1b:	e8 ce cd ff ff       	call   f010faee <check_block>
f0112d20:	83 c4 10             	add    $0x10,%esp
f0112d23:	85 c0                	test   %eax,%eax
f0112d25:	75 17                	jne    f0112d3e <test_realloc_block_FF+0x924>
		{
			is_correct = 0;
f0112d27:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #4.1.2: Failed\n");
f0112d2e:	83 ec 0c             	sub    $0xc,%esp
f0112d31:	68 bc b5 12 f0       	push   $0xf012b5bc
f0112d36:	e8 31 e2 fe ff       	call   f0100f6c <cprintf>
f0112d3b:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex)
f0112d3e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112d41:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0112d48:	66 8b 00             	mov    (%eax),%ax
f0112d4b:	98                   	cwtl   
f0112d4c:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112d4f:	75 13                	jne    f0112d64 <test_realloc_block_FF+0x94a>
f0112d51:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112d54:	8b 04 85 80 3c 5c f0 	mov    -0xfa3c380(,%eax,4),%eax
f0112d5b:	66 8b 00             	mov    (%eax),%ax
f0112d5e:	98                   	cwtl   
f0112d5f:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112d62:	74 1a                	je     f0112d7e <test_realloc_block_FF+0x964>
		{
			is_correct = 0;
f0112d64:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #4.1.3: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0112d6b:	83 ec 08             	sub    $0x8,%esp
f0112d6e:	ff 75 98             	pushl  -0x68(%ebp)
f0112d71:	68 e4 b5 12 f0       	push   $0xf012b5e4
f0112d76:	e8 f1 e1 fe ff       	call   f0100f6c <cprintf>
f0112d7b:	83 c4 10             	add    $0x10,%esp
		}

		//Check # free blocks
		if (is_correct) is_correct = check_list_size(expectedNumOfFreeBlks);
f0112d7e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112d82:	74 11                	je     f0112d95 <test_realloc_block_FF+0x97b>
f0112d84:	83 ec 0c             	sub    $0xc,%esp
f0112d87:	ff 75 9c             	pushl  -0x64(%ebp)
f0112d8a:	e8 e7 cd ff ff       	call   f010fb76 <check_list_size>
f0112d8f:	83 c4 10             	add    $0x10,%esp
f0112d92:	89 45 f0             	mov    %eax,-0x10(%ebp)

	}
	if (is_correct)
f0112d95:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112d99:	74 04                	je     f0112d9f <test_realloc_block_FF+0x985>
	{
		eval += 15;
f0112d9b:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}
	cprintf("	4.2: next block is full (NO coalesce) [Internal Fragmentation]\n\n") ;
f0112d9f:	83 ec 0c             	sub    $0xc,%esp
f0112da2:	68 44 b6 12 f0       	push   $0xf012b644
f0112da7:	e8 c0 e1 fe ff       	call   f0100f6c <cprintf>
f0112dac:	83 c4 10             	add    $0x10,%esp

	is_correct = 1;
f0112daf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 1*allocCntPerSize + 1;
f0112db6:	c7 45 98 c9 00 00 00 	movl   $0xc9,-0x68(%ebp)
		old_size = allocSizes[1] - sizeOfMetaData;/*20 B*/
f0112dbd:	a1 bc ed 17 f0       	mov    0xf017edbc,%eax
f0112dc2:	83 e8 08             	sub    $0x8,%eax
f0112dc5:	89 45 80             	mov    %eax,-0x80(%ebp)
		new_size = old_size - 6;
f0112dc8:	8b 45 80             	mov    -0x80(%ebp),%eax
f0112dcb:	83 e8 06             	sub    $0x6,%eax
f0112dce:	89 45 94             	mov    %eax,-0x6c(%ebp)
		expectedSize = allocSizes[1]; /*Same block size [Internal Framgmentation]*/
f0112dd1:	a1 bc ed 17 f0       	mov    0xf017edbc,%eax
f0112dd6:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		expectedVA = startVAs[blockIndex];
f0112dd9:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112ddc:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0112de3:	89 45 b0             	mov    %eax,-0x50(%ebp)

		va = realloc_block_FF(startVAs[blockIndex], new_size);
f0112de6:	8b 55 94             	mov    -0x6c(%ebp),%edx
f0112de9:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112dec:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0112df3:	83 ec 08             	sub    $0x8,%esp
f0112df6:	52                   	push   %edx
f0112df7:	50                   	push   %eax
f0112df8:	e8 42 0d 01 00       	call   f0123b3f <realloc_block_FF>
f0112dfd:	83 c4 10             	add    $0x10,%esp
f0112e00:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (check_block(va, expectedVA, expectedSize, 1) == 0)
f0112e03:	6a 01                	push   $0x1
f0112e05:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112e08:	ff 75 b0             	pushl  -0x50(%ebp)
f0112e0b:	ff 75 ac             	pushl  -0x54(%ebp)
f0112e0e:	e8 db cc ff ff       	call   f010faee <check_block>
f0112e13:	83 c4 10             	add    $0x10,%esp
f0112e16:	85 c0                	test   %eax,%eax
f0112e18:	75 17                	jne    f0112e31 <test_realloc_block_FF+0xa17>
		{
			is_correct = 0;
f0112e1a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #4.2.1: Failed\n");
f0112e21:	83 ec 0c             	sub    $0xc,%esp
f0112e24:	68 88 b6 12 f0       	push   $0xf012b688
f0112e29:	e8 3e e1 fe ff       	call   f0100f6c <cprintf>
f0112e2e:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex)
f0112e31:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112e34:	8b 04 85 80 10 5c f0 	mov    -0xfa3ef80(,%eax,4),%eax
f0112e3b:	66 8b 00             	mov    (%eax),%ax
f0112e3e:	98                   	cwtl   
f0112e3f:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112e42:	75 13                	jne    f0112e57 <test_realloc_block_FF+0xa3d>
f0112e44:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112e47:	8b 04 85 80 3c 5c f0 	mov    -0xfa3c380(,%eax,4),%eax
f0112e4e:	66 8b 00             	mov    (%eax),%ax
f0112e51:	98                   	cwtl   
f0112e52:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112e55:	74 1a                	je     f0112e71 <test_realloc_block_FF+0xa57>
		{
			is_correct = 0;
f0112e57:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #4.2.2: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0112e5e:	83 ec 08             	sub    $0x8,%esp
f0112e61:	ff 75 98             	pushl  -0x68(%ebp)
f0112e64:	68 b0 b6 12 f0       	push   $0xf012b6b0
f0112e69:	e8 fe e0 fe ff       	call   f0100f6c <cprintf>
f0112e6e:	83 c4 10             	add    $0x10,%esp
		}

		//Check # free blocks
		if (is_correct) is_correct = check_list_size(expectedNumOfFreeBlks);
f0112e71:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112e75:	74 11                	je     f0112e88 <test_realloc_block_FF+0xa6e>
f0112e77:	83 ec 0c             	sub    $0xc,%esp
f0112e7a:	ff 75 9c             	pushl  -0x64(%ebp)
f0112e7d:	e8 f4 cc ff ff       	call   f010fb76 <check_list_size>
f0112e82:	83 c4 10             	add    $0x10,%esp
f0112e85:	89 45 f0             	mov    %eax,-0x10(%ebp)

	}
	if (is_correct)
f0112e88:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112e8c:	74 04                	je     f0112e92 <test_realloc_block_FF+0xa78>
	{
		eval += 15;
f0112e8e:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	cprintf("[PARTIAL] test realloc_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f0112e92:	83 ec 08             	sub    $0x8,%esp
f0112e95:	ff 75 f4             	pushl  -0xc(%ebp)
f0112e98:	68 10 b7 12 f0       	push   $0xf012b710
f0112e9d:	e8 ca e0 fe ff       	call   f0100f6c <cprintf>
f0112ea2:	83 c4 10             	add    $0x10,%esp

}
f0112ea5:	90                   	nop
f0112ea6:	c9                   	leave  
f0112ea7:	c3                   	ret    

f0112ea8 <test_realloc_block_FF_COMPLETE>:


void test_realloc_block_FF_COMPLETE()
{
f0112ea8:	55                   	push   %ebp
f0112ea9:	89 e5                	mov    %esp,%ebp
f0112eab:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	panic("this is UNSEEN test");
f0112eae:	83 ec 04             	sub    $0x4,%esp
f0112eb1:	68 59 b7 12 f0       	push   $0xf012b759
f0112eb6:	68 f9 05 00 00       	push   $0x5f9
f0112ebb:	68 28 a0 12 f0       	push   $0xf012a028
f0112ec0:	e8 55 d4 fe ff       	call   f010031a <_panic>

f0112ec5 <sys_check_LRU_lists>:
#include <kern/proc/user_environment.h>
#include <kern/mem/working_set_manager.h>

//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f0112ec5:	55                   	push   %ebp
f0112ec6:	89 e5                	mov    %esp,%ebp
f0112ec8:	83 ec 38             	sub    $0x38,%esp
	struct Env* cur_env = get_cpu_proc();
f0112ecb:	e8 a0 78 ff ff       	call   f010a770 <get_cpu_proc>
f0112ed0:	89 45 e0             	mov    %eax,-0x20(%ebp)
	assert(cur_env != NULL);
f0112ed3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112ed7:	75 16                	jne    f0112eef <sys_check_LRU_lists+0x2a>
f0112ed9:	68 70 b7 12 f0       	push   $0xf012b770
f0112ede:	68 80 b7 12 f0       	push   $0xf012b780
f0112ee3:	6a 10                	push   $0x10
f0112ee5:	68 95 b7 12 f0       	push   $0xf012b795
f0112eea:	e8 2b d4 fe ff       	call   f010031a <_panic>
	cprintf("CURRENT WS CONTENT BEFORE CHECKING:\n");
f0112eef:	83 ec 0c             	sub    $0xc,%esp
f0112ef2:	68 b4 b7 12 f0       	push   $0xf012b7b4
f0112ef7:	e8 70 e0 fe ff       	call   f0100f6c <cprintf>
f0112efc:	83 c4 10             	add    $0x10,%esp
	env_page_ws_print(cur_env);
f0112eff:	83 ec 0c             	sub    $0xc,%esp
f0112f02:	ff 75 e0             	pushl  -0x20(%ebp)
f0112f05:	e8 fe 60 ff ff       	call   f0109008 <env_page_ws_print>
f0112f0a:	83 c4 10             	add    $0x10,%esp

	struct Env* env = cur_env;
f0112f0d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0112f10:	89 45 dc             	mov    %eax,-0x24(%ebp)
	int active_list_validation = 1;
f0112f13:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	int second_list_validation = 1;
f0112f1a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f0112f21:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0112f25:	0f 84 a5 00 00 00    	je     f0112fd0 <sys_check_LRU_lists+0x10b>
	{
		int idx_active_list = 0;
f0112f2b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0112f32:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112f35:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f0112f3b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0112f3e:	eb 4a                	jmp    f0112f8a <sys_check_LRU_lists+0xc5>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f0112f40:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0112f43:	8b 00                	mov    (%eax),%eax
f0112f45:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0112f48:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112f4b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0112f50:	89 c2                	mov    %eax,%edx
f0112f52:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0112f55:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0112f5c:	8b 45 08             	mov    0x8(%ebp),%eax
f0112f5f:	01 c8                	add    %ecx,%eax
f0112f61:	8b 00                	mov    (%eax),%eax
f0112f63:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0112f66:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0112f69:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0112f6e:	39 c2                	cmp    %eax,%edx
f0112f70:	74 09                	je     f0112f7b <sys_check_LRU_lists+0xb6>
			{
				active_list_validation = 0;
f0112f72:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				break;
f0112f79:	eb 3e                	jmp    f0112fb9 <sys_check_LRU_lists+0xf4>
			}
			idx_active_list++;
f0112f7b:	ff 45 e8             	incl   -0x18(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0112f7e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112f81:	8b 80 18 da 01 00    	mov    0x1da18(%eax),%eax
f0112f87:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0112f8a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0112f8e:	74 08                	je     f0112f98 <sys_check_LRU_lists+0xd3>
f0112f90:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0112f93:	8b 40 10             	mov    0x10(%eax),%eax
f0112f96:	eb 05                	jmp    f0112f9d <sys_check_LRU_lists+0xd8>
f0112f98:	b8 00 00 00 00       	mov    $0x0,%eax
f0112f9d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0112fa0:	89 82 18 da 01 00    	mov    %eax,0x1da18(%edx)
f0112fa6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112fa9:	8b 80 18 da 01 00    	mov    0x1da18(%eax),%eax
f0112faf:	85 c0                	test   %eax,%eax
f0112fb1:	75 8d                	jne    f0112f40 <sys_check_LRU_lists+0x7b>
f0112fb3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0112fb7:	75 87                	jne    f0112f40 <sys_check_LRU_lists+0x7b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f0112fb9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112fbc:	8b 90 1c da 01 00    	mov    0x1da1c(%eax),%edx
f0112fc2:	8b 45 10             	mov    0x10(%ebp),%eax
f0112fc5:	39 c2                	cmp    %eax,%edx
f0112fc7:	74 07                	je     f0112fd0 <sys_check_LRU_lists+0x10b>
		{
			active_list_validation = 0;
f0112fc9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f0112fd0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0112fd4:	0f 84 a5 00 00 00    	je     f011307f <sys_check_LRU_lists+0x1ba>
	{
		int idx_second_list = 0;
f0112fda:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0112fe1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112fe4:	8b 80 20 da 01 00    	mov    0x1da20(%eax),%eax
f0112fea:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0112fed:	eb 4a                	jmp    f0113039 <sys_check_LRU_lists+0x174>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f0112fef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0112ff2:	8b 00                	mov    (%eax),%eax
f0112ff4:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112ff7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112ffa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0112fff:	89 c2                	mov    %eax,%edx
f0113001:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0113004:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011300b:	8b 45 0c             	mov    0xc(%ebp),%eax
f011300e:	01 c8                	add    %ecx,%eax
f0113010:	8b 00                	mov    (%eax),%eax
f0113012:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0113015:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113018:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011301d:	39 c2                	cmp    %eax,%edx
f011301f:	74 09                	je     f011302a <sys_check_LRU_lists+0x165>
			{
				second_list_validation = 0;
f0113021:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				break;
f0113028:	eb 3e                	jmp    f0113068 <sys_check_LRU_lists+0x1a3>
			}
			idx_second_list++;
f011302a:	ff 45 e4             	incl   -0x1c(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f011302d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113030:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f0113036:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0113039:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011303d:	74 08                	je     f0113047 <sys_check_LRU_lists+0x182>
f011303f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0113042:	8b 40 10             	mov    0x10(%eax),%eax
f0113045:	eb 05                	jmp    f011304c <sys_check_LRU_lists+0x187>
f0113047:	b8 00 00 00 00       	mov    $0x0,%eax
f011304c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011304f:	89 82 28 da 01 00    	mov    %eax,0x1da28(%edx)
f0113055:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113058:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f011305e:	85 c0                	test   %eax,%eax
f0113060:	75 8d                	jne    f0112fef <sys_check_LRU_lists+0x12a>
f0113062:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0113066:	75 87                	jne    f0112fef <sys_check_LRU_lists+0x12a>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f0113068:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011306b:	8b 90 2c da 01 00    	mov    0x1da2c(%eax),%edx
f0113071:	8b 45 14             	mov    0x14(%ebp),%eax
f0113074:	39 c2                	cmp    %eax,%edx
f0113076:	74 07                	je     f011307f <sys_check_LRU_lists+0x1ba>
			second_list_validation = 0;
f0113078:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	}
	return active_list_validation&second_list_validation;
f011307f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0113082:	23 45 f0             	and    -0x10(%ebp),%eax
}
f0113085:	c9                   	leave  
f0113086:	c3                   	ret    

f0113087 <sys_check_LRU_lists_free>:


//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f0113087:	55                   	push   %ebp
f0113088:	89 e5                	mov    %esp,%ebp
f011308a:	83 ec 38             	sub    $0x38,%esp
	struct Env* cur_env = get_cpu_proc();
f011308d:	e8 de 76 ff ff       	call   f010a770 <get_cpu_proc>
f0113092:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	assert(cur_env != NULL);
f0113095:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0113099:	75 16                	jne    f01130b1 <sys_check_LRU_lists_free+0x2a>
f011309b:	68 70 b7 12 f0       	push   $0xf012b770
f01130a0:	68 80 b7 12 f0       	push   $0xf012b780
f01130a5:	6a 45                	push   $0x45
f01130a7:	68 95 b7 12 f0       	push   $0xf012b795
f01130ac:	e8 69 d2 fe ff       	call   f010031a <_panic>
	struct Env* env = cur_env;
f01130b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01130b4:	89 45 e0             	mov    %eax,-0x20(%ebp)
	int list_validation_count = 0;
f01130b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f01130be:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01130c1:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f01130c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01130ca:	eb 65                	jmp    f0113131 <sys_check_LRU_lists_free+0xaa>
	{
		for(int var = 0; var < list_size; var++)
f01130cc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01130d3:	eb 3a                	jmp    f011310f <sys_check_LRU_lists_free+0x88>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f01130d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01130d8:	8b 00                	mov    (%eax),%eax
f01130da:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01130dd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01130e0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01130e5:	89 c2                	mov    %eax,%edx
f01130e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01130ea:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01130f1:	8b 45 08             	mov    0x8(%ebp),%eax
f01130f4:	01 c8                	add    %ecx,%eax
f01130f6:	8b 00                	mov    (%eax),%eax
f01130f8:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01130fb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01130fe:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0113103:	39 c2                	cmp    %eax,%edx
f0113105:	75 05                	jne    f011310c <sys_check_LRU_lists_free+0x85>
			{
				list_validation_count++;
f0113107:	ff 45 f4             	incl   -0xc(%ebp)
				break;
f011310a:	eb 0b                	jmp    f0113117 <sys_check_LRU_lists_free+0x90>
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f011310c:	ff 45 ec             	incl   -0x14(%ebp)
f011310f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0113112:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0113115:	7c be                	jl     f01130d5 <sys_check_LRU_lists_free+0x4e>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f0113117:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f011311b:	7e 08                	jle    f0113125 <sys_check_LRU_lists_free+0x9e>
			return list_validation_count;
f011311d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0113120:	e9 ed 00 00 00       	jmp    f0113212 <sys_check_LRU_lists_free+0x18b>
	assert(cur_env != NULL);
	struct Env* env = cur_env;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0113125:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0113128:	8b 80 18 da 01 00    	mov    0x1da18(%eax),%eax
f011312e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0113131:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0113135:	74 08                	je     f011313f <sys_check_LRU_lists_free+0xb8>
f0113137:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011313a:	8b 40 10             	mov    0x10(%eax),%eax
f011313d:	eb 05                	jmp    f0113144 <sys_check_LRU_lists_free+0xbd>
f011313f:	b8 00 00 00 00       	mov    $0x0,%eax
f0113144:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0113147:	89 82 18 da 01 00    	mov    %eax,0x1da18(%edx)
f011314d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0113150:	8b 80 18 da 01 00    	mov    0x1da18(%eax),%eax
f0113156:	85 c0                	test   %eax,%eax
f0113158:	0f 85 6e ff ff ff    	jne    f01130cc <sys_check_LRU_lists_free+0x45>
f011315e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0113162:	0f 85 64 ff ff ff    	jne    f01130cc <sys_check_LRU_lists_free+0x45>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0113168:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011316b:	8b 80 20 da 01 00    	mov    0x1da20(%eax),%eax
f0113171:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0113174:	eb 62                	jmp    f01131d8 <sys_check_LRU_lists_free+0x151>
	{
		for(int var = 0; var < list_size; var++)
f0113176:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f011317d:	eb 3a                	jmp    f01131b9 <sys_check_LRU_lists_free+0x132>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f011317f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0113182:	8b 00                	mov    (%eax),%eax
f0113184:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0113187:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011318a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011318f:	89 c2                	mov    %eax,%edx
f0113191:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0113194:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011319b:	8b 45 08             	mov    0x8(%ebp),%eax
f011319e:	01 c8                	add    %ecx,%eax
f01131a0:	8b 00                	mov    (%eax),%eax
f01131a2:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01131a5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01131a8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01131ad:	39 c2                	cmp    %eax,%edx
f01131af:	75 05                	jne    f01131b6 <sys_check_LRU_lists_free+0x12f>
			{
				list_validation_count++;
f01131b1:	ff 45 f4             	incl   -0xc(%ebp)
				break;
f01131b4:	eb 0b                	jmp    f01131c1 <sys_check_LRU_lists_free+0x13a>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f01131b6:	ff 45 e8             	incl   -0x18(%ebp)
f01131b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01131bc:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01131bf:	7c be                	jl     f011317f <sys_check_LRU_lists_free+0xf8>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f01131c1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01131c5:	7e 05                	jle    f01131cc <sys_check_LRU_lists_free+0x145>
			return list_validation_count;
f01131c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01131ca:	eb 46                	jmp    f0113212 <sys_check_LRU_lists_free+0x18b>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f01131cc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01131cf:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f01131d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01131d8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01131dc:	74 08                	je     f01131e6 <sys_check_LRU_lists_free+0x15f>
f01131de:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01131e1:	8b 40 10             	mov    0x10(%eax),%eax
f01131e4:	eb 05                	jmp    f01131eb <sys_check_LRU_lists_free+0x164>
f01131e6:	b8 00 00 00 00       	mov    $0x0,%eax
f01131eb:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01131ee:	89 82 28 da 01 00    	mov    %eax,0x1da28(%edx)
f01131f4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01131f7:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f01131fd:	85 c0                	test   %eax,%eax
f01131ff:	0f 85 71 ff ff ff    	jne    f0113176 <sys_check_LRU_lists_free+0xef>
f0113205:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0113209:	0f 85 67 ff ff ff    	jne    f0113176 <sys_check_LRU_lists_free+0xef>
			return list_validation_count;

	}


	return list_validation_count;
f011320f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0113212:	c9                   	leave  
f0113213:	c3                   	ret    

f0113214 <sys_check_WS_list>:
 * = 1: check entire list (order is important)
 * = 2: check only the existence of the given set of elements
 * = 3: check only the NOT existence of the given set of elements
 */
int sys_check_WS_list(uint32* WS_list_content, int actual_WS_list_size, uint32 last_WS_element_content, bool chk_status)
{
f0113214:	55                   	push   %ebp
f0113215:	89 e5                	mov    %esp,%ebp
f0113217:	83 ec 08             	sub    $0x8,%esp
		}
	}

	return WS_list_validation;
#else
	panic("sys_check_WS_list: this function is intended to be used when USE_KHEAP = 1");
f011321a:	83 ec 04             	sub    $0x4,%esp
f011321d:	68 dc b7 12 f0       	push   $0xf012b7dc
f0113222:	68 ea 00 00 00       	push   $0xea
f0113227:	68 95 b7 12 f0       	push   $0xf012b795
f011322c:	e8 e9 d0 fe ff       	call   f010031a <_panic>

f0113231 <hasExpectedCommands>:
	cprintf("=================\n\n");
	return 0;
}*/

int hasExpectedCommands(char **expectedCommands, int commandsCount)
{
f0113231:	55                   	push   %ebp
f0113232:	89 e5                	mov    %esp,%ebp
f0113234:	83 ec 18             	sub    $0x18,%esp
	struct Command *cmd = NULL;
f0113237:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (LIST_SIZE(&foundCommands) != commandsCount)
f011323e:	8b 15 18 2b 5a f0    	mov    0xf05a2b18,%edx
f0113244:	8b 45 0c             	mov    0xc(%ebp),%eax
f0113247:	39 c2                	cmp    %eax,%edx
f0113249:	74 0a                	je     f0113255 <hasExpectedCommands+0x24>
		return 0;
f011324b:	b8 00 00 00 00       	mov    $0x0,%eax
f0113250:	e9 8b 00 00 00       	jmp    f01132e0 <hasExpectedCommands+0xaf>

	LIST_FOREACH(cmd, &foundCommands)
f0113255:	a1 0c 2b 5a f0       	mov    0xf05a2b0c,%eax
f011325a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011325d:	eb 55                	jmp    f01132b4 <hasExpectedCommands+0x83>
	{
		int i;
		for (i = 0; i < commandsCount; i++)
f011325f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0113266:	eb 2a                	jmp    f0113292 <hasExpectedCommands+0x61>
			if (strcmp(cmd->name, expectedCommands[i]) == 0)
f0113268:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011326b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0113272:	8b 45 08             	mov    0x8(%ebp),%eax
f0113275:	01 d0                	add    %edx,%eax
f0113277:	8b 10                	mov    (%eax),%edx
f0113279:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011327c:	8b 00                	mov    (%eax),%eax
f011327e:	83 ec 08             	sub    $0x8,%esp
f0113281:	52                   	push   %edx
f0113282:	50                   	push   %eax
f0113283:	e8 c2 f3 00 00       	call   f012264a <strcmp>
f0113288:	83 c4 10             	add    $0x10,%esp
f011328b:	85 c0                	test   %eax,%eax
f011328d:	74 0d                	je     f011329c <hasExpectedCommands+0x6b>
		return 0;

	LIST_FOREACH(cmd, &foundCommands)
	{
		int i;
		for (i = 0; i < commandsCount; i++)
f011328f:	ff 45 f0             	incl   -0x10(%ebp)
f0113292:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0113295:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0113298:	7c ce                	jl     f0113268 <hasExpectedCommands+0x37>
f011329a:	eb 01                	jmp    f011329d <hasExpectedCommands+0x6c>
			if (strcmp(cmd->name, expectedCommands[i]) == 0)
				break;
f011329c:	90                   	nop
		if (i == commandsCount)
f011329d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01132a0:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01132a3:	75 07                	jne    f01132ac <hasExpectedCommands+0x7b>
			return 0;
f01132a5:	b8 00 00 00 00       	mov    $0x0,%eax
f01132aa:	eb 34                	jmp    f01132e0 <hasExpectedCommands+0xaf>
{
	struct Command *cmd = NULL;
	if (LIST_SIZE(&foundCommands) != commandsCount)
		return 0;

	LIST_FOREACH(cmd, &foundCommands)
f01132ac:	a1 14 2b 5a f0       	mov    0xf05a2b14,%eax
f01132b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01132b4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01132b8:	74 08                	je     f01132c2 <hasExpectedCommands+0x91>
f01132ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01132bd:	8b 40 10             	mov    0x10(%eax),%eax
f01132c0:	eb 05                	jmp    f01132c7 <hasExpectedCommands+0x96>
f01132c2:	b8 00 00 00 00       	mov    $0x0,%eax
f01132c7:	a3 14 2b 5a f0       	mov    %eax,0xf05a2b14
f01132cc:	a1 14 2b 5a f0       	mov    0xf05a2b14,%eax
f01132d1:	85 c0                	test   %eax,%eax
f01132d3:	75 8a                	jne    f011325f <hasExpectedCommands+0x2e>
f01132d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01132d9:	75 84                	jne    f011325f <hasExpectedCommands+0x2e>
			if (strcmp(cmd->name, expectedCommands[i]) == 0)
				break;
		if (i == commandsCount)
			return 0;
	}
	return 1;
f01132db:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01132e0:	c9                   	leave  
f01132e1:	c3                   	ret    

f01132e2 <getIndexOfCommand>:

int getIndexOfCommand(const char *commandName)
{
f01132e2:	55                   	push   %ebp
f01132e3:	89 e5                	mov    %esp,%ebp
f01132e5:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01132e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01132ef:	eb 2e                	jmp    f011331f <getIndexOfCommand+0x3d>
		if (strcmp(commands[i].name, commandName) == 0)
f01132f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01132f4:	89 d0                	mov    %edx,%eax
f01132f6:	01 c0                	add    %eax,%eax
f01132f8:	01 d0                	add    %edx,%eax
f01132fa:	c1 e0 03             	shl    $0x3,%eax
f01132fd:	05 40 e5 17 f0       	add    $0xf017e540,%eax
f0113302:	8b 00                	mov    (%eax),%eax
f0113304:	83 ec 08             	sub    $0x8,%esp
f0113307:	ff 75 08             	pushl  0x8(%ebp)
f011330a:	50                   	push   %eax
f011330b:	e8 3a f3 00 00       	call   f012264a <strcmp>
f0113310:	83 c4 10             	add    $0x10,%esp
f0113313:	85 c0                	test   %eax,%eax
f0113315:	75 05                	jne    f011331c <getIndexOfCommand+0x3a>
			return i;
f0113317:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011331a:	eb 14                	jmp    f0113330 <getIndexOfCommand+0x4e>
}

int getIndexOfCommand(const char *commandName)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f011331c:	ff 45 f4             	incl   -0xc(%ebp)
f011331f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0113322:	a1 48 e9 17 f0       	mov    0xf017e948,%eax
f0113327:	39 c2                	cmp    %eax,%edx
f0113329:	72 c6                	jb     f01132f1 <getIndexOfCommand+0xf>
		if (strcmp(commands[i].name, commandName) == 0)
			return i;
	return -404;
f011332b:	b8 6c fe ff ff       	mov    $0xfffffe6c,%eax
}
f0113330:	c9                   	leave  
f0113331:	c3                   	ret    

f0113332 <TestAutoCompleteCommand>:

int TestAutoCompleteCommand()
{
f0113332:	55                   	push   %ebp
f0113333:	89 e5                	mov    %esp,%ebp
f0113335:	57                   	push   %edi
f0113336:	56                   	push   %esi
f0113337:	53                   	push   %ebx
f0113338:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f011333e:	83 ec 0c             	sub    $0xc,%esp
f0113341:	68 40 b8 12 f0       	push   $0xf012b840
f0113346:	e8 21 dc fe ff       	call   f0100f6c <cprintf>
f011334b:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f011334e:	83 ec 0c             	sub    $0xc,%esp
f0113351:	68 64 b8 12 f0       	push   $0xf012b864
f0113356:	e8 11 dc fe ff       	call   f0100f6c <cprintf>
f011335b:	83 c4 10             	add    $0x10,%esp

	// CASE1: command is found with correct number of arguments
	int eval = 0;
f011335e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	char *args1[] = {"kernel_info"};
f0113365:	c7 45 8c 7f b8 12 f0 	movl   $0xf012b87f,-0x74(%ebp)
	int ret = process_command(ARRAY_LENGTH(args1), args1);
f011336c:	83 ec 08             	sub    $0x8,%esp
f011336f:	8d 45 8c             	lea    -0x74(%ebp),%eax
f0113372:	50                   	push   %eax
f0113373:	6a 01                	push   $0x1
f0113375:	e8 37 ee fe ff       	call   f01021b1 <process_command>
f011337a:	83 c4 10             	add    $0x10,%esp
f011337d:	89 45 e0             	mov    %eax,-0x20(%ebp)
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f0113380:	83 ec 0c             	sub    $0xc,%esp
f0113383:	68 8c b8 12 f0       	push   $0xf012b88c
f0113388:	e8 df db fe ff       	call   f0100f6c <cprintf>
f011338d:	83 c4 10             	add    $0x10,%esp
	if (ret == getIndexOfCommand(args1[0]) && LIST_EMPTY(&foundCommands))
f0113390:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113393:	83 ec 0c             	sub    $0xc,%esp
f0113396:	50                   	push   %eax
f0113397:	e8 46 ff ff ff       	call   f01132e2 <getIndexOfCommand>
f011339c:	83 c4 10             	add    $0x10,%esp
f011339f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01133a2:	75 0f                	jne    f01133b3 <TestAutoCompleteCommand+0x81>
f01133a4:	a1 0c 2b 5a f0       	mov    0xf05a2b0c,%eax
f01133a9:	85 c0                	test   %eax,%eax
f01133ab:	75 06                	jne    f01133b3 <TestAutoCompleteCommand+0x81>
		eval += 15;
f01133ad:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
f01133b1:	eb 10                	jmp    f01133c3 <TestAutoCompleteCommand+0x91>
	else
		cprintf("#1: WRONG - process_command return wrong value or foundCommands is not empty.\n");
f01133b3:	83 ec 0c             	sub    $0xc,%esp
f01133b6:	68 bc b8 12 f0       	push   $0xf012b8bc
f01133bb:	e8 ac db fe ff       	call   f0100f6c <cprintf>
f01133c0:	83 c4 10             	add    $0x10,%esp

	// CASE2: command is not found BUT its chars are subsequence-matched with one or more commands
	// should print the commands that contains "clk" as subsequence
	cprintf("==>Testing now AUTOCOMPLETE for: clk\n");
f01133c3:	83 ec 0c             	sub    $0xc,%esp
f01133c6:	68 0c b9 12 f0       	push   $0xf012b90c
f01133cb:	e8 9c db fe ff       	call   f0100f6c <cprintf>
f01133d0:	83 c4 10             	add    $0x10,%esp
	char *args2[] = {"clk"};
f01133d3:	c7 45 88 32 b9 12 f0 	movl   $0xf012b932,-0x78(%ebp)
	ret = process_command(ARRAY_LENGTH(args2), args2);
f01133da:	83 ec 08             	sub    $0x8,%esp
f01133dd:	8d 45 88             	lea    -0x78(%ebp),%eax
f01133e0:	50                   	push   %eax
f01133e1:	6a 01                	push   $0x1
f01133e3:	e8 c9 ed fe ff       	call   f01021b1 <process_command>
f01133e8:	83 c4 10             	add    $0x10,%esp
f01133eb:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == CMD_MATCHED && hasExpectedCommands((char *[]){"clock", "modifiedclock", "nclock"}, 3))
f01133ee:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f01133f2:	75 30                	jne    f0113424 <TestAutoCompleteCommand+0xf2>
f01133f4:	8d 45 90             	lea    -0x70(%ebp),%eax
f01133f7:	bb 10 bd 12 f0       	mov    $0xf012bd10,%ebx
f01133fc:	ba 03 00 00 00       	mov    $0x3,%edx
f0113401:	89 c7                	mov    %eax,%edi
f0113403:	89 de                	mov    %ebx,%esi
f0113405:	89 d1                	mov    %edx,%ecx
f0113407:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0113409:	83 ec 08             	sub    $0x8,%esp
f011340c:	6a 03                	push   $0x3
f011340e:	8d 45 90             	lea    -0x70(%ebp),%eax
f0113411:	50                   	push   %eax
f0113412:	e8 1a fe ff ff       	call   f0113231 <hasExpectedCommands>
f0113417:	83 c4 10             	add    $0x10,%esp
f011341a:	85 c0                	test   %eax,%eax
f011341c:	74 06                	je     f0113424 <TestAutoCompleteCommand+0xf2>
		eval += 15;
f011341e:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
f0113422:	eb 10                	jmp    f0113434 <TestAutoCompleteCommand+0x102>
	else
		cprintf("#2: WRONG - process_command return wrong value or foundCommands is not empty.\n");
f0113424:	83 ec 0c             	sub    $0xc,%esp
f0113427:	68 38 b9 12 f0       	push   $0xf012b938
f011342c:	e8 3b db fe ff       	call   f0100f6c <cprintf>
f0113431:	83 c4 10             	add    $0x10,%esp

	// CASE3: should print invalid number of args
	cprintf("==>Testing now AUTOCOMPLETE for: wm\n");
f0113434:	83 ec 0c             	sub    $0xc,%esp
f0113437:	68 88 b9 12 f0       	push   $0xf012b988
f011343c:	e8 2b db fe ff       	call   f0100f6c <cprintf>
f0113441:	83 c4 10             	add    $0x10,%esp
	char *args3[] = {"wm"};
f0113444:	c7 45 84 ad b9 12 f0 	movl   $0xf012b9ad,-0x7c(%ebp)
	cprintf("va of args3 = %x, *args3 = %x\n", args3, *args3);
f011344b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011344e:	83 ec 04             	sub    $0x4,%esp
f0113451:	50                   	push   %eax
f0113452:	8d 45 84             	lea    -0x7c(%ebp),%eax
f0113455:	50                   	push   %eax
f0113456:	68 b0 b9 12 f0       	push   $0xf012b9b0
f011345b:	e8 0c db fe ff       	call   f0100f6c <cprintf>
f0113460:	83 c4 10             	add    $0x10,%esp
	ret = process_command(ARRAY_LENGTH(args3), args3);
f0113463:	83 ec 08             	sub    $0x8,%esp
f0113466:	8d 45 84             	lea    -0x7c(%ebp),%eax
f0113469:	50                   	push   %eax
f011346a:	6a 01                	push   $0x1
f011346c:	e8 40 ed fe ff       	call   f01021b1 <process_command>
f0113471:	83 c4 10             	add    $0x10,%esp
f0113474:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == CMD_INV_NUM_ARGS && hasExpectedCommands(args3, 1))
f0113477:	83 7d e0 fe          	cmpl   $0xfffffffe,-0x20(%ebp)
f011347b:	75 1b                	jne    f0113498 <TestAutoCompleteCommand+0x166>
f011347d:	83 ec 08             	sub    $0x8,%esp
f0113480:	6a 01                	push   $0x1
f0113482:	8d 45 84             	lea    -0x7c(%ebp),%eax
f0113485:	50                   	push   %eax
f0113486:	e8 a6 fd ff ff       	call   f0113231 <hasExpectedCommands>
f011348b:	83 c4 10             	add    $0x10,%esp
f011348e:	85 c0                	test   %eax,%eax
f0113490:	74 06                	je     f0113498 <TestAutoCompleteCommand+0x166>
		eval += 15;
f0113492:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
f0113496:	eb 10                	jmp    f01134a8 <TestAutoCompleteCommand+0x176>
	else
		cprintf("#3: WRONG - process_command return wrong value or foundCommands contains wrong values.\n");
f0113498:	83 ec 0c             	sub    $0xc,%esp
f011349b:	68 d0 b9 12 f0       	push   $0xf012b9d0
f01134a0:	e8 c7 da fe ff       	call   f0100f6c <cprintf>
f01134a5:	83 c4 10             	add    $0x10,%esp

	// CASE4: should print invalid command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f01134a8:	83 ec 0c             	sub    $0xc,%esp
f01134ab:	68 28 ba 12 f0       	push   $0xf012ba28
f01134b0:	e8 b7 da fe ff       	call   f0100f6c <cprintf>
f01134b5:	83 c4 10             	add    $0x10,%esp
	char *args4[] = {"smm"};
f01134b8:	c7 45 80 4e ba 12 f0 	movl   $0xf012ba4e,-0x80(%ebp)
	ret = process_command(ARRAY_LENGTH(args4), args4);
f01134bf:	83 ec 08             	sub    $0x8,%esp
f01134c2:	8d 45 80             	lea    -0x80(%ebp),%eax
f01134c5:	50                   	push   %eax
f01134c6:	6a 01                	push   $0x1
f01134c8:	e8 e4 ec fe ff       	call   f01021b1 <process_command>
f01134cd:	83 c4 10             	add    $0x10,%esp
f01134d0:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == CMD_INVALID && LIST_SIZE(&foundCommands) == 0)
f01134d3:	83 7d e0 fd          	cmpl   $0xfffffffd,-0x20(%ebp)
f01134d7:	75 0f                	jne    f01134e8 <TestAutoCompleteCommand+0x1b6>
f01134d9:	a1 18 2b 5a f0       	mov    0xf05a2b18,%eax
f01134de:	85 c0                	test   %eax,%eax
f01134e0:	75 06                	jne    f01134e8 <TestAutoCompleteCommand+0x1b6>
		eval += 15;
f01134e2:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
f01134e6:	eb 10                	jmp    f01134f8 <TestAutoCompleteCommand+0x1c6>
	else
		cprintf("#4: WRONG - process_command return wrong value or foundCommands is not empty.\n");
f01134e8:	83 ec 0c             	sub    $0xc,%esp
f01134eb:	68 54 ba 12 f0       	push   $0xf012ba54
f01134f0:	e8 77 da fe ff       	call   f0100f6c <cprintf>
f01134f5:	83 c4 10             	add    $0x10,%esp

	// CASE5: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f01134f8:	83 ec 0c             	sub    $0xc,%esp
f01134fb:	68 a4 ba 12 f0       	push   $0xf012baa4
f0113500:	e8 67 da fe ff       	call   f0100f6c <cprintf>
f0113505:	83 c4 10             	add    $0x10,%esp
	char *args5[] = {"he"};
f0113508:	c7 85 7c ff ff ff c9 	movl   $0xf012bac9,-0x84(%ebp)
f011350f:	ba 12 f0 
	ret = process_command(ARRAY_LENGTH(args5), args5);
f0113512:	83 ec 08             	sub    $0x8,%esp
f0113515:	8d 85 7c ff ff ff    	lea    -0x84(%ebp),%eax
f011351b:	50                   	push   %eax
f011351c:	6a 01                	push   $0x1
f011351e:	e8 8e ec fe ff       	call   f01021b1 <process_command>
f0113523:	83 c4 10             	add    $0x10,%esp
f0113526:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == CMD_MATCHED && hasExpectedCommands((char *[]){"help", "sched?", "uhbestfit", "uhnextfit", "uheap?", "khbestfit", "khnextfit", "kheap?", "schedRR", "schedTest", "schedBSD", "schedMLFQ"}, 12))
f0113529:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f011352d:	75 30                	jne    f011355f <TestAutoCompleteCommand+0x22d>
f011352f:	8d 45 9c             	lea    -0x64(%ebp),%eax
f0113532:	bb a0 bd 12 f0       	mov    $0xf012bda0,%ebx
f0113537:	ba 0c 00 00 00       	mov    $0xc,%edx
f011353c:	89 c7                	mov    %eax,%edi
f011353e:	89 de                	mov    %ebx,%esi
f0113540:	89 d1                	mov    %edx,%ecx
f0113542:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0113544:	83 ec 08             	sub    $0x8,%esp
f0113547:	6a 0c                	push   $0xc
f0113549:	8d 45 9c             	lea    -0x64(%ebp),%eax
f011354c:	50                   	push   %eax
f011354d:	e8 df fc ff ff       	call   f0113231 <hasExpectedCommands>
f0113552:	83 c4 10             	add    $0x10,%esp
f0113555:	85 c0                	test   %eax,%eax
f0113557:	74 06                	je     f011355f <TestAutoCompleteCommand+0x22d>
		eval += 10;
f0113559:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
f011355d:	eb 10                	jmp    f011356f <TestAutoCompleteCommand+0x23d>
	else
		cprintf("#5: WRONG - process_command return wrong value or foundCommands is has wrong values.\n");
f011355f:	83 ec 0c             	sub    $0xc,%esp
f0113562:	68 cc ba 12 f0       	push   $0xf012bacc
f0113567:	e8 00 da fe ff       	call   f0100f6c <cprintf>
f011356c:	83 c4 10             	add    $0x10,%esp

	// CASE6: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f011356f:	83 ec 0c             	sub    $0xc,%esp
f0113572:	68 24 bb 12 f0       	push   $0xf012bb24
f0113577:	e8 f0 d9 fe ff       	call   f0100f6c <cprintf>
f011357c:	83 c4 10             	add    $0x10,%esp
	char *args6[] = {"ru"};
f011357f:	c7 85 78 ff ff ff 49 	movl   $0xf012bb49,-0x88(%ebp)
f0113586:	bb 12 f0 
	ret = process_command(ARRAY_LENGTH(args6), args6);
f0113589:	83 ec 08             	sub    $0x8,%esp
f011358c:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f0113592:	50                   	push   %eax
f0113593:	6a 01                	push   $0x1
f0113595:	e8 17 ec fe ff       	call   f01021b1 <process_command>
f011359a:	83 c4 10             	add    $0x10,%esp
f011359d:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == CMD_MATCHED && hasExpectedCommands((char *[]){"runall", "lru", "rub", "run", "rum"}, 5))
f01135a0:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f01135a4:	75 30                	jne    f01135d6 <TestAutoCompleteCommand+0x2a4>
f01135a6:	8d 45 cc             	lea    -0x34(%ebp),%eax
f01135a9:	bb e8 bd 12 f0       	mov    $0xf012bde8,%ebx
f01135ae:	ba 05 00 00 00       	mov    $0x5,%edx
f01135b3:	89 c7                	mov    %eax,%edi
f01135b5:	89 de                	mov    %ebx,%esi
f01135b7:	89 d1                	mov    %edx,%ecx
f01135b9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01135bb:	83 ec 08             	sub    $0x8,%esp
f01135be:	6a 05                	push   $0x5
f01135c0:	8d 45 cc             	lea    -0x34(%ebp),%eax
f01135c3:	50                   	push   %eax
f01135c4:	e8 68 fc ff ff       	call   f0113231 <hasExpectedCommands>
f01135c9:	83 c4 10             	add    $0x10,%esp
f01135cc:	85 c0                	test   %eax,%eax
f01135ce:	74 06                	je     f01135d6 <TestAutoCompleteCommand+0x2a4>
		eval += 10;
f01135d0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
f01135d4:	eb 10                	jmp    f01135e6 <TestAutoCompleteCommand+0x2b4>
	else
		cprintf("#6: WRONG - process_command return wrong value. or foundCommands is has wrong values.\n");
f01135d6:	83 ec 0c             	sub    $0xc,%esp
f01135d9:	68 4c bb 12 f0       	push   $0xf012bb4c
f01135de:	e8 89 d9 fe ff       	call   f0100f6c <cprintf>
f01135e3:	83 c4 10             	add    $0x10,%esp

	// CASE7: command is found with correct number of arguments
	cprintf("==>Testing now AUTOCOMPLETE for: load game\n");
f01135e6:	83 ec 0c             	sub    $0xc,%esp
f01135e9:	68 a4 bb 12 f0       	push   $0xf012bba4
f01135ee:	e8 79 d9 fe ff       	call   f0100f6c <cprintf>
f01135f3:	83 c4 10             	add    $0x10,%esp
	char *args7[] = {"load", "game"};
f01135f6:	c7 85 70 ff ff ff d0 	movl   $0xf012bbd0,-0x90(%ebp)
f01135fd:	bb 12 f0 
f0113600:	c7 85 74 ff ff ff d5 	movl   $0xf012bbd5,-0x8c(%ebp)
f0113607:	bb 12 f0 
	ret = process_command(ARRAY_LENGTH(args7), args7);
f011360a:	83 ec 08             	sub    $0x8,%esp
f011360d:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f0113613:	50                   	push   %eax
f0113614:	6a 02                	push   $0x2
f0113616:	e8 96 eb fe ff       	call   f01021b1 <process_command>
f011361b:	83 c4 10             	add    $0x10,%esp
f011361e:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == getIndexOfCommand(args7[0]) && LIST_EMPTY(&foundCommands))
f0113621:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0113627:	83 ec 0c             	sub    $0xc,%esp
f011362a:	50                   	push   %eax
f011362b:	e8 b2 fc ff ff       	call   f01132e2 <getIndexOfCommand>
f0113630:	83 c4 10             	add    $0x10,%esp
f0113633:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0113636:	75 0f                	jne    f0113647 <TestAutoCompleteCommand+0x315>
f0113638:	a1 0c 2b 5a f0       	mov    0xf05a2b0c,%eax
f011363d:	85 c0                	test   %eax,%eax
f011363f:	75 06                	jne    f0113647 <TestAutoCompleteCommand+0x315>
		eval += 10;
f0113641:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
f0113645:	eb 10                	jmp    f0113657 <TestAutoCompleteCommand+0x325>
	else
		cprintf("#7: WRONG - process_command return wrong value or foundCommands is not empty.\n");
f0113647:	83 ec 0c             	sub    $0xc,%esp
f011364a:	68 dc bb 12 f0       	push   $0xf012bbdc
f011364f:	e8 18 d9 fe ff       	call   f0100f6c <cprintf>
f0113654:	83 c4 10             	add    $0x10,%esp

	// CASE8: command is found with correct number of arguments
	cprintf("==>Testing now AUTOCOMPLETE for: wum 0xF0000000 M\n");
f0113657:	83 ec 0c             	sub    $0xc,%esp
f011365a:	68 2c bc 12 f0       	push   $0xf012bc2c
f011365f:	e8 08 d9 fe ff       	call   f0100f6c <cprintf>
f0113664:	83 c4 10             	add    $0x10,%esp
	char *args8[] = {"wum", "0xF0000000", "M"};
f0113667:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f011366d:	bb 10 be 12 f0       	mov    $0xf012be10,%ebx
f0113672:	ba 03 00 00 00       	mov    $0x3,%edx
f0113677:	89 c7                	mov    %eax,%edi
f0113679:	89 de                	mov    %ebx,%esi
f011367b:	89 d1                	mov    %edx,%ecx
f011367d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	ret = process_command(ARRAY_LENGTH(args8), args8);
f011367f:	83 ec 08             	sub    $0x8,%esp
f0113682:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f0113688:	50                   	push   %eax
f0113689:	6a 03                	push   $0x3
f011368b:	e8 21 eb fe ff       	call   f01021b1 <process_command>
f0113690:	83 c4 10             	add    $0x10,%esp
f0113693:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == getIndexOfCommand(args8[0]) && LIST_EMPTY(&foundCommands))
f0113696:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011369c:	83 ec 0c             	sub    $0xc,%esp
f011369f:	50                   	push   %eax
f01136a0:	e8 3d fc ff ff       	call   f01132e2 <getIndexOfCommand>
f01136a5:	83 c4 10             	add    $0x10,%esp
f01136a8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01136ab:	75 0f                	jne    f01136bc <TestAutoCompleteCommand+0x38a>
f01136ad:	a1 0c 2b 5a f0       	mov    0xf05a2b0c,%eax
f01136b2:	85 c0                	test   %eax,%eax
f01136b4:	75 06                	jne    f01136bc <TestAutoCompleteCommand+0x38a>
		eval += 10;
f01136b6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
f01136ba:	eb 10                	jmp    f01136cc <TestAutoCompleteCommand+0x39a>
	else
		cprintf("#8: WRONG - process_command return wrong value or foundCommands is not empty.\n");
f01136bc:	83 ec 0c             	sub    $0xc,%esp
f01136bf:	68 60 bc 12 f0       	push   $0xf012bc60
f01136c4:	e8 a3 d8 fe ff       	call   f0100f6c <cprintf>
f01136c9:	83 c4 10             	add    $0x10,%esp

	cprintf("test autocomplete completed. Evaluation = %d%%\n", eval);
f01136cc:	83 ec 08             	sub    $0x8,%esp
f01136cf:	ff 75 e4             	pushl  -0x1c(%ebp)
f01136d2:	68 b0 bc 12 f0       	push   $0xf012bcb0
f01136d7:	e8 90 d8 fe ff       	call   f0100f6c <cprintf>
f01136dc:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01136df:	83 ec 0c             	sub    $0xc,%esp
f01136e2:	68 e0 bc 12 f0       	push   $0xf012bce0
f01136e7:	e8 80 d8 fe ff       	call   f0100f6c <cprintf>
f01136ec:	83 c4 10             	add    $0x10,%esp

	return 0;
f01136ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01136f4:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01136f7:	5b                   	pop    %ebx
f01136f8:	5e                   	pop    %esi
f01136f9:	5f                   	pop    %edi
f01136fa:	5d                   	pop    %ebp
f01136fb:	c3                   	ret    

f01136fc <test_str2lower_function>:

int test_str2lower_function()
{
f01136fc:	55                   	push   %ebp
f01136fd:	89 e5                	mov    %esp,%ebp
f01136ff:	81 ec f8 02 00 00    	sub    $0x2f8,%esp
	cprintf("Automatic Testing of str2lower:\n");
f0113705:	83 ec 0c             	sub    $0xc,%esp
f0113708:	68 1c be 12 f0       	push   $0xf012be1c
f011370d:	e8 5a d8 fe ff       	call   f0100f6c <cprintf>
f0113712:	83 c4 10             	add    $0x10,%esp
	cprintf("========================\n");
f0113715:	83 ec 0c             	sub    $0xc,%esp
f0113718:	68 3d be 12 f0       	push   $0xf012be3d
f011371d:	e8 4a d8 fe ff       	call   f0100f6c <cprintf>
f0113722:	83 c4 10             	add    $0x10,%esp
	int i = 0;
f0113725:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int eval = 0;
f011372c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	// CASE1: input string in lower case
	const char *src1 = "HelloWorld";
f0113733:	c7 45 ec 57 be 12 f0 	movl   $0xf012be57,-0x14(%ebp)
	char dst1[100];
	char *result = str2lower(dst1, src1);
f011373a:	83 ec 08             	sub    $0x8,%esp
f011373d:	ff 75 ec             	pushl  -0x14(%ebp)
f0113740:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
f0113746:	50                   	push   %eax
f0113747:	e8 db f4 00 00       	call   f0122c27 <str2lower>
f011374c:	83 c4 10             	add    $0x10,%esp
f011374f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int resultLength = strlen(result);
f0113752:	83 ec 0c             	sub    $0xc,%esp
f0113755:	ff 75 e8             	pushl  -0x18(%ebp)
f0113758:	e8 e1 ed 00 00       	call   f012253e <strlen>
f011375d:	83 c4 10             	add    $0x10,%esp
f0113760:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "helloworld") != 0 || resultLength != strlen(src1))
f0113763:	83 ec 08             	sub    $0x8,%esp
f0113766:	68 62 be 12 f0       	push   $0xf012be62
f011376b:	ff 75 e8             	pushl  -0x18(%ebp)
f011376e:	e8 d7 ee 00 00       	call   f012264a <strcmp>
f0113773:	83 c4 10             	add    $0x10,%esp
f0113776:	85 c0                	test   %eax,%eax
f0113778:	75 13                	jne    f011378d <test_str2lower_function+0x91>
f011377a:	83 ec 0c             	sub    $0xc,%esp
f011377d:	ff 75 ec             	pushl  -0x14(%ebp)
f0113780:	e8 b9 ed 00 00       	call   f012253e <strlen>
f0113785:	83 c4 10             	add    $0x10,%esp
f0113788:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011378b:	74 15                	je     f01137a2 <test_str2lower_function+0xa6>
		cprintf("str2lower #1: WRONG - str2lower return wrong value or length. Expected \"helloworld\", Actual \"%s\"\n", result);
f011378d:	83 ec 08             	sub    $0x8,%esp
f0113790:	ff 75 e8             	pushl  -0x18(%ebp)
f0113793:	68 70 be 12 f0       	push   $0xf012be70
f0113798:	e8 cf d7 fe ff       	call   f0100f6c <cprintf>
f011379d:	83 c4 10             	add    $0x10,%esp
f01137a0:	eb 04                	jmp    f01137a6 <test_str2lower_function+0xaa>
	else
		eval += 10;
f01137a2:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	// CASE2: input string is empty
	const char *src2 = "";
f01137a6:	c7 45 e0 d2 be 12 f0 	movl   $0xf012bed2,-0x20(%ebp)
	char dst2[100];
	result = str2lower(dst2, src2);
f01137ad:	83 ec 08             	sub    $0x8,%esp
f01137b0:	ff 75 e0             	pushl  -0x20(%ebp)
f01137b3:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01137b9:	50                   	push   %eax
f01137ba:	e8 68 f4 00 00       	call   f0122c27 <str2lower>
f01137bf:	83 c4 10             	add    $0x10,%esp
f01137c2:	89 45 e8             	mov    %eax,-0x18(%ebp)
	resultLength = strlen(result);
f01137c5:	83 ec 0c             	sub    $0xc,%esp
f01137c8:	ff 75 e8             	pushl  -0x18(%ebp)
f01137cb:	e8 6e ed 00 00       	call   f012253e <strlen>
f01137d0:	83 c4 10             	add    $0x10,%esp
f01137d3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "") != 0 || resultLength != strlen(src2))
f01137d6:	83 ec 08             	sub    $0x8,%esp
f01137d9:	68 d2 be 12 f0       	push   $0xf012bed2
f01137de:	ff 75 e8             	pushl  -0x18(%ebp)
f01137e1:	e8 64 ee 00 00       	call   f012264a <strcmp>
f01137e6:	83 c4 10             	add    $0x10,%esp
f01137e9:	85 c0                	test   %eax,%eax
f01137eb:	75 13                	jne    f0113800 <test_str2lower_function+0x104>
f01137ed:	83 ec 0c             	sub    $0xc,%esp
f01137f0:	ff 75 e0             	pushl  -0x20(%ebp)
f01137f3:	e8 46 ed 00 00       	call   f012253e <strlen>
f01137f8:	83 c4 10             	add    $0x10,%esp
f01137fb:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01137fe:	74 15                	je     f0113815 <test_str2lower_function+0x119>
		cprintf("str2lower #2: WRONG - str2lower return wrong value or length. Expected \"\", Actual \"%s\"\n", result);
f0113800:	83 ec 08             	sub    $0x8,%esp
f0113803:	ff 75 e8             	pushl  -0x18(%ebp)
f0113806:	68 d4 be 12 f0       	push   $0xf012bed4
f011380b:	e8 5c d7 fe ff       	call   f0100f6c <cprintf>
f0113810:	83 c4 10             	add    $0x10,%esp
f0113813:	eb 04                	jmp    f0113819 <test_str2lower_function+0x11d>
	else
		eval += 10;
f0113815:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	// CASE3: input string is Only special characters
	const char *src3 = "!@#$%%^&*()";
f0113819:	c7 45 dc 2c bf 12 f0 	movl   $0xf012bf2c,-0x24(%ebp)
	char dst3[100];
	result = str2lower(dst3, src3);
f0113820:	83 ec 08             	sub    $0x8,%esp
f0113823:	ff 75 dc             	pushl  -0x24(%ebp)
f0113826:	8d 85 a0 fe ff ff    	lea    -0x160(%ebp),%eax
f011382c:	50                   	push   %eax
f011382d:	e8 f5 f3 00 00       	call   f0122c27 <str2lower>
f0113832:	83 c4 10             	add    $0x10,%esp
f0113835:	89 45 e8             	mov    %eax,-0x18(%ebp)
	resultLength = strlen(result);
f0113838:	83 ec 0c             	sub    $0xc,%esp
f011383b:	ff 75 e8             	pushl  -0x18(%ebp)
f011383e:	e8 fb ec 00 00       	call   f012253e <strlen>
f0113843:	83 c4 10             	add    $0x10,%esp
f0113846:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "!@#$%%^&*()") != 0 || resultLength != strlen(src3))
f0113849:	83 ec 08             	sub    $0x8,%esp
f011384c:	68 2c bf 12 f0       	push   $0xf012bf2c
f0113851:	ff 75 e8             	pushl  -0x18(%ebp)
f0113854:	e8 f1 ed 00 00       	call   f012264a <strcmp>
f0113859:	83 c4 10             	add    $0x10,%esp
f011385c:	85 c0                	test   %eax,%eax
f011385e:	75 13                	jne    f0113873 <test_str2lower_function+0x177>
f0113860:	83 ec 0c             	sub    $0xc,%esp
f0113863:	ff 75 dc             	pushl  -0x24(%ebp)
f0113866:	e8 d3 ec 00 00       	call   f012253e <strlen>
f011386b:	83 c4 10             	add    $0x10,%esp
f011386e:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0113871:	74 15                	je     f0113888 <test_str2lower_function+0x18c>
		cprintf("str2lower #3: WRONG - str2lower return wrong value or length. Expected \"!@#$%%^&*()\", Actual \"%s\"\n", result);
f0113873:	83 ec 08             	sub    $0x8,%esp
f0113876:	ff 75 e8             	pushl  -0x18(%ebp)
f0113879:	68 38 bf 12 f0       	push   $0xf012bf38
f011387e:	e8 e9 d6 fe ff       	call   f0100f6c <cprintf>
f0113883:	83 c4 10             	add    $0x10,%esp
f0113886:	eb 04                	jmp    f011388c <test_str2lower_function+0x190>
	else
		eval += 15;
f0113888:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)

	// CASE4: input string is only numbers
	const char *src4 = "1234567890";
f011388c:	c7 45 d8 9b bf 12 f0 	movl   $0xf012bf9b,-0x28(%ebp)
	char dst4[100];
	result = str2lower(dst4, src4);
f0113893:	83 ec 08             	sub    $0x8,%esp
f0113896:	ff 75 d8             	pushl  -0x28(%ebp)
f0113899:	8d 85 3c fe ff ff    	lea    -0x1c4(%ebp),%eax
f011389f:	50                   	push   %eax
f01138a0:	e8 82 f3 00 00       	call   f0122c27 <str2lower>
f01138a5:	83 c4 10             	add    $0x10,%esp
f01138a8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	resultLength = strlen(result);
f01138ab:	83 ec 0c             	sub    $0xc,%esp
f01138ae:	ff 75 e8             	pushl  -0x18(%ebp)
f01138b1:	e8 88 ec 00 00       	call   f012253e <strlen>
f01138b6:	83 c4 10             	add    $0x10,%esp
f01138b9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "1234567890") != 0 || resultLength != strlen(src4))
f01138bc:	83 ec 08             	sub    $0x8,%esp
f01138bf:	68 9b bf 12 f0       	push   $0xf012bf9b
f01138c4:	ff 75 e8             	pushl  -0x18(%ebp)
f01138c7:	e8 7e ed 00 00       	call   f012264a <strcmp>
f01138cc:	83 c4 10             	add    $0x10,%esp
f01138cf:	85 c0                	test   %eax,%eax
f01138d1:	75 13                	jne    f01138e6 <test_str2lower_function+0x1ea>
f01138d3:	83 ec 0c             	sub    $0xc,%esp
f01138d6:	ff 75 d8             	pushl  -0x28(%ebp)
f01138d9:	e8 60 ec 00 00       	call   f012253e <strlen>
f01138de:	83 c4 10             	add    $0x10,%esp
f01138e1:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01138e4:	74 15                	je     f01138fb <test_str2lower_function+0x1ff>
		cprintf("str2lower #4: WRONG - str2lower return wrong value or length. Expected \"1234567890\", Actual \"%s\"\n", result);
f01138e6:	83 ec 08             	sub    $0x8,%esp
f01138e9:	ff 75 e8             	pushl  -0x18(%ebp)
f01138ec:	68 a8 bf 12 f0       	push   $0xf012bfa8
f01138f1:	e8 76 d6 fe ff       	call   f0100f6c <cprintf>
f01138f6:	83 c4 10             	add    $0x10,%esp
f01138f9:	eb 04                	jmp    f01138ff <test_str2lower_function+0x203>
	else
		eval += 15;
f01138fb:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)

	// CASE5: input string contains invalid characters
	const char *src5 = "Hello!@#$%%^&*()World";
f01138ff:	c7 45 d4 0a c0 12 f0 	movl   $0xf012c00a,-0x2c(%ebp)
	char dst5[100];
	result = str2lower(dst5, src5);
f0113906:	83 ec 08             	sub    $0x8,%esp
f0113909:	ff 75 d4             	pushl  -0x2c(%ebp)
f011390c:	8d 85 d8 fd ff ff    	lea    -0x228(%ebp),%eax
f0113912:	50                   	push   %eax
f0113913:	e8 0f f3 00 00       	call   f0122c27 <str2lower>
f0113918:	83 c4 10             	add    $0x10,%esp
f011391b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	resultLength = strlen(result);
f011391e:	83 ec 0c             	sub    $0xc,%esp
f0113921:	ff 75 e8             	pushl  -0x18(%ebp)
f0113924:	e8 15 ec 00 00       	call   f012253e <strlen>
f0113929:	83 c4 10             	add    $0x10,%esp
f011392c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "hello!@#$%%^&*()world") != 0 || resultLength != strlen(src5))
f011392f:	83 ec 08             	sub    $0x8,%esp
f0113932:	68 20 c0 12 f0       	push   $0xf012c020
f0113937:	ff 75 e8             	pushl  -0x18(%ebp)
f011393a:	e8 0b ed 00 00       	call   f012264a <strcmp>
f011393f:	83 c4 10             	add    $0x10,%esp
f0113942:	85 c0                	test   %eax,%eax
f0113944:	75 13                	jne    f0113959 <test_str2lower_function+0x25d>
f0113946:	83 ec 0c             	sub    $0xc,%esp
f0113949:	ff 75 d4             	pushl  -0x2c(%ebp)
f011394c:	e8 ed eb 00 00       	call   f012253e <strlen>
f0113951:	83 c4 10             	add    $0x10,%esp
f0113954:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0113957:	74 15                	je     f011396e <test_str2lower_function+0x272>
		cprintf("str2lower #5: WRONG - str2lower return wrong value or length. Expected \"hello!@#$%%^&*()world\", Actual \"%s\"\n", result);
f0113959:	83 ec 08             	sub    $0x8,%esp
f011395c:	ff 75 e8             	pushl  -0x18(%ebp)
f011395f:	68 38 c0 12 f0       	push   $0xf012c038
f0113964:	e8 03 d6 fe ff       	call   f0100f6c <cprintf>
f0113969:	83 c4 10             	add    $0x10,%esp
f011396c:	eb 04                	jmp    f0113972 <test_str2lower_function+0x276>
	else
		eval += 15;
f011396e:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)

	// CASE6: input string contains characters with white-space characters
	const char *src6 = "Hello World";
f0113972:	c7 45 d0 a5 c0 12 f0 	movl   $0xf012c0a5,-0x30(%ebp)
	char dst6[100];
	result = str2lower(dst6, src6);
f0113979:	83 ec 08             	sub    $0x8,%esp
f011397c:	ff 75 d0             	pushl  -0x30(%ebp)
f011397f:	8d 85 74 fd ff ff    	lea    -0x28c(%ebp),%eax
f0113985:	50                   	push   %eax
f0113986:	e8 9c f2 00 00       	call   f0122c27 <str2lower>
f011398b:	83 c4 10             	add    $0x10,%esp
f011398e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	resultLength = strlen(result);
f0113991:	83 ec 0c             	sub    $0xc,%esp
f0113994:	ff 75 e8             	pushl  -0x18(%ebp)
f0113997:	e8 a2 eb 00 00       	call   f012253e <strlen>
f011399c:	83 c4 10             	add    $0x10,%esp
f011399f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "hello world") != 0 || resultLength != strlen(src6))
f01139a2:	83 ec 08             	sub    $0x8,%esp
f01139a5:	68 b1 c0 12 f0       	push   $0xf012c0b1
f01139aa:	ff 75 e8             	pushl  -0x18(%ebp)
f01139ad:	e8 98 ec 00 00       	call   f012264a <strcmp>
f01139b2:	83 c4 10             	add    $0x10,%esp
f01139b5:	85 c0                	test   %eax,%eax
f01139b7:	75 13                	jne    f01139cc <test_str2lower_function+0x2d0>
f01139b9:	83 ec 0c             	sub    $0xc,%esp
f01139bc:	ff 75 d0             	pushl  -0x30(%ebp)
f01139bf:	e8 7a eb 00 00       	call   f012253e <strlen>
f01139c4:	83 c4 10             	add    $0x10,%esp
f01139c7:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01139ca:	74 15                	je     f01139e1 <test_str2lower_function+0x2e5>
		cprintf("str2lower #6: WRONG - str2lower return wrong value or length. Expected \"hello world\", Actual \"%s\"\n", result);
f01139cc:	83 ec 08             	sub    $0x8,%esp
f01139cf:	ff 75 e8             	pushl  -0x18(%ebp)
f01139d2:	68 c0 c0 12 f0       	push   $0xf012c0c0
f01139d7:	e8 90 d5 fe ff       	call   f0100f6c <cprintf>
f01139dc:	83 c4 10             	add    $0x10,%esp
f01139df:	eb 04                	jmp    f01139e5 <test_str2lower_function+0x2e9>
	else
		eval += 15;
f01139e1:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)

	// CASE7: input string contains valid characters separated by _
	const char *src7 = "Hello WORLD String_2_LOWeR";
f01139e5:	c7 45 cc 23 c1 12 f0 	movl   $0xf012c123,-0x34(%ebp)
	char dst7[100];
	result = str2lower(dst7, src7);
f01139ec:	83 ec 08             	sub    $0x8,%esp
f01139ef:	ff 75 cc             	pushl  -0x34(%ebp)
f01139f2:	8d 85 10 fd ff ff    	lea    -0x2f0(%ebp),%eax
f01139f8:	50                   	push   %eax
f01139f9:	e8 29 f2 00 00       	call   f0122c27 <str2lower>
f01139fe:	83 c4 10             	add    $0x10,%esp
f0113a01:	89 45 e8             	mov    %eax,-0x18(%ebp)
	resultLength = strlen(result);
f0113a04:	83 ec 0c             	sub    $0xc,%esp
f0113a07:	ff 75 e8             	pushl  -0x18(%ebp)
f0113a0a:	e8 2f eb 00 00       	call   f012253e <strlen>
f0113a0f:	83 c4 10             	add    $0x10,%esp
f0113a12:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "hello world string_2_lower") != 0 || resultLength != strlen(src7))
f0113a15:	83 ec 08             	sub    $0x8,%esp
f0113a18:	68 3e c1 12 f0       	push   $0xf012c13e
f0113a1d:	ff 75 e8             	pushl  -0x18(%ebp)
f0113a20:	e8 25 ec 00 00       	call   f012264a <strcmp>
f0113a25:	83 c4 10             	add    $0x10,%esp
f0113a28:	85 c0                	test   %eax,%eax
f0113a2a:	75 13                	jne    f0113a3f <test_str2lower_function+0x343>
f0113a2c:	83 ec 0c             	sub    $0xc,%esp
f0113a2f:	ff 75 cc             	pushl  -0x34(%ebp)
f0113a32:	e8 07 eb 00 00       	call   f012253e <strlen>
f0113a37:	83 c4 10             	add    $0x10,%esp
f0113a3a:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0113a3d:	74 15                	je     f0113a54 <test_str2lower_function+0x358>
		cprintf("str2lower #7: WRONG - str2lower return wrong value or length. Expected \"hello world string_2_lower\", Actual \"%s\"\n", result);
f0113a3f:	83 ec 08             	sub    $0x8,%esp
f0113a42:	ff 75 e8             	pushl  -0x18(%ebp)
f0113a45:	68 5c c1 12 f0       	push   $0xf012c15c
f0113a4a:	e8 1d d5 fe ff       	call   f0100f6c <cprintf>
f0113a4f:	83 c4 10             	add    $0x10,%esp
f0113a52:	eb 04                	jmp    f0113a58 <test_str2lower_function+0x35c>
	else
		eval += 20;
f0113a54:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)

	cprintf("Test str2lower completed. Evaluation = %d%%\n", eval);
f0113a58:	83 ec 08             	sub    $0x8,%esp
f0113a5b:	ff 75 f4             	pushl  -0xc(%ebp)
f0113a5e:	68 d0 c1 12 f0       	push   $0xf012c1d0
f0113a63:	e8 04 d5 fe ff       	call   f0100f6c <cprintf>
f0113a68:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0113a6b:	83 ec 0c             	sub    $0xc,%esp
f0113a6e:	68 e0 bc 12 f0       	push   $0xf012bce0
f0113a73:	e8 f4 d4 fe ff       	call   f0100f6c <cprintf>
f0113a78:	83 c4 10             	add    $0x10,%esp
	return 0;
f0113a7b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113a80:	c9                   	leave  
f0113a81:	c3                   	ret    

f0113a82 <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f0113a82:	55                   	push   %ebp
f0113a83:	89 e5                	mov    %esp,%ebp
f0113a85:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f0113a88:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0113a8f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0113a96:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113a9d:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113aa2:	ff 75 ec             	pushl  -0x14(%ebp)
f0113aa5:	ff 75 f0             	pushl  -0x10(%ebp)
f0113aa8:	ff 75 f4             	pushl  -0xc(%ebp)
f0113aab:	50                   	push   %eax
f0113aac:	e8 77 50 ff ff       	call   f0108b28 <pt_set_page_permissions>
f0113ab1:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113ab4:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113ab9:	ff 75 ec             	pushl  -0x14(%ebp)
f0113abc:	ff 75 f0             	pushl  -0x10(%ebp)
f0113abf:	ff 75 f4             	pushl  -0xc(%ebp)
f0113ac2:	50                   	push   %eax
f0113ac3:	e8 a0 4d 00 00       	call   f0118868 <CP>
f0113ac8:	83 c4 10             	add    $0x10,%esp
f0113acb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0113ace:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0113ad2:	74 17                	je     f0113aeb <test_pt_set_page_permissions+0x69>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f0113ad4:	83 ec 04             	sub    $0x4,%esp
f0113ad7:	68 00 c2 12 f0       	push   $0xf012c200
f0113adc:	68 23 01 00 00       	push   $0x123
f0113ae1:	68 22 c2 12 f0       	push   $0xf012c222
f0113ae6:	e8 2f c8 fe ff       	call   f010031a <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f0113aeb:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f0113af2:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f0113af9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113b00:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113b05:	ff 75 ec             	pushl  -0x14(%ebp)
f0113b08:	ff 75 f0             	pushl  -0x10(%ebp)
f0113b0b:	ff 75 f4             	pushl  -0xc(%ebp)
f0113b0e:	50                   	push   %eax
f0113b0f:	e8 14 50 ff ff       	call   f0108b28 <pt_set_page_permissions>
f0113b14:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113b17:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113b1c:	ff 75 ec             	pushl  -0x14(%ebp)
f0113b1f:	ff 75 f0             	pushl  -0x10(%ebp)
f0113b22:	ff 75 f4             	pushl  -0xc(%ebp)
f0113b25:	50                   	push   %eax
f0113b26:	e8 3d 4d 00 00       	call   f0118868 <CP>
f0113b2b:	83 c4 10             	add    $0x10,%esp
f0113b2e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0113b31:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0113b35:	74 17                	je     f0113b4e <test_pt_set_page_permissions+0xcc>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f0113b37:	83 ec 04             	sub    $0x4,%esp
f0113b3a:	68 40 c2 12 f0       	push   $0xf012c240
f0113b3f:	68 2f 01 00 00       	push   $0x12f
f0113b44:	68 22 c2 12 f0       	push   $0xf012c222
f0113b49:	e8 cc c7 fe ff       	call   f010031a <_panic>
	}

	va = 0xEF800000;
f0113b4e:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0113b55:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0113b5c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113b63:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113b68:	ff 75 ec             	pushl  -0x14(%ebp)
f0113b6b:	ff 75 f0             	pushl  -0x10(%ebp)
f0113b6e:	ff 75 f4             	pushl  -0xc(%ebp)
f0113b71:	50                   	push   %eax
f0113b72:	e8 b1 4f ff ff       	call   f0108b28 <pt_set_page_permissions>
f0113b77:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113b7a:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113b7f:	ff 75 ec             	pushl  -0x14(%ebp)
f0113b82:	ff 75 f0             	pushl  -0x10(%ebp)
f0113b85:	ff 75 f4             	pushl  -0xc(%ebp)
f0113b88:	50                   	push   %eax
f0113b89:	e8 da 4c 00 00       	call   f0118868 <CP>
f0113b8e:	83 c4 10             	add    $0x10,%esp
f0113b91:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0113b94:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0113b98:	74 17                	je     f0113bb1 <test_pt_set_page_permissions+0x12f>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0113b9a:	83 ec 04             	sub    $0x4,%esp
f0113b9d:	68 64 c2 12 f0       	push   $0xf012c264
f0113ba2:	68 3a 01 00 00       	push   $0x13a
f0113ba7:	68 22 c2 12 f0       	push   $0xf012c222
f0113bac:	e8 69 c7 fe ff       	call   f010031a <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f0113bb1:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f0113bb8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f0113bbf:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113bc6:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113bcb:	ff 75 ec             	pushl  -0x14(%ebp)
f0113bce:	ff 75 f0             	pushl  -0x10(%ebp)
f0113bd1:	ff 75 f4             	pushl  -0xc(%ebp)
f0113bd4:	50                   	push   %eax
f0113bd5:	e8 4e 4f ff ff       	call   f0108b28 <pt_set_page_permissions>
f0113bda:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113bdd:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113be2:	ff 75 ec             	pushl  -0x14(%ebp)
f0113be5:	ff 75 f0             	pushl  -0x10(%ebp)
f0113be8:	ff 75 f4             	pushl  -0xc(%ebp)
f0113beb:	50                   	push   %eax
f0113bec:	e8 77 4c 00 00       	call   f0118868 <CP>
f0113bf1:	83 c4 10             	add    $0x10,%esp
f0113bf4:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0113bf7:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0113bfb:	74 17                	je     f0113c14 <test_pt_set_page_permissions+0x192>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0113bfd:	83 ec 04             	sub    $0x4,%esp
f0113c00:	68 88 c2 12 f0       	push   $0xf012c288
f0113c05:	68 46 01 00 00       	push   $0x146
f0113c0a:	68 22 c2 12 f0       	push   $0xf012c222
f0113c0f:	e8 06 c7 fe ff       	call   f010031a <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0113c14:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f0113c1b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0113c22:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113c29:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113c2e:	ff 75 ec             	pushl  -0x14(%ebp)
f0113c31:	ff 75 f0             	pushl  -0x10(%ebp)
f0113c34:	ff 75 f4             	pushl  -0xc(%ebp)
f0113c37:	50                   	push   %eax
f0113c38:	e8 eb 4e ff ff       	call   f0108b28 <pt_set_page_permissions>
f0113c3d:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113c40:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113c45:	ff 75 ec             	pushl  -0x14(%ebp)
f0113c48:	ff 75 f0             	pushl  -0x10(%ebp)
f0113c4b:	ff 75 f4             	pushl  -0xc(%ebp)
f0113c4e:	50                   	push   %eax
f0113c4f:	e8 14 4c 00 00       	call   f0118868 <CP>
f0113c54:	83 c4 10             	add    $0x10,%esp
f0113c57:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0113c5a:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0113c5e:	74 17                	je     f0113c77 <test_pt_set_page_permissions+0x1f5>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0113c60:	83 ec 04             	sub    $0x4,%esp
f0113c63:	68 ac c2 12 f0       	push   $0xf012c2ac
f0113c68:	68 52 01 00 00       	push   $0x152
f0113c6d:	68 22 c2 12 f0       	push   $0xf012c222
f0113c72:	e8 a3 c6 fe ff       	call   f010031a <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0113c77:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0113c7e:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0113c85:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113c8c:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113c91:	ff 75 ec             	pushl  -0x14(%ebp)
f0113c94:	ff 75 f0             	pushl  -0x10(%ebp)
f0113c97:	ff 75 f4             	pushl  -0xc(%ebp)
f0113c9a:	50                   	push   %eax
f0113c9b:	e8 88 4e ff ff       	call   f0108b28 <pt_set_page_permissions>
f0113ca0:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113ca3:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113ca8:	ff 75 ec             	pushl  -0x14(%ebp)
f0113cab:	ff 75 f0             	pushl  -0x10(%ebp)
f0113cae:	ff 75 f4             	pushl  -0xc(%ebp)
f0113cb1:	50                   	push   %eax
f0113cb2:	e8 b1 4b 00 00       	call   f0118868 <CP>
f0113cb7:	83 c4 10             	add    $0x10,%esp
f0113cba:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0113cbd:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0113cc1:	74 17                	je     f0113cda <test_pt_set_page_permissions+0x258>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0113cc3:	83 ec 04             	sub    $0x4,%esp
f0113cc6:	68 d0 c2 12 f0       	push   $0xf012c2d0
f0113ccb:	68 5e 01 00 00       	push   $0x15e
f0113cd0:	68 22 c2 12 f0       	push   $0xf012c222
f0113cd5:	e8 40 c6 fe ff       	call   f010031a <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f0113cda:	83 ec 0c             	sub    $0xc,%esp
f0113cdd:	68 fc c2 12 f0       	push   $0xf012c2fc
f0113ce2:	e8 85 d2 fe ff       	call   f0100f6c <cprintf>
f0113ce7:	83 c4 10             	add    $0x10,%esp
	return 0;
f0113cea:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113cef:	c9                   	leave  
f0113cf0:	c3                   	ret    

f0113cf1 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0113cf1:	55                   	push   %ebp
f0113cf2:	89 e5                	mov    %esp,%ebp
f0113cf4:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f0113cf7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0113cfe:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0113d05:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113d0c:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113d11:	ff 75 ec             	pushl  -0x14(%ebp)
f0113d14:	ff 75 f0             	pushl  -0x10(%ebp)
f0113d17:	ff 75 f4             	pushl  -0xc(%ebp)
f0113d1a:	50                   	push   %eax
f0113d1b:	e8 08 4e ff ff       	call   f0108b28 <pt_set_page_permissions>
f0113d20:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f0113d23:	83 ec 04             	sub    $0x4,%esp
f0113d26:	68 4c c3 12 f0       	push   $0xf012c34c
f0113d2b:	68 6b 01 00 00       	push   $0x16b
f0113d30:	68 22 c2 12 f0       	push   $0xf012c222
f0113d35:	e8 e0 c5 fe ff       	call   f010031a <_panic>

f0113d3a <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f0113d3a:	55                   	push   %ebp
f0113d3b:	89 e5                	mov    %esp,%ebp
f0113d3d:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0113d40:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f0113d47:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113d4c:	83 ec 08             	sub    $0x8,%esp
f0113d4f:	ff 75 f4             	pushl  -0xc(%ebp)
f0113d52:	50                   	push   %eax
f0113d53:	e8 94 4e ff ff       	call   f0108bec <pt_get_page_permissions>
f0113d58:	83 c4 10             	add    $0x10,%esp
f0113d5b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0113d5e:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0113d62:	74 17                	je     f0113d7b <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f0113d64:	83 ec 04             	sub    $0x4,%esp
f0113d67:	68 e8 c3 12 f0       	push   $0xf012c3e8
f0113d6c:	68 79 01 00 00       	push   $0x179
f0113d71:	68 22 c2 12 f0       	push   $0xf012c222
f0113d76:	e8 9f c5 fe ff       	call   f010031a <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f0113d7b:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0113d82:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113d87:	83 ec 08             	sub    $0x8,%esp
f0113d8a:	ff 75 f4             	pushl  -0xc(%ebp)
f0113d8d:	50                   	push   %eax
f0113d8e:	e8 59 4e ff ff       	call   f0108bec <pt_get_page_permissions>
f0113d93:	83 c4 10             	add    $0x10,%esp
f0113d96:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f0113d99:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0113d9d:	74 17                	je     f0113db6 <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f0113d9f:	83 ec 04             	sub    $0x4,%esp
f0113da2:	68 0c c4 12 f0       	push   $0xf012c40c
f0113da7:	68 81 01 00 00       	push   $0x181
f0113dac:	68 22 c2 12 f0       	push   $0xf012c222
f0113db1:	e8 64 c5 fe ff       	call   f010031a <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f0113db6:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0113dbd:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113dc2:	83 ec 08             	sub    $0x8,%esp
f0113dc5:	ff 75 f4             	pushl  -0xc(%ebp)
f0113dc8:	50                   	push   %eax
f0113dc9:	e8 1e 4e ff ff       	call   f0108bec <pt_get_page_permissions>
f0113dce:	83 c4 10             	add    $0x10,%esp
f0113dd1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0113dd4:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0113dd8:	74 17                	je     f0113df1 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f0113dda:	83 ec 04             	sub    $0x4,%esp
f0113ddd:	68 30 c4 12 f0       	push   $0xf012c430
f0113de2:	68 89 01 00 00       	push   $0x189
f0113de7:	68 22 c2 12 f0       	push   $0xf012c222
f0113dec:	e8 29 c5 fe ff       	call   f010031a <_panic>
	}

	va = 0xF1000000;
f0113df1:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0113df8:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113dfd:	83 ec 08             	sub    $0x8,%esp
f0113e00:	ff 75 f4             	pushl  -0xc(%ebp)
f0113e03:	50                   	push   %eax
f0113e04:	e8 e3 4d ff ff       	call   f0108bec <pt_get_page_permissions>
f0113e09:	83 c4 10             	add    $0x10,%esp
f0113e0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0113e0f:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0113e13:	74 17                	je     f0113e2c <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f0113e15:	83 ec 04             	sub    $0x4,%esp
f0113e18:	68 54 c4 12 f0       	push   $0xf012c454
f0113e1d:	68 90 01 00 00       	push   $0x190
f0113e22:	68 22 c2 12 f0       	push   $0xf012c222
f0113e27:	e8 ee c4 fe ff       	call   f010031a <_panic>
	}

	va = 0xF0001000;
f0113e2c:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0113e33:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113e38:	83 ec 08             	sub    $0x8,%esp
f0113e3b:	ff 75 f4             	pushl  -0xc(%ebp)
f0113e3e:	50                   	push   %eax
f0113e3f:	e8 a8 4d ff ff       	call   f0108bec <pt_get_page_permissions>
f0113e44:	83 c4 10             	add    $0x10,%esp
f0113e47:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f0113e4a:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0113e4e:	74 17                	je     f0113e67 <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0113e50:	83 ec 04             	sub    $0x4,%esp
f0113e53:	68 78 c4 12 f0       	push   $0xf012c478
f0113e58:	68 97 01 00 00       	push   $0x197
f0113e5d:	68 22 c2 12 f0       	push   $0xf012c222
f0113e62:	e8 b3 c4 fe ff       	call   f010031a <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f0113e67:	83 ec 0c             	sub    $0xc,%esp
f0113e6a:	68 9c c4 12 f0       	push   $0xf012c49c
f0113e6f:	e8 f8 d0 fe ff       	call   f0100f6c <cprintf>
f0113e74:	83 c4 10             	add    $0x10,%esp
	return 0;
f0113e77:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113e7c:	c9                   	leave  
f0113e7d:	c3                   	ret    

f0113e7e <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0113e7e:	55                   	push   %ebp
f0113e7f:	89 e5                	mov    %esp,%ebp
f0113e81:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f0113e84:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0113e8b:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113e90:	83 ec 08             	sub    $0x8,%esp
f0113e93:	ff 75 f4             	pushl  -0xc(%ebp)
f0113e96:	50                   	push   %eax
f0113e97:	e8 99 4d ff ff       	call   f0108c35 <pt_clear_page_table_entry>
f0113e9c:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f0113e9f:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113ea4:	83 ec 08             	sub    $0x8,%esp
f0113ea7:	ff 75 f4             	pushl  -0xc(%ebp)
f0113eaa:	50                   	push   %eax
f0113eab:	e8 14 49 00 00       	call   f01187c4 <CE>
f0113eb0:	83 c4 10             	add    $0x10,%esp
f0113eb3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0113eb6:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0113eba:	74 17                	je     f0113ed3 <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f0113ebc:	83 ec 04             	sub    $0x4,%esp
f0113ebf:	68 e4 c4 12 f0       	push   $0xf012c4e4
f0113ec4:	68 a7 01 00 00       	push   $0x1a7
f0113ec9:	68 22 c2 12 f0       	push   $0xf012c222
f0113ece:	e8 47 c4 fe ff       	call   f010031a <_panic>
	}

	va = 0xF0001000;
f0113ed3:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0113eda:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113edf:	83 ec 08             	sub    $0x8,%esp
f0113ee2:	ff 75 f4             	pushl  -0xc(%ebp)
f0113ee5:	50                   	push   %eax
f0113ee6:	e8 4a 4d ff ff       	call   f0108c35 <pt_clear_page_table_entry>
f0113eeb:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0113eee:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113ef3:	83 ec 08             	sub    $0x8,%esp
f0113ef6:	ff 75 f4             	pushl  -0xc(%ebp)
f0113ef9:	50                   	push   %eax
f0113efa:	e8 c5 48 00 00       	call   f01187c4 <CE>
f0113eff:	83 c4 10             	add    $0x10,%esp
f0113f02:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0113f05:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0113f09:	74 17                	je     f0113f22 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f0113f0b:	83 ec 04             	sub    $0x4,%esp
f0113f0e:	68 10 c5 12 f0       	push   $0xf012c510
f0113f13:	68 af 01 00 00       	push   $0x1af
f0113f18:	68 22 c2 12 f0       	push   $0xf012c222
f0113f1d:	e8 f8 c3 fe ff       	call   f010031a <_panic>
	}

	va = 0xEF800000;
f0113f22:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0113f29:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113f2e:	83 ec 08             	sub    $0x8,%esp
f0113f31:	ff 75 f4             	pushl  -0xc(%ebp)
f0113f34:	50                   	push   %eax
f0113f35:	e8 fb 4c ff ff       	call   f0108c35 <pt_clear_page_table_entry>
f0113f3a:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0113f3d:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113f42:	83 ec 08             	sub    $0x8,%esp
f0113f45:	ff 75 f4             	pushl  -0xc(%ebp)
f0113f48:	50                   	push   %eax
f0113f49:	e8 76 48 00 00       	call   f01187c4 <CE>
f0113f4e:	83 c4 10             	add    $0x10,%esp
f0113f51:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0113f54:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0113f58:	74 17                	je     f0113f71 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f0113f5a:	83 ec 04             	sub    $0x4,%esp
f0113f5d:	68 3c c5 12 f0       	push   $0xf012c53c
f0113f62:	68 b7 01 00 00       	push   $0x1b7
f0113f67:	68 22 c2 12 f0       	push   $0xf012c222
f0113f6c:	e8 a9 c3 fe ff       	call   f010031a <_panic>
	}

	va = 0xF0000000;
f0113f71:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0113f78:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113f7d:	83 ec 08             	sub    $0x8,%esp
f0113f80:	ff 75 f4             	pushl  -0xc(%ebp)
f0113f83:	50                   	push   %eax
f0113f84:	e8 ac 4c ff ff       	call   f0108c35 <pt_clear_page_table_entry>
f0113f89:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0113f8c:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113f91:	83 ec 08             	sub    $0x8,%esp
f0113f94:	ff 75 f4             	pushl  -0xc(%ebp)
f0113f97:	50                   	push   %eax
f0113f98:	e8 27 48 00 00       	call   f01187c4 <CE>
f0113f9d:	83 c4 10             	add    $0x10,%esp
f0113fa0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0113fa3:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0113fa7:	74 17                	je     f0113fc0 <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0113fa9:	83 ec 04             	sub    $0x4,%esp
f0113fac:	68 68 c5 12 f0       	push   $0xf012c568
f0113fb1:	68 bf 01 00 00       	push   $0x1bf
f0113fb6:	68 22 c2 12 f0       	push   $0xf012c222
f0113fbb:	e8 5a c3 fe ff       	call   f010031a <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f0113fc0:	83 ec 0c             	sub    $0xc,%esp
f0113fc3:	68 94 c5 12 f0       	push   $0xf012c594
f0113fc8:	e8 9f cf fe ff       	call   f0100f6c <cprintf>
f0113fcd:	83 c4 10             	add    $0x10,%esp
	return 0;
f0113fd0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113fd5:	c9                   	leave  
f0113fd6:	c3                   	ret    

f0113fd7 <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f0113fd7:	55                   	push   %ebp
f0113fd8:	89 e5                	mov    %esp,%ebp
f0113fda:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f0113fdd:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0113fe4:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0113fe9:	83 ec 08             	sub    $0x8,%esp
f0113fec:	ff 75 f4             	pushl  -0xc(%ebp)
f0113fef:	50                   	push   %eax
f0113ff0:	e8 40 4c ff ff       	call   f0108c35 <pt_clear_page_table_entry>
f0113ff5:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f0113ff8:	83 ec 04             	sub    $0x4,%esp
f0113ffb:	68 e0 c5 12 f0       	push   $0xf012c5e0
f0114000:	68 ca 01 00 00       	push   $0x1ca
f0114005:	68 22 c2 12 f0       	push   $0xf012c222
f011400a:	e8 0b c3 fe ff       	call   f010031a <_panic>

f011400f <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f011400f:	55                   	push   %ebp
f0114010:	89 e5                	mov    %esp,%ebp
f0114012:	57                   	push   %edi
f0114013:	56                   	push   %esi
f0114014:	53                   	push   %ebx
f0114015:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011401b:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0114021:	bb 24 c9 12 f0       	mov    $0xf012c924,%ebx
f0114026:	ba 0f 00 00 00       	mov    $0xf,%edx
f011402b:	89 c7                	mov    %eax,%edi
f011402d:	89 de                	mov    %ebx,%esi
f011402f:	89 d1                	mov    %edx,%ecx
f0114031:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114033:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0114039:	b9 23 00 00 00       	mov    $0x23,%ecx
f011403e:	b0 00                	mov    $0x0,%al
f0114040:	89 d7                	mov    %edx,%edi
f0114042:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114044:	6a 00                	push   $0x0
f0114046:	6a 0a                	push   $0xa
f0114048:	6a 14                	push   $0x14
f011404a:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0114050:	50                   	push   %eax
f0114051:	e8 1a 5a ff ff       	call   f0109a70 <env_create>
f0114056:	83 c4 10             	add    $0x10,%esp
f0114059:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f011405c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011405f:	8b 40 64             	mov    0x64(%eax),%eax
f0114062:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0114065:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0114068:	8b 40 68             	mov    0x68(%eax),%eax
f011406b:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f011406e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114071:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0114074:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f011407b:	75 70 20 
f011407e:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0114085:	00 00 00 
f0114088:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f011408e:	b9 03 00 00 00       	mov    $0x3,%ecx
f0114093:	b8 00 00 00 00       	mov    $0x0,%eax
f0114098:	89 d7                	mov    %edx,%edi
f011409a:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011409c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011409f:	8b 40 10             	mov    0x10(%eax),%eax
f01140a2:	83 ec 08             	sub    $0x8,%esp
f01140a5:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f01140ab:	52                   	push   %edx
f01140ac:	50                   	push   %eax
f01140ad:	e8 32 e9 00 00       	call   f01229e4 <ltostr>
f01140b2:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01140b5:	83 ec 04             	sub    $0x4,%esp
f01140b8:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01140be:	50                   	push   %eax
f01140bf:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f01140c5:	50                   	push   %eax
f01140c6:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f01140cc:	50                   	push   %eax
f01140cd:	e8 eb e9 00 00       	call   f0122abd <strcconcat>
f01140d2:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f01140d5:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f01140dc:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f01140e3:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f01140ea:	83 ec 0c             	sub    $0xc,%esp
f01140ed:	ff 75 d4             	pushl  -0x2c(%ebp)
f01140f0:	e8 d0 48 00 00       	call   f01189c5 <ClearUserSpace>
f01140f5:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f01140f8:	83 ec 04             	sub    $0x4,%esp
f01140fb:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0114101:	50                   	push   %eax
f0114102:	68 76 c6 12 f0       	push   $0xf012c676
f0114107:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011410d:	50                   	push   %eax
f011410e:	e8 aa e9 00 00       	call   f0122abd <strcconcat>
f0114113:	83 c4 10             	add    $0x10,%esp
f0114116:	83 ec 0c             	sub    $0xc,%esp
f0114119:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f011411f:	50                   	push   %eax
f0114120:	e8 b7 dd fe ff       	call   f0101edc <execute_command>
f0114125:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f0114128:	83 ec 04             	sub    $0x4,%esp
f011412b:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0114131:	50                   	push   %eax
f0114132:	68 81 c6 12 f0       	push   $0xf012c681
f0114137:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011413d:	50                   	push   %eax
f011413e:	e8 7a e9 00 00       	call   f0122abd <strcconcat>
f0114143:	83 c4 10             	add    $0x10,%esp
f0114146:	83 ec 0c             	sub    $0xc,%esp
f0114149:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f011414f:	50                   	push   %eax
f0114150:	e8 87 dd fe ff       	call   f0101edc <execute_command>
f0114155:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f0114158:	83 ec 04             	sub    $0x4,%esp
f011415b:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0114161:	50                   	push   %eax
f0114162:	68 8c c6 12 f0       	push   $0xf012c68c
f0114167:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011416d:	50                   	push   %eax
f011416e:	e8 4a e9 00 00       	call   f0122abd <strcconcat>
f0114173:	83 c4 10             	add    $0x10,%esp
f0114176:	83 ec 0c             	sub    $0xc,%esp
f0114179:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f011417f:	50                   	push   %eax
f0114180:	e8 57 dd fe ff       	call   f0101edc <execute_command>
f0114185:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0114188:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f011418f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114192:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f0114195:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f011419c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011419f:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f01141a2:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f01141a9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01141ac:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f01141af:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01141b2:	83 ec 08             	sub    $0x8,%esp
f01141b5:	50                   	push   %eax
f01141b6:	ff 75 d4             	pushl  -0x2c(%ebp)
f01141b9:	e8 6e 47 00 00       	call   f011892c <GP>
f01141be:	83 c4 10             	add    $0x10,%esp
f01141c1:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f01141c4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f01141cb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f01141d2:	e8 32 98 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01141d7:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f01141da:	83 ec 0c             	sub    $0xc,%esp
f01141dd:	68 98 c6 12 f0       	push   $0xf012c698
f01141e2:	e8 85 cd fe ff       	call   f0100f6c <cprintf>
f01141e7:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f01141ea:	6a 03                	push   $0x3
f01141ec:	68 00 00 90 02       	push   $0x2900000
f01141f1:	68 00 00 80 02       	push   $0x2800000
f01141f6:	ff 75 d4             	pushl  -0x2c(%ebp)
f01141f9:	e8 d2 54 ff ff       	call   f01096d0 <cut_paste_pages>
f01141fe:	83 c4 10             	add    $0x10,%esp
f0114201:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f0114204:	e8 00 98 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114209:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f011420c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f0114213:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0114217:	75 08                	jne    f0114221 <test_cut_paste_pages+0x212>
f0114219:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011421c:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011421f:	74 2b                	je     f011424c <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0114221:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114224:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0114227:	83 ec 0c             	sub    $0xc,%esp
f011422a:	50                   	push   %eax
f011422b:	ff 75 b4             	pushl  -0x4c(%ebp)
f011422e:	68 c8 c6 12 f0       	push   $0xf012c6c8
f0114233:	68 04 02 00 00       	push   $0x204
f0114238:	68 22 c2 12 f0       	push   $0xf012c222
f011423d:	e8 75 c2 fe ff       	call   f01004b7 <_warn>
f0114242:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0114245:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f011424c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114250:	74 04                	je     f0114256 <test_cut_paste_pages+0x247>
f0114252:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0114256:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f011425d:	83 ec 08             	sub    $0x8,%esp
f0114260:	6a 00                	push   $0x0
f0114262:	6a 01                	push   $0x1
f0114264:	6a 00                	push   $0x0
f0114266:	68 ff 0f 00 00       	push   $0xfff
f011426b:	ff 75 bc             	pushl  -0x44(%ebp)
f011426e:	6a 01                	push   $0x1
f0114270:	68 00 30 00 00       	push   $0x3000
f0114275:	68 00 00 90 02       	push   $0x2900000
f011427a:	68 00 00 80 02       	push   $0x2800000
f011427f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114282:	e8 72 47 00 00       	call   f01189f9 <CCP>
f0114287:	83 c4 30             	add    $0x30,%esp
f011428a:	83 f8 01             	cmp    $0x1,%eax
f011428d:	74 21                	je     f01142b0 <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011428f:	83 ec 04             	sub    $0x4,%esp
f0114292:	68 1c c7 12 f0       	push   $0xf012c71c
f0114297:	68 0c 02 00 00       	push   $0x20c
f011429c:	68 22 c2 12 f0       	push   $0xf012c222
f01142a1:	e8 11 c2 fe ff       	call   f01004b7 <_warn>
f01142a6:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01142a9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f01142b0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01142b4:	74 04                	je     f01142ba <test_cut_paste_pages+0x2ab>
f01142b6:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f01142ba:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f01142c1:	83 ec 04             	sub    $0x4,%esp
f01142c4:	6a 00                	push   $0x0
f01142c6:	68 00 00 90 02       	push   $0x2900000
f01142cb:	ff 75 d4             	pushl  -0x2c(%ebp)
f01142ce:	e8 b7 41 00 00       	call   f011848a <CB>
f01142d3:	83 c4 10             	add    $0x10,%esp
f01142d6:	85 c0                	test   %eax,%eax
f01142d8:	0f 84 f6 00 00 00    	je     f01143d4 <test_cut_paste_pages+0x3c5>
f01142de:	83 ec 04             	sub    $0x4,%esp
f01142e1:	6a 00                	push   $0x0
f01142e3:	68 00 10 90 02       	push   $0x2901000
f01142e8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01142eb:	e8 9a 41 00 00       	call   f011848a <CB>
f01142f0:	83 c4 10             	add    $0x10,%esp
f01142f3:	85 c0                	test   %eax,%eax
f01142f5:	0f 84 d9 00 00 00    	je     f01143d4 <test_cut_paste_pages+0x3c5>
f01142fb:	83 ec 04             	sub    $0x4,%esp
f01142fe:	6a 00                	push   $0x0
f0114300:	68 00 20 90 02       	push   $0x2902000
f0114305:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114308:	e8 7d 41 00 00       	call   f011848a <CB>
f011430d:	83 c4 10             	add    $0x10,%esp
f0114310:	85 c0                	test   %eax,%eax
f0114312:	0f 84 bc 00 00 00    	je     f01143d4 <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f0114318:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f011431f:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f0114326:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f011432d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114330:	8a 00                	mov    (%eax),%al
f0114332:	3c 61                	cmp    $0x61,%al
f0114334:	75 12                	jne    f0114348 <test_cut_paste_pages+0x339>
f0114336:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0114339:	8a 00                	mov    (%eax),%al
f011433b:	3c 62                	cmp    $0x62,%al
f011433d:	75 09                	jne    f0114348 <test_cut_paste_pages+0x339>
f011433f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0114342:	8a 00                	mov    (%eax),%al
f0114344:	3c 63                	cmp    $0x63,%al
f0114346:	74 21                	je     f0114369 <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0114348:	83 ec 04             	sub    $0x4,%esp
f011434b:	68 68 c7 12 f0       	push   $0xf012c768
f0114350:	68 19 02 00 00       	push   $0x219
f0114355:	68 22 c2 12 f0       	push   $0xf012c222
f011435a:	e8 58 c1 fe ff       	call   f01004b7 <_warn>
f011435f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114362:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0114369:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011436d:	74 04                	je     f0114373 <test_cut_paste_pages+0x364>
f011436f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114373:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f011437a:	83 ec 04             	sub    $0x4,%esp
f011437d:	6a 01                	push   $0x1
f011437f:	68 00 10 90 02       	push   $0x2901000
f0114384:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114387:	e8 fe 40 00 00       	call   f011848a <CB>
f011438c:	83 c4 10             	add    $0x10,%esp
f011438f:	85 c0                	test   %eax,%eax
f0114391:	74 41                	je     f01143d4 <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f0114393:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0114396:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f0114399:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011439c:	8a 00                	mov    (%eax),%al
f011439e:	3c 79                	cmp    $0x79,%al
f01143a0:	74 21                	je     f01143c3 <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01143a2:	83 ec 04             	sub    $0x4,%esp
f01143a5:	68 68 c7 12 f0       	push   $0xf012c768
f01143aa:	68 24 02 00 00       	push   $0x224
f01143af:	68 22 c2 12 f0       	push   $0xf012c222
f01143b4:	e8 fe c0 fe ff       	call   f01004b7 <_warn>
f01143b9:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01143bc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f01143c3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01143c7:	74 04                	je     f01143cd <test_cut_paste_pages+0x3be>
f01143c9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01143cd:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f01143d4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01143d7:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f01143da:	6a 02                	push   $0x2
f01143dc:	68 00 f0 bf 02       	push   $0x2bff000
f01143e1:	68 00 10 90 02       	push   $0x2901000
f01143e6:	ff 75 d4             	pushl  -0x2c(%ebp)
f01143e9:	e8 e2 52 ff ff       	call   f01096d0 <cut_paste_pages>
f01143ee:	83 c4 10             	add    $0x10,%esp
f01143f1:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01143f4:	e8 10 96 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01143f9:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f01143fc:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0114400:	75 0b                	jne    f011440d <test_cut_paste_pages+0x3fe>
f0114402:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114405:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0114408:	83 f8 01             	cmp    $0x1,%eax
f011440b:	74 2b                	je     f0114438 <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f011440d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114410:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0114413:	83 ec 0c             	sub    $0xc,%esp
f0114416:	50                   	push   %eax
f0114417:	ff 75 b4             	pushl  -0x4c(%ebp)
f011441a:	68 c8 c6 12 f0       	push   $0xf012c6c8
f011441f:	68 35 02 00 00       	push   $0x235
f0114424:	68 22 c2 12 f0       	push   $0xf012c222
f0114429:	e8 89 c0 fe ff       	call   f01004b7 <_warn>
f011442e:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0114431:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0114438:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011443c:	74 04                	je     f0114442 <test_cut_paste_pages+0x433>
f011443e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0114442:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0114449:	83 ec 08             	sub    $0x8,%esp
f011444c:	6a 00                	push   $0x0
f011444e:	6a 01                	push   $0x1
f0114450:	6a 00                	push   $0x0
f0114452:	68 ff 0f 00 00       	push   $0xfff
f0114457:	ff 75 bc             	pushl  -0x44(%ebp)
f011445a:	6a 01                	push   $0x1
f011445c:	68 00 20 00 00       	push   $0x2000
f0114461:	68 00 f0 bf 02       	push   $0x2bff000
f0114466:	68 00 10 90 02       	push   $0x2901000
f011446b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011446e:	e8 86 45 00 00       	call   f01189f9 <CCP>
f0114473:	83 c4 30             	add    $0x30,%esp
f0114476:	83 f8 01             	cmp    $0x1,%eax
f0114479:	74 21                	je     f011449c <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011447b:	83 ec 04             	sub    $0x4,%esp
f011447e:	68 1c c7 12 f0       	push   $0xf012c71c
f0114483:	68 3d 02 00 00       	push   $0x23d
f0114488:	68 22 c2 12 f0       	push   $0xf012c222
f011448d:	e8 25 c0 fe ff       	call   f01004b7 <_warn>
f0114492:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0114495:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f011449c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01144a0:	74 04                	je     f01144a6 <test_cut_paste_pages+0x497>
f01144a2:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01144a6:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f01144ad:	83 ec 04             	sub    $0x4,%esp
f01144b0:	6a 00                	push   $0x0
f01144b2:	68 ff f7 bf 02       	push   $0x2bff7ff
f01144b7:	ff 75 d4             	pushl  -0x2c(%ebp)
f01144ba:	e8 cb 3f 00 00       	call   f011848a <CB>
f01144bf:	83 c4 10             	add    $0x10,%esp
f01144c2:	85 c0                	test   %eax,%eax
f01144c4:	74 6b                	je     f0114531 <test_cut_paste_pages+0x522>
f01144c6:	83 ec 04             	sub    $0x4,%esp
f01144c9:	6a 00                	push   $0x0
f01144cb:	68 ff 0f c0 02       	push   $0x2c00fff
f01144d0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01144d3:	e8 b2 3f 00 00       	call   f011848a <CB>
f01144d8:	83 c4 10             	add    $0x10,%esp
f01144db:	85 c0                	test   %eax,%eax
f01144dd:	74 52                	je     f0114531 <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f01144df:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f01144e6:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f01144ed:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01144f0:	8a 00                	mov    (%eax),%al
f01144f2:	3c 79                	cmp    $0x79,%al
f01144f4:	75 09                	jne    f01144ff <test_cut_paste_pages+0x4f0>
f01144f6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01144f9:	8a 00                	mov    (%eax),%al
f01144fb:	3c 63                	cmp    $0x63,%al
f01144fd:	74 21                	je     f0114520 <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01144ff:	83 ec 04             	sub    $0x4,%esp
f0114502:	68 68 c7 12 f0       	push   $0xf012c768
f0114507:	68 49 02 00 00       	push   $0x249
f011450c:	68 22 c2 12 f0       	push   $0xf012c222
f0114511:	e8 a1 bf fe ff       	call   f01004b7 <_warn>
f0114516:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114519:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0114520:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114524:	74 04                	je     f011452a <test_cut_paste_pages+0x51b>
f0114526:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011452a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f0114531:	83 ec 0c             	sub    $0xc,%esp
f0114534:	68 a1 c7 12 f0       	push   $0xf012c7a1
f0114539:	e8 2e ca fe ff       	call   f0100f6c <cprintf>
f011453e:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f0114541:	83 ec 0c             	sub    $0xc,%esp
f0114544:	68 b0 c7 12 f0       	push   $0xf012c7b0
f0114549:	e8 1e ca fe ff       	call   f0100f6c <cprintf>
f011454e:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f0114551:	83 ec 04             	sub    $0x4,%esp
f0114554:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f011455a:	50                   	push   %eax
f011455b:	68 d9 c7 12 f0       	push   $0xf012c7d9
f0114560:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0114566:	50                   	push   %eax
f0114567:	e8 51 e5 00 00       	call   f0122abd <strcconcat>
f011456c:	83 c4 10             	add    $0x10,%esp
f011456f:	83 ec 0c             	sub    $0xc,%esp
f0114572:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0114578:	50                   	push   %eax
f0114579:	e8 5e d9 fe ff       	call   f0101edc <execute_command>
f011457e:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f0114581:	83 ec 04             	sub    $0x4,%esp
f0114584:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f011458a:	50                   	push   %eax
f011458b:	68 e4 c7 12 f0       	push   $0xf012c7e4
f0114590:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0114596:	50                   	push   %eax
f0114597:	e8 21 e5 00 00       	call   f0122abd <strcconcat>
f011459c:	83 c4 10             	add    $0x10,%esp
f011459f:	83 ec 0c             	sub    $0xc,%esp
f01145a2:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f01145a8:	50                   	push   %eax
f01145a9:	e8 2e d9 fe ff       	call   f0101edc <execute_command>
f01145ae:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f01145b1:	83 ec 04             	sub    $0x4,%esp
f01145b4:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f01145ba:	50                   	push   %eax
f01145bb:	68 ef c7 12 f0       	push   $0xf012c7ef
f01145c0:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01145c6:	50                   	push   %eax
f01145c7:	e8 f1 e4 00 00       	call   f0122abd <strcconcat>
f01145cc:	83 c4 10             	add    $0x10,%esp
f01145cf:	83 ec 0c             	sub    $0xc,%esp
f01145d2:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f01145d8:	50                   	push   %eax
f01145d9:	e8 fe d8 fe ff       	call   f0101edc <execute_command>
f01145de:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f01145e1:	83 ec 04             	sub    $0x4,%esp
f01145e4:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f01145ea:	50                   	push   %eax
f01145eb:	68 fa c7 12 f0       	push   $0xf012c7fa
f01145f0:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01145f6:	50                   	push   %eax
f01145f7:	e8 c1 e4 00 00       	call   f0122abd <strcconcat>
f01145fc:	83 c4 10             	add    $0x10,%esp
f01145ff:	83 ec 0c             	sub    $0xc,%esp
f0114602:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0114608:	50                   	push   %eax
f0114609:	e8 ce d8 fe ff       	call   f0101edc <execute_command>
f011460e:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f0114611:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f0114618:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011461b:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f011461e:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f0114625:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114628:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f011462b:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f0114632:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114635:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f0114638:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f011463f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114642:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f0114645:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f011464c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011464f:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f0114652:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f0114659:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011465c:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f011465f:	83 ec 08             	sub    $0x8,%esp
f0114662:	68 00 00 c0 01       	push   $0x1c00000
f0114667:	ff 75 d4             	pushl  -0x2c(%ebp)
f011466a:	e8 bd 42 00 00       	call   f011892c <GP>
f011466f:	83 c4 10             	add    $0x10,%esp
f0114672:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f0114675:	83 ec 08             	sub    $0x8,%esp
f0114678:	68 00 00 40 01       	push   $0x1400000
f011467d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114680:	e8 a7 42 00 00       	call   f011892c <GP>
f0114685:	83 c4 10             	add    $0x10,%esp
f0114688:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f011468b:	e8 79 93 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114690:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f0114693:	6a 01                	push   $0x1
f0114695:	68 00 00 40 01       	push   $0x1400000
f011469a:	68 00 00 c0 01       	push   $0x1c00000
f011469f:	ff 75 d4             	pushl  -0x2c(%ebp)
f01146a2:	e8 29 50 ff ff       	call   f01096d0 <cut_paste_pages>
f01146a7:	83 c4 10             	add    $0x10,%esp
f01146aa:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01146ad:	e8 57 93 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01146b2:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f01146b5:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f01146b9:	75 08                	jne    f01146c3 <test_cut_paste_pages+0x6b4>
f01146bb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01146be:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01146c1:	74 2b                	je     f01146ee <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f01146c3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01146c6:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01146c9:	83 ec 0c             	sub    $0xc,%esp
f01146cc:	50                   	push   %eax
f01146cd:	ff 75 b4             	pushl  -0x4c(%ebp)
f01146d0:	68 08 c8 12 f0       	push   $0xf012c808
f01146d5:	68 6c 02 00 00       	push   $0x26c
f01146da:	68 22 c2 12 f0       	push   $0xf012c222
f01146df:	e8 d3 bd fe ff       	call   f01004b7 <_warn>
f01146e4:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01146e7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01146ee:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01146f2:	74 04                	je     f01146f8 <test_cut_paste_pages+0x6e9>
f01146f4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01146f8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f01146ff:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f0114706:	83 ec 08             	sub    $0x8,%esp
f0114709:	6a 00                	push   $0x0
f011470b:	68 ff 0f 00 00       	push   $0xfff
f0114710:	ff 75 a4             	pushl  -0x5c(%ebp)
f0114713:	68 ff 0f 00 00       	push   $0xfff
f0114718:	ff 75 a0             	pushl  -0x60(%ebp)
f011471b:	6a 01                	push   $0x1
f011471d:	68 00 10 00 00       	push   $0x1000
f0114722:	68 00 00 40 01       	push   $0x1400000
f0114727:	68 00 00 c0 01       	push   $0x1c00000
f011472c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011472f:	e8 c5 42 00 00       	call   f01189f9 <CCP>
f0114734:	83 c4 30             	add    $0x30,%esp
f0114737:	83 f8 01             	cmp    $0x1,%eax
f011473a:	74 28                	je     f0114764 <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011473c:	83 ec 04             	sub    $0x4,%esp
f011473f:	68 1c c7 12 f0       	push   $0xf012c71c
f0114744:	68 75 02 00 00       	push   $0x275
f0114749:	68 22 c2 12 f0       	push   $0xf012c222
f011474e:	e8 64 bd fe ff       	call   f01004b7 <_warn>
f0114753:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0114756:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f011475d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0114764:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114768:	74 04                	je     f011476e <test_cut_paste_pages+0x75f>
f011476a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f011476e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0114775:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0114779:	0f 84 92 00 00 00    	je     f0114811 <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f011477f:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0114786:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f011478d:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0114794:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f011479b:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f01147a2:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01147a9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01147ac:	8a 00                	mov    (%eax),%al
f01147ae:	3c 61                	cmp    $0x61,%al
f01147b0:	75 2d                	jne    f01147df <test_cut_paste_pages+0x7d0>
f01147b2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01147b5:	8a 00                	mov    (%eax),%al
f01147b7:	3c 78                	cmp    $0x78,%al
f01147b9:	75 24                	jne    f01147df <test_cut_paste_pages+0x7d0>
f01147bb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01147be:	8a 00                	mov    (%eax),%al
f01147c0:	3c 62                	cmp    $0x62,%al
f01147c2:	75 1b                	jne    f01147df <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01147c4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01147c7:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01147c9:	3c 79                	cmp    $0x79,%al
f01147cb:	75 12                	jne    f01147df <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01147cd:	8b 45 98             	mov    -0x68(%ebp),%eax
f01147d0:	8a 00                	mov    (%eax),%al
f01147d2:	3c 63                	cmp    $0x63,%al
f01147d4:	75 09                	jne    f01147df <test_cut_paste_pages+0x7d0>
f01147d6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01147d9:	8a 00                	mov    (%eax),%al
f01147db:	3c 7a                	cmp    $0x7a,%al
f01147dd:	74 21                	je     f0114800 <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01147df:	83 ec 04             	sub    $0x4,%esp
f01147e2:	68 68 c7 12 f0       	push   $0xf012c768
f01147e7:	68 87 02 00 00       	push   $0x287
f01147ec:	68 22 c2 12 f0       	push   $0xf012c222
f01147f1:	e8 c1 bc fe ff       	call   f01004b7 <_warn>
f01147f6:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01147f9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0114800:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114804:	74 04                	je     f011480a <test_cut_paste_pages+0x7fb>
f0114806:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011480a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f0114811:	e8 f3 91 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114816:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f0114819:	6a 03                	push   $0x3
f011481b:	68 00 f0 bf 01       	push   $0x1bff000
f0114820:	68 00 00 40 01       	push   $0x1400000
f0114825:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114828:	e8 a3 4e ff ff       	call   f01096d0 <cut_paste_pages>
f011482d:	83 c4 10             	add    $0x10,%esp
f0114830:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0114833:	e8 d1 91 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114838:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f011483b:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f011483f:	75 08                	jne    f0114849 <test_cut_paste_pages+0x83a>
f0114841:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114844:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0114847:	74 2b                	je     f0114874 <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0114849:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011484c:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011484f:	83 ec 0c             	sub    $0xc,%esp
f0114852:	50                   	push   %eax
f0114853:	ff 75 b4             	pushl  -0x4c(%ebp)
f0114856:	68 08 c8 12 f0       	push   $0xf012c808
f011485b:	68 96 02 00 00       	push   $0x296
f0114860:	68 22 c2 12 f0       	push   $0xf012c222
f0114865:	e8 4d bc fe ff       	call   f01004b7 <_warn>
f011486a:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011486d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0114874:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114878:	74 04                	je     f011487e <test_cut_paste_pages+0x86f>
f011487a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011487e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0114885:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f011488c:	83 ec 04             	sub    $0x4,%esp
f011488f:	6a 00                	push   $0x0
f0114891:	68 00 00 40 01       	push   $0x1400000
f0114896:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114899:	e8 ec 3b 00 00       	call   f011848a <CB>
f011489e:	83 c4 10             	add    $0x10,%esp
f01148a1:	83 f8 01             	cmp    $0x1,%eax
f01148a4:	0f 85 80 00 00 00    	jne    f011492a <test_cut_paste_pages+0x91b>
f01148aa:	83 ec 04             	sub    $0x4,%esp
f01148ad:	6a 00                	push   $0x0
f01148af:	68 00 10 40 01       	push   $0x1401000
f01148b4:	ff 75 d4             	pushl  -0x2c(%ebp)
f01148b7:	e8 ce 3b 00 00       	call   f011848a <CB>
f01148bc:	83 c4 10             	add    $0x10,%esp
f01148bf:	83 f8 01             	cmp    $0x1,%eax
f01148c2:	75 66                	jne    f011492a <test_cut_paste_pages+0x91b>
f01148c4:	83 ec 04             	sub    $0x4,%esp
f01148c7:	6a 00                	push   $0x0
f01148c9:	68 00 20 40 01       	push   $0x1402000
f01148ce:	ff 75 d4             	pushl  -0x2c(%ebp)
f01148d1:	e8 b4 3b 00 00       	call   f011848a <CB>
f01148d6:	83 c4 10             	add    $0x10,%esp
f01148d9:	83 f8 01             	cmp    $0x1,%eax
f01148dc:	75 4c                	jne    f011492a <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f01148de:	83 ec 04             	sub    $0x4,%esp
f01148e1:	6a 00                	push   $0x0
f01148e3:	68 00 f0 bf 01       	push   $0x1bff000
f01148e8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01148eb:	e8 9a 3b 00 00       	call   f011848a <CB>
f01148f0:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f01148f3:	85 c0                	test   %eax,%eax
f01148f5:	75 33                	jne    f011492a <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f01148f7:	83 ec 04             	sub    $0x4,%esp
f01148fa:	6a 00                	push   $0x0
f01148fc:	68 00 00 c0 01       	push   $0x1c00000
f0114901:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114904:	e8 81 3b 00 00       	call   f011848a <CB>
f0114909:	83 c4 10             	add    $0x10,%esp
f011490c:	83 f8 01             	cmp    $0x1,%eax
f011490f:	75 19                	jne    f011492a <test_cut_paste_pages+0x91b>
f0114911:	83 ec 04             	sub    $0x4,%esp
f0114914:	6a 00                	push   $0x0
f0114916:	68 00 10 c0 01       	push   $0x1c01000
f011491b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011491e:	e8 67 3b 00 00       	call   f011848a <CB>
f0114923:	83 c4 10             	add    $0x10,%esp
f0114926:	85 c0                	test   %eax,%eax
f0114928:	74 28                	je     f0114952 <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f011492a:	83 ec 04             	sub    $0x4,%esp
f011492d:	68 68 c8 12 f0       	push   $0xf012c868
f0114932:	68 9f 02 00 00       	push   $0x29f
f0114937:	68 22 c2 12 f0       	push   $0xf012c222
f011493c:	e8 76 bb fe ff       	call   f01004b7 <_warn>
f0114941:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0114944:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f011494b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0114952:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114956:	74 04                	je     f011495c <test_cut_paste_pages+0x94d>
f0114958:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f011495c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0114963:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0114967:	0f 84 99 00 00 00    	je     f0114a06 <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f011496d:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0114974:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f011497b:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0114982:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0114989:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0114990:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0114997:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011499a:	8a 00                	mov    (%eax),%al
f011499c:	3c 61                	cmp    $0x61,%al
f011499e:	75 2d                	jne    f01149cd <test_cut_paste_pages+0x9be>
f01149a0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01149a3:	8a 00                	mov    (%eax),%al
f01149a5:	3c 78                	cmp    $0x78,%al
f01149a7:	75 24                	jne    f01149cd <test_cut_paste_pages+0x9be>
f01149a9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01149ac:	8a 00                	mov    (%eax),%al
f01149ae:	3c 62                	cmp    $0x62,%al
f01149b0:	75 1b                	jne    f01149cd <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01149b2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01149b5:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01149b7:	3c 79                	cmp    $0x79,%al
f01149b9:	75 12                	jne    f01149cd <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01149bb:	8b 45 98             	mov    -0x68(%ebp),%eax
f01149be:	8a 00                	mov    (%eax),%al
f01149c0:	3c 63                	cmp    $0x63,%al
f01149c2:	75 09                	jne    f01149cd <test_cut_paste_pages+0x9be>
f01149c4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01149c7:	8a 00                	mov    (%eax),%al
f01149c9:	3c 7a                	cmp    $0x7a,%al
f01149cb:	74 28                	je     f01149f5 <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f01149cd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f01149d4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01149db:	83 ec 04             	sub    $0x4,%esp
f01149de:	68 68 c7 12 f0       	push   $0xf012c768
f01149e3:	68 b3 02 00 00       	push   $0x2b3
f01149e8:	68 22 c2 12 f0       	push   $0xf012c222
f01149ed:	e8 c5 ba fe ff       	call   f01004b7 <_warn>
f01149f2:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f01149f5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01149f9:	74 04                	je     f01149ff <test_cut_paste_pages+0x9f0>
f01149fb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01149ff:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0114a06:	83 ec 0c             	sub    $0xc,%esp
f0114a09:	68 a1 c8 12 f0       	push   $0xf012c8a1
f0114a0e:	e8 59 c5 fe ff       	call   f0100f6c <cprintf>
f0114a13:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f0114a16:	83 ec 08             	sub    $0x8,%esp
f0114a19:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114a1c:	68 b0 c8 12 f0       	push   $0xf012c8b0
f0114a21:	e8 46 c5 fe ff       	call   f0100f6c <cprintf>
f0114a26:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114a29:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114a2d:	75 10                	jne    f0114a3f <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f0114a2f:	83 ec 0c             	sub    $0xc,%esp
f0114a32:	68 e4 c8 12 f0       	push   $0xf012c8e4
f0114a37:	e8 30 c5 fe ff       	call   f0100f6c <cprintf>
f0114a3c:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114a3f:	a1 84 2b 5a f0       	mov    0xf05a2b84,%eax
f0114a44:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0114a47:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114a4a:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114a4d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114a52:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114a55:	5b                   	pop    %ebx
f0114a56:	5e                   	pop    %esi
f0114a57:	5f                   	pop    %edi
f0114a58:	5d                   	pop    %ebp
f0114a59:	c3                   	ret    

f0114a5a <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f0114a5a:	55                   	push   %ebp
f0114a5b:	89 e5                	mov    %esp,%ebp
f0114a5d:	57                   	push   %edi
f0114a5e:	56                   	push   %esi
f0114a5f:	53                   	push   %ebx
f0114a60:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114a66:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0114a6c:	bb 24 c9 12 f0       	mov    $0xf012c924,%ebx
f0114a71:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114a76:	89 c7                	mov    %eax,%edi
f0114a78:	89 de                	mov    %ebx,%esi
f0114a7a:	89 d1                	mov    %edx,%ecx
f0114a7c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114a7e:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0114a84:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114a89:	b0 00                	mov    $0x0,%al
f0114a8b:	89 d7                	mov    %edx,%edi
f0114a8d:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114a8f:	6a 00                	push   $0x0
f0114a91:	6a 0a                	push   $0xa
f0114a93:	6a 14                	push   $0x14
f0114a95:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0114a9b:	50                   	push   %eax
f0114a9c:	e8 cf 4f ff ff       	call   f0109a70 <env_create>
f0114aa1:	83 c4 10             	add    $0x10,%esp
f0114aa4:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114aa7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0114aaa:	8b 40 64             	mov    0x64(%eax),%eax
f0114aad:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0114ab0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0114ab3:	8b 40 68             	mov    0x68(%eax),%eax
f0114ab6:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0114abc:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0114ac2:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0114ac5:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f0114acc:	75 70 20 
f0114acf:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0114ad6:	00 00 00 
f0114ad9:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0114adf:	b9 03 00 00 00       	mov    $0x3,%ecx
f0114ae4:	b8 00 00 00 00       	mov    $0x0,%eax
f0114ae9:	89 d7                	mov    %edx,%edi
f0114aeb:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0114aed:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0114af0:	8b 40 10             	mov    0x10(%eax),%eax
f0114af3:	83 ec 08             	sub    $0x8,%esp
f0114af6:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0114afc:	52                   	push   %edx
f0114afd:	50                   	push   %eax
f0114afe:	e8 e1 de 00 00       	call   f01229e4 <ltostr>
f0114b03:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0114b06:	83 ec 04             	sub    $0x4,%esp
f0114b09:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0114b0f:	50                   	push   %eax
f0114b10:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0114b16:	50                   	push   %eax
f0114b17:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f0114b1d:	50                   	push   %eax
f0114b1e:	e8 9a df 00 00       	call   f0122abd <strcconcat>
f0114b23:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f0114b26:	83 ec 0c             	sub    $0xc,%esp
f0114b29:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114b2c:	e8 94 3e 00 00       	call   f01189c5 <ClearUserSpace>
f0114b31:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0114b34:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f0114b3b:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0114b42:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0114b49:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0114b50:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0114b57:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0114b5e:	83 ec 0c             	sub    $0xc,%esp
f0114b61:	68 58 c9 12 f0       	push   $0xf012c958
f0114b66:	e8 01 c4 fe ff       	call   f0100f6c <cprintf>
f0114b6b:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0114b6e:	83 ec 04             	sub    $0x4,%esp
f0114b71:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0114b77:	50                   	push   %eax
f0114b78:	68 8e c9 12 f0       	push   $0xf012c98e
f0114b7d:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0114b83:	50                   	push   %eax
f0114b84:	e8 34 df 00 00       	call   f0122abd <strcconcat>
f0114b89:	83 c4 10             	add    $0x10,%esp
f0114b8c:	83 ec 0c             	sub    $0xc,%esp
f0114b8f:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0114b95:	50                   	push   %eax
f0114b96:	e8 41 d3 fe ff       	call   f0101edc <execute_command>
f0114b9b:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0114b9e:	83 ec 04             	sub    $0x4,%esp
f0114ba1:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0114ba7:	50                   	push   %eax
f0114ba8:	68 93 c9 12 f0       	push   $0xf012c993
f0114bad:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0114bb3:	50                   	push   %eax
f0114bb4:	e8 04 df 00 00       	call   f0122abd <strcconcat>
f0114bb9:	83 c4 10             	add    $0x10,%esp
f0114bbc:	83 ec 0c             	sub    $0xc,%esp
f0114bbf:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0114bc5:	50                   	push   %eax
f0114bc6:	e8 11 d3 fe ff       	call   f0101edc <execute_command>
f0114bcb:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0114bce:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0114bd4:	bb 99 cc 12 f0       	mov    $0xf012cc99,%ebx
f0114bd9:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114bde:	89 c7                	mov    %eax,%edi
f0114be0:	89 de                	mov    %ebx,%esi
f0114be2:	89 d1                	mov    %edx,%ecx
f0114be4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114be6:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0114bec:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114bf1:	b0 00                	mov    $0x0,%al
f0114bf3:	89 d7                	mov    %edx,%edi
f0114bf5:	f3 aa                	rep stos %al,%es:(%edi)
f0114bf7:	83 ec 0c             	sub    $0xc,%esp
f0114bfa:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0114c00:	50                   	push   %eax
f0114c01:	e8 d6 d2 fe ff       	call   f0101edc <execute_command>
f0114c06:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0114c09:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0114c0f:	bb fd cc 12 f0       	mov    $0xf012ccfd,%ebx
f0114c14:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114c19:	89 c7                	mov    %eax,%edi
f0114c1b:	89 de                	mov    %ebx,%esi
f0114c1d:	89 d1                	mov    %edx,%ecx
f0114c1f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114c21:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0114c27:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114c2c:	b0 00                	mov    $0x0,%al
f0114c2e:	89 d7                	mov    %edx,%edi
f0114c30:	f3 aa                	rep stos %al,%es:(%edi)
f0114c32:	83 ec 0c             	sub    $0xc,%esp
f0114c35:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0114c3b:	50                   	push   %eax
f0114c3c:	e8 9b d2 fe ff       	call   f0101edc <execute_command>
f0114c41:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0114c44:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0114c4a:	bb 61 cd 12 f0       	mov    $0xf012cd61,%ebx
f0114c4f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114c54:	89 c7                	mov    %eax,%edi
f0114c56:	89 de                	mov    %ebx,%esi
f0114c58:	89 d1                	mov    %edx,%ecx
f0114c5a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114c5c:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0114c62:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114c67:	b0 00                	mov    $0x0,%al
f0114c69:	89 d7                	mov    %edx,%edi
f0114c6b:	f3 aa                	rep stos %al,%es:(%edi)
f0114c6d:	83 ec 0c             	sub    $0xc,%esp
f0114c70:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0114c76:	50                   	push   %eax
f0114c77:	e8 60 d2 fe ff       	call   f0101edc <execute_command>
f0114c7c:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0114c7f:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0114c85:	bb c5 cd 12 f0       	mov    $0xf012cdc5,%ebx
f0114c8a:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114c8f:	89 c7                	mov    %eax,%edi
f0114c91:	89 de                	mov    %ebx,%esi
f0114c93:	89 d1                	mov    %edx,%ecx
f0114c95:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114c97:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0114c9d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114ca2:	b0 00                	mov    $0x0,%al
f0114ca4:	89 d7                	mov    %edx,%edi
f0114ca6:	f3 aa                	rep stos %al,%es:(%edi)
f0114ca8:	83 ec 0c             	sub    $0xc,%esp
f0114cab:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0114cb1:	50                   	push   %eax
f0114cb2:	e8 25 d2 fe ff       	call   f0101edc <execute_command>
f0114cb7:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0114cba:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0114cc0:	bb 29 ce 12 f0       	mov    $0xf012ce29,%ebx
f0114cc5:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114cca:	89 c7                	mov    %eax,%edi
f0114ccc:	89 de                	mov    %ebx,%esi
f0114cce:	89 d1                	mov    %edx,%ecx
f0114cd0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114cd2:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0114cd8:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114cdd:	b0 00                	mov    $0x0,%al
f0114cdf:	89 d7                	mov    %edx,%edi
f0114ce1:	f3 aa                	rep stos %al,%es:(%edi)
f0114ce3:	83 ec 0c             	sub    $0xc,%esp
f0114ce6:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0114cec:	50                   	push   %eax
f0114ced:	e8 ea d1 fe ff       	call   f0101edc <execute_command>
f0114cf2:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0114cf5:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0114cfb:	bb 8d ce 12 f0       	mov    $0xf012ce8d,%ebx
f0114d00:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114d05:	89 c7                	mov    %eax,%edi
f0114d07:	89 de                	mov    %ebx,%esi
f0114d09:	89 d1                	mov    %edx,%ecx
f0114d0b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114d0d:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0114d13:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114d18:	b0 00                	mov    $0x0,%al
f0114d1a:	89 d7                	mov    %edx,%edi
f0114d1c:	f3 aa                	rep stos %al,%es:(%edi)
f0114d1e:	83 ec 0c             	sub    $0xc,%esp
f0114d21:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0114d27:	50                   	push   %eax
f0114d28:	e8 af d1 fe ff       	call   f0101edc <execute_command>
f0114d2d:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f0114d30:	83 ec 04             	sub    $0x4,%esp
f0114d33:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0114d39:	50                   	push   %eax
f0114d3a:	68 9b c9 12 f0       	push   $0xf012c99b
f0114d3f:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0114d45:	50                   	push   %eax
f0114d46:	e8 72 dd 00 00       	call   f0122abd <strcconcat>
f0114d4b:	83 c4 10             	add    $0x10,%esp
f0114d4e:	83 ec 0c             	sub    $0xc,%esp
f0114d51:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0114d57:	50                   	push   %eax
f0114d58:	e8 7f d1 fe ff       	call   f0101edc <execute_command>
f0114d5d:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f0114d60:	83 ec 04             	sub    $0x4,%esp
f0114d63:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0114d69:	50                   	push   %eax
f0114d6a:	68 a5 c9 12 f0       	push   $0xf012c9a5
f0114d6f:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0114d75:	50                   	push   %eax
f0114d76:	e8 42 dd 00 00       	call   f0122abd <strcconcat>
f0114d7b:	83 c4 10             	add    $0x10,%esp
f0114d7e:	83 ec 0c             	sub    $0xc,%esp
f0114d81:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0114d87:	50                   	push   %eax
f0114d88:	e8 4f d1 fe ff       	call   f0101edc <execute_command>
f0114d8d:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f0114d90:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0114d96:	bb f1 ce 12 f0       	mov    $0xf012cef1,%ebx
f0114d9b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114da0:	89 c7                	mov    %eax,%edi
f0114da2:	89 de                	mov    %ebx,%esi
f0114da4:	89 d1                	mov    %edx,%ecx
f0114da6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114da8:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0114dae:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114db3:	b0 00                	mov    $0x0,%al
f0114db5:	89 d7                	mov    %edx,%edi
f0114db7:	f3 aa                	rep stos %al,%es:(%edi)
f0114db9:	83 ec 0c             	sub    $0xc,%esp
f0114dbc:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0114dc2:	50                   	push   %eax
f0114dc3:	e8 14 d1 fe ff       	call   f0101edc <execute_command>
f0114dc8:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f0114dcb:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0114dd1:	bb 55 cf 12 f0       	mov    $0xf012cf55,%ebx
f0114dd6:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114ddb:	89 c7                	mov    %eax,%edi
f0114ddd:	89 de                	mov    %ebx,%esi
f0114ddf:	89 d1                	mov    %edx,%ecx
f0114de1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114de3:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0114de9:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114dee:	b0 00                	mov    $0x0,%al
f0114df0:	89 d7                	mov    %edx,%edi
f0114df2:	f3 aa                	rep stos %al,%es:(%edi)
f0114df4:	83 ec 0c             	sub    $0xc,%esp
f0114df7:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0114dfd:	50                   	push   %eax
f0114dfe:	e8 d9 d0 fe ff       	call   f0101edc <execute_command>
f0114e03:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0114e06:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0114e0c:	bb b9 cf 12 f0       	mov    $0xf012cfb9,%ebx
f0114e11:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114e16:	89 c7                	mov    %eax,%edi
f0114e18:	89 de                	mov    %ebx,%esi
f0114e1a:	89 d1                	mov    %edx,%ecx
f0114e1c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114e1e:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0114e24:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114e29:	b0 00                	mov    $0x0,%al
f0114e2b:	89 d7                	mov    %edx,%edi
f0114e2d:	f3 aa                	rep stos %al,%es:(%edi)
f0114e2f:	83 ec 0c             	sub    $0xc,%esp
f0114e32:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0114e38:	50                   	push   %eax
f0114e39:	e8 9e d0 fe ff       	call   f0101edc <execute_command>
f0114e3e:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f0114e41:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0114e48:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f0114e4f:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f0114e56:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f0114e5d:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0114e64:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f0114e6b:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0114e72:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0114e79:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f0114e80:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0114e87:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f0114e8e:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0114e95:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0114e98:	8a 00                	mov    (%eax),%al
f0114e9a:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f0114ea0:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114ea3:	8a 00                	mov    (%eax),%al
f0114ea5:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0114eab:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114eae:	8a 00                	mov    (%eax),%al
f0114eb0:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114eb6:	e8 4e 8b ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114ebb:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f0114ebe:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114ec1:	89 d0                	mov    %edx,%eax
f0114ec3:	01 c0                	add    %eax,%eax
f0114ec5:	01 d0                	add    %edx,%eax
f0114ec7:	01 c0                	add    %eax,%eax
f0114ec9:	50                   	push   %eax
f0114eca:	68 00 00 10 00       	push   $0x100000
f0114ecf:	6a 00                	push   $0x0
f0114ed1:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114ed4:	e8 11 48 ff ff       	call   f01096ea <copy_paste_chunk>
f0114ed9:	83 c4 10             	add    $0x10,%esp
f0114edc:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114edf:	e8 25 8b ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114ee4:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0114ee7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0114eee:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0114ef2:	75 08                	jne    f0114efc <test_copy_paste_chunk+0x4a2>
f0114ef4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0114ef7:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0114efa:	74 2b                	je     f0114f27 <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0114efc:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0114eff:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0114f02:	83 ec 0c             	sub    $0xc,%esp
f0114f05:	50                   	push   %eax
f0114f06:	ff 75 88             	pushl  -0x78(%ebp)
f0114f09:	68 b4 c9 12 f0       	push   $0xf012c9b4
f0114f0e:	68 06 03 00 00       	push   $0x306
f0114f13:	68 22 c2 12 f0       	push   $0xf012c222
f0114f18:	e8 9a b5 fe ff       	call   f01004b7 <_warn>
f0114f1d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f20:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0114f27:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114f2b:	74 04                	je     f0114f31 <test_copy_paste_chunk+0x4d7>
f0114f2d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114f31:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f0114f38:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114f3b:	8a 00                	mov    (%eax),%al
f0114f3d:	3c 61                	cmp    $0x61,%al
f0114f3f:	75 75                	jne    f0114fb6 <test_copy_paste_chunk+0x55c>
f0114f41:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114f44:	8a 00                	mov    (%eax),%al
f0114f46:	3c 78                	cmp    $0x78,%al
f0114f48:	75 6c                	jne    f0114fb6 <test_copy_paste_chunk+0x55c>
f0114f4a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114f4d:	8a 00                	mov    (%eax),%al
f0114f4f:	3c 62                	cmp    $0x62,%al
f0114f51:	75 63                	jne    f0114fb6 <test_copy_paste_chunk+0x55c>
f0114f53:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0114f56:	8a 00                	mov    (%eax),%al
f0114f58:	3c 79                	cmp    $0x79,%al
f0114f5a:	75 5a                	jne    f0114fb6 <test_copy_paste_chunk+0x55c>
f0114f5c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0114f5f:	8a 00                	mov    (%eax),%al
f0114f61:	3c 63                	cmp    $0x63,%al
f0114f63:	75 51                	jne    f0114fb6 <test_copy_paste_chunk+0x55c>
f0114f65:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0114f68:	8a 00                	mov    (%eax),%al
f0114f6a:	3c 7a                	cmp    $0x7a,%al
f0114f6c:	75 48                	jne    f0114fb6 <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f0114f6e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0114f71:	8a 00                	mov    (%eax),%al
f0114f73:	3c 64                	cmp    $0x64,%al
f0114f75:	75 3f                	jne    f0114fb6 <test_copy_paste_chunk+0x55c>
f0114f77:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0114f7a:	8a 10                	mov    (%eax),%dl
f0114f7c:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f0114f82:	38 c2                	cmp    %al,%dl
f0114f84:	75 30                	jne    f0114fb6 <test_copy_paste_chunk+0x55c>
f0114f86:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0114f89:	8a 00                	mov    (%eax),%al
f0114f8b:	3c 65                	cmp    $0x65,%al
f0114f8d:	75 27                	jne    f0114fb6 <test_copy_paste_chunk+0x55c>
f0114f8f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114f92:	8a 10                	mov    (%eax),%dl
f0114f94:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0114f9a:	38 c2                	cmp    %al,%dl
f0114f9c:	75 18                	jne    f0114fb6 <test_copy_paste_chunk+0x55c>
f0114f9e:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114fa1:	8a 00                	mov    (%eax),%al
f0114fa3:	3c 66                	cmp    $0x66,%al
f0114fa5:	75 0f                	jne    f0114fb6 <test_copy_paste_chunk+0x55c>
f0114fa7:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114faa:	8a 10                	mov    (%eax),%dl
f0114fac:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0114fb2:	38 c2                	cmp    %al,%dl
f0114fb4:	74 21                	je     f0114fd7 <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0114fb6:	83 ec 04             	sub    $0x4,%esp
f0114fb9:	68 18 ca 12 f0       	push   $0xf012ca18
f0114fbe:	68 0f 03 00 00       	push   $0x30f
f0114fc3:	68 22 c2 12 f0       	push   $0xf012c222
f0114fc8:	e8 ea b4 fe ff       	call   f01004b7 <_warn>
f0114fcd:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114fd0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0114fd7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114fdb:	74 04                	je     f0114fe1 <test_copy_paste_chunk+0x587>
f0114fdd:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114fe1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0114fe8:	83 ec 0c             	sub    $0xc,%esp
f0114feb:	68 52 ca 12 f0       	push   $0xf012ca52
f0114ff0:	e8 77 bf fe ff       	call   f0100f6c <cprintf>
f0114ff5:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0114ff8:	83 ec 0c             	sub    $0xc,%esp
f0114ffb:	68 64 ca 12 f0       	push   $0xf012ca64
f0115000:	e8 67 bf fe ff       	call   f0100f6c <cprintf>
f0115005:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0115008:	83 ec 04             	sub    $0x4,%esp
f011500b:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0115011:	50                   	push   %eax
f0115012:	68 9a ca 12 f0       	push   $0xf012ca9a
f0115017:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011501d:	50                   	push   %eax
f011501e:	e8 9a da 00 00       	call   f0122abd <strcconcat>
f0115023:	83 c4 10             	add    $0x10,%esp
f0115026:	83 ec 0c             	sub    $0xc,%esp
f0115029:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011502f:	50                   	push   %eax
f0115030:	e8 a7 ce fe ff       	call   f0101edc <execute_command>
f0115035:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f0115038:	83 ec 04             	sub    $0x4,%esp
f011503b:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0115041:	50                   	push   %eax
f0115042:	68 a4 ca 12 f0       	push   $0xf012caa4
f0115047:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011504d:	50                   	push   %eax
f011504e:	e8 6a da 00 00       	call   f0122abd <strcconcat>
f0115053:	83 c4 10             	add    $0x10,%esp
f0115056:	83 ec 0c             	sub    $0xc,%esp
f0115059:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011505f:	50                   	push   %eax
f0115060:	e8 77 ce fe ff       	call   f0101edc <execute_command>
f0115065:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f0115068:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f011506e:	bb 1d d0 12 f0       	mov    $0xf012d01d,%ebx
f0115073:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115078:	89 c7                	mov    %eax,%edi
f011507a:	89 de                	mov    %ebx,%esi
f011507c:	89 d1                	mov    %edx,%ecx
f011507e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115080:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0115086:	b9 55 00 00 00       	mov    $0x55,%ecx
f011508b:	b0 00                	mov    $0x0,%al
f011508d:	89 d7                	mov    %edx,%edi
f011508f:	f3 aa                	rep stos %al,%es:(%edi)
f0115091:	83 ec 0c             	sub    $0xc,%esp
f0115094:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f011509a:	50                   	push   %eax
f011509b:	e8 3c ce fe ff       	call   f0101edc <execute_command>
f01150a0:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f01150a3:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01150a9:	bb 81 d0 12 f0       	mov    $0xf012d081,%ebx
f01150ae:	ba 0f 00 00 00       	mov    $0xf,%edx
f01150b3:	89 c7                	mov    %eax,%edi
f01150b5:	89 de                	mov    %ebx,%esi
f01150b7:	89 d1                	mov    %edx,%ecx
f01150b9:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01150bb:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f01150c1:	b9 55 00 00 00       	mov    $0x55,%ecx
f01150c6:	b0 00                	mov    $0x0,%al
f01150c8:	89 d7                	mov    %edx,%edi
f01150ca:	f3 aa                	rep stos %al,%es:(%edi)
f01150cc:	83 ec 0c             	sub    $0xc,%esp
f01150cf:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01150d5:	50                   	push   %eax
f01150d6:	e8 01 ce fe ff       	call   f0101edc <execute_command>
f01150db:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f01150de:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01150e4:	bb e5 d0 12 f0       	mov    $0xf012d0e5,%ebx
f01150e9:	ba 0f 00 00 00       	mov    $0xf,%edx
f01150ee:	89 c7                	mov    %eax,%edi
f01150f0:	89 de                	mov    %ebx,%esi
f01150f2:	89 d1                	mov    %edx,%ecx
f01150f4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01150f6:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f01150fc:	b9 55 00 00 00       	mov    $0x55,%ecx
f0115101:	b0 00                	mov    $0x0,%al
f0115103:	89 d7                	mov    %edx,%edi
f0115105:	f3 aa                	rep stos %al,%es:(%edi)
f0115107:	83 ec 0c             	sub    $0xc,%esp
f011510a:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0115110:	50                   	push   %eax
f0115111:	e8 c6 cd fe ff       	call   f0101edc <execute_command>
f0115116:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f0115119:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f011511f:	bb 49 d1 12 f0       	mov    $0xf012d149,%ebx
f0115124:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115129:	89 c7                	mov    %eax,%edi
f011512b:	89 de                	mov    %ebx,%esi
f011512d:	89 d1                	mov    %edx,%ecx
f011512f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115131:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0115137:	b9 55 00 00 00       	mov    $0x55,%ecx
f011513c:	b0 00                	mov    $0x0,%al
f011513e:	89 d7                	mov    %edx,%edi
f0115140:	f3 aa                	rep stos %al,%es:(%edi)
f0115142:	83 ec 0c             	sub    $0xc,%esp
f0115145:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f011514b:	50                   	push   %eax
f011514c:	e8 8b cd fe ff       	call   f0101edc <execute_command>
f0115151:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f0115154:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011515a:	bb ad d1 12 f0       	mov    $0xf012d1ad,%ebx
f011515f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115164:	89 c7                	mov    %eax,%edi
f0115166:	89 de                	mov    %ebx,%esi
f0115168:	89 d1                	mov    %edx,%ecx
f011516a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011516c:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0115172:	b9 55 00 00 00       	mov    $0x55,%ecx
f0115177:	b0 00                	mov    $0x0,%al
f0115179:	89 d7                	mov    %edx,%edi
f011517b:	f3 aa                	rep stos %al,%es:(%edi)
f011517d:	83 ec 0c             	sub    $0xc,%esp
f0115180:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0115186:	50                   	push   %eax
f0115187:	e8 50 cd fe ff       	call   f0101edc <execute_command>
f011518c:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f011518f:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0115195:	bb 11 d2 12 f0       	mov    $0xf012d211,%ebx
f011519a:	ba 0f 00 00 00       	mov    $0xf,%edx
f011519f:	89 c7                	mov    %eax,%edi
f01151a1:	89 de                	mov    %ebx,%esi
f01151a3:	89 d1                	mov    %edx,%ecx
f01151a5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01151a7:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f01151ad:	b9 55 00 00 00       	mov    $0x55,%ecx
f01151b2:	b0 00                	mov    $0x0,%al
f01151b4:	89 d7                	mov    %edx,%edi
f01151b6:	f3 aa                	rep stos %al,%es:(%edi)
f01151b8:	83 ec 0c             	sub    $0xc,%esp
f01151bb:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01151c1:	50                   	push   %eax
f01151c2:	e8 15 cd fe ff       	call   f0101edc <execute_command>
f01151c7:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f01151ca:	83 ec 04             	sub    $0x4,%esp
f01151cd:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01151d3:	50                   	push   %eax
f01151d4:	68 ae ca 12 f0       	push   $0xf012caae
f01151d9:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01151df:	50                   	push   %eax
f01151e0:	e8 d8 d8 00 00       	call   f0122abd <strcconcat>
f01151e5:	83 c4 10             	add    $0x10,%esp
f01151e8:	83 ec 0c             	sub    $0xc,%esp
f01151eb:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01151f1:	50                   	push   %eax
f01151f2:	e8 e5 cc fe ff       	call   f0101edc <execute_command>
f01151f7:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f01151fa:	83 ec 04             	sub    $0x4,%esp
f01151fd:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0115203:	50                   	push   %eax
f0115204:	68 b8 ca 12 f0       	push   $0xf012cab8
f0115209:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011520f:	50                   	push   %eax
f0115210:	e8 a8 d8 00 00       	call   f0122abd <strcconcat>
f0115215:	83 c4 10             	add    $0x10,%esp
f0115218:	83 ec 0c             	sub    $0xc,%esp
f011521b:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0115221:	50                   	push   %eax
f0115222:	e8 b5 cc fe ff       	call   f0101edc <execute_command>
f0115227:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f011522a:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0115230:	bb 75 d2 12 f0       	mov    $0xf012d275,%ebx
f0115235:	ba 0f 00 00 00       	mov    $0xf,%edx
f011523a:	89 c7                	mov    %eax,%edi
f011523c:	89 de                	mov    %ebx,%esi
f011523e:	89 d1                	mov    %edx,%ecx
f0115240:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115242:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0115248:	b9 55 00 00 00       	mov    $0x55,%ecx
f011524d:	b0 00                	mov    $0x0,%al
f011524f:	89 d7                	mov    %edx,%edi
f0115251:	f3 aa                	rep stos %al,%es:(%edi)
f0115253:	83 ec 0c             	sub    $0xc,%esp
f0115256:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011525c:	50                   	push   %eax
f011525d:	e8 7a cc fe ff       	call   f0101edc <execute_command>
f0115262:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f0115265:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011526b:	bb d9 d2 12 f0       	mov    $0xf012d2d9,%ebx
f0115270:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115275:	89 c7                	mov    %eax,%edi
f0115277:	89 de                	mov    %ebx,%esi
f0115279:	89 d1                	mov    %edx,%ecx
f011527b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011527d:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0115283:	b9 55 00 00 00       	mov    $0x55,%ecx
f0115288:	b0 00                	mov    $0x0,%al
f011528a:	89 d7                	mov    %edx,%edi
f011528c:	f3 aa                	rep stos %al,%es:(%edi)
f011528e:	83 ec 0c             	sub    $0xc,%esp
f0115291:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0115297:	50                   	push   %eax
f0115298:	e8 3f cc fe ff       	call   f0101edc <execute_command>
f011529d:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f01152a0:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01152a6:	bb 3d d3 12 f0       	mov    $0xf012d33d,%ebx
f01152ab:	ba 0f 00 00 00       	mov    $0xf,%edx
f01152b0:	89 c7                	mov    %eax,%edi
f01152b2:	89 de                	mov    %ebx,%esi
f01152b4:	89 d1                	mov    %edx,%ecx
f01152b6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01152b8:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01152be:	b9 55 00 00 00       	mov    $0x55,%ecx
f01152c3:	b0 00                	mov    $0x0,%al
f01152c5:	89 d7                	mov    %edx,%edi
f01152c7:	f3 aa                	rep stos %al,%es:(%edi)
f01152c9:	83 ec 0c             	sub    $0xc,%esp
f01152cc:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01152d2:	50                   	push   %eax
f01152d3:	e8 04 cc fe ff       	call   f0101edc <execute_command>
f01152d8:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f01152db:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f01152e2:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f01152e9:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f01152f0:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f01152f7:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f01152fe:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f0115305:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f011530c:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f0115313:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f011531a:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f0115321:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f0115328:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f011532f:	8b 45 90             	mov    -0x70(%ebp),%eax
f0115332:	8a 00                	mov    (%eax),%al
f0115334:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011533a:	e8 ca 86 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011533f:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f0115342:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115345:	89 d0                	mov    %edx,%eax
f0115347:	01 c0                	add    %eax,%eax
f0115349:	01 d0                	add    %edx,%eax
f011534b:	01 c0                	add    %eax,%eax
f011534d:	50                   	push   %eax
f011534e:	68 00 00 40 00       	push   $0x400000
f0115353:	68 00 00 20 00       	push   $0x200000
f0115358:	ff 75 d4             	pushl  -0x2c(%ebp)
f011535b:	e8 8a 43 ff ff       	call   f01096ea <copy_paste_chunk>
f0115360:	83 c4 10             	add    $0x10,%esp
f0115363:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0115366:	e8 9e 86 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011536b:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f011536e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0115375:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0115379:	75 08                	jne    f0115383 <test_copy_paste_chunk+0x929>
f011537b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011537e:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0115381:	74 2b                	je     f01153ae <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0115383:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0115386:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0115389:	83 ec 0c             	sub    $0xc,%esp
f011538c:	50                   	push   %eax
f011538d:	ff 75 80             	pushl  -0x80(%ebp)
f0115390:	68 c4 ca 12 f0       	push   $0xf012cac4
f0115395:	68 3f 03 00 00       	push   $0x33f
f011539a:	68 22 c2 12 f0       	push   $0xf012c222
f011539f:	e8 13 b1 fe ff       	call   f01004b7 <_warn>
f01153a4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01153a7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01153ae:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01153b2:	74 04                	je     f01153b8 <test_copy_paste_chunk+0x95e>
f01153b4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01153b8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f01153bf:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f01153c6:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01153c9:	83 ec 08             	sub    $0x8,%esp
f01153cc:	6a 01                	push   $0x1
f01153ce:	6a 07                	push   $0x7
f01153d0:	6a 07                	push   $0x7
f01153d2:	6a 07                	push   $0x7
f01153d4:	6a 07                	push   $0x7
f01153d6:	6a 01                	push   $0x1
f01153d8:	68 00 20 00 00       	push   $0x2000
f01153dd:	68 00 00 40 00       	push   $0x400000
f01153e2:	68 00 00 20 00       	push   $0x200000
f01153e7:	ff 75 d4             	pushl  -0x2c(%ebp)
f01153ea:	e8 0a 36 00 00       	call   f01189f9 <CCP>
f01153ef:	83 c4 30             	add    $0x30,%esp
f01153f2:	83 f8 01             	cmp    $0x1,%eax
f01153f5:	74 2b                	je     f0115422 <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f01153f7:	83 ec 04             	sub    $0x4,%esp
f01153fa:	68 18 cb 12 f0       	push   $0xf012cb18
f01153ff:	68 48 03 00 00       	push   $0x348
f0115404:	68 22 c2 12 f0       	push   $0xf012c222
f0115409:	e8 a9 b0 fe ff       	call   f01004b7 <_warn>
f011540e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115411:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f0115418:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f011541f:	00 00 00 
		}
		if (correct) eval += 5 ;
f0115422:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0115426:	74 04                	je     f011542c <test_copy_paste_chunk+0x9d2>
f0115428:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011542c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f0115433:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115436:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f0115439:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011543c:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f011543f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115442:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f0115445:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115448:	8a 00                	mov    (%eax),%al
f011544a:	3c 61                	cmp    $0x61,%al
f011544c:	75 69                	jne    f01154b7 <test_copy_paste_chunk+0xa5d>
f011544e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115451:	8a 00                	mov    (%eax),%al
f0115453:	3c 61                	cmp    $0x61,%al
f0115455:	75 60                	jne    f01154b7 <test_copy_paste_chunk+0xa5d>
f0115457:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011545a:	8a 00                	mov    (%eax),%al
f011545c:	3c 79                	cmp    $0x79,%al
f011545e:	75 57                	jne    f01154b7 <test_copy_paste_chunk+0xa5d>
f0115460:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0115463:	8a 00                	mov    (%eax),%al
f0115465:	3c 62                	cmp    $0x62,%al
f0115467:	75 4e                	jne    f01154b7 <test_copy_paste_chunk+0xa5d>
f0115469:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011546c:	8a 00                	mov    (%eax),%al
f011546e:	3c 63                	cmp    $0x63,%al
f0115470:	75 45                	jne    f01154b7 <test_copy_paste_chunk+0xa5d>
f0115472:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115475:	8a 00                	mov    (%eax),%al
f0115477:	3c 7a                	cmp    $0x7a,%al
f0115479:	75 3c                	jne    f01154b7 <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f011547b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011547e:	8a 00                	mov    (%eax),%al
f0115480:	3c 77                	cmp    $0x77,%al
f0115482:	75 33                	jne    f01154b7 <test_copy_paste_chunk+0xa5d>
f0115484:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0115487:	8a 00                	mov    (%eax),%al
f0115489:	3c 64                	cmp    $0x64,%al
f011548b:	75 2a                	jne    f01154b7 <test_copy_paste_chunk+0xa5d>
f011548d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0115490:	8a 00                	mov    (%eax),%al
f0115492:	3c 65                	cmp    $0x65,%al
f0115494:	75 21                	jne    f01154b7 <test_copy_paste_chunk+0xa5d>
f0115496:	8b 45 98             	mov    -0x68(%ebp),%eax
f0115499:	8a 00                	mov    (%eax),%al
f011549b:	3c 65                	cmp    $0x65,%al
f011549d:	75 18                	jne    f01154b7 <test_copy_paste_chunk+0xa5d>
f011549f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01154a2:	8a 00                	mov    (%eax),%al
f01154a4:	3c 66                	cmp    $0x66,%al
f01154a6:	75 0f                	jne    f01154b7 <test_copy_paste_chunk+0xa5d>
f01154a8:	8b 45 90             	mov    -0x70(%ebp),%eax
f01154ab:	8a 10                	mov    (%eax),%dl
f01154ad:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01154b3:	38 c2                	cmp    %al,%dl
f01154b5:	74 21                	je     f01154d8 <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01154b7:	83 ec 04             	sub    $0x4,%esp
f01154ba:	68 18 ca 12 f0       	push   $0xf012ca18
f01154bf:	68 56 03 00 00       	push   $0x356
f01154c4:	68 22 c2 12 f0       	push   $0xf012c222
f01154c9:	e8 e9 af fe ff       	call   f01004b7 <_warn>
f01154ce:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01154d1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01154d8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01154dc:	74 04                	je     f01154e2 <test_copy_paste_chunk+0xa88>
f01154de:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01154e2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f01154e9:	8b 45 98             	mov    -0x68(%ebp),%eax
f01154ec:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01154ef:	e8 15 85 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01154f4:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f01154f7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01154fa:	89 c2                	mov    %eax,%edx
f01154fc:	01 d2                	add    %edx,%edx
f01154fe:	01 d0                	add    %edx,%eax
f0115500:	50                   	push   %eax
f0115501:	68 00 08 20 00       	push   $0x200800
f0115506:	68 00 08 40 00       	push   $0x400800
f011550b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011550e:	e8 d7 41 ff ff       	call   f01096ea <copy_paste_chunk>
f0115513:	83 c4 10             	add    $0x10,%esp
f0115516:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0115519:	e8 eb 84 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011551e:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0115521:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0115525:	75 08                	jne    f011552f <test_copy_paste_chunk+0xad5>
f0115527:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011552a:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011552d:	74 2b                	je     f011555a <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011552f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0115532:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0115535:	83 ec 0c             	sub    $0xc,%esp
f0115538:	50                   	push   %eax
f0115539:	ff 75 80             	pushl  -0x80(%ebp)
f011553c:	68 c4 ca 12 f0       	push   $0xf012cac4
f0115541:	68 66 03 00 00       	push   $0x366
f0115546:	68 22 c2 12 f0       	push   $0xf012c222
f011554b:	e8 67 af fe ff       	call   f01004b7 <_warn>
f0115550:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115553:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011555a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011555e:	74 04                	je     f0115564 <test_copy_paste_chunk+0xb0a>
f0115560:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115564:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f011556b:	83 ec 08             	sub    $0x8,%esp
f011556e:	6a 01                	push   $0x1
f0115570:	6a 07                	push   $0x7
f0115572:	6a 07                	push   $0x7
f0115574:	6a 07                	push   $0x7
f0115576:	6a 07                	push   $0x7
f0115578:	6a 01                	push   $0x1
f011557a:	68 00 20 00 00       	push   $0x2000
f011557f:	68 00 00 20 00       	push   $0x200000
f0115584:	68 00 00 40 00       	push   $0x400000
f0115589:	ff 75 d4             	pushl  -0x2c(%ebp)
f011558c:	e8 68 34 00 00       	call   f01189f9 <CCP>
f0115591:	83 c4 30             	add    $0x30,%esp
f0115594:	83 f8 01             	cmp    $0x1,%eax
f0115597:	74 21                	je     f01155ba <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0115599:	83 ec 04             	sub    $0x4,%esp
f011559c:	68 64 cb 12 f0       	push   $0xf012cb64
f01155a1:	68 6e 03 00 00       	push   $0x36e
f01155a6:	68 22 c2 12 f0       	push   $0xf012c222
f01155ab:	e8 07 af fe ff       	call   f01004b7 <_warn>
f01155b0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01155b3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01155ba:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01155be:	74 04                	je     f01155c4 <test_copy_paste_chunk+0xb6a>
f01155c0:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01155c4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f01155cb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01155ce:	8a 00                	mov    (%eax),%al
f01155d0:	3c 61                	cmp    $0x61,%al
f01155d2:	75 69                	jne    f011563d <test_copy_paste_chunk+0xbe3>
f01155d4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01155d7:	8a 00                	mov    (%eax),%al
f01155d9:	3c 61                	cmp    $0x61,%al
f01155db:	75 60                	jne    f011563d <test_copy_paste_chunk+0xbe3>
f01155dd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01155e0:	8a 00                	mov    (%eax),%al
f01155e2:	3c 79                	cmp    $0x79,%al
f01155e4:	75 57                	jne    f011563d <test_copy_paste_chunk+0xbe3>
f01155e6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01155e9:	8a 00                	mov    (%eax),%al
f01155eb:	3c 62                	cmp    $0x62,%al
f01155ed:	75 4e                	jne    f011563d <test_copy_paste_chunk+0xbe3>
f01155ef:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01155f2:	8a 00                	mov    (%eax),%al
f01155f4:	3c 7a                	cmp    $0x7a,%al
f01155f6:	75 45                	jne    f011563d <test_copy_paste_chunk+0xbe3>
f01155f8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01155fb:	8a 00                	mov    (%eax),%al
f01155fd:	3c 7a                	cmp    $0x7a,%al
f01155ff:	75 3c                	jne    f011563d <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0115601:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115604:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0115606:	3c 64                	cmp    $0x64,%al
f0115608:	75 33                	jne    f011563d <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f011560a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011560d:	8a 00                	mov    (%eax),%al
f011560f:	3c 64                	cmp    $0x64,%al
f0115611:	75 2a                	jne    f011563d <test_copy_paste_chunk+0xbe3>
f0115613:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0115616:	8a 00                	mov    (%eax),%al
f0115618:	3c 65                	cmp    $0x65,%al
f011561a:	75 21                	jne    f011563d <test_copy_paste_chunk+0xbe3>
f011561c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011561f:	8a 00                	mov    (%eax),%al
f0115621:	3c 78                	cmp    $0x78,%al
f0115623:	75 18                	jne    f011563d <test_copy_paste_chunk+0xbe3>
f0115625:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0115628:	8a 00                	mov    (%eax),%al
f011562a:	3c 66                	cmp    $0x66,%al
f011562c:	75 0f                	jne    f011563d <test_copy_paste_chunk+0xbe3>
f011562e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0115631:	8a 10                	mov    (%eax),%dl
f0115633:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0115639:	38 c2                	cmp    %al,%dl
f011563b:	74 21                	je     f011565e <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f011563d:	83 ec 04             	sub    $0x4,%esp
f0115640:	68 18 ca 12 f0       	push   $0xf012ca18
f0115645:	68 77 03 00 00       	push   $0x377
f011564a:	68 22 c2 12 f0       	push   $0xf012c222
f011564f:	e8 63 ae fe ff       	call   f01004b7 <_warn>
f0115654:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115657:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011565e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0115662:	74 04                	je     f0115668 <test_copy_paste_chunk+0xc0e>
f0115664:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115668:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f011566f:	83 ec 0c             	sub    $0xc,%esp
f0115672:	68 af cb 12 f0       	push   $0xf012cbaf
f0115677:	e8 f0 b8 fe ff       	call   f0100f6c <cprintf>
f011567c:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f011567f:	83 ec 0c             	sub    $0xc,%esp
f0115682:	68 c0 cb 12 f0       	push   $0xf012cbc0
f0115687:	e8 e0 b8 fe ff       	call   f0100f6c <cprintf>
f011568c:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f011568f:	83 ec 04             	sub    $0x4,%esp
f0115692:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0115698:	50                   	push   %eax
f0115699:	68 f4 cb 12 f0       	push   $0xf012cbf4
f011569e:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01156a4:	50                   	push   %eax
f01156a5:	e8 13 d4 00 00       	call   f0122abd <strcconcat>
f01156aa:	83 c4 10             	add    $0x10,%esp
f01156ad:	83 ec 0c             	sub    $0xc,%esp
f01156b0:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01156b6:	50                   	push   %eax
f01156b7:	e8 20 c8 fe ff       	call   f0101edc <execute_command>
f01156bc:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f01156bf:	83 ec 04             	sub    $0x4,%esp
f01156c2:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01156c8:	50                   	push   %eax
f01156c9:	68 fe cb 12 f0       	push   $0xf012cbfe
f01156ce:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01156d4:	50                   	push   %eax
f01156d5:	e8 e3 d3 00 00       	call   f0122abd <strcconcat>
f01156da:	83 c4 10             	add    $0x10,%esp
f01156dd:	83 ec 0c             	sub    $0xc,%esp
f01156e0:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01156e6:	50                   	push   %eax
f01156e7:	e8 f0 c7 fe ff       	call   f0101edc <execute_command>
f01156ec:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f01156ef:	83 ec 04             	sub    $0x4,%esp
f01156f2:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01156f8:	50                   	push   %eax
f01156f9:	68 08 cc 12 f0       	push   $0xf012cc08
f01156fe:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0115704:	50                   	push   %eax
f0115705:	e8 b3 d3 00 00       	call   f0122abd <strcconcat>
f011570a:	83 c4 10             	add    $0x10,%esp
f011570d:	83 ec 0c             	sub    $0xc,%esp
f0115710:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0115716:	50                   	push   %eax
f0115717:	e8 c0 c7 fe ff       	call   f0101edc <execute_command>
f011571c:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f011571f:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0115725:	bb a1 d3 12 f0       	mov    $0xf012d3a1,%ebx
f011572a:	ba 0f 00 00 00       	mov    $0xf,%edx
f011572f:	89 c7                	mov    %eax,%edi
f0115731:	89 de                	mov    %ebx,%esi
f0115733:	89 d1                	mov    %edx,%ecx
f0115735:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115737:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f011573d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0115742:	b0 00                	mov    $0x0,%al
f0115744:	89 d7                	mov    %edx,%edi
f0115746:	f3 aa                	rep stos %al,%es:(%edi)
f0115748:	83 ec 0c             	sub    $0xc,%esp
f011574b:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0115751:	50                   	push   %eax
f0115752:	e8 85 c7 fe ff       	call   f0101edc <execute_command>
f0115757:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f011575a:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0115760:	bb 05 d4 12 f0       	mov    $0xf012d405,%ebx
f0115765:	ba 0f 00 00 00       	mov    $0xf,%edx
f011576a:	89 c7                	mov    %eax,%edi
f011576c:	89 de                	mov    %ebx,%esi
f011576e:	89 d1                	mov    %edx,%ecx
f0115770:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115772:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0115778:	b9 55 00 00 00       	mov    $0x55,%ecx
f011577d:	b0 00                	mov    $0x0,%al
f011577f:	89 d7                	mov    %edx,%edi
f0115781:	f3 aa                	rep stos %al,%es:(%edi)
f0115783:	83 ec 0c             	sub    $0xc,%esp
f0115786:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011578c:	50                   	push   %eax
f011578d:	e8 4a c7 fe ff       	call   f0101edc <execute_command>
f0115792:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0115795:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011579b:	bb 69 d4 12 f0       	mov    $0xf012d469,%ebx
f01157a0:	ba 0f 00 00 00       	mov    $0xf,%edx
f01157a5:	89 c7                	mov    %eax,%edi
f01157a7:	89 de                	mov    %ebx,%esi
f01157a9:	89 d1                	mov    %edx,%ecx
f01157ab:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01157ad:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01157b3:	b9 55 00 00 00       	mov    $0x55,%ecx
f01157b8:	b0 00                	mov    $0x0,%al
f01157ba:	89 d7                	mov    %edx,%edi
f01157bc:	f3 aa                	rep stos %al,%es:(%edi)
f01157be:	83 ec 0c             	sub    $0xc,%esp
f01157c1:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01157c7:	50                   	push   %eax
f01157c8:	e8 0f c7 fe ff       	call   f0101edc <execute_command>
f01157cd:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01157d0:	e8 34 82 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01157d5:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f01157d8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01157db:	89 d0                	mov    %edx,%eax
f01157dd:	01 c0                	add    %eax,%eax
f01157df:	01 d0                	add    %edx,%eax
f01157e1:	c1 e0 02             	shl    $0x2,%eax
f01157e4:	50                   	push   %eax
f01157e5:	68 00 00 90 00       	push   $0x900000
f01157ea:	68 00 00 80 00       	push   $0x800000
f01157ef:	ff 75 d4             	pushl  -0x2c(%ebp)
f01157f2:	e8 f3 3e ff ff       	call   f01096ea <copy_paste_chunk>
f01157f7:	83 c4 10             	add    $0x10,%esp
f01157fa:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0115800:	e8 04 82 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115805:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0115808:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f011580f:	75 0b                	jne    f011581c <test_copy_paste_chunk+0xdc2>
f0115811:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0115814:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0115817:	83 f8 03             	cmp    $0x3,%eax
f011581a:	74 2e                	je     f011584a <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011581c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011581f:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0115822:	83 ec 0c             	sub    $0xc,%esp
f0115825:	50                   	push   %eax
f0115826:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f011582c:	68 c4 ca 12 f0       	push   $0xf012cac4
f0115831:	68 95 03 00 00       	push   $0x395
f0115836:	68 22 c2 12 f0       	push   $0xf012c222
f011583b:	e8 77 ac fe ff       	call   f01004b7 <_warn>
f0115840:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115843:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011584a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011584e:	74 04                	je     f0115854 <test_copy_paste_chunk+0xdfa>
f0115850:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115854:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f011585b:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0115862:	83 ec 08             	sub    $0x8,%esp
f0115865:	6a 01                	push   $0x1
f0115867:	6a 07                	push   $0x7
f0115869:	6a 07                	push   $0x7
f011586b:	6a 07                	push   $0x7
f011586d:	6a 07                	push   $0x7
f011586f:	6a 01                	push   $0x1
f0115871:	68 00 30 00 00       	push   $0x3000
f0115876:	68 00 00 90 00       	push   $0x900000
f011587b:	68 00 00 80 00       	push   $0x800000
f0115880:	ff 75 d4             	pushl  -0x2c(%ebp)
f0115883:	e8 71 31 00 00       	call   f01189f9 <CCP>
f0115888:	83 c4 30             	add    $0x30,%esp
f011588b:	83 f8 01             	cmp    $0x1,%eax
f011588e:	74 28                	je     f01158b8 <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0115890:	83 ec 04             	sub    $0x4,%esp
f0115893:	68 64 cb 12 f0       	push   $0xf012cb64
f0115898:	68 9e 03 00 00       	push   $0x39e
f011589d:	68 22 c2 12 f0       	push   $0xf012c222
f01158a2:	e8 10 ac fe ff       	call   f01004b7 <_warn>
f01158a7:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01158aa:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f01158b1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f01158b8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01158bc:	74 04                	je     f01158c2 <test_copy_paste_chunk+0xe68>
f01158be:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01158c2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f01158c9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01158cd:	0f 84 9e 00 00 00    	je     f0115971 <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f01158d3:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f01158da:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f01158e1:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f01158e8:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f01158ef:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f01158f6:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f01158fd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115900:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0115903:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115906:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f0115909:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011590c:	8a 00                	mov    (%eax),%al
f011590e:	3c 61                	cmp    $0x61,%al
f0115910:	75 2d                	jne    f011593f <test_copy_paste_chunk+0xee5>
f0115912:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115915:	8a 00                	mov    (%eax),%al
f0115917:	3c 61                	cmp    $0x61,%al
f0115919:	75 24                	jne    f011593f <test_copy_paste_chunk+0xee5>
f011591b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011591e:	8a 00                	mov    (%eax),%al
f0115920:	3c 79                	cmp    $0x79,%al
f0115922:	75 1b                	jne    f011593f <test_copy_paste_chunk+0xee5>
f0115924:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0115927:	8a 00                	mov    (%eax),%al
f0115929:	3c 62                	cmp    $0x62,%al
f011592b:	75 12                	jne    f011593f <test_copy_paste_chunk+0xee5>
f011592d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115930:	8a 00                	mov    (%eax),%al
f0115932:	3c 63                	cmp    $0x63,%al
f0115934:	75 09                	jne    f011593f <test_copy_paste_chunk+0xee5>
f0115936:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115939:	8a 00                	mov    (%eax),%al
f011593b:	3c 7a                	cmp    $0x7a,%al
f011593d:	74 21                	je     f0115960 <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f011593f:	83 ec 04             	sub    $0x4,%esp
f0115942:	68 18 ca 12 f0       	push   $0xf012ca18
f0115947:	68 b0 03 00 00       	push   $0x3b0
f011594c:	68 22 c2 12 f0       	push   $0xf012c222
f0115951:	e8 61 ab fe ff       	call   f01004b7 <_warn>
f0115956:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0115959:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0115960:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0115964:	74 04                	je     f011596a <test_copy_paste_chunk+0xf10>
f0115966:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f011596a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0115971:	e8 93 80 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115976:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0115979:	6a 00                	push   $0x0
f011597b:	6a 02                	push   $0x2
f011597d:	68 00 10 90 00       	push   $0x901000
f0115982:	ff 75 d4             	pushl  -0x2c(%ebp)
f0115985:	e8 b1 2b 00 00       	call   f011853b <SB>
f011598a:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f011598d:	6a 00                	push   $0x0
f011598f:	6a 02                	push   $0x2
f0115991:	68 00 20 90 00       	push   $0x902000
f0115996:	ff 75 d4             	pushl  -0x2c(%ebp)
f0115999:	e8 9d 2b 00 00       	call   f011853b <SB>
f011599e:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f01159a1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01159a4:	c1 e0 03             	shl    $0x3,%eax
f01159a7:	50                   	push   %eax
f01159a8:	68 00 f0 bf 00       	push   $0xbff000
f01159ad:	68 00 10 90 00       	push   $0x901000
f01159b2:	ff 75 d4             	pushl  -0x2c(%ebp)
f01159b5:	e8 30 3d ff ff       	call   f01096ea <copy_paste_chunk>
f01159ba:	83 c4 10             	add    $0x10,%esp
f01159bd:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01159c3:	e8 41 80 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01159c8:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f01159cb:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f01159d2:	75 0b                	jne    f01159df <test_copy_paste_chunk+0xf85>
f01159d4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01159d7:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01159da:	83 f8 03             	cmp    $0x3,%eax
f01159dd:	74 2e                	je     f0115a0d <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01159df:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01159e2:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01159e5:	83 ec 0c             	sub    $0xc,%esp
f01159e8:	50                   	push   %eax
f01159e9:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f01159ef:	68 c4 ca 12 f0       	push   $0xf012cac4
f01159f4:	68 c0 03 00 00       	push   $0x3c0
f01159f9:	68 22 c2 12 f0       	push   $0xf012c222
f01159fe:	e8 b4 aa fe ff       	call   f01004b7 <_warn>
f0115a03:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a06:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0115a0d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0115a11:	74 04                	je     f0115a17 <test_copy_paste_chunk+0xfbd>
f0115a13:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115a17:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0115a1e:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f0115a25:	83 ec 08             	sub    $0x8,%esp
f0115a28:	6a 01                	push   $0x1
f0115a2a:	6a 07                	push   $0x7
f0115a2c:	6a 03                	push   $0x3
f0115a2e:	6a 07                	push   $0x7
f0115a30:	6a 03                	push   $0x3
f0115a32:	6a 01                	push   $0x1
f0115a34:	68 00 20 00 00       	push   $0x2000
f0115a39:	68 00 f0 bf 00       	push   $0xbff000
f0115a3e:	68 00 10 90 00       	push   $0x901000
f0115a43:	ff 75 d4             	pushl  -0x2c(%ebp)
f0115a46:	e8 ae 2f 00 00       	call   f01189f9 <CCP>
f0115a4b:	83 c4 30             	add    $0x30,%esp
f0115a4e:	83 f8 01             	cmp    $0x1,%eax
f0115a51:	74 28                	je     f0115a7b <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0115a53:	83 ec 04             	sub    $0x4,%esp
f0115a56:	68 64 cb 12 f0       	push   $0xf012cb64
f0115a5b:	68 c9 03 00 00       	push   $0x3c9
f0115a60:	68 22 c2 12 f0       	push   $0xf012c222
f0115a65:	e8 4d aa fe ff       	call   f01004b7 <_warn>
f0115a6a:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115a6d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0115a74:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0115a7b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0115a7f:	74 04                	je     f0115a85 <test_copy_paste_chunk+0x102b>
f0115a81:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115a85:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0115a8c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0115a90:	74 72                	je     f0115b04 <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0115a92:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0115a99:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0115aa0:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0115aa7:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f0115aae:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115ab1:	8a 00                	mov    (%eax),%al
f0115ab3:	3c 62                	cmp    $0x62,%al
f0115ab5:	75 1b                	jne    f0115ad2 <test_copy_paste_chunk+0x1078>
f0115ab7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115aba:	8a 00                	mov    (%eax),%al
f0115abc:	3c 62                	cmp    $0x62,%al
f0115abe:	75 12                	jne    f0115ad2 <test_copy_paste_chunk+0x1078>
f0115ac0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115ac3:	8a 00                	mov    (%eax),%al
f0115ac5:	3c 7a                	cmp    $0x7a,%al
f0115ac7:	75 09                	jne    f0115ad2 <test_copy_paste_chunk+0x1078>
f0115ac9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0115acc:	8a 00                	mov    (%eax),%al
f0115ace:	3c 7a                	cmp    $0x7a,%al
f0115ad0:	74 21                	je     f0115af3 <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0115ad2:	83 ec 04             	sub    $0x4,%esp
f0115ad5:	68 18 ca 12 f0       	push   $0xf012ca18
f0115ada:	68 d5 03 00 00       	push   $0x3d5
f0115adf:	68 22 c2 12 f0       	push   $0xf012c222
f0115ae4:	e8 ce a9 fe ff       	call   f01004b7 <_warn>
f0115ae9:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0115aec:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0115af3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0115af7:	74 04                	je     f0115afd <test_copy_paste_chunk+0x10a3>
f0115af9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0115afd:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0115b04:	83 ec 0c             	sub    $0xc,%esp
f0115b07:	68 12 cc 12 f0       	push   $0xf012cc12
f0115b0c:	e8 5b b4 fe ff       	call   f0100f6c <cprintf>
f0115b11:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0115b14:	83 ec 08             	sub    $0x8,%esp
f0115b17:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115b1a:	68 24 cc 12 f0       	push   $0xf012cc24
f0115b1f:	e8 48 b4 fe ff       	call   f0100f6c <cprintf>
f0115b24:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115b27:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0115b2b:	75 10                	jne    f0115b3d <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f0115b2d:	83 ec 0c             	sub    $0xc,%esp
f0115b30:	68 58 cc 12 f0       	push   $0xf012cc58
f0115b35:	e8 32 b4 fe ff       	call   f0100f6c <cprintf>
f0115b3a:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0115b3d:	a1 84 2b 5a f0       	mov    0xf05a2b84,%eax
f0115b42:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0115b45:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115b48:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115b4b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115b50:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115b53:	5b                   	pop    %ebx
f0115b54:	5e                   	pop    %esi
f0115b55:	5f                   	pop    %edi
f0115b56:	5d                   	pop    %ebp
f0115b57:	c3                   	ret    

f0115b58 <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0115b58:	55                   	push   %ebp
f0115b59:	89 e5                	mov    %esp,%ebp
f0115b5b:	57                   	push   %edi
f0115b5c:	56                   	push   %esi
f0115b5d:	53                   	push   %ebx
f0115b5e:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0115b64:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0115b6a:	bb 24 c9 12 f0       	mov    $0xf012c924,%ebx
f0115b6f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115b74:	89 c7                	mov    %eax,%edi
f0115b76:	89 de                	mov    %ebx,%esi
f0115b78:	89 d1                	mov    %edx,%ecx
f0115b7a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115b7c:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0115b82:	b9 23 00 00 00       	mov    $0x23,%ecx
f0115b87:	b0 00                	mov    $0x0,%al
f0115b89:	89 d7                	mov    %edx,%edi
f0115b8b:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0115b8d:	6a 00                	push   $0x0
f0115b8f:	6a 0a                	push   $0xa
f0115b91:	6a 14                	push   $0x14
f0115b93:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0115b99:	50                   	push   %eax
f0115b9a:	e8 d1 3e ff ff       	call   f0109a70 <env_create>
f0115b9f:	83 c4 10             	add    $0x10,%esp
f0115ba2:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0115ba5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115ba8:	8b 40 64             	mov    0x64(%eax),%eax
f0115bab:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0115bae:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115bb1:	8b 40 68             	mov    0x68(%eax),%eax
f0115bb4:	89 45 80             	mov    %eax,-0x80(%ebp)
f0115bb7:	8b 45 80             	mov    -0x80(%ebp),%eax
f0115bba:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0115bbd:	83 ec 0c             	sub    $0xc,%esp
f0115bc0:	ff 75 cc             	pushl  -0x34(%ebp)
f0115bc3:	e8 fd 2d 00 00       	call   f01189c5 <ClearUserSpace>
f0115bc8:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0115bcb:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0115bd2:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0115bd9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0115be0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0115be4:	83 ec 0c             	sub    $0xc,%esp
f0115be7:	68 d0 d4 12 f0       	push   $0xf012d4d0
f0115bec:	e8 7b b3 fe ff       	call   f0100f6c <cprintf>
f0115bf1:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0115bf4:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF0104000;
f0115bfb:	c7 45 b8 00 40 10 f0 	movl   $0xf0104000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0115c02:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115c05:	8a 00                	mov    (%eax),%al
f0115c07:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0115c0d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115c10:	8a 00                	mov    (%eax),%al
f0115c12:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0115c18:	e8 ec 7d ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115c1d:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0115c20:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115c23:	89 d0                	mov    %edx,%eax
f0115c25:	01 c0                	add    %eax,%eax
f0115c27:	01 d0                	add    %edx,%eax
f0115c29:	01 c0                	add    %eax,%eax
f0115c2b:	83 ec 0c             	sub    $0xc,%esp
f0115c2e:	6a 02                	push   $0x2
f0115c30:	50                   	push   %eax
f0115c31:	68 00 40 10 f0       	push   $0xf0104000
f0115c36:	68 00 00 10 f0       	push   $0xf0100000
f0115c3b:	ff 75 cc             	pushl  -0x34(%ebp)
f0115c3e:	e8 c1 3a ff ff       	call   f0109704 <share_chunk>
f0115c43:	83 c4 20             	add    $0x20,%esp
f0115c46:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0115c49:	e8 bb 7d ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115c4e:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0115c51:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0115c55:	75 08                	jne    f0115c5f <test_share_chunk+0x107>
f0115c57:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115c5a:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0115c5d:	74 28                	je     f0115c87 <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0115c5f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115c62:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0115c65:	83 ec 0c             	sub    $0xc,%esp
f0115c68:	50                   	push   %eax
f0115c69:	ff 75 b0             	pushl  -0x50(%ebp)
f0115c6c:	68 fc d4 12 f0       	push   $0xf012d4fc
f0115c71:	68 11 04 00 00       	push   $0x411
f0115c76:	68 22 c2 12 f0       	push   $0xf012c222
f0115c7b:	e8 37 a8 fe ff       	call   f01004b7 <_warn>
f0115c80:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115c83:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115c87:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115c8b:	74 04                	je     f0115c91 <test_share_chunk+0x139>
f0115c8d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115c91:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0115c95:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0115c98:	c1 e0 03             	shl    $0x3,%eax
f0115c9b:	83 ec 08             	sub    $0x8,%esp
f0115c9e:	68 fd 00 00 00       	push   $0xfd
f0115ca3:	6a 07                	push   $0x7
f0115ca5:	6a 03                	push   $0x3
f0115ca7:	6a 07                	push   $0x7
f0115ca9:	6a 03                	push   $0x3
f0115cab:	6a 01                	push   $0x1
f0115cad:	50                   	push   %eax
f0115cae:	68 00 40 10 f0       	push   $0xf0104000
f0115cb3:	68 00 00 10 f0       	push   $0xf0100000
f0115cb8:	ff 75 cc             	pushl  -0x34(%ebp)
f0115cbb:	e8 39 2d 00 00       	call   f01189f9 <CCP>
f0115cc0:	83 c4 30             	add    $0x30,%esp
f0115cc3:	85 c0                	test   %eax,%eax
f0115cc5:	75 1e                	jne    f0115ce5 <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0115cc7:	83 ec 04             	sub    $0x4,%esp
f0115cca:	68 58 d5 12 f0       	push   $0xf012d558
f0115ccf:	68 19 04 00 00       	push   $0x419
f0115cd4:	68 22 c2 12 f0       	push   $0xf012c222
f0115cd9:	e8 d9 a7 fe ff       	call   f01004b7 <_warn>
f0115cde:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115ce1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115ce5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115ce9:	74 04                	je     f0115cef <test_share_chunk+0x197>
f0115ceb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0115cef:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115cf2:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0115cf5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115cf8:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0115cfb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115cfe:	8a 00                	mov    (%eax),%al
f0115d00:	3c 41                	cmp    $0x41,%al
f0115d02:	75 09                	jne    f0115d0d <test_share_chunk+0x1b5>
f0115d04:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115d07:	8a 00                	mov    (%eax),%al
f0115d09:	3c 42                	cmp    $0x42,%al
f0115d0b:	74 1e                	je     f0115d2b <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0115d0d:	83 ec 04             	sub    $0x4,%esp
f0115d10:	68 a0 d5 12 f0       	push   $0xf012d5a0
f0115d15:	68 23 04 00 00       	push   $0x423
f0115d1a:	68 22 c2 12 f0       	push   $0xf012c222
f0115d1f:	e8 93 a7 fe ff       	call   f01004b7 <_warn>
f0115d24:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115d27:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115d2b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115d2f:	74 04                	je     f0115d35 <test_share_chunk+0x1dd>
f0115d31:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115d35:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f0115d39:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f0115d3f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115d42:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f0115d44:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f0115d4a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115d4d:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f0115d4f:	83 ec 0c             	sub    $0xc,%esp
f0115d52:	68 d5 d5 12 f0       	push   $0xf012d5d5
f0115d57:	e8 10 b2 fe ff       	call   f0100f6c <cprintf>
f0115d5c:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0115d5f:	83 ec 0c             	sub    $0xc,%esp
f0115d62:	68 e4 d5 12 f0       	push   $0xf012d5e4
f0115d67:	e8 00 b2 fe ff       	call   f0100f6c <cprintf>
f0115d6c:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0115d6f:	e8 95 7c ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115d74:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0115d77:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115d7a:	c1 e0 05             	shl    $0x5,%eax
f0115d7d:	83 ec 0c             	sub    $0xc,%esp
f0115d80:	68 02 0e 00 00       	push   $0xe02
f0115d85:	50                   	push   %eax
f0115d86:	68 00 00 00 40       	push   $0x40000000
f0115d8b:	68 00 00 00 f0       	push   $0xf0000000
f0115d90:	ff 75 cc             	pushl  -0x34(%ebp)
f0115d93:	e8 6c 39 ff ff       	call   f0109704 <share_chunk>
f0115d98:	83 c4 20             	add    $0x20,%esp
f0115d9b:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0115d9e:	e8 66 7c ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115da3:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0115da6:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0115daa:	75 1f                	jne    f0115dcb <test_share_chunk+0x273>
f0115dac:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115daf:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0115db2:	89 c1                	mov    %eax,%ecx
f0115db4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115db7:	c1 e0 05             	shl    $0x5,%eax
f0115dba:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0115dbd:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115dc4:	99                   	cltd   
f0115dc5:	f7 fb                	idiv   %ebx
f0115dc7:	39 c1                	cmp    %eax,%ecx
f0115dc9:	74 28                	je     f0115df3 <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0115dcb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115dce:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0115dd1:	83 ec 0c             	sub    $0xc,%esp
f0115dd4:	50                   	push   %eax
f0115dd5:	ff 75 a8             	pushl  -0x58(%ebp)
f0115dd8:	68 20 d6 12 f0       	push   $0xf012d620
f0115ddd:	68 3b 04 00 00       	push   $0x43b
f0115de2:	68 22 c2 12 f0       	push   $0xf012c222
f0115de7:	e8 cb a6 fe ff       	call   f01004b7 <_warn>
f0115dec:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115def:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115df3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115df7:	74 04                	je     f0115dfd <test_share_chunk+0x2a5>
f0115df9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115dfd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0115e01:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0115e08:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115e0b:	c1 e0 05             	shl    $0x5,%eax
f0115e0e:	83 ec 08             	sub    $0x8,%esp
f0115e11:	6a 02                	push   $0x2
f0115e13:	6a 07                	push   $0x7
f0115e15:	6a 03                	push   $0x3
f0115e17:	68 07 0e 00 00       	push   $0xe07
f0115e1c:	68 03 0e 00 00       	push   $0xe03
f0115e21:	6a ff                	push   $0xffffffff
f0115e23:	50                   	push   %eax
f0115e24:	68 00 00 00 40       	push   $0x40000000
f0115e29:	68 00 00 00 f0       	push   $0xf0000000
f0115e2e:	ff 75 cc             	pushl  -0x34(%ebp)
f0115e31:	e8 c3 2b 00 00       	call   f01189f9 <CCP>
f0115e36:	83 c4 30             	add    $0x30,%esp
f0115e39:	85 c0                	test   %eax,%eax
f0115e3b:	75 25                	jne    f0115e62 <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0115e3d:	83 ec 04             	sub    $0x4,%esp
f0115e40:	68 58 d5 12 f0       	push   $0xf012d558
f0115e45:	68 44 04 00 00       	push   $0x444
f0115e4a:	68 22 c2 12 f0       	push   $0xf012c222
f0115e4f:	e8 63 a6 fe ff       	call   f01004b7 <_warn>
f0115e54:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115e57:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0115e5b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0115e62:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115e65:	89 d0                	mov    %edx,%eax
f0115e67:	01 c0                	add    %eax,%eax
f0115e69:	01 d0                	add    %edx,%eax
f0115e6b:	c1 e0 02             	shl    $0x2,%eax
f0115e6e:	83 ec 08             	sub    $0x8,%esp
f0115e71:	6a 02                	push   $0x2
f0115e73:	6a 07                	push   $0x7
f0115e75:	6a 03                	push   $0x3
f0115e77:	68 07 0e 00 00       	push   $0xe07
f0115e7c:	68 03 0e 00 00       	push   $0xe03
f0115e81:	6a 02                	push   $0x2
f0115e83:	50                   	push   %eax
f0115e84:	68 00 00 00 40       	push   $0x40000000
f0115e89:	68 00 00 00 f0       	push   $0xf0000000
f0115e8e:	ff 75 cc             	pushl  -0x34(%ebp)
f0115e91:	e8 63 2b 00 00       	call   f01189f9 <CCP>
f0115e96:	83 c4 30             	add    $0x30,%esp
f0115e99:	85 c0                	test   %eax,%eax
f0115e9b:	75 1e                	jne    f0115ebb <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0115e9d:	83 ec 04             	sub    $0x4,%esp
f0115ea0:	68 58 d5 12 f0       	push   $0xf012d558
f0115ea5:	68 4b 04 00 00       	push   $0x44b
f0115eaa:	68 22 c2 12 f0       	push   $0xf012c222
f0115eaf:	e8 03 a6 fe ff       	call   f01004b7 <_warn>
f0115eb4:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115eb7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115ebb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115ebf:	74 04                	je     f0115ec5 <test_share_chunk+0x36d>
f0115ec1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115ec5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0115ec9:	b8 30 54 5c f0       	mov    $0xf05c5430,%eax
f0115ece:	05 00 00 00 10       	add    $0x10000000,%eax
f0115ed3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0115ed6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115ed9:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0115ede:	83 ec 08             	sub    $0x8,%esp
f0115ee1:	6a 02                	push   $0x2
f0115ee3:	6a 07                	push   $0x7
f0115ee5:	6a 03                	push   $0x3
f0115ee7:	68 07 0e 00 00       	push   $0xe07
f0115eec:	68 03 0e 00 00       	push   $0xe03
f0115ef1:	6a 02                	push   $0x2
f0115ef3:	50                   	push   %eax
f0115ef4:	68 00 00 0a 40       	push   $0x400a0000
f0115ef9:	68 00 00 0a f0       	push   $0xf00a0000
f0115efe:	ff 75 cc             	pushl  -0x34(%ebp)
f0115f01:	e8 f3 2a 00 00       	call   f01189f9 <CCP>
f0115f06:	83 c4 30             	add    $0x30,%esp
f0115f09:	85 c0                	test   %eax,%eax
f0115f0b:	75 1e                	jne    f0115f2b <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0115f0d:	83 ec 04             	sub    $0x4,%esp
f0115f10:	68 58 d5 12 f0       	push   $0xf012d558
f0115f15:	68 55 04 00 00       	push   $0x455
f0115f1a:	68 22 c2 12 f0       	push   $0xf012c222
f0115f1f:	e8 93 a5 fe ff       	call   f01004b7 <_warn>
f0115f24:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115f27:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115f2b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115f2f:	74 04                	je     f0115f35 <test_share_chunk+0x3dd>
f0115f31:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115f35:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0115f39:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0115f3d:	0f 84 a4 00 00 00    	je     f0115fe7 <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f0115f43:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f0115f4a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115f4d:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f0115f50:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f0115f57:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115f5a:	8a 00                	mov    (%eax),%al
f0115f5c:	3c 41                	cmp    $0x41,%al
f0115f5e:	75 09                	jne    f0115f69 <test_share_chunk+0x411>
f0115f60:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115f63:	8a 00                	mov    (%eax),%al
f0115f65:	3c 41                	cmp    $0x41,%al
f0115f67:	74 1e                	je     f0115f87 <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0115f69:	83 ec 04             	sub    $0x4,%esp
f0115f6c:	68 a0 d5 12 f0       	push   $0xf012d5a0
f0115f71:	68 62 04 00 00       	push   $0x462
f0115f76:	68 22 c2 12 f0       	push   $0xf012c222
f0115f7b:	e8 37 a5 fe ff       	call   f01004b7 <_warn>
f0115f80:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0115f83:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0115f87:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115f8b:	74 04                	je     f0115f91 <test_share_chunk+0x439>
f0115f8d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0115f91:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0115f95:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0115f9c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115f9f:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f0115fa2:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0115fa9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115fac:	8a 00                	mov    (%eax),%al
f0115fae:	3c 43                	cmp    $0x43,%al
f0115fb0:	75 09                	jne    f0115fbb <test_share_chunk+0x463>
f0115fb2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115fb5:	8a 00                	mov    (%eax),%al
f0115fb7:	3c 43                	cmp    $0x43,%al
f0115fb9:	74 1e                	je     f0115fd9 <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0115fbb:	83 ec 04             	sub    $0x4,%esp
f0115fbe:	68 a0 d5 12 f0       	push   $0xf012d5a0
f0115fc3:	68 6d 04 00 00       	push   $0x46d
f0115fc8:	68 22 c2 12 f0       	push   $0xf012c222
f0115fcd:	e8 e5 a4 fe ff       	call   f01004b7 <_warn>
f0115fd2:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0115fd5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0115fd9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115fdd:	74 04                	je     f0115fe3 <test_share_chunk+0x48b>
f0115fdf:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0115fe3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0115fe7:	83 ec 0c             	sub    $0xc,%esp
f0115fea:	68 af cb 12 f0       	push   $0xf012cbaf
f0115fef:	e8 78 af fe ff       	call   f0100f6c <cprintf>
f0115ff4:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0115ff7:	83 ec 0c             	sub    $0xc,%esp
f0115ffa:	68 70 d6 12 f0       	push   $0xf012d670
f0115fff:	e8 68 af fe ff       	call   f0100f6c <cprintf>
f0116004:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0116007:	e8 fd 79 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011600c:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f011600f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116012:	89 d0                	mov    %edx,%eax
f0116014:	c1 e0 03             	shl    $0x3,%eax
f0116017:	01 d0                	add    %edx,%eax
f0116019:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0116020:	01 d0                	add    %edx,%eax
f0116022:	c1 e0 03             	shl    $0x3,%eax
f0116025:	83 ec 0c             	sub    $0xc,%esp
f0116028:	6a 06                	push   $0x6
f011602a:	50                   	push   %eax
f011602b:	6a 00                	push   $0x0
f011602d:	68 00 00 00 40       	push   $0x40000000
f0116032:	ff 75 cc             	pushl  -0x34(%ebp)
f0116035:	e8 ca 36 ff ff       	call   f0109704 <share_chunk>
f011603a:	83 c4 20             	add    $0x20,%esp
f011603d:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0116040:	e8 c4 79 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116045:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0116048:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f011604c:	75 0b                	jne    f0116059 <test_share_chunk+0x501>
f011604e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116051:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0116054:	83 f8 01             	cmp    $0x1,%eax
f0116057:	74 28                	je     f0116081 <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0116059:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011605c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011605f:	83 ec 0c             	sub    $0xc,%esp
f0116062:	50                   	push   %eax
f0116063:	ff 75 a0             	pushl  -0x60(%ebp)
f0116066:	68 20 d6 12 f0       	push   $0xf012d620
f011606b:	68 83 04 00 00       	push   $0x483
f0116070:	68 22 c2 12 f0       	push   $0xf012c222
f0116075:	e8 3d a4 fe ff       	call   f01004b7 <_warn>
f011607a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011607d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116081:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116085:	74 04                	je     f011608b <test_share_chunk+0x533>
f0116087:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011608b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011608f:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0116096:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116099:	05 00 80 02 00       	add    $0x28000,%eax
f011609e:	c1 e0 02             	shl    $0x2,%eax
f01160a1:	83 ec 08             	sub    $0x8,%esp
f01160a4:	6a 02                	push   $0x2
f01160a6:	6a 07                	push   $0x7
f01160a8:	6a 03                	push   $0x3
f01160aa:	6a 07                	push   $0x7
f01160ac:	6a 07                	push   $0x7
f01160ae:	6a ff                	push   $0xffffffff
f01160b0:	50                   	push   %eax
f01160b1:	6a 00                	push   $0x0
f01160b3:	68 00 00 00 40       	push   $0x40000000
f01160b8:	ff 75 cc             	pushl  -0x34(%ebp)
f01160bb:	e8 39 29 00 00       	call   f01189f9 <CCP>
f01160c0:	83 c4 30             	add    $0x30,%esp
f01160c3:	85 c0                	test   %eax,%eax
f01160c5:	75 25                	jne    f01160ec <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01160c7:	83 ec 04             	sub    $0x4,%esp
f01160ca:	68 58 d5 12 f0       	push   $0xf012d558
f01160cf:	68 8c 04 00 00       	push   $0x48c
f01160d4:	68 22 c2 12 f0       	push   $0xf012c222
f01160d9:	e8 d9 a3 fe ff       	call   f01004b7 <_warn>
f01160de:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01160e1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01160e5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01160ec:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01160ef:	89 d0                	mov    %edx,%eax
f01160f1:	01 c0                	add    %eax,%eax
f01160f3:	01 d0                	add    %edx,%eax
f01160f5:	c1 e0 02             	shl    $0x2,%eax
f01160f8:	83 ec 08             	sub    $0x8,%esp
f01160fb:	6a 02                	push   $0x2
f01160fd:	6a 07                	push   $0x7
f01160ff:	6a 03                	push   $0x3
f0116101:	6a 07                	push   $0x7
f0116103:	6a 07                	push   $0x7
f0116105:	6a 03                	push   $0x3
f0116107:	50                   	push   %eax
f0116108:	6a 00                	push   $0x0
f011610a:	68 00 00 00 40       	push   $0x40000000
f011610f:	ff 75 cc             	pushl  -0x34(%ebp)
f0116112:	e8 e2 28 00 00       	call   f01189f9 <CCP>
f0116117:	83 c4 30             	add    $0x30,%esp
f011611a:	85 c0                	test   %eax,%eax
f011611c:	75 1e                	jne    f011613c <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011611e:	83 ec 04             	sub    $0x4,%esp
f0116121:	68 58 d5 12 f0       	push   $0xf012d558
f0116126:	68 93 04 00 00       	push   $0x493
f011612b:	68 22 c2 12 f0       	push   $0xf012c222
f0116130:	e8 82 a3 fe ff       	call   f01004b7 <_warn>
f0116135:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0116138:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011613c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116140:	74 04                	je     f0116146 <test_share_chunk+0x5ee>
f0116142:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116146:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011614a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011614d:	89 d0                	mov    %edx,%eax
f011614f:	01 c0                	add    %eax,%eax
f0116151:	01 d0                	add    %edx,%eax
f0116153:	c1 e0 02             	shl    $0x2,%eax
f0116156:	f7 d8                	neg    %eax
f0116158:	05 00 00 0a 00       	add    $0xa0000,%eax
f011615d:	83 ec 08             	sub    $0x8,%esp
f0116160:	6a 02                	push   $0x2
f0116162:	6a 07                	push   $0x7
f0116164:	6a 03                	push   $0x3
f0116166:	6a 07                	push   $0x7
f0116168:	6a 07                	push   $0x7
f011616a:	6a 02                	push   $0x2
f011616c:	50                   	push   %eax
f011616d:	68 00 30 00 00       	push   $0x3000
f0116172:	68 00 30 00 40       	push   $0x40003000
f0116177:	ff 75 cc             	pushl  -0x34(%ebp)
f011617a:	e8 7a 28 00 00       	call   f01189f9 <CCP>
f011617f:	83 c4 30             	add    $0x30,%esp
f0116182:	85 c0                	test   %eax,%eax
f0116184:	75 1e                	jne    f01161a4 <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0116186:	83 ec 04             	sub    $0x4,%esp
f0116189:	68 58 d5 12 f0       	push   $0xf012d558
f011618e:	68 9b 04 00 00       	push   $0x49b
f0116193:	68 22 c2 12 f0       	push   $0xf012c222
f0116198:	e8 1a a3 fe ff       	call   f01004b7 <_warn>
f011619d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01161a0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01161a4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01161a8:	74 04                	je     f01161ae <test_share_chunk+0x656>
f01161aa:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01161ae:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01161b2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01161b5:	c1 e0 02             	shl    $0x2,%eax
f01161b8:	83 ec 08             	sub    $0x8,%esp
f01161bb:	6a 02                	push   $0x2
f01161bd:	6a 07                	push   $0x7
f01161bf:	6a 03                	push   $0x3
f01161c1:	6a 07                	push   $0x7
f01161c3:	6a 07                	push   $0x7
f01161c5:	6a 03                	push   $0x3
f01161c7:	50                   	push   %eax
f01161c8:	68 00 00 0a 00       	push   $0xa0000
f01161cd:	68 00 00 0a 40       	push   $0x400a0000
f01161d2:	ff 75 cc             	pushl  -0x34(%ebp)
f01161d5:	e8 1f 28 00 00       	call   f01189f9 <CCP>
f01161da:	83 c4 30             	add    $0x30,%esp
f01161dd:	85 c0                	test   %eax,%eax
f01161df:	75 1e                	jne    f01161ff <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01161e1:	83 ec 04             	sub    $0x4,%esp
f01161e4:	68 58 d5 12 f0       	push   $0xf012d558
f01161e9:	68 a3 04 00 00       	push   $0x4a3
f01161ee:	68 22 c2 12 f0       	push   $0xf012c222
f01161f3:	e8 bf a2 fe ff       	call   f01004b7 <_warn>
f01161f8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01161fb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01161ff:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116203:	74 04                	je     f0116209 <test_share_chunk+0x6b1>
f0116205:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116209:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f011620d:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0116211:	0f 84 92 00 00 00    	je     f01162a9 <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f0116217:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f011621e:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f0116225:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f011622c:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f0116233:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116236:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f0116239:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f0116240:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0116247:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011624a:	8a 00                	mov    (%eax),%al
f011624c:	3c 41                	cmp    $0x41,%al
f011624e:	75 2d                	jne    f011627d <test_share_chunk+0x725>
f0116250:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116253:	8a 00                	mov    (%eax),%al
f0116255:	3c 41                	cmp    $0x41,%al
f0116257:	75 24                	jne    f011627d <test_share_chunk+0x725>
f0116259:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011625c:	8a 00                	mov    (%eax),%al
f011625e:	3c 41                	cmp    $0x41,%al
f0116260:	75 1b                	jne    f011627d <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0116262:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116265:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0116267:	3c 44                	cmp    $0x44,%al
f0116269:	75 12                	jne    f011627d <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f011626b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011626e:	8a 00                	mov    (%eax),%al
f0116270:	3c 44                	cmp    $0x44,%al
f0116272:	75 09                	jne    f011627d <test_share_chunk+0x725>
f0116274:	8b 45 90             	mov    -0x70(%ebp),%eax
f0116277:	8a 00                	mov    (%eax),%al
f0116279:	3c 44                	cmp    $0x44,%al
f011627b:	74 1e                	je     f011629b <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011627d:	83 ec 04             	sub    $0x4,%esp
f0116280:	68 a0 d5 12 f0       	push   $0xf012d5a0
f0116285:	68 b5 04 00 00       	push   $0x4b5
f011628a:	68 22 c2 12 f0       	push   $0xf012c222
f011628f:	e8 23 a2 fe ff       	call   f01004b7 <_warn>
f0116294:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0116297:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f011629b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011629f:	74 04                	je     f01162a5 <test_share_chunk+0x74d>
f01162a1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01162a5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f01162a9:	83 ec 0c             	sub    $0xc,%esp
f01162ac:	68 12 cc 12 f0       	push   $0xf012cc12
f01162b1:	e8 b6 ac fe ff       	call   f0100f6c <cprintf>
f01162b6:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f01162b9:	83 ec 0c             	sub    $0xc,%esp
f01162bc:	68 ac d6 12 f0       	push   $0xf012d6ac
f01162c1:	e8 a6 ac fe ff       	call   f0100f6c <cprintf>
f01162c6:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01162c9:	e8 3b 77 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01162ce:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f01162d1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01162d4:	89 d0                	mov    %edx,%eax
f01162d6:	01 c0                	add    %eax,%eax
f01162d8:	01 d0                	add    %edx,%eax
f01162da:	01 c0                	add    %eax,%eax
f01162dc:	01 d0                	add    %edx,%eax
f01162de:	83 ec 0c             	sub    $0xc,%esp
f01162e1:	6a 04                	push   $0x4
f01162e3:	50                   	push   %eax
f01162e4:	68 00 fc 3f 00       	push   $0x3ffc00
f01162e9:	68 00 fc 09 00       	push   $0x9fc00
f01162ee:	ff 75 cc             	pushl  -0x34(%ebp)
f01162f1:	e8 0e 34 ff ff       	call   f0109704 <share_chunk>
f01162f6:	83 c4 20             	add    $0x20,%esp
f01162f9:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01162fc:	e8 08 77 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116301:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0116304:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f0116308:	75 0b                	jne    f0116315 <test_share_chunk+0x7bd>
f011630a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011630d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0116310:	83 f8 01             	cmp    $0x1,%eax
f0116313:	74 28                	je     f011633d <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0116315:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116318:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011631b:	83 ec 0c             	sub    $0xc,%esp
f011631e:	50                   	push   %eax
f011631f:	ff 75 8c             	pushl  -0x74(%ebp)
f0116322:	68 20 d6 12 f0       	push   $0xf012d620
f0116327:	68 cb 04 00 00       	push   $0x4cb
f011632c:	68 22 c2 12 f0       	push   $0xf012c222
f0116331:	e8 81 a1 fe ff       	call   f01004b7 <_warn>
f0116336:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116339:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011633d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116341:	74 04                	je     f0116347 <test_share_chunk+0x7ef>
f0116343:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116347:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011634b:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0116352:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116355:	89 d0                	mov    %edx,%eax
f0116357:	01 c0                	add    %eax,%eax
f0116359:	01 d0                	add    %edx,%eax
f011635b:	c1 e0 02             	shl    $0x2,%eax
f011635e:	83 ec 08             	sub    $0x8,%esp
f0116361:	6a 02                	push   $0x2
f0116363:	6a 07                	push   $0x7
f0116365:	6a 07                	push   $0x7
f0116367:	6a 07                	push   $0x7
f0116369:	6a 05                	push   $0x5
f011636b:	6a ff                	push   $0xffffffff
f011636d:	50                   	push   %eax
f011636e:	68 00 f0 3f 00       	push   $0x3ff000
f0116373:	68 00 f0 09 00       	push   $0x9f000
f0116378:	ff 75 cc             	pushl  -0x34(%ebp)
f011637b:	e8 79 26 00 00       	call   f01189f9 <CCP>
f0116380:	83 c4 30             	add    $0x30,%esp
f0116383:	85 c0                	test   %eax,%eax
f0116385:	75 25                	jne    f01163ac <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0116387:	83 ec 04             	sub    $0x4,%esp
f011638a:	68 58 d5 12 f0       	push   $0xf012d558
f011638f:	68 d4 04 00 00       	push   $0x4d4
f0116394:	68 22 c2 12 f0       	push   $0xf012c222
f0116399:	e8 19 a1 fe ff       	call   f01004b7 <_warn>
f011639e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01163a1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01163a5:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f01163ac:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01163b0:	74 04                	je     f01163b6 <test_share_chunk+0x85e>
f01163b2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01163b6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01163ba:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01163bd:	c1 e0 02             	shl    $0x2,%eax
f01163c0:	83 ec 08             	sub    $0x8,%esp
f01163c3:	6a 02                	push   $0x2
f01163c5:	6a 07                	push   $0x7
f01163c7:	6a 07                	push   $0x7
f01163c9:	6a 07                	push   $0x7
f01163cb:	6a 05                	push   $0x5
f01163cd:	6a 03                	push   $0x3
f01163cf:	50                   	push   %eax
f01163d0:	68 00 f0 3f 00       	push   $0x3ff000
f01163d5:	68 00 f0 09 00       	push   $0x9f000
f01163da:	ff 75 cc             	pushl  -0x34(%ebp)
f01163dd:	e8 17 26 00 00       	call   f01189f9 <CCP>
f01163e2:	83 c4 30             	add    $0x30,%esp
f01163e5:	85 c0                	test   %eax,%eax
f01163e7:	75 1e                	jne    f0116407 <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01163e9:	83 ec 04             	sub    $0x4,%esp
f01163ec:	68 58 d5 12 f0       	push   $0xf012d558
f01163f1:	68 dd 04 00 00       	push   $0x4dd
f01163f6:	68 22 c2 12 f0       	push   $0xf012c222
f01163fb:	e8 b7 a0 fe ff       	call   f01004b7 <_warn>
f0116400:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0116403:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116407:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011640b:	74 04                	je     f0116411 <test_share_chunk+0x8b9>
f011640d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116411:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0116415:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116418:	c1 e0 03             	shl    $0x3,%eax
f011641b:	83 ec 08             	sub    $0x8,%esp
f011641e:	6a 02                	push   $0x2
f0116420:	6a 07                	push   $0x7
f0116422:	6a 07                	push   $0x7
f0116424:	6a 07                	push   $0x7
f0116426:	6a 05                	push   $0x5
f0116428:	6a 04                	push   $0x4
f011642a:	50                   	push   %eax
f011642b:	68 00 00 40 00       	push   $0x400000
f0116430:	68 00 00 0a 00       	push   $0xa0000
f0116435:	ff 75 cc             	pushl  -0x34(%ebp)
f0116438:	e8 bc 25 00 00       	call   f01189f9 <CCP>
f011643d:	83 c4 30             	add    $0x30,%esp
f0116440:	85 c0                	test   %eax,%eax
f0116442:	75 1e                	jne    f0116462 <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0116444:	83 ec 04             	sub    $0x4,%esp
f0116447:	68 58 d5 12 f0       	push   $0xf012d558
f011644c:	68 e5 04 00 00       	push   $0x4e5
f0116451:	68 22 c2 12 f0       	push   $0xf012c222
f0116456:	e8 5c a0 fe ff       	call   f01004b7 <_warn>
f011645b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011645e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116462:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116466:	74 04                	je     f011646c <test_share_chunk+0x914>
f0116468:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011646c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0116470:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0116474:	0f 84 b2 00 00 00    	je     f011652c <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f011647a:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f0116481:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f0116488:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f011648f:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f0116496:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f011649d:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f01164a4:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f01164ab:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f01164b2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01164b5:	8a 00                	mov    (%eax),%al
f01164b7:	3c 44                	cmp    $0x44,%al
f01164b9:	75 45                	jne    f0116500 <test_share_chunk+0x9a8>
f01164bb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01164be:	8a 00                	mov    (%eax),%al
f01164c0:	3c 44                	cmp    $0x44,%al
f01164c2:	75 3c                	jne    f0116500 <test_share_chunk+0x9a8>
f01164c4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01164c7:	8a 00                	mov    (%eax),%al
f01164c9:	3c 44                	cmp    $0x44,%al
f01164cb:	75 33                	jne    f0116500 <test_share_chunk+0x9a8>
f01164cd:	8b 45 98             	mov    -0x68(%ebp),%eax
f01164d0:	8a 00                	mov    (%eax),%al
f01164d2:	3c 44                	cmp    $0x44,%al
f01164d4:	75 2a                	jne    f0116500 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f01164d6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01164d9:	8a 10                	mov    (%eax),%dl
f01164db:	8b 45 90             	mov    -0x70(%ebp),%eax
f01164de:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f01164e0:	38 c2                	cmp    %al,%dl
f01164e2:	75 1c                	jne    f0116500 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f01164e4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01164e7:	8a 10                	mov    (%eax),%dl
f01164e9:	8b 45 88             	mov    -0x78(%ebp),%eax
f01164ec:	8a 00                	mov    (%eax),%al
f01164ee:	38 c2                	cmp    %al,%dl
f01164f0:	75 0e                	jne    f0116500 <test_share_chunk+0x9a8>
f01164f2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01164f5:	8a 10                	mov    (%eax),%dl
f01164f7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01164fa:	8a 00                	mov    (%eax),%al
f01164fc:	38 c2                	cmp    %al,%dl
f01164fe:	74 1e                	je     f011651e <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0116500:	83 ec 04             	sub    $0x4,%esp
f0116503:	68 a0 d5 12 f0       	push   $0xf012d5a0
f0116508:	68 fa 04 00 00       	push   $0x4fa
f011650d:	68 22 c2 12 f0       	push   $0xf012c222
f0116512:	e8 a0 9f fe ff       	call   f01004b7 <_warn>
f0116517:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011651a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f011651e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116522:	74 04                	je     f0116528 <test_share_chunk+0x9d0>
f0116524:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0116528:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f011652c:	83 ec 0c             	sub    $0xc,%esp
f011652f:	68 e4 d6 12 f0       	push   $0xf012d6e4
f0116534:	e8 33 aa fe ff       	call   f0100f6c <cprintf>
f0116539:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f011653c:	83 ec 08             	sub    $0x8,%esp
f011653f:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116542:	68 f4 d6 12 f0       	push   $0xf012d6f4
f0116547:	e8 20 aa fe ff       	call   f0100f6c <cprintf>
f011654c:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f011654f:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0116553:	75 10                	jne    f0116565 <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f0116555:	83 ec 0c             	sub    $0xc,%esp
f0116558:	68 24 d7 12 f0       	push   $0xf012d724
f011655d:	e8 0a aa fe ff       	call   f0100f6c <cprintf>
f0116562:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0116565:	a1 84 2b 5a f0       	mov    0xf05a2b84,%eax
f011656a:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011656d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116570:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0116573:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0116578:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011657b:	5b                   	pop    %ebx
f011657c:	5e                   	pop    %esi
f011657d:	5f                   	pop    %edi
f011657e:	5d                   	pop    %ebp
f011657f:	c3                   	ret    

f0116580 <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f0116580:	55                   	push   %ebp
f0116581:	89 e5                	mov    %esp,%ebp
f0116583:	57                   	push   %edi
f0116584:	56                   	push   %esi
f0116585:	53                   	push   %ebx
f0116586:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011658c:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0116592:	bb 24 c9 12 f0       	mov    $0xf012c924,%ebx
f0116597:	ba 0f 00 00 00       	mov    $0xf,%edx
f011659c:	89 c7                	mov    %eax,%edi
f011659e:	89 de                	mov    %ebx,%esi
f01165a0:	89 d1                	mov    %edx,%ecx
f01165a2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01165a4:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f01165aa:	b9 23 00 00 00       	mov    $0x23,%ecx
f01165af:	b0 00                	mov    $0x0,%al
f01165b1:	89 d7                	mov    %edx,%edi
f01165b3:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01165b5:	6a 00                	push   $0x0
f01165b7:	6a 0a                	push   $0xa
f01165b9:	6a 14                	push   $0x14
f01165bb:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01165c1:	50                   	push   %eax
f01165c2:	e8 a9 34 ff ff       	call   f0109a70 <env_create>
f01165c7:	83 c4 10             	add    $0x10,%esp
f01165ca:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01165cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01165d0:	8b 40 64             	mov    0x64(%eax),%eax
f01165d3:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f01165d6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01165d9:	8b 40 68             	mov    0x68(%eax),%eax
f01165dc:	89 45 90             	mov    %eax,-0x70(%ebp)
f01165df:	8b 45 90             	mov    -0x70(%ebp),%eax
f01165e2:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f01165e5:	83 ec 0c             	sub    $0xc,%esp
f01165e8:	ff 75 cc             	pushl  -0x34(%ebp)
f01165eb:	e8 d5 23 00 00       	call   f01189c5 <ClearUserSpace>
f01165f0:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01165f3:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f01165fa:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0116601:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint8 correct =1 ;
f0116608:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f011660c:	83 ec 0c             	sub    $0xc,%esp
f011660f:	68 60 d7 12 f0       	push   $0xf012d760
f0116614:	e8 53 a9 fe ff       	call   f0100f6c <cprintf>
f0116619:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERN_STACK_TOP - 1;
f011661c:	c7 45 e4 ff ff bf ef 	movl   $0xefbfffff,-0x1c(%ebp)
		ptr2 = (char*)KERN_STACK_TOP - 2;
f0116623:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		while ((ptr1 > (char*)(KERN_STACK_TOP - PAGE_SIZE)) && *ptr1 == 0)	ptr1-- ;
f011662a:	eb 03                	jmp    f011662f <test_allocate_chunk+0xaf>
f011662c:	ff 4d e4             	decl   -0x1c(%ebp)
f011662f:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f0116636:	76 09                	jbe    f0116641 <test_allocate_chunk+0xc1>
f0116638:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011663b:	8a 00                	mov    (%eax),%al
f011663d:	84 c0                	test   %al,%al
f011663f:	74 eb                	je     f011662c <test_allocate_chunk+0xac>
		if (ptr1 == (char*)(KERN_STACK_TOP - PAGE_SIZE))	*ptr1 = 'A' ;
f0116641:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f0116648:	75 06                	jne    f0116650 <test_allocate_chunk+0xd0>
f011664a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011664d:	c6 00 41             	movb   $0x41,(%eax)
		tptr[1] = *ptr1 ;
f0116650:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116653:	8a 00                	mov    (%eax),%al
f0116655:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f011665b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011665e:	8a 00                	mov    (%eax),%al
f0116660:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		cprintf("*ptr1 = %c\n", *ptr1) ;
f0116666:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116669:	8a 00                	mov    (%eax),%al
f011666b:	0f be c0             	movsbl %al,%eax
f011666e:	83 ec 08             	sub    $0x8,%esp
f0116671:	50                   	push   %eax
f0116672:	68 8a d7 12 f0       	push   $0xf012d78a
f0116677:	e8 f0 a8 fe ff       	call   f0100f6c <cprintf>
f011667c:	83 c4 10             	add    $0x10,%esp
		cprintf("*ptr2 = %c\n", *ptr2) ;
f011667f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116682:	8a 00                	mov    (%eax),%al
f0116684:	0f be c0             	movsbl %al,%eax
f0116687:	83 ec 08             	sub    $0x8,%esp
f011668a:	50                   	push   %eax
f011668b:	68 96 d7 12 f0       	push   $0xf012d796
f0116690:	e8 d7 a8 fe ff       	call   f0100f6c <cprintf>
f0116695:	83 c4 10             	add    $0x10,%esp
		uint32 old_perms = GP(proc_directory, KERN_STACK_TOP - 1*PAGE_SIZE) ;
f0116698:	83 ec 08             	sub    $0x8,%esp
f011669b:	68 00 f0 bf ef       	push   $0xefbff000
f01166a0:	ff 75 cc             	pushl  -0x34(%ebp)
f01166a3:	e8 84 22 00 00       	call   f011892c <GP>
f01166a8:	83 c4 10             	add    $0x10,%esp
f01166ab:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01166ae:	e8 56 73 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01166b3:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERN_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f01166b6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01166b9:	c1 e0 02             	shl    $0x2,%eax
f01166bc:	6a 02                	push   $0x2
f01166be:	50                   	push   %eax
f01166bf:	68 00 f0 bf ef       	push   $0xefbff000
f01166c4:	ff 75 cc             	pushl  -0x34(%ebp)
f01166c7:	e8 52 30 ff ff       	call   f010971e <allocate_chunk>
f01166cc:	83 c4 10             	add    $0x10,%esp
f01166cf:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01166d2:	e8 32 73 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01166d7:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01166da:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01166de:	75 08                	jne    f01166e8 <test_allocate_chunk+0x168>
f01166e0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01166e3:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01166e6:	74 2a                	je     f0116712 <test_allocate_chunk+0x192>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f01166e8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01166eb:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01166ee:	83 ec 08             	sub    $0x8,%esp
f01166f1:	6a 00                	push   $0x0
f01166f3:	50                   	push   %eax
f01166f4:	ff 75 b0             	pushl  -0x50(%ebp)
f01166f7:	68 a4 d7 12 f0       	push   $0xf012d7a4
f01166fc:	68 3a 05 00 00       	push   $0x53a
f0116701:	68 22 c2 12 f0       	push   $0xf012c222
f0116706:	e8 ac 9d fe ff       	call   f01004b7 <_warn>
f011670b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011670e:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0116712:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116716:	74 04                	je     f011671c <test_allocate_chunk+0x19c>
f0116718:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f011671c:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0116720:	e8 e4 72 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116725:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERN_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0116728:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011672b:	01 c0                	add    %eax,%eax
f011672d:	89 c1                	mov    %eax,%ecx
f011672f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116732:	89 d0                	mov    %edx,%eax
f0116734:	c1 e0 02             	shl    $0x2,%eax
f0116737:	01 d0                	add    %edx,%eax
f0116739:	f7 d8                	neg    %eax
f011673b:	2d 00 00 40 10       	sub    $0x10400000,%eax
f0116740:	6a 02                	push   $0x2
f0116742:	51                   	push   %ecx
f0116743:	50                   	push   %eax
f0116744:	ff 75 cc             	pushl  -0x34(%ebp)
f0116747:	e8 d2 2f ff ff       	call   f010971e <allocate_chunk>
f011674c:	83 c4 10             	add    $0x10,%esp
f011674f:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0116752:	e8 b2 72 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116757:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f011675a:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f011675e:	75 08                	jne    f0116768 <test_allocate_chunk+0x1e8>
f0116760:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116763:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0116766:	74 2a                	je     f0116792 <test_allocate_chunk+0x212>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0116768:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011676b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011676e:	83 ec 08             	sub    $0x8,%esp
f0116771:	6a 00                	push   $0x0
f0116773:	50                   	push   %eax
f0116774:	ff 75 b0             	pushl  -0x50(%ebp)
f0116777:	68 a4 d7 12 f0       	push   $0xf012d7a4
f011677c:	68 48 05 00 00       	push   $0x548
f0116781:	68 22 c2 12 f0       	push   $0xf012c222
f0116786:	e8 2c 9d fe ff       	call   f01004b7 <_warn>
f011678b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011678e:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0116792:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116796:	74 04                	je     f011679c <test_allocate_chunk+0x21c>
f0116798:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f011679c:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (CCP(proc_directory, 0, KERN_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f01167a0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01167a3:	c1 e0 02             	shl    $0x2,%eax
f01167a6:	83 ec 08             	sub    $0x8,%esp
f01167a9:	6a 03                	push   $0x3
f01167ab:	6a 00                	push   $0x0
f01167ad:	6a 00                	push   $0x0
f01167af:	68 ff 0f 00 00       	push   $0xfff
f01167b4:	ff 75 b8             	pushl  -0x48(%ebp)
f01167b7:	6a 01                	push   $0x1
f01167b9:	50                   	push   %eax
f01167ba:	68 00 f0 bf ef       	push   $0xefbff000
f01167bf:	6a 00                	push   $0x0
f01167c1:	ff 75 cc             	pushl  -0x34(%ebp)
f01167c4:	e8 30 22 00 00       	call   f01189f9 <CCP>
f01167c9:	83 c4 30             	add    $0x30,%esp
f01167cc:	85 c0                	test   %eax,%eax
f01167ce:	75 1e                	jne    f01167ee <test_allocate_chunk+0x26e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01167d0:	83 ec 04             	sub    $0x4,%esp
f01167d3:	68 0c d8 12 f0       	push   $0xf012d80c
f01167d8:	68 50 05 00 00       	push   $0x550
f01167dd:	68 22 c2 12 f0       	push   $0xf012c222
f01167e2:	e8 d0 9c fe ff       	call   f01004b7 <_warn>
f01167e7:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01167ea:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f01167ee:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01167f2:	74 04                	je     f01167f8 <test_allocate_chunk+0x278>
f01167f4:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f01167f8:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f01167fc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01167ff:	8a 10                	mov    (%eax),%dl
f0116801:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f0116807:	38 c2                	cmp    %al,%dl
f0116809:	75 0f                	jne    f011681a <test_allocate_chunk+0x29a>
f011680b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011680e:	8a 10                	mov    (%eax),%dl
f0116810:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f0116816:	38 c2                	cmp    %al,%dl
f0116818:	74 1e                	je     f0116838 <test_allocate_chunk+0x2b8>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f011681a:	83 ec 04             	sub    $0x4,%esp
f011681d:	68 58 d8 12 f0       	push   $0xf012d858
f0116822:	68 58 05 00 00       	push   $0x558
f0116827:	68 22 c2 12 f0       	push   $0xf012c222
f011682c:	e8 86 9c fe ff       	call   f01004b7 <_warn>
f0116831:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0116834:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0116838:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f011683c:	74 04                	je     f0116842 <test_allocate_chunk+0x2c2>
f011683e:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0116842:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0116846:	83 ec 0c             	sub    $0xc,%esp
f0116849:	68 d5 d5 12 f0       	push   $0xf012d5d5
f011684e:	e8 19 a7 fe ff       	call   f0100f6c <cprintf>
f0116853:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0116856:	83 ec 0c             	sub    $0xc,%esp
f0116859:	68 90 d8 12 f0       	push   $0xf012d890
f011685e:	e8 09 a7 fe ff       	call   f0100f6c <cprintf>
f0116863:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0116866:	e8 9e 71 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011686b:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f011686e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116871:	c1 e0 05             	shl    $0x5,%eax
f0116874:	68 02 0e 00 00       	push   $0xe02
f0116879:	50                   	push   %eax
f011687a:	6a 00                	push   $0x0
f011687c:	ff 75 cc             	pushl  -0x34(%ebp)
f011687f:	e8 9a 2e ff ff       	call   f010971e <allocate_chunk>
f0116884:	83 c4 10             	add    $0x10,%esp
f0116887:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011688a:	e8 7a 71 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011688f:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f0116892:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0116896:	75 36                	jne    f01168ce <test_allocate_chunk+0x34e>
f0116898:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011689b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011689e:	89 c1                	mov    %eax,%ecx
f01168a0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01168a3:	c1 e0 05             	shl    $0x5,%eax
f01168a6:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01168a9:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01168b0:	99                   	cltd   
f01168b1:	f7 fe                	idiv   %esi
f01168b3:	89 c3                	mov    %eax,%ebx
f01168b5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01168b8:	c1 e0 05             	shl    $0x5,%eax
f01168bb:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01168be:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01168c5:	99                   	cltd   
f01168c6:	f7 fe                	idiv   %esi
f01168c8:	01 d8                	add    %ebx,%eax
f01168ca:	39 c1                	cmp    %eax,%ecx
f01168cc:	74 54                	je     f0116922 <test_allocate_chunk+0x3a2>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f01168ce:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01168d1:	c1 e0 05             	shl    $0x5,%eax
f01168d4:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01168d7:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01168de:	99                   	cltd   
f01168df:	f7 ff                	idiv   %edi
f01168e1:	89 c1                	mov    %eax,%ecx
f01168e3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01168e6:	c1 e0 05             	shl    $0x5,%eax
f01168e9:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01168ec:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01168f3:	99                   	cltd   
f01168f4:	f7 fe                	idiv   %esi
f01168f6:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01168f9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01168fc:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01168ff:	83 ec 08             	sub    $0x8,%esp
f0116902:	52                   	push   %edx
f0116903:	50                   	push   %eax
f0116904:	ff 75 a8             	pushl  -0x58(%ebp)
f0116907:	68 d0 d8 12 f0       	push   $0xf012d8d0
f011690c:	68 6d 05 00 00       	push   $0x56d
f0116911:	68 22 c2 12 f0       	push   $0xf012c222
f0116916:	e8 9c 9b fe ff       	call   f01004b7 <_warn>
f011691b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011691e:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0116922:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116926:	74 04                	je     f011692c <test_allocate_chunk+0x3ac>
f0116928:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f011692c:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0116930:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0116937:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011693a:	c1 e0 05             	shl    $0x5,%eax
f011693d:	83 ec 08             	sub    $0x8,%esp
f0116940:	6a 03                	push   $0x3
f0116942:	6a 00                	push   $0x0
f0116944:	6a 00                	push   $0x0
f0116946:	68 07 0e 00 00       	push   $0xe07
f011694b:	68 03 0e 00 00       	push   $0xe03
f0116950:	6a 01                	push   $0x1
f0116952:	50                   	push   %eax
f0116953:	6a 00                	push   $0x0
f0116955:	6a 00                	push   $0x0
f0116957:	ff 75 cc             	pushl  -0x34(%ebp)
f011695a:	e8 9a 20 00 00       	call   f01189f9 <CCP>
f011695f:	83 c4 30             	add    $0x30,%esp
f0116962:	85 c0                	test   %eax,%eax
f0116964:	75 25                	jne    f011698b <test_allocate_chunk+0x40b>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0116966:	83 ec 04             	sub    $0x4,%esp
f0116969:	68 0c d8 12 f0       	push   $0xf012d80c
f011696e:	68 76 05 00 00       	push   $0x576
f0116973:	68 22 c2 12 f0       	push   $0xf012c222
f0116978:	e8 3a 9b fe ff       	call   f01004b7 <_warn>
f011697d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0116980:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0116984:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f011698b:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f011698f:	74 04                	je     f0116995 <test_allocate_chunk+0x415>
f0116991:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0116995:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0116999:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f011699d:	74 5a                	je     f01169f9 <test_allocate_chunk+0x479>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f011699f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01169a2:	01 c0                	add    %eax,%eax
f01169a4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01169a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01169aa:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f01169ad:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01169b0:	01 c0                	add    %eax,%eax
f01169b2:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01169b5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01169b8:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f01169bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01169be:	8a 00                	mov    (%eax),%al
f01169c0:	3c 4b                	cmp    $0x4b,%al
f01169c2:	75 09                	jne    f01169cd <test_allocate_chunk+0x44d>
f01169c4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01169c7:	8a 00                	mov    (%eax),%al
f01169c9:	3c 4d                	cmp    $0x4d,%al
f01169cb:	74 1e                	je     f01169eb <test_allocate_chunk+0x46b>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f01169cd:	83 ec 04             	sub    $0x4,%esp
f01169d0:	68 58 d8 12 f0       	push   $0xf012d858
f01169d5:	68 84 05 00 00       	push   $0x584
f01169da:	68 22 c2 12 f0       	push   $0xf012c222
f01169df:	e8 d3 9a fe ff       	call   f01004b7 <_warn>
f01169e4:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01169e7:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f01169eb:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01169ef:	74 04                	je     f01169f5 <test_allocate_chunk+0x475>
f01169f1:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f01169f5:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f01169f9:	83 ec 0c             	sub    $0xc,%esp
f01169fc:	68 af cb 12 f0       	push   $0xf012cbaf
f0116a01:	e8 66 a5 fe ff       	call   f0100f6c <cprintf>
f0116a06:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0116a09:	83 ec 0c             	sub    $0xc,%esp
f0116a0c:	68 30 d9 12 f0       	push   $0xf012d930
f0116a11:	e8 56 a5 fe ff       	call   f0100f6c <cprintf>
f0116a16:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0116a19:	e8 eb 6f ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116a1e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0116a21:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116a24:	c1 e0 06             	shl    $0x6,%eax
f0116a27:	89 c2                	mov    %eax,%edx
f0116a29:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116a2c:	c1 e0 05             	shl    $0x5,%eax
f0116a2f:	6a 00                	push   $0x0
f0116a31:	52                   	push   %edx
f0116a32:	50                   	push   %eax
f0116a33:	ff 75 cc             	pushl  -0x34(%ebp)
f0116a36:	e8 e3 2c ff ff       	call   f010971e <allocate_chunk>
f0116a3b:	83 c4 10             	add    $0x10,%esp
f0116a3e:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0116a41:	e8 c3 6f ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116a46:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0116a49:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0116a4d:	75 36                	jne    f0116a85 <test_allocate_chunk+0x505>
f0116a4f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116a52:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0116a55:	89 c1                	mov    %eax,%ecx
f0116a57:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116a5a:	c1 e0 06             	shl    $0x6,%eax
f0116a5d:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116a60:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0116a67:	99                   	cltd   
f0116a68:	f7 ff                	idiv   %edi
f0116a6a:	89 c3                	mov    %eax,%ebx
f0116a6c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116a6f:	c1 e0 06             	shl    $0x6,%eax
f0116a72:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116a75:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0116a7c:	99                   	cltd   
f0116a7d:	f7 fe                	idiv   %esi
f0116a7f:	01 d8                	add    %ebx,%eax
f0116a81:	39 c1                	cmp    %eax,%ecx
f0116a83:	74 54                	je     f0116ad9 <test_allocate_chunk+0x559>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f0116a85:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116a88:	c1 e0 06             	shl    $0x6,%eax
f0116a8b:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116a8e:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0116a95:	99                   	cltd   
f0116a96:	f7 fb                	idiv   %ebx
f0116a98:	89 c1                	mov    %eax,%ecx
f0116a9a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116a9d:	c1 e0 06             	shl    $0x6,%eax
f0116aa0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116aa3:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0116aaa:	99                   	cltd   
f0116aab:	f7 ff                	idiv   %edi
f0116aad:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0116ab0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116ab3:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0116ab6:	83 ec 08             	sub    $0x8,%esp
f0116ab9:	52                   	push   %edx
f0116aba:	50                   	push   %eax
f0116abb:	ff 75 a4             	pushl  -0x5c(%ebp)
f0116abe:	68 d0 d8 12 f0       	push   $0xf012d8d0
f0116ac3:	68 9a 05 00 00       	push   $0x59a
f0116ac8:	68 22 c2 12 f0       	push   $0xf012c222
f0116acd:	e8 e5 99 fe ff       	call   f01004b7 <_warn>
f0116ad2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116ad5:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0116ad9:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116add:	74 04                	je     f0116ae3 <test_allocate_chunk+0x563>
f0116adf:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0116ae3:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0116ae7:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0116aee:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116af1:	c1 e0 06             	shl    $0x6,%eax
f0116af4:	89 c2                	mov    %eax,%edx
f0116af6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116af9:	c1 e0 05             	shl    $0x5,%eax
f0116afc:	83 ec 08             	sub    $0x8,%esp
f0116aff:	6a 03                	push   $0x3
f0116b01:	6a 00                	push   $0x0
f0116b03:	6a 00                	push   $0x0
f0116b05:	68 07 0e 00 00       	push   $0xe07
f0116b0a:	6a 01                	push   $0x1
f0116b0c:	6a 01                	push   $0x1
f0116b0e:	52                   	push   %edx
f0116b0f:	50                   	push   %eax
f0116b10:	6a 00                	push   $0x0
f0116b12:	ff 75 cc             	pushl  -0x34(%ebp)
f0116b15:	e8 df 1e 00 00       	call   f01189f9 <CCP>
f0116b1a:	83 c4 30             	add    $0x30,%esp
f0116b1d:	85 c0                	test   %eax,%eax
f0116b1f:	75 25                	jne    f0116b46 <test_allocate_chunk+0x5c6>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0116b21:	83 ec 04             	sub    $0x4,%esp
f0116b24:	68 0c d8 12 f0       	push   $0xf012d80c
f0116b29:	68 a3 05 00 00       	push   $0x5a3
f0116b2e:	68 22 c2 12 f0       	push   $0xf012c222
f0116b33:	e8 7f 99 fe ff       	call   f01004b7 <_warn>
f0116b38:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0116b3b:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0116b3f:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0116b46:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116b4a:	74 04                	je     f0116b50 <test_allocate_chunk+0x5d0>
f0116b4c:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0116b50:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0116b54:	83 ec 0c             	sub    $0xc,%esp
f0116b57:	68 12 cc 12 f0       	push   $0xf012cc12
f0116b5c:	e8 0b a4 fe ff       	call   f0100f6c <cprintf>
f0116b61:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0116b64:	83 ec 0c             	sub    $0xc,%esp
f0116b67:	68 70 d9 12 f0       	push   $0xf012d970
f0116b6c:	e8 fb a3 fe ff       	call   f0100f6c <cprintf>
f0116b71:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0116b74:	e8 90 6e ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116b79:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0116b7c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116b7f:	c1 e0 06             	shl    $0x6,%eax
f0116b82:	68 06 0e 00 00       	push   $0xe06
f0116b87:	50                   	push   %eax
f0116b88:	68 00 00 00 80       	push   $0x80000000
f0116b8d:	ff 75 cc             	pushl  -0x34(%ebp)
f0116b90:	e8 89 2b ff ff       	call   f010971e <allocate_chunk>
f0116b95:	83 c4 10             	add    $0x10,%esp
f0116b98:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0116b9b:	e8 69 6e ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116ba0:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f0116ba3:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0116ba7:	75 36                	jne    f0116bdf <test_allocate_chunk+0x65f>
f0116ba9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116bac:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0116baf:	89 c1                	mov    %eax,%ecx
f0116bb1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116bb4:	c1 e0 06             	shl    $0x6,%eax
f0116bb7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116bba:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0116bc1:	99                   	cltd   
f0116bc2:	f7 fb                	idiv   %ebx
f0116bc4:	89 c3                	mov    %eax,%ebx
f0116bc6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116bc9:	c1 e0 06             	shl    $0x6,%eax
f0116bcc:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116bcf:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0116bd6:	99                   	cltd   
f0116bd7:	f7 fe                	idiv   %esi
f0116bd9:	01 d8                	add    %ebx,%eax
f0116bdb:	39 c1                	cmp    %eax,%ecx
f0116bdd:	74 54                	je     f0116c33 <test_allocate_chunk+0x6b3>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0116bdf:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116be2:	c1 e0 06             	shl    $0x6,%eax
f0116be5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116be8:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0116bef:	99                   	cltd   
f0116bf0:	f7 ff                	idiv   %edi
f0116bf2:	89 c1                	mov    %eax,%ecx
f0116bf4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116bf7:	c1 e0 06             	shl    $0x6,%eax
f0116bfa:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116bfd:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0116c04:	99                   	cltd   
f0116c05:	f7 fb                	idiv   %ebx
f0116c07:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0116c0a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116c0d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0116c10:	83 ec 08             	sub    $0x8,%esp
f0116c13:	52                   	push   %edx
f0116c14:	50                   	push   %eax
f0116c15:	ff 75 9c             	pushl  -0x64(%ebp)
f0116c18:	68 d0 d8 12 f0       	push   $0xf012d8d0
f0116c1d:	68 b9 05 00 00       	push   $0x5b9
f0116c22:	68 22 c2 12 f0       	push   $0xf012c222
f0116c27:	e8 8b 98 fe ff       	call   f01004b7 <_warn>
f0116c2c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116c2f:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0116c33:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116c37:	74 04                	je     f0116c3d <test_allocate_chunk+0x6bd>
f0116c39:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0116c3d:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0116c41:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0116c48:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116c4b:	c1 e0 06             	shl    $0x6,%eax
f0116c4e:	83 ec 08             	sub    $0x8,%esp
f0116c51:	6a 03                	push   $0x3
f0116c53:	6a 00                	push   $0x0
f0116c55:	6a 00                	push   $0x0
f0116c57:	68 07 0e 00 00       	push   $0xe07
f0116c5c:	68 07 0e 00 00       	push   $0xe07
f0116c61:	6a 01                	push   $0x1
f0116c63:	50                   	push   %eax
f0116c64:	68 00 00 00 80       	push   $0x80000000
f0116c69:	6a 00                	push   $0x0
f0116c6b:	ff 75 cc             	pushl  -0x34(%ebp)
f0116c6e:	e8 86 1d 00 00       	call   f01189f9 <CCP>
f0116c73:	83 c4 30             	add    $0x30,%esp
f0116c76:	85 c0                	test   %eax,%eax
f0116c78:	75 25                	jne    f0116c9f <test_allocate_chunk+0x71f>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0116c7a:	83 ec 04             	sub    $0x4,%esp
f0116c7d:	68 0c d8 12 f0       	push   $0xf012d80c
f0116c82:	68 c2 05 00 00       	push   $0x5c2
f0116c87:	68 22 c2 12 f0       	push   $0xf012c222
f0116c8c:	e8 26 98 fe ff       	call   f01004b7 <_warn>
f0116c91:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0116c94:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0116c98:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 10 ;
f0116c9f:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116ca3:	74 04                	je     f0116ca9 <test_allocate_chunk+0x729>
f0116ca5:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0116ca9:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0116cad:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0116cb1:	74 6f                	je     f0116d22 <test_allocate_chunk+0x7a2>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f0116cb3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116cb6:	01 c0                	add    %eax,%eax
f0116cb8:	05 00 00 00 80       	add    $0x80000000,%eax
f0116cbd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0116cc0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116cc3:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0116cc6:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116cc9:	89 d0                	mov    %edx,%eax
f0116ccb:	c1 e0 02             	shl    $0x2,%eax
f0116cce:	01 d0                	add    %edx,%eax
f0116cd0:	01 c0                	add    %eax,%eax
f0116cd2:	01 d0                	add    %edx,%eax
f0116cd4:	01 c0                	add    %eax,%eax
f0116cd6:	05 00 00 00 80       	add    $0x80000000,%eax
f0116cdb:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0116cde:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116ce1:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0116ce4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116ce7:	8a 00                	mov    (%eax),%al
f0116ce9:	3c 4b                	cmp    $0x4b,%al
f0116ceb:	75 09                	jne    f0116cf6 <test_allocate_chunk+0x776>
f0116ced:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116cf0:	8a 00                	mov    (%eax),%al
f0116cf2:	3c 4d                	cmp    $0x4d,%al
f0116cf4:	74 1e                	je     f0116d14 <test_allocate_chunk+0x794>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0116cf6:	83 ec 04             	sub    $0x4,%esp
f0116cf9:	68 58 d8 12 f0       	push   $0xf012d858
f0116cfe:	68 d0 05 00 00       	push   $0x5d0
f0116d03:	68 22 c2 12 f0       	push   $0xf012c222
f0116d08:	e8 aa 97 fe ff       	call   f01004b7 <_warn>
f0116d0d:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0116d10:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f0116d14:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116d18:	74 04                	je     f0116d1e <test_allocate_chunk+0x79e>
f0116d1a:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f0116d1e:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f0116d22:	83 ec 0c             	sub    $0xc,%esp
f0116d25:	68 e4 d6 12 f0       	push   $0xf012d6e4
f0116d2a:	e8 3d a2 fe ff       	call   f0100f6c <cprintf>
f0116d2f:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f0116d32:	83 ec 0c             	sub    $0xc,%esp
f0116d35:	68 ac d9 12 f0       	push   $0xf012d9ac
f0116d3a:	e8 2d a2 fe ff       	call   f0100f6c <cprintf>
f0116d3f:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0116d42:	e8 c2 6c ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116d47:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0116d4a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116d4d:	89 d0                	mov    %edx,%eax
f0116d4f:	01 c0                	add    %eax,%eax
f0116d51:	01 d0                	add    %edx,%eax
f0116d53:	01 c0                	add    %eax,%eax
f0116d55:	01 d0                	add    %edx,%eax
f0116d57:	68 04 0e 00 00       	push   $0xe04
f0116d5c:	50                   	push   %eax
f0116d5d:	68 00 fc 3f 40       	push   $0x403ffc00
f0116d62:	ff 75 cc             	pushl  -0x34(%ebp)
f0116d65:	e8 b4 29 ff ff       	call   f010971e <allocate_chunk>
f0116d6a:	83 c4 10             	add    $0x10,%esp
f0116d6d:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0116d70:	e8 94 6c ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116d75:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0116d78:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0116d7c:	75 0b                	jne    f0116d89 <test_allocate_chunk+0x809>
f0116d7e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116d81:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0116d84:	83 f8 05             	cmp    $0x5,%eax
f0116d87:	74 2a                	je     f0116db3 <test_allocate_chunk+0x833>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f0116d89:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116d8c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0116d8f:	83 ec 08             	sub    $0x8,%esp
f0116d92:	6a 05                	push   $0x5
f0116d94:	50                   	push   %eax
f0116d95:	ff 75 98             	pushl  -0x68(%ebp)
f0116d98:	68 d0 d8 12 f0       	push   $0xf012d8d0
f0116d9d:	68 e7 05 00 00       	push   $0x5e7
f0116da2:	68 22 c2 12 f0       	push   $0xf012c222
f0116da7:	e8 0b 97 fe ff       	call   f01004b7 <_warn>
f0116dac:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116daf:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0116db3:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116db7:	74 04                	je     f0116dbd <test_allocate_chunk+0x83d>
f0116db9:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0116dbd:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0116dc1:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0116dc8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116dcb:	89 d0                	mov    %edx,%eax
f0116dcd:	01 c0                	add    %eax,%eax
f0116dcf:	01 d0                	add    %edx,%eax
f0116dd1:	c1 e0 02             	shl    $0x2,%eax
f0116dd4:	83 ec 08             	sub    $0x8,%esp
f0116dd7:	6a 03                	push   $0x3
f0116dd9:	6a 00                	push   $0x0
f0116ddb:	6a 00                	push   $0x0
f0116ddd:	68 07 0e 00 00       	push   $0xe07
f0116de2:	68 05 0e 00 00       	push   $0xe05
f0116de7:	6a 01                	push   $0x1
f0116de9:	50                   	push   %eax
f0116dea:	68 00 f0 3f 40       	push   $0x403ff000
f0116def:	6a 00                	push   $0x0
f0116df1:	ff 75 cc             	pushl  -0x34(%ebp)
f0116df4:	e8 00 1c 00 00       	call   f01189f9 <CCP>
f0116df9:	83 c4 30             	add    $0x30,%esp
f0116dfc:	85 c0                	test   %eax,%eax
f0116dfe:	75 25                	jne    f0116e25 <test_allocate_chunk+0x8a5>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0116e00:	83 ec 04             	sub    $0x4,%esp
f0116e03:	68 0c d8 12 f0       	push   $0xf012d80c
f0116e08:	68 f0 05 00 00       	push   $0x5f0
f0116e0d:	68 22 c2 12 f0       	push   $0xf012c222
f0116e12:	e8 a0 96 fe ff       	call   f01004b7 <_warn>
f0116e17:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0116e1a:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0116e1e:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0116e25:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116e29:	74 04                	je     f0116e2f <test_allocate_chunk+0x8af>
f0116e2b:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0116e2f:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f0116e33:	83 ec 0c             	sub    $0xc,%esp
f0116e36:	68 e3 d9 12 f0       	push   $0xf012d9e3
f0116e3b:	e8 2c a1 fe ff       	call   f0100f6c <cprintf>
f0116e40:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0116e43:	83 ec 08             	sub    $0x8,%esp
f0116e46:	ff 75 e0             	pushl  -0x20(%ebp)
f0116e49:	68 f4 d9 12 f0       	push   $0xf012d9f4
f0116e4e:	e8 19 a1 fe ff       	call   f0100f6c <cprintf>
f0116e53:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0116e56:	83 7d e0 64          	cmpl   $0x64,-0x20(%ebp)
f0116e5a:	75 10                	jne    f0116e6c <test_allocate_chunk+0x8ec>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0116e5c:	83 ec 0c             	sub    $0xc,%esp
f0116e5f:	68 28 da 12 f0       	push   $0xf012da28
f0116e64:	e8 03 a1 fe ff       	call   f0100f6c <cprintf>
f0116e69:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0116e6c:	a1 84 2b 5a f0       	mov    0xf05a2b84,%eax
f0116e71:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0116e74:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116e77:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0116e7a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0116e7f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116e82:	5b                   	pop    %ebx
f0116e83:	5e                   	pop    %esi
f0116e84:	5f                   	pop    %edi
f0116e85:	5d                   	pop    %ebp
f0116e86:	c3                   	ret    

f0116e87 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f0116e87:	55                   	push   %ebp
f0116e88:	89 e5                	mov    %esp,%ebp
f0116e8a:	57                   	push   %edi
f0116e8b:	56                   	push   %esi
f0116e8c:	53                   	push   %ebx
f0116e8d:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0116e93:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0116e96:	bb 24 c9 12 f0       	mov    $0xf012c924,%ebx
f0116e9b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0116ea0:	89 c7                	mov    %eax,%edi
f0116ea2:	89 de                	mov    %ebx,%esi
f0116ea4:	89 d1                	mov    %edx,%ecx
f0116ea6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116ea8:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0116eab:	b9 23 00 00 00       	mov    $0x23,%ecx
f0116eb0:	b0 00                	mov    $0x0,%al
f0116eb2:	89 d7                	mov    %edx,%edi
f0116eb4:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0116eb6:	6a 00                	push   $0x0
f0116eb8:	6a 0a                	push   $0xa
f0116eba:	6a 14                	push   $0x14
f0116ebc:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0116ebf:	50                   	push   %eax
f0116ec0:	e8 ab 2b ff ff       	call   f0109a70 <env_create>
f0116ec5:	83 c4 10             	add    $0x10,%esp
f0116ec8:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0116ecb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116ece:	8b 40 64             	mov    0x64(%eax),%eax
f0116ed1:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0116ed4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116ed7:	8b 40 68             	mov    0x68(%eax),%eax
f0116eda:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0116edd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116ee0:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0116ee3:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0116eea:	75 70 20 
f0116eed:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0116ef4:	00 00 00 
f0116ef7:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0116efa:	b9 03 00 00 00       	mov    $0x3,%ecx
f0116eff:	b8 00 00 00 00       	mov    $0x0,%eax
f0116f04:	89 d7                	mov    %edx,%edi
f0116f06:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0116f08:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116f0b:	8b 40 10             	mov    0x10(%eax),%eax
f0116f0e:	83 ec 08             	sub    $0x8,%esp
f0116f11:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0116f17:	52                   	push   %edx
f0116f18:	50                   	push   %eax
f0116f19:	e8 c6 ba 00 00       	call   f01229e4 <ltostr>
f0116f1e:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0116f21:	83 ec 04             	sub    $0x4,%esp
f0116f24:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116f2a:	50                   	push   %eax
f0116f2b:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0116f31:	50                   	push   %eax
f0116f32:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0116f38:	50                   	push   %eax
f0116f39:	e8 7f bb 00 00       	call   f0122abd <strcconcat>
f0116f3e:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0116f41:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0116f48:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0116f4f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0116f56:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f0116f5d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0116f61:	83 ec 0c             	sub    $0xc,%esp
f0116f64:	ff 75 d8             	pushl  -0x28(%ebp)
f0116f67:	e8 59 1a 00 00       	call   f01189c5 <ClearUserSpace>
f0116f6c:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0116f6f:	83 ec 0c             	sub    $0xc,%esp
f0116f72:	68 68 da 12 f0       	push   $0xf012da68
f0116f77:	e8 f0 9f fe ff       	call   f0100f6c <cprintf>
f0116f7c:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0116f7f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116f82:	c1 e0 03             	shl    $0x3,%eax
f0116f85:	83 ec 04             	sub    $0x4,%esp
f0116f88:	50                   	push   %eax
f0116f89:	6a 00                	push   $0x0
f0116f8b:	ff 75 d8             	pushl  -0x28(%ebp)
f0116f8e:	e8 bf 27 ff ff       	call   f0109752 <calculate_required_frames>
f0116f93:	83 c4 10             	add    $0x10,%esp
f0116f96:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0116f99:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0116f9d:	74 23                	je     f0116fc2 <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0116f9f:	83 ec 0c             	sub    $0xc,%esp
f0116fa2:	6a 03                	push   $0x3
f0116fa4:	ff 75 c8             	pushl  -0x38(%ebp)
f0116fa7:	68 9c da 12 f0       	push   $0xf012da9c
f0116fac:	68 29 06 00 00       	push   $0x629
f0116fb1:	68 22 c2 12 f0       	push   $0xf012c222
f0116fb6:	e8 fc 94 fe ff       	call   f01004b7 <_warn>
f0116fbb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116fbe:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116fc2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116fc6:	74 04                	je     f0116fcc <test_calculate_required_frames+0x145>
f0116fc8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116fcc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f0116fd0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116fd3:	c1 e0 02             	shl    $0x2,%eax
f0116fd6:	83 ec 04             	sub    $0x4,%esp
f0116fd9:	50                   	push   %eax
f0116fda:	6a 00                	push   $0x0
f0116fdc:	ff 75 d8             	pushl  -0x28(%ebp)
f0116fdf:	e8 6e 27 ff ff       	call   f0109752 <calculate_required_frames>
f0116fe4:	83 c4 10             	add    $0x10,%esp
f0116fe7:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f0116fea:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0116ff1:	74 26                	je     f0117019 <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0116ff3:	83 ec 0c             	sub    $0xc,%esp
f0116ff6:	68 01 04 00 00       	push   $0x401
f0116ffb:	ff 75 c8             	pushl  -0x38(%ebp)
f0116ffe:	68 9c da 12 f0       	push   $0xf012da9c
f0117003:	68 33 06 00 00       	push   $0x633
f0117008:	68 22 c2 12 f0       	push   $0xf012c222
f011700d:	e8 a5 94 fe ff       	call   f01004b7 <_warn>
f0117012:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117015:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117019:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011701d:	74 04                	je     f0117023 <test_calculate_required_frames+0x19c>
f011701f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117023:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0117027:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011702a:	c1 e0 0a             	shl    $0xa,%eax
f011702d:	83 ec 04             	sub    $0x4,%esp
f0117030:	50                   	push   %eax
f0117031:	6a 00                	push   $0x0
f0117033:	ff 75 d8             	pushl  -0x28(%ebp)
f0117036:	e8 17 27 ff ff       	call   f0109752 <calculate_required_frames>
f011703b:	83 c4 10             	add    $0x10,%esp
f011703e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0117041:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117044:	c1 e0 0a             	shl    $0xa,%eax
f0117047:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011704a:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0117051:	99                   	cltd   
f0117052:	f7 fb                	idiv   %ebx
f0117054:	89 c1                	mov    %eax,%ecx
f0117056:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117059:	c1 e0 0a             	shl    $0xa,%eax
f011705c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011705f:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0117066:	99                   	cltd   
f0117067:	f7 fe                	idiv   %esi
f0117069:	01 c8                	add    %ecx,%eax
f011706b:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011706e:	74 4c                	je     f01170bc <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0117070:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117073:	c1 e0 0a             	shl    $0xa,%eax
f0117076:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117079:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0117080:	99                   	cltd   
f0117081:	f7 fb                	idiv   %ebx
f0117083:	89 c1                	mov    %eax,%ecx
f0117085:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117088:	c1 e0 0a             	shl    $0xa,%eax
f011708b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011708e:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0117095:	99                   	cltd   
f0117096:	f7 fe                	idiv   %esi
f0117098:	01 c8                	add    %ecx,%eax
f011709a:	83 ec 0c             	sub    $0xc,%esp
f011709d:	50                   	push   %eax
f011709e:	ff 75 c8             	pushl  -0x38(%ebp)
f01170a1:	68 9c da 12 f0       	push   $0xf012da9c
f01170a6:	68 3d 06 00 00       	push   $0x63d
f01170ab:	68 22 c2 12 f0       	push   $0xf012c222
f01170b0:	e8 02 94 fe ff       	call   f01004b7 <_warn>
f01170b5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01170b8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01170bc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01170c0:	74 04                	je     f01170c6 <test_calculate_required_frames+0x23f>
f01170c2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01170c6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f01170ca:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01170cd:	89 d0                	mov    %edx,%eax
f01170cf:	01 c0                	add    %eax,%eax
f01170d1:	01 d0                	add    %edx,%eax
f01170d3:	01 c0                	add    %eax,%eax
f01170d5:	83 ec 04             	sub    $0x4,%esp
f01170d8:	50                   	push   %eax
f01170d9:	68 00 10 00 00       	push   $0x1000
f01170de:	ff 75 d8             	pushl  -0x28(%ebp)
f01170e1:	e8 6c 26 ff ff       	call   f0109752 <calculate_required_frames>
f01170e6:	83 c4 10             	add    $0x10,%esp
f01170e9:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01170ec:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01170f0:	74 23                	je     f0117115 <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01170f2:	83 ec 0c             	sub    $0xc,%esp
f01170f5:	6a 03                	push   $0x3
f01170f7:	ff 75 c8             	pushl  -0x38(%ebp)
f01170fa:	68 9c da 12 f0       	push   $0xf012da9c
f01170ff:	68 49 06 00 00       	push   $0x649
f0117104:	68 22 c2 12 f0       	push   $0xf012c222
f0117109:	e8 a9 93 fe ff       	call   f01004b7 <_warn>
f011710e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117111:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117115:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117119:	74 04                	je     f011711f <test_calculate_required_frames+0x298>
f011711b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011711f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0117123:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117126:	89 c2                	mov    %eax,%edx
f0117128:	01 d2                	add    %edx,%edx
f011712a:	01 d0                	add    %edx,%eax
f011712c:	83 ec 04             	sub    $0x4,%esp
f011712f:	50                   	push   %eax
f0117130:	68 00 18 00 00       	push   $0x1800
f0117135:	ff 75 d8             	pushl  -0x28(%ebp)
f0117138:	e8 15 26 ff ff       	call   f0109752 <calculate_required_frames>
f011713d:	83 c4 10             	add    $0x10,%esp
f0117140:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0117143:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0117147:	74 23                	je     f011716c <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0117149:	83 ec 0c             	sub    $0xc,%esp
f011714c:	6a 03                	push   $0x3
f011714e:	ff 75 c8             	pushl  -0x38(%ebp)
f0117151:	68 9c da 12 f0       	push   $0xf012da9c
f0117156:	68 53 06 00 00       	push   $0x653
f011715b:	68 22 c2 12 f0       	push   $0xf012c222
f0117160:	e8 52 93 fe ff       	call   f01004b7 <_warn>
f0117165:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117168:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011716c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117170:	74 04                	je     f0117176 <test_calculate_required_frames+0x2ef>
f0117172:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117176:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f011717a:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011717d:	89 d0                	mov    %edx,%eax
f011717f:	c1 e0 02             	shl    $0x2,%eax
f0117182:	01 d0                	add    %edx,%eax
f0117184:	01 c0                	add    %eax,%eax
f0117186:	83 ec 04             	sub    $0x4,%esp
f0117189:	50                   	push   %eax
f011718a:	68 00 00 40 00       	push   $0x400000
f011718f:	ff 75 d8             	pushl  -0x28(%ebp)
f0117192:	e8 bb 25 ff ff       	call   f0109752 <calculate_required_frames>
f0117197:	83 c4 10             	add    $0x10,%esp
f011719a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f011719d:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f01171a4:	74 26                	je     f01171cc <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f01171a6:	83 ec 0c             	sub    $0xc,%esp
f01171a9:	68 03 0a 00 00       	push   $0xa03
f01171ae:	ff 75 c8             	pushl  -0x38(%ebp)
f01171b1:	68 9c da 12 f0       	push   $0xf012da9c
f01171b6:	68 5d 06 00 00       	push   $0x65d
f01171bb:	68 22 c2 12 f0       	push   $0xf012c222
f01171c0:	e8 f2 92 fe ff       	call   f01004b7 <_warn>
f01171c5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01171c8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01171cc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01171d0:	74 04                	je     f01171d6 <test_calculate_required_frames+0x34f>
f01171d2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01171d6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f01171da:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01171dd:	01 c0                	add    %eax,%eax
f01171df:	83 ec 04             	sub    $0x4,%esp
f01171e2:	50                   	push   %eax
f01171e3:	68 00 00 70 00       	push   $0x700000
f01171e8:	ff 75 d8             	pushl  -0x28(%ebp)
f01171eb:	e8 62 25 ff ff       	call   f0109752 <calculate_required_frames>
f01171f0:	83 c4 10             	add    $0x10,%esp
f01171f3:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f01171f6:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f01171fd:	74 26                	je     f0117225 <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f01171ff:	83 ec 0c             	sub    $0xc,%esp
f0117202:	68 02 02 00 00       	push   $0x202
f0117207:	ff 75 c8             	pushl  -0x38(%ebp)
f011720a:	68 9c da 12 f0       	push   $0xf012da9c
f011720f:	68 69 06 00 00       	push   $0x669
f0117214:	68 22 c2 12 f0       	push   $0xf012c222
f0117219:	e8 99 92 fe ff       	call   f01004b7 <_warn>
f011721e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117221:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0117225:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117229:	74 04                	je     f011722f <test_calculate_required_frames+0x3a8>
f011722b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011722f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0117233:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117236:	83 ec 04             	sub    $0x4,%esp
f0117239:	50                   	push   %eax
f011723a:	68 ff ff 3f 00       	push   $0x3fffff
f011723f:	ff 75 d8             	pushl  -0x28(%ebp)
f0117242:	e8 0b 25 ff ff       	call   f0109752 <calculate_required_frames>
f0117247:	83 c4 10             	add    $0x10,%esp
f011724a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f011724d:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0117251:	74 23                	je     f0117276 <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0117253:	83 ec 0c             	sub    $0xc,%esp
f0117256:	6a 04                	push   $0x4
f0117258:	ff 75 c8             	pushl  -0x38(%ebp)
f011725b:	68 9c da 12 f0       	push   $0xf012da9c
f0117260:	68 73 06 00 00       	push   $0x673
f0117265:	68 22 c2 12 f0       	push   $0xf012c222
f011726a:	e8 48 92 fe ff       	call   f01004b7 <_warn>
f011726f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117272:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0117276:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011727a:	74 04                	je     f0117280 <test_calculate_required_frames+0x3f9>
f011727c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0117280:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0117284:	83 ec 0c             	sub    $0xc,%esp
f0117287:	68 d5 d5 12 f0       	push   $0xf012d5d5
f011728c:	e8 db 9c fe ff       	call   f0100f6c <cprintf>
f0117291:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0117294:	83 ec 0c             	sub    $0xc,%esp
f0117297:	68 f4 da 12 f0       	push   $0xf012daf4
f011729c:	e8 cb 9c fe ff       	call   f0100f6c <cprintf>
f01172a1:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01172a4:	83 ec 04             	sub    $0x4,%esp
f01172a7:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01172ad:	50                   	push   %eax
f01172ae:	68 8e c9 12 f0       	push   $0xf012c98e
f01172b3:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01172b9:	50                   	push   %eax
f01172ba:	e8 fe b7 00 00       	call   f0122abd <strcconcat>
f01172bf:	83 c4 10             	add    $0x10,%esp
f01172c2:	83 ec 0c             	sub    $0xc,%esp
f01172c5:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01172cb:	50                   	push   %eax
f01172cc:	e8 0b ac fe ff       	call   f0101edc <execute_command>
f01172d1:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f01172d4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01172d7:	c1 e0 03             	shl    $0x3,%eax
f01172da:	83 ec 04             	sub    $0x4,%esp
f01172dd:	50                   	push   %eax
f01172de:	6a 00                	push   $0x0
f01172e0:	ff 75 d8             	pushl  -0x28(%ebp)
f01172e3:	e8 6a 24 ff ff       	call   f0109752 <calculate_required_frames>
f01172e8:	83 c4 10             	add    $0x10,%esp
f01172eb:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01172ee:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01172f5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01172f8:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01172fb:	74 24                	je     f0117321 <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01172fd:	83 ec 0c             	sub    $0xc,%esp
f0117300:	ff 75 c4             	pushl  -0x3c(%ebp)
f0117303:	ff 75 c8             	pushl  -0x38(%ebp)
f0117306:	68 9c da 12 f0       	push   $0xf012da9c
f011730b:	68 87 06 00 00       	push   $0x687
f0117310:	68 22 c2 12 f0       	push   $0xf012c222
f0117315:	e8 9d 91 fe ff       	call   f01004b7 <_warn>
f011731a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011731d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117321:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117325:	74 04                	je     f011732b <test_calculate_required_frames+0x4a4>
f0117327:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011732b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f011732f:	83 ec 04             	sub    $0x4,%esp
f0117332:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0117338:	50                   	push   %eax
f0117339:	68 9b c9 12 f0       	push   $0xf012c99b
f011733e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0117344:	50                   	push   %eax
f0117345:	e8 73 b7 00 00       	call   f0122abd <strcconcat>
f011734a:	83 c4 10             	add    $0x10,%esp
f011734d:	83 ec 0c             	sub    $0xc,%esp
f0117350:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0117356:	50                   	push   %eax
f0117357:	e8 80 ab fe ff       	call   f0101edc <execute_command>
f011735c:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f011735f:	83 ec 04             	sub    $0x4,%esp
f0117362:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0117368:	50                   	push   %eax
f0117369:	68 28 db 12 f0       	push   $0xf012db28
f011736e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0117374:	50                   	push   %eax
f0117375:	e8 43 b7 00 00       	call   f0122abd <strcconcat>
f011737a:	83 c4 10             	add    $0x10,%esp
f011737d:	83 ec 0c             	sub    $0xc,%esp
f0117380:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0117386:	50                   	push   %eax
f0117387:	e8 50 ab fe ff       	call   f0101edc <execute_command>
f011738c:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f011738f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117392:	c1 e0 03             	shl    $0x3,%eax
f0117395:	83 ec 04             	sub    $0x4,%esp
f0117398:	50                   	push   %eax
f0117399:	6a 00                	push   $0x0
f011739b:	ff 75 d8             	pushl  -0x28(%ebp)
f011739e:	e8 af 23 ff ff       	call   f0109752 <calculate_required_frames>
f01173a3:	83 c4 10             	add    $0x10,%esp
f01173a6:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f01173a9:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f01173b0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01173b3:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01173b6:	74 24                	je     f01173dc <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01173b8:	83 ec 0c             	sub    $0xc,%esp
f01173bb:	ff 75 c4             	pushl  -0x3c(%ebp)
f01173be:	ff 75 c8             	pushl  -0x38(%ebp)
f01173c1:	68 9c da 12 f0       	push   $0xf012da9c
f01173c6:	68 95 06 00 00       	push   $0x695
f01173cb:	68 22 c2 12 f0       	push   $0xf012c222
f01173d0:	e8 e2 90 fe ff       	call   f01004b7 <_warn>
f01173d5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01173d8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01173dc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01173e0:	74 04                	je     f01173e6 <test_calculate_required_frames+0x55f>
f01173e2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01173e6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f01173ea:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01173ed:	c1 e0 0a             	shl    $0xa,%eax
f01173f0:	83 ec 04             	sub    $0x4,%esp
f01173f3:	50                   	push   %eax
f01173f4:	6a 00                	push   $0x0
f01173f6:	ff 75 d8             	pushl  -0x28(%ebp)
f01173f9:	e8 54 23 ff ff       	call   f0109752 <calculate_required_frames>
f01173fe:	83 c4 10             	add    $0x10,%esp
f0117401:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f0117404:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117407:	c1 e0 0a             	shl    $0xa,%eax
f011740a:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011740d:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0117414:	99                   	cltd   
f0117415:	f7 fb                	idiv   %ebx
f0117417:	89 c1                	mov    %eax,%ecx
f0117419:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011741c:	c1 e0 0a             	shl    $0xa,%eax
f011741f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117422:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0117429:	99                   	cltd   
f011742a:	f7 fe                	idiv   %esi
f011742c:	01 c8                	add    %ecx,%eax
f011742e:	83 e8 05             	sub    $0x5,%eax
f0117431:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f0117434:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117437:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011743a:	74 24                	je     f0117460 <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011743c:	83 ec 0c             	sub    $0xc,%esp
f011743f:	ff 75 c4             	pushl  -0x3c(%ebp)
f0117442:	ff 75 c8             	pushl  -0x38(%ebp)
f0117445:	68 9c da 12 f0       	push   $0xf012da9c
f011744a:	68 a0 06 00 00       	push   $0x6a0
f011744f:	68 22 c2 12 f0       	push   $0xf012c222
f0117454:	e8 5e 90 fe ff       	call   f01004b7 <_warn>
f0117459:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011745c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0117460:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117464:	74 04                	je     f011746a <test_calculate_required_frames+0x5e3>
f0117466:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011746a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f011746e:	83 ec 04             	sub    $0x4,%esp
f0117471:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0117477:	50                   	push   %eax
f0117478:	68 34 db 12 f0       	push   $0xf012db34
f011747d:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0117483:	50                   	push   %eax
f0117484:	e8 34 b6 00 00       	call   f0122abd <strcconcat>
f0117489:	83 c4 10             	add    $0x10,%esp
f011748c:	83 ec 0c             	sub    $0xc,%esp
f011748f:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0117495:	50                   	push   %eax
f0117496:	e8 41 aa fe ff       	call   f0101edc <execute_command>
f011749b:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f011749e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01174a1:	89 c2                	mov    %eax,%edx
f01174a3:	01 d2                	add    %edx,%edx
f01174a5:	01 d0                	add    %edx,%eax
f01174a7:	83 ec 04             	sub    $0x4,%esp
f01174aa:	50                   	push   %eax
f01174ab:	68 00 18 00 00       	push   $0x1800
f01174b0:	ff 75 d8             	pushl  -0x28(%ebp)
f01174b3:	e8 9a 22 ff ff       	call   f0109752 <calculate_required_frames>
f01174b8:	83 c4 10             	add    $0x10,%esp
f01174bb:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01174be:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01174c5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01174c8:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01174cb:	74 24                	je     f01174f1 <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01174cd:	83 ec 0c             	sub    $0xc,%esp
f01174d0:	ff 75 c4             	pushl  -0x3c(%ebp)
f01174d3:	ff 75 c8             	pushl  -0x38(%ebp)
f01174d6:	68 9c da 12 f0       	push   $0xf012da9c
f01174db:	68 af 06 00 00       	push   $0x6af
f01174e0:	68 22 c2 12 f0       	push   $0xf012c222
f01174e5:	e8 cd 8f fe ff       	call   f01004b7 <_warn>
f01174ea:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01174ed:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01174f1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01174f5:	74 04                	je     f01174fb <test_calculate_required_frames+0x674>
f01174f7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01174fb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f01174ff:	83 ec 04             	sub    $0x4,%esp
f0117502:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0117508:	50                   	push   %eax
f0117509:	68 f4 cb 12 f0       	push   $0xf012cbf4
f011750e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0117514:	50                   	push   %eax
f0117515:	e8 a3 b5 00 00       	call   f0122abd <strcconcat>
f011751a:	83 c4 10             	add    $0x10,%esp
f011751d:	83 ec 0c             	sub    $0xc,%esp
f0117520:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0117526:	50                   	push   %eax
f0117527:	e8 b0 a9 fe ff       	call   f0101edc <execute_command>
f011752c:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f011752f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117532:	89 d0                	mov    %edx,%eax
f0117534:	c1 e0 02             	shl    $0x2,%eax
f0117537:	01 d0                	add    %edx,%eax
f0117539:	01 c0                	add    %eax,%eax
f011753b:	83 ec 04             	sub    $0x4,%esp
f011753e:	50                   	push   %eax
f011753f:	68 00 00 40 00       	push   $0x400000
f0117544:	ff 75 d8             	pushl  -0x28(%ebp)
f0117547:	e8 06 22 ff ff       	call   f0109752 <calculate_required_frames>
f011754c:	83 c4 10             	add    $0x10,%esp
f011754f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f0117552:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f0117559:	74 26                	je     f0117581 <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f011755b:	83 ec 0c             	sub    $0xc,%esp
f011755e:	68 03 0a 00 00       	push   $0xa03
f0117563:	ff 75 c8             	pushl  -0x38(%ebp)
f0117566:	68 9c da 12 f0       	push   $0xf012da9c
f011756b:	68 bb 06 00 00       	push   $0x6bb
f0117570:	68 22 c2 12 f0       	push   $0xf012c222
f0117575:	e8 3d 8f fe ff       	call   f01004b7 <_warn>
f011757a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011757d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117581:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117585:	74 04                	je     f011758b <test_calculate_required_frames+0x704>
f0117587:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011758b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f011758f:	83 ec 04             	sub    $0x4,%esp
f0117592:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0117598:	50                   	push   %eax
f0117599:	68 fe cb 12 f0       	push   $0xf012cbfe
f011759e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01175a4:	50                   	push   %eax
f01175a5:	e8 13 b5 00 00       	call   f0122abd <strcconcat>
f01175aa:	83 c4 10             	add    $0x10,%esp
f01175ad:	83 ec 0c             	sub    $0xc,%esp
f01175b0:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01175b6:	50                   	push   %eax
f01175b7:	e8 20 a9 fe ff       	call   f0101edc <execute_command>
f01175bc:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f01175bf:	83 ec 04             	sub    $0x4,%esp
f01175c2:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01175c8:	50                   	push   %eax
f01175c9:	68 3c db 12 f0       	push   $0xf012db3c
f01175ce:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01175d4:	50                   	push   %eax
f01175d5:	e8 e3 b4 00 00       	call   f0122abd <strcconcat>
f01175da:	83 c4 10             	add    $0x10,%esp
f01175dd:	83 ec 0c             	sub    $0xc,%esp
f01175e0:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01175e6:	50                   	push   %eax
f01175e7:	e8 f0 a8 fe ff       	call   f0101edc <execute_command>
f01175ec:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f01175ef:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01175f2:	01 c0                	add    %eax,%eax
f01175f4:	83 ec 04             	sub    $0x4,%esp
f01175f7:	50                   	push   %eax
f01175f8:	68 00 00 70 00       	push   $0x700000
f01175fd:	ff 75 d8             	pushl  -0x28(%ebp)
f0117600:	e8 4d 21 ff ff       	call   f0109752 <calculate_required_frames>
f0117605:	83 c4 10             	add    $0x10,%esp
f0117608:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f011760b:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f0117612:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117615:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117618:	74 24                	je     f011763e <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011761a:	83 ec 0c             	sub    $0xc,%esp
f011761d:	ff 75 c4             	pushl  -0x3c(%ebp)
f0117620:	ff 75 c8             	pushl  -0x38(%ebp)
f0117623:	68 9c da 12 f0       	push   $0xf012da9c
f0117628:	68 cb 06 00 00       	push   $0x6cb
f011762d:	68 22 c2 12 f0       	push   $0xf012c222
f0117632:	e8 80 8e fe ff       	call   f01004b7 <_warn>
f0117637:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011763a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011763e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117642:	74 04                	je     f0117648 <test_calculate_required_frames+0x7c1>
f0117644:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0117648:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f011764c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011764f:	83 ec 04             	sub    $0x4,%esp
f0117652:	50                   	push   %eax
f0117653:	68 ff ff 3f 00       	push   $0x3fffff
f0117658:	ff 75 d8             	pushl  -0x28(%ebp)
f011765b:	e8 f2 20 ff ff       	call   f0109752 <calculate_required_frames>
f0117660:	83 c4 10             	add    $0x10,%esp
f0117663:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0117666:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f011766d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117670:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117673:	74 24                	je     f0117699 <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0117675:	83 ec 0c             	sub    $0xc,%esp
f0117678:	ff 75 c4             	pushl  -0x3c(%ebp)
f011767b:	ff 75 c8             	pushl  -0x38(%ebp)
f011767e:	68 9c da 12 f0       	push   $0xf012da9c
f0117683:	68 d6 06 00 00       	push   $0x6d6
f0117688:	68 22 c2 12 f0       	push   $0xf012c222
f011768d:	e8 25 8e fe ff       	call   f01004b7 <_warn>
f0117692:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117695:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0117699:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011769d:	74 04                	je     f01176a3 <test_calculate_required_frames+0x81c>
f011769f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01176a3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f01176a7:	83 ec 0c             	sub    $0xc,%esp
f01176aa:	68 af cb 12 f0       	push   $0xf012cbaf
f01176af:	e8 b8 98 fe ff       	call   f0100f6c <cprintf>
f01176b4:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f01176b7:	83 ec 08             	sub    $0x8,%esp
f01176ba:	ff 75 e4             	pushl  -0x1c(%ebp)
f01176bd:	68 48 db 12 f0       	push   $0xf012db48
f01176c2:	e8 a5 98 fe ff       	call   f0100f6c <cprintf>
f01176c7:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01176ca:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01176ce:	75 10                	jne    f01176e0 <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f01176d0:	83 ec 0c             	sub    $0xc,%esp
f01176d3:	68 88 db 12 f0       	push   $0xf012db88
f01176d8:	e8 8f 98 fe ff       	call   f0100f6c <cprintf>
f01176dd:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01176e0:	a1 84 2b 5a f0       	mov    0xf05a2b84,%eax
f01176e5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01176e8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01176eb:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01176ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01176f3:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01176f6:	5b                   	pop    %ebx
f01176f7:	5e                   	pop    %esi
f01176f8:	5f                   	pop    %edi
f01176f9:	5d                   	pop    %ebp
f01176fa:	c3                   	ret    

f01176fb <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f01176fb:	55                   	push   %ebp
f01176fc:	89 e5                	mov    %esp,%ebp
f01176fe:	57                   	push   %edi
f01176ff:	56                   	push   %esi
f0117700:	53                   	push   %ebx
f0117701:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0117707:	8d 45 8e             	lea    -0x72(%ebp),%eax
f011770a:	bb 24 c9 12 f0       	mov    $0xf012c924,%ebx
f011770f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0117714:	89 c7                	mov    %eax,%edi
f0117716:	89 de                	mov    %ebx,%esi
f0117718:	89 d1                	mov    %edx,%ecx
f011771a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011771c:	8d 55 9d             	lea    -0x63(%ebp),%edx
f011771f:	b9 23 00 00 00       	mov    $0x23,%ecx
f0117724:	b0 00                	mov    $0x0,%al
f0117726:	89 d7                	mov    %edx,%edi
f0117728:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011772a:	6a 00                	push   $0x0
f011772c:	6a 0a                	push   $0xa
f011772e:	6a 14                	push   $0x14
f0117730:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0117733:	50                   	push   %eax
f0117734:	e8 37 23 ff ff       	call   f0109a70 <env_create>
f0117739:	83 c4 10             	add    $0x10,%esp
f011773c:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f011773f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117742:	8b 40 64             	mov    0x64(%eax),%eax
f0117745:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0117748:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011774b:	8b 40 68             	mov    0x68(%eax),%eax
f011774e:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0117751:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117754:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0117757:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f011775e:	75 70 20 
f0117761:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0117768:	00 00 00 
f011776b:	8d 55 82             	lea    -0x7e(%ebp),%edx
f011776e:	b9 03 00 00 00       	mov    $0x3,%ecx
f0117773:	b8 00 00 00 00       	mov    $0x0,%eax
f0117778:	89 d7                	mov    %edx,%edi
f011777a:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011777c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011777f:	8b 40 10             	mov    0x10(%eax),%eax
f0117782:	83 ec 08             	sub    $0x8,%esp
f0117785:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f011778b:	52                   	push   %edx
f011778c:	50                   	push   %eax
f011778d:	e8 52 b2 00 00       	call   f01229e4 <ltostr>
f0117792:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0117795:	83 ec 04             	sub    $0x4,%esp
f0117798:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011779e:	50                   	push   %eax
f011779f:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f01177a5:	50                   	push   %eax
f01177a6:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f01177ac:	50                   	push   %eax
f01177ad:	e8 0b b3 00 00       	call   f0122abd <strcconcat>
f01177b2:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01177b5:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f01177bc:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f01177c3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f01177ca:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f01177ce:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01177d5:	00 00 00 
	uint32 num_tables = 0;
f01177d8:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01177df:	00 00 00 
	ClearUserSpace(proc_directory);
f01177e2:	83 ec 0c             	sub    $0xc,%esp
f01177e5:	ff 75 d8             	pushl  -0x28(%ebp)
f01177e8:	e8 d8 11 00 00       	call   f01189c5 <ClearUserSpace>
f01177ed:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f01177f0:	83 ec 0c             	sub    $0xc,%esp
f01177f3:	68 68 da 12 f0       	push   $0xf012da68
f01177f8:	e8 6f 97 fe ff       	call   f0100f6c <cprintf>
f01177fd:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0117800:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117803:	c1 e0 03             	shl    $0x3,%eax
f0117806:	89 c2                	mov    %eax,%edx
f0117808:	83 ec 0c             	sub    $0xc,%esp
f011780b:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117811:	50                   	push   %eax
f0117812:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117818:	50                   	push   %eax
f0117819:	52                   	push   %edx
f011781a:	6a 00                	push   $0x0
f011781c:	ff 75 d8             	pushl  -0x28(%ebp)
f011781f:	e8 14 1f ff ff       	call   f0109738 <calculate_allocated_space>
f0117824:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0117827:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011782d:	85 c0                	test   %eax,%eax
f011782f:	74 27                	je     f0117858 <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0117831:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117837:	83 ec 0c             	sub    $0xc,%esp
f011783a:	6a 00                	push   $0x0
f011783c:	50                   	push   %eax
f011783d:	68 d4 db 12 f0       	push   $0xf012dbd4
f0117842:	68 0b 07 00 00       	push   $0x70b
f0117847:	68 22 c2 12 f0       	push   $0xf012c222
f011784c:	e8 66 8c fe ff       	call   f01004b7 <_warn>
f0117851:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117854:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0117858:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011785e:	85 c0                	test   %eax,%eax
f0117860:	74 27                	je     f0117889 <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0117862:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117868:	83 ec 0c             	sub    $0xc,%esp
f011786b:	6a 00                	push   $0x0
f011786d:	50                   	push   %eax
f011786e:	68 34 dc 12 f0       	push   $0xf012dc34
f0117873:	68 10 07 00 00       	push   $0x710
f0117878:	68 22 c2 12 f0       	push   $0xf012c222
f011787d:	e8 35 8c fe ff       	call   f01004b7 <_warn>
f0117882:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117885:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117889:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011788d:	74 04                	je     f0117893 <test_calculate_allocated_space+0x198>
f011788f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117893:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0117897:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011789e:	00 00 00 
		num_pages = 0;
f01178a1:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01178a8:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f01178ab:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01178ae:	c1 e0 02             	shl    $0x2,%eax
f01178b1:	89 c2                	mov    %eax,%edx
f01178b3:	83 ec 0c             	sub    $0xc,%esp
f01178b6:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01178bc:	50                   	push   %eax
f01178bd:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01178c3:	50                   	push   %eax
f01178c4:	52                   	push   %edx
f01178c5:	6a 00                	push   $0x0
f01178c7:	ff 75 d8             	pushl  -0x28(%ebp)
f01178ca:	e8 69 1e ff ff       	call   f0109738 <calculate_allocated_space>
f01178cf:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01178d2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01178d8:	85 c0                	test   %eax,%eax
f01178da:	74 27                	je     f0117903 <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01178dc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01178e2:	83 ec 0c             	sub    $0xc,%esp
f01178e5:	6a 00                	push   $0x0
f01178e7:	50                   	push   %eax
f01178e8:	68 d4 db 12 f0       	push   $0xf012dbd4
f01178ed:	68 1c 07 00 00       	push   $0x71c
f01178f2:	68 22 c2 12 f0       	push   $0xf012c222
f01178f7:	e8 bb 8b fe ff       	call   f01004b7 <_warn>
f01178fc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01178ff:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0117903:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117909:	85 c0                	test   %eax,%eax
f011790b:	74 27                	je     f0117934 <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011790d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117913:	83 ec 0c             	sub    $0xc,%esp
f0117916:	6a 00                	push   $0x0
f0117918:	50                   	push   %eax
f0117919:	68 34 dc 12 f0       	push   $0xf012dc34
f011791e:	68 21 07 00 00       	push   $0x721
f0117923:	68 22 c2 12 f0       	push   $0xf012c222
f0117928:	e8 8a 8b fe ff       	call   f01004b7 <_warn>
f011792d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117930:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117934:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117938:	74 04                	je     f011793e <test_calculate_allocated_space+0x243>
f011793a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011793e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0117942:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0117949:	00 00 00 
		num_pages = 0;
f011794c:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117953:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0117956:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117959:	c1 e0 0a             	shl    $0xa,%eax
f011795c:	89 c2                	mov    %eax,%edx
f011795e:	83 ec 0c             	sub    $0xc,%esp
f0117961:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117967:	50                   	push   %eax
f0117968:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011796e:	50                   	push   %eax
f011796f:	52                   	push   %edx
f0117970:	6a 00                	push   $0x0
f0117972:	ff 75 d8             	pushl  -0x28(%ebp)
f0117975:	e8 be 1d ff ff       	call   f0109738 <calculate_allocated_space>
f011797a:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011797d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117983:	85 c0                	test   %eax,%eax
f0117985:	74 27                	je     f01179ae <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0117987:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011798d:	83 ec 0c             	sub    $0xc,%esp
f0117990:	6a 00                	push   $0x0
f0117992:	50                   	push   %eax
f0117993:	68 d4 db 12 f0       	push   $0xf012dbd4
f0117998:	68 2d 07 00 00       	push   $0x72d
f011799d:	68 22 c2 12 f0       	push   $0xf012c222
f01179a2:	e8 10 8b fe ff       	call   f01004b7 <_warn>
f01179a7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01179aa:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01179ae:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01179b4:	85 c0                	test   %eax,%eax
f01179b6:	74 27                	je     f01179df <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01179b8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01179be:	83 ec 0c             	sub    $0xc,%esp
f01179c1:	6a 00                	push   $0x0
f01179c3:	50                   	push   %eax
f01179c4:	68 34 dc 12 f0       	push   $0xf012dc34
f01179c9:	68 32 07 00 00       	push   $0x732
f01179ce:	68 22 c2 12 f0       	push   $0xf012c222
f01179d3:	e8 df 8a fe ff       	call   f01004b7 <_warn>
f01179d8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01179db:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01179df:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01179e3:	74 04                	je     f01179e9 <test_calculate_allocated_space+0x2ee>
f01179e5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01179e9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f01179ed:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01179f4:	00 00 00 
		num_pages = 0;
f01179f7:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01179fe:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0117a01:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0117a04:	89 d0                	mov    %edx,%eax
f0117a06:	01 c0                	add    %eax,%eax
f0117a08:	01 d0                	add    %edx,%eax
f0117a0a:	01 c0                	add    %eax,%eax
f0117a0c:	05 00 10 00 00       	add    $0x1000,%eax
f0117a11:	89 c2                	mov    %eax,%edx
f0117a13:	83 ec 0c             	sub    $0xc,%esp
f0117a16:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117a1c:	50                   	push   %eax
f0117a1d:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117a23:	50                   	push   %eax
f0117a24:	52                   	push   %edx
f0117a25:	68 00 10 00 00       	push   $0x1000
f0117a2a:	ff 75 d8             	pushl  -0x28(%ebp)
f0117a2d:	e8 06 1d ff ff       	call   f0109738 <calculate_allocated_space>
f0117a32:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0117a35:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117a3b:	85 c0                	test   %eax,%eax
f0117a3d:	74 27                	je     f0117a66 <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0117a3f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117a45:	83 ec 0c             	sub    $0xc,%esp
f0117a48:	6a 00                	push   $0x0
f0117a4a:	50                   	push   %eax
f0117a4b:	68 d4 db 12 f0       	push   $0xf012dbd4
f0117a50:	68 3f 07 00 00       	push   $0x73f
f0117a55:	68 22 c2 12 f0       	push   $0xf012c222
f0117a5a:	e8 58 8a fe ff       	call   f01004b7 <_warn>
f0117a5f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117a62:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0117a66:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117a6c:	85 c0                	test   %eax,%eax
f0117a6e:	74 27                	je     f0117a97 <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0117a70:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117a76:	83 ec 0c             	sub    $0xc,%esp
f0117a79:	6a 00                	push   $0x0
f0117a7b:	50                   	push   %eax
f0117a7c:	68 34 dc 12 f0       	push   $0xf012dc34
f0117a81:	68 44 07 00 00       	push   $0x744
f0117a86:	68 22 c2 12 f0       	push   $0xf012c222
f0117a8b:	e8 27 8a fe ff       	call   f01004b7 <_warn>
f0117a90:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117a93:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117a97:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117a9b:	74 04                	je     f0117aa1 <test_calculate_allocated_space+0x3a6>
f0117a9d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117aa1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f0117aa5:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0117aac:	00 00 00 
		num_pages = 0;
f0117aaf:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117ab6:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0117ab9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117abc:	89 c2                	mov    %eax,%edx
f0117abe:	01 d2                	add    %edx,%edx
f0117ac0:	01 d0                	add    %edx,%eax
f0117ac2:	05 00 18 00 00       	add    $0x1800,%eax
f0117ac7:	89 c2                	mov    %eax,%edx
f0117ac9:	83 ec 0c             	sub    $0xc,%esp
f0117acc:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117ad2:	50                   	push   %eax
f0117ad3:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117ad9:	50                   	push   %eax
f0117ada:	52                   	push   %edx
f0117adb:	68 00 18 00 00       	push   $0x1800
f0117ae0:	ff 75 d8             	pushl  -0x28(%ebp)
f0117ae3:	e8 50 1c ff ff       	call   f0109738 <calculate_allocated_space>
f0117ae8:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0117aeb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117af1:	85 c0                	test   %eax,%eax
f0117af3:	74 27                	je     f0117b1c <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0117af5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117afb:	83 ec 0c             	sub    $0xc,%esp
f0117afe:	6a 00                	push   $0x0
f0117b00:	50                   	push   %eax
f0117b01:	68 d4 db 12 f0       	push   $0xf012dbd4
f0117b06:	68 50 07 00 00       	push   $0x750
f0117b0b:	68 22 c2 12 f0       	push   $0xf012c222
f0117b10:	e8 a2 89 fe ff       	call   f01004b7 <_warn>
f0117b15:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117b18:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0117b1c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117b22:	85 c0                	test   %eax,%eax
f0117b24:	74 27                	je     f0117b4d <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0117b26:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117b2c:	83 ec 0c             	sub    $0xc,%esp
f0117b2f:	6a 00                	push   $0x0
f0117b31:	50                   	push   %eax
f0117b32:	68 34 dc 12 f0       	push   $0xf012dc34
f0117b37:	68 55 07 00 00       	push   $0x755
f0117b3c:	68 22 c2 12 f0       	push   $0xf012c222
f0117b41:	e8 71 89 fe ff       	call   f01004b7 <_warn>
f0117b46:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117b49:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117b4d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117b51:	74 04                	je     f0117b57 <test_calculate_allocated_space+0x45c>
f0117b53:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117b57:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0117b5b:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0117b62:	00 00 00 
		num_pages = 0;
f0117b65:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117b6c:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0117b6f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117b72:	89 d0                	mov    %edx,%eax
f0117b74:	c1 e0 02             	shl    $0x2,%eax
f0117b77:	01 d0                	add    %edx,%eax
f0117b79:	01 c0                	add    %eax,%eax
f0117b7b:	05 00 00 40 00       	add    $0x400000,%eax
f0117b80:	89 c2                	mov    %eax,%edx
f0117b82:	83 ec 0c             	sub    $0xc,%esp
f0117b85:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117b8b:	50                   	push   %eax
f0117b8c:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117b92:	50                   	push   %eax
f0117b93:	52                   	push   %edx
f0117b94:	68 00 00 40 00       	push   $0x400000
f0117b99:	ff 75 d8             	pushl  -0x28(%ebp)
f0117b9c:	e8 97 1b ff ff       	call   f0109738 <calculate_allocated_space>
f0117ba1:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0117ba4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117baa:	85 c0                	test   %eax,%eax
f0117bac:	74 27                	je     f0117bd5 <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0117bae:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117bb4:	83 ec 0c             	sub    $0xc,%esp
f0117bb7:	6a 00                	push   $0x0
f0117bb9:	50                   	push   %eax
f0117bba:	68 d4 db 12 f0       	push   $0xf012dbd4
f0117bbf:	68 61 07 00 00       	push   $0x761
f0117bc4:	68 22 c2 12 f0       	push   $0xf012c222
f0117bc9:	e8 e9 88 fe ff       	call   f01004b7 <_warn>
f0117bce:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117bd1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0117bd5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117bdb:	85 c0                	test   %eax,%eax
f0117bdd:	74 27                	je     f0117c06 <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0117bdf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117be5:	83 ec 0c             	sub    $0xc,%esp
f0117be8:	6a 00                	push   $0x0
f0117bea:	50                   	push   %eax
f0117beb:	68 34 dc 12 f0       	push   $0xf012dc34
f0117bf0:	68 66 07 00 00       	push   $0x766
f0117bf5:	68 22 c2 12 f0       	push   $0xf012c222
f0117bfa:	e8 b8 88 fe ff       	call   f01004b7 <_warn>
f0117bff:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117c02:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117c06:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117c0a:	74 04                	je     f0117c10 <test_calculate_allocated_space+0x515>
f0117c0c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117c10:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f0117c14:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0117c1b:	00 00 00 
		num_pages = 0;
f0117c1e:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117c25:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0117c28:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117c2b:	05 00 00 38 00       	add    $0x380000,%eax
f0117c30:	01 c0                	add    %eax,%eax
f0117c32:	89 c2                	mov    %eax,%edx
f0117c34:	83 ec 0c             	sub    $0xc,%esp
f0117c37:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117c3d:	50                   	push   %eax
f0117c3e:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117c44:	50                   	push   %eax
f0117c45:	52                   	push   %edx
f0117c46:	68 00 00 70 00       	push   $0x700000
f0117c4b:	ff 75 d8             	pushl  -0x28(%ebp)
f0117c4e:	e8 e5 1a ff ff       	call   f0109738 <calculate_allocated_space>
f0117c53:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0117c56:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117c5c:	85 c0                	test   %eax,%eax
f0117c5e:	74 27                	je     f0117c87 <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0117c60:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117c66:	83 ec 0c             	sub    $0xc,%esp
f0117c69:	6a 00                	push   $0x0
f0117c6b:	50                   	push   %eax
f0117c6c:	68 d4 db 12 f0       	push   $0xf012dbd4
f0117c71:	68 73 07 00 00       	push   $0x773
f0117c76:	68 22 c2 12 f0       	push   $0xf012c222
f0117c7b:	e8 37 88 fe ff       	call   f01004b7 <_warn>
f0117c80:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117c83:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0117c87:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117c8d:	85 c0                	test   %eax,%eax
f0117c8f:	74 27                	je     f0117cb8 <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0117c91:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117c97:	83 ec 0c             	sub    $0xc,%esp
f0117c9a:	6a 00                	push   $0x0
f0117c9c:	50                   	push   %eax
f0117c9d:	68 34 dc 12 f0       	push   $0xf012dc34
f0117ca2:	68 78 07 00 00       	push   $0x778
f0117ca7:	68 22 c2 12 f0       	push   $0xf012c222
f0117cac:	e8 06 88 fe ff       	call   f01004b7 <_warn>
f0117cb1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117cb4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0117cb8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117cbc:	74 04                	je     f0117cc2 <test_calculate_allocated_space+0x5c7>
f0117cbe:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0117cc2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0117cc6:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0117ccd:	00 00 00 
		num_pages = 0;
f0117cd0:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117cd7:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0117cda:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117cdd:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0117ce2:	89 c2                	mov    %eax,%edx
f0117ce4:	83 ec 0c             	sub    $0xc,%esp
f0117ce7:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117ced:	50                   	push   %eax
f0117cee:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117cf4:	50                   	push   %eax
f0117cf5:	52                   	push   %edx
f0117cf6:	68 ff ff 3f 00       	push   $0x3fffff
f0117cfb:	ff 75 d8             	pushl  -0x28(%ebp)
f0117cfe:	e8 35 1a ff ff       	call   f0109738 <calculate_allocated_space>
f0117d03:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0117d06:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117d0c:	85 c0                	test   %eax,%eax
f0117d0e:	74 27                	je     f0117d37 <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0117d10:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117d16:	83 ec 0c             	sub    $0xc,%esp
f0117d19:	6a 00                	push   $0x0
f0117d1b:	50                   	push   %eax
f0117d1c:	68 d4 db 12 f0       	push   $0xf012dbd4
f0117d21:	68 84 07 00 00       	push   $0x784
f0117d26:	68 22 c2 12 f0       	push   $0xf012c222
f0117d2b:	e8 87 87 fe ff       	call   f01004b7 <_warn>
f0117d30:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117d33:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0117d37:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117d3d:	85 c0                	test   %eax,%eax
f0117d3f:	74 27                	je     f0117d68 <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0117d41:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117d47:	83 ec 0c             	sub    $0xc,%esp
f0117d4a:	6a 00                	push   $0x0
f0117d4c:	50                   	push   %eax
f0117d4d:	68 34 dc 12 f0       	push   $0xf012dc34
f0117d52:	68 89 07 00 00       	push   $0x789
f0117d57:	68 22 c2 12 f0       	push   $0xf012c222
f0117d5c:	e8 56 87 fe ff       	call   f01004b7 <_warn>
f0117d61:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117d64:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0117d68:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117d6c:	74 04                	je     f0117d72 <test_calculate_allocated_space+0x677>
f0117d6e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0117d72:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0117d76:	83 ec 0c             	sub    $0xc,%esp
f0117d79:	68 d5 d5 12 f0       	push   $0xf012d5d5
f0117d7e:	e8 e9 91 fe ff       	call   f0100f6c <cprintf>
f0117d83:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0117d86:	83 ec 0c             	sub    $0xc,%esp
f0117d89:	68 f4 da 12 f0       	push   $0xf012daf4
f0117d8e:	e8 d9 91 fe ff       	call   f0100f6c <cprintf>
f0117d93:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0117d96:	83 ec 04             	sub    $0x4,%esp
f0117d99:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0117d9f:	50                   	push   %eax
f0117da0:	68 8e c9 12 f0       	push   $0xf012c98e
f0117da5:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0117dab:	50                   	push   %eax
f0117dac:	e8 0c ad 00 00       	call   f0122abd <strcconcat>
f0117db1:	83 c4 10             	add    $0x10,%esp
f0117db4:	83 ec 0c             	sub    $0xc,%esp
f0117db7:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0117dbd:	50                   	push   %eax
f0117dbe:	e8 19 a1 fe ff       	call   f0101edc <execute_command>
f0117dc3:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f0117dc6:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0117dcd:	00 00 00 
		num_pages = 0;
f0117dd0:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117dd7:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0117dda:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117ddd:	c1 e0 03             	shl    $0x3,%eax
f0117de0:	89 c2                	mov    %eax,%edx
f0117de2:	83 ec 0c             	sub    $0xc,%esp
f0117de5:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117deb:	50                   	push   %eax
f0117dec:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117df2:	50                   	push   %eax
f0117df3:	52                   	push   %edx
f0117df4:	6a 00                	push   $0x0
f0117df6:	ff 75 d8             	pushl  -0x28(%ebp)
f0117df9:	e8 3a 19 ff ff       	call   f0109738 <calculate_allocated_space>
f0117dfe:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0117e01:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0117e08:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0117e0f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117e15:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0117e18:	74 28                	je     f0117e42 <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0117e1a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117e20:	83 ec 0c             	sub    $0xc,%esp
f0117e23:	ff 75 c8             	pushl  -0x38(%ebp)
f0117e26:	50                   	push   %eax
f0117e27:	68 d4 db 12 f0       	push   $0xf012dbd4
f0117e2c:	68 a0 07 00 00       	push   $0x7a0
f0117e31:	68 22 c2 12 f0       	push   $0xf012c222
f0117e36:	e8 7c 86 fe ff       	call   f01004b7 <_warn>
f0117e3b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117e3e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0117e42:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117e48:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117e4b:	74 28                	je     f0117e75 <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0117e4d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117e53:	83 ec 0c             	sub    $0xc,%esp
f0117e56:	ff 75 c4             	pushl  -0x3c(%ebp)
f0117e59:	50                   	push   %eax
f0117e5a:	68 34 dc 12 f0       	push   $0xf012dc34
f0117e5f:	68 a5 07 00 00       	push   $0x7a5
f0117e64:	68 22 c2 12 f0       	push   $0xf012c222
f0117e69:	e8 49 86 fe ff       	call   f01004b7 <_warn>
f0117e6e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117e71:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117e75:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117e79:	74 04                	je     f0117e7f <test_calculate_allocated_space+0x784>
f0117e7b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117e7f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0117e83:	83 ec 04             	sub    $0x4,%esp
f0117e86:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0117e8c:	50                   	push   %eax
f0117e8d:	68 9b c9 12 f0       	push   $0xf012c99b
f0117e92:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0117e98:	50                   	push   %eax
f0117e99:	e8 1f ac 00 00       	call   f0122abd <strcconcat>
f0117e9e:	83 c4 10             	add    $0x10,%esp
f0117ea1:	83 ec 0c             	sub    $0xc,%esp
f0117ea4:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0117eaa:	50                   	push   %eax
f0117eab:	e8 2c a0 fe ff       	call   f0101edc <execute_command>
f0117eb0:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0117eb3:	83 ec 04             	sub    $0x4,%esp
f0117eb6:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0117ebc:	50                   	push   %eax
f0117ebd:	68 28 db 12 f0       	push   $0xf012db28
f0117ec2:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0117ec8:	50                   	push   %eax
f0117ec9:	e8 ef ab 00 00       	call   f0122abd <strcconcat>
f0117ece:	83 c4 10             	add    $0x10,%esp
f0117ed1:	83 ec 0c             	sub    $0xc,%esp
f0117ed4:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0117eda:	50                   	push   %eax
f0117edb:	e8 fc 9f fe ff       	call   f0101edc <execute_command>
f0117ee0:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f0117ee3:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0117eea:	00 00 00 
		num_pages = 0;
f0117eed:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117ef4:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f0117ef7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117efa:	c1 e0 03             	shl    $0x3,%eax
f0117efd:	89 c2                	mov    %eax,%edx
f0117eff:	83 ec 0c             	sub    $0xc,%esp
f0117f02:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117f08:	50                   	push   %eax
f0117f09:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117f0f:	50                   	push   %eax
f0117f10:	52                   	push   %edx
f0117f11:	6a 00                	push   $0x0
f0117f13:	ff 75 d8             	pushl  -0x28(%ebp)
f0117f16:	e8 1d 18 ff ff       	call   f0109738 <calculate_allocated_space>
f0117f1b:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0117f1e:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f0117f25:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0117f2c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117f32:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0117f35:	74 28                	je     f0117f5f <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0117f37:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117f3d:	83 ec 0c             	sub    $0xc,%esp
f0117f40:	ff 75 c8             	pushl  -0x38(%ebp)
f0117f43:	50                   	push   %eax
f0117f44:	68 d4 db 12 f0       	push   $0xf012dbd4
f0117f49:	68 b6 07 00 00       	push   $0x7b6
f0117f4e:	68 22 c2 12 f0       	push   $0xf012c222
f0117f53:	e8 5f 85 fe ff       	call   f01004b7 <_warn>
f0117f58:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117f5b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0117f5f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117f65:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117f68:	74 28                	je     f0117f92 <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0117f6a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117f70:	83 ec 0c             	sub    $0xc,%esp
f0117f73:	ff 75 c4             	pushl  -0x3c(%ebp)
f0117f76:	50                   	push   %eax
f0117f77:	68 34 dc 12 f0       	push   $0xf012dc34
f0117f7c:	68 bb 07 00 00       	push   $0x7bb
f0117f81:	68 22 c2 12 f0       	push   $0xf012c222
f0117f86:	e8 2c 85 fe ff       	call   f01004b7 <_warn>
f0117f8b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117f8e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117f92:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117f96:	74 04                	je     f0117f9c <test_calculate_allocated_space+0x8a1>
f0117f98:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117f9c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0117fa0:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0117fa7:	00 00 00 
		num_pages = 0;
f0117faa:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117fb1:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0117fb4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117fb7:	c1 e0 0a             	shl    $0xa,%eax
f0117fba:	89 c2                	mov    %eax,%edx
f0117fbc:	83 ec 0c             	sub    $0xc,%esp
f0117fbf:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117fc5:	50                   	push   %eax
f0117fc6:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117fcc:	50                   	push   %eax
f0117fcd:	52                   	push   %edx
f0117fce:	6a 00                	push   $0x0
f0117fd0:	ff 75 d8             	pushl  -0x28(%ebp)
f0117fd3:	e8 60 17 ff ff       	call   f0109738 <calculate_allocated_space>
f0117fd8:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0117fdb:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f0117fe2:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0117fe9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117fef:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0117ff2:	74 28                	je     f011801c <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0117ff4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117ffa:	83 ec 0c             	sub    $0xc,%esp
f0117ffd:	ff 75 c8             	pushl  -0x38(%ebp)
f0118000:	50                   	push   %eax
f0118001:	68 d4 db 12 f0       	push   $0xf012dbd4
f0118006:	68 c9 07 00 00       	push   $0x7c9
f011800b:	68 22 c2 12 f0       	push   $0xf012c222
f0118010:	e8 a2 84 fe ff       	call   f01004b7 <_warn>
f0118015:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0118018:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011801c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118022:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0118025:	74 28                	je     f011804f <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0118027:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011802d:	83 ec 0c             	sub    $0xc,%esp
f0118030:	ff 75 c4             	pushl  -0x3c(%ebp)
f0118033:	50                   	push   %eax
f0118034:	68 34 dc 12 f0       	push   $0xf012dc34
f0118039:	68 ce 07 00 00       	push   $0x7ce
f011803e:	68 22 c2 12 f0       	push   $0xf012c222
f0118043:	e8 6f 84 fe ff       	call   f01004b7 <_warn>
f0118048:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011804b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011804f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0118053:	74 04                	je     f0118059 <test_calculate_allocated_space+0x95e>
f0118055:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0118059:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f011805d:	83 ec 04             	sub    $0x4,%esp
f0118060:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0118066:	50                   	push   %eax
f0118067:	68 34 db 12 f0       	push   $0xf012db34
f011806c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0118072:	50                   	push   %eax
f0118073:	e8 45 aa 00 00       	call   f0122abd <strcconcat>
f0118078:	83 c4 10             	add    $0x10,%esp
f011807b:	83 ec 0c             	sub    $0xc,%esp
f011807e:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0118084:	50                   	push   %eax
f0118085:	e8 52 9e fe ff       	call   f0101edc <execute_command>
f011808a:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f011808d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0118094:	00 00 00 
		num_pages = 0;
f0118097:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011809e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f01180a1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01180a4:	89 c2                	mov    %eax,%edx
f01180a6:	01 d2                	add    %edx,%edx
f01180a8:	01 d0                	add    %edx,%eax
f01180aa:	05 00 18 00 00       	add    $0x1800,%eax
f01180af:	89 c2                	mov    %eax,%edx
f01180b1:	83 ec 0c             	sub    $0xc,%esp
f01180b4:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01180ba:	50                   	push   %eax
f01180bb:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01180c1:	50                   	push   %eax
f01180c2:	52                   	push   %edx
f01180c3:	68 00 18 00 00       	push   $0x1800
f01180c8:	ff 75 d8             	pushl  -0x28(%ebp)
f01180cb:	e8 68 16 ff ff       	call   f0109738 <calculate_allocated_space>
f01180d0:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01180d3:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f01180da:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01180e1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01180e7:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01180ea:	74 28                	je     f0118114 <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01180ec:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01180f2:	83 ec 0c             	sub    $0xc,%esp
f01180f5:	ff 75 c8             	pushl  -0x38(%ebp)
f01180f8:	50                   	push   %eax
f01180f9:	68 d4 db 12 f0       	push   $0xf012dbd4
f01180fe:	68 df 07 00 00       	push   $0x7df
f0118103:	68 22 c2 12 f0       	push   $0xf012c222
f0118108:	e8 aa 83 fe ff       	call   f01004b7 <_warn>
f011810d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0118110:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0118114:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011811a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011811d:	74 28                	je     f0118147 <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011811f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118125:	83 ec 0c             	sub    $0xc,%esp
f0118128:	ff 75 c4             	pushl  -0x3c(%ebp)
f011812b:	50                   	push   %eax
f011812c:	68 34 dc 12 f0       	push   $0xf012dc34
f0118131:	68 e4 07 00 00       	push   $0x7e4
f0118136:	68 22 c2 12 f0       	push   $0xf012c222
f011813b:	e8 77 83 fe ff       	call   f01004b7 <_warn>
f0118140:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0118143:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0118147:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011814b:	74 04                	je     f0118151 <test_calculate_allocated_space+0xa56>
f011814d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0118151:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0118155:	83 ec 04             	sub    $0x4,%esp
f0118158:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f011815e:	50                   	push   %eax
f011815f:	68 f4 cb 12 f0       	push   $0xf012cbf4
f0118164:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011816a:	50                   	push   %eax
f011816b:	e8 4d a9 00 00       	call   f0122abd <strcconcat>
f0118170:	83 c4 10             	add    $0x10,%esp
f0118173:	83 ec 0c             	sub    $0xc,%esp
f0118176:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f011817c:	50                   	push   %eax
f011817d:	e8 5a 9d fe ff       	call   f0101edc <execute_command>
f0118182:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f0118185:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011818c:	00 00 00 
		num_pages = 0;
f011818f:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0118196:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0118199:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011819c:	89 d0                	mov    %edx,%eax
f011819e:	c1 e0 02             	shl    $0x2,%eax
f01181a1:	01 d0                	add    %edx,%eax
f01181a3:	01 c0                	add    %eax,%eax
f01181a5:	05 00 00 40 00       	add    $0x400000,%eax
f01181aa:	89 c2                	mov    %eax,%edx
f01181ac:	83 ec 0c             	sub    $0xc,%esp
f01181af:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01181b5:	50                   	push   %eax
f01181b6:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01181bc:	50                   	push   %eax
f01181bd:	52                   	push   %edx
f01181be:	68 00 00 40 00       	push   $0x400000
f01181c3:	ff 75 d8             	pushl  -0x28(%ebp)
f01181c6:	e8 6d 15 ff ff       	call   f0109738 <calculate_allocated_space>
f01181cb:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01181ce:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f01181d5:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01181dc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01181e2:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01181e5:	74 28                	je     f011820f <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01181e7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01181ed:	83 ec 0c             	sub    $0xc,%esp
f01181f0:	ff 75 c8             	pushl  -0x38(%ebp)
f01181f3:	50                   	push   %eax
f01181f4:	68 d4 db 12 f0       	push   $0xf012dbd4
f01181f9:	68 f4 07 00 00       	push   $0x7f4
f01181fe:	68 22 c2 12 f0       	push   $0xf012c222
f0118203:	e8 af 82 fe ff       	call   f01004b7 <_warn>
f0118208:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011820b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011820f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118215:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0118218:	74 28                	je     f0118242 <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011821a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118220:	83 ec 0c             	sub    $0xc,%esp
f0118223:	ff 75 c4             	pushl  -0x3c(%ebp)
f0118226:	50                   	push   %eax
f0118227:	68 34 dc 12 f0       	push   $0xf012dc34
f011822c:	68 f9 07 00 00       	push   $0x7f9
f0118231:	68 22 c2 12 f0       	push   $0xf012c222
f0118236:	e8 7c 82 fe ff       	call   f01004b7 <_warn>
f011823b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011823e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0118242:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0118246:	74 04                	je     f011824c <test_calculate_allocated_space+0xb51>
f0118248:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011824c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0118250:	83 ec 04             	sub    $0x4,%esp
f0118253:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0118259:	50                   	push   %eax
f011825a:	68 fe cb 12 f0       	push   $0xf012cbfe
f011825f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0118265:	50                   	push   %eax
f0118266:	e8 52 a8 00 00       	call   f0122abd <strcconcat>
f011826b:	83 c4 10             	add    $0x10,%esp
f011826e:	83 ec 0c             	sub    $0xc,%esp
f0118271:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0118277:	50                   	push   %eax
f0118278:	e8 5f 9c fe ff       	call   f0101edc <execute_command>
f011827d:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0118280:	83 ec 04             	sub    $0x4,%esp
f0118283:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0118289:	50                   	push   %eax
f011828a:	68 3c db 12 f0       	push   $0xf012db3c
f011828f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0118295:	50                   	push   %eax
f0118296:	e8 22 a8 00 00       	call   f0122abd <strcconcat>
f011829b:	83 c4 10             	add    $0x10,%esp
f011829e:	83 ec 0c             	sub    $0xc,%esp
f01182a1:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01182a7:	50                   	push   %eax
f01182a8:	e8 2f 9c fe ff       	call   f0101edc <execute_command>
f01182ad:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f01182b0:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01182b7:	00 00 00 
		num_pages = 0;
f01182ba:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01182c1:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f01182c4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01182c7:	05 00 00 38 00       	add    $0x380000,%eax
f01182cc:	01 c0                	add    %eax,%eax
f01182ce:	89 c2                	mov    %eax,%edx
f01182d0:	83 ec 0c             	sub    $0xc,%esp
f01182d3:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01182d9:	50                   	push   %eax
f01182da:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01182e0:	50                   	push   %eax
f01182e1:	52                   	push   %edx
f01182e2:	68 00 00 70 00       	push   $0x700000
f01182e7:	ff 75 d8             	pushl  -0x28(%ebp)
f01182ea:	e8 49 14 ff ff       	call   f0109738 <calculate_allocated_space>
f01182ef:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01182f2:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f01182f9:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0118300:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118306:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0118309:	74 28                	je     f0118333 <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011830b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118311:	83 ec 0c             	sub    $0xc,%esp
f0118314:	ff 75 c8             	pushl  -0x38(%ebp)
f0118317:	50                   	push   %eax
f0118318:	68 d4 db 12 f0       	push   $0xf012dbd4
f011831d:	68 0b 08 00 00       	push   $0x80b
f0118322:	68 22 c2 12 f0       	push   $0xf012c222
f0118327:	e8 8b 81 fe ff       	call   f01004b7 <_warn>
f011832c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011832f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0118333:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118339:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011833c:	74 28                	je     f0118366 <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011833e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118344:	83 ec 0c             	sub    $0xc,%esp
f0118347:	ff 75 c4             	pushl  -0x3c(%ebp)
f011834a:	50                   	push   %eax
f011834b:	68 34 dc 12 f0       	push   $0xf012dc34
f0118350:	68 10 08 00 00       	push   $0x810
f0118355:	68 22 c2 12 f0       	push   $0xf012c222
f011835a:	e8 58 81 fe ff       	call   f01004b7 <_warn>
f011835f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0118362:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0118366:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011836a:	74 04                	je     f0118370 <test_calculate_allocated_space+0xc75>
f011836c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0118370:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f0118374:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011837b:	00 00 00 
		num_pages = 0;
f011837e:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0118385:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0118388:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011838b:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0118390:	89 c2                	mov    %eax,%edx
f0118392:	83 ec 0c             	sub    $0xc,%esp
f0118395:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011839b:	50                   	push   %eax
f011839c:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01183a2:	50                   	push   %eax
f01183a3:	52                   	push   %edx
f01183a4:	68 ff ff 3f 00       	push   $0x3fffff
f01183a9:	ff 75 d8             	pushl  -0x28(%ebp)
f01183ac:	e8 87 13 ff ff       	call   f0109738 <calculate_allocated_space>
f01183b1:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01183b4:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f01183bb:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01183c2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01183c8:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01183cb:	74 28                	je     f01183f5 <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01183cd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01183d3:	83 ec 0c             	sub    $0xc,%esp
f01183d6:	ff 75 c8             	pushl  -0x38(%ebp)
f01183d9:	50                   	push   %eax
f01183da:	68 d4 db 12 f0       	push   $0xf012dbd4
f01183df:	68 1e 08 00 00       	push   $0x81e
f01183e4:	68 22 c2 12 f0       	push   $0xf012c222
f01183e9:	e8 c9 80 fe ff       	call   f01004b7 <_warn>
f01183ee:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01183f1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01183f5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01183fb:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01183fe:	74 28                	je     f0118428 <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0118400:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118406:	83 ec 0c             	sub    $0xc,%esp
f0118409:	ff 75 c4             	pushl  -0x3c(%ebp)
f011840c:	50                   	push   %eax
f011840d:	68 34 dc 12 f0       	push   $0xf012dc34
f0118412:	68 23 08 00 00       	push   $0x823
f0118417:	68 22 c2 12 f0       	push   $0xf012c222
f011841c:	e8 96 80 fe ff       	call   f01004b7 <_warn>
f0118421:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0118424:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0118428:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011842c:	74 04                	je     f0118432 <test_calculate_allocated_space+0xd37>
f011842e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0118432:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0118436:	83 ec 0c             	sub    $0xc,%esp
f0118439:	68 af cb 12 f0       	push   $0xf012cbaf
f011843e:	e8 29 8b fe ff       	call   f0100f6c <cprintf>
f0118443:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0118446:	83 ec 08             	sub    $0x8,%esp
f0118449:	ff 75 e4             	pushl  -0x1c(%ebp)
f011844c:	68 90 dc 12 f0       	push   $0xf012dc90
f0118451:	e8 16 8b fe ff       	call   f0100f6c <cprintf>
f0118456:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0118459:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011845d:	75 10                	jne    f011846f <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f011845f:	83 ec 0c             	sub    $0xc,%esp
f0118462:	68 d0 dc 12 f0       	push   $0xf012dcd0
f0118467:	e8 00 8b fe ff       	call   f0100f6c <cprintf>
f011846c:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011846f:	a1 84 2b 5a f0       	mov    0xf05a2b84,%eax
f0118474:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0118477:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011847a:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011847d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0118482:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0118485:	5b                   	pop    %ebx
f0118486:	5e                   	pop    %esi
f0118487:	5f                   	pop    %edi
f0118488:	5d                   	pop    %ebp
f0118489:	c3                   	ret    

f011848a <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f011848a:	55                   	push   %ebp
f011848b:	89 e5                	mov    %esp,%ebp
f011848d:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0118490:	8b 45 10             	mov    0x10(%ebp),%eax
f0118493:	ba 01 00 00 00       	mov    $0x1,%edx
f0118498:	88 c1                	mov    %al,%cl
f011849a:	d3 e2                	shl    %cl,%edx
f011849c:	89 d0                	mov    %edx,%eax
f011849e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01184a1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01184a4:	c1 e8 16             	shr    $0x16,%eax
f01184a7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01184ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01184b1:	01 d0                	add    %edx,%eax
f01184b3:	8b 00                	mov    (%eax),%eax
f01184b5:	83 e0 01             	and    $0x1,%eax
f01184b8:	85 c0                	test   %eax,%eax
f01184ba:	75 07                	jne    f01184c3 <CB+0x39>
f01184bc:	b8 00 00 00 00       	mov    $0x0,%eax
f01184c1:	eb 76                	jmp    f0118539 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01184c3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01184c6:	c1 e8 16             	shr    $0x16,%eax
f01184c9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01184d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01184d3:	01 d0                	add    %edx,%eax
f01184d5:	8b 00                	mov    (%eax),%eax
f01184d7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01184dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01184df:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01184e2:	c1 e8 0c             	shr    $0xc,%eax
f01184e5:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01184e8:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f01184ed:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01184f0:	72 17                	jb     f0118509 <CB+0x7f>
f01184f2:	ff 75 f0             	pushl  -0x10(%ebp)
f01184f5:	68 1c dd 12 f0       	push   $0xf012dd1c
f01184fa:	68 3e 08 00 00       	push   $0x83e
f01184ff:	68 22 c2 12 f0       	push   $0xf012c222
f0118504:	e8 11 7e fe ff       	call   f010031a <_panic>
f0118509:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011850c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0118511:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f0118514:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118517:	c1 e8 0c             	shr    $0xc,%eax
f011851a:	25 ff 03 00 00       	and    $0x3ff,%eax
f011851f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118526:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0118529:	01 d0                	add    %edx,%eax
f011852b:	8b 00                	mov    (%eax),%eax
f011852d:	23 45 f4             	and    -0xc(%ebp),%eax
f0118530:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0118533:	0f 94 c0             	sete   %al
f0118536:	0f b6 c0             	movzbl %al,%eax
}
f0118539:	c9                   	leave  
f011853a:	c3                   	ret    

f011853b <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f011853b:	55                   	push   %ebp
f011853c:	89 e5                	mov    %esp,%ebp
f011853e:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0118541:	8b 45 10             	mov    0x10(%ebp),%eax
f0118544:	ba 01 00 00 00       	mov    $0x1,%edx
f0118549:	88 c1                	mov    %al,%cl
f011854b:	d3 e2                	shl    %cl,%edx
f011854d:	89 d0                	mov    %edx,%eax
f011854f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0118552:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118555:	c1 e8 16             	shr    $0x16,%eax
f0118558:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011855f:	8b 45 08             	mov    0x8(%ebp),%eax
f0118562:	01 d0                	add    %edx,%eax
f0118564:	8b 00                	mov    (%eax),%eax
f0118566:	83 e0 01             	and    $0x1,%eax
f0118569:	85 c0                	test   %eax,%eax
f011856b:	75 0a                	jne    f0118577 <SB+0x3c>
f011856d:	b8 00 00 00 00       	mov    $0x0,%eax
f0118572:	e9 cd 00 00 00       	jmp    f0118644 <SB+0x109>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0118577:	8b 45 0c             	mov    0xc(%ebp),%eax
f011857a:	c1 e8 16             	shr    $0x16,%eax
f011857d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118584:	8b 45 08             	mov    0x8(%ebp),%eax
f0118587:	01 d0                	add    %edx,%eax
f0118589:	8b 00                	mov    (%eax),%eax
f011858b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0118590:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0118593:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118596:	c1 e8 0c             	shr    $0xc,%eax
f0118599:	89 45 ec             	mov    %eax,-0x14(%ebp)
f011859c:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f01185a1:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01185a4:	72 17                	jb     f01185bd <SB+0x82>
f01185a6:	ff 75 f0             	pushl  -0x10(%ebp)
f01185a9:	68 1c dd 12 f0       	push   $0xf012dd1c
f01185ae:	68 46 08 00 00       	push   $0x846
f01185b3:	68 22 c2 12 f0       	push   $0xf012c222
f01185b8:	e8 5d 7d fe ff       	call   f010031a <_panic>
f01185bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01185c0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01185c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
f01185c8:	83 7d 14 ff          	cmpl   $0xffffffff,0x14(%ebp)
f01185cc:	74 3c                	je     f011860a <SB+0xcf>
f01185ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f01185d1:	c1 e8 0c             	shr    $0xc,%eax
f01185d4:	25 ff 03 00 00       	and    $0x3ff,%eax
f01185d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01185e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01185e3:	01 d0                	add    %edx,%eax
f01185e5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01185e8:	c1 ea 0c             	shr    $0xc,%edx
f01185eb:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01185f1:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f01185f8:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01185fb:	01 ca                	add    %ecx,%edx
f01185fd:	8b 12                	mov    (%edx),%edx
f01185ff:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0118602:	f7 d1                	not    %ecx
f0118604:	21 ca                	and    %ecx,%edx
f0118606:	89 10                	mov    %edx,(%eax)
f0118608:	eb 35                	jmp    f011863f <SB+0x104>
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
f011860a:	8b 45 0c             	mov    0xc(%ebp),%eax
f011860d:	c1 e8 0c             	shr    $0xc,%eax
f0118610:	25 ff 03 00 00       	and    $0x3ff,%eax
f0118615:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011861c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011861f:	01 c2                	add    %eax,%edx
f0118621:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118624:	c1 e8 0c             	shr    $0xc,%eax
f0118627:	25 ff 03 00 00       	and    $0x3ff,%eax
f011862c:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0118633:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0118636:	01 c8                	add    %ecx,%eax
f0118638:	8b 00                	mov    (%eax),%eax
f011863a:	0b 45 f4             	or     -0xc(%ebp),%eax
f011863d:	89 02                	mov    %eax,(%edx)
	return 0;
f011863f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0118644:	c9                   	leave  
f0118645:	c3                   	ret    

f0118646 <CPs>:
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f0118646:	55                   	push   %ebp
f0118647:	89 e5                	mov    %esp,%ebp
f0118649:	83 ec 28             	sub    $0x28,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011864c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011864f:	c1 e8 16             	shr    $0x16,%eax
f0118652:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118659:	8b 45 08             	mov    0x8(%ebp),%eax
f011865c:	01 d0                	add    %edx,%eax
f011865e:	8b 00                	mov    (%eax),%eax
f0118660:	83 e0 01             	and    $0x1,%eax
f0118663:	85 c0                	test   %eax,%eax
f0118665:	75 0a                	jne    f0118671 <CPs+0x2b>
f0118667:	b8 00 00 00 00       	mov    $0x0,%eax
f011866c:	e9 b8 00 00 00       	jmp    f0118729 <CPs+0xe3>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0118671:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118674:	c1 e8 16             	shr    $0x16,%eax
f0118677:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011867e:	8b 45 08             	mov    0x8(%ebp),%eax
f0118681:	01 d0                	add    %edx,%eax
f0118683:	8b 00                	mov    (%eax),%eax
f0118685:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011868a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011868d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118690:	c1 e8 0c             	shr    $0xc,%eax
f0118693:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0118696:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f011869b:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f011869e:	72 17                	jb     f01186b7 <CPs+0x71>
f01186a0:	ff 75 f0             	pushl  -0x10(%ebp)
f01186a3:	68 1c dd 12 f0       	push   $0xf012dd1c
f01186a8:	68 4f 08 00 00       	push   $0x84f
f01186ad:	68 22 c2 12 f0       	push   $0xf012c222
f01186b2:	e8 63 7c fe ff       	call   f010031a <_panic>
f01186b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01186ba:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01186bf:	89 45 e8             	mov    %eax,-0x18(%ebp)
	for (int i = 0 ; i < 12 ; i++)
f01186c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01186c9:	eb 53                	jmp    f011871e <CPs+0xd8>
	{
		uint32 mask = 1<<i;
f01186cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01186ce:	ba 01 00 00 00       	mov    $0x1,%edx
f01186d3:	88 c1                	mov    %al,%cl
f01186d5:	d3 e2                	shl    %cl,%edx
f01186d7:	89 d0                	mov    %edx,%eax
f01186d9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (!(which & mask))	continue ;
f01186dc:	8b 45 14             	mov    0x14(%ebp),%eax
f01186df:	23 45 e4             	and    -0x1c(%ebp),%eax
f01186e2:	85 c0                	test   %eax,%eax
f01186e4:	74 34                	je     f011871a <CPs+0xd4>
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
f01186e6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01186e9:	c1 e8 0c             	shr    $0xc,%eax
f01186ec:	25 ff 03 00 00       	and    $0x3ff,%eax
f01186f1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01186f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01186fb:	01 d0                	add    %edx,%eax
f01186fd:	8b 00                	mov    (%eax),%eax
f01186ff:	33 45 10             	xor    0x10(%ebp),%eax
f0118702:	23 45 e4             	and    -0x1c(%ebp),%eax
f0118705:	85 c0                	test   %eax,%eax
f0118707:	0f 94 c0             	sete   %al
f011870a:	88 45 e3             	mov    %al,-0x1d(%ebp)
		if (!c) return 0;
f011870d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0118711:	75 08                	jne    f011871b <CPs+0xd5>
f0118713:	b8 00 00 00 00       	mov    $0x0,%eax
f0118718:	eb 0f                	jmp    f0118729 <CPs+0xe3>
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
	{
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
f011871a:	90                   	nop
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
f011871b:	ff 45 f4             	incl   -0xc(%ebp)
f011871e:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
f0118722:	7e a7                	jle    f01186cb <CPs+0x85>
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
		if (!c) return 0;
	}
	return 1;
f0118724:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0118729:	c9                   	leave  
f011872a:	c3                   	ret    

f011872b <CA>:

int CA(uint32 *ptr_dir, uint32 va)
{
f011872b:	55                   	push   %ebp
f011872c:	89 e5                	mov    %esp,%ebp
f011872e:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0118731:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118734:	c1 e8 16             	shr    $0x16,%eax
f0118737:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011873e:	8b 45 08             	mov    0x8(%ebp),%eax
f0118741:	01 d0                	add    %edx,%eax
f0118743:	8b 00                	mov    (%eax),%eax
f0118745:	83 e0 01             	and    $0x1,%eax
f0118748:	85 c0                	test   %eax,%eax
f011874a:	75 07                	jne    f0118753 <CA+0x28>
f011874c:	b8 00 00 00 00       	mov    $0x0,%eax
f0118751:	eb 6f                	jmp    f01187c2 <CA+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0118753:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118756:	c1 e8 16             	shr    $0x16,%eax
f0118759:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118760:	8b 45 08             	mov    0x8(%ebp),%eax
f0118763:	01 d0                	add    %edx,%eax
f0118765:	8b 00                	mov    (%eax),%eax
f0118767:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011876c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011876f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118772:	c1 e8 0c             	shr    $0xc,%eax
f0118775:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0118778:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f011877d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0118780:	72 17                	jb     f0118799 <CA+0x6e>
f0118782:	ff 75 f4             	pushl  -0xc(%ebp)
f0118785:	68 1c dd 12 f0       	push   $0xf012dd1c
f011878a:	68 5e 08 00 00       	push   $0x85e
f011878f:	68 22 c2 12 f0       	push   $0xf012c222
f0118794:	e8 81 7b fe ff       	call   f010031a <_panic>
f0118799:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011879c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01187a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
f01187a4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01187a7:	c1 e8 0c             	shr    $0xc,%eax
f01187aa:	25 ff 03 00 00       	and    $0x3ff,%eax
f01187af:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01187b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01187b9:	01 d0                	add    %edx,%eax
f01187bb:	8b 00                	mov    (%eax),%eax
f01187bd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f01187c2:	c9                   	leave  
f01187c3:	c3                   	ret    

f01187c4 <CE>:

int CE(uint32 *_d, uint32 va)
{
f01187c4:	55                   	push   %ebp
f01187c5:	89 e5                	mov    %esp,%ebp
f01187c7:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01187ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01187cd:	c1 e8 16             	shr    $0x16,%eax
f01187d0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01187d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01187da:	01 d0                	add    %edx,%eax
f01187dc:	8b 00                	mov    (%eax),%eax
f01187de:	83 e0 01             	and    $0x1,%eax
f01187e1:	85 c0                	test   %eax,%eax
f01187e3:	75 07                	jne    f01187ec <CE+0x28>
f01187e5:	b8 00 00 00 00       	mov    $0x0,%eax
f01187ea:	eb 7a                	jmp    f0118866 <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01187ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01187ef:	c1 e8 16             	shr    $0x16,%eax
f01187f2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01187f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01187fc:	01 d0                	add    %edx,%eax
f01187fe:	8b 00                	mov    (%eax),%eax
f0118800:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0118805:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0118808:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011880b:	c1 e8 0c             	shr    $0xc,%eax
f011880e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0118811:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f0118816:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0118819:	72 17                	jb     f0118832 <CE+0x6e>
f011881b:	ff 75 f4             	pushl  -0xc(%ebp)
f011881e:	68 1c dd 12 f0       	push   $0xf012dd1c
f0118823:	68 65 08 00 00       	push   $0x865
f0118828:	68 22 c2 12 f0       	push   $0xf012c222
f011882d:	e8 e8 7a fe ff       	call   f010031a <_panic>
f0118832:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118835:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011883a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f011883d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118840:	c1 e8 0c             	shr    $0xc,%eax
f0118843:	25 ff 03 00 00       	and    $0x3ff,%eax
f0118848:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011884f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0118852:	01 d0                	add    %edx,%eax
f0118854:	8b 00                	mov    (%eax),%eax
f0118856:	85 c0                	test   %eax,%eax
f0118858:	74 07                	je     f0118861 <CE+0x9d>
f011885a:	b8 00 00 00 00       	mov    $0x0,%eax
f011885f:	eb 05                	jmp    f0118866 <CE+0xa2>
	return 1;
f0118861:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0118866:	c9                   	leave  
f0118867:	c3                   	ret    

f0118868 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f0118868:	55                   	push   %ebp
f0118869:	89 e5                	mov    %esp,%ebp
f011886b:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 pd_entry = pd[((((uint32) (va)) >> 22) & 0x3FF)];
f011886e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118871:	c1 e8 16             	shr    $0x16,%eax
f0118874:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011887b:	8b 45 08             	mov    0x8(%ebp),%eax
f011887e:	01 d0                	add    %edx,%eax
f0118880:	8b 00                	mov    (%eax),%eax
f0118882:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ( (pd_entry & 1) == 1)
f0118885:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118888:	83 e0 01             	and    $0x1,%eax
f011888b:	85 c0                	test   %eax,%eax
f011888d:	0f 84 92 00 00 00    	je     f0118925 <CP+0xbd>
	{
		uint32 *t = NULL;
f0118893:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		t = (STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(pd_entry)));
f011889a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011889d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01188a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01188a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01188a8:	c1 e8 0c             	shr    $0xc,%eax
f01188ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01188ae:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f01188b3:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f01188b6:	72 17                	jb     f01188cf <CP+0x67>
f01188b8:	ff 75 ec             	pushl  -0x14(%ebp)
f01188bb:	68 1c dd 12 f0       	push   $0xf012dd1c
f01188c0:	68 71 08 00 00       	push   $0x871
f01188c5:	68 22 c2 12 f0       	push   $0xf012c222
f01188ca:	e8 4b 7a fe ff       	call   f010031a <_panic>
f01188cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01188d2:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01188d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf("va =%x, ENTRY after PERM = %x, perm to set = %x, perm to clear = %x\n", va, t[PTX(va)]&0x00000FFF, ps, pc);

		if (((t[((((uint32) (va)) >> 12) & 0x3FF)]&ps) == ps)&&((~(t[((((uint32) (va)) >> 12) & 0x3FF)])&pc) == pc))
f01188da:	8b 45 0c             	mov    0xc(%ebp),%eax
f01188dd:	c1 e8 0c             	shr    $0xc,%eax
f01188e0:	25 ff 03 00 00       	and    $0x3ff,%eax
f01188e5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01188ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01188ef:	01 d0                	add    %edx,%eax
f01188f1:	8b 00                	mov    (%eax),%eax
f01188f3:	23 45 10             	and    0x10(%ebp),%eax
f01188f6:	3b 45 10             	cmp    0x10(%ebp),%eax
f01188f9:	75 2a                	jne    f0118925 <CP+0xbd>
f01188fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01188fe:	c1 e8 0c             	shr    $0xc,%eax
f0118901:	25 ff 03 00 00       	and    $0x3ff,%eax
f0118906:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011890d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118910:	01 d0                	add    %edx,%eax
f0118912:	8b 00                	mov    (%eax),%eax
f0118914:	f7 d0                	not    %eax
f0118916:	23 45 14             	and    0x14(%ebp),%eax
f0118919:	3b 45 14             	cmp    0x14(%ebp),%eax
f011891c:	75 07                	jne    f0118925 <CP+0xbd>
			return 1;
f011891e:	b8 01 00 00 00       	mov    $0x1,%eax
f0118923:	eb 05                	jmp    f011892a <CP+0xc2>
	}
	return 0;
f0118925:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011892a:	c9                   	leave  
f011892b:	c3                   	ret    

f011892c <GP>:

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f011892c:	55                   	push   %ebp
f011892d:	89 e5                	mov    %esp,%ebp
f011892f:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0118932:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118935:	c1 e8 16             	shr    $0x16,%eax
f0118938:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011893f:	8b 45 08             	mov    0x8(%ebp),%eax
f0118942:	01 d0                	add    %edx,%eax
f0118944:	8b 00                	mov    (%eax),%eax
f0118946:	83 e0 01             	and    $0x1,%eax
f0118949:	85 c0                	test   %eax,%eax
f011894b:	75 07                	jne    f0118954 <GP+0x28>
f011894d:	b8 00 00 00 00       	mov    $0x0,%eax
f0118952:	eb 6f                	jmp    f01189c3 <GP+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0118954:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118957:	c1 e8 16             	shr    $0x16,%eax
f011895a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118961:	8b 45 08             	mov    0x8(%ebp),%eax
f0118964:	01 d0                	add    %edx,%eax
f0118966:	8b 00                	mov    (%eax),%eax
f0118968:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011896d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0118970:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118973:	c1 e8 0c             	shr    $0xc,%eax
f0118976:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0118979:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f011897e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0118981:	72 17                	jb     f011899a <GP+0x6e>
f0118983:	ff 75 f4             	pushl  -0xc(%ebp)
f0118986:	68 1c dd 12 f0       	push   $0xf012dd1c
f011898b:	68 7e 08 00 00       	push   $0x87e
f0118990:	68 22 c2 12 f0       	push   $0xf012c222
f0118995:	e8 80 79 fe ff       	call   f010031a <_panic>
f011899a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011899d:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01189a2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
f01189a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01189a8:	c1 e8 0c             	shr    $0xc,%eax
f01189ab:	25 ff 03 00 00       	and    $0x3ff,%eax
f01189b0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01189b7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01189ba:	01 d0                	add    %edx,%eax
f01189bc:	8b 00                	mov    (%eax),%eax
f01189be:	25 ff 0f 00 00       	and    $0xfff,%eax
}
f01189c3:	c9                   	leave  
f01189c4:	c3                   	ret    

f01189c5 <ClearUserSpace>:

void ClearUserSpace(uint32 *ptr_dir)
{
f01189c5:	55                   	push   %ebp
f01189c6:	89 e5                	mov    %esp,%ebp
f01189c8:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f01189cb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01189d2:	eb 18                	jmp    f01189ec <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f01189d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01189d7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01189de:	8b 45 08             	mov    0x8(%ebp),%eax
f01189e1:	01 d0                	add    %edx,%eax
f01189e3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f01189e9:	ff 45 fc             	incl   -0x4(%ebp)
f01189ec:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01189ef:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f01189f4:	76 de                	jbe    f01189d4 <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f01189f6:	90                   	nop
f01189f7:	c9                   	leave  
f01189f8:	c3                   	ret    

f01189f9 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f01189f9:	55                   	push   %ebp
f01189fa:	89 e5                	mov    %esp,%ebp
f01189fc:	83 ec 38             	sub    $0x38,%esp
f01189ff:	8b 45 2c             	mov    0x2c(%ebp),%eax
f0118a02:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f0118a05:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118a08:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0118a0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f0118a10:	8b 45 10             	mov    0x10(%ebp),%eax
f0118a13:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0118a18:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0118a1b:	e9 ea 01 00 00       	jmp    f0118c0a <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f0118a20:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0118a24:	74 44                	je     f0118a6a <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f0118a26:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118a29:	83 ec 04             	sub    $0x4,%esp
f0118a2c:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0118a2f:	52                   	push   %edx
f0118a30:	50                   	push   %eax
f0118a31:	ff 75 08             	pushl  0x8(%ebp)
f0118a34:	e8 91 fc fe ff       	call   f01086ca <get_frame_info>
f0118a39:	83 c4 10             	add    $0x10,%esp
f0118a3c:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f0118a3f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118a42:	85 c0                	test   %eax,%eax
f0118a44:	75 24                	jne    f0118a6a <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f0118a46:	83 ec 04             	sub    $0x4,%esp
f0118a49:	68 4c dd 12 f0       	push   $0xf012dd4c
f0118a4e:	68 99 08 00 00       	push   $0x899
f0118a53:	68 22 c2 12 f0       	push   $0xf012c222
f0118a58:	e8 5a 7a fe ff       	call   f01004b7 <_warn>
f0118a5d:	83 c4 10             	add    $0x10,%esp
				return 0;
f0118a60:	b8 00 00 00 00       	mov    $0x0,%eax
f0118a65:	e9 b6 01 00 00       	jmp    f0118c20 <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f0118a6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118a6d:	83 ec 04             	sub    $0x4,%esp
f0118a70:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0118a73:	52                   	push   %edx
f0118a74:	50                   	push   %eax
f0118a75:	ff 75 08             	pushl  0x8(%ebp)
f0118a78:	e8 4d fc fe ff       	call   f01086ca <get_frame_info>
f0118a7d:	83 c4 10             	add    $0x10,%esp
f0118a80:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f0118a83:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0118a86:	85 c0                	test   %eax,%eax
f0118a88:	75 24                	jne    f0118aae <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f0118a8a:	83 ec 04             	sub    $0x4,%esp
f0118a8d:	68 78 dd 12 f0       	push   $0xf012dd78
f0118a92:	68 a0 08 00 00       	push   $0x8a0
f0118a97:	68 22 c2 12 f0       	push   $0xf012c222
f0118a9c:	e8 16 7a fe ff       	call   f01004b7 <_warn>
f0118aa1:	83 c4 10             	add    $0x10,%esp
			return 0;
f0118aa4:	b8 00 00 00 00       	mov    $0x0,%eax
f0118aa9:	e9 72 01 00 00       	jmp    f0118c20 <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0118aae:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0118ab2:	75 70                	jne    f0118b24 <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0118ab4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118ab7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0118aba:	c1 ea 0c             	shr    $0xc,%edx
f0118abd:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0118ac3:	c1 e2 02             	shl    $0x2,%edx
f0118ac6:	01 d0                	add    %edx,%eax
f0118ac8:	8b 00                	mov    (%eax),%eax
f0118aca:	c1 e8 0c             	shr    $0xc,%eax
f0118acd:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0118ad0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0118ad3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0118ad6:	c1 ea 0c             	shr    $0xc,%edx
f0118ad9:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0118adf:	c1 e2 02             	shl    $0x2,%edx
f0118ae2:	01 d0                	add    %edx,%eax
f0118ae4:	8b 00                	mov    (%eax),%eax
f0118ae6:	c1 e8 0c             	shr    $0xc,%eax
f0118ae9:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f0118aec:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0118aef:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0118af2:	74 30                	je     f0118b24 <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f0118af4:	83 ec 04             	sub    $0x4,%esp
f0118af7:	ff 75 e4             	pushl  -0x1c(%ebp)
f0118afa:	ff 75 e8             	pushl  -0x18(%ebp)
f0118afd:	ff 75 f0             	pushl  -0x10(%ebp)
f0118b00:	ff 75 f4             	pushl  -0xc(%ebp)
f0118b03:	68 a4 dd 12 f0       	push   $0xf012dda4
f0118b08:	68 aa 08 00 00       	push   $0x8aa
f0118b0d:	68 22 c2 12 f0       	push   $0xf012c222
f0118b12:	e8 a0 79 fe ff       	call   f01004b7 <_warn>
f0118b17:	83 c4 20             	add    $0x20,%esp
				return 0;
f0118b1a:	b8 00 00 00 00       	mov    $0x0,%eax
f0118b1f:	e9 fc 00 00 00       	jmp    f0118c20 <CCP+0x227>
			}
		}
		if (ref != -1)
f0118b24:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f0118b28:	74 52                	je     f0118b7c <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0118b2a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0118b2e:	74 0e                	je     f0118b3e <CCP+0x145>
f0118b30:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0118b33:	8b 40 08             	mov    0x8(%eax),%eax
f0118b36:	0f b7 c0             	movzwl %ax,%eax
f0118b39:	3b 45 18             	cmp    0x18(%ebp),%eax
f0118b3c:	74 3e                	je     f0118b7c <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0118b3e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0118b42:	74 0b                	je     f0118b4f <CCP+0x156>
f0118b44:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0118b47:	8b 40 08             	mov    0x8(%eax),%eax
f0118b4a:	0f b7 c0             	movzwl %ax,%eax
f0118b4d:	eb 05                	jmp    f0118b54 <CCP+0x15b>
f0118b4f:	b8 00 00 00 00       	mov    $0x0,%eax
f0118b54:	83 ec 0c             	sub    $0xc,%esp
f0118b57:	50                   	push   %eax
f0118b58:	ff 75 f0             	pushl  -0x10(%ebp)
f0118b5b:	68 00 de 12 f0       	push   $0xf012de00
f0118b60:	68 b2 08 00 00       	push   $0x8b2
f0118b65:	68 22 c2 12 f0       	push   $0xf012c222
f0118b6a:	e8 48 79 fe ff       	call   f01004b7 <_warn>
f0118b6f:	83 c4 20             	add    $0x20,%esp
				return 0;
f0118b72:	b8 00 00 00 00       	mov    $0x0,%eax
f0118b77:	e9 a4 00 00 00       	jmp    f0118c20 <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0118b7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118b7f:	ff 75 20             	pushl  0x20(%ebp)
f0118b82:	ff 75 1c             	pushl  0x1c(%ebp)
f0118b85:	50                   	push   %eax
f0118b86:	ff 75 08             	pushl  0x8(%ebp)
f0118b89:	e8 b8 fa ff ff       	call   f0118646 <CPs>
f0118b8e:	83 c4 10             	add    $0x10,%esp
f0118b91:	85 c0                	test   %eax,%eax
f0118b93:	7f 21                	jg     f0118bb6 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0118b95:	83 ec 04             	sub    $0x4,%esp
f0118b98:	68 70 de 12 f0       	push   $0xf012de70
f0118b9d:	68 b8 08 00 00       	push   $0x8b8
f0118ba2:	68 22 c2 12 f0       	push   $0xf012c222
f0118ba7:	e8 0b 79 fe ff       	call   f01004b7 <_warn>
f0118bac:	83 c4 10             	add    $0x10,%esp
			return 0;
f0118baf:	b8 00 00 00 00       	mov    $0x0,%eax
f0118bb4:	eb 6a                	jmp    f0118c20 <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0118bb6:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0118bba:	74 3a                	je     f0118bf6 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0118bbc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118bbf:	ff 75 28             	pushl  0x28(%ebp)
f0118bc2:	ff 75 24             	pushl  0x24(%ebp)
f0118bc5:	50                   	push   %eax
f0118bc6:	ff 75 08             	pushl  0x8(%ebp)
f0118bc9:	e8 78 fa ff ff       	call   f0118646 <CPs>
f0118bce:	83 c4 10             	add    $0x10,%esp
f0118bd1:	85 c0                	test   %eax,%eax
f0118bd3:	7f 21                	jg     f0118bf6 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0118bd5:	83 ec 04             	sub    $0x4,%esp
f0118bd8:	68 b8 de 12 f0       	push   $0xf012deb8
f0118bdd:	68 bf 08 00 00       	push   $0x8bf
f0118be2:	68 22 c2 12 f0       	push   $0xf012c222
f0118be7:	e8 cb 78 fe ff       	call   f01004b7 <_warn>
f0118bec:	83 c4 10             	add    $0x10,%esp
				return 0;
f0118bef:	b8 00 00 00 00       	mov    $0x0,%eax
f0118bf4:	eb 2a                	jmp    f0118c20 <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0118bf6:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0118bfa:	74 07                	je     f0118c03 <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0118bfc:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0118c03:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0118c0a:	8b 55 10             	mov    0x10(%ebp),%edx
f0118c0d:	8b 45 14             	mov    0x14(%ebp),%eax
f0118c10:	01 d0                	add    %edx,%eax
f0118c12:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0118c15:	0f 87 05 fe ff ff    	ja     f0118a20 <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0118c1b:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0118c20:	c9                   	leave  
f0118c21:	c3                   	ret    

f0118c22 <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f0118c22:	55                   	push   %ebp
f0118c23:	89 e5                	mov    %esp,%ebp
f0118c25:	57                   	push   %edi
f0118c26:	56                   	push   %esi
f0118c27:	53                   	push   %ebx
f0118c28:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f0118c2e:	a0 d4 ed 17 f0       	mov    0xf017edd4,%al
f0118c33:	84 c0                	test   %al,%al
f0118c35:	0f 84 38 0a 00 00    	je     f0119673 <test_priority_normal_and_higher+0xa51>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0118c3b:	c6 05 d4 ed 17 f0 00 	movb   $0x0,0xf017edd4
		char command[100] = "load fos_add 20";
f0118c42:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0118c48:	bb 74 e1 12 f0       	mov    $0xf012e174,%ebx
f0118c4d:	ba 04 00 00 00       	mov    $0x4,%edx
f0118c52:	89 c7                	mov    %eax,%edi
f0118c54:	89 de                	mov    %ebx,%esi
f0118c56:	89 d1                	mov    %edx,%ecx
f0118c58:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0118c5a:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0118c60:	b9 15 00 00 00       	mov    $0x15,%ecx
f0118c65:	b8 00 00 00 00       	mov    $0x0,%eax
f0118c6a:	89 d7                	mov    %edx,%edi
f0118c6c:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0118c6e:	83 ec 0c             	sub    $0xc,%esp
f0118c71:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0118c77:	50                   	push   %eax
f0118c78:	e8 5f 92 fe ff       	call   f0101edc <execute_command>
f0118c7d:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0118c80:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0118c86:	bb d8 e1 12 f0       	mov    $0xf012e1d8,%ebx
f0118c8b:	ba 0d 00 00 00       	mov    $0xd,%edx
f0118c90:	89 c7                	mov    %eax,%edi
f0118c92:	89 de                	mov    %ebx,%esi
f0118c94:	89 d1                	mov    %edx,%ecx
f0118c96:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0118c98:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0118c9e:	b9 57 00 00 00       	mov    $0x57,%ecx
f0118ca3:	b0 00                	mov    $0x0,%al
f0118ca5:	89 d7                	mov    %edx,%edi
f0118ca7:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0118ca9:	83 ec 0c             	sub    $0xc,%esp
f0118cac:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0118cb2:	50                   	push   %eax
f0118cb3:	e8 24 92 fe ff       	call   f0101edc <execute_command>
f0118cb8:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0118cbb:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0118cc1:	bb 3c e2 12 f0       	mov    $0xf012e23c,%ebx
f0118cc6:	ba 17 00 00 00       	mov    $0x17,%edx
f0118ccb:	89 c7                	mov    %eax,%edi
f0118ccd:	89 de                	mov    %ebx,%esi
f0118ccf:	89 d1                	mov    %edx,%ecx
f0118cd1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0118cd3:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0118cd9:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0118cde:	b0 00                	mov    $0x0,%al
f0118ce0:	89 d7                	mov    %edx,%edi
f0118ce2:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0118ce4:	83 ec 0c             	sub    $0xc,%esp
f0118ce7:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0118ced:	50                   	push   %eax
f0118cee:	e8 e9 91 fe ff       	call   f0101edc <execute_command>
f0118cf3:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(16, &addEnv, 0);
f0118cf6:	83 ec 04             	sub    $0x4,%esp
f0118cf9:	6a 00                	push   $0x0
f0118cfb:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0118cfe:	50                   	push   %eax
f0118cff:	6a 10                	push   $0x10
f0118d01:	e8 ba 1a ff ff       	call   f010a7c0 <envid2env>
f0118d06:	83 c4 10             	add    $0x10,%esp
		envid2env(17, &factEnv, 0);
f0118d09:	83 ec 04             	sub    $0x4,%esp
f0118d0c:	6a 00                	push   $0x0
f0118d0e:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0118d11:	50                   	push   %eax
f0118d12:	6a 11                	push   $0x11
f0118d14:	e8 a7 1a ff ff       	call   f010a7c0 <envid2env>
f0118d19:	83 c4 10             	add    $0x10,%esp
		envid2env(18, &helloEnv, 0);
f0118d1c:	83 ec 04             	sub    $0x4,%esp
f0118d1f:	6a 00                	push   $0x0
f0118d21:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0118d24:	50                   	push   %eax
f0118d25:	6a 12                	push   $0x12
f0118d27:	e8 94 1a ff ff       	call   f010a7c0 <envid2env>
f0118d2c:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0118d2f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118d32:	85 c0                	test   %eax,%eax
f0118d34:	74 0e                	je     f0118d44 <test_priority_normal_and_higher+0x122>
f0118d36:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118d39:	85 c0                	test   %eax,%eax
f0118d3b:	74 07                	je     f0118d44 <test_priority_normal_and_higher+0x122>
f0118d3d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118d40:	85 c0                	test   %eax,%eax
f0118d42:	75 14                	jne    f0118d58 <test_priority_normal_and_higher+0x136>
			panic("Loading programs failed\n");
f0118d44:	83 ec 04             	sub    $0x4,%esp
f0118d47:	68 f8 de 12 f0       	push   $0xf012def8
f0118d4c:	6a 29                	push   $0x29
f0118d4e:	68 11 df 12 f0       	push   $0xf012df11
f0118d53:	e8 c2 75 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0118d58:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118d5b:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118d61:	83 f8 14             	cmp    $0x14,%eax
f0118d64:	75 1c                	jne    f0118d82 <test_priority_normal_and_higher+0x160>
f0118d66:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118d69:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118d6f:	83 f8 0f             	cmp    $0xf,%eax
f0118d72:	75 0e                	jne    f0118d82 <test_priority_normal_and_higher+0x160>
f0118d74:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118d77:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118d7d:	83 f8 0a             	cmp    $0xa,%eax
f0118d80:	74 32                	je     f0118db4 <test_priority_normal_and_higher+0x192>
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );
f0118d82:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118d85:	8b 88 84 00 00 00    	mov    0x84(%eax),%ecx
f0118d8b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118d8e:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f0118d94:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118d97:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118d9d:	83 ec 08             	sub    $0x8,%esp
f0118da0:	51                   	push   %ecx
f0118da1:	52                   	push   %edx
f0118da2:	50                   	push   %eax
f0118da3:	68 2c df 12 f0       	push   $0xf012df2c
f0118da8:	6a 2c                	push   $0x2c
f0118daa:	68 11 df 12 f0       	push   $0xf012df11
f0118daf:	e8 66 75 fe ff       	call   f010031a <_panic>

		for(int i = 0; i < 20; i++)
f0118db4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0118dbb:	eb 47                	jmp    f0118e04 <test_priority_normal_and_higher+0x1e2>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0118dbd:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0118dc0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0118dc3:	89 d0                	mov    %edx,%eax
f0118dc5:	01 c0                	add    %eax,%eax
f0118dc7:	01 d0                	add    %edx,%eax
f0118dc9:	c1 e0 03             	shl    $0x3,%eax
f0118dcc:	01 c8                	add    %ecx,%eax
f0118dce:	05 88 00 00 00       	add    $0x88,%eax
f0118dd3:	8b 10                	mov    (%eax),%edx
f0118dd5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118dd8:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0118ddf:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0118de2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0118de5:	89 d0                	mov    %edx,%eax
f0118de7:	01 c0                	add    %eax,%eax
f0118de9:	01 d0                	add    %edx,%eax
f0118deb:	c1 e0 03             	shl    $0x3,%eax
f0118dee:	01 c8                	add    %ecx,%eax
f0118df0:	05 90 00 00 00       	add    $0x90,%eax
f0118df5:	8b 10                	mov    (%eax),%edx
f0118df7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118dfa:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );

		for(int i = 0; i < 20; i++)
f0118e01:	ff 45 e4             	incl   -0x1c(%ebp)
f0118e04:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0118e08:	7e b3                	jle    f0118dbd <test_priority_normal_and_higher+0x19b>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0118e0a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0118e11:	eb 47                	jmp    f0118e5a <test_priority_normal_and_higher+0x238>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0118e13:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0118e16:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0118e19:	89 d0                	mov    %edx,%eax
f0118e1b:	01 c0                	add    %eax,%eax
f0118e1d:	01 d0                	add    %edx,%eax
f0118e1f:	c1 e0 03             	shl    $0x3,%eax
f0118e22:	01 c8                	add    %ecx,%eax
f0118e24:	05 88 00 00 00       	add    $0x88,%eax
f0118e29:	8b 10                	mov    (%eax),%edx
f0118e2b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0118e2e:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0118e35:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0118e38:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0118e3b:	89 d0                	mov    %edx,%eax
f0118e3d:	01 c0                	add    %eax,%eax
f0118e3f:	01 d0                	add    %edx,%eax
f0118e41:	c1 e0 03             	shl    $0x3,%eax
f0118e44:	01 c8                	add    %ecx,%eax
f0118e46:	05 90 00 00 00       	add    $0x90,%eax
f0118e4b:	8b 10                	mov    (%eax),%edx
f0118e4d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0118e50:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0118e57:	ff 45 e0             	incl   -0x20(%ebp)
f0118e5a:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0118e5e:	7e b3                	jle    f0118e13 <test_priority_normal_and_higher+0x1f1>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0118e60:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0118e67:	eb 47                	jmp    f0118eb0 <test_priority_normal_and_higher+0x28e>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0118e69:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0118e6c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0118e6f:	89 d0                	mov    %edx,%eax
f0118e71:	01 c0                	add    %eax,%eax
f0118e73:	01 d0                	add    %edx,%eax
f0118e75:	c1 e0 03             	shl    $0x3,%eax
f0118e78:	01 c8                	add    %ecx,%eax
f0118e7a:	05 88 00 00 00       	add    $0x88,%eax
f0118e7f:	8b 10                	mov    (%eax),%edx
f0118e81:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118e84:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0118e8b:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0118e8e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0118e91:	89 d0                	mov    %edx,%eax
f0118e93:	01 c0                	add    %eax,%eax
f0118e95:	01 d0                	add    %edx,%eax
f0118e97:	c1 e0 03             	shl    $0x3,%eax
f0118e9a:	01 c8                	add    %ecx,%eax
f0118e9c:	05 90 00 00 00       	add    $0x90,%eax
f0118ea1:	8b 10                	mov    (%eax),%edx
f0118ea3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118ea6:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0118ead:	ff 45 dc             	incl   -0x24(%ebp)
f0118eb0:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f0118eb4:	7e b3                	jle    f0118e69 <test_priority_normal_and_higher+0x247>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0118eb6:	e8 4e 4b ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118ebb:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0118ebe:	e8 7d b9 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118ec3:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0118ec6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118ec9:	83 ec 08             	sub    $0x8,%esp
f0118ecc:	6a 03                	push   $0x3
f0118ece:	50                   	push   %eax
f0118ecf:	e8 db 2f ff ff       	call   f010beaf <set_program_priority>
f0118ed4:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0118ed7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118eda:	83 ec 08             	sub    $0x8,%esp
f0118edd:	6a 03                	push   $0x3
f0118edf:	50                   	push   %eax
f0118ee0:	e8 ca 2f ff ff       	call   f010beaf <set_program_priority>
f0118ee5:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0118ee8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118eeb:	83 ec 08             	sub    $0x8,%esp
f0118eee:	6a 03                	push   $0x3
f0118ef0:	50                   	push   %eax
f0118ef1:	e8 b9 2f ff ff       	call   f010beaf <set_program_priority>
f0118ef6:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0118ef9:	e8 42 b9 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118efe:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0118f01:	74 14                	je     f0118f17 <test_priority_normal_and_higher+0x2f5>
f0118f03:	83 ec 04             	sub    $0x4,%esp
f0118f06:	68 94 df 12 f0       	push   $0xf012df94
f0118f0b:	6a 48                	push   $0x48
f0118f0d:	68 11 df 12 f0       	push   $0xf012df11
f0118f12:	e8 03 74 fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0118f17:	e8 ed 4a ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118f1c:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0118f1f:	74 14                	je     f0118f35 <test_priority_normal_and_higher+0x313>
f0118f21:	83 ec 04             	sub    $0x4,%esp
f0118f24:	68 94 df 12 f0       	push   $0xf012df94
f0118f29:	6a 49                	push   $0x49
f0118f2b:	68 11 df 12 f0       	push   $0xf012df11
f0118f30:	e8 e5 73 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0118f35:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118f38:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118f3e:	83 f8 14             	cmp    $0x14,%eax
f0118f41:	75 1c                	jne    f0118f5f <test_priority_normal_and_higher+0x33d>
f0118f43:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118f46:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118f4c:	83 f8 0f             	cmp    $0xf,%eax
f0118f4f:	75 0e                	jne    f0118f5f <test_priority_normal_and_higher+0x33d>
f0118f51:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118f54:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118f5a:	83 f8 0a             	cmp    $0xa,%eax
f0118f5d:	74 14                	je     f0118f73 <test_priority_normal_and_higher+0x351>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0118f5f:	83 ec 04             	sub    $0x4,%esp
f0118f62:	68 c0 df 12 f0       	push   $0xf012dfc0
f0118f67:	6a 4c                	push   $0x4c
f0118f69:	68 11 df 12 f0       	push   $0xf012df11
f0118f6e:	e8 a7 73 fe ff       	call   f010031a <_panic>

		freeFrames = sys_calculate_free_frames();
f0118f73:	e8 91 4a ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118f78:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118f7b:	e8 c0 b8 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118f80:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f0118f83:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118f86:	83 ec 08             	sub    $0x8,%esp
f0118f89:	6a 04                	push   $0x4
f0118f8b:	50                   	push   %eax
f0118f8c:	e8 1e 2f ff ff       	call   f010beaf <set_program_priority>
f0118f91:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0118f94:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118f97:	83 ec 08             	sub    $0x8,%esp
f0118f9a:	6a 04                	push   $0x4
f0118f9c:	50                   	push   %eax
f0118f9d:	e8 0d 2f ff ff       	call   f010beaf <set_program_priority>
f0118fa2:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0118fa5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118fa8:	83 ec 08             	sub    $0x8,%esp
f0118fab:	6a 04                	push   $0x4
f0118fad:	50                   	push   %eax
f0118fae:	e8 fc 2e ff ff       	call   f010beaf <set_program_priority>
f0118fb3:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0118fb6:	e8 85 b8 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118fbb:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0118fbe:	74 14                	je     f0118fd4 <test_priority_normal_and_higher+0x3b2>
f0118fc0:	83 ec 04             	sub    $0x4,%esp
f0118fc3:	68 94 df 12 f0       	push   $0xf012df94
f0118fc8:	6a 56                	push   $0x56
f0118fca:	68 11 df 12 f0       	push   $0xf012df11
f0118fcf:	e8 46 73 fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0118fd4:	e8 30 4a ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118fd9:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0118fdc:	74 14                	je     f0118ff2 <test_priority_normal_and_higher+0x3d0>
f0118fde:	83 ec 04             	sub    $0x4,%esp
f0118fe1:	68 14 e0 12 f0       	push   $0xf012e014
f0118fe6:	6a 57                	push   $0x57
f0118fe8:	68 11 df 12 f0       	push   $0xf012df11
f0118fed:	e8 28 73 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0118ff2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118ff5:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118ffb:	83 f8 14             	cmp    $0x14,%eax
f0118ffe:	75 1c                	jne    f011901c <test_priority_normal_and_higher+0x3fa>
f0119000:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119003:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119009:	83 f8 0f             	cmp    $0xf,%eax
f011900c:	75 0e                	jne    f011901c <test_priority_normal_and_higher+0x3fa>
f011900e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119011:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119017:	83 f8 14             	cmp    $0x14,%eax
f011901a:	74 14                	je     f0119030 <test_priority_normal_and_higher+0x40e>
			panic("The programs' working set size should be doubled only if it is full\n");
f011901c:	83 ec 04             	sub    $0x4,%esp
f011901f:	68 44 e0 12 f0       	push   $0xf012e044
f0119024:	6a 5a                	push   $0x5a
f0119026:	68 11 df 12 f0       	push   $0xf012df11
f011902b:	e8 ea 72 fe ff       	call   f010031a <_panic>

		freeFrames = sys_calculate_free_frames();
f0119030:	e8 d4 49 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119035:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119038:	e8 03 b8 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011903d:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0119040:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119043:	83 ec 08             	sub    $0x8,%esp
f0119046:	6a 04                	push   $0x4
f0119048:	50                   	push   %eax
f0119049:	e8 61 2e ff ff       	call   f010beaf <set_program_priority>
f011904e:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0119051:	e8 ea b7 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119056:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0119059:	74 14                	je     f011906f <test_priority_normal_and_higher+0x44d>
f011905b:	83 ec 04             	sub    $0x4,%esp
f011905e:	68 94 df 12 f0       	push   $0xf012df94
f0119063:	6a 62                	push   $0x62
f0119065:	68 11 df 12 f0       	push   $0xf012df11
f011906a:	e8 ab 72 fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011906f:	e8 95 49 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119074:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0119077:	74 14                	je     f011908d <test_priority_normal_and_higher+0x46b>
f0119079:	83 ec 04             	sub    $0x4,%esp
f011907c:	68 94 df 12 f0       	push   $0xf012df94
f0119081:	6a 63                	push   $0x63
f0119083:	68 11 df 12 f0       	push   $0xf012df11
f0119088:	e8 8d 72 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011908d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119090:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119096:	83 f8 14             	cmp    $0x14,%eax
f0119099:	75 1c                	jne    f01190b7 <test_priority_normal_and_higher+0x495>
f011909b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011909e:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01190a4:	83 f8 0f             	cmp    $0xf,%eax
f01190a7:	75 0e                	jne    f01190b7 <test_priority_normal_and_higher+0x495>
f01190a9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01190ac:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01190b2:	83 f8 14             	cmp    $0x14,%eax
f01190b5:	74 14                	je     f01190cb <test_priority_normal_and_higher+0x4a9>
			panic("The programs' working set size should be doubled only once\n");
f01190b7:	83 ec 04             	sub    $0x4,%esp
f01190ba:	68 8c e0 12 f0       	push   $0xf012e08c
f01190bf:	6a 66                	push   $0x66
f01190c1:	68 11 df 12 f0       	push   $0xf012df11
f01190c6:	e8 4f 72 fe ff       	call   f010031a <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f01190cb:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f01190d2:	eb 1c                	jmp    f01190f0 <test_priority_normal_and_higher+0x4ce>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f01190d4:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01190d7:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01190da:	89 d0                	mov    %edx,%eax
f01190dc:	01 c0                	add    %eax,%eax
f01190de:	01 d0                	add    %edx,%eax
f01190e0:	c1 e0 03             	shl    $0x3,%eax
f01190e3:	01 c8                	add    %ecx,%eax
f01190e5:	05 8c 00 00 00       	add    $0x8c,%eax
f01190ea:	c6 00 00             	movb   $0x0,(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f01190ed:	ff 45 d8             	incl   -0x28(%ebp)
f01190f0:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f01190f4:	7e de                	jle    f01190d4 <test_priority_normal_and_higher+0x4b2>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01190f6:	e8 0e 49 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01190fb:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01190fe:	e8 3d b7 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119103:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0119106:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119109:	83 ec 08             	sub    $0x8,%esp
f011910c:	6a 04                	push   $0x4
f011910e:	50                   	push   %eax
f011910f:	e8 9b 2d ff ff       	call   f010beaf <set_program_priority>
f0119114:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0119117:	e8 24 b7 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011911c:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011911f:	74 14                	je     f0119135 <test_priority_normal_and_higher+0x513>
f0119121:	83 ec 04             	sub    $0x4,%esp
f0119124:	68 94 df 12 f0       	push   $0xf012df94
f0119129:	6a 73                	push   $0x73
f011912b:	68 11 df 12 f0       	push   $0xf012df11
f0119130:	e8 e5 71 fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0119135:	e8 cf 48 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011913a:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f011913d:	74 14                	je     f0119153 <test_priority_normal_and_higher+0x531>
f011913f:	83 ec 04             	sub    $0x4,%esp
f0119142:	68 94 df 12 f0       	push   $0xf012df94
f0119147:	6a 74                	push   $0x74
f0119149:	68 11 df 12 f0       	push   $0xf012df11
f011914e:	e8 c7 71 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0119153:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119156:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f011915c:	83 f8 14             	cmp    $0x14,%eax
f011915f:	75 1c                	jne    f011917d <test_priority_normal_and_higher+0x55b>
f0119161:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119164:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f011916a:	83 f8 0f             	cmp    $0xf,%eax
f011916d:	75 0e                	jne    f011917d <test_priority_normal_and_higher+0x55b>
f011916f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119172:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119178:	83 f8 14             	cmp    $0x14,%eax
f011917b:	74 14                	je     f0119191 <test_priority_normal_and_higher+0x56f>
			panic("The programs' working set size should be doubled only once\n");
f011917d:	83 ec 04             	sub    $0x4,%esp
f0119180:	68 8c e0 12 f0       	push   $0xf012e08c
f0119185:	6a 77                	push   $0x77
f0119187:	68 11 df 12 f0       	push   $0xf012df11
f011918c:	e8 89 71 fe ff       	call   f010031a <_panic>

		for(int i = 10; i < 15; i++)
f0119191:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0119198:	eb 1c                	jmp    f01191b6 <test_priority_normal_and_higher+0x594>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f011919a:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f011919d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01191a0:	89 d0                	mov    %edx,%eax
f01191a2:	01 c0                	add    %eax,%eax
f01191a4:	01 d0                	add    %edx,%eax
f01191a6:	c1 e0 03             	shl    $0x3,%eax
f01191a9:	01 c8                	add    %ecx,%eax
f01191ab:	05 8c 00 00 00       	add    $0x8c,%eax
f01191b0:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f01191b3:	ff 45 d4             	incl   -0x2c(%ebp)
f01191b6:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f01191ba:	7e de                	jle    f011919a <test_priority_normal_and_higher+0x578>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01191bc:	e8 48 48 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01191c1:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01191c4:	e8 77 b6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01191c9:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01191cc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01191cf:	83 ec 08             	sub    $0x8,%esp
f01191d2:	6a 05                	push   $0x5
f01191d4:	50                   	push   %eax
f01191d5:	e8 d5 2c ff ff       	call   f010beaf <set_program_priority>
f01191da:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f01191dd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01191e0:	83 ec 08             	sub    $0x8,%esp
f01191e3:	6a 05                	push   $0x5
f01191e5:	50                   	push   %eax
f01191e6:	e8 c4 2c ff ff       	call   f010beaf <set_program_priority>
f01191eb:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01191ee:	e8 4d b6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01191f3:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01191f6:	74 17                	je     f011920f <test_priority_normal_and_higher+0x5ed>
f01191f8:	83 ec 04             	sub    $0x4,%esp
f01191fb:	68 94 df 12 f0       	push   $0xf012df94
f0119200:	68 82 00 00 00       	push   $0x82
f0119205:	68 11 df 12 f0       	push   $0xf012df11
f011920a:	e8 0b 71 fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011920f:	e8 f5 47 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119214:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0119217:	74 17                	je     f0119230 <test_priority_normal_and_higher+0x60e>
f0119219:	83 ec 04             	sub    $0x4,%esp
f011921c:	68 94 df 12 f0       	push   $0xf012df94
f0119221:	68 83 00 00 00       	push   $0x83
f0119226:	68 11 df 12 f0       	push   $0xf012df11
f011922b:	e8 ea 70 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0119230:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119233:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119239:	83 f8 14             	cmp    $0x14,%eax
f011923c:	75 1c                	jne    f011925a <test_priority_normal_and_higher+0x638>
f011923e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119241:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119247:	83 f8 1e             	cmp    $0x1e,%eax
f011924a:	75 0e                	jne    f011925a <test_priority_normal_and_higher+0x638>
f011924c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011924f:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119255:	83 f8 28             	cmp    $0x28,%eax
f0119258:	74 17                	je     f0119271 <test_priority_normal_and_higher+0x64f>
			panic("The programs' working set size should be doubled if full\n");
f011925a:	83 ec 04             	sub    $0x4,%esp
f011925d:	68 c8 e0 12 f0       	push   $0xf012e0c8
f0119262:	68 86 00 00 00       	push   $0x86
f0119267:	68 11 df 12 f0       	push   $0xf012df11
f011926c:	e8 a9 70 fe ff       	call   f010031a <_panic>

		for(int i = 20; i < 40; i++)
f0119271:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f0119278:	eb 1c                	jmp    f0119296 <test_priority_normal_and_higher+0x674>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f011927a:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f011927d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0119280:	89 d0                	mov    %edx,%eax
f0119282:	01 c0                	add    %eax,%eax
f0119284:	01 d0                	add    %edx,%eax
f0119286:	c1 e0 03             	shl    $0x3,%eax
f0119289:	01 c8                	add    %ecx,%eax
f011928b:	05 8c 00 00 00       	add    $0x8c,%eax
f0119290:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f0119293:	ff 45 d0             	incl   -0x30(%ebp)
f0119296:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f011929a:	7e de                	jle    f011927a <test_priority_normal_and_higher+0x658>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f011929c:	e8 68 47 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01192a1:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01192a4:	e8 97 b5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01192a9:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01192ac:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01192af:	83 ec 08             	sub    $0x8,%esp
f01192b2:	6a 05                	push   $0x5
f01192b4:	50                   	push   %eax
f01192b5:	e8 f5 2b ff ff       	call   f010beaf <set_program_priority>
f01192ba:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01192bd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01192c0:	83 ec 08             	sub    $0x8,%esp
f01192c3:	6a 04                	push   $0x4
f01192c5:	50                   	push   %eax
f01192c6:	e8 e4 2b ff ff       	call   f010beaf <set_program_priority>
f01192cb:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01192ce:	e8 6d b5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01192d3:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01192d6:	74 17                	je     f01192ef <test_priority_normal_and_higher+0x6cd>
f01192d8:	83 ec 04             	sub    $0x4,%esp
f01192db:	68 94 df 12 f0       	push   $0xf012df94
f01192e0:	68 91 00 00 00       	push   $0x91
f01192e5:	68 11 df 12 f0       	push   $0xf012df11
f01192ea:	e8 2b 70 fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01192ef:	e8 15 47 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01192f4:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01192f7:	74 17                	je     f0119310 <test_priority_normal_and_higher+0x6ee>
f01192f9:	83 ec 04             	sub    $0x4,%esp
f01192fc:	68 94 df 12 f0       	push   $0xf012df94
f0119301:	68 92 00 00 00       	push   $0x92
f0119306:	68 11 df 12 f0       	push   $0xf012df11
f011930b:	e8 0a 70 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0119310:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119313:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119319:	83 f8 14             	cmp    $0x14,%eax
f011931c:	75 1c                	jne    f011933a <test_priority_normal_and_higher+0x718>
f011931e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119321:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119327:	83 f8 1e             	cmp    $0x1e,%eax
f011932a:	75 0e                	jne    f011933a <test_priority_normal_and_higher+0x718>
f011932c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011932f:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119335:	83 f8 28             	cmp    $0x28,%eax
f0119338:	74 17                	je     f0119351 <test_priority_normal_and_higher+0x72f>
			panic("The programs' working set size should be doubled if full\n");
f011933a:	83 ec 04             	sub    $0x4,%esp
f011933d:	68 c8 e0 12 f0       	push   $0xf012e0c8
f0119342:	68 95 00 00 00       	push   $0x95
f0119347:	68 11 df 12 f0       	push   $0xf012df11
f011934c:	e8 c9 6f fe ff       	call   f010031a <_panic>

		for(int i = 15; i < 30; i++)
f0119351:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f0119358:	eb 1c                	jmp    f0119376 <test_priority_normal_and_higher+0x754>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f011935a:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f011935d:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0119360:	89 d0                	mov    %edx,%eax
f0119362:	01 c0                	add    %eax,%eax
f0119364:	01 d0                	add    %edx,%eax
f0119366:	c1 e0 03             	shl    $0x3,%eax
f0119369:	01 c8                	add    %ecx,%eax
f011936b:	05 8c 00 00 00       	add    $0x8c,%eax
f0119370:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f0119373:	ff 45 cc             	incl   -0x34(%ebp)
f0119376:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f011937a:	7e de                	jle    f011935a <test_priority_normal_and_higher+0x738>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f011937c:	e8 88 46 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119381:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119384:	e8 b7 b4 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119389:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f011938c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011938f:	83 ec 08             	sub    $0x8,%esp
f0119392:	6a 05                	push   $0x5
f0119394:	50                   	push   %eax
f0119395:	e8 15 2b ff ff       	call   f010beaf <set_program_priority>
f011939a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f011939d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01193a0:	83 ec 08             	sub    $0x8,%esp
f01193a3:	6a 04                	push   $0x4
f01193a5:	50                   	push   %eax
f01193a6:	e8 04 2b ff ff       	call   f010beaf <set_program_priority>
f01193ab:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01193ae:	e8 8d b4 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01193b3:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01193b6:	74 17                	je     f01193cf <test_priority_normal_and_higher+0x7ad>
f01193b8:	83 ec 04             	sub    $0x4,%esp
f01193bb:	68 94 df 12 f0       	push   $0xf012df94
f01193c0:	68 a0 00 00 00       	push   $0xa0
f01193c5:	68 11 df 12 f0       	push   $0xf012df11
f01193ca:	e8 4b 6f fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01193cf:	e8 35 46 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01193d4:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01193d7:	74 17                	je     f01193f0 <test_priority_normal_and_higher+0x7ce>
f01193d9:	83 ec 04             	sub    $0x4,%esp
f01193dc:	68 94 df 12 f0       	push   $0xf012df94
f01193e1:	68 a1 00 00 00       	push   $0xa1
f01193e6:	68 11 df 12 f0       	push   $0xf012df11
f01193eb:	e8 2a 6f fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f01193f0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01193f3:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01193f9:	83 f8 14             	cmp    $0x14,%eax
f01193fc:	75 1c                	jne    f011941a <test_priority_normal_and_higher+0x7f8>
f01193fe:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119401:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119407:	83 f8 3c             	cmp    $0x3c,%eax
f011940a:	75 0e                	jne    f011941a <test_priority_normal_and_higher+0x7f8>
f011940c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011940f:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119415:	83 f8 28             	cmp    $0x28,%eax
f0119418:	74 17                	je     f0119431 <test_priority_normal_and_higher+0x80f>
			panic("The programs' working set size should be doubled if full\n");
f011941a:	83 ec 04             	sub    $0x4,%esp
f011941d:	68 c8 e0 12 f0       	push   $0xf012e0c8
f0119422:	68 a4 00 00 00       	push   $0xa4
f0119427:	68 11 df 12 f0       	push   $0xf012df11
f011942c:	e8 e9 6e fe ff       	call   f010031a <_panic>

		for(int i = 15; i < 60; i++)
f0119431:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0119438:	eb 1c                	jmp    f0119456 <test_priority_normal_and_higher+0x834>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f011943a:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f011943d:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0119440:	89 d0                	mov    %edx,%eax
f0119442:	01 c0                	add    %eax,%eax
f0119444:	01 d0                	add    %edx,%eax
f0119446:	c1 e0 03             	shl    $0x3,%eax
f0119449:	01 c8                	add    %ecx,%eax
f011944b:	05 8c 00 00 00       	add    $0x8c,%eax
f0119450:	c6 00 01             	movb   $0x1,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f0119453:	ff 45 c8             	incl   -0x38(%ebp)
f0119456:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f011945a:	7e de                	jle    f011943a <test_priority_normal_and_higher+0x818>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f011945c:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f0119463:	eb 1c                	jmp    f0119481 <test_priority_normal_and_higher+0x85f>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f0119465:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0119468:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011946b:	89 d0                	mov    %edx,%eax
f011946d:	01 c0                	add    %eax,%eax
f011946f:	01 d0                	add    %edx,%eax
f0119471:	c1 e0 03             	shl    $0x3,%eax
f0119474:	01 c8                	add    %ecx,%eax
f0119476:	05 8c 00 00 00       	add    $0x8c,%eax
f011947b:	c6 00 01             	movb   $0x1,(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f011947e:	ff 45 c4             	incl   -0x3c(%ebp)
f0119481:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f0119485:	7e de                	jle    f0119465 <test_priority_normal_and_higher+0x843>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0119487:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f011948e:	eb 7d                	jmp    f011950d <test_priority_normal_and_higher+0x8eb>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0119490:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0119493:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f011949a:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f011949d:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01194a0:	89 d0                	mov    %edx,%eax
f01194a2:	01 c0                	add    %eax,%eax
f01194a4:	01 d0                	add    %edx,%eax
f01194a6:	c1 e0 03             	shl    $0x3,%eax
f01194a9:	01 d8                	add    %ebx,%eax
f01194ab:	05 88 00 00 00       	add    $0x88,%eax
f01194b0:	8b 00                	mov    (%eax),%eax
f01194b2:	39 c1                	cmp    %eax,%ecx
f01194b4:	74 17                	je     f01194cd <test_priority_normal_and_higher+0x8ab>
				panic("Working set should be moved properly to the new one");
f01194b6:	83 ec 04             	sub    $0x4,%esp
f01194b9:	68 04 e1 12 f0       	push   $0xf012e104
f01194be:	68 b2 00 00 00       	push   $0xb2
f01194c3:	68 11 df 12 f0       	push   $0xf012df11
f01194c8:	e8 4d 6e fe ff       	call   f010031a <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01194cd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01194d0:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f01194d7:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f01194da:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01194dd:	89 d0                	mov    %edx,%eax
f01194df:	01 c0                	add    %eax,%eax
f01194e1:	01 d0                	add    %edx,%eax
f01194e3:	c1 e0 03             	shl    $0x3,%eax
f01194e6:	01 d8                	add    %ebx,%eax
f01194e8:	05 90 00 00 00       	add    $0x90,%eax
f01194ed:	8b 00                	mov    (%eax),%eax
f01194ef:	39 c1                	cmp    %eax,%ecx
f01194f1:	74 17                	je     f011950a <test_priority_normal_and_higher+0x8e8>
				panic("Working set should be moved properly to the new one");
f01194f3:	83 ec 04             	sub    $0x4,%esp
f01194f6:	68 04 e1 12 f0       	push   $0xf012e104
f01194fb:	68 b5 00 00 00       	push   $0xb5
f0119500:	68 11 df 12 f0       	push   $0xf012df11
f0119505:	e8 10 6e fe ff       	call   f010031a <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f011950a:	ff 45 c0             	incl   -0x40(%ebp)
f011950d:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0119511:	0f 8e 79 ff ff ff    	jle    f0119490 <test_priority_normal_and_higher+0x86e>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0119517:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f011951e:	eb 7d                	jmp    f011959d <test_priority_normal_and_higher+0x97b>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0119520:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0119523:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f011952a:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011952d:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0119530:	89 d0                	mov    %edx,%eax
f0119532:	01 c0                	add    %eax,%eax
f0119534:	01 d0                	add    %edx,%eax
f0119536:	c1 e0 03             	shl    $0x3,%eax
f0119539:	01 d8                	add    %ebx,%eax
f011953b:	05 88 00 00 00       	add    $0x88,%eax
f0119540:	8b 00                	mov    (%eax),%eax
f0119542:	39 c1                	cmp    %eax,%ecx
f0119544:	74 17                	je     f011955d <test_priority_normal_and_higher+0x93b>
				panic("Working set should be moved properly to the new one");
f0119546:	83 ec 04             	sub    $0x4,%esp
f0119549:	68 04 e1 12 f0       	push   $0xf012e104
f011954e:	68 bb 00 00 00       	push   $0xbb
f0119553:	68 11 df 12 f0       	push   $0xf012df11
f0119558:	e8 bd 6d fe ff       	call   f010031a <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f011955d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0119560:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f0119567:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011956a:	8b 55 bc             	mov    -0x44(%ebp),%edx
f011956d:	89 d0                	mov    %edx,%eax
f011956f:	01 c0                	add    %eax,%eax
f0119571:	01 d0                	add    %edx,%eax
f0119573:	c1 e0 03             	shl    $0x3,%eax
f0119576:	01 d8                	add    %ebx,%eax
f0119578:	05 90 00 00 00       	add    $0x90,%eax
f011957d:	8b 00                	mov    (%eax),%eax
f011957f:	39 c1                	cmp    %eax,%ecx
f0119581:	74 17                	je     f011959a <test_priority_normal_and_higher+0x978>
				panic("Working set should be moved properly to the new one");
f0119583:	83 ec 04             	sub    $0x4,%esp
f0119586:	68 04 e1 12 f0       	push   $0xf012e104
f011958b:	68 be 00 00 00       	push   $0xbe
f0119590:	68 11 df 12 f0       	push   $0xf012df11
f0119595:	e8 80 6d fe ff       	call   f010031a <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f011959a:	ff 45 bc             	incl   -0x44(%ebp)
f011959d:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f01195a1:	0f 8e 79 ff ff ff    	jle    f0119520 <test_priority_normal_and_higher+0x8fe>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01195a7:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f01195ae:	eb 7d                	jmp    f011962d <test_priority_normal_and_higher+0xa0b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f01195b0:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01195b3:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f01195ba:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f01195bd:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01195c0:	89 d0                	mov    %edx,%eax
f01195c2:	01 c0                	add    %eax,%eax
f01195c4:	01 d0                	add    %edx,%eax
f01195c6:	c1 e0 03             	shl    $0x3,%eax
f01195c9:	01 d8                	add    %ebx,%eax
f01195cb:	05 88 00 00 00       	add    $0x88,%eax
f01195d0:	8b 00                	mov    (%eax),%eax
f01195d2:	39 c1                	cmp    %eax,%ecx
f01195d4:	74 17                	je     f01195ed <test_priority_normal_and_higher+0x9cb>
				panic("Working set should be moved properly to the new one");
f01195d6:	83 ec 04             	sub    $0x4,%esp
f01195d9:	68 04 e1 12 f0       	push   $0xf012e104
f01195de:	68 c4 00 00 00       	push   $0xc4
f01195e3:	68 11 df 12 f0       	push   $0xf012df11
f01195e8:	e8 2d 6d fe ff       	call   f010031a <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01195ed:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01195f0:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f01195f7:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f01195fa:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01195fd:	89 d0                	mov    %edx,%eax
f01195ff:	01 c0                	add    %eax,%eax
f0119601:	01 d0                	add    %edx,%eax
f0119603:	c1 e0 03             	shl    $0x3,%eax
f0119606:	01 d8                	add    %ebx,%eax
f0119608:	05 90 00 00 00       	add    $0x90,%eax
f011960d:	8b 00                	mov    (%eax),%eax
f011960f:	39 c1                	cmp    %eax,%ecx
f0119611:	74 17                	je     f011962a <test_priority_normal_and_higher+0xa08>
				panic("Working set should be moved properly to the new one");
f0119613:	83 ec 04             	sub    $0x4,%esp
f0119616:	68 04 e1 12 f0       	push   $0xf012e104
f011961b:	68 c7 00 00 00       	push   $0xc7
f0119620:	68 11 df 12 f0       	push   $0xf012df11
f0119625:	e8 f0 6c fe ff       	call   f010031a <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f011962a:	ff 45 b8             	incl   -0x48(%ebp)
f011962d:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0119631:	0f 8e 79 ff ff ff    	jle    f01195b0 <test_priority_normal_and_higher+0x98e>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0119637:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f011963e:	75 6e 61 
f0119641:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0119648:	6c 00 00 
f011964b:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0119651:	b9 17 00 00 00       	mov    $0x17,%ecx
f0119656:	b8 00 00 00 00       	mov    $0x0,%eax
f011965b:	89 d7                	mov    %edx,%edi
f011965d:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f011965f:	83 ec 0c             	sub    $0xc,%esp
f0119662:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0119668:	50                   	push   %eax
f0119669:	e8 6e 88 fe ff       	call   f0101edc <execute_command>
f011966e:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
#endif
}
f0119671:	eb 10                	jmp    f0119683 <test_priority_normal_and_higher+0xa61>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f0119673:	83 ec 0c             	sub    $0xc,%esp
f0119676:	68 38 e1 12 f0       	push   $0xf012e138
f011967b:	e8 ec 78 fe ff       	call   f0100f6c <cprintf>
f0119680:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f0119683:	90                   	nop
f0119684:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0119687:	5b                   	pop    %ebx
f0119688:	5e                   	pop    %esi
f0119689:	5f                   	pop    %edi
f011968a:	5d                   	pop    %ebp
f011968b:	c3                   	ret    

f011968c <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f011968c:	55                   	push   %ebp
f011968d:	89 e5                	mov    %esp,%ebp
f011968f:	57                   	push   %edi
f0119690:	56                   	push   %esi
f0119691:	53                   	push   %ebx
f0119692:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f0119698:	a0 d4 ed 17 f0       	mov    0xf017edd4,%al
f011969d:	84 c0                	test   %al,%al
f011969f:	0f 84 1b 0a 00 00    	je     f011a0c0 <test_priority_normal_and_lower+0xa34>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f01196a5:	c6 05 d4 ed 17 f0 00 	movb   $0x0,0xf017edd4
		char command[100] = "load fos_add 20";
f01196ac:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01196b2:	bb 74 e1 12 f0       	mov    $0xf012e174,%ebx
f01196b7:	ba 04 00 00 00       	mov    $0x4,%edx
f01196bc:	89 c7                	mov    %eax,%edi
f01196be:	89 de                	mov    %ebx,%esi
f01196c0:	89 d1                	mov    %edx,%ecx
f01196c2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01196c4:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f01196ca:	b9 15 00 00 00       	mov    $0x15,%ecx
f01196cf:	b8 00 00 00 00       	mov    $0x0,%eax
f01196d4:	89 d7                	mov    %edx,%edi
f01196d6:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f01196d8:	83 ec 0c             	sub    $0xc,%esp
f01196db:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01196e1:	50                   	push   %eax
f01196e2:	e8 f5 87 fe ff       	call   f0101edc <execute_command>
f01196e7:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f01196ea:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01196f0:	bb 7c e4 12 f0       	mov    $0xf012e47c,%ebx
f01196f5:	ba 0d 00 00 00       	mov    $0xd,%edx
f01196fa:	89 c7                	mov    %eax,%edi
f01196fc:	89 de                	mov    %ebx,%esi
f01196fe:	89 d1                	mov    %edx,%ecx
f0119700:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0119702:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f0119708:	b9 57 00 00 00       	mov    $0x57,%ecx
f011970d:	b0 00                	mov    $0x0,%al
f011970f:	89 d7                	mov    %edx,%edi
f0119711:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0119713:	83 ec 0c             	sub    $0xc,%esp
f0119716:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f011971c:	50                   	push   %eax
f011971d:	e8 ba 87 fe ff       	call   f0101edc <execute_command>
f0119722:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0119725:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f011972b:	bb e0 e4 12 f0       	mov    $0xf012e4e0,%ebx
f0119730:	ba 17 00 00 00       	mov    $0x17,%edx
f0119735:	89 c7                	mov    %eax,%edi
f0119737:	89 de                	mov    %ebx,%esi
f0119739:	89 d1                	mov    %edx,%ecx
f011973b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011973d:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0119743:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0119748:	b0 00                	mov    $0x0,%al
f011974a:	89 d7                	mov    %edx,%edi
f011974c:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f011974e:	83 ec 0c             	sub    $0xc,%esp
f0119751:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0119757:	50                   	push   %eax
f0119758:	e8 7f 87 fe ff       	call   f0101edc <execute_command>
f011975d:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0119760:	83 ec 04             	sub    $0x4,%esp
f0119763:	6a 00                	push   $0x0
f0119765:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0119768:	50                   	push   %eax
f0119769:	68 00 10 00 00       	push   $0x1000
f011976e:	e8 4d 10 ff ff       	call   f010a7c0 <envid2env>
f0119773:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0119776:	83 ec 04             	sub    $0x4,%esp
f0119779:	6a 00                	push   $0x0
f011977b:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f011977e:	50                   	push   %eax
f011977f:	68 01 10 00 00       	push   $0x1001
f0119784:	e8 37 10 ff ff       	call   f010a7c0 <envid2env>
f0119789:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f011978c:	83 ec 04             	sub    $0x4,%esp
f011978f:	6a 00                	push   $0x0
f0119791:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0119794:	50                   	push   %eax
f0119795:	68 02 10 00 00       	push   $0x1002
f011979a:	e8 21 10 ff ff       	call   f010a7c0 <envid2env>
f011979f:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f01197a2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01197a5:	85 c0                	test   %eax,%eax
f01197a7:	74 0e                	je     f01197b7 <test_priority_normal_and_lower+0x12b>
f01197a9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01197ac:	85 c0                	test   %eax,%eax
f01197ae:	74 07                	je     f01197b7 <test_priority_normal_and_lower+0x12b>
f01197b0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01197b3:	85 c0                	test   %eax,%eax
f01197b5:	75 17                	jne    f01197ce <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f01197b7:	83 ec 04             	sub    $0x4,%esp
f01197ba:	68 f8 de 12 f0       	push   $0xf012def8
f01197bf:	68 f2 00 00 00       	push   $0xf2
f01197c4:	68 11 df 12 f0       	push   $0xf012df11
f01197c9:	e8 4c 6b fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01197ce:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01197d1:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01197d7:	83 f8 14             	cmp    $0x14,%eax
f01197da:	75 1c                	jne    f01197f8 <test_priority_normal_and_lower+0x16c>
f01197dc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01197df:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01197e5:	83 f8 1e             	cmp    $0x1e,%eax
f01197e8:	75 0e                	jne    f01197f8 <test_priority_normal_and_lower+0x16c>
f01197ea:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01197ed:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01197f3:	83 f8 28             	cmp    $0x28,%eax
f01197f6:	74 17                	je     f011980f <test_priority_normal_and_lower+0x183>
			panic("The programs should be initially loaded with the given working set size\n");
f01197f8:	83 ec 04             	sub    $0x4,%esp
f01197fb:	68 a0 e2 12 f0       	push   $0xf012e2a0
f0119800:	68 f5 00 00 00       	push   $0xf5
f0119805:	68 11 df 12 f0       	push   $0xf012df11
f011980a:	e8 0b 6b fe ff       	call   f010031a <_panic>

		for(int i = 0; i < 20; i++)
f011980f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0119816:	eb 47                	jmp    f011985f <test_priority_normal_and_lower+0x1d3>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0119818:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f011981b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011981e:	89 d0                	mov    %edx,%eax
f0119820:	01 c0                	add    %eax,%eax
f0119822:	01 d0                	add    %edx,%eax
f0119824:	c1 e0 03             	shl    $0x3,%eax
f0119827:	01 c8                	add    %ecx,%eax
f0119829:	05 88 00 00 00       	add    $0x88,%eax
f011982e:	8b 10                	mov    (%eax),%edx
f0119830:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119833:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f011983a:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f011983d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0119840:	89 d0                	mov    %edx,%eax
f0119842:	01 c0                	add    %eax,%eax
f0119844:	01 d0                	add    %edx,%eax
f0119846:	c1 e0 03             	shl    $0x3,%eax
f0119849:	01 c8                	add    %ecx,%eax
f011984b:	05 90 00 00 00       	add    $0x90,%eax
f0119850:	8b 10                	mov    (%eax),%edx
f0119852:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0119855:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f011985c:	ff 45 e4             	incl   -0x1c(%ebp)
f011985f:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0119863:	7e b3                	jle    f0119818 <test_priority_normal_and_lower+0x18c>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0119865:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011986c:	eb 47                	jmp    f01198b5 <test_priority_normal_and_lower+0x229>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f011986e:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0119871:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0119874:	89 d0                	mov    %edx,%eax
f0119876:	01 c0                	add    %eax,%eax
f0119878:	01 d0                	add    %edx,%eax
f011987a:	c1 e0 03             	shl    $0x3,%eax
f011987d:	01 c8                	add    %ecx,%eax
f011987f:	05 88 00 00 00       	add    $0x88,%eax
f0119884:	8b 10                	mov    (%eax),%edx
f0119886:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119889:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0119890:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0119893:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0119896:	89 d0                	mov    %edx,%eax
f0119898:	01 c0                	add    %eax,%eax
f011989a:	01 d0                	add    %edx,%eax
f011989c:	c1 e0 03             	shl    $0x3,%eax
f011989f:	01 c8                	add    %ecx,%eax
f01198a1:	05 90 00 00 00       	add    $0x90,%eax
f01198a6:	8b 10                	mov    (%eax),%edx
f01198a8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01198ab:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f01198b2:	ff 45 e0             	incl   -0x20(%ebp)
f01198b5:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f01198b9:	7e b3                	jle    f011986e <test_priority_normal_and_lower+0x1e2>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f01198bb:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01198c2:	eb 47                	jmp    f011990b <test_priority_normal_and_lower+0x27f>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f01198c4:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f01198c7:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01198ca:	89 d0                	mov    %edx,%eax
f01198cc:	01 c0                	add    %eax,%eax
f01198ce:	01 d0                	add    %edx,%eax
f01198d0:	c1 e0 03             	shl    $0x3,%eax
f01198d3:	01 c8                	add    %ecx,%eax
f01198d5:	05 88 00 00 00       	add    $0x88,%eax
f01198da:	8b 10                	mov    (%eax),%edx
f01198dc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01198df:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f01198e6:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f01198e9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01198ec:	89 d0                	mov    %edx,%eax
f01198ee:	01 c0                	add    %eax,%eax
f01198f0:	01 d0                	add    %edx,%eax
f01198f2:	c1 e0 03             	shl    $0x3,%eax
f01198f5:	01 c8                	add    %ecx,%eax
f01198f7:	05 90 00 00 00       	add    $0x90,%eax
f01198fc:	8b 10                	mov    (%eax),%edx
f01198fe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0119901:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0119908:	ff 45 dc             	incl   -0x24(%ebp)
f011990b:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f011990f:	7e b3                	jle    f01198c4 <test_priority_normal_and_lower+0x238>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0119911:	e8 f3 40 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119916:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0119919:	e8 22 af fe ff       	call   f0104840 <pf_calculate_free_frames>
f011991e:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0119921:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119924:	83 ec 08             	sub    $0x8,%esp
f0119927:	6a 03                	push   $0x3
f0119929:	50                   	push   %eax
f011992a:	e8 80 25 ff ff       	call   f010beaf <set_program_priority>
f011992f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0119932:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119935:	83 ec 08             	sub    $0x8,%esp
f0119938:	6a 03                	push   $0x3
f011993a:	50                   	push   %eax
f011993b:	e8 6f 25 ff ff       	call   f010beaf <set_program_priority>
f0119940:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0119943:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119946:	83 ec 08             	sub    $0x8,%esp
f0119949:	6a 03                	push   $0x3
f011994b:	50                   	push   %eax
f011994c:	e8 5e 25 ff ff       	call   f010beaf <set_program_priority>
f0119951:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0119954:	e8 e7 ae fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119959:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011995c:	74 17                	je     f0119975 <test_priority_normal_and_lower+0x2e9>
f011995e:	83 ec 04             	sub    $0x4,%esp
f0119961:	68 94 df 12 f0       	push   $0xf012df94
f0119966:	68 11 01 00 00       	push   $0x111
f011996b:	68 11 df 12 f0       	push   $0xf012df11
f0119970:	e8 a5 69 fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0119975:	e8 8f 40 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011997a:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011997d:	74 17                	je     f0119996 <test_priority_normal_and_lower+0x30a>
f011997f:	83 ec 04             	sub    $0x4,%esp
f0119982:	68 94 df 12 f0       	push   $0xf012df94
f0119987:	68 12 01 00 00       	push   $0x112
f011998c:	68 11 df 12 f0       	push   $0xf012df11
f0119991:	e8 84 69 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0119996:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119999:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f011999f:	83 f8 14             	cmp    $0x14,%eax
f01199a2:	75 1c                	jne    f01199c0 <test_priority_normal_and_lower+0x334>
f01199a4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01199a7:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01199ad:	83 f8 1e             	cmp    $0x1e,%eax
f01199b0:	75 0e                	jne    f01199c0 <test_priority_normal_and_lower+0x334>
f01199b2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01199b5:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01199bb:	83 f8 28             	cmp    $0x28,%eax
f01199be:	74 17                	je     f01199d7 <test_priority_normal_and_lower+0x34b>
			panic("The programs' working set size should not change after setting priority to normal\n");
f01199c0:	83 ec 04             	sub    $0x4,%esp
f01199c3:	68 c0 df 12 f0       	push   $0xf012dfc0
f01199c8:	68 15 01 00 00       	push   $0x115
f01199cd:	68 11 df 12 f0       	push   $0xf012df11
f01199d2:	e8 43 69 fe ff       	call   f010031a <_panic>

		freeFrames = sys_calculate_free_frames();
f01199d7:	e8 2d 40 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01199dc:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01199df:	e8 5c ae fe ff       	call   f0104840 <pf_calculate_free_frames>
f01199e4:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01199e7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01199ea:	83 ec 08             	sub    $0x8,%esp
f01199ed:	6a 02                	push   $0x2
f01199ef:	50                   	push   %eax
f01199f0:	e8 ba 24 ff ff       	call   f010beaf <set_program_priority>
f01199f5:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01199f8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01199fb:	83 ec 08             	sub    $0x8,%esp
f01199fe:	6a 02                	push   $0x2
f0119a00:	50                   	push   %eax
f0119a01:	e8 a9 24 ff ff       	call   f010beaf <set_program_priority>
f0119a06:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0119a09:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119a0c:	83 ec 08             	sub    $0x8,%esp
f0119a0f:	6a 02                	push   $0x2
f0119a11:	50                   	push   %eax
f0119a12:	e8 98 24 ff ff       	call   f010beaf <set_program_priority>
f0119a17:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0119a1a:	e8 21 ae fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119a1f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0119a22:	74 17                	je     f0119a3b <test_priority_normal_and_lower+0x3af>
f0119a24:	83 ec 04             	sub    $0x4,%esp
f0119a27:	68 94 df 12 f0       	push   $0xf012df94
f0119a2c:	68 1f 01 00 00       	push   $0x11f
f0119a31:	68 11 df 12 f0       	push   $0xf012df11
f0119a36:	e8 df 68 fe ff       	call   f010031a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0119a3b:	e8 c9 3f ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119a40:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0119a43:	74 21                	je     f0119a66 <test_priority_normal_and_lower+0x3da>
f0119a45:	e8 bf 3f ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119a4a:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0119a4d:	29 c2                	sub    %eax,%edx
f0119a4f:	89 d0                	mov    %edx,%eax
f0119a51:	50                   	push   %eax
f0119a52:	68 14 e0 12 f0       	push   $0xf012e014
f0119a57:	68 20 01 00 00       	push   $0x120
f0119a5c:	68 11 df 12 f0       	push   $0xf012df11
f0119a61:	e8 b4 68 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0119a66:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119a69:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119a6f:	83 f8 0a             	cmp    $0xa,%eax
f0119a72:	75 1c                	jne    f0119a90 <test_priority_normal_and_lower+0x404>
f0119a74:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119a77:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119a7d:	83 f8 0f             	cmp    $0xf,%eax
f0119a80:	75 0e                	jne    f0119a90 <test_priority_normal_and_lower+0x404>
f0119a82:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119a85:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119a8b:	83 f8 14             	cmp    $0x14,%eax
f0119a8e:	74 17                	je     f0119aa7 <test_priority_normal_and_lower+0x41b>
			panic("The programs' working set size should be doubled only if it is full\n");
f0119a90:	83 ec 04             	sub    $0x4,%esp
f0119a93:	68 44 e0 12 f0       	push   $0xf012e044
f0119a98:	68 23 01 00 00       	push   $0x123
f0119a9d:	68 11 df 12 f0       	push   $0xf012df11
f0119aa2:	e8 73 68 fe ff       	call   f010031a <_panic>

		freeFrames = sys_calculate_free_frames();
f0119aa7:	e8 5d 3f ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119aac:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119aaf:	e8 8c ad fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119ab4:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0119ab7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119aba:	83 ec 08             	sub    $0x8,%esp
f0119abd:	6a 02                	push   $0x2
f0119abf:	50                   	push   %eax
f0119ac0:	e8 ea 23 ff ff       	call   f010beaf <set_program_priority>
f0119ac5:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0119ac8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119acb:	83 ec 08             	sub    $0x8,%esp
f0119ace:	6a 02                	push   $0x2
f0119ad0:	50                   	push   %eax
f0119ad1:	e8 d9 23 ff ff       	call   f010beaf <set_program_priority>
f0119ad6:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0119ad9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119adc:	83 ec 08             	sub    $0x8,%esp
f0119adf:	6a 02                	push   $0x2
f0119ae1:	50                   	push   %eax
f0119ae2:	e8 c8 23 ff ff       	call   f010beaf <set_program_priority>
f0119ae7:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0119aea:	e8 51 ad fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119aef:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0119af2:	74 17                	je     f0119b0b <test_priority_normal_and_lower+0x47f>
f0119af4:	83 ec 04             	sub    $0x4,%esp
f0119af7:	68 94 df 12 f0       	push   $0xf012df94
f0119afc:	68 2d 01 00 00       	push   $0x12d
f0119b01:	68 11 df 12 f0       	push   $0xf012df11
f0119b06:	e8 0f 68 fe ff       	call   f010031a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0119b0b:	e8 f9 3e ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119b10:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0119b13:	74 21                	je     f0119b36 <test_priority_normal_and_lower+0x4aa>
f0119b15:	e8 ef 3e ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119b1a:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0119b1d:	29 c2                	sub    %eax,%edx
f0119b1f:	89 d0                	mov    %edx,%eax
f0119b21:	50                   	push   %eax
f0119b22:	68 14 e0 12 f0       	push   $0xf012e014
f0119b27:	68 2e 01 00 00       	push   $0x12e
f0119b2c:	68 11 df 12 f0       	push   $0xf012df11
f0119b31:	e8 e4 67 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0119b36:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119b39:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119b3f:	83 f8 0a             	cmp    $0xa,%eax
f0119b42:	75 1c                	jne    f0119b60 <test_priority_normal_and_lower+0x4d4>
f0119b44:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119b47:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119b4d:	83 f8 0f             	cmp    $0xf,%eax
f0119b50:	75 0e                	jne    f0119b60 <test_priority_normal_and_lower+0x4d4>
f0119b52:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119b55:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119b5b:	83 f8 0a             	cmp    $0xa,%eax
f0119b5e:	74 17                	je     f0119b77 <test_priority_normal_and_lower+0x4eb>
			panic("The programs' working set size should be doubled only if it is full\n");
f0119b60:	83 ec 04             	sub    $0x4,%esp
f0119b63:	68 44 e0 12 f0       	push   $0xf012e044
f0119b68:	68 31 01 00 00       	push   $0x131
f0119b6d:	68 11 df 12 f0       	push   $0xf012df11
f0119b72:	e8 a3 67 fe ff       	call   f010031a <_panic>

		for(int i = 0; i < 10; i++)
f0119b77:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0119b7e:	eb 7d                	jmp    f0119bfd <test_priority_normal_and_lower+0x571>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0119b80:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119b83:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0119b8a:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0119b8d:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0119b90:	89 d0                	mov    %edx,%eax
f0119b92:	01 c0                	add    %eax,%eax
f0119b94:	01 d0                	add    %edx,%eax
f0119b96:	c1 e0 03             	shl    $0x3,%eax
f0119b99:	01 d8                	add    %ebx,%eax
f0119b9b:	05 88 00 00 00       	add    $0x88,%eax
f0119ba0:	8b 00                	mov    (%eax),%eax
f0119ba2:	39 c1                	cmp    %eax,%ecx
f0119ba4:	74 17                	je     f0119bbd <test_priority_normal_and_lower+0x531>
				panic("Working set should be moved properly to the new one");
f0119ba6:	83 ec 04             	sub    $0x4,%esp
f0119ba9:	68 04 e1 12 f0       	push   $0xf012e104
f0119bae:	68 36 01 00 00       	push   $0x136
f0119bb3:	68 11 df 12 f0       	push   $0xf012df11
f0119bb8:	e8 5d 67 fe ff       	call   f010031a <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0119bbd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119bc0:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0119bc7:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0119bca:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0119bcd:	89 d0                	mov    %edx,%eax
f0119bcf:	01 c0                	add    %eax,%eax
f0119bd1:	01 d0                	add    %edx,%eax
f0119bd3:	c1 e0 03             	shl    $0x3,%eax
f0119bd6:	01 d8                	add    %ebx,%eax
f0119bd8:	05 90 00 00 00       	add    $0x90,%eax
f0119bdd:	8b 00                	mov    (%eax),%eax
f0119bdf:	39 c1                	cmp    %eax,%ecx
f0119be1:	74 17                	je     f0119bfa <test_priority_normal_and_lower+0x56e>
				panic("Working set should be moved properly to the new one");
f0119be3:	83 ec 04             	sub    $0x4,%esp
f0119be6:	68 04 e1 12 f0       	push   $0xf012e104
f0119beb:	68 39 01 00 00       	push   $0x139
f0119bf0:	68 11 df 12 f0       	push   $0xf012df11
f0119bf5:	e8 20 67 fe ff       	call   f010031a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0119bfa:	ff 45 d8             	incl   -0x28(%ebp)
f0119bfd:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0119c01:	0f 8e 79 ff ff ff    	jle    f0119b80 <test_priority_normal_and_lower+0x4f4>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0119c07:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0119c0e:	eb 7d                	jmp    f0119c8d <test_priority_normal_and_lower+0x601>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0119c10:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119c13:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0119c1a:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0119c1d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0119c20:	89 d0                	mov    %edx,%eax
f0119c22:	01 c0                	add    %eax,%eax
f0119c24:	01 d0                	add    %edx,%eax
f0119c26:	c1 e0 03             	shl    $0x3,%eax
f0119c29:	01 d8                	add    %ebx,%eax
f0119c2b:	05 88 00 00 00       	add    $0x88,%eax
f0119c30:	8b 00                	mov    (%eax),%eax
f0119c32:	39 c1                	cmp    %eax,%ecx
f0119c34:	74 17                	je     f0119c4d <test_priority_normal_and_lower+0x5c1>
				panic("Working set should be moved properly to the new one");
f0119c36:	83 ec 04             	sub    $0x4,%esp
f0119c39:	68 04 e1 12 f0       	push   $0xf012e104
f0119c3e:	68 3f 01 00 00       	push   $0x13f
f0119c43:	68 11 df 12 f0       	push   $0xf012df11
f0119c48:	e8 cd 66 fe ff       	call   f010031a <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0119c4d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119c50:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0119c57:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0119c5a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0119c5d:	89 d0                	mov    %edx,%eax
f0119c5f:	01 c0                	add    %eax,%eax
f0119c61:	01 d0                	add    %edx,%eax
f0119c63:	c1 e0 03             	shl    $0x3,%eax
f0119c66:	01 d8                	add    %ebx,%eax
f0119c68:	05 90 00 00 00       	add    $0x90,%eax
f0119c6d:	8b 00                	mov    (%eax),%eax
f0119c6f:	39 c1                	cmp    %eax,%ecx
f0119c71:	74 17                	je     f0119c8a <test_priority_normal_and_lower+0x5fe>
				panic("Working set should be moved properly to the new one");
f0119c73:	83 ec 04             	sub    $0x4,%esp
f0119c76:	68 04 e1 12 f0       	push   $0xf012e104
f0119c7b:	68 42 01 00 00       	push   $0x142
f0119c80:	68 11 df 12 f0       	push   $0xf012df11
f0119c85:	e8 90 66 fe ff       	call   f010031a <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0119c8a:	ff 45 d4             	incl   -0x2c(%ebp)
f0119c8d:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0119c91:	0f 8e 79 ff ff ff    	jle    f0119c10 <test_priority_normal_and_lower+0x584>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0119c97:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0119c9e:	eb 7d                	jmp    f0119d1d <test_priority_normal_and_lower+0x691>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0119ca0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119ca3:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0119caa:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0119cad:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0119cb0:	89 d0                	mov    %edx,%eax
f0119cb2:	01 c0                	add    %eax,%eax
f0119cb4:	01 d0                	add    %edx,%eax
f0119cb6:	c1 e0 03             	shl    $0x3,%eax
f0119cb9:	01 d8                	add    %ebx,%eax
f0119cbb:	05 88 00 00 00       	add    $0x88,%eax
f0119cc0:	8b 00                	mov    (%eax),%eax
f0119cc2:	39 c1                	cmp    %eax,%ecx
f0119cc4:	74 17                	je     f0119cdd <test_priority_normal_and_lower+0x651>
				panic("Working set should be moved properly to the new one");
f0119cc6:	83 ec 04             	sub    $0x4,%esp
f0119cc9:	68 04 e1 12 f0       	push   $0xf012e104
f0119cce:	68 48 01 00 00       	push   $0x148
f0119cd3:	68 11 df 12 f0       	push   $0xf012df11
f0119cd8:	e8 3d 66 fe ff       	call   f010031a <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0119cdd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119ce0:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0119ce7:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0119cea:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0119ced:	89 d0                	mov    %edx,%eax
f0119cef:	01 c0                	add    %eax,%eax
f0119cf1:	01 d0                	add    %edx,%eax
f0119cf3:	c1 e0 03             	shl    $0x3,%eax
f0119cf6:	01 d8                	add    %ebx,%eax
f0119cf8:	05 90 00 00 00       	add    $0x90,%eax
f0119cfd:	8b 00                	mov    (%eax),%eax
f0119cff:	39 c1                	cmp    %eax,%ecx
f0119d01:	74 17                	je     f0119d1a <test_priority_normal_and_lower+0x68e>
				panic("Working set should be moved properly to the new one");
f0119d03:	83 ec 04             	sub    $0x4,%esp
f0119d06:	68 04 e1 12 f0       	push   $0xf012e104
f0119d0b:	68 4b 01 00 00       	push   $0x14b
f0119d10:	68 11 df 12 f0       	push   $0xf012df11
f0119d15:	e8 00 66 fe ff       	call   f010031a <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0119d1a:	ff 45 d0             	incl   -0x30(%ebp)
f0119d1d:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f0119d21:	0f 8e 79 ff ff ff    	jle    f0119ca0 <test_priority_normal_and_lower+0x614>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0119d27:	e8 dd 3c ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119d2c:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119d2f:	e8 0c ab fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119d34:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0119d37:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119d3a:	83 ec 08             	sub    $0x8,%esp
f0119d3d:	6a 01                	push   $0x1
f0119d3f:	50                   	push   %eax
f0119d40:	e8 6a 21 ff ff       	call   f010beaf <set_program_priority>
f0119d45:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0119d48:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119d4b:	83 ec 08             	sub    $0x8,%esp
f0119d4e:	6a 01                	push   $0x1
f0119d50:	50                   	push   %eax
f0119d51:	e8 59 21 ff ff       	call   f010beaf <set_program_priority>
f0119d56:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0119d59:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119d5c:	83 ec 08             	sub    $0x8,%esp
f0119d5f:	6a 01                	push   $0x1
f0119d61:	50                   	push   %eax
f0119d62:	e8 48 21 ff ff       	call   f010beaf <set_program_priority>
f0119d67:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0119d6a:	e8 d1 aa fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119d6f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0119d72:	74 17                	je     f0119d8b <test_priority_normal_and_lower+0x6ff>
f0119d74:	83 ec 04             	sub    $0x4,%esp
f0119d77:	68 94 df 12 f0       	push   $0xf012df94
f0119d7c:	68 54 01 00 00       	push   $0x154
f0119d81:	68 11 df 12 f0       	push   $0xf012df11
f0119d86:	e8 8f 65 fe ff       	call   f010031a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0119d8b:	e8 79 3c ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119d90:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0119d93:	83 f8 0d             	cmp    $0xd,%eax
f0119d96:	74 17                	je     f0119daf <test_priority_normal_and_lower+0x723>
f0119d98:	83 ec 04             	sub    $0x4,%esp
f0119d9b:	68 ec e2 12 f0       	push   $0xf012e2ec
f0119da0:	68 55 01 00 00       	push   $0x155
f0119da5:	68 11 df 12 f0       	push   $0xf012df11
f0119daa:	e8 6b 65 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0119daf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119db2:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119db8:	83 f8 05             	cmp    $0x5,%eax
f0119dbb:	75 1c                	jne    f0119dd9 <test_priority_normal_and_lower+0x74d>
f0119dbd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119dc0:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119dc6:	83 f8 07             	cmp    $0x7,%eax
f0119dc9:	75 0e                	jne    f0119dd9 <test_priority_normal_and_lower+0x74d>
f0119dcb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119dce:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119dd4:	83 f8 05             	cmp    $0x5,%eax
f0119dd7:	74 17                	je     f0119df0 <test_priority_normal_and_lower+0x764>
			panic("The programs' working set size should be half\n");
f0119dd9:	83 ec 04             	sub    $0x4,%esp
f0119ddc:	68 34 e3 12 f0       	push   $0xf012e334
f0119de1:	68 58 01 00 00       	push   $0x158
f0119de6:	68 11 df 12 f0       	push   $0xf012df11
f0119deb:	e8 2a 65 fe ff       	call   f010031a <_panic>


		freeFrames = sys_calculate_free_frames();
f0119df0:	e8 14 3c ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119df5:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119df8:	e8 43 aa fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119dfd:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0119e00:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119e03:	83 ec 08             	sub    $0x8,%esp
f0119e06:	6a 01                	push   $0x1
f0119e08:	50                   	push   %eax
f0119e09:	e8 a1 20 ff ff       	call   f010beaf <set_program_priority>
f0119e0e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0119e11:	e8 2a aa fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119e16:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0119e19:	74 17                	je     f0119e32 <test_priority_normal_and_lower+0x7a6>
f0119e1b:	83 ec 04             	sub    $0x4,%esp
f0119e1e:	68 94 df 12 f0       	push   $0xf012df94
f0119e23:	68 5e 01 00 00       	push   $0x15e
f0119e28:	68 11 df 12 f0       	push   $0xf012df11
f0119e2d:	e8 e8 64 fe ff       	call   f010031a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f0119e32:	e8 d2 3b ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119e37:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0119e3a:	83 f8 03             	cmp    $0x3,%eax
f0119e3d:	74 17                	je     f0119e56 <test_priority_normal_and_lower+0x7ca>
f0119e3f:	83 ec 04             	sub    $0x4,%esp
f0119e42:	68 94 df 12 f0       	push   $0xf012df94
f0119e47:	68 5f 01 00 00       	push   $0x15f
f0119e4c:	68 11 df 12 f0       	push   $0xf012df11
f0119e51:	e8 c4 64 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0119e56:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119e59:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119e5f:	83 f8 02             	cmp    $0x2,%eax
f0119e62:	75 1c                	jne    f0119e80 <test_priority_normal_and_lower+0x7f4>
f0119e64:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119e67:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119e6d:	83 f8 07             	cmp    $0x7,%eax
f0119e70:	75 0e                	jne    f0119e80 <test_priority_normal_and_lower+0x7f4>
f0119e72:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119e75:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119e7b:	83 f8 05             	cmp    $0x5,%eax
f0119e7e:	74 17                	je     f0119e97 <test_priority_normal_and_lower+0x80b>
			panic("The programs' working set size should be doubled if full\n");
f0119e80:	83 ec 04             	sub    $0x4,%esp
f0119e83:	68 c8 e0 12 f0       	push   $0xf012e0c8
f0119e88:	68 62 01 00 00       	push   $0x162
f0119e8d:	68 11 df 12 f0       	push   $0xf012df11
f0119e92:	e8 83 64 fe ff       	call   f010031a <_panic>

		for(int i = 0; i < 2; i++)
f0119e97:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0119e9e:	e9 83 00 00 00       	jmp    f0119f26 <test_priority_normal_and_lower+0x89a>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0119ea3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119ea6:	83 c0 08             	add    $0x8,%eax
f0119ea9:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0119eb0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0119eb3:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0119eb6:	89 d0                	mov    %edx,%eax
f0119eb8:	01 c0                	add    %eax,%eax
f0119eba:	01 d0                	add    %edx,%eax
f0119ebc:	c1 e0 03             	shl    $0x3,%eax
f0119ebf:	01 d8                	add    %ebx,%eax
f0119ec1:	05 88 00 00 00       	add    $0x88,%eax
f0119ec6:	8b 00                	mov    (%eax),%eax
f0119ec8:	39 c1                	cmp    %eax,%ecx
f0119eca:	74 17                	je     f0119ee3 <test_priority_normal_and_lower+0x857>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0119ecc:	83 ec 04             	sub    $0x4,%esp
f0119ecf:	68 64 e3 12 f0       	push   $0xf012e364
f0119ed4:	68 67 01 00 00       	push   $0x167
f0119ed9:	68 11 df 12 f0       	push   $0xf012df11
f0119ede:	e8 37 64 fe ff       	call   f010031a <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0119ee3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119ee6:	83 c0 08             	add    $0x8,%eax
f0119ee9:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0119ef0:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0119ef3:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0119ef6:	89 d0                	mov    %edx,%eax
f0119ef8:	01 c0                	add    %eax,%eax
f0119efa:	01 d0                	add    %edx,%eax
f0119efc:	c1 e0 03             	shl    $0x3,%eax
f0119eff:	01 d8                	add    %ebx,%eax
f0119f01:	05 90 00 00 00       	add    $0x90,%eax
f0119f06:	8b 00                	mov    (%eax),%eax
f0119f08:	39 c1                	cmp    %eax,%ecx
f0119f0a:	74 17                	je     f0119f23 <test_priority_normal_and_lower+0x897>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0119f0c:	83 ec 04             	sub    $0x4,%esp
f0119f0f:	68 64 e3 12 f0       	push   $0xf012e364
f0119f14:	68 6a 01 00 00       	push   $0x16a
f0119f19:	68 11 df 12 f0       	push   $0xf012df11
f0119f1e:	e8 f7 63 fe ff       	call   f010031a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f0119f23:	ff 45 cc             	incl   -0x34(%ebp)
f0119f26:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0119f2a:	0f 8e 73 ff ff ff    	jle    f0119ea3 <test_priority_normal_and_lower+0x817>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0119f30:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0119f37:	e9 83 00 00 00       	jmp    f0119fbf <test_priority_normal_and_lower+0x933>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0119f3c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119f3f:	83 c0 03             	add    $0x3,%eax
f0119f42:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0119f49:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0119f4c:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0119f4f:	89 d0                	mov    %edx,%eax
f0119f51:	01 c0                	add    %eax,%eax
f0119f53:	01 d0                	add    %edx,%eax
f0119f55:	c1 e0 03             	shl    $0x3,%eax
f0119f58:	01 d8                	add    %ebx,%eax
f0119f5a:	05 88 00 00 00       	add    $0x88,%eax
f0119f5f:	8b 00                	mov    (%eax),%eax
f0119f61:	39 c1                	cmp    %eax,%ecx
f0119f63:	74 17                	je     f0119f7c <test_priority_normal_and_lower+0x8f0>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0119f65:	ff 75 c8             	pushl  -0x38(%ebp)
f0119f68:	68 d0 e3 12 f0       	push   $0xf012e3d0
f0119f6d:	68 70 01 00 00       	push   $0x170
f0119f72:	68 11 df 12 f0       	push   $0xf012df11
f0119f77:	e8 9e 63 fe ff       	call   f010031a <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0119f7c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119f7f:	83 c0 03             	add    $0x3,%eax
f0119f82:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0119f89:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0119f8c:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0119f8f:	89 d0                	mov    %edx,%eax
f0119f91:	01 c0                	add    %eax,%eax
f0119f93:	01 d0                	add    %edx,%eax
f0119f95:	c1 e0 03             	shl    $0x3,%eax
f0119f98:	01 d8                	add    %ebx,%eax
f0119f9a:	05 90 00 00 00       	add    $0x90,%eax
f0119f9f:	8b 00                	mov    (%eax),%eax
f0119fa1:	39 c1                	cmp    %eax,%ecx
f0119fa3:	74 17                	je     f0119fbc <test_priority_normal_and_lower+0x930>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0119fa5:	83 ec 04             	sub    $0x4,%esp
f0119fa8:	68 64 e3 12 f0       	push   $0xf012e364
f0119fad:	68 73 01 00 00       	push   $0x173
f0119fb2:	68 11 df 12 f0       	push   $0xf012df11
f0119fb7:	e8 5e 63 fe ff       	call   f010031a <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0119fbc:	ff 45 c8             	incl   -0x38(%ebp)
f0119fbf:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0119fc3:	0f 8e 73 ff ff ff    	jle    f0119f3c <test_priority_normal_and_lower+0x8b0>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0119fc9:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0119fd0:	e9 83 00 00 00       	jmp    f011a058 <test_priority_normal_and_lower+0x9cc>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0119fd5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119fd8:	83 c0 05             	add    $0x5,%eax
f0119fdb:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0119fe2:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0119fe5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0119fe8:	89 d0                	mov    %edx,%eax
f0119fea:	01 c0                	add    %eax,%eax
f0119fec:	01 d0                	add    %edx,%eax
f0119fee:	c1 e0 03             	shl    $0x3,%eax
f0119ff1:	01 d8                	add    %ebx,%eax
f0119ff3:	05 88 00 00 00       	add    $0x88,%eax
f0119ff8:	8b 00                	mov    (%eax),%eax
f0119ffa:	39 c1                	cmp    %eax,%ecx
f0119ffc:	74 17                	je     f011a015 <test_priority_normal_and_lower+0x989>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0119ffe:	83 ec 04             	sub    $0x4,%esp
f011a001:	68 64 e3 12 f0       	push   $0xf012e364
f011a006:	68 79 01 00 00       	push   $0x179
f011a00b:	68 11 df 12 f0       	push   $0xf012df11
f011a010:	e8 05 63 fe ff       	call   f010031a <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f011a015:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a018:	83 c0 05             	add    $0x5,%eax
f011a01b:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f011a022:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011a025:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011a028:	89 d0                	mov    %edx,%eax
f011a02a:	01 c0                	add    %eax,%eax
f011a02c:	01 d0                	add    %edx,%eax
f011a02e:	c1 e0 03             	shl    $0x3,%eax
f011a031:	01 d8                	add    %ebx,%eax
f011a033:	05 90 00 00 00       	add    $0x90,%eax
f011a038:	8b 00                	mov    (%eax),%eax
f011a03a:	39 c1                	cmp    %eax,%ecx
f011a03c:	74 17                	je     f011a055 <test_priority_normal_and_lower+0x9c9>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f011a03e:	83 ec 04             	sub    $0x4,%esp
f011a041:	68 64 e3 12 f0       	push   $0xf012e364
f011a046:	68 7c 01 00 00       	push   $0x17c
f011a04b:	68 11 df 12 f0       	push   $0xf012df11
f011a050:	e8 c5 62 fe ff       	call   f010031a <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f011a055:	ff 45 c4             	incl   -0x3c(%ebp)
f011a058:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f011a05c:	0f 8e 73 ff ff ff    	jle    f0119fd5 <test_priority_normal_and_lower+0x949>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f011a062:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a065:	83 ec 08             	sub    $0x8,%esp
f011a068:	6a 05                	push   $0x5
f011a06a:	50                   	push   %eax
f011a06b:	e8 3f 1e ff ff       	call   f010beaf <set_program_priority>
f011a070:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f011a073:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a076:	83 ec 08             	sub    $0x8,%esp
f011a079:	6a 05                	push   $0x5
f011a07b:	50                   	push   %eax
f011a07c:	e8 2e 1e ff ff       	call   f010beaf <set_program_priority>
f011a081:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f011a084:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f011a08b:	75 6e 61 
f011a08e:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f011a095:	6c 00 00 
f011a098:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f011a09e:	b9 17 00 00 00       	mov    $0x17,%ecx
f011a0a3:	b8 00 00 00 00       	mov    $0x0,%eax
f011a0a8:	89 d7                	mov    %edx,%edi
f011a0aa:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f011a0ac:	83 ec 0c             	sub    $0xc,%esp
f011a0af:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f011a0b5:	50                   	push   %eax
f011a0b6:	e8 21 7e fe ff       	call   f0101edc <execute_command>
f011a0bb:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
#endif
}
f011a0be:	eb 10                	jmp    f011a0d0 <test_priority_normal_and_lower+0xa44>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f011a0c0:	83 ec 0c             	sub    $0xc,%esp
f011a0c3:	68 40 e4 12 f0       	push   $0xf012e440
f011a0c8:	e8 9f 6e fe ff       	call   f0100f6c <cprintf>
f011a0cd:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f011a0d0:	90                   	nop
f011a0d1:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011a0d4:	5b                   	pop    %ebx
f011a0d5:	5e                   	pop    %esi
f011a0d6:	5f                   	pop    %edi
f011a0d7:	5d                   	pop    %ebp
f011a0d8:	c3                   	ret    

f011a0d9 <test_kmalloc>:
	int c;
};

uint32 da_limit = KERNEL_HEAP_START + DYN_ALLOC_MAX_SIZE ;
int test_kmalloc()
{
f011a0d9:	55                   	push   %ebp
f011a0da:	89 e5                	mov    %esp,%ebp
f011a0dc:	57                   	push   %edi
f011a0dd:	53                   	push   %ebx
f011a0de:	81 ec d0 00 00 00    	sub    $0xd0,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f011a0e4:	83 ec 0c             	sub    $0xc,%esp
f011a0e7:	68 60 e5 12 f0       	push   $0xf012e560
f011a0ec:	e8 7b 6e fe ff       	call   f0100f6c <cprintf>
f011a0f1:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a0f4:	83 ec 0c             	sub    $0xc,%esp
f011a0f7:	68 90 e5 12 f0       	push   $0xf012e590
f011a0fc:	e8 6b 6e fe ff       	call   f0100f6c <cprintf>
f011a101:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a104:	83 ec 0c             	sub    $0xc,%esp
f011a107:	68 60 e5 12 f0       	push   $0xf012e560
f011a10c:	e8 5b 6e fe ff       	call   f0100f6c <cprintf>
f011a111:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011a114:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f011a118:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f011a11c:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f011a122:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f011a128:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f011a12f:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2, *byteArr3 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfByte3, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = (int)sys_calculate_free_frames() ;
f011a136:	e8 ce 38 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a13b:	89 45 d8             	mov    %eax,-0x28(%ebp)
	int eval = 0;
f011a13e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool correct = 1 ;
f011a145:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int freeFrames, freeDiskFrames;
	uint32 sizeOfKHeap;
	void* ptr_allocations[20] = {0};
f011a14c:	8d 95 38 ff ff ff    	lea    -0xc8(%ebp),%edx
f011a152:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a157:	b8 00 00 00 00       	mov    $0x0,%eax
f011a15c:	89 d7                	mov    %edx,%edi
f011a15e:	f3 ab                	rep stos %eax,%es:(%edi)
	correct = 1 ;
f011a160:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		//Insufficient space
		freeFrames = (int)sys_calculate_free_frames() ;
f011a167:	e8 9d 38 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a16c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a16f:	e8 cc a6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a174:	89 45 d0             	mov    %eax,-0x30(%ebp)
		sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f011a177:	c7 45 cc 01 e0 ff 07 	movl   $0x7ffe001,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f011a17e:	83 ec 0c             	sub    $0xc,%esp
f011a181:	ff 75 cc             	pushl  -0x34(%ebp)
f011a184:	e8 2d e9 fe ff       	call   f0108ab6 <kmalloc>
f011a189:	83 c4 10             	add    $0x10,%esp
f011a18c:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
		if (ptr_allocations[0] != NULL) { correct = 0; cprintf("Allocating insufficient space: should return NULL\n"); }
f011a192:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a198:	85 c0                	test   %eax,%eax
f011a19a:	74 17                	je     f011a1b3 <test_kmalloc+0xda>
f011a19c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a1a3:	83 ec 0c             	sub    $0xc,%esp
f011a1a6:	68 ec e5 12 f0       	push   $0xf012e5ec
f011a1ab:	e8 bc 6d fe ff       	call   f0100f6c <cprintf>
f011a1b0:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a1b3:	e8 88 a6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a1b8:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a1bb:	74 17                	je     f011a1d4 <test_kmalloc+0xfb>
f011a1bd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a1c4:	83 ec 0c             	sub    $0xc,%esp
f011a1c7:	68 20 e6 12 f0       	push   $0xf012e620
f011a1cc:	e8 9b 6d fe ff       	call   f0100f6c <cprintf>
f011a1d1:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a1d4:	e8 30 38 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a1d9:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011a1dc:	74 17                	je     f011a1f5 <test_kmalloc+0x11c>
f011a1de:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a1e5:	83 ec 0c             	sub    $0xc,%esp
f011a1e8:	68 8c e6 12 f0       	push   $0xf012e68c
f011a1ed:	e8 7a 6d fe ff       	call   f0100f6c <cprintf>
f011a1f2:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011a1f5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011a1f9:	74 04                	je     f011a1ff <test_kmalloc+0x126>
f011a1fb:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011a1ff:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		//2 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011a206:	e8 fe 37 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a20b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a20e:	e8 2d a6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a213:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011a216:	83 ec 0c             	sub    $0xc,%esp
f011a219:	68 00 fc 1f 00       	push   $0x1ffc00
f011a21e:	e8 93 e8 fe ff       	call   f0108ab6 <kmalloc>
f011a223:	83 c4 10             	add    $0x10,%esp
f011a226:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011a22c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a232:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011a237:	74 17                	je     f011a250 <test_kmalloc+0x177>
f011a239:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a240:	83 ec 0c             	sub    $0xc,%esp
f011a243:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011a248:	e8 1f 6d fe ff       	call   f0100f6c <cprintf>
f011a24d:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a250:	e8 eb a5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a255:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a258:	74 17                	je     f011a271 <test_kmalloc+0x198>
f011a25a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a261:	83 ec 0c             	sub    $0xc,%esp
f011a264:	68 20 e6 12 f0       	push   $0xf012e620
f011a269:	e8 fe 6c fe ff       	call   f0100f6c <cprintf>
f011a26e:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a271:	e8 93 37 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a276:	89 c2                	mov    %eax,%edx
f011a278:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a27b:	29 d0                	sub    %edx,%eax
f011a27d:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011a282:	7f 17                	jg     f011a29b <test_kmalloc+0x1c2>
f011a284:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a28b:	83 ec 0c             	sub    $0xc,%esp
f011a28e:	68 8c e6 12 f0       	push   $0xf012e68c
f011a293:	e8 d4 6c fe ff       	call   f0100f6c <cprintf>
f011a298:	83 c4 10             	add    $0x10,%esp

		//2 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011a29b:	e8 69 37 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a2a0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a2a3:	e8 98 a5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a2a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011a2ab:	83 ec 0c             	sub    $0xc,%esp
f011a2ae:	68 00 fc 1f 00       	push   $0x1ffc00
f011a2b3:	e8 fe e7 fe ff       	call   f0108ab6 <kmalloc>
f011a2b8:	83 c4 10             	add    $0x10,%esp
f011a2bb:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011a2c1:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011a2c7:	3d 00 10 20 f8       	cmp    $0xf8201000,%eax
f011a2cc:	74 17                	je     f011a2e5 <test_kmalloc+0x20c>
f011a2ce:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a2d5:	83 ec 0c             	sub    $0xc,%esp
f011a2d8:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011a2dd:	e8 8a 6c fe ff       	call   f0100f6c <cprintf>
f011a2e2:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a2e5:	e8 56 a5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a2ea:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a2ed:	74 17                	je     f011a306 <test_kmalloc+0x22d>
f011a2ef:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a2f6:	83 ec 0c             	sub    $0xc,%esp
f011a2f9:	68 20 e6 12 f0       	push   $0xf012e620
f011a2fe:	e8 69 6c fe ff       	call   f0100f6c <cprintf>
f011a303:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a306:	e8 fe 36 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a30b:	89 c2                	mov    %eax,%edx
f011a30d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a310:	29 d0                	sub    %edx,%eax
f011a312:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011a317:	7f 17                	jg     f011a330 <test_kmalloc+0x257>
f011a319:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a320:	83 ec 0c             	sub    $0xc,%esp
f011a323:	68 8c e6 12 f0       	push   $0xf012e68c
f011a328:	e8 3f 6c fe ff       	call   f0100f6c <cprintf>
f011a32d:	83 c4 10             	add    $0x10,%esp

		//2 KB - 1 (should be allocated by dynamic allocator not page allocator)
		freeFrames = (int)sys_calculate_free_frames() ;
f011a330:	e8 d4 36 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a335:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a338:	e8 03 a5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a33d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo-1);
f011a340:	83 ec 0c             	sub    $0xc,%esp
f011a343:	68 ff 07 00 00       	push   $0x7ff
f011a348:	e8 69 e7 fe ff       	call   f0108ab6 <kmalloc>
f011a34d:	83 c4 10             	add    $0x10,%esp
f011a350:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f011a356:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a35c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011a361:	76 28                	jbe    f011a38b <test_kmalloc+0x2b2>
f011a363:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f011a369:	83 ec 0c             	sub    $0xc,%esp
f011a36c:	6a 00                	push   $0x0
f011a36e:	e8 39 e7 fe ff       	call   f0108aac <sbrk>
f011a373:	83 c4 10             	add    $0x10,%esp
f011a376:	39 c3                	cmp    %eax,%ebx
f011a378:	73 11                	jae    f011a38b <test_kmalloc+0x2b2>
f011a37a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a380:	89 c2                	mov    %eax,%edx
f011a382:	a1 d8 ed 17 f0       	mov    0xf017edd8,%eax
f011a387:	39 c2                	cmp    %eax,%edx
f011a389:	72 17                	jb     f011a3a2 <test_kmalloc+0x2c9>
		{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011a38b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a392:	83 ec 0c             	sub    $0xc,%esp
f011a395:	68 20 e7 12 f0       	push   $0xf012e720
f011a39a:	e8 cd 6b fe ff       	call   f0100f6c <cprintf>
f011a39f:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a3a2:	e8 99 a4 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a3a7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a3aa:	74 17                	je     f011a3c3 <test_kmalloc+0x2ea>
f011a3ac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a3b3:	83 ec 0c             	sub    $0xc,%esp
f011a3b6:	68 20 e6 12 f0       	push   $0xf012e620
f011a3bb:	e8 ac 6b fe ff       	call   f0100f6c <cprintf>
f011a3c0:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - (int)sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//2 KB - 1 (should be allocated by dynamic allocator not page allocator)
		freeFrames = (int)sys_calculate_free_frames() ;
f011a3c3:	e8 41 36 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a3c8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a3cb:	e8 70 a4 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a3d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo-1);
f011a3d3:	83 ec 0c             	sub    $0xc,%esp
f011a3d6:	68 ff 07 00 00       	push   $0x7ff
f011a3db:	e8 d6 e6 fe ff       	call   f0108ab6 <kmalloc>
f011a3e0:	83 c4 10             	add    $0x10,%esp
f011a3e3:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f011a3e9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011a3ef:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011a3f4:	76 28                	jbe    f011a41e <test_kmalloc+0x345>
f011a3f6:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f011a3fc:	83 ec 0c             	sub    $0xc,%esp
f011a3ff:	6a 00                	push   $0x0
f011a401:	e8 a6 e6 fe ff       	call   f0108aac <sbrk>
f011a406:	83 c4 10             	add    $0x10,%esp
f011a409:	39 c3                	cmp    %eax,%ebx
f011a40b:	73 11                	jae    f011a41e <test_kmalloc+0x345>
f011a40d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011a413:	89 c2                	mov    %eax,%edx
f011a415:	a1 d8 ed 17 f0       	mov    0xf017edd8,%eax
f011a41a:	39 c2                	cmp    %eax,%edx
f011a41c:	72 17                	jb     f011a435 <test_kmalloc+0x35c>
		{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011a41e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a425:	83 ec 0c             	sub    $0xc,%esp
f011a428:	68 20 e7 12 f0       	push   $0xf012e720
f011a42d:	e8 3a 6b fe ff       	call   f0100f6c <cprintf>
f011a432:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a435:	e8 06 a4 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a43a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a43d:	74 17                	je     f011a456 <test_kmalloc+0x37d>
f011a43f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a446:	83 ec 0c             	sub    $0xc,%esp
f011a449:	68 20 e6 12 f0       	push   $0xf012e620
f011a44e:	e8 19 6b fe ff       	call   f0100f6c <cprintf>
f011a453:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - (int)sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//7 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011a456:	e8 ae 35 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a45b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a45e:	e8 dd a3 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a463:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011a466:	83 ec 0c             	sub    $0xc,%esp
f011a469:	68 00 1c 00 00       	push   $0x1c00
f011a46e:	e8 43 e6 fe ff       	call   f0108ab6 <kmalloc>
f011a473:	83 c4 10             	add    $0x10,%esp
f011a476:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega /*+ 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011a47c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a482:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011a487:	74 17                	je     f011a4a0 <test_kmalloc+0x3c7>
f011a489:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a490:	83 ec 0c             	sub    $0xc,%esp
f011a493:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011a498:	e8 cf 6a fe ff       	call   f0100f6c <cprintf>
f011a49d:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a4a0:	e8 9b a3 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a4a5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a4a8:	74 17                	je     f011a4c1 <test_kmalloc+0x3e8>
f011a4aa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a4b1:	83 ec 0c             	sub    $0xc,%esp
f011a4b4:	68 20 e6 12 f0       	push   $0xf012e620
f011a4b9:	e8 ae 6a fe ff       	call   f0100f6c <cprintf>
f011a4be:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a4c1:	e8 43 35 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a4c6:	89 c2                	mov    %eax,%edx
f011a4c8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a4cb:	29 d0                	sub    %edx,%eax
f011a4cd:	83 f8 01             	cmp    $0x1,%eax
f011a4d0:	7f 17                	jg     f011a4e9 <test_kmalloc+0x410>
f011a4d2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a4d9:	83 ec 0c             	sub    $0xc,%esp
f011a4dc:	68 8c e6 12 f0       	push   $0xf012e68c
f011a4e1:	e8 86 6a fe ff       	call   f0100f6c <cprintf>
f011a4e6:	83 c4 10             	add    $0x10,%esp

		//3 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011a4e9:	e8 1b 35 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a4ee:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a4f1:	e8 4a a3 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a4f6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011a4f9:	83 ec 0c             	sub    $0xc,%esp
f011a4fc:	68 00 fc 2f 00       	push   $0x2ffc00
f011a501:	e8 b0 e5 fe ff       	call   f0108ab6 <kmalloc>
f011a506:	83 c4 10             	add    $0x10,%esp
f011a509:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011a50f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011a515:	3d 00 30 40 f8       	cmp    $0xf8403000,%eax
f011a51a:	74 17                	je     f011a533 <test_kmalloc+0x45a>
f011a51c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a523:	83 ec 0c             	sub    $0xc,%esp
f011a526:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011a52b:	e8 3c 6a fe ff       	call   f0100f6c <cprintf>
f011a530:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a533:	e8 08 a3 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a538:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a53b:	74 17                	je     f011a554 <test_kmalloc+0x47b>
f011a53d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a544:	83 ec 0c             	sub    $0xc,%esp
f011a547:	68 20 e6 12 f0       	push   $0xf012e620
f011a54c:	e8 1b 6a fe ff       	call   f0100f6c <cprintf>
f011a551:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a554:	e8 b0 34 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a559:	89 c2                	mov    %eax,%edx
f011a55b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a55e:	29 d0                	sub    %edx,%eax
f011a560:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011a565:	7f 17                	jg     f011a57e <test_kmalloc+0x4a5>
f011a567:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a56e:	83 ec 0c             	sub    $0xc,%esp
f011a571:	68 8c e6 12 f0       	push   $0xf012e68c
f011a576:	e8 f1 69 fe ff       	call   f0100f6c <cprintf>
f011a57b:	83 c4 10             	add    $0x10,%esp

		//6 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011a57e:	e8 86 34 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a583:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a586:	e8 b5 a2 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a58b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011a58e:	83 ec 0c             	sub    $0xc,%esp
f011a591:	68 00 fc 5f 00       	push   $0x5ffc00
f011a596:	e8 1b e5 fe ff       	call   f0108ab6 <kmalloc>
f011a59b:	83 c4 10             	add    $0x10,%esp
f011a59e:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011a5a4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a5aa:	3d 00 30 70 f8       	cmp    $0xf8703000,%eax
f011a5af:	74 17                	je     f011a5c8 <test_kmalloc+0x4ef>
f011a5b1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a5b8:	83 ec 0c             	sub    $0xc,%esp
f011a5bb:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011a5c0:	e8 a7 69 fe ff       	call   f0100f6c <cprintf>
f011a5c5:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a5c8:	e8 73 a2 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a5cd:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a5d0:	74 17                	je     f011a5e9 <test_kmalloc+0x510>
f011a5d2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a5d9:	83 ec 0c             	sub    $0xc,%esp
f011a5dc:	68 20 e6 12 f0       	push   $0xf012e620
f011a5e1:	e8 86 69 fe ff       	call   f0100f6c <cprintf>
f011a5e6:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 1536) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a5e9:	e8 1b 34 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a5ee:	89 c2                	mov    %eax,%edx
f011a5f0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a5f3:	29 d0                	sub    %edx,%eax
f011a5f5:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011a5fa:	7f 17                	jg     f011a613 <test_kmalloc+0x53a>
f011a5fc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a603:	83 ec 0c             	sub    $0xc,%esp
f011a606:	68 8c e6 12 f0       	push   $0xf012e68c
f011a60b:	e8 5c 69 fe ff       	call   f0100f6c <cprintf>
f011a610:	83 c4 10             	add    $0x10,%esp

		//14 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011a613:	e8 f1 33 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a618:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a61b:	e8 20 a2 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a620:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011a623:	83 ec 0c             	sub    $0xc,%esp
f011a626:	68 00 38 00 00       	push   $0x3800
f011a62b:	e8 86 e4 fe ff       	call   f0108ab6 <kmalloc>
f011a630:	83 c4 10             	add    $0x10,%esp
f011a633:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011a639:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011a63f:	3d 00 30 d0 f8       	cmp    $0xf8d03000,%eax
f011a644:	74 17                	je     f011a65d <test_kmalloc+0x584>
f011a646:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a64d:	83 ec 0c             	sub    $0xc,%esp
f011a650:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011a655:	e8 12 69 fe ff       	call   f0100f6c <cprintf>
f011a65a:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a65d:	e8 de a1 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a662:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a665:	74 17                	je     f011a67e <test_kmalloc+0x5a5>
f011a667:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a66e:	83 ec 0c             	sub    $0xc,%esp
f011a671:	68 20 e6 12 f0       	push   $0xf012e620
f011a676:	e8 f1 68 fe ff       	call   f0100f6c <cprintf>
f011a67b:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a67e:	e8 86 33 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a683:	89 c2                	mov    %eax,%edx
f011a685:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a688:	29 d0                	sub    %edx,%eax
f011a68a:	83 f8 03             	cmp    $0x3,%eax
f011a68d:	7f 17                	jg     f011a6a6 <test_kmalloc+0x5cd>
f011a68f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a696:	83 ec 0c             	sub    $0xc,%esp
f011a699:	68 8c e6 12 f0       	push   $0xf012e68c
f011a69e:	e8 c9 68 fe ff       	call   f0100f6c <cprintf>
f011a6a3:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=40 ;
f011a6a6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011a6aa:	74 04                	je     f011a6b0 <test_kmalloc+0x5d7>
f011a6ac:	83 45 f4 28          	addl   $0x28,-0xc(%ebp)

	correct = 1 ;
f011a6b0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Checking read/write on the allocated spaces
	{

		freeFrames = (int)sys_calculate_free_frames() ;
f011a6b7:	e8 4d 33 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a6bc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a6bf:	e8 7c a1 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a6c4:	89 45 d0             	mov    %eax,-0x30(%ebp)

		//Write values
		//In 1st 2 MB
		lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f011a6c7:	c7 45 c8 ff fb 1f 00 	movl   $0x1ffbff,-0x38(%ebp)
		byteArr = (char *) ptr_allocations[0];
f011a6ce:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a6d4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		byteArr[0] = minByte ;
f011a6d7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a6da:	8a 55 eb             	mov    -0x15(%ebp),%dl
f011a6dd:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte ;
f011a6df:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011a6e2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a6e5:	01 c2                	add    %eax,%edx
f011a6e7:	8a 45 ea             	mov    -0x16(%ebp),%al
f011a6ea:	88 02                	mov    %al,(%edx)

		//In 2nd 2 MB
		shortArr = (short *) ptr_allocations[1];
f011a6ec:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011a6f2:	89 45 c0             	mov    %eax,-0x40(%ebp)
		lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f011a6f5:	c7 45 bc ff fd 0f 00 	movl   $0xffdff,-0x44(%ebp)
		shortArr[0] = minShort;
f011a6fc:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011a6ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a702:	66 89 02             	mov    %ax,(%edx)
		shortArr[lastIndexOfShort] = maxShort;
f011a705:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011a708:	01 c0                	add    %eax,%eax
f011a70a:	89 c2                	mov    %eax,%edx
f011a70c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a70f:	01 c2                	add    %eax,%edx
f011a711:	66 8b 45 e6          	mov    -0x1a(%ebp),%ax
f011a715:	66 89 02             	mov    %ax,(%edx)

		//In Dynamic Allocator Area
		{
			//In 2 KB - 1
			intArr = (int *) ptr_allocations[2];
f011a718:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a71e:	89 45 b8             	mov    %eax,-0x48(%ebp)
			lastIndexOfInt = (2*kilo-1)/sizeof(int) - 1;
f011a721:	c7 45 b4 fe 01 00 00 	movl   $0x1fe,-0x4c(%ebp)
			intArr[0] = minInt;
f011a728:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a72b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011a72e:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f011a730:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011a733:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011a73a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a73d:	01 c2                	add    %eax,%edx
f011a73f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a742:	89 02                	mov    %eax,(%edx)

			//In 2 KB - 1
			byteArr2 = (char *) ptr_allocations[3];
f011a744:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011a74a:	89 45 b0             	mov    %eax,-0x50(%ebp)
			lastIndexOfByte2 = (2*kilo-1)/sizeof(char) - 1;
f011a74d:	c7 45 ac fe 07 00 00 	movl   $0x7fe,-0x54(%ebp)
			byteArr2[0] = minByte;
f011a754:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a757:	8a 55 eb             	mov    -0x15(%ebp),%dl
f011a75a:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2] = maxByte;
f011a75c:	8b 55 ac             	mov    -0x54(%ebp),%edx
f011a75f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a762:	01 c2                	add    %eax,%edx
f011a764:	8a 45 ea             	mov    -0x16(%ebp),%al
f011a767:	88 02                	mov    %al,(%edx)
		}

		//In 7 KB
		structArr = (struct MyStruct *) ptr_allocations[4];
f011a769:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a76f:	89 45 a8             	mov    %eax,-0x58(%ebp)
		lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f011a772:	c7 45 a4 7f 03 00 00 	movl   $0x37f,-0x5c(%ebp)
		structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f011a779:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a77c:	8a 55 eb             	mov    -0x15(%ebp),%dl
f011a77f:	88 10                	mov    %dl,(%eax)
f011a781:	8b 55 a8             	mov    -0x58(%ebp),%edx
f011a784:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a787:	66 89 42 02          	mov    %ax,0x2(%edx)
f011a78b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a78e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011a791:	89 50 04             	mov    %edx,0x4(%eax)
		structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f011a794:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a797:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011a79e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a7a1:	01 c2                	add    %eax,%edx
f011a7a3:	8a 45 ea             	mov    -0x16(%ebp),%al
f011a7a6:	88 02                	mov    %al,(%edx)
f011a7a8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a7ab:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011a7b2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a7b5:	01 c2                	add    %eax,%edx
f011a7b7:	66 8b 45 e6          	mov    -0x1a(%ebp),%ax
f011a7bb:	66 89 42 02          	mov    %ax,0x2(%edx)
f011a7bf:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a7c2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011a7c9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a7cc:	01 c2                	add    %eax,%edx
f011a7ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a7d1:	89 42 04             	mov    %eax,0x4(%edx)

		//In 6 MB
		lastIndexOfByte3 = (6*Mega-kilo)/sizeof(char) - 1;
f011a7d4:	c7 45 a0 ff fb 5f 00 	movl   $0x5ffbff,-0x60(%ebp)
		byteArr3 = (char *) ptr_allocations[6];
f011a7db:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a7e1:	89 45 9c             	mov    %eax,-0x64(%ebp)
		byteArr3[0] = minByte ;
f011a7e4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a7e7:	8a 55 eb             	mov    -0x15(%ebp),%dl
f011a7ea:	88 10                	mov    %dl,(%eax)
		byteArr3[lastIndexOfByte3 / 2] = maxByte / 2;
f011a7ec:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a7ef:	89 c2                	mov    %eax,%edx
f011a7f1:	c1 ea 1f             	shr    $0x1f,%edx
f011a7f4:	01 d0                	add    %edx,%eax
f011a7f6:	d1 f8                	sar    %eax
f011a7f8:	89 c2                	mov    %eax,%edx
f011a7fa:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a7fd:	01 c2                	add    %eax,%edx
f011a7ff:	8a 45 ea             	mov    -0x16(%ebp),%al
f011a802:	88 c1                	mov    %al,%cl
f011a804:	c0 e9 07             	shr    $0x7,%cl
f011a807:	01 c8                	add    %ecx,%eax
f011a809:	d0 f8                	sar    %al
f011a80b:	88 02                	mov    %al,(%edx)
		byteArr3[lastIndexOfByte3] = maxByte ;
f011a80d:	8b 55 a0             	mov    -0x60(%ebp),%edx
f011a810:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a813:	01 c2                	add    %eax,%edx
f011a815:	8a 45 ea             	mov    -0x16(%ebp),%al
f011a818:	88 02                	mov    %al,(%edx)

		//In 14 KB
		shortArr2 = (short *) ptr_allocations[7];
f011a81a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011a820:	89 45 98             	mov    %eax,-0x68(%ebp)
		lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f011a823:	c7 45 94 ff 1b 00 00 	movl   $0x1bff,-0x6c(%ebp)
		shortArr2[0] = minShort;
f011a82a:	8b 55 98             	mov    -0x68(%ebp),%edx
f011a82d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a830:	66 89 02             	mov    %ax,(%edx)
		shortArr2[lastIndexOfShort2] = maxShort;
f011a833:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011a836:	01 c0                	add    %eax,%eax
f011a838:	89 c2                	mov    %eax,%edx
f011a83a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a83d:	01 c2                	add    %eax,%edx
f011a83f:	66 8b 45 e6          	mov    -0x1a(%ebp),%ax
f011a843:	66 89 02             	mov    %ax,(%edx)

		//Read values: check that the values are successfully written
		if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a846:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a849:	8a 00                	mov    (%eax),%al
f011a84b:	3a 45 eb             	cmp    -0x15(%ebp),%al
f011a84e:	75 0f                	jne    f011a85f <test_kmalloc+0x786>
f011a850:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011a853:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a856:	01 d0                	add    %edx,%eax
f011a858:	8a 00                	mov    (%eax),%al
f011a85a:	3a 45 ea             	cmp    -0x16(%ebp),%al
f011a85d:	74 17                	je     f011a876 <test_kmalloc+0x79d>
f011a85f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a866:	83 ec 0c             	sub    $0xc,%esp
f011a869:	68 a8 e7 12 f0       	push   $0xf012e7a8
f011a86e:	e8 f9 66 fe ff       	call   f0100f6c <cprintf>
f011a873:	83 c4 10             	add    $0x10,%esp
		if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a876:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a879:	66 8b 00             	mov    (%eax),%ax
f011a87c:	66 3b 45 e8          	cmp    -0x18(%ebp),%ax
f011a880:	75 15                	jne    f011a897 <test_kmalloc+0x7be>
f011a882:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011a885:	01 c0                	add    %eax,%eax
f011a887:	89 c2                	mov    %eax,%edx
f011a889:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a88c:	01 d0                	add    %edx,%eax
f011a88e:	66 8b 00             	mov    (%eax),%ax
f011a891:	66 3b 45 e6          	cmp    -0x1a(%ebp),%ax
f011a895:	74 17                	je     f011a8ae <test_kmalloc+0x7d5>
f011a897:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a89e:	83 ec 0c             	sub    $0xc,%esp
f011a8a1:	68 a8 e7 12 f0       	push   $0xf012e7a8
f011a8a6:	e8 c1 66 fe ff       	call   f0100f6c <cprintf>
f011a8ab:	83 c4 10             	add    $0x10,%esp
		if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a8ae:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a8b1:	8b 00                	mov    (%eax),%eax
f011a8b3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011a8b6:	75 16                	jne    f011a8ce <test_kmalloc+0x7f5>
f011a8b8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011a8bb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011a8c2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a8c5:	01 d0                	add    %edx,%eax
f011a8c7:	8b 00                	mov    (%eax),%eax
f011a8c9:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011a8cc:	74 17                	je     f011a8e5 <test_kmalloc+0x80c>
f011a8ce:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a8d5:	83 ec 0c             	sub    $0xc,%esp
f011a8d8:	68 a8 e7 12 f0       	push   $0xf012e7a8
f011a8dd:	e8 8a 66 fe ff       	call   f0100f6c <cprintf>
f011a8e2:	83 c4 10             	add    $0x10,%esp
		if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2] != maxByte) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a8e5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a8e8:	8a 00                	mov    (%eax),%al
f011a8ea:	3a 45 eb             	cmp    -0x15(%ebp),%al
f011a8ed:	75 0f                	jne    f011a8fe <test_kmalloc+0x825>
f011a8ef:	8b 55 ac             	mov    -0x54(%ebp),%edx
f011a8f2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a8f5:	01 d0                	add    %edx,%eax
f011a8f7:	8a 00                	mov    (%eax),%al
f011a8f9:	3a 45 ea             	cmp    -0x16(%ebp),%al
f011a8fc:	74 17                	je     f011a915 <test_kmalloc+0x83c>
f011a8fe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a905:	83 ec 0c             	sub    $0xc,%esp
f011a908:	68 a8 e7 12 f0       	push   $0xf012e7a8
f011a90d:	e8 5a 66 fe ff       	call   f0100f6c <cprintf>
f011a912:	83 c4 10             	add    $0x10,%esp

		if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	{ correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a915:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a918:	8a 00                	mov    (%eax),%al
f011a91a:	3a 45 eb             	cmp    -0x15(%ebp),%al
f011a91d:	75 16                	jne    f011a935 <test_kmalloc+0x85c>
f011a91f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a922:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011a929:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a92c:	01 d0                	add    %edx,%eax
f011a92e:	8a 00                	mov    (%eax),%al
f011a930:	3a 45 ea             	cmp    -0x16(%ebp),%al
f011a933:	74 17                	je     f011a94c <test_kmalloc+0x873>
f011a935:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a93c:	83 ec 0c             	sub    $0xc,%esp
f011a93f:	68 a8 e7 12 f0       	push   $0xf012e7a8
f011a944:	e8 23 66 fe ff       	call   f0100f6c <cprintf>
f011a949:	83 c4 10             	add    $0x10,%esp
		if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	{ correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a94c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a94f:	66 8b 40 02          	mov    0x2(%eax),%ax
f011a953:	66 3b 45 e8          	cmp    -0x18(%ebp),%ax
f011a957:	75 19                	jne    f011a972 <test_kmalloc+0x899>
f011a959:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a95c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011a963:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a966:	01 d0                	add    %edx,%eax
f011a968:	66 8b 40 02          	mov    0x2(%eax),%ax
f011a96c:	66 3b 45 e6          	cmp    -0x1a(%ebp),%ax
f011a970:	74 17                	je     f011a989 <test_kmalloc+0x8b0>
f011a972:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a979:	83 ec 0c             	sub    $0xc,%esp
f011a97c:	68 a8 e7 12 f0       	push   $0xf012e7a8
f011a981:	e8 e6 65 fe ff       	call   f0100f6c <cprintf>
f011a986:	83 c4 10             	add    $0x10,%esp
		if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	{ correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a989:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a98c:	8b 40 04             	mov    0x4(%eax),%eax
f011a98f:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011a992:	75 17                	jne    f011a9ab <test_kmalloc+0x8d2>
f011a994:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a997:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011a99e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a9a1:	01 d0                	add    %edx,%eax
f011a9a3:	8b 40 04             	mov    0x4(%eax),%eax
f011a9a6:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011a9a9:	74 17                	je     f011a9c2 <test_kmalloc+0x8e9>
f011a9ab:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a9b2:	83 ec 0c             	sub    $0xc,%esp
f011a9b5:	68 a8 e7 12 f0       	push   $0xf012e7a8
f011a9ba:	e8 ad 65 fe ff       	call   f0100f6c <cprintf>
f011a9bf:	83 c4 10             	add    $0x10,%esp

		if (byteArr3[0] != minByte || byteArr3[lastIndexOfByte3/2] != maxByte/2 || byteArr3[lastIndexOfByte3] != maxByte) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a9c2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a9c5:	8a 00                	mov    (%eax),%al
f011a9c7:	3a 45 eb             	cmp    -0x15(%ebp),%al
f011a9ca:	75 34                	jne    f011aa00 <test_kmalloc+0x927>
f011a9cc:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a9cf:	89 c2                	mov    %eax,%edx
f011a9d1:	c1 ea 1f             	shr    $0x1f,%edx
f011a9d4:	01 d0                	add    %edx,%eax
f011a9d6:	d1 f8                	sar    %eax
f011a9d8:	89 c2                	mov    %eax,%edx
f011a9da:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a9dd:	01 d0                	add    %edx,%eax
f011a9df:	8a 10                	mov    (%eax),%dl
f011a9e1:	8a 45 ea             	mov    -0x16(%ebp),%al
f011a9e4:	88 c1                	mov    %al,%cl
f011a9e6:	c0 e9 07             	shr    $0x7,%cl
f011a9e9:	01 c8                	add    %ecx,%eax
f011a9eb:	d0 f8                	sar    %al
f011a9ed:	38 c2                	cmp    %al,%dl
f011a9ef:	75 0f                	jne    f011aa00 <test_kmalloc+0x927>
f011a9f1:	8b 55 a0             	mov    -0x60(%ebp),%edx
f011a9f4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a9f7:	01 d0                	add    %edx,%eax
f011a9f9:	8a 00                	mov    (%eax),%al
f011a9fb:	3a 45 ea             	cmp    -0x16(%ebp),%al
f011a9fe:	74 17                	je     f011aa17 <test_kmalloc+0x93e>
f011aa00:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011aa07:	83 ec 0c             	sub    $0xc,%esp
f011aa0a:	68 a8 e7 12 f0       	push   $0xf012e7a8
f011aa0f:	e8 58 65 fe ff       	call   f0100f6c <cprintf>
f011aa14:	83 c4 10             	add    $0x10,%esp
		if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011aa17:	8b 45 98             	mov    -0x68(%ebp),%eax
f011aa1a:	66 8b 00             	mov    (%eax),%ax
f011aa1d:	66 3b 45 e8          	cmp    -0x18(%ebp),%ax
f011aa21:	75 15                	jne    f011aa38 <test_kmalloc+0x95f>
f011aa23:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011aa26:	01 c0                	add    %eax,%eax
f011aa28:	89 c2                	mov    %eax,%edx
f011aa2a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011aa2d:	01 d0                	add    %edx,%eax
f011aa2f:	66 8b 00             	mov    (%eax),%ax
f011aa32:	66 3b 45 e6          	cmp    -0x1a(%ebp),%ax
f011aa36:	74 17                	je     f011aa4f <test_kmalloc+0x976>
f011aa38:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011aa3f:	83 ec 0c             	sub    $0xc,%esp
f011aa42:	68 a8 e7 12 f0       	push   $0xf012e7a8
f011aa47:	e8 20 65 fe ff       	call   f0100f6c <cprintf>
f011aa4c:	83 c4 10             	add    $0x10,%esp

		if ((freeFrames - (int)sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011aa4f:	e8 b5 2f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011aa54:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011aa57:	74 17                	je     f011aa70 <test_kmalloc+0x997>
f011aa59:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011aa60:	83 ec 0c             	sub    $0xc,%esp
f011aa63:	68 8c e6 12 f0       	push   $0xf012e68c
f011aa68:	e8 ff 64 fe ff       	call   f0100f6c <cprintf>
f011aa6d:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011aa70:	e8 cb 9d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011aa75:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011aa78:	74 17                	je     f011aa91 <test_kmalloc+0x9b8>
f011aa7a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011aa81:	83 ec 0c             	sub    $0xc,%esp
f011aa84:	68 20 e6 12 f0       	push   $0xf012e620
f011aa89:	e8 de 64 fe ff       	call   f0100f6c <cprintf>
f011aa8e:	83 c4 10             	add    $0x10,%esp

	}
	if (correct)	eval+=30 ;
f011aa91:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011aa95:	74 04                	je     f011aa9b <test_kmalloc+0x9c2>
f011aa97:	83 45 f4 1e          	addl   $0x1e,-0xc(%ebp)

	correct = 1 ;
f011aa9b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Insufficient space again
	{
		freeFrames = (int)sys_calculate_free_frames() ;
f011aaa2:	e8 62 2f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011aaa7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011aaaa:	e8 91 9d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011aaaf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+/*4*kilo+4*kilo+*/8*kilo+3*Mega+6*Mega+16*kilo) ;
f011aab2:	c7 45 90 00 a0 2f 07 	movl   $0x72fa000,-0x70(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f011aab9:	83 ec 0c             	sub    $0xc,%esp
f011aabc:	ff 75 90             	pushl  -0x70(%ebp)
f011aabf:	e8 f2 df fe ff       	call   f0108ab6 <kmalloc>
f011aac4:	83 c4 10             	add    $0x10,%esp
f011aac7:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
		if (ptr_allocations[8] != NULL) { correct = 0; cprintf("Allocating insufficient space: should return NULL\n"); }
f011aacd:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011aad3:	85 c0                	test   %eax,%eax
f011aad5:	74 17                	je     f011aaee <test_kmalloc+0xa15>
f011aad7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011aade:	83 ec 0c             	sub    $0xc,%esp
f011aae1:	68 ec e5 12 f0       	push   $0xf012e5ec
f011aae6:	e8 81 64 fe ff       	call   f0100f6c <cprintf>
f011aaeb:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011aaee:	e8 4d 9d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011aaf3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011aaf6:	74 17                	je     f011ab0f <test_kmalloc+0xa36>
f011aaf8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011aaff:	83 ec 0c             	sub    $0xc,%esp
f011ab02:	68 20 e6 12 f0       	push   $0xf012e620
f011ab07:	e8 60 64 fe ff       	call   f0100f6c <cprintf>
f011ab0c:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011ab0f:	e8 f5 2e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ab14:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011ab17:	74 17                	je     f011ab30 <test_kmalloc+0xa57>
f011ab19:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ab20:	83 ec 0c             	sub    $0xc,%esp
f011ab23:	68 8c e6 12 f0       	push   $0xf012e68c
f011ab28:	e8 3f 64 fe ff       	call   f0100f6c <cprintf>
f011ab2d:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011ab30:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011ab34:	74 04                	je     f011ab3a <test_kmalloc+0xa61>
f011ab36:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011ab3a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//permissions
	{
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f011ab41:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011ab47:	05 00 40 00 00       	add    $0x4000,%eax
f011ab4c:	89 45 8c             	mov    %eax,-0x74(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f011ab4f:	c7 45 ec 00 10 00 f8 	movl   $0xf8001000,-0x14(%ebp)
f011ab56:	eb 6a                	jmp    f011abc2 <test_kmalloc+0xae9>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f011ab58:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f011ab5d:	83 ec 04             	sub    $0x4,%esp
f011ab60:	8d 95 34 ff ff ff    	lea    -0xcc(%ebp),%edx
f011ab66:	52                   	push   %edx
f011ab67:	ff 75 ec             	pushl  -0x14(%ebp)
f011ab6a:	50                   	push   %eax
f011ab6b:	e8 9d d8 fe ff       	call   f010840d <get_page_table>
f011ab70:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f011ab73:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011ab79:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011ab7c:	c1 ea 0c             	shr    $0xc,%edx
f011ab7f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011ab85:	c1 e2 02             	shl    $0x2,%edx
f011ab88:	01 d0                	add    %edx,%eax
f011ab8a:	8b 00                	mov    (%eax),%eax
f011ab8c:	25 ff 0f 00 00       	and    $0xfff,%eax
f011ab91:	89 45 88             	mov    %eax,-0x78(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f011ab94:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ab97:	83 e0 04             	and    $0x4,%eax
f011ab9a:	85 c0                	test   %eax,%eax
f011ab9c:	74 1d                	je     f011abbb <test_kmalloc+0xae2>
			{
				if (correct)
f011ab9e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011aba2:	74 17                	je     f011abbb <test_kmalloc+0xae2>
				{
					correct = 0; cprintf("Wrong permissions: pages should be mapped with Supervisor permission only\n");
f011aba4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011abab:	83 ec 0c             	sub    $0xc,%esp
f011abae:	68 e0 e7 12 f0       	push   $0xf012e7e0
f011abb3:	e8 b4 63 fe ff       	call   f0100f6c <cprintf>
f011abb8:	83 c4 10             	add    $0x10,%esp
	correct = 1 ;
	//permissions
	{
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f011abbb:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f011abc2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011abc5:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f011abc8:	72 8e                	jb     f011ab58 <test_kmalloc+0xa7f>
					correct = 0; cprintf("Wrong permissions: pages should be mapped with Supervisor permission only\n");
				}
			}
		}
	}
	if (correct)	eval+=10 ;
f011abca:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011abce:	74 04                	je     f011abd4 <test_kmalloc+0xafb>
f011abd0:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	cprintf("\ntest kmalloc completed. Evaluation = %d%\n", eval);
f011abd4:	83 ec 08             	sub    $0x8,%esp
f011abd7:	ff 75 f4             	pushl  -0xc(%ebp)
f011abda:	68 2c e8 12 f0       	push   $0xf012e82c
f011abdf:	e8 88 63 fe ff       	call   f0100f6c <cprintf>
f011abe4:	83 c4 10             	add    $0x10,%esp

	return 1;
f011abe7:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011abec:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011abef:	5b                   	pop    %ebx
f011abf0:	5f                   	pop    %edi
f011abf1:	5d                   	pop    %ebp
f011abf2:	c3                   	ret    

f011abf3 <test_kmalloc_firstfit1>:


int test_kmalloc_firstfit1()
{
f011abf3:	55                   	push   %ebp
f011abf4:	89 e5                	mov    %esp,%ebp
f011abf6:	57                   	push   %edi
f011abf7:	83 ec 64             	sub    $0x64,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f011abfa:	83 ec 0c             	sub    $0xc,%esp
f011abfd:	68 60 e5 12 f0       	push   $0xf012e560
f011ac02:	e8 65 63 fe ff       	call   f0100f6c <cprintf>
f011ac07:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011ac0a:	83 ec 0c             	sub    $0xc,%esp
f011ac0d:	68 90 e5 12 f0       	push   $0xf012e590
f011ac12:	e8 55 63 fe ff       	call   f0100f6c <cprintf>
f011ac17:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011ac1a:	83 ec 0c             	sub    $0xc,%esp
f011ac1d:	68 60 e5 12 f0       	push   $0xf012e560
f011ac22:	e8 45 63 fe ff       	call   f0100f6c <cprintf>
f011ac27:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011ac2a:	8d 55 98             	lea    -0x68(%ebp),%edx
f011ac2d:	b9 14 00 00 00       	mov    $0x14,%ecx
f011ac32:	b8 00 00 00 00       	mov    $0x0,%eax
f011ac37:	89 d7                	mov    %edx,%edi
f011ac39:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;
	int eval = 0;
f011ac3b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool correct = 1 ;
f011ac42:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	correct = 1 ;
f011ac49:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011ac50:	e8 b4 2d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ac55:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011ac58:	e8 e3 9b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ac5d:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011ac60:	83 ec 0c             	sub    $0xc,%esp
f011ac63:	68 00 fc 0f 00       	push   $0xffc00
f011ac68:	e8 49 de fe ff       	call   f0108ab6 <kmalloc>
f011ac6d:	83 c4 10             	add    $0x10,%esp
f011ac70:	89 45 98             	mov    %eax,-0x68(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011ac73:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ac76:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011ac7b:	74 17                	je     f011ac94 <test_kmalloc_firstfit1+0xa1>
f011ac7d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ac84:	83 ec 0c             	sub    $0xc,%esp
f011ac87:	68 58 e8 12 f0       	push   $0xf012e858
f011ac8c:	e8 db 62 fe ff       	call   f0100f6c <cprintf>
f011ac91:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ac94:	e8 a7 9b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ac99:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011ac9c:	74 17                	je     f011acb5 <test_kmalloc_firstfit1+0xc2>
f011ac9e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011aca5:	83 ec 0c             	sub    $0xc,%esp
f011aca8:	68 20 e6 12 f0       	push   $0xf012e620
f011acad:	e8 ba 62 fe ff       	call   f0100f6c <cprintf>
f011acb2:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f011acb5:	e8 4f 2d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011acba:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011acbd:	29 c2                	sub    %eax,%edx
f011acbf:	89 d0                	mov    %edx,%eax
f011acc1:	3d ff 00 00 00       	cmp    $0xff,%eax
f011acc6:	77 17                	ja     f011acdf <test_kmalloc_firstfit1+0xec>
f011acc8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011accf:	83 ec 0c             	sub    $0xc,%esp
f011acd2:	68 89 e8 12 f0       	push   $0xf012e889
f011acd7:	e8 90 62 fe ff       	call   f0100f6c <cprintf>
f011acdc:	83 c4 10             	add    $0x10,%esp

		//Allocate 1 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011acdf:	e8 25 2d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ace4:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011ace7:	e8 54 9b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011acec:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011acef:	83 ec 0c             	sub    $0xc,%esp
f011acf2:	68 00 fc 0f 00       	push   $0xffc00
f011acf7:	e8 ba dd fe ff       	call   f0108ab6 <kmalloc>
f011acfc:	83 c4 10             	add    $0x10,%esp
f011acff:	89 45 9c             	mov    %eax,-0x64(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011ad02:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011ad05:	3d 00 10 10 f8       	cmp    $0xf8101000,%eax
f011ad0a:	74 17                	je     f011ad23 <test_kmalloc_firstfit1+0x130>
f011ad0c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ad13:	83 ec 0c             	sub    $0xc,%esp
f011ad16:	68 58 e8 12 f0       	push   $0xf012e858
f011ad1b:	e8 4c 62 fe ff       	call   f0100f6c <cprintf>
f011ad20:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ad23:	e8 18 9b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ad28:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011ad2b:	74 17                	je     f011ad44 <test_kmalloc_firstfit1+0x151>
f011ad2d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ad34:	83 ec 0c             	sub    $0xc,%esp
f011ad37:	68 20 e6 12 f0       	push   $0xf012e620
f011ad3c:	e8 2b 62 fe ff       	call   f0100f6c <cprintf>
f011ad41:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f011ad44:	e8 c0 2c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ad49:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011ad4c:	29 c2                	sub    %eax,%edx
f011ad4e:	89 d0                	mov    %edx,%eax
f011ad50:	3d ff 00 00 00       	cmp    $0xff,%eax
f011ad55:	77 17                	ja     f011ad6e <test_kmalloc_firstfit1+0x17b>
f011ad57:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ad5e:	83 ec 0c             	sub    $0xc,%esp
f011ad61:	68 89 e8 12 f0       	push   $0xf012e889
f011ad66:	e8 01 62 fe ff       	call   f0100f6c <cprintf>
f011ad6b:	83 c4 10             	add    $0x10,%esp

		//Allocate 1 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011ad6e:	e8 96 2c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ad73:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011ad76:	e8 c5 9a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ad7b:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011ad7e:	83 ec 0c             	sub    $0xc,%esp
f011ad81:	68 00 fc 0f 00       	push   $0xffc00
f011ad86:	e8 2b dd fe ff       	call   f0108ab6 <kmalloc>
f011ad8b:	83 c4 10             	add    $0x10,%esp
f011ad8e:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011ad91:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ad94:	3d 00 10 20 f8       	cmp    $0xf8201000,%eax
f011ad99:	74 17                	je     f011adb2 <test_kmalloc_firstfit1+0x1bf>
f011ad9b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ada2:	83 ec 0c             	sub    $0xc,%esp
f011ada5:	68 58 e8 12 f0       	push   $0xf012e858
f011adaa:	e8 bd 61 fe ff       	call   f0100f6c <cprintf>
f011adaf:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011adb2:	e8 89 9a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011adb7:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011adba:	74 17                	je     f011add3 <test_kmalloc_firstfit1+0x1e0>
f011adbc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011adc3:	83 ec 0c             	sub    $0xc,%esp
f011adc6:	68 20 e6 12 f0       	push   $0xf012e620
f011adcb:	e8 9c 61 fe ff       	call   f0100f6c <cprintf>
f011add0:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f011add3:	e8 31 2c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011add8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011addb:	29 c2                	sub    %eax,%edx
f011addd:	89 d0                	mov    %edx,%eax
f011addf:	3d ff 00 00 00       	cmp    $0xff,%eax
f011ade4:	77 17                	ja     f011adfd <test_kmalloc_firstfit1+0x20a>
f011ade6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011aded:	83 ec 0c             	sub    $0xc,%esp
f011adf0:	68 89 e8 12 f0       	push   $0xf012e889
f011adf5:	e8 72 61 fe ff       	call   f0100f6c <cprintf>
f011adfa:	83 c4 10             	add    $0x10,%esp

		//Allocate 1 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011adfd:	e8 07 2c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ae02:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011ae05:	e8 36 9a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ae0a:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011ae0d:	83 ec 0c             	sub    $0xc,%esp
f011ae10:	68 00 fc 0f 00       	push   $0xffc00
f011ae15:	e8 9c dc fe ff       	call   f0108ab6 <kmalloc>
f011ae1a:	83 c4 10             	add    $0x10,%esp
f011ae1d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011ae20:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ae23:	3d 00 10 30 f8       	cmp    $0xf8301000,%eax
f011ae28:	74 17                	je     f011ae41 <test_kmalloc_firstfit1+0x24e>
f011ae2a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ae31:	83 ec 0c             	sub    $0xc,%esp
f011ae34:	68 58 e8 12 f0       	push   $0xf012e858
f011ae39:	e8 2e 61 fe ff       	call   f0100f6c <cprintf>
f011ae3e:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ae41:	e8 fa 99 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ae46:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011ae49:	74 17                	je     f011ae62 <test_kmalloc_firstfit1+0x26f>
f011ae4b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ae52:	83 ec 0c             	sub    $0xc,%esp
f011ae55:	68 20 e6 12 f0       	push   $0xf012e620
f011ae5a:	e8 0d 61 fe ff       	call   f0100f6c <cprintf>
f011ae5f:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f011ae62:	e8 a2 2b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ae67:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011ae6a:	29 c2                	sub    %eax,%edx
f011ae6c:	89 d0                	mov    %edx,%eax
f011ae6e:	3d ff 00 00 00       	cmp    $0xff,%eax
f011ae73:	77 17                	ja     f011ae8c <test_kmalloc_firstfit1+0x299>
f011ae75:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ae7c:	83 ec 0c             	sub    $0xc,%esp
f011ae7f:	68 89 e8 12 f0       	push   $0xf012e889
f011ae84:	e8 e3 60 fe ff       	call   f0100f6c <cprintf>
f011ae89:	83 c4 10             	add    $0x10,%esp

		//Allocate 2 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011ae8c:	e8 78 2b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ae91:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011ae94:	e8 a7 99 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ae99:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011ae9c:	83 ec 0c             	sub    $0xc,%esp
f011ae9f:	68 00 fc 1f 00       	push   $0x1ffc00
f011aea4:	e8 0d dc fe ff       	call   f0108ab6 <kmalloc>
f011aea9:	83 c4 10             	add    $0x10,%esp
f011aeac:	89 45 a8             	mov    %eax,-0x58(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011aeaf:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011aeb2:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011aeb7:	74 17                	je     f011aed0 <test_kmalloc_firstfit1+0x2dd>
f011aeb9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011aec0:	83 ec 0c             	sub    $0xc,%esp
f011aec3:	68 58 e8 12 f0       	push   $0xf012e858
f011aec8:	e8 9f 60 fe ff       	call   f0100f6c <cprintf>
f011aecd:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011aed0:	e8 6b 99 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011aed5:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011aed8:	74 17                	je     f011aef1 <test_kmalloc_firstfit1+0x2fe>
f011aeda:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011aee1:	83 ec 0c             	sub    $0xc,%esp
f011aee4:	68 20 e6 12 f0       	push   $0xf012e620
f011aee9:	e8 7e 60 fe ff       	call   f0100f6c <cprintf>
f011aeee:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f011aef1:	e8 13 2b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011aef6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011aef9:	29 c2                	sub    %eax,%edx
f011aefb:	89 d0                	mov    %edx,%eax
f011aefd:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011af02:	77 17                	ja     f011af1b <test_kmalloc_firstfit1+0x328>
f011af04:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011af0b:	83 ec 0c             	sub    $0xc,%esp
f011af0e:	68 89 e8 12 f0       	push   $0xf012e889
f011af13:	e8 54 60 fe ff       	call   f0100f6c <cprintf>
f011af18:	83 c4 10             	add    $0x10,%esp

		//Allocate 2 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011af1b:	e8 e9 2a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011af20:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011af23:	e8 18 99 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011af28:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011af2b:	83 ec 0c             	sub    $0xc,%esp
f011af2e:	68 00 fc 1f 00       	push   $0x1ffc00
f011af33:	e8 7e db fe ff       	call   f0108ab6 <kmalloc>
f011af38:	83 c4 10             	add    $0x10,%esp
f011af3b:	89 45 ac             	mov    %eax,-0x54(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011af3e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011af41:	3d 00 10 60 f8       	cmp    $0xf8601000,%eax
f011af46:	74 17                	je     f011af5f <test_kmalloc_firstfit1+0x36c>
f011af48:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011af4f:	83 ec 0c             	sub    $0xc,%esp
f011af52:	68 58 e8 12 f0       	push   $0xf012e858
f011af57:	e8 10 60 fe ff       	call   f0100f6c <cprintf>
f011af5c:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011af5f:	e8 dc 98 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011af64:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011af67:	74 17                	je     f011af80 <test_kmalloc_firstfit1+0x38d>
f011af69:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011af70:	83 ec 0c             	sub    $0xc,%esp
f011af73:	68 20 e6 12 f0       	push   $0xf012e620
f011af78:	e8 ef 5f fe ff       	call   f0100f6c <cprintf>
f011af7d:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f011af80:	e8 84 2a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011af85:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011af88:	29 c2                	sub    %eax,%edx
f011af8a:	89 d0                	mov    %edx,%eax
f011af8c:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011af91:	77 17                	ja     f011afaa <test_kmalloc_firstfit1+0x3b7>
f011af93:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011af9a:	83 ec 0c             	sub    $0xc,%esp
f011af9d:	68 89 e8 12 f0       	push   $0xf012e889
f011afa2:	e8 c5 5f fe ff       	call   f0100f6c <cprintf>
f011afa7:	83 c4 10             	add    $0x10,%esp

		//Allocate 3 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011afaa:	e8 5a 2a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011afaf:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011afb2:	e8 89 98 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011afb7:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011afba:	83 ec 0c             	sub    $0xc,%esp
f011afbd:	68 00 fc 2f 00       	push   $0x2ffc00
f011afc2:	e8 ef da fe ff       	call   f0108ab6 <kmalloc>
f011afc7:	83 c4 10             	add    $0x10,%esp
f011afca:	89 45 b0             	mov    %eax,-0x50(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011afcd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011afd0:	3d 00 10 80 f8       	cmp    $0xf8801000,%eax
f011afd5:	74 17                	je     f011afee <test_kmalloc_firstfit1+0x3fb>
f011afd7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011afde:	83 ec 0c             	sub    $0xc,%esp
f011afe1:	68 58 e8 12 f0       	push   $0xf012e858
f011afe6:	e8 81 5f fe ff       	call   f0100f6c <cprintf>
f011afeb:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011afee:	e8 4d 98 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011aff3:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011aff6:	74 17                	je     f011b00f <test_kmalloc_firstfit1+0x41c>
f011aff8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011afff:	83 ec 0c             	sub    $0xc,%esp
f011b002:	68 20 e6 12 f0       	push   $0xf012e620
f011b007:	e8 60 5f fe ff       	call   f0100f6c <cprintf>
f011b00c:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b00f:	e8 f5 29 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b014:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b017:	29 c2                	sub    %eax,%edx
f011b019:	89 d0                	mov    %edx,%eax
f011b01b:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011b020:	77 17                	ja     f011b039 <test_kmalloc_firstfit1+0x446>
f011b022:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b029:	83 ec 0c             	sub    $0xc,%esp
f011b02c:	68 89 e8 12 f0       	push   $0xf012e889
f011b031:	e8 36 5f fe ff       	call   f0100f6c <cprintf>
f011b036:	83 c4 10             	add    $0x10,%esp

		//Allocate 3 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011b039:	e8 cb 29 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b03e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b041:	e8 fa 97 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b046:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011b049:	83 ec 0c             	sub    $0xc,%esp
f011b04c:	68 00 fc 2f 00       	push   $0x2ffc00
f011b051:	e8 60 da fe ff       	call   f0108ab6 <kmalloc>
f011b056:	83 c4 10             	add    $0x10,%esp
f011b059:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b05c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011b05f:	3d 00 10 b0 f8       	cmp    $0xf8b01000,%eax
f011b064:	74 17                	je     f011b07d <test_kmalloc_firstfit1+0x48a>
f011b066:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b06d:	83 ec 0c             	sub    $0xc,%esp
f011b070:	68 58 e8 12 f0       	push   $0xf012e858
f011b075:	e8 f2 5e fe ff       	call   f0100f6c <cprintf>
f011b07a:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b07d:	e8 be 97 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b082:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b085:	74 17                	je     f011b09e <test_kmalloc_firstfit1+0x4ab>
f011b087:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b08e:	83 ec 0c             	sub    $0xc,%esp
f011b091:	68 20 e6 12 f0       	push   $0xf012e620
f011b096:	e8 d1 5e fe ff       	call   f0100f6c <cprintf>
f011b09b:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b09e:	e8 66 29 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b0a3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b0a6:	29 c2                	sub    %eax,%edx
f011b0a8:	89 d0                	mov    %edx,%eax
f011b0aa:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011b0af:	77 17                	ja     f011b0c8 <test_kmalloc_firstfit1+0x4d5>
f011b0b1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b0b8:	83 ec 0c             	sub    $0xc,%esp
f011b0bb:	68 89 e8 12 f0       	push   $0xf012e889
f011b0c0:	e8 a7 5e fe ff       	call   f0100f6c <cprintf>
f011b0c5:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011b0c8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011b0cc:	74 04                	je     f011b0d2 <test_kmalloc_firstfit1+0x4df>
f011b0ce:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011b0d2:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011b0d9:	e8 2b 29 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b0de:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b0e1:	e8 5a 97 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b0e6:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[1]);
f011b0e9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011b0ec:	83 ec 0c             	sub    $0xc,%esp
f011b0ef:	50                   	push   %eax
f011b0f0:	e8 db d9 fe ff       	call   f0108ad0 <kfree>
f011b0f5:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b0f8:	e8 43 97 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b0fd:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b100:	74 17                	je     f011b119 <test_kmalloc_firstfit1+0x526>
f011b102:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b109:	83 ec 0c             	sub    $0xc,%esp
f011b10c:	68 20 e6 12 f0       	push   $0xf012e620
f011b111:	e8 56 5e fe ff       	call   f0100f6c <cprintf>
f011b116:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 256) { correct = 0; cprintf("Wrong free: \n"); }
f011b119:	e8 eb 28 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b11e:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011b121:	3d ff 00 00 00       	cmp    $0xff,%eax
f011b126:	77 17                	ja     f011b13f <test_kmalloc_firstfit1+0x54c>
f011b128:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b12f:	83 ec 0c             	sub    $0xc,%esp
f011b132:	68 9d e8 12 f0       	push   $0xf012e89d
f011b137:	e8 30 5e fe ff       	call   f0100f6c <cprintf>
f011b13c:	83 c4 10             	add    $0x10,%esp

		//2 MB Hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011b13f:	e8 c5 28 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b144:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b147:	e8 f4 96 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b14c:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[4]);
f011b14f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b152:	83 ec 0c             	sub    $0xc,%esp
f011b155:	50                   	push   %eax
f011b156:	e8 75 d9 fe ff       	call   f0108ad0 <kfree>
f011b15b:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b15e:	e8 dd 96 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b163:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b166:	74 17                	je     f011b17f <test_kmalloc_firstfit1+0x58c>
f011b168:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b16f:	83 ec 0c             	sub    $0xc,%esp
f011b172:	68 20 e6 12 f0       	push   $0xf012e620
f011b177:	e8 f0 5d fe ff       	call   f0100f6c <cprintf>
f011b17c:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong free: \n"); }
f011b17f:	e8 85 28 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b184:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011b187:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011b18c:	77 17                	ja     f011b1a5 <test_kmalloc_firstfit1+0x5b2>
f011b18e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b195:	83 ec 0c             	sub    $0xc,%esp
f011b198:	68 9d e8 12 f0       	push   $0xf012e89d
f011b19d:	e8 ca 5d fe ff       	call   f0100f6c <cprintf>
f011b1a2:	83 c4 10             	add    $0x10,%esp

		//3 MB Hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011b1a5:	e8 5f 28 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b1aa:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b1ad:	e8 8e 96 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b1b2:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[6]);
f011b1b5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b1b8:	83 ec 0c             	sub    $0xc,%esp
f011b1bb:	50                   	push   %eax
f011b1bc:	e8 0f d9 fe ff       	call   f0108ad0 <kfree>
f011b1c1:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b1c4:	e8 77 96 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b1c9:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b1cc:	74 17                	je     f011b1e5 <test_kmalloc_firstfit1+0x5f2>
f011b1ce:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b1d5:	83 ec 0c             	sub    $0xc,%esp
f011b1d8:	68 20 e6 12 f0       	push   $0xf012e620
f011b1dd:	e8 8a 5d fe ff       	call   f0100f6c <cprintf>
f011b1e2:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 768) { correct = 0; cprintf("Wrong free: \n"); }
f011b1e5:	e8 1f 28 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b1ea:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011b1ed:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011b1f2:	77 17                	ja     f011b20b <test_kmalloc_firstfit1+0x618>
f011b1f4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b1fb:	83 ec 0c             	sub    $0xc,%esp
f011b1fe:	68 9d e8 12 f0       	push   $0xf012e89d
f011b203:	e8 64 5d fe ff       	call   f0100f6c <cprintf>
f011b208:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011b20b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011b20f:	74 04                	je     f011b215 <test_kmalloc_firstfit1+0x622>
f011b211:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011b215:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011b21c:	e8 e8 27 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b221:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b224:	e8 17 96 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b229:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011b22c:	83 ec 0c             	sub    $0xc,%esp
f011b22f:	68 00 fc 07 00       	push   $0x7fc00
f011b234:	e8 7d d8 fe ff       	call   f0108ab6 <kmalloc>
f011b239:	83 c4 10             	add    $0x10,%esp
f011b23c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b23f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b242:	3d 00 10 10 f8       	cmp    $0xf8101000,%eax
f011b247:	74 17                	je     f011b260 <test_kmalloc_firstfit1+0x66d>
f011b249:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b250:	83 ec 0c             	sub    $0xc,%esp
f011b253:	68 58 e8 12 f0       	push   $0xf012e858
f011b258:	e8 0f 5d fe ff       	call   f0100f6c <cprintf>
f011b25d:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b260:	e8 db 95 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b265:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b268:	74 17                	je     f011b281 <test_kmalloc_firstfit1+0x68e>
f011b26a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b271:	83 ec 0c             	sub    $0xc,%esp
f011b274:	68 20 e6 12 f0       	push   $0xf012e620
f011b279:	e8 ee 5c fe ff       	call   f0100f6c <cprintf>
f011b27e:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 128) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b281:	e8 83 27 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b286:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b289:	29 c2                	sub    %eax,%edx
f011b28b:	89 d0                	mov    %edx,%eax
f011b28d:	83 f8 7f             	cmp    $0x7f,%eax
f011b290:	77 17                	ja     f011b2a9 <test_kmalloc_firstfit1+0x6b6>
f011b292:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b299:	83 ec 0c             	sub    $0xc,%esp
f011b29c:	68 89 e8 12 f0       	push   $0xf012e889
f011b2a1:	e8 c6 5c fe ff       	call   f0100f6c <cprintf>
f011b2a6:	83 c4 10             	add    $0x10,%esp

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011b2a9:	e8 5b 27 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b2ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b2b1:	e8 8a 95 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b2b6:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011b2b9:	83 ec 0c             	sub    $0xc,%esp
f011b2bc:	68 00 fc 0f 00       	push   $0xffc00
f011b2c1:	e8 f0 d7 fe ff       	call   f0108ab6 <kmalloc>
f011b2c6:	83 c4 10             	add    $0x10,%esp
f011b2c9:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b2cc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011b2cf:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011b2d4:	74 17                	je     f011b2ed <test_kmalloc_firstfit1+0x6fa>
f011b2d6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b2dd:	83 ec 0c             	sub    $0xc,%esp
f011b2e0:	68 58 e8 12 f0       	push   $0xf012e858
f011b2e5:	e8 82 5c fe ff       	call   f0100f6c <cprintf>
f011b2ea:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b2ed:	e8 4e 95 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b2f2:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b2f5:	74 17                	je     f011b30e <test_kmalloc_firstfit1+0x71b>
f011b2f7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b2fe:	83 ec 0c             	sub    $0xc,%esp
f011b301:	68 20 e6 12 f0       	push   $0xf012e620
f011b306:	e8 61 5c fe ff       	call   f0100f6c <cprintf>
f011b30b:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b30e:	e8 f6 26 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b313:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b316:	29 c2                	sub    %eax,%edx
f011b318:	89 d0                	mov    %edx,%eax
f011b31a:	3d ff 00 00 00       	cmp    $0xff,%eax
f011b31f:	77 17                	ja     f011b338 <test_kmalloc_firstfit1+0x745>
f011b321:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b328:	83 ec 0c             	sub    $0xc,%esp
f011b32b:	68 89 e8 12 f0       	push   $0xf012e889
f011b330:	e8 37 5c fe ff       	call   f0100f6c <cprintf>
f011b335:	83 c4 10             	add    $0x10,%esp


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011b338:	e8 cc 26 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b33d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b340:	e8 fb 94 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b345:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011b348:	83 ec 0c             	sub    $0xc,%esp
f011b34b:	68 00 fc 03 00       	push   $0x3fc00
f011b350:	e8 61 d7 fe ff       	call   f0108ab6 <kmalloc>
f011b355:	83 c4 10             	add    $0x10,%esp
f011b358:	89 45 c0             	mov    %eax,-0x40(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b35b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b35e:	3d 00 10 18 f8       	cmp    $0xf8181000,%eax
f011b363:	74 17                	je     f011b37c <test_kmalloc_firstfit1+0x789>
f011b365:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b36c:	83 ec 0c             	sub    $0xc,%esp
f011b36f:	68 58 e8 12 f0       	push   $0xf012e858
f011b374:	e8 f3 5b fe ff       	call   f0100f6c <cprintf>
f011b379:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b37c:	e8 bf 94 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b381:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b384:	74 17                	je     f011b39d <test_kmalloc_firstfit1+0x7aa>
f011b386:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b38d:	83 ec 0c             	sub    $0xc,%esp
f011b390:	68 20 e6 12 f0       	push   $0xf012e620
f011b395:	e8 d2 5b fe ff       	call   f0100f6c <cprintf>
f011b39a:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 64) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b39d:	e8 67 26 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b3a2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b3a5:	29 c2                	sub    %eax,%edx
f011b3a7:	89 d0                	mov    %edx,%eax
f011b3a9:	83 f8 3f             	cmp    $0x3f,%eax
f011b3ac:	77 17                	ja     f011b3c5 <test_kmalloc_firstfit1+0x7d2>
f011b3ae:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b3b5:	83 ec 0c             	sub    $0xc,%esp
f011b3b8:	68 89 e8 12 f0       	push   $0xf012e889
f011b3bd:	e8 aa 5b fe ff       	call   f0100f6c <cprintf>
f011b3c2:	83 c4 10             	add    $0x10,%esp

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011b3c5:	e8 3f 26 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b3ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b3cd:	e8 6e 94 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b3d2:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011b3d5:	83 ec 0c             	sub    $0xc,%esp
f011b3d8:	68 00 00 20 00       	push   $0x200000
f011b3dd:	e8 d4 d6 fe ff       	call   f0108ab6 <kmalloc>
f011b3e2:	83 c4 10             	add    $0x10,%esp
f011b3e5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b3e8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011b3eb:	3d 00 10 80 f8       	cmp    $0xf8801000,%eax
f011b3f0:	74 17                	je     f011b409 <test_kmalloc_firstfit1+0x816>
f011b3f2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b3f9:	83 ec 0c             	sub    $0xc,%esp
f011b3fc:	68 58 e8 12 f0       	push   $0xf012e858
f011b401:	e8 66 5b fe ff       	call   f0100f6c <cprintf>
f011b406:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b409:	e8 fb 25 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b40e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b411:	29 c2                	sub    %eax,%edx
f011b413:	89 d0                	mov    %edx,%eax
f011b415:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011b41a:	77 17                	ja     f011b433 <test_kmalloc_firstfit1+0x840>
f011b41c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b423:	83 ec 0c             	sub    $0xc,%esp
f011b426:	68 89 e8 12 f0       	push   $0xf012e889
f011b42b:	e8 3c 5b fe ff       	call   f0100f6c <cprintf>
f011b430:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b433:	e8 08 94 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b438:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b43b:	74 17                	je     f011b454 <test_kmalloc_firstfit1+0x861>
f011b43d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b444:	83 ec 0c             	sub    $0xc,%esp
f011b447:	68 20 e6 12 f0       	push   $0xf012e620
f011b44c:	e8 1b 5b fe ff       	call   f0100f6c <cprintf>
f011b451:	83 c4 10             	add    $0x10,%esp


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = (int)sys_calculate_free_frames() ;
f011b454:	e8 b0 25 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b459:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b45c:	e8 df 93 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b461:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011b464:	83 ec 0c             	sub    $0xc,%esp
f011b467:	68 00 fc 3f 00       	push   $0x3ffc00
f011b46c:	e8 45 d6 fe ff       	call   f0108ab6 <kmalloc>
f011b471:	83 c4 10             	add    $0x10,%esp
f011b474:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b477:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b47a:	3d 00 10 e0 f8       	cmp    $0xf8e01000,%eax
f011b47f:	74 17                	je     f011b498 <test_kmalloc_firstfit1+0x8a5>
f011b481:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b488:	83 ec 0c             	sub    $0xc,%esp
f011b48b:	68 58 e8 12 f0       	push   $0xf012e858
f011b490:	e8 d7 5a fe ff       	call   f0100f6c <cprintf>
f011b495:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b498:	e8 a3 93 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b49d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b4a0:	74 17                	je     f011b4b9 <test_kmalloc_firstfit1+0x8c6>
f011b4a2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b4a9:	83 ec 0c             	sub    $0xc,%esp
f011b4ac:	68 20 e6 12 f0       	push   $0xf012e620
f011b4b1:	e8 b6 5a fe ff       	call   f0100f6c <cprintf>
f011b4b6:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 1024) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b4b9:	e8 4b 25 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b4be:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b4c1:	29 c2                	sub    %eax,%edx
f011b4c3:	89 d0                	mov    %edx,%eax
f011b4c5:	3d ff 03 00 00       	cmp    $0x3ff,%eax
f011b4ca:	77 17                	ja     f011b4e3 <test_kmalloc_firstfit1+0x8f0>
f011b4cc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b4d3:	83 ec 0c             	sub    $0xc,%esp
f011b4d6:	68 89 e8 12 f0       	push   $0xf012e889
f011b4db:	e8 8c 5a fe ff       	call   f0100f6c <cprintf>
f011b4e0:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=40 ;
f011b4e3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011b4e7:	74 04                	je     f011b4ed <test_kmalloc_firstfit1+0x8fa>
f011b4e9:	83 45 f4 28          	addl   $0x28,-0xc(%ebp)

	correct = 1 ;
f011b4ed:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011b4f4:	e8 10 25 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b4f9:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b4fc:	e8 3f 93 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b501:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[2]);
f011b504:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b507:	83 ec 0c             	sub    $0xc,%esp
f011b50a:	50                   	push   %eax
f011b50b:	e8 c0 d5 fe ff       	call   f0108ad0 <kfree>
f011b510:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b513:	e8 28 93 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b518:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b51b:	74 17                	je     f011b534 <test_kmalloc_firstfit1+0x941>
f011b51d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b524:	83 ec 0c             	sub    $0xc,%esp
f011b527:	68 20 e6 12 f0       	push   $0xf012e620
f011b52c:	e8 3b 5a fe ff       	call   f0100f6c <cprintf>
f011b531:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 256) { correct = 0; cprintf("Wrong free: \n"); }
f011b534:	e8 d0 24 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b539:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011b53c:	3d ff 00 00 00       	cmp    $0xff,%eax
f011b541:	77 17                	ja     f011b55a <test_kmalloc_firstfit1+0x967>
f011b543:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b54a:	83 ec 0c             	sub    $0xc,%esp
f011b54d:	68 9d e8 12 f0       	push   $0xf012e89d
f011b552:	e8 15 5a fe ff       	call   f0100f6c <cprintf>
f011b557:	83 c4 10             	add    $0x10,%esp

		//Next 1 MB Hole appended also
		freeFrames = (int)sys_calculate_free_frames() ;
f011b55a:	e8 aa 24 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b55f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b562:	e8 d9 92 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b567:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[3]);
f011b56a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b56d:	83 ec 0c             	sub    $0xc,%esp
f011b570:	50                   	push   %eax
f011b571:	e8 5a d5 fe ff       	call   f0108ad0 <kfree>
f011b576:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b579:	e8 c2 92 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b57e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b581:	74 17                	je     f011b59a <test_kmalloc_firstfit1+0x9a7>
f011b583:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b58a:	83 ec 0c             	sub    $0xc,%esp
f011b58d:	68 20 e6 12 f0       	push   $0xf012e620
f011b592:	e8 d5 59 fe ff       	call   f0100f6c <cprintf>
f011b597:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 256) { correct = 0; cprintf("Wrong free: \n"); }
f011b59a:	e8 6a 24 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b59f:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011b5a2:	3d ff 00 00 00       	cmp    $0xff,%eax
f011b5a7:	77 17                	ja     f011b5c0 <test_kmalloc_firstfit1+0x9cd>
f011b5a9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b5b0:	83 ec 0c             	sub    $0xc,%esp
f011b5b3:	68 9d e8 12 f0       	push   $0xf012e89d
f011b5b8:	e8 af 59 fe ff       	call   f0100f6c <cprintf>
f011b5bd:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011b5c0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011b5c4:	74 04                	je     f011b5ca <test_kmalloc_firstfit1+0x9d7>
f011b5c6:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011b5ca:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = (int)sys_calculate_free_frames() ;
f011b5d1:	e8 33 24 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b5d6:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b5d9:	e8 62 92 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b5de:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011b5e1:	83 ec 0c             	sub    $0xc,%esp
f011b5e4:	68 00 00 10 00       	push   $0x100000
f011b5e9:	e8 c8 d4 fe ff       	call   f0108ab6 <kmalloc>
f011b5ee:	83 c4 10             	add    $0x10,%esp
f011b5f1:	89 45 cc             	mov    %eax,-0x34(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b5f4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011b5f7:	3d 00 10 1c f8       	cmp    $0xf81c1000,%eax
f011b5fc:	74 17                	je     f011b615 <test_kmalloc_firstfit1+0xa22>
f011b5fe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b605:	83 ec 0c             	sub    $0xc,%esp
f011b608:	68 58 e8 12 f0       	push   $0xf012e858
f011b60d:	e8 5a 59 fe ff       	call   f0100f6c <cprintf>
f011b612:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b615:	e8 26 92 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b61a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b61d:	74 17                	je     f011b636 <test_kmalloc_firstfit1+0xa43>
f011b61f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b626:	83 ec 0c             	sub    $0xc,%esp
f011b629:	68 20 e6 12 f0       	push   $0xf012e620
f011b62e:	e8 39 59 fe ff       	call   f0100f6c <cprintf>
f011b633:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b636:	e8 ce 23 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b63b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b63e:	29 c2                	sub    %eax,%edx
f011b640:	89 d0                	mov    %edx,%eax
f011b642:	3d ff 00 00 00       	cmp    $0xff,%eax
f011b647:	77 17                	ja     f011b660 <test_kmalloc_firstfit1+0xa6d>
f011b649:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b650:	83 ec 0c             	sub    $0xc,%esp
f011b653:	68 89 e8 12 f0       	push   $0xf012e889
f011b658:	e8 0f 59 fe ff       	call   f0100f6c <cprintf>
f011b65d:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=30 ;
f011b660:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011b664:	74 04                	je     f011b66a <test_kmalloc_firstfit1+0xa77>
f011b666:	83 45 f4 1e          	addl   $0x1e,-0xc(%ebp)

	cprintf("test FIRST FIT allocation (1) completed. Eval = %d%\n", eval);
f011b66a:	83 ec 08             	sub    $0x8,%esp
f011b66d:	ff 75 f4             	pushl  -0xc(%ebp)
f011b670:	68 ac e8 12 f0       	push   $0xf012e8ac
f011b675:	e8 f2 58 fe ff       	call   f0100f6c <cprintf>
f011b67a:	83 c4 10             	add    $0x10,%esp

	return 1;
f011b67d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011b682:	8b 7d fc             	mov    -0x4(%ebp),%edi
f011b685:	c9                   	leave  
f011b686:	c3                   	ret    

f011b687 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011b687:	55                   	push   %ebp
f011b688:	89 e5                	mov    %esp,%ebp
f011b68a:	57                   	push   %edi
f011b68b:	53                   	push   %ebx
f011b68c:	83 ec 60             	sub    $0x60,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f011b68f:	83 ec 0c             	sub    $0xc,%esp
f011b692:	68 60 e5 12 f0       	push   $0xf012e560
f011b697:	e8 d0 58 fe ff       	call   f0100f6c <cprintf>
f011b69c:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011b69f:	83 ec 0c             	sub    $0xc,%esp
f011b6a2:	68 90 e5 12 f0       	push   $0xf012e590
f011b6a7:	e8 c0 58 fe ff       	call   f0100f6c <cprintf>
f011b6ac:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011b6af:	83 ec 0c             	sub    $0xc,%esp
f011b6b2:	68 60 e5 12 f0       	push   $0xf012e560
f011b6b7:	e8 b0 58 fe ff       	call   f0100f6c <cprintf>
f011b6bc:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011b6bf:	8d 55 98             	lea    -0x68(%ebp),%edx
f011b6c2:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b6c7:	b8 00 00 00 00       	mov    $0x0,%eax
f011b6cc:	89 d7                	mov    %edx,%edi
f011b6ce:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;
	int eval = 0;
f011b6d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool correct = 1 ;
f011b6d7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	correct = 1 ;
f011b6de:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011b6e5:	83 ec 0c             	sub    $0xc,%esp
f011b6e8:	68 01 e0 ff 07       	push   $0x7ffe001
f011b6ed:	e8 c4 d3 fe ff       	call   f0108ab6 <kmalloc>
f011b6f2:	83 c4 10             	add    $0x10,%esp
f011b6f5:	89 45 98             	mov    %eax,-0x68(%ebp)
		if (ptr_allocations[0] != NULL) { correct = 0; cprintf("kmalloc: Attempt to allocate more than heap size, should return NULL\n"); }
f011b6f8:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b6fb:	85 c0                	test   %eax,%eax
f011b6fd:	74 17                	je     f011b716 <test_kmalloc_firstfit2+0x8f>
f011b6ff:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b706:	83 ec 0c             	sub    $0xc,%esp
f011b709:	68 e4 e8 12 f0       	push   $0xf012e8e4
f011b70e:	e8 59 58 fe ff       	call   f0100f6c <cprintf>
f011b713:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011b716:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011b71a:	74 04                	je     f011b720 <test_kmalloc_firstfit2+0x99>
f011b71c:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011b720:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011b727:	e8 dd 22 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b72c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b72f:	e8 0c 91 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b734:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011b737:	83 ec 0c             	sub    $0xc,%esp
f011b73a:	68 00 fc 1f 00       	push   $0x1ffc00
f011b73f:	e8 72 d3 fe ff       	call   f0108ab6 <kmalloc>
f011b744:	83 c4 10             	add    $0x10,%esp
f011b747:	89 45 98             	mov    %eax,-0x68(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b74a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b74d:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011b752:	74 17                	je     f011b76b <test_kmalloc_firstfit2+0xe4>
f011b754:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b75b:	83 ec 0c             	sub    $0xc,%esp
f011b75e:	68 58 e8 12 f0       	push   $0xf012e858
f011b763:	e8 04 58 fe ff       	call   f0100f6c <cprintf>
f011b768:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b76b:	e8 d0 90 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b770:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b773:	74 17                	je     f011b78c <test_kmalloc_firstfit2+0x105>
f011b775:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b77c:	83 ec 0c             	sub    $0xc,%esp
f011b77f:	68 20 e6 12 f0       	push   $0xf012e620
f011b784:	e8 e3 57 fe ff       	call   f0100f6c <cprintf>
f011b789:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b78c:	e8 78 22 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b791:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b794:	29 c2                	sub    %eax,%edx
f011b796:	89 d0                	mov    %edx,%eax
f011b798:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011b79d:	77 17                	ja     f011b7b6 <test_kmalloc_firstfit2+0x12f>
f011b79f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b7a6:	83 ec 0c             	sub    $0xc,%esp
f011b7a9:	68 89 e8 12 f0       	push   $0xf012e889
f011b7ae:	e8 b9 57 fe ff       	call   f0100f6c <cprintf>
f011b7b3:	83 c4 10             	add    $0x10,%esp

		//2 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011b7b6:	e8 4e 22 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b7bb:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b7be:	e8 7d 90 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b7c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011b7c6:	83 ec 0c             	sub    $0xc,%esp
f011b7c9:	68 00 fc 1f 00       	push   $0x1ffc00
f011b7ce:	e8 e3 d2 fe ff       	call   f0108ab6 <kmalloc>
f011b7d3:	83 c4 10             	add    $0x10,%esp
f011b7d6:	89 45 9c             	mov    %eax,-0x64(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b7d9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011b7dc:	3d 00 10 20 f8       	cmp    $0xf8201000,%eax
f011b7e1:	74 17                	je     f011b7fa <test_kmalloc_firstfit2+0x173>
f011b7e3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b7ea:	83 ec 0c             	sub    $0xc,%esp
f011b7ed:	68 58 e8 12 f0       	push   $0xf012e858
f011b7f2:	e8 75 57 fe ff       	call   f0100f6c <cprintf>
f011b7f7:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b7fa:	e8 41 90 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b7ff:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b802:	74 17                	je     f011b81b <test_kmalloc_firstfit2+0x194>
f011b804:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b80b:	83 ec 0c             	sub    $0xc,%esp
f011b80e:	68 20 e6 12 f0       	push   $0xf012e620
f011b813:	e8 54 57 fe ff       	call   f0100f6c <cprintf>
f011b818:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b81b:	e8 e9 21 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b820:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b823:	29 c2                	sub    %eax,%edx
f011b825:	89 d0                	mov    %edx,%eax
f011b827:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011b82c:	77 17                	ja     f011b845 <test_kmalloc_firstfit2+0x1be>
f011b82e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b835:	83 ec 0c             	sub    $0xc,%esp
f011b838:	68 89 e8 12 f0       	push   $0xf012e889
f011b83d:	e8 2a 57 fe ff       	call   f0100f6c <cprintf>
f011b842:	83 c4 10             	add    $0x10,%esp

		//1 KB (should be allocated by dynamic allocator not page allocator)
		freeFrames = (int)sys_calculate_free_frames() ;
f011b845:	e8 bf 21 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b84a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b84d:	e8 ee 8f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b852:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[2] = kmalloc(1*kilo);
f011b855:	83 ec 0c             	sub    $0xc,%esp
f011b858:	68 00 04 00 00       	push   $0x400
f011b85d:	e8 54 d2 fe ff       	call   f0108ab6 <kmalloc>
f011b862:	83 c4 10             	add    $0x10,%esp
f011b865:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f011b868:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b86b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011b870:	76 22                	jbe    f011b894 <test_kmalloc_firstfit2+0x20d>
f011b872:	8b 5d a0             	mov    -0x60(%ebp),%ebx
f011b875:	83 ec 0c             	sub    $0xc,%esp
f011b878:	6a 00                	push   $0x0
f011b87a:	e8 2d d2 fe ff       	call   f0108aac <sbrk>
f011b87f:	83 c4 10             	add    $0x10,%esp
f011b882:	39 c3                	cmp    %eax,%ebx
f011b884:	73 0e                	jae    f011b894 <test_kmalloc_firstfit2+0x20d>
f011b886:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b889:	89 c2                	mov    %eax,%edx
f011b88b:	a1 d8 ed 17 f0       	mov    0xf017edd8,%eax
f011b890:	39 c2                	cmp    %eax,%edx
f011b892:	72 17                	jb     f011b8ab <test_kmalloc_firstfit2+0x224>
		{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011b894:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b89b:	83 ec 0c             	sub    $0xc,%esp
f011b89e:	68 20 e7 12 f0       	push   $0xf012e720
f011b8a3:	e8 c4 56 fe ff       	call   f0100f6c <cprintf>
f011b8a8:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b8ab:	e8 90 8f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b8b0:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b8b3:	74 17                	je     f011b8cc <test_kmalloc_firstfit2+0x245>
f011b8b5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b8bc:	83 ec 0c             	sub    $0xc,%esp
f011b8bf:	68 20 e6 12 f0       	push   $0xf012e620
f011b8c4:	e8 a3 56 fe ff       	call   f0100f6c <cprintf>
f011b8c9:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - (int)sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//2 KB (should be allocated by dynamic allocator not page allocator)
		freeFrames = (int)sys_calculate_free_frames() ;
f011b8cc:	e8 38 21 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b8d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b8d4:	e8 67 8f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b8d9:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011b8dc:	83 ec 0c             	sub    $0xc,%esp
f011b8df:	68 00 08 00 00       	push   $0x800
f011b8e4:	e8 cd d1 fe ff       	call   f0108ab6 <kmalloc>
f011b8e9:	83 c4 10             	add    $0x10,%esp
f011b8ec:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f011b8ef:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b8f2:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011b8f7:	76 22                	jbe    f011b91b <test_kmalloc_firstfit2+0x294>
f011b8f9:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f011b8fc:	83 ec 0c             	sub    $0xc,%esp
f011b8ff:	6a 00                	push   $0x0
f011b901:	e8 a6 d1 fe ff       	call   f0108aac <sbrk>
f011b906:	83 c4 10             	add    $0x10,%esp
f011b909:	39 c3                	cmp    %eax,%ebx
f011b90b:	73 0e                	jae    f011b91b <test_kmalloc_firstfit2+0x294>
f011b90d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b910:	89 c2                	mov    %eax,%edx
f011b912:	a1 d8 ed 17 f0       	mov    0xf017edd8,%eax
f011b917:	39 c2                	cmp    %eax,%edx
f011b919:	72 17                	jb     f011b932 <test_kmalloc_firstfit2+0x2ab>
		{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011b91b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b922:	83 ec 0c             	sub    $0xc,%esp
f011b925:	68 20 e7 12 f0       	push   $0xf012e720
f011b92a:	e8 3d 56 fe ff       	call   f0100f6c <cprintf>
f011b92f:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b932:	e8 09 8f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b937:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b93a:	74 17                	je     f011b953 <test_kmalloc_firstfit2+0x2cc>
f011b93c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b943:	83 ec 0c             	sub    $0xc,%esp
f011b946:	68 20 e6 12 f0       	push   $0xf012e620
f011b94b:	e8 1c 56 fe ff       	call   f0100f6c <cprintf>
f011b950:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - (int)sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//1 KB (should be allocated by dynamic allocator not page allocator)
		freeFrames = (int)sys_calculate_free_frames() ;
f011b953:	e8 b1 20 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b958:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b95b:	e8 e0 8e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b960:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[4] = kmalloc(1*kilo);
f011b963:	83 ec 0c             	sub    $0xc,%esp
f011b966:	68 00 04 00 00       	push   $0x400
f011b96b:	e8 46 d1 fe ff       	call   f0108ab6 <kmalloc>
f011b970:	83 c4 10             	add    $0x10,%esp
f011b973:	89 45 a8             	mov    %eax,-0x58(%ebp)
		if ((uint32) ptr_allocations[4] < KERNEL_HEAP_START || ptr_allocations[4] >= sbrk(0) || (uint32) ptr_allocations[4] >= da_limit)
f011b976:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b979:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011b97e:	76 22                	jbe    f011b9a2 <test_kmalloc_firstfit2+0x31b>
f011b980:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011b983:	83 ec 0c             	sub    $0xc,%esp
f011b986:	6a 00                	push   $0x0
f011b988:	e8 1f d1 fe ff       	call   f0108aac <sbrk>
f011b98d:	83 c4 10             	add    $0x10,%esp
f011b990:	39 c3                	cmp    %eax,%ebx
f011b992:	73 0e                	jae    f011b9a2 <test_kmalloc_firstfit2+0x31b>
f011b994:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b997:	89 c2                	mov    %eax,%edx
f011b999:	a1 d8 ed 17 f0       	mov    0xf017edd8,%eax
f011b99e:	39 c2                	cmp    %eax,%edx
f011b9a0:	72 17                	jb     f011b9b9 <test_kmalloc_firstfit2+0x332>
		{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011b9a2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b9a9:	83 ec 0c             	sub    $0xc,%esp
f011b9ac:	68 20 e7 12 f0       	push   $0xf012e720
f011b9b1:	e8 b6 55 fe ff       	call   f0100f6c <cprintf>
f011b9b6:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b9b9:	e8 82 8e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b9be:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b9c1:	74 17                	je     f011b9da <test_kmalloc_firstfit2+0x353>
f011b9c3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b9ca:	83 ec 0c             	sub    $0xc,%esp
f011b9cd:	68 20 e6 12 f0       	push   $0xf012e620
f011b9d2:	e8 95 55 fe ff       	call   f0100f6c <cprintf>
f011b9d7:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - (int)sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//1 KB Hole in Dynamic Allocator Area
		freeFrames = (int)sys_calculate_free_frames() ;
f011b9da:	e8 2a 20 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b9df:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b9e2:	e8 59 8e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b9e7:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[2]);
f011b9ea:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b9ed:	83 ec 0c             	sub    $0xc,%esp
f011b9f0:	50                   	push   %eax
f011b9f1:	e8 da d0 fe ff       	call   f0108ad0 <kfree>
f011b9f6:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b9f9:	e8 42 8e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b9fe:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011ba01:	74 17                	je     f011ba1a <test_kmalloc_firstfit2+0x393>
f011ba03:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ba0a:	83 ec 0c             	sub    $0xc,%esp
f011ba0d:	68 20 e6 12 f0       	push   $0xf012e620
f011ba12:	e8 55 55 fe ff       	call   f0100f6c <cprintf>
f011ba17:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) != 0) { correct = 0; cprintf("Wrong free: freeing a block from the dynamic allocator should not affect the free frames\n"); }
f011ba1a:	e8 ea 1f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ba1f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ba22:	74 17                	je     f011ba3b <test_kmalloc_firstfit2+0x3b4>
f011ba24:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ba2b:	83 ec 0c             	sub    $0xc,%esp
f011ba2e:	68 2c e9 12 f0       	push   $0xf012e92c
f011ba33:	e8 34 55 fe ff       	call   f0100f6c <cprintf>
f011ba38:	83 c4 10             	add    $0x10,%esp

		//7 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011ba3b:	e8 c9 1f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ba40:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011ba43:	e8 f8 8d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ba48:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[5] = kmalloc(7*kilo);
f011ba4b:	83 ec 0c             	sub    $0xc,%esp
f011ba4e:	68 00 1c 00 00       	push   $0x1c00
f011ba53:	e8 5e d0 fe ff       	call   f0108ab6 <kmalloc>
f011ba58:	83 c4 10             	add    $0x10,%esp
f011ba5b:	89 45 ac             	mov    %eax,-0x54(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega /*+ 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011ba5e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ba61:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011ba66:	74 17                	je     f011ba7f <test_kmalloc_firstfit2+0x3f8>
f011ba68:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ba6f:	83 ec 0c             	sub    $0xc,%esp
f011ba72:	68 58 e8 12 f0       	push   $0xf012e858
f011ba77:	e8 f0 54 fe ff       	call   f0100f6c <cprintf>
f011ba7c:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ba7f:	e8 bc 8d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ba84:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011ba87:	74 17                	je     f011baa0 <test_kmalloc_firstfit2+0x419>
f011ba89:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ba90:	83 ec 0c             	sub    $0xc,%esp
f011ba93:	68 20 e6 12 f0       	push   $0xf012e620
f011ba98:	e8 cf 54 fe ff       	call   f0100f6c <cprintf>
f011ba9d:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: \n"); }
f011baa0:	e8 64 1f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011baa5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011baa8:	29 c2                	sub    %eax,%edx
f011baaa:	89 d0                	mov    %edx,%eax
f011baac:	83 f8 01             	cmp    $0x1,%eax
f011baaf:	77 17                	ja     f011bac8 <test_kmalloc_firstfit2+0x441>
f011bab1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bab8:	83 ec 0c             	sub    $0xc,%esp
f011babb:	68 89 e8 12 f0       	push   $0xf012e889
f011bac0:	e8 a7 54 fe ff       	call   f0100f6c <cprintf>
f011bac5:	83 c4 10             	add    $0x10,%esp

		//2 MB Hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011bac8:	e8 3c 1f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bacd:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bad0:	e8 6b 8d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bad5:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[0]);
f011bad8:	8b 45 98             	mov    -0x68(%ebp),%eax
f011badb:	83 ec 0c             	sub    $0xc,%esp
f011bade:	50                   	push   %eax
f011badf:	e8 ec cf fe ff       	call   f0108ad0 <kfree>
f011bae4:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bae7:	e8 54 8d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011baec:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011baef:	74 17                	je     f011bb08 <test_kmalloc_firstfit2+0x481>
f011baf1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011baf8:	83 ec 0c             	sub    $0xc,%esp
f011bafb:	68 20 e6 12 f0       	push   $0xf012e620
f011bb00:	e8 67 54 fe ff       	call   f0100f6c <cprintf>
f011bb05:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong free: \n"); }
f011bb08:	e8 fc 1e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bb0d:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011bb10:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011bb15:	77 17                	ja     f011bb2e <test_kmalloc_firstfit2+0x4a7>
f011bb17:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bb1e:	83 ec 0c             	sub    $0xc,%esp
f011bb21:	68 9d e8 12 f0       	push   $0xf012e89d
f011bb26:	e8 41 54 fe ff       	call   f0100f6c <cprintf>
f011bb2b:	83 c4 10             	add    $0x10,%esp

		//3 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011bb2e:	e8 d6 1e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bb33:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bb36:	e8 05 8d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bb3b:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011bb3e:	83 ec 0c             	sub    $0xc,%esp
f011bb41:	68 00 fc 2f 00       	push   $0x2ffc00
f011bb46:	e8 6b cf fe ff       	call   f0108ab6 <kmalloc>
f011bb4b:	83 c4 10             	add    $0x10,%esp
f011bb4e:	89 45 b0             	mov    %eax,-0x50(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 4*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011bb51:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bb54:	3d 00 30 40 f8       	cmp    $0xf8403000,%eax
f011bb59:	74 17                	je     f011bb72 <test_kmalloc_firstfit2+0x4eb>
f011bb5b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bb62:	83 ec 0c             	sub    $0xc,%esp
f011bb65:	68 58 e8 12 f0       	push   $0xf012e858
f011bb6a:	e8 fd 53 fe ff       	call   f0100f6c <cprintf>
f011bb6f:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bb72:	e8 c9 8c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bb77:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bb7a:	74 17                	je     f011bb93 <test_kmalloc_firstfit2+0x50c>
f011bb7c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bb83:	83 ec 0c             	sub    $0xc,%esp
f011bb86:	68 20 e6 12 f0       	push   $0xf012e620
f011bb8b:	e8 dc 53 fe ff       	call   f0100f6c <cprintf>
f011bb90:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) <  3*Mega/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: \n"); }
f011bb93:	e8 71 1e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bb98:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011bb9b:	29 c2                	sub    %eax,%edx
f011bb9d:	89 d0                	mov    %edx,%eax
f011bb9f:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011bba4:	77 17                	ja     f011bbbd <test_kmalloc_firstfit2+0x536>
f011bba6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bbad:	83 ec 0c             	sub    $0xc,%esp
f011bbb0:	68 89 e8 12 f0       	push   $0xf012e889
f011bbb5:	e8 b2 53 fe ff       	call   f0100f6c <cprintf>
f011bbba:	83 c4 10             	add    $0x10,%esp

		//2 MB + 6 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011bbbd:	e8 47 1e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bbc2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bbc5:	e8 76 8c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bbca:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[7] = kmalloc(2*Mega + 6*kilo);
f011bbcd:	83 ec 0c             	sub    $0xc,%esp
f011bbd0:	68 00 18 20 00       	push   $0x201800
f011bbd5:	e8 dc ce fe ff       	call   f0108ab6 <kmalloc>
f011bbda:	83 c4 10             	add    $0x10,%esp
f011bbdd:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011bbe0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011bbe3:	3d 00 30 70 f8       	cmp    $0xf8703000,%eax
f011bbe8:	74 17                	je     f011bc01 <test_kmalloc_firstfit2+0x57a>
f011bbea:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bbf1:	83 ec 0c             	sub    $0xc,%esp
f011bbf4:	68 58 e8 12 f0       	push   $0xf012e858
f011bbf9:	e8 6e 53 fe ff       	call   f0100f6c <cprintf>
f011bbfe:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bc01:	e8 3a 8c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bc06:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bc09:	74 17                	je     f011bc22 <test_kmalloc_firstfit2+0x59b>
f011bc0b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bc12:	83 ec 0c             	sub    $0xc,%esp
f011bc15:	68 20 e6 12 f0       	push   $0xf012e620
f011bc1a:	e8 4d 53 fe ff       	call   f0100f6c <cprintf>
f011bc1f:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) <  514) { correct = 0; cprintf("Wrong allocation: \n"); }
f011bc22:	e8 e2 1d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bc27:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011bc2a:	29 c2                	sub    %eax,%edx
f011bc2c:	89 d0                	mov    %edx,%eax
f011bc2e:	3d 01 02 00 00       	cmp    $0x201,%eax
f011bc33:	77 17                	ja     f011bc4c <test_kmalloc_firstfit2+0x5c5>
f011bc35:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bc3c:	83 ec 0c             	sub    $0xc,%esp
f011bc3f:	68 89 e8 12 f0       	push   $0xf012e889
f011bc44:	e8 23 53 fe ff       	call   f0100f6c <cprintf>
f011bc49:	83 c4 10             	add    $0x10,%esp

		//3 MB Hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011bc4c:	e8 b8 1d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bc51:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bc54:	e8 e7 8b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bc59:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[6]);
f011bc5c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bc5f:	83 ec 0c             	sub    $0xc,%esp
f011bc62:	50                   	push   %eax
f011bc63:	e8 68 ce fe ff       	call   f0108ad0 <kfree>
f011bc68:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bc6b:	e8 d0 8b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bc70:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bc73:	74 17                	je     f011bc8c <test_kmalloc_firstfit2+0x605>
f011bc75:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bc7c:	83 ec 0c             	sub    $0xc,%esp
f011bc7f:	68 20 e6 12 f0       	push   $0xf012e620
f011bc84:	e8 e3 52 fe ff       	call   f0100f6c <cprintf>
f011bc89:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 768) { correct = 0; cprintf("Wrong free: \n"); }
f011bc8c:	e8 78 1d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bc91:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011bc94:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011bc99:	77 17                	ja     f011bcb2 <test_kmalloc_firstfit2+0x62b>
f011bc9b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bca2:	83 ec 0c             	sub    $0xc,%esp
f011bca5:	68 9d e8 12 f0       	push   $0xf012e89d
f011bcaa:	e8 bd 52 fe ff       	call   f0100f6c <cprintf>
f011bcaf:	83 c4 10             	add    $0x10,%esp

		//2 KB Hole in Dynamic Allocator Area [Resulting Hole = 1 KB + 2 KB = 3 KB]
		freeFrames = (int)sys_calculate_free_frames() ;
f011bcb2:	e8 52 1d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bcb7:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bcba:	e8 81 8b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bcbf:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[3]);
f011bcc2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011bcc5:	83 ec 0c             	sub    $0xc,%esp
f011bcc8:	50                   	push   %eax
f011bcc9:	e8 02 ce fe ff       	call   f0108ad0 <kfree>
f011bcce:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bcd1:	e8 6a 8b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bcd6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bcd9:	74 17                	je     f011bcf2 <test_kmalloc_firstfit2+0x66b>
f011bcdb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bce2:	83 ec 0c             	sub    $0xc,%esp
f011bce5:	68 20 e6 12 f0       	push   $0xf012e620
f011bcea:	e8 7d 52 fe ff       	call   f0100f6c <cprintf>
f011bcef:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) != 0) { correct = 0; cprintf("Wrong free: freeing a block from the dynamic allocator should not affect the free frames\n"); }
f011bcf2:	e8 12 1d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bcf7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011bcfa:	74 17                	je     f011bd13 <test_kmalloc_firstfit2+0x68c>
f011bcfc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bd03:	83 ec 0c             	sub    $0xc,%esp
f011bd06:	68 2c e9 12 f0       	push   $0xf012e92c
f011bd0b:	e8 5c 52 fe ff       	call   f0100f6c <cprintf>
f011bd10:	83 c4 10             	add    $0x10,%esp

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB = 4 MB]
		freeFrames = (int)sys_calculate_free_frames() ;
f011bd13:	e8 f1 1c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bd18:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bd1b:	e8 20 8b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bd20:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[1]);
f011bd23:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011bd26:	83 ec 0c             	sub    $0xc,%esp
f011bd29:	50                   	push   %eax
f011bd2a:	e8 a1 cd fe ff       	call   f0108ad0 <kfree>
f011bd2f:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong free: \n"); }
f011bd32:	e8 d2 1c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bd37:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011bd3a:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011bd3f:	77 17                	ja     f011bd58 <test_kmalloc_firstfit2+0x6d1>
f011bd41:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bd48:	83 ec 0c             	sub    $0xc,%esp
f011bd4b:	68 9d e8 12 f0       	push   $0xf012e89d
f011bd50:	e8 17 52 fe ff       	call   f0100f6c <cprintf>
f011bd55:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bd58:	e8 e3 8a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bd5d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bd60:	74 17                	je     f011bd79 <test_kmalloc_firstfit2+0x6f2>
f011bd62:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bd69:	83 ec 0c             	sub    $0xc,%esp
f011bd6c:	68 20 e6 12 f0       	push   $0xf012e620
f011bd71:	e8 f6 51 fe ff       	call   f0100f6c <cprintf>
f011bd76:	83 c4 10             	add    $0x10,%esp

		//5 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011bd79:	e8 8b 1c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bd7e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bd81:	e8 ba 8a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bd86:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[8] = kmalloc(5*Mega-kilo);
f011bd89:	83 ec 0c             	sub    $0xc,%esp
f011bd8c:	68 00 fc 4f 00       	push   $0x4ffc00
f011bd91:	e8 20 cd fe ff       	call   f0108ab6 <kmalloc>
f011bd96:	83 c4 10             	add    $0x10,%esp
f011bd99:	89 45 b8             	mov    %eax,-0x48(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 9*Mega + 16*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011bd9c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bd9f:	3d 00 50 90 f8       	cmp    $0xf8905000,%eax
f011bda4:	74 17                	je     f011bdbd <test_kmalloc_firstfit2+0x736>
f011bda6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bdad:	83 ec 0c             	sub    $0xc,%esp
f011bdb0:	68 58 e8 12 f0       	push   $0xf012e858
f011bdb5:	e8 b2 51 fe ff       	call   f0100f6c <cprintf>
f011bdba:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bdbd:	e8 7e 8a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bdc2:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bdc5:	74 17                	je     f011bdde <test_kmalloc_firstfit2+0x757>
f011bdc7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bdce:	83 ec 0c             	sub    $0xc,%esp
f011bdd1:	68 20 e6 12 f0       	push   $0xf012e620
f011bdd6:	e8 91 51 fe ff       	call   f0100f6c <cprintf>
f011bddb:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) <   5*Mega/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: \n"); }
f011bdde:	e8 26 1c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bde3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011bde6:	29 c2                	sub    %eax,%edx
f011bde8:	89 d0                	mov    %edx,%eax
f011bdea:	3d ff 04 00 00       	cmp    $0x4ff,%eax
f011bdef:	77 17                	ja     f011be08 <test_kmalloc_firstfit2+0x781>
f011bdf1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bdf8:	83 ec 0c             	sub    $0xc,%esp
f011bdfb:	68 89 e8 12 f0       	push   $0xf012e889
f011be00:	e8 67 51 fe ff       	call   f0100f6c <cprintf>
f011be05:	83 c4 10             	add    $0x10,%esp

		//8 KB Hole [Resulting Hole = 2 MB + 2 MB + 8 KB + 3 MB = 7 MB + 8 KB]
		freeFrames = (int)sys_calculate_free_frames() ;
f011be08:	e8 fc 1b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011be0d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011be10:	e8 2b 8a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011be15:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[5]);
f011be18:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011be1b:	83 ec 0c             	sub    $0xc,%esp
f011be1e:	50                   	push   %eax
f011be1f:	e8 ac cc fe ff       	call   f0108ad0 <kfree>
f011be24:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011be27:	e8 14 8a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011be2c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011be2f:	74 17                	je     f011be48 <test_kmalloc_firstfit2+0x7c1>
f011be31:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011be38:	83 ec 0c             	sub    $0xc,%esp
f011be3b:	68 20 e6 12 f0       	push   $0xf012e620
f011be40:	e8 27 51 fe ff       	call   f0100f6c <cprintf>
f011be45:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 2) { correct = 0; cprintf("Wrong free: \n"); }
f011be48:	e8 bc 1b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011be4d:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011be50:	83 f8 01             	cmp    $0x1,%eax
f011be53:	77 17                	ja     f011be6c <test_kmalloc_firstfit2+0x7e5>
f011be55:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011be5c:	83 ec 0c             	sub    $0xc,%esp
f011be5f:	68 9d e8 12 f0       	push   $0xf012e89d
f011be64:	e8 03 51 fe ff       	call   f0100f6c <cprintf>
f011be69:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011be6c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011be70:	74 04                	je     f011be76 <test_kmalloc_firstfit2+0x7ef>
f011be72:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011be76:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		//[FIRST FIT Case#1] Should be allocated in the resulting hole inside Page Allocator Area
		//7 MB + 1 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011be7d:	e8 87 1b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011be82:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011be85:	e8 b6 89 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011be8a:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[9] = kmalloc(7*Mega+kilo);
f011be8d:	83 ec 0c             	sub    $0xc,%esp
f011be90:	68 00 04 70 00       	push   $0x700400
f011be95:	e8 1c cc fe ff       	call   f0108ab6 <kmalloc>
f011be9a:	83 c4 10             	add    $0x10,%esp
f011be9d:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011bea0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011bea3:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011bea8:	74 17                	je     f011bec1 <test_kmalloc_firstfit2+0x83a>
f011beaa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011beb1:	83 ec 0c             	sub    $0xc,%esp
f011beb4:	68 58 e8 12 f0       	push   $0xf012e858
f011beb9:	e8 ae 50 fe ff       	call   f0100f6c <cprintf>
f011bebe:	83 c4 10             	add    $0x10,%esp
		if((freeDiskFrames - (int)pf_calculate_free_frames()) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bec1:	e8 7a 89 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bec6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bec9:	74 17                	je     f011bee2 <test_kmalloc_firstfit2+0x85b>
f011becb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bed2:	83 ec 0c             	sub    $0xc,%esp
f011bed5:	68 20 e6 12 f0       	push   $0xf012e620
f011beda:	e8 8d 50 fe ff       	call   f0100f6c <cprintf>
f011bedf:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) <  (7*Mega+4*kilo)/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: \n"); }
f011bee2:	e8 22 1b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bee7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011beea:	29 c2                	sub    %eax,%edx
f011beec:	89 d0                	mov    %edx,%eax
f011beee:	3d 00 07 00 00       	cmp    $0x700,%eax
f011bef3:	77 17                	ja     f011bf0c <test_kmalloc_firstfit2+0x885>
f011bef5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011befc:	83 ec 0c             	sub    $0xc,%esp
f011beff:	68 89 e8 12 f0       	push   $0xf012e889
f011bf04:	e8 63 50 fe ff       	call   f0100f6c <cprintf>
f011bf09:	83 c4 10             	add    $0x10,%esp

		//[FIRST FIT Case#2] Should be allocated in the remaining area of resulting hole inside Page Allocator Area
		//3 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011bf0c:	e8 f8 1a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bf11:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bf14:	e8 27 89 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bf19:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[10] = kmalloc(3*kilo);
f011bf1c:	83 ec 0c             	sub    $0xc,%esp
f011bf1f:	68 00 0c 00 00       	push   $0xc00
f011bf24:	e8 8d cb fe ff       	call   f0108ab6 <kmalloc>
f011bf29:	83 c4 10             	add    $0x10,%esp
f011bf2c:	89 45 c0             	mov    %eax,-0x40(%ebp)
		if ((uint32)ptr_allocations[10] != (ACTUAL_START + 7*Mega + 4*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011bf2f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bf32:	3d 00 20 70 f8       	cmp    $0xf8702000,%eax
f011bf37:	74 17                	je     f011bf50 <test_kmalloc_firstfit2+0x8c9>
f011bf39:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bf40:	83 ec 0c             	sub    $0xc,%esp
f011bf43:	68 58 e8 12 f0       	push   $0xf012e858
f011bf48:	e8 1f 50 fe ff       	call   f0100f6c <cprintf>
f011bf4d:	83 c4 10             	add    $0x10,%esp
		if((freeDiskFrames - (int)pf_calculate_free_frames()) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bf50:	e8 eb 88 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bf55:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bf58:	74 17                	je     f011bf71 <test_kmalloc_firstfit2+0x8ea>
f011bf5a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bf61:	83 ec 0c             	sub    $0xc,%esp
f011bf64:	68 20 e6 12 f0       	push   $0xf012e620
f011bf69:	e8 fe 4f fe ff       	call   f0100f6c <cprintf>
f011bf6e:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 1) { correct = 0; cprintf("Wrong allocation: \n"); }
f011bf71:	e8 93 1a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bf76:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011bf79:	75 17                	jne    f011bf92 <test_kmalloc_firstfit2+0x90b>
f011bf7b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bf82:	83 ec 0c             	sub    $0xc,%esp
f011bf85:	68 89 e8 12 f0       	push   $0xf012e889
f011bf8a:	e8 dd 4f fe ff       	call   f0100f6c <cprintf>
f011bf8f:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=35 ;
f011bf92:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011bf96:	74 04                	je     f011bf9c <test_kmalloc_firstfit2+0x915>
f011bf98:	83 45 f4 23          	addl   $0x23,-0xc(%ebp)

	correct = 1 ;
f011bf9c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		//[FIRST FIT Case#3] Should be allocated in the resulting hole inside DYNAMIC Allocator Area
		//1 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011bfa3:	e8 61 1a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bfa8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bfab:	e8 90 88 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bfb0:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[11] = kmalloc(1*kilo);
f011bfb3:	83 ec 0c             	sub    $0xc,%esp
f011bfb6:	68 00 04 00 00       	push   $0x400
f011bfbb:	e8 f6 ca fe ff       	call   f0108ab6 <kmalloc>
f011bfc0:	83 c4 10             	add    $0x10,%esp
f011bfc3:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if ((ptr_allocations[11] < ptr_allocations[2]) || (ptr_allocations[11] > (ptr_allocations[2] + 1*kilo)))
f011bfc6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011bfc9:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011bfcc:	39 c2                	cmp    %eax,%edx
f011bfce:	72 10                	jb     f011bfe0 <test_kmalloc_firstfit2+0x959>
f011bfd0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011bfd3:	8b 55 a0             	mov    -0x60(%ebp),%edx
f011bfd6:	81 c2 00 04 00 00    	add    $0x400,%edx
f011bfdc:	39 d0                	cmp    %edx,%eax
f011bfde:	76 17                	jbe    f011bff7 <test_kmalloc_firstfit2+0x970>
		{ correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011bfe0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bfe7:	83 ec 0c             	sub    $0xc,%esp
f011bfea:	68 58 e8 12 f0       	push   $0xf012e858
f011bfef:	e8 78 4f fe ff       	call   f0100f6c <cprintf>
f011bff4:	83 c4 10             	add    $0x10,%esp
		if((freeDiskFrames - (int)pf_calculate_free_frames()) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bff7:	e8 44 88 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bffc:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bfff:	74 17                	je     f011c018 <test_kmalloc_firstfit2+0x991>
f011c001:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011c008:	83 ec 0c             	sub    $0xc,%esp
f011c00b:	68 20 e6 12 f0       	push   $0xf012e620
f011c010:	e8 57 4f fe ff       	call   f0100f6c <cprintf>
f011c015:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: \n"); }
f011c018:	e8 ec 19 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c01d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011c020:	74 17                	je     f011c039 <test_kmalloc_firstfit2+0x9b2>
f011c022:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011c029:	83 ec 0c             	sub    $0xc,%esp
f011c02c:	68 89 e8 12 f0       	push   $0xf012e889
f011c031:	e8 36 4f fe ff       	call   f0100f6c <cprintf>
f011c036:	83 c4 10             	add    $0x10,%esp

		//[FIRST FIT Case#4] Should be allocated in the remaining of resulting hole inside DYNAMIC Allocator Area
		//1 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011c039:	e8 cb 19 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c03e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011c041:	e8 fa 87 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c046:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[12] = kmalloc(1*kilo);
f011c049:	83 ec 0c             	sub    $0xc,%esp
f011c04c:	68 00 04 00 00       	push   $0x400
f011c051:	e8 60 ca fe ff       	call   f0108ab6 <kmalloc>
f011c056:	83 c4 10             	add    $0x10,%esp
f011c059:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if ((ptr_allocations[12] < ptr_allocations[2] + 1*kilo) || (ptr_allocations[12] > (ptr_allocations[2] + 2*kilo)))
f011c05c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c05f:	8b 55 a0             	mov    -0x60(%ebp),%edx
f011c062:	81 c2 00 04 00 00    	add    $0x400,%edx
f011c068:	39 d0                	cmp    %edx,%eax
f011c06a:	72 10                	jb     f011c07c <test_kmalloc_firstfit2+0x9f5>
f011c06c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011c06f:	8b 55 a0             	mov    -0x60(%ebp),%edx
f011c072:	81 c2 00 08 00 00    	add    $0x800,%edx
f011c078:	39 d0                	cmp    %edx,%eax
f011c07a:	76 17                	jbe    f011c093 <test_kmalloc_firstfit2+0xa0c>
		{ correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011c07c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011c083:	83 ec 0c             	sub    $0xc,%esp
f011c086:	68 58 e8 12 f0       	push   $0xf012e858
f011c08b:	e8 dc 4e fe ff       	call   f0100f6c <cprintf>
f011c090:	83 c4 10             	add    $0x10,%esp
		if((freeDiskFrames - (int)pf_calculate_free_frames()) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c093:	e8 a8 87 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c098:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011c09b:	74 17                	je     f011c0b4 <test_kmalloc_firstfit2+0xa2d>
f011c09d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011c0a4:	83 ec 0c             	sub    $0xc,%esp
f011c0a7:	68 20 e6 12 f0       	push   $0xf012e620
f011c0ac:	e8 bb 4e fe ff       	call   f0100f6c <cprintf>
f011c0b1:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: \n"); }
f011c0b4:	e8 50 19 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c0b9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011c0bc:	74 17                	je     f011c0d5 <test_kmalloc_firstfit2+0xa4e>
f011c0be:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011c0c5:	83 ec 0c             	sub    $0xc,%esp
f011c0c8:	68 89 e8 12 f0       	push   $0xf012e889
f011c0cd:	e8 9a 4e fe ff       	call   f0100f6c <cprintf>
f011c0d2:	83 c4 10             	add    $0x10,%esp

	}
	if (correct)	eval+=35 ;
f011c0d5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011c0d9:	74 04                	je     f011c0df <test_kmalloc_firstfit2+0xa58>
f011c0db:	83 45 f4 23          	addl   $0x23,-0xc(%ebp)

	correct = 1 ;
f011c0df:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[13] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011c0e6:	83 ec 0c             	sub    $0xc,%esp
f011c0e9:	68 00 e0 1f 07       	push   $0x71fe000
f011c0ee:	e8 c3 c9 fe ff       	call   f0108ab6 <kmalloc>
f011c0f3:	83 c4 10             	add    $0x10,%esp
f011c0f6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		if (ptr_allocations[13] != NULL) { correct = 0; cprintf("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL\n"); }
f011c0f9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011c0fc:	85 c0                	test   %eax,%eax
f011c0fe:	74 17                	je     f011c117 <test_kmalloc_firstfit2+0xa90>
f011c100:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011c107:	83 ec 0c             	sub    $0xc,%esp
f011c10a:	68 88 e9 12 f0       	push   $0xf012e988
f011c10f:	e8 58 4e fe ff       	call   f0100f6c <cprintf>
f011c114:	83 c4 10             	add    $0x10,%esp

	}
	if (correct)	eval+=10 ;
f011c117:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011c11b:	74 04                	je     f011c121 <test_kmalloc_firstfit2+0xa9a>
f011c11d:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	cprintf("test FIRST FIT allocation (2) completed. Eval = %d%\n", eval);
f011c121:	83 ec 08             	sub    $0x8,%esp
f011c124:	ff 75 f4             	pushl  -0xc(%ebp)
f011c127:	68 ec e9 12 f0       	push   $0xf012e9ec
f011c12c:	e8 3b 4e fe ff       	call   f0100f6c <cprintf>
f011c131:	83 c4 10             	add    $0x10,%esp

	return 1;
f011c134:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011c139:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011c13c:	5b                   	pop    %ebx
f011c13d:	5f                   	pop    %edi
f011c13e:	5d                   	pop    %ebp
f011c13f:	c3                   	ret    

f011c140 <test_kfree_bestfirstfit>:


int test_kfree_bestfirstfit()
{
f011c140:	55                   	push   %ebp
f011c141:	89 e5                	mov    %esp,%ebp
f011c143:	57                   	push   %edi
f011c144:	53                   	push   %ebx
f011c145:	81 ec 40 01 00 00    	sub    $0x140,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f011c14b:	83 ec 0c             	sub    $0xc,%esp
f011c14e:	68 60 e5 12 f0       	push   $0xf012e560
f011c153:	e8 14 4e fe ff       	call   f0100f6c <cprintf>
f011c158:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c15b:	83 ec 0c             	sub    $0xc,%esp
f011c15e:	68 90 e5 12 f0       	push   $0xf012e590
f011c163:	e8 04 4e fe ff       	call   f0100f6c <cprintf>
f011c168:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c16b:	83 ec 0c             	sub    $0xc,%esp
f011c16e:	68 60 e5 12 f0       	push   $0xf012e560
f011c173:	e8 f4 4d fe ff       	call   f0100f6c <cprintf>
f011c178:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011c17b:	c6 45 df 80          	movb   $0x80,-0x21(%ebp)
	char maxByte = 0x7F;
f011c17f:	c6 45 de 7f          	movb   $0x7f,-0x22(%ebp)
	short minShort = 1<<15 ;
f011c183:	66 c7 45 dc 00 80    	movw   $0x8000,-0x24(%ebp)
	short maxShort = 0x7FFF;
f011c189:	66 c7 45 da ff 7f    	movw   $0x7fff,-0x26(%ebp)
	int minInt = 1<<31 ;
f011c18f:	c7 45 d4 00 00 00 80 	movl   $0x80000000,-0x2c(%ebp)
	int maxInt = 0x7FFFFFFF;
f011c196:	c7 45 d0 ff ff ff 7f 	movl   $0x7fffffff,-0x30(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011c19d:	e8 67 18 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c1a2:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011c1a5:	8d 95 68 ff ff ff    	lea    -0x98(%ebp),%edx
f011c1ab:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c1b0:	b8 00 00 00 00       	mov    $0x0,%eax
f011c1b5:	89 d7                	mov    %edx,%edi
f011c1b7:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011c1b9:	8d 95 18 ff ff ff    	lea    -0xe8(%ebp),%edx
f011c1bf:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c1c4:	b8 00 00 00 00       	mov    $0x0,%eax
f011c1c9:	89 d7                	mov    %edx,%edi
f011c1cb:	f3 ab                	rep stos %eax,%es:(%edi)

	int eval = 0;
f011c1cd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	bool correct = 1;
f011c1d4:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

	correct = 1;
f011c1db:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	void* ptr_allocations[20] = {0};
f011c1e2:	8d 95 c8 fe ff ff    	lea    -0x138(%ebp),%edx
f011c1e8:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c1ed:	b8 00 00 00 00       	mov    $0x0,%eax
f011c1f2:	89 d7                	mov    %edx,%edi
f011c1f4:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//[BLOCK ALLOCATOR]
		{
			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f011c1f6:	e8 0e 18 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c1fb:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011c1fe:	e8 3d 86 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c203:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[2] = kmalloc(2*kilo);
f011c206:	83 ec 0c             	sub    $0xc,%esp
f011c209:	68 00 08 00 00       	push   $0x800
f011c20e:	e8 a3 c8 fe ff       	call   f0108ab6 <kmalloc>
f011c213:	83 c4 10             	add    $0x10,%esp
f011c216:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f011c21c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c222:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011c227:	76 28                	jbe    f011c251 <test_kfree_bestfirstfit+0x111>
f011c229:	8b 9d d0 fe ff ff    	mov    -0x130(%ebp),%ebx
f011c22f:	83 ec 0c             	sub    $0xc,%esp
f011c232:	6a 00                	push   $0x0
f011c234:	e8 73 c8 fe ff       	call   f0108aac <sbrk>
f011c239:	83 c4 10             	add    $0x10,%esp
f011c23c:	39 c3                	cmp    %eax,%ebx
f011c23e:	73 11                	jae    f011c251 <test_kfree_bestfirstfit+0x111>
f011c240:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c246:	89 c2                	mov    %eax,%edx
f011c248:	a1 d8 ed 17 f0       	mov    0xf017edd8,%eax
f011c24d:	39 c2                	cmp    %eax,%edx
f011c24f:	72 17                	jb     f011c268 <test_kfree_bestfirstfit+0x128>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011c251:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c258:	83 ec 0c             	sub    $0xc,%esp
f011c25b:	68 20 e7 12 f0       	push   $0xf012e720
f011c260:	e8 07 4d fe ff       	call   f0100f6c <cprintf>
f011c265:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c268:	e8 d3 85 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c26d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c270:	74 17                	je     f011c289 <test_kfree_bestfirstfit+0x149>
f011c272:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c279:	83 ec 0c             	sub    $0xc,%esp
f011c27c:	68 20 e6 12 f0       	push   $0xf012e620
f011c281:	e8 e6 4c fe ff       	call   f0100f6c <cprintf>
f011c286:	83 c4 10             	add    $0x10,%esp
			//		if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011c289:	c7 85 70 ff ff ff ff 	movl   $0x7ff,-0x90(%ebp)
f011c290:	07 00 00 
			ptr = (char*)ptr_allocations[2];
f011c293:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c299:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[2]; ++i)
f011c29c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c2a3:	eb 0e                	jmp    f011c2b3 <test_kfree_bestfirstfit+0x173>
			{
				ptr[i] = 2 ;
f011c2a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c2a8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c2ab:	01 d0                	add    %edx,%eax
f011c2ad:	c6 00 02             	movb   $0x2,(%eax)
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			//		if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[2] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[2];
			for (i = 0; i < lastIndices[2]; ++i)
f011c2b0:	ff 45 f4             	incl   -0xc(%ebp)
f011c2b3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c2b9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c2bc:	7f e7                	jg     f011c2a5 <test_kfree_bestfirstfit+0x165>
			{
				ptr[i] = 2 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f011c2be:	e8 46 17 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c2c3:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011c2c6:	e8 75 85 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c2cb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[3] = kmalloc(2*kilo);
f011c2ce:	83 ec 0c             	sub    $0xc,%esp
f011c2d1:	68 00 08 00 00       	push   $0x800
f011c2d6:	e8 db c7 fe ff       	call   f0108ab6 <kmalloc>
f011c2db:	83 c4 10             	add    $0x10,%esp
f011c2de:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f011c2e4:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c2ea:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011c2ef:	76 28                	jbe    f011c319 <test_kfree_bestfirstfit+0x1d9>
f011c2f1:	8b 9d d4 fe ff ff    	mov    -0x12c(%ebp),%ebx
f011c2f7:	83 ec 0c             	sub    $0xc,%esp
f011c2fa:	6a 00                	push   $0x0
f011c2fc:	e8 ab c7 fe ff       	call   f0108aac <sbrk>
f011c301:	83 c4 10             	add    $0x10,%esp
f011c304:	39 c3                	cmp    %eax,%ebx
f011c306:	73 11                	jae    f011c319 <test_kfree_bestfirstfit+0x1d9>
f011c308:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c30e:	89 c2                	mov    %eax,%edx
f011c310:	a1 d8 ed 17 f0       	mov    0xf017edd8,%eax
f011c315:	39 c2                	cmp    %eax,%edx
f011c317:	72 17                	jb     f011c330 <test_kfree_bestfirstfit+0x1f0>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011c319:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c320:	83 ec 0c             	sub    $0xc,%esp
f011c323:	68 20 e7 12 f0       	push   $0xf012e720
f011c328:	e8 3f 4c fe ff       	call   f0100f6c <cprintf>
f011c32d:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c330:	e8 0b 85 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c335:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c338:	74 17                	je     f011c351 <test_kfree_bestfirstfit+0x211>
f011c33a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c341:	83 ec 0c             	sub    $0xc,%esp
f011c344:	68 20 e6 12 f0       	push   $0xf012e620
f011c349:	e8 1e 4c fe ff       	call   f0100f6c <cprintf>
f011c34e:	83 c4 10             	add    $0x10,%esp
			//		if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011c351:	c7 85 74 ff ff ff ff 	movl   $0x7ff,-0x8c(%ebp)
f011c358:	07 00 00 
			ptr = (char*)ptr_allocations[3];
f011c35b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c361:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[3]; ++i)
f011c364:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c36b:	eb 0e                	jmp    f011c37b <test_kfree_bestfirstfit+0x23b>
			{
				ptr[i] = 3 ;
f011c36d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c370:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c373:	01 d0                	add    %edx,%eax
f011c375:	c6 00 03             	movb   $0x3,(%eax)
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			//		if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[3] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[3];
			for (i = 0; i < lastIndices[3]; ++i)
f011c378:	ff 45 f4             	incl   -0xc(%ebp)
f011c37b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c381:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c384:	7f e7                	jg     f011c36d <test_kfree_bestfirstfit+0x22d>
		}

		//[PAGE ALLOCATOR]
		{
			//2 MB
			freeFrames = sys_calculate_free_frames() ;
f011c386:	e8 7e 16 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c38b:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011c38e:	e8 ad 84 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c393:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011c396:	83 ec 0c             	sub    $0xc,%esp
f011c399:	68 00 fc 1f 00       	push   $0x1ffc00
f011c39e:	e8 13 c7 fe ff       	call   f0108ab6 <kmalloc>
f011c3a3:	83 c4 10             	add    $0x10,%esp
f011c3a6:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
			if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011c3ac:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c3b2:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011c3b7:	74 17                	je     f011c3d0 <test_kfree_bestfirstfit+0x290>
f011c3b9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c3c0:	83 ec 0c             	sub    $0xc,%esp
f011c3c3:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011c3c8:	e8 9f 4b fe ff       	call   f0100f6c <cprintf>
f011c3cd:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c3d0:	e8 6b 84 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c3d5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c3d8:	74 17                	je     f011c3f1 <test_kfree_bestfirstfit+0x2b1>
f011c3da:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c3e1:	83 ec 0c             	sub    $0xc,%esp
f011c3e4:	68 20 e6 12 f0       	push   $0xf012e620
f011c3e9:	e8 7e 4b fe ff       	call   f0100f6c <cprintf>
f011c3ee:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011c3f1:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011c3f4:	e8 10 16 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c3f9:	29 c3                	sub    %eax,%ebx
f011c3fb:	89 d8                	mov    %ebx,%eax
f011c3fd:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011c402:	77 17                	ja     f011c41b <test_kfree_bestfirstfit+0x2db>
f011c404:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c40b:	83 ec 0c             	sub    $0xc,%esp
f011c40e:	68 8c e6 12 f0       	push   $0xf012e68c
f011c413:	e8 54 4b fe ff       	call   f0100f6c <cprintf>
f011c418:	83 c4 10             	add    $0x10,%esp
			lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011c41b:	c7 85 68 ff ff ff ff 	movl   $0x1ffbff,-0x98(%ebp)
f011c422:	fb 1f 00 

			//2 MB
			freeFrames = sys_calculate_free_frames() ;
f011c425:	e8 df 15 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c42a:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011c42d:	e8 0e 84 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c432:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011c435:	83 ec 0c             	sub    $0xc,%esp
f011c438:	68 00 fc 1f 00       	push   $0x1ffc00
f011c43d:	e8 74 c6 fe ff       	call   f0108ab6 <kmalloc>
f011c442:	83 c4 10             	add    $0x10,%esp
f011c445:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
			if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011c44b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011c451:	3d 00 10 20 f8       	cmp    $0xf8201000,%eax
f011c456:	74 17                	je     f011c46f <test_kfree_bestfirstfit+0x32f>
f011c458:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c45f:	83 ec 0c             	sub    $0xc,%esp
f011c462:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011c467:	e8 00 4b fe ff       	call   f0100f6c <cprintf>
f011c46c:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c46f:	e8 cc 83 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c474:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c477:	74 17                	je     f011c490 <test_kfree_bestfirstfit+0x350>
f011c479:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c480:	83 ec 0c             	sub    $0xc,%esp
f011c483:	68 20 e6 12 f0       	push   $0xf012e620
f011c488:	e8 df 4a fe ff       	call   f0100f6c <cprintf>
f011c48d:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011c490:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011c493:	e8 71 15 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c498:	29 c3                	sub    %eax,%ebx
f011c49a:	89 d8                	mov    %ebx,%eax
f011c49c:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011c4a1:	77 17                	ja     f011c4ba <test_kfree_bestfirstfit+0x37a>
f011c4a3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c4aa:	83 ec 0c             	sub    $0xc,%esp
f011c4ad:	68 8c e6 12 f0       	push   $0xf012e68c
f011c4b2:	e8 b5 4a fe ff       	call   f0100f6c <cprintf>
f011c4b7:	83 c4 10             	add    $0x10,%esp
			lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011c4ba:	c7 85 6c ff ff ff ff 	movl   $0x1ffbff,-0x94(%ebp)
f011c4c1:	fb 1f 00 


			//7 KB
			freeFrames = sys_calculate_free_frames() ;
f011c4c4:	e8 40 15 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c4c9:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011c4cc:	e8 6f 83 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c4d1:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[4] = kmalloc(7*kilo);
f011c4d4:	83 ec 0c             	sub    $0xc,%esp
f011c4d7:	68 00 1c 00 00       	push   $0x1c00
f011c4dc:	e8 d5 c5 fe ff       	call   f0108ab6 <kmalloc>
f011c4e1:	83 c4 10             	add    $0x10,%esp
f011c4e4:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
			if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega /* + 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011c4ea:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c4f0:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011c4f5:	74 17                	je     f011c50e <test_kfree_bestfirstfit+0x3ce>
f011c4f7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c4fe:	83 ec 0c             	sub    $0xc,%esp
f011c501:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011c506:	e8 61 4a fe ff       	call   f0100f6c <cprintf>
f011c50b:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c50e:	e8 2d 83 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c513:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c516:	74 17                	je     f011c52f <test_kfree_bestfirstfit+0x3ef>
f011c518:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c51f:	83 ec 0c             	sub    $0xc,%esp
f011c522:	68 20 e6 12 f0       	push   $0xf012e620
f011c527:	e8 40 4a fe ff       	call   f0100f6c <cprintf>
f011c52c:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011c52f:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011c532:	e8 d2 14 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c537:	29 c3                	sub    %eax,%ebx
f011c539:	89 d8                	mov    %ebx,%eax
f011c53b:	83 f8 01             	cmp    $0x1,%eax
f011c53e:	77 17                	ja     f011c557 <test_kfree_bestfirstfit+0x417>
f011c540:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c547:	83 ec 0c             	sub    $0xc,%esp
f011c54a:	68 8c e6 12 f0       	push   $0xf012e68c
f011c54f:	e8 18 4a fe ff       	call   f0100f6c <cprintf>
f011c554:	83 c4 10             	add    $0x10,%esp
			lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011c557:	c7 85 78 ff ff ff ff 	movl   $0x1bff,-0x88(%ebp)
f011c55e:	1b 00 00 
			ptr = (char*)ptr_allocations[4];
f011c561:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c567:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[4]; ++i)
f011c56a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c571:	eb 0e                	jmp    f011c581 <test_kfree_bestfirstfit+0x441>
			{
				ptr[i] = 4 ;
f011c573:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c576:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c579:	01 d0                	add    %edx,%eax
f011c57b:	c6 00 04             	movb   $0x4,(%eax)
			if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega /* + 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			if ((freeFrames - sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[4] = (7*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[4];
			for (i = 0; i < lastIndices[4]; ++i)
f011c57e:	ff 45 f4             	incl   -0xc(%ebp)
f011c581:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c587:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c58a:	7f e7                	jg     f011c573 <test_kfree_bestfirstfit+0x433>
			{
				ptr[i] = 4 ;
			}

			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f011c58c:	e8 78 14 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c591:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011c594:	e8 a7 82 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c599:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011c59c:	83 ec 0c             	sub    $0xc,%esp
f011c59f:	68 00 fc 2f 00       	push   $0x2ffc00
f011c5a4:	e8 0d c5 fe ff       	call   f0108ab6 <kmalloc>
f011c5a9:	83 c4 10             	add    $0x10,%esp
f011c5ac:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
			if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011c5b2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c5b8:	3d 00 30 40 f8       	cmp    $0xf8403000,%eax
f011c5bd:	74 17                	je     f011c5d6 <test_kfree_bestfirstfit+0x496>
f011c5bf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c5c6:	83 ec 0c             	sub    $0xc,%esp
f011c5c9:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011c5ce:	e8 99 49 fe ff       	call   f0100f6c <cprintf>
f011c5d3:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c5d6:	e8 65 82 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c5db:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c5de:	74 17                	je     f011c5f7 <test_kfree_bestfirstfit+0x4b7>
f011c5e0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c5e7:	83 ec 0c             	sub    $0xc,%esp
f011c5ea:	68 20 e6 12 f0       	push   $0xf012e620
f011c5ef:	e8 78 49 fe ff       	call   f0100f6c <cprintf>
f011c5f4:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011c5f7:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011c5fa:	e8 0a 14 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c5ff:	29 c3                	sub    %eax,%ebx
f011c601:	89 d8                	mov    %ebx,%eax
f011c603:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011c608:	77 17                	ja     f011c621 <test_kfree_bestfirstfit+0x4e1>
f011c60a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c611:	83 ec 0c             	sub    $0xc,%esp
f011c614:	68 8c e6 12 f0       	push   $0xf012e68c
f011c619:	e8 4e 49 fe ff       	call   f0100f6c <cprintf>
f011c61e:	83 c4 10             	add    $0x10,%esp
			lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011c621:	c7 85 7c ff ff ff ff 	movl   $0x2ffbff,-0x84(%ebp)
f011c628:	fb 2f 00 
			ptr = (char*)ptr_allocations[5];
f011c62b:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c631:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[5]; ++i)
f011c634:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c63b:	eb 0e                	jmp    f011c64b <test_kfree_bestfirstfit+0x50b>
			{
				ptr[i] = 5 ;
f011c63d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c640:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c643:	01 d0                	add    %edx,%eax
f011c645:	c6 00 05             	movb   $0x5,(%eax)
			if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[5];
			for (i = 0; i < lastIndices[5]; ++i)
f011c648:	ff 45 f4             	incl   -0xc(%ebp)
f011c64b:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011c651:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c654:	7f e7                	jg     f011c63d <test_kfree_bestfirstfit+0x4fd>
			{
				ptr[i] = 5 ;
			}

			//6 MB
			freeFrames = sys_calculate_free_frames() ;
f011c656:	e8 ae 13 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c65b:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011c65e:	e8 dd 81 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c663:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011c666:	83 ec 0c             	sub    $0xc,%esp
f011c669:	68 00 fc 5f 00       	push   $0x5ffc00
f011c66e:	e8 43 c4 fe ff       	call   f0108ab6 <kmalloc>
f011c673:	83 c4 10             	add    $0x10,%esp
f011c676:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011c67c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c682:	3d 00 30 70 f8       	cmp    $0xf8703000,%eax
f011c687:	74 17                	je     f011c6a0 <test_kfree_bestfirstfit+0x560>
f011c689:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c690:	83 ec 0c             	sub    $0xc,%esp
f011c693:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011c698:	e8 cf 48 fe ff       	call   f0100f6c <cprintf>
f011c69d:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c6a0:	e8 9b 81 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c6a5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c6a8:	74 17                	je     f011c6c1 <test_kfree_bestfirstfit+0x581>
f011c6aa:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c6b1:	83 ec 0c             	sub    $0xc,%esp
f011c6b4:	68 20 e6 12 f0       	push   $0xf012e620
f011c6b9:	e8 ae 48 fe ff       	call   f0100f6c <cprintf>
f011c6be:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 1536) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011c6c1:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011c6c4:	e8 40 13 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c6c9:	29 c3                	sub    %eax,%ebx
f011c6cb:	89 d8                	mov    %ebx,%eax
f011c6cd:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011c6d2:	77 17                	ja     f011c6eb <test_kfree_bestfirstfit+0x5ab>
f011c6d4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c6db:	83 ec 0c             	sub    $0xc,%esp
f011c6de:	68 8c e6 12 f0       	push   $0xf012e68c
f011c6e3:	e8 84 48 fe ff       	call   f0100f6c <cprintf>
f011c6e8:	83 c4 10             	add    $0x10,%esp
			lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f011c6eb:	c7 45 80 ff fb 5f 00 	movl   $0x5ffbff,-0x80(%ebp)

			//14 KB
			freeFrames = sys_calculate_free_frames() ;
f011c6f2:	e8 12 13 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c6f7:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011c6fa:	e8 41 81 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c6ff:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[7] = kmalloc(14*kilo);
f011c702:	83 ec 0c             	sub    $0xc,%esp
f011c705:	68 00 38 00 00       	push   $0x3800
f011c70a:	e8 a7 c3 fe ff       	call   f0108ab6 <kmalloc>
f011c70f:	83 c4 10             	add    $0x10,%esp
f011c712:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
			if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011c718:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c71e:	3d 00 30 d0 f8       	cmp    $0xf8d03000,%eax
f011c723:	74 17                	je     f011c73c <test_kfree_bestfirstfit+0x5fc>
f011c725:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c72c:	83 ec 0c             	sub    $0xc,%esp
f011c72f:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011c734:	e8 33 48 fe ff       	call   f0100f6c <cprintf>
f011c739:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c73c:	e8 ff 80 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c741:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c744:	74 17                	je     f011c75d <test_kfree_bestfirstfit+0x61d>
f011c746:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c74d:	83 ec 0c             	sub    $0xc,%esp
f011c750:	68 20 e6 12 f0       	push   $0xf012e620
f011c755:	e8 12 48 fe ff       	call   f0100f6c <cprintf>
f011c75a:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011c75d:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011c760:	e8 a4 12 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c765:	29 c3                	sub    %eax,%ebx
f011c767:	89 d8                	mov    %ebx,%eax
f011c769:	83 f8 03             	cmp    $0x3,%eax
f011c76c:	77 17                	ja     f011c785 <test_kfree_bestfirstfit+0x645>
f011c76e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c775:	83 ec 0c             	sub    $0xc,%esp
f011c778:	68 8c e6 12 f0       	push   $0xf012e68c
f011c77d:	e8 ea 47 fe ff       	call   f0100f6c <cprintf>
f011c782:	83 c4 10             	add    $0x10,%esp
			lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f011c785:	c7 45 84 ff 37 00 00 	movl   $0x37ff,-0x7c(%ebp)
			ptr = (char*)ptr_allocations[7];
f011c78c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c792:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[7]; ++i)
f011c795:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c79c:	eb 0e                	jmp    f011c7ac <test_kfree_bestfirstfit+0x66c>
			{
				ptr[i] = 7 ;
f011c79e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c7a1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c7a4:	01 d0                	add    %edx,%eax
f011c7a6:	c6 00 07             	movb   $0x7,(%eax)
			if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			if ((freeFrames - sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[7] = (14*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[7];
			for (i = 0; i < lastIndices[7]; ++i)
f011c7a9:	ff 45 f4             	incl   -0xc(%ebp)
f011c7ac:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011c7af:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c7b2:	7f ea                	jg     f011c79e <test_kfree_bestfirstfit+0x65e>
	}

	//kfree some of the allocated spaces [10%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011c7b4:	e8 50 12 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c7b9:	89 45 bc             	mov    %eax,-0x44(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011c7bc:	e8 7f 80 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c7c1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		kfree(ptr_allocations[0]);
f011c7c4:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c7ca:	83 ec 0c             	sub    $0xc,%esp
f011c7cd:	50                   	push   %eax
f011c7ce:	e8 fd c2 fe ff       	call   f0108ad0 <kfree>
f011c7d3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c7d6:	e8 65 80 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c7db:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011c7de:	74 17                	je     f011c7f7 <test_kfree_bestfirstfit+0x6b7>
f011c7e0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c7e7:	83 ec 0c             	sub    $0xc,%esp
f011c7ea:	68 20 e6 12 f0       	push   $0xf012e620
f011c7ef:	e8 78 47 fe ff       	call   f0100f6c <cprintf>
f011c7f4:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512 ) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011c7f7:	e8 0d 12 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c7fc:	89 c2                	mov    %eax,%edx
f011c7fe:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c801:	29 c2                	sub    %eax,%edx
f011c803:	89 d0                	mov    %edx,%eax
f011c805:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011c80a:	77 17                	ja     f011c823 <test_kfree_bestfirstfit+0x6e3>
f011c80c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c813:	83 ec 0c             	sub    $0xc,%esp
f011c816:	68 24 ea 12 f0       	push   $0xf012ea24
f011c81b:	e8 4c 47 fe ff       	call   f0100f6c <cprintf>
f011c820:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011c823:	e8 e1 11 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c828:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c82b:	e8 10 80 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c830:	89 45 b8             	mov    %eax,-0x48(%ebp)
		kfree(ptr_allocations[2]);
f011c833:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c839:	83 ec 0c             	sub    $0xc,%esp
f011c83c:	50                   	push   %eax
f011c83d:	e8 8e c2 fe ff       	call   f0108ad0 <kfree>
f011c842:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c845:	e8 f6 7f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c84a:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011c84d:	74 17                	je     f011c866 <test_kfree_bestfirstfit+0x726>
f011c84f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c856:	83 ec 0c             	sub    $0xc,%esp
f011c859:	68 20 e6 12 f0       	push   $0xf012e620
f011c85e:	e8 09 47 fe ff       	call   f0100f6c <cprintf>
f011c863:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0 ) { correct = 0; cprintf("Wrong free: freeing a block from the dynamic allocator should not affect the free frames\n"); }
f011c866:	e8 9e 11 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c86b:	89 c2                	mov    %eax,%edx
f011c86d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c870:	39 c2                	cmp    %eax,%edx
f011c872:	74 17                	je     f011c88b <test_kfree_bestfirstfit+0x74b>
f011c874:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c87b:	83 ec 0c             	sub    $0xc,%esp
f011c87e:	68 2c e9 12 f0       	push   $0xf012e92c
f011c883:	e8 e4 46 fe ff       	call   f0100f6c <cprintf>
f011c888:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c88b:	e8 79 11 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c890:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c893:	e8 a8 7f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c898:	89 45 b8             	mov    %eax,-0x48(%ebp)
		kfree(ptr_allocations[1]);
f011c89b:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011c8a1:	83 ec 0c             	sub    $0xc,%esp
f011c8a4:	50                   	push   %eax
f011c8a5:	e8 26 c2 fe ff       	call   f0108ad0 <kfree>
f011c8aa:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c8ad:	e8 8e 7f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c8b2:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011c8b5:	74 17                	je     f011c8ce <test_kfree_bestfirstfit+0x78e>
f011c8b7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c8be:	83 ec 0c             	sub    $0xc,%esp
f011c8c1:	68 20 e6 12 f0       	push   $0xf012e620
f011c8c6:	e8 a1 46 fe ff       	call   f0100f6c <cprintf>
f011c8cb:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011c8ce:	e8 36 11 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c8d3:	89 c2                	mov    %eax,%edx
f011c8d5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c8d8:	29 c2                	sub    %eax,%edx
f011c8da:	89 d0                	mov    %edx,%eax
f011c8dc:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011c8e1:	77 17                	ja     f011c8fa <test_kfree_bestfirstfit+0x7ba>
f011c8e3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c8ea:	83 ec 0c             	sub    $0xc,%esp
f011c8ed:	68 24 ea 12 f0       	push   $0xf012ea24
f011c8f2:	e8 75 46 fe ff       	call   f0100f6c <cprintf>
f011c8f7:	83 c4 10             	add    $0x10,%esp

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011c8fa:	e8 0a 11 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c8ff:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c902:	e8 39 7f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c907:	89 45 b8             	mov    %eax,-0x48(%ebp)
		kfree(ptr_allocations[6]);
f011c90a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c910:	83 ec 0c             	sub    $0xc,%esp
f011c913:	50                   	push   %eax
f011c914:	e8 b7 c1 fe ff       	call   f0108ad0 <kfree>
f011c919:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c91c:	e8 1f 7f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c921:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011c924:	74 17                	je     f011c93d <test_kfree_bestfirstfit+0x7fd>
f011c926:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c92d:	83 ec 0c             	sub    $0xc,%esp
f011c930:	68 20 e6 12 f0       	push   $0xf012e620
f011c935:	e8 32 46 fe ff       	call   f0100f6c <cprintf>
f011c93a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 6*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011c93d:	e8 c7 10 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c942:	89 c2                	mov    %eax,%edx
f011c944:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c947:	29 c2                	sub    %eax,%edx
f011c949:	89 d0                	mov    %edx,%eax
f011c94b:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011c950:	77 17                	ja     f011c969 <test_kfree_bestfirstfit+0x829>
f011c952:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c959:	83 ec 0c             	sub    $0xc,%esp
f011c95c:	68 24 ea 12 f0       	push   $0xf012ea24
f011c961:	e8 06 46 fe ff       	call   f0100f6c <cprintf>
f011c966:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011c969:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011c96d:	74 04                	je     f011c973 <test_kfree_bestfirstfit+0x833>
f011c96f:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)

	correct = 1 ;
f011c973:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//Check memory access after kfree [10%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f011c97a:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c980:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011c983:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c98a:	eb 1e                	jmp    f011c9aa <test_kfree_bestfirstfit+0x86a>
		{
			sums[3] += ptr[i] ;
f011c98c:	8b 95 24 ff ff ff    	mov    -0xdc(%ebp),%edx
f011c992:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011c995:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c998:	01 c8                	add    %ecx,%eax
f011c99a:	8a 00                	mov    (%eax),%al
f011c99c:	0f be c0             	movsbl %al,%eax
f011c99f:	01 d0                	add    %edx,%eax
f011c9a1:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	correct = 1 ;
	//Check memory access after kfree [10%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011c9a7:	ff 45 f4             	incl   -0xc(%ebp)
f011c9aa:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c9b0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c9b3:	7f d7                	jg     f011c98c <test_kfree_bestfirstfit+0x84c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }
f011c9b5:	8b 95 24 ff ff ff    	mov    -0xdc(%ebp),%edx
f011c9bb:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c9c1:	89 c1                	mov    %eax,%ecx
f011c9c3:	01 c9                	add    %ecx,%ecx
f011c9c5:	01 c8                	add    %ecx,%eax
f011c9c7:	39 c2                	cmp    %eax,%edx
f011c9c9:	74 17                	je     f011c9e2 <test_kfree_bestfirstfit+0x8a2>
f011c9cb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c9d2:	83 ec 0c             	sub    $0xc,%esp
f011c9d5:	68 5c ea 12 f0       	push   $0xf012ea5c
f011c9da:	e8 8d 45 fe ff       	call   f0100f6c <cprintf>
f011c9df:	83 c4 10             	add    $0x10,%esp

		//7 KB
		ptr = (char*)ptr_allocations[4];
f011c9e2:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c9e8:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011c9eb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c9f2:	eb 1e                	jmp    f011ca12 <test_kfree_bestfirstfit+0x8d2>
		{
			sums[4] += ptr[i] ;
f011c9f4:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f011c9fa:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011c9fd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ca00:	01 c8                	add    %ecx,%eax
f011ca02:	8a 00                	mov    (%eax),%al
f011ca04:	0f be c0             	movsbl %al,%eax
f011ca07:	01 d0                	add    %edx,%eax
f011ca09:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011ca0f:	ff 45 f4             	incl   -0xc(%ebp)
f011ca12:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ca18:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ca1b:	7f d7                	jg     f011c9f4 <test_kfree_bestfirstfit+0x8b4>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }
f011ca1d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011ca23:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f011ca29:	c1 e2 02             	shl    $0x2,%edx
f011ca2c:	39 d0                	cmp    %edx,%eax
f011ca2e:	74 17                	je     f011ca47 <test_kfree_bestfirstfit+0x907>
f011ca30:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ca37:	83 ec 0c             	sub    $0xc,%esp
f011ca3a:	68 5c ea 12 f0       	push   $0xf012ea5c
f011ca3f:	e8 28 45 fe ff       	call   f0100f6c <cprintf>
f011ca44:	83 c4 10             	add    $0x10,%esp

		//3 MB
		ptr = (char*)ptr_allocations[5];
f011ca47:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011ca4d:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011ca50:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ca57:	eb 1e                	jmp    f011ca77 <test_kfree_bestfirstfit+0x937>
		{
			sums[5] += ptr[i] ;
f011ca59:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f011ca5f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011ca62:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ca65:	01 c8                	add    %ecx,%eax
f011ca67:	8a 00                	mov    (%eax),%al
f011ca69:	0f be c0             	movsbl %al,%eax
f011ca6c:	01 d0                	add    %edx,%eax
f011ca6e:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011ca74:	ff 45 f4             	incl   -0xc(%ebp)
f011ca77:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ca7d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ca80:	7f d7                	jg     f011ca59 <test_kfree_bestfirstfit+0x919>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }
f011ca82:	8b 8d 2c ff ff ff    	mov    -0xd4(%ebp),%ecx
f011ca88:	8b 95 7c ff ff ff    	mov    -0x84(%ebp),%edx
f011ca8e:	89 d0                	mov    %edx,%eax
f011ca90:	c1 e0 02             	shl    $0x2,%eax
f011ca93:	01 d0                	add    %edx,%eax
f011ca95:	39 c1                	cmp    %eax,%ecx
f011ca97:	74 17                	je     f011cab0 <test_kfree_bestfirstfit+0x970>
f011ca99:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011caa0:	83 ec 0c             	sub    $0xc,%esp
f011caa3:	68 5c ea 12 f0       	push   $0xf012ea5c
f011caa8:	e8 bf 44 fe ff       	call   f0100f6c <cprintf>
f011caad:	83 c4 10             	add    $0x10,%esp

		//14 KB
		ptr = (char*)ptr_allocations[7];
f011cab0:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011cab6:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011cab9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011cac0:	eb 1e                	jmp    f011cae0 <test_kfree_bestfirstfit+0x9a0>
		{
			sums[7] += ptr[i] ;
f011cac2:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f011cac8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011cacb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cace:	01 c8                	add    %ecx,%eax
f011cad0:	8a 00                	mov    (%eax),%al
f011cad2:	0f be c0             	movsbl %al,%eax
f011cad5:	01 d0                	add    %edx,%eax
f011cad7:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011cadd:	ff 45 f4             	incl   -0xc(%ebp)
f011cae0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011cae3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011cae6:	7f da                	jg     f011cac2 <test_kfree_bestfirstfit+0x982>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }
f011cae8:	8b 8d 34 ff ff ff    	mov    -0xcc(%ebp),%ecx
f011caee:	8b 55 84             	mov    -0x7c(%ebp),%edx
f011caf1:	89 d0                	mov    %edx,%eax
f011caf3:	01 c0                	add    %eax,%eax
f011caf5:	01 d0                	add    %edx,%eax
f011caf7:	01 c0                	add    %eax,%eax
f011caf9:	01 d0                	add    %edx,%eax
f011cafb:	39 c1                	cmp    %eax,%ecx
f011cafd:	74 17                	je     f011cb16 <test_kfree_bestfirstfit+0x9d6>
f011caff:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cb06:	83 ec 0c             	sub    $0xc,%esp
f011cb09:	68 5c ea 12 f0       	push   $0xf012ea5c
f011cb0e:	e8 59 44 fe ff       	call   f0100f6c <cprintf>
f011cb13:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011cb16:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cb1a:	74 04                	je     f011cb20 <test_kfree_bestfirstfit+0x9e0>
f011cb1c:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)

	correct = 1 ;
f011cb20:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011cb27:	e8 dd 0e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cb2c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cb2f:	e8 0c 7d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cb34:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f011cb37:	83 ec 0c             	sub    $0xc,%esp
f011cb3a:	68 00 00 30 00       	push   $0x300000
f011cb3f:	e8 72 bf fe ff       	call   f0108ab6 <kmalloc>
f011cb44:	83 c4 10             	add    $0x10,%esp
f011cb47:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011cb4d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011cb53:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011cb58:	74 17                	je     f011cb71 <test_kfree_bestfirstfit+0xa31>
f011cb5a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cb61:	83 ec 0c             	sub    $0xc,%esp
f011cb64:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011cb69:	e8 fe 43 fe ff       	call   f0100f6c <cprintf>
f011cb6e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cb71:	e8 ca 7c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cb76:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011cb79:	74 17                	je     f011cb92 <test_kfree_bestfirstfit+0xa52>
f011cb7b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cb82:	83 ec 0c             	sub    $0xc,%esp
f011cb85:	68 20 e6 12 f0       	push   $0xf012e620
f011cb8a:	e8 dd 43 fe ff       	call   f0100f6c <cprintf>
f011cb8f:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011cb92:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011cb95:	e8 6f 0e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cb9a:	29 c3                	sub    %eax,%ebx
f011cb9c:	89 d8                	mov    %ebx,%eax
f011cb9e:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011cba3:	77 17                	ja     f011cbbc <test_kfree_bestfirstfit+0xa7c>
f011cba5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cbac:	83 ec 0c             	sub    $0xc,%esp
f011cbaf:	68 8c e6 12 f0       	push   $0xf012e68c
f011cbb4:	e8 b3 43 fe ff       	call   f0100f6c <cprintf>
f011cbb9:	83 c4 10             	add    $0x10,%esp
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f011cbbc:	c7 45 88 ff ff 2f 00 	movl   $0x2fffff,-0x78(%ebp)
		ptr = (char*)ptr_allocations[8];
f011cbc3:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011cbc9:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f011cbcc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011cbd3:	eb 0e                	jmp    f011cbe3 <test_kfree_bestfirstfit+0xaa3>
		{
			ptr[i] = 8 ;
f011cbd5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cbd8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cbdb:	01 d0                	add    %edx,%eax
f011cbdd:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f011cbe0:	ff 45 f4             	incl   -0xc(%ebp)
f011cbe3:	8b 45 88             	mov    -0x78(%ebp),%eax
f011cbe6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011cbe9:	7f ea                	jg     f011cbd5 <test_kfree_bestfirstfit+0xa95>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cbeb:	e8 19 0e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cbf0:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cbf3:	e8 48 7c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cbf8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f011cbfb:	83 ec 0c             	sub    $0xc,%esp
f011cbfe:	68 00 00 10 00       	push   $0x100000
f011cc03:	e8 ae be fe ff       	call   f0108ab6 <kmalloc>
f011cc08:	83 c4 10             	add    $0x10,%esp
f011cc0b:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega /*+ 4*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011cc11:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011cc17:	3d 00 10 30 f8       	cmp    $0xf8301000,%eax
f011cc1c:	74 17                	je     f011cc35 <test_kfree_bestfirstfit+0xaf5>
f011cc1e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cc25:	83 ec 0c             	sub    $0xc,%esp
f011cc28:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011cc2d:	e8 3a 43 fe ff       	call   f0100f6c <cprintf>
f011cc32:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cc35:	e8 06 7c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cc3a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011cc3d:	74 17                	je     f011cc56 <test_kfree_bestfirstfit+0xb16>
f011cc3f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cc46:	83 ec 0c             	sub    $0xc,%esp
f011cc49:	68 20 e6 12 f0       	push   $0xf012e620
f011cc4e:	e8 19 43 fe ff       	call   f0100f6c <cprintf>
f011cc53:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011cc56:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011cc59:	e8 ab 0d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cc5e:	29 c3                	sub    %eax,%ebx
f011cc60:	89 d8                	mov    %ebx,%eax
f011cc62:	3d ff 00 00 00       	cmp    $0xff,%eax
f011cc67:	77 17                	ja     f011cc80 <test_kfree_bestfirstfit+0xb40>
f011cc69:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cc70:	83 ec 0c             	sub    $0xc,%esp
f011cc73:	68 8c e6 12 f0       	push   $0xf012e68c
f011cc78:	e8 ef 42 fe ff       	call   f0100f6c <cprintf>
f011cc7d:	83 c4 10             	add    $0x10,%esp
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f011cc80:	c7 45 90 ff ff 0f 00 	movl   $0xfffff,-0x70(%ebp)
		ptr = (char*)ptr_allocations[10];
f011cc87:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011cc8d:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f011cc90:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011cc97:	eb 0e                	jmp    f011cca7 <test_kfree_bestfirstfit+0xb67>
		{
			ptr[i] = 10 ;
f011cc99:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cc9c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cc9f:	01 d0                	add    %edx,%eax
f011cca1:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega /*+ 4*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f011cca4:	ff 45 f4             	incl   -0xc(%ebp)
f011cca7:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ccaa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ccad:	7f ea                	jg     f011cc99 <test_kfree_bestfirstfit+0xb59>
		{
			ptr[i] = 10 ;
		}

		//1 KB [Should be allocated in 1st hole in the Dynamic Allocator]
		freeFrames = sys_calculate_free_frames() ;
f011ccaf:	e8 55 0d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ccb4:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ccb7:	e8 84 7b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ccbc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[9] = kmalloc(1*kilo);
f011ccbf:	83 ec 0c             	sub    $0xc,%esp
f011ccc2:	68 00 04 00 00       	push   $0x400
f011ccc7:	e8 ea bd fe ff       	call   f0108ab6 <kmalloc>
f011cccc:	83 c4 10             	add    $0x10,%esp
f011cccf:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((ptr_allocations[9] < ptr_allocations[2]) || (ptr_allocations[9] > (ptr_allocations[2] + 1*kilo)))
f011ccd5:	8b 95 ec fe ff ff    	mov    -0x114(%ebp),%edx
f011ccdb:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cce1:	39 c2                	cmp    %eax,%edx
f011cce3:	72 16                	jb     f011ccfb <test_kfree_bestfirstfit+0xbbb>
f011cce5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011cceb:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011ccf1:	81 c2 00 04 00 00    	add    $0x400,%edx
f011ccf7:	39 d0                	cmp    %edx,%eax
f011ccf9:	76 17                	jbe    f011cd12 <test_kfree_bestfirstfit+0xbd2>
		{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011ccfb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cd02:	83 ec 0c             	sub    $0xc,%esp
f011cd05:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011cd0a:	e8 5d 42 fe ff       	call   f0100f6c <cprintf>
f011cd0f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cd12:	e8 29 7b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cd17:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011cd1a:	74 17                	je     f011cd33 <test_kfree_bestfirstfit+0xbf3>
f011cd1c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cd23:	83 ec 0c             	sub    $0xc,%esp
f011cd26:	68 20 e6 12 f0       	push   $0xf012e620
f011cd2b:	e8 3c 42 fe ff       	call   f0100f6c <cprintf>
f011cd30:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
f011cd33:	e8 d1 0c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cd38:	89 c2                	mov    %eax,%edx
f011cd3a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cd3d:	39 c2                	cmp    %eax,%edx
f011cd3f:	74 17                	je     f011cd58 <test_kfree_bestfirstfit+0xc18>
f011cd41:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cd48:	83 ec 0c             	sub    $0xc,%esp
f011cd4b:	68 90 ea 12 f0       	push   $0xf012ea90
f011cd50:	e8 17 42 fe ff       	call   f0100f6c <cprintf>
f011cd55:	83 c4 10             	add    $0x10,%esp
		lastIndices[9] = (1*kilo)/sizeof(char) - 1;
f011cd58:	c7 45 8c ff 03 00 00 	movl   $0x3ff,-0x74(%ebp)
		ptr = (char*)ptr_allocations[9];
f011cd5f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011cd65:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f011cd68:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011cd6f:	eb 0e                	jmp    f011cd7f <test_kfree_bestfirstfit+0xc3f>
		{
			ptr[i] = 9 ;
f011cd71:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cd74:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cd77:	01 d0                	add    %edx,%eax
f011cd79:	c6 00 09             	movb   $0x9,(%eax)
		{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
		lastIndices[9] = (1*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f011cd7c:	ff 45 f4             	incl   -0xc(%ebp)
f011cd7f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011cd82:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011cd85:	7f ea                	jg     f011cd71 <test_kfree_bestfirstfit+0xc31>
		{
			ptr[i] = 9 ;
		}

	}
	if (correct)	eval+=15 ;
f011cd87:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cd8b:	74 04                	je     f011cd91 <test_kfree_bestfirstfit+0xc51>
f011cd8d:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)

	correct = 1 ;
f011cd91:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//kfree remaining allocated spaces [15%]
	{
		//kfree 3 MB [PAGE ALLOCATOR: Should be Merged with NEXT 6 MB hole - total = 9MB]
		freeFrames = sys_calculate_free_frames() ;
f011cd98:	e8 6c 0c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cd9d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cda0:	e8 9b 7a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cda5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[5]);
f011cda8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011cdae:	83 ec 0c             	sub    $0xc,%esp
f011cdb1:	50                   	push   %eax
f011cdb2:	e8 19 bd fe ff       	call   f0108ad0 <kfree>
f011cdb7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cdba:	e8 81 7a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cdbf:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011cdc2:	74 17                	je     f011cddb <test_kfree_bestfirstfit+0xc9b>
f011cdc4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cdcb:	83 ec 0c             	sub    $0xc,%esp
f011cdce:	68 20 e6 12 f0       	push   $0xf012e620
f011cdd3:	e8 94 41 fe ff       	call   f0100f6c <cprintf>
f011cdd8:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 3*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011cddb:	e8 29 0c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cde0:	89 c2                	mov    %eax,%edx
f011cde2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cde5:	29 c2                	sub    %eax,%edx
f011cde7:	89 d0                	mov    %edx,%eax
f011cde9:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011cdee:	77 17                	ja     f011ce07 <test_kfree_bestfirstfit+0xcc7>
f011cdf0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cdf7:	83 ec 0c             	sub    $0xc,%esp
f011cdfa:	68 24 ea 12 f0       	push   $0xf012ea24
f011cdff:	e8 68 41 fe ff       	call   f0100f6c <cprintf>
f011ce04:	83 c4 10             	add    $0x10,%esp

		//kfree 7 KB [PAGE ALLOCATOR: Should be Merged with NEXT 9 MB hole - total = 9MB + 8KB]
		freeFrames = sys_calculate_free_frames() ;
f011ce07:	e8 fd 0b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ce0c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce0f:	e8 2c 7a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ce14:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[4]);
f011ce17:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ce1d:	83 ec 0c             	sub    $0xc,%esp
f011ce20:	50                   	push   %eax
f011ce21:	e8 aa bc fe ff       	call   f0108ad0 <kfree>
f011ce26:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ce29:	e8 12 7a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ce2e:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011ce31:	74 17                	je     f011ce4a <test_kfree_bestfirstfit+0xd0a>
f011ce33:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ce3a:	83 ec 0c             	sub    $0xc,%esp
f011ce3d:	68 20 e6 12 f0       	push   $0xf012e620
f011ce42:	e8 25 41 fe ff       	call   f0100f6c <cprintf>
f011ce47:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 2) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011ce4a:	e8 ba 0b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ce4f:	89 c2                	mov    %eax,%edx
f011ce51:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ce54:	29 c2                	sub    %eax,%edx
f011ce56:	89 d0                	mov    %edx,%eax
f011ce58:	83 f8 01             	cmp    $0x1,%eax
f011ce5b:	77 17                	ja     f011ce74 <test_kfree_bestfirstfit+0xd34>
f011ce5d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ce64:	83 ec 0c             	sub    $0xc,%esp
f011ce67:	68 24 ea 12 f0       	push   $0xf012ea24
f011ce6c:	e8 fb 40 fe ff       	call   f0100f6c <cprintf>
f011ce71:	83 c4 10             	add    $0x10,%esp

		//kfree 1 KB [DYNAMIC ALLOCATOR]
		freeFrames = sys_calculate_free_frames() ;
f011ce74:	e8 90 0b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ce79:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce7c:	e8 bf 79 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ce81:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[9]);
f011ce84:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011ce8a:	83 ec 0c             	sub    $0xc,%esp
f011ce8d:	50                   	push   %eax
f011ce8e:	e8 3d bc fe ff       	call   f0108ad0 <kfree>
f011ce93:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ce96:	e8 a5 79 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ce9b:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011ce9e:	74 17                	je     f011ceb7 <test_kfree_bestfirstfit+0xd77>
f011cea0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cea7:	83 ec 0c             	sub    $0xc,%esp
f011ceaa:	68 20 e6 12 f0       	push   $0xf012e620
f011ceaf:	e8 b8 40 fe ff       	call   f0100f6c <cprintf>
f011ceb4:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011ceb7:	e8 4d 0b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cebc:	89 c2                	mov    %eax,%edx
f011cebe:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cec1:	39 c2                	cmp    %eax,%edx
f011cec3:	74 17                	je     f011cedc <test_kfree_bestfirstfit+0xd9c>
f011cec5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cecc:	83 ec 0c             	sub    $0xc,%esp
f011cecf:	68 24 ea 12 f0       	push   $0xf012ea24
f011ced4:	e8 93 40 fe ff       	call   f0100f6c <cprintf>
f011ced9:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB [DYNAMIC ALLOCATOR: Should be Merged with PREV remaining area of 2KB & NEXT free space]
		freeFrames = sys_calculate_free_frames() ;
f011cedc:	e8 28 0b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cee1:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cee4:	e8 57 79 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cee9:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[3]);
f011ceec:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011cef2:	83 ec 0c             	sub    $0xc,%esp
f011cef5:	50                   	push   %eax
f011cef6:	e8 d5 bb fe ff       	call   f0108ad0 <kfree>
f011cefb:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cefe:	e8 3d 79 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cf03:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011cf06:	74 17                	je     f011cf1f <test_kfree_bestfirstfit+0xddf>
f011cf08:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cf0f:	83 ec 0c             	sub    $0xc,%esp
f011cf12:	68 20 e6 12 f0       	push   $0xf012e620
f011cf17:	e8 50 40 fe ff       	call   f0100f6c <cprintf>
f011cf1c:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) { correct = 0; cprintf("Wrong free: freeing a block from the dynamic allocator should not affect the free frames\n"); }
f011cf1f:	e8 e5 0a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cf24:	89 c2                	mov    %eax,%edx
f011cf26:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cf29:	39 c2                	cmp    %eax,%edx
f011cf2b:	74 17                	je     f011cf44 <test_kfree_bestfirstfit+0xe04>
f011cf2d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cf34:	83 ec 0c             	sub    $0xc,%esp
f011cf37:	68 2c e9 12 f0       	push   $0xf012e92c
f011cf3c:	e8 2b 40 fe ff       	call   f0100f6c <cprintf>
f011cf41:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB [PAGE ALLOCATOR: Should be Merged with PREV 9MB + 8KB hole - total = 9MB + 24KB]
		freeFrames = sys_calculate_free_frames() ;
f011cf44:	e8 c0 0a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cf49:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf4c:	e8 ef 78 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cf51:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[7]);
f011cf54:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011cf5a:	83 ec 0c             	sub    $0xc,%esp
f011cf5d:	50                   	push   %eax
f011cf5e:	e8 6d bb fe ff       	call   f0108ad0 <kfree>
f011cf63:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cf66:	e8 d5 78 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cf6b:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011cf6e:	74 17                	je     f011cf87 <test_kfree_bestfirstfit+0xe47>
f011cf70:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cf77:	83 ec 0c             	sub    $0xc,%esp
f011cf7a:	68 20 e6 12 f0       	push   $0xf012e620
f011cf7f:	e8 e8 3f fe ff       	call   f0100f6c <cprintf>
f011cf84:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 4) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011cf87:	e8 7d 0a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cf8c:	89 c2                	mov    %eax,%edx
f011cf8e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cf91:	29 c2                	sub    %eax,%edx
f011cf93:	89 d0                	mov    %edx,%eax
f011cf95:	83 f8 03             	cmp    $0x3,%eax
f011cf98:	77 17                	ja     f011cfb1 <test_kfree_bestfirstfit+0xe71>
f011cf9a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cfa1:	83 ec 0c             	sub    $0xc,%esp
f011cfa4:	68 24 ea 12 f0       	push   $0xf012ea24
f011cfa9:	e8 be 3f fe ff       	call   f0100f6c <cprintf>
f011cfae:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB [PAGE ALLOCATOR: Should be Merged with NEXT remaining hole ]
		freeFrames = sys_calculate_free_frames() ;
f011cfb1:	e8 53 0a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cfb6:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cfb9:	e8 82 78 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cfbe:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[10]);
f011cfc1:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011cfc7:	83 ec 0c             	sub    $0xc,%esp
f011cfca:	50                   	push   %eax
f011cfcb:	e8 00 bb fe ff       	call   f0108ad0 <kfree>
f011cfd0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cfd3:	e8 68 78 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cfd8:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011cfdb:	74 17                	je     f011cff4 <test_kfree_bestfirstfit+0xeb4>
f011cfdd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cfe4:	83 ec 0c             	sub    $0xc,%esp
f011cfe7:	68 20 e6 12 f0       	push   $0xf012e620
f011cfec:	e8 7b 3f fe ff       	call   f0100f6c <cprintf>
f011cff1:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 1*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011cff4:	e8 10 0a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cff9:	89 c2                	mov    %eax,%edx
f011cffb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cffe:	29 c2                	sub    %eax,%edx
f011d000:	89 d0                	mov    %edx,%eax
f011d002:	3d ff 00 00 00       	cmp    $0xff,%eax
f011d007:	77 17                	ja     f011d020 <test_kfree_bestfirstfit+0xee0>
f011d009:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d010:	83 ec 0c             	sub    $0xc,%esp
f011d013:	68 24 ea 12 f0       	push   $0xf012ea24
f011d018:	e8 4f 3f fe ff       	call   f0100f6c <cprintf>
f011d01d:	83 c4 10             	add    $0x10,%esp

		//kfree 3 MB [PAGE ALLOCATOR: Should be Merged with PREV 9MB + 24KB hole & NEXT remaining hole - total = ALL PAGE ALLOCATOR Space]
		freeFrames = sys_calculate_free_frames() ;
f011d020:	e8 e4 09 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d025:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d028:	e8 13 78 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d02d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[8]);
f011d030:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011d036:	83 ec 0c             	sub    $0xc,%esp
f011d039:	50                   	push   %eax
f011d03a:	e8 91 ba fe ff       	call   f0108ad0 <kfree>
f011d03f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d042:	e8 f9 77 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d047:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011d04a:	74 17                	je     f011d063 <test_kfree_bestfirstfit+0xf23>
f011d04c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d053:	83 ec 0c             	sub    $0xc,%esp
f011d056:	68 20 e6 12 f0       	push   $0xf012e620
f011d05b:	e8 0c 3f fe ff       	call   f0100f6c <cprintf>
f011d060:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 3*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011d063:	e8 a1 09 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d068:	89 c2                	mov    %eax,%edx
f011d06a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d06d:	29 c2                	sub    %eax,%edx
f011d06f:	89 d0                	mov    %edx,%eax
f011d071:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011d076:	77 17                	ja     f011d08f <test_kfree_bestfirstfit+0xf4f>
f011d078:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d07f:	83 ec 0c             	sub    $0xc,%esp
f011d082:	68 24 ea 12 f0       	push   $0xf012ea24
f011d087:	e8 e0 3e fe ff       	call   f0100f6c <cprintf>
f011d08c:	83 c4 10             	add    $0x10,%esp

		//				if(start_freeFrames != (sys_calculate_free_frames())) {{ correct = 0; cprintf("Wrong kfree: not all pages removed correctly at end\n"); }}
	}
	if (correct)	eval+=15 ;
f011d08f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d093:	74 04                	je     f011d099 <test_kfree_bestfirstfit+0xf59>
f011d095:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)

	correct = 1 ;
f011d099:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f011d0a0:	83 ec 0c             	sub    $0xc,%esp
f011d0a3:	6a 03                	push   $0x3
f011d0a5:	e8 76 0d ff ff       	call   f010de20 <sys_bypassPageFault>
f011d0aa:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i <= 10; ++i)
f011d0ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d0b4:	e9 af 00 00 00       	jmp    f011d168 <test_kfree_bestfirstfit+0x1028>
		{
			//SKIP CHECKING THOSE IN DYNAMIC ALLOCATOR AREA
			if (i == 2 || i == 3 || i == 9)
f011d0b9:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f011d0bd:	0f 84 a1 00 00 00    	je     f011d164 <test_kfree_bestfirstfit+0x1024>
f011d0c3:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f011d0c7:	0f 84 97 00 00 00    	je     f011d164 <test_kfree_bestfirstfit+0x1024>
f011d0cd:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f011d0d1:	0f 84 8d 00 00 00    	je     f011d164 <test_kfree_bestfirstfit+0x1024>
			{
				continue;
			}
			ptr = (char *) ptr_allocations[i];
f011d0d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d0da:	8b 84 85 c8 fe ff ff 	mov    -0x138(%ebp,%eax,4),%eax
f011d0e1:	89 45 c0             	mov    %eax,-0x40(%ebp)
			ptr[0] = 10;
f011d0e4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d0e7:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0]))
f011d0ea:	e8 1f 0d ff ff       	call   f010de0e <sys_rcr2>
f011d0ef:	89 c2                	mov    %eax,%edx
f011d0f1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d0f4:	39 c2                	cmp    %eax,%edx
f011d0f6:	74 1d                	je     f011d115 <test_kfree_bestfirstfit+0xfd5>
				if (correct)
f011d0f8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d0fc:	74 17                	je     f011d115 <test_kfree_bestfirstfit+0xfd5>
				{ correct = 0; cprintf("kfree: successful access to freed space!! it should not be succeeded\n"); }
f011d0fe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d105:	83 ec 0c             	sub    $0xc,%esp
f011d108:	68 08 eb 12 f0       	push   $0xf012eb08
f011d10d:	e8 5a 3e fe ff       	call   f0100f6c <cprintf>
f011d112:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f011d115:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d118:	8b 84 85 68 ff ff ff 	mov    -0x98(%ebp,%eax,4),%eax
f011d11f:	89 c2                	mov    %eax,%edx
f011d121:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d124:	01 d0                	add    %edx,%eax
f011d126:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]]))
f011d129:	e8 e0 0c ff ff       	call   f010de0e <sys_rcr2>
f011d12e:	89 c2                	mov    %eax,%edx
f011d130:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d133:	8b 84 85 68 ff ff ff 	mov    -0x98(%ebp,%eax,4),%eax
f011d13a:	89 c1                	mov    %eax,%ecx
f011d13c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d13f:	01 c8                	add    %ecx,%eax
f011d141:	39 c2                	cmp    %eax,%edx
f011d143:	74 20                	je     f011d165 <test_kfree_bestfirstfit+0x1025>
				if (correct)
f011d145:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d149:	74 1a                	je     f011d165 <test_kfree_bestfirstfit+0x1025>
				{ correct = 0; cprintf("kfree: successful access to freed space!! it should not be succeeded\n"); }
f011d14b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d152:	83 ec 0c             	sub    $0xc,%esp
f011d155:	68 08 eb 12 f0       	push   $0xf012eb08
f011d15a:	e8 0d 3e fe ff       	call   f0100f6c <cprintf>
f011d15f:	83 c4 10             	add    $0x10,%esp
f011d162:	eb 01                	jmp    f011d165 <test_kfree_bestfirstfit+0x1025>
		for (i = 0; i <= 10; ++i)
		{
			//SKIP CHECKING THOSE IN DYNAMIC ALLOCATOR AREA
			if (i == 2 || i == 3 || i == 9)
			{
				continue;
f011d164:	90                   	nop
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i <= 10; ++i)
f011d165:	ff 45 f4             	incl   -0xc(%ebp)
f011d168:	83 7d f4 0a          	cmpl   $0xa,-0xc(%ebp)
f011d16c:	0f 8e 47 ff ff ff    	jle    f011d0b9 <test_kfree_bestfirstfit+0xf79>
				if (correct)
				{ correct = 0; cprintf("kfree: successful access to freed space!! it should not be succeeded\n"); }
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f011d172:	83 ec 0c             	sub    $0xc,%esp
f011d175:	6a 00                	push   $0x0
f011d177:	e8 a4 0c ff ff       	call   f010de20 <sys_bypassPageFault>
f011d17c:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=15 ;
f011d17f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d183:	74 04                	je     f011d189 <test_kfree_bestfirstfit+0x1049>
f011d185:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)

	correct = 1 ;
f011d189:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

	//Allocate after kfree ALL [30%]
	{
		//[DYNAMIC ALLOCATOR] Allocate in merged freed space
		//1 KB
		freeFrames = sys_calculate_free_frames() ;
f011d190:	e8 74 08 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d195:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d198:	e8 a3 76 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d19d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[11] = kmalloc(1*kilo);
f011d1a0:	83 ec 0c             	sub    $0xc,%esp
f011d1a3:	68 00 04 00 00       	push   $0x400
f011d1a8:	e8 09 b9 fe ff       	call   f0108ab6 <kmalloc>
f011d1ad:	83 c4 10             	add    $0x10,%esp
f011d1b0:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((ptr_allocations[11] < ptr_allocations[2]) || (ptr_allocations[11] > (ptr_allocations[2] + 1*kilo)))
f011d1b6:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f011d1bc:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d1c2:	39 c2                	cmp    %eax,%edx
f011d1c4:	72 16                	jb     f011d1dc <test_kfree_bestfirstfit+0x109c>
f011d1c6:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d1cc:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011d1d2:	81 c2 00 04 00 00    	add    $0x400,%edx
f011d1d8:	39 d0                	cmp    %edx,%eax
f011d1da:	76 17                	jbe    f011d1f3 <test_kfree_bestfirstfit+0x10b3>
		{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011d1dc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d1e3:	83 ec 0c             	sub    $0xc,%esp
f011d1e6:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011d1eb:	e8 7c 3d fe ff       	call   f0100f6c <cprintf>
f011d1f0:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d1f3:	e8 48 76 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d1f8:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011d1fb:	74 17                	je     f011d214 <test_kfree_bestfirstfit+0x10d4>
f011d1fd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d204:	83 ec 0c             	sub    $0xc,%esp
f011d207:	68 20 e6 12 f0       	push   $0xf012e620
f011d20c:	e8 5b 3d fe ff       	call   f0100f6c <cprintf>
f011d211:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
f011d214:	e8 f0 07 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d219:	89 c2                	mov    %eax,%edx
f011d21b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d21e:	39 c2                	cmp    %eax,%edx
f011d220:	74 17                	je     f011d239 <test_kfree_bestfirstfit+0x10f9>
f011d222:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d229:	83 ec 0c             	sub    $0xc,%esp
f011d22c:	68 90 ea 12 f0       	push   $0xf012ea90
f011d231:	e8 36 3d fe ff       	call   f0100f6c <cprintf>
f011d236:	83 c4 10             	add    $0x10,%esp
		lastIndices[11] = (1*kilo)/sizeof(char) - 1;
f011d239:	c7 45 94 ff 03 00 00 	movl   $0x3ff,-0x6c(%ebp)
		ptr = (char*)ptr_allocations[11];
f011d240:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d246:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f011d249:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d250:	eb 0e                	jmp    f011d260 <test_kfree_bestfirstfit+0x1120>
		{
			ptr[i] = 11 ;
f011d252:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d255:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d258:	01 d0                	add    %edx,%eax
f011d25a:	c6 00 0b             	movb   $0xb,(%eax)
		{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
		lastIndices[11] = (1*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f011d25d:	ff 45 f4             	incl   -0xc(%ebp)
f011d260:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011d263:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d266:	7f ea                	jg     f011d252 <test_kfree_bestfirstfit+0x1112>
			ptr[i] = 11 ;
		}

		//[DYNAMIC ALLOCATOR] Allocate in merged freed space
		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d268:	e8 9c 07 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d26d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d270:	e8 cb 75 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d275:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[12] = kmalloc(2*kilo);
f011d278:	83 ec 0c             	sub    $0xc,%esp
f011d27b:	68 00 08 00 00       	push   $0x800
f011d280:	e8 31 b8 fe ff       	call   f0108ab6 <kmalloc>
f011d285:	83 c4 10             	add    $0x10,%esp
f011d288:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		//expected = ptr_allocations[2] + 1*kilo + sizeOfMetaData();
		//if (ptr_allocations[12] != expected)
		if ((ptr_allocations[12] < ptr_allocations[2] + 1*kilo) || (ptr_allocations[12] > (ptr_allocations[2] + 2*kilo)))
f011d28e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d294:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011d29a:	81 c2 00 04 00 00    	add    $0x400,%edx
f011d2a0:	39 d0                	cmp    %edx,%eax
f011d2a2:	72 16                	jb     f011d2ba <test_kfree_bestfirstfit+0x117a>
f011d2a4:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d2aa:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011d2b0:	81 c2 00 08 00 00    	add    $0x800,%edx
f011d2b6:	39 d0                	cmp    %edx,%eax
f011d2b8:	76 35                	jbe    f011d2ef <test_kfree_bestfirstfit+0x11af>
		{
			correct = 0;
f011d2ba:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
			cprintf("Wrong start address for the allocated space... check return address of kmalloc. Expected [%x, %x], Actual %x\n", (ptr_allocations[2] + 1*kilo), (ptr_allocations[2] + 2*kilo), ptr_allocations[12]);
f011d2c1:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d2c7:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011d2cd:	8d 8a 00 08 00 00    	lea    0x800(%edx),%ecx
f011d2d3:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011d2d9:	81 c2 00 04 00 00    	add    $0x400,%edx
f011d2df:	50                   	push   %eax
f011d2e0:	51                   	push   %ecx
f011d2e1:	52                   	push   %edx
f011d2e2:	68 50 eb 12 f0       	push   $0xf012eb50
f011d2e7:	e8 80 3c fe ff       	call   f0100f6c <cprintf>
f011d2ec:	83 c4 10             	add    $0x10,%esp
		}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d2ef:	e8 4c 75 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d2f4:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011d2f7:	74 17                	je     f011d310 <test_kfree_bestfirstfit+0x11d0>
f011d2f9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d300:	83 ec 0c             	sub    $0xc,%esp
f011d303:	68 20 e6 12 f0       	push   $0xf012e620
f011d308:	e8 5f 3c fe ff       	call   f0100f6c <cprintf>
f011d30d:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
f011d310:	e8 f4 06 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d315:	89 c2                	mov    %eax,%edx
f011d317:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d31a:	39 c2                	cmp    %eax,%edx
f011d31c:	74 17                	je     f011d335 <test_kfree_bestfirstfit+0x11f5>
f011d31e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d325:	83 ec 0c             	sub    $0xc,%esp
f011d328:	68 90 ea 12 f0       	push   $0xf012ea90
f011d32d:	e8 3a 3c fe ff       	call   f0100f6c <cprintf>
f011d332:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f011d335:	c7 45 98 ff 07 00 00 	movl   $0x7ff,-0x68(%ebp)
		ptr = (char*)ptr_allocations[12];
f011d33c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d342:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f011d345:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d34c:	eb 0e                	jmp    f011d35c <test_kfree_bestfirstfit+0x121c>
		{
			ptr[i] = 12 ;
f011d34e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d351:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d354:	01 d0                	add    %edx,%eax
f011d356:	c6 00 0c             	movb   $0xc,(%eax)
		}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
		lastIndices[12] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f011d359:	ff 45 f4             	incl   -0xc(%ebp)
f011d35c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d35f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d362:	7f ea                	jg     f011d34e <test_kfree_bestfirstfit+0x120e>
			ptr[i] = 12 ;
		}

		//[DYNAMIC ALLOCATOR] Allocate in merged freed space
		//1.5 KB
		freeFrames = sys_calculate_free_frames() ;
f011d364:	e8 a0 06 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d369:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d36c:	e8 cf 74 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d371:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[13] = kmalloc(3*kilo/2);
f011d374:	83 ec 0c             	sub    $0xc,%esp
f011d377:	68 00 06 00 00       	push   $0x600
f011d37c:	e8 35 b7 fe ff       	call   f0108ab6 <kmalloc>
f011d381:	83 c4 10             	add    $0x10,%esp
f011d384:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		//if (ptr_allocations[13] != ptr_allocations[12] + 2*kilo + sizeOfMetaData())
		if ((ptr_allocations[13] < ptr_allocations[2] + 3*kilo) || (ptr_allocations[13] > (ptr_allocations[2] + 4*kilo)))
f011d38a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d390:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011d396:	81 c2 00 0c 00 00    	add    $0xc00,%edx
f011d39c:	39 d0                	cmp    %edx,%eax
f011d39e:	72 16                	jb     f011d3b6 <test_kfree_bestfirstfit+0x1276>
f011d3a0:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d3a6:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011d3ac:	81 c2 00 10 00 00    	add    $0x1000,%edx
f011d3b2:	39 d0                	cmp    %edx,%eax
f011d3b4:	76 17                	jbe    f011d3cd <test_kfree_bestfirstfit+0x128d>
		{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011d3b6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d3bd:	83 ec 0c             	sub    $0xc,%esp
f011d3c0:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011d3c5:	e8 a2 3b fe ff       	call   f0100f6c <cprintf>
f011d3ca:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d3cd:	e8 6e 74 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d3d2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011d3d5:	74 17                	je     f011d3ee <test_kfree_bestfirstfit+0x12ae>
f011d3d7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d3de:	83 ec 0c             	sub    $0xc,%esp
f011d3e1:	68 20 e6 12 f0       	push   $0xf012e620
f011d3e6:	e8 81 3b fe ff       	call   f0100f6c <cprintf>
f011d3eb:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
f011d3ee:	e8 16 06 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d3f3:	89 c2                	mov    %eax,%edx
f011d3f5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d3f8:	39 c2                	cmp    %eax,%edx
f011d3fa:	74 17                	je     f011d413 <test_kfree_bestfirstfit+0x12d3>
f011d3fc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d403:	83 ec 0c             	sub    $0xc,%esp
f011d406:	68 90 ea 12 f0       	push   $0xf012ea90
f011d40b:	e8 5c 3b fe ff       	call   f0100f6c <cprintf>
f011d410:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (3*kilo/2)/sizeof(char) - 1;
f011d413:	c7 45 9c ff 05 00 00 	movl   $0x5ff,-0x64(%ebp)
		ptr = (char*)ptr_allocations[13];
f011d41a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d420:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f011d423:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d42a:	eb 0e                	jmp    f011d43a <test_kfree_bestfirstfit+0x12fa>
		{
			ptr[i] = 13 ;
f011d42c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d42f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d432:	01 d0                	add    %edx,%eax
f011d434:	c6 00 0d             	movb   $0xd,(%eax)
		{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
		lastIndices[13] = (3*kilo/2)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f011d437:	ff 45 f4             	incl   -0xc(%ebp)
f011d43a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011d43d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d440:	7f ea                	jg     f011d42c <test_kfree_bestfirstfit+0x12ec>
			ptr[i] = 13 ;
		}

		//[PAGE ALLOCATOR] Allocate in merged freed space
		//30 MB
		freeFrames = sys_calculate_free_frames() ;
f011d442:	e8 c2 05 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d447:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d44a:	e8 f1 73 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d44f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[10] = kmalloc(30*Mega);
f011d452:	83 ec 0c             	sub    $0xc,%esp
f011d455:	68 00 00 e0 01       	push   $0x1e00000
f011d45a:	e8 57 b6 fe ff       	call   f0108ab6 <kmalloc>
f011d45f:	83 c4 10             	add    $0x10,%esp
f011d462:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011d468:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d46e:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011d473:	74 17                	je     f011d48c <test_kfree_bestfirstfit+0x134c>
f011d475:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d47c:	83 ec 0c             	sub    $0xc,%esp
f011d47f:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011d484:	e8 e3 3a fe ff       	call   f0100f6c <cprintf>
f011d489:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d48c:	e8 af 73 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d491:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011d494:	74 17                	je     f011d4ad <test_kfree_bestfirstfit+0x136d>
f011d496:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d49d:	83 ec 0c             	sub    $0xc,%esp
f011d4a0:	68 20 e6 12 f0       	push   $0xf012e620
f011d4a5:	e8 c2 3a fe ff       	call   f0100f6c <cprintf>
f011d4aa:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 30*Mega/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011d4ad:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011d4b0:	e8 54 05 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d4b5:	29 c3                	sub    %eax,%ebx
f011d4b7:	89 d8                	mov    %ebx,%eax
f011d4b9:	3d ff 1d 00 00       	cmp    $0x1dff,%eax
f011d4be:	77 17                	ja     f011d4d7 <test_kfree_bestfirstfit+0x1397>
f011d4c0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d4c7:	83 ec 0c             	sub    $0xc,%esp
f011d4ca:	68 8c e6 12 f0       	push   $0xf012e68c
f011d4cf:	e8 98 3a fe ff       	call   f0100f6c <cprintf>
f011d4d4:	83 c4 10             	add    $0x10,%esp
		lastIndices[10] = (30*Mega)/sizeof(char) - 1;
f011d4d7:	c7 45 90 ff ff df 01 	movl   $0x1dfffff,-0x70(%ebp)
		ptr = (char*)ptr_allocations[10];
f011d4de:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d4e4:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f011d4e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d4ee:	eb 0e                	jmp    f011d4fe <test_kfree_bestfirstfit+0x13be>
		{
			ptr[i] = 10 ;
f011d4f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d4f3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d4f6:	01 d0                	add    %edx,%eax
f011d4f8:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) < 30*Mega/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
		lastIndices[10] = (30*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f011d4fb:	ff 45 f4             	incl   -0xc(%ebp)
f011d4fe:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d501:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d504:	7f ea                	jg     f011d4f0 <test_kfree_bestfirstfit+0x13b0>
			ptr[i] = 10 ;
		}


		//30 MB
		ptr = (char*)ptr_allocations[10];
f011d506:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d50c:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f011d50f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d516:	eb 1e                	jmp    f011d536 <test_kfree_bestfirstfit+0x13f6>
		{
			sums[10] += ptr[i] ;
f011d518:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f011d51e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011d521:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d524:	01 c8                	add    %ecx,%eax
f011d526:	8a 00                	mov    (%eax),%al
f011d528:	0f be c0             	movsbl %al,%eax
f011d52b:	01 d0                	add    %edx,%eax
f011d52d:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		}


		//30 MB
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f011d533:	ff 45 f4             	incl   -0xc(%ebp)
f011d536:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d539:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d53c:	7f da                	jg     f011d518 <test_kfree_bestfirstfit+0x13d8>
		{
			sums[10] += ptr[i] ;
		}
		if (sums[10] != 10*lastIndices[10])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }
f011d53e:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f011d544:	8b 55 90             	mov    -0x70(%ebp),%edx
f011d547:	89 d0                	mov    %edx,%eax
f011d549:	c1 e0 02             	shl    $0x2,%eax
f011d54c:	01 d0                	add    %edx,%eax
f011d54e:	01 c0                	add    %eax,%eax
f011d550:	39 c1                	cmp    %eax,%ecx
f011d552:	74 17                	je     f011d56b <test_kfree_bestfirstfit+0x142b>
f011d554:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d55b:	83 ec 0c             	sub    $0xc,%esp
f011d55e:	68 c0 eb 12 f0       	push   $0xf012ebc0
f011d563:	e8 04 3a fe ff       	call   f0100f6c <cprintf>
f011d568:	83 c4 10             	add    $0x10,%esp

		//1 KB
		ptr = (char*)ptr_allocations[11];
f011d56b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d571:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f011d574:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d57b:	eb 1e                	jmp    f011d59b <test_kfree_bestfirstfit+0x145b>
		{
			sums[11] += ptr[i] ;
f011d57d:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f011d583:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011d586:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d589:	01 c8                	add    %ecx,%eax
f011d58b:	8a 00                	mov    (%eax),%al
f011d58d:	0f be c0             	movsbl %al,%eax
f011d590:	01 d0                	add    %edx,%eax
f011d592:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		}
		if (sums[10] != 10*lastIndices[10])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }

		//1 KB
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f011d598:	ff 45 f4             	incl   -0xc(%ebp)
f011d59b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011d59e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d5a1:	7f da                	jg     f011d57d <test_kfree_bestfirstfit+0x143d>
		{
			sums[11] += ptr[i] ;
		}
		if (sums[11] != 11*lastIndices[11])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }
f011d5a3:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f011d5a9:	8b 55 94             	mov    -0x6c(%ebp),%edx
f011d5ac:	89 d0                	mov    %edx,%eax
f011d5ae:	c1 e0 02             	shl    $0x2,%eax
f011d5b1:	01 d0                	add    %edx,%eax
f011d5b3:	01 c0                	add    %eax,%eax
f011d5b5:	01 d0                	add    %edx,%eax
f011d5b7:	39 c1                	cmp    %eax,%ecx
f011d5b9:	74 17                	je     f011d5d2 <test_kfree_bestfirstfit+0x1492>
f011d5bb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d5c2:	83 ec 0c             	sub    $0xc,%esp
f011d5c5:	68 c0 eb 12 f0       	push   $0xf012ebc0
f011d5ca:	e8 9d 39 fe ff       	call   f0100f6c <cprintf>
f011d5cf:	83 c4 10             	add    $0x10,%esp

		//2 KB
		ptr = (char*)ptr_allocations[12];
f011d5d2:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d5d8:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f011d5db:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d5e2:	eb 1e                	jmp    f011d602 <test_kfree_bestfirstfit+0x14c2>
		{
			sums[12] += ptr[i] ;
f011d5e4:	8b 95 48 ff ff ff    	mov    -0xb8(%ebp),%edx
f011d5ea:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011d5ed:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d5f0:	01 c8                	add    %ecx,%eax
f011d5f2:	8a 00                	mov    (%eax),%al
f011d5f4:	0f be c0             	movsbl %al,%eax
f011d5f7:	01 d0                	add    %edx,%eax
f011d5f9:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		}
		if (sums[11] != 11*lastIndices[11])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }

		//2 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f011d5ff:	ff 45 f4             	incl   -0xc(%ebp)
f011d602:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d605:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d608:	7f da                	jg     f011d5e4 <test_kfree_bestfirstfit+0x14a4>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }
f011d60a:	8b 8d 48 ff ff ff    	mov    -0xb8(%ebp),%ecx
f011d610:	8b 55 98             	mov    -0x68(%ebp),%edx
f011d613:	89 d0                	mov    %edx,%eax
f011d615:	01 c0                	add    %eax,%eax
f011d617:	01 d0                	add    %edx,%eax
f011d619:	c1 e0 02             	shl    $0x2,%eax
f011d61c:	39 c1                	cmp    %eax,%ecx
f011d61e:	74 17                	je     f011d637 <test_kfree_bestfirstfit+0x14f7>
f011d620:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d627:	83 ec 0c             	sub    $0xc,%esp
f011d62a:	68 c0 eb 12 f0       	push   $0xf012ebc0
f011d62f:	e8 38 39 fe ff       	call   f0100f6c <cprintf>
f011d634:	83 c4 10             	add    $0x10,%esp

		//1.5 KB
		ptr = (char*)ptr_allocations[13];
f011d637:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d63d:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f011d640:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d647:	eb 1e                	jmp    f011d667 <test_kfree_bestfirstfit+0x1527>
		{
			sums[13] += ptr[i] ;
f011d649:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f011d64f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011d652:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d655:	01 c8                	add    %ecx,%eax
f011d657:	8a 00                	mov    (%eax),%al
f011d659:	0f be c0             	movsbl %al,%eax
f011d65c:	01 d0                	add    %edx,%eax
f011d65e:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
		}
		if (sums[12] != 12*lastIndices[12])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }

		//1.5 KB
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f011d664:	ff 45 f4             	incl   -0xc(%ebp)
f011d667:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011d66a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d66d:	7f da                	jg     f011d649 <test_kfree_bestfirstfit+0x1509>
		{
			sums[13] += ptr[i] ;
		}
		if (sums[13] != 13*lastIndices[13])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }
f011d66f:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f011d675:	8b 55 9c             	mov    -0x64(%ebp),%edx
f011d678:	89 d0                	mov    %edx,%eax
f011d67a:	01 c0                	add    %eax,%eax
f011d67c:	01 d0                	add    %edx,%eax
f011d67e:	c1 e0 02             	shl    $0x2,%eax
f011d681:	01 d0                	add    %edx,%eax
f011d683:	39 c1                	cmp    %eax,%ecx
f011d685:	74 17                	je     f011d69e <test_kfree_bestfirstfit+0x155e>
f011d687:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d68e:	83 ec 0c             	sub    $0xc,%esp
f011d691:	68 c0 eb 12 f0       	push   $0xf012ebc0
f011d696:	e8 d1 38 fe ff       	call   f0100f6c <cprintf>
f011d69b:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=30 ;
f011d69e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d6a2:	74 04                	je     f011d6a8 <test_kfree_bestfirstfit+0x1568>
f011d6a4:	83 45 f0 1e          	addl   $0x1e,-0x10(%ebp)

	correct = 1 ;
f011d6a8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//check tables	[5%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f011d6af:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f011d6b6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011d6bd:	eb 4e                	jmp    f011d70d <test_kfree_bestfirstfit+0x15cd>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f011d6bf:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011d6c2:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f011d6c7:	83 ec 04             	sub    $0x4,%esp
f011d6ca:	8d 8d c4 fe ff ff    	lea    -0x13c(%ebp),%ecx
f011d6d0:	51                   	push   %ecx
f011d6d1:	52                   	push   %edx
f011d6d2:	50                   	push   %eax
f011d6d3:	e8 35 ad fe ff       	call   f010840d <get_page_table>
f011d6d8:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011d6db:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011d6e1:	85 c0                	test   %eax,%eax
f011d6e3:	75 1d                	jne    f011d702 <test_kfree_bestfirstfit+0x15c2>
			{
				if (correct)
f011d6e5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d6e9:	74 17                	je     f011d702 <test_kfree_bestfirstfit+0x15c2>
				{ correct = 0; cprintf("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree\n"); }
f011d6eb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d6f2:	83 ec 0c             	sub    $0xc,%esp
f011d6f5:	68 ec eb 12 f0       	push   $0xf012ebec
f011d6fa:	e8 6d 38 fe ff       	call   f0100f6c <cprintf>
f011d6ff:	83 c4 10             	add    $0x10,%esp

	correct = 1 ;
	//check tables	[5%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f011d702:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f011d709:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f011d70d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011d711:	78 ac                	js     f011d6bf <test_kfree_bestfirstfit+0x157f>
f011d713:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011d717:	7f 09                	jg     f011d722 <test_kfree_bestfirstfit+0x15e2>
f011d719:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f011d720:	76 9d                	jbe    f011d6bf <test_kfree_bestfirstfit+0x157f>
				if (correct)
				{ correct = 0; cprintf("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree\n"); }
			}
		}
	}
	if (correct)	eval+=5 ;
f011d722:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d726:	74 04                	je     f011d72c <test_kfree_bestfirstfit+0x15ec>
f011d728:	83 45 f0 05          	addl   $0x5,-0x10(%ebp)

	cprintf("\ntest kfree completed. Eval = %d%\n", eval);
f011d72c:	83 ec 08             	sub    $0x8,%esp
f011d72f:	ff 75 f0             	pushl  -0x10(%ebp)
f011d732:	68 54 ec 12 f0       	push   $0xf012ec54
f011d737:	e8 30 38 fe ff       	call   f0100f6c <cprintf>
f011d73c:	83 c4 10             	add    $0x10,%esp

	return 1;
f011d73f:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011d744:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d747:	5b                   	pop    %ebx
f011d748:	5f                   	pop    %edi
f011d749:	5d                   	pop    %ebp
f011d74a:	c3                   	ret    

f011d74b <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f011d74b:	55                   	push   %ebp
f011d74c:	89 e5                	mov    %esp,%ebp
f011d74e:	57                   	push   %edi
f011d74f:	53                   	push   %ebx
f011d750:	81 ec b0 35 00 00    	sub    $0x35b0,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f011d756:	83 ec 0c             	sub    $0xc,%esp
f011d759:	68 60 e5 12 f0       	push   $0xf012e560
f011d75e:	e8 09 38 fe ff       	call   f0100f6c <cprintf>
f011d763:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011d766:	83 ec 0c             	sub    $0xc,%esp
f011d769:	68 90 e5 12 f0       	push   $0xf012e590
f011d76e:	e8 f9 37 fe ff       	call   f0100f6c <cprintf>
f011d773:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011d776:	83 ec 0c             	sub    $0xc,%esp
f011d779:	68 60 e5 12 f0       	push   $0xf012e560
f011d77e:	e8 e9 37 fe ff       	call   f0100f6c <cprintf>
f011d783:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011d786:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f011d78a:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f011d78e:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f011d794:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f011d79a:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f011d7a1:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011d7a8:	e8 5c 02 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d7ad:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011d7b0:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f011d7b6:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d7bb:	b8 00 00 00 00       	mov    $0x0,%eax
f011d7c0:	89 d7                	mov    %edx,%edi
f011d7c2:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011d7c4:	8d 95 c4 fe ff ff    	lea    -0x13c(%ebp),%edx
f011d7ca:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d7cf:	b8 00 00 00 00       	mov    $0x0,%eax
f011d7d4:	89 d7                	mov    %edx,%edi
f011d7d6:	f3 ab                	rep stos %eax,%es:(%edi)
	int eval = 0;
f011d7d8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	bool correct = 1;
f011d7df:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	void* ptr_allocations[20] = {0};
f011d7e6:	8d 95 74 fe ff ff    	lea    -0x18c(%ebp),%edx
f011d7ec:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d7f1:	b8 00 00 00 00       	mov    $0x0,%eax
f011d7f6:	89 d7                	mov    %edx,%edi
f011d7f8:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d7fa:	e8 0a 02 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d7ff:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d802:	e8 39 70 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d807:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011d80a:	83 ec 0c             	sub    $0xc,%esp
f011d80d:	68 00 fc 1f 00       	push   $0x1ffc00
f011d812:	e8 9f b2 fe ff       	call   f0108ab6 <kmalloc>
f011d817:	83 c4 10             	add    $0x10,%esp
f011d81a:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011d820:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011d826:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011d82b:	74 17                	je     f011d844 <test_kheap_phys_addr+0xf9>
f011d82d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d834:	83 ec 0c             	sub    $0xc,%esp
f011d837:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011d83c:	e8 2b 37 fe ff       	call   f0100f6c <cprintf>
f011d841:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d844:	e8 f7 6f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d849:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011d84c:	74 17                	je     f011d865 <test_kheap_phys_addr+0x11a>
f011d84e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d855:	83 ec 0c             	sub    $0xc,%esp
f011d858:	68 20 e6 12 f0       	push   $0xf012e620
f011d85d:	e8 0a 37 fe ff       	call   f0100f6c <cprintf>
f011d862:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011d865:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011d868:	e8 9c 01 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d86d:	29 c3                	sub    %eax,%ebx
f011d86f:	89 d8                	mov    %ebx,%eax
f011d871:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011d876:	77 17                	ja     f011d88f <test_kheap_phys_addr+0x144>
f011d878:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d87f:	83 ec 0c             	sub    $0xc,%esp
f011d882:	68 8c e6 12 f0       	push   $0xf012e68c
f011d887:	e8 e0 36 fe ff       	call   f0100f6c <cprintf>
f011d88c:	83 c4 10             	add    $0x10,%esp

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d88f:	e8 75 01 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d894:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d897:	e8 a4 6f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d89c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011d89f:	83 ec 0c             	sub    $0xc,%esp
f011d8a2:	68 00 fc 1f 00       	push   $0x1ffc00
f011d8a7:	e8 0a b2 fe ff       	call   f0108ab6 <kmalloc>
f011d8ac:	83 c4 10             	add    $0x10,%esp
f011d8af:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011d8b5:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011d8bb:	3d 00 10 20 f8       	cmp    $0xf8201000,%eax
f011d8c0:	74 17                	je     f011d8d9 <test_kheap_phys_addr+0x18e>
f011d8c2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d8c9:	83 ec 0c             	sub    $0xc,%esp
f011d8cc:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011d8d1:	e8 96 36 fe ff       	call   f0100f6c <cprintf>
f011d8d6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d8d9:	e8 62 6f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d8de:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011d8e1:	74 17                	je     f011d8fa <test_kheap_phys_addr+0x1af>
f011d8e3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d8ea:	83 ec 0c             	sub    $0xc,%esp
f011d8ed:	68 20 e6 12 f0       	push   $0xf012e620
f011d8f2:	e8 75 36 fe ff       	call   f0100f6c <cprintf>
f011d8f7:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011d8fa:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011d8fd:	e8 07 01 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d902:	29 c3                	sub    %eax,%ebx
f011d904:	89 d8                	mov    %ebx,%eax
f011d906:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011d90b:	77 17                	ja     f011d924 <test_kheap_phys_addr+0x1d9>
f011d90d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d914:	83 ec 0c             	sub    $0xc,%esp
f011d917:	68 8c e6 12 f0       	push   $0xf012e68c
f011d91c:	e8 4b 36 fe ff       	call   f0100f6c <cprintf>
f011d921:	83 c4 10             	add    $0x10,%esp

		//[DYNAMIC ALLOCATOR]
		{
			//1 KB
			freeFrames = sys_calculate_free_frames() ;
f011d924:	e8 e0 00 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d929:	89 45 a8             	mov    %eax,-0x58(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011d92c:	e8 0f 6f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d931:	89 45 a4             	mov    %eax,-0x5c(%ebp)
			ptr_allocations[2] = kmalloc(1*kilo);
f011d934:	83 ec 0c             	sub    $0xc,%esp
f011d937:	68 00 04 00 00       	push   $0x400
f011d93c:	e8 75 b1 fe ff       	call   f0108ab6 <kmalloc>
f011d941:	83 c4 10             	add    $0x10,%esp
f011d944:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
			if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f011d94a:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011d950:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011d955:	76 28                	jbe    f011d97f <test_kheap_phys_addr+0x234>
f011d957:	8b 9d 7c fe ff ff    	mov    -0x184(%ebp),%ebx
f011d95d:	83 ec 0c             	sub    $0xc,%esp
f011d960:	6a 00                	push   $0x0
f011d962:	e8 45 b1 fe ff       	call   f0108aac <sbrk>
f011d967:	83 c4 10             	add    $0x10,%esp
f011d96a:	39 c3                	cmp    %eax,%ebx
f011d96c:	73 11                	jae    f011d97f <test_kheap_phys_addr+0x234>
f011d96e:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011d974:	89 c2                	mov    %eax,%edx
f011d976:	a1 d8 ed 17 f0       	mov    0xf017edd8,%eax
f011d97b:	39 c2                	cmp    %eax,%edx
f011d97d:	72 17                	jb     f011d996 <test_kheap_phys_addr+0x24b>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011d97f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d986:	83 ec 0c             	sub    $0xc,%esp
f011d989:	68 20 e7 12 f0       	push   $0xf012e720
f011d98e:	e8 d9 35 fe ff       	call   f0100f6c <cprintf>
f011d993:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d996:	e8 a5 6e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d99b:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011d99e:	74 17                	je     f011d9b7 <test_kheap_phys_addr+0x26c>
f011d9a0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d9a7:	83 ec 0c             	sub    $0xc,%esp
f011d9aa:	68 20 e6 12 f0       	push   $0xf012e620
f011d9af:	e8 b8 35 fe ff       	call   f0100f6c <cprintf>
f011d9b4:	83 c4 10             	add    $0x10,%esp
			//if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f011d9b7:	e8 4d 00 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d9bc:	89 45 a8             	mov    %eax,-0x58(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011d9bf:	e8 7c 6e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d9c4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
			ptr_allocations[3] = kmalloc(2*kilo);
f011d9c7:	83 ec 0c             	sub    $0xc,%esp
f011d9ca:	68 00 08 00 00       	push   $0x800
f011d9cf:	e8 e2 b0 fe ff       	call   f0108ab6 <kmalloc>
f011d9d4:	83 c4 10             	add    $0x10,%esp
f011d9d7:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
			if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f011d9dd:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011d9e3:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011d9e8:	76 28                	jbe    f011da12 <test_kheap_phys_addr+0x2c7>
f011d9ea:	8b 9d 80 fe ff ff    	mov    -0x180(%ebp),%ebx
f011d9f0:	83 ec 0c             	sub    $0xc,%esp
f011d9f3:	6a 00                	push   $0x0
f011d9f5:	e8 b2 b0 fe ff       	call   f0108aac <sbrk>
f011d9fa:	83 c4 10             	add    $0x10,%esp
f011d9fd:	39 c3                	cmp    %eax,%ebx
f011d9ff:	73 11                	jae    f011da12 <test_kheap_phys_addr+0x2c7>
f011da01:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011da07:	89 c2                	mov    %eax,%edx
f011da09:	a1 d8 ed 17 f0       	mov    0xf017edd8,%eax
f011da0e:	39 c2                	cmp    %eax,%edx
f011da10:	72 17                	jb     f011da29 <test_kheap_phys_addr+0x2de>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011da12:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011da19:	83 ec 0c             	sub    $0xc,%esp
f011da1c:	68 20 e7 12 f0       	push   $0xf012e720
f011da21:	e8 46 35 fe ff       	call   f0100f6c <cprintf>
f011da26:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011da29:	e8 12 6e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011da2e:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011da31:	74 17                	je     f011da4a <test_kheap_phys_addr+0x2ff>
f011da33:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011da3a:	83 ec 0c             	sub    $0xc,%esp
f011da3d:	68 20 e6 12 f0       	push   $0xf012e620
f011da42:	e8 25 35 fe ff       	call   f0100f6c <cprintf>
f011da47:	83 c4 10             	add    $0x10,%esp
			//if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

			//1.5 KB
			freeFrames = sys_calculate_free_frames() ;
f011da4a:	e8 ba ff fe ff       	call   f010da09 <sys_calculate_free_frames>
f011da4f:	89 45 a8             	mov    %eax,-0x58(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011da52:	e8 e9 6d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011da57:	89 45 a4             	mov    %eax,-0x5c(%ebp)
			ptr_allocations[4] = kmalloc(3*kilo/2);
f011da5a:	83 ec 0c             	sub    $0xc,%esp
f011da5d:	68 00 06 00 00       	push   $0x600
f011da62:	e8 4f b0 fe ff       	call   f0108ab6 <kmalloc>
f011da67:	83 c4 10             	add    $0x10,%esp
f011da6a:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
			if ((uint32) ptr_allocations[4] < KERNEL_HEAP_START || ptr_allocations[4] >= sbrk(0) || (uint32) ptr_allocations[4] >= da_limit)
f011da70:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011da76:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011da7b:	76 28                	jbe    f011daa5 <test_kheap_phys_addr+0x35a>
f011da7d:	8b 9d 84 fe ff ff    	mov    -0x17c(%ebp),%ebx
f011da83:	83 ec 0c             	sub    $0xc,%esp
f011da86:	6a 00                	push   $0x0
f011da88:	e8 1f b0 fe ff       	call   f0108aac <sbrk>
f011da8d:	83 c4 10             	add    $0x10,%esp
f011da90:	39 c3                	cmp    %eax,%ebx
f011da92:	73 11                	jae    f011daa5 <test_kheap_phys_addr+0x35a>
f011da94:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011da9a:	89 c2                	mov    %eax,%edx
f011da9c:	a1 d8 ed 17 f0       	mov    0xf017edd8,%eax
f011daa1:	39 c2                	cmp    %eax,%edx
f011daa3:	72 17                	jb     f011dabc <test_kheap_phys_addr+0x371>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011daa5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011daac:	83 ec 0c             	sub    $0xc,%esp
f011daaf:	68 20 e7 12 f0       	push   $0xf012e720
f011dab4:	e8 b3 34 fe ff       	call   f0100f6c <cprintf>
f011dab9:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011dabc:	e8 7f 6d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011dac1:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011dac4:	74 17                	je     f011dadd <test_kheap_phys_addr+0x392>
f011dac6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dacd:	83 ec 0c             	sub    $0xc,%esp
f011dad0:	68 20 e6 12 f0       	push   $0xf012e620
f011dad5:	e8 92 34 fe ff       	call   f0100f6c <cprintf>
f011dada:	83 c4 10             	add    $0x10,%esp
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011dadd:	e8 27 ff fe ff       	call   f010da09 <sys_calculate_free_frames>
f011dae2:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dae5:	e8 56 6d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011daea:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(7*kilo);
f011daed:	83 ec 0c             	sub    $0xc,%esp
f011daf0:	68 00 1c 00 00       	push   $0x1c00
f011daf5:	e8 bc af fe ff       	call   f0108ab6 <kmalloc>
f011dafa:	83 c4 10             	add    $0x10,%esp
f011dafd:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega /*+ 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011db03:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011db09:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011db0e:	74 17                	je     f011db27 <test_kheap_phys_addr+0x3dc>
f011db10:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011db17:	83 ec 0c             	sub    $0xc,%esp
f011db1a:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011db1f:	e8 48 34 fe ff       	call   f0100f6c <cprintf>
f011db24:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011db27:	e8 14 6d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011db2c:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011db2f:	74 17                	je     f011db48 <test_kheap_phys_addr+0x3fd>
f011db31:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011db38:	83 ec 0c             	sub    $0xc,%esp
f011db3b:	68 20 e6 12 f0       	push   $0xf012e620
f011db40:	e8 27 34 fe ff       	call   f0100f6c <cprintf>
f011db45:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011db48:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011db4b:	e8 b9 fe fe ff       	call   f010da09 <sys_calculate_free_frames>
f011db50:	29 c3                	sub    %eax,%ebx
f011db52:	89 d8                	mov    %ebx,%eax
f011db54:	83 f8 01             	cmp    $0x1,%eax
f011db57:	77 17                	ja     f011db70 <test_kheap_phys_addr+0x425>
f011db59:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011db60:	83 ec 0c             	sub    $0xc,%esp
f011db63:	68 8c e6 12 f0       	push   $0xf012e68c
f011db68:	e8 ff 33 fe ff       	call   f0100f6c <cprintf>
f011db6d:	83 c4 10             	add    $0x10,%esp

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011db70:	e8 94 fe fe ff       	call   f010da09 <sys_calculate_free_frames>
f011db75:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011db78:	e8 c3 6c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011db7d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011db80:	83 ec 0c             	sub    $0xc,%esp
f011db83:	68 00 fc 2f 00       	push   $0x2ffc00
f011db88:	e8 29 af fe ff       	call   f0108ab6 <kmalloc>
f011db8d:	83 c4 10             	add    $0x10,%esp
f011db90:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011db96:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011db9c:	3d 00 30 40 f8       	cmp    $0xf8403000,%eax
f011dba1:	74 17                	je     f011dbba <test_kheap_phys_addr+0x46f>
f011dba3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dbaa:	83 ec 0c             	sub    $0xc,%esp
f011dbad:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011dbb2:	e8 b5 33 fe ff       	call   f0100f6c <cprintf>
f011dbb7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011dbba:	e8 81 6c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011dbbf:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011dbc2:	74 17                	je     f011dbdb <test_kheap_phys_addr+0x490>
f011dbc4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dbcb:	83 ec 0c             	sub    $0xc,%esp
f011dbce:	68 20 e6 12 f0       	push   $0xf012e620
f011dbd3:	e8 94 33 fe ff       	call   f0100f6c <cprintf>
f011dbd8:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011dbdb:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011dbde:	e8 26 fe fe ff       	call   f010da09 <sys_calculate_free_frames>
f011dbe3:	29 c3                	sub    %eax,%ebx
f011dbe5:	89 d8                	mov    %ebx,%eax
f011dbe7:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011dbec:	77 17                	ja     f011dc05 <test_kheap_phys_addr+0x4ba>
f011dbee:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dbf5:	83 ec 0c             	sub    $0xc,%esp
f011dbf8:	68 8c e6 12 f0       	push   $0xf012e68c
f011dbfd:	e8 6a 33 fe ff       	call   f0100f6c <cprintf>
f011dc02:	83 c4 10             	add    $0x10,%esp

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011dc05:	e8 ff fd fe ff       	call   f010da09 <sys_calculate_free_frames>
f011dc0a:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dc0d:	e8 2e 6c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011dc12:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(6*Mega-kilo);
f011dc15:	83 ec 0c             	sub    $0xc,%esp
f011dc18:	68 00 fc 5f 00       	push   $0x5ffc00
f011dc1d:	e8 94 ae fe ff       	call   f0108ab6 <kmalloc>
f011dc22:	83 c4 10             	add    $0x10,%esp
f011dc25:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011dc2b:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011dc31:	3d 00 30 70 f8       	cmp    $0xf8703000,%eax
f011dc36:	74 17                	je     f011dc4f <test_kheap_phys_addr+0x504>
f011dc38:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dc3f:	83 ec 0c             	sub    $0xc,%esp
f011dc42:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011dc47:	e8 20 33 fe ff       	call   f0100f6c <cprintf>
f011dc4c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011dc4f:	e8 ec 6b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011dc54:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011dc57:	74 17                	je     f011dc70 <test_kheap_phys_addr+0x525>
f011dc59:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dc60:	83 ec 0c             	sub    $0xc,%esp
f011dc63:	68 20 e6 12 f0       	push   $0xf012e620
f011dc68:	e8 ff 32 fe ff       	call   f0100f6c <cprintf>
f011dc6d:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 1536) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011dc70:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011dc73:	e8 91 fd fe ff       	call   f010da09 <sys_calculate_free_frames>
f011dc78:	29 c3                	sub    %eax,%ebx
f011dc7a:	89 d8                	mov    %ebx,%eax
f011dc7c:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011dc81:	77 17                	ja     f011dc9a <test_kheap_phys_addr+0x54f>
f011dc83:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dc8a:	83 ec 0c             	sub    $0xc,%esp
f011dc8d:	68 8c e6 12 f0       	push   $0xf012e68c
f011dc92:	e8 d5 32 fe ff       	call   f0100f6c <cprintf>
f011dc97:	83 c4 10             	add    $0x10,%esp

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011dc9a:	e8 6a fd fe ff       	call   f010da09 <sys_calculate_free_frames>
f011dc9f:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dca2:	e8 99 6b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011dca7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[8] = kmalloc(14*kilo);
f011dcaa:	83 ec 0c             	sub    $0xc,%esp
f011dcad:	68 00 38 00 00       	push   $0x3800
f011dcb2:	e8 ff ad fe ff       	call   f0108ab6 <kmalloc>
f011dcb7:	83 c4 10             	add    $0x10,%esp
f011dcba:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011dcc0:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011dcc6:	3d 00 30 d0 f8       	cmp    $0xf8d03000,%eax
f011dccb:	74 17                	je     f011dce4 <test_kheap_phys_addr+0x599>
f011dccd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dcd4:	83 ec 0c             	sub    $0xc,%esp
f011dcd7:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011dcdc:	e8 8b 32 fe ff       	call   f0100f6c <cprintf>
f011dce1:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011dce4:	e8 57 6b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011dce9:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011dcec:	74 17                	je     f011dd05 <test_kheap_phys_addr+0x5ba>
f011dcee:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dcf5:	83 ec 0c             	sub    $0xc,%esp
f011dcf8:	68 20 e6 12 f0       	push   $0xf012e620
f011dcfd:	e8 6a 32 fe ff       	call   f0100f6c <cprintf>
f011dd02:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011dd05:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011dd08:	e8 fc fc fe ff       	call   f010da09 <sys_calculate_free_frames>
f011dd0d:	29 c3                	sub    %eax,%ebx
f011dd0f:	89 d8                	mov    %ebx,%eax
f011dd11:	83 f8 03             	cmp    $0x3,%eax
f011dd14:	77 17                	ja     f011dd2d <test_kheap_phys_addr+0x5e2>
f011dd16:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dd1d:	83 ec 0c             	sub    $0xc,%esp
f011dd20:	68 8c e6 12 f0       	push   $0xf012e68c
f011dd25:	e8 42 32 fe ff       	call   f0100f6c <cprintf>
f011dd2a:	83 c4 10             	add    $0x10,%esp
	}

	//[PAGE ALLOCATOR] test kheap_physical_address after kmalloc only [30%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
f011dd2d:	c7 45 a0 00 70 d0 f8 	movl   $0xf8d07000,-0x60(%ebp)
		uint32 allPAs[(13*Mega + 24*kilo + INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
f011dd34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		uint32 offset = 1;
f011dd3b:	c7 45 9c 01 00 00 00 	movl   $0x1,-0x64(%ebp)
		uint32 startVA = da_limit + PAGE_SIZE;
f011dd42:	a1 d8 ed 17 f0       	mov    0xf017edd8,%eax
f011dd47:	05 00 10 00 00       	add    $0x1000,%eax
f011dd4c:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (va = startVA; va < endVA; va+=PAGE_SIZE+offset)
f011dd4f:	8b 45 98             	mov    -0x68(%ebp),%eax
f011dd52:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011dd55:	eb 2e                	jmp    f011dd85 <test_kheap_phys_addr+0x63a>
		{
			allPAs[i++] = kheap_physical_address(va);
f011dd57:	8b 5d f4             	mov    -0xc(%ebp),%ebx
f011dd5a:	8d 43 01             	lea    0x1(%ebx),%eax
f011dd5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011dd60:	83 ec 0c             	sub    $0xc,%esp
f011dd63:	ff 75 e8             	pushl  -0x18(%ebp)
f011dd66:	e8 99 ad fe ff       	call   f0108b04 <kheap_physical_address>
f011dd6b:	83 c4 10             	add    $0x10,%esp
f011dd6e:	89 84 9d 48 ca ff ff 	mov    %eax,-0x35b8(%ebp,%ebx,4)
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
		uint32 allPAs[(13*Mega + 24*kilo + INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		uint32 offset = 1;
		uint32 startVA = da_limit + PAGE_SIZE;
		for (va = startVA; va < endVA; va+=PAGE_SIZE+offset)
f011dd75:	8b 55 9c             	mov    -0x64(%ebp),%edx
f011dd78:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011dd7b:	01 d0                	add    %edx,%eax
f011dd7d:	05 00 10 00 00       	add    $0x1000,%eax
f011dd82:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011dd85:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011dd88:	3b 45 a0             	cmp    -0x60(%ebp),%eax
f011dd8b:	72 ca                	jb     f011dd57 <test_kheap_phys_addr+0x60c>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f011dd8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011dd90:	89 45 94             	mov    %eax,-0x6c(%ebp)
		i = 0;
f011dd93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		int j;
		for (va = startVA; va < endVA; )
f011dd9a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011dd9d:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011dda0:	e9 ce 00 00 00       	jmp    f011de73 <test_kheap_phys_addr+0x728>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011dda5:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f011ddaa:	83 ec 04             	sub    $0x4,%esp
f011ddad:	8d 95 70 fe ff ff    	lea    -0x190(%ebp),%edx
f011ddb3:	52                   	push   %edx
f011ddb4:	ff 75 e8             	pushl  -0x18(%ebp)
f011ddb7:	50                   	push   %eax
f011ddb8:	e8 50 a6 fe ff       	call   f010840d <get_page_table>
f011ddbd:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011ddc0:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011ddc6:	85 c0                	test   %eax,%eax
f011ddc8:	75 1e                	jne    f011dde8 <test_kheap_phys_addr+0x69d>
			{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011ddca:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ddd1:	83 ec 04             	sub    $0x4,%esp
f011ddd4:	68 78 ec 12 f0       	push   $0xf012ec78
f011ddd9:	68 30 05 00 00       	push   $0x530
f011ddde:	68 d2 ec 12 f0       	push   $0xf012ecd2
f011dde3:	e8 32 25 fe ff       	call   f010031a <_panic>

			for (j = PTX(va); i < ii && j < 1024 && va < endVA; ++j, ++i)
f011dde8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ddeb:	c1 e8 0c             	shr    $0xc,%eax
f011ddee:	25 ff 03 00 00       	and    $0x3ff,%eax
f011ddf3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f011ddf6:	eb 62                	jmp    f011de5a <test_kheap_phys_addr+0x70f>
			{
				if (((ptr_table[j] & 0xFFFFF000)+(va & 0x00000FFF))!= allPAs[i])
f011ddf8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011ddfe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011de01:	c1 e2 02             	shl    $0x2,%edx
f011de04:	01 d0                	add    %edx,%eax
f011de06:	8b 00                	mov    (%eax),%eax
f011de08:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011de0d:	89 c2                	mov    %eax,%edx
f011de0f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011de12:	25 ff 0f 00 00       	and    $0xfff,%eax
f011de17:	01 c2                	add    %eax,%edx
f011de19:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011de1c:	8b 84 85 48 ca ff ff 	mov    -0x35b8(%ebp,%eax,4),%eax
f011de23:	39 c2                	cmp    %eax,%edx
f011de25:	74 1d                	je     f011de44 <test_kheap_phys_addr+0x6f9>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					if (correct)
f011de27:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011de2b:	74 17                	je     f011de44 <test_kheap_phys_addr+0x6f9>
					{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f011de2d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011de34:	83 ec 0c             	sub    $0xc,%esp
f011de37:	68 ea ec 12 f0       	push   $0xf012ecea
f011de3c:	e8 2b 31 fe ff       	call   f0100f6c <cprintf>
f011de41:	83 c4 10             	add    $0x10,%esp
				}
				va+=PAGE_SIZE+offset;
f011de44:	8b 55 9c             	mov    -0x64(%ebp),%edx
f011de47:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011de4a:	01 d0                	add    %edx,%eax
f011de4c:	05 00 10 00 00       	add    $0x1000,%eax
f011de51:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
			{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }

			for (j = PTX(va); i < ii && j < 1024 && va < endVA; ++j, ++i)
f011de54:	ff 45 e4             	incl   -0x1c(%ebp)
f011de57:	ff 45 f4             	incl   -0xc(%ebp)
f011de5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011de5d:	3b 45 94             	cmp    -0x6c(%ebp),%eax
f011de60:	7d 11                	jge    f011de73 <test_kheap_phys_addr+0x728>
f011de62:	81 7d e4 ff 03 00 00 	cmpl   $0x3ff,-0x1c(%ebp)
f011de69:	7f 08                	jg     f011de73 <test_kheap_phys_addr+0x728>
f011de6b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011de6e:	3b 45 a0             	cmp    -0x60(%ebp),%eax
f011de71:	72 85                	jb     f011ddf8 <test_kheap_phys_addr+0x6ad>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = startVA; va < endVA; )
f011de73:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011de76:	3b 45 a0             	cmp    -0x60(%ebp),%eax
f011de79:	0f 82 26 ff ff ff    	jb     f011dda5 <test_kheap_phys_addr+0x65a>
				}
				va+=PAGE_SIZE+offset;
			}
		}
	}
	if (correct)	eval+=30 ;
f011de7f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011de83:	74 04                	je     f011de89 <test_kheap_phys_addr+0x73e>
f011de85:	83 45 f0 1e          	addl   $0x1e,-0x10(%ebp)

	correct = 1 ;
f011de89:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//[DYNAMIC ALLOCATOR] test kheap_physical_address after kmalloc only [10%]
	{
		int i;
		uint32 va, pa;
		for (i = 2; i <= 4; i++)
f011de90:	c7 45 e0 02 00 00 00 	movl   $0x2,-0x20(%ebp)
f011de97:	e9 b0 00 00 00       	jmp    f011df4c <test_kheap_phys_addr+0x801>
		{
			va = (uint32)ptr_allocations[i];
f011de9c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011de9f:	8b 84 85 74 fe ff ff 	mov    -0x18c(%ebp,%eax,4),%eax
f011dea6:	89 45 90             	mov    %eax,-0x70(%ebp)
			pa = kheap_physical_address(va);
f011dea9:	83 ec 0c             	sub    $0xc,%esp
f011deac:	ff 75 90             	pushl  -0x70(%ebp)
f011deaf:	e8 50 ac fe ff       	call   f0108b04 <kheap_physical_address>
f011deb4:	83 c4 10             	add    $0x10,%esp
f011deb7:	89 45 8c             	mov    %eax,-0x74(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011deba:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f011debf:	83 ec 04             	sub    $0x4,%esp
f011dec2:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f011dec8:	52                   	push   %edx
f011dec9:	ff 75 90             	pushl  -0x70(%ebp)
f011decc:	50                   	push   %eax
f011decd:	e8 3b a5 fe ff       	call   f010840d <get_page_table>
f011ded2:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011ded5:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011dedb:	85 c0                	test   %eax,%eax
f011dedd:	75 1e                	jne    f011defd <test_kheap_phys_addr+0x7b2>
			{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011dedf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dee6:	83 ec 04             	sub    $0x4,%esp
f011dee9:	68 78 ec 12 f0       	push   $0xf012ec78
f011deee:	68 4c 05 00 00       	push   $0x54c
f011def3:	68 d2 ec 12 f0       	push   $0xf012ecd2
f011def8:	e8 1d 24 fe ff       	call   f010031a <_panic>

			if (((ptr_table[PTX(va)] & 0xFFFFF000)+(va & 0x00000FFF))!= pa)
f011defd:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011df03:	8b 55 90             	mov    -0x70(%ebp),%edx
f011df06:	c1 ea 0c             	shr    $0xc,%edx
f011df09:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011df0f:	c1 e2 02             	shl    $0x2,%edx
f011df12:	01 d0                	add    %edx,%eax
f011df14:	8b 00                	mov    (%eax),%eax
f011df16:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011df1b:	89 c2                	mov    %eax,%edx
f011df1d:	8b 45 90             	mov    -0x70(%ebp),%eax
f011df20:	25 ff 0f 00 00       	and    $0xfff,%eax
f011df25:	01 d0                	add    %edx,%eax
f011df27:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f011df2a:	74 1d                	je     f011df49 <test_kheap_phys_addr+0x7fe>
			{
				//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
				if (correct)
f011df2c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011df30:	74 17                	je     f011df49 <test_kheap_phys_addr+0x7fe>
				{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f011df32:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011df39:	83 ec 0c             	sub    $0xc,%esp
f011df3c:	68 ea ec 12 f0       	push   $0xf012ecea
f011df41:	e8 26 30 fe ff       	call   f0100f6c <cprintf>
f011df46:	83 c4 10             	add    $0x10,%esp
	correct = 1 ;
	//[DYNAMIC ALLOCATOR] test kheap_physical_address after kmalloc only [10%]
	{
		int i;
		uint32 va, pa;
		for (i = 2; i <= 4; i++)
f011df49:	ff 45 e0             	incl   -0x20(%ebp)
f011df4c:	83 7d e0 04          	cmpl   $0x4,-0x20(%ebp)
f011df50:	0f 8e 46 ff ff ff    	jle    f011de9c <test_kheap_phys_addr+0x751>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
			}
		}
	}
	if (correct)	eval+=10 ;
f011df56:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011df5a:	74 04                	je     f011df60 <test_kheap_phys_addr+0x815>
f011df5c:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)

	correct = 1 ;
f011df60:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011df67:	e8 9d fa fe ff       	call   f010da09 <sys_calculate_free_frames>
f011df6c:	89 45 88             	mov    %eax,-0x78(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011df6f:	e8 cc 68 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011df74:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[0]);
f011df77:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011df7d:	83 ec 0c             	sub    $0xc,%esp
f011df80:	50                   	push   %eax
f011df81:	e8 4a ab fe ff       	call   f0108ad0 <kfree>
f011df86:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011df89:	e8 b2 68 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011df8e:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011df91:	74 17                	je     f011dfaa <test_kheap_phys_addr+0x85f>
f011df93:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011df9a:	83 ec 0c             	sub    $0xc,%esp
f011df9d:	68 20 e6 12 f0       	push   $0xf012e620
f011dfa2:	e8 c5 2f fe ff       	call   f0100f6c <cprintf>
f011dfa7:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512 ) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011dfaa:	e8 5a fa fe ff       	call   f010da09 <sys_calculate_free_frames>
f011dfaf:	89 c2                	mov    %eax,%edx
f011dfb1:	8b 45 88             	mov    -0x78(%ebp),%eax
f011dfb4:	29 c2                	sub    %eax,%edx
f011dfb6:	89 d0                	mov    %edx,%eax
f011dfb8:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011dfbd:	77 17                	ja     f011dfd6 <test_kheap_phys_addr+0x88b>
f011dfbf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dfc6:	83 ec 0c             	sub    $0xc,%esp
f011dfc9:	68 24 ea 12 f0       	push   $0xf012ea24
f011dfce:	e8 99 2f fe ff       	call   f0100f6c <cprintf>
f011dfd3:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011dfd6:	e8 2e fa fe ff       	call   f010da09 <sys_calculate_free_frames>
f011dfdb:	89 45 88             	mov    %eax,-0x78(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011dfde:	e8 5d 68 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011dfe3:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[1]);
f011dfe6:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011dfec:	83 ec 0c             	sub    $0xc,%esp
f011dfef:	50                   	push   %eax
f011dff0:	e8 db aa fe ff       	call   f0108ad0 <kfree>
f011dff5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011dff8:	e8 43 68 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011dffd:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011e000:	74 17                	je     f011e019 <test_kheap_phys_addr+0x8ce>
f011e002:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011e009:	83 ec 0c             	sub    $0xc,%esp
f011e00c:	68 20 e6 12 f0       	push   $0xf012e620
f011e011:	e8 56 2f fe ff       	call   f0100f6c <cprintf>
f011e016:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011e019:	e8 eb f9 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e01e:	89 c2                	mov    %eax,%edx
f011e020:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e023:	29 c2                	sub    %eax,%edx
f011e025:	89 d0                	mov    %edx,%eax
f011e027:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011e02c:	77 17                	ja     f011e045 <test_kheap_phys_addr+0x8fa>
f011e02e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011e035:	83 ec 0c             	sub    $0xc,%esp
f011e038:	68 24 ea 12 f0       	push   $0xf012ea24
f011e03d:	e8 2a 2f fe ff       	call   f0100f6c <cprintf>
f011e042:	83 c4 10             	add    $0x10,%esp

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011e045:	e8 bf f9 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e04a:	89 45 88             	mov    %eax,-0x78(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e04d:	e8 ee 67 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e052:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[7]);
f011e055:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011e05b:	83 ec 0c             	sub    $0xc,%esp
f011e05e:	50                   	push   %eax
f011e05f:	e8 6c aa fe ff       	call   f0108ad0 <kfree>
f011e064:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e067:	e8 d4 67 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e06c:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011e06f:	74 17                	je     f011e088 <test_kheap_phys_addr+0x93d>
f011e071:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011e078:	83 ec 0c             	sub    $0xc,%esp
f011e07b:	68 20 e6 12 f0       	push   $0xf012e620
f011e080:	e8 e7 2e fe ff       	call   f0100f6c <cprintf>
f011e085:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 6*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011e088:	e8 7c f9 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e08d:	89 c2                	mov    %eax,%edx
f011e08f:	8b 45 88             	mov    -0x78(%ebp),%eax
f011e092:	29 c2                	sub    %eax,%edx
f011e094:	89 d0                	mov    %edx,%eax
f011e096:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011e09b:	77 17                	ja     f011e0b4 <test_kheap_phys_addr+0x969>
f011e09d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011e0a4:	83 ec 0c             	sub    $0xc,%esp
f011e0a7:	68 24 ea 12 f0       	push   $0xf012ea24
f011e0ac:	e8 bb 2e fe ff       	call   f0100f6c <cprintf>
f011e0b1:	83 c4 10             	add    $0x10,%esp
	}

	//[PAGE ALLOCATOR] test kheap_physical_address after kmalloc and kfree [20%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
f011e0b4:	c7 45 80 00 70 d0 f8 	movl   $0xf8d07000,-0x80(%ebp)
		uint32 allPAs[(13*Mega + 24*kilo + INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
f011e0bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		uint32 startVA = da_limit + PAGE_SIZE;
f011e0c2:	a1 d8 ed 17 f0       	mov    0xf017edd8,%eax
f011e0c7:	05 00 10 00 00       	add    $0x1000,%eax
f011e0cc:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)

		for (va = startVA; va < endVA; va+=PAGE_SIZE)
f011e0d2:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e0d8:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011e0db:	eb 25                	jmp    f011e102 <test_kheap_phys_addr+0x9b7>
		{
			allPAs[i++] = kheap_physical_address(va);
f011e0dd:	8b 5d f4             	mov    -0xc(%ebp),%ebx
f011e0e0:	8d 43 01             	lea    0x1(%ebx),%eax
f011e0e3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011e0e6:	83 ec 0c             	sub    $0xc,%esp
f011e0e9:	ff 75 dc             	pushl  -0x24(%ebp)
f011e0ec:	e8 13 aa fe ff       	call   f0108b04 <kheap_physical_address>
f011e0f1:	83 c4 10             	add    $0x10,%esp
f011e0f4:	89 84 9d 48 ca ff ff 	mov    %eax,-0x35b8(%ebp,%ebx,4)
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
		uint32 allPAs[(13*Mega + 24*kilo + INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		uint32 startVA = da_limit + PAGE_SIZE;

		for (va = startVA; va < endVA; va+=PAGE_SIZE)
f011e0fb:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
f011e102:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e105:	3b 45 80             	cmp    -0x80(%ebp),%eax
f011e108:	72 d3                	jb     f011e0dd <test_kheap_phys_addr+0x992>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f011e10a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e10d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
		i = 0;
f011e113:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		int j;
		for (va = startVA; va < endVA; )
f011e11a:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e120:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011e123:	e9 f1 00 00 00       	jmp    f011e219 <test_kheap_phys_addr+0xace>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011e128:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f011e12d:	83 ec 04             	sub    $0x4,%esp
f011e130:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011e136:	52                   	push   %edx
f011e137:	ff 75 dc             	pushl  -0x24(%ebp)
f011e13a:	50                   	push   %eax
f011e13b:	e8 cd a2 fe ff       	call   f010840d <get_page_table>
f011e140:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011e143:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011e149:	85 c0                	test   %eax,%eax
f011e14b:	75 24                	jne    f011e171 <test_kheap_phys_addr+0xa26>
				if (correct)
f011e14d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e151:	74 1e                	je     f011e171 <test_kheap_phys_addr+0xa26>
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011e153:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011e15a:	83 ec 04             	sub    $0x4,%esp
f011e15d:	68 78 ec 12 f0       	push   $0xf012ec78
f011e162:	68 86 05 00 00       	push   $0x586
f011e167:	68 d2 ec 12 f0       	push   $0xf012ecd2
f011e16c:	e8 a9 21 fe ff       	call   f010031a <_panic>

			for (j = PTX(va); i < ii && j < 1024 && va < endVA; ++j, ++i)
f011e171:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e174:	c1 e8 0c             	shr    $0xc,%eax
f011e177:	25 ff 03 00 00       	and    $0x3ff,%eax
f011e17c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011e17f:	eb 78                	jmp    f011e1f9 <test_kheap_phys_addr+0xaae>
			{
				if (((ptr_table[j] & 0xFFFFF000)+((ptr_table[j] & PERM_PRESENT) == 0? 0 : va & 0x00000FFF)) != allPAs[i])
f011e181:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011e187:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011e18a:	c1 e2 02             	shl    $0x2,%edx
f011e18d:	01 d0                	add    %edx,%eax
f011e18f:	8b 00                	mov    (%eax),%eax
f011e191:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011e196:	89 c1                	mov    %eax,%ecx
f011e198:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011e19e:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011e1a1:	c1 e2 02             	shl    $0x2,%edx
f011e1a4:	01 d0                	add    %edx,%eax
f011e1a6:	8b 00                	mov    (%eax),%eax
f011e1a8:	83 e0 01             	and    $0x1,%eax
f011e1ab:	85 c0                	test   %eax,%eax
f011e1ad:	74 0a                	je     f011e1b9 <test_kheap_phys_addr+0xa6e>
f011e1af:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e1b2:	25 ff 0f 00 00       	and    $0xfff,%eax
f011e1b7:	eb 05                	jmp    f011e1be <test_kheap_phys_addr+0xa73>
f011e1b9:	b8 00 00 00 00       	mov    $0x0,%eax
f011e1be:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f011e1c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e1c4:	8b 84 85 48 ca ff ff 	mov    -0x35b8(%ebp,%eax,4),%eax
f011e1cb:	39 c2                	cmp    %eax,%edx
f011e1cd:	74 1d                	je     f011e1ec <test_kheap_phys_addr+0xaa1>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					if (correct)
f011e1cf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e1d3:	74 17                	je     f011e1ec <test_kheap_phys_addr+0xaa1>
					{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f011e1d5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011e1dc:	83 ec 0c             	sub    $0xc,%esp
f011e1df:	68 ea ec 12 f0       	push   $0xf012ecea
f011e1e4:	e8 83 2d fe ff       	call   f0100f6c <cprintf>
f011e1e9:	83 c4 10             	add    $0x10,%esp
				}
				va += PAGE_SIZE;
f011e1ec:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				if (correct)
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }

			for (j = PTX(va); i < ii && j < 1024 && va < endVA; ++j, ++i)
f011e1f3:	ff 45 d8             	incl   -0x28(%ebp)
f011e1f6:	ff 45 f4             	incl   -0xc(%ebp)
f011e1f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e1fc:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f011e202:	7d 15                	jge    f011e219 <test_kheap_phys_addr+0xace>
f011e204:	81 7d d8 ff 03 00 00 	cmpl   $0x3ff,-0x28(%ebp)
f011e20b:	7f 0c                	jg     f011e219 <test_kheap_phys_addr+0xace>
f011e20d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e210:	3b 45 80             	cmp    -0x80(%ebp),%eax
f011e213:	0f 82 68 ff ff ff    	jb     f011e181 <test_kheap_phys_addr+0xa36>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = startVA; va < endVA; )
f011e219:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e21c:	3b 45 80             	cmp    -0x80(%ebp),%eax
f011e21f:	0f 82 03 ff ff ff    	jb     f011e128 <test_kheap_phys_addr+0x9dd>
				}
				va += PAGE_SIZE;
			}
		}
	}
	if (correct)	eval+=20 ;
f011e225:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e229:	74 04                	je     f011e22f <test_kheap_phys_addr+0xae4>
f011e22b:	83 45 f0 14          	addl   $0x14,-0x10(%ebp)

	correct = 1 ;
f011e22f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//[DYNAMIC ALLOCATOR] test kheap_physical_address on the entire allocated area [30%]
	{
		uint32 va, pa;
		for (va = KERNEL_HEAP_START; va < (uint32)sbrk(0); va++)
f011e236:	c7 45 d4 00 00 00 f6 	movl   $0xf6000000,-0x2c(%ebp)
f011e23d:	e9 af 00 00 00       	jmp    f011e2f1 <test_kheap_phys_addr+0xba6>
		{
			pa = kheap_physical_address(va);
f011e242:	83 ec 0c             	sub    $0xc,%esp
f011e245:	ff 75 d4             	pushl  -0x2c(%ebp)
f011e248:	e8 b7 a8 fe ff       	call   f0108b04 <kheap_physical_address>
f011e24d:	83 c4 10             	add    $0x10,%esp
f011e250:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011e256:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f011e25b:	83 ec 04             	sub    $0x4,%esp
f011e25e:	8d 95 64 fe ff ff    	lea    -0x19c(%ebp),%edx
f011e264:	52                   	push   %edx
f011e265:	ff 75 d4             	pushl  -0x2c(%ebp)
f011e268:	50                   	push   %eax
f011e269:	e8 9f a1 fe ff       	call   f010840d <get_page_table>
f011e26e:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011e271:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011e277:	85 c0                	test   %eax,%eax
f011e279:	75 24                	jne    f011e29f <test_kheap_phys_addr+0xb54>
				if (correct)
f011e27b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e27f:	74 1e                	je     f011e29f <test_kheap_phys_addr+0xb54>
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011e281:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011e288:	83 ec 04             	sub    $0x4,%esp
f011e28b:	68 78 ec 12 f0       	push   $0xf012ec78
f011e290:	68 a1 05 00 00       	push   $0x5a1
f011e295:	68 d2 ec 12 f0       	push   $0xf012ecd2
f011e29a:	e8 7b 20 fe ff       	call   f010031a <_panic>

			if (((ptr_table[PTX(va)] & 0xFFFFF000)+(va & 0x00000FFF))!= pa)
f011e29f:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011e2a5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011e2a8:	c1 ea 0c             	shr    $0xc,%edx
f011e2ab:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011e2b1:	c1 e2 02             	shl    $0x2,%edx
f011e2b4:	01 d0                	add    %edx,%eax
f011e2b6:	8b 00                	mov    (%eax),%eax
f011e2b8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011e2bd:	89 c2                	mov    %eax,%edx
f011e2bf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e2c2:	25 ff 0f 00 00       	and    $0xfff,%eax
f011e2c7:	01 d0                	add    %edx,%eax
f011e2c9:	3b 85 74 ff ff ff    	cmp    -0x8c(%ebp),%eax
f011e2cf:	74 1d                	je     f011e2ee <test_kheap_phys_addr+0xba3>
			{
				//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
				if (correct)
f011e2d1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e2d5:	74 17                	je     f011e2ee <test_kheap_phys_addr+0xba3>
				{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f011e2d7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011e2de:	83 ec 0c             	sub    $0xc,%esp
f011e2e1:	68 ea ec 12 f0       	push   $0xf012ecea
f011e2e6:	e8 81 2c fe ff       	call   f0100f6c <cprintf>
f011e2eb:	83 c4 10             	add    $0x10,%esp

	correct = 1 ;
	//[DYNAMIC ALLOCATOR] test kheap_physical_address on the entire allocated area [30%]
	{
		uint32 va, pa;
		for (va = KERNEL_HEAP_START; va < (uint32)sbrk(0); va++)
f011e2ee:	ff 45 d4             	incl   -0x2c(%ebp)
f011e2f1:	83 ec 0c             	sub    $0xc,%esp
f011e2f4:	6a 00                	push   $0x0
f011e2f6:	e8 b1 a7 fe ff       	call   f0108aac <sbrk>
f011e2fb:	83 c4 10             	add    $0x10,%esp
f011e2fe:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011e301:	0f 87 3b ff ff ff    	ja     f011e242 <test_kheap_phys_addr+0xaf7>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
			}
		}
	}
	if (correct)	eval+=30 ;
f011e307:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e30b:	74 04                	je     f011e311 <test_kheap_phys_addr+0xbc6>
f011e30d:	83 45 f0 1e          	addl   $0x1e,-0x10(%ebp)

	correct = 1 ;
f011e311:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//test kheap_physical_address on non-mapped area [10%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f011e318:	c7 85 70 ff ff ff 00 	movl   $0xf9001000,-0x90(%ebp)
f011e31f:	10 00 f9 
		i = 0;
f011e322:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f011e329:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e32f:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e332:	eb 0a                	jmp    f011e33e <test_kheap_phys_addr+0xbf3>
		{
			i++;
f011e334:	ff 45 f4             	incl   -0xc(%ebp)
	//test kheap_physical_address on non-mapped area [10%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f011e337:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f011e33e:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f011e345:	76 ed                	jbe    f011e334 <test_kheap_phys_addr+0xbe9>
		{
			i++;
		}
		int ii = i ;
f011e347:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e34a:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
		i = 0;
f011e350:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f011e357:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e35d:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e360:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f011e367:	e9 13 01 00 00       	jmp    f011e47f <test_kheap_phys_addr+0xd34>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f011e36c:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011e36f:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f011e374:	83 ec 04             	sub    $0x4,%esp
f011e377:	8d 8d 60 fe ff ff    	lea    -0x1a0(%ebp),%ecx
f011e37d:	51                   	push   %ecx
f011e37e:	52                   	push   %edx
f011e37f:	50                   	push   %eax
f011e380:	e8 88 a0 fe ff       	call   f010840d <get_page_table>
f011e385:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011e388:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011e38e:	85 c0                	test   %eax,%eax
f011e390:	75 24                	jne    f011e3b6 <test_kheap_phys_addr+0xc6b>
			{
				if (correct)
f011e392:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e396:	74 1e                	je     f011e3b6 <test_kheap_phys_addr+0xc6b>
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011e398:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011e39f:	83 ec 04             	sub    $0x4,%esp
f011e3a2:	68 78 ec 12 f0       	push   $0xf012ec78
f011e3a7:	68 c2 05 00 00       	push   $0x5c2
f011e3ac:	68 d2 ec 12 f0       	push   $0xf012ecd2
f011e3b1:	e8 64 1f fe ff       	call   f010031a <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f011e3b6:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f011e3bd:	e9 9a 00 00 00       	jmp    f011e45c <test_kheap_phys_addr+0xd11>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f011e3c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e3c5:	c1 e0 0c             	shl    $0xc,%eax
f011e3c8:	89 c2                	mov    %eax,%edx
f011e3ca:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e3d0:	01 d0                	add    %edx,%eax
f011e3d2:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f011e3d8:	83 ec 0c             	sub    $0xc,%esp
f011e3db:	ff b5 68 ff ff ff    	pushl  -0x98(%ebp)
f011e3e1:	e8 1e a7 fe ff       	call   f0108b04 <kheap_physical_address>
f011e3e6:	83 c4 10             	add    $0x10,%esp
f011e3e9:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
				if (((ptr_table[j] & 0xFFFFF000)+((ptr_table[j] & PERM_PRESENT) == 0? 0 : page_va & 0x00000FFF)) != supposed_kheap_phys_add)
f011e3ef:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011e3f5:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011e3f8:	c1 e2 02             	shl    $0x2,%edx
f011e3fb:	01 d0                	add    %edx,%eax
f011e3fd:	8b 00                	mov    (%eax),%eax
f011e3ff:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011e404:	89 c1                	mov    %eax,%ecx
f011e406:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011e40c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011e40f:	c1 e2 02             	shl    $0x2,%edx
f011e412:	01 d0                	add    %edx,%eax
f011e414:	8b 00                	mov    (%eax),%eax
f011e416:	83 e0 01             	and    $0x1,%eax
f011e419:	85 c0                	test   %eax,%eax
f011e41b:	74 0d                	je     f011e42a <test_kheap_phys_addr+0xcdf>
f011e41d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e423:	25 ff 0f 00 00       	and    $0xfff,%eax
f011e428:	eb 05                	jmp    f011e42f <test_kheap_phys_addr+0xce4>
f011e42a:	b8 00 00 00 00       	mov    $0x0,%eax
f011e42f:	01 c8                	add    %ecx,%eax
f011e431:	3b 85 64 ff ff ff    	cmp    -0x9c(%ebp),%eax
f011e437:	74 1d                	je     f011e456 <test_kheap_phys_addr+0xd0b>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					if (correct)
f011e439:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e43d:	74 17                	je     f011e456 <test_kheap_phys_addr+0xd0b>
					{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f011e43f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011e446:	83 ec 0c             	sub    $0xc,%esp
f011e449:	68 ea ec 12 f0       	push   $0xf012ecea
f011e44e:	e8 19 2b fe ff       	call   f0100f6c <cprintf>
f011e453:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
			{
				if (correct)
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f011e456:	ff 45 cc             	incl   -0x34(%ebp)
f011e459:	ff 45 f4             	incl   -0xc(%ebp)
f011e45c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e45f:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f011e465:	7d 0d                	jge    f011e474 <test_kheap_phys_addr+0xd29>
f011e467:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f011e46e:	0f 8e 4e ff ff ff    	jle    f011e3c2 <test_kheap_phys_addr+0xc77>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f011e474:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f011e47b:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f011e47f:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f011e483:	0f 88 e3 fe ff ff    	js     f011e36c <test_kheap_phys_addr+0xc21>
f011e489:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f011e48d:	7f 0d                	jg     f011e49c <test_kheap_phys_addr+0xd51>
f011e48f:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f011e496:	0f 86 d0 fe ff ff    	jbe    f011e36c <test_kheap_phys_addr+0xc21>
					{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
				}
			}
		}
	}
	if (correct)	eval+=10 ;
f011e49c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e4a0:	74 04                	je     f011e4a6 <test_kheap_phys_addr+0xd5b>
f011e4a2:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)

	cprintf("\ntest kheap_physical_address completed. Eval = %d%\n", eval);
f011e4a6:	83 ec 08             	sub    $0x8,%esp
f011e4a9:	ff 75 f0             	pushl  -0x10(%ebp)
f011e4ac:	68 08 ed 12 f0       	push   $0xf012ed08
f011e4b1:	e8 b6 2a fe ff       	call   f0100f6c <cprintf>
f011e4b6:	83 c4 10             	add    $0x10,%esp

	return 1;
f011e4b9:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011e4be:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011e4c1:	5b                   	pop    %ebx
f011e4c2:	5f                   	pop    %edi
f011e4c3:	5d                   	pop    %ebp
f011e4c4:	c3                   	ret    

f011e4c5 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f011e4c5:	55                   	push   %ebp
f011e4c6:	89 e5                	mov    %esp,%ebp
f011e4c8:	57                   	push   %edi
f011e4c9:	56                   	push   %esi
f011e4ca:	53                   	push   %ebx
f011e4cb:	81 ec 9c 01 00 00    	sub    $0x19c,%esp
f011e4d1:	89 e0                	mov    %esp,%eax
f011e4d3:	89 c6                	mov    %eax,%esi
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f011e4d5:	83 ec 0c             	sub    $0xc,%esp
f011e4d8:	68 60 e5 12 f0       	push   $0xf012e560
f011e4dd:	e8 8a 2a fe ff       	call   f0100f6c <cprintf>
f011e4e2:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e4e5:	83 ec 0c             	sub    $0xc,%esp
f011e4e8:	68 90 e5 12 f0       	push   $0xf012e590
f011e4ed:	e8 7a 2a fe ff       	call   f0100f6c <cprintf>
f011e4f2:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011e4f5:	83 ec 0c             	sub    $0xc,%esp
f011e4f8:	68 60 e5 12 f0       	push   $0xf012e560
f011e4fd:	e8 6a 2a fe ff       	call   f0100f6c <cprintf>
f011e502:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011e505:	c6 45 c7 80          	movb   $0x80,-0x39(%ebp)
	char maxByte = 0x7F;
f011e509:	c6 45 c6 7f          	movb   $0x7f,-0x3a(%ebp)
	short minShort = 1<<15 ;
f011e50d:	66 c7 45 c4 00 80    	movw   $0x8000,-0x3c(%ebp)
	short maxShort = 0x7FFF;
f011e513:	66 c7 45 c2 ff 7f    	movw   $0x7fff,-0x3e(%ebp)
	int minInt = 1<<31 ;
f011e519:	c7 45 bc 00 00 00 80 	movl   $0x80000000,-0x44(%ebp)
	int maxInt = 0x7FFFFFFF;
f011e520:	c7 45 b8 ff ff ff 7f 	movl   $0x7fffffff,-0x48(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011e527:	e8 dd f4 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e52c:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011e52f:	8d 95 0c ff ff ff    	lea    -0xf4(%ebp),%edx
f011e535:	b9 14 00 00 00       	mov    $0x14,%ecx
f011e53a:	b8 00 00 00 00       	mov    $0x0,%eax
f011e53f:	89 d7                	mov    %edx,%edi
f011e541:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011e543:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f011e549:	b9 14 00 00 00       	mov    $0x14,%ecx
f011e54e:	b8 00 00 00 00       	mov    $0x0,%eax
f011e553:	89 d7                	mov    %edx,%edi
f011e555:	f3 ab                	rep stos %eax,%es:(%edi)

	int eval = 0;
f011e557:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool correct = 1;
f011e55e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f011e565:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f011e56b:	b9 14 00 00 00       	mov    $0x14,%ecx
f011e570:	b8 00 00 00 00       	mov    $0x0,%eax
f011e575:	89 d7                	mov    %edx,%edi
f011e577:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011e579:	e8 8b f4 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e57e:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e581:	e8 ba 62 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e586:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011e589:	83 ec 0c             	sub    $0xc,%esp
f011e58c:	68 00 fc 1f 00       	push   $0x1ffc00
f011e591:	e8 20 a5 fe ff       	call   f0108ab6 <kmalloc>
f011e596:	83 c4 10             	add    $0x10,%esp
f011e599:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011e59f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011e5a5:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011e5aa:	74 17                	je     f011e5c3 <test_kheap_virt_addr+0xfe>
f011e5ac:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e5b3:	83 ec 0c             	sub    $0xc,%esp
f011e5b6:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011e5bb:	e8 ac 29 fe ff       	call   f0100f6c <cprintf>
f011e5c0:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e5c3:	e8 78 62 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e5c8:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e5cb:	74 17                	je     f011e5e4 <test_kheap_virt_addr+0x11f>
f011e5cd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e5d4:	83 ec 0c             	sub    $0xc,%esp
f011e5d7:	68 20 e6 12 f0       	push   $0xf012e620
f011e5dc:	e8 8b 29 fe ff       	call   f0100f6c <cprintf>
f011e5e1:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011e5e4:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011e5e7:	e8 1d f4 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e5ec:	29 c3                	sub    %eax,%ebx
f011e5ee:	89 d8                	mov    %ebx,%eax
f011e5f0:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011e5f5:	77 17                	ja     f011e60e <test_kheap_virt_addr+0x149>
f011e5f7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e5fe:	83 ec 0c             	sub    $0xc,%esp
f011e601:	68 8c e6 12 f0       	push   $0xf012e68c
f011e606:	e8 61 29 fe ff       	call   f0100f6c <cprintf>
f011e60b:	83 c4 10             	add    $0x10,%esp

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011e60e:	e8 f6 f3 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e613:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e616:	e8 25 62 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e61b:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011e61e:	83 ec 0c             	sub    $0xc,%esp
f011e621:	68 00 fc 1f 00       	push   $0x1ffc00
f011e626:	e8 8b a4 fe ff       	call   f0108ab6 <kmalloc>
f011e62b:	83 c4 10             	add    $0x10,%esp
f011e62e:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011e634:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011e63a:	3d 00 10 20 f8       	cmp    $0xf8201000,%eax
f011e63f:	74 17                	je     f011e658 <test_kheap_virt_addr+0x193>
f011e641:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e648:	83 ec 0c             	sub    $0xc,%esp
f011e64b:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011e650:	e8 17 29 fe ff       	call   f0100f6c <cprintf>
f011e655:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e658:	e8 e3 61 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e65d:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e660:	74 17                	je     f011e679 <test_kheap_virt_addr+0x1b4>
f011e662:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e669:	83 ec 0c             	sub    $0xc,%esp
f011e66c:	68 20 e6 12 f0       	push   $0xf012e620
f011e671:	e8 f6 28 fe ff       	call   f0100f6c <cprintf>
f011e676:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011e679:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011e67c:	e8 88 f3 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e681:	29 c3                	sub    %eax,%ebx
f011e683:	89 d8                	mov    %ebx,%eax
f011e685:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011e68a:	77 17                	ja     f011e6a3 <test_kheap_virt_addr+0x1de>
f011e68c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e693:	83 ec 0c             	sub    $0xc,%esp
f011e696:	68 8c e6 12 f0       	push   $0xf012e68c
f011e69b:	e8 cc 28 fe ff       	call   f0100f6c <cprintf>
f011e6a0:	83 c4 10             	add    $0x10,%esp

		//[DYNAMIC ALLOCATOR]
		{
			//1 KB
			freeFrames = sys_calculate_free_frames() ;
f011e6a3:	e8 61 f3 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e6a8:	89 45 b0             	mov    %eax,-0x50(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011e6ab:	e8 90 61 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e6b0:	89 45 ac             	mov    %eax,-0x54(%ebp)
			ptr_allocations[2] = kmalloc(1*kilo);
f011e6b3:	83 ec 0c             	sub    $0xc,%esp
f011e6b6:	68 00 04 00 00       	push   $0x400
f011e6bb:	e8 f6 a3 fe ff       	call   f0108ab6 <kmalloc>
f011e6c0:	83 c4 10             	add    $0x10,%esp
f011e6c3:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
			if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f011e6c9:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011e6cf:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011e6d4:	76 28                	jbe    f011e6fe <test_kheap_virt_addr+0x239>
f011e6d6:	8b 9d 74 fe ff ff    	mov    -0x18c(%ebp),%ebx
f011e6dc:	83 ec 0c             	sub    $0xc,%esp
f011e6df:	6a 00                	push   $0x0
f011e6e1:	e8 c6 a3 fe ff       	call   f0108aac <sbrk>
f011e6e6:	83 c4 10             	add    $0x10,%esp
f011e6e9:	39 c3                	cmp    %eax,%ebx
f011e6eb:	73 11                	jae    f011e6fe <test_kheap_virt_addr+0x239>
f011e6ed:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011e6f3:	89 c2                	mov    %eax,%edx
f011e6f5:	a1 d8 ed 17 f0       	mov    0xf017edd8,%eax
f011e6fa:	39 c2                	cmp    %eax,%edx
f011e6fc:	72 17                	jb     f011e715 <test_kheap_virt_addr+0x250>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011e6fe:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e705:	83 ec 0c             	sub    $0xc,%esp
f011e708:	68 20 e7 12 f0       	push   $0xf012e720
f011e70d:	e8 5a 28 fe ff       	call   f0100f6c <cprintf>
f011e712:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e715:	e8 26 61 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e71a:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e71d:	74 17                	je     f011e736 <test_kheap_virt_addr+0x271>
f011e71f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e726:	83 ec 0c             	sub    $0xc,%esp
f011e729:	68 20 e6 12 f0       	push   $0xf012e620
f011e72e:	e8 39 28 fe ff       	call   f0100f6c <cprintf>
f011e733:	83 c4 10             	add    $0x10,%esp
			//if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f011e736:	e8 ce f2 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e73b:	89 45 b0             	mov    %eax,-0x50(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011e73e:	e8 fd 60 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e743:	89 45 ac             	mov    %eax,-0x54(%ebp)
			ptr_allocations[3] = kmalloc(2*kilo);
f011e746:	83 ec 0c             	sub    $0xc,%esp
f011e749:	68 00 08 00 00       	push   $0x800
f011e74e:	e8 63 a3 fe ff       	call   f0108ab6 <kmalloc>
f011e753:	83 c4 10             	add    $0x10,%esp
f011e756:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
			if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f011e75c:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011e762:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011e767:	76 28                	jbe    f011e791 <test_kheap_virt_addr+0x2cc>
f011e769:	8b 9d 78 fe ff ff    	mov    -0x188(%ebp),%ebx
f011e76f:	83 ec 0c             	sub    $0xc,%esp
f011e772:	6a 00                	push   $0x0
f011e774:	e8 33 a3 fe ff       	call   f0108aac <sbrk>
f011e779:	83 c4 10             	add    $0x10,%esp
f011e77c:	39 c3                	cmp    %eax,%ebx
f011e77e:	73 11                	jae    f011e791 <test_kheap_virt_addr+0x2cc>
f011e780:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011e786:	89 c2                	mov    %eax,%edx
f011e788:	a1 d8 ed 17 f0       	mov    0xf017edd8,%eax
f011e78d:	39 c2                	cmp    %eax,%edx
f011e78f:	72 17                	jb     f011e7a8 <test_kheap_virt_addr+0x2e3>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011e791:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e798:	83 ec 0c             	sub    $0xc,%esp
f011e79b:	68 20 e7 12 f0       	push   $0xf012e720
f011e7a0:	e8 c7 27 fe ff       	call   f0100f6c <cprintf>
f011e7a5:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e7a8:	e8 93 60 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e7ad:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e7b0:	74 17                	je     f011e7c9 <test_kheap_virt_addr+0x304>
f011e7b2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e7b9:	83 ec 0c             	sub    $0xc,%esp
f011e7bc:	68 20 e6 12 f0       	push   $0xf012e620
f011e7c1:	e8 a6 27 fe ff       	call   f0100f6c <cprintf>
f011e7c6:	83 c4 10             	add    $0x10,%esp
			//if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

			//1.5 KB
			freeFrames = sys_calculate_free_frames() ;
f011e7c9:	e8 3b f2 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e7ce:	89 45 b0             	mov    %eax,-0x50(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011e7d1:	e8 6a 60 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e7d6:	89 45 ac             	mov    %eax,-0x54(%ebp)
			ptr_allocations[4] = kmalloc(3*kilo/2);
f011e7d9:	83 ec 0c             	sub    $0xc,%esp
f011e7dc:	68 00 06 00 00       	push   $0x600
f011e7e1:	e8 d0 a2 fe ff       	call   f0108ab6 <kmalloc>
f011e7e6:	83 c4 10             	add    $0x10,%esp
f011e7e9:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
			if ((uint32) ptr_allocations[4] < KERNEL_HEAP_START || ptr_allocations[4] >= sbrk(0) || (uint32) ptr_allocations[4] >= da_limit)
f011e7ef:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011e7f5:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011e7fa:	76 28                	jbe    f011e824 <test_kheap_virt_addr+0x35f>
f011e7fc:	8b 9d 7c fe ff ff    	mov    -0x184(%ebp),%ebx
f011e802:	83 ec 0c             	sub    $0xc,%esp
f011e805:	6a 00                	push   $0x0
f011e807:	e8 a0 a2 fe ff       	call   f0108aac <sbrk>
f011e80c:	83 c4 10             	add    $0x10,%esp
f011e80f:	39 c3                	cmp    %eax,%ebx
f011e811:	73 11                	jae    f011e824 <test_kheap_virt_addr+0x35f>
f011e813:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011e819:	89 c2                	mov    %eax,%edx
f011e81b:	a1 d8 ed 17 f0       	mov    0xf017edd8,%eax
f011e820:	39 c2                	cmp    %eax,%edx
f011e822:	72 17                	jb     f011e83b <test_kheap_virt_addr+0x376>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011e824:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e82b:	83 ec 0c             	sub    $0xc,%esp
f011e82e:	68 20 e7 12 f0       	push   $0xf012e720
f011e833:	e8 34 27 fe ff       	call   f0100f6c <cprintf>
f011e838:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e83b:	e8 00 60 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e840:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e843:	74 17                	je     f011e85c <test_kheap_virt_addr+0x397>
f011e845:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e84c:	83 ec 0c             	sub    $0xc,%esp
f011e84f:	68 20 e6 12 f0       	push   $0xf012e620
f011e854:	e8 13 27 fe ff       	call   f0100f6c <cprintf>
f011e859:	83 c4 10             	add    $0x10,%esp
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011e85c:	e8 a8 f1 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e861:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e864:	e8 d7 5f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e869:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[5] = kmalloc(7*kilo);
f011e86c:	83 ec 0c             	sub    $0xc,%esp
f011e86f:	68 00 1c 00 00       	push   $0x1c00
f011e874:	e8 3d a2 fe ff       	call   f0108ab6 <kmalloc>
f011e879:	83 c4 10             	add    $0x10,%esp
f011e87c:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega /*+ 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011e882:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011e888:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011e88d:	74 17                	je     f011e8a6 <test_kheap_virt_addr+0x3e1>
f011e88f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e896:	83 ec 0c             	sub    $0xc,%esp
f011e899:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011e89e:	e8 c9 26 fe ff       	call   f0100f6c <cprintf>
f011e8a3:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e8a6:	e8 95 5f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e8ab:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e8ae:	74 17                	je     f011e8c7 <test_kheap_virt_addr+0x402>
f011e8b0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e8b7:	83 ec 0c             	sub    $0xc,%esp
f011e8ba:	68 20 e6 12 f0       	push   $0xf012e620
f011e8bf:	e8 a8 26 fe ff       	call   f0100f6c <cprintf>
f011e8c4:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011e8c7:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011e8ca:	e8 3a f1 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e8cf:	29 c3                	sub    %eax,%ebx
f011e8d1:	89 d8                	mov    %ebx,%eax
f011e8d3:	83 f8 01             	cmp    $0x1,%eax
f011e8d6:	77 17                	ja     f011e8ef <test_kheap_virt_addr+0x42a>
f011e8d8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e8df:	83 ec 0c             	sub    $0xc,%esp
f011e8e2:	68 8c e6 12 f0       	push   $0xf012e68c
f011e8e7:	e8 80 26 fe ff       	call   f0100f6c <cprintf>
f011e8ec:	83 c4 10             	add    $0x10,%esp

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e8ef:	e8 15 f1 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e8f4:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e8f7:	e8 44 5f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e8fc:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011e8ff:	83 ec 0c             	sub    $0xc,%esp
f011e902:	68 00 fc 2f 00       	push   $0x2ffc00
f011e907:	e8 aa a1 fe ff       	call   f0108ab6 <kmalloc>
f011e90c:	83 c4 10             	add    $0x10,%esp
f011e90f:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011e915:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011e91b:	3d 00 30 40 f8       	cmp    $0xf8403000,%eax
f011e920:	74 17                	je     f011e939 <test_kheap_virt_addr+0x474>
f011e922:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e929:	83 ec 0c             	sub    $0xc,%esp
f011e92c:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011e931:	e8 36 26 fe ff       	call   f0100f6c <cprintf>
f011e936:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e939:	e8 02 5f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e93e:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e941:	74 17                	je     f011e95a <test_kheap_virt_addr+0x495>
f011e943:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e94a:	83 ec 0c             	sub    $0xc,%esp
f011e94d:	68 20 e6 12 f0       	push   $0xf012e620
f011e952:	e8 15 26 fe ff       	call   f0100f6c <cprintf>
f011e957:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011e95a:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011e95d:	e8 a7 f0 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e962:	29 c3                	sub    %eax,%ebx
f011e964:	89 d8                	mov    %ebx,%eax
f011e966:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011e96b:	77 17                	ja     f011e984 <test_kheap_virt_addr+0x4bf>
f011e96d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e974:	83 ec 0c             	sub    $0xc,%esp
f011e977:	68 8c e6 12 f0       	push   $0xf012e68c
f011e97c:	e8 eb 25 fe ff       	call   f0100f6c <cprintf>
f011e981:	83 c4 10             	add    $0x10,%esp

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011e984:	e8 80 f0 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e989:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e98c:	e8 af 5e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e991:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[7] = kmalloc(6*Mega-kilo);
f011e994:	83 ec 0c             	sub    $0xc,%esp
f011e997:	68 00 fc 5f 00       	push   $0x5ffc00
f011e99c:	e8 15 a1 fe ff       	call   f0108ab6 <kmalloc>
f011e9a1:	83 c4 10             	add    $0x10,%esp
f011e9a4:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011e9aa:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011e9b0:	3d 00 30 70 f8       	cmp    $0xf8703000,%eax
f011e9b5:	74 17                	je     f011e9ce <test_kheap_virt_addr+0x509>
f011e9b7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e9be:	83 ec 0c             	sub    $0xc,%esp
f011e9c1:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011e9c6:	e8 a1 25 fe ff       	call   f0100f6c <cprintf>
f011e9cb:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e9ce:	e8 6d 5e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e9d3:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e9d6:	74 17                	je     f011e9ef <test_kheap_virt_addr+0x52a>
f011e9d8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e9df:	83 ec 0c             	sub    $0xc,%esp
f011e9e2:	68 20 e6 12 f0       	push   $0xf012e620
f011e9e7:	e8 80 25 fe ff       	call   f0100f6c <cprintf>
f011e9ec:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 1536) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011e9ef:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011e9f2:	e8 12 f0 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e9f7:	29 c3                	sub    %eax,%ebx
f011e9f9:	89 d8                	mov    %ebx,%eax
f011e9fb:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011ea00:	77 17                	ja     f011ea19 <test_kheap_virt_addr+0x554>
f011ea02:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ea09:	83 ec 0c             	sub    $0xc,%esp
f011ea0c:	68 8c e6 12 f0       	push   $0xf012e68c
f011ea11:	e8 56 25 fe ff       	call   f0100f6c <cprintf>
f011ea16:	83 c4 10             	add    $0x10,%esp

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011ea19:	e8 eb ef fe ff       	call   f010da09 <sys_calculate_free_frames>
f011ea1e:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ea21:	e8 1a 5e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ea26:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[8] = kmalloc(14*kilo);
f011ea29:	83 ec 0c             	sub    $0xc,%esp
f011ea2c:	68 00 38 00 00       	push   $0x3800
f011ea31:	e8 80 a0 fe ff       	call   f0108ab6 <kmalloc>
f011ea36:	83 c4 10             	add    $0x10,%esp
f011ea39:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011ea3f:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011ea45:	3d 00 30 d0 f8       	cmp    $0xf8d03000,%eax
f011ea4a:	74 17                	je     f011ea63 <test_kheap_virt_addr+0x59e>
f011ea4c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ea53:	83 ec 0c             	sub    $0xc,%esp
f011ea56:	68 d0 e6 12 f0       	push   $0xf012e6d0
f011ea5b:	e8 0c 25 fe ff       	call   f0100f6c <cprintf>
f011ea60:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ea63:	e8 d8 5d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ea68:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011ea6b:	74 17                	je     f011ea84 <test_kheap_virt_addr+0x5bf>
f011ea6d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ea74:	83 ec 0c             	sub    $0xc,%esp
f011ea77:	68 20 e6 12 f0       	push   $0xf012e620
f011ea7c:	e8 eb 24 fe ff       	call   f0100f6c <cprintf>
f011ea81:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011ea84:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011ea87:	e8 7d ef fe ff       	call   f010da09 <sys_calculate_free_frames>
f011ea8c:	29 c3                	sub    %eax,%ebx
f011ea8e:	89 d8                	mov    %ebx,%eax
f011ea90:	83 f8 03             	cmp    $0x3,%eax
f011ea93:	77 17                	ja     f011eaac <test_kheap_virt_addr+0x5e7>
f011ea95:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ea9c:	83 ec 0c             	sub    $0xc,%esp
f011ea9f:	68 8c e6 12 f0       	push   $0xf012e68c
f011eaa4:	e8 c3 24 fe ff       	call   f0100f6c <cprintf>
f011eaa9:	83 c4 10             	add    $0x10,%esp
	}

	uint32 allocatedSpace = (13*Mega + 24*kilo + (INITIAL_KHEAP_ALLOCATIONS));
f011eaac:	c7 45 a8 00 60 d0 00 	movl   $0xd06000,-0x58(%ebp)
	uint32 allPAs[allocatedSpace/PAGE_SIZE] ;
f011eab3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011eab6:	c1 e8 0c             	shr    $0xc,%eax
f011eab9:	89 c2                	mov    %eax,%edx
f011eabb:	4a                   	dec    %edx
f011eabc:	89 55 a4             	mov    %edx,-0x5c(%ebp)
f011eabf:	c1 e0 02             	shl    $0x2,%eax
f011eac2:	8d 50 03             	lea    0x3(%eax),%edx
f011eac5:	b8 10 00 00 00       	mov    $0x10,%eax
f011eaca:	48                   	dec    %eax
f011eacb:	01 d0                	add    %edx,%eax
f011eacd:	bf 10 00 00 00       	mov    $0x10,%edi
f011ead2:	ba 00 00 00 00       	mov    $0x0,%edx
f011ead7:	f7 f7                	div    %edi
f011ead9:	6b c0 10             	imul   $0x10,%eax,%eax
f011eadc:	29 c4                	sub    %eax,%esp
f011eade:	89 e0                	mov    %esp,%eax
f011eae0:	83 c0 03             	add    $0x3,%eax
f011eae3:	c1 e8 02             	shr    $0x2,%eax
f011eae6:	c1 e0 02             	shl    $0x2,%eax
f011eae9:	89 45 a0             	mov    %eax,-0x60(%ebp)
	int numOfFrames = allocatedSpace/PAGE_SIZE ;
f011eaec:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011eaef:	c1 e8 0c             	shr    $0xc,%eax
f011eaf2:	89 45 9c             	mov    %eax,-0x64(%ebp)

	//test kheap_virtual_address after kmalloc only [20%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
f011eaf5:	c7 45 98 00 70 d0 f8 	movl   $0xf8d07000,-0x68(%ebp)
		uint32 startVA = da_limit + PAGE_SIZE;
f011eafc:	a1 d8 ed 17 f0       	mov    0xf017edd8,%eax
f011eb01:	05 00 10 00 00       	add    $0x1000,%eax
f011eb06:	89 45 94             	mov    %eax,-0x6c(%ebp)
		int i = 0;
f011eb09:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		for (va = startVA; va < endVA; )
f011eb10:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011eb13:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011eb16:	e9 2d 01 00 00       	jmp    f011ec48 <test_kheap_virt_addr+0x783>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011eb1b:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f011eb20:	83 ec 04             	sub    $0x4,%esp
f011eb23:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011eb29:	52                   	push   %edx
f011eb2a:	ff 75 dc             	pushl  -0x24(%ebp)
f011eb2d:	50                   	push   %eax
f011eb2e:	e8 da 98 fe ff       	call   f010840d <get_page_table>
f011eb33:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011eb36:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011eb3c:	85 c0                	test   %eax,%eax
f011eb3e:	75 1e                	jne    f011eb5e <test_kheap_virt_addr+0x699>
			{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011eb40:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011eb47:	83 ec 04             	sub    $0x4,%esp
f011eb4a:	68 78 ec 12 f0       	push   $0xf012ec78
f011eb4f:	68 5e 06 00 00       	push   $0x65e
f011eb54:	68 d2 ec 12 f0       	push   $0xf012ecd2
f011eb59:	e8 bc 17 fe ff       	call   f010031a <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024 && va < endVA; ++j, ++i)
f011eb5e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011eb61:	c1 e8 0c             	shr    $0xc,%eax
f011eb64:	25 ff 03 00 00       	and    $0x3ff,%eax
f011eb69:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f011eb6c:	e9 ba 00 00 00       	jmp    f011ec2b <test_kheap_virt_addr+0x766>
			{
				uint32 offset = j;
f011eb71:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011eb74:	89 45 90             	mov    %eax,-0x70(%ebp)
				allPAs[i] = (ptr_table[j] & 0xFFFFF000) + offset;
f011eb77:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011eb7d:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011eb80:	c1 e2 02             	shl    $0x2,%edx
f011eb83:	01 d0                	add    %edx,%eax
f011eb85:	8b 00                	mov    (%eax),%eax
f011eb87:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011eb8c:	89 c2                	mov    %eax,%edx
f011eb8e:	8b 45 90             	mov    -0x70(%ebp),%eax
f011eb91:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
f011eb94:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011eb97:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011eb9a:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011eb9d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011eba0:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011eba3:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011eba6:	83 ec 0c             	sub    $0xc,%esp
f011eba9:	50                   	push   %eax
f011ebaa:	e8 3b 9f fe ff       	call   f0108aea <kheap_virtual_address>
f011ebaf:	83 c4 10             	add    $0x10,%esp
f011ebb2:	89 45 8c             	mov    %eax,-0x74(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va+offset))
f011ebb5:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ebb8:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ebbb:	01 d0                	add    %edx,%eax
f011ebbd:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f011ebc0:	74 5c                	je     f011ec1e <test_kheap_virt_addr+0x759>
				{
					if (correct)
f011ebc2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011ebc6:	74 56                	je     f011ec1e <test_kheap_virt_addr+0x759>
					{
						cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + offset /*+ j*PAGE_SIZE*/, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f011ebc8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ebcb:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011ebce:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011ebd1:	8b 95 68 fe ff ff    	mov    -0x198(%ebp),%edx
f011ebd7:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
f011ebda:	c1 e1 02             	shl    $0x2,%ecx
f011ebdd:	01 ca                	add    %ecx,%edx
f011ebdf:	8b 12                	mov    (%edx),%edx
f011ebe1:	89 d1                	mov    %edx,%ecx
f011ebe3:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f011ebe9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011ebec:	8b 55 90             	mov    -0x70(%ebp),%edx
f011ebef:	01 da                	add    %ebx,%edx
f011ebf1:	83 ec 0c             	sub    $0xc,%esp
f011ebf4:	50                   	push   %eax
f011ebf5:	51                   	push   %ecx
f011ebf6:	52                   	push   %edx
f011ebf7:	ff 75 8c             	pushl  -0x74(%ebp)
f011ebfa:	68 3c ed 12 f0       	push   $0xf012ed3c
f011ebff:	e8 68 23 fe ff       	call   f0100f6c <cprintf>
f011ec04:	83 c4 20             	add    $0x20,%esp
						correct = 0; cprintf("Wrong kheap_virtual_address\n");
f011ec07:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ec0e:	83 ec 0c             	sub    $0xc,%esp
f011ec11:	68 7f ed 12 f0       	push   $0xf012ed7f
f011ec16:	e8 51 23 fe ff       	call   f0100f6c <cprintf>
f011ec1b:	83 c4 10             	add    $0x10,%esp
					}
				}
				va+=PAGE_SIZE;
f011ec1e:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
			{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }

			for (j = PTX(va); i < numOfFrames && j < 1024 && va < endVA; ++j, ++i)
f011ec25:	ff 45 d4             	incl   -0x2c(%ebp)
f011ec28:	ff 45 d8             	incl   -0x28(%ebp)
f011ec2b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011ec2e:	3b 45 9c             	cmp    -0x64(%ebp),%eax
f011ec31:	7d 15                	jge    f011ec48 <test_kheap_virt_addr+0x783>
f011ec33:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f011ec3a:	7f 0c                	jg     f011ec48 <test_kheap_virt_addr+0x783>
f011ec3c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011ec3f:	3b 45 98             	cmp    -0x68(%ebp),%eax
f011ec42:	0f 82 29 ff ff ff    	jb     f011eb71 <test_kheap_virt_addr+0x6ac>
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
		uint32 startVA = da_limit + PAGE_SIZE;
		int i = 0;
		int j;
		for (va = startVA; va < endVA; )
f011ec48:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011ec4b:	3b 45 98             	cmp    -0x68(%ebp),%eax
f011ec4e:	0f 82 c7 fe ff ff    	jb     f011eb1b <test_kheap_virt_addr+0x656>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	if (correct)	eval+=20 ;
f011ec54:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011ec58:	74 04                	je     f011ec5e <test_kheap_virt_addr+0x799>
f011ec5a:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)

	correct = 1 ;
f011ec5e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011ec65:	e8 9f ed fe ff       	call   f010da09 <sys_calculate_free_frames>
f011ec6a:	89 45 88             	mov    %eax,-0x78(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011ec6d:	e8 ce 5b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ec72:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[0]);
f011ec75:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011ec7b:	83 ec 0c             	sub    $0xc,%esp
f011ec7e:	50                   	push   %eax
f011ec7f:	e8 4c 9e fe ff       	call   f0108ad0 <kfree>
f011ec84:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ec87:	e8 b4 5b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ec8c:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011ec8f:	74 17                	je     f011eca8 <test_kheap_virt_addr+0x7e3>
f011ec91:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ec98:	83 ec 0c             	sub    $0xc,%esp
f011ec9b:	68 20 e6 12 f0       	push   $0xf012e620
f011eca0:	e8 c7 22 fe ff       	call   f0100f6c <cprintf>
f011eca5:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512 ) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011eca8:	e8 5c ed fe ff       	call   f010da09 <sys_calculate_free_frames>
f011ecad:	89 c2                	mov    %eax,%edx
f011ecaf:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ecb2:	29 c2                	sub    %eax,%edx
f011ecb4:	89 d0                	mov    %edx,%eax
f011ecb6:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011ecbb:	77 17                	ja     f011ecd4 <test_kheap_virt_addr+0x80f>
f011ecbd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ecc4:	83 ec 0c             	sub    $0xc,%esp
f011ecc7:	68 24 ea 12 f0       	push   $0xf012ea24
f011eccc:	e8 9b 22 fe ff       	call   f0100f6c <cprintf>
f011ecd1:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ecd4:	e8 30 ed fe ff       	call   f010da09 <sys_calculate_free_frames>
f011ecd9:	89 45 88             	mov    %eax,-0x78(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ecdc:	e8 5f 5b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ece1:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[1]);
f011ece4:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011ecea:	83 ec 0c             	sub    $0xc,%esp
f011eced:	50                   	push   %eax
f011ecee:	e8 dd 9d fe ff       	call   f0108ad0 <kfree>
f011ecf3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ecf6:	e8 45 5b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ecfb:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011ecfe:	74 17                	je     f011ed17 <test_kheap_virt_addr+0x852>
f011ed00:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ed07:	83 ec 0c             	sub    $0xc,%esp
f011ed0a:	68 20 e6 12 f0       	push   $0xf012e620
f011ed0f:	e8 58 22 fe ff       	call   f0100f6c <cprintf>
f011ed14:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011ed17:	e8 ed ec fe ff       	call   f010da09 <sys_calculate_free_frames>
f011ed1c:	89 c2                	mov    %eax,%edx
f011ed1e:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ed21:	29 c2                	sub    %eax,%edx
f011ed23:	89 d0                	mov    %edx,%eax
f011ed25:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011ed2a:	77 17                	ja     f011ed43 <test_kheap_virt_addr+0x87e>
f011ed2c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ed33:	83 ec 0c             	sub    $0xc,%esp
f011ed36:	68 24 ea 12 f0       	push   $0xf012ea24
f011ed3b:	e8 2c 22 fe ff       	call   f0100f6c <cprintf>
f011ed40:	83 c4 10             	add    $0x10,%esp

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011ed43:	e8 c1 ec fe ff       	call   f010da09 <sys_calculate_free_frames>
f011ed48:	89 45 88             	mov    %eax,-0x78(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ed4b:	e8 f0 5a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ed50:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[7]);
f011ed53:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011ed59:	83 ec 0c             	sub    $0xc,%esp
f011ed5c:	50                   	push   %eax
f011ed5d:	e8 6e 9d fe ff       	call   f0108ad0 <kfree>
f011ed62:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ed65:	e8 d6 5a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ed6a:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011ed6d:	74 17                	je     f011ed86 <test_kheap_virt_addr+0x8c1>
f011ed6f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ed76:	83 ec 0c             	sub    $0xc,%esp
f011ed79:	68 20 e6 12 f0       	push   $0xf012e620
f011ed7e:	e8 e9 21 fe ff       	call   f0100f6c <cprintf>
f011ed83:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 6*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011ed86:	e8 7e ec fe ff       	call   f010da09 <sys_calculate_free_frames>
f011ed8b:	89 c2                	mov    %eax,%edx
f011ed8d:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ed90:	29 c2                	sub    %eax,%edx
f011ed92:	89 d0                	mov    %edx,%eax
f011ed94:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011ed99:	77 17                	ja     f011edb2 <test_kheap_virt_addr+0x8ed>
f011ed9b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011eda2:	83 ec 0c             	sub    $0xc,%esp
f011eda5:	68 24 ea 12 f0       	push   $0xf012ea24
f011edaa:	e8 bd 21 fe ff       	call   f0100f6c <cprintf>
f011edaf:	83 c4 10             	add    $0x10,%esp


	//test kheap_virtual_address after kmalloc and kfree [20%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
f011edb2:	c7 45 80 00 70 d0 f8 	movl   $0xf8d07000,-0x80(%ebp)
		uint32 startVA = da_limit + PAGE_SIZE;
f011edb9:	a1 d8 ed 17 f0       	mov    0xf017edd8,%eax
f011edbe:	05 00 10 00 00       	add    $0x1000,%eax
f011edc3:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		int i = 0;
f011edc9:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS) / PAGE_SIZE;
f011edd0:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%ebp)
f011edd7:	00 00 00 
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f011edda:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ede0:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011ede3:	eb 44                	jmp    f011ee29 <test_kheap_virt_addr+0x964>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011ede5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ede8:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011edeb:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011edee:	83 ec 0c             	sub    $0xc,%esp
f011edf1:	50                   	push   %eax
f011edf2:	e8 f3 9c fe ff       	call   f0108aea <kheap_virtual_address>
f011edf7:	83 c4 10             	add    $0x10,%esp
f011edfa:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
			if (retrievedVA != 0)
f011ee00:	83 bd 74 ff ff ff 00 	cmpl   $0x0,-0x8c(%ebp)
f011ee07:	74 1d                	je     f011ee26 <test_kheap_virt_addr+0x961>
			{
				if (correct)
f011ee09:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011ee0d:	74 17                	je     f011ee26 <test_kheap_virt_addr+0x961>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
f011ee0f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ee16:	83 ec 0c             	sub    $0xc,%esp
f011ee19:	68 7f ed 12 f0       	push   $0xf012ed7f
f011ee1e:	e8 49 21 fe ff       	call   f0100f6c <cprintf>
f011ee23:	83 c4 10             	add    $0x10,%esp
		uint32 startVA = da_limit + PAGE_SIZE;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f011ee26:	ff 45 d0             	incl   -0x30(%ebp)
f011ee29:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ee2f:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f011ee35:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ee38:	39 c2                	cmp    %eax,%edx
f011ee3a:	77 a9                	ja     f011ede5 <test_kheap_virt_addr+0x920>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 8*kilo)/PAGE_SIZE; ++i)
f011ee3c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ee42:	05 00 04 00 00       	add    $0x400,%eax
f011ee47:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011ee4a:	eb 64                	jmp    f011eeb0 <test_kheap_virt_addr+0x9eb>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011ee4c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ee4f:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011ee52:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011ee55:	83 ec 0c             	sub    $0xc,%esp
f011ee58:	50                   	push   %eax
f011ee59:	e8 8c 9c fe ff       	call   f0108aea <kheap_virtual_address>
f011ee5e:	83 c4 10             	add    $0x10,%esp
f011ee61:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
			if (retrievedVA != ((startVA + i*PAGE_SIZE) + (allPAs[i] & 0xFFF)))
f011ee67:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ee6a:	c1 e0 0c             	shl    $0xc,%eax
f011ee6d:	89 c2                	mov    %eax,%edx
f011ee6f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ee75:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
f011ee78:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ee7b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011ee7e:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011ee81:	25 ff 0f 00 00       	and    $0xfff,%eax
f011ee86:	01 c8                	add    %ecx,%eax
f011ee88:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f011ee8e:	74 1d                	je     f011eead <test_kheap_virt_addr+0x9e8>
			{
				if (correct)
f011ee90:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011ee94:	74 17                	je     f011eead <test_kheap_virt_addr+0x9e8>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
f011ee96:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ee9d:	83 ec 0c             	sub    $0xc,%esp
f011eea0:	68 7f ed 12 f0       	push   $0xf012ed7f
f011eea5:	e8 c2 20 fe ff       	call   f0100f6c <cprintf>
f011eeaa:	83 c4 10             	add    $0x10,%esp
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 8*kilo)/PAGE_SIZE; ++i)
f011eead:	ff 45 d0             	incl   -0x30(%ebp)
f011eeb0:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011eeb6:	8d 90 02 07 00 00    	lea    0x702(%eax),%edx
f011eebc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011eebf:	39 c2                	cmp    %eax,%edx
f011eec1:	77 89                	ja     f011ee4c <test_kheap_virt_addr+0x987>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 8*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 8*kilo)/PAGE_SIZE; ++i)
f011eec3:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011eec9:	05 02 07 00 00       	add    $0x702,%eax
f011eece:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011eed1:	eb 44                	jmp    f011ef17 <test_kheap_virt_addr+0xa52>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011eed3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011eed6:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011eed9:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011eedc:	83 ec 0c             	sub    $0xc,%esp
f011eedf:	50                   	push   %eax
f011eee0:	e8 05 9c fe ff       	call   f0108aea <kheap_virtual_address>
f011eee5:	83 c4 10             	add    $0x10,%esp
f011eee8:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
			if (retrievedVA != 0)
f011eeee:	83 bd 6c ff ff ff 00 	cmpl   $0x0,-0x94(%ebp)
f011eef5:	74 1d                	je     f011ef14 <test_kheap_virt_addr+0xa4f>
			{
				if (correct)
f011eef7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011eefb:	74 17                	je     f011ef14 <test_kheap_virt_addr+0xa4f>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
f011eefd:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ef04:	83 ec 0c             	sub    $0xc,%esp
f011ef07:	68 7f ed 12 f0       	push   $0xf012ed7f
f011ef0c:	e8 5b 20 fe ff       	call   f0100f6c <cprintf>
f011ef11:	83 c4 10             	add    $0x10,%esp
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 8*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 8*kilo)/PAGE_SIZE; ++i)
f011ef14:	ff 45 d0             	incl   -0x30(%ebp)
f011ef17:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ef1d:	8d 90 02 0d 00 00    	lea    0xd02(%eax),%edx
f011ef23:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ef26:	39 c2                	cmp    %eax,%edx
f011ef28:	77 a9                	ja     f011eed3 <test_kheap_virt_addr+0xa0e>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 8*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 24*kilo)/PAGE_SIZE; ++i)
f011ef2a:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ef30:	05 02 0d 00 00       	add    $0xd02,%eax
f011ef35:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011ef38:	eb 64                	jmp    f011ef9e <test_kheap_virt_addr+0xad9>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011ef3a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ef3d:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011ef40:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011ef43:	83 ec 0c             	sub    $0xc,%esp
f011ef46:	50                   	push   %eax
f011ef47:	e8 9e 9b fe ff       	call   f0108aea <kheap_virtual_address>
f011ef4c:	83 c4 10             	add    $0x10,%esp
f011ef4f:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
			if (retrievedVA != ((startVA + i*PAGE_SIZE) + (allPAs[i] & 0xFFF)))
f011ef55:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ef58:	c1 e0 0c             	shl    $0xc,%eax
f011ef5b:	89 c2                	mov    %eax,%edx
f011ef5d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ef63:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
f011ef66:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ef69:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011ef6c:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011ef6f:	25 ff 0f 00 00       	and    $0xfff,%eax
f011ef74:	01 c8                	add    %ecx,%eax
f011ef76:	3b 85 68 ff ff ff    	cmp    -0x98(%ebp),%eax
f011ef7c:	74 1d                	je     f011ef9b <test_kheap_virt_addr+0xad6>
			{
				if (correct)
f011ef7e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011ef82:	74 17                	je     f011ef9b <test_kheap_virt_addr+0xad6>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
f011ef84:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ef8b:	83 ec 0c             	sub    $0xc,%esp
f011ef8e:	68 7f ed 12 f0       	push   $0xf012ed7f
f011ef93:	e8 d4 1f fe ff       	call   f0100f6c <cprintf>
f011ef98:	83 c4 10             	add    $0x10,%esp
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 8*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 24*kilo)/PAGE_SIZE; ++i)
f011ef9b:	ff 45 d0             	incl   -0x30(%ebp)
f011ef9e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011efa4:	8d 90 06 0d 00 00    	lea    0xd06(%eax),%edx
f011efaa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011efad:	39 c2                	cmp    %eax,%edx
f011efaf:	77 89                	ja     f011ef3a <test_kheap_virt_addr+0xa75>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
	}
	if (correct)	eval+=20 ;
f011efb1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011efb5:	74 04                	je     f011efbb <test_kheap_virt_addr+0xaf6>
f011efb7:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)

	correct = 1 ;
f011efbb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	//[DYNAMIC ALLOCATOR] test kheap_virtual_address each address [40%]
	{
		uint32 va, pa;
		for (va = KERNEL_HEAP_START; va < (uint32)sbrk(0); va++)
f011efc2:	c7 45 cc 00 00 00 f6 	movl   $0xf6000000,-0x34(%ebp)
f011efc9:	e9 d1 00 00 00       	jmp    f011f09f <test_kheap_virt_addr+0xbda>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011efce:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f011efd3:	83 ec 04             	sub    $0x4,%esp
f011efd6:	8d 95 64 fe ff ff    	lea    -0x19c(%ebp),%edx
f011efdc:	52                   	push   %edx
f011efdd:	ff 75 cc             	pushl  -0x34(%ebp)
f011efe0:	50                   	push   %eax
f011efe1:	e8 27 94 fe ff       	call   f010840d <get_page_table>
f011efe6:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011efe9:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011efef:	85 c0                	test   %eax,%eax
f011eff1:	75 1e                	jne    f011f011 <test_kheap_virt_addr+0xb4c>
			{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011eff3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011effa:	83 ec 04             	sub    $0x4,%esp
f011effd:	68 78 ec 12 f0       	push   $0xf012ec78
f011f002:	68 cb 06 00 00       	push   $0x6cb
f011f007:	68 d2 ec 12 f0       	push   $0xf012ecd2
f011f00c:	e8 09 13 fe ff       	call   f010031a <_panic>
			pa = (ptr_table[PTX(va)] & 0xFFFFF000) + (va & 0xFFF);
f011f011:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011f017:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011f01a:	c1 ea 0c             	shr    $0xc,%edx
f011f01d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011f023:	c1 e2 02             	shl    $0x2,%edx
f011f026:	01 d0                	add    %edx,%eax
f011f028:	8b 00                	mov    (%eax),%eax
f011f02a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011f02f:	89 c2                	mov    %eax,%edx
f011f031:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011f034:	25 ff 0f 00 00       	and    $0xfff,%eax
f011f039:	01 d0                	add    %edx,%eax
f011f03b:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
			uint32 retrievedVA = kheap_virtual_address(pa);
f011f041:	83 ec 0c             	sub    $0xc,%esp
f011f044:	ff b5 64 ff ff ff    	pushl  -0x9c(%ebp)
f011f04a:	e8 9b 9a fe ff       	call   f0108aea <kheap_virtual_address>
f011f04f:	83 c4 10             	add    $0x10,%esp
f011f052:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
			if (retrievedVA != va)
f011f058:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f05e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f061:	74 39                	je     f011f09c <test_kheap_virt_addr+0xbd7>
			{
				if (correct)
f011f063:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f067:	74 33                	je     f011f09c <test_kheap_virt_addr+0xbd7>
				{
					cprintf("\nPA = %x, retrievedVA = %x expectedVA = %x\n", pa, retrievedVA, va);
f011f069:	ff 75 cc             	pushl  -0x34(%ebp)
f011f06c:	ff b5 60 ff ff ff    	pushl  -0xa0(%ebp)
f011f072:	ff b5 64 ff ff ff    	pushl  -0x9c(%ebp)
f011f078:	68 9c ed 12 f0       	push   $0xf012ed9c
f011f07d:	e8 ea 1e fe ff       	call   f0100f6c <cprintf>
f011f082:	83 c4 10             	add    $0x10,%esp
					correct = 0; cprintf("Wrong kheap_virtual_address\n");
f011f085:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011f08c:	83 ec 0c             	sub    $0xc,%esp
f011f08f:	68 7f ed 12 f0       	push   $0xf012ed7f
f011f094:	e8 d3 1e fe ff       	call   f0100f6c <cprintf>
f011f099:	83 c4 10             	add    $0x10,%esp

	correct = 1 ;
	//[DYNAMIC ALLOCATOR] test kheap_virtual_address each address [40%]
	{
		uint32 va, pa;
		for (va = KERNEL_HEAP_START; va < (uint32)sbrk(0); va++)
f011f09c:	ff 45 cc             	incl   -0x34(%ebp)
f011f09f:	83 ec 0c             	sub    $0xc,%esp
f011f0a2:	6a 00                	push   $0x0
f011f0a4:	e8 03 9a fe ff       	call   f0108aac <sbrk>
f011f0a9:	83 c4 10             	add    $0x10,%esp
f011f0ac:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f0af:	0f 87 19 ff ff ff    	ja     f011efce <test_kheap_virt_addr+0xb09>
					correct = 0; cprintf("Wrong kheap_virtual_address\n");
				}
			}
		}
	}
	if (correct)	eval+=40 ;
f011f0b5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f0b9:	74 04                	je     f011f0bf <test_kheap_virt_addr+0xbfa>
f011f0bb:	83 45 e4 28          	addl   $0x28,-0x1c(%ebp)

	correct = 1 ;
f011f0bf:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f011f0c6:	c7 45 c8 00 00 10 00 	movl   $0x100000,-0x38(%ebp)
f011f0cd:	eb 5a                	jmp    f011f129 <test_kheap_virt_addr+0xc64>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f011f0cf:	83 ec 0c             	sub    $0xc,%esp
f011f0d2:	ff 75 c8             	pushl  -0x38(%ebp)
f011f0d5:	e8 10 9a fe ff       	call   f0108aea <kheap_virtual_address>
f011f0da:	83 c4 10             	add    $0x10,%esp
f011f0dd:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
			if (retrievedVA != 0)
f011f0e3:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%ebp)
f011f0ea:	74 36                	je     f011f122 <test_kheap_virt_addr+0xc5d>
			{
				if (correct)
f011f0ec:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f0f0:	74 30                	je     f011f122 <test_kheap_virt_addr+0xc5d>
				{
					cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f011f0f2:	83 ec 04             	sub    $0x4,%esp
f011f0f5:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
f011f0fb:	ff 75 c8             	pushl  -0x38(%ebp)
f011f0fe:	68 c8 ed 12 f0       	push   $0xf012edc8
f011f103:	e8 64 1e fe ff       	call   f0100f6c <cprintf>
f011f108:	83 c4 10             	add    $0x10,%esp
					correct = 0; cprintf("Wrong kheap_virtual_address\n");
f011f10b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011f112:	83 ec 0c             	sub    $0xc,%esp
f011f115:	68 7f ed 12 f0       	push   $0xf012ed7f
f011f11a:	e8 4d 1e fe ff       	call   f0100f6c <cprintf>
f011f11f:	83 c4 10             	add    $0x10,%esp

	correct = 1 ;
	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f011f122:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f011f129:	b8 30 54 5c 00       	mov    $0x5c5430,%eax
f011f12e:	39 45 c8             	cmp    %eax,-0x38(%ebp)
f011f131:	72 9c                	jb     f011f0cf <test_kheap_virt_addr+0xc0a>
					correct = 0; cprintf("Wrong kheap_virtual_address\n");
				}
			}
		}
	}
	if (correct)	eval+=20 ;
f011f133:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f137:	74 04                	je     f011f13d <test_kheap_virt_addr+0xc78>
f011f139:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)

	cprintf("\ntest kheap_virtual_address completed. Eval = %d%\n", eval);
f011f13d:	83 ec 08             	sub    $0x8,%esp
f011f140:	ff 75 e4             	pushl  -0x1c(%ebp)
f011f143:	68 e4 ed 12 f0       	push   $0xf012ede4
f011f148:	e8 1f 1e fe ff       	call   f0100f6c <cprintf>
f011f14d:	83 c4 10             	add    $0x10,%esp

	return 1;
f011f150:	b8 01 00 00 00       	mov    $0x1,%eax
f011f155:	89 f4                	mov    %esi,%esp

}
f011f157:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011f15a:	5b                   	pop    %ebx
f011f15b:	5e                   	pop    %esi
f011f15c:	5f                   	pop    %edi
f011f15d:	5d                   	pop    %ebp
f011f15e:	c3                   	ret    

f011f15f <test_ksbrk>:


// 2023
int test_ksbrk()
{
f011f15f:	55                   	push   %ebp
f011f160:	89 e5                	mov    %esp,%ebp
f011f162:	57                   	push   %edi
f011f163:	56                   	push   %esi
f011f164:	53                   	push   %ebx
f011f165:	81 ec 1c 01 00 00    	sub    $0x11c,%esp

	// malloc some spaces
	int i, freeFrames, freeDiskFrames;
	char *ptr;
	// int lastIndices[20] = {0};
	int sums[20] = {0};
f011f16b:	8d 95 7c ff ff ff    	lea    -0x84(%ebp),%edx
f011f171:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f176:	b8 00 00 00 00       	mov    $0x0,%eax
f011f17b:	89 d7                	mov    %edx,%edi
f011f17d:	f3 ab                	rep stos %eax,%es:(%edi)
	void *ptr_allocations[20] = {0};
f011f17f:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f011f185:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f18a:	b8 00 00 00 00       	mov    $0x0,%eax
f011f18f:	89 d7                	mov    %edx,%edi
f011f191:	f3 ab                	rep stos %eax,%es:(%edi)

	// uint32 inputIncrementValues[] = {0, kilo, 2*kilo, -512, -2 * kilo, -2* kilo, 128, kilo};
	uint32 expectedVAs[] = {
f011f193:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011f199:	bb 80 f3 12 f0       	mov    $0xf012f380,%ebx
f011f19e:	ba 0a 00 00 00       	mov    $0xa,%edx
f011f1a3:	89 c7                	mov    %eax,%edi
f011f1a5:	89 de                	mov    %ebx,%esi
f011f1a7:	89 d1                	mov    %edx,%ecx
f011f1a9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
			KERNEL_HEAP_START + 0x1E00, // 128
			KERNEL_HEAP_START + 0x2000, // kilo
			KERNEL_HEAP_START + 0x0C00, // -9*kilo
			KERNEL_HEAP_START + 0x0C00, // +6*kilo
	};
	uint32 expectedSbrks[] = {
f011f1ab:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f011f1b1:	bb c0 f3 12 f0       	mov    $0xf012f3c0,%ebx
f011f1b6:	ba 0a 00 00 00       	mov    $0xa,%edx
f011f1bb:	89 c7                	mov    %eax,%edi
f011f1bd:	89 de                	mov    %ebx,%esi
f011f1bf:	89 d1                	mov    %edx,%ecx
f011f1c1:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
			KERNEL_HEAP_START + 0x3000, // kilo
			KERNEL_HEAP_START + 0x0C00, // -9*kilo
			KERNEL_HEAP_START + 0x4000, // +10*kilo
	};
	uint32 oldBrk, newBrk;
	int eval = 0;
f011f1c3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool correct = 1;
f011f1ca:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	cprintf("STEP A: checking increment with ZERO\n");
f011f1d1:	83 ec 0c             	sub    $0xc,%esp
f011f1d4:	68 18 ee 12 f0       	push   $0xf012ee18
f011f1d9:	e8 8e 1d fe ff       	call   f0100f6c <cprintf>
f011f1de:	83 c4 10             	add    $0x10,%esp
	{
		freeFrames = (int)sys_calculate_free_frames();
f011f1e1:	e8 23 e8 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f1e6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f1e9:	e8 52 56 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f1ee:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = sbrk(0);
f011f1f1:	83 ec 0c             	sub    $0xc,%esp
f011f1f4:	6a 00                	push   $0x0
f011f1f6:	e8 b1 98 fe ff       	call   f0108aac <sbrk>
f011f1fb:	83 c4 10             	add    $0x10,%esp
f011f1fe:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f204:	e8 37 56 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f209:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f20c:	74 17                	je     f011f225 <test_ksbrk+0xc6>
		{
			correct = 0;
f011f20e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f215:	83 ec 0c             	sub    $0xc,%esp
f011f218:	68 40 ee 12 f0       	push   $0xf012ee40
f011f21d:	e8 4a 1d fe ff       	call   f0100f6c <cprintf>
f011f222:	83 c4 10             	add    $0x10,%esp
		}
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0)
f011f225:	e8 df e7 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f22a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011f22d:	74 17                	je     f011f246 <test_ksbrk+0xe7>
		{
			correct = 0;
f011f22f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011f236:	83 ec 0c             	sub    $0xc,%esp
f011f239:	68 a8 ee 12 f0       	push   $0xf012eea8
f011f23e:	e8 29 1d fe ff       	call   f0100f6c <cprintf>
f011f243:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[0] != expectedVAs[0])
f011f246:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011f24c:	89 c2                	mov    %eax,%edx
f011f24e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f254:	39 c2                	cmp    %eax,%edx
f011f256:	74 25                	je     f011f27d <test_ksbrk+0x11e>
		{
			correct = 0;
f011f258:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[0], ptr_allocations[0]);
f011f25f:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f011f265:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f26b:	83 ec 04             	sub    $0x4,%esp
f011f26e:	52                   	push   %edx
f011f26f:	50                   	push   %eax
f011f270:	68 e8 ee 12 f0       	push   $0xf012eee8
f011f275:	e8 f2 1c fe ff       	call   f0100f6c <cprintf>
f011f27a:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f27d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f281:	74 04                	je     f011f287 <test_ksbrk+0x128>
			eval += 5;
f011f283:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	}
	cprintf("STEP B: checking increment with +ve value\n");
f011f287:	83 ec 0c             	sub    $0xc,%esp
f011f28a:	68 18 ef 12 f0       	push   $0xf012ef18
f011f28f:	e8 d8 1c fe ff       	call   f0100f6c <cprintf>
f011f294:	83 c4 10             	add    $0x10,%esp
	{ // +1 KB
		freeFrames = (int)sys_calculate_free_frames();
f011f297:	e8 6d e7 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f29c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f29f:	e8 9c 55 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f2a4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011f2a7:	83 ec 0c             	sub    $0xc,%esp
f011f2aa:	6a 00                	push   $0x0
f011f2ac:	e8 fb 97 fe ff       	call   f0108aac <sbrk>
f011f2b1:	83 c4 10             	add    $0x10,%esp
f011f2b4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[1] = sbrk(kilo);
f011f2b7:	83 ec 0c             	sub    $0xc,%esp
f011f2ba:	68 00 04 00 00       	push   $0x400
f011f2bf:	e8 e8 97 fe ff       	call   f0108aac <sbrk>
f011f2c4:	83 c4 10             	add    $0x10,%esp
f011f2c7:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		newBrk = (uint32)sbrk(0);
f011f2cd:	83 ec 0c             	sub    $0xc,%esp
f011f2d0:	6a 00                	push   $0x0
f011f2d2:	e8 d5 97 fe ff       	call   f0108aac <sbrk>
f011f2d7:	83 c4 10             	add    $0x10,%esp
f011f2da:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011f2dd:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f2e4:	e8 57 55 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f2e9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f2ec:	74 17                	je     f011f305 <test_ksbrk+0x1a6>
		{
			correct = 0;
f011f2ee:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f2f5:	83 ec 0c             	sub    $0xc,%esp
f011f2f8:	68 40 ee 12 f0       	push   $0xf012ee40
f011f2fd:	e8 6a 1c fe ff       	call   f0100f6c <cprintf>
f011f302:	83 c4 10             	add    $0x10,%esp
		}
		// cprintf("####### %x - %x\n", freeFrames - (int)sys_calculate_free_frames(), -1 * ((ROUNDUP(oldBrk, PAGE_SIZE) - newBrk) / PAGE_SIZE));
		if ((freeFrames - (int)sys_calculate_free_frames()) != 1)
f011f305:	e8 ff e6 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f30a:	89 c2                	mov    %eax,%edx
f011f30c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f30f:	29 d0                	sub    %edx,%eax
f011f311:	83 f8 01             	cmp    $0x1,%eax
f011f314:	74 17                	je     f011f32d <test_ksbrk+0x1ce>
		{
			correct = 0;
f011f316:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011f31d:	83 ec 0c             	sub    $0xc,%esp
f011f320:	68 a8 ee 12 f0       	push   $0xf012eea8
f011f325:	e8 42 1c fe ff       	call   f0100f6c <cprintf>
f011f32a:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[1] != expectedVAs[1])
f011f32d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f333:	89 c2                	mov    %eax,%edx
f011f335:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f33b:	39 c2                	cmp    %eax,%edx
f011f33d:	74 25                	je     f011f364 <test_ksbrk+0x205>
		{
			correct = 0;
f011f33f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[1], ptr_allocations[1]);
f011f346:	8b 95 30 ff ff ff    	mov    -0xd0(%ebp),%edx
f011f34c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f352:	83 ec 04             	sub    $0x4,%esp
f011f355:	52                   	push   %edx
f011f356:	50                   	push   %eax
f011f357:	68 e8 ee 12 f0       	push   $0xf012eee8
f011f35c:	e8 0b 1c fe ff       	call   f0100f6c <cprintf>
f011f361:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[1])
f011f364:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011f36a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011f36d:	74 21                	je     f011f390 <test_ksbrk+0x231>
		{
			correct = 0;
f011f36f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[1]);
f011f376:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011f37c:	83 ec 04             	sub    $0x4,%esp
f011f37f:	50                   	push   %eax
f011f380:	ff 75 d0             	pushl  -0x30(%ebp)
f011f383:	68 44 ef 12 f0       	push   $0xf012ef44
f011f388:	e8 df 1b fe ff       	call   f0100f6c <cprintf>
f011f38d:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f390:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f394:	74 04                	je     f011f39a <test_ksbrk+0x23b>
			eval += 5;
f011f396:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	}
	{ // +2 KB
		freeFrames = (int)sys_calculate_free_frames();
f011f39a:	e8 6a e6 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f39f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f3a2:	e8 99 54 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f3a7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011f3aa:	83 ec 0c             	sub    $0xc,%esp
f011f3ad:	6a 00                	push   $0x0
f011f3af:	e8 f8 96 fe ff       	call   f0108aac <sbrk>
f011f3b4:	83 c4 10             	add    $0x10,%esp
f011f3b7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[2] = sbrk(2 * kilo);
f011f3ba:	83 ec 0c             	sub    $0xc,%esp
f011f3bd:	68 00 08 00 00       	push   $0x800
f011f3c2:	e8 e5 96 fe ff       	call   f0108aac <sbrk>
f011f3c7:	83 c4 10             	add    $0x10,%esp
f011f3ca:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
		newBrk = (uint32)sbrk(0);
f011f3d0:	83 ec 0c             	sub    $0xc,%esp
f011f3d3:	6a 00                	push   $0x0
f011f3d5:	e8 d2 96 fe ff       	call   f0108aac <sbrk>
f011f3da:	83 c4 10             	add    $0x10,%esp
f011f3dd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011f3e0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f3e7:	e8 54 54 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f3ec:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f3ef:	74 17                	je     f011f408 <test_ksbrk+0x2a9>
		{
			correct = 0;
f011f3f1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f3f8:	83 ec 0c             	sub    $0xc,%esp
f011f3fb:	68 40 ee 12 f0       	push   $0xf012ee40
f011f400:	e8 67 1b fe ff       	call   f0100f6c <cprintf>
f011f405:	83 c4 10             	add    $0x10,%esp
		}
		int x = (freeFrames - (int)sys_calculate_free_frames());
f011f408:	e8 fc e5 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f40d:	89 c2                	mov    %eax,%edx
f011f40f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f412:	29 d0                	sub    %edx,%eax
f011f414:	89 45 cc             	mov    %eax,-0x34(%ebp)
		if ((freeFrames - (int)sys_calculate_free_frames()) != 1)
f011f417:	e8 ed e5 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f41c:	89 c2                	mov    %eax,%edx
f011f41e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f421:	29 d0                	sub    %edx,%eax
f011f423:	83 f8 01             	cmp    $0x1,%eax
f011f426:	74 17                	je     f011f43f <test_ksbrk+0x2e0>
		{
			correct = 0;
f011f428:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011f42f:	83 ec 0c             	sub    $0xc,%esp
f011f432:	68 a8 ee 12 f0       	push   $0xf012eea8
f011f437:	e8 30 1b fe ff       	call   f0100f6c <cprintf>
f011f43c:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[2] != expectedVAs[2])
f011f43f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011f445:	89 c2                	mov    %eax,%edx
f011f447:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f44d:	39 c2                	cmp    %eax,%edx
f011f44f:	74 25                	je     f011f476 <test_ksbrk+0x317>
		{
			correct = 0;
f011f451:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[2], ptr_allocations[2]);
f011f458:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f011f45e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f464:	83 ec 04             	sub    $0x4,%esp
f011f467:	52                   	push   %edx
f011f468:	50                   	push   %eax
f011f469:	68 e8 ee 12 f0       	push   $0xf012eee8
f011f46e:	e8 f9 1a fe ff       	call   f0100f6c <cprintf>
f011f473:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[2])
f011f476:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f47c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011f47f:	74 21                	je     f011f4a2 <test_ksbrk+0x343>
		{
			correct = 0;
f011f481:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[2]);
f011f488:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f48e:	83 ec 04             	sub    $0x4,%esp
f011f491:	50                   	push   %eax
f011f492:	ff 75 d0             	pushl  -0x30(%ebp)
f011f495:	68 44 ef 12 f0       	push   $0xf012ef44
f011f49a:	e8 cd 1a fe ff       	call   f0100f6c <cprintf>
f011f49f:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f4a2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f4a6:	74 04                	je     f011f4ac <test_ksbrk+0x34d>
			eval += 5;
f011f4a8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	}
	cprintf("STEP C: checking increment with -ve value [No Frames to be Deallocated]\n");
f011f4ac:	83 ec 0c             	sub    $0xc,%esp
f011f4af:	68 70 ef 12 f0       	push   $0xf012ef70
f011f4b4:	e8 b3 1a fe ff       	call   f0100f6c <cprintf>
f011f4b9:	83 c4 10             	add    $0x10,%esp
	{ // -512 Bytes
		freeFrames = (int)sys_calculate_free_frames();
f011f4bc:	e8 48 e5 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f4c1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f4c4:	e8 77 53 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f4c9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011f4cc:	83 ec 0c             	sub    $0xc,%esp
f011f4cf:	6a 00                	push   $0x0
f011f4d1:	e8 d6 95 fe ff       	call   f0108aac <sbrk>
f011f4d6:	83 c4 10             	add    $0x10,%esp
f011f4d9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[3] = sbrk(-512);
f011f4dc:	83 ec 0c             	sub    $0xc,%esp
f011f4df:	68 00 fe ff ff       	push   $0xfffffe00
f011f4e4:	e8 c3 95 fe ff       	call   f0108aac <sbrk>
f011f4e9:	83 c4 10             	add    $0x10,%esp
f011f4ec:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
		newBrk = (uint32)sbrk(0);
f011f4f2:	83 ec 0c             	sub    $0xc,%esp
f011f4f5:	6a 00                	push   $0x0
f011f4f7:	e8 b0 95 fe ff       	call   f0108aac <sbrk>
f011f4fc:	83 c4 10             	add    $0x10,%esp
f011f4ff:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011f502:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f509:	e8 32 53 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f50e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f511:	74 17                	je     f011f52a <test_ksbrk+0x3cb>
		{
			correct = 0;
f011f513:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f51a:	83 ec 0c             	sub    $0xc,%esp
f011f51d:	68 40 ee 12 f0       	push   $0xf012ee40
f011f522:	e8 45 1a fe ff       	call   f0100f6c <cprintf>
f011f527:	83 c4 10             	add    $0x10,%esp
		}
		// cprintf("####### %x - %x\n", freeFrames - (int)sys_calculate_free_frames(), -1 * ((ROUNDUP(oldBrk, PAGE_SIZE) - newBrk) / PAGE_SIZE));
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0)
f011f52a:	e8 da e4 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f52f:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011f532:	74 17                	je     f011f54b <test_ksbrk+0x3ec>
		{
			correct = 0;
f011f534:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011f53b:	83 ec 0c             	sub    $0xc,%esp
f011f53e:	68 a8 ee 12 f0       	push   $0xf012eea8
f011f543:	e8 24 1a fe ff       	call   f0100f6c <cprintf>
f011f548:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[3] != expectedVAs[3])
f011f54b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f551:	89 c2                	mov    %eax,%edx
f011f553:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f559:	39 c2                	cmp    %eax,%edx
f011f55b:	74 25                	je     f011f582 <test_ksbrk+0x423>
		{
			correct = 0;
f011f55d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[3], ptr_allocations[3]);
f011f564:	8b 95 38 ff ff ff    	mov    -0xc8(%ebp),%edx
f011f56a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f570:	83 ec 04             	sub    $0x4,%esp
f011f573:	52                   	push   %edx
f011f574:	50                   	push   %eax
f011f575:	68 e8 ee 12 f0       	push   $0xf012eee8
f011f57a:	e8 ed 19 fe ff       	call   f0100f6c <cprintf>
f011f57f:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[3])
f011f582:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011f588:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011f58b:	74 21                	je     f011f5ae <test_ksbrk+0x44f>
		{
			correct = 0;
f011f58d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[3]);
f011f594:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011f59a:	83 ec 04             	sub    $0x4,%esp
f011f59d:	50                   	push   %eax
f011f59e:	ff 75 d0             	pushl  -0x30(%ebp)
f011f5a1:	68 44 ef 12 f0       	push   $0xf012ef44
f011f5a6:	e8 c1 19 fe ff       	call   f0100f6c <cprintf>
f011f5ab:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f5ae:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f5b2:	74 04                	je     f011f5b8 <test_ksbrk+0x459>
			eval += 10;
f011f5b4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	{ // -2 KB
		freeFrames = (int)sys_calculate_free_frames();
f011f5b8:	e8 4c e4 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f5bd:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f5c0:	e8 7b 52 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f5c5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011f5c8:	83 ec 0c             	sub    $0xc,%esp
f011f5cb:	6a 00                	push   $0x0
f011f5cd:	e8 da 94 fe ff       	call   f0108aac <sbrk>
f011f5d2:	83 c4 10             	add    $0x10,%esp
f011f5d5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[4] = sbrk(-2 * kilo);
f011f5d8:	83 ec 0c             	sub    $0xc,%esp
f011f5db:	68 00 f8 ff ff       	push   $0xfffff800
f011f5e0:	e8 c7 94 fe ff       	call   f0108aac <sbrk>
f011f5e5:	83 c4 10             	add    $0x10,%esp
f011f5e8:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
		newBrk = (uint32)sbrk(0);
f011f5ee:	83 ec 0c             	sub    $0xc,%esp
f011f5f1:	6a 00                	push   $0x0
f011f5f3:	e8 b4 94 fe ff       	call   f0108aac <sbrk>
f011f5f8:	83 c4 10             	add    $0x10,%esp
f011f5fb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011f5fe:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f605:	e8 36 52 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f60a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f60d:	74 17                	je     f011f626 <test_ksbrk+0x4c7>
		{
			correct = 0;
f011f60f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f616:	83 ec 0c             	sub    $0xc,%esp
f011f619:	68 40 ee 12 f0       	push   $0xf012ee40
f011f61e:	e8 49 19 fe ff       	call   f0100f6c <cprintf>
f011f623:	83 c4 10             	add    $0x10,%esp
		}
		// cprintf("####### %x - %x\n", freeFrames - (int)sys_calculate_free_frames(), -1 * ((ROUNDUP(oldBrk, PAGE_SIZE) - newBrk) / PAGE_SIZE));
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0)
f011f626:	e8 de e3 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f62b:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011f62e:	74 17                	je     f011f647 <test_ksbrk+0x4e8>
		{
			correct = 0;
f011f630:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011f637:	83 ec 0c             	sub    $0xc,%esp
f011f63a:	68 a8 ee 12 f0       	push   $0xf012eea8
f011f63f:	e8 28 19 fe ff       	call   f0100f6c <cprintf>
f011f644:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[4] != expectedVAs[4])
f011f647:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011f64d:	89 c2                	mov    %eax,%edx
f011f64f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f655:	39 c2                	cmp    %eax,%edx
f011f657:	74 25                	je     f011f67e <test_ksbrk+0x51f>
		{
			correct = 0;
f011f659:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[4], ptr_allocations[4]);
f011f660:	8b 95 3c ff ff ff    	mov    -0xc4(%ebp),%edx
f011f666:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f66c:	83 ec 04             	sub    $0x4,%esp
f011f66f:	52                   	push   %edx
f011f670:	50                   	push   %eax
f011f671:	68 e8 ee 12 f0       	push   $0xf012eee8
f011f676:	e8 f1 18 fe ff       	call   f0100f6c <cprintf>
f011f67b:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[4])
f011f67e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f684:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011f687:	74 21                	je     f011f6aa <test_ksbrk+0x54b>
		{
			correct = 0;
f011f689:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[4]);
f011f690:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f696:	83 ec 04             	sub    $0x4,%esp
f011f699:	50                   	push   %eax
f011f69a:	ff 75 d0             	pushl  -0x30(%ebp)
f011f69d:	68 44 ef 12 f0       	push   $0xf012ef44
f011f6a2:	e8 c5 18 fe ff       	call   f0100f6c <cprintf>
f011f6a7:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f6aa:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f6ae:	74 04                	je     f011f6b4 <test_ksbrk+0x555>
			eval += 10;
f011f6b0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	cprintf("STEP D: checking increment with -ve value [ONE Frame should be Deallocated]\n");
f011f6b4:	83 ec 0c             	sub    $0xc,%esp
f011f6b7:	68 bc ef 12 f0       	push   $0xf012efbc
f011f6bc:	e8 ab 18 fe ff       	call   f0100f6c <cprintf>
f011f6c1:	83 c4 10             	add    $0x10,%esp
	{ // -2 KB
		freeFrames = (int)sys_calculate_free_frames();
f011f6c4:	e8 40 e3 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f6c9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f6cc:	e8 6f 51 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f6d1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011f6d4:	83 ec 0c             	sub    $0xc,%esp
f011f6d7:	6a 00                	push   $0x0
f011f6d9:	e8 ce 93 fe ff       	call   f0108aac <sbrk>
f011f6de:	83 c4 10             	add    $0x10,%esp
f011f6e1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[5] = sbrk(-2 * kilo);
f011f6e4:	83 ec 0c             	sub    $0xc,%esp
f011f6e7:	68 00 f8 ff ff       	push   $0xfffff800
f011f6ec:	e8 bb 93 fe ff       	call   f0108aac <sbrk>
f011f6f1:	83 c4 10             	add    $0x10,%esp
f011f6f4:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		newBrk = (uint32)sbrk(0);
f011f6fa:	83 ec 0c             	sub    $0xc,%esp
f011f6fd:	6a 00                	push   $0x0
f011f6ff:	e8 a8 93 fe ff       	call   f0108aac <sbrk>
f011f704:	83 c4 10             	add    $0x10,%esp
f011f707:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011f70a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)(int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f711:	e8 2a 51 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f716:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f719:	74 17                	je     f011f732 <test_ksbrk+0x5d3>
		{
			correct = 0;
f011f71b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f722:	83 ec 0c             	sub    $0xc,%esp
f011f725:	68 40 ee 12 f0       	push   $0xf012ee40
f011f72a:	e8 3d 18 fe ff       	call   f0100f6c <cprintf>
f011f72f:	83 c4 10             	add    $0x10,%esp
		}
		// cprintf("####### %x - %x\n", freeFrames - (int)sys_calculate_free_frames(), -1 * ((ROUNDUP(oldBrk, PAGE_SIZE) - newBrk) / PAGE_SIZE));
		if (((int)(int)sys_calculate_free_frames() - freeFrames) != 1)
f011f732:	e8 d2 e2 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f737:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011f73a:	83 f8 01             	cmp    $0x1,%eax
f011f73d:	74 17                	je     f011f756 <test_ksbrk+0x5f7>
		{
			correct = 0;
f011f73f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011f746:	83 ec 0c             	sub    $0xc,%esp
f011f749:	68 a8 ee 12 f0       	push   $0xf012eea8
f011f74e:	e8 19 18 fe ff       	call   f0100f6c <cprintf>
f011f753:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[5] != expectedVAs[5])
f011f756:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f75c:	89 c2                	mov    %eax,%edx
f011f75e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f764:	39 c2                	cmp    %eax,%edx
f011f766:	74 25                	je     f011f78d <test_ksbrk+0x62e>
		{
			correct = 0;
f011f768:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[5], ptr_allocations[5]);
f011f76f:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f011f775:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f77b:	83 ec 04             	sub    $0x4,%esp
f011f77e:	52                   	push   %edx
f011f77f:	50                   	push   %eax
f011f780:	68 e8 ee 12 f0       	push   $0xf012eee8
f011f785:	e8 e2 17 fe ff       	call   f0100f6c <cprintf>
f011f78a:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[5])
f011f78d:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011f793:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011f796:	74 21                	je     f011f7b9 <test_ksbrk+0x65a>
		{
			correct = 0;
f011f798:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[5]);
f011f79f:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011f7a5:	83 ec 04             	sub    $0x4,%esp
f011f7a8:	50                   	push   %eax
f011f7a9:	ff 75 d0             	pushl  -0x30(%ebp)
f011f7ac:	68 44 ef 12 f0       	push   $0xf012ef44
f011f7b1:	e8 b6 17 fe ff       	call   f0100f6c <cprintf>
f011f7b6:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f7b9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f7bd:	74 04                	je     f011f7c3 <test_ksbrk+0x664>
			eval += 15;
f011f7bf:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	cprintf("STEP E: checking increment with +ve value [No Frames to be Allocated]\n");
f011f7c3:	83 ec 0c             	sub    $0xc,%esp
f011f7c6:	68 0c f0 12 f0       	push   $0xf012f00c
f011f7cb:	e8 9c 17 fe ff       	call   f0100f6c <cprintf>
f011f7d0:	83 c4 10             	add    $0x10,%esp
	{ // 128 Bytes
		freeFrames = (int)(int)sys_calculate_free_frames();
f011f7d3:	e8 31 e2 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f7d8:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)(int)pf_calculate_free_frames();
f011f7db:	e8 60 50 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f7e0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011f7e3:	83 ec 0c             	sub    $0xc,%esp
f011f7e6:	6a 00                	push   $0x0
f011f7e8:	e8 bf 92 fe ff       	call   f0108aac <sbrk>
f011f7ed:	83 c4 10             	add    $0x10,%esp
f011f7f0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[6] = sbrk(128);
f011f7f3:	83 ec 0c             	sub    $0xc,%esp
f011f7f6:	68 80 00 00 00       	push   $0x80
f011f7fb:	e8 ac 92 fe ff       	call   f0108aac <sbrk>
f011f800:	83 c4 10             	add    $0x10,%esp
f011f803:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		newBrk = (uint32)sbrk(0);
f011f809:	83 ec 0c             	sub    $0xc,%esp
f011f80c:	6a 00                	push   $0x0
f011f80e:	e8 99 92 fe ff       	call   f0108aac <sbrk>
f011f813:	83 c4 10             	add    $0x10,%esp
f011f816:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011f819:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f820:	e8 1b 50 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f825:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f828:	74 17                	je     f011f841 <test_ksbrk+0x6e2>
		{
			correct = 0;
f011f82a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f831:	83 ec 0c             	sub    $0xc,%esp
f011f834:	68 40 ee 12 f0       	push   $0xf012ee40
f011f839:	e8 2e 17 fe ff       	call   f0100f6c <cprintf>
f011f83e:	83 c4 10             	add    $0x10,%esp
		}
		if (((int)(int)sys_calculate_free_frames() - freeFrames) != 0)
f011f841:	e8 c3 e1 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f846:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011f849:	74 17                	je     f011f862 <test_ksbrk+0x703>
		{
			correct = 0;
f011f84b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011f852:	83 ec 0c             	sub    $0xc,%esp
f011f855:	68 a8 ee 12 f0       	push   $0xf012eea8
f011f85a:	e8 0d 17 fe ff       	call   f0100f6c <cprintf>
f011f85f:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[6] != expectedVAs[6])
f011f862:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011f868:	89 c2                	mov    %eax,%edx
f011f86a:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f870:	39 c2                	cmp    %eax,%edx
f011f872:	74 25                	je     f011f899 <test_ksbrk+0x73a>
		{
			correct = 0;
f011f874:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[6], ptr_allocations[6]);
f011f87b:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f011f881:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f887:	83 ec 04             	sub    $0x4,%esp
f011f88a:	52                   	push   %edx
f011f88b:	50                   	push   %eax
f011f88c:	68 e8 ee 12 f0       	push   $0xf012eee8
f011f891:	e8 d6 16 fe ff       	call   f0100f6c <cprintf>
f011f896:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[6])
f011f899:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f89f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011f8a2:	74 21                	je     f011f8c5 <test_ksbrk+0x766>
		{
			correct = 0;
f011f8a4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[6]);
f011f8ab:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f8b1:	83 ec 04             	sub    $0x4,%esp
f011f8b4:	50                   	push   %eax
f011f8b5:	ff 75 d0             	pushl  -0x30(%ebp)
f011f8b8:	68 44 ef 12 f0       	push   $0xf012ef44
f011f8bd:	e8 aa 16 fe ff       	call   f0100f6c <cprintf>
f011f8c2:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f8c5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f8c9:	74 04                	je     f011f8cf <test_ksbrk+0x770>
			eval += 15;
f011f8cb:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	cprintf("STEP F: checking increment with +ve value [ONE Frame should be Allocated]\n");
f011f8cf:	83 ec 0c             	sub    $0xc,%esp
f011f8d2:	68 54 f0 12 f0       	push   $0xf012f054
f011f8d7:	e8 90 16 fe ff       	call   f0100f6c <cprintf>
f011f8dc:	83 c4 10             	add    $0x10,%esp
	{ // 1 KB
		freeFrames = (int)(int)sys_calculate_free_frames();
f011f8df:	e8 25 e1 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f8e4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f8e7:	e8 54 4f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f8ec:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011f8ef:	83 ec 0c             	sub    $0xc,%esp
f011f8f2:	6a 00                	push   $0x0
f011f8f4:	e8 b3 91 fe ff       	call   f0108aac <sbrk>
f011f8f9:	83 c4 10             	add    $0x10,%esp
f011f8fc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[7] = sbrk(kilo);
f011f8ff:	83 ec 0c             	sub    $0xc,%esp
f011f902:	68 00 04 00 00       	push   $0x400
f011f907:	e8 a0 91 fe ff       	call   f0108aac <sbrk>
f011f90c:	83 c4 10             	add    $0x10,%esp
f011f90f:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		newBrk = (uint32)sbrk(0);
f011f915:	83 ec 0c             	sub    $0xc,%esp
f011f918:	6a 00                	push   $0x0
f011f91a:	e8 8d 91 fe ff       	call   f0108aac <sbrk>
f011f91f:	83 c4 10             	add    $0x10,%esp
f011f922:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011f925:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f92c:	e8 0f 4f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f931:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f934:	74 17                	je     f011f94d <test_ksbrk+0x7ee>
		{
			correct = 0;
f011f936:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f93d:	83 ec 0c             	sub    $0xc,%esp
f011f940:	68 40 ee 12 f0       	push   $0xf012ee40
f011f945:	e8 22 16 fe ff       	call   f0100f6c <cprintf>
f011f94a:	83 c4 10             	add    $0x10,%esp
		}
		//cprintf("((int)(int)sys_calculate_free_frames() - freeFrames) = %d\n", ((int)(int)sys_calculate_free_frames() - freeFrames));
		if ((freeFrames - (int)(int)sys_calculate_free_frames()) != 1)
f011f94d:	e8 b7 e0 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f952:	89 c2                	mov    %eax,%edx
f011f954:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f957:	29 d0                	sub    %edx,%eax
f011f959:	83 f8 01             	cmp    $0x1,%eax
f011f95c:	74 17                	je     f011f975 <test_ksbrk+0x816>
		{
			correct = 0;
f011f95e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("7 Wrong allocation: pages are not loaded successfully into memory");
f011f965:	83 ec 0c             	sub    $0xc,%esp
f011f968:	68 a0 f0 12 f0       	push   $0xf012f0a0
f011f96d:	e8 fa 15 fe ff       	call   f0100f6c <cprintf>
f011f972:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[7] != expectedVAs[7])
f011f975:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f97b:	89 c2                	mov    %eax,%edx
f011f97d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f983:	39 c2                	cmp    %eax,%edx
f011f985:	74 25                	je     f011f9ac <test_ksbrk+0x84d>
		{
			correct = 0;
f011f987:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("7 Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[7], ptr_allocations[7]);
f011f98e:	8b 95 48 ff ff ff    	mov    -0xb8(%ebp),%edx
f011f994:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f99a:	83 ec 04             	sub    $0x4,%esp
f011f99d:	52                   	push   %edx
f011f99e:	50                   	push   %eax
f011f99f:	68 e4 f0 12 f0       	push   $0xf012f0e4
f011f9a4:	e8 c3 15 fe ff       	call   f0100f6c <cprintf>
f011f9a9:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[7])
f011f9ac:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f9b2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011f9b5:	74 21                	je     f011f9d8 <test_ksbrk+0x879>
		{
			correct = 0;
f011f9b7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("7 Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[7]);
f011f9be:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f9c4:	83 ec 04             	sub    $0x4,%esp
f011f9c7:	50                   	push   %eax
f011f9c8:	ff 75 d0             	pushl  -0x30(%ebp)
f011f9cb:	68 18 f1 12 f0       	push   $0xf012f118
f011f9d0:	e8 97 15 fe ff       	call   f0100f6c <cprintf>
f011f9d5:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f9d8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f9dc:	74 04                	je     f011f9e2 <test_ksbrk+0x883>
			eval += 15;
f011f9de:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	cprintf("STEP G: checking increment with -ve value [TWO Frames should be Deallocated]\n");
f011f9e2:	83 ec 0c             	sub    $0xc,%esp
f011f9e5:	68 48 f1 12 f0       	push   $0xf012f148
f011f9ea:	e8 7d 15 fe ff       	call   f0100f6c <cprintf>
f011f9ef:	83 c4 10             	add    $0x10,%esp
	{ // -9 KB
		freeFrames = (int)sys_calculate_free_frames();
f011f9f2:	e8 12 e0 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f9f7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f9fa:	e8 41 4e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f9ff:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011fa02:	83 ec 0c             	sub    $0xc,%esp
f011fa05:	6a 00                	push   $0x0
f011fa07:	e8 a0 90 fe ff       	call   f0108aac <sbrk>
f011fa0c:	83 c4 10             	add    $0x10,%esp
f011fa0f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[8] = sbrk(-9 * kilo);
f011fa12:	83 ec 0c             	sub    $0xc,%esp
f011fa15:	68 00 dc ff ff       	push   $0xffffdc00
f011fa1a:	e8 8d 90 fe ff       	call   f0108aac <sbrk>
f011fa1f:	83 c4 10             	add    $0x10,%esp
f011fa22:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
		newBrk = (uint32)sbrk(0);
f011fa28:	83 ec 0c             	sub    $0xc,%esp
f011fa2b:	6a 00                	push   $0x0
f011fa2d:	e8 7a 90 fe ff       	call   f0108aac <sbrk>
f011fa32:	83 c4 10             	add    $0x10,%esp
f011fa35:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011fa38:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)(int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011fa3f:	e8 fc 4d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011fa44:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011fa47:	74 17                	je     f011fa60 <test_ksbrk+0x901>
		{
			correct = 0;
f011fa49:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fa50:	83 ec 0c             	sub    $0xc,%esp
f011fa53:	68 40 ee 12 f0       	push   $0xf012ee40
f011fa58:	e8 0f 15 fe ff       	call   f0100f6c <cprintf>
f011fa5d:	83 c4 10             	add    $0x10,%esp
		}
		// cprintf("####### %x - %x\n", freeFrames - (int)sys_calculate_free_frames(), -1 * ((ROUNDUP(oldBrk, PAGE_SIZE) - newBrk) / PAGE_SIZE));
		if (((int)(int)sys_calculate_free_frames() - freeFrames) != 2)
f011fa60:	e8 a4 df fe ff       	call   f010da09 <sys_calculate_free_frames>
f011fa65:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011fa68:	83 f8 02             	cmp    $0x2,%eax
f011fa6b:	74 17                	je     f011fa84 <test_ksbrk+0x925>
		{
			correct = 0;
f011fa6d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("8 Wrong allocation: pages are not loaded successfully into memory");
f011fa74:	83 ec 0c             	sub    $0xc,%esp
f011fa77:	68 98 f1 12 f0       	push   $0xf012f198
f011fa7c:	e8 eb 14 fe ff       	call   f0100f6c <cprintf>
f011fa81:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[8] != expectedVAs[8])
f011fa84:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011fa8a:	89 c2                	mov    %eax,%edx
f011fa8c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fa92:	39 c2                	cmp    %eax,%edx
f011fa94:	74 25                	je     f011fabb <test_ksbrk+0x95c>
		{
			correct = 0;
f011fa96:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("8 Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[5], ptr_allocations[5]);
f011fa9d:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f011faa3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011faa9:	83 ec 04             	sub    $0x4,%esp
f011faac:	52                   	push   %edx
f011faad:	50                   	push   %eax
f011faae:	68 dc f1 12 f0       	push   $0xf012f1dc
f011fab3:	e8 b4 14 fe ff       	call   f0100f6c <cprintf>
f011fab8:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[8])
f011fabb:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011fac1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011fac4:	74 21                	je     f011fae7 <test_ksbrk+0x988>
		{
			correct = 0;
f011fac6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("8 Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[5]);
f011facd:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011fad3:	83 ec 04             	sub    $0x4,%esp
f011fad6:	50                   	push   %eax
f011fad7:	ff 75 d0             	pushl  -0x30(%ebp)
f011fada:	68 10 f2 12 f0       	push   $0xf012f210
f011fadf:	e8 88 14 fe ff       	call   f0100f6c <cprintf>
f011fae4:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011fae7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011faeb:	74 04                	je     f011faf1 <test_ksbrk+0x992>
			eval += 10;
f011faed:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	cprintf("STEP H: checking increment with +ve value [THREE Frames should be Allocated]\n");
f011faf1:	83 ec 0c             	sub    $0xc,%esp
f011faf4:	68 40 f2 12 f0       	push   $0xf012f240
f011faf9:	e8 6e 14 fe ff       	call   f0100f6c <cprintf>
f011fafe:	83 c4 10             	add    $0x10,%esp
	{ // 10 KB
		freeFrames = (int)(int)sys_calculate_free_frames();
f011fb01:	e8 03 df fe ff       	call   f010da09 <sys_calculate_free_frames>
f011fb06:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011fb09:	e8 32 4d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011fb0e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011fb11:	83 ec 0c             	sub    $0xc,%esp
f011fb14:	6a 00                	push   $0x0
f011fb16:	e8 91 8f fe ff       	call   f0108aac <sbrk>
f011fb1b:	83 c4 10             	add    $0x10,%esp
f011fb1e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[9] = sbrk(10*kilo);
f011fb21:	83 ec 0c             	sub    $0xc,%esp
f011fb24:	68 00 28 00 00       	push   $0x2800
f011fb29:	e8 7e 8f fe ff       	call   f0108aac <sbrk>
f011fb2e:	83 c4 10             	add    $0x10,%esp
f011fb31:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
		newBrk = (uint32)sbrk(0);
f011fb37:	83 ec 0c             	sub    $0xc,%esp
f011fb3a:	6a 00                	push   $0x0
f011fb3c:	e8 6b 8f fe ff       	call   f0108aac <sbrk>
f011fb41:	83 c4 10             	add    $0x10,%esp
f011fb44:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011fb47:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011fb4e:	e8 ed 4c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011fb53:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011fb56:	74 17                	je     f011fb6f <test_ksbrk+0xa10>
		{
			correct = 0;
f011fb58:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fb5f:	83 ec 0c             	sub    $0xc,%esp
f011fb62:	68 40 ee 12 f0       	push   $0xf012ee40
f011fb67:	e8 00 14 fe ff       	call   f0100f6c <cprintf>
f011fb6c:	83 c4 10             	add    $0x10,%esp
		}
		if ((freeFrames - (int)(int)sys_calculate_free_frames()) != 3)
f011fb6f:	e8 95 de fe ff       	call   f010da09 <sys_calculate_free_frames>
f011fb74:	89 c2                	mov    %eax,%edx
f011fb76:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011fb79:	29 d0                	sub    %edx,%eax
f011fb7b:	83 f8 03             	cmp    $0x3,%eax
f011fb7e:	74 17                	je     f011fb97 <test_ksbrk+0xa38>
		{
			correct = 0;
f011fb80:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("9 Wrong allocation: pages are not loaded successfully into memory");
f011fb87:	83 ec 0c             	sub    $0xc,%esp
f011fb8a:	68 90 f2 12 f0       	push   $0xf012f290
f011fb8f:	e8 d8 13 fe ff       	call   f0100f6c <cprintf>
f011fb94:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[9] != expectedVAs[9])
f011fb97:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011fb9d:	89 c2                	mov    %eax,%edx
f011fb9f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011fba5:	39 c2                	cmp    %eax,%edx
f011fba7:	74 25                	je     f011fbce <test_ksbrk+0xa6f>
		{
			correct = 0;
f011fba9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("9 Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[7], ptr_allocations[7]);
f011fbb0:	8b 95 48 ff ff ff    	mov    -0xb8(%ebp),%edx
f011fbb6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011fbbc:	83 ec 04             	sub    $0x4,%esp
f011fbbf:	52                   	push   %edx
f011fbc0:	50                   	push   %eax
f011fbc1:	68 d4 f2 12 f0       	push   $0xf012f2d4
f011fbc6:	e8 a1 13 fe ff       	call   f0100f6c <cprintf>
f011fbcb:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[9])
f011fbce:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011fbd4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011fbd7:	74 21                	je     f011fbfa <test_ksbrk+0xa9b>
		{
			correct = 0;
f011fbd9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("9 Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[7]);
f011fbe0:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011fbe6:	83 ec 04             	sub    $0x4,%esp
f011fbe9:	50                   	push   %eax
f011fbea:	ff 75 d0             	pushl  -0x30(%ebp)
f011fbed:	68 08 f3 12 f0       	push   $0xf012f308
f011fbf2:	e8 75 13 fe ff       	call   f0100f6c <cprintf>
f011fbf7:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011fbfa:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011fbfe:	74 04                	je     f011fc04 <test_ksbrk+0xaa5>
			eval += 10;
f011fc00:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}

	//cprintf("Test kheap sbrk completed. Evaluation = %d%%\n", eval);
	cprintf("[AUTO_GR@DING_PARTIAL]%d\n", eval);
f011fc04:	83 ec 08             	sub    $0x8,%esp
f011fc07:	ff 75 e4             	pushl  -0x1c(%ebp)
f011fc0a:	68 35 f3 12 f0       	push   $0xf012f335
f011fc0f:	e8 58 13 fe ff       	call   f0100f6c <cprintf>
f011fc14:	83 c4 10             	add    $0x10,%esp

	cprintf("=================\n\n");
f011fc17:	83 ec 0c             	sub    $0xc,%esp
f011fc1a:	68 4f f3 12 f0       	push   $0xf012f34f
f011fc1f:	e8 48 13 fe ff       	call   f0100f6c <cprintf>
f011fc24:	83 c4 10             	add    $0x10,%esp
	return 0;
f011fc27:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011fc2c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011fc2f:	5b                   	pop    %ebx
f011fc30:	5e                   	pop    %esi
f011fc31:	5f                   	pop    %edi
f011fc32:	5d                   	pop    %ebp
f011fc33:	c3                   	ret    

f011fc34 <test_kmalloc_nextfit>:




int test_kmalloc_nextfit()
{
f011fc34:	55                   	push   %ebp
f011fc35:	89 e5                	mov    %esp,%ebp
f011fc37:	81 ec 88 02 00 00    	sub    $0x288,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f011fc3d:	83 ec 04             	sub    $0x4,%esp
f011fc40:	68 e8 f3 12 f0       	push   $0xf012f3e8
f011fc45:	68 76 08 00 00       	push   $0x876
f011fc4a:	68 d2 ec 12 f0       	push   $0xf012ecd2
f011fc4f:	e8 c6 06 fe ff       	call   f010031a <_panic>

f011fc54 <test_kmalloc_bestfit1>:
	return 1;

}

int test_kmalloc_bestfit1()
{
f011fc54:	55                   	push   %ebp
f011fc55:	89 e5                	mov    %esp,%ebp
f011fc57:	83 ec 58             	sub    $0x58,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f011fc5a:	83 ec 04             	sub    $0x4,%esp
f011fc5d:	68 e8 f3 12 f0       	push   $0xf012f3e8
f011fc62:	68 1c 09 00 00       	push   $0x91c
f011fc67:	68 d2 ec 12 f0       	push   $0xf012ecd2
f011fc6c:	e8 a9 06 fe ff       	call   f010031a <_panic>

f011fc71 <test_kmalloc_bestfit2>:
	return 1;

}

int test_kmalloc_bestfit2()
{
f011fc71:	55                   	push   %ebp
f011fc72:	89 e5                	mov    %esp,%ebp
f011fc74:	83 ec 58             	sub    $0x58,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f011fc77:	83 ec 04             	sub    $0x4,%esp
f011fc7a:	68 e8 f3 12 f0       	push   $0xf012f3e8
f011fc7f:	68 c8 09 00 00       	push   $0x9c8
f011fc84:	68 d2 ec 12 f0       	push   $0xf012ecd2
f011fc89:	e8 8c 06 fe ff       	call   f010031a <_panic>

f011fc8e <test_kmalloc_worstfit>:
	return 1;

}

int test_kmalloc_worstfit()
{
f011fc8e:	55                   	push   %ebp
f011fc8f:	89 e5                	mov    %esp,%ebp
f011fc91:	81 ec 88 02 00 00    	sub    $0x288,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f011fc97:	83 ec 04             	sub    $0x4,%esp
f011fc9a:	68 e8 f3 12 f0       	push   $0xf012f3e8
f011fc9f:	68 6e 0a 00 00       	push   $0xa6e
f011fca4:	68 d2 ec 12 f0       	push   $0xf012ecd2
f011fca9:	e8 6c 06 fe ff       	call   f010031a <_panic>

f011fcae <test_kfree>:

	return 1;
}

int test_kfree()
{
f011fcae:	55                   	push   %ebp
f011fcaf:	89 e5                	mov    %esp,%ebp
f011fcb1:	81 ec 08 01 00 00    	sub    $0x108,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f011fcb7:	83 ec 04             	sub    $0x4,%esp
f011fcba:	68 e8 f3 12 f0       	push   $0xf012f3e8
f011fcbf:	68 14 0b 00 00       	push   $0xb14
f011fcc4:	68 d2 ec 12 f0       	push   $0xf012ecd2
f011fcc9:	e8 4c 06 fe ff       	call   f010031a <_panic>

f011fcce <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f011fcce:	55                   	push   %ebp
f011fccf:	89 e5                	mov    %esp,%ebp
f011fcd1:	57                   	push   %edi
f011fcd2:	56                   	push   %esi
f011fcd3:	53                   	push   %ebx
f011fcd4:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
	if (firstCall)
f011fcda:	a0 dc ed 17 f0       	mov    0xf017eddc,%al
f011fcdf:	84 c0                	test   %al,%al
f011fce1:	74 56                	je     f011fd39 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f011fce3:	c6 05 dc ed 17 f0 00 	movb   $0x0,0xf017eddc
		initFreeFrames = sys_calculate_free_frames() ;
f011fcea:	e8 1a dd fe ff       	call   f010da09 <sys_calculate_free_frames>
f011fcef:	a3 68 52 5c f0       	mov    %eax,0xf05c5268
		initFreeDiskFrames = pf_calculate_free_frames() ;
f011fcf4:	e8 47 4b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011fcf9:	a3 64 52 5c f0       	mov    %eax,0xf05c5264
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f011fcfe:	8d 85 6c ff ff ff    	lea    -0x94(%ebp),%eax
f011fd04:	bb 45 f5 12 f0       	mov    $0xf012f545,%ebx
f011fd09:	ba 11 00 00 00       	mov    $0x11,%edx
f011fd0e:	89 c7                	mov    %eax,%edi
f011fd10:	89 de                	mov    %ebx,%esi
f011fd12:	89 d1                	mov    %edx,%ecx
f011fd14:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011fd16:	8d 95 7d ff ff ff    	lea    -0x83(%ebp),%edx
f011fd1c:	b9 53 00 00 00       	mov    $0x53,%ecx
f011fd21:	b0 00                	mov    $0x0,%al
f011fd23:	89 d7                	mov    %edx,%edi
f011fd25:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f011fd27:	83 ec 0c             	sub    $0xc,%esp
f011fd2a:	8d 85 6c ff ff ff    	lea    -0x94(%ebp),%eax
f011fd30:	50                   	push   %eax
f011fd31:	e8 a6 21 fe ff       	call   f0101edc <execute_command>
f011fd36:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f011fd39:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f011fd40:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f011fd47:	a1 80 fe 59 f0       	mov    0xf059fe80,%eax
f011fd4c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011fd4f:	eb 2b                	jmp    f011fd7c <test_three_creation_functions+0xae>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f011fd51:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011fd54:	83 c0 20             	add    $0x20,%eax
f011fd57:	83 ec 08             	sub    $0x8,%esp
f011fd5a:	68 2d f4 12 f0       	push   $0xf012f42d
f011fd5f:	50                   	push   %eax
f011fd60:	e8 e5 28 00 00       	call   f012264a <strcmp>
f011fd65:	83 c4 10             	add    $0x10,%esp
f011fd68:	85 c0                	test   %eax,%eax
f011fd6a:	75 08                	jne    f011fd74 <test_three_creation_functions+0xa6>
			{
				e = ptr_env ;
f011fd6c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011fd6f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f011fd72:	eb 2f                	jmp    f011fda3 <test_three_creation_functions+0xd5>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f011fd74:	a1 88 fe 59 f0       	mov    0xf059fe88,%eax
f011fd79:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011fd7c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011fd80:	74 08                	je     f011fd8a <test_three_creation_functions+0xbc>
f011fd82:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011fd85:	8b 40 08             	mov    0x8(%eax),%eax
f011fd88:	eb 05                	jmp    f011fd8f <test_three_creation_functions+0xc1>
f011fd8a:	b8 00 00 00 00       	mov    $0x0,%eax
f011fd8f:	a3 88 fe 59 f0       	mov    %eax,0xf059fe88
f011fd94:	a1 88 fe 59 f0       	mov    0xf059fe88,%eax
f011fd99:	85 c0                	test   %eax,%eax
f011fd9b:	75 b4                	jne    f011fd51 <test_three_creation_functions+0x83>
f011fd9d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011fda1:	75 ae                	jne    f011fd51 <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f011fda3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011fda6:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f011fdac:	85 c0                	test   %eax,%eax
f011fdae:	74 17                	je     f011fdc7 <test_three_creation_functions+0xf9>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f011fdb0:	83 ec 04             	sub    $0x4,%esp
f011fdb3:	68 38 f4 12 f0       	push   $0xf012f438
f011fdb8:	68 f0 0c 00 00       	push   $0xcf0
f011fdbd:	68 d2 ec 12 f0       	push   $0xf012ecd2
f011fdc2:	e8 53 05 fe ff       	call   f010031a <_panic>

#if USE_KHEAP
		int pagesInWS = LIST_SIZE(&(e->page_WS_list));
#else
		int pagesInWS = env_page_ws_get_size(e);
f011fdc7:	83 ec 0c             	sub    $0xc,%esp
f011fdca:	ff 75 e4             	pushl  -0x1c(%ebp)
f011fdcd:	e8 8c 8f fe ff       	call   f0108d5e <env_page_ws_get_size>
f011fdd2:	83 c4 10             	add    $0x10,%esp
f011fdd5:	89 45 dc             	mov    %eax,-0x24(%ebp)
#endif
		int curFreeFrames = sys_calculate_free_frames() ;
f011fdd8:	e8 2c dc fe ff       	call   f010da09 <sys_calculate_free_frames>
f011fddd:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f011fde0:	e8 5b 4a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011fde5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fde8:	a1 64 52 5c f0       	mov    0xf05c5264,%eax
f011fded:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f011fdf0:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011fdf3:	74 17                	je     f011fe0c <test_three_creation_functions+0x13e>
f011fdf5:	83 ec 04             	sub    $0x4,%esp
f011fdf8:	68 40 ee 12 f0       	push   $0xf012ee40
f011fdfd:	68 fa 0c 00 00       	push   $0xcfa
f011fe02:	68 d2 ec 12 f0       	push   $0xf012ecd2
f011fe07:	e8 0e 05 fe ff       	call   f010031a <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fe0c:	a1 68 52 5c f0       	mov    0xf05c5268,%eax
f011fe11:	2b 45 d8             	sub    -0x28(%ebp),%eax
f011fe14:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011fe17:	83 c2 15             	add    $0x15,%edx
f011fe1a:	39 d0                	cmp    %edx,%eax
f011fe1c:	74 17                	je     f011fe35 <test_three_creation_functions+0x167>
f011fe1e:	83 ec 04             	sub    $0x4,%esp
f011fe21:	68 a8 ee 12 f0       	push   $0xf012eea8
f011fe26:	68 fc 0c 00 00       	push   $0xcfc
f011fe2b:	68 d2 ec 12 f0       	push   $0xf012ecd2
f011fe30:	e8 e5 04 fe ff       	call   f010031a <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f011fe35:	83 ec 0c             	sub    $0xc,%esp
f011fe38:	68 00 10 00 00       	push   $0x1000
f011fe3d:	e8 74 8c fe ff       	call   f0108ab6 <kmalloc>
f011fe42:	83 c4 10             	add    $0x10,%esp
f011fe45:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f011fe48:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011fe4b:	3d 00 60 01 f8       	cmp    $0xf8016000,%eax
f011fe50:	74 17                	je     f011fe69 <test_three_creation_functions+0x19b>
f011fe52:	83 ec 04             	sub    $0x4,%esp
f011fe55:	68 88 f4 12 f0       	push   $0xf012f488
f011fe5a:	68 00 0d 00 00       	push   $0xd00
f011fe5f:	68 d2 ec 12 f0       	push   $0xf012ecd2
f011fe64:	e8 b1 04 fe ff       	call   f010031a <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f011fe69:	83 ec 0c             	sub    $0xc,%esp
f011fe6c:	68 f8 f4 12 f0       	push   $0xf012f4f8
f011fe71:	e8 f6 10 fe ff       	call   f0100f6c <cprintf>
f011fe76:	83 c4 10             	add    $0x10,%esp

	return 1;
f011fe79:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011fe7e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011fe81:	5b                   	pop    %ebx
f011fe82:	5e                   	pop    %esi
f011fe83:	5f                   	pop    %edi
f011fe84:	5d                   	pop    %ebp
f011fe85:	c3                   	ret    

f011fe86 <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f011fe86:	55                   	push   %ebp
f011fe87:	89 e5                	mov    %esp,%ebp
f011fe89:	83 ec 08             	sub    $0x8,%esp
	panic("test not available yet");
f011fe8c:	83 ec 04             	sub    $0x4,%esp
f011fe8f:	68 a9 f5 12 f0       	push   $0xf012f5a9
f011fe94:	68 0e 0d 00 00       	push   $0xd0e
f011fe99:	68 d2 ec 12 f0       	push   $0xf012ecd2
f011fe9e:	e8 77 04 fe ff       	call   f010031a <_panic>

f011fea3 <test_kexpand>:

	return 1;

}
int test_kexpand(){
f011fea3:	55                   	push   %ebp
f011fea4:	89 e5                	mov    %esp,%ebp
f011fea6:	83 ec 08             	sub    $0x8,%esp
	panic("test not available yet");
f011fea9:	83 ec 04             	sub    $0x4,%esp
f011feac:	68 a9 f5 12 f0       	push   $0xf012f5a9
f011feb1:	68 14 0d 00 00       	push   $0xd14
f011feb6:	68 d2 ec 12 f0       	push   $0xf012ecd2
f011febb:	e8 5a 04 fe ff       	call   f010031a <_panic>

f011fec0 <test_kshrink>:
	return 1;
}

int test_kshrink(){
f011fec0:	55                   	push   %ebp
f011fec1:	89 e5                	mov    %esp,%ebp
f011fec3:	83 ec 08             	sub    $0x8,%esp
	panic("test not available yet");
f011fec6:	83 ec 04             	sub    $0x4,%esp
f011fec9:	68 a9 f5 12 f0       	push   $0xf012f5a9
f011fece:	68 19 0d 00 00       	push   $0xd19
f011fed3:	68 d2 ec 12 f0       	push   $0xf012ecd2
f011fed8:	e8 3d 04 fe ff       	call   f010031a <_panic>

f011fedd <test_kfreelast>:
	return 1;
}
int test_kfreelast(){
f011fedd:	55                   	push   %ebp
f011fede:	89 e5                	mov    %esp,%ebp
f011fee0:	83 ec 08             	sub    $0x8,%esp
	panic("test not available yet");
f011fee3:	83 ec 04             	sub    $0x4,%esp
f011fee6:	68 a9 f5 12 f0       	push   $0xf012f5a9
f011feeb:	68 1d 0d 00 00       	push   $0xd1d
f011fef0:	68 d2 ec 12 f0       	push   $0xf012ecd2
f011fef5:	e8 20 04 fe ff       	call   f010031a <_panic>

f011fefa <test_krealloc>:
	return 1;
}

int test_krealloc() {
f011fefa:	55                   	push   %ebp
f011fefb:	89 e5                	mov    %esp,%ebp
f011fefd:	83 ec 08             	sub    $0x8,%esp
	cprintf("==============================================\n");
f011ff00:	83 ec 0c             	sub    $0xc,%esp
f011ff03:	68 60 e5 12 f0       	push   $0xf012e560
f011ff08:	e8 5f 10 fe ff       	call   f0100f6c <cprintf>
f011ff0d:	83 c4 10             	add    $0x10,%esp
	cprintf(
f011ff10:	83 ec 0c             	sub    $0xc,%esp
f011ff13:	68 90 e5 12 f0       	push   $0xf012e590
f011ff18:	e8 4f 10 fe ff       	call   f0100f6c <cprintf>
f011ff1d:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f011ff20:	83 ec 0c             	sub    $0xc,%esp
f011ff23:	68 60 e5 12 f0       	push   $0xf012e560
f011ff28:	e8 3f 10 fe ff       	call   f0100f6c <cprintf>
f011ff2d:	83 c4 10             	add    $0x10,%esp
	panic("test not available yet");
f011ff30:	83 ec 04             	sub    $0x4,%esp
f011ff33:	68 a9 f5 12 f0       	push   $0xf012f5a9
f011ff38:	68 26 0d 00 00       	push   $0xd26
f011ff3d:	68 d2 ec 12 f0       	push   $0xf012ecd2
f011ff42:	e8 d3 03 fe ff       	call   f010031a <_panic>

f011ff47 <test_krealloc_BF>:
	return 0;
}


int test_krealloc_BF() {
f011ff47:	55                   	push   %ebp
f011ff48:	89 e5                	mov    %esp,%ebp
f011ff4a:	83 ec 08             	sub    $0x8,%esp
	cprintf("==============================================\n");
f011ff4d:	83 ec 0c             	sub    $0xc,%esp
f011ff50:	68 60 e5 12 f0       	push   $0xf012e560
f011ff55:	e8 12 10 fe ff       	call   f0100f6c <cprintf>
f011ff5a:	83 c4 10             	add    $0x10,%esp
	cprintf(
f011ff5d:	83 ec 0c             	sub    $0xc,%esp
f011ff60:	68 90 e5 12 f0       	push   $0xf012e590
f011ff65:	e8 02 10 fe ff       	call   f0100f6c <cprintf>
f011ff6a:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f011ff6d:	83 ec 0c             	sub    $0xc,%esp
f011ff70:	68 60 e5 12 f0       	push   $0xf012e560
f011ff75:	e8 f2 0f fe ff       	call   f0100f6c <cprintf>
f011ff7a:	83 c4 10             	add    $0x10,%esp
	panic("test not available yet");
f011ff7d:	83 ec 04             	sub    $0x4,%esp
f011ff80:	68 a9 f5 12 f0       	push   $0xf012f5a9
f011ff85:	68 30 0d 00 00       	push   $0xd30
f011ff8a:	68 d2 ec 12 f0       	push   $0xf012ecd2
f011ff8f:	e8 86 03 fe ff       	call   f010031a <_panic>

f011ff94 <test_krealloc_FF1>:
	return 0;
}

int test_krealloc_FF1()
{
f011ff94:	55                   	push   %ebp
f011ff95:	89 e5                	mov    %esp,%ebp
f011ff97:	83 ec 08             	sub    $0x8,%esp
	cprintf("===================================================\n");
f011ff9a:	83 ec 0c             	sub    $0xc,%esp
f011ff9d:	68 c0 f5 12 f0       	push   $0xf012f5c0
f011ffa2:	e8 c5 0f fe ff       	call   f0100f6c <cprintf>
f011ffa7:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A COMPLETE TEST FOR KREALLOC [BLOCK ALLOCATOR]******\n") ;
f011ffaa:	83 ec 0c             	sub    $0xc,%esp
f011ffad:	68 f8 f5 12 f0       	push   $0xf012f5f8
f011ffb2:	e8 b5 0f fe ff       	call   f0100f6c <cprintf>
f011ffb7:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f011ffba:	83 ec 0c             	sub    $0xc,%esp
f011ffbd:	68 c0 f5 12 f0       	push   $0xf012f5c0
f011ffc2:	e8 a5 0f fe ff       	call   f0100f6c <cprintf>
f011ffc7:	83 c4 10             	add    $0x10,%esp

	panic("test not available yet");
f011ffca:	83 ec 04             	sub    $0x4,%esp
f011ffcd:	68 a9 f5 12 f0       	push   $0xf012f5a9
f011ffd2:	68 3a 0d 00 00       	push   $0xd3a
f011ffd7:	68 d2 ec 12 f0       	push   $0xf012ecd2
f011ffdc:	e8 39 03 fe ff       	call   f010031a <_panic>

f011ffe1 <test_krealloc_FF2>:
	return 0;

}
int test_krealloc_FF2()
{
f011ffe1:	55                   	push   %ebp
f011ffe2:	89 e5                	mov    %esp,%ebp
f011ffe4:	83 ec 08             	sub    $0x8,%esp
	cprintf("===================================================\n");
f011ffe7:	83 ec 0c             	sub    $0xc,%esp
f011ffea:	68 c0 f5 12 f0       	push   $0xf012f5c0
f011ffef:	e8 78 0f fe ff       	call   f0100f6c <cprintf>
f011fff4:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A COMPLETE TEST FOR KREALLOC [PAGE ALLOCATOR]******\n") ;
f011fff7:	83 ec 0c             	sub    $0xc,%esp
f011fffa:	68 44 f6 12 f0       	push   $0xf012f644
f011ffff:	e8 68 0f fe ff       	call   f0100f6c <cprintf>
f0120004:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f0120007:	83 ec 0c             	sub    $0xc,%esp
f012000a:	68 c0 f5 12 f0       	push   $0xf012f5c0
f012000f:	e8 58 0f fe ff       	call   f0100f6c <cprintf>
f0120014:	83 c4 10             	add    $0x10,%esp

	panic("test not available yet");
f0120017:	83 ec 04             	sub    $0x4,%esp
f012001a:	68 a9 f5 12 f0       	push   $0xf012f5a9
f012001f:	68 44 0d 00 00       	push   $0xd44
f0120024:	68 d2 ec 12 f0       	push   $0xf012ecd2
f0120029:	e8 ec 02 fe ff       	call   f010031a <_panic>

f012002e <test_krealloc_FF3>:
	return 0;
}

int test_krealloc_FF3()
{
f012002e:	55                   	push   %ebp
f012002f:	89 e5                	mov    %esp,%ebp
f0120031:	83 ec 08             	sub    $0x8,%esp
	cprintf("===================================================\n");
f0120034:	83 ec 0c             	sub    $0xc,%esp
f0120037:	68 c0 f5 12 f0       	push   $0xf012f5c0
f012003c:	e8 2b 0f fe ff       	call   f0100f6c <cprintf>
f0120041:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A COMPLETE TEST FOR KREALLOC [SWITCH FROM PAGE ALLOCATOR TO DYNAMIC ALLOCATOR AND VICE VERSA]******\n") ;
f0120044:	83 ec 0c             	sub    $0xc,%esp
f0120047:	68 8c f6 12 f0       	push   $0xf012f68c
f012004c:	e8 1b 0f fe ff       	call   f0100f6c <cprintf>
f0120051:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f0120054:	83 ec 0c             	sub    $0xc,%esp
f0120057:	68 c0 f5 12 f0       	push   $0xf012f5c0
f012005c:	e8 0b 0f fe ff       	call   f0100f6c <cprintf>
f0120061:	83 c4 10             	add    $0x10,%esp

	panic("test not available yet");
f0120064:	83 ec 04             	sub    $0x4,%esp
f0120067:	68 a9 f5 12 f0       	push   $0xf012f5a9
f012006c:	68 4e 0d 00 00       	push   $0xd4e
f0120071:	68 d2 ec 12 f0       	push   $0xf012ecd2
f0120076:	e8 9f 02 fe ff       	call   f010031a <_panic>

f012007b <print_order>:
uint8 firstTimeTestBSD = 1;
int prog_orders[TOTAL_NICE_VALUES][INSTANCES_NUMBER];
int nice_count[TOTAL_NICE_VALUES] = {0};

void print_order(int prog_orders[][INSTANCES_NUMBER])
{
f012007b:	55                   	push   %ebp
f012007c:	89 e5                	mov    %esp,%ebp
f012007e:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < TOTAL_NICE_VALUES; i++)
f0120081:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120088:	e9 84 00 00 00       	jmp    f0120111 <print_order+0x96>
	{
		cprintf("\t[%d]: ", i);
f012008d:	83 ec 08             	sub    $0x8,%esp
f0120090:	ff 75 f4             	pushl  -0xc(%ebp)
f0120093:	68 04 f7 12 f0       	push   $0xf012f704
f0120098:	e8 cf 0e fe ff       	call   f0100f6c <cprintf>
f012009d:	83 c4 10             	add    $0x10,%esp
		for (int j = 0; j < INSTANCES_NUMBER; j++)
f01200a0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01200a7:	eb 4c                	jmp    f01200f5 <print_order+0x7a>
		{
			if (prog_orders[i][j] == 0)
f01200a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01200ac:	89 d0                	mov    %edx,%eax
f01200ae:	c1 e0 02             	shl    $0x2,%eax
f01200b1:	01 d0                	add    %edx,%eax
f01200b3:	c1 e0 03             	shl    $0x3,%eax
f01200b6:	89 c2                	mov    %eax,%edx
f01200b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01200bb:	01 c2                	add    %eax,%edx
f01200bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01200c0:	8b 04 82             	mov    (%edx,%eax,4),%eax
f01200c3:	85 c0                	test   %eax,%eax
f01200c5:	74 36                	je     f01200fd <print_order+0x82>
				break;
			cprintf("%d, ", prog_orders[i][j]);
f01200c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01200ca:	89 d0                	mov    %edx,%eax
f01200cc:	c1 e0 02             	shl    $0x2,%eax
f01200cf:	01 d0                	add    %edx,%eax
f01200d1:	c1 e0 03             	shl    $0x3,%eax
f01200d4:	89 c2                	mov    %eax,%edx
f01200d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01200d9:	01 c2                	add    %eax,%edx
f01200db:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01200de:	8b 04 82             	mov    (%edx,%eax,4),%eax
f01200e1:	83 ec 08             	sub    $0x8,%esp
f01200e4:	50                   	push   %eax
f01200e5:	68 0c f7 12 f0       	push   $0xf012f70c
f01200ea:	e8 7d 0e fe ff       	call   f0100f6c <cprintf>
f01200ef:	83 c4 10             	add    $0x10,%esp
void print_order(int prog_orders[][INSTANCES_NUMBER])
{
	for (int i = 0; i < TOTAL_NICE_VALUES; i++)
	{
		cprintf("\t[%d]: ", i);
		for (int j = 0; j < INSTANCES_NUMBER; j++)
f01200f2:	ff 45 f0             	incl   -0x10(%ebp)
f01200f5:	83 7d f0 09          	cmpl   $0x9,-0x10(%ebp)
f01200f9:	7e ae                	jle    f01200a9 <print_order+0x2e>
f01200fb:	eb 01                	jmp    f01200fe <print_order+0x83>
		{
			if (prog_orders[i][j] == 0)
				break;
f01200fd:	90                   	nop
			cprintf("%d, ", prog_orders[i][j]);
		}
		cprintf("\n");
f01200fe:	83 ec 0c             	sub    $0xc,%esp
f0120101:	68 11 f7 12 f0       	push   $0xf012f711
f0120106:	e8 61 0e fe ff       	call   f0100f6c <cprintf>
f012010b:	83 c4 10             	add    $0x10,%esp
int prog_orders[TOTAL_NICE_VALUES][INSTANCES_NUMBER];
int nice_count[TOTAL_NICE_VALUES] = {0};

void print_order(int prog_orders[][INSTANCES_NUMBER])
{
	for (int i = 0; i < TOTAL_NICE_VALUES; i++)
f012010e:	ff 45 f4             	incl   -0xc(%ebp)
f0120111:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
f0120115:	0f 8e 72 ff ff ff    	jle    f012008d <print_order+0x12>
				break;
			cprintf("%d, ", prog_orders[i][j]);
		}
		cprintf("\n");
	}
}
f012011b:	90                   	nop
f012011c:	c9                   	leave  
f012011d:	c3                   	ret    

f012011e <find_in_range>:

int find_in_range(int env_id, int start, int count)
{
f012011e:	55                   	push   %ebp
f012011f:	89 e5                	mov    %esp,%ebp
f0120121:	83 ec 28             	sub    $0x28,%esp
	int ret = -1;
f0120124:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	acquire_spinlock(&ProcessQueues.qlock);
f012012b:	83 ec 0c             	sub    $0xc,%esp
f012012e:	68 00 fe 59 f0       	push   $0xf059fe00
f0120133:	e8 e9 e9 fe ff       	call   f010eb21 <acquire_spinlock>
f0120138:	83 c4 10             	add    $0x10,%esp
	{
		struct Env *env = NULL;
f012013b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		int i = 0, end = start + count;
f0120142:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0120149:	8b 55 0c             	mov    0xc(%ebp),%edx
f012014c:	8b 45 10             	mov    0x10(%ebp),%eax
f012014f:	01 d0                	add    %edx,%eax
f0120151:	89 45 e8             	mov    %eax,-0x18(%ebp)

		//REVERSE LOOP ON EXIT LIST (to be the same as the queue order)
		int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
f0120154:	a1 8c fe 59 f0       	mov    0xf059fe8c,%eax
f0120159:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		env = LIST_LAST(&ProcessQueues.env_exit_queue);
f012015c:	a1 84 fe 59 f0       	mov    0xf059fe84,%eax
f0120161:	89 45 f0             	mov    %eax,-0x10(%ebp)

		cprintf("searching for envID %d starting from %d till %d\n", env_id, start, end);
f0120164:	ff 75 e8             	pushl  -0x18(%ebp)
f0120167:	ff 75 0c             	pushl  0xc(%ebp)
f012016a:	ff 75 08             	pushl  0x8(%ebp)
f012016d:	68 14 f7 12 f0       	push   $0xf012f714
f0120172:	e8 f5 0d fe ff       	call   f0100f6c <cprintf>
f0120177:	83 c4 10             	add    $0x10,%esp
		for (; i < numOfExitEnvs; env = LIST_PREV(env))
f012017a:	eb 34                	jmp    f01201b0 <find_in_range+0x92>
			//LIST_FOREACH_R(env, &env_exit_queue)
		{
			if (i < start)
f012017c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012017f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0120182:	7d 05                	jge    f0120189 <find_in_range+0x6b>
			{
				i++;
f0120184:	ff 45 ec             	incl   -0x14(%ebp)
				continue;
f0120187:	eb 1e                	jmp    f01201a7 <find_in_range+0x89>
			}
			if (i >= end)
f0120189:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012018c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012018f:	7d 29                	jge    f01201ba <find_in_range+0x9c>
				//return -1;
				break;

			if (env_id == env->env_id)
f0120191:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0120194:	8b 40 10             	mov    0x10(%eax),%eax
f0120197:	3b 45 08             	cmp    0x8(%ebp),%eax
f012019a:	75 08                	jne    f01201a4 <find_in_range+0x86>
			{
				ret = i;
f012019c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012019f:	89 45 f4             	mov    %eax,-0xc(%ebp)
				break;
f01201a2:	eb 17                	jmp    f01201bb <find_in_range+0x9d>
			}
			i++;
f01201a4:	ff 45 ec             	incl   -0x14(%ebp)
		//REVERSE LOOP ON EXIT LIST (to be the same as the queue order)
		int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
		env = LIST_LAST(&ProcessQueues.env_exit_queue);

		cprintf("searching for envID %d starting from %d till %d\n", env_id, start, end);
		for (; i < numOfExitEnvs; env = LIST_PREV(env))
f01201a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01201aa:	8b 40 0c             	mov    0xc(%eax),%eax
f01201ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01201b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01201b3:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01201b6:	7c c4                	jl     f012017c <find_in_range+0x5e>
f01201b8:	eb 01                	jmp    f01201bb <find_in_range+0x9d>
				i++;
				continue;
			}
			if (i >= end)
				//return -1;
				break;
f01201ba:	90                   	nop
				break;
			}
			i++;
		}
	}
	release_spinlock(&ProcessQueues.qlock);
f01201bb:	83 ec 0c             	sub    $0xc,%esp
f01201be:	68 00 fe 59 f0       	push   $0xf059fe00
f01201c3:	e8 e0 e9 fe ff       	call   f010eba8 <release_spinlock>
f01201c8:	83 c4 10             	add    $0x10,%esp
	return ret;
f01201cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01201ce:	c9                   	leave  
f01201cf:	c3                   	ret    

f01201d0 <test_bsd_nice_0>:


void test_bsd_nice_0()
{
f01201d0:	55                   	push   %ebp
f01201d1:	89 e5                	mov    %esp,%ebp
f01201d3:	57                   	push   %edi
f01201d4:	56                   	push   %esi
f01201d5:	53                   	push   %ebx
f01201d6:	83 ec 3c             	sub    $0x3c,%esp
	if (firstTimeTestBSD)
f01201d9:	a0 dd ed 17 f0       	mov    0xf017eddd,%al
f01201de:	84 c0                	test   %al,%al
f01201e0:	0f 84 9b 01 00 00    	je     f0120381 <test_bsd_nice_0+0x1b1>
	{
		firstTimeTestBSD = 0;
f01201e6:	c6 05 dd ed 17 f0 00 	movb   $0x0,0xf017eddd
		int nice_values[] = {-10, -5, 0, 5, 10};
f01201ed:	8d 45 b8             	lea    -0x48(%ebp),%eax
f01201f0:	bb 8c f8 12 f0       	mov    $0xf012f88c,%ebx
f01201f5:	ba 05 00 00 00       	mov    $0x5,%edx
f01201fa:	89 c7                	mov    %eax,%edi
f01201fc:	89 de                	mov    %ebx,%esi
f01201fe:	89 d1                	mov    %edx,%ecx
f0120200:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		for (int i = 0; i < INSTANCES_NUMBER/2; i++)
f0120202:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0120209:	e9 44 01 00 00       	jmp    f0120352 <test_bsd_nice_0+0x182>
		{
			struct Env *env = env_create("bsd_fib", 500, 0, 0);
f012020e:	6a 00                	push   $0x0
f0120210:	6a 00                	push   $0x0
f0120212:	68 f4 01 00 00       	push   $0x1f4
f0120217:	68 45 f7 12 f0       	push   $0xf012f745
f012021c:	e8 4f 98 fe ff       	call   f0109a70 <env_create>
f0120221:	83 c4 10             	add    $0x10,%esp
f0120224:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			int nice_index = i % TOTAL_NICE_VALUES;
f0120227:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012022a:	b9 05 00 00 00       	mov    $0x5,%ecx
f012022f:	99                   	cltd   
f0120230:	f7 f9                	idiv   %ecx
f0120232:	89 55 d0             	mov    %edx,-0x30(%ebp)
			env_set_nice(env, nice_values[nice_index]);
f0120235:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120238:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f012023c:	83 ec 08             	sub    $0x8,%esp
f012023f:	50                   	push   %eax
f0120240:	ff 75 d4             	pushl  -0x2c(%ebp)
f0120243:	e8 5f 64 fe ff       	call   f01066a7 <env_set_nice>
f0120248:	83 c4 10             	add    $0x10,%esp
			if (env == NULL)
f012024b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012024f:	75 14                	jne    f0120265 <test_bsd_nice_0+0x95>
				panic("Loading programs failed\n");
f0120251:	83 ec 04             	sub    $0x4,%esp
f0120254:	68 4d f7 12 f0       	push   $0xf012f74d
f0120259:	6a 53                	push   $0x53
f012025b:	68 66 f7 12 f0       	push   $0xf012f766
f0120260:	e8 b5 00 fe ff       	call   f010031a <_panic>
			if (env->page_WS_max_size != 500)
f0120265:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0120268:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f012026e:	3d f4 01 00 00       	cmp    $0x1f4,%eax
f0120273:	74 14                	je     f0120289 <test_bsd_nice_0+0xb9>
				panic("The program working set size is not correct\n");
f0120275:	83 ec 04             	sub    $0x4,%esp
f0120278:	68 84 f7 12 f0       	push   $0xf012f784
f012027d:	6a 55                	push   $0x55
f012027f:	68 66 f7 12 f0       	push   $0xf012f766
f0120284:	e8 91 00 fe ff       	call   f010031a <_panic>

			switch (nice_values[nice_index])
f0120289:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012028c:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f0120290:	83 c0 0a             	add    $0xa,%eax
f0120293:	83 f8 14             	cmp    $0x14,%eax
f0120296:	0f 87 a5 00 00 00    	ja     f0120341 <test_bsd_nice_0+0x171>
f012029c:	8b 04 85 a0 f8 12 f0 	mov    -0xfed0760(,%eax,4),%eax
f01202a3:	ff e0                	jmp    *%eax
			{
			case -10:
				prog_orders[0][nice_count[0]++] = env->env_id;
f01202a5:	a1 3c fc 59 f0       	mov    0xf059fc3c,%eax
f01202aa:	8d 50 01             	lea    0x1(%eax),%edx
f01202ad:	89 15 3c fc 59 f0    	mov    %edx,0xf059fc3c
f01202b3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01202b6:	8b 52 10             	mov    0x10(%edx),%edx
f01202b9:	89 14 85 80 52 5c f0 	mov    %edx,-0xfa3ad80(,%eax,4)
				break;
f01202c0:	eb 7f                	jmp    f0120341 <test_bsd_nice_0+0x171>
			case -5:
				prog_orders[1][nice_count[1]++] = env->env_id;
f01202c2:	a1 40 fc 59 f0       	mov    0xf059fc40,%eax
f01202c7:	8d 50 01             	lea    0x1(%eax),%edx
f01202ca:	89 15 40 fc 59 f0    	mov    %edx,0xf059fc40
f01202d0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01202d3:	8b 52 10             	mov    0x10(%edx),%edx
f01202d6:	83 c0 0a             	add    $0xa,%eax
f01202d9:	89 14 85 80 52 5c f0 	mov    %edx,-0xfa3ad80(,%eax,4)
				break;
f01202e0:	eb 5f                	jmp    f0120341 <test_bsd_nice_0+0x171>
			case 0:
				prog_orders[2][nice_count[2]++] = env->env_id;
f01202e2:	a1 44 fc 59 f0       	mov    0xf059fc44,%eax
f01202e7:	8d 50 01             	lea    0x1(%eax),%edx
f01202ea:	89 15 44 fc 59 f0    	mov    %edx,0xf059fc44
f01202f0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01202f3:	8b 52 10             	mov    0x10(%edx),%edx
f01202f6:	83 c0 14             	add    $0x14,%eax
f01202f9:	89 14 85 80 52 5c f0 	mov    %edx,-0xfa3ad80(,%eax,4)
				break;
f0120300:	eb 3f                	jmp    f0120341 <test_bsd_nice_0+0x171>
			case 5:
				prog_orders[3][nice_count[3]++] = env->env_id;
f0120302:	a1 48 fc 59 f0       	mov    0xf059fc48,%eax
f0120307:	8d 50 01             	lea    0x1(%eax),%edx
f012030a:	89 15 48 fc 59 f0    	mov    %edx,0xf059fc48
f0120310:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0120313:	8b 52 10             	mov    0x10(%edx),%edx
f0120316:	83 c0 1e             	add    $0x1e,%eax
f0120319:	89 14 85 80 52 5c f0 	mov    %edx,-0xfa3ad80(,%eax,4)
				break;
f0120320:	eb 1f                	jmp    f0120341 <test_bsd_nice_0+0x171>
			case 10:
				prog_orders[4][nice_count[4]++] = env->env_id;
f0120322:	a1 4c fc 59 f0       	mov    0xf059fc4c,%eax
f0120327:	8d 50 01             	lea    0x1(%eax),%edx
f012032a:	89 15 4c fc 59 f0    	mov    %edx,0xf059fc4c
f0120330:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0120333:	8b 52 10             	mov    0x10(%edx),%edx
f0120336:	83 c0 28             	add    $0x28,%eax
f0120339:	89 14 85 80 52 5c f0 	mov    %edx,-0xfa3ad80(,%eax,4)
				break;
f0120340:	90                   	nop
			}
			sched_new_env(env);
f0120341:	83 ec 0c             	sub    $0xc,%esp
f0120344:	ff 75 d4             	pushl  -0x2c(%ebp)
f0120347:	e8 59 53 fe ff       	call   f01056a5 <sched_new_env>
f012034c:	83 c4 10             	add    $0x10,%esp
{
	if (firstTimeTestBSD)
	{
		firstTimeTestBSD = 0;
		int nice_values[] = {-10, -5, 0, 5, 10};
		for (int i = 0; i < INSTANCES_NUMBER/2; i++)
f012034f:	ff 45 e4             	incl   -0x1c(%ebp)
f0120352:	83 7d e4 04          	cmpl   $0x4,-0x1c(%ebp)
f0120356:	0f 8e b2 fe ff ff    	jle    f012020e <test_bsd_nice_0+0x3e>
				break;
			}
			sched_new_env(env);
		}
		// print_order(prog_orders);
		cprintf("> Running... (After all running programs finish, Run the same command again.)\n");
f012035c:	83 ec 0c             	sub    $0xc,%esp
f012035f:	68 b4 f7 12 f0       	push   $0xf012f7b4
f0120364:	e8 03 0c fe ff       	call   f0100f6c <cprintf>
f0120369:	83 c4 10             	add    $0x10,%esp
		execute_command("runall");
f012036c:	83 ec 0c             	sub    $0xc,%esp
f012036f:	68 03 f8 12 f0       	push   $0xf012f803
f0120374:	e8 63 1b fe ff       	call   f0101edc <execute_command>
f0120379:	83 c4 10             	add    $0x10,%esp
f012037c:	e9 c0 00 00 00       	jmp    f0120441 <test_bsd_nice_0+0x271>
	}
	else
	{
		cprintf("> Checking...\n");
f0120381:	83 ec 0c             	sub    $0xc,%esp
f0120384:	68 0a f8 12 f0       	push   $0xf012f80a
f0120389:	e8 de 0b fe ff       	call   f0100f6c <cprintf>
f012038e:	83 c4 10             	add    $0x10,%esp
		sched_print_all();
f0120391:	e8 8b 5a fe ff       	call   f0105e21 <sched_print_all>
		// print_order(prog_orders);
		int start_idx = 0;
f0120396:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		for (int i = 0; i < TOTAL_NICE_VALUES; i++)
f012039d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01203a4:	e9 87 00 00 00       	jmp    f0120430 <test_bsd_nice_0+0x260>
		{
			for (int j = 0; prog_orders[i][j] != 0; j++)
f01203a9:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01203b0:	eb 52                	jmp    f0120404 <test_bsd_nice_0+0x234>
			{
				int exist = find_in_range(prog_orders[i][j], start_idx, nice_count[i]);
f01203b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01203b5:	8b 14 85 3c fc 59 f0 	mov    -0xfa603c4(,%eax,4),%edx
f01203bc:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f01203bf:	89 c8                	mov    %ecx,%eax
f01203c1:	c1 e0 02             	shl    $0x2,%eax
f01203c4:	01 c8                	add    %ecx,%eax
f01203c6:	01 c0                	add    %eax,%eax
f01203c8:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f01203cb:	01 c8                	add    %ecx,%eax
f01203cd:	8b 04 85 80 52 5c f0 	mov    -0xfa3ad80(,%eax,4),%eax
f01203d4:	83 ec 04             	sub    $0x4,%esp
f01203d7:	52                   	push   %edx
f01203d8:	ff 75 e0             	pushl  -0x20(%ebp)
f01203db:	50                   	push   %eax
f01203dc:	e8 3d fd ff ff       	call   f012011e <find_in_range>
f01203e1:	83 c4 10             	add    $0x10,%esp
f01203e4:	89 45 cc             	mov    %eax,-0x34(%ebp)
				if (exist == -1)
f01203e7:	83 7d cc ff          	cmpl   $0xffffffff,-0x34(%ebp)
f01203eb:	75 14                	jne    f0120401 <test_bsd_nice_0+0x231>
					panic("The programs' order of finishing is not correct\n");
f01203ed:	83 ec 04             	sub    $0x4,%esp
f01203f0:	68 1c f8 12 f0       	push   $0xf012f81c
f01203f5:	6a 7b                	push   $0x7b
f01203f7:	68 66 f7 12 f0       	push   $0xf012f766
f01203fc:	e8 19 ff fd ff       	call   f010031a <_panic>
		sched_print_all();
		// print_order(prog_orders);
		int start_idx = 0;
		for (int i = 0; i < TOTAL_NICE_VALUES; i++)
		{
			for (int j = 0; prog_orders[i][j] != 0; j++)
f0120401:	ff 45 d8             	incl   -0x28(%ebp)
f0120404:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0120407:	89 d0                	mov    %edx,%eax
f0120409:	c1 e0 02             	shl    $0x2,%eax
f012040c:	01 d0                	add    %edx,%eax
f012040e:	01 c0                	add    %eax,%eax
f0120410:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0120413:	01 d0                	add    %edx,%eax
f0120415:	8b 04 85 80 52 5c f0 	mov    -0xfa3ad80(,%eax,4),%eax
f012041c:	85 c0                	test   %eax,%eax
f012041e:	75 92                	jne    f01203b2 <test_bsd_nice_0+0x1e2>
			{
				int exist = find_in_range(prog_orders[i][j], start_idx, nice_count[i]);
				if (exist == -1)
					panic("The programs' order of finishing is not correct\n");
			}
			start_idx += nice_count[i];
f0120420:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120423:	8b 04 85 3c fc 59 f0 	mov    -0xfa603c4(,%eax,4),%eax
f012042a:	01 45 e0             	add    %eax,-0x20(%ebp)
	{
		cprintf("> Checking...\n");
		sched_print_all();
		// print_order(prog_orders);
		int start_idx = 0;
		for (int i = 0; i < TOTAL_NICE_VALUES; i++)
f012042d:	ff 45 dc             	incl   -0x24(%ebp)
f0120430:	83 7d dc 04          	cmpl   $0x4,-0x24(%ebp)
f0120434:	0f 8e 6f ff ff ff    	jle    f01203a9 <test_bsd_nice_0+0x1d9>
				if (exist == -1)
					panic("The programs' order of finishing is not correct\n");
			}
			start_idx += nice_count[i];
		}
		firstTimeTestBSD = 0;
f012043a:	c6 05 dd ed 17 f0 00 	movb   $0x0,0xf017eddd
	}
	cprintf("\nCongratulations!! test_bsd_nice_0 completed successfully.\n");
f0120441:	83 ec 0c             	sub    $0xc,%esp
f0120444:	68 50 f8 12 f0       	push   $0xf012f850
f0120449:	e8 1e 0b fe ff       	call   f0100f6c <cprintf>
f012044e:	83 c4 10             	add    $0x10,%esp
}
f0120451:	90                   	nop
f0120452:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0120455:	5b                   	pop    %ebx
f0120456:	5e                   	pop    %esi
f0120457:	5f                   	pop    %edi
f0120458:	5d                   	pop    %ebp
f0120459:	c3                   	ret    

f012045a <test_bsd_nice_1>:


void test_bsd_nice_1()
{
f012045a:	55                   	push   %ebp
f012045b:	89 e5                	mov    %esp,%ebp
f012045d:	83 ec 28             	sub    $0x28,%esp
	if (firstTimeTestBSD)
f0120460:	a0 dd ed 17 f0       	mov    0xf017eddd,%al
f0120465:	84 c0                	test   %al,%al
f0120467:	0f 84 50 01 00 00    	je     f01205bd <test_bsd_nice_1+0x163>
	{
		firstTimeTestBSD = 0;
f012046d:	c6 05 dd ed 17 f0 00 	movb   $0x0,0xf017eddd
		struct Env *fibEnv = env_create("bsd_fib", 500, 0, 0);
f0120474:	6a 00                	push   $0x0
f0120476:	6a 00                	push   $0x0
f0120478:	68 f4 01 00 00       	push   $0x1f4
f012047d:	68 45 f7 12 f0       	push   $0xf012f745
f0120482:	e8 e9 95 fe ff       	call   f0109a70 <env_create>
f0120487:	83 c4 10             	add    $0x10,%esp
f012048a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		struct Env *fibposnEnv = env_create("bsd_fib_posn", 500, 0, 0);
f012048d:	6a 00                	push   $0x0
f012048f:	6a 00                	push   $0x0
f0120491:	68 f4 01 00 00       	push   $0x1f4
f0120496:	68 f4 f8 12 f0       	push   $0xf012f8f4
f012049b:	e8 d0 95 fe ff       	call   f0109a70 <env_create>
f01204a0:	83 c4 10             	add    $0x10,%esp
f01204a3:	89 45 e8             	mov    %eax,-0x18(%ebp)
		struct Env *fibnegnEnv = env_create("bsd_fib_negn", 500, 0, 0);
f01204a6:	6a 00                	push   $0x0
f01204a8:	6a 00                	push   $0x0
f01204aa:	68 f4 01 00 00       	push   $0x1f4
f01204af:	68 01 f9 12 f0       	push   $0xf012f901
f01204b4:	e8 b7 95 fe ff       	call   f0109a70 <env_create>
f01204b9:	83 c4 10             	add    $0x10,%esp
f01204bc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (fibEnv == NULL || fibposnEnv == NULL || fibnegnEnv == NULL)
f01204bf:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01204c3:	74 0c                	je     f01204d1 <test_bsd_nice_1+0x77>
f01204c5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01204c9:	74 06                	je     f01204d1 <test_bsd_nice_1+0x77>
f01204cb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01204cf:	75 17                	jne    f01204e8 <test_bsd_nice_1+0x8e>
			panic("Loading programs failed\n");
f01204d1:	83 ec 04             	sub    $0x4,%esp
f01204d4:	68 4d f7 12 f0       	push   $0xf012f74d
f01204d9:	68 8e 00 00 00       	push   $0x8e
f01204de:	68 66 f7 12 f0       	push   $0xf012f766
f01204e3:	e8 32 fe fd ff       	call   f010031a <_panic>
		if (fibEnv->page_WS_max_size != 500 || fibposnEnv->page_WS_max_size != 500 || fibnegnEnv->page_WS_max_size != 500)
f01204e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01204eb:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01204f1:	3d f4 01 00 00       	cmp    $0x1f4,%eax
f01204f6:	75 20                	jne    f0120518 <test_bsd_nice_1+0xbe>
f01204f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01204fb:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0120501:	3d f4 01 00 00       	cmp    $0x1f4,%eax
f0120506:	75 10                	jne    f0120518 <test_bsd_nice_1+0xbe>
f0120508:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012050b:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0120511:	3d f4 01 00 00       	cmp    $0x1f4,%eax
f0120516:	74 35                	je     f012054d <test_bsd_nice_1+0xf3>
			panic("The programs should be initially loaded with the given working set size. fib: %d, fibposn: %d, fibnegn: %d\n", fibEnv->page_WS_max_size, fibposnEnv->page_WS_max_size, fibnegnEnv->page_WS_max_size);
f0120518:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012051b:	8b 88 84 00 00 00    	mov    0x84(%eax),%ecx
f0120521:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0120524:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f012052a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012052d:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0120533:	83 ec 08             	sub    $0x8,%esp
f0120536:	51                   	push   %ecx
f0120537:	52                   	push   %edx
f0120538:	50                   	push   %eax
f0120539:	68 10 f9 12 f0       	push   $0xf012f910
f012053e:	68 90 00 00 00       	push   $0x90
f0120543:	68 66 f7 12 f0       	push   $0xf012f766
f0120548:	e8 cd fd fd ff       	call   f010031a <_panic>
		sched_new_env(fibEnv);
f012054d:	83 ec 0c             	sub    $0xc,%esp
f0120550:	ff 75 ec             	pushl  -0x14(%ebp)
f0120553:	e8 4d 51 fe ff       	call   f01056a5 <sched_new_env>
f0120558:	83 c4 10             	add    $0x10,%esp
		sched_new_env(fibposnEnv);
f012055b:	83 ec 0c             	sub    $0xc,%esp
f012055e:	ff 75 e8             	pushl  -0x18(%ebp)
f0120561:	e8 3f 51 fe ff       	call   f01056a5 <sched_new_env>
f0120566:	83 c4 10             	add    $0x10,%esp
		sched_new_env(fibnegnEnv);
f0120569:	83 ec 0c             	sub    $0xc,%esp
f012056c:	ff 75 e4             	pushl  -0x1c(%ebp)
f012056f:	e8 31 51 fe ff       	call   f01056a5 <sched_new_env>
f0120574:	83 c4 10             	add    $0x10,%esp
		prog_orders[0][0] = fibnegnEnv->env_id;
f0120577:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012057a:	8b 40 10             	mov    0x10(%eax),%eax
f012057d:	a3 80 52 5c f0       	mov    %eax,0xf05c5280
		prog_orders[1][0] = fibEnv->env_id;
f0120582:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0120585:	8b 40 10             	mov    0x10(%eax),%eax
f0120588:	a3 a8 52 5c f0       	mov    %eax,0xf05c52a8
		prog_orders[2][0] = fibposnEnv->env_id;
f012058d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0120590:	8b 40 10             	mov    0x10(%eax),%eax
f0120593:	a3 d0 52 5c f0       	mov    %eax,0xf05c52d0
		cprintf("> Running... (After all running programs finish, Run the same command again.)\n");
f0120598:	83 ec 0c             	sub    $0xc,%esp
f012059b:	68 b4 f7 12 f0       	push   $0xf012f7b4
f01205a0:	e8 c7 09 fe ff       	call   f0100f6c <cprintf>
f01205a5:	83 c4 10             	add    $0x10,%esp
		execute_command("runall");
f01205a8:	83 ec 0c             	sub    $0xc,%esp
f01205ab:	68 03 f8 12 f0       	push   $0xf012f803
f01205b0:	e8 27 19 fe ff       	call   f0101edc <execute_command>
f01205b5:	83 c4 10             	add    $0x10,%esp
f01205b8:	e9 9e 00 00 00       	jmp    f012065b <test_bsd_nice_1+0x201>
	}
	else
	{
		cprintf("> Checking...\n");
f01205bd:	83 ec 0c             	sub    $0xc,%esp
f01205c0:	68 0a f8 12 f0       	push   $0xf012f80a
f01205c5:	e8 a2 09 fe ff       	call   f0100f6c <cprintf>
f01205ca:	83 c4 10             	add    $0x10,%esp
		sched_print_all();
f01205cd:	e8 4f 58 fe ff       	call   f0105e21 <sched_print_all>
		// print_order(prog_orders);
		int i = 0;
f01205d2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		struct Env *env = NULL;
f01205d9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		acquire_spinlock(&ProcessQueues.qlock);
f01205e0:	83 ec 0c             	sub    $0xc,%esp
f01205e3:	68 00 fe 59 f0       	push   $0xf059fe00
f01205e8:	e8 34 e5 fe ff       	call   f010eb21 <acquire_spinlock>
f01205ed:	83 c4 10             	add    $0x10,%esp
		{
			//REVERSE LOOP ON EXIT LIST (to be the same as the queue order)
			int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
f01205f0:	a1 8c fe 59 f0       	mov    0xf059fe8c,%eax
f01205f5:	89 45 e0             	mov    %eax,-0x20(%ebp)
			env = LIST_LAST(&ProcessQueues.env_exit_queue);
f01205f8:	a1 84 fe 59 f0       	mov    0xf059fe84,%eax
f01205fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
			for (; i < numOfExitEnvs; env = LIST_PREV(env))
f0120600:	eb 41                	jmp    f0120643 <test_bsd_nice_1+0x1e9>
				//LIST_FOREACH_R(env, &env_exit_queue)
			{
				//cprintf("%s - id=%d, priority=%d, nice=%d\n", env->prog_name, env->env_id, env->priority, env->nice);
				if (prog_orders[i][0] != env->env_id)
f0120602:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120605:	89 d0                	mov    %edx,%eax
f0120607:	c1 e0 02             	shl    $0x2,%eax
f012060a:	01 d0                	add    %edx,%eax
f012060c:	c1 e0 03             	shl    $0x3,%eax
f012060f:	05 80 52 5c f0       	add    $0xf05c5280,%eax
f0120614:	8b 10                	mov    (%eax),%edx
f0120616:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0120619:	8b 40 10             	mov    0x10(%eax),%eax
f012061c:	39 c2                	cmp    %eax,%edx
f012061e:	74 17                	je     f0120637 <test_bsd_nice_1+0x1dd>
					panic("The programs' order of finishing is not correct\n");
f0120620:	83 ec 04             	sub    $0x4,%esp
f0120623:	68 1c f8 12 f0       	push   $0xf012f81c
f0120628:	68 ab 00 00 00       	push   $0xab
f012062d:	68 66 f7 12 f0       	push   $0xf012f766
f0120632:	e8 e3 fc fd ff       	call   f010031a <_panic>
				i++;
f0120637:	ff 45 f4             	incl   -0xc(%ebp)
		acquire_spinlock(&ProcessQueues.qlock);
		{
			//REVERSE LOOP ON EXIT LIST (to be the same as the queue order)
			int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
			env = LIST_LAST(&ProcessQueues.env_exit_queue);
			for (; i < numOfExitEnvs; env = LIST_PREV(env))
f012063a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012063d:	8b 40 0c             	mov    0xc(%eax),%eax
f0120640:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0120643:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120646:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0120649:	7c b7                	jl     f0120602 <test_bsd_nice_1+0x1a8>
				if (prog_orders[i][0] != env->env_id)
					panic("The programs' order of finishing is not correct\n");
				i++;
			}
		}
		release_spinlock(&ProcessQueues.qlock);
f012064b:	83 ec 0c             	sub    $0xc,%esp
f012064e:	68 00 fe 59 f0       	push   $0xf059fe00
f0120653:	e8 50 e5 fe ff       	call   f010eba8 <release_spinlock>
f0120658:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\nCongratulations!! test_bsd_nice_1 completed successfully.\n");
f012065b:	83 ec 0c             	sub    $0xc,%esp
f012065e:	68 7c f9 12 f0       	push   $0xf012f97c
f0120663:	e8 04 09 fe ff       	call   f0100f6c <cprintf>
f0120668:	83 c4 10             	add    $0x10,%esp
}
f012066b:	90                   	nop
f012066c:	c9                   	leave  
f012066d:	c3                   	ret    

f012066e <test_bsd_nice_2>:

void test_bsd_nice_2()
{
f012066e:	55                   	push   %ebp
f012066f:	89 e5                	mov    %esp,%ebp
f0120671:	57                   	push   %edi
f0120672:	56                   	push   %esi
f0120673:	53                   	push   %ebx
f0120674:	83 ec 3c             	sub    $0x3c,%esp
	if (firstTimeTestBSD)
f0120677:	a0 dd ed 17 f0       	mov    0xf017eddd,%al
f012067c:	84 c0                	test   %al,%al
f012067e:	0f 84 ae 01 00 00    	je     f0120832 <test_bsd_nice_2+0x1c4>
	{
		chksch(1);
f0120684:	83 ec 0c             	sub    $0xc,%esp
f0120687:	6a 01                	push   $0x1
f0120689:	e8 0d 10 00 00       	call   f012169b <chksch>
f012068e:	83 c4 10             	add    $0x10,%esp
		firstTimeTestBSD = 0;
f0120691:	c6 05 dd ed 17 f0 00 	movb   $0x0,0xf017eddd
		int nice_values[] = {15, 5, 0, -5, -15};
f0120698:	8d 45 b8             	lea    -0x48(%ebp),%eax
f012069b:	bb 00 fa 12 f0       	mov    $0xf012fa00,%ebx
f01206a0:	ba 05 00 00 00       	mov    $0x5,%edx
f01206a5:	89 c7                	mov    %eax,%edi
f01206a7:	89 de                	mov    %ebx,%esi
f01206a9:	89 d1                	mov    %edx,%ecx
f01206ab:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		for (int i = 0; i < INSTANCES_NUMBER; i++)
f01206ad:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01206b4:	e9 4a 01 00 00       	jmp    f0120803 <test_bsd_nice_2+0x195>
		{
			struct Env *env = env_create("bsd_matops", 10000, 0, 0);
f01206b9:	6a 00                	push   $0x0
f01206bb:	6a 00                	push   $0x0
f01206bd:	68 10 27 00 00       	push   $0x2710
f01206c2:	68 b8 f9 12 f0       	push   $0xf012f9b8
f01206c7:	e8 a4 93 fe ff       	call   f0109a70 <env_create>
f01206cc:	83 c4 10             	add    $0x10,%esp
f01206cf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			int nice_index = i % TOTAL_NICE_VALUES;
f01206d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01206d5:	b9 05 00 00 00       	mov    $0x5,%ecx
f01206da:	99                   	cltd   
f01206db:	f7 f9                	idiv   %ecx
f01206dd:	89 55 d0             	mov    %edx,-0x30(%ebp)
			env_set_nice(env, nice_values[nice_index]);
f01206e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01206e3:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f01206e7:	83 ec 08             	sub    $0x8,%esp
f01206ea:	50                   	push   %eax
f01206eb:	ff 75 d4             	pushl  -0x2c(%ebp)
f01206ee:	e8 b4 5f fe ff       	call   f01066a7 <env_set_nice>
f01206f3:	83 c4 10             	add    $0x10,%esp
			if (env == NULL)
f01206f6:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01206fa:	75 17                	jne    f0120713 <test_bsd_nice_2+0xa5>
				panic("Loading programs failed\n");
f01206fc:	83 ec 04             	sub    $0x4,%esp
f01206ff:	68 4d f7 12 f0       	push   $0xf012f74d
f0120704:	68 c1 00 00 00       	push   $0xc1
f0120709:	68 66 f7 12 f0       	push   $0xf012f766
f012070e:	e8 07 fc fd ff       	call   f010031a <_panic>
			if (env->page_WS_max_size != 10000)
f0120713:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0120716:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f012071c:	3d 10 27 00 00       	cmp    $0x2710,%eax
f0120721:	74 17                	je     f012073a <test_bsd_nice_2+0xcc>
				panic("The program working set size is not correct\n");
f0120723:	83 ec 04             	sub    $0x4,%esp
f0120726:	68 84 f7 12 f0       	push   $0xf012f784
f012072b:	68 c3 00 00 00       	push   $0xc3
f0120730:	68 66 f7 12 f0       	push   $0xf012f766
f0120735:	e8 e0 fb fd ff       	call   f010031a <_panic>

			switch (nice_values[nice_index])
f012073a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012073d:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f0120741:	83 c0 0f             	add    $0xf,%eax
f0120744:	83 f8 1e             	cmp    $0x1e,%eax
f0120747:	0f 87 a5 00 00 00    	ja     f01207f2 <test_bsd_nice_2+0x184>
f012074d:	8b 04 85 14 fa 12 f0 	mov    -0xfed05ec(,%eax,4),%eax
f0120754:	ff e0                	jmp    *%eax
			{
			case -15:
				prog_orders[0][nice_count[0]++] = env->env_id;
f0120756:	a1 3c fc 59 f0       	mov    0xf059fc3c,%eax
f012075b:	8d 50 01             	lea    0x1(%eax),%edx
f012075e:	89 15 3c fc 59 f0    	mov    %edx,0xf059fc3c
f0120764:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0120767:	8b 52 10             	mov    0x10(%edx),%edx
f012076a:	89 14 85 80 52 5c f0 	mov    %edx,-0xfa3ad80(,%eax,4)
				break;
f0120771:	eb 7f                	jmp    f01207f2 <test_bsd_nice_2+0x184>
			case -5:
				prog_orders[1][nice_count[1]++] = env->env_id;
f0120773:	a1 40 fc 59 f0       	mov    0xf059fc40,%eax
f0120778:	8d 50 01             	lea    0x1(%eax),%edx
f012077b:	89 15 40 fc 59 f0    	mov    %edx,0xf059fc40
f0120781:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0120784:	8b 52 10             	mov    0x10(%edx),%edx
f0120787:	83 c0 0a             	add    $0xa,%eax
f012078a:	89 14 85 80 52 5c f0 	mov    %edx,-0xfa3ad80(,%eax,4)
				break;
f0120791:	eb 5f                	jmp    f01207f2 <test_bsd_nice_2+0x184>
			case 0:
				prog_orders[2][nice_count[2]++] = env->env_id;
f0120793:	a1 44 fc 59 f0       	mov    0xf059fc44,%eax
f0120798:	8d 50 01             	lea    0x1(%eax),%edx
f012079b:	89 15 44 fc 59 f0    	mov    %edx,0xf059fc44
f01207a1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01207a4:	8b 52 10             	mov    0x10(%edx),%edx
f01207a7:	83 c0 14             	add    $0x14,%eax
f01207aa:	89 14 85 80 52 5c f0 	mov    %edx,-0xfa3ad80(,%eax,4)
				break;
f01207b1:	eb 3f                	jmp    f01207f2 <test_bsd_nice_2+0x184>
			case 5:
				prog_orders[3][nice_count[3]++] = env->env_id;
f01207b3:	a1 48 fc 59 f0       	mov    0xf059fc48,%eax
f01207b8:	8d 50 01             	lea    0x1(%eax),%edx
f01207bb:	89 15 48 fc 59 f0    	mov    %edx,0xf059fc48
f01207c1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01207c4:	8b 52 10             	mov    0x10(%edx),%edx
f01207c7:	83 c0 1e             	add    $0x1e,%eax
f01207ca:	89 14 85 80 52 5c f0 	mov    %edx,-0xfa3ad80(,%eax,4)
				break;
f01207d1:	eb 1f                	jmp    f01207f2 <test_bsd_nice_2+0x184>
			case 15:
				prog_orders[4][nice_count[4]++] = env->env_id;
f01207d3:	a1 4c fc 59 f0       	mov    0xf059fc4c,%eax
f01207d8:	8d 50 01             	lea    0x1(%eax),%edx
f01207db:	89 15 4c fc 59 f0    	mov    %edx,0xf059fc4c
f01207e1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01207e4:	8b 52 10             	mov    0x10(%edx),%edx
f01207e7:	83 c0 28             	add    $0x28,%eax
f01207ea:	89 14 85 80 52 5c f0 	mov    %edx,-0xfa3ad80(,%eax,4)
				break;
f01207f1:	90                   	nop
			}
			sched_new_env(env);
f01207f2:	83 ec 0c             	sub    $0xc,%esp
f01207f5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01207f8:	e8 a8 4e fe ff       	call   f01056a5 <sched_new_env>
f01207fd:	83 c4 10             	add    $0x10,%esp
	if (firstTimeTestBSD)
	{
		chksch(1);
		firstTimeTestBSD = 0;
		int nice_values[] = {15, 5, 0, -5, -15};
		for (int i = 0; i < INSTANCES_NUMBER; i++)
f0120800:	ff 45 e4             	incl   -0x1c(%ebp)
f0120803:	83 7d e4 09          	cmpl   $0x9,-0x1c(%ebp)
f0120807:	0f 8e ac fe ff ff    	jle    f01206b9 <test_bsd_nice_2+0x4b>
				break;
			}
			sched_new_env(env);
		}
		// print_order(prog_orders);
		cprintf("> Running... (After all running programs finish, Run the same command again.)\n");
f012080d:	83 ec 0c             	sub    $0xc,%esp
f0120810:	68 b4 f7 12 f0       	push   $0xf012f7b4
f0120815:	e8 52 07 fe ff       	call   f0100f6c <cprintf>
f012081a:	83 c4 10             	add    $0x10,%esp
		execute_command("runall");
f012081d:	83 ec 0c             	sub    $0xc,%esp
f0120820:	68 03 f8 12 f0       	push   $0xf012f803
f0120825:	e8 b2 16 fe ff       	call   f0101edc <execute_command>
f012082a:	83 c4 10             	add    $0x10,%esp
f012082d:	e9 d0 00 00 00       	jmp    f0120902 <test_bsd_nice_2+0x294>
	}
	else
	{
		chksch(0);
f0120832:	83 ec 0c             	sub    $0xc,%esp
f0120835:	6a 00                	push   $0x0
f0120837:	e8 5f 0e 00 00       	call   f012169b <chksch>
f012083c:	83 c4 10             	add    $0x10,%esp
		cprintf("> Checking...\n");
f012083f:	83 ec 0c             	sub    $0xc,%esp
f0120842:	68 0a f8 12 f0       	push   $0xf012f80a
f0120847:	e8 20 07 fe ff       	call   f0100f6c <cprintf>
f012084c:	83 c4 10             	add    $0x10,%esp
		sched_print_all();
f012084f:	e8 cd 55 fe ff       	call   f0105e21 <sched_print_all>
		// print_order(prog_orders);
		int start_idx = 0;
f0120854:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		for (int i = 0; i < TOTAL_NICE_VALUES; i++)
f012085b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0120862:	e9 8a 00 00 00       	jmp    f01208f1 <test_bsd_nice_2+0x283>
		{
			for (int j = 0; prog_orders[i][j] != 0; j++)
f0120867:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012086e:	eb 55                	jmp    f01208c5 <test_bsd_nice_2+0x257>
			{
				int exist = find_in_range(prog_orders[i][j], start_idx, nice_count[i]);
f0120870:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120873:	8b 14 85 3c fc 59 f0 	mov    -0xfa603c4(,%eax,4),%edx
f012087a:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012087d:	89 c8                	mov    %ecx,%eax
f012087f:	c1 e0 02             	shl    $0x2,%eax
f0120882:	01 c8                	add    %ecx,%eax
f0120884:	01 c0                	add    %eax,%eax
f0120886:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f0120889:	01 c8                	add    %ecx,%eax
f012088b:	8b 04 85 80 52 5c f0 	mov    -0xfa3ad80(,%eax,4),%eax
f0120892:	83 ec 04             	sub    $0x4,%esp
f0120895:	52                   	push   %edx
f0120896:	ff 75 e0             	pushl  -0x20(%ebp)
f0120899:	50                   	push   %eax
f012089a:	e8 7f f8 ff ff       	call   f012011e <find_in_range>
f012089f:	83 c4 10             	add    $0x10,%esp
f01208a2:	89 45 cc             	mov    %eax,-0x34(%ebp)
				if (exist == -1)
f01208a5:	83 7d cc ff          	cmpl   $0xffffffff,-0x34(%ebp)
f01208a9:	75 17                	jne    f01208c2 <test_bsd_nice_2+0x254>
					panic("The programs' order of finishing is not correct\n");
f01208ab:	83 ec 04             	sub    $0x4,%esp
f01208ae:	68 1c f8 12 f0       	push   $0xf012f81c
f01208b3:	68 ea 00 00 00       	push   $0xea
f01208b8:	68 66 f7 12 f0       	push   $0xf012f766
f01208bd:	e8 58 fa fd ff       	call   f010031a <_panic>
		sched_print_all();
		// print_order(prog_orders);
		int start_idx = 0;
		for (int i = 0; i < TOTAL_NICE_VALUES; i++)
		{
			for (int j = 0; prog_orders[i][j] != 0; j++)
f01208c2:	ff 45 d8             	incl   -0x28(%ebp)
f01208c5:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01208c8:	89 d0                	mov    %edx,%eax
f01208ca:	c1 e0 02             	shl    $0x2,%eax
f01208cd:	01 d0                	add    %edx,%eax
f01208cf:	01 c0                	add    %eax,%eax
f01208d1:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01208d4:	01 d0                	add    %edx,%eax
f01208d6:	8b 04 85 80 52 5c f0 	mov    -0xfa3ad80(,%eax,4),%eax
f01208dd:	85 c0                	test   %eax,%eax
f01208df:	75 8f                	jne    f0120870 <test_bsd_nice_2+0x202>
			{
				int exist = find_in_range(prog_orders[i][j], start_idx, nice_count[i]);
				if (exist == -1)
					panic("The programs' order of finishing is not correct\n");
			}
			start_idx += nice_count[i];
f01208e1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01208e4:	8b 04 85 3c fc 59 f0 	mov    -0xfa603c4(,%eax,4),%eax
f01208eb:	01 45 e0             	add    %eax,-0x20(%ebp)
		chksch(0);
		cprintf("> Checking...\n");
		sched_print_all();
		// print_order(prog_orders);
		int start_idx = 0;
		for (int i = 0; i < TOTAL_NICE_VALUES; i++)
f01208ee:	ff 45 dc             	incl   -0x24(%ebp)
f01208f1:	83 7d dc 04          	cmpl   $0x4,-0x24(%ebp)
f01208f5:	0f 8e 6c ff ff ff    	jle    f0120867 <test_bsd_nice_2+0x1f9>
				if (exist == -1)
					panic("The programs' order of finishing is not correct\n");
			}
			start_idx += nice_count[i];
		}
		firstTimeTestBSD = 0;
f01208fb:	c6 05 dd ed 17 f0 00 	movb   $0x0,0xf017eddd
	}
	cprintf("\nCongratulations!! test_bsd_nice_2 completed successfully.\n");
f0120902:	83 ec 0c             	sub    $0xc,%esp
f0120905:	68 c4 f9 12 f0       	push   $0xf012f9c4
f012090a:	e8 5d 06 fe ff       	call   f0100f6c <cprintf>
f012090f:	83 c4 10             	add    $0x10,%esp
}
f0120912:	90                   	nop
f0120913:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0120916:	5b                   	pop    %ebx
f0120917:	5e                   	pop    %esi
f0120918:	5f                   	pop    %edi
f0120919:	5d                   	pop    %ebp
f012091a:	c3                   	ret    

f012091b <__mk_fix>:
fixed_point_t;

/* Returns a fixed-point number with F as its internal value. */
static inline fixed_point_t
__mk_fix (int f)
{
f012091b:	55                   	push   %ebp
f012091c:	89 e5                	mov    %esp,%ebp
f012091e:	83 ec 10             	sub    $0x10,%esp
  fixed_point_t x;
  x.f = f;
f0120921:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120924:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return x;
f0120927:	8b 45 08             	mov    0x8(%ebp),%eax
f012092a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012092d:	89 10                	mov    %edx,(%eax)
}
f012092f:	8b 45 08             	mov    0x8(%ebp),%eax
f0120932:	c9                   	leave  
f0120933:	c2 04 00             	ret    $0x4

f0120936 <fix_round>:
}

/* Returns X rounded to the nearest integer. */
static inline int
fix_round (fixed_point_t x)
{
f0120936:	55                   	push   %ebp
f0120937:	89 e5                	mov    %esp,%ebp
	if (x.f >= 0)
f0120939:	8b 45 08             	mov    0x8(%ebp),%eax
f012093c:	85 c0                	test   %eax,%eax
f012093e:	78 16                	js     f0120956 <fix_round+0x20>
		return (x.f + FIX_F / 2) / FIX_F;
f0120940:	8b 45 08             	mov    0x8(%ebp),%eax
f0120943:	05 00 20 00 00       	add    $0x2000,%eax
f0120948:	85 c0                	test   %eax,%eax
f012094a:	79 05                	jns    f0120951 <fix_round+0x1b>
f012094c:	05 ff 3f 00 00       	add    $0x3fff,%eax
f0120951:	c1 f8 0e             	sar    $0xe,%eax
f0120954:	eb 14                	jmp    f012096a <fix_round+0x34>
	else
		return (x.f - FIX_F / 2) / FIX_F;
f0120956:	8b 45 08             	mov    0x8(%ebp),%eax
f0120959:	2d 00 20 00 00       	sub    $0x2000,%eax
f012095e:	85 c0                	test   %eax,%eax
f0120960:	79 05                	jns    f0120967 <fix_round+0x31>
f0120962:	05 ff 3f 00 00       	add    $0x3fff,%eax
f0120967:	c1 f8 0e             	sar    $0xe,%eax
}
f012096a:	5d                   	pop    %ebp
f012096b:	c3                   	ret    

f012096c <fix_scale>:
}

/* Returns X * N. */
static inline fixed_point_t
fix_scale (fixed_point_t x, int n)
{
f012096c:	55                   	push   %ebp
f012096d:	89 e5                	mov    %esp,%ebp
f012096f:	83 ec 08             	sub    $0x8,%esp
	assert (n >= 0);
f0120972:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0120976:	79 16                	jns    f012098e <fix_scale+0x22>
f0120978:	68 90 fa 12 f0       	push   $0xf012fa90
f012097d:	68 97 fa 12 f0       	push   $0xf012fa97
f0120982:	6a 5a                	push   $0x5a
f0120984:	68 ac fa 12 f0       	push   $0xf012faac
f0120989:	e8 8c f9 fd ff       	call   f010031a <_panic>
  return __mk_fix (x.f * n);
f012098e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120991:	0f af 45 10          	imul   0x10(%ebp),%eax
f0120995:	89 c2                	mov    %eax,%edx
f0120997:	8b 45 08             	mov    0x8(%ebp),%eax
f012099a:	83 ec 08             	sub    $0x8,%esp
f012099d:	52                   	push   %edx
f012099e:	50                   	push   %eax
f012099f:	e8 77 ff ff ff       	call   f012091b <__mk_fix>
f01209a4:	83 c4 0c             	add    $0xc,%esp
}
f01209a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01209aa:	c9                   	leave  
f01209ab:	c2 04 00             	ret    $0x4

f01209ae <rsttst>:
#include "../cons/console.h"

#include <kern/trap/fault_handler.h>

void rsttst()
{
f01209ae:	55                   	push   %ebp
f01209af:	89 e5                	mov    %esp,%ebp
f01209b1:	83 ec 08             	sub    $0x8,%esp
	init_spinlock(&tstcntlock, "tstcnt lock");
f01209b4:	83 ec 08             	sub    $0x8,%esp
f01209b7:	68 c0 fa 12 f0       	push   $0xf012fac0
f01209bc:	68 a0 2b 5a f0       	push   $0xf05a2ba0
f01209c1:	e8 2a e1 fe ff       	call   f010eaf0 <init_spinlock>
f01209c6:	83 c4 10             	add    $0x10,%esp
	acquire_spinlock(&tstcntlock);
f01209c9:	83 ec 0c             	sub    $0xc,%esp
f01209cc:	68 a0 2b 5a f0       	push   $0xf05a2ba0
f01209d1:	e8 4b e1 fe ff       	call   f010eb21 <acquire_spinlock>
f01209d6:	83 c4 10             	add    $0x10,%esp
	{
		tstcnt = 0;
f01209d9:	c7 05 88 fd 59 f0 00 	movl   $0x0,0xf059fd88
f01209e0:	00 00 00 
	}
	release_spinlock(&tstcntlock);
f01209e3:	83 ec 0c             	sub    $0xc,%esp
f01209e6:	68 a0 2b 5a f0       	push   $0xf05a2ba0
f01209eb:	e8 b8 e1 fe ff       	call   f010eba8 <release_spinlock>
f01209f0:	83 c4 10             	add    $0x10,%esp
}
f01209f3:	90                   	nop
f01209f4:	c9                   	leave  
f01209f5:	c3                   	ret    

f01209f6 <inctst>:
void inctst()
{
f01209f6:	55                   	push   %ebp
f01209f7:	89 e5                	mov    %esp,%ebp
f01209f9:	83 ec 08             	sub    $0x8,%esp
	acquire_spinlock(&tstcntlock);
f01209fc:	83 ec 0c             	sub    $0xc,%esp
f01209ff:	68 a0 2b 5a f0       	push   $0xf05a2ba0
f0120a04:	e8 18 e1 fe ff       	call   f010eb21 <acquire_spinlock>
f0120a09:	83 c4 10             	add    $0x10,%esp
	{
		tstcnt++;
f0120a0c:	a1 88 fd 59 f0       	mov    0xf059fd88,%eax
f0120a11:	40                   	inc    %eax
f0120a12:	a3 88 fd 59 f0       	mov    %eax,0xf059fd88
	}
	release_spinlock(&tstcntlock);
f0120a17:	83 ec 0c             	sub    $0xc,%esp
f0120a1a:	68 a0 2b 5a f0       	push   $0xf05a2ba0
f0120a1f:	e8 84 e1 fe ff       	call   f010eba8 <release_spinlock>
f0120a24:	83 c4 10             	add    $0x10,%esp
}
f0120a27:	90                   	nop
f0120a28:	c9                   	leave  
f0120a29:	c3                   	ret    

f0120a2a <gettst>:
uint32 gettst()
{
f0120a2a:	55                   	push   %ebp
f0120a2b:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f0120a2d:	a1 88 fd 59 f0       	mov    0xf059fd88,%eax
}
f0120a32:	5d                   	pop    %ebp
f0120a33:	c3                   	ret    

f0120a34 <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f0120a34:	55                   	push   %ebp
f0120a35:	89 e5                	mov    %esp,%ebp
f0120a37:	83 ec 28             	sub    $0x28,%esp
f0120a3a:	8b 45 14             	mov    0x14(%ebp),%eax
f0120a3d:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f0120a40:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f0120a47:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f0120a4b:	83 f8 65             	cmp    $0x65,%eax
f0120a4e:	74 5d                	je     f0120aad <tst+0x79>
f0120a50:	83 f8 65             	cmp    $0x65,%eax
f0120a53:	7f 0a                	jg     f0120a5f <tst+0x2b>
f0120a55:	83 f8 62             	cmp    $0x62,%eax
f0120a58:	74 73                	je     f0120acd <tst+0x99>
f0120a5a:	e9 91 00 00 00       	jmp    f0120af0 <tst+0xbc>
f0120a5f:	83 f8 67             	cmp    $0x67,%eax
f0120a62:	74 29                	je     f0120a8d <tst+0x59>
f0120a64:	83 f8 6c             	cmp    $0x6c,%eax
f0120a67:	0f 85 83 00 00 00    	jne    f0120af0 <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f0120a6d:	8b 45 08             	mov    0x8(%ebp),%eax
f0120a70:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0120a73:	73 09                	jae    f0120a7e <tst+0x4a>
			chk = 1;
f0120a75:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f0120a7c:	eb 68                	jmp    f0120ae6 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f0120a7e:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f0120a82:	74 62                	je     f0120ae6 <tst+0xb2>
			chk = 1;
f0120a84:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f0120a8b:	eb 59                	jmp    f0120ae6 <tst+0xb2>
	case 'g':
		if (n > v1)
f0120a8d:	8b 45 08             	mov    0x8(%ebp),%eax
f0120a90:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0120a93:	76 09                	jbe    f0120a9e <tst+0x6a>
			chk = 1;
f0120a95:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f0120a9c:	eb 4b                	jmp    f0120ae9 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f0120a9e:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f0120aa2:	74 45                	je     f0120ae9 <tst+0xb5>
			chk = 1;
f0120aa4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f0120aab:	eb 3c                	jmp    f0120ae9 <tst+0xb5>
	case 'e':
		if (n == v1)
f0120aad:	8b 45 08             	mov    0x8(%ebp),%eax
f0120ab0:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0120ab3:	75 09                	jne    f0120abe <tst+0x8a>
			chk = 1;
f0120ab5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f0120abc:	eb 2e                	jmp    f0120aec <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f0120abe:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f0120ac2:	74 28                	je     f0120aec <tst+0xb8>
			chk = 1;
f0120ac4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f0120acb:	eb 1f                	jmp    f0120aec <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v2)
f0120acd:	8b 45 08             	mov    0x8(%ebp),%eax
f0120ad0:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0120ad3:	72 1a                	jb     f0120aef <tst+0xbb>
f0120ad5:	8b 45 08             	mov    0x8(%ebp),%eax
f0120ad8:	3b 45 10             	cmp    0x10(%ebp),%eax
f0120adb:	77 12                	ja     f0120aef <tst+0xbb>
			chk = 1;
f0120add:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f0120ae4:	eb 09                	jmp    f0120aef <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f0120ae6:	90                   	nop
f0120ae7:	eb 07                	jmp    f0120af0 <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f0120ae9:	90                   	nop
f0120aea:	eb 04                	jmp    f0120af0 <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f0120aec:	90                   	nop
f0120aed:	eb 01                	jmp    f0120af0 <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v2)
			chk = 1;
		break;
f0120aef:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f0120af0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0120af4:	75 14                	jne    f0120b0a <tst+0xd6>
f0120af6:	83 ec 04             	sub    $0x4,%esp
f0120af9:	68 cc fa 12 f0       	push   $0xf012facc
f0120afe:	6a 48                	push   $0x48
f0120b00:	68 df fa 12 f0       	push   $0xf012fadf
f0120b05:	e8 10 f8 fd ff       	call   f010031a <_panic>

	acquire_spinlock(&tstcntlock);
f0120b0a:	83 ec 0c             	sub    $0xc,%esp
f0120b0d:	68 a0 2b 5a f0       	push   $0xf05a2ba0
f0120b12:	e8 0a e0 fe ff       	call   f010eb21 <acquire_spinlock>
f0120b17:	83 c4 10             	add    $0x10,%esp
	{
		tstcnt++ ;
f0120b1a:	a1 88 fd 59 f0       	mov    0xf059fd88,%eax
f0120b1f:	40                   	inc    %eax
f0120b20:	a3 88 fd 59 f0       	mov    %eax,0xf059fd88
	}
	release_spinlock(&tstcntlock);
f0120b25:	83 ec 0c             	sub    $0xc,%esp
f0120b28:	68 a0 2b 5a f0       	push   $0xf05a2ba0
f0120b2d:	e8 76 e0 fe ff       	call   f010eba8 <release_spinlock>
f0120b32:	83 c4 10             	add    $0x10,%esp

	return;
f0120b35:	90                   	nop
}
f0120b36:	c9                   	leave  
f0120b37:	c3                   	ret    

f0120b38 <chktst>:

void chktst(uint32 n)
{
f0120b38:	55                   	push   %ebp
f0120b39:	89 e5                	mov    %esp,%ebp
f0120b3b:	83 ec 18             	sub    $0x18,%esp
	int __tstcnt;
	acquire_spinlock(&tstcntlock);
f0120b3e:	83 ec 0c             	sub    $0xc,%esp
f0120b41:	68 a0 2b 5a f0       	push   $0xf05a2ba0
f0120b46:	e8 d6 df fe ff       	call   f010eb21 <acquire_spinlock>
f0120b4b:	83 c4 10             	add    $0x10,%esp
	{
		__tstcnt = tstcnt;
f0120b4e:	a1 88 fd 59 f0       	mov    0xf059fd88,%eax
f0120b53:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}
	release_spinlock(&tstcntlock);
f0120b56:	83 ec 0c             	sub    $0xc,%esp
f0120b59:	68 a0 2b 5a f0       	push   $0xf05a2ba0
f0120b5e:	e8 45 e0 fe ff       	call   f010eba8 <release_spinlock>
f0120b63:	83 c4 10             	add    $0x10,%esp
	if (__tstcnt == n)
f0120b66:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120b69:	3b 45 08             	cmp    0x8(%ebp),%eax
f0120b6c:	75 12                	jne    f0120b80 <chktst+0x48>
		cprintf("\nCongratulations... test runs successfully\n");
f0120b6e:	83 ec 0c             	sub    $0xc,%esp
f0120b71:	68 f8 fa 12 f0       	push   $0xf012faf8
f0120b76:	e8 f1 03 fe ff       	call   f0100f6c <cprintf>
f0120b7b:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f0120b7e:	eb 14                	jmp    f0120b94 <chktst+0x5c>
	}
	release_spinlock(&tstcntlock);
	if (__tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f0120b80:	83 ec 04             	sub    $0x4,%esp
f0120b83:	68 24 fb 12 f0       	push   $0xf012fb24
f0120b88:	6a 5e                	push   $0x5e
f0120b8a:	68 df fa 12 f0       	push   $0xf012fadf
f0120b8f:	e8 86 f7 fd ff       	call   f010031a <_panic>
}
f0120b94:	c9                   	leave  
f0120b95:	c3                   	ret    

f0120b96 <nearest_pow2_ceil>:

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f0120b96:	55                   	push   %ebp
f0120b97:	89 e5                	mov    %esp,%ebp
f0120b99:	83 ec 10             	sub    $0x10,%esp
	if (x <= 1) return 1;
f0120b9c:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0120ba0:	77 07                	ja     f0120ba9 <nearest_pow2_ceil+0x13>
f0120ba2:	b8 01 00 00 00       	mov    $0x1,%eax
f0120ba7:	eb 20                	jmp    f0120bc9 <nearest_pow2_ceil+0x33>
	int power = 2;
f0120ba9:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
	x--;
f0120bb0:	ff 4d 08             	decl   0x8(%ebp)
	while (x >>= 1) {
f0120bb3:	eb 08                	jmp    f0120bbd <nearest_pow2_ceil+0x27>
		power <<= 1;
f0120bb5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0120bb8:	01 c0                	add    %eax,%eax
f0120bba:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
	if (x <= 1) return 1;
	int power = 2;
	x--;
	while (x >>= 1) {
f0120bbd:	d1 6d 08             	shrl   0x8(%ebp)
f0120bc0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0120bc4:	75 ef                	jne    f0120bb5 <nearest_pow2_ceil+0x1f>
		power <<= 1;
	}
	return power;
f0120bc6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0120bc9:	c9                   	leave  
f0120bca:	c3                   	ret    

f0120bcb <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f0120bcb:	55                   	push   %ebp
f0120bcc:	89 e5                	mov    %esp,%ebp
f0120bce:	83 ec 10             	sub    $0x10,%esp
	if (x <= 1) return 1;
f0120bd1:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0120bd5:	77 07                	ja     f0120bde <log2_ceil+0x13>
f0120bd7:	b8 01 00 00 00       	mov    $0x1,%eax
f0120bdc:	eb 1b                	jmp    f0120bf9 <log2_ceil+0x2e>
	//int power = 2;
	int bits_cnt = 2 ;
f0120bde:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
	x--;
f0120be5:	ff 4d 08             	decl   0x8(%ebp)
	while (x >>= 1) {
f0120be8:	eb 03                	jmp    f0120bed <log2_ceil+0x22>
		//power <<= 1;
		bits_cnt++ ;
f0120bea:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
	if (x <= 1) return 1;
	//int power = 2;
	int bits_cnt = 2 ;
	x--;
	while (x >>= 1) {
f0120bed:	d1 6d 08             	shrl   0x8(%ebp)
f0120bf0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0120bf4:	75 f4                	jne    f0120bea <log2_ceil+0x1f>
		//power <<= 1;
		bits_cnt++ ;
	}
	return bits_cnt;
f0120bf6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0120bf9:	c9                   	leave  
f0120bfa:	c3                   	ret    

f0120bfb <fixedPt2Str>:

/*2023*/
void fixedPt2Str(fixed_point_t f, int num_dec_digits, char* output)
{
f0120bfb:	55                   	push   %ebp
f0120bfc:	89 e5                	mov    %esp,%ebp
f0120bfe:	83 ec 78             	sub    $0x78,%esp
	int mulFactor = 1;
f0120c01:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	for (int i = 0; i < num_dec_digits; ++i) {
f0120c08:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0120c0f:	eb 12                	jmp    f0120c23 <fixedPt2Str+0x28>
		mulFactor *= 10;
f0120c11:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120c14:	89 d0                	mov    %edx,%eax
f0120c16:	c1 e0 02             	shl    $0x2,%eax
f0120c19:	01 d0                	add    %edx,%eax
f0120c1b:	01 c0                	add    %eax,%eax
f0120c1d:	89 45 f4             	mov    %eax,-0xc(%ebp)

/*2023*/
void fixedPt2Str(fixed_point_t f, int num_dec_digits, char* output)
{
	int mulFactor = 1;
	for (int i = 0; i < num_dec_digits; ++i) {
f0120c20:	ff 45 f0             	incl   -0x10(%ebp)
f0120c23:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0120c26:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0120c29:	7c e6                	jl     f0120c11 <fixedPt2Str+0x16>
		mulFactor *= 10;
	}
	int scaledVal = fix_round(fix_scale(f, mulFactor)) ;
f0120c2b:	8d 45 dc             	lea    -0x24(%ebp),%eax
f0120c2e:	83 ec 04             	sub    $0x4,%esp
f0120c31:	ff 75 f4             	pushl  -0xc(%ebp)
f0120c34:	ff 75 08             	pushl  0x8(%ebp)
f0120c37:	50                   	push   %eax
f0120c38:	e8 2f fd ff ff       	call   f012096c <fix_scale>
f0120c3d:	83 c4 0c             	add    $0xc,%esp
f0120c40:	83 ec 0c             	sub    $0xc,%esp
f0120c43:	ff 75 dc             	pushl  -0x24(%ebp)
f0120c46:	e8 eb fc ff ff       	call   f0120936 <fix_round>
f0120c4b:	83 c4 10             	add    $0x10,%esp
f0120c4e:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int integer = scaledVal/mulFactor;
f0120c51:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0120c54:	99                   	cltd   
f0120c55:	f7 7d f4             	idivl  -0xc(%ebp)
f0120c58:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	int fraction = scaledVal%mulFactor;
f0120c5b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0120c5e:	99                   	cltd   
f0120c5f:	f7 7d f4             	idivl  -0xc(%ebp)
f0120c62:	89 55 e0             	mov    %edx,-0x20(%ebp)
	char intPart[20] ; ltostr(integer, intPart);
f0120c65:	83 ec 08             	sub    $0x8,%esp
f0120c68:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0120c6b:	50                   	push   %eax
f0120c6c:	ff 75 e4             	pushl  -0x1c(%ebp)
f0120c6f:	e8 70 1d 00 00       	call   f01229e4 <ltostr>
f0120c74:	83 c4 10             	add    $0x10,%esp
	char fractPart[20] ; ltostr(fraction, fractPart);
f0120c77:	83 ec 08             	sub    $0x8,%esp
f0120c7a:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0120c7d:	50                   	push   %eax
f0120c7e:	ff 75 e0             	pushl  -0x20(%ebp)
f0120c81:	e8 5e 1d 00 00       	call   f01229e4 <ltostr>
f0120c86:	83 c4 10             	add    $0x10,%esp
	int tmp = mulFactor / 10;
f0120c89:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120c8c:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0120c91:	f7 e9                	imul   %ecx
f0120c93:	c1 fa 02             	sar    $0x2,%edx
f0120c96:	89 c8                	mov    %ecx,%eax
f0120c98:	c1 f8 1f             	sar    $0x1f,%eax
f0120c9b:	29 c2                	sub    %eax,%edx
f0120c9d:	89 d0                	mov    %edx,%eax
f0120c9f:	89 45 ec             	mov    %eax,-0x14(%ebp)

	char zeros[10] = "";
f0120ca2:	c7 45 aa 00 00 00 00 	movl   $0x0,-0x56(%ebp)
f0120ca9:	c7 45 ae 00 00 00 00 	movl   $0x0,-0x52(%ebp)
f0120cb0:	66 c7 45 b2 00 00    	movw   $0x0,-0x4e(%ebp)
	while (fraction < tmp)
f0120cb6:	eb 31                	jmp    f0120ce9 <fixedPt2Str+0xee>
	{
		strcconcat("0", zeros, zeros);
f0120cb8:	83 ec 04             	sub    $0x4,%esp
f0120cbb:	8d 45 aa             	lea    -0x56(%ebp),%eax
f0120cbe:	50                   	push   %eax
f0120cbf:	8d 45 aa             	lea    -0x56(%ebp),%eax
f0120cc2:	50                   	push   %eax
f0120cc3:	68 40 fb 12 f0       	push   $0xf012fb40
f0120cc8:	e8 f0 1d 00 00       	call   f0122abd <strcconcat>
f0120ccd:	83 c4 10             	add    $0x10,%esp
		tmp /= 10;
f0120cd0:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0120cd3:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0120cd8:	f7 e9                	imul   %ecx
f0120cda:	c1 fa 02             	sar    $0x2,%edx
f0120cdd:	89 c8                	mov    %ecx,%eax
f0120cdf:	c1 f8 1f             	sar    $0x1f,%eax
f0120ce2:	29 c2                	sub    %eax,%edx
f0120ce4:	89 d0                	mov    %edx,%eax
f0120ce6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	char intPart[20] ; ltostr(integer, intPart);
	char fractPart[20] ; ltostr(fraction, fractPart);
	int tmp = mulFactor / 10;

	char zeros[10] = "";
	while (fraction < tmp)
f0120ce9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0120cec:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0120cef:	7c c7                	jl     f0120cb8 <fixedPt2Str+0xbd>
	{
		strcconcat("0", zeros, zeros);
		tmp /= 10;
	}
	char fractPart2[20];
	strcconcat(zeros, fractPart, fractPart2);
f0120cf1:	83 ec 04             	sub    $0x4,%esp
f0120cf4:	8d 45 96             	lea    -0x6a(%ebp),%eax
f0120cf7:	50                   	push   %eax
f0120cf8:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0120cfb:	50                   	push   %eax
f0120cfc:	8d 45 aa             	lea    -0x56(%ebp),%eax
f0120cff:	50                   	push   %eax
f0120d00:	e8 b8 1d 00 00       	call   f0122abd <strcconcat>
f0120d05:	83 c4 10             	add    $0x10,%esp

	//cprintf("integer = %d, intPart = %s - fraction = %d, fractPart = %s\n", integer, intPart, fraction , fractPart2);
	strcconcat(intPart, ".", intPart);
f0120d08:	83 ec 04             	sub    $0x4,%esp
f0120d0b:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0120d0e:	50                   	push   %eax
f0120d0f:	68 42 fb 12 f0       	push   $0xf012fb42
f0120d14:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0120d17:	50                   	push   %eax
f0120d18:	e8 a0 1d 00 00       	call   f0122abd <strcconcat>
f0120d1d:	83 c4 10             	add    $0x10,%esp
	strcconcat(intPart, fractPart2, output);
f0120d20:	83 ec 04             	sub    $0x4,%esp
f0120d23:	ff 75 10             	pushl  0x10(%ebp)
f0120d26:	8d 45 96             	lea    -0x6a(%ebp),%eax
f0120d29:	50                   	push   %eax
f0120d2a:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0120d2d:	50                   	push   %eax
f0120d2e:	e8 8a 1d 00 00       	call   f0122abd <strcconcat>
f0120d33:	83 c4 10             	add    $0x10,%esp

}
f0120d36:	90                   	nop
f0120d37:	c9                   	leave  
f0120d38:	c3                   	ret    

f0120d39 <sys_utilities>:

int __firstTimeSleep = 1;
struct Channel __tstchan__ ;
struct spinlock __tstchan_lk__;
void sys_utilities(char* utilityName, int value)
{
f0120d39:	55                   	push   %ebp
f0120d3a:	89 e5                	mov    %esp,%ebp
f0120d3c:	81 ec 88 00 00 00    	sub    $0x88,%esp
	if (strncmp(utilityName, "__BSDSetNice@", strlen("__BSDSetNice@")) == 0)
f0120d42:	83 ec 0c             	sub    $0xc,%esp
f0120d45:	68 44 fb 12 f0       	push   $0xf012fb44
f0120d4a:	e8 ef 17 00 00       	call   f012253e <strlen>
f0120d4f:	83 c4 10             	add    $0x10,%esp
f0120d52:	83 ec 04             	sub    $0x4,%esp
f0120d55:	50                   	push   %eax
f0120d56:	68 44 fb 12 f0       	push   $0xf012fb44
f0120d5b:	ff 75 08             	pushl  0x8(%ebp)
f0120d5e:	e8 1f 19 00 00       	call   f0122682 <strncmp>
f0120d63:	83 c4 10             	add    $0x10,%esp
f0120d66:	85 c0                	test   %eax,%eax
f0120d68:	0f 85 84 00 00 00    	jne    f0120df2 <sys_utilities+0xb9>
	{
		int number_of_tokens;
		//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
		char *tokens[MAX_ARGUMENTS];
		strsplit(utilityName, "@", tokens, &number_of_tokens) ;
f0120d6e:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0120d71:	50                   	push   %eax
f0120d72:	8d 45 80             	lea    -0x80(%ebp),%eax
f0120d75:	50                   	push   %eax
f0120d76:	68 52 fb 12 f0       	push   $0xf012fb52
f0120d7b:	ff 75 08             	pushl  0x8(%ebp)
f0120d7e:	e8 d0 1d 00 00       	call   f0122b53 <strsplit>
f0120d83:	83 c4 10             	add    $0x10,%esp
		int envID = strtol(tokens[1], NULL, 10);
f0120d86:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0120d89:	83 ec 04             	sub    $0x4,%esp
f0120d8c:	6a 0a                	push   $0xa
f0120d8e:	6a 00                	push   $0x0
f0120d90:	50                   	push   %eax
f0120d91:	e8 08 1b 00 00       	call   f012289e <strtol>
f0120d96:	83 c4 10             	add    $0x10,%esp
f0120d99:	89 45 e0             	mov    %eax,-0x20(%ebp)
		struct Env* env = NULL ;
f0120d9c:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		envid2env(envID, &env, 0);
f0120da3:	83 ec 04             	sub    $0x4,%esp
f0120da6:	6a 00                	push   $0x0
f0120da8:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f0120dab:	50                   	push   %eax
f0120dac:	ff 75 e0             	pushl  -0x20(%ebp)
f0120daf:	e8 0c 9a fe ff       	call   f010a7c0 <envid2env>
f0120db4:	83 c4 10             	add    $0x10,%esp
		assert(env->env_id == envID) ;
f0120db7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0120dba:	8b 40 10             	mov    0x10(%eax),%eax
f0120dbd:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0120dc0:	74 19                	je     f0120ddb <sys_utilities+0xa2>
f0120dc2:	68 54 fb 12 f0       	push   $0xf012fb54
f0120dc7:	68 97 fa 12 f0       	push   $0xf012fa97
f0120dcc:	68 a1 00 00 00       	push   $0xa1
f0120dd1:	68 df fa 12 f0       	push   $0xf012fadf
f0120dd6:	e8 3f f5 fd ff       	call   f010031a <_panic>
		env_set_nice(env, value);
f0120ddb:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0120dde:	83 ec 08             	sub    $0x8,%esp
f0120de1:	ff 75 0c             	pushl  0xc(%ebp)
f0120de4:	50                   	push   %eax
f0120de5:	e8 bd 58 fe ff       	call   f01066a7 <env_set_nice>
f0120dea:	83 c4 10             	add    $0x10,%esp
f0120ded:	e9 00 03 00 00       	jmp    f01210f2 <sys_utilities+0x3b9>
	}
	else if (strncmp(utilityName, "__CheckExitOrder@", strlen("__CheckExitOrder@")) == 0)
f0120df2:	83 ec 0c             	sub    $0xc,%esp
f0120df5:	68 69 fb 12 f0       	push   $0xf012fb69
f0120dfa:	e8 3f 17 00 00       	call   f012253e <strlen>
f0120dff:	83 c4 10             	add    $0x10,%esp
f0120e02:	83 ec 04             	sub    $0x4,%esp
f0120e05:	50                   	push   %eax
f0120e06:	68 69 fb 12 f0       	push   $0xf012fb69
f0120e0b:	ff 75 08             	pushl  0x8(%ebp)
f0120e0e:	e8 6f 18 00 00       	call   f0122682 <strncmp>
f0120e13:	83 c4 10             	add    $0x10,%esp
f0120e16:	85 c0                	test   %eax,%eax
f0120e18:	0f 85 a0 01 00 00    	jne    f0120fbe <sys_utilities+0x285>
	{
		int* numOfInstances = (int*) value ;
f0120e1e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120e21:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int number_of_tokens;
		//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
		char *tokens[MAX_ARGUMENTS];
		strsplit(utilityName, "@", tokens, &number_of_tokens) ;
f0120e24:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0120e27:	50                   	push   %eax
f0120e28:	8d 45 80             	lea    -0x80(%ebp),%eax
f0120e2b:	50                   	push   %eax
f0120e2c:	68 52 fb 12 f0       	push   $0xf012fb52
f0120e31:	ff 75 08             	pushl  0x8(%ebp)
f0120e34:	e8 1a 1d 00 00       	call   f0122b53 <strsplit>
f0120e39:	83 c4 10             	add    $0x10,%esp
		char *progName = tokens[1];
f0120e3c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0120e3f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		struct Env* env = NULL ;
f0120e42:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		bool chkAscending = 1;
f0120e49:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		int prevEnvID = -1 ;
f0120e50:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)

		if (*numOfInstances < 0)
f0120e57:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120e5a:	8b 00                	mov    (%eax),%eax
f0120e5c:	85 c0                	test   %eax,%eax
f0120e5e:	79 1c                	jns    f0120e7c <sys_utilities+0x143>
		{
			chkAscending = 0;
f0120e60:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			*numOfInstances *= -1;
f0120e67:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120e6a:	8b 00                	mov    (%eax),%eax
f0120e6c:	f7 d8                	neg    %eax
f0120e6e:	89 c2                	mov    %eax,%edx
f0120e70:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120e73:	89 10                	mov    %edx,(%eax)
			prevEnvID = 1<<30 ;
f0120e75:	c7 45 ec 00 00 00 40 	movl   $0x40000000,-0x14(%ebp)
		}
		bool success = 1;
f0120e7c:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)

		acquire_spinlock(&ProcessQueues.qlock);
f0120e83:	83 ec 0c             	sub    $0xc,%esp
f0120e86:	68 00 fe 59 f0       	push   $0xf059fe00
f0120e8b:	e8 91 dc fe ff       	call   f010eb21 <acquire_spinlock>
f0120e90:	83 c4 10             	add    $0x10,%esp
		{
			//REVERSE LOOP ON EXIT LIST (to be the same as the queue order)
			int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
f0120e93:	a1 8c fe 59 f0       	mov    0xf059fe8c,%eax
f0120e98:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			env = LIST_LAST(&ProcessQueues.env_exit_queue);
f0120e9b:	a1 84 fe 59 f0       	mov    0xf059fe84,%eax
f0120ea0:	89 45 f4             	mov    %eax,-0xc(%ebp)
			for (int i = numOfExitEnvs; i > 0; --i, env = LIST_PREV(env))
f0120ea3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0120ea6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0120ea9:	eb 6c                	jmp    f0120f17 <sys_utilities+0x1de>
			{
				if (strcmp(env->prog_name, progName) != 0)
f0120eab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120eae:	83 c0 20             	add    $0x20,%eax
f0120eb1:	83 ec 08             	sub    $0x8,%esp
f0120eb4:	ff 75 d8             	pushl  -0x28(%ebp)
f0120eb7:	50                   	push   %eax
f0120eb8:	e8 8d 17 00 00       	call   f012264a <strcmp>
f0120ebd:	83 c4 10             	add    $0x10,%esp
f0120ec0:	85 c0                	test   %eax,%eax
f0120ec2:	75 46                	jne    f0120f0a <sys_utilities+0x1d1>
					continue;
				(*numOfInstances)-- ;
f0120ec4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120ec7:	8b 00                	mov    (%eax),%eax
f0120ec9:	8d 50 ff             	lea    -0x1(%eax),%edx
f0120ecc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120ecf:	89 10                	mov    %edx,(%eax)

				//cprintf("%s: prevID = %d, nextID = %d\n", progName, prevEnvID, env->env_id);
				if (chkAscending)
f0120ed1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0120ed5:	74 14                	je     f0120eeb <sys_utilities+0x1b2>
				{
					if (prevEnvID > env->env_id)
f0120ed7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120eda:	8b 40 10             	mov    0x10(%eax),%eax
f0120edd:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0120ee0:	7d 1d                	jge    f0120eff <sys_utilities+0x1c6>
					{
						success = 0;
f0120ee2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
						break;
f0120ee9:	eb 32                	jmp    f0120f1d <sys_utilities+0x1e4>
					}
				}
				else
				{
					if (prevEnvID < env->env_id)
f0120eeb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120eee:	8b 40 10             	mov    0x10(%eax),%eax
f0120ef1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0120ef4:	7e 09                	jle    f0120eff <sys_utilities+0x1c6>
					{
						success = 0;
f0120ef6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
						break;
f0120efd:	eb 1e                	jmp    f0120f1d <sys_utilities+0x1e4>
					}
				}
				prevEnvID = env->env_id;
f0120eff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120f02:	8b 40 10             	mov    0x10(%eax),%eax
f0120f05:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0120f08:	eb 01                	jmp    f0120f0b <sys_utilities+0x1d2>
			int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
			env = LIST_LAST(&ProcessQueues.env_exit_queue);
			for (int i = numOfExitEnvs; i > 0; --i, env = LIST_PREV(env))
			{
				if (strcmp(env->prog_name, progName) != 0)
					continue;
f0120f0a:	90                   	nop
		acquire_spinlock(&ProcessQueues.qlock);
		{
			//REVERSE LOOP ON EXIT LIST (to be the same as the queue order)
			int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
			env = LIST_LAST(&ProcessQueues.env_exit_queue);
			for (int i = numOfExitEnvs; i > 0; --i, env = LIST_PREV(env))
f0120f0b:	ff 4d e4             	decl   -0x1c(%ebp)
f0120f0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120f11:	8b 40 0c             	mov    0xc(%eax),%eax
f0120f14:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0120f17:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0120f1b:	7f 8e                	jg     f0120eab <sys_utilities+0x172>
					}
				}
				prevEnvID = env->env_id;
			}
		}
		release_spinlock(&ProcessQueues.qlock);
f0120f1d:	83 ec 0c             	sub    $0xc,%esp
f0120f20:	68 00 fe 59 f0       	push   $0xf059fe00
f0120f25:	e8 7e dc fe ff       	call   f010eba8 <release_spinlock>
f0120f2a:	83 c4 10             	add    $0x10,%esp
		if (*numOfInstances != 0 || success == 0)
f0120f2d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120f30:	8b 00                	mov    (%eax),%eax
f0120f32:	85 c0                	test   %eax,%eax
f0120f34:	75 06                	jne    f0120f3c <sys_utilities+0x203>
f0120f36:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0120f3a:	75 41                	jne    f0120f7d <sys_utilities+0x244>
		{
			cprintf("###########################################\n");
f0120f3c:	83 ec 0c             	sub    $0xc,%esp
f0120f3f:	68 7c fb 12 f0       	push   $0xf012fb7c
f0120f44:	e8 23 00 fe ff       	call   f0100f6c <cprintf>
f0120f49:	83 c4 10             	add    $0x10,%esp
			cprintf("%s: check exit order is FAILED\n", progName);
f0120f4c:	83 ec 08             	sub    $0x8,%esp
f0120f4f:	ff 75 d8             	pushl  -0x28(%ebp)
f0120f52:	68 ac fb 12 f0       	push   $0xf012fbac
f0120f57:	e8 10 00 fe ff       	call   f0100f6c <cprintf>
f0120f5c:	83 c4 10             	add    $0x10,%esp
			cprintf("###########################################\n");
f0120f5f:	83 ec 0c             	sub    $0xc,%esp
f0120f62:	68 7c fb 12 f0       	push   $0xf012fb7c
f0120f67:	e8 00 00 fe ff       	call   f0100f6c <cprintf>
f0120f6c:	83 c4 10             	add    $0x10,%esp
			*numOfInstances = 0; //to indicate the failure of test
f0120f6f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120f72:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0120f78:	e9 75 01 00 00       	jmp    f01210f2 <sys_utilities+0x3b9>
		}
		else
		{
			cprintf("####################################################\n");
f0120f7d:	83 ec 0c             	sub    $0xc,%esp
f0120f80:	68 cc fb 12 f0       	push   $0xf012fbcc
f0120f85:	e8 e2 ff fd ff       	call   f0100f6c <cprintf>
f0120f8a:	83 c4 10             	add    $0x10,%esp
			cprintf("%s: check exit order is SUCCEEDED\n", progName);
f0120f8d:	83 ec 08             	sub    $0x8,%esp
f0120f90:	ff 75 d8             	pushl  -0x28(%ebp)
f0120f93:	68 04 fc 12 f0       	push   $0xf012fc04
f0120f98:	e8 cf ff fd ff       	call   f0100f6c <cprintf>
f0120f9d:	83 c4 10             	add    $0x10,%esp
			cprintf("####################################################\n");
f0120fa0:	83 ec 0c             	sub    $0xc,%esp
f0120fa3:	68 cc fb 12 f0       	push   $0xf012fbcc
f0120fa8:	e8 bf ff fd ff       	call   f0100f6c <cprintf>
f0120fad:	83 c4 10             	add    $0x10,%esp
			*numOfInstances = 1; //to indicate the success of test
f0120fb0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120fb3:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
f0120fb9:	e9 34 01 00 00       	jmp    f01210f2 <sys_utilities+0x3b9>
		}
	}
	else if (strcmp(utilityName, "__Sleep__") == 0)
f0120fbe:	83 ec 08             	sub    $0x8,%esp
f0120fc1:	68 27 fc 12 f0       	push   $0xf012fc27
f0120fc6:	ff 75 08             	pushl  0x8(%ebp)
f0120fc9:	e8 7c 16 00 00       	call   f012264a <strcmp>
f0120fce:	83 c4 10             	add    $0x10,%esp
f0120fd1:	85 c0                	test   %eax,%eax
f0120fd3:	75 77                	jne    f012104c <sys_utilities+0x313>
	{
		if (__firstTimeSleep)
f0120fd5:	a1 e0 ed 17 f0       	mov    0xf017ede0,%eax
f0120fda:	85 c0                	test   %eax,%eax
f0120fdc:	74 34                	je     f0121012 <sys_utilities+0x2d9>
		{
			__firstTimeSleep = 0;
f0120fde:	c7 05 e0 ed 17 f0 00 	movl   $0x0,0xf017ede0
f0120fe5:	00 00 00 
			init_channel(&__tstchan__, "Test Channel");
f0120fe8:	83 ec 08             	sub    $0x8,%esp
f0120feb:	68 31 fc 12 f0       	push   $0xf012fc31
f0120ff0:	68 60 53 5c f0       	push   $0xf05c5360
f0120ff5:	e8 e7 de fe ff       	call   f010eee1 <init_channel>
f0120ffa:	83 c4 10             	add    $0x10,%esp
			init_spinlock(&__tstchan_lk__, "Test Channel Lock");
f0120ffd:	83 ec 08             	sub    $0x8,%esp
f0121000:	68 3e fc 12 f0       	push   $0xf012fc3e
f0121005:	68 c0 53 5c f0       	push   $0xf05c53c0
f012100a:	e8 e1 da fe ff       	call   f010eaf0 <init_spinlock>
f012100f:	83 c4 10             	add    $0x10,%esp
		}
		acquire_spinlock(&__tstchan_lk__);
f0121012:	83 ec 0c             	sub    $0xc,%esp
f0121015:	68 c0 53 5c f0       	push   $0xf05c53c0
f012101a:	e8 02 db fe ff       	call   f010eb21 <acquire_spinlock>
f012101f:	83 c4 10             	add    $0x10,%esp
		sleep(&__tstchan__, &__tstchan_lk__);
f0121022:	83 ec 08             	sub    $0x8,%esp
f0121025:	68 c0 53 5c f0       	push   $0xf05c53c0
f012102a:	68 60 53 5c f0       	push   $0xf05c5360
f012102f:	e8 da de fe ff       	call   f010ef0e <sleep>
f0121034:	83 c4 10             	add    $0x10,%esp
		release_spinlock(&__tstchan_lk__);
f0121037:	83 ec 0c             	sub    $0xc,%esp
f012103a:	68 c0 53 5c f0       	push   $0xf05c53c0
f012103f:	e8 64 db fe ff       	call   f010eba8 <release_spinlock>
f0121044:	83 c4 10             	add    $0x10,%esp
f0121047:	e9 a6 00 00 00       	jmp    f01210f2 <sys_utilities+0x3b9>
	}
	else if (strcmp(utilityName, "__WakeupOne__") == 0)
f012104c:	83 ec 08             	sub    $0x8,%esp
f012104f:	68 50 fc 12 f0       	push   $0xf012fc50
f0121054:	ff 75 08             	pushl  0x8(%ebp)
f0121057:	e8 ee 15 00 00       	call   f012264a <strcmp>
f012105c:	83 c4 10             	add    $0x10,%esp
f012105f:	85 c0                	test   %eax,%eax
f0121061:	75 12                	jne    f0121075 <sys_utilities+0x33c>
	{
		wakeup_one(&__tstchan__);
f0121063:	83 ec 0c             	sub    $0xc,%esp
f0121066:	68 60 53 5c f0       	push   $0xf05c5360
f012106b:	e8 ef de fe ff       	call   f010ef5f <wakeup_one>
f0121070:	83 c4 10             	add    $0x10,%esp
f0121073:	eb 7d                	jmp    f01210f2 <sys_utilities+0x3b9>
	}
	else if (strcmp(utilityName, "__WakeupAll__") == 0)
f0121075:	83 ec 08             	sub    $0x8,%esp
f0121078:	68 5e fc 12 f0       	push   $0xf012fc5e
f012107d:	ff 75 08             	pushl  0x8(%ebp)
f0121080:	e8 c5 15 00 00       	call   f012264a <strcmp>
f0121085:	83 c4 10             	add    $0x10,%esp
f0121088:	85 c0                	test   %eax,%eax
f012108a:	75 12                	jne    f012109e <sys_utilities+0x365>
	{
		wakeup_all(&__tstchan__);
f012108c:	83 ec 0c             	sub    $0xc,%esp
f012108f:	68 60 53 5c f0       	push   $0xf05c5360
f0121094:	e8 ef de fe ff       	call   f010ef88 <wakeup_all>
f0121099:	83 c4 10             	add    $0x10,%esp
f012109c:	eb 54                	jmp    f01210f2 <sys_utilities+0x3b9>
	}
	else if (strcmp(utilityName, "__GetChanQueueSize__") == 0)
f012109e:	83 ec 08             	sub    $0x8,%esp
f01210a1:	68 6c fc 12 f0       	push   $0xf012fc6c
f01210a6:	ff 75 08             	pushl  0x8(%ebp)
f01210a9:	e8 9c 15 00 00       	call   f012264a <strcmp>
f01210ae:	83 c4 10             	add    $0x10,%esp
f01210b1:	85 c0                	test   %eax,%eax
f01210b3:	75 14                	jne    f01210c9 <sys_utilities+0x390>
	{
		int* numOfProcesses = (int*) value ;
f01210b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01210b8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		*numOfProcesses = LIST_SIZE(&__tstchan__.queue);
f01210bb:	a1 6c 53 5c f0       	mov    0xf05c536c,%eax
f01210c0:	89 c2                	mov    %eax,%edx
f01210c2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01210c5:	89 10                	mov    %edx,(%eax)
f01210c7:	eb 29                	jmp    f01210f2 <sys_utilities+0x3b9>
	}
	else if (strcmp(utilityName, "__GetReadyQueueSize__") == 0)
f01210c9:	83 ec 08             	sub    $0x8,%esp
f01210cc:	68 81 fc 12 f0       	push   $0xf012fc81
f01210d1:	ff 75 08             	pushl  0x8(%ebp)
f01210d4:	e8 71 15 00 00       	call   f012264a <strcmp>
f01210d9:	83 c4 10             	add    $0x10,%esp
f01210dc:	85 c0                	test   %eax,%eax
f01210de:	75 12                	jne    f01210f2 <sys_utilities+0x3b9>
	{
		int* numOfProcesses = (int*) value ;
f01210e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01210e3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		*numOfProcesses = LIST_SIZE(&ProcessQueues.env_ready_queues[0]);
f01210e6:	a1 9c fe 59 f0       	mov    0xf059fe9c,%eax
f01210eb:	89 c2                	mov    %eax,%edx
f01210ed:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01210f0:	89 10                	mov    %edx,(%eax)
	}

	if ((int)value < 0)
f01210f2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01210f6:	79 5b                	jns    f0121153 <sys_utilities+0x41a>
	{
		if (strcmp(utilityName, "__ReplStrat__") == 0)
f01210f8:	83 ec 08             	sub    $0x8,%esp
f01210fb:	68 97 fc 12 f0       	push   $0xf012fc97
f0121100:	ff 75 08             	pushl  0x8(%ebp)
f0121103:	e8 42 15 00 00       	call   f012264a <strcmp>
f0121108:	83 c4 10             	add    $0x10,%esp
f012110b:	85 c0                	test   %eax,%eax
f012110d:	75 44                	jne    f0121153 <sys_utilities+0x41a>
		{
			switch (value)
f012110f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121112:	83 f8 fc             	cmp    $0xfffffffc,%eax
f0121115:	74 07                	je     f012111e <sys_utilities+0x3e5>
f0121117:	83 f8 fe             	cmp    $0xfffffffe,%eax
f012111a:	74 19                	je     f0121135 <sys_utilities+0x3fc>
			case -PG_REP_LRU_LISTS_APPROX:
				cprintf("\n*************************************\nPAGE REPLACEMENT IS SET TO LRU LISTS.\n*************************************\n");
				setPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX);
				break;
			default:
				break;
f012111c:	eb 35                	jmp    f0121153 <sys_utilities+0x41a>
		if (strcmp(utilityName, "__ReplStrat__") == 0)
		{
			switch (value)
			{
			case -PG_REP_FIFO:
				cprintf("\n*************************************\nPAGE REPLACEMENT IS SET TO FIFO.\n*************************************\n");
f012111e:	83 ec 0c             	sub    $0xc,%esp
f0121121:	68 a8 fc 12 f0       	push   $0xf012fca8
f0121126:	e8 41 fe fd ff       	call   f0100f6c <cprintf>
f012112b:	83 c4 10             	add    $0x10,%esp
				setPageReplacmentAlgorithmFIFO();
f012112e:	e8 95 d5 fe ff       	call   f010e6c8 <setPageReplacmentAlgorithmFIFO>
				break;
f0121133:	eb 1e                	jmp    f0121153 <sys_utilities+0x41a>
			case -PG_REP_LRU_LISTS_APPROX:
				cprintf("\n*************************************\nPAGE REPLACEMENT IS SET TO LRU LISTS.\n*************************************\n");
f0121135:	83 ec 0c             	sub    $0xc,%esp
f0121138:	68 18 fd 12 f0       	push   $0xf012fd18
f012113d:	e8 2a fe fd ff       	call   f0100f6c <cprintf>
f0121142:	83 c4 10             	add    $0x10,%esp
				setPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX);
f0121145:	83 ec 0c             	sub    $0xc,%esp
f0121148:	6a 02                	push   $0x2
f012114a:	e8 36 d5 fe ff       	call   f010e685 <setPageReplacmentAlgorithmLRU>
f012114f:	83 c4 10             	add    $0x10,%esp
				break;
f0121152:	90                   	nop
			}
		}
	}
	/*****************************************************************************************/

}
f0121153:	90                   	nop
f0121154:	c9                   	leave  
f0121155:	c3                   	ret    

f0121156 <detect_loop_in_FrameInfo_list>:
/*=======================================*/
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f0121156:	55                   	push   %ebp
f0121157:	89 e5                	mov    %esp,%ebp
f0121159:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f012115c:	8b 45 08             	mov    0x8(%ebp),%eax
f012115f:	8b 00                	mov    (%eax),%eax
f0121161:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f0121164:	8b 45 08             	mov    0x8(%ebp),%eax
f0121167:	8b 00                	mov    (%eax),%eax
f0121169:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f012116c:	eb 52                	jmp    f01211c0 <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f012116e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121171:	8b 00                	mov    (%eax),%eax
f0121173:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f0121176:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121179:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012117c:	75 12                	jne    f0121190 <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f012117e:	83 ec 0c             	sub    $0xc,%esp
f0121181:	68 8c fd 12 f0       	push   $0xf012fd8c
f0121186:	e8 e1 fd fd ff       	call   f0100f6c <cprintf>
f012118b:	83 c4 10             	add    $0x10,%esp
			break;
f012118e:	eb 3f                	jmp    f01211cf <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f0121190:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0121194:	74 38                	je     f01211ce <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f0121196:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121199:	8b 00                	mov    (%eax),%eax
f012119b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f012119e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01211a1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01211a4:	75 12                	jne    f01211b8 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f01211a6:	83 ec 0c             	sub    $0xc,%esp
f01211a9:	68 a8 fd 12 f0       	push   $0xf012fda8
f01211ae:	e8 b9 fd fd ff       	call   f0100f6c <cprintf>
f01211b3:	83 c4 10             	add    $0x10,%esp
			break;
f01211b6:	eb 17                	jmp    f01211cf <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f01211b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01211bb:	8b 00                	mov    (%eax),%eax
f01211bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f01211c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01211c4:	74 09                	je     f01211cf <detect_loop_in_FrameInfo_list+0x79>
f01211c6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01211ca:	75 a2                	jne    f012116e <detect_loop_in_FrameInfo_list+0x18>
f01211cc:	eb 01                	jmp    f01211cf <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f01211ce:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f01211cf:	83 ec 0c             	sub    $0xc,%esp
f01211d2:	68 bf fd 12 f0       	push   $0xf012fdbf
f01211d7:	e8 90 fd fd ff       	call   f0100f6c <cprintf>
f01211dc:	83 c4 10             	add    $0x10,%esp
}
f01211df:	90                   	nop
f01211e0:	c9                   	leave  
f01211e1:	c3                   	ret    

f01211e2 <scarce_memory>:

void scarce_memory()
{
f01211e2:	55                   	push   %ebp
f01211e3:	89 e5                	mov    %esp,%ebp
f01211e5:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f01211e8:	a1 80 25 5a f0       	mov    0xf05a2580,%eax
f01211ed:	ba 64 00 00 00       	mov    $0x64,%edx
f01211f2:	29 c2                	sub    %eax,%edx
f01211f4:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f01211f9:	0f af c2             	imul   %edx,%eax
f01211fc:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0121201:	f7 e2                	mul    %edx
f0121203:	89 d0                	mov    %edx,%eax
f0121205:	c1 e8 05             	shr    $0x5,%eax
f0121208:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f012120b:	a1 80 25 5a f0       	mov    0xf05a2580,%eax
f0121210:	ba 64 00 00 00       	mov    $0x64,%edx
f0121215:	29 c2                	sub    %eax,%edx
f0121217:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f012121c:	89 d1                	mov    %edx,%ecx
f012121e:	0f af c8             	imul   %eax,%ecx
f0121221:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0121226:	f7 e1                	mul    %ecx
f0121228:	c1 ea 05             	shr    $0x5,%edx
f012122b:	89 d0                	mov    %edx,%eax
f012122d:	c1 e0 02             	shl    $0x2,%eax
f0121230:	01 d0                	add    %edx,%eax
f0121232:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0121239:	01 d0                	add    %edx,%eax
f012123b:	c1 e0 02             	shl    $0x2,%eax
f012123e:	29 c1                	sub    %eax,%ecx
f0121240:	89 ca                	mov    %ecx,%edx
f0121242:	85 d2                	test   %edx,%edx
f0121244:	74 03                	je     f0121249 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f0121246:	ff 45 f4             	incl   -0xc(%ebp)

	int fflSize = 0;
f0121249:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	acquire_spinlock(&MemFrameLists.mfllock);
f0121250:	83 ec 0c             	sub    $0xc,%esp
f0121253:	68 e0 fe 59 f0       	push   $0xf059fee0
f0121258:	e8 c4 d8 fe ff       	call   f010eb21 <acquire_spinlock>
f012125d:	83 c4 10             	add    $0x10,%esp
	{
		fflSize = LIST_SIZE(&MemFrameLists.free_frame_list);
f0121260:	a1 cc fe 59 f0       	mov    0xf059fecc,%eax
f0121265:	89 45 ec             	mov    %eax,-0x14(%ebp)

		uint32 size_of_already_allocated = number_of_frames - fflSize ;
f0121268:	8b 15 58 26 5a f0    	mov    0xf05a2658,%edx
f012126e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0121271:	29 c2                	sub    %eax,%edx
f0121273:	89 d0                	mov    %edx,%eax
f0121275:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f0121278:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012127b:	2b 45 e8             	sub    -0x18(%ebp),%eax
f012127e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
		//	cprintf("size to be allocated %d\n", size_tobe_allocated);
		int i = 0 ;
f0121281:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		struct FrameInfo* ptr_tmp_FI ;
		for (; i <= size_tobe_allocated ; i++)
f0121288:	eb 12                	jmp    f012129c <scarce_memory+0xba>
		{
			allocate_frame(&ptr_tmp_FI) ;
f012128a:	83 ec 0c             	sub    $0xc,%esp
f012128d:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0121290:	50                   	push   %eax
f0121291:	e8 3a 6f fe ff       	call   f01081d0 <allocate_frame>
f0121296:	83 c4 10             	add    $0x10,%esp
		uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
		//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
		//	cprintf("size to be allocated %d\n", size_tobe_allocated);
		int i = 0 ;
		struct FrameInfo* ptr_tmp_FI ;
		for (; i <= size_tobe_allocated ; i++)
f0121299:	ff 45 f0             	incl   -0x10(%ebp)
f012129c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012129f:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01212a2:	76 e6                	jbe    f012128a <scarce_memory+0xa8>
		{
			allocate_frame(&ptr_tmp_FI) ;
		}
	}
	release_spinlock(&MemFrameLists.mfllock);
f01212a4:	83 ec 0c             	sub    $0xc,%esp
f01212a7:	68 e0 fe 59 f0       	push   $0xf059fee0
f01212ac:	e8 f7 d8 fe ff       	call   f010eba8 <release_spinlock>
f01212b1:	83 c4 10             	add    $0x10,%esp

}
f01212b4:	90                   	nop
f01212b5:	c9                   	leave  
f01212b6:	c3                   	ret    

f01212b7 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f01212b7:	55                   	push   %ebp
f01212b8:	89 e5                	mov    %esp,%ebp
f01212ba:	83 ec 48             	sub    $0x48,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f01212bd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f01212c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f01212cb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct Env* cur_env = get_cpu_proc();
f01212d2:	e8 99 94 fe ff       	call   f010a770 <get_cpu_proc>
f01212d7:	89 45 d0             	mov    %eax,-0x30(%ebp)
	assert(cur_env != NULL);
f01212da:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
f01212de:	75 19                	jne    f01212f9 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x42>
f01212e0:	68 d9 fd 12 f0       	push   $0xf012fdd9
f01212e5:	68 97 fa 12 f0       	push   $0xf012fa97
f01212ea:	68 5b 01 00 00       	push   $0x15b
f01212ef:	68 df fa 12 f0       	push   $0xf012fadf
f01212f4:	e8 21 f0 fd ff       	call   f010031a <_panic>
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f01212f9:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f01212fd:	0f 85 f7 01 00 00    	jne    f01214fa <calc_no_pages_tobe_removed_from_ready_exit_queues+0x243>
	{
		acquire_spinlock(&ProcessQueues.qlock);
f0121303:	83 ec 0c             	sub    $0xc,%esp
f0121306:	68 00 fe 59 f0       	push   $0xf059fe00
f012130b:	e8 11 d8 fe ff       	call   f010eb21 <acquire_spinlock>
f0121310:	83 c4 10             	add    $0x10,%esp
		{
			for(int i = 0; i < num_of_ready_queues; i++)
f0121313:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012131a:	e9 e9 00 00 00       	jmp    f0121408 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x151>
			{
				struct Env * ptr_ready_env = NULL;
f012131f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
				LIST_FOREACH(ptr_ready_env, &(ProcessQueues.env_ready_queues[i]))
f0121326:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0121329:	83 c0 09             	add    $0x9,%eax
f012132c:	c1 e0 04             	shl    $0x4,%eax
f012132f:	05 00 fe 59 f0       	add    $0xf059fe00,%eax
f0121334:	8b 00                	mov    (%eax),%eax
f0121336:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0121339:	e9 81 00 00 00       	jmp    f01213bf <calc_no_pages_tobe_removed_from_ready_exit_queues+0x108>
				{
#if USE_KHEAP
					int num_of_pages_in_WS = LIST_SIZE(&(ptr_ready_env->page_WS_list));
#else
					int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f012133e:	83 ec 0c             	sub    $0xc,%esp
f0121341:	ff 75 e4             	pushl  -0x1c(%ebp)
f0121344:	e8 15 7a fe ff       	call   f0108d5e <env_page_ws_get_size>
f0121349:	83 c4 10             	add    $0x10,%esp
f012134c:	89 45 cc             	mov    %eax,-0x34(%ebp)
#endif
					int num_of_pages_to_be_removed = cur_env->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012134f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121352:	8b 90 3c da 01 00    	mov    0x1da3c(%eax),%edx
f0121358:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012135b:	0f af c2             	imul   %edx,%eax
f012135e:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0121363:	f7 e2                	mul    %edx
f0121365:	89 d0                	mov    %edx,%eax
f0121367:	c1 e8 05             	shr    $0x5,%eax
f012136a:	89 45 e0             	mov    %eax,-0x20(%ebp)
					if ((cur_env->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012136d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121370:	8b 90 3c da 01 00    	mov    0x1da3c(%eax),%edx
f0121376:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0121379:	89 d1                	mov    %edx,%ecx
f012137b:	0f af c8             	imul   %eax,%ecx
f012137e:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0121383:	f7 e1                	mul    %ecx
f0121385:	c1 ea 05             	shr    $0x5,%edx
f0121388:	89 d0                	mov    %edx,%eax
f012138a:	c1 e0 02             	shl    $0x2,%eax
f012138d:	01 d0                	add    %edx,%eax
f012138f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0121396:	01 d0                	add    %edx,%eax
f0121398:	c1 e0 02             	shl    $0x2,%eax
f012139b:	29 c1                	sub    %eax,%ecx
f012139d:	89 ca                	mov    %ecx,%edx
f012139f:	85 d2                	test   %edx,%edx
f01213a1:	74 03                	je     f01213a6 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xef>
						num_of_pages_to_be_removed++;
f01213a3:	ff 45 e0             	incl   -0x20(%ebp)
					no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f01213a6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01213a9:	01 45 f4             	add    %eax,-0xc(%ebp)
		acquire_spinlock(&ProcessQueues.qlock);
		{
			for(int i = 0; i < num_of_ready_queues; i++)
			{
				struct Env * ptr_ready_env = NULL;
				LIST_FOREACH(ptr_ready_env, &(ProcessQueues.env_ready_queues[i]))
f01213ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01213af:	83 c0 09             	add    $0x9,%eax
f01213b2:	c1 e0 04             	shl    $0x4,%eax
f01213b5:	05 08 fe 59 f0       	add    $0xf059fe08,%eax
f01213ba:	8b 00                	mov    (%eax),%eax
f01213bc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01213bf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01213c3:	74 08                	je     f01213cd <calc_no_pages_tobe_removed_from_ready_exit_queues+0x116>
f01213c5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01213c8:	8b 40 08             	mov    0x8(%eax),%eax
f01213cb:	eb 05                	jmp    f01213d2 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x11b>
f01213cd:	b8 00 00 00 00       	mov    $0x0,%eax
f01213d2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01213d5:	83 c2 09             	add    $0x9,%edx
f01213d8:	c1 e2 04             	shl    $0x4,%edx
f01213db:	81 c2 08 fe 59 f0    	add    $0xf059fe08,%edx
f01213e1:	89 02                	mov    %eax,(%edx)
f01213e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01213e6:	83 c0 09             	add    $0x9,%eax
f01213e9:	c1 e0 04             	shl    $0x4,%eax
f01213ec:	05 08 fe 59 f0       	add    $0xf059fe08,%eax
f01213f1:	8b 00                	mov    (%eax),%eax
f01213f3:	85 c0                	test   %eax,%eax
f01213f5:	0f 85 43 ff ff ff    	jne    f012133e <calc_no_pages_tobe_removed_from_ready_exit_queues+0x87>
f01213fb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01213ff:	0f 85 39 ff ff ff    	jne    f012133e <calc_no_pages_tobe_removed_from_ready_exit_queues+0x87>
	assert(cur_env != NULL);
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		acquire_spinlock(&ProcessQueues.qlock);
		{
			for(int i = 0; i < num_of_ready_queues; i++)
f0121405:	ff 45 e8             	incl   -0x18(%ebp)
f0121408:	a0 00 2b 5a f0       	mov    0xf05a2b00,%al
f012140d:	0f b6 c0             	movzbl %al,%eax
f0121410:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0121413:	0f 8f 06 ff ff ff    	jg     f012131f <calc_no_pages_tobe_removed_from_ready_exit_queues+0x68>
						num_of_pages_to_be_removed++;
					no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
				}
			}

			struct Env * ptr_exit_env = NULL;
f0121419:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			LIST_FOREACH(ptr_exit_env, &ProcessQueues.env_exit_queue)
f0121420:	a1 80 fe 59 f0       	mov    0xf059fe80,%eax
f0121425:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0121428:	eb 1f                	jmp    f0121449 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x192>
			{
#if USE_KHEAP
				int num_of_pages_in_WS = LIST_SIZE(&(ptr_exit_env->page_WS_list));
#else
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_exit_env);
f012142a:	83 ec 0c             	sub    $0xc,%esp
f012142d:	ff 75 dc             	pushl  -0x24(%ebp)
f0121430:	e8 29 79 fe ff       	call   f0108d5e <env_page_ws_get_size>
f0121435:	83 c4 10             	add    $0x10,%esp
f0121438:	89 45 c8             	mov    %eax,-0x38(%ebp)
#endif
				no_of_pages_tobe_removed_from_exit += num_of_pages_in_WS;
f012143b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012143e:	01 45 f0             	add    %eax,-0x10(%ebp)
					no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
				}
			}

			struct Env * ptr_exit_env = NULL;
			LIST_FOREACH(ptr_exit_env, &ProcessQueues.env_exit_queue)
f0121441:	a1 88 fe 59 f0       	mov    0xf059fe88,%eax
f0121446:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0121449:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012144d:	74 08                	je     f0121457 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1a0>
f012144f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0121452:	8b 40 08             	mov    0x8(%eax),%eax
f0121455:	eb 05                	jmp    f012145c <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1a5>
f0121457:	b8 00 00 00 00       	mov    $0x0,%eax
f012145c:	a3 88 fe 59 f0       	mov    %eax,0xf059fe88
f0121461:	a1 88 fe 59 f0       	mov    0xf059fe88,%eax
f0121466:	85 c0                	test   %eax,%eax
f0121468:	75 c0                	jne    f012142a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x173>
f012146a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012146e:	75 ba                	jne    f012142a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x173>
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_exit_env);
#endif
				no_of_pages_tobe_removed_from_exit += num_of_pages_in_WS;
			}
		}
		release_spinlock(&ProcessQueues.qlock);
f0121470:	83 ec 0c             	sub    $0xc,%esp
f0121473:	68 00 fe 59 f0       	push   $0xf059fe00
f0121478:	e8 2b d7 fe ff       	call   f010eba8 <release_spinlock>
f012147d:	83 c4 10             	add    $0x10,%esp
		if(cur_env != NULL)
f0121480:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
f0121484:	0f 84 de 00 00 00    	je     f0121568 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x2b1>
		{
#if USE_KHEAP
			int num_of_pages_in_WS = LIST_SIZE(&(cur_env->page_WS_list));
#else
			int num_of_pages_in_WS = env_page_ws_get_size(cur_env);
f012148a:	83 ec 0c             	sub    $0xc,%esp
f012148d:	ff 75 d0             	pushl  -0x30(%ebp)
f0121490:	e8 c9 78 fe ff       	call   f0108d5e <env_page_ws_get_size>
f0121495:	83 c4 10             	add    $0x10,%esp
f0121498:	89 45 c4             	mov    %eax,-0x3c(%ebp)
#endif
			int num_of_pages_to_be_removed = cur_env->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012149b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012149e:	8b 90 3c da 01 00    	mov    0x1da3c(%eax),%edx
f01214a4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01214a7:	0f af c2             	imul   %edx,%eax
f01214aa:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f01214af:	f7 e2                	mul    %edx
f01214b1:	89 d0                	mov    %edx,%eax
f01214b3:	c1 e8 05             	shr    $0x5,%eax
f01214b6:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((cur_env->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f01214b9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01214bc:	8b 90 3c da 01 00    	mov    0x1da3c(%eax),%edx
f01214c2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01214c5:	89 d1                	mov    %edx,%ecx
f01214c7:	0f af c8             	imul   %eax,%ecx
f01214ca:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01214cf:	f7 e1                	mul    %ecx
f01214d1:	c1 ea 05             	shr    $0x5,%edx
f01214d4:	89 d0                	mov    %edx,%eax
f01214d6:	c1 e0 02             	shl    $0x2,%eax
f01214d9:	01 d0                	add    %edx,%eax
f01214db:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01214e2:	01 d0                	add    %edx,%eax
f01214e4:	c1 e0 02             	shl    $0x2,%eax
f01214e7:	29 c1                	sub    %eax,%ecx
f01214e9:	89 ca                	mov    %ecx,%edx
f01214eb:	85 d2                	test   %edx,%edx
f01214ed:	74 03                	je     f01214f2 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x23b>
				num_of_pages_to_be_removed++;
f01214ef:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f01214f2:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01214f5:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01214f8:	eb 6e                	jmp    f0121568 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x2b1>
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
#if USE_KHEAP
		int num_of_pages_in_WS = LIST_SIZE(&(cur_env->page_WS_list));
#else
		int num_of_pages_in_WS = env_page_ws_get_size(cur_env);
f01214fa:	83 ec 0c             	sub    $0xc,%esp
f01214fd:	ff 75 d0             	pushl  -0x30(%ebp)
f0121500:	e8 59 78 fe ff       	call   f0108d5e <env_page_ws_get_size>
f0121505:	83 c4 10             	add    $0x10,%esp
f0121508:	89 45 c0             	mov    %eax,-0x40(%ebp)
#endif
		int num_of_pages_to_be_removed = cur_env->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012150b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012150e:	8b 90 3c da 01 00    	mov    0x1da3c(%eax),%edx
f0121514:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0121517:	0f af c2             	imul   %edx,%eax
f012151a:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012151f:	f7 e2                	mul    %edx
f0121521:	89 d0                	mov    %edx,%eax
f0121523:	c1 e8 05             	shr    $0x5,%eax
f0121526:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((cur_env->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0121529:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012152c:	8b 90 3c da 01 00    	mov    0x1da3c(%eax),%edx
f0121532:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0121535:	89 d1                	mov    %edx,%ecx
f0121537:	0f af c8             	imul   %eax,%ecx
f012153a:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012153f:	f7 e1                	mul    %ecx
f0121541:	c1 ea 05             	shr    $0x5,%edx
f0121544:	89 d0                	mov    %edx,%eax
f0121546:	c1 e0 02             	shl    $0x2,%eax
f0121549:	01 d0                	add    %edx,%eax
f012154b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0121552:	01 d0                	add    %edx,%eax
f0121554:	c1 e0 02             	shl    $0x2,%eax
f0121557:	29 c1                	sub    %eax,%ecx
f0121559:	89 ca                	mov    %ecx,%edx
f012155b:	85 d2                	test   %edx,%edx
f012155d:	74 03                	je     f0121562 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x2ab>
			num_of_pages_to_be_removed++;
f012155f:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f0121562:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0121565:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f0121568:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012156b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012156e:	01 c2                	add    %eax,%edx
f0121570:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121573:	01 d0                	add    %edx,%eax
}
f0121575:	c9                   	leave  
f0121576:	c3                   	ret    

f0121577 <schenv>:


void schenv()
{
f0121577:	55                   	push   %ebp
f0121578:	89 e5                	mov    %esp,%ebp
f012157a:	83 ec 18             	sub    $0x18,%esp

	__nl = 0;
f012157d:	c6 05 80 2b 5a f0 00 	movb   $0x0,0xf05a2b80
	__ne = NULL;
f0121584:	c7 05 ac 28 5a f0 00 	movl   $0x0,0xf05a28ac
f012158b:	00 00 00 
	acquire_spinlock(&ProcessQueues.qlock);
f012158e:	83 ec 0c             	sub    $0xc,%esp
f0121591:	68 00 fe 59 f0       	push   $0xf059fe00
f0121596:	e8 86 d5 fe ff       	call   f010eb21 <acquire_spinlock>
f012159b:	83 c4 10             	add    $0x10,%esp
	{
		for (int i = 0; i < num_of_ready_queues; ++i)
f012159e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01215a5:	eb 40                	jmp    f01215e7 <schenv+0x70>
		{
			if (queue_size(&(ProcessQueues.env_ready_queues[i])))
f01215a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01215aa:	83 c0 09             	add    $0x9,%eax
f01215ad:	c1 e0 04             	shl    $0x4,%eax
f01215b0:	05 00 fe 59 f0       	add    $0xf059fe00,%eax
f01215b5:	83 ec 0c             	sub    $0xc,%esp
f01215b8:	50                   	push   %eax
f01215b9:	e8 a2 39 fe ff       	call   f0104f60 <queue_size>
f01215be:	83 c4 10             	add    $0x10,%esp
f01215c1:	85 c0                	test   %eax,%eax
f01215c3:	74 1f                	je     f01215e4 <schenv+0x6d>
			{
				__ne = LIST_LAST(&(ProcessQueues.env_ready_queues[i]));
f01215c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01215c8:	83 c0 09             	add    $0x9,%eax
f01215cb:	c1 e0 04             	shl    $0x4,%eax
f01215ce:	05 04 fe 59 f0       	add    $0xf059fe04,%eax
f01215d3:	8b 00                	mov    (%eax),%eax
f01215d5:	a3 ac 28 5a f0       	mov    %eax,0xf05a28ac
				__nl = i;
f01215da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01215dd:	a2 80 2b 5a f0       	mov    %al,0xf05a2b80
				break;
f01215e2:	eb 10                	jmp    f01215f4 <schenv+0x7d>

	__nl = 0;
	__ne = NULL;
	acquire_spinlock(&ProcessQueues.qlock);
	{
		for (int i = 0; i < num_of_ready_queues; ++i)
f01215e4:	ff 45 f4             	incl   -0xc(%ebp)
f01215e7:	a0 00 2b 5a f0       	mov    0xf05a2b00,%al
f01215ec:	0f b6 c0             	movzbl %al,%eax
f01215ef:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01215f2:	7f b3                	jg     f01215a7 <schenv+0x30>
				__nl = i;
				break;
			}
		}
	}
	release_spinlock(&ProcessQueues.qlock);
f01215f4:	83 ec 0c             	sub    $0xc,%esp
f01215f7:	68 00 fe 59 f0       	push   $0xf059fe00
f01215fc:	e8 a7 d5 fe ff       	call   f010eba8 <release_spinlock>
f0121601:	83 c4 10             	add    $0x10,%esp
	struct Env* cur_env = get_cpu_proc();
f0121604:	e8 67 91 fe ff       	call   f010a770 <get_cpu_proc>
f0121609:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (cur_env != NULL)
f012160c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0121610:	0f 84 82 00 00 00    	je     f0121698 <schenv+0x121>
	{
		if (__ne != NULL)
f0121616:	a1 ac 28 5a f0       	mov    0xf05a28ac,%eax
f012161b:	85 c0                	test   %eax,%eax
f012161d:	74 49                	je     f0121668 <schenv+0xf1>
		{
			if ((__pl + 1) < __nl)
f012161f:	a0 f1 fd 59 f0       	mov    0xf059fdf1,%al
f0121624:	0f b6 c0             	movzbl %al,%eax
f0121627:	8d 50 01             	lea    0x1(%eax),%edx
f012162a:	a0 80 2b 5a f0       	mov    0xf05a2b80,%al
f012162f:	0f b6 c0             	movzbl %al,%eax
f0121632:	39 c2                	cmp    %eax,%edx
f0121634:	7d 62                	jge    f0121698 <schenv+0x121>
			{
				__ne = cur_env;
f0121636:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121639:	a3 ac 28 5a f0       	mov    %eax,0xf05a28ac
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012163e:	a0 f1 fd 59 f0       	mov    0xf059fdf1,%al
f0121643:	0f b6 c0             	movzbl %al,%eax
f0121646:	8a 15 00 2b 5a f0    	mov    0xf05a2b00,%dl
f012164c:	0f b6 d2             	movzbl %dl,%edx
f012164f:	4a                   	dec    %edx
f0121650:	39 d0                	cmp    %edx,%eax
f0121652:	7d 08                	jge    f012165c <schenv+0xe5>
f0121654:	a0 f1 fd 59 f0       	mov    0xf059fdf1,%al
f0121659:	40                   	inc    %eax
f012165a:	eb 05                	jmp    f0121661 <schenv+0xea>
f012165c:	a0 f1 fd 59 f0       	mov    0xf059fdf1,%al
f0121661:	a2 80 2b 5a f0       	mov    %al,0xf05a2b80
		{
			__ne = cur_env;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f0121666:	eb 30                	jmp    f0121698 <schenv+0x121>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = cur_env;
f0121668:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012166b:	a3 ac 28 5a f0       	mov    %eax,0xf05a28ac
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0121670:	a0 f1 fd 59 f0       	mov    0xf059fdf1,%al
f0121675:	0f b6 c0             	movzbl %al,%eax
f0121678:	8a 15 00 2b 5a f0    	mov    0xf05a2b00,%dl
f012167e:	0f b6 d2             	movzbl %dl,%edx
f0121681:	4a                   	dec    %edx
f0121682:	39 d0                	cmp    %edx,%eax
f0121684:	7d 08                	jge    f012168e <schenv+0x117>
f0121686:	a0 f1 fd 59 f0       	mov    0xf059fdf1,%al
f012168b:	40                   	inc    %eax
f012168c:	eb 05                	jmp    f0121693 <schenv+0x11c>
f012168e:	a0 f1 fd 59 f0       	mov    0xf059fdf1,%al
f0121693:	a2 80 2b 5a f0       	mov    %al,0xf05a2b80
		}
	}
}
f0121698:	90                   	nop
f0121699:	c9                   	leave  
f012169a:	c3                   	ret    

f012169b <chksch>:

void chksch(uint8 onoff)
{
f012169b:	55                   	push   %ebp
f012169c:	89 e5                	mov    %esp,%ebp
f012169e:	83 ec 18             	sub    $0x18,%esp
f01216a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01216a4:	88 45 f4             	mov    %al,-0xc(%ebp)
	//		__pl = 0 ;
	//		__nl = 0 ;
	//	}

	/*TEST BSD*/
	if (isSchedMethodBSD())
f01216a7:	e8 87 50 fe ff       	call   f0106733 <isSchedMethodBSD>
f01216ac:	85 c0                	test   %eax,%eax
f01216ae:	74 48                	je     f01216f8 <chksch+0x5d>
	{
		__histla = __pla = get_load_average();
f01216b0:	e8 2c 50 fe ff       	call   f01066e1 <get_load_average>
f01216b5:	a3 1c 2b 5a f0       	mov    %eax,0xf05a2b1c
f01216ba:	a1 1c 2b 5a f0       	mov    0xf05a2b1c,%eax
f01216bf:	a3 5c 26 5a f0       	mov    %eax,0xf05a265c
		acquire_spinlock(&ProcessQueues.qlock);
f01216c4:	83 ec 0c             	sub    $0xc,%esp
f01216c7:	68 00 fe 59 f0       	push   $0xf059fe00
f01216cc:	e8 50 d4 fe ff       	call   f010eb21 <acquire_spinlock>
f01216d1:	83 c4 10             	add    $0x10,%esp
		{
			__pnexit = LIST_SIZE(&ProcessQueues.env_exit_queue) ;
f01216d4:	a1 8c fe 59 f0       	mov    0xf059fe8c,%eax
f01216d9:	a3 60 ff 59 f0       	mov    %eax,0xf059ff60
		}
		release_spinlock(&ProcessQueues.qlock);
f01216de:	83 ec 0c             	sub    $0xc,%esp
f01216e1:	68 00 fe 59 f0       	push   $0xf059fe00
f01216e6:	e8 bd d4 fe ff       	call   f010eba8 <release_spinlock>
f01216eb:	83 c4 10             	add    $0x10,%esp
		__firsttime = 1;
f01216ee:	c7 05 bc 28 5a f0 01 	movl   $0x1,0xf05a28bc
f01216f5:	00 00 00 
	}
	__chkstatus = onoff;
f01216f8:	8a 45 f4             	mov    -0xc(%ebp),%al
f01216fb:	a2 a8 28 5a f0       	mov    %al,0xf05a28a8
}
f0121700:	90                   	nop
f0121701:	c9                   	leave  
f0121702:	c3                   	ret    

f0121703 <chk1>:
void chk1()
{
f0121703:	55                   	push   %ebp
f0121704:	89 e5                	mov    %esp,%ebp
	//			__pl = 0;
	//		}
	//		//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	//		schenv();
	//	}
}
f0121706:	90                   	nop
f0121707:	5d                   	pop    %ebp
f0121708:	c3                   	ret    

f0121709 <chk2>:
void chk2(struct Env* __se)
{
f0121709:	55                   	push   %ebp
f012170a:	89 e5                	mov    %esp,%ebp
f012170c:	83 ec 28             	sub    $0x28,%esp
	if (__chkstatus == 0)
f012170f:	a0 a8 28 5a f0       	mov    0xf05a28a8,%al
f0121714:	84 c0                	test   %al,%al
f0121716:	0f 84 59 03 00 00    	je     f0121a75 <chk2+0x36c>
		return ;

	/*TEST BSD*/
	if (isSchedMethodBSD())
f012171c:	e8 12 50 fe ff       	call   f0106733 <isSchedMethodBSD>
f0121721:	85 c0                	test   %eax,%eax
f0121723:	0f 84 4d 03 00 00    	je     f0121a76 <chk2+0x36d>
	{
		__nla = get_load_average();
f0121729:	e8 b3 4f fe ff       	call   f01066e1 <get_load_average>
f012172e:	a3 84 25 5a f0       	mov    %eax,0xf05a2584
		acquire_spinlock(&ProcessQueues.qlock);
f0121733:	83 ec 0c             	sub    $0xc,%esp
f0121736:	68 00 fe 59 f0       	push   $0xf059fe00
f012173b:	e8 e1 d3 fe ff       	call   f010eb21 <acquire_spinlock>
f0121740:	83 c4 10             	add    $0x10,%esp
		{
			__nnexit = LIST_SIZE(&ProcessQueues.env_exit_queue);
f0121743:	a1 8c fe 59 f0       	mov    0xf059fe8c,%eax
f0121748:	a3 b0 28 5a f0       	mov    %eax,0xf05a28b0
		}
		release_spinlock(&ProcessQueues.qlock);
f012174d:	83 ec 0c             	sub    $0xc,%esp
f0121750:	68 00 fe 59 f0       	push   $0xf059fe00
f0121755:	e8 4e d4 fe ff       	call   f010eba8 <release_spinlock>
f012175a:	83 c4 10             	add    $0x10,%esp

		if (__firsttime)
f012175d:	a1 bc 28 5a f0       	mov    0xf05a28bc,%eax
f0121762:	85 c0                	test   %eax,%eax
f0121764:	74 72                	je     f01217d8 <chk2+0xcf>
		{
			acquire_spinlock(&ProcessQueues.qlock);
f0121766:	83 ec 0c             	sub    $0xc,%esp
f0121769:	68 00 fe 59 f0       	push   $0xf059fe00
f012176e:	e8 ae d3 fe ff       	call   f010eb21 <acquire_spinlock>
f0121773:	83 c4 10             	add    $0x10,%esp
			{
				//Cnt #Processes
				__nproc = __se != NULL? 1 : 0;
f0121776:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012177a:	0f 95 c0             	setne  %al
f012177d:	0f b6 c0             	movzbl %al,%eax
f0121780:	a3 74 2a 5a f0       	mov    %eax,0xf05a2a74
				for (int l = num_of_ready_queues-1; l >= 0; --l)
f0121785:	a0 00 2b 5a f0       	mov    0xf05a2b00,%al
f012178a:	0f b6 c0             	movzbl %al,%eax
f012178d:	48                   	dec    %eax
f012178e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0121791:	eb 20                	jmp    f01217b3 <chk2+0xaa>
				{
					__nproc += LIST_SIZE(&(ProcessQueues.env_ready_queues[l]));
f0121793:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121796:	83 c0 09             	add    $0x9,%eax
f0121799:	c1 e0 04             	shl    $0x4,%eax
f012179c:	05 0c fe 59 f0       	add    $0xf059fe0c,%eax
f01217a1:	8b 00                	mov    (%eax),%eax
f01217a3:	8b 15 74 2a 5a f0    	mov    0xf05a2a74,%edx
f01217a9:	01 d0                	add    %edx,%eax
f01217ab:	a3 74 2a 5a f0       	mov    %eax,0xf05a2a74
		{
			acquire_spinlock(&ProcessQueues.qlock);
			{
				//Cnt #Processes
				__nproc = __se != NULL? 1 : 0;
				for (int l = num_of_ready_queues-1; l >= 0; --l)
f01217b0:	ff 4d f4             	decl   -0xc(%ebp)
f01217b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01217b7:	79 da                	jns    f0121793 <chk2+0x8a>
				{
					__nproc += LIST_SIZE(&(ProcessQueues.env_ready_queues[l]));
				}
				__firsttime = 0;
f01217b9:	c7 05 bc 28 5a f0 00 	movl   $0x0,0xf05a28bc
f01217c0:	00 00 00 
			}
			release_spinlock(&ProcessQueues.qlock);
f01217c3:	83 ec 0c             	sub    $0xc,%esp
f01217c6:	68 00 fe 59 f0       	push   $0xf059fe00
f01217cb:	e8 d8 d3 fe ff       	call   f010eba8 <release_spinlock>
f01217d0:	83 c4 10             	add    $0x10,%esp
f01217d3:	e9 91 02 00 00       	jmp    f0121a69 <chk2+0x360>
		}
		else
		{
			if (__pnexit != __nnexit)
f01217d8:	8b 15 60 ff 59 f0    	mov    0xf059ff60,%edx
f01217de:	a1 b0 28 5a f0       	mov    0xf05a28b0,%eax
f01217e3:	39 c2                	cmp    %eax,%edx
f01217e5:	74 63                	je     f012184a <chk2+0x141>
			{
				acquire_spinlock(&ProcessQueues.qlock);
f01217e7:	83 ec 0c             	sub    $0xc,%esp
f01217ea:	68 00 fe 59 f0       	push   $0xf059fe00
f01217ef:	e8 2d d3 fe ff       	call   f010eb21 <acquire_spinlock>
f01217f4:	83 c4 10             	add    $0x10,%esp
				{
					//Cnt #Processes
					__nproc = __se != NULL? 1 : 0;
f01217f7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01217fb:	0f 95 c0             	setne  %al
f01217fe:	0f b6 c0             	movzbl %al,%eax
f0121801:	a3 74 2a 5a f0       	mov    %eax,0xf05a2a74
					for (int l = num_of_ready_queues-1; l >= 0; --l)
f0121806:	a0 00 2b 5a f0       	mov    0xf05a2b00,%al
f012180b:	0f b6 c0             	movzbl %al,%eax
f012180e:	48                   	dec    %eax
f012180f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0121812:	eb 20                	jmp    f0121834 <chk2+0x12b>
					{
						__nproc += LIST_SIZE(&(ProcessQueues.env_ready_queues[l]));
f0121814:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121817:	83 c0 09             	add    $0x9,%eax
f012181a:	c1 e0 04             	shl    $0x4,%eax
f012181d:	05 0c fe 59 f0       	add    $0xf059fe0c,%eax
f0121822:	8b 00                	mov    (%eax),%eax
f0121824:	8b 15 74 2a 5a f0    	mov    0xf05a2a74,%edx
f012182a:	01 d0                	add    %edx,%eax
f012182c:	a3 74 2a 5a f0       	mov    %eax,0xf05a2a74
			{
				acquire_spinlock(&ProcessQueues.qlock);
				{
					//Cnt #Processes
					__nproc = __se != NULL? 1 : 0;
					for (int l = num_of_ready_queues-1; l >= 0; --l)
f0121831:	ff 4d f0             	decl   -0x10(%ebp)
f0121834:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0121838:	79 da                	jns    f0121814 <chk2+0x10b>
					{
						__nproc += LIST_SIZE(&(ProcessQueues.env_ready_queues[l]));
					}
				}
				release_spinlock(&ProcessQueues.qlock);
f012183a:	83 ec 0c             	sub    $0xc,%esp
f012183d:	68 00 fe 59 f0       	push   $0xf059fe00
f0121842:	e8 61 d3 fe ff       	call   f010eba8 <release_spinlock>
f0121847:	83 c4 10             	add    $0x10,%esp
			}

			//Make sure that the la is changed over long period of time
			if (timer_ticks() % 1000 == 0)
f012184a:	e8 2b 4e fe ff       	call   f010667a <timer_ticks>
f012184f:	6a 00                	push   $0x0
f0121851:	68 e8 03 00 00       	push   $0x3e8
f0121856:	52                   	push   %edx
f0121857:	50                   	push   %eax
f0121858:	e8 3b 23 00 00       	call   f0123b98 <__moddi3>
f012185d:	83 c4 10             	add    $0x10,%esp
f0121860:	09 d0                	or     %edx,%eax
f0121862:	85 c0                	test   %eax,%eax
f0121864:	75 32                	jne    f0121898 <chk2+0x18f>
			{
				assert_endall(__histla != __nla) ;
f0121866:	8b 15 5c 26 5a f0    	mov    0xf05a265c,%edx
f012186c:	a1 84 25 5a f0       	mov    0xf05a2584,%eax
f0121871:	39 c2                	cmp    %eax,%edx
f0121873:	75 19                	jne    f012188e <chk2+0x185>
f0121875:	68 e9 fd 12 f0       	push   $0xf012fde9
f012187a:	68 97 fa 12 f0       	push   $0xf012fa97
f012187f:	68 17 02 00 00       	push   $0x217
f0121884:	68 df fa 12 f0       	push   $0xf012fadf
f0121889:	e8 1c eb fd ff       	call   f01003aa <_panic_all>
				__histla = __nla;
f012188e:	a1 84 25 5a f0       	mov    0xf05a2584,%eax
f0121893:	a3 5c 26 5a f0       	mov    %eax,0xf05a265c
			}

			//check every 1 sec, assuming quantum >= 10
			if (timer_ticks() % 100 == 0)
f0121898:	e8 dd 4d fe ff       	call   f010667a <timer_ticks>
f012189d:	6a 00                	push   $0x0
f012189f:	6a 64                	push   $0x64
f01218a1:	52                   	push   %edx
f01218a2:	50                   	push   %eax
f01218a3:	e8 f0 22 00 00       	call   f0123b98 <__moddi3>
f01218a8:	83 c4 10             	add    $0x10,%esp
f01218ab:	09 d0                	or     %edx,%eax
f01218ad:	85 c0                	test   %eax,%eax
f01218af:	0f 85 b4 01 00 00    	jne    f0121a69 <chk2+0x360>
			{
				int plaint = __pla / 100 ;
f01218b5:	8b 0d 1c 2b 5a f0    	mov    0xf05a2b1c,%ecx
f01218bb:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01218c0:	f7 e9                	imul   %ecx
f01218c2:	c1 fa 05             	sar    $0x5,%edx
f01218c5:	89 c8                	mov    %ecx,%eax
f01218c7:	c1 f8 1f             	sar    $0x1f,%eax
f01218ca:	29 c2                	sub    %eax,%edx
f01218cc:	89 d0                	mov    %edx,%eax
f01218ce:	89 45 ec             	mov    %eax,-0x14(%ebp)
				int plafrc = __pla % 100 ;
f01218d1:	8b 0d 1c 2b 5a f0    	mov    0xf05a2b1c,%ecx
f01218d7:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01218dc:	f7 e9                	imul   %ecx
f01218de:	c1 fa 05             	sar    $0x5,%edx
f01218e1:	89 c8                	mov    %ecx,%eax
f01218e3:	c1 f8 1f             	sar    $0x1f,%eax
f01218e6:	29 c2                	sub    %eax,%edx
f01218e8:	89 d0                	mov    %edx,%eax
f01218ea:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01218ed:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01218f0:	89 d0                	mov    %edx,%eax
f01218f2:	c1 e0 02             	shl    $0x2,%eax
f01218f5:	01 d0                	add    %edx,%eax
f01218f7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01218fe:	01 d0                	add    %edx,%eax
f0121900:	c1 e0 02             	shl    $0x2,%eax
f0121903:	29 c1                	sub    %eax,%ecx
f0121905:	89 c8                	mov    %ecx,%eax
f0121907:	89 45 e8             	mov    %eax,-0x18(%ebp)

				int nlaint = __nla / 100 ;
f012190a:	8b 0d 84 25 5a f0    	mov    0xf05a2584,%ecx
f0121910:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0121915:	f7 e9                	imul   %ecx
f0121917:	c1 fa 05             	sar    $0x5,%edx
f012191a:	89 c8                	mov    %ecx,%eax
f012191c:	c1 f8 1f             	sar    $0x1f,%eax
f012191f:	29 c2                	sub    %eax,%edx
f0121921:	89 d0                	mov    %edx,%eax
f0121923:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				int nlafrc = __nla % 100 ;
f0121926:	8b 0d 84 25 5a f0    	mov    0xf05a2584,%ecx
f012192c:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0121931:	f7 e9                	imul   %ecx
f0121933:	c1 fa 05             	sar    $0x5,%edx
f0121936:	89 c8                	mov    %ecx,%eax
f0121938:	c1 f8 1f             	sar    $0x1f,%eax
f012193b:	29 c2                	sub    %eax,%edx
f012193d:	89 d0                	mov    %edx,%eax
f012193f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0121942:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0121945:	89 d0                	mov    %edx,%eax
f0121947:	c1 e0 02             	shl    $0x2,%eax
f012194a:	01 d0                	add    %edx,%eax
f012194c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0121953:	01 d0                	add    %edx,%eax
f0121955:	c1 e0 02             	shl    $0x2,%eax
f0121958:	29 c1                	sub    %eax,%ecx
f012195a:	89 c8                	mov    %ecx,%eax
f012195c:	89 45 e0             	mov    %eax,-0x20(%ebp)

				//Check at steady state of nproc (include equality)
				if (__nnexit == __pnexit)
f012195f:	8b 15 b0 28 5a f0    	mov    0xf05a28b0,%edx
f0121965:	a1 60 ff 59 f0       	mov    0xf059ff60,%eax
f012196a:	39 c2                	cmp    %eax,%edx
f012196c:	0f 85 ed 00 00 00    	jne    f0121a5f <chk2+0x356>
				{
					//cprintf("++++++++++++++++++# processes = %d, prev la = %d.%d, next la = %d.%d\n", __nproc, plaint, plafrc, nlaint, nlafrc);
					if (__nproc > plaint)
f0121972:	a1 74 2a 5a f0       	mov    0xf05a2a74,%eax
f0121977:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012197a:	7e 5b                	jle    f01219d7 <chk2+0x2ce>
					{
						cprintf("++++++++++++++++++# processes = %d, prev la = %d.%d, next la = %d.%d\n", __nproc, plaint, plafrc, nlaint, nlafrc);
f012197c:	a1 74 2a 5a f0       	mov    0xf05a2a74,%eax
f0121981:	83 ec 08             	sub    $0x8,%esp
f0121984:	ff 75 e0             	pushl  -0x20(%ebp)
f0121987:	ff 75 e4             	pushl  -0x1c(%ebp)
f012198a:	ff 75 e8             	pushl  -0x18(%ebp)
f012198d:	ff 75 ec             	pushl  -0x14(%ebp)
f0121990:	50                   	push   %eax
f0121991:	68 fc fd 12 f0       	push   $0xf012fdfc
f0121996:	e8 d1 f5 fd ff       	call   f0100f6c <cprintf>
f012199b:	83 c4 20             	add    $0x20,%esp
						//assert_endall(__nla > __pla);
						assert_endall((nlaint > plaint) || ((nlaint == plaint) && (nlafrc >= plafrc)));
f012199e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01219a1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01219a4:	0f 8f b5 00 00 00    	jg     f0121a5f <chk2+0x356>
f01219aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01219ad:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01219b0:	75 0c                	jne    f01219be <chk2+0x2b5>
f01219b2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01219b5:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01219b8:	0f 8d a1 00 00 00    	jge    f0121a5f <chk2+0x356>
f01219be:	68 44 fe 12 f0       	push   $0xf012fe44
f01219c3:	68 97 fa 12 f0       	push   $0xf012fa97
f01219c8:	68 2c 02 00 00       	push   $0x22c
f01219cd:	68 df fa 12 f0       	push   $0xf012fadf
f01219d2:	e8 d3 e9 fd ff       	call   f01003aa <_panic_all>
					}
					else if (__nproc < plaint)
f01219d7:	a1 74 2a 5a f0       	mov    0xf05a2a74,%eax
f01219dc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01219df:	7d 53                	jge    f0121a34 <chk2+0x32b>
					{
						cprintf("------------------# processes = %d, prev la = %d.%d, next la = %d.%d\n", __nproc, plaint, plafrc, nlaint, nlafrc);
f01219e1:	a1 74 2a 5a f0       	mov    0xf05a2a74,%eax
f01219e6:	83 ec 08             	sub    $0x8,%esp
f01219e9:	ff 75 e0             	pushl  -0x20(%ebp)
f01219ec:	ff 75 e4             	pushl  -0x1c(%ebp)
f01219ef:	ff 75 e8             	pushl  -0x18(%ebp)
f01219f2:	ff 75 ec             	pushl  -0x14(%ebp)
f01219f5:	50                   	push   %eax
f01219f6:	68 84 fe 12 f0       	push   $0xf012fe84
f01219fb:	e8 6c f5 fd ff       	call   f0100f6c <cprintf>
f0121a00:	83 c4 20             	add    $0x20,%esp
						//assert_endall(__nla < __pla);
						assert_endall((nlaint < plaint) || ((nlaint == plaint) && (nlafrc <= plafrc)));
f0121a03:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0121a06:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0121a09:	7c 54                	jl     f0121a5f <chk2+0x356>
f0121a0b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0121a0e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0121a11:	75 08                	jne    f0121a1b <chk2+0x312>
f0121a13:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0121a16:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0121a19:	7e 44                	jle    f0121a5f <chk2+0x356>
f0121a1b:	68 cc fe 12 f0       	push   $0xf012fecc
f0121a20:	68 97 fa 12 f0       	push   $0xf012fa97
f0121a25:	68 32 02 00 00       	push   $0x232
f0121a2a:	68 df fa 12 f0       	push   $0xf012fadf
f0121a2f:	e8 76 e9 fd ff       	call   f01003aa <_panic_all>
					}
					else if (__nproc == plaint)
f0121a34:	a1 74 2a 5a f0       	mov    0xf05a2a74,%eax
f0121a39:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0121a3c:	75 21                	jne    f0121a5f <chk2+0x356>
					{
						assert_endall((nlaint == plaint));
f0121a3e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0121a41:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0121a44:	74 19                	je     f0121a5f <chk2+0x356>
f0121a46:	68 0c ff 12 f0       	push   $0xf012ff0c
f0121a4b:	68 97 fa 12 f0       	push   $0xf012fa97
f0121a50:	68 36 02 00 00       	push   $0x236
f0121a55:	68 df fa 12 f0       	push   $0xf012fadf
f0121a5a:	e8 4b e9 fd ff       	call   f01003aa <_panic_all>
					}
				}
				__pla = __nla;
f0121a5f:	a1 84 25 5a f0       	mov    0xf05a2584,%eax
f0121a64:	a3 1c 2b 5a f0       	mov    %eax,0xf05a2b1c
			}
		}
		__pnexit = __nnexit;
f0121a69:	a1 b0 28 5a f0       	mov    0xf05a28b0,%eax
f0121a6e:	a3 60 ff 59 f0       	mov    %eax,0xf059ff60
f0121a73:	eb 01                	jmp    f0121a76 <chk2+0x36d>
	//	}
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f0121a75:	90                   	nop
	//				if (i == __tl) continue;
	//				assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
	//			}
	//		}
	//	}
}
f0121a76:	c9                   	leave  
f0121a77:	c3                   	ret    

f0121a78 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f0121a78:	55                   	push   %ebp
f0121a79:	89 e5                	mov    %esp,%ebp
f0121a7b:	83 ec 18             	sub    $0x18,%esp
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f0121a7e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121a85:	eb 40                	jmp    f0121ac7 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f0121a87:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121a8a:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f0121a90:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0121a95:	83 ec 08             	sub    $0x8,%esp
f0121a98:	52                   	push   %edx
f0121a99:	50                   	push   %eax
f0121a9a:	e8 a6 01 00 00       	call   f0121c45 <check_va2pa>
f0121a9f:	83 c4 10             	add    $0x10,%esp
f0121aa2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121aa5:	74 19                	je     f0121ac0 <check_boot_pgdir+0x48>
f0121aa7:	68 20 ff 12 f0       	push   $0xf012ff20
f0121aac:	68 97 fa 12 f0       	push   $0xf012fa97
f0121ab1:	68 82 02 00 00       	push   $0x282
f0121ab6:	68 df fa 12 f0       	push   $0xf012fadf
f0121abb:	e8 5a e8 fd ff       	call   f010031a <_panic>
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f0121ac0:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0121ac7:	81 7d f4 00 00 00 10 	cmpl   $0x10000000,-0xc(%ebp)
f0121ace:	75 b7                	jne    f0121a87 <check_boot_pgdir+0xf>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
#endif
	// check scheduler kernel stack
	for (i = 0; i < NCPUS*KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0121ad0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121ad7:	e9 81 00 00 00       	jmp    f0121b5d <check_boot_pgdir+0xe5>
	{
		//skip GUARD page of each CPU Stack
		if (i%KERNEL_STACK_SIZE == 0)
f0121adc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121adf:	25 ff 7f 00 00       	and    $0x7fff,%eax
f0121ae4:	85 c0                	test   %eax,%eax
f0121ae6:	74 6d                	je     f0121b55 <check_boot_pgdir+0xdd>
			continue;
		assert(check_va2pa(ptr_page_directory, KERN_STACK_TOP - NCPUS*KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f0121ae8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121aeb:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f0121af1:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0121af6:	83 ec 08             	sub    $0x8,%esp
f0121af9:	52                   	push   %edx
f0121afa:	50                   	push   %eax
f0121afb:	e8 45 01 00 00       	call   f0121c45 <check_va2pa>
f0121b00:	83 c4 10             	add    $0x10,%esp
f0121b03:	c7 45 f0 00 60 17 f0 	movl   $0xf0176000,-0x10(%ebp)
f0121b0a:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f0121b11:	77 17                	ja     f0121b2a <check_boot_pgdir+0xb2>
f0121b13:	ff 75 f0             	pushl  -0x10(%ebp)
f0121b16:	68 58 ff 12 f0       	push   $0xf012ff58
f0121b1b:	68 8b 02 00 00       	push   $0x28b
f0121b20:	68 df fa 12 f0       	push   $0xf012fadf
f0121b25:	e8 f0 e7 fd ff       	call   f010031a <_panic>
f0121b2a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0121b2d:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f0121b33:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121b36:	01 ca                	add    %ecx,%edx
f0121b38:	39 d0                	cmp    %edx,%eax
f0121b3a:	74 1a                	je     f0121b56 <check_boot_pgdir+0xde>
f0121b3c:	68 8c ff 12 f0       	push   $0xf012ff8c
f0121b41:	68 97 fa 12 f0       	push   $0xf012fa97
f0121b46:	68 8b 02 00 00       	push   $0x28b
f0121b4b:	68 df fa 12 f0       	push   $0xf012fadf
f0121b50:	e8 c5 e7 fd ff       	call   f010031a <_panic>
	// check scheduler kernel stack
	for (i = 0; i < NCPUS*KERNEL_STACK_SIZE; i += PAGE_SIZE)
	{
		//skip GUARD page of each CPU Stack
		if (i%KERNEL_STACK_SIZE == 0)
			continue;
f0121b55:	90                   	nop
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
#endif
	// check scheduler kernel stack
	for (i = 0; i < NCPUS*KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0121b56:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0121b5d:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f0121b64:	0f 86 72 ff ff ff    	jbe    f0121adc <check_boot_pgdir+0x64>
		if (i%KERNEL_STACK_SIZE == 0)
			continue;
		assert(check_va2pa(ptr_page_directory, KERN_STACK_TOP - NCPUS*KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
	}
	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0121b6a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121b71:	e9 af 00 00 00       	jmp    f0121c25 <check_boot_pgdir+0x1ad>
		switch (i) {
f0121b76:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121b79:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0121b7e:	74 11                	je     f0121b91 <check_boot_pgdir+0x119>
f0121b80:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0121b85:	72 36                	jb     f0121bbd <check_boot_pgdir+0x145>
f0121b87:	2d bd 03 00 00       	sub    $0x3bd,%eax
f0121b8c:	83 f8 02             	cmp    $0x2,%eax
f0121b8f:	77 2c                	ja     f0121bbd <check_boot_pgdir+0x145>
		case PDX(UVPT):
		case PDX(KERN_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f0121b91:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0121b96:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121b99:	c1 e2 02             	shl    $0x2,%edx
f0121b9c:	01 d0                	add    %edx,%eax
f0121b9e:	8b 00                	mov    (%eax),%eax
f0121ba0:	85 c0                	test   %eax,%eax
f0121ba2:	75 7a                	jne    f0121c1e <check_boot_pgdir+0x1a6>
f0121ba4:	68 12 00 13 f0       	push   $0xf0130012
f0121ba9:	68 97 fa 12 f0       	push   $0xf012fa97
f0121bae:	68 96 02 00 00       	push   $0x296
f0121bb3:	68 df fa 12 f0       	push   $0xf012fadf
f0121bb8:	e8 5d e7 fd ff       	call   f010031a <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f0121bbd:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f0121bc4:	76 2c                	jbe    f0121bf2 <check_boot_pgdir+0x17a>
				assert(ptr_page_directory[i]);
f0121bc6:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0121bcb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121bce:	c1 e2 02             	shl    $0x2,%edx
f0121bd1:	01 d0                	add    %edx,%eax
f0121bd3:	8b 00                	mov    (%eax),%eax
f0121bd5:	85 c0                	test   %eax,%eax
f0121bd7:	75 48                	jne    f0121c21 <check_boot_pgdir+0x1a9>
f0121bd9:	68 12 00 13 f0       	push   $0xf0130012
f0121bde:	68 97 fa 12 f0       	push   $0xf012fa97
f0121be3:	68 9a 02 00 00       	push   $0x29a
f0121be8:	68 df fa 12 f0       	push   $0xf012fadf
f0121bed:	e8 28 e7 fd ff       	call   f010031a <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f0121bf2:	a1 7c 2a 5a f0       	mov    0xf05a2a7c,%eax
f0121bf7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121bfa:	c1 e2 02             	shl    $0x2,%edx
f0121bfd:	01 d0                	add    %edx,%eax
f0121bff:	8b 00                	mov    (%eax),%eax
f0121c01:	85 c0                	test   %eax,%eax
f0121c03:	74 1c                	je     f0121c21 <check_boot_pgdir+0x1a9>
f0121c05:	68 28 00 13 f0       	push   $0xf0130028
f0121c0a:	68 97 fa 12 f0       	push   $0xf012fa97
f0121c0f:	68 9c 02 00 00       	push   $0x29c
f0121c14:	68 df fa 12 f0       	push   $0xf012fadf
f0121c19:	e8 fc e6 fd ff       	call   f010031a <_panic>
		case PDX(KERN_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f0121c1e:	90                   	nop
f0121c1f:	eb 01                	jmp    f0121c22 <check_boot_pgdir+0x1aa>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f0121c21:	90                   	nop
		if (i%KERNEL_STACK_SIZE == 0)
			continue;
		assert(check_va2pa(ptr_page_directory, KERN_STACK_TOP - NCPUS*KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
	}
	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0121c22:	ff 45 f4             	incl   -0xc(%ebp)
f0121c25:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0121c2c:	0f 86 44 ff ff ff    	jbe    f0121b76 <check_boot_pgdir+0xfe>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("*	check_boot_pgdir() succeeded!\n");
f0121c32:	83 ec 0c             	sub    $0xc,%esp
f0121c35:	68 44 00 13 f0       	push   $0xf0130044
f0121c3a:	e8 2d f3 fd ff       	call   f0100f6c <cprintf>
f0121c3f:	83 c4 10             	add    $0x10,%esp
}
f0121c42:	90                   	nop
f0121c43:	c9                   	leave  
f0121c44:	c3                   	ret    

f0121c45 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f0121c45:	55                   	push   %ebp
f0121c46:	89 e5                	mov    %esp,%ebp
f0121c48:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f0121c4b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121c4e:	c1 e8 16             	shr    $0x16,%eax
f0121c51:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0121c58:	8b 45 08             	mov    0x8(%ebp),%eax
f0121c5b:	01 d0                	add    %edx,%eax
f0121c5d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f0121c60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121c63:	8b 00                	mov    (%eax),%eax
f0121c65:	83 e0 01             	and    $0x1,%eax
f0121c68:	85 c0                	test   %eax,%eax
f0121c6a:	75 0a                	jne    f0121c76 <check_va2pa+0x31>
		return ~0;
f0121c6c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0121c71:	e9 87 00 00 00       	jmp    f0121cfd <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f0121c76:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121c79:	8b 00                	mov    (%eax),%eax
f0121c7b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0121c80:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0121c83:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121c86:	c1 e8 0c             	shr    $0xc,%eax
f0121c89:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0121c8c:	a1 58 26 5a f0       	mov    0xf05a2658,%eax
f0121c91:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0121c94:	72 17                	jb     f0121cad <check_va2pa+0x68>
f0121c96:	ff 75 f0             	pushl  -0x10(%ebp)
f0121c99:	68 68 00 13 f0       	push   $0xf0130068
f0121c9e:	68 b2 02 00 00       	push   $0x2b2
f0121ca3:	68 df fa 12 f0       	push   $0xf012fadf
f0121ca8:	e8 6d e6 fd ff       	call   f010031a <_panic>
f0121cad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121cb0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0121cb5:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f0121cb8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121cbb:	c1 e8 0c             	shr    $0xc,%eax
f0121cbe:	25 ff 03 00 00       	and    $0x3ff,%eax
f0121cc3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0121cca:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0121ccd:	01 d0                	add    %edx,%eax
f0121ccf:	8b 00                	mov    (%eax),%eax
f0121cd1:	83 e0 01             	and    $0x1,%eax
f0121cd4:	85 c0                	test   %eax,%eax
f0121cd6:	75 07                	jne    f0121cdf <check_va2pa+0x9a>
		return ~0;
f0121cd8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0121cdd:	eb 1e                	jmp    f0121cfd <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f0121cdf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121ce2:	c1 e8 0c             	shr    $0xc,%eax
f0121ce5:	25 ff 03 00 00       	and    $0x3ff,%eax
f0121cea:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0121cf1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0121cf4:	01 d0                	add    %edx,%eax
f0121cf6:	8b 00                	mov    (%eax),%eax
f0121cf8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0121cfd:	c9                   	leave  
f0121cfe:	c3                   	ret    

f0121cff <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f0121cff:	55                   	push   %ebp
f0121d00:	89 e5                	mov    %esp,%ebp
f0121d02:	53                   	push   %ebx
f0121d03:	83 ec 14             	sub    $0x14,%esp
f0121d06:	8b 45 10             	mov    0x10(%ebp),%eax
f0121d09:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0121d0c:	8b 45 14             	mov    0x14(%ebp),%eax
f0121d0f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f0121d12:	8b 45 18             	mov    0x18(%ebp),%eax
f0121d15:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d1a:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0121d1d:	77 55                	ja     f0121d74 <printnum+0x75>
f0121d1f:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0121d22:	72 05                	jb     f0121d29 <printnum+0x2a>
f0121d24:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0121d27:	77 4b                	ja     f0121d74 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f0121d29:	8b 45 1c             	mov    0x1c(%ebp),%eax
f0121d2c:	8d 58 ff             	lea    -0x1(%eax),%ebx
f0121d2f:	8b 45 18             	mov    0x18(%ebp),%eax
f0121d32:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d37:	52                   	push   %edx
f0121d38:	50                   	push   %eax
f0121d39:	ff 75 f4             	pushl  -0xc(%ebp)
f0121d3c:	ff 75 f0             	pushl  -0x10(%ebp)
f0121d3f:	e8 ec 1f 00 00       	call   f0123d30 <__udivdi3>
f0121d44:	83 c4 10             	add    $0x10,%esp
f0121d47:	83 ec 04             	sub    $0x4,%esp
f0121d4a:	ff 75 20             	pushl  0x20(%ebp)
f0121d4d:	53                   	push   %ebx
f0121d4e:	ff 75 18             	pushl  0x18(%ebp)
f0121d51:	52                   	push   %edx
f0121d52:	50                   	push   %eax
f0121d53:	ff 75 0c             	pushl  0xc(%ebp)
f0121d56:	ff 75 08             	pushl  0x8(%ebp)
f0121d59:	e8 a1 ff ff ff       	call   f0121cff <printnum>
f0121d5e:	83 c4 20             	add    $0x20,%esp
f0121d61:	eb 1a                	jmp    f0121d7d <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f0121d63:	83 ec 08             	sub    $0x8,%esp
f0121d66:	ff 75 0c             	pushl  0xc(%ebp)
f0121d69:	ff 75 20             	pushl  0x20(%ebp)
f0121d6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0121d6f:	ff d0                	call   *%eax
f0121d71:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f0121d74:	ff 4d 1c             	decl   0x1c(%ebp)
f0121d77:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f0121d7b:	7f e6                	jg     f0121d63 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f0121d7d:	8b 4d 18             	mov    0x18(%ebp),%ecx
f0121d80:	bb 00 00 00 00       	mov    $0x0,%ebx
f0121d85:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121d88:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121d8b:	53                   	push   %ebx
f0121d8c:	51                   	push   %ecx
f0121d8d:	52                   	push   %edx
f0121d8e:	50                   	push   %eax
f0121d8f:	e8 ac 20 00 00       	call   f0123e40 <__umoddi3>
f0121d94:	83 c4 10             	add    $0x10,%esp
f0121d97:	05 b4 02 13 f0       	add    $0xf01302b4,%eax
f0121d9c:	8a 00                	mov    (%eax),%al
f0121d9e:	0f be c0             	movsbl %al,%eax
f0121da1:	83 ec 08             	sub    $0x8,%esp
f0121da4:	ff 75 0c             	pushl  0xc(%ebp)
f0121da7:	50                   	push   %eax
f0121da8:	8b 45 08             	mov    0x8(%ebp),%eax
f0121dab:	ff d0                	call   *%eax
f0121dad:	83 c4 10             	add    $0x10,%esp
}
f0121db0:	90                   	nop
f0121db1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0121db4:	c9                   	leave  
f0121db5:	c3                   	ret    

f0121db6 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f0121db6:	55                   	push   %ebp
f0121db7:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0121db9:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0121dbd:	7e 1c                	jle    f0121ddb <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f0121dbf:	8b 45 08             	mov    0x8(%ebp),%eax
f0121dc2:	8b 00                	mov    (%eax),%eax
f0121dc4:	8d 50 08             	lea    0x8(%eax),%edx
f0121dc7:	8b 45 08             	mov    0x8(%ebp),%eax
f0121dca:	89 10                	mov    %edx,(%eax)
f0121dcc:	8b 45 08             	mov    0x8(%ebp),%eax
f0121dcf:	8b 00                	mov    (%eax),%eax
f0121dd1:	83 e8 08             	sub    $0x8,%eax
f0121dd4:	8b 50 04             	mov    0x4(%eax),%edx
f0121dd7:	8b 00                	mov    (%eax),%eax
f0121dd9:	eb 40                	jmp    f0121e1b <getuint+0x65>
	else if (lflag)
f0121ddb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0121ddf:	74 1e                	je     f0121dff <getuint+0x49>
		return va_arg(*ap, unsigned long);
f0121de1:	8b 45 08             	mov    0x8(%ebp),%eax
f0121de4:	8b 00                	mov    (%eax),%eax
f0121de6:	8d 50 04             	lea    0x4(%eax),%edx
f0121de9:	8b 45 08             	mov    0x8(%ebp),%eax
f0121dec:	89 10                	mov    %edx,(%eax)
f0121dee:	8b 45 08             	mov    0x8(%ebp),%eax
f0121df1:	8b 00                	mov    (%eax),%eax
f0121df3:	83 e8 04             	sub    $0x4,%eax
f0121df6:	8b 00                	mov    (%eax),%eax
f0121df8:	ba 00 00 00 00       	mov    $0x0,%edx
f0121dfd:	eb 1c                	jmp    f0121e1b <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f0121dff:	8b 45 08             	mov    0x8(%ebp),%eax
f0121e02:	8b 00                	mov    (%eax),%eax
f0121e04:	8d 50 04             	lea    0x4(%eax),%edx
f0121e07:	8b 45 08             	mov    0x8(%ebp),%eax
f0121e0a:	89 10                	mov    %edx,(%eax)
f0121e0c:	8b 45 08             	mov    0x8(%ebp),%eax
f0121e0f:	8b 00                	mov    (%eax),%eax
f0121e11:	83 e8 04             	sub    $0x4,%eax
f0121e14:	8b 00                	mov    (%eax),%eax
f0121e16:	ba 00 00 00 00       	mov    $0x0,%edx
}
f0121e1b:	5d                   	pop    %ebp
f0121e1c:	c3                   	ret    

f0121e1d <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f0121e1d:	55                   	push   %ebp
f0121e1e:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0121e20:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0121e24:	7e 1c                	jle    f0121e42 <getint+0x25>
		return va_arg(*ap, long long);
f0121e26:	8b 45 08             	mov    0x8(%ebp),%eax
f0121e29:	8b 00                	mov    (%eax),%eax
f0121e2b:	8d 50 08             	lea    0x8(%eax),%edx
f0121e2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0121e31:	89 10                	mov    %edx,(%eax)
f0121e33:	8b 45 08             	mov    0x8(%ebp),%eax
f0121e36:	8b 00                	mov    (%eax),%eax
f0121e38:	83 e8 08             	sub    $0x8,%eax
f0121e3b:	8b 50 04             	mov    0x4(%eax),%edx
f0121e3e:	8b 00                	mov    (%eax),%eax
f0121e40:	eb 38                	jmp    f0121e7a <getint+0x5d>
	else if (lflag)
f0121e42:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0121e46:	74 1a                	je     f0121e62 <getint+0x45>
		return va_arg(*ap, long);
f0121e48:	8b 45 08             	mov    0x8(%ebp),%eax
f0121e4b:	8b 00                	mov    (%eax),%eax
f0121e4d:	8d 50 04             	lea    0x4(%eax),%edx
f0121e50:	8b 45 08             	mov    0x8(%ebp),%eax
f0121e53:	89 10                	mov    %edx,(%eax)
f0121e55:	8b 45 08             	mov    0x8(%ebp),%eax
f0121e58:	8b 00                	mov    (%eax),%eax
f0121e5a:	83 e8 04             	sub    $0x4,%eax
f0121e5d:	8b 00                	mov    (%eax),%eax
f0121e5f:	99                   	cltd   
f0121e60:	eb 18                	jmp    f0121e7a <getint+0x5d>
	else
		return va_arg(*ap, int);
f0121e62:	8b 45 08             	mov    0x8(%ebp),%eax
f0121e65:	8b 00                	mov    (%eax),%eax
f0121e67:	8d 50 04             	lea    0x4(%eax),%edx
f0121e6a:	8b 45 08             	mov    0x8(%ebp),%eax
f0121e6d:	89 10                	mov    %edx,(%eax)
f0121e6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0121e72:	8b 00                	mov    (%eax),%eax
f0121e74:	83 e8 04             	sub    $0x4,%eax
f0121e77:	8b 00                	mov    (%eax),%eax
f0121e79:	99                   	cltd   
}
f0121e7a:	5d                   	pop    %ebp
f0121e7b:	c3                   	ret    

f0121e7c <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f0121e7c:	55                   	push   %ebp
f0121e7d:	89 e5                	mov    %esp,%ebp
f0121e7f:	56                   	push   %esi
f0121e80:	53                   	push   %ebx
f0121e81:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0121e84:	eb 17                	jmp    f0121e9d <vprintfmt+0x21>
			if (ch == '\0')
f0121e86:	85 db                	test   %ebx,%ebx
f0121e88:	0f 84 c1 03 00 00    	je     f012224f <vprintfmt+0x3d3>
				return;
			putch(ch, putdat);
f0121e8e:	83 ec 08             	sub    $0x8,%esp
f0121e91:	ff 75 0c             	pushl  0xc(%ebp)
f0121e94:	53                   	push   %ebx
f0121e95:	8b 45 08             	mov    0x8(%ebp),%eax
f0121e98:	ff d0                	call   *%eax
f0121e9a:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0121e9d:	8b 45 10             	mov    0x10(%ebp),%eax
f0121ea0:	8d 50 01             	lea    0x1(%eax),%edx
f0121ea3:	89 55 10             	mov    %edx,0x10(%ebp)
f0121ea6:	8a 00                	mov    (%eax),%al
f0121ea8:	0f b6 d8             	movzbl %al,%ebx
f0121eab:	83 fb 25             	cmp    $0x25,%ebx
f0121eae:	75 d6                	jne    f0121e86 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f0121eb0:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f0121eb4:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f0121ebb:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f0121ec2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f0121ec9:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0121ed0:	8b 45 10             	mov    0x10(%ebp),%eax
f0121ed3:	8d 50 01             	lea    0x1(%eax),%edx
f0121ed6:	89 55 10             	mov    %edx,0x10(%ebp)
f0121ed9:	8a 00                	mov    (%eax),%al
f0121edb:	0f b6 d8             	movzbl %al,%ebx
f0121ede:	8d 43 dd             	lea    -0x23(%ebx),%eax
f0121ee1:	83 f8 5b             	cmp    $0x5b,%eax
f0121ee4:	0f 87 3d 03 00 00    	ja     f0122227 <vprintfmt+0x3ab>
f0121eea:	8b 04 85 d8 02 13 f0 	mov    -0xfecfd28(,%eax,4),%eax
f0121ef1:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f0121ef3:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f0121ef7:	eb d7                	jmp    f0121ed0 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f0121ef9:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f0121efd:	eb d1                	jmp    f0121ed0 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0121eff:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f0121f06:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0121f09:	89 d0                	mov    %edx,%eax
f0121f0b:	c1 e0 02             	shl    $0x2,%eax
f0121f0e:	01 d0                	add    %edx,%eax
f0121f10:	01 c0                	add    %eax,%eax
f0121f12:	01 d8                	add    %ebx,%eax
f0121f14:	83 e8 30             	sub    $0x30,%eax
f0121f17:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f0121f1a:	8b 45 10             	mov    0x10(%ebp),%eax
f0121f1d:	8a 00                	mov    (%eax),%al
f0121f1f:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f0121f22:	83 fb 2f             	cmp    $0x2f,%ebx
f0121f25:	7e 3e                	jle    f0121f65 <vprintfmt+0xe9>
f0121f27:	83 fb 39             	cmp    $0x39,%ebx
f0121f2a:	7f 39                	jg     f0121f65 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0121f2c:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f0121f2f:	eb d5                	jmp    f0121f06 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f0121f31:	8b 45 14             	mov    0x14(%ebp),%eax
f0121f34:	83 c0 04             	add    $0x4,%eax
f0121f37:	89 45 14             	mov    %eax,0x14(%ebp)
f0121f3a:	8b 45 14             	mov    0x14(%ebp),%eax
f0121f3d:	83 e8 04             	sub    $0x4,%eax
f0121f40:	8b 00                	mov    (%eax),%eax
f0121f42:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f0121f45:	eb 1f                	jmp    f0121f66 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f0121f47:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0121f4b:	79 83                	jns    f0121ed0 <vprintfmt+0x54>
				width = 0;
f0121f4d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f0121f54:	e9 77 ff ff ff       	jmp    f0121ed0 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f0121f59:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f0121f60:	e9 6b ff ff ff       	jmp    f0121ed0 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f0121f65:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f0121f66:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0121f6a:	0f 89 60 ff ff ff    	jns    f0121ed0 <vprintfmt+0x54>
				width = precision, precision = -1;
f0121f70:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0121f73:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0121f76:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f0121f7d:	e9 4e ff ff ff       	jmp    f0121ed0 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f0121f82:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f0121f85:	e9 46 ff ff ff       	jmp    f0121ed0 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f0121f8a:	8b 45 14             	mov    0x14(%ebp),%eax
f0121f8d:	83 c0 04             	add    $0x4,%eax
f0121f90:	89 45 14             	mov    %eax,0x14(%ebp)
f0121f93:	8b 45 14             	mov    0x14(%ebp),%eax
f0121f96:	83 e8 04             	sub    $0x4,%eax
f0121f99:	8b 00                	mov    (%eax),%eax
f0121f9b:	83 ec 08             	sub    $0x8,%esp
f0121f9e:	ff 75 0c             	pushl  0xc(%ebp)
f0121fa1:	50                   	push   %eax
f0121fa2:	8b 45 08             	mov    0x8(%ebp),%eax
f0121fa5:	ff d0                	call   *%eax
f0121fa7:	83 c4 10             	add    $0x10,%esp
			break;
f0121faa:	e9 9b 02 00 00       	jmp    f012224a <vprintfmt+0x3ce>

		// error message
		case 'e':
			err = va_arg(ap, int);
f0121faf:	8b 45 14             	mov    0x14(%ebp),%eax
f0121fb2:	83 c0 04             	add    $0x4,%eax
f0121fb5:	89 45 14             	mov    %eax,0x14(%ebp)
f0121fb8:	8b 45 14             	mov    0x14(%ebp),%eax
f0121fbb:	83 e8 04             	sub    $0x4,%eax
f0121fbe:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f0121fc0:	85 db                	test   %ebx,%ebx
f0121fc2:	79 02                	jns    f0121fc6 <vprintfmt+0x14a>
				err = -err;
f0121fc4:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f0121fc6:	83 fb 64             	cmp    $0x64,%ebx
f0121fc9:	7f 0b                	jg     f0121fd6 <vprintfmt+0x15a>
f0121fcb:	8b 34 9d 20 01 13 f0 	mov    -0xfecfee0(,%ebx,4),%esi
f0121fd2:	85 f6                	test   %esi,%esi
f0121fd4:	75 19                	jne    f0121fef <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f0121fd6:	53                   	push   %ebx
f0121fd7:	68 c5 02 13 f0       	push   $0xf01302c5
f0121fdc:	ff 75 0c             	pushl  0xc(%ebp)
f0121fdf:	ff 75 08             	pushl  0x8(%ebp)
f0121fe2:	e8 70 02 00 00       	call   f0122257 <printfmt>
f0121fe7:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f0121fea:	e9 5b 02 00 00       	jmp    f012224a <vprintfmt+0x3ce>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f0121fef:	56                   	push   %esi
f0121ff0:	68 ce 02 13 f0       	push   $0xf01302ce
f0121ff5:	ff 75 0c             	pushl  0xc(%ebp)
f0121ff8:	ff 75 08             	pushl  0x8(%ebp)
f0121ffb:	e8 57 02 00 00       	call   f0122257 <printfmt>
f0122000:	83 c4 10             	add    $0x10,%esp
			break;
f0122003:	e9 42 02 00 00       	jmp    f012224a <vprintfmt+0x3ce>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f0122008:	8b 45 14             	mov    0x14(%ebp),%eax
f012200b:	83 c0 04             	add    $0x4,%eax
f012200e:	89 45 14             	mov    %eax,0x14(%ebp)
f0122011:	8b 45 14             	mov    0x14(%ebp),%eax
f0122014:	83 e8 04             	sub    $0x4,%eax
f0122017:	8b 30                	mov    (%eax),%esi
f0122019:	85 f6                	test   %esi,%esi
f012201b:	75 05                	jne    f0122022 <vprintfmt+0x1a6>
				p = "(null)";
f012201d:	be d1 02 13 f0       	mov    $0xf01302d1,%esi
			if (width > 0 && padc != '-')
f0122022:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0122026:	7e 6d                	jle    f0122095 <vprintfmt+0x219>
f0122028:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f012202c:	74 67                	je     f0122095 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f012202e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0122031:	83 ec 08             	sub    $0x8,%esp
f0122034:	50                   	push   %eax
f0122035:	56                   	push   %esi
f0122036:	e8 26 05 00 00       	call   f0122561 <strnlen>
f012203b:	83 c4 10             	add    $0x10,%esp
f012203e:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f0122041:	eb 16                	jmp    f0122059 <vprintfmt+0x1dd>
					putch(padc, putdat);
f0122043:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f0122047:	83 ec 08             	sub    $0x8,%esp
f012204a:	ff 75 0c             	pushl  0xc(%ebp)
f012204d:	50                   	push   %eax
f012204e:	8b 45 08             	mov    0x8(%ebp),%eax
f0122051:	ff d0                	call   *%eax
f0122053:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f0122056:	ff 4d e4             	decl   -0x1c(%ebp)
f0122059:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012205d:	7f e4                	jg     f0122043 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012205f:	eb 34                	jmp    f0122095 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f0122061:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0122065:	74 1c                	je     f0122083 <vprintfmt+0x207>
f0122067:	83 fb 1f             	cmp    $0x1f,%ebx
f012206a:	7e 05                	jle    f0122071 <vprintfmt+0x1f5>
f012206c:	83 fb 7e             	cmp    $0x7e,%ebx
f012206f:	7e 12                	jle    f0122083 <vprintfmt+0x207>
					putch('?', putdat);
f0122071:	83 ec 08             	sub    $0x8,%esp
f0122074:	ff 75 0c             	pushl  0xc(%ebp)
f0122077:	6a 3f                	push   $0x3f
f0122079:	8b 45 08             	mov    0x8(%ebp),%eax
f012207c:	ff d0                	call   *%eax
f012207e:	83 c4 10             	add    $0x10,%esp
f0122081:	eb 0f                	jmp    f0122092 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f0122083:	83 ec 08             	sub    $0x8,%esp
f0122086:	ff 75 0c             	pushl  0xc(%ebp)
f0122089:	53                   	push   %ebx
f012208a:	8b 45 08             	mov    0x8(%ebp),%eax
f012208d:	ff d0                	call   *%eax
f012208f:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0122092:	ff 4d e4             	decl   -0x1c(%ebp)
f0122095:	89 f0                	mov    %esi,%eax
f0122097:	8d 70 01             	lea    0x1(%eax),%esi
f012209a:	8a 00                	mov    (%eax),%al
f012209c:	0f be d8             	movsbl %al,%ebx
f012209f:	85 db                	test   %ebx,%ebx
f01220a1:	74 24                	je     f01220c7 <vprintfmt+0x24b>
f01220a3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01220a7:	78 b8                	js     f0122061 <vprintfmt+0x1e5>
f01220a9:	ff 4d e0             	decl   -0x20(%ebp)
f01220ac:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01220b0:	79 af                	jns    f0122061 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f01220b2:	eb 13                	jmp    f01220c7 <vprintfmt+0x24b>
				putch(' ', putdat);
f01220b4:	83 ec 08             	sub    $0x8,%esp
f01220b7:	ff 75 0c             	pushl  0xc(%ebp)
f01220ba:	6a 20                	push   $0x20
f01220bc:	8b 45 08             	mov    0x8(%ebp),%eax
f01220bf:	ff d0                	call   *%eax
f01220c1:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f01220c4:	ff 4d e4             	decl   -0x1c(%ebp)
f01220c7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01220cb:	7f e7                	jg     f01220b4 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f01220cd:	e9 78 01 00 00       	jmp    f012224a <vprintfmt+0x3ce>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f01220d2:	83 ec 08             	sub    $0x8,%esp
f01220d5:	ff 75 e8             	pushl  -0x18(%ebp)
f01220d8:	8d 45 14             	lea    0x14(%ebp),%eax
f01220db:	50                   	push   %eax
f01220dc:	e8 3c fd ff ff       	call   f0121e1d <getint>
f01220e1:	83 c4 10             	add    $0x10,%esp
f01220e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01220e7:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f01220ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01220ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01220f0:	85 d2                	test   %edx,%edx
f01220f2:	79 23                	jns    f0122117 <vprintfmt+0x29b>
				putch('-', putdat);
f01220f4:	83 ec 08             	sub    $0x8,%esp
f01220f7:	ff 75 0c             	pushl  0xc(%ebp)
f01220fa:	6a 2d                	push   $0x2d
f01220fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01220ff:	ff d0                	call   *%eax
f0122101:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f0122104:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0122107:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012210a:	f7 d8                	neg    %eax
f012210c:	83 d2 00             	adc    $0x0,%edx
f012210f:	f7 da                	neg    %edx
f0122111:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0122114:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f0122117:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012211e:	e9 bc 00 00 00       	jmp    f01221df <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f0122123:	83 ec 08             	sub    $0x8,%esp
f0122126:	ff 75 e8             	pushl  -0x18(%ebp)
f0122129:	8d 45 14             	lea    0x14(%ebp),%eax
f012212c:	50                   	push   %eax
f012212d:	e8 84 fc ff ff       	call   f0121db6 <getuint>
f0122132:	83 c4 10             	add    $0x10,%esp
f0122135:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0122138:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f012213b:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0122142:	e9 98 00 00 00       	jmp    f01221df <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f0122147:	83 ec 08             	sub    $0x8,%esp
f012214a:	ff 75 0c             	pushl  0xc(%ebp)
f012214d:	6a 58                	push   $0x58
f012214f:	8b 45 08             	mov    0x8(%ebp),%eax
f0122152:	ff d0                	call   *%eax
f0122154:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0122157:	83 ec 08             	sub    $0x8,%esp
f012215a:	ff 75 0c             	pushl  0xc(%ebp)
f012215d:	6a 58                	push   $0x58
f012215f:	8b 45 08             	mov    0x8(%ebp),%eax
f0122162:	ff d0                	call   *%eax
f0122164:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0122167:	83 ec 08             	sub    $0x8,%esp
f012216a:	ff 75 0c             	pushl  0xc(%ebp)
f012216d:	6a 58                	push   $0x58
f012216f:	8b 45 08             	mov    0x8(%ebp),%eax
f0122172:	ff d0                	call   *%eax
f0122174:	83 c4 10             	add    $0x10,%esp
			break;
f0122177:	e9 ce 00 00 00       	jmp    f012224a <vprintfmt+0x3ce>

		// pointer
		case 'p':
			putch('0', putdat);
f012217c:	83 ec 08             	sub    $0x8,%esp
f012217f:	ff 75 0c             	pushl  0xc(%ebp)
f0122182:	6a 30                	push   $0x30
f0122184:	8b 45 08             	mov    0x8(%ebp),%eax
f0122187:	ff d0                	call   *%eax
f0122189:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f012218c:	83 ec 08             	sub    $0x8,%esp
f012218f:	ff 75 0c             	pushl  0xc(%ebp)
f0122192:	6a 78                	push   $0x78
f0122194:	8b 45 08             	mov    0x8(%ebp),%eax
f0122197:	ff d0                	call   *%eax
f0122199:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f012219c:	8b 45 14             	mov    0x14(%ebp),%eax
f012219f:	83 c0 04             	add    $0x4,%eax
f01221a2:	89 45 14             	mov    %eax,0x14(%ebp)
f01221a5:	8b 45 14             	mov    0x14(%ebp),%eax
f01221a8:	83 e8 04             	sub    $0x4,%eax
f01221ab:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f01221ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01221b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f01221b7:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f01221be:	eb 1f                	jmp    f01221df <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f01221c0:	83 ec 08             	sub    $0x8,%esp
f01221c3:	ff 75 e8             	pushl  -0x18(%ebp)
f01221c6:	8d 45 14             	lea    0x14(%ebp),%eax
f01221c9:	50                   	push   %eax
f01221ca:	e8 e7 fb ff ff       	call   f0121db6 <getuint>
f01221cf:	83 c4 10             	add    $0x10,%esp
f01221d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01221d5:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f01221d8:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f01221df:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f01221e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01221e6:	83 ec 04             	sub    $0x4,%esp
f01221e9:	52                   	push   %edx
f01221ea:	ff 75 e4             	pushl  -0x1c(%ebp)
f01221ed:	50                   	push   %eax
f01221ee:	ff 75 f4             	pushl  -0xc(%ebp)
f01221f1:	ff 75 f0             	pushl  -0x10(%ebp)
f01221f4:	ff 75 0c             	pushl  0xc(%ebp)
f01221f7:	ff 75 08             	pushl  0x8(%ebp)
f01221fa:	e8 00 fb ff ff       	call   f0121cff <printnum>
f01221ff:	83 c4 20             	add    $0x20,%esp
			break;
f0122202:	eb 46                	jmp    f012224a <vprintfmt+0x3ce>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f0122204:	83 ec 08             	sub    $0x8,%esp
f0122207:	ff 75 0c             	pushl  0xc(%ebp)
f012220a:	53                   	push   %ebx
f012220b:	8b 45 08             	mov    0x8(%ebp),%eax
f012220e:	ff d0                	call   *%eax
f0122210:	83 c4 10             	add    $0x10,%esp
			break;
f0122213:	eb 35                	jmp    f012224a <vprintfmt+0x3ce>

		/**********************************/
		/*2023*/
		// DON'T Print Program Name & UD
		case '~':
			printProgName = 0;
f0122215:	c6 05 f0 fd 59 f0 00 	movb   $0x0,0xf059fdf0
			break;
f012221c:	eb 2c                	jmp    f012224a <vprintfmt+0x3ce>
		// Print Program Name & UD
		case '@':
			printProgName = 1;
f012221e:	c6 05 f0 fd 59 f0 01 	movb   $0x1,0xf059fdf0
			break;
f0122225:	eb 23                	jmp    f012224a <vprintfmt+0x3ce>
		/**********************************/

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f0122227:	83 ec 08             	sub    $0x8,%esp
f012222a:	ff 75 0c             	pushl  0xc(%ebp)
f012222d:	6a 25                	push   $0x25
f012222f:	8b 45 08             	mov    0x8(%ebp),%eax
f0122232:	ff d0                	call   *%eax
f0122234:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f0122237:	ff 4d 10             	decl   0x10(%ebp)
f012223a:	eb 03                	jmp    f012223f <vprintfmt+0x3c3>
f012223c:	ff 4d 10             	decl   0x10(%ebp)
f012223f:	8b 45 10             	mov    0x10(%ebp),%eax
f0122242:	48                   	dec    %eax
f0122243:	8a 00                	mov    (%eax),%al
f0122245:	3c 25                	cmp    $0x25,%al
f0122247:	75 f3                	jne    f012223c <vprintfmt+0x3c0>
				/* do nothing */;
			break;
f0122249:	90                   	nop
		}
	}
f012224a:	e9 35 fc ff ff       	jmp    f0121e84 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f012224f:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f0122250:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0122253:	5b                   	pop    %ebx
f0122254:	5e                   	pop    %esi
f0122255:	5d                   	pop    %ebp
f0122256:	c3                   	ret    

f0122257 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f0122257:	55                   	push   %ebp
f0122258:	89 e5                	mov    %esp,%ebp
f012225a:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f012225d:	8d 45 10             	lea    0x10(%ebp),%eax
f0122260:	83 c0 04             	add    $0x4,%eax
f0122263:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f0122266:	8b 45 10             	mov    0x10(%ebp),%eax
f0122269:	ff 75 f4             	pushl  -0xc(%ebp)
f012226c:	50                   	push   %eax
f012226d:	ff 75 0c             	pushl  0xc(%ebp)
f0122270:	ff 75 08             	pushl  0x8(%ebp)
f0122273:	e8 04 fc ff ff       	call   f0121e7c <vprintfmt>
f0122278:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f012227b:	90                   	nop
f012227c:	c9                   	leave  
f012227d:	c3                   	ret    

f012227e <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f012227e:	55                   	push   %ebp
f012227f:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f0122281:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122284:	8b 40 08             	mov    0x8(%eax),%eax
f0122287:	8d 50 01             	lea    0x1(%eax),%edx
f012228a:	8b 45 0c             	mov    0xc(%ebp),%eax
f012228d:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f0122290:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122293:	8b 10                	mov    (%eax),%edx
f0122295:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122298:	8b 40 04             	mov    0x4(%eax),%eax
f012229b:	39 c2                	cmp    %eax,%edx
f012229d:	73 12                	jae    f01222b1 <sprintputch+0x33>
		*b->buf++ = ch;
f012229f:	8b 45 0c             	mov    0xc(%ebp),%eax
f01222a2:	8b 00                	mov    (%eax),%eax
f01222a4:	8d 48 01             	lea    0x1(%eax),%ecx
f01222a7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01222aa:	89 0a                	mov    %ecx,(%edx)
f01222ac:	8b 55 08             	mov    0x8(%ebp),%edx
f01222af:	88 10                	mov    %dl,(%eax)
}
f01222b1:	90                   	nop
f01222b2:	5d                   	pop    %ebp
f01222b3:	c3                   	ret    

f01222b4 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f01222b4:	55                   	push   %ebp
f01222b5:	89 e5                	mov    %esp,%ebp
f01222b7:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f01222ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01222bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01222c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01222c3:	8d 50 ff             	lea    -0x1(%eax),%edx
f01222c6:	8b 45 08             	mov    0x8(%ebp),%eax
f01222c9:	01 d0                	add    %edx,%eax
f01222cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01222ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f01222d5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01222d9:	74 06                	je     f01222e1 <vsnprintf+0x2d>
f01222db:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01222df:	7f 07                	jg     f01222e8 <vsnprintf+0x34>
		return -E_INVAL;
f01222e1:	b8 03 00 00 00       	mov    $0x3,%eax
f01222e6:	eb 20                	jmp    f0122308 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f01222e8:	ff 75 14             	pushl  0x14(%ebp)
f01222eb:	ff 75 10             	pushl  0x10(%ebp)
f01222ee:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01222f1:	50                   	push   %eax
f01222f2:	68 7e 22 12 f0       	push   $0xf012227e
f01222f7:	e8 80 fb ff ff       	call   f0121e7c <vprintfmt>
f01222fc:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f01222ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0122302:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f0122305:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0122308:	c9                   	leave  
f0122309:	c3                   	ret    

f012230a <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f012230a:	55                   	push   %ebp
f012230b:	89 e5                	mov    %esp,%ebp
f012230d:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f0122310:	8d 45 10             	lea    0x10(%ebp),%eax
f0122313:	83 c0 04             	add    $0x4,%eax
f0122316:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f0122319:	8b 45 10             	mov    0x10(%ebp),%eax
f012231c:	ff 75 f4             	pushl  -0xc(%ebp)
f012231f:	50                   	push   %eax
f0122320:	ff 75 0c             	pushl  0xc(%ebp)
f0122323:	ff 75 08             	pushl  0x8(%ebp)
f0122326:	e8 89 ff ff ff       	call   f01222b4 <vsnprintf>
f012232b:	83 c4 10             	add    $0x10,%esp
f012232e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f0122331:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0122334:	c9                   	leave  
f0122335:	c3                   	ret    

f0122336 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f0122336:	55                   	push   %ebp
f0122337:	89 e5                	mov    %esp,%ebp
f0122339:	83 ec 18             	sub    $0x18,%esp
	int i, c, echoing;

	if (prompt != NULL)
f012233c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0122340:	74 13                	je     f0122355 <readline+0x1f>
		cprintf("%s", prompt);
f0122342:	83 ec 08             	sub    $0x8,%esp
f0122345:	ff 75 08             	pushl  0x8(%ebp)
f0122348:	68 48 04 13 f0       	push   $0xf0130448
f012234d:	e8 1a ec fd ff       	call   f0100f6c <cprintf>
f0122352:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0122355:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f012235c:	83 ec 0c             	sub    $0xc,%esp
f012235f:	6a 00                	push   $0x0
f0122361:	e8 13 eb fd ff       	call   f0100e79 <iscons>
f0122366:	83 c4 10             	add    $0x10,%esp
f0122369:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f012236c:	e8 ef ea fd ff       	call   f0100e60 <getchar>
f0122371:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0122374:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122378:	79 22                	jns    f012239c <readline+0x66>
			if (c != -E_EOF)
f012237a:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012237e:	0f 84 ad 00 00 00    	je     f0122431 <readline+0xfb>
				cprintf("read error: %e\n", c);
f0122384:	83 ec 08             	sub    $0x8,%esp
f0122387:	ff 75 ec             	pushl  -0x14(%ebp)
f012238a:	68 4b 04 13 f0       	push   $0xf013044b
f012238f:	e8 d8 eb fd ff       	call   f0100f6c <cprintf>
f0122394:	83 c4 10             	add    $0x10,%esp
			break;
f0122397:	e9 95 00 00 00       	jmp    f0122431 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f012239c:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f01223a0:	7e 34                	jle    f01223d6 <readline+0xa0>
f01223a2:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f01223a9:	7f 2b                	jg     f01223d6 <readline+0xa0>
			if (echoing)
f01223ab:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01223af:	74 0e                	je     f01223bf <readline+0x89>
				cputchar(c);
f01223b1:	83 ec 0c             	sub    $0xc,%esp
f01223b4:	ff 75 ec             	pushl  -0x14(%ebp)
f01223b7:	e8 8d ea fd ff       	call   f0100e49 <cputchar>
f01223bc:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01223bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01223c2:	8d 50 01             	lea    0x1(%eax),%edx
f01223c5:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01223c8:	89 c2                	mov    %eax,%edx
f01223ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01223cd:	01 d0                	add    %edx,%eax
f01223cf:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01223d2:	88 10                	mov    %dl,(%eax)
f01223d4:	eb 56                	jmp    f012242c <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f01223d6:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f01223da:	75 1f                	jne    f01223fb <readline+0xc5>
f01223dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01223e0:	7e 19                	jle    f01223fb <readline+0xc5>
			if (echoing)
f01223e2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01223e6:	74 0e                	je     f01223f6 <readline+0xc0>
				cputchar(c);
f01223e8:	83 ec 0c             	sub    $0xc,%esp
f01223eb:	ff 75 ec             	pushl  -0x14(%ebp)
f01223ee:	e8 56 ea fd ff       	call   f0100e49 <cputchar>
f01223f3:	83 c4 10             	add    $0x10,%esp

			i--;
f01223f6:	ff 4d f4             	decl   -0xc(%ebp)
f01223f9:	eb 31                	jmp    f012242c <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f01223fb:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f01223ff:	74 0a                	je     f012240b <readline+0xd5>
f0122401:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0122405:	0f 85 61 ff ff ff    	jne    f012236c <readline+0x36>
			if (echoing)
f012240b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012240f:	74 0e                	je     f012241f <readline+0xe9>
				cputchar(c);
f0122411:	83 ec 0c             	sub    $0xc,%esp
f0122414:	ff 75 ec             	pushl  -0x14(%ebp)
f0122417:	e8 2d ea fd ff       	call   f0100e49 <cputchar>
f012241c:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f012241f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122422:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122425:	01 d0                	add    %edx,%eax
f0122427:	c6 00 00             	movb   $0x0,(%eax)
			break;
f012242a:	eb 06                	jmp    f0122432 <readline+0xfc>
		}
	}
f012242c:	e9 3b ff ff ff       	jmp    f012236c <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			break;
f0122431:	90                   	nop

			buf[i] = 0;
			break;
		}
	}
}
f0122432:	90                   	nop
f0122433:	c9                   	leave  
f0122434:	c3                   	ret    

f0122435 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f0122435:	55                   	push   %ebp
f0122436:	89 e5                	mov    %esp,%ebp
f0122438:	83 ec 18             	sub    $0x18,%esp
	sys_lock_cons();
f012243b:	e8 51 b4 fe ff       	call   f010d891 <sys_lock_cons>
	{
		int i, c, echoing;

		if (prompt != NULL)
f0122440:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0122444:	74 13                	je     f0122459 <atomic_readline+0x24>
			cprintf("%s", prompt);
f0122446:	83 ec 08             	sub    $0x8,%esp
f0122449:	ff 75 08             	pushl  0x8(%ebp)
f012244c:	68 48 04 13 f0       	push   $0xf0130448
f0122451:	e8 16 eb fd ff       	call   f0100f6c <cprintf>
f0122456:	83 c4 10             	add    $0x10,%esp

		i = 0;
f0122459:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		echoing = iscons(0);
f0122460:	83 ec 0c             	sub    $0xc,%esp
f0122463:	6a 00                	push   $0x0
f0122465:	e8 0f ea fd ff       	call   f0100e79 <iscons>
f012246a:	83 c4 10             	add    $0x10,%esp
f012246d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		while (1) {
			c = getchar();
f0122470:	e8 eb e9 fd ff       	call   f0100e60 <getchar>
f0122475:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (c < 0) {
f0122478:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012247c:	79 22                	jns    f01224a0 <atomic_readline+0x6b>
				if (c != -E_EOF)
f012247e:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0122482:	0f 84 ad 00 00 00    	je     f0122535 <atomic_readline+0x100>
					cprintf("read error: %e\n", c);
f0122488:	83 ec 08             	sub    $0x8,%esp
f012248b:	ff 75 ec             	pushl  -0x14(%ebp)
f012248e:	68 4b 04 13 f0       	push   $0xf013044b
f0122493:	e8 d4 ea fd ff       	call   f0100f6c <cprintf>
f0122498:	83 c4 10             	add    $0x10,%esp
				break;
f012249b:	e9 95 00 00 00       	jmp    f0122535 <atomic_readline+0x100>
			} else if (c >= ' ' && i < BUFLEN-1) {
f01224a0:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f01224a4:	7e 34                	jle    f01224da <atomic_readline+0xa5>
f01224a6:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f01224ad:	7f 2b                	jg     f01224da <atomic_readline+0xa5>
				if (echoing)
f01224af:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01224b3:	74 0e                	je     f01224c3 <atomic_readline+0x8e>
					cputchar(c);
f01224b5:	83 ec 0c             	sub    $0xc,%esp
f01224b8:	ff 75 ec             	pushl  -0x14(%ebp)
f01224bb:	e8 89 e9 fd ff       	call   f0100e49 <cputchar>
f01224c0:	83 c4 10             	add    $0x10,%esp
				buf[i++] = c;
f01224c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01224c6:	8d 50 01             	lea    0x1(%eax),%edx
f01224c9:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01224cc:	89 c2                	mov    %eax,%edx
f01224ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f01224d1:	01 d0                	add    %edx,%eax
f01224d3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01224d6:	88 10                	mov    %dl,(%eax)
f01224d8:	eb 56                	jmp    f0122530 <atomic_readline+0xfb>
			} else if (c == '\b' && i > 0) {
f01224da:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f01224de:	75 1f                	jne    f01224ff <atomic_readline+0xca>
f01224e0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01224e4:	7e 19                	jle    f01224ff <atomic_readline+0xca>
				if (echoing)
f01224e6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01224ea:	74 0e                	je     f01224fa <atomic_readline+0xc5>
					cputchar(c);
f01224ec:	83 ec 0c             	sub    $0xc,%esp
f01224ef:	ff 75 ec             	pushl  -0x14(%ebp)
f01224f2:	e8 52 e9 fd ff       	call   f0100e49 <cputchar>
f01224f7:	83 c4 10             	add    $0x10,%esp
				i--;
f01224fa:	ff 4d f4             	decl   -0xc(%ebp)
f01224fd:	eb 31                	jmp    f0122530 <atomic_readline+0xfb>
			} else if (c == '\n' || c == '\r') {
f01224ff:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0122503:	74 0a                	je     f012250f <atomic_readline+0xda>
f0122505:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0122509:	0f 85 61 ff ff ff    	jne    f0122470 <atomic_readline+0x3b>
				if (echoing)
f012250f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0122513:	74 0e                	je     f0122523 <atomic_readline+0xee>
					cputchar(c);
f0122515:	83 ec 0c             	sub    $0xc,%esp
f0122518:	ff 75 ec             	pushl  -0x14(%ebp)
f012251b:	e8 29 e9 fd ff       	call   f0100e49 <cputchar>
f0122520:	83 c4 10             	add    $0x10,%esp
				buf[i] = 0;
f0122523:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122526:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122529:	01 d0                	add    %edx,%eax
f012252b:	c6 00 00             	movb   $0x0,(%eax)
				break;
f012252e:	eb 06                	jmp    f0122536 <atomic_readline+0x101>
			}
		}
f0122530:	e9 3b ff ff ff       	jmp    f0122470 <atomic_readline+0x3b>
		while (1) {
			c = getchar();
			if (c < 0) {
				if (c != -E_EOF)
					cprintf("read error: %e\n", c);
				break;
f0122535:	90                   	nop
				buf[i] = 0;
				break;
			}
		}
	}
	sys_unlock_cons();
f0122536:	e8 64 b3 fe ff       	call   f010d89f <sys_unlock_cons>
}
f012253b:	90                   	nop
f012253c:	c9                   	leave  
f012253d:	c3                   	ret    

f012253e <strlen>:
#include <inc/string.h>
#include <inc/assert.h>

int
strlen(const char *s)
{
f012253e:	55                   	push   %ebp
f012253f:	89 e5                	mov    %esp,%ebp
f0122541:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f0122544:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012254b:	eb 06                	jmp    f0122553 <strlen+0x15>
		n++;
f012254d:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f0122550:	ff 45 08             	incl   0x8(%ebp)
f0122553:	8b 45 08             	mov    0x8(%ebp),%eax
f0122556:	8a 00                	mov    (%eax),%al
f0122558:	84 c0                	test   %al,%al
f012255a:	75 f1                	jne    f012254d <strlen+0xf>
		n++;
	return n;
f012255c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012255f:	c9                   	leave  
f0122560:	c3                   	ret    

f0122561 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f0122561:	55                   	push   %ebp
f0122562:	89 e5                	mov    %esp,%ebp
f0122564:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0122567:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012256e:	eb 09                	jmp    f0122579 <strnlen+0x18>
		n++;
f0122570:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0122573:	ff 45 08             	incl   0x8(%ebp)
f0122576:	ff 4d 0c             	decl   0xc(%ebp)
f0122579:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012257d:	74 09                	je     f0122588 <strnlen+0x27>
f012257f:	8b 45 08             	mov    0x8(%ebp),%eax
f0122582:	8a 00                	mov    (%eax),%al
f0122584:	84 c0                	test   %al,%al
f0122586:	75 e8                	jne    f0122570 <strnlen+0xf>
		n++;
	return n;
f0122588:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012258b:	c9                   	leave  
f012258c:	c3                   	ret    

f012258d <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f012258d:	55                   	push   %ebp
f012258e:	89 e5                	mov    %esp,%ebp
f0122590:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f0122593:	8b 45 08             	mov    0x8(%ebp),%eax
f0122596:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f0122599:	90                   	nop
f012259a:	8b 45 08             	mov    0x8(%ebp),%eax
f012259d:	8d 50 01             	lea    0x1(%eax),%edx
f01225a0:	89 55 08             	mov    %edx,0x8(%ebp)
f01225a3:	8b 55 0c             	mov    0xc(%ebp),%edx
f01225a6:	8d 4a 01             	lea    0x1(%edx),%ecx
f01225a9:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f01225ac:	8a 12                	mov    (%edx),%dl
f01225ae:	88 10                	mov    %dl,(%eax)
f01225b0:	8a 00                	mov    (%eax),%al
f01225b2:	84 c0                	test   %al,%al
f01225b4:	75 e4                	jne    f012259a <strcpy+0xd>
		/* do nothing */;
	return ret;
f01225b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01225b9:	c9                   	leave  
f01225ba:	c3                   	ret    

f01225bb <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f01225bb:	55                   	push   %ebp
f01225bc:	89 e5                	mov    %esp,%ebp
f01225be:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f01225c1:	8b 45 08             	mov    0x8(%ebp),%eax
f01225c4:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f01225c7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01225ce:	eb 1f                	jmp    f01225ef <strncpy+0x34>
		*dst++ = *src;
f01225d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01225d3:	8d 50 01             	lea    0x1(%eax),%edx
f01225d6:	89 55 08             	mov    %edx,0x8(%ebp)
f01225d9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01225dc:	8a 12                	mov    (%edx),%dl
f01225de:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f01225e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01225e3:	8a 00                	mov    (%eax),%al
f01225e5:	84 c0                	test   %al,%al
f01225e7:	74 03                	je     f01225ec <strncpy+0x31>
			src++;
f01225e9:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f01225ec:	ff 45 fc             	incl   -0x4(%ebp)
f01225ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01225f2:	3b 45 10             	cmp    0x10(%ebp),%eax
f01225f5:	72 d9                	jb     f01225d0 <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f01225f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01225fa:	c9                   	leave  
f01225fb:	c3                   	ret    

f01225fc <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f01225fc:	55                   	push   %ebp
f01225fd:	89 e5                	mov    %esp,%ebp
f01225ff:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f0122602:	8b 45 08             	mov    0x8(%ebp),%eax
f0122605:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f0122608:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012260c:	74 30                	je     f012263e <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f012260e:	eb 16                	jmp    f0122626 <strlcpy+0x2a>
			*dst++ = *src++;
f0122610:	8b 45 08             	mov    0x8(%ebp),%eax
f0122613:	8d 50 01             	lea    0x1(%eax),%edx
f0122616:	89 55 08             	mov    %edx,0x8(%ebp)
f0122619:	8b 55 0c             	mov    0xc(%ebp),%edx
f012261c:	8d 4a 01             	lea    0x1(%edx),%ecx
f012261f:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0122622:	8a 12                	mov    (%edx),%dl
f0122624:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0122626:	ff 4d 10             	decl   0x10(%ebp)
f0122629:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012262d:	74 09                	je     f0122638 <strlcpy+0x3c>
f012262f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122632:	8a 00                	mov    (%eax),%al
f0122634:	84 c0                	test   %al,%al
f0122636:	75 d8                	jne    f0122610 <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f0122638:	8b 45 08             	mov    0x8(%ebp),%eax
f012263b:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f012263e:	8b 55 08             	mov    0x8(%ebp),%edx
f0122641:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0122644:	29 c2                	sub    %eax,%edx
f0122646:	89 d0                	mov    %edx,%eax
}
f0122648:	c9                   	leave  
f0122649:	c3                   	ret    

f012264a <strcmp>:

int
strcmp(const char *p, const char *q)
{
f012264a:	55                   	push   %ebp
f012264b:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f012264d:	eb 06                	jmp    f0122655 <strcmp+0xb>
		p++, q++;
f012264f:	ff 45 08             	incl   0x8(%ebp)
f0122652:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f0122655:	8b 45 08             	mov    0x8(%ebp),%eax
f0122658:	8a 00                	mov    (%eax),%al
f012265a:	84 c0                	test   %al,%al
f012265c:	74 0e                	je     f012266c <strcmp+0x22>
f012265e:	8b 45 08             	mov    0x8(%ebp),%eax
f0122661:	8a 10                	mov    (%eax),%dl
f0122663:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122666:	8a 00                	mov    (%eax),%al
f0122668:	38 c2                	cmp    %al,%dl
f012266a:	74 e3                	je     f012264f <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f012266c:	8b 45 08             	mov    0x8(%ebp),%eax
f012266f:	8a 00                	mov    (%eax),%al
f0122671:	0f b6 d0             	movzbl %al,%edx
f0122674:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122677:	8a 00                	mov    (%eax),%al
f0122679:	0f b6 c0             	movzbl %al,%eax
f012267c:	29 c2                	sub    %eax,%edx
f012267e:	89 d0                	mov    %edx,%eax
}
f0122680:	5d                   	pop    %ebp
f0122681:	c3                   	ret    

f0122682 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f0122682:	55                   	push   %ebp
f0122683:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f0122685:	eb 09                	jmp    f0122690 <strncmp+0xe>
		n--, p++, q++;
f0122687:	ff 4d 10             	decl   0x10(%ebp)
f012268a:	ff 45 08             	incl   0x8(%ebp)
f012268d:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f0122690:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0122694:	74 17                	je     f01226ad <strncmp+0x2b>
f0122696:	8b 45 08             	mov    0x8(%ebp),%eax
f0122699:	8a 00                	mov    (%eax),%al
f012269b:	84 c0                	test   %al,%al
f012269d:	74 0e                	je     f01226ad <strncmp+0x2b>
f012269f:	8b 45 08             	mov    0x8(%ebp),%eax
f01226a2:	8a 10                	mov    (%eax),%dl
f01226a4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01226a7:	8a 00                	mov    (%eax),%al
f01226a9:	38 c2                	cmp    %al,%dl
f01226ab:	74 da                	je     f0122687 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f01226ad:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01226b1:	75 07                	jne    f01226ba <strncmp+0x38>
		return 0;
f01226b3:	b8 00 00 00 00       	mov    $0x0,%eax
f01226b8:	eb 14                	jmp    f01226ce <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f01226ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01226bd:	8a 00                	mov    (%eax),%al
f01226bf:	0f b6 d0             	movzbl %al,%edx
f01226c2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01226c5:	8a 00                	mov    (%eax),%al
f01226c7:	0f b6 c0             	movzbl %al,%eax
f01226ca:	29 c2                	sub    %eax,%edx
f01226cc:	89 d0                	mov    %edx,%eax
}
f01226ce:	5d                   	pop    %ebp
f01226cf:	c3                   	ret    

f01226d0 <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f01226d0:	55                   	push   %ebp
f01226d1:	89 e5                	mov    %esp,%ebp
f01226d3:	83 ec 04             	sub    $0x4,%esp
f01226d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01226d9:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f01226dc:	eb 12                	jmp    f01226f0 <strchr+0x20>
		if (*s == c)
f01226de:	8b 45 08             	mov    0x8(%ebp),%eax
f01226e1:	8a 00                	mov    (%eax),%al
f01226e3:	3a 45 fc             	cmp    -0x4(%ebp),%al
f01226e6:	75 05                	jne    f01226ed <strchr+0x1d>
			return (char *) s;
f01226e8:	8b 45 08             	mov    0x8(%ebp),%eax
f01226eb:	eb 11                	jmp    f01226fe <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f01226ed:	ff 45 08             	incl   0x8(%ebp)
f01226f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01226f3:	8a 00                	mov    (%eax),%al
f01226f5:	84 c0                	test   %al,%al
f01226f7:	75 e5                	jne    f01226de <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f01226f9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01226fe:	c9                   	leave  
f01226ff:	c3                   	ret    

f0122700 <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f0122700:	55                   	push   %ebp
f0122701:	89 e5                	mov    %esp,%ebp
f0122703:	83 ec 04             	sub    $0x4,%esp
f0122706:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122709:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f012270c:	eb 0d                	jmp    f012271b <strfind+0x1b>
		if (*s == c)
f012270e:	8b 45 08             	mov    0x8(%ebp),%eax
f0122711:	8a 00                	mov    (%eax),%al
f0122713:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0122716:	74 0e                	je     f0122726 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0122718:	ff 45 08             	incl   0x8(%ebp)
f012271b:	8b 45 08             	mov    0x8(%ebp),%eax
f012271e:	8a 00                	mov    (%eax),%al
f0122720:	84 c0                	test   %al,%al
f0122722:	75 ea                	jne    f012270e <strfind+0xe>
f0122724:	eb 01                	jmp    f0122727 <strfind+0x27>
		if (*s == c)
			break;
f0122726:	90                   	nop
	return (char *) s;
f0122727:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012272a:	c9                   	leave  
f012272b:	c3                   	ret    

f012272c <memset>:


void *
memset(void *v, int c, uint32 n)
{
f012272c:	55                   	push   %ebp
f012272d:	89 e5                	mov    %esp,%ebp
f012272f:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f0122732:	8b 45 08             	mov    0x8(%ebp),%eax
f0122735:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0122738:	8b 45 10             	mov    0x10(%ebp),%eax
f012273b:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f012273e:	eb 0e                	jmp    f012274e <memset+0x22>
		*p++ = c;
f0122740:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0122743:	8d 50 01             	lea    0x1(%eax),%edx
f0122746:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0122749:	8b 55 0c             	mov    0xc(%ebp),%edx
f012274c:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f012274e:	ff 4d f8             	decl   -0x8(%ebp)
f0122751:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0122755:	79 e9                	jns    f0122740 <memset+0x14>
		*p++ = c;

	return v;
f0122757:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012275a:	c9                   	leave  
f012275b:	c3                   	ret    

f012275c <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f012275c:	55                   	push   %ebp
f012275d:	89 e5                	mov    %esp,%ebp
f012275f:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0122762:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122765:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0122768:	8b 45 08             	mov    0x8(%ebp),%eax
f012276b:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f012276e:	eb 16                	jmp    f0122786 <memcpy+0x2a>
		*d++ = *s++;
f0122770:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0122773:	8d 50 01             	lea    0x1(%eax),%edx
f0122776:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0122779:	8b 55 fc             	mov    -0x4(%ebp),%edx
f012277c:	8d 4a 01             	lea    0x1(%edx),%ecx
f012277f:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0122782:	8a 12                	mov    (%edx),%dl
f0122784:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f0122786:	8b 45 10             	mov    0x10(%ebp),%eax
f0122789:	8d 50 ff             	lea    -0x1(%eax),%edx
f012278c:	89 55 10             	mov    %edx,0x10(%ebp)
f012278f:	85 c0                	test   %eax,%eax
f0122791:	75 dd                	jne    f0122770 <memcpy+0x14>
		*d++ = *s++;

	return dst;
f0122793:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0122796:	c9                   	leave  
f0122797:	c3                   	ret    

f0122798 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0122798:	55                   	push   %ebp
f0122799:	89 e5                	mov    %esp,%ebp
f012279b:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f012279e:	8b 45 0c             	mov    0xc(%ebp),%eax
f01227a1:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f01227a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01227a7:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f01227aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01227ad:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f01227b0:	73 50                	jae    f0122802 <memmove+0x6a>
f01227b2:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01227b5:	8b 45 10             	mov    0x10(%ebp),%eax
f01227b8:	01 d0                	add    %edx,%eax
f01227ba:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f01227bd:	76 43                	jbe    f0122802 <memmove+0x6a>
		s += n;
f01227bf:	8b 45 10             	mov    0x10(%ebp),%eax
f01227c2:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f01227c5:	8b 45 10             	mov    0x10(%ebp),%eax
f01227c8:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f01227cb:	eb 10                	jmp    f01227dd <memmove+0x45>
			*--d = *--s;
f01227cd:	ff 4d f8             	decl   -0x8(%ebp)
f01227d0:	ff 4d fc             	decl   -0x4(%ebp)
f01227d3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01227d6:	8a 10                	mov    (%eax),%dl
f01227d8:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01227db:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f01227dd:	8b 45 10             	mov    0x10(%ebp),%eax
f01227e0:	8d 50 ff             	lea    -0x1(%eax),%edx
f01227e3:	89 55 10             	mov    %edx,0x10(%ebp)
f01227e6:	85 c0                	test   %eax,%eax
f01227e8:	75 e3                	jne    f01227cd <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f01227ea:	eb 23                	jmp    f012280f <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f01227ec:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01227ef:	8d 50 01             	lea    0x1(%eax),%edx
f01227f2:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01227f5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01227f8:	8d 4a 01             	lea    0x1(%edx),%ecx
f01227fb:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f01227fe:	8a 12                	mov    (%edx),%dl
f0122800:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f0122802:	8b 45 10             	mov    0x10(%ebp),%eax
f0122805:	8d 50 ff             	lea    -0x1(%eax),%edx
f0122808:	89 55 10             	mov    %edx,0x10(%ebp)
f012280b:	85 c0                	test   %eax,%eax
f012280d:	75 dd                	jne    f01227ec <memmove+0x54>
			*d++ = *s++;

	return dst;
f012280f:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0122812:	c9                   	leave  
f0122813:	c3                   	ret    

f0122814 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f0122814:	55                   	push   %ebp
f0122815:	89 e5                	mov    %esp,%ebp
f0122817:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f012281a:	8b 45 08             	mov    0x8(%ebp),%eax
f012281d:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f0122820:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122823:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0122826:	eb 2a                	jmp    f0122852 <memcmp+0x3e>
		if (*s1 != *s2)
f0122828:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012282b:	8a 10                	mov    (%eax),%dl
f012282d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0122830:	8a 00                	mov    (%eax),%al
f0122832:	38 c2                	cmp    %al,%dl
f0122834:	74 16                	je     f012284c <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0122836:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0122839:	8a 00                	mov    (%eax),%al
f012283b:	0f b6 d0             	movzbl %al,%edx
f012283e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0122841:	8a 00                	mov    (%eax),%al
f0122843:	0f b6 c0             	movzbl %al,%eax
f0122846:	29 c2                	sub    %eax,%edx
f0122848:	89 d0                	mov    %edx,%eax
f012284a:	eb 18                	jmp    f0122864 <memcmp+0x50>
		s1++, s2++;
f012284c:	ff 45 fc             	incl   -0x4(%ebp)
f012284f:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f0122852:	8b 45 10             	mov    0x10(%ebp),%eax
f0122855:	8d 50 ff             	lea    -0x1(%eax),%edx
f0122858:	89 55 10             	mov    %edx,0x10(%ebp)
f012285b:	85 c0                	test   %eax,%eax
f012285d:	75 c9                	jne    f0122828 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f012285f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0122864:	c9                   	leave  
f0122865:	c3                   	ret    

f0122866 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f0122866:	55                   	push   %ebp
f0122867:	89 e5                	mov    %esp,%ebp
f0122869:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f012286c:	8b 55 08             	mov    0x8(%ebp),%edx
f012286f:	8b 45 10             	mov    0x10(%ebp),%eax
f0122872:	01 d0                	add    %edx,%eax
f0122874:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f0122877:	eb 15                	jmp    f012288e <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f0122879:	8b 45 08             	mov    0x8(%ebp),%eax
f012287c:	8a 00                	mov    (%eax),%al
f012287e:	0f b6 d0             	movzbl %al,%edx
f0122881:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122884:	0f b6 c0             	movzbl %al,%eax
f0122887:	39 c2                	cmp    %eax,%edx
f0122889:	74 0d                	je     f0122898 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f012288b:	ff 45 08             	incl   0x8(%ebp)
f012288e:	8b 45 08             	mov    0x8(%ebp),%eax
f0122891:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0122894:	72 e3                	jb     f0122879 <memfind+0x13>
f0122896:	eb 01                	jmp    f0122899 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0122898:	90                   	nop
	return (void *) s;
f0122899:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012289c:	c9                   	leave  
f012289d:	c3                   	ret    

f012289e <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f012289e:	55                   	push   %ebp
f012289f:	89 e5                	mov    %esp,%ebp
f01228a1:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f01228a4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f01228ab:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f01228b2:	eb 03                	jmp    f01228b7 <strtol+0x19>
		s++;
f01228b4:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f01228b7:	8b 45 08             	mov    0x8(%ebp),%eax
f01228ba:	8a 00                	mov    (%eax),%al
f01228bc:	3c 20                	cmp    $0x20,%al
f01228be:	74 f4                	je     f01228b4 <strtol+0x16>
f01228c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01228c3:	8a 00                	mov    (%eax),%al
f01228c5:	3c 09                	cmp    $0x9,%al
f01228c7:	74 eb                	je     f01228b4 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f01228c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01228cc:	8a 00                	mov    (%eax),%al
f01228ce:	3c 2b                	cmp    $0x2b,%al
f01228d0:	75 05                	jne    f01228d7 <strtol+0x39>
		s++;
f01228d2:	ff 45 08             	incl   0x8(%ebp)
f01228d5:	eb 13                	jmp    f01228ea <strtol+0x4c>
	else if (*s == '-')
f01228d7:	8b 45 08             	mov    0x8(%ebp),%eax
f01228da:	8a 00                	mov    (%eax),%al
f01228dc:	3c 2d                	cmp    $0x2d,%al
f01228de:	75 0a                	jne    f01228ea <strtol+0x4c>
		s++, neg = 1;
f01228e0:	ff 45 08             	incl   0x8(%ebp)
f01228e3:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f01228ea:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01228ee:	74 06                	je     f01228f6 <strtol+0x58>
f01228f0:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f01228f4:	75 20                	jne    f0122916 <strtol+0x78>
f01228f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01228f9:	8a 00                	mov    (%eax),%al
f01228fb:	3c 30                	cmp    $0x30,%al
f01228fd:	75 17                	jne    f0122916 <strtol+0x78>
f01228ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0122902:	40                   	inc    %eax
f0122903:	8a 00                	mov    (%eax),%al
f0122905:	3c 78                	cmp    $0x78,%al
f0122907:	75 0d                	jne    f0122916 <strtol+0x78>
		s += 2, base = 16;
f0122909:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f012290d:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f0122914:	eb 28                	jmp    f012293e <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f0122916:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012291a:	75 15                	jne    f0122931 <strtol+0x93>
f012291c:	8b 45 08             	mov    0x8(%ebp),%eax
f012291f:	8a 00                	mov    (%eax),%al
f0122921:	3c 30                	cmp    $0x30,%al
f0122923:	75 0c                	jne    f0122931 <strtol+0x93>
		s++, base = 8;
f0122925:	ff 45 08             	incl   0x8(%ebp)
f0122928:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f012292f:	eb 0d                	jmp    f012293e <strtol+0xa0>
	else if (base == 0)
f0122931:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0122935:	75 07                	jne    f012293e <strtol+0xa0>
		base = 10;
f0122937:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f012293e:	8b 45 08             	mov    0x8(%ebp),%eax
f0122941:	8a 00                	mov    (%eax),%al
f0122943:	3c 2f                	cmp    $0x2f,%al
f0122945:	7e 19                	jle    f0122960 <strtol+0xc2>
f0122947:	8b 45 08             	mov    0x8(%ebp),%eax
f012294a:	8a 00                	mov    (%eax),%al
f012294c:	3c 39                	cmp    $0x39,%al
f012294e:	7f 10                	jg     f0122960 <strtol+0xc2>
			dig = *s - '0';
f0122950:	8b 45 08             	mov    0x8(%ebp),%eax
f0122953:	8a 00                	mov    (%eax),%al
f0122955:	0f be c0             	movsbl %al,%eax
f0122958:	83 e8 30             	sub    $0x30,%eax
f012295b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012295e:	eb 42                	jmp    f01229a2 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f0122960:	8b 45 08             	mov    0x8(%ebp),%eax
f0122963:	8a 00                	mov    (%eax),%al
f0122965:	3c 60                	cmp    $0x60,%al
f0122967:	7e 19                	jle    f0122982 <strtol+0xe4>
f0122969:	8b 45 08             	mov    0x8(%ebp),%eax
f012296c:	8a 00                	mov    (%eax),%al
f012296e:	3c 7a                	cmp    $0x7a,%al
f0122970:	7f 10                	jg     f0122982 <strtol+0xe4>
			dig = *s - 'a' + 10;
f0122972:	8b 45 08             	mov    0x8(%ebp),%eax
f0122975:	8a 00                	mov    (%eax),%al
f0122977:	0f be c0             	movsbl %al,%eax
f012297a:	83 e8 57             	sub    $0x57,%eax
f012297d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0122980:	eb 20                	jmp    f01229a2 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f0122982:	8b 45 08             	mov    0x8(%ebp),%eax
f0122985:	8a 00                	mov    (%eax),%al
f0122987:	3c 40                	cmp    $0x40,%al
f0122989:	7e 39                	jle    f01229c4 <strtol+0x126>
f012298b:	8b 45 08             	mov    0x8(%ebp),%eax
f012298e:	8a 00                	mov    (%eax),%al
f0122990:	3c 5a                	cmp    $0x5a,%al
f0122992:	7f 30                	jg     f01229c4 <strtol+0x126>
			dig = *s - 'A' + 10;
f0122994:	8b 45 08             	mov    0x8(%ebp),%eax
f0122997:	8a 00                	mov    (%eax),%al
f0122999:	0f be c0             	movsbl %al,%eax
f012299c:	83 e8 37             	sub    $0x37,%eax
f012299f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f01229a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01229a5:	3b 45 10             	cmp    0x10(%ebp),%eax
f01229a8:	7d 19                	jge    f01229c3 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f01229aa:	ff 45 08             	incl   0x8(%ebp)
f01229ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01229b0:	0f af 45 10          	imul   0x10(%ebp),%eax
f01229b4:	89 c2                	mov    %eax,%edx
f01229b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01229b9:	01 d0                	add    %edx,%eax
f01229bb:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f01229be:	e9 7b ff ff ff       	jmp    f012293e <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f01229c3:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f01229c4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01229c8:	74 08                	je     f01229d2 <strtol+0x134>
		*endptr = (char *) s;
f01229ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f01229cd:	8b 55 08             	mov    0x8(%ebp),%edx
f01229d0:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f01229d2:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01229d6:	74 07                	je     f01229df <strtol+0x141>
f01229d8:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01229db:	f7 d8                	neg    %eax
f01229dd:	eb 03                	jmp    f01229e2 <strtol+0x144>
f01229df:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01229e2:	c9                   	leave  
f01229e3:	c3                   	ret    

f01229e4 <ltostr>:

void
ltostr(long value, char *str)
{
f01229e4:	55                   	push   %ebp
f01229e5:	89 e5                	mov    %esp,%ebp
f01229e7:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f01229ea:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f01229f1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f01229f8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01229fc:	79 13                	jns    f0122a11 <ltostr+0x2d>
	{
		neg = 1;
f01229fe:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f0122a05:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122a08:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f0122a0b:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f0122a0e:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f0122a11:	8b 45 08             	mov    0x8(%ebp),%eax
f0122a14:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0122a19:	99                   	cltd   
f0122a1a:	f7 f9                	idiv   %ecx
f0122a1c:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f0122a1f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0122a22:	8d 50 01             	lea    0x1(%eax),%edx
f0122a25:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0122a28:	89 c2                	mov    %eax,%edx
f0122a2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122a2d:	01 d0                	add    %edx,%eax
f0122a2f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0122a32:	83 c2 30             	add    $0x30,%edx
f0122a35:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0122a37:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0122a3a:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0122a3f:	f7 e9                	imul   %ecx
f0122a41:	c1 fa 02             	sar    $0x2,%edx
f0122a44:	89 c8                	mov    %ecx,%eax
f0122a46:	c1 f8 1f             	sar    $0x1f,%eax
f0122a49:	29 c2                	sub    %eax,%edx
f0122a4b:	89 d0                	mov    %edx,%eax
f0122a4d:	89 45 08             	mov    %eax,0x8(%ebp)
	/*2023 FIX el7 :)*/
	//} while (value % 10 != 0);
	} while (value != 0);
f0122a50:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0122a54:	75 bb                	jne    f0122a11 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f0122a56:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f0122a5d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0122a60:	48                   	dec    %eax
f0122a61:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f0122a64:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0122a68:	74 3d                	je     f0122aa7 <ltostr+0xc3>
		start = 1 ;
f0122a6a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f0122a71:	eb 34                	jmp    f0122aa7 <ltostr+0xc3>
	{
		char tmp = str[start] ;
f0122a73:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122a76:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122a79:	01 d0                	add    %edx,%eax
f0122a7b:	8a 00                	mov    (%eax),%al
f0122a7d:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f0122a80:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122a83:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122a86:	01 c2                	add    %eax,%edx
f0122a88:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0122a8b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122a8e:	01 c8                	add    %ecx,%eax
f0122a90:	8a 00                	mov    (%eax),%al
f0122a92:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f0122a94:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0122a97:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122a9a:	01 c2                	add    %eax,%edx
f0122a9c:	8a 45 eb             	mov    -0x15(%ebp),%al
f0122a9f:	88 02                	mov    %al,(%edx)
		start++ ;
f0122aa1:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f0122aa4:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0122aa7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122aaa:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0122aad:	7c c4                	jl     f0122a73 <ltostr+0x8f>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0122aaf:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0122ab2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122ab5:	01 d0                	add    %edx,%eax
f0122ab7:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0122aba:	90                   	nop
f0122abb:	c9                   	leave  
f0122abc:	c3                   	ret    

f0122abd <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0122abd:	55                   	push   %ebp
f0122abe:	89 e5                	mov    %esp,%ebp
f0122ac0:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f0122ac3:	ff 75 08             	pushl  0x8(%ebp)
f0122ac6:	e8 73 fa ff ff       	call   f012253e <strlen>
f0122acb:	83 c4 04             	add    $0x4,%esp
f0122ace:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f0122ad1:	ff 75 0c             	pushl  0xc(%ebp)
f0122ad4:	e8 65 fa ff ff       	call   f012253e <strlen>
f0122ad9:	83 c4 04             	add    $0x4,%esp
f0122adc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f0122adf:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f0122ae6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0122aed:	eb 17                	jmp    f0122b06 <strcconcat+0x49>
		final[s] = str1[s] ;
f0122aef:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0122af2:	8b 45 10             	mov    0x10(%ebp),%eax
f0122af5:	01 c2                	add    %eax,%edx
f0122af7:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0122afa:	8b 45 08             	mov    0x8(%ebp),%eax
f0122afd:	01 c8                	add    %ecx,%eax
f0122aff:	8a 00                	mov    (%eax),%al
f0122b01:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f0122b03:	ff 45 fc             	incl   -0x4(%ebp)
f0122b06:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0122b09:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122b0c:	7c e1                	jl     f0122aef <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0122b0e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f0122b15:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0122b1c:	eb 1f                	jmp    f0122b3d <strcconcat+0x80>
		final[s++] = str2[i] ;
f0122b1e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0122b21:	8d 50 01             	lea    0x1(%eax),%edx
f0122b24:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0122b27:	89 c2                	mov    %eax,%edx
f0122b29:	8b 45 10             	mov    0x10(%ebp),%eax
f0122b2c:	01 c2                	add    %eax,%edx
f0122b2e:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0122b31:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122b34:	01 c8                	add    %ecx,%eax
f0122b36:	8a 00                	mov    (%eax),%al
f0122b38:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f0122b3a:	ff 45 f8             	incl   -0x8(%ebp)
f0122b3d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0122b40:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0122b43:	7c d9                	jl     f0122b1e <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f0122b45:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0122b48:	8b 45 10             	mov    0x10(%ebp),%eax
f0122b4b:	01 d0                	add    %edx,%eax
f0122b4d:	c6 00 00             	movb   $0x0,(%eax)
}
f0122b50:	90                   	nop
f0122b51:	c9                   	leave  
f0122b52:	c3                   	ret    

f0122b53 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0122b53:	55                   	push   %ebp
f0122b54:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f0122b56:	8b 45 14             	mov    0x14(%ebp),%eax
f0122b59:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f0122b5f:	8b 45 14             	mov    0x14(%ebp),%eax
f0122b62:	8b 00                	mov    (%eax),%eax
f0122b64:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0122b6b:	8b 45 10             	mov    0x10(%ebp),%eax
f0122b6e:	01 d0                	add    %edx,%eax
f0122b70:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0122b76:	eb 0c                	jmp    f0122b84 <strsplit+0x31>
			*string++ = 0;
f0122b78:	8b 45 08             	mov    0x8(%ebp),%eax
f0122b7b:	8d 50 01             	lea    0x1(%eax),%edx
f0122b7e:	89 55 08             	mov    %edx,0x8(%ebp)
f0122b81:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0122b84:	8b 45 08             	mov    0x8(%ebp),%eax
f0122b87:	8a 00                	mov    (%eax),%al
f0122b89:	84 c0                	test   %al,%al
f0122b8b:	74 18                	je     f0122ba5 <strsplit+0x52>
f0122b8d:	8b 45 08             	mov    0x8(%ebp),%eax
f0122b90:	8a 00                	mov    (%eax),%al
f0122b92:	0f be c0             	movsbl %al,%eax
f0122b95:	50                   	push   %eax
f0122b96:	ff 75 0c             	pushl  0xc(%ebp)
f0122b99:	e8 32 fb ff ff       	call   f01226d0 <strchr>
f0122b9e:	83 c4 08             	add    $0x8,%esp
f0122ba1:	85 c0                	test   %eax,%eax
f0122ba3:	75 d3                	jne    f0122b78 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f0122ba5:	8b 45 08             	mov    0x8(%ebp),%eax
f0122ba8:	8a 00                	mov    (%eax),%al
f0122baa:	84 c0                	test   %al,%al
f0122bac:	74 5a                	je     f0122c08 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f0122bae:	8b 45 14             	mov    0x14(%ebp),%eax
f0122bb1:	8b 00                	mov    (%eax),%eax
f0122bb3:	83 f8 0f             	cmp    $0xf,%eax
f0122bb6:	75 07                	jne    f0122bbf <strsplit+0x6c>
		{
			return 0;
f0122bb8:	b8 00 00 00 00       	mov    $0x0,%eax
f0122bbd:	eb 66                	jmp    f0122c25 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0122bbf:	8b 45 14             	mov    0x14(%ebp),%eax
f0122bc2:	8b 00                	mov    (%eax),%eax
f0122bc4:	8d 48 01             	lea    0x1(%eax),%ecx
f0122bc7:	8b 55 14             	mov    0x14(%ebp),%edx
f0122bca:	89 0a                	mov    %ecx,(%edx)
f0122bcc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0122bd3:	8b 45 10             	mov    0x10(%ebp),%eax
f0122bd6:	01 c2                	add    %eax,%edx
f0122bd8:	8b 45 08             	mov    0x8(%ebp),%eax
f0122bdb:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f0122bdd:	eb 03                	jmp    f0122be2 <strsplit+0x8f>
			string++;
f0122bdf:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f0122be2:	8b 45 08             	mov    0x8(%ebp),%eax
f0122be5:	8a 00                	mov    (%eax),%al
f0122be7:	84 c0                	test   %al,%al
f0122be9:	74 8b                	je     f0122b76 <strsplit+0x23>
f0122beb:	8b 45 08             	mov    0x8(%ebp),%eax
f0122bee:	8a 00                	mov    (%eax),%al
f0122bf0:	0f be c0             	movsbl %al,%eax
f0122bf3:	50                   	push   %eax
f0122bf4:	ff 75 0c             	pushl  0xc(%ebp)
f0122bf7:	e8 d4 fa ff ff       	call   f01226d0 <strchr>
f0122bfc:	83 c4 08             	add    $0x8,%esp
f0122bff:	85 c0                	test   %eax,%eax
f0122c01:	74 dc                	je     f0122bdf <strsplit+0x8c>
			string++;
	}
f0122c03:	e9 6e ff ff ff       	jmp    f0122b76 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f0122c08:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f0122c09:	8b 45 14             	mov    0x14(%ebp),%eax
f0122c0c:	8b 00                	mov    (%eax),%eax
f0122c0e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0122c15:	8b 45 10             	mov    0x10(%ebp),%eax
f0122c18:	01 d0                	add    %edx,%eax
f0122c1a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f0122c20:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0122c25:	c9                   	leave  
f0122c26:	c3                   	ret    

f0122c27 <str2lower>:


char* str2lower(char *dst, const char *src)
{
f0122c27:	55                   	push   %ebp
f0122c28:	89 e5                	mov    %esp,%ebp
f0122c2a:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT]
	panic("str2lower is not implemented yet!");
f0122c2d:	83 ec 04             	sub    $0x4,%esp
f0122c30:	68 5c 04 13 f0       	push   $0xf013045c
f0122c35:	68 3f 01 00 00       	push   $0x13f
f0122c3a:	68 7e 04 13 f0       	push   $0xf013047e
f0122c3f:	e8 d6 d6 fd ff       	call   f010031a <_panic>

f0122c44 <disk_interrupt_handler>:
#define IDE_ERR		0x01

static int diskno = 0;

void disk_interrupt_handler(struct Trapframe *tf)
{
f0122c44:	55                   	push   %ebp
f0122c45:	89 e5                	mov    %esp,%ebp
f0122c47:	83 ec 18             	sub    $0x18,%esp
f0122c4a:	c7 45 f0 f7 01 00 00 	movl   $0x1f7,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0122c51:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0122c54:	89 c2                	mov    %eax,%edx
f0122c56:	ec                   	in     (%dx),%al
f0122c57:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0122c5a:	8a 45 ef             	mov    -0x11(%ebp),%al
	int r;
	//cprintf("\n>>>>>>>> DISK INTERRUPT <<<<<<<<<\n");
	if (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0122c5d:	0f b6 c0             	movzbl %al,%eax
f0122c60:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0122c63:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122c66:	25 c0 00 00 00       	and    $0xc0,%eax
f0122c6b:	83 f8 40             	cmp    $0x40,%eax
f0122c6e:	75 10                	jne    f0122c80 <disk_interrupt_handler+0x3c>
	{
		//cprintf("NOT READY\n");
	}
	else
	{
		wakeup_one(&DISKchannel);
f0122c70:	83 ec 0c             	sub    $0xc,%esp
f0122c73:	68 a0 fd 59 f0       	push   $0xf059fda0
f0122c78:	e8 e2 c2 fe ff       	call   f010ef5f <wakeup_one>
f0122c7d:	83 c4 10             	add    $0x10,%esp
	}

}
f0122c80:	90                   	nop
f0122c81:	c9                   	leave  
f0122c82:	c3                   	ret    

f0122c83 <ide_init>:

void ide_init()
{
f0122c83:	55                   	push   %ebp
f0122c84:	89 e5                	mov    %esp,%ebp
f0122c86:	83 ec 08             	sub    $0x8,%esp
	irq_install_handler(14, &disk_interrupt_handler);
f0122c89:	83 ec 08             	sub    $0x8,%esp
f0122c8c:	68 44 2c 12 f0       	push   $0xf0122c44
f0122c91:	6a 0e                	push   $0xe
f0122c93:	e8 00 a7 fe ff       	call   f010d398 <irq_install_handler>
f0122c98:	83 c4 10             	add    $0x10,%esp
	//irq_install_handler(15, &disk_interrupt_handler);
	if (DISK_INT_BLK_METHOD == LCK_SLEEP)
	{
		init_channel(&DISKchannel, "DISK channel");
f0122c9b:	83 ec 08             	sub    $0x8,%esp
f0122c9e:	68 8c 04 13 f0       	push   $0xf013048c
f0122ca3:	68 a0 fd 59 f0       	push   $0xf059fda0
f0122ca8:	e8 34 c2 fe ff       	call   f010eee1 <init_channel>
f0122cad:	83 c4 10             	add    $0x10,%esp
		init_spinlock(&DISKlock, "DISK channel lock");
f0122cb0:	83 ec 08             	sub    $0x8,%esp
f0122cb3:	68 99 04 13 f0       	push   $0xf0130499
f0122cb8:	68 e0 28 5a f0       	push   $0xf05a28e0
f0122cbd:	e8 2e be fe ff       	call   f010eaf0 <init_spinlock>
f0122cc2:	83 c4 10             	add    $0x10,%esp
	}
	else if (DISK_INT_BLK_METHOD == LCK_SEMAPHORE)
	{
		init_ksemaphore(&DISKsem, 0, "DISK semaphore");
	}
}
f0122cc5:	90                   	nop
f0122cc6:	c9                   	leave  
f0122cc7:	c3                   	ret    

f0122cc8 <ide_wait_ready>:
//	}
//	return 0;
//}

static int ide_wait_ready(bool check_error)
{
f0122cc8:	55                   	push   %ebp
f0122cc9:	89 e5                	mov    %esp,%ebp
f0122ccb:	83 ec 18             	sub    $0x18,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0122cce:	90                   	nop
f0122ccf:	c7 45 f0 f7 01 00 00 	movl   $0x1f7,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0122cd6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0122cd9:	89 c2                	mov    %eax,%edx
f0122cdb:	ec                   	in     (%dx),%al
f0122cdc:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0122cdf:	8a 45 ef             	mov    -0x11(%ebp),%al
f0122ce2:	0f b6 c0             	movzbl %al,%eax
f0122ce5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0122ce8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122ceb:	25 c0 00 00 00       	and    $0xc0,%eax
f0122cf0:	83 f8 40             	cmp    $0x40,%eax
f0122cf3:	75 da                	jne    f0122ccf <ide_wait_ready+0x7>
	/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f0122cf5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0122cf9:	74 24                	je     f0122d1f <ide_wait_ready+0x57>
f0122cfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122cfe:	83 e0 21             	and    $0x21,%eax
f0122d01:	85 c0                	test   %eax,%eax
f0122d03:	74 1a                	je     f0122d1f <ide_wait_ready+0x57>
	{
		panic("ERROR @ ide_wait_ready() = %x(%d)\n",r,r);
f0122d05:	83 ec 0c             	sub    $0xc,%esp
f0122d08:	ff 75 f4             	pushl  -0xc(%ebp)
f0122d0b:	ff 75 f4             	pushl  -0xc(%ebp)
f0122d0e:	68 ac 04 13 f0       	push   $0xf01304ac
f0122d13:	6a 5d                	push   $0x5d
f0122d15:	68 cf 04 13 f0       	push   $0xf01304cf
f0122d1a:	e8 fb d5 fd ff       	call   f010031a <_panic>
		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
	}
	return 0;
f0122d1f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0122d24:	c9                   	leave  
f0122d25:	c3                   	ret    

f0122d26 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f0122d26:	55                   	push   %ebp
f0122d27:	89 e5                	mov    %esp,%ebp
f0122d29:	57                   	push   %edi
f0122d2a:	53                   	push   %ebx
f0122d2b:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f0122d2e:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0122d35:	76 16                	jbe    f0122d4d <ide_read+0x27>
f0122d37:	68 da 04 13 f0       	push   $0xf01304da
f0122d3c:	68 e7 04 13 f0       	push   $0xf01304e7
f0122d41:	6a 68                	push   $0x68
f0122d43:	68 cf 04 13 f0       	push   $0xf01304cf
f0122d48:	e8 cd d5 fd ff       	call   f010031a <_panic>

	//FUTURE NOTE: This BUSY-WAIT should be replaced by Interrupt to allow the OS to schedule another process till the device become ready [el7 :)]
	ide_wait_ready(0);
f0122d4d:	83 ec 0c             	sub    $0xc,%esp
f0122d50:	6a 00                	push   $0x0
f0122d52:	e8 71 ff ff ff       	call   f0122cc8 <ide_wait_ready>
f0122d57:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f0122d5a:	8b 45 10             	mov    0x10(%ebp),%eax
f0122d5d:	0f b6 c0             	movzbl %al,%eax
f0122d60:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0122d67:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0122d6a:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0122d6d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0122d70:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0122d71:	8b 45 08             	mov    0x8(%ebp),%eax
f0122d74:	0f b6 c0             	movzbl %al,%eax
f0122d77:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0122d7e:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0122d81:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0122d84:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0122d87:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0122d88:	8b 45 08             	mov    0x8(%ebp),%eax
f0122d8b:	c1 e8 08             	shr    $0x8,%eax
f0122d8e:	0f b6 c0             	movzbl %al,%eax
f0122d91:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0122d98:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0122d9b:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0122d9e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0122da1:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0122da2:	8b 45 08             	mov    0x8(%ebp),%eax
f0122da5:	c1 e8 10             	shr    $0x10,%eax
f0122da8:	0f b6 c0             	movzbl %al,%eax
f0122dab:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0122db2:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0122db5:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0122db8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0122dbb:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0122dbc:	a1 50 fc 59 f0       	mov    0xf059fc50,%eax
f0122dc1:	83 e0 01             	and    $0x1,%eax
f0122dc4:	c1 e0 04             	shl    $0x4,%eax
f0122dc7:	88 c2                	mov    %al,%dl
f0122dc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0122dcc:	c1 e8 18             	shr    $0x18,%eax
f0122dcf:	83 e0 0f             	and    $0xf,%eax
f0122dd2:	09 d0                	or     %edx,%eax
f0122dd4:	83 c8 e0             	or     $0xffffffe0,%eax
f0122dd7:	0f b6 c0             	movzbl %al,%eax
f0122dda:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0122de1:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0122de4:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0122de7:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0122dea:	ee                   	out    %al,(%dx)
f0122deb:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0122df2:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f0122df6:	8a 45 d7             	mov    -0x29(%ebp),%al
f0122df9:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0122dfc:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0122dfd:	eb 55                	jmp    f0122e54 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0122dff:	83 ec 0c             	sub    $0xc,%esp
f0122e02:	6a 01                	push   $0x1
f0122e04:	e8 bf fe ff ff       	call   f0122cc8 <ide_wait_ready>
f0122e09:	83 c4 10             	add    $0x10,%esp
f0122e0c:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0122e0f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0122e13:	79 05                	jns    f0122e1a <ide_read+0xf4>
			return r;
f0122e15:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0122e18:	eb 45                	jmp    f0122e5f <ide_read+0x139>
f0122e1a:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0122e21:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122e24:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0122e27:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f0122e2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122e31:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0122e34:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0122e37:	89 cb                	mov    %ecx,%ebx
f0122e39:	89 df                	mov    %ebx,%edi
f0122e3b:	89 c1                	mov    %eax,%ecx
f0122e3d:	fc                   	cld    
f0122e3e:	f2 6d                	repnz insl (%dx),%es:(%edi)
f0122e40:	89 c8                	mov    %ecx,%eax
f0122e42:	89 fb                	mov    %edi,%ebx
f0122e44:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0122e47:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0122e4a:	ff 4d 10             	decl   0x10(%ebp)
f0122e4d:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0122e54:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0122e58:	75 a5                	jne    f0122dff <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f0122e5a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0122e5f:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0122e62:	5b                   	pop    %ebx
f0122e63:	5f                   	pop    %edi
f0122e64:	5d                   	pop    %ebp
f0122e65:	c3                   	ret    

f0122e66 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f0122e66:	55                   	push   %ebp
f0122e67:	89 e5                	mov    %esp,%ebp
f0122e69:	56                   	push   %esi
f0122e6a:	53                   	push   %ebx
f0122e6b:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0122e6e:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0122e75:	76 19                	jbe    f0122e90 <ide_write+0x2a>
f0122e77:	68 da 04 13 f0       	push   $0xf01304da
f0122e7c:	68 e7 04 13 f0       	push   $0xf01304e7
f0122e81:	68 82 00 00 00       	push   $0x82
f0122e86:	68 cf 04 13 f0       	push   $0xf01304cf
f0122e8b:	e8 8a d4 fd ff       	call   f010031a <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f0122e90:	83 ec 0c             	sub    $0xc,%esp
f0122e93:	6a 00                	push   $0x0
f0122e95:	e8 2e fe ff ff       	call   f0122cc8 <ide_wait_ready>
f0122e9a:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f0122e9d:	8b 45 10             	mov    0x10(%ebp),%eax
f0122ea0:	0f b6 c0             	movzbl %al,%eax
f0122ea3:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0122eaa:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0122ead:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0122eb0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0122eb3:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0122eb4:	8b 45 08             	mov    0x8(%ebp),%eax
f0122eb7:	0f b6 c0             	movzbl %al,%eax
f0122eba:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0122ec1:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0122ec4:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0122ec7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0122eca:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0122ecb:	8b 45 08             	mov    0x8(%ebp),%eax
f0122ece:	c1 e8 08             	shr    $0x8,%eax
f0122ed1:	0f b6 c0             	movzbl %al,%eax
f0122ed4:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0122edb:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0122ede:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0122ee1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0122ee4:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0122ee5:	8b 45 08             	mov    0x8(%ebp),%eax
f0122ee8:	c1 e8 10             	shr    $0x10,%eax
f0122eeb:	0f b6 c0             	movzbl %al,%eax
f0122eee:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0122ef5:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0122ef8:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0122efb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0122efe:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0122eff:	a1 50 fc 59 f0       	mov    0xf059fc50,%eax
f0122f04:	83 e0 01             	and    $0x1,%eax
f0122f07:	c1 e0 04             	shl    $0x4,%eax
f0122f0a:	88 c2                	mov    %al,%dl
f0122f0c:	8b 45 08             	mov    0x8(%ebp),%eax
f0122f0f:	c1 e8 18             	shr    $0x18,%eax
f0122f12:	83 e0 0f             	and    $0xf,%eax
f0122f15:	09 d0                	or     %edx,%eax
f0122f17:	83 c8 e0             	or     $0xffffffe0,%eax
f0122f1a:	0f b6 c0             	movzbl %al,%eax
f0122f1d:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0122f24:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0122f27:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0122f2a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0122f2d:	ee                   	out    %al,(%dx)
f0122f2e:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0122f35:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f0122f39:	8a 45 d7             	mov    -0x29(%ebp),%al
f0122f3c:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0122f3f:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0122f40:	eb 55                	jmp    f0122f97 <ide_write+0x131>
		if ((r = ide_wait_ready(1)) < 0)
f0122f42:	83 ec 0c             	sub    $0xc,%esp
f0122f45:	6a 01                	push   $0x1
f0122f47:	e8 7c fd ff ff       	call   f0122cc8 <ide_wait_ready>
f0122f4c:	83 c4 10             	add    $0x10,%esp
f0122f4f:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0122f52:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0122f56:	79 05                	jns    f0122f5d <ide_write+0xf7>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f0122f58:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0122f5b:	eb 45                	jmp    f0122fa2 <ide_write+0x13c>
f0122f5d:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0122f64:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122f67:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0122f6a:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0122f71:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122f74:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0122f77:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0122f7a:	89 cb                	mov    %ecx,%ebx
f0122f7c:	89 de                	mov    %ebx,%esi
f0122f7e:	89 c1                	mov    %eax,%ecx
f0122f80:	fc                   	cld    
f0122f81:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f0122f83:	89 c8                	mov    %ecx,%eax
f0122f85:	89 f3                	mov    %esi,%ebx
f0122f87:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0122f8a:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0122f8d:	ff 4d 10             	decl   0x10(%ebp)
f0122f90:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0122f97:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0122f9b:	75 a5                	jne    f0122f42 <ide_write+0xdc>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f0122f9d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0122fa2:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0122fa5:	5b                   	pop    %ebx
f0122fa6:	5e                   	pop    %esi
f0122fa7:	5d                   	pop    %ebp
f0122fa8:	c3                   	ret    

f0122fa9 <get_block_size>:

//=====================================================
// 1) GET BLOCK SIZE (including size of its meta data):
//=====================================================
__inline__ uint32 get_block_size(void* va)
{
f0122fa9:	55                   	push   %ebp
f0122faa:	89 e5                	mov    %esp,%ebp
f0122fac:	83 ec 10             	sub    $0x10,%esp
	uint32 *curBlkMetaData = ((uint32 *)va - 1) ;
f0122faf:	8b 45 08             	mov    0x8(%ebp),%eax
f0122fb2:	83 e8 04             	sub    $0x4,%eax
f0122fb5:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return (*curBlkMetaData) & ~(0x1);
f0122fb8:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0122fbb:	8b 00                	mov    (%eax),%eax
f0122fbd:	83 e0 fe             	and    $0xfffffffe,%eax
}
f0122fc0:	c9                   	leave  
f0122fc1:	c3                   	ret    

f0122fc2 <is_free_block>:

//===========================
// 2) GET BLOCK STATUS:
//===========================
__inline__ int8 is_free_block(void* va)
{
f0122fc2:	55                   	push   %ebp
f0122fc3:	89 e5                	mov    %esp,%ebp
f0122fc5:	83 ec 10             	sub    $0x10,%esp
	uint32 *curBlkMetaData = ((uint32 *)va - 1) ;
f0122fc8:	8b 45 08             	mov    0x8(%ebp),%eax
f0122fcb:	83 e8 04             	sub    $0x4,%eax
f0122fce:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return (~(*curBlkMetaData) & 0x1) ;
f0122fd1:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0122fd4:	8b 00                	mov    (%eax),%eax
f0122fd6:	83 e0 01             	and    $0x1,%eax
f0122fd9:	85 c0                	test   %eax,%eax
f0122fdb:	0f 94 c0             	sete   %al
}
f0122fde:	c9                   	leave  
f0122fdf:	c3                   	ret    

f0122fe0 <alloc_block>:
//===========================
// 3) ALLOCATE BLOCK:
//===========================

void *alloc_block(uint32 size, int ALLOC_STRATEGY)
{
f0122fe0:	55                   	push   %ebp
f0122fe1:	89 e5                	mov    %esp,%ebp
f0122fe3:	83 ec 18             	sub    $0x18,%esp
	void *va = NULL;
f0122fe6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (ALLOC_STRATEGY)
f0122fed:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122ff0:	83 f8 02             	cmp    $0x2,%eax
f0122ff3:	74 2b                	je     f0123020 <alloc_block+0x40>
f0122ff5:	83 f8 02             	cmp    $0x2,%eax
f0122ff8:	7f 07                	jg     f0123001 <alloc_block+0x21>
f0122ffa:	83 f8 01             	cmp    $0x1,%eax
f0122ffd:	74 0e                	je     f012300d <alloc_block+0x2d>
f0122fff:	eb 58                	jmp    f0123059 <alloc_block+0x79>
f0123001:	83 f8 03             	cmp    $0x3,%eax
f0123004:	74 2d                	je     f0123033 <alloc_block+0x53>
f0123006:	83 f8 04             	cmp    $0x4,%eax
f0123009:	74 3b                	je     f0123046 <alloc_block+0x66>
f012300b:	eb 4c                	jmp    f0123059 <alloc_block+0x79>
	{
	case DA_FF:
		va = alloc_block_FF(size);
f012300d:	83 ec 0c             	sub    $0xc,%esp
f0123010:	ff 75 08             	pushl  0x8(%ebp)
f0123013:	e8 3c 02 00 00       	call   f0123254 <alloc_block_FF>
f0123018:	83 c4 10             	add    $0x10,%esp
f012301b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012301e:	eb 4a                	jmp    f012306a <alloc_block+0x8a>
	case DA_NF:
		va = alloc_block_NF(size);
f0123020:	83 ec 0c             	sub    $0xc,%esp
f0123023:	ff 75 08             	pushl  0x8(%ebp)
f0123026:	e8 4e 0b 00 00       	call   f0123b79 <alloc_block_NF>
f012302b:	83 c4 10             	add    $0x10,%esp
f012302e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f0123031:	eb 37                	jmp    f012306a <alloc_block+0x8a>
	case DA_BF:
		va = alloc_block_BF(size);
f0123033:	83 ec 0c             	sub    $0xc,%esp
f0123036:	ff 75 08             	pushl  0x8(%ebp)
f0123039:	e8 90 06 00 00       	call   f01236ce <alloc_block_BF>
f012303e:	83 c4 10             	add    $0x10,%esp
f0123041:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f0123044:	eb 24                	jmp    f012306a <alloc_block+0x8a>
	case DA_WF:
		va = alloc_block_WF(size);
f0123046:	83 ec 0c             	sub    $0xc,%esp
f0123049:	ff 75 08             	pushl  0x8(%ebp)
f012304c:	e8 0b 0b 00 00       	call   f0123b5c <alloc_block_WF>
f0123051:	83 c4 10             	add    $0x10,%esp
f0123054:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f0123057:	eb 11                	jmp    f012306a <alloc_block+0x8a>
	default:
		cprintf("Invalid allocation strategy\n");
f0123059:	83 ec 0c             	sub    $0xc,%esp
f012305c:	68 fc 04 13 f0       	push   $0xf01304fc
f0123061:	e8 06 df fd ff       	call   f0100f6c <cprintf>
f0123066:	83 c4 10             	add    $0x10,%esp
		break;
f0123069:	90                   	nop
	}
	return va;
f012306a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f012306d:	c9                   	leave  
f012306e:	c3                   	ret    

f012306f <print_blocks_list>:
//===========================
// 4) PRINT BLOCKS LIST:
//===========================

void print_blocks_list(struct MemBlock_LIST list)
{
f012306f:	55                   	push   %ebp
f0123070:	89 e5                	mov    %esp,%ebp
f0123072:	53                   	push   %ebx
f0123073:	83 ec 14             	sub    $0x14,%esp
	cprintf("=========================================\n");
f0123076:	83 ec 0c             	sub    $0xc,%esp
f0123079:	68 1c 05 13 f0       	push   $0xf013051c
f012307e:	e8 e9 de fd ff       	call   f0100f6c <cprintf>
f0123083:	83 c4 10             	add    $0x10,%esp
	struct BlockElement* blk ;
	cprintf("\nDynAlloc Blocks List:\n");
f0123086:	83 ec 0c             	sub    $0xc,%esp
f0123089:	68 47 05 13 f0       	push   $0xf0130547
f012308e:	e8 d9 de fd ff       	call   f0100f6c <cprintf>
f0123093:	83 c4 10             	add    $0x10,%esp
	LIST_FOREACH(blk, &list)
f0123096:	8b 45 08             	mov    0x8(%ebp),%eax
f0123099:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012309c:	eb 37                	jmp    f01230d5 <print_blocks_list+0x66>
	{
		cprintf("(size: %d, isFree: %d)\n", get_block_size(blk), is_free_block(blk)) ;
f012309e:	83 ec 0c             	sub    $0xc,%esp
f01230a1:	ff 75 f4             	pushl  -0xc(%ebp)
f01230a4:	e8 19 ff ff ff       	call   f0122fc2 <is_free_block>
f01230a9:	83 c4 10             	add    $0x10,%esp
f01230ac:	0f be d8             	movsbl %al,%ebx
f01230af:	83 ec 0c             	sub    $0xc,%esp
f01230b2:	ff 75 f4             	pushl  -0xc(%ebp)
f01230b5:	e8 ef fe ff ff       	call   f0122fa9 <get_block_size>
f01230ba:	83 c4 10             	add    $0x10,%esp
f01230bd:	83 ec 04             	sub    $0x4,%esp
f01230c0:	53                   	push   %ebx
f01230c1:	50                   	push   %eax
f01230c2:	68 5f 05 13 f0       	push   $0xf013055f
f01230c7:	e8 a0 de fd ff       	call   f0100f6c <cprintf>
f01230cc:	83 c4 10             	add    $0x10,%esp
void print_blocks_list(struct MemBlock_LIST list)
{
	cprintf("=========================================\n");
	struct BlockElement* blk ;
	cprintf("\nDynAlloc Blocks List:\n");
	LIST_FOREACH(blk, &list)
f01230cf:	8b 45 10             	mov    0x10(%ebp),%eax
f01230d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01230d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01230d9:	74 07                	je     f01230e2 <print_blocks_list+0x73>
f01230db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01230de:	8b 00                	mov    (%eax),%eax
f01230e0:	eb 05                	jmp    f01230e7 <print_blocks_list+0x78>
f01230e2:	b8 00 00 00 00       	mov    $0x0,%eax
f01230e7:	89 45 10             	mov    %eax,0x10(%ebp)
f01230ea:	8b 45 10             	mov    0x10(%ebp),%eax
f01230ed:	85 c0                	test   %eax,%eax
f01230ef:	75 ad                	jne    f012309e <print_blocks_list+0x2f>
f01230f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01230f5:	75 a7                	jne    f012309e <print_blocks_list+0x2f>
	{
		cprintf("(size: %d, isFree: %d)\n", get_block_size(blk), is_free_block(blk)) ;
	}
	cprintf("=========================================\n");
f01230f7:	83 ec 0c             	sub    $0xc,%esp
f01230fa:	68 1c 05 13 f0       	push   $0xf013051c
f01230ff:	e8 68 de fd ff       	call   f0100f6c <cprintf>
f0123104:	83 c4 10             	add    $0x10,%esp

}
f0123107:	90                   	nop
f0123108:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012310b:	c9                   	leave  
f012310c:	c3                   	ret    

f012310d <initialize_dynamic_allocator>:
// [1] INITIALIZE DYNAMIC ALLOCATOR:
//==================================

// Youssef Mohsen
void initialize_dynamic_allocator(uint32 daStart, uint32 initSizeOfAllocatedSpace)
{
f012310d:	55                   	push   %ebp
f012310e:	89 e5                	mov    %esp,%ebp
f0123110:	83 ec 18             	sub    $0x18,%esp
        //==================================================================================
        //DON'T CHANGE THESE LINES==========================================================
        //==================================================================================
        {
            if (initSizeOfAllocatedSpace % 2 != 0) initSizeOfAllocatedSpace++; //ensure it's multiple of 2
f0123113:	8b 45 0c             	mov    0xc(%ebp),%eax
f0123116:	83 e0 01             	and    $0x1,%eax
f0123119:	85 c0                	test   %eax,%eax
f012311b:	74 03                	je     f0123120 <initialize_dynamic_allocator+0x13>
f012311d:	ff 45 0c             	incl   0xc(%ebp)
            if (initSizeOfAllocatedSpace == 0)
f0123120:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0123124:	0f 84 f2 00 00 00    	je     f012321c <initialize_dynamic_allocator+0x10f>
                return ;
            is_initialized = 1;
f012312a:	c7 05 54 fc 59 f0 01 	movl   $0x1,0xf059fc54
f0123131:	00 00 00 
        //TODO: [PROJECT'24.MS1 - #04] [3] DYNAMIC ALLOCATOR - initialize_dynamic_allocator
        //COMMENT THE FOLLOWING LINE BEFORE START CODING
        //panic("initialize_dynamic_allocator is not implemented yet");

    // Check for bounds
    if ((daStart + initSizeOfAllocatedSpace) > KERNEL_HEAP_MAX)
f0123134:	8b 55 08             	mov    0x8(%ebp),%edx
f0123137:	8b 45 0c             	mov    0xc(%ebp),%eax
f012313a:	01 d0                	add    %edx,%eax
f012313c:	3d 00 f0 ff ff       	cmp    $0xfffff000,%eax
f0123141:	0f 87 d8 00 00 00    	ja     f012321f <initialize_dynamic_allocator+0x112>
        return;
    if(daStart < KERNEL_HEAP_START)
f0123147:	81 7d 08 ff ff ff f5 	cmpl   $0xf5ffffff,0x8(%ebp)
f012314e:	0f 86 ce 00 00 00    	jbe    f0123222 <initialize_dynamic_allocator+0x115>
        return;


    // Create the BEG Block
    struct Block_Start_End* beg_block = (struct Block_Start_End*) daStart;
f0123154:	8b 45 08             	mov    0x8(%ebp),%eax
f0123157:	89 45 f4             	mov    %eax,-0xc(%ebp)
    beg_block->info = 1;
f012315a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012315d:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    // Create the END Block
    struct Block_Start_End* end_block = (struct Block_Start_End*) (daStart + initSizeOfAllocatedSpace - sizeof(struct Block_Start_End));
f0123163:	8b 55 08             	mov    0x8(%ebp),%edx
f0123166:	8b 45 0c             	mov    0xc(%ebp),%eax
f0123169:	01 d0                	add    %edx,%eax
f012316b:	83 e8 04             	sub    $0x4,%eax
f012316e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    end_block->info = 1;
f0123171:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0123174:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    // Create the first free block
    struct BlockElement* first_free_block = (struct BlockElement*)(daStart + 2*sizeof(struct Block_Start_End));
f012317a:	8b 45 08             	mov    0x8(%ebp),%eax
f012317d:	83 c0 08             	add    $0x8,%eax
f0123180:	89 45 ec             	mov    %eax,-0x14(%ebp)


    //Assigning the Heap's Header/Footer values
    *(uint32*)((char*)daStart + 4 /*4 Byte*/) = initSizeOfAllocatedSpace - 2 * sizeof(struct Block_Start_End) /*Heap's header/footer*/;
f0123183:	8b 45 08             	mov    0x8(%ebp),%eax
f0123186:	83 c0 04             	add    $0x4,%eax
f0123189:	8b 55 0c             	mov    0xc(%ebp),%edx
f012318c:	83 ea 08             	sub    $0x8,%edx
f012318f:	89 10                	mov    %edx,(%eax)
    *(uint32*)((char*)daStart + initSizeOfAllocatedSpace - 8) = initSizeOfAllocatedSpace - 2 * sizeof(struct Block_Start_End) /*Heap's header/footer*/;
f0123191:	8b 55 0c             	mov    0xc(%ebp),%edx
f0123194:	8b 45 08             	mov    0x8(%ebp),%eax
f0123197:	01 d0                	add    %edx,%eax
f0123199:	83 e8 08             	sub    $0x8,%eax
f012319c:	8b 55 0c             	mov    0xc(%ebp),%edx
f012319f:	83 ea 08             	sub    $0x8,%edx
f01231a2:	89 10                	mov    %edx,(%eax)

    // Initialize links to the END block
   first_free_block->prev_next_info.le_next = NULL; // Link to the END block
f01231a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01231a7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   first_free_block->prev_next_info.le_prev = NULL;
f01231ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01231b0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    // Link the first free block into the free block list
    LIST_INSERT_HEAD(&freeBlocksList , first_free_block);
f01231b7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01231bb:	75 17                	jne    f01231d4 <initialize_dynamic_allocator+0xc7>
f01231bd:	83 ec 04             	sub    $0x4,%esp
f01231c0:	68 78 05 13 f0       	push   $0xf0130578
f01231c5:	68 8c 00 00 00       	push   $0x8c
f01231ca:	68 9b 05 13 f0       	push   $0xf013059b
f01231cf:	e8 46 d1 fd ff       	call   f010031a <_panic>
f01231d4:	8b 15 50 ff 59 f0    	mov    0xf059ff50,%edx
f01231da:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01231dd:	89 10                	mov    %edx,(%eax)
f01231df:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01231e2:	8b 00                	mov    (%eax),%eax
f01231e4:	85 c0                	test   %eax,%eax
f01231e6:	74 0d                	je     f01231f5 <initialize_dynamic_allocator+0xe8>
f01231e8:	a1 50 ff 59 f0       	mov    0xf059ff50,%eax
f01231ed:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01231f0:	89 50 04             	mov    %edx,0x4(%eax)
f01231f3:	eb 08                	jmp    f01231fd <initialize_dynamic_allocator+0xf0>
f01231f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01231f8:	a3 54 ff 59 f0       	mov    %eax,0xf059ff54
f01231fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0123200:	a3 50 ff 59 f0       	mov    %eax,0xf059ff50
f0123205:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0123208:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f012320f:	a1 5c ff 59 f0       	mov    0xf059ff5c,%eax
f0123214:	40                   	inc    %eax
f0123215:	a3 5c ff 59 f0       	mov    %eax,0xf059ff5c
f012321a:	eb 07                	jmp    f0123223 <initialize_dynamic_allocator+0x116>
        //DON'T CHANGE THESE LINES==========================================================
        //==================================================================================
        {
            if (initSizeOfAllocatedSpace % 2 != 0) initSizeOfAllocatedSpace++; //ensure it's multiple of 2
            if (initSizeOfAllocatedSpace == 0)
                return ;
f012321c:	90                   	nop
f012321d:	eb 04                	jmp    f0123223 <initialize_dynamic_allocator+0x116>
        //COMMENT THE FOLLOWING LINE BEFORE START CODING
        //panic("initialize_dynamic_allocator is not implemented yet");

    // Check for bounds
    if ((daStart + initSizeOfAllocatedSpace) > KERNEL_HEAP_MAX)
        return;
f012321f:	90                   	nop
f0123220:	eb 01                	jmp    f0123223 <initialize_dynamic_allocator+0x116>
    if(daStart < KERNEL_HEAP_START)
        return;
f0123222:	90                   	nop
   first_free_block->prev_next_info.le_next = NULL; // Link to the END block
   first_free_block->prev_next_info.le_prev = NULL;

    // Link the first free block into the free block list
    LIST_INSERT_HEAD(&freeBlocksList , first_free_block);
}
f0123223:	c9                   	leave  
f0123224:	c3                   	ret    

f0123225 <set_block_data>:

//==================================
// [2] SET BLOCK HEADER & FOOTER:
//==================================
void set_block_data(void* va, uint32 totalSize, bool isAllocated)
{
f0123225:	55                   	push   %ebp
f0123226:	89 e5                	mov    %esp,%ebp
   //TODO: [PROJECT'24.MS1 - #05] [3] DYNAMIC ALLOCATOR - set_block_data
   //COMMENT THE FOLLOWING LINE BEFORE START CODING
   //panic("set_block_data is not implemented yet");
   //Your Code is Here...

	totalSize = totalSize|isAllocated;
f0123228:	8b 45 10             	mov    0x10(%ebp),%eax
f012322b:	09 45 0c             	or     %eax,0xc(%ebp)
   *HEADER(va) = totalSize;
f012322e:	8b 45 08             	mov    0x8(%ebp),%eax
f0123231:	8d 50 fc             	lea    -0x4(%eax),%edx
f0123234:	8b 45 0c             	mov    0xc(%ebp),%eax
f0123237:	89 02                	mov    %eax,(%edx)
   *FOOTER(va) = totalSize;
f0123239:	8b 45 08             	mov    0x8(%ebp),%eax
f012323c:	83 e8 04             	sub    $0x4,%eax
f012323f:	8b 00                	mov    (%eax),%eax
f0123241:	83 e0 fe             	and    $0xfffffffe,%eax
f0123244:	8d 50 f8             	lea    -0x8(%eax),%edx
f0123247:	8b 45 08             	mov    0x8(%ebp),%eax
f012324a:	01 c2                	add    %eax,%edx
f012324c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012324f:	89 02                	mov    %eax,(%edx)
}
f0123251:	90                   	nop
f0123252:	5d                   	pop    %ebp
f0123253:	c3                   	ret    

f0123254 <alloc_block_FF>:

//=========================================
// [3] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *alloc_block_FF(uint32 size)
{
f0123254:	55                   	push   %ebp
f0123255:	89 e5                	mov    %esp,%ebp
f0123257:	83 ec 48             	sub    $0x48,%esp
	//==================================================================================
	//DON'T CHANGE THESE LINES==========================================================
	//==================================================================================
	{
		if (size % 2 != 0) size++;	//ensure that the size is even (to use LSB as allocation flag)
f012325a:	8b 45 08             	mov    0x8(%ebp),%eax
f012325d:	83 e0 01             	and    $0x1,%eax
f0123260:	85 c0                	test   %eax,%eax
f0123262:	74 03                	je     f0123267 <alloc_block_FF+0x13>
f0123264:	ff 45 08             	incl   0x8(%ebp)
		if (size < DYN_ALLOC_MIN_BLOCK_SIZE)
f0123267:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
f012326b:	77 07                	ja     f0123274 <alloc_block_FF+0x20>
			size = DYN_ALLOC_MIN_BLOCK_SIZE ;
f012326d:	c7 45 08 08 00 00 00 	movl   $0x8,0x8(%ebp)
		if (!is_initialized)
f0123274:	a1 54 fc 59 f0       	mov    0xf059fc54,%eax
f0123279:	85 c0                	test   %eax,%eax
f012327b:	75 73                	jne    f01232f0 <alloc_block_FF+0x9c>
		{
			uint32 required_size = size + 2*sizeof(int) /*header & footer*/ + 2*sizeof(int) /*da begin & end*/ ;
f012327d:	8b 45 08             	mov    0x8(%ebp),%eax
f0123280:	83 c0 10             	add    $0x10,%eax
f0123283:	89 45 f0             	mov    %eax,-0x10(%ebp)
			uint32 da_start = (uint32)sbrk(ROUNDUP(required_size, PAGE_SIZE)/PAGE_SIZE);
f0123286:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f012328d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0123290:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0123293:	01 d0                	add    %edx,%eax
f0123295:	48                   	dec    %eax
f0123296:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0123299:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012329c:	ba 00 00 00 00       	mov    $0x0,%edx
f01232a1:	f7 75 ec             	divl   -0x14(%ebp)
f01232a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01232a7:	29 d0                	sub    %edx,%eax
f01232a9:	c1 e8 0c             	shr    $0xc,%eax
f01232ac:	83 ec 0c             	sub    $0xc,%esp
f01232af:	50                   	push   %eax
f01232b0:	e8 f7 57 fe ff       	call   f0108aac <sbrk>
f01232b5:	83 c4 10             	add    $0x10,%esp
f01232b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			uint32 da_break = (uint32)sbrk(0);
f01232bb:	83 ec 0c             	sub    $0xc,%esp
f01232be:	6a 00                	push   $0x0
f01232c0:	e8 e7 57 fe ff       	call   f0108aac <sbrk>
f01232c5:	83 c4 10             	add    $0x10,%esp
f01232c8:	89 45 e0             	mov    %eax,-0x20(%ebp)
			initialize_dynamic_allocator(da_start, da_break - da_start);
f01232cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01232ce:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f01232d1:	83 ec 08             	sub    $0x8,%esp
f01232d4:	50                   	push   %eax
f01232d5:	ff 75 e4             	pushl  -0x1c(%ebp)
f01232d8:	e8 30 fe ff ff       	call   f012310d <initialize_dynamic_allocator>
f01232dd:	83 c4 10             	add    $0x10,%esp
			cprintf("Initialized \n");
f01232e0:	83 ec 0c             	sub    $0xc,%esp
f01232e3:	68 b3 05 13 f0       	push   $0xf01305b3
f01232e8:	e8 7f dc fd ff       	call   f0100f6c <cprintf>
f01232ed:	83 c4 10             	add    $0x10,%esp
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
//	panic("alloc_block_FF is not implemented yet");
//	panic("alloc_block_FF is not implemented yet");
	//Your Code is Here...

	 if (size == 0) {
f01232f0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01232f4:	75 0a                	jne    f0123300 <alloc_block_FF+0xac>
	        return NULL;
f01232f6:	b8 00 00 00 00       	mov    $0x0,%eax
f01232fb:	e9 cc 03 00 00       	jmp    f01236cc <alloc_block_FF+0x478>
	    }
	    struct BlockElement *blk = NULL;
f0123300:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	    LIST_FOREACH(blk, &freeBlocksList) {
f0123307:	a1 50 ff 59 f0       	mov    0xf059ff50,%eax
f012330c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012330f:	e9 19 03 00 00       	jmp    f012362d <alloc_block_FF+0x3d9>
	        void *va = (void *)blk;
f0123314:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123317:	89 45 cc             	mov    %eax,-0x34(%ebp)
	        uint32 blk_size = get_block_size(va);
f012331a:	83 ec 0c             	sub    $0xc,%esp
f012331d:	ff 75 cc             	pushl  -0x34(%ebp)
f0123320:	e8 84 fc ff ff       	call   f0122fa9 <get_block_size>
f0123325:	83 c4 10             	add    $0x10,%esp
f0123328:	89 45 c8             	mov    %eax,-0x38(%ebp)
	        cprintf("Bloc Size : %d , Size : %d\n",blk_size,size);
f012332b:	83 ec 04             	sub    $0x4,%esp
f012332e:	ff 75 08             	pushl  0x8(%ebp)
f0123331:	ff 75 c8             	pushl  -0x38(%ebp)
f0123334:	68 c1 05 13 f0       	push   $0xf01305c1
f0123339:	e8 2e dc fd ff       	call   f0100f6c <cprintf>
f012333e:	83 c4 10             	add    $0x10,%esp

	        if (blk_size >= size + 2 * sizeof(uint32)) {
f0123341:	8b 45 08             	mov    0x8(%ebp),%eax
f0123344:	83 c0 08             	add    $0x8,%eax
f0123347:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f012334a:	0f 87 d5 02 00 00    	ja     f0123625 <alloc_block_FF+0x3d1>
	            if (blk_size >= size + DYN_ALLOC_MIN_BLOCK_SIZE + 4 * sizeof(uint32))
f0123350:	8b 45 08             	mov    0x8(%ebp),%eax
f0123353:	83 c0 18             	add    $0x18,%eax
f0123356:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0123359:	0f 87 19 02 00 00    	ja     f0123578 <alloc_block_FF+0x324>
	            {

	                uint32 remaining_size = blk_size - size - 2 * sizeof(uint32);
f012335f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0123362:	2b 45 08             	sub    0x8(%ebp),%eax
f0123365:	83 e8 08             	sub    $0x8,%eax
f0123368:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	                void *new_block_va = (void *)((char *)va + size + 2 * sizeof(uint32)); // casting to char because its 1 byte size
f012336b:	8b 45 08             	mov    0x8(%ebp),%eax
f012336e:	8d 50 08             	lea    0x8(%eax),%edx
f0123371:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0123374:	01 d0                	add    %edx,%eax
f0123376:	89 45 c0             	mov    %eax,-0x40(%ebp)
	                set_block_data(va, size + 2 * sizeof(uint32), 1);
f0123379:	8b 45 08             	mov    0x8(%ebp),%eax
f012337c:	83 c0 08             	add    $0x8,%eax
f012337f:	83 ec 04             	sub    $0x4,%esp
f0123382:	6a 01                	push   $0x1
f0123384:	50                   	push   %eax
f0123385:	ff 75 cc             	pushl  -0x34(%ebp)
f0123388:	e8 98 fe ff ff       	call   f0123225 <set_block_data>
f012338d:	83 c4 10             	add    $0x10,%esp

	                if (LIST_PREV(blk)==NULL)
f0123390:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123393:	8b 40 04             	mov    0x4(%eax),%eax
f0123396:	85 c0                	test   %eax,%eax
f0123398:	75 68                	jne    f0123402 <alloc_block_FF+0x1ae>
					{
						LIST_INSERT_HEAD(&freeBlocksList, (struct BlockElement*)new_block_va);
f012339a:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f012339e:	75 17                	jne    f01233b7 <alloc_block_FF+0x163>
f01233a0:	83 ec 04             	sub    $0x4,%esp
f01233a3:	68 78 05 13 f0       	push   $0xf0130578
f01233a8:	68 d0 00 00 00       	push   $0xd0
f01233ad:	68 9b 05 13 f0       	push   $0xf013059b
f01233b2:	e8 63 cf fd ff       	call   f010031a <_panic>
f01233b7:	8b 15 50 ff 59 f0    	mov    0xf059ff50,%edx
f01233bd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01233c0:	89 10                	mov    %edx,(%eax)
f01233c2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01233c5:	8b 00                	mov    (%eax),%eax
f01233c7:	85 c0                	test   %eax,%eax
f01233c9:	74 0d                	je     f01233d8 <alloc_block_FF+0x184>
f01233cb:	a1 50 ff 59 f0       	mov    0xf059ff50,%eax
f01233d0:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01233d3:	89 50 04             	mov    %edx,0x4(%eax)
f01233d6:	eb 08                	jmp    f01233e0 <alloc_block_FF+0x18c>
f01233d8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01233db:	a3 54 ff 59 f0       	mov    %eax,0xf059ff54
f01233e0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01233e3:	a3 50 ff 59 f0       	mov    %eax,0xf059ff50
f01233e8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01233eb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01233f2:	a1 5c ff 59 f0       	mov    0xf059ff5c,%eax
f01233f7:	40                   	inc    %eax
f01233f8:	a3 5c ff 59 f0       	mov    %eax,0xf059ff5c
f01233fd:	e9 dc 00 00 00       	jmp    f01234de <alloc_block_FF+0x28a>
					}
					else if (LIST_NEXT(blk)==NULL)
f0123402:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123405:	8b 00                	mov    (%eax),%eax
f0123407:	85 c0                	test   %eax,%eax
f0123409:	75 65                	jne    f0123470 <alloc_block_FF+0x21c>
					{
						LIST_INSERT_TAIL(&freeBlocksList, (struct BlockElement*)new_block_va);
f012340b:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f012340f:	75 17                	jne    f0123428 <alloc_block_FF+0x1d4>
f0123411:	83 ec 04             	sub    $0x4,%esp
f0123414:	68 e0 05 13 f0       	push   $0xf01305e0
f0123419:	68 d4 00 00 00       	push   $0xd4
f012341e:	68 9b 05 13 f0       	push   $0xf013059b
f0123423:	e8 f2 ce fd ff       	call   f010031a <_panic>
f0123428:	8b 15 54 ff 59 f0    	mov    0xf059ff54,%edx
f012342e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0123431:	89 50 04             	mov    %edx,0x4(%eax)
f0123434:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0123437:	8b 40 04             	mov    0x4(%eax),%eax
f012343a:	85 c0                	test   %eax,%eax
f012343c:	74 0c                	je     f012344a <alloc_block_FF+0x1f6>
f012343e:	a1 54 ff 59 f0       	mov    0xf059ff54,%eax
f0123443:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0123446:	89 10                	mov    %edx,(%eax)
f0123448:	eb 08                	jmp    f0123452 <alloc_block_FF+0x1fe>
f012344a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012344d:	a3 50 ff 59 f0       	mov    %eax,0xf059ff50
f0123452:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0123455:	a3 54 ff 59 f0       	mov    %eax,0xf059ff54
f012345a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012345d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0123463:	a1 5c ff 59 f0       	mov    0xf059ff5c,%eax
f0123468:	40                   	inc    %eax
f0123469:	a3 5c ff 59 f0       	mov    %eax,0xf059ff5c
f012346e:	eb 6e                	jmp    f01234de <alloc_block_FF+0x28a>
					}
					else
					{
						LIST_INSERT_AFTER(&freeBlocksList, blk, (struct BlockElement*)new_block_va);
f0123470:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0123474:	74 06                	je     f012347c <alloc_block_FF+0x228>
f0123476:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f012347a:	75 17                	jne    f0123493 <alloc_block_FF+0x23f>
f012347c:	83 ec 04             	sub    $0x4,%esp
f012347f:	68 04 06 13 f0       	push   $0xf0130604
f0123484:	68 d8 00 00 00       	push   $0xd8
f0123489:	68 9b 05 13 f0       	push   $0xf013059b
f012348e:	e8 87 ce fd ff       	call   f010031a <_panic>
f0123493:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123496:	8b 10                	mov    (%eax),%edx
f0123498:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012349b:	89 10                	mov    %edx,(%eax)
f012349d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01234a0:	8b 00                	mov    (%eax),%eax
f01234a2:	85 c0                	test   %eax,%eax
f01234a4:	74 0b                	je     f01234b1 <alloc_block_FF+0x25d>
f01234a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01234a9:	8b 00                	mov    (%eax),%eax
f01234ab:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01234ae:	89 50 04             	mov    %edx,0x4(%eax)
f01234b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01234b4:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01234b7:	89 10                	mov    %edx,(%eax)
f01234b9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01234bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01234bf:	89 50 04             	mov    %edx,0x4(%eax)
f01234c2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01234c5:	8b 00                	mov    (%eax),%eax
f01234c7:	85 c0                	test   %eax,%eax
f01234c9:	75 08                	jne    f01234d3 <alloc_block_FF+0x27f>
f01234cb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01234ce:	a3 54 ff 59 f0       	mov    %eax,0xf059ff54
f01234d3:	a1 5c ff 59 f0       	mov    0xf059ff5c,%eax
f01234d8:	40                   	inc    %eax
f01234d9:	a3 5c ff 59 f0       	mov    %eax,0xf059ff5c
					}
					LIST_REMOVE(&freeBlocksList, blk);
f01234de:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01234e2:	75 17                	jne    f01234fb <alloc_block_FF+0x2a7>
f01234e4:	83 ec 04             	sub    $0x4,%esp
f01234e7:	68 38 06 13 f0       	push   $0xf0130638
f01234ec:	68 da 00 00 00       	push   $0xda
f01234f1:	68 9b 05 13 f0       	push   $0xf013059b
f01234f6:	e8 1f ce fd ff       	call   f010031a <_panic>
f01234fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01234fe:	8b 00                	mov    (%eax),%eax
f0123500:	85 c0                	test   %eax,%eax
f0123502:	74 10                	je     f0123514 <alloc_block_FF+0x2c0>
f0123504:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123507:	8b 00                	mov    (%eax),%eax
f0123509:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012350c:	8b 52 04             	mov    0x4(%edx),%edx
f012350f:	89 50 04             	mov    %edx,0x4(%eax)
f0123512:	eb 0b                	jmp    f012351f <alloc_block_FF+0x2cb>
f0123514:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123517:	8b 40 04             	mov    0x4(%eax),%eax
f012351a:	a3 54 ff 59 f0       	mov    %eax,0xf059ff54
f012351f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123522:	8b 40 04             	mov    0x4(%eax),%eax
f0123525:	85 c0                	test   %eax,%eax
f0123527:	74 0f                	je     f0123538 <alloc_block_FF+0x2e4>
f0123529:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012352c:	8b 40 04             	mov    0x4(%eax),%eax
f012352f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123532:	8b 12                	mov    (%edx),%edx
f0123534:	89 10                	mov    %edx,(%eax)
f0123536:	eb 0a                	jmp    f0123542 <alloc_block_FF+0x2ee>
f0123538:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012353b:	8b 00                	mov    (%eax),%eax
f012353d:	a3 50 ff 59 f0       	mov    %eax,0xf059ff50
f0123542:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123545:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f012354b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012354e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0123555:	a1 5c ff 59 f0       	mov    0xf059ff5c,%eax
f012355a:	48                   	dec    %eax
f012355b:	a3 5c ff 59 f0       	mov    %eax,0xf059ff5c
					set_block_data(new_block_va, remaining_size, 0);
f0123560:	83 ec 04             	sub    $0x4,%esp
f0123563:	6a 00                	push   $0x0
f0123565:	ff 75 c4             	pushl  -0x3c(%ebp)
f0123568:	ff 75 c0             	pushl  -0x40(%ebp)
f012356b:	e8 b5 fc ff ff       	call   f0123225 <set_block_data>
f0123570:	83 c4 10             	add    $0x10,%esp
f0123573:	e9 a5 00 00 00       	jmp    f012361d <alloc_block_FF+0x3c9>
	            }
	            else
	            {
	            	cprintf("225\n");
f0123578:	83 ec 0c             	sub    $0xc,%esp
f012357b:	68 56 06 13 f0       	push   $0xf0130656
f0123580:	e8 e7 d9 fd ff       	call   f0100f6c <cprintf>
f0123585:	83 c4 10             	add    $0x10,%esp
	            	set_block_data(va, blk_size, 1);
f0123588:	83 ec 04             	sub    $0x4,%esp
f012358b:	6a 01                	push   $0x1
f012358d:	ff 75 c8             	pushl  -0x38(%ebp)
f0123590:	ff 75 cc             	pushl  -0x34(%ebp)
f0123593:	e8 8d fc ff ff       	call   f0123225 <set_block_data>
f0123598:	83 c4 10             	add    $0x10,%esp
	            	LIST_REMOVE(&freeBlocksList,blk);
f012359b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012359f:	75 17                	jne    f01235b8 <alloc_block_FF+0x364>
f01235a1:	83 ec 04             	sub    $0x4,%esp
f01235a4:	68 38 06 13 f0       	push   $0xf0130638
f01235a9:	68 e1 00 00 00       	push   $0xe1
f01235ae:	68 9b 05 13 f0       	push   $0xf013059b
f01235b3:	e8 62 cd fd ff       	call   f010031a <_panic>
f01235b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01235bb:	8b 00                	mov    (%eax),%eax
f01235bd:	85 c0                	test   %eax,%eax
f01235bf:	74 10                	je     f01235d1 <alloc_block_FF+0x37d>
f01235c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01235c4:	8b 00                	mov    (%eax),%eax
f01235c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01235c9:	8b 52 04             	mov    0x4(%edx),%edx
f01235cc:	89 50 04             	mov    %edx,0x4(%eax)
f01235cf:	eb 0b                	jmp    f01235dc <alloc_block_FF+0x388>
f01235d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01235d4:	8b 40 04             	mov    0x4(%eax),%eax
f01235d7:	a3 54 ff 59 f0       	mov    %eax,0xf059ff54
f01235dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01235df:	8b 40 04             	mov    0x4(%eax),%eax
f01235e2:	85 c0                	test   %eax,%eax
f01235e4:	74 0f                	je     f01235f5 <alloc_block_FF+0x3a1>
f01235e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01235e9:	8b 40 04             	mov    0x4(%eax),%eax
f01235ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01235ef:	8b 12                	mov    (%edx),%edx
f01235f1:	89 10                	mov    %edx,(%eax)
f01235f3:	eb 0a                	jmp    f01235ff <alloc_block_FF+0x3ab>
f01235f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01235f8:	8b 00                	mov    (%eax),%eax
f01235fa:	a3 50 ff 59 f0       	mov    %eax,0xf059ff50
f01235ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123602:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0123608:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012360b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0123612:	a1 5c ff 59 f0       	mov    0xf059ff5c,%eax
f0123617:	48                   	dec    %eax
f0123618:	a3 5c ff 59 f0       	mov    %eax,0xf059ff5c
	            }
	            return va;
f012361d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0123620:	e9 a7 00 00 00       	jmp    f01236cc <alloc_block_FF+0x478>

	 if (size == 0) {
	        return NULL;
	    }
	    struct BlockElement *blk = NULL;
	    LIST_FOREACH(blk, &freeBlocksList) {
f0123625:	a1 58 ff 59 f0       	mov    0xf059ff58,%eax
f012362a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012362d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0123631:	74 07                	je     f012363a <alloc_block_FF+0x3e6>
f0123633:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123636:	8b 00                	mov    (%eax),%eax
f0123638:	eb 05                	jmp    f012363f <alloc_block_FF+0x3eb>
f012363a:	b8 00 00 00 00       	mov    $0x0,%eax
f012363f:	a3 58 ff 59 f0       	mov    %eax,0xf059ff58
f0123644:	a1 58 ff 59 f0       	mov    0xf059ff58,%eax
f0123649:	85 c0                	test   %eax,%eax
f012364b:	0f 85 c3 fc ff ff    	jne    f0123314 <alloc_block_FF+0xc0>
f0123651:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0123655:	0f 85 b9 fc ff ff    	jne    f0123314 <alloc_block_FF+0xc0>
	            	LIST_REMOVE(&freeBlocksList,blk);
	            }
	            return va;
	        }
	    }
	    cprintf("sbrk\n");
f012365b:	83 ec 0c             	sub    $0xc,%esp
f012365e:	68 5b 06 13 f0       	push   $0xf013065b
f0123663:	e8 04 d9 fd ff       	call   f0100f6c <cprintf>
f0123668:	83 c4 10             	add    $0x10,%esp
	    uint32 required_size = size + 2 * sizeof(uint32);
f012366b:	8b 45 08             	mov    0x8(%ebp),%eax
f012366e:	83 c0 08             	add    $0x8,%eax
f0123671:	89 45 dc             	mov    %eax,-0x24(%ebp)
	    void *new_mem = sbrk(ROUNDUP(required_size, PAGE_SIZE) / PAGE_SIZE);
f0123674:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f012367b:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012367e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123681:	01 d0                	add    %edx,%eax
f0123683:	48                   	dec    %eax
f0123684:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0123687:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012368a:	ba 00 00 00 00       	mov    $0x0,%edx
f012368f:	f7 75 d8             	divl   -0x28(%ebp)
f0123692:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0123695:	29 d0                	sub    %edx,%eax
f0123697:	c1 e8 0c             	shr    $0xc,%eax
f012369a:	83 ec 0c             	sub    $0xc,%esp
f012369d:	50                   	push   %eax
f012369e:	e8 09 54 fe ff       	call   f0108aac <sbrk>
f01236a3:	83 c4 10             	add    $0x10,%esp
f01236a6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if (new_mem == (void *)-1) {
f01236a9:	83 7d d0 ff          	cmpl   $0xffffffff,-0x30(%ebp)
f01236ad:	75 07                	jne    f01236b6 <alloc_block_FF+0x462>
			return NULL; // Allocation failed
f01236af:	b8 00 00 00 00       	mov    $0x0,%eax
f01236b4:	eb 16                	jmp    f01236cc <alloc_block_FF+0x478>
		}
		set_block_data(new_mem, required_size, 1);
f01236b6:	83 ec 04             	sub    $0x4,%esp
f01236b9:	6a 01                	push   $0x1
f01236bb:	ff 75 dc             	pushl  -0x24(%ebp)
f01236be:	ff 75 d0             	pushl  -0x30(%ebp)
f01236c1:	e8 5f fb ff ff       	call   f0123225 <set_block_data>
f01236c6:	83 c4 10             	add    $0x10,%esp
		return new_mem;
f01236c9:	8b 45 d0             	mov    -0x30(%ebp),%eax
}
f01236cc:	c9                   	leave  
f01236cd:	c3                   	ret    

f01236ce <alloc_block_BF>:
//=========================================
// [4] ALLOCATE BLOCK BY BEST FIT:
//=========================================
void *alloc_block_BF(uint32 size)
{
f01236ce:	55                   	push   %ebp
f01236cf:	89 e5                	mov    %esp,%ebp
f01236d1:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - BONUS] [3] DYNAMIC ALLOCATOR - alloc_block_BF
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("alloc_block_BF is not implemented yet");
f01236d4:	83 ec 04             	sub    $0x4,%esp
f01236d7:	68 64 06 13 f0       	push   $0xf0130664
f01236dc:	68 f6 00 00 00       	push   $0xf6
f01236e1:	68 9b 05 13 f0       	push   $0xf013059b
f01236e6:	e8 2f cc fd ff       	call   f010031a <_panic>

f01236eb <merging>:
}

//===================================================
// [5] FREE BLOCK WITH COALESCING:
//===================================================
void merging(struct BlockElement *prev_block, struct BlockElement *next_block, void* va){
f01236eb:	55                   	push   %ebp
f01236ec:	89 e5                	mov    %esp,%ebp
f01236ee:	53                   	push   %ebx
f01236ef:	83 ec 24             	sub    $0x24,%esp
//	cprintf("273\n");
	bool prev_is_free = 0, next_is_free = 0;
f01236f2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01236f9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
//	cprintf("%x\n", (char *)prev_block);
//	cprintf("%x\n", get_block_size(prev_block));
//	cprintf("%x\n", (char *)va);
//	cprintf("%x\n", (char *)prev_block + get_block_size(prev_block));
	if (prev_block != NULL && (char *)prev_block + get_block_size(prev_block) == (char *)va) {
f0123700:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0123704:	74 1e                	je     f0123724 <merging+0x39>
f0123706:	ff 75 08             	pushl  0x8(%ebp)
f0123709:	e8 9b f8 ff ff       	call   f0122fa9 <get_block_size>
f012370e:	83 c4 04             	add    $0x4,%esp
f0123711:	89 c2                	mov    %eax,%edx
f0123713:	8b 45 08             	mov    0x8(%ebp),%eax
f0123716:	01 d0                	add    %edx,%eax
f0123718:	3b 45 10             	cmp    0x10(%ebp),%eax
f012371b:	75 07                	jne    f0123724 <merging+0x39>
//		cprintf("276\n");
		prev_is_free = 1;
f012371d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	}
	if (next_block != NULL && (char *)va + get_block_size(va) == (char *)next_block) {
f0123724:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0123728:	74 1e                	je     f0123748 <merging+0x5d>
f012372a:	ff 75 10             	pushl  0x10(%ebp)
f012372d:	e8 77 f8 ff ff       	call   f0122fa9 <get_block_size>
f0123732:	83 c4 04             	add    $0x4,%esp
f0123735:	89 c2                	mov    %eax,%edx
f0123737:	8b 45 10             	mov    0x10(%ebp),%eax
f012373a:	01 d0                	add    %edx,%eax
f012373c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012373f:	75 07                	jne    f0123748 <merging+0x5d>
		next_is_free = 1;
f0123741:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	}


	if(prev_is_free && next_is_free)
f0123748:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012374c:	0f 84 e1 00 00 00    	je     f0123833 <merging+0x148>
f0123752:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0123756:	0f 84 d7 00 00 00    	je     f0123833 <merging+0x148>
	{
//		cprintf("284\n");
		//merge - 2 sides
		prev_block->prev_next_info.le_next = next_block->prev_next_info.le_next;
f012375c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012375f:	8b 10                	mov    (%eax),%edx
f0123761:	8b 45 08             	mov    0x8(%ebp),%eax
f0123764:	89 10                	mov    %edx,(%eax)

		LIST_NEXT( next_block )->prev_next_info.le_prev = prev_block;
f0123766:	8b 45 0c             	mov    0xc(%ebp),%eax
f0123769:	8b 00                	mov    (%eax),%eax
f012376b:	8b 55 08             	mov    0x8(%ebp),%edx
f012376e:	89 50 04             	mov    %edx,0x4(%eax)


		uint32 new_block_size = get_block_size(prev_block) + get_block_size(va) + get_block_size(next_block);
f0123771:	ff 75 08             	pushl  0x8(%ebp)
f0123774:	e8 30 f8 ff ff       	call   f0122fa9 <get_block_size>
f0123779:	83 c4 04             	add    $0x4,%esp
f012377c:	89 c3                	mov    %eax,%ebx
f012377e:	ff 75 10             	pushl  0x10(%ebp)
f0123781:	e8 23 f8 ff ff       	call   f0122fa9 <get_block_size>
f0123786:	83 c4 04             	add    $0x4,%esp
f0123789:	01 c3                	add    %eax,%ebx
f012378b:	ff 75 0c             	pushl  0xc(%ebp)
f012378e:	e8 16 f8 ff ff       	call   f0122fa9 <get_block_size>
f0123793:	83 c4 04             	add    $0x4,%esp
f0123796:	01 d8                	add    %ebx,%eax
f0123798:	89 45 ec             	mov    %eax,-0x14(%ebp)
		set_block_data(prev_block, new_block_size, 0);
f012379b:	6a 00                	push   $0x0
f012379d:	ff 75 ec             	pushl  -0x14(%ebp)
f01237a0:	ff 75 08             	pushl  0x8(%ebp)
f01237a3:	e8 7d fa ff ff       	call   f0123225 <set_block_data>
f01237a8:	83 c4 0c             	add    $0xc,%esp


		LIST_REMOVE(&freeBlocksList, next_block);
f01237ab:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01237af:	75 17                	jne    f01237c8 <merging+0xdd>
f01237b1:	83 ec 04             	sub    $0x4,%esp
f01237b4:	68 38 06 13 f0       	push   $0xf0130638
f01237b9:	68 1b 01 00 00       	push   $0x11b
f01237be:	68 9b 05 13 f0       	push   $0xf013059b
f01237c3:	e8 52 cb fd ff       	call   f010031a <_panic>
f01237c8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01237cb:	8b 00                	mov    (%eax),%eax
f01237cd:	85 c0                	test   %eax,%eax
f01237cf:	74 10                	je     f01237e1 <merging+0xf6>
f01237d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01237d4:	8b 00                	mov    (%eax),%eax
f01237d6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01237d9:	8b 52 04             	mov    0x4(%edx),%edx
f01237dc:	89 50 04             	mov    %edx,0x4(%eax)
f01237df:	eb 0b                	jmp    f01237ec <merging+0x101>
f01237e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01237e4:	8b 40 04             	mov    0x4(%eax),%eax
f01237e7:	a3 54 ff 59 f0       	mov    %eax,0xf059ff54
f01237ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01237ef:	8b 40 04             	mov    0x4(%eax),%eax
f01237f2:	85 c0                	test   %eax,%eax
f01237f4:	74 0f                	je     f0123805 <merging+0x11a>
f01237f6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01237f9:	8b 40 04             	mov    0x4(%eax),%eax
f01237fc:	8b 55 0c             	mov    0xc(%ebp),%edx
f01237ff:	8b 12                	mov    (%edx),%edx
f0123801:	89 10                	mov    %edx,(%eax)
f0123803:	eb 0a                	jmp    f012380f <merging+0x124>
f0123805:	8b 45 0c             	mov    0xc(%ebp),%eax
f0123808:	8b 00                	mov    (%eax),%eax
f012380a:	a3 50 ff 59 f0       	mov    %eax,0xf059ff50
f012380f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0123812:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0123818:	8b 45 0c             	mov    0xc(%ebp),%eax
f012381b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0123822:	a1 5c ff 59 f0       	mov    0xf059ff5c,%eax
f0123827:	48                   	dec    %eax
f0123828:	a3 5c ff 59 f0       	mov    %eax,0xf059ff5c
		next_is_free = 1;
	}


	if(prev_is_free && next_is_free)
	{
f012382d:	90                   	nop
//				cprintf("The footer: %d\n", FOOTER(va));
		set_block_data(va, get_block_size(va), 0);
//				cprintf("After The header: %d\n", HEADER(va));
//				cprintf("The footer: %d\n", FOOTER(va));
	}
}
f012382e:	e9 45 02 00 00       	jmp    f0123a78 <merging+0x38d>
		set_block_data(prev_block, new_block_size, 0);


		LIST_REMOVE(&freeBlocksList, next_block);
	}
	else if(prev_is_free)
f0123833:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0123837:	74 3b                	je     f0123874 <merging+0x189>
	{
//		cprintf("299\n");
		//merge - left side
		uint32 new_block_size = get_block_size(prev_block) + get_block_size(va);
f0123839:	83 ec 0c             	sub    $0xc,%esp
f012383c:	ff 75 08             	pushl  0x8(%ebp)
f012383f:	e8 65 f7 ff ff       	call   f0122fa9 <get_block_size>
f0123844:	83 c4 10             	add    $0x10,%esp
f0123847:	89 c3                	mov    %eax,%ebx
f0123849:	83 ec 0c             	sub    $0xc,%esp
f012384c:	ff 75 10             	pushl  0x10(%ebp)
f012384f:	e8 55 f7 ff ff       	call   f0122fa9 <get_block_size>
f0123854:	83 c4 10             	add    $0x10,%esp
f0123857:	01 d8                	add    %ebx,%eax
f0123859:	89 45 e8             	mov    %eax,-0x18(%ebp)
		set_block_data(prev_block, new_block_size, 0);
f012385c:	83 ec 04             	sub    $0x4,%esp
f012385f:	6a 00                	push   $0x0
f0123861:	ff 75 e8             	pushl  -0x18(%ebp)
f0123864:	ff 75 08             	pushl  0x8(%ebp)
f0123867:	e8 b9 f9 ff ff       	call   f0123225 <set_block_data>
f012386c:	83 c4 10             	add    $0x10,%esp
//				cprintf("The footer: %d\n", FOOTER(va));
		set_block_data(va, get_block_size(va), 0);
//				cprintf("After The header: %d\n", HEADER(va));
//				cprintf("The footer: %d\n", FOOTER(va));
	}
}
f012386f:	e9 04 02 00 00       	jmp    f0123a78 <merging+0x38d>
//		cprintf("299\n");
		//merge - left side
		uint32 new_block_size = get_block_size(prev_block) + get_block_size(va);
		set_block_data(prev_block, new_block_size, 0);
	}
	else if(next_is_free)
f0123874:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0123878:	0f 84 88 00 00 00    	je     f0123906 <merging+0x21b>
	{
//		cprintf("306\n");
		//merge - right side
		if(prev_block != NULL) prev_block->prev_next_info.le_next = va;
f012387e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0123882:	74 08                	je     f012388c <merging+0x1a1>
f0123884:	8b 45 08             	mov    0x8(%ebp),%eax
f0123887:	8b 55 10             	mov    0x10(%ebp),%edx
f012388a:	89 10                	mov    %edx,(%eax)
		LIST_NEXT( next_block )->prev_next_info.le_prev = va;
f012388c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012388f:	8b 00                	mov    (%eax),%eax
f0123891:	8b 55 10             	mov    0x10(%ebp),%edx
f0123894:	89 50 04             	mov    %edx,0x4(%eax)

		uint32 new_block_size = get_block_size(va) + get_block_size(next_block);
f0123897:	83 ec 0c             	sub    $0xc,%esp
f012389a:	ff 75 10             	pushl  0x10(%ebp)
f012389d:	e8 07 f7 ff ff       	call   f0122fa9 <get_block_size>
f01238a2:	83 c4 10             	add    $0x10,%esp
f01238a5:	89 c3                	mov    %eax,%ebx
f01238a7:	83 ec 0c             	sub    $0xc,%esp
f01238aa:	ff 75 0c             	pushl  0xc(%ebp)
f01238ad:	e8 f7 f6 ff ff       	call   f0122fa9 <get_block_size>
f01238b2:	83 c4 10             	add    $0x10,%esp
f01238b5:	01 d8                	add    %ebx,%eax
f01238b7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		set_block_data(va, new_block_size, 0);
f01238ba:	83 ec 04             	sub    $0x4,%esp
f01238bd:	6a 00                	push   $0x0
f01238bf:	ff 75 e4             	pushl  -0x1c(%ebp)
f01238c2:	ff 75 10             	pushl  0x10(%ebp)
f01238c5:	e8 5b f9 ff ff       	call   f0123225 <set_block_data>
f01238ca:	83 c4 10             	add    $0x10,%esp


		struct BlockElement *va_block = (struct BlockElement *)va;
f01238cd:	8b 45 10             	mov    0x10(%ebp),%eax
f01238d0:	89 45 e0             	mov    %eax,-0x20(%ebp)
		va_block->prev_next_info.le_next = next_block->prev_next_info.le_next;
f01238d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01238d6:	8b 10                	mov    (%eax),%edx
f01238d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01238db:	89 10                	mov    %edx,(%eax)
		va_block->prev_next_info.le_prev = prev_block;
f01238dd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01238e0:	8b 55 08             	mov    0x8(%ebp),%edx
f01238e3:	89 50 04             	mov    %edx,0x4(%eax)

		if(prev_block != NULL) LIST_NEXT(prev_block) = va_block;
f01238e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01238ea:	74 0d                	je     f01238f9 <merging+0x20e>
f01238ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01238ef:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01238f2:	89 10                	mov    %edx,(%eax)
//				cprintf("The footer: %d\n", FOOTER(va));
		set_block_data(va, get_block_size(va), 0);
//				cprintf("After The header: %d\n", HEADER(va));
//				cprintf("The footer: %d\n", FOOTER(va));
	}
}
f01238f4:	e9 7f 01 00 00       	jmp    f0123a78 <merging+0x38d>
		struct BlockElement *va_block = (struct BlockElement *)va;
		va_block->prev_next_info.le_next = next_block->prev_next_info.le_next;
		va_block->prev_next_info.le_prev = prev_block;

		if(prev_block != NULL) LIST_NEXT(prev_block) = va_block;
		else LIST_FIRST(&freeBlocksList) = va_block;
f01238f9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01238fc:	a3 50 ff 59 f0       	mov    %eax,0xf059ff50
//				cprintf("The footer: %d\n", FOOTER(va));
		set_block_data(va, get_block_size(va), 0);
//				cprintf("After The header: %d\n", HEADER(va));
//				cprintf("The footer: %d\n", FOOTER(va));
	}
}
f0123901:	e9 72 01 00 00       	jmp    f0123a78 <merging+0x38d>
	{
//		cprintf("324\n");
//		if(prev_block != NULL) prev_block->prev_next_info.le_next = va;
//		if(next_block != NULL) next_block->prev_next_info.le_prev = va;

		struct BlockElement *va_block = (struct BlockElement *)va;
f0123906:	8b 45 10             	mov    0x10(%ebp),%eax
f0123909:	89 45 dc             	mov    %eax,-0x24(%ebp)
//		va_block->prev_next_info.le_next = next_block;
//
//		va_block->prev_next_info.le_prev = prev_block;

		//check if the block should be inserted at the BEGINNING of the list
		if(prev_block != NULL && next_block != NULL) LIST_INSERT_AFTER(&freeBlocksList, prev_block, va_block);
f012390c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0123910:	74 79                	je     f012398b <merging+0x2a0>
f0123912:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0123916:	74 73                	je     f012398b <merging+0x2a0>
f0123918:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012391c:	74 06                	je     f0123924 <merging+0x239>
f012391e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0123922:	75 17                	jne    f012393b <merging+0x250>
f0123924:	83 ec 04             	sub    $0x4,%esp
f0123927:	68 04 06 13 f0       	push   $0xf0130604
f012392c:	68 42 01 00 00       	push   $0x142
f0123931:	68 9b 05 13 f0       	push   $0xf013059b
f0123936:	e8 df c9 fd ff       	call   f010031a <_panic>
f012393b:	8b 45 08             	mov    0x8(%ebp),%eax
f012393e:	8b 10                	mov    (%eax),%edx
f0123940:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0123943:	89 10                	mov    %edx,(%eax)
f0123945:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0123948:	8b 00                	mov    (%eax),%eax
f012394a:	85 c0                	test   %eax,%eax
f012394c:	74 0b                	je     f0123959 <merging+0x26e>
f012394e:	8b 45 08             	mov    0x8(%ebp),%eax
f0123951:	8b 00                	mov    (%eax),%eax
f0123953:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0123956:	89 50 04             	mov    %edx,0x4(%eax)
f0123959:	8b 45 08             	mov    0x8(%ebp),%eax
f012395c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012395f:	89 10                	mov    %edx,(%eax)
f0123961:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0123964:	8b 55 08             	mov    0x8(%ebp),%edx
f0123967:	89 50 04             	mov    %edx,0x4(%eax)
f012396a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012396d:	8b 00                	mov    (%eax),%eax
f012396f:	85 c0                	test   %eax,%eax
f0123971:	75 08                	jne    f012397b <merging+0x290>
f0123973:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0123976:	a3 54 ff 59 f0       	mov    %eax,0xf059ff54
f012397b:	a1 5c ff 59 f0       	mov    0xf059ff5c,%eax
f0123980:	40                   	inc    %eax
f0123981:	a3 5c ff 59 f0       	mov    %eax,0xf059ff5c
f0123986:	e9 ce 00 00 00       	jmp    f0123a59 <merging+0x36e>
		else if(prev_block != NULL) LIST_INSERT_TAIL(&freeBlocksList, va_block);
f012398b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012398f:	74 65                	je     f01239f6 <merging+0x30b>
f0123991:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0123995:	75 17                	jne    f01239ae <merging+0x2c3>
f0123997:	83 ec 04             	sub    $0x4,%esp
f012399a:	68 e0 05 13 f0       	push   $0xf01305e0
f012399f:	68 43 01 00 00       	push   $0x143
f01239a4:	68 9b 05 13 f0       	push   $0xf013059b
f01239a9:	e8 6c c9 fd ff       	call   f010031a <_panic>
f01239ae:	8b 15 54 ff 59 f0    	mov    0xf059ff54,%edx
f01239b4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01239b7:	89 50 04             	mov    %edx,0x4(%eax)
f01239ba:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01239bd:	8b 40 04             	mov    0x4(%eax),%eax
f01239c0:	85 c0                	test   %eax,%eax
f01239c2:	74 0c                	je     f01239d0 <merging+0x2e5>
f01239c4:	a1 54 ff 59 f0       	mov    0xf059ff54,%eax
f01239c9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01239cc:	89 10                	mov    %edx,(%eax)
f01239ce:	eb 08                	jmp    f01239d8 <merging+0x2ed>
f01239d0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01239d3:	a3 50 ff 59 f0       	mov    %eax,0xf059ff50
f01239d8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01239db:	a3 54 ff 59 f0       	mov    %eax,0xf059ff54
f01239e0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01239e3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01239e9:	a1 5c ff 59 f0       	mov    0xf059ff5c,%eax
f01239ee:	40                   	inc    %eax
f01239ef:	a3 5c ff 59 f0       	mov    %eax,0xf059ff5c
f01239f4:	eb 63                	jmp    f0123a59 <merging+0x36e>
		else {
//			cprintf("342\n");
			LIST_INSERT_HEAD(&freeBlocksList, va_block);
f01239f6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01239fa:	75 17                	jne    f0123a13 <merging+0x328>
f01239fc:	83 ec 04             	sub    $0x4,%esp
f01239ff:	68 78 05 13 f0       	push   $0xf0130578
f0123a04:	68 46 01 00 00       	push   $0x146
f0123a09:	68 9b 05 13 f0       	push   $0xf013059b
f0123a0e:	e8 07 c9 fd ff       	call   f010031a <_panic>
f0123a13:	8b 15 50 ff 59 f0    	mov    0xf059ff50,%edx
f0123a19:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0123a1c:	89 10                	mov    %edx,(%eax)
f0123a1e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0123a21:	8b 00                	mov    (%eax),%eax
f0123a23:	85 c0                	test   %eax,%eax
f0123a25:	74 0d                	je     f0123a34 <merging+0x349>
f0123a27:	a1 50 ff 59 f0       	mov    0xf059ff50,%eax
f0123a2c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0123a2f:	89 50 04             	mov    %edx,0x4(%eax)
f0123a32:	eb 08                	jmp    f0123a3c <merging+0x351>
f0123a34:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0123a37:	a3 54 ff 59 f0       	mov    %eax,0xf059ff54
f0123a3c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0123a3f:	a3 50 ff 59 f0       	mov    %eax,0xf059ff50
f0123a44:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0123a47:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0123a4e:	a1 5c ff 59 f0       	mov    0xf059ff5c,%eax
f0123a53:	40                   	inc    %eax
f0123a54:	a3 5c ff 59 f0       	mov    %eax,0xf059ff5c
		}

//				cprintf("Before The header: %d\n", HEADER(va));
//				cprintf("The footer: %d\n", FOOTER(va));
		set_block_data(va, get_block_size(va), 0);
f0123a59:	83 ec 0c             	sub    $0xc,%esp
f0123a5c:	ff 75 10             	pushl  0x10(%ebp)
f0123a5f:	e8 45 f5 ff ff       	call   f0122fa9 <get_block_size>
f0123a64:	83 c4 10             	add    $0x10,%esp
f0123a67:	83 ec 04             	sub    $0x4,%esp
f0123a6a:	6a 00                	push   $0x0
f0123a6c:	50                   	push   %eax
f0123a6d:	ff 75 10             	pushl  0x10(%ebp)
f0123a70:	e8 b0 f7 ff ff       	call   f0123225 <set_block_data>
f0123a75:	83 c4 10             	add    $0x10,%esp
//				cprintf("After The header: %d\n", HEADER(va));
//				cprintf("The footer: %d\n", FOOTER(va));
	}
}
f0123a78:	90                   	nop
f0123a79:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0123a7c:	c9                   	leave  
f0123a7d:	c3                   	ret    

f0123a7e <free_block>:
//===================================================
// [5] FREE BLOCK WITH COALESCING:
//===================================================
void free_block(void *va)
{
f0123a7e:	55                   	push   %ebp
f0123a7f:	89 e5                	mov    %esp,%ebp
f0123a81:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT'24.MS1 - #07] [3] DYNAMIC ALLOCATOR - free_block
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	//panic("free_block is not implemented yet");
	//Your Code is Here...
	struct BlockElement *prev_block = LIST_FIRST(&freeBlocksList);
f0123a84:	a1 50 ff 59 f0       	mov    0xf059ff50,%eax
f0123a89:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	}
//	cprintf("SIZE:, %d\n", LIST_SIZE(&freeBlocksList));
//	cprintf("the addresss of va: %x\n", (char *)va);


	if((char *)LIST_LAST(&freeBlocksList) < (char *)va){
f0123a8c:	a1 54 ff 59 f0       	mov    0xf059ff54,%eax
f0123a91:	3b 45 08             	cmp    0x8(%ebp),%eax
f0123a94:	73 1b                	jae    f0123ab1 <free_block+0x33>
//		cprintf("363\n");
		merging(LIST_LAST(&freeBlocksList), NULL, va);
f0123a96:	a1 54 ff 59 f0       	mov    0xf059ff54,%eax
f0123a9b:	83 ec 04             	sub    $0x4,%esp
f0123a9e:	ff 75 08             	pushl  0x8(%ebp)
f0123aa1:	6a 00                	push   $0x0
f0123aa3:	50                   	push   %eax
f0123aa4:	e8 42 fc ff ff       	call   f01236eb <merging>
f0123aa9:	83 c4 10             	add    $0x10,%esp
			merging(prev_block, next_block, va);
			break;
		}
	}

}
f0123aac:	e9 8b 00 00 00       	jmp    f0123b3c <free_block+0xbe>

	if((char *)LIST_LAST(&freeBlocksList) < (char *)va){
//		cprintf("363\n");
		merging(LIST_LAST(&freeBlocksList), NULL, va);
	}
	else if((char *)LIST_FIRST(&freeBlocksList) > (char *)va) {
f0123ab1:	a1 50 ff 59 f0       	mov    0xf059ff50,%eax
f0123ab6:	3b 45 08             	cmp    0x8(%ebp),%eax
f0123ab9:	76 18                	jbe    f0123ad3 <free_block+0x55>
//		cprintf("367\n");
		merging(NULL, LIST_FIRST(&freeBlocksList),va);
f0123abb:	a1 50 ff 59 f0       	mov    0xf059ff50,%eax
f0123ac0:	83 ec 04             	sub    $0x4,%esp
f0123ac3:	ff 75 08             	pushl  0x8(%ebp)
f0123ac6:	50                   	push   %eax
f0123ac7:	6a 00                	push   $0x0
f0123ac9:	e8 1d fc ff ff       	call   f01236eb <merging>
f0123ace:	83 c4 10             	add    $0x10,%esp
			merging(prev_block, next_block, va);
			break;
		}
	}

}
f0123ad1:	eb 69                	jmp    f0123b3c <free_block+0xbe>
	}
	else if((char *)LIST_FIRST(&freeBlocksList) > (char *)va) {
//		cprintf("367\n");
		merging(NULL, LIST_FIRST(&freeBlocksList),va);
	}
	else LIST_FOREACH (prev_block, &freeBlocksList){
f0123ad3:	a1 50 ff 59 f0       	mov    0xf059ff50,%eax
f0123ad8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0123adb:	eb 39                	jmp    f0123b16 <free_block+0x98>
		if((uint32 *)prev_block < (uint32 *)va && (uint32 *)prev_block->prev_next_info.le_next > (uint32 *)va ){
f0123add:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123ae0:	3b 45 08             	cmp    0x8(%ebp),%eax
f0123ae3:	73 29                	jae    f0123b0e <free_block+0x90>
f0123ae5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123ae8:	8b 00                	mov    (%eax),%eax
f0123aea:	3b 45 08             	cmp    0x8(%ebp),%eax
f0123aed:	76 1f                	jbe    f0123b0e <free_block+0x90>
//			cprintf("376\n");
			//get the address of prev and next
			struct BlockElement *next_block = LIST_NEXT(prev_block);
f0123aef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123af2:	8b 00                	mov    (%eax),%eax
f0123af4:	89 45 f0             	mov    %eax,-0x10(%ebp)
			merging(prev_block, next_block, va);
f0123af7:	83 ec 04             	sub    $0x4,%esp
f0123afa:	ff 75 08             	pushl  0x8(%ebp)
f0123afd:	ff 75 f0             	pushl  -0x10(%ebp)
f0123b00:	ff 75 f4             	pushl  -0xc(%ebp)
f0123b03:	e8 e3 fb ff ff       	call   f01236eb <merging>
f0123b08:	83 c4 10             	add    $0x10,%esp
			break;
f0123b0b:	90                   	nop
		}
	}

}
f0123b0c:	eb 2e                	jmp    f0123b3c <free_block+0xbe>
	}
	else if((char *)LIST_FIRST(&freeBlocksList) > (char *)va) {
//		cprintf("367\n");
		merging(NULL, LIST_FIRST(&freeBlocksList),va);
	}
	else LIST_FOREACH (prev_block, &freeBlocksList){
f0123b0e:	a1 58 ff 59 f0       	mov    0xf059ff58,%eax
f0123b13:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0123b16:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0123b1a:	74 07                	je     f0123b23 <free_block+0xa5>
f0123b1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123b1f:	8b 00                	mov    (%eax),%eax
f0123b21:	eb 05                	jmp    f0123b28 <free_block+0xaa>
f0123b23:	b8 00 00 00 00       	mov    $0x0,%eax
f0123b28:	a3 58 ff 59 f0       	mov    %eax,0xf059ff58
f0123b2d:	a1 58 ff 59 f0       	mov    0xf059ff58,%eax
f0123b32:	85 c0                	test   %eax,%eax
f0123b34:	75 a7                	jne    f0123add <free_block+0x5f>
f0123b36:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0123b3a:	75 a1                	jne    f0123add <free_block+0x5f>
			merging(prev_block, next_block, va);
			break;
		}
	}

}
f0123b3c:	90                   	nop
f0123b3d:	c9                   	leave  
f0123b3e:	c3                   	ret    

f0123b3f <realloc_block_FF>:

//=========================================
// [6] REALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *realloc_block_FF(void* va, uint32 new_size)
{
f0123b3f:	55                   	push   %ebp
f0123b40:	89 e5                	mov    %esp,%ebp
f0123b42:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #08] [3] DYNAMIC ALLOCATOR - realloc_block_FF
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("realloc_block_FF is not implemented yet");
f0123b45:	83 ec 04             	sub    $0x4,%esp
f0123b48:	68 8c 06 13 f0       	push   $0xf013068c
f0123b4d:	68 7e 01 00 00       	push   $0x17e
f0123b52:	68 9b 05 13 f0       	push   $0xf013059b
f0123b57:	e8 be c7 fd ff       	call   f010031a <_panic>

f0123b5c <alloc_block_WF>:
/*********************************************************************************************/
//=========================================
// [7] ALLOCATE BLOCK BY WORST FIT:
//=========================================
void *alloc_block_WF(uint32 size)
{
f0123b5c:	55                   	push   %ebp
f0123b5d:	89 e5                	mov    %esp,%ebp
f0123b5f:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_WF is not implemented yet");
f0123b62:	83 ec 04             	sub    $0x4,%esp
f0123b65:	68 b4 06 13 f0       	push   $0xf01306b4
f0123b6a:	68 8a 01 00 00       	push   $0x18a
f0123b6f:	68 9b 05 13 f0       	push   $0xf013059b
f0123b74:	e8 a1 c7 fd ff       	call   f010031a <_panic>

f0123b79 <alloc_block_NF>:

//=========================================
// [8] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
void *alloc_block_NF(uint32 size)
{
f0123b79:	55                   	push   %ebp
f0123b7a:	89 e5                	mov    %esp,%ebp
f0123b7c:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_NF is not implemented yet");
f0123b7f:	83 ec 04             	sub    $0x4,%esp
f0123b82:	68 dc 06 13 f0       	push   $0xf01306dc
f0123b87:	68 93 01 00 00       	push   $0x193
f0123b8c:	68 9b 05 13 f0       	push   $0xf013059b
f0123b91:	e8 84 c7 fd ff       	call   f010031a <_panic>
f0123b96:	66 90                	xchg   %ax,%ax

f0123b98 <__moddi3>:
f0123b98:	55                   	push   %ebp
f0123b99:	57                   	push   %edi
f0123b9a:	56                   	push   %esi
f0123b9b:	53                   	push   %ebx
f0123b9c:	83 ec 2c             	sub    $0x2c,%esp
f0123b9f:	8b 74 24 40          	mov    0x40(%esp),%esi
f0123ba3:	8b 7c 24 44          	mov    0x44(%esp),%edi
f0123ba7:	8b 4c 24 48          	mov    0x48(%esp),%ecx
f0123bab:	8b 5c 24 4c          	mov    0x4c(%esp),%ebx
f0123baf:	89 d8                	mov    %ebx,%eax
f0123bb1:	85 ff                	test   %edi,%edi
f0123bb3:	0f 88 d3 00 00 00    	js     f0123c8c <__moddi3+0xf4>
f0123bb9:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
f0123bc0:	00 
f0123bc1:	85 c0                	test   %eax,%eax
f0123bc3:	0f 88 ab 00 00 00    	js     f0123c74 <__moddi3+0xdc>
f0123bc9:	89 0c 24             	mov    %ecx,(%esp)
f0123bcc:	89 5c 24 04          	mov    %ebx,0x4(%esp)
f0123bd0:	89 74 24 10          	mov    %esi,0x10(%esp)
f0123bd4:	89 fb                	mov    %edi,%ebx
f0123bd6:	8b 14 24             	mov    (%esp),%edx
f0123bd9:	8b 4c 24 04          	mov    0x4(%esp),%ecx
f0123bdd:	89 d0                	mov    %edx,%eax
f0123bdf:	89 54 24 18          	mov    %edx,0x18(%esp)
f0123be3:	89 ca                	mov    %ecx,%edx
f0123be5:	8b 0c 24             	mov    (%esp),%ecx
f0123be8:	89 34 24             	mov    %esi,(%esp)
f0123beb:	89 7c 24 14          	mov    %edi,0x14(%esp)
f0123bef:	85 d2                	test   %edx,%edx
f0123bf1:	75 15                	jne    f0123c08 <__moddi3+0x70>
f0123bf3:	89 c7                	mov    %eax,%edi
f0123bf5:	39 d8                	cmp    %ebx,%eax
f0123bf7:	76 5b                	jbe    f0123c54 <__moddi3+0xbc>
f0123bf9:	89 f0                	mov    %esi,%eax
f0123bfb:	89 da                	mov    %ebx,%edx
f0123bfd:	f7 f7                	div    %edi
f0123bff:	89 d3                	mov    %edx,%ebx
f0123c01:	89 d8                	mov    %ebx,%eax
f0123c03:	31 d2                	xor    %edx,%edx
f0123c05:	eb 09                	jmp    f0123c10 <__moddi3+0x78>
f0123c07:	90                   	nop
f0123c08:	39 fa                	cmp    %edi,%edx
f0123c0a:	76 1c                	jbe    f0123c28 <__moddi3+0x90>
f0123c0c:	89 f0                	mov    %esi,%eax
f0123c0e:	89 fa                	mov    %edi,%edx
f0123c10:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
f0123c14:	85 c9                	test   %ecx,%ecx
f0123c16:	74 07                	je     f0123c1f <__moddi3+0x87>
f0123c18:	f7 d8                	neg    %eax
f0123c1a:	83 d2 00             	adc    $0x0,%edx
f0123c1d:	f7 da                	neg    %edx
f0123c1f:	83 c4 2c             	add    $0x2c,%esp
f0123c22:	5b                   	pop    %ebx
f0123c23:	5e                   	pop    %esi
f0123c24:	5f                   	pop    %edi
f0123c25:	5d                   	pop    %ebp
f0123c26:	c3                   	ret    
f0123c27:	90                   	nop
f0123c28:	0f bd c2             	bsr    %edx,%eax
f0123c2b:	83 f0 1f             	xor    $0x1f,%eax
f0123c2e:	89 44 24 1c          	mov    %eax,0x1c(%esp)
f0123c32:	75 6c                	jne    f0123ca0 <__moddi3+0x108>
f0123c34:	39 fa                	cmp    %edi,%edx
f0123c36:	72 05                	jb     f0123c3d <__moddi3+0xa5>
f0123c38:	3b 0c 24             	cmp    (%esp),%ecx
f0123c3b:	77 0e                	ja     f0123c4b <__moddi3+0xb3>
f0123c3d:	8b 34 24             	mov    (%esp),%esi
f0123c40:	29 ce                	sub    %ecx,%esi
f0123c42:	19 d3                	sbb    %edx,%ebx
f0123c44:	89 5c 24 14          	mov    %ebx,0x14(%esp)
f0123c48:	89 34 24             	mov    %esi,(%esp)
f0123c4b:	8b 04 24             	mov    (%esp),%eax
f0123c4e:	8b 54 24 14          	mov    0x14(%esp),%edx
f0123c52:	eb bc                	jmp    f0123c10 <__moddi3+0x78>
f0123c54:	85 c9                	test   %ecx,%ecx
f0123c56:	75 0b                	jne    f0123c63 <__moddi3+0xcb>
f0123c58:	b8 01 00 00 00       	mov    $0x1,%eax
f0123c5d:	31 d2                	xor    %edx,%edx
f0123c5f:	f7 f1                	div    %ecx
f0123c61:	89 c1                	mov    %eax,%ecx
f0123c63:	89 d8                	mov    %ebx,%eax
f0123c65:	31 d2                	xor    %edx,%edx
f0123c67:	f7 f1                	div    %ecx
f0123c69:	8b 04 24             	mov    (%esp),%eax
f0123c6c:	f7 f1                	div    %ecx
f0123c6e:	89 d3                	mov    %edx,%ebx
f0123c70:	eb 8f                	jmp    f0123c01 <__moddi3+0x69>
f0123c72:	66 90                	xchg   %ax,%ax
f0123c74:	89 c8                	mov    %ecx,%eax
f0123c76:	89 da                	mov    %ebx,%edx
f0123c78:	f7 d8                	neg    %eax
f0123c7a:	83 d2 00             	adc    $0x0,%edx
f0123c7d:	f7 da                	neg    %edx
f0123c7f:	89 04 24             	mov    %eax,(%esp)
f0123c82:	89 54 24 04          	mov    %edx,0x4(%esp)
f0123c86:	e9 45 ff ff ff       	jmp    f0123bd0 <__moddi3+0x38>
f0123c8b:	90                   	nop
f0123c8c:	f7 de                	neg    %esi
f0123c8e:	83 d7 00             	adc    $0x0,%edi
f0123c91:	f7 df                	neg    %edi
f0123c93:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%esp)
f0123c9a:	ff 
f0123c9b:	e9 21 ff ff ff       	jmp    f0123bc1 <__moddi3+0x29>
f0123ca0:	b8 20 00 00 00       	mov    $0x20,%eax
f0123ca5:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
f0123ca9:	29 f8                	sub    %edi,%eax
f0123cab:	89 c6                	mov    %eax,%esi
f0123cad:	89 44 24 14          	mov    %eax,0x14(%esp)
f0123cb1:	89 f9                	mov    %edi,%ecx
f0123cb3:	d3 e2                	shl    %cl,%edx
f0123cb5:	8b 6c 24 18          	mov    0x18(%esp),%ebp
f0123cb9:	89 e8                	mov    %ebp,%eax
f0123cbb:	89 f1                	mov    %esi,%ecx
f0123cbd:	d3 e8                	shr    %cl,%eax
f0123cbf:	09 d0                	or     %edx,%eax
f0123cc1:	89 04 24             	mov    %eax,(%esp)
f0123cc4:	89 ea                	mov    %ebp,%edx
f0123cc6:	89 f9                	mov    %edi,%ecx
f0123cc8:	d3 e2                	shl    %cl,%edx
f0123cca:	89 d7                	mov    %edx,%edi
f0123ccc:	89 da                	mov    %ebx,%edx
f0123cce:	d3 e2                	shl    %cl,%edx
f0123cd0:	8b 6c 24 10          	mov    0x10(%esp),%ebp
f0123cd4:	d3 e5                	shl    %cl,%ebp
f0123cd6:	8b 44 24 10          	mov    0x10(%esp),%eax
f0123cda:	89 f1                	mov    %esi,%ecx
f0123cdc:	d3 e8                	shr    %cl,%eax
f0123cde:	09 d0                	or     %edx,%eax
f0123ce0:	d3 eb                	shr    %cl,%ebx
f0123ce2:	89 da                	mov    %ebx,%edx
f0123ce4:	f7 34 24             	divl   (%esp)
f0123ce7:	89 d3                	mov    %edx,%ebx
f0123ce9:	f7 e7                	mul    %edi
f0123ceb:	89 c6                	mov    %eax,%esi
f0123ced:	89 d1                	mov    %edx,%ecx
f0123cef:	39 d3                	cmp    %edx,%ebx
f0123cf1:	72 29                	jb     f0123d1c <__moddi3+0x184>
f0123cf3:	74 33                	je     f0123d28 <__moddi3+0x190>
f0123cf5:	89 e8                	mov    %ebp,%eax
f0123cf7:	29 f0                	sub    %esi,%eax
f0123cf9:	19 cb                	sbb    %ecx,%ebx
f0123cfb:	89 de                	mov    %ebx,%esi
f0123cfd:	8a 4c 24 14          	mov    0x14(%esp),%cl
f0123d01:	d3 e6                	shl    %cl,%esi
f0123d03:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
f0123d07:	89 f9                	mov    %edi,%ecx
f0123d09:	d3 e8                	shr    %cl,%eax
f0123d0b:	09 c6                	or     %eax,%esi
f0123d0d:	89 f0                	mov    %esi,%eax
f0123d0f:	89 f9                	mov    %edi,%ecx
f0123d11:	d3 eb                	shr    %cl,%ebx
f0123d13:	89 da                	mov    %ebx,%edx
f0123d15:	e9 f6 fe ff ff       	jmp    f0123c10 <__moddi3+0x78>
f0123d1a:	66 90                	xchg   %ax,%ax
f0123d1c:	29 f8                	sub    %edi,%eax
f0123d1e:	1b 14 24             	sbb    (%esp),%edx
f0123d21:	89 d1                	mov    %edx,%ecx
f0123d23:	89 c6                	mov    %eax,%esi
f0123d25:	eb ce                	jmp    f0123cf5 <__moddi3+0x15d>
f0123d27:	90                   	nop
f0123d28:	39 c5                	cmp    %eax,%ebp
f0123d2a:	72 f0                	jb     f0123d1c <__moddi3+0x184>
f0123d2c:	89 d9                	mov    %ebx,%ecx
f0123d2e:	eb c5                	jmp    f0123cf5 <__moddi3+0x15d>

f0123d30 <__udivdi3>:
f0123d30:	55                   	push   %ebp
f0123d31:	57                   	push   %edi
f0123d32:	56                   	push   %esi
f0123d33:	53                   	push   %ebx
f0123d34:	83 ec 1c             	sub    $0x1c,%esp
f0123d37:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f0123d3b:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f0123d3f:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0123d43:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f0123d47:	89 ca                	mov    %ecx,%edx
f0123d49:	89 f8                	mov    %edi,%eax
f0123d4b:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f0123d4f:	85 f6                	test   %esi,%esi
f0123d51:	75 2d                	jne    f0123d80 <__udivdi3+0x50>
f0123d53:	39 cf                	cmp    %ecx,%edi
f0123d55:	77 65                	ja     f0123dbc <__udivdi3+0x8c>
f0123d57:	89 fd                	mov    %edi,%ebp
f0123d59:	85 ff                	test   %edi,%edi
f0123d5b:	75 0b                	jne    f0123d68 <__udivdi3+0x38>
f0123d5d:	b8 01 00 00 00       	mov    $0x1,%eax
f0123d62:	31 d2                	xor    %edx,%edx
f0123d64:	f7 f7                	div    %edi
f0123d66:	89 c5                	mov    %eax,%ebp
f0123d68:	31 d2                	xor    %edx,%edx
f0123d6a:	89 c8                	mov    %ecx,%eax
f0123d6c:	f7 f5                	div    %ebp
f0123d6e:	89 c1                	mov    %eax,%ecx
f0123d70:	89 d8                	mov    %ebx,%eax
f0123d72:	f7 f5                	div    %ebp
f0123d74:	89 cf                	mov    %ecx,%edi
f0123d76:	89 fa                	mov    %edi,%edx
f0123d78:	83 c4 1c             	add    $0x1c,%esp
f0123d7b:	5b                   	pop    %ebx
f0123d7c:	5e                   	pop    %esi
f0123d7d:	5f                   	pop    %edi
f0123d7e:	5d                   	pop    %ebp
f0123d7f:	c3                   	ret    
f0123d80:	39 ce                	cmp    %ecx,%esi
f0123d82:	77 28                	ja     f0123dac <__udivdi3+0x7c>
f0123d84:	0f bd fe             	bsr    %esi,%edi
f0123d87:	83 f7 1f             	xor    $0x1f,%edi
f0123d8a:	75 40                	jne    f0123dcc <__udivdi3+0x9c>
f0123d8c:	39 ce                	cmp    %ecx,%esi
f0123d8e:	72 0a                	jb     f0123d9a <__udivdi3+0x6a>
f0123d90:	3b 44 24 08          	cmp    0x8(%esp),%eax
f0123d94:	0f 87 9e 00 00 00    	ja     f0123e38 <__udivdi3+0x108>
f0123d9a:	b8 01 00 00 00       	mov    $0x1,%eax
f0123d9f:	89 fa                	mov    %edi,%edx
f0123da1:	83 c4 1c             	add    $0x1c,%esp
f0123da4:	5b                   	pop    %ebx
f0123da5:	5e                   	pop    %esi
f0123da6:	5f                   	pop    %edi
f0123da7:	5d                   	pop    %ebp
f0123da8:	c3                   	ret    
f0123da9:	8d 76 00             	lea    0x0(%esi),%esi
f0123dac:	31 ff                	xor    %edi,%edi
f0123dae:	31 c0                	xor    %eax,%eax
f0123db0:	89 fa                	mov    %edi,%edx
f0123db2:	83 c4 1c             	add    $0x1c,%esp
f0123db5:	5b                   	pop    %ebx
f0123db6:	5e                   	pop    %esi
f0123db7:	5f                   	pop    %edi
f0123db8:	5d                   	pop    %ebp
f0123db9:	c3                   	ret    
f0123dba:	66 90                	xchg   %ax,%ax
f0123dbc:	89 d8                	mov    %ebx,%eax
f0123dbe:	f7 f7                	div    %edi
f0123dc0:	31 ff                	xor    %edi,%edi
f0123dc2:	89 fa                	mov    %edi,%edx
f0123dc4:	83 c4 1c             	add    $0x1c,%esp
f0123dc7:	5b                   	pop    %ebx
f0123dc8:	5e                   	pop    %esi
f0123dc9:	5f                   	pop    %edi
f0123dca:	5d                   	pop    %ebp
f0123dcb:	c3                   	ret    
f0123dcc:	bd 20 00 00 00       	mov    $0x20,%ebp
f0123dd1:	89 eb                	mov    %ebp,%ebx
f0123dd3:	29 fb                	sub    %edi,%ebx
f0123dd5:	89 f9                	mov    %edi,%ecx
f0123dd7:	d3 e6                	shl    %cl,%esi
f0123dd9:	89 c5                	mov    %eax,%ebp
f0123ddb:	88 d9                	mov    %bl,%cl
f0123ddd:	d3 ed                	shr    %cl,%ebp
f0123ddf:	89 e9                	mov    %ebp,%ecx
f0123de1:	09 f1                	or     %esi,%ecx
f0123de3:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f0123de7:	89 f9                	mov    %edi,%ecx
f0123de9:	d3 e0                	shl    %cl,%eax
f0123deb:	89 c5                	mov    %eax,%ebp
f0123ded:	89 d6                	mov    %edx,%esi
f0123def:	88 d9                	mov    %bl,%cl
f0123df1:	d3 ee                	shr    %cl,%esi
f0123df3:	89 f9                	mov    %edi,%ecx
f0123df5:	d3 e2                	shl    %cl,%edx
f0123df7:	8b 44 24 08          	mov    0x8(%esp),%eax
f0123dfb:	88 d9                	mov    %bl,%cl
f0123dfd:	d3 e8                	shr    %cl,%eax
f0123dff:	09 c2                	or     %eax,%edx
f0123e01:	89 d0                	mov    %edx,%eax
f0123e03:	89 f2                	mov    %esi,%edx
f0123e05:	f7 74 24 0c          	divl   0xc(%esp)
f0123e09:	89 d6                	mov    %edx,%esi
f0123e0b:	89 c3                	mov    %eax,%ebx
f0123e0d:	f7 e5                	mul    %ebp
f0123e0f:	39 d6                	cmp    %edx,%esi
f0123e11:	72 19                	jb     f0123e2c <__udivdi3+0xfc>
f0123e13:	74 0b                	je     f0123e20 <__udivdi3+0xf0>
f0123e15:	89 d8                	mov    %ebx,%eax
f0123e17:	31 ff                	xor    %edi,%edi
f0123e19:	e9 58 ff ff ff       	jmp    f0123d76 <__udivdi3+0x46>
f0123e1e:	66 90                	xchg   %ax,%ax
f0123e20:	8b 54 24 08          	mov    0x8(%esp),%edx
f0123e24:	89 f9                	mov    %edi,%ecx
f0123e26:	d3 e2                	shl    %cl,%edx
f0123e28:	39 c2                	cmp    %eax,%edx
f0123e2a:	73 e9                	jae    f0123e15 <__udivdi3+0xe5>
f0123e2c:	8d 43 ff             	lea    -0x1(%ebx),%eax
f0123e2f:	31 ff                	xor    %edi,%edi
f0123e31:	e9 40 ff ff ff       	jmp    f0123d76 <__udivdi3+0x46>
f0123e36:	66 90                	xchg   %ax,%ax
f0123e38:	31 c0                	xor    %eax,%eax
f0123e3a:	e9 37 ff ff ff       	jmp    f0123d76 <__udivdi3+0x46>
f0123e3f:	90                   	nop

f0123e40 <__umoddi3>:
f0123e40:	55                   	push   %ebp
f0123e41:	57                   	push   %edi
f0123e42:	56                   	push   %esi
f0123e43:	53                   	push   %ebx
f0123e44:	83 ec 1c             	sub    $0x1c,%esp
f0123e47:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f0123e4b:	8b 74 24 34          	mov    0x34(%esp),%esi
f0123e4f:	8b 7c 24 38          	mov    0x38(%esp),%edi
f0123e53:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f0123e57:	89 44 24 0c          	mov    %eax,0xc(%esp)
f0123e5b:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f0123e5f:	89 f3                	mov    %esi,%ebx
f0123e61:	89 fa                	mov    %edi,%edx
f0123e63:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0123e67:	89 34 24             	mov    %esi,(%esp)
f0123e6a:	85 c0                	test   %eax,%eax
f0123e6c:	75 1a                	jne    f0123e88 <__umoddi3+0x48>
f0123e6e:	39 f7                	cmp    %esi,%edi
f0123e70:	0f 86 a2 00 00 00    	jbe    f0123f18 <__umoddi3+0xd8>
f0123e76:	89 c8                	mov    %ecx,%eax
f0123e78:	89 f2                	mov    %esi,%edx
f0123e7a:	f7 f7                	div    %edi
f0123e7c:	89 d0                	mov    %edx,%eax
f0123e7e:	31 d2                	xor    %edx,%edx
f0123e80:	83 c4 1c             	add    $0x1c,%esp
f0123e83:	5b                   	pop    %ebx
f0123e84:	5e                   	pop    %esi
f0123e85:	5f                   	pop    %edi
f0123e86:	5d                   	pop    %ebp
f0123e87:	c3                   	ret    
f0123e88:	39 f0                	cmp    %esi,%eax
f0123e8a:	0f 87 ac 00 00 00    	ja     f0123f3c <__umoddi3+0xfc>
f0123e90:	0f bd e8             	bsr    %eax,%ebp
f0123e93:	83 f5 1f             	xor    $0x1f,%ebp
f0123e96:	0f 84 ac 00 00 00    	je     f0123f48 <__umoddi3+0x108>
f0123e9c:	bf 20 00 00 00       	mov    $0x20,%edi
f0123ea1:	29 ef                	sub    %ebp,%edi
f0123ea3:	89 fe                	mov    %edi,%esi
f0123ea5:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0123ea9:	89 e9                	mov    %ebp,%ecx
f0123eab:	d3 e0                	shl    %cl,%eax
f0123ead:	89 d7                	mov    %edx,%edi
f0123eaf:	89 f1                	mov    %esi,%ecx
f0123eb1:	d3 ef                	shr    %cl,%edi
f0123eb3:	09 c7                	or     %eax,%edi
f0123eb5:	89 e9                	mov    %ebp,%ecx
f0123eb7:	d3 e2                	shl    %cl,%edx
f0123eb9:	89 14 24             	mov    %edx,(%esp)
f0123ebc:	89 d8                	mov    %ebx,%eax
f0123ebe:	d3 e0                	shl    %cl,%eax
f0123ec0:	89 c2                	mov    %eax,%edx
f0123ec2:	8b 44 24 08          	mov    0x8(%esp),%eax
f0123ec6:	d3 e0                	shl    %cl,%eax
f0123ec8:	89 44 24 04          	mov    %eax,0x4(%esp)
f0123ecc:	8b 44 24 08          	mov    0x8(%esp),%eax
f0123ed0:	89 f1                	mov    %esi,%ecx
f0123ed2:	d3 e8                	shr    %cl,%eax
f0123ed4:	09 d0                	or     %edx,%eax
f0123ed6:	d3 eb                	shr    %cl,%ebx
f0123ed8:	89 da                	mov    %ebx,%edx
f0123eda:	f7 f7                	div    %edi
f0123edc:	89 d3                	mov    %edx,%ebx
f0123ede:	f7 24 24             	mull   (%esp)
f0123ee1:	89 c6                	mov    %eax,%esi
f0123ee3:	89 d1                	mov    %edx,%ecx
f0123ee5:	39 d3                	cmp    %edx,%ebx
f0123ee7:	0f 82 87 00 00 00    	jb     f0123f74 <__umoddi3+0x134>
f0123eed:	0f 84 91 00 00 00    	je     f0123f84 <__umoddi3+0x144>
f0123ef3:	8b 54 24 04          	mov    0x4(%esp),%edx
f0123ef7:	29 f2                	sub    %esi,%edx
f0123ef9:	19 cb                	sbb    %ecx,%ebx
f0123efb:	89 d8                	mov    %ebx,%eax
f0123efd:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f0123f01:	d3 e0                	shl    %cl,%eax
f0123f03:	89 e9                	mov    %ebp,%ecx
f0123f05:	d3 ea                	shr    %cl,%edx
f0123f07:	09 d0                	or     %edx,%eax
f0123f09:	89 e9                	mov    %ebp,%ecx
f0123f0b:	d3 eb                	shr    %cl,%ebx
f0123f0d:	89 da                	mov    %ebx,%edx
f0123f0f:	83 c4 1c             	add    $0x1c,%esp
f0123f12:	5b                   	pop    %ebx
f0123f13:	5e                   	pop    %esi
f0123f14:	5f                   	pop    %edi
f0123f15:	5d                   	pop    %ebp
f0123f16:	c3                   	ret    
f0123f17:	90                   	nop
f0123f18:	89 fd                	mov    %edi,%ebp
f0123f1a:	85 ff                	test   %edi,%edi
f0123f1c:	75 0b                	jne    f0123f29 <__umoddi3+0xe9>
f0123f1e:	b8 01 00 00 00       	mov    $0x1,%eax
f0123f23:	31 d2                	xor    %edx,%edx
f0123f25:	f7 f7                	div    %edi
f0123f27:	89 c5                	mov    %eax,%ebp
f0123f29:	89 f0                	mov    %esi,%eax
f0123f2b:	31 d2                	xor    %edx,%edx
f0123f2d:	f7 f5                	div    %ebp
f0123f2f:	89 c8                	mov    %ecx,%eax
f0123f31:	f7 f5                	div    %ebp
f0123f33:	89 d0                	mov    %edx,%eax
f0123f35:	e9 44 ff ff ff       	jmp    f0123e7e <__umoddi3+0x3e>
f0123f3a:	66 90                	xchg   %ax,%ax
f0123f3c:	89 c8                	mov    %ecx,%eax
f0123f3e:	89 f2                	mov    %esi,%edx
f0123f40:	83 c4 1c             	add    $0x1c,%esp
f0123f43:	5b                   	pop    %ebx
f0123f44:	5e                   	pop    %esi
f0123f45:	5f                   	pop    %edi
f0123f46:	5d                   	pop    %ebp
f0123f47:	c3                   	ret    
f0123f48:	3b 04 24             	cmp    (%esp),%eax
f0123f4b:	72 06                	jb     f0123f53 <__umoddi3+0x113>
f0123f4d:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f0123f51:	77 0f                	ja     f0123f62 <__umoddi3+0x122>
f0123f53:	89 f2                	mov    %esi,%edx
f0123f55:	29 f9                	sub    %edi,%ecx
f0123f57:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f0123f5b:	89 14 24             	mov    %edx,(%esp)
f0123f5e:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f0123f62:	8b 44 24 04          	mov    0x4(%esp),%eax
f0123f66:	8b 14 24             	mov    (%esp),%edx
f0123f69:	83 c4 1c             	add    $0x1c,%esp
f0123f6c:	5b                   	pop    %ebx
f0123f6d:	5e                   	pop    %esi
f0123f6e:	5f                   	pop    %edi
f0123f6f:	5d                   	pop    %ebp
f0123f70:	c3                   	ret    
f0123f71:	8d 76 00             	lea    0x0(%esi),%esi
f0123f74:	2b 04 24             	sub    (%esp),%eax
f0123f77:	19 fa                	sbb    %edi,%edx
f0123f79:	89 d1                	mov    %edx,%ecx
f0123f7b:	89 c6                	mov    %eax,%esi
f0123f7d:	e9 71 ff ff ff       	jmp    f0123ef3 <__umoddi3+0xb3>
f0123f82:	66 90                	xchg   %ax,%ax
f0123f84:	39 44 24 04          	cmp    %eax,0x4(%esp)
f0123f88:	72 ea                	jb     f0123f74 <__umoddi3+0x134>
f0123f8a:	89 d9                	mov    %ebx,%ecx
f0123f8c:	e9 62 ff ff ff       	jmp    f0123ef3 <__umoddi3+0xb3>
