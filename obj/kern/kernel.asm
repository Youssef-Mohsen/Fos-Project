
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 d0 17 00 	lgdtl  0x17d018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

    # Leave a few words on the stack for the user trap frame
	#2024: this line is changed since the trapframe is move to the user kernel stack of each process
	#movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
	movl	$(ptr_stack_top),%esp
f0100033:	bc 00 d0 17 f0       	mov    $0xf017d000,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 50 19 5a f0 01 	movl   $0x1,0xf05a1950
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 a4 18 5a f0 01 	movl   $0x1,0xf05a18a4
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
//=======================================

//First ever function called in FOS kernel
bool autograde ;
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 28             	sub    $0x28,%esp
	//cprintf("*	1) Global data (BSS) section...");
	{
		// Before doing anything else,
		// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
		// This ensures that all static/global variables start with zero value.
		memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba 30 44 5c f0       	mov    $0xf05c4430,%edx
f010006a:	b8 50 e1 59 f0       	mov    $0xf059e150,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 50 e1 59 f0       	push   $0xf059e150
f010007e:	e8 a3 25 02 00       	call   f0122626 <memset>
f0100083:	83 c4 10             	add    $0x10,%esp
	//cprintf("[DONE]\n");

	{
		// Initialize the console.
		// Can't call cprintf until after we do this!
		cons_init();
f0100086:	e8 8d 0d 00 00       	call   f0100e18 <cons_init>
		//print welcome message
		print_welcome_message();
f010008b:	e8 11 02 00 00       	call   f01002a1 <print_welcome_message>
	}

	cprintf("\n********************************************************************\n");
f0100090:	83 ec 0c             	sub    $0xc,%esp
f0100093:	68 00 38 12 f0       	push   $0xf0123800
f0100098:	e8 cf 0e 00 00       	call   f0100f6c <cprintf>
f010009d:	83 c4 10             	add    $0x10,%esp
	cprintf("* INITIALIZATIONS:\n");
f01000a0:	83 ec 0c             	sub    $0xc,%esp
f01000a3:	68 47 38 12 f0       	push   $0xf0123847
f01000a8:	e8 bf 0e 00 00       	call   f0100f6c <cprintf>
f01000ad:	83 c4 10             	add    $0x10,%esp
	cprintf("*=================\n");
f01000b0:	83 ec 0c             	sub    $0xc,%esp
f01000b3:	68 5b 38 12 f0       	push   $0xf012385b
f01000b8:	e8 af 0e 00 00       	call   f0100f6c <cprintf>
f01000bd:	83 c4 10             	add    $0x10,%esp

	cprintf("* 1) CPU...");
f01000c0:	83 ec 0c             	sub    $0xc,%esp
f01000c3:	68 6f 38 12 f0       	push   $0xf012386f
f01000c8:	e8 9f 0e 00 00       	call   f0100f6c <cprintf>
f01000cd:	83 c4 10             	add    $0x10,%esp
	{
		//Initialize the Main CPU
		cpu_init(0);
f01000d0:	83 ec 0c             	sub    $0xc,%esp
f01000d3:	6a 00                	push   $0x0
f01000d5:	e8 2d 70 00 00       	call   f0107107 <cpu_init>
f01000da:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("[DONE]\n");
f01000dd:	83 ec 0c             	sub    $0xc,%esp
f01000e0:	68 7b 38 12 f0       	push   $0xf012387b
f01000e5:	e8 82 0e 00 00       	call   f0100f6c <cprintf>
f01000ea:	83 c4 10             	add    $0x10,%esp

	cprintf("* 2) MEMORY:\n");
f01000ed:	83 ec 0c             	sub    $0xc,%esp
f01000f0:	68 83 38 12 f0       	push   $0xf0123883
f01000f5:	e8 72 0e 00 00       	call   f0100f6c <cprintf>
f01000fa:	83 c4 10             	add    $0x10,%esp
	{
		// Lab 2 memory management initialization functions
		detect_memory();
f01000fd:	e8 65 79 00 00       	call   f0107a67 <detect_memory>
		initialize_kernel_VM();
f0100102:	e8 13 75 00 00       	call   f010761a <initialize_kernel_VM>
		initialize_paging();
f0100107:	e8 e0 7c 00 00       	call   f0107dec <initialize_paging>
		initialize_kheap_dynamic_allocator(KERNEL_HEAP_START, PAGE_SIZE, KERNEL_HEAP_START + DYN_ALLOC_MAX_SIZE);
#endif
		//	page_check();
		//setPageReplacmentAlgorithmNchanceCLOCK();
		//setPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX);
		setPageReplacmentAlgorithmFIFO();
f010010c:	e8 b7 e5 00 00       	call   f010e6c8 <setPageReplacmentAlgorithmFIFO>
		//setPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX);

		setUHeapPlacementStrategyFIRSTFIT();
f0100111:	e8 39 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
		setKHeapPlacementStrategyFIRSTFIT();
f0100116:	e8 24 ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>

		enableBuffering(0);
f010011b:	83 ec 0c             	sub    $0xc,%esp
f010011e:	6a 00                	push   $0x0
f0100120:	e8 a0 e6 00 00       	call   f010e7c5 <enableBuffering>
f0100125:	83 c4 10             	add    $0x10,%esp
		//enableModifiedBuffer(1) ;
		enableModifiedBuffer(0) ;
f0100128:	83 ec 0c             	sub    $0xc,%esp
f010012b:	6a 00                	push   $0x0
f010012d:	e8 7b e6 00 00       	call   f010e7ad <enableModifiedBuffer>
f0100132:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(1000);
f0100135:	83 ec 0c             	sub    $0xc,%esp
f0100138:	68 e8 03 00 00       	push   $0x3e8
f010013d:	e8 9b e6 00 00       	call   f010e7dd <setModifiedBufferLength>
f0100142:	83 c4 10             	add    $0x10,%esp

		ide_init();
f0100145:	e8 33 2a 02 00       	call   f0122b7d <ide_init>
	}
	//cprintf("* [DONE]\n");

	cprintf("* 3) USER ENVs...");
f010014a:	83 ec 0c             	sub    $0xc,%esp
f010014d:	68 91 38 12 f0       	push   $0xf0123891
f0100152:	e8 15 0e 00 00       	call   f0100f6c <cprintf>
f0100157:	83 c4 10             	add    $0x10,%esp
	{
		// Lab 3 user environment initialization functions
		env_init();
f010015a:	e8 c3 96 00 00       	call   f0109822 <env_init>
		ts_init();
f010015f:	e8 30 bf 00 00       	call   f010c094 <ts_init>
		//2024: removed. called inside cpuinit()
		//idt_init();
	}
	cprintf("[DONE]\n");
f0100164:	83 ec 0c             	sub    $0xc,%esp
f0100167:	68 7b 38 12 f0       	push   $0xf012387b
f010016c:	e8 fb 0d 00 00       	call   f0100f6c <cprintf>
f0100171:	83 c4 10             	add    $0x10,%esp

	cprintf("* 4) PROGRAMMABLE INTERRUPT CONTROLLER:\n");
f0100174:	83 ec 0c             	sub    $0xc,%esp
f0100177:	68 a4 38 12 f0       	push   $0xf01238a4
f010017c:	e8 eb 0d 00 00       	call   f0100f6c <cprintf>
f0100181:	83 c4 10             	add    $0x10,%esp
	{
		pic_init();
f0100184:	e8 6a 6c 00 00       	call   f0106df3 <pic_init>
		cprintf("*	PIC is initialized\n");
f0100189:	83 ec 0c             	sub    $0xc,%esp
f010018c:	68 cd 38 12 f0       	push   $0xf01238cd
f0100191:	e8 d6 0d 00 00       	call   f0100f6c <cprintf>
f0100196:	83 c4 10             	add    $0x10,%esp
		//Enable Clock Interrupt
		irq_clear_mask(0);
f0100199:	83 ec 0c             	sub    $0xc,%esp
f010019c:	6a 00                	push   $0x0
f010019e:	e8 42 6e 00 00       	call   f0106fe5 <irq_clear_mask>
f01001a3:	83 c4 10             	add    $0x10,%esp
		cprintf("*	IRQ0 (Clock): is Enabled\n");
f01001a6:	83 ec 0c             	sub    $0xc,%esp
f01001a9:	68 e3 38 12 f0       	push   $0xf01238e3
f01001ae:	e8 b9 0d 00 00       	call   f0100f6c <cprintf>
f01001b3:	83 c4 10             	add    $0x10,%esp
		//Enable KB Interrupt
		irq_clear_mask(1);
f01001b6:	83 ec 0c             	sub    $0xc,%esp
f01001b9:	6a 01                	push   $0x1
f01001bb:	e8 25 6e 00 00       	call   f0106fe5 <irq_clear_mask>
f01001c0:	83 c4 10             	add    $0x10,%esp
		cprintf("*	IRQ1 (Keyboard): is Enabled\n");
f01001c3:	83 ec 0c             	sub    $0xc,%esp
f01001c6:	68 00 39 12 f0       	push   $0xf0123900
f01001cb:	e8 9c 0d 00 00       	call   f0100f6c <cprintf>
f01001d0:	83 c4 10             	add    $0x10,%esp
		//Enable COM1 Interrupt
		irq_clear_mask(4);
f01001d3:	83 ec 0c             	sub    $0xc,%esp
f01001d6:	6a 04                	push   $0x4
f01001d8:	e8 08 6e 00 00       	call   f0106fe5 <irq_clear_mask>
f01001dd:	83 c4 10             	add    $0x10,%esp
		cprintf("*	IRQ4 (COM1): is Enabled\n");
f01001e0:	83 ec 0c             	sub    $0xc,%esp
f01001e3:	68 1f 39 12 f0       	push   $0xf012391f
f01001e8:	e8 7f 0d 00 00       	call   f0100f6c <cprintf>
f01001ed:	83 c4 10             	add    $0x10,%esp
		//Enable Primary ATA Hard Disk Interrupt
//		irq_clear_mask(14);
//		cprintf("*	IRQ14 (Primary ATA Hard Disk): is Enabled\n");
	}
	cprintf("* 5) SCHEDULER & MULTI-TASKING:\n");
f01001f0:	83 ec 0c             	sub    $0xc,%esp
f01001f3:	68 3c 39 12 f0       	push   $0xf012393c
f01001f8:	e8 6f 0d 00 00       	call   f0100f6c <cprintf>
f01001fd:	83 c4 10             	add    $0x10,%esp
	{
		// Lab 4 multitasking initialization functions
		kclock_init();
f0100200:	e8 c1 49 00 00       	call   f0104bc6 <kclock_init>
		sched_init() ;
f0100205:	e8 44 65 00 00       	call   f010674e <sched_init>
	}
	//cprintf("* [DONE]\n");

	cprintf("* 6) ESP to SCHED KERN STACK:\n");
f010020a:	83 ec 0c             	sub    $0xc,%esp
f010020d:	68 60 39 12 f0       	push   $0xf0123960
f0100212:	e8 55 0d 00 00       	call   f0100f6c <cprintf>
f0100217:	83 c4 10             	add    $0x10,%esp

static __inline uint32
read_esp(void)
{
        uint32 esp;
        __asm __volatile("movl %%esp,%0" : "=r" (esp));
f010021a:	89 e0                	mov    %esp,%eax
f010021c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        return esp;
f010021f:	8b 45 e8             	mov    -0x18(%ebp),%eax
	{
		//Relocate SP to its corresponding location in the specific stack area below KERN_BASE (SCHD_KERN_STACK_TOP)
		uint32 old_sp = read_esp();
f0100222:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32 sp_offset = (uint32)ptr_stack_top - old_sp ;
f0100225:	b8 00 d0 17 f0       	mov    $0xf017d000,%eax
f010022a:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010022d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 new_sp = KERN_STACK_TOP - sp_offset;
f0100230:	b8 00 00 c0 ef       	mov    $0xefc00000,%eax
f0100235:	2b 45 f0             	sub    -0x10(%ebp),%eax
f0100238:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010023b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010023e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
}

static __inline void
write_esp(uint32 esp)
{
	__asm __volatile("movl %0,%%esp" : : "r" (esp) );
f0100241:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100244:	89 c4                	mov    %eax,%esp

static __inline uint32
read_esp(void)
{
        uint32 esp;
        __asm __volatile("movl %%esp,%0" : "=r" (esp));
f0100246:	89 e0                	mov    %esp,%eax
f0100248:	89 45 e0             	mov    %eax,-0x20(%ebp)
        return esp;
f010024b:	8b 45 e0             	mov    -0x20(%ebp),%eax
		write_esp(new_sp);
		cprintf("*	old SP = %x - updated SP = %x\n", old_sp, read_esp());
f010024e:	83 ec 04             	sub    $0x4,%esp
f0100251:	50                   	push   %eax
f0100252:	ff 75 f4             	pushl  -0xc(%ebp)
f0100255:	68 80 39 12 f0       	push   $0xf0123980
f010025a:	e8 0d 0d 00 00       	call   f0100f6c <cprintf>
f010025f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("********************************************************************\n");
f0100262:	83 ec 0c             	sub    $0xc,%esp
f0100265:	68 a4 39 12 f0       	push   $0xf01239a4
f010026a:	e8 fd 0c 00 00       	call   f0100f6c <cprintf>
f010026f:	83 c4 10             	add    $0x10,%esp

	// start the kernel command prompt.
	autograde = 0;
f0100272:	c7 05 7c 1b 5a f0 00 	movl   $0x0,0xf05a1b7c
f0100279:	00 00 00 
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f010027c:	83 ec 0c             	sub    $0xc,%esp
f010027f:	68 ec 39 12 f0       	push   $0xf01239ec
f0100284:	e8 e3 0c 00 00       	call   f0100f6c <cprintf>
f0100289:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f010028c:	83 ec 0c             	sub    $0xc,%esp
f010028f:	68 18 3a 12 f0       	push   $0xf0123a18
f0100294:	e8 d3 0c 00 00       	call   f0100f6c <cprintf>
f0100299:	83 c4 10             	add    $0x10,%esp
		get_into_prompt();
f010029c:	e8 02 1b 00 00       	call   f0101da3 <get_into_prompt>

f01002a1 <print_welcome_message>:
	}
}


void print_welcome_message()
{
f01002a1:	55                   	push   %ebp
f01002a2:	89 e5                	mov    %esp,%ebp
f01002a4:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f01002a7:	83 ec 0c             	sub    $0xc,%esp
f01002aa:	68 3d 3a 12 f0       	push   $0xf0123a3d
f01002af:	e8 b8 0c 00 00       	call   f0100f6c <cprintf>
f01002b4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01002b7:	83 ec 0c             	sub    $0xc,%esp
f01002ba:	68 44 3a 12 f0       	push   $0xf0123a44
f01002bf:	e8 a8 0c 00 00       	call   f0100f6c <cprintf>
f01002c4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01002c7:	83 ec 0c             	sub    $0xc,%esp
f01002ca:	68 8c 3a 12 f0       	push   $0xf0123a8c
f01002cf:	e8 98 0c 00 00       	call   f0100f6c <cprintf>
f01002d4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f01002d7:	83 ec 0c             	sub    $0xc,%esp
f01002da:	68 d4 3a 12 f0       	push   $0xf0123ad4
f01002df:	e8 88 0c 00 00       	call   f0100f6c <cprintf>
f01002e4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01002e7:	83 ec 0c             	sub    $0xc,%esp
f01002ea:	68 8c 3a 12 f0       	push   $0xf0123a8c
f01002ef:	e8 78 0c 00 00       	call   f0100f6c <cprintf>
f01002f4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01002f7:	83 ec 0c             	sub    $0xc,%esp
f01002fa:	68 44 3a 12 f0       	push   $0xf0123a44
f01002ff:	e8 68 0c 00 00       	call   f0100f6c <cprintf>
f0100304:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f0100307:	83 ec 0c             	sub    $0xc,%esp
f010030a:	68 19 3b 12 f0       	push   $0xf0123b19
f010030f:	e8 58 0c 00 00       	call   f0100f6c <cprintf>
f0100314:	83 c4 10             	add    $0x10,%esp
}
f0100317:	90                   	nop
f0100318:	c9                   	leave  
f0100319:	c3                   	ret    

f010031a <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f010031a:	55                   	push   %ebp
f010031b:	89 e5                	mov    %esp,%ebp
f010031d:	83 ec 18             	sub    $0x18,%esp
	struct Env* cur_env = get_cpu_proc();
f0100320:	e8 4b a4 00 00       	call   f010a770 <get_cpu_proc>
f0100325:	89 45 f4             	mov    %eax,-0xc(%ebp)

	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100328:	8b 45 10             	mov    0x10(%ebp),%eax
f010032b:	a3 60 e1 59 f0       	mov    %eax,0xf059e160

	va_start(ap, fmt);
f0100330:	8d 45 10             	lea    0x10(%ebp),%eax
f0100333:	83 c0 04             	add    $0x4,%eax
f0100336:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\nkernel [EVAL_FINAL]panic at %s:%d: ", file, line);
f0100339:	83 ec 04             	sub    $0x4,%esp
f010033c:	ff 75 0c             	pushl  0xc(%ebp)
f010033f:	ff 75 08             	pushl  0x8(%ebp)
f0100342:	68 20 3b 12 f0       	push   $0xf0123b20
f0100347:	e8 20 0c 00 00       	call   f0100f6c <cprintf>
f010034c:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010034f:	8b 45 10             	mov    0x10(%ebp),%eax
f0100352:	83 ec 08             	sub    $0x8,%esp
f0100355:	ff 75 f0             	pushl  -0x10(%ebp)
f0100358:	50                   	push   %eax
f0100359:	e8 e5 0b 00 00       	call   f0100f43 <vcprintf>
f010035e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100361:	83 ec 0c             	sub    $0xc,%esp
f0100364:	68 45 3b 12 f0       	push   $0xf0123b45
f0100369:	e8 fe 0b 00 00       	call   f0100f6c <cprintf>
f010036e:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (cur_env != NULL && cur_env->env_status == ENV_RUNNING)
f0100371:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100375:	74 10                	je     f0100387 <_panic+0x6d>
f0100377:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010037a:	8b 40 18             	mov    0x18(%eax),%eax
f010037d:	83 f8 02             	cmp    $0x2,%eax
f0100380:	75 05                	jne    f0100387 <_panic+0x6d>
	{
		//cprintf("\n>>>>>>>>>>> exiting the cur env<<<<<<<<<<<<\n");
		//Place the running env into the exit queue then switch to the scheduler
		env_exit(); //env_exit --> sched_exit_env --> sched --> context_switch into fos_scheduler
f0100382:	e8 a7 a3 00 00       	call   f010a72e <env_exit>

static __inline uint32
read_esp(void)
{
        uint32 esp;
        __asm __volatile("movl %%esp,%0" : "=r" (esp));
f0100387:	89 e0                	mov    %esp,%eax
f0100389:	89 45 e8             	mov    %eax,-0x18(%ebp)
        return esp;
f010038c:	8b 45 e8             	mov    -0x18(%ebp),%eax
	}
	//else //2024: panic from Kernel and no current running env
	{
		char* esp = (char*)read_esp();
f010038f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		cprintf("esp = %x\n", esp);
f0100392:	83 ec 08             	sub    $0x8,%esp
f0100395:	ff 75 ec             	pushl  -0x14(%ebp)
f0100398:	68 47 3b 12 f0       	push   $0xf0123b47
f010039d:	e8 ca 0b 00 00       	call   f0100f6c <cprintf>
f01003a2:	83 c4 10             	add    $0x10,%esp
		get_into_prompt();
f01003a5:	e8 f9 19 00 00       	call   f0101da3 <get_into_prompt>

f01003aa <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f01003aa:	55                   	push   %ebp
f01003ab:	89 e5                	mov    %esp,%ebp
f01003ad:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01003b0:	8b 45 10             	mov    0x10(%ebp),%eax
f01003b3:	a3 60 e1 59 f0       	mov    %eax,0xf059e160

	va_start(ap, fmt);
f01003b8:	8d 45 10             	lea    0x10(%ebp),%eax
f01003bb:	83 c0 04             	add    $0x4,%eax
f01003be:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01003c1:	83 ec 04             	sub    $0x4,%esp
f01003c4:	ff 75 0c             	pushl  0xc(%ebp)
f01003c7:	ff 75 08             	pushl  0x8(%ebp)
f01003ca:	68 51 3b 12 f0       	push   $0xf0123b51
f01003cf:	e8 98 0b 00 00       	call   f0100f6c <cprintf>
f01003d4:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01003d7:	8b 45 10             	mov    0x10(%ebp),%eax
f01003da:	83 ec 08             	sub    $0x8,%esp
f01003dd:	ff 75 f4             	pushl  -0xc(%ebp)
f01003e0:	50                   	push   %eax
f01003e1:	e8 5d 0b 00 00       	call   f0100f43 <vcprintf>
f01003e6:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003e9:	83 ec 0c             	sub    $0xc,%esp
f01003ec:	68 45 3b 12 f0       	push   $0xf0123b45
f01003f1:	e8 76 0b 00 00       	call   f0100f6c <cprintf>
f01003f6:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the command prompt */
	pushcli();
f01003f9:	e8 c2 6d 00 00       	call   f01071c0 <pushcli>
	struct cpu *c = mycpu();
f01003fe:	e8 fa 6c 00 00       	call   f01070fd <mycpu>
f0100403:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int sched_stat = c->scheduler_status;
f0100406:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100409:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
f010040f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	popcli();
f0100412:	e8 fb 6d 00 00       	call   f0107212 <popcli>
	/*2022*///Check if the scheduler is successfully initialized or not
	if (sched_stat != SCH_UNINITIALIZED)
f0100417:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
f010041b:	74 23                	je     f0100440 <_panic_all+0x96>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f010041d:	e8 b2 60 00 00       	call   f01064d4 <sched_exit_all_ready_envs>
		struct Env* cur_env = get_cpu_proc();
f0100422:	e8 49 a3 00 00       	call   f010a770 <get_cpu_proc>
f0100427:	89 45 e8             	mov    %eax,-0x18(%ebp)
		if (cur_env != NULL && cur_env->env_status == ENV_RUNNING)
f010042a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010042e:	74 10                	je     f0100440 <_panic_all+0x96>
f0100430:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100433:	8b 40 18             	mov    0x18(%eax),%eax
f0100436:	83 f8 02             	cmp    $0x2,%eax
f0100439:	75 05                	jne    f0100440 <_panic_all+0x96>
		{
			//cprintf("exit curenv...........\n");
			//Place the running env into the exit queue then switch to the scheduler
			env_exit(); //env_exit --> sched_exit_env --> sched --> context_switch into fos_scheduler
f010043b:	e8 ee a2 00 00       	call   f010a72e <env_exit>
		}
	}
	//else //2024: panic from Kernel and no current running env
	{
		get_into_prompt();
f0100440:	e8 5e 19 00 00       	call   f0101da3 <get_into_prompt>

f0100445 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f0100445:	55                   	push   %ebp
f0100446:	89 e5                	mov    %esp,%ebp
f0100448:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010044b:	8b 45 10             	mov    0x10(%ebp),%eax
f010044e:	a3 60 e1 59 f0       	mov    %eax,0xf059e160

	va_start(ap, fmt);
f0100453:	8d 45 10             	lea    0x10(%ebp),%eax
f0100456:	83 c0 04             	add    $0x4,%eax
f0100459:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010045c:	83 ec 04             	sub    $0x4,%esp
f010045f:	ff 75 0c             	pushl  0xc(%ebp)
f0100462:	ff 75 08             	pushl  0x8(%ebp)
f0100465:	68 51 3b 12 f0       	push   $0xf0123b51
f010046a:	e8 fd 0a 00 00       	call   f0100f6c <cprintf>
f010046f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100472:	8b 45 10             	mov    0x10(%ebp),%eax
f0100475:	83 ec 08             	sub    $0x8,%esp
f0100478:	ff 75 f4             	pushl  -0xc(%ebp)
f010047b:	50                   	push   %eax
f010047c:	e8 c2 0a 00 00       	call   f0100f43 <vcprintf>
f0100481:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100484:	83 ec 0c             	sub    $0xc,%esp
f0100487:	68 45 3b 12 f0       	push   $0xf0123b45
f010048c:	e8 db 0a 00 00       	call   f0100f6c <cprintf>
f0100491:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

//	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	struct Env* cur_env = get_cpu_proc();
f0100494:	e8 d7 a2 00 00       	call   f010a770 <get_cpu_proc>
f0100499:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (cur_env != NULL && cur_env->env_status == ENV_RUNNING)
f010049c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01004a0:	74 10                	je     f01004b2 <_panic_into_prompt+0x6d>
f01004a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01004a5:	8b 40 18             	mov    0x18(%eax),%eax
f01004a8:	83 f8 02             	cmp    $0x2,%eax
f01004ab:	75 05                	jne    f01004b2 <_panic_into_prompt+0x6d>
	{
		//Place the running env into the exit queue then switch to the scheduler
		env_exit(); //env_exit --> sched_exit_env --> sched --> context_switch into fos_scheduler
f01004ad:	e8 7c a2 00 00       	call   f010a72e <env_exit>
	}

	get_into_prompt();
f01004b2:	e8 ec 18 00 00       	call   f0101da3 <get_into_prompt>

f01004b7 <_warn>:
}


/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f01004b7:	55                   	push   %ebp
f01004b8:	89 e5                	mov    %esp,%ebp
f01004ba:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f01004bd:	8d 45 10             	lea    0x10(%ebp),%eax
f01004c0:	83 c0 04             	add    $0x4,%eax
f01004c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f01004c6:	83 ec 04             	sub    $0x4,%esp
f01004c9:	ff 75 0c             	pushl  0xc(%ebp)
f01004cc:	ff 75 08             	pushl  0x8(%ebp)
f01004cf:	68 6a 3b 12 f0       	push   $0xf0123b6a
f01004d4:	e8 93 0a 00 00       	call   f0100f6c <cprintf>
f01004d9:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01004dc:	8b 45 10             	mov    0x10(%ebp),%eax
f01004df:	83 ec 08             	sub    $0x8,%esp
f01004e2:	ff 75 f4             	pushl  -0xc(%ebp)
f01004e5:	50                   	push   %eax
f01004e6:	e8 58 0a 00 00       	call   f0100f43 <vcprintf>
f01004eb:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01004ee:	83 ec 0c             	sub    $0xc,%esp
f01004f1:	68 45 3b 12 f0       	push   $0xf0123b45
f01004f6:	e8 71 0a 00 00       	call   f0100f6c <cprintf>
f01004fb:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f01004fe:	90                   	nop
f01004ff:	c9                   	leave  
f0100500:	c3                   	ret    

f0100501 <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f0100501:	55                   	push   %ebp
f0100502:	89 e5                	mov    %esp,%ebp
f0100504:	83 ec 10             	sub    $0x10,%esp
f0100507:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010050e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100511:	89 c2                	mov    %eax,%edx
f0100513:	ec                   	in     (%dx),%al
f0100514:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100517:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f010051a:	0f b6 c0             	movzbl %al,%eax
f010051d:	83 e0 01             	and    $0x1,%eax
f0100520:	85 c0                	test   %eax,%eax
f0100522:	75 07                	jne    f010052b <serial_proc_data+0x2a>
		return -1;
f0100524:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100529:	eb 16                	jmp    f0100541 <serial_proc_data+0x40>
f010052b:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100532:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100535:	89 c2                	mov    %eax,%edx
f0100537:	ec                   	in     (%dx),%al
f0100538:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f010053b:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f010053e:	0f b6 c0             	movzbl %al,%eax
}
f0100541:	c9                   	leave  
f0100542:	c3                   	ret    

f0100543 <serial_intr>:

void
serial_intr(void)
{
f0100543:	55                   	push   %ebp
f0100544:	89 e5                	mov    %esp,%ebp
f0100546:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f0100549:	a1 84 e1 59 f0       	mov    0xf059e184,%eax
f010054e:	85 c0                	test   %eax,%eax
f0100550:	74 10                	je     f0100562 <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f0100552:	83 ec 0c             	sub    $0xc,%esp
f0100555:	68 01 05 10 f0       	push   $0xf0100501
f010055a:	e8 9d 07 00 00       	call   f0100cfc <cons_intr>
f010055f:	83 c4 10             	add    $0x10,%esp
}
f0100562:	90                   	nop
f0100563:	c9                   	leave  
f0100564:	c3                   	ret    

f0100565 <serial_interrupt_handler>:

void serial_interrupt_handler(struct Trapframe* tf)
{
f0100565:	55                   	push   %ebp
f0100566:	89 e5                	mov    %esp,%ebp
f0100568:	83 ec 08             	sub    $0x8,%esp
	cprintf("\nserial interrupt\n");
f010056b:	83 ec 0c             	sub    $0xc,%esp
f010056e:	68 88 3b 12 f0       	push   $0xf0123b88
f0100573:	e8 f4 09 00 00       	call   f0100f6c <cprintf>
f0100578:	83 c4 10             	add    $0x10,%esp
	serial_intr();
f010057b:	e8 c3 ff ff ff       	call   f0100543 <serial_intr>
}
f0100580:	90                   	nop
f0100581:	c9                   	leave  
f0100582:	c3                   	ret    

f0100583 <serial_init>:

void
serial_init(void)
{
f0100583:	55                   	push   %ebp
f0100584:	89 e5                	mov    %esp,%ebp
f0100586:	83 ec 48             	sub    $0x48,%esp
f0100589:	c7 45 f4 fa 03 00 00 	movl   $0x3fa,-0xc(%ebp)
f0100590:	c6 45 c6 00          	movb   $0x0,-0x3a(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100594:	8a 45 c6             	mov    -0x3a(%ebp),%al
f0100597:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010059a:	ee                   	out    %al,(%dx)
f010059b:	c7 45 f0 fb 03 00 00 	movl   $0x3fb,-0x10(%ebp)
f01005a2:	c6 45 c7 80          	movb   $0x80,-0x39(%ebp)
f01005a6:	8a 45 c7             	mov    -0x39(%ebp),%al
f01005a9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01005ac:	ee                   	out    %al,(%dx)
f01005ad:	c7 45 ec f8 03 00 00 	movl   $0x3f8,-0x14(%ebp)
f01005b4:	c6 45 c8 0c          	movb   $0xc,-0x38(%ebp)
f01005b8:	8a 45 c8             	mov    -0x38(%ebp),%al
f01005bb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01005be:	ee                   	out    %al,(%dx)
f01005bf:	c7 45 e8 f9 03 00 00 	movl   $0x3f9,-0x18(%ebp)
f01005c6:	c6 45 c9 00          	movb   $0x0,-0x37(%ebp)
f01005ca:	8a 45 c9             	mov    -0x37(%ebp),%al
f01005cd:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01005d0:	ee                   	out    %al,(%dx)
f01005d1:	c7 45 e4 fb 03 00 00 	movl   $0x3fb,-0x1c(%ebp)
f01005d8:	c6 45 ca 03          	movb   $0x3,-0x36(%ebp)
f01005dc:	8a 45 ca             	mov    -0x36(%ebp),%al
f01005df:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01005e2:	ee                   	out    %al,(%dx)
f01005e3:	c7 45 e0 fc 03 00 00 	movl   $0x3fc,-0x20(%ebp)
f01005ea:	c6 45 cb 00          	movb   $0x0,-0x35(%ebp)
f01005ee:	8a 45 cb             	mov    -0x35(%ebp),%al
f01005f1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01005f4:	ee                   	out    %al,(%dx)
f01005f5:	c7 45 dc f9 03 00 00 	movl   $0x3f9,-0x24(%ebp)
f01005fc:	c6 45 cc 01          	movb   $0x1,-0x34(%ebp)
f0100600:	8a 45 cc             	mov    -0x34(%ebp),%al
f0100603:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0100606:	ee                   	out    %al,(%dx)
f0100607:	c7 45 d8 fd 03 00 00 	movl   $0x3fd,-0x28(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010060e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0100611:	89 c2                	mov    %eax,%edx
f0100613:	ec                   	in     (%dx),%al
f0100614:	88 45 cd             	mov    %al,-0x33(%ebp)
	return data;
f0100617:	8a 45 cd             	mov    -0x33(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f010061a:	3c ff                	cmp    $0xff,%al
f010061c:	0f 95 c0             	setne  %al
f010061f:	0f b6 c0             	movzbl %al,%eax
f0100622:	a3 84 e1 59 f0       	mov    %eax,0xf059e184
f0100627:	c7 45 d4 fa 03 00 00 	movl   $0x3fa,-0x2c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010062e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0100631:	89 c2                	mov    %eax,%edx
f0100633:	ec                   	in     (%dx),%al
f0100634:	88 45 ce             	mov    %al,-0x32(%ebp)
f0100637:	c7 45 d0 f8 03 00 00 	movl   $0x3f8,-0x30(%ebp)
f010063e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0100641:	89 c2                	mov    %eax,%edx
f0100643:	ec                   	in     (%dx),%al
f0100644:	88 45 cf             	mov    %al,-0x31(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

	irq_install_handler(4, &serial_interrupt_handler);
f0100647:	83 ec 08             	sub    $0x8,%esp
f010064a:	68 65 05 10 f0       	push   $0xf0100565
f010064f:	6a 04                	push   $0x4
f0100651:	e8 42 cd 00 00       	call   f010d398 <irq_install_handler>
f0100656:	83 c4 10             	add    $0x10,%esp

}
f0100659:	90                   	nop
f010065a:	c9                   	leave  
f010065b:	c3                   	ret    

f010065c <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f010065c:	55                   	push   %ebp
f010065d:	89 e5                	mov    %esp,%ebp
f010065f:	83 ec 20             	sub    $0x20,%esp
f0100662:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100669:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010066c:	89 c2                	mov    %eax,%edx
f010066e:	ec                   	in     (%dx),%al
f010066f:	88 45 ec             	mov    %al,-0x14(%ebp)
f0100672:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f0100679:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010067c:	89 c2                	mov    %eax,%edx
f010067e:	ec                   	in     (%dx),%al
f010067f:	88 45 ed             	mov    %al,-0x13(%ebp)
f0100682:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f0100689:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010068c:	89 c2                	mov    %eax,%edx
f010068e:	ec                   	in     (%dx),%al
f010068f:	88 45 ee             	mov    %al,-0x12(%ebp)
f0100692:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f0100699:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010069c:	89 c2                	mov    %eax,%edx
f010069e:	ec                   	in     (%dx),%al
f010069f:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01006a2:	90                   	nop
f01006a3:	c9                   	leave  
f01006a4:	c3                   	ret    

f01006a5 <lpt_putc>:

static void
lpt_putc(int c)
{
f01006a5:	55                   	push   %ebp
f01006a6:	89 e5                	mov    %esp,%ebp
f01006a8:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01006ab:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01006b2:	eb 08                	jmp    f01006bc <lpt_putc+0x17>
		delay();
f01006b4:	e8 a3 ff ff ff       	call   f010065c <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01006b9:	ff 45 fc             	incl   -0x4(%ebp)
f01006bc:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f01006c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01006c6:	89 c2                	mov    %eax,%edx
f01006c8:	ec                   	in     (%dx),%al
f01006c9:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01006cc:	8a 45 eb             	mov    -0x15(%ebp),%al
f01006cf:	84 c0                	test   %al,%al
f01006d1:	78 09                	js     f01006dc <lpt_putc+0x37>
f01006d3:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f01006da:	7e d8                	jle    f01006b4 <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f01006dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01006df:	0f b6 c0             	movzbl %al,%eax
f01006e2:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f01006e9:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01006ec:	8a 45 e8             	mov    -0x18(%ebp),%al
f01006ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01006f2:	ee                   	out    %al,(%dx)
f01006f3:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f01006fa:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f01006fe:	8a 45 e9             	mov    -0x17(%ebp),%al
f0100701:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100704:	ee                   	out    %al,(%dx)
f0100705:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f010070c:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f0100710:	8a 45 ea             	mov    -0x16(%ebp),%al
f0100713:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100716:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100717:	90                   	nop
f0100718:	c9                   	leave  
f0100719:	c3                   	ret    

f010071a <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f010071a:	55                   	push   %ebp
f010071b:	89 e5                	mov    %esp,%ebp
f010071d:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f0100720:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100727:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010072a:	66 8b 00             	mov    (%eax),%ax
f010072d:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f0100731:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100734:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100739:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010073c:	66 8b 00             	mov    (%eax),%ax
f010073f:	66 3d 5a a5          	cmp    $0xa55a,%ax
f0100743:	74 13                	je     f0100758 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100745:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f010074c:	c7 05 88 e1 59 f0 b4 	movl   $0x3b4,0xf059e188
f0100753:	03 00 00 
f0100756:	eb 14                	jmp    f010076c <cga_init+0x52>
	} else {
		*cp = was;
f0100758:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010075b:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f010075f:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f0100762:	c7 05 88 e1 59 f0 d4 	movl   $0x3d4,0xf059e188
f0100769:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f010076c:	a1 88 e1 59 f0       	mov    0xf059e188,%eax
f0100771:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100774:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f0100778:	8a 45 e0             	mov    -0x20(%ebp),%al
f010077b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010077e:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f010077f:	a1 88 e1 59 f0       	mov    0xf059e188,%eax
f0100784:	40                   	inc    %eax
f0100785:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100788:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010078b:	89 c2                	mov    %eax,%edx
f010078d:	ec                   	in     (%dx),%al
f010078e:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f0100791:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100794:	0f b6 c0             	movzbl %al,%eax
f0100797:	c1 e0 08             	shl    $0x8,%eax
f010079a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f010079d:	a1 88 e1 59 f0       	mov    0xf059e188,%eax
f01007a2:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01007a5:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01007a9:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01007ac:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01007af:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01007b0:	a1 88 e1 59 f0       	mov    0xf059e188,%eax
f01007b5:	40                   	inc    %eax
f01007b6:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01007b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01007bc:	89 c2                	mov    %eax,%edx
f01007be:	ec                   	in     (%dx),%al
f01007bf:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f01007c2:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01007c5:	0f b6 c0             	movzbl %al,%eax
f01007c8:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01007cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01007ce:	a3 8c e1 59 f0       	mov    %eax,0xf059e18c
	crt_pos = pos;
f01007d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01007d6:	66 a3 90 e1 59 f0    	mov    %ax,0xf059e190
}
f01007dc:	90                   	nop
f01007dd:	c9                   	leave  
f01007de:	c3                   	ret    

f01007df <cga_putc>:
//2016: Preliminary backward and forward cursor movement was added to FOS
// 		Thanks to student Abdullah Mohammad Ma3en, 3rd year, and TA Ghada Hamed.

void
cga_putc(int c)
{
f01007df:	55                   	push   %ebp
f01007e0:	89 e5                	mov    %esp,%ebp
f01007e2:	53                   	push   %ebx
f01007e3:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f01007e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01007e9:	b0 00                	mov    $0x0,%al
f01007eb:	85 c0                	test   %eax,%eax
f01007ed:	75 07                	jne    f01007f6 <cga_putc+0x17>
		c |= 0x0700;
f01007ef:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f01007f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01007f9:	0f b6 c0             	movzbl %al,%eax
f01007fc:	83 f8 0a             	cmp    $0xa,%eax
f01007ff:	74 77                	je     f0100878 <cga_putc+0x99>
f0100801:	83 f8 0a             	cmp    $0xa,%eax
f0100804:	7f 13                	jg     f0100819 <cga_putc+0x3a>
f0100806:	83 f8 08             	cmp    $0x8,%eax
f0100809:	74 2e                	je     f0100839 <cga_putc+0x5a>
f010080b:	83 f8 09             	cmp    $0x9,%eax
f010080e:	0f 84 a8 00 00 00    	je     f01008bc <cga_putc+0xdd>
f0100814:	e9 22 01 00 00       	jmp    f010093b <cga_putc+0x15c>
f0100819:	3d e4 00 00 00       	cmp    $0xe4,%eax
f010081e:	0f 84 de 00 00 00    	je     f0100902 <cga_putc+0x123>
f0100824:	3d e5 00 00 00       	cmp    $0xe5,%eax
f0100829:	0f 84 f1 00 00 00    	je     f0100920 <cga_putc+0x141>
f010082f:	83 f8 0d             	cmp    $0xd,%eax
f0100832:	74 5d                	je     f0100891 <cga_putc+0xb2>
f0100834:	e9 02 01 00 00       	jmp    f010093b <cga_putc+0x15c>
	case '\b':
		if (crt_pos > 0) {
f0100839:	66 a1 90 e1 59 f0    	mov    0xf059e190,%ax
f010083f:	66 85 c0             	test   %ax,%ax
f0100842:	0f 84 4f 01 00 00    	je     f0100997 <cga_putc+0x1b8>
			crt_pos--;
f0100848:	66 a1 90 e1 59 f0    	mov    0xf059e190,%ax
f010084e:	48                   	dec    %eax
f010084f:	66 a3 90 e1 59 f0    	mov    %ax,0xf059e190
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f0100855:	8b 15 8c e1 59 f0    	mov    0xf059e18c,%edx
f010085b:	66 a1 90 e1 59 f0    	mov    0xf059e190,%ax
f0100861:	0f b7 c0             	movzwl %ax,%eax
f0100864:	01 c0                	add    %eax,%eax
f0100866:	01 c2                	add    %eax,%edx
f0100868:	8b 45 08             	mov    0x8(%ebp),%eax
f010086b:	b0 00                	mov    $0x0,%al
f010086d:	83 c8 20             	or     $0x20,%eax
f0100870:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f0100873:	e9 1f 01 00 00       	jmp    f0100997 <cga_putc+0x1b8>
	case '\n':
		crt_pos += CRT_COLS;
f0100878:	66 a1 90 e1 59 f0    	mov    0xf059e190,%ax
f010087e:	83 c0 50             	add    $0x50,%eax
f0100881:	66 a3 90 e1 59 f0    	mov    %ax,0xf059e190
		text_length = 0;
f0100887:	c7 05 80 e1 59 f0 00 	movl   $0x0,0xf059e180
f010088e:	00 00 00 
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f0100891:	66 8b 0d 90 e1 59 f0 	mov    0xf059e190,%cx
f0100898:	66 a1 90 e1 59 f0    	mov    0xf059e190,%ax
f010089e:	bb 50 00 00 00       	mov    $0x50,%ebx
f01008a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01008a8:	66 f7 f3             	div    %bx
f01008ab:	89 d0                	mov    %edx,%eax
f01008ad:	29 c1                	sub    %eax,%ecx
f01008af:	89 c8                	mov    %ecx,%eax
f01008b1:	66 a3 90 e1 59 f0    	mov    %ax,0xf059e190
		break;
f01008b7:	e9 e5 00 00 00       	jmp    f01009a1 <cga_putc+0x1c2>
	case '\t':
		cons_putc(' ');
f01008bc:	83 ec 0c             	sub    $0xc,%esp
f01008bf:	6a 20                	push   $0x20
f01008c1:	e8 30 05 00 00       	call   f0100df6 <cons_putc>
f01008c6:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01008c9:	83 ec 0c             	sub    $0xc,%esp
f01008cc:	6a 20                	push   $0x20
f01008ce:	e8 23 05 00 00       	call   f0100df6 <cons_putc>
f01008d3:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01008d6:	83 ec 0c             	sub    $0xc,%esp
f01008d9:	6a 20                	push   $0x20
f01008db:	e8 16 05 00 00       	call   f0100df6 <cons_putc>
f01008e0:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01008e3:	83 ec 0c             	sub    $0xc,%esp
f01008e6:	6a 20                	push   $0x20
f01008e8:	e8 09 05 00 00       	call   f0100df6 <cons_putc>
f01008ed:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01008f0:	83 ec 0c             	sub    $0xc,%esp
f01008f3:	6a 20                	push   $0x20
f01008f5:	e8 fc 04 00 00       	call   f0100df6 <cons_putc>
f01008fa:	83 c4 10             	add    $0x10,%esp
		break;
f01008fd:	e9 9f 00 00 00       	jmp    f01009a1 <cga_putc+0x1c2>
	case 228:
		if(crt_pos>0)
f0100902:	66 a1 90 e1 59 f0    	mov    0xf059e190,%ax
f0100908:	66 85 c0             	test   %ax,%ax
f010090b:	0f 84 89 00 00 00    	je     f010099a <cga_putc+0x1bb>
			crt_pos--;
f0100911:	66 a1 90 e1 59 f0    	mov    0xf059e190,%ax
f0100917:	48                   	dec    %eax
f0100918:	66 a3 90 e1 59 f0    	mov    %ax,0xf059e190
		break;
f010091e:	eb 7a                	jmp    f010099a <cga_putc+0x1bb>
	case 229:
		if (crt_pos < CRT_SIZE)
f0100920:	66 a1 90 e1 59 f0    	mov    0xf059e190,%ax
f0100926:	66 3d cf 07          	cmp    $0x7cf,%ax
f010092a:	77 71                	ja     f010099d <cga_putc+0x1be>
			crt_pos++;
f010092c:	66 a1 90 e1 59 f0    	mov    0xf059e190,%ax
f0100932:	40                   	inc    %eax
f0100933:	66 a3 90 e1 59 f0    	mov    %ax,0xf059e190
		break;
f0100939:	eb 62                	jmp    f010099d <cga_putc+0x1be>
	default: {
		if (c != KEY_LF && c != KEY_RT) {
f010093b:	81 7d 08 e4 00 00 00 	cmpl   $0xe4,0x8(%ebp)
f0100942:	74 5c                	je     f01009a0 <cga_putc+0x1c1>
f0100944:	81 7d 08 e5 00 00 00 	cmpl   $0xe5,0x8(%ebp)
f010094b:	74 53                	je     f01009a0 <cga_putc+0x1c1>
			crt_buf[crt_pos++] = c;		/* write the character */
f010094d:	8b 0d 8c e1 59 f0    	mov    0xf059e18c,%ecx
f0100953:	66 a1 90 e1 59 f0    	mov    0xf059e190,%ax
f0100959:	8d 50 01             	lea    0x1(%eax),%edx
f010095c:	66 89 15 90 e1 59 f0 	mov    %dx,0xf059e190
f0100963:	0f b7 c0             	movzwl %ax,%eax
f0100966:	01 c0                	add    %eax,%eax
f0100968:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010096b:	8b 45 08             	mov    0x8(%ebp),%eax
f010096e:	66 89 02             	mov    %ax,(%edx)
			if (crt_pos > 1920 + text_length)
f0100971:	66 a1 90 e1 59 f0    	mov    0xf059e190,%ax
f0100977:	0f b7 c0             	movzwl %ax,%eax
f010097a:	8b 15 80 e1 59 f0    	mov    0xf059e180,%edx
f0100980:	81 c2 80 07 00 00    	add    $0x780,%edx
f0100986:	39 d0                	cmp    %edx,%eax
f0100988:	7e 16                	jle    f01009a0 <cga_putc+0x1c1>
				text_length++;
f010098a:	a1 80 e1 59 f0       	mov    0xf059e180,%eax
f010098f:	40                   	inc    %eax
f0100990:	a3 80 e1 59 f0       	mov    %eax,0xf059e180
		}
		break;
f0100995:	eb 09                	jmp    f01009a0 <cga_putc+0x1c1>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f0100997:	90                   	nop
f0100998:	eb 07                	jmp    f01009a1 <cga_putc+0x1c2>
		cons_putc(' ');
		break;
	case 228:
		if(crt_pos>0)
			crt_pos--;
		break;
f010099a:	90                   	nop
f010099b:	eb 04                	jmp    f01009a1 <cga_putc+0x1c2>
	case 229:
		if (crt_pos < CRT_SIZE)
			crt_pos++;
		break;
f010099d:	90                   	nop
f010099e:	eb 01                	jmp    f01009a1 <cga_putc+0x1c2>
		if (c != KEY_LF && c != KEY_RT) {
			crt_buf[crt_pos++] = c;		/* write the character */
			if (crt_pos > 1920 + text_length)
				text_length++;
		}
		break;
f01009a0:	90                   	nop
	}
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f01009a1:	66 a1 90 e1 59 f0    	mov    0xf059e190,%ax
f01009a7:	66 3d cf 07          	cmp    $0x7cf,%ax
f01009ab:	76 58                	jbe    f0100a05 <cga_putc+0x226>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f01009ad:	a1 8c e1 59 f0       	mov    0xf059e18c,%eax
f01009b2:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f01009b8:	a1 8c e1 59 f0       	mov    0xf059e18c,%eax
f01009bd:	83 ec 04             	sub    $0x4,%esp
f01009c0:	68 00 0f 00 00       	push   $0xf00
f01009c5:	52                   	push   %edx
f01009c6:	50                   	push   %eax
f01009c7:	e8 8a 1c 02 00       	call   f0122656 <memcpy>
f01009cc:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01009cf:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f01009d6:	eb 15                	jmp    f01009ed <cga_putc+0x20e>
			crt_buf[i] = 0x0700 | ' ';
f01009d8:	8b 15 8c e1 59 f0    	mov    0xf059e18c,%edx
f01009de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01009e1:	01 c0                	add    %eax,%eax
f01009e3:	01 d0                	add    %edx,%eax
f01009e5:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01009ea:	ff 45 f4             	incl   -0xc(%ebp)
f01009ed:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f01009f4:	7e e2                	jle    f01009d8 <cga_putc+0x1f9>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f01009f6:	66 a1 90 e1 59 f0    	mov    0xf059e190,%ax
f01009fc:	83 e8 50             	sub    $0x50,%eax
f01009ff:	66 a3 90 e1 59 f0    	mov    %ax,0xf059e190
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100a05:	a1 88 e1 59 f0       	mov    0xf059e188,%eax
f0100a0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100a0d:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100a11:	8a 45 e0             	mov    -0x20(%ebp),%al
f0100a14:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100a17:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f0100a18:	66 a1 90 e1 59 f0    	mov    0xf059e190,%ax
f0100a1e:	66 c1 e8 08          	shr    $0x8,%ax
f0100a22:	0f b6 c0             	movzbl %al,%eax
f0100a25:	8b 15 88 e1 59 f0    	mov    0xf059e188,%edx
f0100a2b:	42                   	inc    %edx
f0100a2c:	89 55 ec             	mov    %edx,-0x14(%ebp)
f0100a2f:	88 45 e1             	mov    %al,-0x1f(%ebp)
f0100a32:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100a35:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100a38:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f0100a39:	a1 88 e1 59 f0       	mov    0xf059e188,%eax
f0100a3e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100a41:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f0100a45:	8a 45 e2             	mov    -0x1e(%ebp),%al
f0100a48:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100a4b:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f0100a4c:	66 a1 90 e1 59 f0    	mov    0xf059e190,%ax
f0100a52:	0f b6 c0             	movzbl %al,%eax
f0100a55:	8b 15 88 e1 59 f0    	mov    0xf059e188,%edx
f0100a5b:	42                   	inc    %edx
f0100a5c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0100a5f:	88 45 e3             	mov    %al,-0x1d(%ebp)
f0100a62:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100a65:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100a68:	ee                   	out    %al,(%dx)
}
f0100a69:	90                   	nop
f0100a6a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0100a6d:	c9                   	leave  
f0100a6e:	c3                   	ret    

f0100a6f <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f0100a6f:	55                   	push   %ebp
f0100a70:	89 e5                	mov    %esp,%ebp
f0100a72:	83 ec 28             	sub    $0x28,%esp
f0100a75:	c7 45 dc 64 00 00 00 	movl   $0x64,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100a7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0100a7f:	89 c2                	mov    %eax,%edx
f0100a81:	ec                   	in     (%dx),%al
f0100a82:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0100a85:	8a 45 db             	mov    -0x25(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100a88:	0f b6 c0             	movzbl %al,%eax
f0100a8b:	83 e0 01             	and    $0x1,%eax
f0100a8e:	85 c0                	test   %eax,%eax
f0100a90:	75 0a                	jne    f0100a9c <kbd_proc_data+0x2d>
		return -1;
f0100a92:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100a97:	e9 2a 02 00 00       	jmp    f0100cc6 <kbd_proc_data+0x257>
f0100a9c:	c7 45 e4 60 00 00 00 	movl   $0x60,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100aa3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100aa6:	89 c2                	mov    %eax,%edx
f0100aa8:	ec                   	in     (%dx),%al
f0100aa9:	88 45 da             	mov    %al,-0x26(%ebp)
	return data;
f0100aac:	8a 45 da             	mov    -0x26(%ebp),%al

	data = inb(KBDATAP);
f0100aaf:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100ab2:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100ab6:	75 17                	jne    f0100acf <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100ab8:	a1 a8 e3 59 f0       	mov    0xf059e3a8,%eax
f0100abd:	83 c8 40             	or     $0x40,%eax
f0100ac0:	a3 a8 e3 59 f0       	mov    %eax,0xf059e3a8
		return 0;
f0100ac5:	b8 00 00 00 00       	mov    $0x0,%eax
f0100aca:	e9 f7 01 00 00       	jmp    f0100cc6 <kbd_proc_data+0x257>
	} else if (data & 0x80) {
f0100acf:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100ad2:	84 c0                	test   %al,%al
f0100ad4:	79 44                	jns    f0100b1a <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100ad6:	a1 a8 e3 59 f0       	mov    0xf059e3a8,%eax
f0100adb:	83 e0 40             	and    $0x40,%eax
f0100ade:	85 c0                	test   %eax,%eax
f0100ae0:	75 08                	jne    f0100aea <kbd_proc_data+0x7b>
f0100ae2:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100ae5:	83 e0 7f             	and    $0x7f,%eax
f0100ae8:	eb 03                	jmp    f0100aed <kbd_proc_data+0x7e>
f0100aea:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100aed:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f0100af0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100af4:	8a 80 20 d0 17 f0    	mov    -0xfe82fe0(%eax),%al
f0100afa:	83 c8 40             	or     $0x40,%eax
f0100afd:	0f b6 c0             	movzbl %al,%eax
f0100b00:	f7 d0                	not    %eax
f0100b02:	89 c2                	mov    %eax,%edx
f0100b04:	a1 a8 e3 59 f0       	mov    0xf059e3a8,%eax
f0100b09:	21 d0                	and    %edx,%eax
f0100b0b:	a3 a8 e3 59 f0       	mov    %eax,0xf059e3a8
		return 0;
f0100b10:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b15:	e9 ac 01 00 00       	jmp    f0100cc6 <kbd_proc_data+0x257>
	} else if (shift & E0ESC) {
f0100b1a:	a1 a8 e3 59 f0       	mov    0xf059e3a8,%eax
f0100b1f:	83 e0 40             	and    $0x40,%eax
f0100b22:	85 c0                	test   %eax,%eax
f0100b24:	74 11                	je     f0100b37 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f0100b26:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f0100b2a:	a1 a8 e3 59 f0       	mov    0xf059e3a8,%eax
f0100b2f:	83 e0 bf             	and    $0xffffffbf,%eax
f0100b32:	a3 a8 e3 59 f0       	mov    %eax,0xf059e3a8
	}

	shift |= shiftcode[data];
f0100b37:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100b3b:	8a 80 20 d0 17 f0    	mov    -0xfe82fe0(%eax),%al
f0100b41:	0f b6 d0             	movzbl %al,%edx
f0100b44:	a1 a8 e3 59 f0       	mov    0xf059e3a8,%eax
f0100b49:	09 d0                	or     %edx,%eax
f0100b4b:	a3 a8 e3 59 f0       	mov    %eax,0xf059e3a8
	shift ^= togglecode[data];
f0100b50:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100b54:	8a 80 20 d1 17 f0    	mov    -0xfe82ee0(%eax),%al
f0100b5a:	0f b6 d0             	movzbl %al,%edx
f0100b5d:	a1 a8 e3 59 f0       	mov    0xf059e3a8,%eax
f0100b62:	31 d0                	xor    %edx,%eax
f0100b64:	a3 a8 e3 59 f0       	mov    %eax,0xf059e3a8

	c = charcode[shift & (CTL | SHIFT)][data];
f0100b69:	a1 a8 e3 59 f0       	mov    0xf059e3a8,%eax
f0100b6e:	83 e0 03             	and    $0x3,%eax
f0100b71:	8b 14 85 20 d5 17 f0 	mov    -0xfe82ae0(,%eax,4),%edx
f0100b78:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100b7c:	01 d0                	add    %edx,%eax
f0100b7e:	8a 00                	mov    (%eax),%al
f0100b80:	0f b6 c0             	movzbl %al,%eax
f0100b83:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (c == KEY_DEL) {
f0100b86:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100b8d:	0f 85 9c 00 00 00    	jne    f0100c2f <kbd_proc_data+0x1c0>
		if (text_length > 0) {
f0100b93:	a1 80 e1 59 f0       	mov    0xf059e180,%eax
f0100b98:	85 c0                	test   %eax,%eax
f0100b9a:	0f 8e 85 00 00 00    	jle    f0100c25 <kbd_proc_data+0x1b6>
			if (crt_pos == 1920 + text_length)
f0100ba0:	66 a1 90 e1 59 f0    	mov    0xf059e190,%ax
f0100ba6:	0f b7 c0             	movzwl %ax,%eax
f0100ba9:	8b 15 80 e1 59 f0    	mov    0xf059e180,%edx
f0100baf:	81 c2 80 07 00 00    	add    $0x780,%edx
f0100bb5:	39 d0                	cmp    %edx,%eax
f0100bb7:	75 0a                	jne    f0100bc3 <kbd_proc_data+0x154>
				return 0;
f0100bb9:	b8 00 00 00 00       	mov    $0x0,%eax
f0100bbe:	e9 03 01 00 00       	jmp    f0100cc6 <kbd_proc_data+0x257>
			else {
				text_length--;
f0100bc3:	a1 80 e1 59 f0       	mov    0xf059e180,%eax
f0100bc8:	48                   	dec    %eax
f0100bc9:	a3 80 e1 59 f0       	mov    %eax,0xf059e180
				int crt_pos_Length = crt_pos - 1925;
f0100bce:	66 a1 90 e1 59 f0    	mov    0xf059e190,%ax
f0100bd4:	0f b7 c0             	movzwl %ax,%eax
f0100bd7:	2d 85 07 00 00       	sub    $0x785,%eax
f0100bdc:	89 45 ec             	mov    %eax,-0x14(%ebp)
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100bdf:	66 a1 90 e1 59 f0    	mov    0xf059e190,%ax
f0100be5:	0f b7 c0             	movzwl %ax,%eax
f0100be8:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100beb:	eb 26                	jmp    f0100c13 <kbd_proc_data+0x1a4>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
f0100bed:	8b 15 8c e1 59 f0    	mov    0xf059e18c,%edx
f0100bf3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100bf6:	01 c0                	add    %eax,%eax
f0100bf8:	01 c2                	add    %eax,%edx
f0100bfa:	a1 8c e1 59 f0       	mov    0xf059e18c,%eax
f0100bff:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f0100c02:	41                   	inc    %ecx
f0100c03:	01 c9                	add    %ecx,%ecx
f0100c05:	01 c8                	add    %ecx,%eax
f0100c07:	66 8b 00             	mov    (%eax),%ax
f0100c0a:	66 89 02             	mov    %ax,(%edx)
				return 0;
			else {
				text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
						++i, crt_pos_Length++) {
f0100c0d:	ff 45 e8             	incl   -0x18(%ebp)
f0100c10:	ff 45 ec             	incl   -0x14(%ebp)
			if (crt_pos == 1920 + text_length)
				return 0;
			else {
				text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100c13:	a1 80 e1 59 f0       	mov    0xf059e180,%eax
f0100c18:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0100c1b:	7e d0                	jle    f0100bed <kbd_proc_data+0x17e>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
				}
				return c;
f0100c1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100c20:	e9 a1 00 00 00       	jmp    f0100cc6 <kbd_proc_data+0x257>
			}
		}
		return 0;
f0100c25:	b8 00 00 00 00       	mov    $0x0,%eax
f0100c2a:	e9 97 00 00 00       	jmp    f0100cc6 <kbd_proc_data+0x257>
	}
	if (shift & CAPSLOCK) {
f0100c2f:	a1 a8 e3 59 f0       	mov    0xf059e3a8,%eax
f0100c34:	83 e0 08             	and    $0x8,%eax
f0100c37:	85 c0                	test   %eax,%eax
f0100c39:	74 22                	je     f0100c5d <kbd_proc_data+0x1ee>
		if ('a' <= c && c <= 'z')
f0100c3b:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100c3f:	7e 0c                	jle    f0100c4d <kbd_proc_data+0x1de>
f0100c41:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100c45:	7f 06                	jg     f0100c4d <kbd_proc_data+0x1de>
			c += 'A' - 'a';
f0100c47:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100c4b:	eb 10                	jmp    f0100c5d <kbd_proc_data+0x1ee>
		else if ('A' <= c && c <= 'Z')
f0100c4d:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100c51:	7e 0a                	jle    f0100c5d <kbd_proc_data+0x1ee>
f0100c53:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100c57:	7f 04                	jg     f0100c5d <kbd_proc_data+0x1ee>
			c += 'a' - 'A';
f0100c59:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	if ((int) shift == NUMLOCK && c >= '0' && c <= '9')
f0100c5d:	a1 a8 e3 59 f0       	mov    0xf059e3a8,%eax
f0100c62:	83 f8 10             	cmp    $0x10,%eax
f0100c65:	75 13                	jne    f0100c7a <kbd_proc_data+0x20b>
f0100c67:	83 7d f4 2f          	cmpl   $0x2f,-0xc(%ebp)
f0100c6b:	7e 0d                	jle    f0100c7a <kbd_proc_data+0x20b>
f0100c6d:	83 7d f4 39          	cmpl   $0x39,-0xc(%ebp)
f0100c71:	7f 07                	jg     f0100c7a <kbd_proc_data+0x20b>
		return 0;
f0100c73:	b8 00 00 00 00       	mov    $0x0,%eax
f0100c78:	eb 4c                	jmp    f0100cc6 <kbd_proc_data+0x257>
	if (c == 255)
f0100c7a:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0100c81:	75 07                	jne    f0100c8a <kbd_proc_data+0x21b>
		return 0;
f0100c83:	b8 00 00 00 00       	mov    $0x0,%eax
f0100c88:	eb 3c                	jmp    f0100cc6 <kbd_proc_data+0x257>
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100c8a:	a1 a8 e3 59 f0       	mov    0xf059e3a8,%eax
f0100c8f:	f7 d0                	not    %eax
f0100c91:	83 e0 06             	and    $0x6,%eax
f0100c94:	85 c0                	test   %eax,%eax
f0100c96:	75 2b                	jne    f0100cc3 <kbd_proc_data+0x254>
f0100c98:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100c9f:	75 22                	jne    f0100cc3 <kbd_proc_data+0x254>
		cprintf("Rebooting!\n");
f0100ca1:	83 ec 0c             	sub    $0xc,%esp
f0100ca4:	68 9b 3b 12 f0       	push   $0xf0123b9b
f0100ca9:	e8 be 02 00 00       	call   f0100f6c <cprintf>
f0100cae:	83 c4 10             	add    $0x10,%esp
f0100cb1:	c7 45 e0 92 00 00 00 	movl   $0x92,-0x20(%ebp)
f0100cb8:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100cbc:	8a 45 d9             	mov    -0x27(%ebp),%al
f0100cbf:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100cc2:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100cc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100cc6:	c9                   	leave  
f0100cc7:	c3                   	ret    

f0100cc8 <kbd_intr>:

void
kbd_intr(void)
{
f0100cc8:	55                   	push   %ebp
f0100cc9:	89 e5                	mov    %esp,%ebp
f0100ccb:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100cce:	83 ec 0c             	sub    $0xc,%esp
f0100cd1:	68 6f 0a 10 f0       	push   $0xf0100a6f
f0100cd6:	e8 21 00 00 00       	call   f0100cfc <cons_intr>
f0100cdb:	83 c4 10             	add    $0x10,%esp
}
f0100cde:	90                   	nop
f0100cdf:	c9                   	leave  
f0100ce0:	c3                   	ret    

f0100ce1 <kbd_init>:

void
kbd_init(void)
{
f0100ce1:	55                   	push   %ebp
f0100ce2:	89 e5                	mov    %esp,%ebp
f0100ce4:	83 ec 08             	sub    $0x8,%esp
	irq_install_handler(1, &keyboard_interrupt_handler);
f0100ce7:	83 ec 08             	sub    $0x8,%esp
f0100cea:	68 83 0e 10 f0       	push   $0xf0100e83
f0100cef:	6a 01                	push   $0x1
f0100cf1:	e8 a2 c6 00 00       	call   f010d398 <irq_install_handler>
f0100cf6:	83 c4 10             	add    $0x10,%esp
	}
	else if (KBD_INT_BLK_METHOD == LCK_SEMAPHORE)
	{
		init_ksemaphore(&KBDsem, 0, "keyboard semaphore");
	}
}
f0100cf9:	90                   	nop
f0100cfa:	c9                   	leave  
f0100cfb:	c3                   	ret    

f0100cfc <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100cfc:	55                   	push   %ebp
f0100cfd:	89 e5                	mov    %esp,%ebp
f0100cff:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100d02:	eb 35                	jmp    f0100d39 <cons_intr+0x3d>
		if (c == 0)
f0100d04:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100d08:	75 02                	jne    f0100d0c <cons_intr+0x10>
			continue;
f0100d0a:	eb 2d                	jmp    f0100d39 <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100d0c:	a1 a4 e3 59 f0       	mov    0xf059e3a4,%eax
f0100d11:	8d 50 01             	lea    0x1(%eax),%edx
f0100d14:	89 15 a4 e3 59 f0    	mov    %edx,0xf059e3a4
f0100d1a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100d1d:	88 90 a0 e1 59 f0    	mov    %dl,-0xfa61e60(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100d23:	a1 a4 e3 59 f0       	mov    0xf059e3a4,%eax
f0100d28:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100d2d:	75 0a                	jne    f0100d39 <cons_intr+0x3d>
			cons.wpos = 0;
f0100d2f:	c7 05 a4 e3 59 f0 00 	movl   $0x0,0xf059e3a4
f0100d36:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100d39:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d3c:	ff d0                	call   *%eax
f0100d3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100d41:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100d45:	75 bd                	jne    f0100d04 <cons_intr+0x8>
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;

		//cprintf("\nCHAR %d is written into cons.buf\n", c);
	}
}
f0100d47:	90                   	nop
f0100d48:	c9                   	leave  
f0100d49:	c3                   	ret    

f0100d4a <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100d4a:	55                   	push   %ebp
f0100d4b:	89 e5                	mov    %esp,%ebp
f0100d4d:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100d50:	e8 ee f7 ff ff       	call   f0100543 <serial_intr>
	kbd_intr();
f0100d55:	e8 6e ff ff ff       	call   f0100cc8 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100d5a:	8b 15 a0 e3 59 f0    	mov    0xf059e3a0,%edx
f0100d60:	a1 a4 e3 59 f0       	mov    0xf059e3a4,%eax
f0100d65:	39 c2                	cmp    %eax,%edx
f0100d67:	74 35                	je     f0100d9e <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100d69:	a1 a0 e3 59 f0       	mov    0xf059e3a0,%eax
f0100d6e:	8d 50 01             	lea    0x1(%eax),%edx
f0100d71:	89 15 a0 e3 59 f0    	mov    %edx,0xf059e3a0
f0100d77:	8a 80 a0 e1 59 f0    	mov    -0xfa61e60(%eax),%al
f0100d7d:	0f b6 c0             	movzbl %al,%eax
f0100d80:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100d83:	a1 a0 e3 59 f0       	mov    0xf059e3a0,%eax
f0100d88:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100d8d:	75 0a                	jne    f0100d99 <cons_getc+0x4f>
			cons.rpos = 0;
f0100d8f:	c7 05 a0 e3 59 f0 00 	movl   $0x0,0xf059e3a0
f0100d96:	00 00 00 
		return c;
f0100d99:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100d9c:	eb 05                	jmp    f0100da3 <cons_getc+0x59>
	}
	return 0;
f0100d9e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100da3:	c9                   	leave  
f0100da4:	c3                   	ret    

f0100da5 <cons_getc2>:

//// return the next input character from the console buffer, or 0 if none
int
cons_getc2(void)
{
f0100da5:	55                   	push   %ebp
f0100da6:	89 e5                	mov    %esp,%ebp
f0100da8:	83 ec 10             	sub    $0x10,%esp
	int c;
	// grab the next character from the input buffer (if any).
	if (cons.rpos != cons.wpos) {
f0100dab:	8b 15 a0 e3 59 f0    	mov    0xf059e3a0,%edx
f0100db1:	a1 a4 e3 59 f0       	mov    0xf059e3a4,%eax
f0100db6:	39 c2                	cmp    %eax,%edx
f0100db8:	74 35                	je     f0100def <cons_getc2+0x4a>
		c = cons.buf[cons.rpos++];
f0100dba:	a1 a0 e3 59 f0       	mov    0xf059e3a0,%eax
f0100dbf:	8d 50 01             	lea    0x1(%eax),%edx
f0100dc2:	89 15 a0 e3 59 f0    	mov    %edx,0xf059e3a0
f0100dc8:	8a 80 a0 e1 59 f0    	mov    -0xfa61e60(%eax),%al
f0100dce:	0f b6 c0             	movzbl %al,%eax
f0100dd1:	89 45 fc             	mov    %eax,-0x4(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100dd4:	a1 a0 e3 59 f0       	mov    0xf059e3a0,%eax
f0100dd9:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100dde:	75 0a                	jne    f0100dea <cons_getc2+0x45>
			cons.rpos = 0;
f0100de0:	c7 05 a0 e3 59 f0 00 	movl   $0x0,0xf059e3a0
f0100de7:	00 00 00 
		return c;
f0100dea:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100ded:	eb 05                	jmp    f0100df4 <cons_getc2+0x4f>
	}
	return 0;
f0100def:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100df4:	c9                   	leave  
f0100df5:	c3                   	ret    

f0100df6 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100df6:	55                   	push   %ebp
f0100df7:	89 e5                	mov    %esp,%ebp
f0100df9:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100dfc:	ff 75 08             	pushl  0x8(%ebp)
f0100dff:	e8 a1 f8 ff ff       	call   f01006a5 <lpt_putc>
f0100e04:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100e07:	83 ec 0c             	sub    $0xc,%esp
f0100e0a:	ff 75 08             	pushl  0x8(%ebp)
f0100e0d:	e8 cd f9 ff ff       	call   f01007df <cga_putc>
f0100e12:	83 c4 10             	add    $0x10,%esp
}
f0100e15:	90                   	nop
f0100e16:	c9                   	leave  
f0100e17:	c3                   	ret    

f0100e18 <cons_init>:

// initialize the console devices
void
cons_init(void)
{
f0100e18:	55                   	push   %ebp
f0100e19:	89 e5                	mov    %esp,%ebp
f0100e1b:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100e1e:	e8 f7 f8 ff ff       	call   f010071a <cga_init>
	kbd_init();
f0100e23:	e8 b9 fe ff ff       	call   f0100ce1 <kbd_init>
	serial_init();
f0100e28:	e8 56 f7 ff ff       	call   f0100583 <serial_init>

	if (!serial_exists)
f0100e2d:	a1 84 e1 59 f0       	mov    0xf059e184,%eax
f0100e32:	85 c0                	test   %eax,%eax
f0100e34:	75 10                	jne    f0100e46 <cons_init+0x2e>
		cprintf("Serial port does not exist!\n");
f0100e36:	83 ec 0c             	sub    $0xc,%esp
f0100e39:	68 a7 3b 12 f0       	push   $0xf0123ba7
f0100e3e:	e8 29 01 00 00       	call   f0100f6c <cprintf>
f0100e43:	83 c4 10             	add    $0x10,%esp
	}
	else if (CONS_LCK_METHOD == LCK_SEMAPHORE)
	{
		init_ksemaphore(&conssem, 1, "console semaphore");
	}
}
f0100e46:	90                   	nop
f0100e47:	c9                   	leave  
f0100e48:	c3                   	ret    

f0100e49 <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf from KERNEL side

void
cputchar(int c)
{
f0100e49:	55                   	push   %ebp
f0100e4a:	89 e5                	mov    %esp,%ebp
f0100e4c:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100e4f:	83 ec 0c             	sub    $0xc,%esp
f0100e52:	ff 75 08             	pushl  0x8(%ebp)
f0100e55:	e8 9c ff ff ff       	call   f0100df6 <cons_putc>
f0100e5a:	83 c4 10             	add    $0x10,%esp
}
f0100e5d:	90                   	nop
f0100e5e:	c9                   	leave  
f0100e5f:	c3                   	ret    

f0100e60 <getchar>:

int
getchar(void)
{
f0100e60:	55                   	push   %ebp
f0100e61:	89 e5                	mov    %esp,%ebp
f0100e63:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100e66:	e8 df fe ff ff       	call   f0100d4a <cons_getc>
f0100e6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100e6e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100e72:	74 f2                	je     f0100e66 <getchar+0x6>
		/* do nothing */;
	return c;
f0100e74:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100e77:	c9                   	leave  
f0100e78:	c3                   	ret    

f0100e79 <iscons>:

int
iscons(int fdnum)
{
f0100e79:	55                   	push   %ebp
f0100e7a:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100e7c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100e81:	5d                   	pop    %ebp
f0100e82:	c3                   	ret    

f0100e83 <keyboard_interrupt_handler>:

/*Keyboard Interrupt Service Routine */
void keyboard_interrupt_handler()
{
f0100e83:	55                   	push   %ebp
f0100e84:	89 e5                	mov    %esp,%ebp
f0100e86:	83 ec 08             	sub    $0x8,%esp
	//	char scanCode = inb(0x60) & 0x7F; //What key is pressed
	//	char press = inb(0x60) & 0x80; //Press down, or released
	//
	//	cprintf("Scan code: %d, Press: %d\n", scanCode, press);
	//cprintf("char is pressed\n");
	kbd_intr();
f0100e89:	e8 3a fe ff ff       	call   f0100cc8 <kbd_intr>
		else if (KBD_INT_BLK_METHOD == LCK_SEMAPHORE)
		{
			signal_ksemaphore(&KBDsem);
		}
	}
}
f0100e8e:	90                   	nop
f0100e8f:	c9                   	leave  
f0100e90:	c3                   	ret    

f0100e91 <cons_lock>:

void cons_lock(void)
{
f0100e91:	55                   	push   %ebp
f0100e92:	89 e5                	mov    %esp,%ebp
f0100e94:	83 ec 18             	sub    $0x18,%esp
	if (CONS_LCK_METHOD == LCK_INT)
	{
		kclock_stop();
f0100e97:	e8 ec 3d 00 00       	call   f0104c88 <kclock_stop>
 */
//clear interrupt flag
static __inline void
cli(void)
{
	__asm __volatile("cli");
f0100e9c:	fa                   	cli    
		cli();
		struct Env * p = get_cpu_proc();
f0100e9d:	e8 ce 98 00 00       	call   f010a770 <get_cpu_proc>
f0100ea2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (p == NULL)
f0100ea5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100ea9:	75 17                	jne    f0100ec2 <cons_lock+0x31>
		{
			panic("cons_lock: no running process to block");
f0100eab:	83 ec 04             	sub    $0x4,%esp
f0100eae:	68 c4 3b 12 f0       	push   $0xf0123bc4
f0100eb3:	68 2d 02 00 00       	push   $0x22d
f0100eb8:	68 eb 3b 12 f0       	push   $0xf0123beb
f0100ebd:	e8 58 f4 ff ff       	call   f010031a <_panic>
		}
		p->env_tf->tf_eflags &= ~FL_IF ;
f0100ec2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100ec5:	8b 00                	mov    (%eax),%eax
f0100ec7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100eca:	8b 12                	mov    (%edx),%edx
f0100ecc:	8b 52 38             	mov    0x38(%edx),%edx
f0100ecf:	80 e6 fd             	and    $0xfd,%dh
f0100ed2:	89 50 38             	mov    %edx,0x38(%eax)
	else if (CONS_LCK_METHOD == LCK_SEMAPHORE)
	{
		wait_ksemaphore(&conssem);
	}

}
f0100ed5:	90                   	nop
f0100ed6:	c9                   	leave  
f0100ed7:	c3                   	ret    

f0100ed8 <cons_unlock>:

void cons_unlock(void)
{
f0100ed8:	55                   	push   %ebp
f0100ed9:	89 e5                	mov    %esp,%ebp
f0100edb:	83 ec 18             	sub    $0x18,%esp
	if (CONS_LCK_METHOD == LCK_INT)
	{
		kclock_stop();
f0100ede:	e8 a5 3d 00 00       	call   f0104c88 <kclock_stop>
f0100ee3:	fa                   	cli    
		cli();
		struct Env * p = get_cpu_proc();
f0100ee4:	e8 87 98 00 00       	call   f010a770 <get_cpu_proc>
f0100ee9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (p == NULL)
f0100eec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100ef0:	75 17                	jne    f0100f09 <cons_unlock+0x31>
		{
			panic("cons_unlock: no running process to block");
f0100ef2:	83 ec 04             	sub    $0x4,%esp
f0100ef5:	68 00 3c 12 f0       	push   $0xf0123c00
f0100efa:	68 46 02 00 00       	push   $0x246
f0100eff:	68 eb 3b 12 f0       	push   $0xf0123beb
f0100f04:	e8 11 f4 ff ff       	call   f010031a <_panic>
		}
		p->env_tf->tf_eflags |= FL_IF ;
f0100f09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100f0c:	8b 00                	mov    (%eax),%eax
f0100f0e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100f11:	8b 12                	mov    (%edx),%edx
f0100f13:	8b 52 38             	mov    0x38(%edx),%edx
f0100f16:	80 ce 02             	or     $0x2,%dh
f0100f19:	89 50 38             	mov    %edx,0x38(%eax)
	else if (CONS_LCK_METHOD == LCK_SEMAPHORE)
	{
		signal_ksemaphore(&conssem);
	}

}
f0100f1c:	90                   	nop
f0100f1d:	c9                   	leave  
f0100f1e:	c3                   	ret    

f0100f1f <putch>:
#include <kern/cpu/cpu.h>


static void
putch(int ch, int *cnt)
{
f0100f1f:	55                   	push   %ebp
f0100f20:	89 e5                	mov    %esp,%ebp
f0100f22:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100f25:	83 ec 0c             	sub    $0xc,%esp
f0100f28:	ff 75 08             	pushl  0x8(%ebp)
f0100f2b:	e8 19 ff ff ff       	call   f0100e49 <cputchar>
f0100f30:	83 c4 10             	add    $0x10,%esp
	(*cnt)++;
f0100f33:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100f36:	8b 00                	mov    (%eax),%eax
f0100f38:	8d 50 01             	lea    0x1(%eax),%edx
f0100f3b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100f3e:	89 10                	mov    %edx,(%eax)
}
f0100f40:	90                   	nop
f0100f41:	c9                   	leave  
f0100f42:	c3                   	ret    

f0100f43 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100f43:	55                   	push   %ebp
f0100f44:	89 e5                	mov    %esp,%ebp
f0100f46:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100f49:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100f50:	ff 75 0c             	pushl  0xc(%ebp)
f0100f53:	ff 75 08             	pushl  0x8(%ebp)
f0100f56:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100f59:	50                   	push   %eax
f0100f5a:	68 1f 0f 10 f0       	push   $0xf0100f1f
f0100f5f:	e8 12 0e 02 00       	call   f0121d76 <vprintfmt>
f0100f64:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100f67:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100f6a:	c9                   	leave  
f0100f6b:	c3                   	ret    

f0100f6c <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100f6c:	55                   	push   %ebp
f0100f6d:	89 e5                	mov    %esp,%ebp
f0100f6f:	83 ec 18             	sub    $0x18,%esp
	//2024 - better to use locks instead (to support multiprocessors)
	int cnt;
	pushcli();	//disable interrupts
f0100f72:	e8 49 62 00 00       	call   f01071c0 <pushcli>
	{
		va_list ap;

		va_start(ap, fmt);
f0100f77:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100f7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		cnt = vcprintf(fmt, ap);
f0100f7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f80:	83 ec 08             	sub    $0x8,%esp
f0100f83:	ff 75 f4             	pushl  -0xc(%ebp)
f0100f86:	50                   	push   %eax
f0100f87:	e8 b7 ff ff ff       	call   f0100f43 <vcprintf>
f0100f8c:	83 c4 10             	add    $0x10,%esp
f0100f8f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		va_end(ap);
	}
	popcli();	//enable interrupts
f0100f92:	e8 7b 62 00 00       	call   f0107212 <popcli>

	return cnt;
f0100f97:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100f9a:	c9                   	leave  
f0100f9b:	c3                   	ret    

f0100f9c <clearandwritecommand>:
#define HISTORY_MAX 19
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
f0100f9c:	55                   	push   %ebp
f0100f9d:	89 e5                	mov    %esp,%ebp
f0100f9f:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < *i; j++) {
f0100fa2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100fa9:	eb 10                	jmp    f0100fbb <clearandwritecommand+0x1f>
		cputchar('\b');
f0100fab:	83 ec 0c             	sub    $0xc,%esp
f0100fae:	6a 08                	push   $0x8
f0100fb0:	e8 94 fe ff ff       	call   f0100e49 <cputchar>
f0100fb5:	83 c4 10             	add    $0x10,%esp
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
	for (int j = 0; j < *i; j++) {
f0100fb8:	ff 45 f4             	incl   -0xc(%ebp)
f0100fbb:	8b 45 08             	mov    0x8(%ebp),%eax
f0100fbe:	8b 00                	mov    (%eax),%eax
f0100fc0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0100fc3:	7f e6                	jg     f0100fab <clearandwritecommand+0xf>
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
f0100fc5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100fc8:	c1 e0 0a             	shl    $0xa,%eax
f0100fcb:	05 40 ac 5b f0       	add    $0xf05bac40,%eax
f0100fd0:	83 ec 0c             	sub    $0xc,%esp
f0100fd3:	50                   	push   %eax
f0100fd4:	e8 5f 14 02 00       	call   f0122438 <strlen>
f0100fd9:	83 c4 10             	add    $0x10,%esp
f0100fdc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100fdf:	83 ec 04             	sub    $0x4,%esp
f0100fe2:	68 00 04 00 00       	push   $0x400
f0100fe7:	68 60 fc 5b f0       	push   $0xf05bfc60
f0100fec:	ff 75 10             	pushl  0x10(%ebp)
f0100fef:	e8 62 16 02 00       	call   f0122656 <memcpy>
f0100ff4:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100ff7:	8b 45 08             	mov    0x8(%ebp),%eax
f0100ffa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0101000:	eb 52                	jmp    f0101054 <clearandwritecommand+0xb8>
		cputchar(command_history[commandidx][*i]);
f0101002:	8b 45 08             	mov    0x8(%ebp),%eax
f0101005:	8b 00                	mov    (%eax),%eax
f0101007:	8b 55 0c             	mov    0xc(%ebp),%edx
f010100a:	c1 e2 0a             	shl    $0xa,%edx
f010100d:	01 d0                	add    %edx,%eax
f010100f:	05 40 ac 5b f0       	add    $0xf05bac40,%eax
f0101014:	8a 00                	mov    (%eax),%al
f0101016:	0f be c0             	movsbl %al,%eax
f0101019:	83 ec 0c             	sub    $0xc,%esp
f010101c:	50                   	push   %eax
f010101d:	e8 27 fe ff ff       	call   f0100e49 <cputchar>
f0101022:	83 c4 10             	add    $0x10,%esp
		buf[*i] = command_history[commandidx][*i];
f0101025:	8b 45 08             	mov    0x8(%ebp),%eax
f0101028:	8b 00                	mov    (%eax),%eax
f010102a:	89 c2                	mov    %eax,%edx
f010102c:	8b 45 10             	mov    0x10(%ebp),%eax
f010102f:	01 c2                	add    %eax,%edx
f0101031:	8b 45 08             	mov    0x8(%ebp),%eax
f0101034:	8b 00                	mov    (%eax),%eax
f0101036:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0101039:	c1 e1 0a             	shl    $0xa,%ecx
f010103c:	01 c8                	add    %ecx,%eax
f010103e:	05 40 ac 5b f0       	add    $0xf05bac40,%eax
f0101043:	8a 00                	mov    (%eax),%al
f0101045:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < *i; j++) {
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0101047:	8b 45 08             	mov    0x8(%ebp),%eax
f010104a:	8b 00                	mov    (%eax),%eax
f010104c:	8d 50 01             	lea    0x1(%eax),%edx
f010104f:	8b 45 08             	mov    0x8(%ebp),%eax
f0101052:	89 10                	mov    %edx,(%eax)
f0101054:	8b 45 08             	mov    0x8(%ebp),%eax
f0101057:	8b 00                	mov    (%eax),%eax
f0101059:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010105c:	7c a4                	jl     f0101002 <clearandwritecommand+0x66>
		cputchar(command_history[commandidx][*i]);
		buf[*i] = command_history[commandidx][*i];
	}
	*last_index = len;
f010105e:	8b 45 14             	mov    0x14(%ebp),%eax
f0101061:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101064:	89 10                	mov    %edx,(%eax)
}
f0101066:	90                   	nop
f0101067:	c9                   	leave  
f0101068:	c3                   	ret    

f0101069 <RoundAutoCompleteCommandWithTheSamePrefix>:

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
f0101069:	55                   	push   %ebp
f010106a:	89 e5                	mov    %esp,%ebp
f010106c:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < old_buf_len; j++) {
f010106f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101076:	eb 10                	jmp    f0101088 <RoundAutoCompleteCommandWithTheSamePrefix+0x1f>
		cputchar('\b');
f0101078:	83 ec 0c             	sub    $0xc,%esp
f010107b:	6a 08                	push   $0x8
f010107d:	e8 c7 fd ff ff       	call   f0100e49 <cputchar>
f0101082:	83 c4 10             	add    $0x10,%esp
	*last_index = len;
}

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
	for (int j = 0; j < old_buf_len; j++) {
f0101085:	ff 45 f4             	incl   -0xc(%ebp)
f0101088:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010108b:	3b 45 08             	cmp    0x8(%ebp),%eax
f010108e:	7c e8                	jl     f0101078 <RoundAutoCompleteCommandWithTheSamePrefix+0xf>
		cputchar('\b');
	}
	int len = strlen(prefix_element);
f0101090:	83 ec 0c             	sub    $0xc,%esp
f0101093:	ff 75 0c             	pushl  0xc(%ebp)
f0101096:	e8 9d 13 02 00       	call   f0122438 <strlen>
f010109b:	83 c4 10             	add    $0x10,%esp
f010109e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f01010a1:	83 ec 04             	sub    $0x4,%esp
f01010a4:	68 00 04 00 00       	push   $0x400
f01010a9:	68 60 fc 5b f0       	push   $0xf05bfc60
f01010ae:	ff 75 10             	pushl  0x10(%ebp)
f01010b1:	e8 a0 15 02 00       	call   f0122656 <memcpy>
f01010b6:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f01010b9:	8b 45 14             	mov    0x14(%ebp),%eax
f01010bc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01010c2:	eb 46                	jmp    f010110a <RoundAutoCompleteCommandWithTheSamePrefix+0xa1>
		cputchar(prefix_element[*i]);
f01010c4:	8b 45 14             	mov    0x14(%ebp),%eax
f01010c7:	8b 00                	mov    (%eax),%eax
f01010c9:	89 c2                	mov    %eax,%edx
f01010cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01010ce:	01 d0                	add    %edx,%eax
f01010d0:	8a 00                	mov    (%eax),%al
f01010d2:	0f be c0             	movsbl %al,%eax
f01010d5:	83 ec 0c             	sub    $0xc,%esp
f01010d8:	50                   	push   %eax
f01010d9:	e8 6b fd ff ff       	call   f0100e49 <cputchar>
f01010de:	83 c4 10             	add    $0x10,%esp
		buf[*i] = prefix_element[*i];
f01010e1:	8b 45 14             	mov    0x14(%ebp),%eax
f01010e4:	8b 00                	mov    (%eax),%eax
f01010e6:	89 c2                	mov    %eax,%edx
f01010e8:	8b 45 10             	mov    0x10(%ebp),%eax
f01010eb:	01 c2                	add    %eax,%edx
f01010ed:	8b 45 14             	mov    0x14(%ebp),%eax
f01010f0:	8b 00                	mov    (%eax),%eax
f01010f2:	89 c1                	mov    %eax,%ecx
f01010f4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01010f7:	01 c8                	add    %ecx,%eax
f01010f9:	8a 00                	mov    (%eax),%al
f01010fb:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < old_buf_len; j++) {
		cputchar('\b');
	}
	int len = strlen(prefix_element);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f01010fd:	8b 45 14             	mov    0x14(%ebp),%eax
f0101100:	8b 00                	mov    (%eax),%eax
f0101102:	8d 50 01             	lea    0x1(%eax),%edx
f0101105:	8b 45 14             	mov    0x14(%ebp),%eax
f0101108:	89 10                	mov    %edx,(%eax)
f010110a:	8b 45 14             	mov    0x14(%ebp),%eax
f010110d:	8b 00                	mov    (%eax),%eax
f010110f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101112:	7c b0                	jl     f01010c4 <RoundAutoCompleteCommandWithTheSamePrefix+0x5b>
		cputchar(prefix_element[*i]);
		buf[*i] = prefix_element[*i];
	}
	*last_index = len;
f0101114:	8b 45 18             	mov    0x18(%ebp),%eax
f0101117:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010111a:	89 10                	mov    %edx,(%eax)
}
f010111c:	90                   	nop
f010111d:	c9                   	leave  
f010111e:	c3                   	ret    

f010111f <clear_prefix_list>:

char PrefixList[100][1024];
void clear_prefix_list()
{
f010111f:	55                   	push   %ebp
f0101120:	89 e5                	mov    %esp,%ebp
f0101122:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < 100; ++i) {
f0101125:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010112c:	eb 21                	jmp    f010114f <clear_prefix_list+0x30>
		memset(PrefixList[i], 0, 1024);}
f010112e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101131:	c1 e0 0a             	shl    $0xa,%eax
f0101134:	05 40 1c 5a f0       	add    $0xf05a1c40,%eax
f0101139:	83 ec 04             	sub    $0x4,%esp
f010113c:	68 00 04 00 00       	push   $0x400
f0101141:	6a 00                	push   $0x0
f0101143:	50                   	push   %eax
f0101144:	e8 dd 14 02 00       	call   f0122626 <memset>
f0101149:	83 c4 10             	add    $0x10,%esp
}

char PrefixList[100][1024];
void clear_prefix_list()
{
	for (int i = 0; i < 100; ++i) {
f010114c:	ff 45 f4             	incl   -0xc(%ebp)
f010114f:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0101153:	7e d9                	jle    f010112e <clear_prefix_list+0xf>
		memset(PrefixList[i], 0, 1024);}
}
f0101155:	90                   	nop
f0101156:	c9                   	leave  
f0101157:	c3                   	ret    

f0101158 <command_prompt_readline>:

void command_prompt_readline(const char *prompt, char* buf) {
f0101158:	55                   	push   %ebp
f0101159:	89 e5                	mov    %esp,%ebp
f010115b:	57                   	push   %edi
f010115c:	53                   	push   %ebx
f010115d:	81 ec d0 08 00 00    	sub    $0x8d0,%esp
	int i, c, echoing, lastIndex;
	if (prompt != NULL)
f0101163:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0101167:	74 13                	je     f010117c <command_prompt_readline+0x24>
		cprintf("%s", prompt);
f0101169:	83 ec 08             	sub    $0x8,%esp
f010116c:	ff 75 08             	pushl  0x8(%ebp)
f010116f:	68 2c 3c 12 f0       	push   $0xf0123c2c
f0101174:	e8 f3 fd ff ff       	call   f0100f6c <cprintf>
f0101179:	83 c4 10             	add    $0x10,%esp

	int commandidx = last_command_idx + 1;
f010117c:	a1 30 d5 17 f0       	mov    0xf017d530,%eax
f0101181:	40                   	inc    %eax
f0101182:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int prefix_list_idx = lastIndex = i = 0;
f0101185:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%ebp)
f010118c:	00 00 00 
f010118f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101195:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010119b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01011a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int prefix_list_size, last_c;
	echoing = iscons(0);
f01011a4:	83 ec 0c             	sub    $0xc,%esp
f01011a7:	6a 00                	push   $0x0
f01011a9:	e8 cb fc ff ff       	call   f0100e79 <iscons>
f01011ae:	83 c4 10             	add    $0x10,%esp
f01011b1:	89 45 98             	mov    %eax,-0x68(%ebp)
	bool is_run_cmd = 0;
f01011b4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_tst_cmd = 0;
f01011bb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	while (1) {
		c = getchar();
f01011c2:	e8 99 fc ff ff       	call   f0100e60 <getchar>
f01011c7:	89 45 94             	mov    %eax,-0x6c(%ebp)
		if (i > lastIndex)
f01011ca:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f01011d0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01011d6:	39 c2                	cmp    %eax,%edx
f01011d8:	7e 0c                	jle    f01011e6 <command_prompt_readline+0x8e>
			lastIndex = i;
f01011da:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01011e0:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
		if (c < 0) {
f01011e6:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
f01011ea:	79 22                	jns    f010120e <command_prompt_readline+0xb6>

			if (c != -E_EOF)
f01011ec:	83 7d 94 07          	cmpl   $0x7,-0x6c(%ebp)
f01011f0:	0f 84 94 0a 00 00    	je     f0101c8a <command_prompt_readline+0xb32>
				cprintf("read error: %e\n", c);
f01011f6:	83 ec 08             	sub    $0x8,%esp
f01011f9:	ff 75 94             	pushl  -0x6c(%ebp)
f01011fc:	68 2f 3c 12 f0       	push   $0xf0123c2f
f0101201:	e8 66 fd ff ff       	call   f0100f6c <cprintf>
f0101206:	83 c4 10             	add    $0x10,%esp
			return;
f0101209:	e9 7c 0a 00 00       	jmp    f0101c8a <command_prompt_readline+0xb32>
		} else if (c == 226) { // Up arrow
f010120e:	81 7d 94 e2 00 00 00 	cmpl   $0xe2,-0x6c(%ebp)
f0101215:	75 2a                	jne    f0101241 <command_prompt_readline+0xe9>
			if (commandidx)
f0101217:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010121b:	74 03                	je     f0101220 <command_prompt_readline+0xc8>
				commandidx--;
f010121d:	ff 4d f4             	decl   -0xc(%ebp)
			clearandwritecommand(&i, commandidx, buf, &lastIndex);
f0101220:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0101226:	50                   	push   %eax
f0101227:	ff 75 0c             	pushl  0xc(%ebp)
f010122a:	ff 75 f4             	pushl  -0xc(%ebp)
f010122d:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f0101233:	50                   	push   %eax
f0101234:	e8 63 fd ff ff       	call   f0100f9c <clearandwritecommand>
f0101239:	83 c4 10             	add    $0x10,%esp
f010123c:	e9 32 0a 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
		} else if (c == 227) { // Down arrow
f0101241:	81 7d 94 e3 00 00 00 	cmpl   $0xe3,-0x6c(%ebp)
f0101248:	75 3b                	jne    f0101285 <command_prompt_readline+0x12d>
			if (commandidx < last_command_idx)
f010124a:	a1 30 d5 17 f0       	mov    0xf017d530,%eax
f010124f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101252:	7d 03                	jge    f0101257 <command_prompt_readline+0xff>
				commandidx++;
f0101254:	ff 45 f4             	incl   -0xc(%ebp)
			if (last_command_idx >= 0)
f0101257:	a1 30 d5 17 f0       	mov    0xf017d530,%eax
f010125c:	85 c0                	test   %eax,%eax
f010125e:	0f 88 0f 0a 00 00    	js     f0101c73 <command_prompt_readline+0xb1b>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
f0101264:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f010126a:	50                   	push   %eax
f010126b:	ff 75 0c             	pushl  0xc(%ebp)
f010126e:	ff 75 f4             	pushl  -0xc(%ebp)
f0101271:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f0101277:	50                   	push   %eax
f0101278:	e8 1f fd ff ff       	call   f0100f9c <clearandwritecommand>
f010127d:	83 c4 10             	add    $0x10,%esp
f0101280:	e9 ee 09 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
		} else if (c == 9) { // Tab button
f0101285:	83 7d 94 09          	cmpl   $0x9,-0x6c(%ebp)
f0101289:	0f 85 6d 07 00 00    	jne    f01019fc <command_prompt_readline+0x8a4>
			if (last_c != 9) {
f010128f:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
f0101293:	0f 84 fc 06 00 00    	je     f0101995 <command_prompt_readline+0x83d>
				clear_prefix_list(PrefixList, 100);
f0101299:	83 ec 08             	sub    $0x8,%esp
f010129c:	6a 64                	push   $0x64
f010129e:	68 40 1c 5a f0       	push   $0xf05a1c40
f01012a3:	e8 77 fe ff ff       	call   f010111f <clear_prefix_list>
f01012a8:	83 c4 10             	add    $0x10,%esp
				if (strlen(buf) == 0 || last_c == 255)
f01012ab:	83 ec 0c             	sub    $0xc,%esp
f01012ae:	ff 75 0c             	pushl  0xc(%ebp)
f01012b1:	e8 82 11 02 00       	call   f0122438 <strlen>
f01012b6:	83 c4 10             	add    $0x10,%esp
f01012b9:	85 c0                	test   %eax,%eax
f01012bb:	0f 84 bd 09 00 00    	je     f0101c7e <command_prompt_readline+0xb26>
f01012c1:	81 7d e8 ff 00 00 00 	cmpl   $0xff,-0x18(%ebp)
f01012c8:	0f 84 b0 09 00 00    	je     f0101c7e <command_prompt_readline+0xb26>
					continue;
				char *arguments[MAX_ARGUMENTS];
				int number_of_arguments = prefix_list_size = 0;
f01012ce:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01012d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01012d8:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
				char temp_buf[1024];
				strcpy(temp_buf, buf);
f01012de:	83 ec 08             	sub    $0x8,%esp
f01012e1:	ff 75 0c             	pushl  0xc(%ebp)
f01012e4:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01012ea:	50                   	push   %eax
f01012eb:	e8 97 11 02 00       	call   f0122487 <strcpy>
f01012f0:	83 c4 10             	add    $0x10,%esp
				int bufLength = strlen(buf);
f01012f3:	83 ec 0c             	sub    $0xc,%esp
f01012f6:	ff 75 0c             	pushl  0xc(%ebp)
f01012f9:	e8 3a 11 02 00       	call   f0122438 <strlen>
f01012fe:	83 c4 10             	add    $0x10,%esp
f0101301:	89 45 90             	mov    %eax,-0x70(%ebp)
				if (buf[bufLength - 1] == ' ')
f0101304:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101307:	8d 50 ff             	lea    -0x1(%eax),%edx
f010130a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010130d:	01 d0                	add    %edx,%eax
f010130f:	8a 00                	mov    (%eax),%al
f0101311:	3c 20                	cmp    $0x20,%al
f0101313:	0f 84 6b 09 00 00    	je     f0101c84 <command_prompt_readline+0xb2c>
					continue;
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
f0101319:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010131f:	50                   	push   %eax
f0101320:	8d 85 30 f7 ff ff    	lea    -0x8d0(%ebp),%eax
f0101326:	50                   	push   %eax
f0101327:	68 3f 3c 12 f0       	push   $0xf0123c3f
f010132c:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101332:	50                   	push   %eax
f0101333:	e8 15 17 02 00       	call   f0122a4d <strsplit>
f0101338:	83 c4 10             	add    $0x10,%esp
				int it_str = 0;
f010133b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
				if (number_of_arguments > 1) {
f0101342:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101348:	83 f8 01             	cmp    $0x1,%eax
f010134b:	0f 8e 28 01 00 00    	jle    f0101479 <command_prompt_readline+0x321>
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
f0101351:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101357:	83 ec 08             	sub    $0x8,%esp
f010135a:	68 44 3c 12 f0       	push   $0xf0123c44
f010135f:	50                   	push   %eax
f0101360:	e8 df 11 02 00       	call   f0122544 <strcmp>
f0101365:	83 c4 10             	add    $0x10,%esp
f0101368:	85 c0                	test   %eax,%eax
f010136a:	74 3c                	je     f01013a8 <command_prompt_readline+0x250>
f010136c:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101372:	83 ec 08             	sub    $0x8,%esp
f0101375:	68 48 3c 12 f0       	push   $0xf0123c48
f010137a:	50                   	push   %eax
f010137b:	e8 c4 11 02 00       	call   f0122544 <strcmp>
f0101380:	83 c4 10             	add    $0x10,%esp
f0101383:	85 c0                	test   %eax,%eax
f0101385:	74 21                	je     f01013a8 <command_prompt_readline+0x250>
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
f0101387:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f010138d:	83 ec 08             	sub    $0x8,%esp
f0101390:	68 4d 3c 12 f0       	push   $0xf0123c4d
f0101395:	50                   	push   %eax
f0101396:	e8 a9 11 02 00       	call   f0122544 <strcmp>
f010139b:	83 c4 10             	add    $0x10,%esp
f010139e:	85 c0                	test   %eax,%eax
f01013a0:	74 06                	je     f01013a8 <command_prompt_readline+0x250>
						continue;
f01013a2:	90                   	nop
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f01013a3:	e9 d6 08 00 00       	jmp    f0101c7e <command_prompt_readline+0xb26>
				int it_str = 0;
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
						continue;
					if ((strcmp(arguments[0], "tst") == 0))
f01013a8:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f01013ae:	83 ec 08             	sub    $0x8,%esp
f01013b1:	68 4d 3c 12 f0       	push   $0xf0123c4d
f01013b6:	50                   	push   %eax
f01013b7:	e8 88 11 02 00       	call   f0122544 <strcmp>
f01013bc:	83 c4 10             	add    $0x10,%esp
f01013bf:	85 c0                	test   %eax,%eax
f01013c1:	75 09                	jne    f01013cc <command_prompt_readline+0x274>
					{
						is_tst_cmd = 1;
f01013c3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
f01013ca:	eb 07                	jmp    f01013d3 <command_prompt_readline+0x27b>
					}
					else
					{
						is_run_cmd = 1;
f01013cc:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
					}
					char temp[1024] = "";
f01013d3:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01013da:	00 00 00 
f01013dd:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01013e3:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01013e8:	b8 00 00 00 00       	mov    $0x0,%eax
f01013ed:	89 d7                	mov    %edx,%edi
f01013ef:	f3 ab                	rep stos %eax,%es:(%edi)
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
f01013f1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01013f7:	48                   	dec    %eax
f01013f8:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f01013ff:	83 ec 0c             	sub    $0xc,%esp
f0101402:	50                   	push   %eax
f0101403:	e8 30 10 02 00       	call   f0122438 <strlen>
f0101408:	83 c4 10             	add    $0x10,%esp
f010140b:	8b 55 90             	mov    -0x70(%ebp),%edx
f010140e:	29 c2                	sub    %eax,%edx
f0101410:	89 d0                	mov    %edx,%eax
f0101412:	89 45 8c             	mov    %eax,-0x74(%ebp)
					for (int var = 0; var < TotalLen; ++var) {
f0101415:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010141c:	eb 1d                	jmp    f010143b <command_prompt_readline+0x2e3>
						temp[it_str++] = buf[var];
f010141e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101421:	8d 50 01             	lea    0x1(%eax),%edx
f0101424:	89 55 dc             	mov    %edx,-0x24(%ebp)
f0101427:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f010142a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010142d:	01 ca                	add    %ecx,%edx
f010142f:	8a 12                	mov    (%edx),%dl
f0101431:	88 94 05 70 fb ff ff 	mov    %dl,-0x490(%ebp,%eax,1)
					{
						is_run_cmd = 1;
					}
					char temp[1024] = "";
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
					for (int var = 0; var < TotalLen; ++var) {
f0101438:	ff 45 d8             	incl   -0x28(%ebp)
f010143b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010143e:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f0101441:	7c db                	jl     f010141e <command_prompt_readline+0x2c6>
						temp[it_str++] = buf[var];
					}
					strcpy(buf, temp);   //buf contains all arguments except the last one
f0101443:	83 ec 08             	sub    $0x8,%esp
f0101446:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f010144c:	50                   	push   %eax
f010144d:	ff 75 0c             	pushl  0xc(%ebp)
f0101450:	e8 32 10 02 00       	call   f0122487 <strcpy>
f0101455:	83 c4 10             	add    $0x10,%esp
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
f0101458:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010145e:	48                   	dec    %eax
f010145f:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f0101466:	83 ec 08             	sub    $0x8,%esp
f0101469:	50                   	push   %eax
f010146a:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101470:	50                   	push   %eax
f0101471:	e8 11 10 02 00       	call   f0122487 <strcpy>
f0101476:	83 c4 10             	add    $0x10,%esp
				}
				int it_prefix_list = 0;
f0101479:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
				if(number_of_arguments == 1)
f0101480:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101486:	83 f8 01             	cmp    $0x1,%eax
f0101489:	0f 85 30 01 00 00    	jne    f01015bf <command_prompt_readline+0x467>
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f010148f:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0101496:	e9 0f 01 00 00       	jmp    f01015aa <command_prompt_readline+0x452>
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
f010149b:	83 ec 0c             	sub    $0xc,%esp
f010149e:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01014a4:	50                   	push   %eax
f01014a5:	e8 8e 0f 02 00       	call   f0122438 <strlen>
f01014aa:	83 c4 10             	add    $0x10,%esp
f01014ad:	89 c1                	mov    %eax,%ecx
f01014af:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01014b2:	89 d0                	mov    %edx,%eax
f01014b4:	01 c0                	add    %eax,%eax
f01014b6:	01 d0                	add    %edx,%eax
f01014b8:	c1 e0 03             	shl    $0x3,%eax
f01014bb:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f01014c0:	8b 00                	mov    (%eax),%eax
f01014c2:	83 ec 04             	sub    $0x4,%esp
f01014c5:	51                   	push   %ecx
f01014c6:	50                   	push   %eax
f01014c7:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01014cd:	50                   	push   %eax
f01014ce:	e8 a9 10 02 00       	call   f012257c <strncmp>
f01014d3:	83 c4 10             	add    $0x10,%esp
f01014d6:	89 45 88             	mov    %eax,-0x78(%ebp)
						if (x == 0) {
f01014d9:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
f01014dd:	0f 85 c4 00 00 00    	jne    f01015a7 <command_prompt_readline+0x44f>
							it_str = -1;
f01014e3:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
							char string[1024] = "";
f01014ea:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01014f1:	00 00 00 
f01014f4:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01014fa:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01014ff:	b8 00 00 00 00       	mov    $0x0,%eax
f0101504:	89 d7                	mov    %edx,%edi
f0101506:	f3 ab                	rep stos %eax,%es:(%edi)
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f0101508:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010150f:	eb 2d                	jmp    f010153e <command_prompt_readline+0x3e6>
								string[++it_str] = commands[var].name[var3];
f0101511:	ff 45 dc             	incl   -0x24(%ebp)
f0101514:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101517:	89 d0                	mov    %edx,%eax
f0101519:	01 c0                	add    %eax,%eax
f010151b:	01 d0                	add    %edx,%eax
f010151d:	c1 e0 03             	shl    $0x3,%eax
f0101520:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f0101525:	8b 10                	mov    (%eax),%edx
f0101527:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010152a:	01 d0                	add    %edx,%eax
f010152c:	8a 00                	mov    (%eax),%al
f010152e:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101534:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0101537:	01 ca                	add    %ecx,%edx
f0101539:	88 02                	mov    %al,(%edx)
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f010153b:	ff 45 cc             	incl   -0x34(%ebp)
f010153e:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101541:	89 d0                	mov    %edx,%eax
f0101543:	01 c0                	add    %eax,%eax
f0101545:	01 d0                	add    %edx,%eax
f0101547:	c1 e0 03             	shl    $0x3,%eax
f010154a:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f010154f:	8b 00                	mov    (%eax),%eax
f0101551:	83 ec 0c             	sub    $0xc,%esp
f0101554:	50                   	push   %eax
f0101555:	e8 de 0e 02 00       	call   f0122438 <strlen>
f010155a:	83 c4 10             	add    $0x10,%esp
f010155d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0101560:	7f af                	jg     f0101511 <command_prompt_readline+0x3b9>
								string[++it_str] = commands[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f0101562:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101565:	c1 e0 0a             	shl    $0xa,%eax
f0101568:	05 40 1c 5a f0       	add    $0xf05a1c40,%eax
f010156d:	83 ec 04             	sub    $0x4,%esp
f0101570:	68 00 04 00 00       	push   $0x400
f0101575:	6a 00                	push   $0x0
f0101577:	50                   	push   %eax
f0101578:	e8 a9 10 02 00       	call   f0122626 <memset>
f010157d:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f0101580:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101583:	40                   	inc    %eax
f0101584:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0101587:	c1 e2 0a             	shl    $0xa,%edx
f010158a:	81 c2 40 1c 5a f0    	add    $0xf05a1c40,%edx
f0101590:	83 ec 04             	sub    $0x4,%esp
f0101593:	50                   	push   %eax
f0101594:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f010159a:	50                   	push   %eax
f010159b:	52                   	push   %edx
f010159c:	e8 14 0f 02 00       	call   f01224b5 <strncpy>
f01015a1:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f01015a4:	ff 45 d4             	incl   -0x2c(%ebp)
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
				}
				int it_prefix_list = 0;
				if(number_of_arguments == 1)
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f01015a7:	ff 45 d0             	incl   -0x30(%ebp)
f01015aa:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01015ad:	a1 48 d9 17 f0       	mov    0xf017d948,%eax
f01015b2:	39 c2                	cmp    %eax,%edx
f01015b4:	0f 82 e1 fe ff ff    	jb     f010149b <command_prompt_readline+0x343>
f01015ba:	e9 fe 02 00 00       	jmp    f01018bd <command_prompt_readline+0x765>
						}
					}
				}
				else
				{
					if(is_run_cmd)
f01015bf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01015c3:	0f 84 7b 01 00 00    	je     f0101744 <command_prompt_readline+0x5ec>
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f01015c9:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f01015d0:	e9 5c 01 00 00       	jmp    f0101731 <command_prompt_readline+0x5d9>
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
f01015d5:	83 ec 0c             	sub    $0xc,%esp
f01015d8:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01015de:	50                   	push   %eax
f01015df:	e8 54 0e 02 00       	call   f0122438 <strlen>
f01015e4:	83 c4 10             	add    $0x10,%esp
f01015e7:	89 c1                	mov    %eax,%ecx
f01015e9:	8b 1d e0 dc 17 f0    	mov    0xf017dce0,%ebx
f01015ef:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01015f2:	89 d0                	mov    %edx,%eax
f01015f4:	01 c0                	add    %eax,%eax
f01015f6:	01 d0                	add    %edx,%eax
f01015f8:	c1 e0 02             	shl    $0x2,%eax
f01015fb:	01 d8                	add    %ebx,%eax
f01015fd:	8b 00                	mov    (%eax),%eax
f01015ff:	83 ec 04             	sub    $0x4,%esp
f0101602:	51                   	push   %ecx
f0101603:	50                   	push   %eax
f0101604:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010160a:	50                   	push   %eax
f010160b:	e8 6c 0f 02 00       	call   f012257c <strncmp>
f0101610:	83 c4 10             	add    $0x10,%esp
f0101613:	89 45 84             	mov    %eax,-0x7c(%ebp)
							if (x == 0) {
f0101616:	83 7d 84 00          	cmpl   $0x0,-0x7c(%ebp)
f010161a:	0f 85 0e 01 00 00    	jne    f010172e <command_prompt_readline+0x5d6>
								it_str = -1;
f0101620:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f0101627:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f010162e:	00 00 00 
f0101631:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f0101637:	b9 ff 00 00 00       	mov    $0xff,%ecx
f010163c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101641:	89 d7                	mov    %edx,%edi
f0101643:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f0101645:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010164b:	83 f8 01             	cmp    $0x1,%eax
f010164e:	7e 39                	jle    f0101689 <command_prompt_readline+0x531>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f0101650:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0101657:	eb 1d                	jmp    f0101676 <command_prompt_readline+0x51e>
										string[++it_str] = buf[var2];
f0101659:	ff 45 dc             	incl   -0x24(%ebp)
f010165c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010165f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101662:	01 d0                	add    %edx,%eax
f0101664:	8a 00                	mov    (%eax),%al
f0101666:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f010166c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010166f:	01 ca                	add    %ecx,%edx
f0101671:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f0101673:	ff 45 c4             	incl   -0x3c(%ebp)
f0101676:	83 ec 0c             	sub    $0xc,%esp
f0101679:	ff 75 0c             	pushl  0xc(%ebp)
f010167c:	e8 b7 0d 02 00       	call   f0122438 <strlen>
f0101681:	83 c4 10             	add    $0x10,%esp
f0101684:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0101687:	7f d0                	jg     f0101659 <command_prompt_readline+0x501>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f0101689:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0101690:	eb 30                	jmp    f01016c2 <command_prompt_readline+0x56a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
f0101692:	ff 45 dc             	incl   -0x24(%ebp)
f0101695:	8b 0d e0 dc 17 f0    	mov    0xf017dce0,%ecx
f010169b:	8b 55 c8             	mov    -0x38(%ebp),%edx
f010169e:	89 d0                	mov    %edx,%eax
f01016a0:	01 c0                	add    %eax,%eax
f01016a2:	01 d0                	add    %edx,%eax
f01016a4:	c1 e0 02             	shl    $0x2,%eax
f01016a7:	01 c8                	add    %ecx,%eax
f01016a9:	8b 10                	mov    (%eax),%edx
f01016ab:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01016ae:	01 d0                	add    %edx,%eax
f01016b0:	8a 00                	mov    (%eax),%al
f01016b2:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01016b8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01016bb:	01 ca                	add    %ecx,%edx
f01016bd:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f01016bf:	ff 45 c0             	incl   -0x40(%ebp)
f01016c2:	8b 0d e0 dc 17 f0    	mov    0xf017dce0,%ecx
f01016c8:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01016cb:	89 d0                	mov    %edx,%eax
f01016cd:	01 c0                	add    %eax,%eax
f01016cf:	01 d0                	add    %edx,%eax
f01016d1:	c1 e0 02             	shl    $0x2,%eax
f01016d4:	01 c8                	add    %ecx,%eax
f01016d6:	8b 00                	mov    (%eax),%eax
f01016d8:	83 ec 0c             	sub    $0xc,%esp
f01016db:	50                   	push   %eax
f01016dc:	e8 57 0d 02 00       	call   f0122438 <strlen>
f01016e1:	83 c4 10             	add    $0x10,%esp
f01016e4:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01016e7:	7f a9                	jg     f0101692 <command_prompt_readline+0x53a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f01016e9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01016ec:	c1 e0 0a             	shl    $0xa,%eax
f01016ef:	05 40 1c 5a f0       	add    $0xf05a1c40,%eax
f01016f4:	83 ec 04             	sub    $0x4,%esp
f01016f7:	68 00 04 00 00       	push   $0x400
f01016fc:	6a 00                	push   $0x0
f01016fe:	50                   	push   %eax
f01016ff:	e8 22 0f 02 00       	call   f0122626 <memset>
f0101704:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f0101707:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010170a:	40                   	inc    %eax
f010170b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010170e:	c1 e2 0a             	shl    $0xa,%edx
f0101711:	81 c2 40 1c 5a f0    	add    $0xf05a1c40,%edx
f0101717:	83 ec 04             	sub    $0x4,%esp
f010171a:	50                   	push   %eax
f010171b:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101721:	50                   	push   %eax
f0101722:	52                   	push   %edx
f0101723:	e8 8d 0d 02 00       	call   f01224b5 <strncpy>
f0101728:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f010172b:	ff 45 d4             	incl   -0x2c(%ebp)
				}
				else
				{
					if(is_run_cmd)
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f010172e:	ff 45 c8             	incl   -0x38(%ebp)
f0101731:	a1 e4 dc 17 f0       	mov    0xf017dce4,%eax
f0101736:	39 45 c8             	cmp    %eax,-0x38(%ebp)
f0101739:	0f 8c 96 fe ff ff    	jl     f01015d5 <command_prompt_readline+0x47d>
f010173f:	e9 79 01 00 00       	jmp    f01018bd <command_prompt_readline+0x765>
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
								it_prefix_list++;
							}
						}
					}
					else if(is_tst_cmd)
f0101744:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0101748:	0f 84 6f 01 00 00    	je     f01018bd <command_prompt_readline+0x765>
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f010174e:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0101755:	e9 53 01 00 00       	jmp    f01018ad <command_prompt_readline+0x755>
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
f010175a:	83 ec 0c             	sub    $0xc,%esp
f010175d:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101763:	50                   	push   %eax
f0101764:	e8 cf 0c 02 00       	call   f0122438 <strlen>
f0101769:	83 c4 10             	add    $0x10,%esp
f010176c:	89 c1                	mov    %eax,%ecx
f010176e:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0101771:	89 d0                	mov    %edx,%eax
f0101773:	01 c0                	add    %eax,%eax
f0101775:	01 d0                	add    %edx,%eax
f0101777:	c1 e0 02             	shl    $0x2,%eax
f010177a:	05 00 dd 17 f0       	add    $0xf017dd00,%eax
f010177f:	8b 00                	mov    (%eax),%eax
f0101781:	83 ec 04             	sub    $0x4,%esp
f0101784:	51                   	push   %ecx
f0101785:	50                   	push   %eax
f0101786:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010178c:	50                   	push   %eax
f010178d:	e8 ea 0d 02 00       	call   f012257c <strncmp>
f0101792:	83 c4 10             	add    $0x10,%esp
f0101795:	89 45 80             	mov    %eax,-0x80(%ebp)
							if (x == 0) {
f0101798:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f010179c:	0f 85 08 01 00 00    	jne    f01018aa <command_prompt_readline+0x752>
								it_str = -1;
f01017a2:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f01017a9:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01017b0:	00 00 00 
f01017b3:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01017b9:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01017be:	b8 00 00 00 00       	mov    $0x0,%eax
f01017c3:	89 d7                	mov    %edx,%edi
f01017c5:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f01017c7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01017cd:	83 f8 01             	cmp    $0x1,%eax
f01017d0:	7e 39                	jle    f010180b <command_prompt_readline+0x6b3>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01017d2:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f01017d9:	eb 1d                	jmp    f01017f8 <command_prompt_readline+0x6a0>
										string[++it_str] = buf[var2];
f01017db:	ff 45 dc             	incl   -0x24(%ebp)
f01017de:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01017e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017e4:	01 d0                	add    %edx,%eax
f01017e6:	8a 00                	mov    (%eax),%al
f01017e8:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01017ee:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01017f1:	01 ca                	add    %ecx,%edx
f01017f3:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01017f5:	ff 45 b8             	incl   -0x48(%ebp)
f01017f8:	83 ec 0c             	sub    $0xc,%esp
f01017fb:	ff 75 0c             	pushl  0xc(%ebp)
f01017fe:	e8 35 0c 02 00       	call   f0122438 <strlen>
f0101803:	83 c4 10             	add    $0x10,%esp
f0101806:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0101809:	7f d0                	jg     f01017db <command_prompt_readline+0x683>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f010180b:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
f0101812:	eb 2d                	jmp    f0101841 <command_prompt_readline+0x6e9>
									string[++it_str] = tests[var].name[var3];
f0101814:	ff 45 dc             	incl   -0x24(%ebp)
f0101817:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010181a:	89 d0                	mov    %edx,%eax
f010181c:	01 c0                	add    %eax,%eax
f010181e:	01 d0                	add    %edx,%eax
f0101820:	c1 e0 02             	shl    $0x2,%eax
f0101823:	05 00 dd 17 f0       	add    $0xf017dd00,%eax
f0101828:	8b 10                	mov    (%eax),%edx
f010182a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010182d:	01 d0                	add    %edx,%eax
f010182f:	8a 00                	mov    (%eax),%al
f0101831:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101837:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010183a:	01 ca                	add    %ecx,%edx
f010183c:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f010183e:	ff 45 b4             	incl   -0x4c(%ebp)
f0101841:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0101844:	89 d0                	mov    %edx,%eax
f0101846:	01 c0                	add    %eax,%eax
f0101848:	01 d0                	add    %edx,%eax
f010184a:	c1 e0 02             	shl    $0x2,%eax
f010184d:	05 00 dd 17 f0       	add    $0xf017dd00,%eax
f0101852:	8b 00                	mov    (%eax),%eax
f0101854:	83 ec 0c             	sub    $0xc,%esp
f0101857:	50                   	push   %eax
f0101858:	e8 db 0b 02 00       	call   f0122438 <strlen>
f010185d:	83 c4 10             	add    $0x10,%esp
f0101860:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0101863:	7f af                	jg     f0101814 <command_prompt_readline+0x6bc>
									string[++it_str] = tests[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f0101865:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101868:	c1 e0 0a             	shl    $0xa,%eax
f010186b:	05 40 1c 5a f0       	add    $0xf05a1c40,%eax
f0101870:	83 ec 04             	sub    $0x4,%esp
f0101873:	68 00 04 00 00       	push   $0x400
f0101878:	6a 00                	push   $0x0
f010187a:	50                   	push   %eax
f010187b:	e8 a6 0d 02 00       	call   f0122626 <memset>
f0101880:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f0101883:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101886:	40                   	inc    %eax
f0101887:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010188a:	c1 e2 0a             	shl    $0xa,%edx
f010188d:	81 c2 40 1c 5a f0    	add    $0xf05a1c40,%edx
f0101893:	83 ec 04             	sub    $0x4,%esp
f0101896:	50                   	push   %eax
f0101897:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f010189d:	50                   	push   %eax
f010189e:	52                   	push   %edx
f010189f:	e8 11 0c 02 00       	call   f01224b5 <strncpy>
f01018a4:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f01018a7:	ff 45 d4             	incl   -0x2c(%ebp)
							}
						}
					}
					else if(is_tst_cmd)
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f01018aa:	ff 45 bc             	incl   -0x44(%ebp)
f01018ad:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01018b0:	a1 b4 dd 17 f0       	mov    0xf017ddb4,%eax
f01018b5:	39 c2                	cmp    %eax,%edx
f01018b7:	0f 82 9d fe ff ff    	jb     f010175a <command_prompt_readline+0x602>
								it_prefix_list++;
							}
						}
					}
				}
				prefix_list_size = it_prefix_list;
f01018bd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01018c0:	89 45 ec             	mov    %eax,-0x14(%ebp)
				if (it_prefix_list) {
f01018c3:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01018c7:	0f 84 a6 03 00 00    	je     f0101c73 <command_prompt_readline+0xb1b>
					prefix_list_idx = it_str = 0;
f01018cd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01018d4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01018d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01018da:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
f01018e1:	eb 1f                	jmp    f0101902 <command_prompt_readline+0x7aa>
						buf[it_str++] = PrefixList[0][var2];}
f01018e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01018e6:	8d 50 01             	lea    0x1(%eax),%edx
f01018e9:	89 55 dc             	mov    %edx,-0x24(%ebp)
f01018ec:	89 c2                	mov    %eax,%edx
f01018ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018f1:	01 c2                	add    %eax,%edx
f01018f3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01018f6:	05 40 1c 5a f0       	add    $0xf05a1c40,%eax
f01018fb:	8a 00                	mov    (%eax),%al
f01018fd:	88 02                	mov    %al,(%edx)
					}
				}
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01018ff:	ff 45 b0             	incl   -0x50(%ebp)
f0101902:	83 ec 0c             	sub    $0xc,%esp
f0101905:	68 40 1c 5a f0       	push   $0xf05a1c40
f010190a:	e8 29 0b 02 00       	call   f0122438 <strlen>
f010190f:	83 c4 10             	add    $0x10,%esp
f0101912:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0101915:	7f cc                	jg     f01018e3 <command_prompt_readline+0x78b>
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f0101917:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
f010191e:	eb 10                	jmp    f0101930 <command_prompt_readline+0x7d8>
						cputchar('\b');}
f0101920:	83 ec 0c             	sub    $0xc,%esp
f0101923:	6a 08                	push   $0x8
f0101925:	e8 1f f5 ff ff       	call   f0100e49 <cputchar>
f010192a:	83 c4 10             	add    $0x10,%esp
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f010192d:	ff 45 ac             	incl   -0x54(%ebp)
f0101930:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0101933:	3b 45 90             	cmp    -0x70(%ebp),%eax
f0101936:	7c e8                	jl     f0101920 <command_prompt_readline+0x7c8>
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f0101938:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
f010193f:	eb 1c                	jmp    f010195d <command_prompt_readline+0x805>
						cputchar(buf[j]);}
f0101941:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0101944:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101947:	01 d0                	add    %edx,%eax
f0101949:	8a 00                	mov    (%eax),%al
f010194b:	0f be c0             	movsbl %al,%eax
f010194e:	83 ec 0c             	sub    $0xc,%esp
f0101951:	50                   	push   %eax
f0101952:	e8 f2 f4 ff ff       	call   f0100e49 <cputchar>
f0101957:	83 c4 10             	add    $0x10,%esp
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f010195a:	ff 45 a8             	incl   -0x58(%ebp)
f010195d:	83 ec 0c             	sub    $0xc,%esp
f0101960:	ff 75 0c             	pushl  0xc(%ebp)
f0101963:	e8 d0 0a 02 00       	call   f0122438 <strlen>
f0101968:	83 c4 10             	add    $0x10,%esp
f010196b:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010196e:	7f d1                	jg     f0101941 <command_prompt_readline+0x7e9>
						cputchar(buf[j]);}
					i = lastIndex = strlen(buf);
f0101970:	83 ec 0c             	sub    $0xc,%esp
f0101973:	ff 75 0c             	pushl  0xc(%ebp)
f0101976:	e8 bd 0a 02 00       	call   f0122438 <strlen>
f010197b:	83 c4 10             	add    $0x10,%esp
f010197e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0101984:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010198a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0101990:	e9 de 02 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
				}
			}
			else {
				if (prefix_list_size > 0) {	int prev = prefix_list_idx;
f0101995:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0101999:	0f 8e d4 02 00 00    	jle    f0101c73 <command_prompt_readline+0xb1b>
f010199f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01019a2:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
				prefix_list_idx = (prefix_list_idx + 1) % prefix_list_size;
f01019a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01019ab:	40                   	inc    %eax
f01019ac:	99                   	cltd   
f01019ad:	f7 7d ec             	idivl  -0x14(%ebp)
f01019b0:	89 55 f0             	mov    %edx,-0x10(%ebp)
				RoundAutoCompleteCommandWithTheSamePrefix(strlen(PrefixList[prev]), PrefixList[prefix_list_idx], buf, &i, &lastIndex);
f01019b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01019b6:	c1 e0 0a             	shl    $0xa,%eax
f01019b9:	8d 98 40 1c 5a f0    	lea    -0xfa5e3c0(%eax),%ebx
f01019bf:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01019c5:	c1 e0 0a             	shl    $0xa,%eax
f01019c8:	05 40 1c 5a f0       	add    $0xf05a1c40,%eax
f01019cd:	83 ec 0c             	sub    $0xc,%esp
f01019d0:	50                   	push   %eax
f01019d1:	e8 62 0a 02 00       	call   f0122438 <strlen>
f01019d6:	83 c4 10             	add    $0x10,%esp
f01019d9:	83 ec 0c             	sub    $0xc,%esp
f01019dc:	8d 95 74 ff ff ff    	lea    -0x8c(%ebp),%edx
f01019e2:	52                   	push   %edx
f01019e3:	8d 95 78 ff ff ff    	lea    -0x88(%ebp),%edx
f01019e9:	52                   	push   %edx
f01019ea:	ff 75 0c             	pushl  0xc(%ebp)
f01019ed:	53                   	push   %ebx
f01019ee:	50                   	push   %eax
f01019ef:	e8 75 f6 ff ff       	call   f0101069 <RoundAutoCompleteCommandWithTheSamePrefix>
f01019f4:	83 c4 20             	add    $0x20,%esp
f01019f7:	e9 77 02 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
				}
			}
		}

		else if (c == 228) { // left arrow
f01019fc:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f0101a03:	75 2e                	jne    f0101a33 <command_prompt_readline+0x8db>
			if (i > 0) {
f0101a05:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a0b:	85 c0                	test   %eax,%eax
f0101a0d:	0f 8e 60 02 00 00    	jle    f0101c73 <command_prompt_readline+0xb1b>
				i--;
f0101a13:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a19:	48                   	dec    %eax
f0101a1a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f0101a20:	83 ec 0c             	sub    $0xc,%esp
f0101a23:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a26:	e8 1e f4 ff ff       	call   f0100e49 <cputchar>
f0101a2b:	83 c4 10             	add    $0x10,%esp
f0101a2e:	e9 40 02 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
			}
		} else if (c == 229) { // right arrow
f0101a33:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f0101a3a:	75 34                	jne    f0101a70 <command_prompt_readline+0x918>
			if (i < lastIndex) {
f0101a3c:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f0101a42:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101a48:	39 c2                	cmp    %eax,%edx
f0101a4a:	0f 8d 23 02 00 00    	jge    f0101c73 <command_prompt_readline+0xb1b>
				i++;
f0101a50:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a56:	40                   	inc    %eax
f0101a57:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f0101a5d:	83 ec 0c             	sub    $0xc,%esp
f0101a60:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a63:	e8 e1 f3 ff ff       	call   f0100e49 <cputchar>
f0101a68:	83 c4 10             	add    $0x10,%esp
f0101a6b:	e9 03 02 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
f0101a70:	81 7d 94 e9 00 00 00 	cmpl   $0xe9,-0x6c(%ebp)
f0101a77:	75 4c                	jne    f0101ac5 <command_prompt_readline+0x96d>
f0101a79:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a7f:	85 c0                	test   %eax,%eax
f0101a81:	7e 42                	jle    f0101ac5 <command_prompt_readline+0x96d>
			for (int var = i; var <= lastIndex; ++var) {
f0101a83:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a89:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0101a8c:	eb 1a                	jmp    f0101aa8 <command_prompt_readline+0x950>
				buf[var] = buf[var + 1];
f0101a8e:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0101a91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a94:	01 c2                	add    %eax,%edx
f0101a96:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0101a99:	8d 48 01             	lea    0x1(%eax),%ecx
f0101a9c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a9f:	01 c8                	add    %ecx,%eax
f0101aa1:	8a 00                	mov    (%eax),%al
f0101aa3:	88 02                	mov    %al,(%edx)
				i++;
				cputchar(c);
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
			for (int var = i; var <= lastIndex; ++var) {
f0101aa5:	ff 45 a4             	incl   -0x5c(%ebp)
f0101aa8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101aae:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
f0101ab1:	7e db                	jle    f0101a8e <command_prompt_readline+0x936>
				buf[var] = buf[var + 1];
			}
			lastIndex--;
f0101ab3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101ab9:	48                   	dec    %eax
f0101aba:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0101ac0:	e9 ae 01 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
		}
		else if (c >= ' ' && i < BUFLEN - 1 && c != 229 && c != 228) {
f0101ac5:	83 7d 94 1f          	cmpl   $0x1f,-0x6c(%ebp)
f0101ac9:	7e 60                	jle    f0101b2b <command_prompt_readline+0x9d3>
f0101acb:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101ad1:	3d fe 03 00 00       	cmp    $0x3fe,%eax
f0101ad6:	7f 53                	jg     f0101b2b <command_prompt_readline+0x9d3>
f0101ad8:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f0101adf:	74 4a                	je     f0101b2b <command_prompt_readline+0x9d3>
f0101ae1:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f0101ae8:	74 41                	je     f0101b2b <command_prompt_readline+0x9d3>
			if (echoing)
f0101aea:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101aee:	74 0e                	je     f0101afe <command_prompt_readline+0x9a6>
				cputchar(c);
f0101af0:	83 ec 0c             	sub    $0xc,%esp
f0101af3:	ff 75 94             	pushl  -0x6c(%ebp)
f0101af6:	e8 4e f3 ff ff       	call   f0100e49 <cputchar>
f0101afb:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0101afe:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101b04:	8d 50 01             	lea    0x1(%eax),%edx
f0101b07:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
f0101b0d:	89 c2                	mov    %eax,%edx
f0101b0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b12:	01 d0                	add    %edx,%eax
f0101b14:	8b 55 94             	mov    -0x6c(%ebp),%edx
f0101b17:	88 10                	mov    %dl,(%eax)
			lastIndex++;
f0101b19:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101b1f:	40                   	inc    %eax
f0101b20:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0101b26:	e9 48 01 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
		} else if (c == '\b' && i > 0) {
f0101b2b:	83 7d 94 08          	cmpl   $0x8,-0x6c(%ebp)
f0101b2f:	75 60                	jne    f0101b91 <command_prompt_readline+0xa39>
f0101b31:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101b37:	85 c0                	test   %eax,%eax
f0101b39:	7e 56                	jle    f0101b91 <command_prompt_readline+0xa39>

			if (echoing)
f0101b3b:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101b3f:	74 0e                	je     f0101b4f <command_prompt_readline+0x9f7>
				cputchar(c);
f0101b41:	83 ec 0c             	sub    $0xc,%esp
f0101b44:	ff 75 94             	pushl  -0x6c(%ebp)
f0101b47:	e8 fd f2 ff ff       	call   f0100e49 <cputchar>
f0101b4c:	83 c4 10             	add    $0x10,%esp
			for (int var = i; var <= i; ++var) {
f0101b4f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101b55:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0101b58:	eb 1a                	jmp    f0101b74 <command_prompt_readline+0xa1c>
				buf[var - 1] = buf[var];
f0101b5a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0101b5d:	8d 50 ff             	lea    -0x1(%eax),%edx
f0101b60:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b63:	01 c2                	add    %eax,%edx
f0101b65:	8b 4d a0             	mov    -0x60(%ebp),%ecx
f0101b68:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b6b:	01 c8                	add    %ecx,%eax
f0101b6d:	8a 00                	mov    (%eax),%al
f0101b6f:	88 02                	mov    %al,(%edx)
			lastIndex++;
		} else if (c == '\b' && i > 0) {

			if (echoing)
				cputchar(c);
			for (int var = i; var <= i; ++var) {
f0101b71:	ff 45 a0             	incl   -0x60(%ebp)
f0101b74:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101b7a:	39 45 a0             	cmp    %eax,-0x60(%ebp)
f0101b7d:	7e db                	jle    f0101b5a <command_prompt_readline+0xa02>
				buf[var - 1] = buf[var];
			}
			i--;
f0101b7f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101b85:	48                   	dec    %eax
f0101b86:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0101b8c:	e9 e2 00 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
		} else if (c == '\n' || c == '\r') {
f0101b91:	83 7d 94 0a          	cmpl   $0xa,-0x6c(%ebp)
f0101b95:	74 0a                	je     f0101ba1 <command_prompt_readline+0xa49>
f0101b97:	83 7d 94 0d          	cmpl   $0xd,-0x6c(%ebp)
f0101b9b:	0f 85 d2 00 00 00    	jne    f0101c73 <command_prompt_readline+0xb1b>

			if (echoing)
f0101ba1:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101ba5:	74 0e                	je     f0101bb5 <command_prompt_readline+0xa5d>
				cputchar(c);
f0101ba7:	83 ec 0c             	sub    $0xc,%esp
f0101baa:	ff 75 94             	pushl  -0x6c(%ebp)
f0101bad:	e8 97 f2 ff ff       	call   f0100e49 <cputchar>
f0101bb2:	83 c4 10             	add    $0x10,%esp

			buf[lastIndex] = 0;
f0101bb5:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101bbb:	89 c2                	mov    %eax,%edx
f0101bbd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bc0:	01 d0                	add    %edx,%eax
f0101bc2:	c6 00 00             	movb   $0x0,(%eax)
			if (last_command_idx == HISTORY_MAX) {
f0101bc5:	a1 30 d5 17 f0       	mov    0xf017d530,%eax
f0101bca:	83 f8 13             	cmp    $0x13,%eax
f0101bcd:	75 56                	jne    f0101c25 <command_prompt_readline+0xacd>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101bcf:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
f0101bd6:	eb 2d                	jmp    f0101c05 <command_prompt_readline+0xaad>
					memcpy(command_history[idx], command_history[idx + 1],
f0101bd8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101bdb:	40                   	inc    %eax
f0101bdc:	c1 e0 0a             	shl    $0xa,%eax
f0101bdf:	8d 90 40 ac 5b f0    	lea    -0xfa453c0(%eax),%edx
f0101be5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101be8:	c1 e0 0a             	shl    $0xa,%eax
f0101beb:	05 40 ac 5b f0       	add    $0xf05bac40,%eax
f0101bf0:	83 ec 04             	sub    $0x4,%esp
f0101bf3:	68 00 04 00 00       	push   $0x400
f0101bf8:	52                   	push   %edx
f0101bf9:	50                   	push   %eax
f0101bfa:	e8 57 0a 02 00       	call   f0122656 <memcpy>
f0101bff:	83 c4 10             	add    $0x10,%esp
			if (echoing)
				cputchar(c);

			buf[lastIndex] = 0;
			if (last_command_idx == HISTORY_MAX) {
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101c02:	ff 45 9c             	incl   -0x64(%ebp)
f0101c05:	83 7d 9c 12          	cmpl   $0x12,-0x64(%ebp)
f0101c09:	7e cd                	jle    f0101bd8 <command_prompt_readline+0xa80>
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
f0101c0b:	83 ec 04             	sub    $0x4,%esp
f0101c0e:	68 00 04 00 00       	push   $0x400
f0101c13:	ff 75 0c             	pushl  0xc(%ebp)
f0101c16:	68 40 f8 5b f0       	push   $0xf05bf840
f0101c1b:	e8 36 0a 02 00       	call   f0122656 <memcpy>
f0101c20:	83 c4 10             	add    $0x10,%esp
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101c23:	eb 68                	jmp    f0101c8d <command_prompt_readline+0xb35>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
f0101c25:	a1 30 d5 17 f0       	mov    0xf017d530,%eax
f0101c2a:	c1 e0 0a             	shl    $0xa,%eax
f0101c2d:	05 40 ac 5b f0       	add    $0xf05bac40,%eax
f0101c32:	83 ec 08             	sub    $0x8,%esp
f0101c35:	ff 75 0c             	pushl  0xc(%ebp)
f0101c38:	50                   	push   %eax
f0101c39:	e8 06 09 02 00       	call   f0122544 <strcmp>
f0101c3e:	83 c4 10             	add    $0x10,%esp
f0101c41:	85 c0                	test   %eax,%eax
f0101c43:	74 48                	je     f0101c8d <command_prompt_readline+0xb35>
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
f0101c45:	a1 30 d5 17 f0       	mov    0xf017d530,%eax
f0101c4a:	40                   	inc    %eax
f0101c4b:	a3 30 d5 17 f0       	mov    %eax,0xf017d530
f0101c50:	a1 30 d5 17 f0       	mov    0xf017d530,%eax
f0101c55:	c1 e0 0a             	shl    $0xa,%eax
f0101c58:	05 40 ac 5b f0       	add    $0xf05bac40,%eax
f0101c5d:	83 ec 04             	sub    $0x4,%esp
f0101c60:	68 00 04 00 00       	push   $0x400
f0101c65:	ff 75 0c             	pushl  0xc(%ebp)
f0101c68:	50                   	push   %eax
f0101c69:	e8 e8 09 02 00       	call   f0122656 <memcpy>
f0101c6e:	83 c4 10             	add    $0x10,%esp
			}
			return;
f0101c71:	eb 1a                	jmp    f0101c8d <command_prompt_readline+0xb35>

		}
		last_c = c;
f0101c73:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0101c76:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0101c79:	e9 44 f5 ff ff       	jmp    f01011c2 <command_prompt_readline+0x6a>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f0101c7e:	90                   	nop
f0101c7f:	e9 3e f5 ff ff       	jmp    f01011c2 <command_prompt_readline+0x6a>
				int number_of_arguments = prefix_list_size = 0;
				char temp_buf[1024];
				strcpy(temp_buf, buf);
				int bufLength = strlen(buf);
				if (buf[bufLength - 1] == ' ')
					continue;
f0101c84:	90                   	nop
			}
			return;

		}
		last_c = c;
	}
f0101c85:	e9 38 f5 ff ff       	jmp    f01011c2 <command_prompt_readline+0x6a>
			lastIndex = i;
		if (c < 0) {

			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0101c8a:	90                   	nop
f0101c8b:	eb 01                	jmp    f0101c8e <command_prompt_readline+0xb36>
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101c8d:	90                   	nop

		}
		last_c = c;
	}
}
f0101c8e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101c91:	5b                   	pop    %ebx
f0101c92:	5f                   	pop    %edi
f0101c93:	5d                   	pop    %ebp
f0101c94:	c3                   	ret    

f0101c95 <run_command_prompt>:
// ******************************************************************
// ******************************************************************

extern bool autograde ;
void run_command_prompt()
{
f0101c95:	55                   	push   %ebp
f0101c96:	89 e5                	mov    %esp,%ebp
f0101c98:	57                   	push   %edi
f0101c99:	56                   	push   %esi
f0101c9a:	53                   	push   %ebx
f0101c9b:	81 ec 0c 10 00 00    	sub    $0x100c,%esp
	if (autograde)
f0101ca1:	a1 7c 1b 5a f0       	mov    0xf05a1b7c,%eax
f0101ca6:	85 c0                	test   %eax,%eax
f0101ca8:	0f 84 85 00 00 00    	je     f0101d33 <run_command_prompt+0x9e>
	{
		char cmd1_2[BUFLEN] = "tst bsd_nice 0";
f0101cae:	8d 85 e8 ef ff ff    	lea    -0x1018(%ebp),%eax
f0101cb4:	bb 57 3c 12 f0       	mov    $0xf0123c57,%ebx
f0101cb9:	ba 0f 00 00 00       	mov    $0xf,%edx
f0101cbe:	89 c7                	mov    %eax,%edi
f0101cc0:	89 de                	mov    %ebx,%esi
f0101cc2:	89 d1                	mov    %edx,%ecx
f0101cc4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0101cc6:	8d 95 f7 ef ff ff    	lea    -0x1009(%ebp),%edx
f0101ccc:	b9 f1 03 00 00       	mov    $0x3f1,%ecx
f0101cd1:	b0 00                	mov    $0x0,%al
f0101cd3:	89 d7                	mov    %edx,%edi
f0101cd5:	f3 aa                	rep stos %al,%es:(%edi)
		char cmd2_2[BUFLEN] = "tst bsd_nice 1";
f0101cd7:	8d 85 e8 f3 ff ff    	lea    -0xc18(%ebp),%eax
f0101cdd:	bb 57 40 12 f0       	mov    $0xf0124057,%ebx
f0101ce2:	ba 0f 00 00 00       	mov    $0xf,%edx
f0101ce7:	89 c7                	mov    %eax,%edi
f0101ce9:	89 de                	mov    %ebx,%esi
f0101ceb:	89 d1                	mov    %edx,%ecx
f0101ced:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0101cef:	8d 95 f7 f3 ff ff    	lea    -0xc09(%ebp),%edx
f0101cf5:	b9 f1 03 00 00       	mov    $0x3f1,%ecx
f0101cfa:	b0 00                	mov    $0x0,%al
f0101cfc:	89 d7                	mov    %edx,%edi
f0101cfe:	f3 aa                	rep stos %al,%es:(%edi)
		char cmd3_2[BUFLEN] = "tst bsd_nice 2";
f0101d00:	8d 85 e8 f7 ff ff    	lea    -0x818(%ebp),%eax
f0101d06:	bb 57 44 12 f0       	mov    $0xf0124457,%ebx
f0101d0b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0101d10:	89 c7                	mov    %eax,%edi
f0101d12:	89 de                	mov    %ebx,%esi
f0101d14:	89 d1                	mov    %edx,%ecx
f0101d16:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0101d18:	8d 95 f7 f7 ff ff    	lea    -0x809(%ebp),%edx
f0101d1e:	b9 f1 03 00 00       	mov    $0x3f1,%ecx
f0101d23:	b0 00                	mov    $0x0,%al
f0101d25:	89 d7                	mov    %edx,%edi
f0101d27:	f3 aa                	rep stos %al,%es:(%edi)
		//execute_command(cmd3_2);
		autograde = 0;
f0101d29:	c7 05 7c 1b 5a f0 00 	movl   $0x0,0xf05a1b7c
f0101d30:	00 00 00 
	}
	/*2024*/
	LIST_INIT(&foundCommands);
f0101d33:	c7 05 0c 1b 5a f0 00 	movl   $0x0,0xf05a1b0c
f0101d3a:	00 00 00 
f0101d3d:	c7 05 10 1b 5a f0 00 	movl   $0x0,0xf05a1b10
f0101d44:	00 00 00 
f0101d47:	c7 05 18 1b 5a f0 00 	movl   $0x0,0xf05a1b18
f0101d4e:	00 00 00 
		//readline("FOS> ", command_line);

		// ********** This DosKey supported readline function is a combined implementation from **********
		// ********** 		Mohamed Raafat & Mohamed Yousry, 3rd year students, FCIS, 2017		**********
		// ********** 				Combined, edited and modified by TA\Ghada Hamed				**********
		memset(command_line, 0, sizeof(command_line));
f0101d51:	83 ec 04             	sub    $0x4,%esp
f0101d54:	68 00 04 00 00       	push   $0x400
f0101d59:	6a 00                	push   $0x0
f0101d5b:	8d 85 e8 fb ff ff    	lea    -0x418(%ebp),%eax
f0101d61:	50                   	push   %eax
f0101d62:	e8 bf 08 02 00       	call   f0122626 <memset>
f0101d67:	83 c4 10             	add    $0x10,%esp
		command_prompt_readline("FOS> ", command_line);
f0101d6a:	83 ec 08             	sub    $0x8,%esp
f0101d6d:	8d 85 e8 fb ff ff    	lea    -0x418(%ebp),%eax
f0101d73:	50                   	push   %eax
f0101d74:	68 51 3c 12 f0       	push   $0xf0123c51
f0101d79:	e8 da f3 ff ff       	call   f0101158 <command_prompt_readline>
f0101d7e:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0101d81:	83 ec 0c             	sub    $0xc,%esp
f0101d84:	8d 85 e8 fb ff ff    	lea    -0x418(%ebp),%eax
f0101d8a:	50                   	push   %eax
f0101d8b:	e8 4c 01 00 00       	call   f0101edc <execute_command>
f0101d90:	83 c4 10             	add    $0x10,%esp
f0101d93:	85 c0                	test   %eax,%eax
f0101d95:	78 02                	js     f0101d99 <run_command_prompt+0x104>
				break;
	}
f0101d97:	eb b8                	jmp    f0101d51 <run_command_prompt+0xbc>
		command_prompt_readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0101d99:	90                   	nop
	}
}
f0101d9a:	90                   	nop
f0101d9b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0101d9e:	5b                   	pop    %ebx
f0101d9f:	5e                   	pop    %esi
f0101da0:	5f                   	pop    %edi
f0101da1:	5d                   	pop    %ebp
f0101da2:	c3                   	ret    

f0101da3 <get_into_prompt>:
 * They're placed globally (instead of locally) to avoid clearing them while they're in use [el7 :)]
 */
int m;
char *p ;
void get_into_prompt()
{
f0101da3:	55                   	push   %ebp
f0101da4:	89 e5                	mov    %esp,%ebp
f0101da6:	83 ec 28             	sub    $0x28,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f0101da9:	9c                   	pushf  
f0101daa:	58                   	pop    %eax
f0101dab:	89 45 d8             	mov    %eax,-0x28(%ebp)
        return eflags;
f0101dae:	8b 45 d8             	mov    -0x28(%ebp),%eax
	while (1)
	{
		//disable interrupt if it's already enabled
		if (read_eflags() & FL_IF)
f0101db1:	25 00 02 00 00       	and    $0x200,%eax
f0101db6:	85 c0                	test   %eax,%eax
f0101db8:	74 01                	je     f0101dbb <get_into_prompt+0x18>
 */
//clear interrupt flag
static __inline void
cli(void)
{
	__asm __volatile("cli");
f0101dba:	fa                   	cli    
			cli();

		//Switch to the kernel virtual memory
		switchkvm();
f0101dbb:	e8 49 8c 00 00       	call   f010aa09 <switchkvm>

		//Reset current CPU
		struct cpu *c = mycpu();
f0101dc0:	e8 38 53 00 00       	call   f01070fd <mycpu>
f0101dc5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		c->ncli = 0;
f0101dc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dcb:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f0101dd2:	00 00 00 
		c->intena = 0;
f0101dd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dd8:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
f0101ddf:	00 00 00 
		c->scheduler = NULL;
f0101de2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101de5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
		c->scheduler_status = SCH_STOPPED ;
f0101dec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101def:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f0101df6:	00 00 00 
		c->proc = NULL;
f0101df9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dfc:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f0101e03:	00 00 00 

static __inline uint32
read_esp(void)
{
        uint32 esp;
        __asm __volatile("movl %%esp,%0" : "=r" (esp));
f0101e06:	89 e0                	mov    %esp,%eax
f0101e08:	89 45 dc             	mov    %eax,-0x24(%ebp)
        return esp;
f0101e0b:	8b 45 dc             	mov    -0x24(%ebp),%eax

		//Read current ESP
		uint32 cur_esp = read_esp();
f0101e0e:	89 45 e8             	mov    %eax,-0x18(%ebp)

//		//Make sure it's in the correct stack (i.e. KERN STACK below KERN_BASE)
//		assert(cur_esp < SCHD_KERN_STACK_TOP && cur_esp >= SCHD_KERN_STACK_TOP - KERNEL_STACK_SIZE);

		//Reset ESP to the beginning of the SCHED KERNEL STACK of this CPU before getting into the cmd prmpt
		uint32 cpuStackTop = (uint32)c->stack + KERNEL_STACK_SIZE;
f0101e11:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e14:	8b 40 08             	mov    0x8(%eax),%eax
f0101e17:	05 00 80 00 00       	add    $0x8000,%eax
f0101e1c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		uint32 cpuStackBottom = (uint32)c->stack + PAGE_SIZE/*GUARD Page*/;
f0101e1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e22:	8b 40 08             	mov    0x8(%eax),%eax
f0101e25:	05 00 10 00 00       	add    $0x1000,%eax
f0101e2a:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0101e2d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101e30:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static __inline void
write_esp(uint32 esp)
{
	__asm __volatile("movl %0,%%esp" : : "r" (esp) );
f0101e33:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101e36:	89 c4                	mov    %eax,%esp
		write_esp(cpuStackTop);

		//cprintf("AFTER RESIT = %x ***\n", read_esp());

		//Clear the stack content to avoid any garbage data on it when getting back into prompt
		if (cur_esp < cpuStackTop && cur_esp >= cpuStackBottom)
f0101e38:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101e3b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101e3e:	73 44                	jae    f0101e84 <get_into_prompt+0xe1>
f0101e40:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101e43:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0101e46:	72 3c                	jb     f0101e84 <get_into_prompt+0xe1>
		{
			//memset((char*)cur_esp, 0, SCHD_KERN_STACK_TOP - cur_esp);
			p = (char*)cur_esp;
f0101e48:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101e4b:	a3 20 1c 5a f0       	mov    %eax,0xf05a1c20
			m = cpuStackTop - cur_esp;
f0101e50:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101e53:	2b 45 e8             	sub    -0x18(%ebp),%eax
f0101e56:	a3 40 fc 5b f0       	mov    %eax,0xf05bfc40
			while (--m >= 0)
f0101e5b:	eb 11                	jmp    f0101e6e <get_into_prompt+0xcb>
				*p++ = 0;
f0101e5d:	a1 20 1c 5a f0       	mov    0xf05a1c20,%eax
f0101e62:	8d 50 01             	lea    0x1(%eax),%edx
f0101e65:	89 15 20 1c 5a f0    	mov    %edx,0xf05a1c20
f0101e6b:	c6 00 00             	movb   $0x0,(%eax)
		if (cur_esp < cpuStackTop && cur_esp >= cpuStackBottom)
		{
			//memset((char*)cur_esp, 0, SCHD_KERN_STACK_TOP - cur_esp);
			p = (char*)cur_esp;
			m = cpuStackTop - cur_esp;
			while (--m >= 0)
f0101e6e:	a1 40 fc 5b f0       	mov    0xf05bfc40,%eax
f0101e73:	48                   	dec    %eax
f0101e74:	a3 40 fc 5b f0       	mov    %eax,0xf05bfc40
f0101e79:	a1 40 fc 5b f0       	mov    0xf05bfc40,%eax
f0101e7e:	85 c0                	test   %eax,%eax
f0101e80:	79 db                	jns    f0101e5d <get_into_prompt+0xba>
		write_esp(cpuStackTop);

		//cprintf("AFTER RESIT = %x ***\n", read_esp());

		//Clear the stack content to avoid any garbage data on it when getting back into prompt
		if (cur_esp < cpuStackTop && cur_esp >= cpuStackBottom)
f0101e82:	eb 3a                	jmp    f0101ebe <get_into_prompt+0x11b>
				*p++ = 0;
		}
		else	//clear the ENTIRE SCHED KERN STACK
		{
			//memset((char*)schd_kern_stack_bottom, 0, SCHD_KERN_STACK_TOP - schd_kern_stack_bottom);
			p = (char*)cpuStackBottom;
f0101e84:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101e87:	a3 20 1c 5a f0       	mov    %eax,0xf05a1c20
			m = cpuStackTop - cpuStackBottom;
f0101e8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101e8f:	2b 45 e0             	sub    -0x20(%ebp),%eax
f0101e92:	a3 40 fc 5b f0       	mov    %eax,0xf05bfc40
			while (--m >= 0)
f0101e97:	eb 11                	jmp    f0101eaa <get_into_prompt+0x107>
				*p++ = 0;
f0101e99:	a1 20 1c 5a f0       	mov    0xf05a1c20,%eax
f0101e9e:	8d 50 01             	lea    0x1(%eax),%edx
f0101ea1:	89 15 20 1c 5a f0    	mov    %edx,0xf05a1c20
f0101ea7:	c6 00 00             	movb   $0x0,(%eax)
		else	//clear the ENTIRE SCHED KERN STACK
		{
			//memset((char*)schd_kern_stack_bottom, 0, SCHD_KERN_STACK_TOP - schd_kern_stack_bottom);
			p = (char*)cpuStackBottom;
			m = cpuStackTop - cpuStackBottom;
			while (--m >= 0)
f0101eaa:	a1 40 fc 5b f0       	mov    0xf05bfc40,%eax
f0101eaf:	48                   	dec    %eax
f0101eb0:	a3 40 fc 5b f0       	mov    %eax,0xf05bfc40
f0101eb5:	a1 40 fc 5b f0       	mov    0xf05bfc40,%eax
f0101eba:	85 c0                	test   %eax,%eax
f0101ebc:	79 db                	jns    f0101e99 <get_into_prompt+0xf6>
f0101ebe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
}

static __inline void
write_ebp(uint32 ebp)
{
	__asm __volatile("movl %0,%%ebp" : : "r" (ebp) );
f0101ec5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101ec8:	89 c5                	mov    %eax,%ebp

		//Reset EBP to ZERO so that when calling the run_command_prompt() it pushes ZERO into the stack
		write_ebp(0);

		//Get into the prompt (should NOT return)
		run_command_prompt(NULL);
f0101eca:	83 ec 0c             	sub    $0xc,%esp
f0101ecd:	6a 00                	push   $0x0
f0101ecf:	e8 c1 fd ff ff       	call   f0101c95 <run_command_prompt>
f0101ed4:	83 c4 10             	add    $0x10,%esp
	}
f0101ed7:	e9 cd fe ff ff       	jmp    f0101da9 <get_into_prompt+0x6>

f0101edc <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0101edc:	55                   	push   %ebp
f0101edd:	89 e5                	mov    %esp,%ebp
f0101edf:	83 ec 78             	sub    $0x78,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0101ee2:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101ee5:	50                   	push   %eax
f0101ee6:	8d 45 90             	lea    -0x70(%ebp),%eax
f0101ee9:	50                   	push   %eax
f0101eea:	68 3f 3c 12 f0       	push   $0xf0123c3f
f0101eef:	ff 75 08             	pushl  0x8(%ebp)
f0101ef2:	e8 56 0b 02 00       	call   f0122a4d <strsplit>
f0101ef7:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0101efa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101efd:	85 c0                	test   %eax,%eax
f0101eff:	75 0a                	jne    f0101f0b <execute_command+0x2f>
		return 0;
f0101f01:	b8 00 00 00 00       	mov    $0x0,%eax
f0101f06:	e9 a4 02 00 00       	jmp    f01021af <execute_command+0x2d3>

	int ret = process_command(number_of_arguments, arguments);
f0101f0b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101f0e:	83 ec 08             	sub    $0x8,%esp
f0101f11:	8d 55 90             	lea    -0x70(%ebp),%edx
f0101f14:	52                   	push   %edx
f0101f15:	50                   	push   %eax
f0101f16:	e8 96 02 00 00       	call   f01021b1 <process_command>
f0101f1b:	83 c4 10             	add    $0x10,%esp
f0101f1e:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//cprintf("cmd %s, num of args %d, return %d\n", arguments[0], number_of_arguments, ret);

	if (ret == CMD_INVALID)
f0101f21:	83 7d e0 fd          	cmpl   $0xfffffffd,-0x20(%ebp)
f0101f25:	75 19                	jne    f0101f40 <execute_command+0x64>
	{
		cprintf("Unknown command '%s'\n", arguments[0]);
f0101f27:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101f2a:	83 ec 08             	sub    $0x8,%esp
f0101f2d:	50                   	push   %eax
f0101f2e:	68 57 48 12 f0       	push   $0xf0124857
f0101f33:	e8 34 f0 ff ff       	call   f0100f6c <cprintf>
f0101f38:	83 c4 10             	add    $0x10,%esp
f0101f3b:	e9 6a 02 00 00       	jmp    f01021aa <execute_command+0x2ce>
	}
	else if (ret == CMD_INV_NUM_ARGS)
f0101f40:	83 7d e0 fe          	cmpl   $0xfffffffe,-0x20(%ebp)
f0101f44:	75 4f                	jne    f0101f95 <execute_command+0xb9>
	{
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101f46:	a1 18 1b 5a f0       	mov    0xf05a1b18,%eax
f0101f4b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		if (numOfFoundCmds != 1)
f0101f4e:	83 7d d8 01          	cmpl   $0x1,-0x28(%ebp)
f0101f52:	74 17                	je     f0101f6b <execute_command+0x8f>
		{
			panic("command is found but the list is either empty or contains more than one command!");
f0101f54:	83 ec 04             	sub    $0x4,%esp
f0101f57:	68 70 48 12 f0       	push   $0xf0124870
f0101f5c:	68 8b 01 00 00       	push   $0x18b
f0101f61:	68 c1 48 12 f0       	push   $0xf01248c1
f0101f66:	e8 af e3 ff ff       	call   f010031a <_panic>
		}
		struct Command * cmd = LIST_FIRST(&foundCommands);
f0101f6b:	a1 0c 1b 5a f0       	mov    0xf05a1b0c,%eax
f0101f70:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		cprintf("%s: invalid number of args.\nDescription: %s\n", cmd->name, cmd->description);
f0101f73:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101f76:	8b 50 04             	mov    0x4(%eax),%edx
f0101f79:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101f7c:	8b 00                	mov    (%eax),%eax
f0101f7e:	83 ec 04             	sub    $0x4,%esp
f0101f81:	52                   	push   %edx
f0101f82:	50                   	push   %eax
f0101f83:	68 dc 48 12 f0       	push   $0xf01248dc
f0101f88:	e8 df ef ff ff       	call   f0100f6c <cprintf>
f0101f8d:	83 c4 10             	add    $0x10,%esp
f0101f90:	e9 15 02 00 00       	jmp    f01021aa <execute_command+0x2ce>
	}
	else if (ret == CMD_MATCHED)
f0101f95:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f0101f99:	0f 85 e6 01 00 00    	jne    f0102185 <execute_command+0x2a9>
	{
		int i = 1;
f0101f9f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101fa6:	a1 18 1b 5a f0       	mov    0xf05a1b18,%eax
f0101fab:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if (numOfFoundCmds == 0)
f0101fae:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0101fb2:	75 17                	jne    f0101fcb <execute_command+0xef>
		{
			panic("command is matched but the list is empty!");
f0101fb4:	83 ec 04             	sub    $0x4,%esp
f0101fb7:	68 0c 49 12 f0       	push   $0xf012490c
f0101fbc:	68 96 01 00 00       	push   $0x196
f0101fc1:	68 c1 48 12 f0       	push   $0xf01248c1
f0101fc6:	e8 4f e3 ff ff       	call   f010031a <_panic>
		}
		struct Command * cmd = NULL;
f0101fcb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(cmd, &foundCommands)
f0101fd2:	a1 0c 1b 5a f0       	mov    0xf05a1b0c,%eax
f0101fd7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101fda:	eb 28                	jmp    f0102004 <execute_command+0x128>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
f0101fdc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101fdf:	8b 10                	mov    (%eax),%edx
f0101fe1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101fe4:	8d 48 01             	lea    0x1(%eax),%ecx
f0101fe7:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0101fea:	83 ec 04             	sub    $0x4,%esp
f0101fed:	52                   	push   %edx
f0101fee:	50                   	push   %eax
f0101fef:	68 36 49 12 f0       	push   $0xf0124936
f0101ff4:	e8 73 ef ff ff       	call   f0100f6c <cprintf>
f0101ff9:	83 c4 10             	add    $0x10,%esp
		if (numOfFoundCmds == 0)
		{
			panic("command is matched but the list is empty!");
		}
		struct Command * cmd = NULL;
		LIST_FOREACH(cmd, &foundCommands)
f0101ffc:	a1 14 1b 5a f0       	mov    0xf05a1b14,%eax
f0102001:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0102004:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102008:	74 08                	je     f0102012 <execute_command+0x136>
f010200a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010200d:	8b 40 10             	mov    0x10(%eax),%eax
f0102010:	eb 05                	jmp    f0102017 <execute_command+0x13b>
f0102012:	b8 00 00 00 00       	mov    $0x0,%eax
f0102017:	a3 14 1b 5a f0       	mov    %eax,0xf05a1b14
f010201c:	a1 14 1b 5a f0       	mov    0xf05a1b14,%eax
f0102021:	85 c0                	test   %eax,%eax
f0102023:	75 b7                	jne    f0101fdc <execute_command+0x100>
f0102025:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102029:	75 b1                	jne    f0101fdc <execute_command+0x100>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
f010202b:	83 ec 08             	sub    $0x8,%esp
f010202e:	ff 75 dc             	pushl  -0x24(%ebp)
f0102031:	68 40 49 12 f0       	push   $0xf0124940
f0102036:	e8 31 ef ff ff       	call   f0100f6c <cprintf>
f010203b:	83 c4 10             	add    $0x10,%esp
		char Chose = getchar();
f010203e:	e8 1d ee ff ff       	call   f0100e60 <getchar>
f0102043:	88 45 ef             	mov    %al,-0x11(%ebp)
		cputchar(Chose);
f0102046:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f010204a:	83 ec 0c             	sub    $0xc,%esp
f010204d:	50                   	push   %eax
f010204e:	e8 f6 ed ff ff       	call   f0100e49 <cputchar>
f0102053:	83 c4 10             	add    $0x10,%esp
		int selection = 0;
f0102056:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		while (Chose >= '0' && Chose <= '9')
f010205d:	eb 40                	jmp    f010209f <execute_command+0x1c3>
		{
			selection = selection*10 + (Chose - '0') ;
f010205f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0102062:	89 d0                	mov    %edx,%eax
f0102064:	c1 e0 02             	shl    $0x2,%eax
f0102067:	01 d0                	add    %edx,%eax
f0102069:	01 c0                	add    %eax,%eax
f010206b:	89 c2                	mov    %eax,%edx
f010206d:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0102071:	83 e8 30             	sub    $0x30,%eax
f0102074:	01 d0                	add    %edx,%eax
f0102076:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (selection < 1 || selection > numOfFoundCmds)
f0102079:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010207d:	7e 2c                	jle    f01020ab <execute_command+0x1cf>
f010207f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102082:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0102085:	7f 24                	jg     f01020ab <execute_command+0x1cf>
				break;

			Chose = getchar();
f0102087:	e8 d4 ed ff ff       	call   f0100e60 <getchar>
f010208c:	88 45 ef             	mov    %al,-0x11(%ebp)
			cputchar(Chose);
f010208f:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0102093:	83 ec 0c             	sub    $0xc,%esp
f0102096:	50                   	push   %eax
f0102097:	e8 ad ed ff ff       	call   f0100e49 <cputchar>
f010209c:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
		char Chose = getchar();
		cputchar(Chose);
		int selection = 0;
		while (Chose >= '0' && Chose <= '9')
f010209f:	80 7d ef 2f          	cmpb   $0x2f,-0x11(%ebp)
f01020a3:	7e 06                	jle    f01020ab <execute_command+0x1cf>
f01020a5:	80 7d ef 39          	cmpb   $0x39,-0x11(%ebp)
f01020a9:	7e b4                	jle    f010205f <execute_command+0x183>
				break;

			Chose = getchar();
			cputchar(Chose);
		}
		cputchar('\n');
f01020ab:	83 ec 0c             	sub    $0xc,%esp
f01020ae:	6a 0a                	push   $0xa
f01020b0:	e8 94 ed ff ff       	call   f0100e49 <cputchar>
f01020b5:	83 c4 10             	add    $0x10,%esp
		if (selection >= 1 && selection <= numOfFoundCmds)
f01020b8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01020bc:	0f 8e e8 00 00 00    	jle    f01021aa <execute_command+0x2ce>
f01020c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01020c5:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01020c8:	0f 8f dc 00 00 00    	jg     f01021aa <execute_command+0x2ce>
		{
			int c = 1;
f01020ce:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
			LIST_FOREACH(cmd, &foundCommands)
f01020d5:	a1 0c 1b 5a f0       	mov    0xf05a1b0c,%eax
f01020da:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01020dd:	eb 75                	jmp    f0102154 <execute_command+0x278>
			{
				if (c++ == selection)
f01020df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01020e2:	8d 50 01             	lea    0x1(%eax),%edx
f01020e5:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01020e8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01020eb:	75 5f                	jne    f010214c <execute_command+0x270>
				{
					if (cmd->num_of_args == 0)
f01020ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01020f0:	8b 40 0c             	mov    0xc(%eax),%eax
f01020f3:	85 c0                	test   %eax,%eax
f01020f5:	75 31                	jne    f0102128 <execute_command+0x24c>
					{
						cprintf("FOS> %s\n", cmd->name);
f01020f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01020fa:	8b 00                	mov    (%eax),%eax
f01020fc:	83 ec 08             	sub    $0x8,%esp
f01020ff:	50                   	push   %eax
f0102100:	68 a3 49 12 f0       	push   $0xf01249a3
f0102105:	e8 62 ee ff ff       	call   f0100f6c <cprintf>
f010210a:	83 c4 10             	add    $0x10,%esp
						return cmd->function_to_execute(number_of_arguments, arguments);
f010210d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102110:	8b 40 08             	mov    0x8(%eax),%eax
f0102113:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0102116:	83 ec 08             	sub    $0x8,%esp
f0102119:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f010211c:	51                   	push   %ecx
f010211d:	52                   	push   %edx
f010211e:	ff d0                	call   *%eax
f0102120:	83 c4 10             	add    $0x10,%esp
f0102123:	e9 87 00 00 00       	jmp    f01021af <execute_command+0x2d3>
					}
					else
					{
						cprintf("%s: %s\n", cmd->name, cmd->description);
f0102128:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010212b:	8b 50 04             	mov    0x4(%eax),%edx
f010212e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102131:	8b 00                	mov    (%eax),%eax
f0102133:	83 ec 04             	sub    $0x4,%esp
f0102136:	52                   	push   %edx
f0102137:	50                   	push   %eax
f0102138:	68 ac 49 12 f0       	push   $0xf01249ac
f010213d:	e8 2a ee ff ff       	call   f0100f6c <cprintf>
f0102142:	83 c4 10             	add    $0x10,%esp
						return 0;
f0102145:	b8 00 00 00 00       	mov    $0x0,%eax
f010214a:	eb 63                	jmp    f01021af <execute_command+0x2d3>
		}
		cputchar('\n');
		if (selection >= 1 && selection <= numOfFoundCmds)
		{
			int c = 1;
			LIST_FOREACH(cmd, &foundCommands)
f010214c:	a1 14 1b 5a f0       	mov    0xf05a1b14,%eax
f0102151:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0102154:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102158:	74 08                	je     f0102162 <execute_command+0x286>
f010215a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010215d:	8b 40 10             	mov    0x10(%eax),%eax
f0102160:	eb 05                	jmp    f0102167 <execute_command+0x28b>
f0102162:	b8 00 00 00 00       	mov    $0x0,%eax
f0102167:	a3 14 1b 5a f0       	mov    %eax,0xf05a1b14
f010216c:	a1 14 1b 5a f0       	mov    0xf05a1b14,%eax
f0102171:	85 c0                	test   %eax,%eax
f0102173:	0f 85 66 ff ff ff    	jne    f01020df <execute_command+0x203>
f0102179:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010217d:	0f 85 5c ff ff ff    	jne    f01020df <execute_command+0x203>
f0102183:	eb 25                	jmp    f01021aa <execute_command+0x2ce>
			}
		}
	}
	else
	{
		return commands[ret].function_to_execute(number_of_arguments, arguments);
f0102185:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102188:	89 d0                	mov    %edx,%eax
f010218a:	01 c0                	add    %eax,%eax
f010218c:	01 d0                	add    %edx,%eax
f010218e:	c1 e0 03             	shl    $0x3,%eax
f0102191:	05 48 d5 17 f0       	add    $0xf017d548,%eax
f0102196:	8b 00                	mov    (%eax),%eax
f0102198:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010219b:	83 ec 08             	sub    $0x8,%esp
f010219e:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f01021a1:	51                   	push   %ecx
f01021a2:	52                   	push   %edx
f01021a3:	ff d0                	call   *%eax
f01021a5:	83 c4 10             	add    $0x10,%esp
f01021a8:	eb 05                	jmp    f01021af <execute_command+0x2d3>
	}
	return 0;
f01021aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01021af:	c9                   	leave  
f01021b0:	c3                   	ret    

f01021b1 <process_command>:

// Youssef Mohsen , Youssef Ahmed
int process_command(int number_of_arguments, char** arguments)
{
f01021b1:	55                   	push   %ebp
f01021b2:	89 e5                	mov    %esp,%ebp
f01021b4:	83 ec 28             	sub    $0x28,%esp
    struct Command * element = NULL;
f01021b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    LIST_FOREACH(element, &foundCommands)
f01021be:	a1 0c 1b 5a f0       	mov    0xf05a1b0c,%eax
f01021c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01021c6:	e9 90 00 00 00       	jmp    f010225b <process_command+0xaa>
    {
        LIST_REMOVE(&foundCommands,element);
f01021cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01021cf:	75 17                	jne    f01021e8 <process_command+0x37>
f01021d1:	83 ec 04             	sub    $0x4,%esp
f01021d4:	68 b4 49 12 f0       	push   $0xf01249b4
f01021d9:	68 cd 01 00 00       	push   $0x1cd
f01021de:	68 c1 48 12 f0       	push   $0xf01248c1
f01021e3:	e8 32 e1 ff ff       	call   f010031a <_panic>
f01021e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01021eb:	8b 40 10             	mov    0x10(%eax),%eax
f01021ee:	85 c0                	test   %eax,%eax
f01021f0:	74 11                	je     f0102203 <process_command+0x52>
f01021f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01021f5:	8b 40 10             	mov    0x10(%eax),%eax
f01021f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01021fb:	8b 52 14             	mov    0x14(%edx),%edx
f01021fe:	89 50 14             	mov    %edx,0x14(%eax)
f0102201:	eb 0b                	jmp    f010220e <process_command+0x5d>
f0102203:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102206:	8b 40 14             	mov    0x14(%eax),%eax
f0102209:	a3 10 1b 5a f0       	mov    %eax,0xf05a1b10
f010220e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102211:	8b 40 14             	mov    0x14(%eax),%eax
f0102214:	85 c0                	test   %eax,%eax
f0102216:	74 11                	je     f0102229 <process_command+0x78>
f0102218:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010221b:	8b 40 14             	mov    0x14(%eax),%eax
f010221e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102221:	8b 52 10             	mov    0x10(%edx),%edx
f0102224:	89 50 10             	mov    %edx,0x10(%eax)
f0102227:	eb 0b                	jmp    f0102234 <process_command+0x83>
f0102229:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010222c:	8b 40 10             	mov    0x10(%eax),%eax
f010222f:	a3 0c 1b 5a f0       	mov    %eax,0xf05a1b0c
f0102234:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102237:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010223e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102241:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0102248:	a1 18 1b 5a f0       	mov    0xf05a1b18,%eax
f010224d:	48                   	dec    %eax
f010224e:	a3 18 1b 5a f0       	mov    %eax,0xf05a1b18

// Youssef Mohsen , Youssef Ahmed
int process_command(int number_of_arguments, char** arguments)
{
    struct Command * element = NULL;
    LIST_FOREACH(element, &foundCommands)
f0102253:	a1 14 1b 5a f0       	mov    0xf05a1b14,%eax
f0102258:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010225b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010225f:	74 08                	je     f0102269 <process_command+0xb8>
f0102261:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102264:	8b 40 10             	mov    0x10(%eax),%eax
f0102267:	eb 05                	jmp    f010226e <process_command+0xbd>
f0102269:	b8 00 00 00 00       	mov    $0x0,%eax
f010226e:	a3 14 1b 5a f0       	mov    %eax,0xf05a1b14
f0102273:	a1 14 1b 5a f0       	mov    0xf05a1b14,%eax
f0102278:	85 c0                	test   %eax,%eax
f010227a:	0f 85 4b ff ff ff    	jne    f01021cb <process_command+0x1a>
f0102280:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102284:	0f 85 41 ff ff ff    	jne    f01021cb <process_command+0x1a>
    {
        LIST_REMOVE(&foundCommands,element);
    }
    int x=0;
f010228a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (int i = 0; i < NUM_OF_COMMANDS; i++)
f0102291:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0102298:	e9 42 02 00 00       	jmp    f01024df <process_command+0x32e>
    {
        if (strcmp(arguments[0], commands[i].name) == 0)
f010229d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01022a0:	89 d0                	mov    %edx,%eax
f01022a2:	01 c0                	add    %eax,%eax
f01022a4:	01 d0                	add    %edx,%eax
f01022a6:	c1 e0 03             	shl    $0x3,%eax
f01022a9:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f01022ae:	8b 10                	mov    (%eax),%edx
f01022b0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01022b3:	8b 00                	mov    (%eax),%eax
f01022b5:	83 ec 08             	sub    $0x8,%esp
f01022b8:	52                   	push   %edx
f01022b9:	50                   	push   %eax
f01022ba:	e8 85 02 02 00       	call   f0122544 <strcmp>
f01022bf:	83 c4 10             	add    $0x10,%esp
f01022c2:	85 c0                	test   %eax,%eax
f01022c4:	0f 85 1e 01 00 00    	jne    f01023e8 <process_command+0x237>
        {
            cprintf("%d %d \n",commands[i].num_of_args,number_of_arguments-1);
f01022ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01022cd:	8d 48 ff             	lea    -0x1(%eax),%ecx
f01022d0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01022d3:	89 d0                	mov    %edx,%eax
f01022d5:	01 c0                	add    %eax,%eax
f01022d7:	01 d0                	add    %edx,%eax
f01022d9:	c1 e0 03             	shl    $0x3,%eax
f01022dc:	05 4c d5 17 f0       	add    $0xf017d54c,%eax
f01022e1:	8b 00                	mov    (%eax),%eax
f01022e3:	83 ec 04             	sub    $0x4,%esp
f01022e6:	51                   	push   %ecx
f01022e7:	50                   	push   %eax
f01022e8:	68 d2 49 12 f0       	push   $0xf01249d2
f01022ed:	e8 7a ec ff ff       	call   f0100f6c <cprintf>
f01022f2:	83 c4 10             	add    $0x10,%esp
            if(commands[i].num_of_args != number_of_arguments-1)
f01022f5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01022f8:	89 d0                	mov    %edx,%eax
f01022fa:	01 c0                	add    %eax,%eax
f01022fc:	01 d0                	add    %edx,%eax
f01022fe:	c1 e0 03             	shl    $0x3,%eax
f0102301:	05 4c d5 17 f0       	add    $0xf017d54c,%eax
f0102306:	8b 00                	mov    (%eax),%eax
f0102308:	8b 55 08             	mov    0x8(%ebp),%edx
f010230b:	4a                   	dec    %edx
f010230c:	39 d0                	cmp    %edx,%eax
f010230e:	0f 84 cc 00 00 00    	je     f01023e0 <process_command+0x22f>
            {
                if (commands[i].num_of_args == -1 && number_of_arguments-1 > 0)
f0102314:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0102317:	89 d0                	mov    %edx,%eax
f0102319:	01 c0                	add    %eax,%eax
f010231b:	01 d0                	add    %edx,%eax
f010231d:	c1 e0 03             	shl    $0x3,%eax
f0102320:	05 4c d5 17 f0       	add    $0xf017d54c,%eax
f0102325:	8b 00                	mov    (%eax),%eax
f0102327:	83 f8 ff             	cmp    $0xffffffff,%eax
f010232a:	75 10                	jne    f010233c <process_command+0x18b>
f010232c:	8b 45 08             	mov    0x8(%ebp),%eax
f010232f:	48                   	dec    %eax
f0102330:	85 c0                	test   %eax,%eax
f0102332:	7e 08                	jle    f010233c <process_command+0x18b>
                {
                    return i;
f0102334:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102337:	e9 c5 01 00 00       	jmp    f0102501 <process_command+0x350>
                }
                else
                {
                LIST_INSERT_HEAD(&foundCommands , &commands[i]);
f010233c:	8b 15 0c 1b 5a f0    	mov    0xf05a1b0c,%edx
f0102342:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0102345:	89 c8                	mov    %ecx,%eax
f0102347:	01 c0                	add    %eax,%eax
f0102349:	01 c8                	add    %ecx,%eax
f010234b:	c1 e0 03             	shl    $0x3,%eax
f010234e:	05 50 d5 17 f0       	add    $0xf017d550,%eax
f0102353:	89 10                	mov    %edx,(%eax)
f0102355:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0102358:	89 d0                	mov    %edx,%eax
f010235a:	01 c0                	add    %eax,%eax
f010235c:	01 d0                	add    %edx,%eax
f010235e:	c1 e0 03             	shl    $0x3,%eax
f0102361:	05 50 d5 17 f0       	add    $0xf017d550,%eax
f0102366:	8b 00                	mov    (%eax),%eax
f0102368:	85 c0                	test   %eax,%eax
f010236a:	74 1c                	je     f0102388 <process_command+0x1d7>
f010236c:	8b 15 0c 1b 5a f0    	mov    0xf05a1b0c,%edx
f0102372:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0102375:	89 c8                	mov    %ecx,%eax
f0102377:	01 c0                	add    %eax,%eax
f0102379:	01 c8                	add    %ecx,%eax
f010237b:	c1 e0 03             	shl    $0x3,%eax
f010237e:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f0102383:	89 42 14             	mov    %eax,0x14(%edx)
f0102386:	eb 16                	jmp    f010239e <process_command+0x1ed>
f0102388:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010238b:	89 d0                	mov    %edx,%eax
f010238d:	01 c0                	add    %eax,%eax
f010238f:	01 d0                	add    %edx,%eax
f0102391:	c1 e0 03             	shl    $0x3,%eax
f0102394:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f0102399:	a3 10 1b 5a f0       	mov    %eax,0xf05a1b10
f010239e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01023a1:	89 d0                	mov    %edx,%eax
f01023a3:	01 c0                	add    %eax,%eax
f01023a5:	01 d0                	add    %edx,%eax
f01023a7:	c1 e0 03             	shl    $0x3,%eax
f01023aa:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f01023af:	a3 0c 1b 5a f0       	mov    %eax,0xf05a1b0c
f01023b4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01023b7:	89 d0                	mov    %edx,%eax
f01023b9:	01 c0                	add    %eax,%eax
f01023bb:	01 d0                	add    %edx,%eax
f01023bd:	c1 e0 03             	shl    $0x3,%eax
f01023c0:	05 54 d5 17 f0       	add    $0xf017d554,%eax
f01023c5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01023cb:	a1 18 1b 5a f0       	mov    0xf05a1b18,%eax
f01023d0:	40                   	inc    %eax
f01023d1:	a3 18 1b 5a f0       	mov    %eax,0xf05a1b18
                return CMD_INV_NUM_ARGS;
f01023d6:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f01023db:	e9 21 01 00 00       	jmp    f0102501 <process_command+0x350>
                }
            }
            else
            {
            return i;
f01023e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01023e3:	e9 19 01 00 00       	jmp    f0102501 <process_command+0x350>
            }
        }
        else
        {
            const char* ptr1 = arguments[0];
f01023e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01023eb:	8b 00                	mov    (%eax),%eax
f01023ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
            const char* ptr2 = commands[i].name;
f01023f0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01023f3:	89 d0                	mov    %edx,%eax
f01023f5:	01 c0                	add    %eax,%eax
f01023f7:	01 d0                	add    %edx,%eax
f01023f9:	c1 e0 03             	shl    $0x3,%eax
f01023fc:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f0102401:	8b 00                	mov    (%eax),%eax
f0102403:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            while (*ptr1 != '\0' && *ptr2 != '\0')
f0102406:	eb 14                	jmp    f010241c <process_command+0x26b>
            {
                if (*ptr1 == *ptr2)
f0102408:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010240b:	8a 10                	mov    (%eax),%dl
f010240d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102410:	8a 00                	mov    (%eax),%al
f0102412:	38 c2                	cmp    %al,%dl
f0102414:	75 03                	jne    f0102419 <process_command+0x268>
                {
                    ptr1++;
f0102416:	ff 45 e8             	incl   -0x18(%ebp)
                }
                ptr2++;
f0102419:	ff 45 e4             	incl   -0x1c(%ebp)
        }
        else
        {
            const char* ptr1 = arguments[0];
            const char* ptr2 = commands[i].name;
            while (*ptr1 != '\0' && *ptr2 != '\0')
f010241c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010241f:	8a 00                	mov    (%eax),%al
f0102421:	84 c0                	test   %al,%al
f0102423:	74 09                	je     f010242e <process_command+0x27d>
f0102425:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102428:	8a 00                	mov    (%eax),%al
f010242a:	84 c0                	test   %al,%al
f010242c:	75 da                	jne    f0102408 <process_command+0x257>
                {
                    ptr1++;
                }
                ptr2++;
            }
            if (*ptr1 == '\0')
f010242e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102431:	8a 00                	mov    (%eax),%al
f0102433:	84 c0                	test   %al,%al
f0102435:	0f 85 a1 00 00 00    	jne    f01024dc <process_command+0x32b>
            {
                LIST_INSERT_HEAD(&foundCommands , &commands[i]);
f010243b:	8b 15 0c 1b 5a f0    	mov    0xf05a1b0c,%edx
f0102441:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0102444:	89 c8                	mov    %ecx,%eax
f0102446:	01 c0                	add    %eax,%eax
f0102448:	01 c8                	add    %ecx,%eax
f010244a:	c1 e0 03             	shl    $0x3,%eax
f010244d:	05 50 d5 17 f0       	add    $0xf017d550,%eax
f0102452:	89 10                	mov    %edx,(%eax)
f0102454:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0102457:	89 d0                	mov    %edx,%eax
f0102459:	01 c0                	add    %eax,%eax
f010245b:	01 d0                	add    %edx,%eax
f010245d:	c1 e0 03             	shl    $0x3,%eax
f0102460:	05 50 d5 17 f0       	add    $0xf017d550,%eax
f0102465:	8b 00                	mov    (%eax),%eax
f0102467:	85 c0                	test   %eax,%eax
f0102469:	74 1c                	je     f0102487 <process_command+0x2d6>
f010246b:	8b 15 0c 1b 5a f0    	mov    0xf05a1b0c,%edx
f0102471:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0102474:	89 c8                	mov    %ecx,%eax
f0102476:	01 c0                	add    %eax,%eax
f0102478:	01 c8                	add    %ecx,%eax
f010247a:	c1 e0 03             	shl    $0x3,%eax
f010247d:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f0102482:	89 42 14             	mov    %eax,0x14(%edx)
f0102485:	eb 16                	jmp    f010249d <process_command+0x2ec>
f0102487:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010248a:	89 d0                	mov    %edx,%eax
f010248c:	01 c0                	add    %eax,%eax
f010248e:	01 d0                	add    %edx,%eax
f0102490:	c1 e0 03             	shl    $0x3,%eax
f0102493:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f0102498:	a3 10 1b 5a f0       	mov    %eax,0xf05a1b10
f010249d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01024a0:	89 d0                	mov    %edx,%eax
f01024a2:	01 c0                	add    %eax,%eax
f01024a4:	01 d0                	add    %edx,%eax
f01024a6:	c1 e0 03             	shl    $0x3,%eax
f01024a9:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f01024ae:	a3 0c 1b 5a f0       	mov    %eax,0xf05a1b0c
f01024b3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01024b6:	89 d0                	mov    %edx,%eax
f01024b8:	01 c0                	add    %eax,%eax
f01024ba:	01 d0                	add    %edx,%eax
f01024bc:	c1 e0 03             	shl    $0x3,%eax
f01024bf:	05 54 d5 17 f0       	add    $0xf017d554,%eax
f01024c4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01024ca:	a1 18 1b 5a f0       	mov    0xf05a1b18,%eax
f01024cf:	40                   	inc    %eax
f01024d0:	a3 18 1b 5a f0       	mov    %eax,0xf05a1b18
                x=1;
f01024d5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
    LIST_FOREACH(element, &foundCommands)
    {
        LIST_REMOVE(&foundCommands,element);
    }
    int x=0;
    for (int i = 0; i < NUM_OF_COMMANDS; i++)
f01024dc:	ff 45 ec             	incl   -0x14(%ebp)
f01024df:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01024e2:	a1 48 d9 17 f0       	mov    0xf017d948,%eax
f01024e7:	39 c2                	cmp    %eax,%edx
f01024e9:	0f 82 ae fd ff ff    	jb     f010229d <process_command+0xec>
                LIST_INSERT_HEAD(&foundCommands , &commands[i]);
                x=1;
            }
        }
    }
    if (x==1)
f01024ef:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01024f3:	75 07                	jne    f01024fc <process_command+0x34b>
    {
        return CMD_MATCHED;
f01024f5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01024fa:	eb 05                	jmp    f0102501 <process_command+0x350>
    }
    return CMD_INVALID;
f01024fc:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
f0102501:	c9                   	leave  
f0102502:	c3                   	ret    

f0102503 <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0102503:	55                   	push   %ebp
f0102504:	89 e5                	mov    %esp,%ebp
f0102506:	c7 05 50 19 5a f0 00 	movl   $0x0,0xf05a1950
f010250d:	00 00 00 
f0102510:	90                   	nop
f0102511:	5d                   	pop    %ebp
f0102512:	c3                   	ret    

f0102513 <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0102513:	55                   	push   %ebp
f0102514:	89 e5                	mov    %esp,%ebp
f0102516:	c7 05 50 19 5a f0 01 	movl   $0x1,0xf05a1950
f010251d:	00 00 00 
f0102520:	90                   	nop
f0102521:	5d                   	pop    %ebp
f0102522:	c3                   	ret    

f0102523 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0102523:	55                   	push   %ebp
f0102524:	89 e5                	mov    %esp,%ebp
f0102526:	c7 05 50 19 5a f0 02 	movl   $0x2,0xf05a1950
f010252d:	00 00 00 
f0102530:	90                   	nop
f0102531:	5d                   	pop    %ebp
f0102532:	c3                   	ret    

f0102533 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0102533:	55                   	push   %ebp
f0102534:	89 e5                	mov    %esp,%ebp
f0102536:	c7 05 50 19 5a f0 03 	movl   $0x3,0xf05a1950
f010253d:	00 00 00 
f0102540:	90                   	nop
f0102541:	5d                   	pop    %ebp
f0102542:	c3                   	ret    

f0102543 <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0102543:	55                   	push   %ebp
f0102544:	89 e5                	mov    %esp,%ebp
f0102546:	c7 05 50 19 5a f0 04 	movl   $0x4,0xf05a1950
f010254d:	00 00 00 
f0102550:	90                   	nop
f0102551:	5d                   	pop    %ebp
f0102552:	c3                   	ret    

f0102553 <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0102553:	55                   	push   %ebp
f0102554:	89 e5                	mov    %esp,%ebp
f0102556:	a1 50 19 5a f0       	mov    0xf05a1950,%eax
f010255b:	85 c0                	test   %eax,%eax
f010255d:	75 04                	jne    f0102563 <isKHeapPlacementStrategyCONTALLOC+0x10>
f010255f:	b0 01                	mov    $0x1,%al
f0102561:	eb 02                	jmp    f0102565 <isKHeapPlacementStrategyCONTALLOC+0x12>
f0102563:	b0 00                	mov    $0x0,%al
f0102565:	5d                   	pop    %ebp
f0102566:	c3                   	ret    

f0102567 <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0102567:	55                   	push   %ebp
f0102568:	89 e5                	mov    %esp,%ebp
f010256a:	a1 50 19 5a f0       	mov    0xf05a1950,%eax
f010256f:	83 f8 01             	cmp    $0x1,%eax
f0102572:	75 04                	jne    f0102578 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0102574:	b0 01                	mov    $0x1,%al
f0102576:	eb 02                	jmp    f010257a <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0102578:	b0 00                	mov    $0x0,%al
f010257a:	5d                   	pop    %ebp
f010257b:	c3                   	ret    

f010257c <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010257c:	55                   	push   %ebp
f010257d:	89 e5                	mov    %esp,%ebp
f010257f:	a1 50 19 5a f0       	mov    0xf05a1950,%eax
f0102584:	83 f8 02             	cmp    $0x2,%eax
f0102587:	75 04                	jne    f010258d <isKHeapPlacementStrategyBESTFIT+0x11>
f0102589:	b0 01                	mov    $0x1,%al
f010258b:	eb 02                	jmp    f010258f <isKHeapPlacementStrategyBESTFIT+0x13>
f010258d:	b0 00                	mov    $0x0,%al
f010258f:	5d                   	pop    %ebp
f0102590:	c3                   	ret    

f0102591 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0102591:	55                   	push   %ebp
f0102592:	89 e5                	mov    %esp,%ebp
f0102594:	a1 50 19 5a f0       	mov    0xf05a1950,%eax
f0102599:	83 f8 03             	cmp    $0x3,%eax
f010259c:	75 04                	jne    f01025a2 <isKHeapPlacementStrategyNEXTFIT+0x11>
f010259e:	b0 01                	mov    $0x1,%al
f01025a0:	eb 02                	jmp    f01025a4 <isKHeapPlacementStrategyNEXTFIT+0x13>
f01025a2:	b0 00                	mov    $0x0,%al
f01025a4:	5d                   	pop    %ebp
f01025a5:	c3                   	ret    

f01025a6 <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f01025a6:	55                   	push   %ebp
f01025a7:	89 e5                	mov    %esp,%ebp
f01025a9:	a1 50 19 5a f0       	mov    0xf05a1950,%eax
f01025ae:	83 f8 04             	cmp    $0x4,%eax
f01025b1:	75 04                	jne    f01025b7 <isKHeapPlacementStrategyWORSTFIT+0x11>
f01025b3:	b0 01                	mov    $0x1,%al
f01025b5:	eb 02                	jmp    f01025b9 <isKHeapPlacementStrategyWORSTFIT+0x13>
f01025b7:	b0 00                	mov    $0x0,%al
f01025b9:	5d                   	pop    %ebp
f01025ba:	c3                   	ret    

f01025bb <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f01025bb:	55                   	push   %ebp
f01025bc:	89 e5                	mov    %esp,%ebp
f01025be:	c7 05 a4 18 5a f0 01 	movl   $0x1,0xf05a18a4
f01025c5:	00 00 00 
f01025c8:	90                   	nop
f01025c9:	5d                   	pop    %ebp
f01025ca:	c3                   	ret    

f01025cb <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f01025cb:	55                   	push   %ebp
f01025cc:	89 e5                	mov    %esp,%ebp
f01025ce:	c7 05 a4 18 5a f0 02 	movl   $0x2,0xf05a18a4
f01025d5:	00 00 00 
f01025d8:	90                   	nop
f01025d9:	5d                   	pop    %ebp
f01025da:	c3                   	ret    

f01025db <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f01025db:	55                   	push   %ebp
f01025dc:	89 e5                	mov    %esp,%ebp
f01025de:	c7 05 a4 18 5a f0 03 	movl   $0x3,0xf05a18a4
f01025e5:	00 00 00 
f01025e8:	90                   	nop
f01025e9:	5d                   	pop    %ebp
f01025ea:	c3                   	ret    

f01025eb <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f01025eb:	55                   	push   %ebp
f01025ec:	89 e5                	mov    %esp,%ebp
f01025ee:	c7 05 a4 18 5a f0 04 	movl   $0x4,0xf05a18a4
f01025f5:	00 00 00 
f01025f8:	90                   	nop
f01025f9:	5d                   	pop    %ebp
f01025fa:	c3                   	ret    

f01025fb <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f01025fb:	55                   	push   %ebp
f01025fc:	89 e5                	mov    %esp,%ebp
f01025fe:	a1 a4 18 5a f0       	mov    0xf05a18a4,%eax
f0102603:	83 f8 01             	cmp    $0x1,%eax
f0102606:	75 04                	jne    f010260c <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0102608:	b0 01                	mov    $0x1,%al
f010260a:	eb 02                	jmp    f010260e <isUHeapPlacementStrategyFIRSTFIT+0x13>
f010260c:	b0 00                	mov    $0x0,%al
f010260e:	5d                   	pop    %ebp
f010260f:	c3                   	ret    

f0102610 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0102610:	55                   	push   %ebp
f0102611:	89 e5                	mov    %esp,%ebp
f0102613:	a1 a4 18 5a f0       	mov    0xf05a18a4,%eax
f0102618:	83 f8 02             	cmp    $0x2,%eax
f010261b:	75 04                	jne    f0102621 <isUHeapPlacementStrategyBESTFIT+0x11>
f010261d:	b0 01                	mov    $0x1,%al
f010261f:	eb 02                	jmp    f0102623 <isUHeapPlacementStrategyBESTFIT+0x13>
f0102621:	b0 00                	mov    $0x0,%al
f0102623:	5d                   	pop    %ebp
f0102624:	c3                   	ret    

f0102625 <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0102625:	55                   	push   %ebp
f0102626:	89 e5                	mov    %esp,%ebp
f0102628:	a1 a4 18 5a f0       	mov    0xf05a18a4,%eax
f010262d:	83 f8 03             	cmp    $0x3,%eax
f0102630:	75 04                	jne    f0102636 <isUHeapPlacementStrategyNEXTFIT+0x11>
f0102632:	b0 01                	mov    $0x1,%al
f0102634:	eb 02                	jmp    f0102638 <isUHeapPlacementStrategyNEXTFIT+0x13>
f0102636:	b0 00                	mov    $0x0,%al
f0102638:	5d                   	pop    %ebp
f0102639:	c3                   	ret    

f010263a <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f010263a:	55                   	push   %ebp
f010263b:	89 e5                	mov    %esp,%ebp
f010263d:	a1 a4 18 5a f0       	mov    0xf05a18a4,%eax
f0102642:	83 f8 04             	cmp    $0x4,%eax
f0102645:	75 04                	jne    f010264b <isUHeapPlacementStrategyWORSTFIT+0x11>
f0102647:	b0 01                	mov    $0x1,%al
f0102649:	eb 02                	jmp    f010264d <isUHeapPlacementStrategyWORSTFIT+0x13>
f010264b:	b0 00                	mov    $0x0,%al
f010264d:	5d                   	pop    %ebp
f010264e:	c3                   	ret    

f010264f <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010264f:	55                   	push   %ebp
f0102650:	89 e5                	mov    %esp,%ebp
f0102652:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0102655:	8b 45 08             	mov    0x8(%ebp),%eax
f0102658:	c1 e8 0c             	shr    $0xc,%eax
f010265b:	89 c2                	mov    %eax,%edx
f010265d:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f0102662:	39 c2                	cmp    %eax,%edx
f0102664:	72 14                	jb     f010267a <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0102666:	83 ec 04             	sub    $0x4,%esp
f0102669:	68 dc 49 12 f0       	push   $0xf01249dc
f010266e:	6a 55                	push   $0x55
f0102670:	68 04 4a 12 f0       	push   $0xf0124a04
f0102675:	e8 a0 dc ff ff       	call   f010031a <_panic>
	return &frames_info[PPN(physical_address)];
f010267a:	8b 15 c0 18 5a f0    	mov    0xf05a18c0,%edx
f0102680:	8b 45 08             	mov    0x8(%ebp),%eax
f0102683:	c1 e8 0c             	shr    $0xc,%eax
f0102686:	89 c1                	mov    %eax,%ecx
f0102688:	89 c8                	mov    %ecx,%eax
f010268a:	01 c0                	add    %eax,%eax
f010268c:	01 c8                	add    %ecx,%eax
f010268e:	c1 e0 03             	shl    $0x3,%eax
f0102691:	01 d0                	add    %edx,%eax
}
f0102693:	c9                   	leave  
f0102694:	c3                   	ret    

f0102695 <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f0102695:	55                   	push   %ebp
f0102696:	89 e5                	mov    %esp,%ebp
f0102698:	53                   	push   %ebx
f0102699:	83 ec 14             	sub    $0x14,%esp

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f010269c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01026a3:	eb 3b                	jmp    f01026e0 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f01026a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01026a8:	89 d0                	mov    %edx,%eax
f01026aa:	01 c0                	add    %eax,%eax
f01026ac:	01 d0                	add    %edx,%eax
f01026ae:	c1 e0 03             	shl    $0x3,%eax
f01026b1:	05 44 d5 17 f0       	add    $0xf017d544,%eax
f01026b6:	8b 10                	mov    (%eax),%edx
f01026b8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01026bb:	89 c8                	mov    %ecx,%eax
f01026bd:	01 c0                	add    %eax,%eax
f01026bf:	01 c8                	add    %ecx,%eax
f01026c1:	c1 e0 03             	shl    $0x3,%eax
f01026c4:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f01026c9:	8b 00                	mov    (%eax),%eax
f01026cb:	83 ec 04             	sub    $0x4,%esp
f01026ce:	52                   	push   %edx
f01026cf:	50                   	push   %eax
f01026d0:	68 87 52 12 f0       	push   $0xf0125287
f01026d5:	e8 92 e8 ff ff       	call   f0100f6c <cprintf>
f01026da:	83 c4 10             	add    $0x10,%esp
//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01026dd:	ff 45 f4             	incl   -0xc(%ebp)
f01026e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01026e3:	a1 48 d9 17 f0       	mov    0xf017d948,%eax
f01026e8:	39 c2                	cmp    %eax,%edx
f01026ea:	72 b9                	jb     f01026a5 <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f01026ec:	83 ec 0c             	sub    $0xc,%esp
f01026ef:	68 90 52 12 f0       	push   $0xf0125290
f01026f4:	e8 73 e8 ff ff       	call   f0100f6c <cprintf>
f01026f9:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f01026fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102703:	eb 42                	jmp    f0102747 <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f0102705:	8b 0d e0 dc 17 f0    	mov    0xf017dce0,%ecx
f010270b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010270e:	89 d0                	mov    %edx,%eax
f0102710:	01 c0                	add    %eax,%eax
f0102712:	01 d0                	add    %edx,%eax
f0102714:	c1 e0 02             	shl    $0x2,%eax
f0102717:	01 c8                	add    %ecx,%eax
f0102719:	8b 50 04             	mov    0x4(%eax),%edx
f010271c:	8b 1d e0 dc 17 f0    	mov    0xf017dce0,%ebx
f0102722:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102725:	89 c8                	mov    %ecx,%eax
f0102727:	01 c0                	add    %eax,%eax
f0102729:	01 c8                	add    %ecx,%eax
f010272b:	c1 e0 02             	shl    $0x2,%eax
f010272e:	01 d8                	add    %ebx,%eax
f0102730:	8b 00                	mov    (%eax),%eax
f0102732:	83 ec 04             	sub    $0x4,%esp
f0102735:	52                   	push   %edx
f0102736:	50                   	push   %eax
f0102737:	68 a5 52 12 f0       	push   $0xf01252a5
f010273c:	e8 2b e8 ff ff       	call   f0100f6c <cprintf>
f0102741:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f0102744:	ff 45 f4             	incl   -0xc(%ebp)
f0102747:	a1 e4 dc 17 f0       	mov    0xf017dce4,%eax
f010274c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010274f:	7c b4                	jl     f0102705 <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0102751:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102756:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0102759:	c9                   	leave  
f010275a:	c3                   	ret    

f010275b <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f010275b:	55                   	push   %ebp
f010275c:	89 e5                	mov    %esp,%ebp
f010275e:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0102761:	83 ec 0c             	sub    $0xc,%esp
f0102764:	68 c1 52 12 f0       	push   $0xf01252c1
f0102769:	e8 fe e7 ff ff       	call   f0100f6c <cprintf>
f010276e:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0102771:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f0102776:	83 ec 04             	sub    $0x4,%esp
f0102779:	50                   	push   %eax
f010277a:	68 0c 00 10 f0       	push   $0xf010000c
f010277f:	68 dc 52 12 f0       	push   $0xf01252dc
f0102784:	e8 e3 e7 ff ff       	call   f0100f6c <cprintf>
f0102789:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f010278c:	b8 ed 37 12 00       	mov    $0x1237ed,%eax
f0102791:	83 ec 04             	sub    $0x4,%esp
f0102794:	50                   	push   %eax
f0102795:	68 ed 37 12 f0       	push   $0xf01237ed
f010279a:	68 18 53 12 f0       	push   $0xf0125318
f010279f:	e8 c8 e7 ff ff       	call   f0100f6c <cprintf>
f01027a4:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f01027a7:	b8 50 e1 59 00       	mov    $0x59e150,%eax
f01027ac:	83 ec 04             	sub    $0x4,%esp
f01027af:	50                   	push   %eax
f01027b0:	68 50 e1 59 f0       	push   $0xf059e150
f01027b5:	68 54 53 12 f0       	push   $0xf0125354
f01027ba:	e8 ad e7 ff ff       	call   f0100f6c <cprintf>
f01027bf:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f01027c2:	b8 30 44 5c 00       	mov    $0x5c4430,%eax
f01027c7:	83 ec 04             	sub    $0x4,%esp
f01027ca:	50                   	push   %eax
f01027cb:	68 30 44 5c f0       	push   $0xf05c4430
f01027d0:	68 9c 53 12 f0       	push   $0xf012539c
f01027d5:	e8 92 e7 ff ff       	call   f0100f6c <cprintf>
f01027da:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f01027dd:	b8 30 44 5c f0       	mov    $0xf05c4430,%eax
f01027e2:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f01027e8:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01027ed:	29 c2                	sub    %eax,%edx
f01027ef:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01027f1:	85 c0                	test   %eax,%eax
f01027f3:	79 05                	jns    f01027fa <command_kernel_info+0x9f>
f01027f5:	05 ff 03 00 00       	add    $0x3ff,%eax
f01027fa:	c1 f8 0a             	sar    $0xa,%eax
f01027fd:	83 ec 08             	sub    $0x8,%esp
f0102800:	50                   	push   %eax
f0102801:	68 d8 53 12 f0       	push   $0xf01253d8
f0102806:	e8 61 e7 ff ff       	call   f0100f6c <cprintf>
f010280b:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f010280e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102813:	c9                   	leave  
f0102814:	c3                   	ret    

f0102815 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f0102815:	55                   	push   %ebp
f0102816:	89 e5                	mov    %esp,%ebp
f0102818:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f010281b:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010281f:	75 37                	jne    f0102858 <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0102821:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102824:	83 c0 04             	add    $0x4,%eax
f0102827:	8b 00                	mov    (%eax),%eax
f0102829:	83 ec 04             	sub    $0x4,%esp
f010282c:	6a 10                	push   $0x10
f010282e:	6a 00                	push   $0x0
f0102830:	50                   	push   %eax
f0102831:	e8 62 ff 01 00       	call   f0122798 <strtol>
f0102836:	83 c4 10             	add    $0x10,%esp
f0102839:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f010283c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010283f:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f0102842:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102845:	83 c0 08             	add    $0x8,%eax
f0102848:	8b 00                	mov    (%eax),%eax
f010284a:	8a 00                	mov    (%eax),%al
f010284c:	88 c2                	mov    %al,%dl
f010284e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102851:	88 10                	mov    %dl,(%eax)
f0102853:	e9 b9 00 00 00       	jmp    f0102911 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f0102858:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010285c:	0f 85 9f 00 00 00    	jne    f0102901 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f0102862:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102865:	83 c0 04             	add    $0x4,%eax
f0102868:	8b 00                	mov    (%eax),%eax
f010286a:	83 ec 04             	sub    $0x4,%esp
f010286d:	6a 0a                	push   $0xa
f010286f:	6a 00                	push   $0x0
f0102871:	50                   	push   %eax
f0102872:	e8 21 ff 01 00       	call   f0122798 <strtol>
f0102877:	83 c4 10             	add    $0x10,%esp
f010287a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f010287d:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0102884:	83 ec 04             	sub    $0x4,%esp
f0102887:	6a 00                	push   $0x0
f0102889:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010288c:	50                   	push   %eax
f010288d:	ff 75 f4             	pushl  -0xc(%ebp)
f0102890:	e8 2b 7f 00 00       	call   f010a7c0 <envid2env>
f0102895:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0102898:	8b 45 0c             	mov    0xc(%ebp),%eax
f010289b:	83 c0 08             	add    $0x8,%eax
f010289e:	8b 00                	mov    (%eax),%eax
f01028a0:	83 ec 04             	sub    $0x4,%esp
f01028a3:	6a 10                	push   $0x10
f01028a5:	6a 00                	push   $0x0
f01028a7:	50                   	push   %eax
f01028a8:	e8 eb fe 01 00       	call   f0122798 <strtol>
f01028ad:	83 c4 10             	add    $0x10,%esp
f01028b0:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01028b3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01028b6:	85 c0                	test   %eax,%eax
f01028b8:	75 07                	jne    f01028c1 <command_writeusermem+0xac>
f01028ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01028bf:	eb 55                	jmp    f0102916 <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01028c1:	0f 20 d8             	mov    %cr3,%eax
f01028c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01028c7:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01028ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f01028cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01028d0:	8b 40 68             	mov    0x68(%eax),%eax
f01028d3:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01028d6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01028d9:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f01028dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01028df:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f01028e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028e5:	83 c0 0c             	add    $0xc,%eax
f01028e8:	8b 00                	mov    (%eax),%eax
f01028ea:	8a 00                	mov    (%eax),%al
f01028ec:	88 c2                	mov    %al,%dl
f01028ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01028f1:	88 10                	mov    %dl,(%eax)
f01028f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01028f6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01028f9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01028fc:	0f 22 d8             	mov    %eax,%cr3
f01028ff:	eb 10                	jmp    f0102911 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f0102901:	83 ec 0c             	sub    $0xc,%esp
f0102904:	68 04 54 12 f0       	push   $0xf0125404
f0102909:	e8 5e e6 ff ff       	call   f0100f6c <cprintf>
f010290e:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102911:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102916:	c9                   	leave  
f0102917:	c3                   	ret    

f0102918 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f0102918:	55                   	push   %ebp
f0102919:	89 e5                	mov    %esp,%ebp
f010291b:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f010291e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102921:	83 c0 04             	add    $0x4,%eax
f0102924:	8b 00                	mov    (%eax),%eax
f0102926:	83 ec 04             	sub    $0x4,%esp
f0102929:	6a 10                	push   $0x10
f010292b:	6a 00                	push   $0x0
f010292d:	50                   	push   %eax
f010292e:	e8 65 fe 01 00       	call   f0122798 <strtol>
f0102933:	83 c4 10             	add    $0x10,%esp
f0102936:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010293b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int c, i=0;
f010293e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int stringLen = strlen(arguments[2]);
f0102945:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102948:	83 c0 08             	add    $0x8,%eax
f010294b:	8b 00                	mov    (%eax),%eax
f010294d:	83 ec 0c             	sub    $0xc,%esp
f0102950:	50                   	push   %eax
f0102951:	e8 e2 fa 01 00       	call   f0122438 <strlen>
f0102956:	83 c4 10             	add    $0x10,%esp
f0102959:	89 45 ec             	mov    %eax,-0x14(%ebp)

	for(i=0;i < stringLen; i++)
f010295c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102963:	eb 1c                	jmp    f0102981 <command_writemem_k+0x69>
	{
		*address = arguments[2][i];
f0102965:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102968:	83 c0 08             	add    $0x8,%eax
f010296b:	8b 10                	mov    (%eax),%edx
f010296d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102970:	01 d0                	add    %edx,%eax
f0102972:	8a 00                	mov    (%eax),%al
f0102974:	88 c2                	mov    %al,%dl
f0102976:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102979:	88 10                	mov    %dl,(%eax)
		address++;
f010297b:	ff 45 f4             	incl   -0xc(%ebp)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int c, i=0;
	int stringLen = strlen(arguments[2]);

	for(i=0;i < stringLen; i++)
f010297e:	ff 45 f0             	incl   -0x10(%ebp)
f0102981:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102984:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0102987:	7c dc                	jl     f0102965 <command_writemem_k+0x4d>
	{
		*address = arguments[2][i];
		address++;
	}

	return 0;
f0102989:	b8 00 00 00 00       	mov    $0x0,%eax


}
f010298e:	c9                   	leave  
f010298f:	c3                   	ret    

f0102990 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0102990:	55                   	push   %ebp
f0102991:	89 e5                	mov    %esp,%ebp
f0102993:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0102996:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010299a:	75 42                	jne    f01029de <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010299c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010299f:	83 c0 04             	add    $0x4,%eax
f01029a2:	8b 00                	mov    (%eax),%eax
f01029a4:	83 ec 04             	sub    $0x4,%esp
f01029a7:	6a 10                	push   $0x10
f01029a9:	6a 00                	push   $0x0
f01029ab:	50                   	push   %eax
f01029ac:	e8 e7 fd 01 00       	call   f0122798 <strtol>
f01029b1:	83 c4 10             	add    $0x10,%esp
f01029b4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f01029b7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01029ba:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f01029bd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01029c0:	8a 00                	mov    (%eax),%al
f01029c2:	0f b6 c0             	movzbl %al,%eax
f01029c5:	83 ec 04             	sub    $0x4,%esp
f01029c8:	50                   	push   %eax
f01029c9:	ff 75 d8             	pushl  -0x28(%ebp)
f01029cc:	68 2e 54 12 f0       	push   $0xf012542e
f01029d1:	e8 96 e5 ff ff       	call   f0100f6c <cprintf>
f01029d6:	83 c4 10             	add    $0x10,%esp
f01029d9:	e9 c4 00 00 00       	jmp    f0102aa2 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f01029de:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01029e2:	0f 85 aa 00 00 00    	jne    f0102a92 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01029e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029eb:	83 c0 04             	add    $0x4,%eax
f01029ee:	8b 00                	mov    (%eax),%eax
f01029f0:	83 ec 04             	sub    $0x4,%esp
f01029f3:	6a 0a                	push   $0xa
f01029f5:	6a 00                	push   $0x0
f01029f7:	50                   	push   %eax
f01029f8:	e8 9b fd 01 00       	call   f0122798 <strtol>
f01029fd:	83 c4 10             	add    $0x10,%esp
f0102a00:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0102a03:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0102a0a:	83 ec 04             	sub    $0x4,%esp
f0102a0d:	6a 00                	push   $0x0
f0102a0f:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0102a12:	50                   	push   %eax
f0102a13:	ff 75 f4             	pushl  -0xc(%ebp)
f0102a16:	e8 a5 7d 00 00       	call   f010a7c0 <envid2env>
f0102a1b:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0102a1e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a21:	83 c0 08             	add    $0x8,%eax
f0102a24:	8b 00                	mov    (%eax),%eax
f0102a26:	83 ec 04             	sub    $0x4,%esp
f0102a29:	6a 10                	push   $0x10
f0102a2b:	6a 00                	push   $0x0
f0102a2d:	50                   	push   %eax
f0102a2e:	e8 65 fd 01 00       	call   f0122798 <strtol>
f0102a33:	83 c4 10             	add    $0x10,%esp
f0102a36:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0102a39:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102a3c:	85 c0                	test   %eax,%eax
f0102a3e:	75 07                	jne    f0102a47 <command_readusermem+0xb7>
f0102a40:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a45:	eb 60                	jmp    f0102aa7 <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0102a47:	0f 20 d8             	mov    %cr3,%eax
f0102a4a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0102a4d:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0102a50:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f0102a53:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102a56:	8b 40 68             	mov    0x68(%eax),%eax
f0102a59:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102a5c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102a5f:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0102a62:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102a65:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f0102a68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102a6b:	8a 00                	mov    (%eax),%al
f0102a6d:	0f b6 c0             	movzbl %al,%eax
f0102a70:	83 ec 04             	sub    $0x4,%esp
f0102a73:	50                   	push   %eax
f0102a74:	ff 75 f0             	pushl  -0x10(%ebp)
f0102a77:	68 2e 54 12 f0       	push   $0xf012542e
f0102a7c:	e8 eb e4 ff ff       	call   f0100f6c <cprintf>
f0102a81:	83 c4 10             	add    $0x10,%esp
f0102a84:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102a87:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0102a8a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102a8d:	0f 22 d8             	mov    %eax,%cr3
f0102a90:	eb 10                	jmp    f0102aa2 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0102a92:	83 ec 0c             	sub    $0xc,%esp
f0102a95:	68 48 54 12 f0       	push   $0xf0125448
f0102a9a:	e8 cd e4 ff ff       	call   f0100f6c <cprintf>
f0102a9f:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102aa2:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0102aa7:	c9                   	leave  
f0102aa8:	c3                   	ret    

f0102aa9 <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f0102aa9:	55                   	push   %ebp
f0102aaa:	89 e5                	mov    %esp,%ebp
f0102aac:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0102aaf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ab2:	83 c0 04             	add    $0x4,%eax
f0102ab5:	8b 00                	mov    (%eax),%eax
f0102ab7:	83 ec 04             	sub    $0x4,%esp
f0102aba:	6a 10                	push   $0x10
f0102abc:	6a 00                	push   $0x0
f0102abe:	50                   	push   %eax
f0102abf:	e8 d4 fc 01 00       	call   f0122798 <strtol>
f0102ac4:	83 c4 10             	add    $0x10,%esp
f0102ac7:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0102acc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int i=0;
f0102acf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("%c",*address);
f0102ad6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102ad9:	8a 00                	mov    (%eax),%al
f0102adb:	0f b6 c0             	movzbl %al,%eax
f0102ade:	83 ec 08             	sub    $0x8,%esp
f0102ae1:	50                   	push   %eax
f0102ae2:	68 72 54 12 f0       	push   $0xf0125472
f0102ae7:	e8 80 e4 ff ff       	call   f0100f6c <cprintf>
f0102aec:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0102aef:	83 ec 0c             	sub    $0xc,%esp
f0102af2:	68 75 54 12 f0       	push   $0xf0125475
f0102af7:	e8 70 e4 ff ff       	call   f0100f6c <cprintf>
f0102afc:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102aff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b04:	c9                   	leave  
f0102b05:	c3                   	ret    

f0102b06 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f0102b06:	55                   	push   %ebp
f0102b07:	89 e5                	mov    %esp,%ebp
f0102b09:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0102b0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b0f:	83 c0 04             	add    $0x4,%eax
f0102b12:	8b 00                	mov    (%eax),%eax
f0102b14:	83 ec 04             	sub    $0x4,%esp
f0102b17:	6a 0a                	push   $0xa
f0102b19:	6a 00                	push   $0x0
f0102b1b:	50                   	push   %eax
f0102b1c:	e8 77 fc 01 00       	call   f0122798 <strtol>
f0102b21:	83 c4 10             	add    $0x10,%esp
f0102b24:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f0102b27:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f0102b2e:	83 ec 04             	sub    $0x4,%esp
f0102b31:	6a 00                	push   $0x0
f0102b33:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0102b36:	50                   	push   %eax
f0102b37:	ff 75 ec             	pushl  -0x14(%ebp)
f0102b3a:	e8 81 7c 00 00       	call   f010a7c0 <envid2env>
f0102b3f:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0102b42:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b45:	83 c0 08             	add    $0x8,%eax
f0102b48:	8b 00                	mov    (%eax),%eax
f0102b4a:	83 ec 04             	sub    $0x4,%esp
f0102b4d:	6a 10                	push   $0x10
f0102b4f:	6a 00                	push   $0x0
f0102b51:	50                   	push   %eax
f0102b52:	e8 41 fc 01 00       	call   f0122798 <strtol>
f0102b57:	83 c4 10             	add    $0x10,%esp
f0102b5a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f0102b5d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b60:	83 c0 0c             	add    $0xc,%eax
f0102b63:	8b 00                	mov    (%eax),%eax
f0102b65:	83 ec 04             	sub    $0x4,%esp
f0102b68:	6a 0a                	push   $0xa
f0102b6a:	6a 00                	push   $0x0
f0102b6c:	50                   	push   %eax
f0102b6d:	e8 26 fc 01 00       	call   f0122798 <strtol>
f0102b72:	83 c4 10             	add    $0x10,%esp
f0102b75:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0102b78:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102b7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f0102b7e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102b81:	85 c0                	test   %eax,%eax
f0102b83:	75 07                	jne    f0102b8c <command_readuserblock+0x86>
f0102b85:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b8a:	eb 65                	jmp    f0102bf1 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0102b8c:	0f 20 d8             	mov    %cr3,%eax
f0102b8f:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0102b92:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0102b95:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0102b98:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102b9b:	8b 40 68             	mov    0x68(%eax),%eax
f0102b9e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102ba1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102ba4:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0102ba7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102bae:	eb 28                	jmp    f0102bd8 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0102bb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102bb3:	8a 00                	mov    (%eax),%al
f0102bb5:	0f b6 d0             	movzbl %al,%edx
f0102bb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102bbb:	8a 00                	mov    (%eax),%al
f0102bbd:	0f b6 c0             	movzbl %al,%eax
f0102bc0:	52                   	push   %edx
f0102bc1:	50                   	push   %eax
f0102bc2:	ff 75 f4             	pushl  -0xc(%ebp)
f0102bc5:	68 77 54 12 f0       	push   $0xf0125477
f0102bca:	e8 9d e3 ff ff       	call   f0100f6c <cprintf>
f0102bcf:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0102bd2:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f0102bd5:	ff 45 f0             	incl   -0x10(%ebp)
f0102bd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102bdb:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0102bde:	7c d0                	jl     f0102bb0 <command_readuserblock+0xaa>
f0102be0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102be3:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0102be6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102be9:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f0102bec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bf1:	c9                   	leave  
f0102bf2:	c3                   	ret    

f0102bf3 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f0102bf3:	55                   	push   %ebp
f0102bf4:	89 e5                	mov    %esp,%ebp
f0102bf6:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0102bf9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bfc:	83 c0 04             	add    $0x4,%eax
f0102bff:	8b 00                	mov    (%eax),%eax
f0102c01:	83 ec 04             	sub    $0x4,%esp
f0102c04:	6a 0a                	push   $0xa
f0102c06:	6a 00                	push   $0x0
f0102c08:	50                   	push   %eax
f0102c09:	e8 8a fb 01 00       	call   f0122798 <strtol>
f0102c0e:	83 c4 10             	add    $0x10,%esp
f0102c11:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0102c14:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0102c1b:	83 ec 04             	sub    $0x4,%esp
f0102c1e:	6a 00                	push   $0x0
f0102c20:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0102c23:	50                   	push   %eax
f0102c24:	ff 75 f4             	pushl  -0xc(%ebp)
f0102c27:	e8 94 7b 00 00       	call   f010a7c0 <envid2env>
f0102c2c:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0102c2f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102c32:	85 c0                	test   %eax,%eax
f0102c34:	75 0a                	jne    f0102c40 <command_remove_table+0x4d>
f0102c36:	b8 00 00 00 00       	mov    $0x0,%eax
f0102c3b:	e9 a1 00 00 00       	jmp    f0102ce1 <command_remove_table+0xee>

	uint32 address = strtol(arguments[2], NULL, 16);
f0102c40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c43:	83 c0 08             	add    $0x8,%eax
f0102c46:	8b 00                	mov    (%eax),%eax
f0102c48:	83 ec 04             	sub    $0x4,%esp
f0102c4b:	6a 10                	push   $0x10
f0102c4d:	6a 00                	push   $0x0
f0102c4f:	50                   	push   %eax
f0102c50:	e8 43 fb 01 00       	call   f0122798 <strtol>
f0102c55:	83 c4 10             	add    $0x10,%esp
f0102c58:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0102c5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102c5e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0102c61:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102c64:	8b 40 64             	mov    0x64(%eax),%eax
f0102c67:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102c6a:	c1 ea 16             	shr    $0x16,%edx
f0102c6d:	c1 e2 02             	shl    $0x2,%edx
f0102c70:	01 d0                	add    %edx,%eax
f0102c72:	8b 00                	mov    (%eax),%eax
f0102c74:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102c79:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree((void*)kheap_virtual_address(table_pa));
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f0102c7c:	83 ec 0c             	sub    $0xc,%esp
f0102c7f:	ff 75 e8             	pushl  -0x18(%ebp)
f0102c82:	e8 c8 f9 ff ff       	call   f010264f <to_frame_info>
f0102c87:	83 c4 10             	add    $0x10,%esp
f0102c8a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0102c8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102c90:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f0102c96:	83 ec 0c             	sub    $0xc,%esp
f0102c99:	ff 75 e4             	pushl  -0x1c(%ebp)
f0102c9c:	e8 83 56 00 00       	call   f0108324 <free_frame>
f0102ca1:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f0102ca4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102ca7:	c1 e8 16             	shr    $0x16,%eax
f0102caa:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0102cad:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102cb0:	8b 40 64             	mov    0x64(%eax),%eax
f0102cb3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102cb6:	c1 e2 02             	shl    $0x2,%edx
f0102cb9:	01 c2                	add    %eax,%edx
f0102cbb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102cbe:	8b 40 64             	mov    0x64(%eax),%eax
f0102cc1:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0102cc4:	c1 e1 02             	shl    $0x2,%ecx
f0102cc7:	01 c8                	add    %ecx,%eax
f0102cc9:	8b 00                	mov    (%eax),%eax
f0102ccb:	83 e0 fe             	and    $0xfffffffe,%eax
f0102cce:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0102cd0:	0f 20 d8             	mov    %cr3,%eax
f0102cd3:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0102cd6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102cd9:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f0102cdc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102ce1:	c9                   	leave  
f0102ce2:	c3                   	ret    

f0102ce3 <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f0102ce3:	55                   	push   %ebp
f0102ce4:	89 e5                	mov    %esp,%ebp
f0102ce6:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f0102ce9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102ced:	7e 06                	jle    f0102cf5 <command_allocuserpage+0x12>
f0102cef:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102cf3:	7e 1a                	jle    f0102d0f <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f0102cf5:	83 ec 0c             	sub    $0xc,%esp
f0102cf8:	68 88 54 12 f0       	push   $0xf0125488
f0102cfd:	e8 6a e2 ff ff       	call   f0100f6c <cprintf>
f0102d02:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102d05:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d0a:	e9 46 01 00 00       	jmp    f0102e55 <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0102d0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d12:	83 c0 04             	add    $0x4,%eax
f0102d15:	8b 00                	mov    (%eax),%eax
f0102d17:	83 ec 04             	sub    $0x4,%esp
f0102d1a:	6a 0a                	push   $0xa
f0102d1c:	6a 00                	push   $0x0
f0102d1e:	50                   	push   %eax
f0102d1f:	e8 74 fa 01 00       	call   f0122798 <strtol>
f0102d24:	83 c4 10             	add    $0x10,%esp
f0102d27:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0102d2a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0102d31:	83 ec 04             	sub    $0x4,%esp
f0102d34:	6a 00                	push   $0x0
f0102d36:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0102d39:	50                   	push   %eax
f0102d3a:	ff 75 f0             	pushl  -0x10(%ebp)
f0102d3d:	e8 7e 7a 00 00       	call   f010a7c0 <envid2env>
f0102d42:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0102d45:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102d48:	85 c0                	test   %eax,%eax
f0102d4a:	75 0a                	jne    f0102d56 <command_allocuserpage+0x73>
f0102d4c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d51:	e9 ff 00 00 00       	jmp    f0102e55 <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f0102d56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d59:	83 c0 08             	add    $0x8,%eax
f0102d5c:	8b 00                	mov    (%eax),%eax
f0102d5e:	83 ec 04             	sub    $0x4,%esp
f0102d61:	6a 10                	push   $0x10
f0102d63:	6a 00                	push   $0x0
f0102d65:	50                   	push   %eax
f0102d66:	e8 2d fa 01 00       	call   f0122798 <strtol>
f0102d6b:	83 c4 10             	add    $0x10,%esp
f0102d6e:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0102d71:	83 ec 0c             	sub    $0xc,%esp
f0102d74:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0102d77:	50                   	push   %eax
f0102d78:	e8 53 54 00 00       	call   f01081d0 <allocate_frame>
f0102d7d:	83 c4 10             	add    $0x10,%esp
f0102d80:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0102d83:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0102d87:	75 1a                	jne    f0102da3 <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0102d89:	83 ec 0c             	sub    $0xc,%esp
f0102d8c:	68 b2 54 12 f0       	push   $0xf01254b2
f0102d91:	e8 d6 e1 ff ff       	call   f0100f6c <cprintf>
f0102d96:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102d99:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d9e:	e9 b2 00 00 00       	jmp    f0102e55 <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f0102da3:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102da7:	75 1d                	jne    f0102dc6 <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f0102da9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102dac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102daf:	8b 40 64             	mov    0x64(%eax),%eax
f0102db2:	6a 06                	push   $0x6
f0102db4:	ff 75 ec             	pushl  -0x14(%ebp)
f0102db7:	52                   	push   %edx
f0102db8:	50                   	push   %eax
f0102db9:	e8 28 58 00 00       	call   f01085e6 <map_frame>
f0102dbe:	83 c4 10             	add    $0x10,%esp
f0102dc1:	e9 8a 00 00 00       	jmp    f0102e50 <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f0102dc6:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102dca:	0f 85 80 00 00 00    	jne    f0102e50 <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f0102dd0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dd3:	83 c0 0c             	add    $0xc,%eax
f0102dd6:	8b 00                	mov    (%eax),%eax
f0102dd8:	8a 00                	mov    (%eax),%al
f0102dda:	3c 72                	cmp    $0x72,%al
f0102ddc:	74 0e                	je     f0102dec <command_allocuserpage+0x109>
f0102dde:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102de1:	83 c0 0c             	add    $0xc,%eax
f0102de4:	8b 00                	mov    (%eax),%eax
f0102de6:	8a 00                	mov    (%eax),%al
f0102de8:	3c 52                	cmp    $0x52,%al
f0102dea:	75 09                	jne    f0102df5 <command_allocuserpage+0x112>
			rw = 0 ;
f0102dec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102df3:	eb 3c                	jmp    f0102e31 <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f0102df5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102df8:	83 c0 0c             	add    $0xc,%eax
f0102dfb:	8b 00                	mov    (%eax),%eax
f0102dfd:	8a 00                	mov    (%eax),%al
f0102dff:	3c 77                	cmp    $0x77,%al
f0102e01:	74 0e                	je     f0102e11 <command_allocuserpage+0x12e>
f0102e03:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e06:	83 c0 0c             	add    $0xc,%eax
f0102e09:	8b 00                	mov    (%eax),%eax
f0102e0b:	8a 00                	mov    (%eax),%al
f0102e0d:	3c 57                	cmp    $0x57,%al
f0102e0f:	75 09                	jne    f0102e1a <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f0102e11:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0102e18:	eb 17                	jmp    f0102e31 <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0102e1a:	83 ec 0c             	sub    $0xc,%esp
f0102e1d:	68 cc 54 12 f0       	push   $0xf01254cc
f0102e22:	e8 45 e1 ff ff       	call   f0100f6c <cprintf>
f0102e27:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0102e2a:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0102e31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102e34:	83 c8 04             	or     $0x4,%eax
f0102e37:	89 c1                	mov    %eax,%ecx
f0102e39:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102e3c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102e3f:	8b 40 64             	mov    0x64(%eax),%eax
f0102e42:	51                   	push   %ecx
f0102e43:	ff 75 ec             	pushl  -0x14(%ebp)
f0102e46:	52                   	push   %edx
f0102e47:	50                   	push   %eax
f0102e48:	e8 99 57 00 00       	call   f01085e6 <map_frame>
f0102e4d:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102e50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e55:	c9                   	leave  
f0102e56:	c3                   	ret    

f0102e57 <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0102e57:	55                   	push   %ebp
f0102e58:	89 e5                	mov    %esp,%ebp
f0102e5a:	56                   	push   %esi
f0102e5b:	53                   	push   %ebx
f0102e5c:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0102e5f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0102e62:	83 ec 0c             	sub    $0xc,%esp
f0102e65:	50                   	push   %eax
f0102e66:	e8 33 5a 00 00       	call   f010889e <calculate_available_frames>
f0102e6b:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102e6e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102e71:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102e74:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0102e77:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0102e7a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0102e7d:	01 de                	add    %ebx,%esi
f0102e7f:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102e82:	01 f3                	add    %esi,%ebx
f0102e84:	83 ec 0c             	sub    $0xc,%esp
f0102e87:	51                   	push   %ecx
f0102e88:	52                   	push   %edx
f0102e89:	50                   	push   %eax
f0102e8a:	53                   	push   %ebx
f0102e8b:	68 10 55 12 f0       	push   $0xf0125510
f0102e90:	e8 d7 e0 ff ff       	call   f0100f6c <cprintf>
f0102e95:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0102e98:	a1 70 1a 5a f0       	mov    0xf05a1a70,%eax
f0102e9d:	83 ec 08             	sub    $0x8,%esp
f0102ea0:	50                   	push   %eax
f0102ea1:	68 68 55 12 f0       	push   $0xf0125568
f0102ea6:	e8 c1 e0 ff ff       	call   f0100f6c <cprintf>
f0102eab:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102eae:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102eb3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0102eb6:	5b                   	pop    %ebx
f0102eb7:	5e                   	pop    %esi
f0102eb8:	5d                   	pop    %ebp
f0102eb9:	c3                   	ret    

f0102eba <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0102eba:	55                   	push   %ebp
f0102ebb:	89 e5                	mov    %esp,%ebp
f0102ebd:	83 ec 28             	sub    $0x28,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0102ec0:	c7 45 ec 88 13 00 00 	movl   $0x1388,-0x14(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0102ec7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0102ece:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int BSDSchedNiceVal = -100;				//arg#5 default
f0102ed5:	c7 45 e8 9c ff ff ff 	movl   $0xffffff9c,-0x18(%ebp)
//			assert(BSDSchedNiceVal >= -20 && BSDSchedNiceVal <= 20);
//		}
	}
#else
	{
		switch (number_of_arguments)
f0102edc:	8b 45 08             	mov    0x8(%ebp),%eax
f0102edf:	83 f8 02             	cmp    $0x2,%eax
f0102ee2:	74 3c                	je     f0102f20 <CreateEnv+0x66>
f0102ee4:	83 f8 03             	cmp    $0x3,%eax
f0102ee7:	75 1d                	jne    f0102f06 <CreateEnv+0x4c>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
f0102ee9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102eec:	83 c0 08             	add    $0x8,%eax
f0102eef:	8b 00                	mov    (%eax),%eax
f0102ef1:	83 ec 04             	sub    $0x4,%esp
f0102ef4:	6a 0a                	push   $0xa
f0102ef6:	6a 00                	push   $0x0
f0102ef8:	50                   	push   %eax
f0102ef9:	e8 9a f8 01 00       	call   f0122798 <strtol>
f0102efe:	83 c4 10             	add    $0x10,%esp
f0102f01:	89 45 f0             	mov    %eax,-0x10(%ebp)
			break;
f0102f04:	eb 1b                	jmp    f0102f21 <CreateEnv+0x67>
		case 2:
			break;
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0102f06:	83 ec 0c             	sub    $0xc,%esp
f0102f09:	68 a4 55 12 f0       	push   $0xf01255a4
f0102f0e:	e8 59 e0 ff ff       	call   f0100f6c <cprintf>
f0102f13:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0102f16:	b8 00 00 00 00       	mov    $0x0,%eax
f0102f1b:	e9 a7 00 00 00       	jmp    f0102fc7 <CreateEnv+0x10d>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
			break;
		case 2:
			break;
f0102f20:	90                   	nop
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
			return NULL;

			break;
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102f21:	83 ec 0c             	sub    $0xc,%esp
f0102f24:	6a 02                	push   $0x2
f0102f26:	e8 e5 b7 00 00       	call   f010e710 <isPageReplacmentAlgorithmLRU>
f0102f2b:	83 c4 10             	add    $0x10,%esp
f0102f2e:	85 c0                	test   %eax,%eax
f0102f30:	74 07                	je     f0102f39 <CreateEnv+0x7f>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
f0102f32:	c7 45 f4 f4 01 00 00 	movl   $0x1f4,-0xc(%ebp)
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0102f39:	83 7d f0 64          	cmpl   $0x64,-0x10(%ebp)
f0102f3d:	76 19                	jbe    f0102f58 <CreateEnv+0x9e>
f0102f3f:	68 14 56 12 f0       	push   $0xf0125614
f0102f44:	68 59 56 12 f0       	push   $0xf0125659
f0102f49:	68 c0 01 00 00       	push   $0x1c0
f0102f4e:	68 6e 56 12 f0       	push   $0xf012566e
f0102f53:	e8 c2 d3 ff ff       	call   f010031a <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0102f58:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f5b:	83 c0 04             	add    $0x4,%eax
f0102f5e:	8b 00                	mov    (%eax),%eax
f0102f60:	ff 75 f0             	pushl  -0x10(%ebp)
f0102f63:	ff 75 f4             	pushl  -0xc(%ebp)
f0102f66:	ff 75 ec             	pushl  -0x14(%ebp)
f0102f69:	50                   	push   %eax
f0102f6a:	e8 01 6b 00 00       	call   f0109a70 <env_create>
f0102f6f:	83 c4 10             	add    $0x10,%esp
f0102f72:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (BSDSchedNiceVal != -100)
f0102f75:	83 7d e8 9c          	cmpl   $0xffffff9c,-0x18(%ebp)
f0102f79:	74 49                	je     f0102fc4 <CreateEnv+0x10a>
	{
		cprintf("nice value = %d\n", BSDSchedNiceVal);
f0102f7b:	83 ec 08             	sub    $0x8,%esp
f0102f7e:	ff 75 e8             	pushl  -0x18(%ebp)
f0102f81:	68 82 56 12 f0       	push   $0xf0125682
f0102f86:	e8 e1 df ff ff       	call   f0100f6c <cprintf>
f0102f8b:	83 c4 10             	add    $0x10,%esp
		assert(BSDSchedNiceVal >= -20 && BSDSchedNiceVal <= 20);
f0102f8e:	83 7d e8 ec          	cmpl   $0xffffffec,-0x18(%ebp)
f0102f92:	7c 06                	jl     f0102f9a <CreateEnv+0xe0>
f0102f94:	83 7d e8 14          	cmpl   $0x14,-0x18(%ebp)
f0102f98:	7e 19                	jle    f0102fb3 <CreateEnv+0xf9>
f0102f9a:	68 94 56 12 f0       	push   $0xf0125694
f0102f9f:	68 59 56 12 f0       	push   $0xf0125659
f0102fa4:	68 c5 01 00 00       	push   $0x1c5
f0102fa9:	68 6e 56 12 f0       	push   $0xf012566e
f0102fae:	e8 67 d3 ff ff       	call   f010031a <_panic>
		env_set_nice(env, BSDSchedNiceVal);
f0102fb3:	83 ec 08             	sub    $0x8,%esp
f0102fb6:	ff 75 e8             	pushl  -0x18(%ebp)
f0102fb9:	ff 75 e4             	pushl  -0x1c(%ebp)
f0102fbc:	e8 e6 36 00 00       	call   f01066a7 <env_set_nice>
f0102fc1:	83 c4 10             	add    $0x10,%esp
	}
	return env;
f0102fc4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0102fc7:	c9                   	leave  
f0102fc8:	c3                   	ret    

f0102fc9 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0102fc9:	55                   	push   %ebp
f0102fca:	89 e5                	mov    %esp,%ebp
f0102fcc:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0102fcf:	83 ec 08             	sub    $0x8,%esp
f0102fd2:	ff 75 0c             	pushl  0xc(%ebp)
f0102fd5:	ff 75 08             	pushl  0x8(%ebp)
f0102fd8:	e8 dd fe ff ff       	call   f0102eba <CreateEnv>
f0102fdd:	83 c4 10             	add    $0x10,%esp
f0102fe0:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0102fe3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102fe7:	75 07                	jne    f0102ff0 <command_run_program+0x27>
f0102fe9:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fee:	eb 46                	jmp    f0103036 <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102ff0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102ff3:	8b 40 10             	mov    0x10(%eax),%eax
f0102ff6:	83 ec 08             	sub    $0x8,%esp
f0102ff9:	50                   	push   %eax
f0102ffa:	68 c4 56 12 f0       	push   $0xf01256c4
f0102fff:	e8 68 df ff ff       	call   f0100f6c <cprintf>
f0103004:	83 c4 10             	add    $0x10,%esp

	//[2] Place it in the NEW queue
	sched_new_env(env);
f0103007:	83 ec 0c             	sub    $0xc,%esp
f010300a:	ff 75 f4             	pushl  -0xc(%ebp)
f010300d:	e8 93 26 00 00       	call   f01056a5 <sched_new_env>
f0103012:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0103015:	c7 05 70 1a 5a f0 00 	movl   $0x0,0xf05a1a70
f010301c:	00 00 00 

	//[3] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_run_env(env->env_id);
f010301f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103022:	8b 40 10             	mov    0x10(%eax),%eax
f0103025:	83 ec 0c             	sub    $0xc,%esp
f0103028:	50                   	push   %eax
f0103029:	e8 cd 26 00 00       	call   f01056fb <sched_run_env>
f010302e:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103031:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103036:	c9                   	leave  
f0103037:	c3                   	ret    

f0103038 <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0103038:	55                   	push   %ebp
f0103039:	89 e5                	mov    %esp,%ebp
f010303b:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010303e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103041:	83 c0 04             	add    $0x4,%eax
f0103044:	8b 00                	mov    (%eax),%eax
f0103046:	83 ec 04             	sub    $0x4,%esp
f0103049:	6a 0a                	push   $0xa
f010304b:	6a 00                	push   $0x0
f010304d:	50                   	push   %eax
f010304e:	e8 45 f7 01 00       	call   f0122798 <strtol>
f0103053:	83 c4 10             	add    $0x10,%esp
f0103056:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0103059:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010305c:	83 ec 0c             	sub    $0xc,%esp
f010305f:	50                   	push   %eax
f0103060:	e8 fe 29 00 00       	call   f0105a63 <sched_kill_env>
f0103065:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103068:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010306d:	c9                   	leave  
f010306e:	c3                   	ret    

f010306f <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f010306f:	55                   	push   %ebp
f0103070:	89 e5                	mov    %esp,%ebp
f0103072:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0103075:	83 ec 08             	sub    $0x8,%esp
f0103078:	ff 75 0c             	pushl  0xc(%ebp)
f010307b:	ff 75 08             	pushl  0x8(%ebp)
f010307e:	e8 37 fe ff ff       	call   f0102eba <CreateEnv>
f0103083:	83 c4 10             	add    $0x10,%esp
f0103086:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0103089:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010308d:	75 07                	jne    f0103096 <commnad_load_env+0x27>
		return 0 ;
f010308f:	b8 00 00 00 00       	mov    $0x0,%eax
f0103094:	eb 2a                	jmp    f01030c0 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0103096:	83 ec 0c             	sub    $0xc,%esp
f0103099:	ff 75 f4             	pushl  -0xc(%ebp)
f010309c:	e8 04 26 00 00       	call   f01056a5 <sched_new_env>
f01030a1:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f01030a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01030a7:	8b 40 10             	mov    0x10(%eax),%eax
f01030aa:	83 ec 08             	sub    $0x8,%esp
f01030ad:	50                   	push   %eax
f01030ae:	68 c4 56 12 f0       	push   $0xf01256c4
f01030b3:	e8 b4 de ff ff       	call   f0100f6c <cprintf>
f01030b8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01030bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030c0:	c9                   	leave  
f01030c1:	c3                   	ret    

f01030c2 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f01030c2:	55                   	push   %ebp
f01030c3:	89 e5                	mov    %esp,%ebp
f01030c5:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f01030c8:	c7 05 70 1a 5a f0 00 	movl   $0x0,0xf05a1a70
f01030cf:	00 00 00 
	sched_run_all();
f01030d2:	e8 7b 2f 00 00       	call   f0106052 <sched_run_all>

	return 0 ;
f01030d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030dc:	c9                   	leave  
f01030dd:	c3                   	ret    

f01030de <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f01030de:	55                   	push   %ebp
f01030df:	89 e5                	mov    %esp,%ebp
f01030e1:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f01030e4:	e8 38 2d 00 00       	call   f0105e21 <sched_print_all>

	return 0 ;
f01030e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030ee:	c9                   	leave  
f01030ef:	c3                   	ret    

f01030f0 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f01030f0:	55                   	push   %ebp
f01030f1:	89 e5                	mov    %esp,%ebp
f01030f3:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f01030f6:	e8 ec 2f 00 00       	call   f01060e7 <sched_kill_all>

	return 0 ;
f01030fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103100:	c9                   	leave  
f0103101:	c3                   	ret    

f0103102 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0103102:	55                   	push   %ebp
f0103103:	89 e5                	mov    %esp,%ebp
f0103105:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0103108:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010310c:	7f 1a                	jg     f0103128 <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f010310e:	83 ec 0c             	sub    $0xc,%esp
f0103111:	68 dc 56 12 f0       	push   $0xf01256dc
f0103116:	e8 51 de ff ff       	call   f0100f6c <cprintf>
f010311b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010311e:	b8 00 00 00 00       	mov    $0x0,%eax
f0103123:	e9 83 00 00 00       	jmp    f01031ab <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0103128:	8b 45 0c             	mov    0xc(%ebp),%eax
f010312b:	83 c0 04             	add    $0x4,%eax
f010312e:	8b 00                	mov    (%eax),%eax
f0103130:	83 ec 04             	sub    $0x4,%esp
f0103133:	6a 0a                	push   $0xa
f0103135:	6a 00                	push   $0x0
f0103137:	50                   	push   %eax
f0103138:	e8 5b f6 01 00       	call   f0122798 <strtol>
f010313d:	83 c4 10             	add    $0x10,%esp
f0103140:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0103143:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103147:	75 20                	jne    f0103169 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0103149:	83 ec 0c             	sub    $0xc,%esp
f010314c:	ff 75 f4             	pushl  -0xc(%ebp)
f010314f:	e8 31 b5 00 00       	call   f010e685 <setPageReplacmentAlgorithmLRU>
f0103154:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0103157:	83 ec 0c             	sub    $0xc,%esp
f010315a:	68 3c 57 12 f0       	push   $0xf012573c
f010315f:	e8 08 de ff ff       	call   f0100f6c <cprintf>
f0103164:	83 c4 10             	add    $0x10,%esp
f0103167:	eb 3d                	jmp    f01031a6 <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0103169:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010316d:	75 20                	jne    f010318f <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f010316f:	83 ec 0c             	sub    $0xc,%esp
f0103172:	ff 75 f4             	pushl  -0xc(%ebp)
f0103175:	e8 0b b5 00 00       	call   f010e685 <setPageReplacmentAlgorithmLRU>
f010317a:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f010317d:	83 ec 0c             	sub    $0xc,%esp
f0103180:	68 80 57 12 f0       	push   $0xf0125780
f0103185:	e8 e2 dd ff ff       	call   f0100f6c <cprintf>
f010318a:	83 c4 10             	add    $0x10,%esp
f010318d:	eb 17                	jmp    f01031a6 <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f010318f:	83 ec 0c             	sub    $0xc,%esp
f0103192:	68 c0 57 12 f0       	push   $0xf01257c0
f0103197:	e8 d0 dd ff ff       	call   f0100f6c <cprintf>
f010319c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010319f:	b8 00 00 00 00       	mov    $0x0,%eax
f01031a4:	eb 05                	jmp    f01031ab <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f01031a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01031ab:	c9                   	leave  
f01031ac:	c3                   	ret    

f01031ad <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f01031ad:	55                   	push   %ebp
f01031ae:	89 e5                	mov    %esp,%ebp
f01031b0:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f01031b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01031b6:	83 c0 04             	add    $0x4,%eax
f01031b9:	8b 00                	mov    (%eax),%eax
f01031bb:	83 ec 04             	sub    $0x4,%esp
f01031be:	6a 0a                	push   $0xa
f01031c0:	6a 00                	push   $0x0
f01031c2:	50                   	push   %eax
f01031c3:	e8 d0 f5 01 00       	call   f0122798 <strtol>
f01031c8:	83 c4 10             	add    $0x10,%esp
f01031cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f01031ce:	83 ec 0c             	sub    $0xc,%esp
f01031d1:	ff 75 f4             	pushl  -0xc(%ebp)
f01031d4:	e8 1f b5 00 00       	call   f010e6f8 <setPageReplacmentAlgorithmNchanceCLOCK>
f01031d9:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f01031dc:	83 ec 0c             	sub    $0xc,%esp
f01031df:	68 14 58 12 f0       	push   $0xf0125814
f01031e4:	e8 83 dd ff ff       	call   f0100f6c <cprintf>
f01031e9:	83 c4 10             	add    $0x10,%esp
	return 0;
f01031ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01031f1:	c9                   	leave  
f01031f2:	c3                   	ret    

f01031f3 <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f01031f3:	55                   	push   %ebp
f01031f4:	89 e5                	mov    %esp,%ebp
f01031f6:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f01031f9:	e8 ba b4 00 00       	call   f010e6b8 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f01031fe:	83 ec 0c             	sub    $0xc,%esp
f0103201:	68 48 58 12 f0       	push   $0xf0125848
f0103206:	e8 61 dd ff ff       	call   f0100f6c <cprintf>
f010320b:	83 c4 10             	add    $0x10,%esp
	return 0;
f010320e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103213:	c9                   	leave  
f0103214:	c3                   	ret    

f0103215 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0103215:	55                   	push   %ebp
f0103216:	89 e5                	mov    %esp,%ebp
f0103218:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f010321b:	e8 a8 b4 00 00       	call   f010e6c8 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0103220:	83 ec 0c             	sub    $0xc,%esp
f0103223:	68 74 58 12 f0       	push   $0xf0125874
f0103228:	e8 3f dd ff ff       	call   f0100f6c <cprintf>
f010322d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103230:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103235:	c9                   	leave  
f0103236:	c3                   	ret    

f0103237 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0103237:	55                   	push   %ebp
f0103238:	89 e5                	mov    %esp,%ebp
f010323a:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f010323d:	e8 96 b4 00 00       	call   f010e6d8 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0103242:	83 ec 0c             	sub    $0xc,%esp
f0103245:	68 9c 58 12 f0       	push   $0xf012589c
f010324a:	e8 1d dd ff ff       	call   f0100f6c <cprintf>
f010324f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103252:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103257:	c9                   	leave  
f0103258:	c3                   	ret    

f0103259 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0103259:	55                   	push   %ebp
f010325a:	89 e5                	mov    %esp,%ebp
f010325c:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f010325f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103262:	83 c0 04             	add    $0x4,%eax
f0103265:	8b 00                	mov    (%eax),%eax
f0103267:	83 ec 04             	sub    $0x4,%esp
f010326a:	6a 0a                	push   $0xa
f010326c:	6a 00                	push   $0x0
f010326e:	50                   	push   %eax
f010326f:	e8 24 f5 01 00       	call   f0122798 <strtol>
f0103274:	83 c4 10             	add    $0x10,%esp
f0103277:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f010327a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f010327e:	83 ec 0c             	sub    $0xc,%esp
f0103281:	50                   	push   %eax
f0103282:	e8 4e 37 00 00       	call   f01069d5 <sched_init_RR>
f0103287:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f010328a:	a0 84 17 5a f0       	mov    0xf05a1784,%al
f010328f:	0f b6 c0             	movzbl %al,%eax
f0103292:	83 ec 08             	sub    $0x8,%esp
f0103295:	50                   	push   %eax
f0103296:	68 d0 58 12 f0       	push   $0xf01258d0
f010329b:	e8 cc dc ff ff       	call   f0100f6c <cprintf>
f01032a0:	83 c4 10             	add    $0x10,%esp
	return 0;
f01032a3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01032a8:	c9                   	leave  
f01032a9:	c3                   	ret    

f01032aa <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f01032aa:	55                   	push   %ebp
f01032ab:	89 e5                	mov    %esp,%ebp
f01032ad:	53                   	push   %ebx
f01032ae:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f01032b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01032b4:	83 c0 04             	add    $0x4,%eax
f01032b7:	8b 00                	mov    (%eax),%eax
f01032b9:	83 ec 04             	sub    $0x4,%esp
f01032bc:	6a 0a                	push   $0xa
f01032be:	6a 00                	push   $0x0
f01032c0:	50                   	push   %eax
f01032c1:	e8 d2 f4 01 00       	call   f0122798 <strtol>
f01032c6:	83 c4 10             	add    $0x10,%esp
f01032c9:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f01032cc:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f01032d3:	eb 2e                	jmp    f0103303 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f01032d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032d8:	8d 58 fe             	lea    -0x2(%eax),%ebx
f01032db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032de:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01032e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01032e8:	01 d0                	add    %edx,%eax
f01032ea:	8b 00                	mov    (%eax),%eax
f01032ec:	83 ec 04             	sub    $0x4,%esp
f01032ef:	6a 0a                	push   $0xa
f01032f1:	6a 00                	push   $0x0
f01032f3:	50                   	push   %eax
f01032f4:	e8 9f f4 01 00       	call   f0122798 <strtol>
f01032f9:	83 c4 10             	add    $0x10,%esp
f01032fc:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0103300:	ff 45 f4             	incl   -0xc(%ebp)
f0103303:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103306:	3b 45 08             	cmp    0x8(%ebp),%eax
f0103309:	7c ca                	jl     f01032d5 <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f010330b:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f010330f:	83 ec 08             	sub    $0x8,%esp
f0103312:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0103315:	52                   	push   %edx
f0103316:	50                   	push   %eax
f0103317:	e8 32 37 00 00       	call   f0106a4e <sched_init_MLFQ>
f010331c:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f010331f:	83 ec 0c             	sub    $0xc,%esp
f0103322:	68 08 59 12 f0       	push   $0xf0125908
f0103327:	e8 40 dc ff ff       	call   f0100f6c <cprintf>
f010332c:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010332f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103336:	eb 21                	jmp    f0103359 <command_sch_MLFQ+0xaf>
	{
		cprintf("%d   ", quantums[i]) ;
f0103338:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010333b:	05 84 17 5a f0       	add    $0xf05a1784,%eax
f0103340:	8a 00                	mov    (%eax),%al
f0103342:	0f b6 c0             	movzbl %al,%eax
f0103345:	83 ec 08             	sub    $0x8,%esp
f0103348:	50                   	push   %eax
f0103349:	68 35 59 12 f0       	push   $0xf0125935
f010334e:	e8 19 dc ff ff       	call   f0100f6c <cprintf>
f0103353:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0103356:	ff 45 f0             	incl   -0x10(%ebp)
f0103359:	a0 00 1b 5a f0       	mov    0xf05a1b00,%al
f010335e:	0f b6 c0             	movzbl %al,%eax
f0103361:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0103364:	7f d2                	jg     f0103338 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f0103366:	83 ec 0c             	sub    $0xc,%esp
f0103369:	68 75 54 12 f0       	push   $0xf0125475
f010336e:	e8 f9 db ff ff       	call   f0100f6c <cprintf>
f0103373:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103376:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010337b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010337e:	c9                   	leave  
f010337f:	c3                   	ret    

f0103380 <command_sch_BSD>:
int command_sch_BSD(int number_of_arguments, char **arguments)
{
f0103380:	55                   	push   %ebp
f0103381:	89 e5                	mov    %esp,%ebp
f0103383:	83 ec 18             	sub    $0x18,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0103386:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103389:	83 c0 04             	add    $0x4,%eax
f010338c:	8b 00                	mov    (%eax),%eax
f010338e:	83 ec 04             	sub    $0x4,%esp
f0103391:	6a 0a                	push   $0xa
f0103393:	6a 00                	push   $0x0
f0103395:	50                   	push   %eax
f0103396:	e8 fd f3 01 00       	call   f0122798 <strtol>
f010339b:	83 c4 10             	add    $0x10,%esp
f010339e:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint8 quantum = strtol(arguments[2], NULL, 10);
f01033a1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01033a4:	83 c0 08             	add    $0x8,%eax
f01033a7:	8b 00                	mov    (%eax),%eax
f01033a9:	83 ec 04             	sub    $0x4,%esp
f01033ac:	6a 0a                	push   $0xa
f01033ae:	6a 00                	push   $0x0
f01033b0:	50                   	push   %eax
f01033b1:	e8 e2 f3 01 00       	call   f0122798 <strtol>
f01033b6:	83 c4 10             	add    $0x10,%esp
f01033b9:	88 45 f6             	mov    %al,-0xa(%ebp)

	sched_init_BSD(numOfLevels, quantum);
f01033bc:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f01033c0:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01033c4:	83 ec 08             	sub    $0x8,%esp
f01033c7:	52                   	push   %edx
f01033c8:	50                   	push   %eax
f01033c9:	e8 a8 36 00 00       	call   f0106a76 <sched_init_BSD>
f01033ce:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", numOfLevels, quantum);
f01033d1:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f01033d5:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01033d9:	83 ec 04             	sub    $0x4,%esp
f01033dc:	52                   	push   %edx
f01033dd:	50                   	push   %eax
f01033de:	68 3c 59 12 f0       	push   $0xf012593c
f01033e3:	e8 84 db ff ff       	call   f0100f6c <cprintf>
f01033e8:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01033eb:	83 ec 0c             	sub    $0xc,%esp
f01033ee:	68 75 54 12 f0       	push   $0xf0125475
f01033f3:	e8 74 db ff ff       	call   f0100f6c <cprintf>
f01033f8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01033fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103400:	c9                   	leave  
f0103401:	c3                   	ret    

f0103402 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f0103402:	55                   	push   %ebp
f0103403:	89 e5                	mov    %esp,%ebp
f0103405:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0103408:	e8 0b 33 00 00       	call   f0106718 <isSchedMethodMLFQ>
f010340d:	85 c0                	test   %eax,%eax
f010340f:	74 59                	je     f010346a <command_print_sch_method+0x68>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f0103411:	83 ec 0c             	sub    $0xc,%esp
f0103414:	68 78 59 12 f0       	push   $0xf0125978
f0103419:	e8 4e db ff ff       	call   f0100f6c <cprintf>
f010341e:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0103421:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103428:	eb 21                	jmp    f010344b <command_print_sch_method+0x49>
		{
			cprintf("%d   ", quantums[i]) ;
f010342a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010342d:	05 84 17 5a f0       	add    $0xf05a1784,%eax
f0103432:	8a 00                	mov    (%eax),%al
f0103434:	0f b6 c0             	movzbl %al,%eax
f0103437:	83 ec 08             	sub    $0x8,%esp
f010343a:	50                   	push   %eax
f010343b:	68 35 59 12 f0       	push   $0xf0125935
f0103440:	e8 27 db ff ff       	call   f0100f6c <cprintf>
f0103445:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0103448:	ff 45 f4             	incl   -0xc(%ebp)
f010344b:	a0 00 1b 5a f0       	mov    0xf05a1b00,%al
f0103450:	0f b6 c0             	movzbl %al,%eax
f0103453:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103456:	7f d2                	jg     f010342a <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0103458:	83 ec 0c             	sub    $0xc,%esp
f010345b:	68 75 54 12 f0       	push   $0xf0125475
f0103460:	e8 07 db ff ff       	call   f0100f6c <cprintf>
f0103465:	83 c4 10             	add    $0x10,%esp
f0103468:	eb 61                	jmp    f01034cb <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodRR())
f010346a:	e8 8f 32 00 00       	call   f01066fe <isSchedMethodRR>
f010346f:	85 c0                	test   %eax,%eax
f0103471:	74 1b                	je     f010348e <command_print_sch_method+0x8c>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0103473:	a0 84 17 5a f0       	mov    0xf05a1784,%al
f0103478:	0f b6 c0             	movzbl %al,%eax
f010347b:	83 ec 08             	sub    $0x8,%esp
f010347e:	50                   	push   %eax
f010347f:	68 ac 59 12 f0       	push   $0xf01259ac
f0103484:	e8 e3 da ff ff       	call   f0100f6c <cprintf>
f0103489:	83 c4 10             	add    $0x10,%esp
f010348c:	eb 3d                	jmp    f01034cb <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodBSD())
f010348e:	e8 a0 32 00 00       	call   f0106733 <isSchedMethodBSD>
f0103493:	85 c0                	test   %eax,%eax
f0103495:	74 24                	je     f01034bb <command_print_sch_method+0xb9>
	{
		cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", num_of_ready_queues, quantums[0]);
f0103497:	a0 84 17 5a f0       	mov    0xf05a1784,%al
f010349c:	0f b6 d0             	movzbl %al,%edx
f010349f:	a0 00 1b 5a f0       	mov    0xf05a1b00,%al
f01034a4:	0f b6 c0             	movzbl %al,%eax
f01034a7:	83 ec 04             	sub    $0x4,%esp
f01034aa:	52                   	push   %edx
f01034ab:	50                   	push   %eax
f01034ac:	68 3c 59 12 f0       	push   $0xf012593c
f01034b1:	e8 b6 da ff ff       	call   f0100f6c <cprintf>
f01034b6:	83 c4 10             	add    $0x10,%esp
f01034b9:	eb 10                	jmp    f01034cb <command_print_sch_method+0xc9>
	}
	else
		cprintf("Current scheduler method is UNDEFINED\n");
f01034bb:	83 ec 0c             	sub    $0xc,%esp
f01034be:	68 e8 59 12 f0       	push   $0xf01259e8
f01034c3:	e8 a4 da ff ff       	call   f0100f6c <cprintf>
f01034c8:	83 c4 10             	add    $0x10,%esp

	return 0;
f01034cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01034d0:	c9                   	leave  
f01034d1:	c3                   	ret    

f01034d2 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f01034d2:	55                   	push   %ebp
f01034d3:	89 e5                	mov    %esp,%ebp
f01034d5:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f01034d8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034db:	83 c0 04             	add    $0x4,%eax
f01034de:	8b 00                	mov    (%eax),%eax
f01034e0:	83 ec 04             	sub    $0x4,%esp
f01034e3:	6a 0a                	push   $0xa
f01034e5:	6a 00                	push   $0x0
f01034e7:	50                   	push   %eax
f01034e8:	e8 ab f2 01 00       	call   f0122798 <strtol>
f01034ed:	83 c4 10             	add    $0x10,%esp
f01034f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f01034f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01034f6:	0f b6 c0             	movzbl %al,%eax
f01034f9:	83 ec 0c             	sub    $0xc,%esp
f01034fc:	50                   	push   %eax
f01034fd:	e8 93 e0 01 00       	call   f0121595 <chksch>
f0103502:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0103505:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103509:	75 12                	jne    f010351d <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f010350b:	83 ec 0c             	sub    $0xc,%esp
f010350e:	68 10 5a 12 f0       	push   $0xf0125a10
f0103513:	e8 54 da ff ff       	call   f0100f6c <cprintf>
f0103518:	83 c4 10             	add    $0x10,%esp
f010351b:	eb 16                	jmp    f0103533 <command_sch_test+0x61>
	else if (status == 1)
f010351d:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103521:	75 10                	jne    f0103533 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f0103523:	83 ec 0c             	sub    $0xc,%esp
f0103526:	68 38 5a 12 f0       	push   $0xf0125a38
f010352b:	e8 3c da ff ff       	call   f0100f6c <cprintf>
f0103530:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103533:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103538:	c9                   	leave  
f0103539:	c3                   	ret    

f010353a <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f010353a:	55                   	push   %ebp
f010353b:	89 e5                	mov    %esp,%ebp
f010353d:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0103540:	e8 e1 b1 00 00       	call   f010e726 <isPageReplacmentAlgorithmCLOCK>
f0103545:	85 c0                	test   %eax,%eax
f0103547:	74 15                	je     f010355e <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f0103549:	83 ec 0c             	sub    $0xc,%esp
f010354c:	68 5c 5a 12 f0       	push   $0xf0125a5c
f0103551:	e8 16 da ff ff       	call   f0100f6c <cprintf>
f0103556:	83 c4 10             	add    $0x10,%esp
f0103559:	e9 8c 00 00 00       	jmp    f01035ea <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010355e:	83 ec 0c             	sub    $0xc,%esp
f0103561:	6a 01                	push   $0x1
f0103563:	e8 a8 b1 00 00       	call   f010e710 <isPageReplacmentAlgorithmLRU>
f0103568:	83 c4 10             	add    $0x10,%esp
f010356b:	85 c0                	test   %eax,%eax
f010356d:	74 12                	je     f0103581 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f010356f:	83 ec 0c             	sub    $0xc,%esp
f0103572:	68 84 5a 12 f0       	push   $0xf0125a84
f0103577:	e8 f0 d9 ff ff       	call   f0100f6c <cprintf>
f010357c:	83 c4 10             	add    $0x10,%esp
f010357f:	eb 69                	jmp    f01035ea <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0103581:	83 ec 0c             	sub    $0xc,%esp
f0103584:	6a 02                	push   $0x2
f0103586:	e8 85 b1 00 00       	call   f010e710 <isPageReplacmentAlgorithmLRU>
f010358b:	83 c4 10             	add    $0x10,%esp
f010358e:	85 c0                	test   %eax,%eax
f0103590:	74 12                	je     f01035a4 <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0103592:	83 ec 0c             	sub    $0xc,%esp
f0103595:	68 c4 5a 12 f0       	push   $0xf0125ac4
f010359a:	e8 cd d9 ff ff       	call   f0100f6c <cprintf>
f010359f:	83 c4 10             	add    $0x10,%esp
f01035a2:	eb 46                	jmp    f01035ea <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f01035a4:	e8 98 b1 00 00       	call   f010e741 <isPageReplacmentAlgorithmFIFO>
f01035a9:	85 c0                	test   %eax,%eax
f01035ab:	74 12                	je     f01035bf <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f01035ad:	83 ec 0c             	sub    $0xc,%esp
f01035b0:	68 00 5b 12 f0       	push   $0xf0125b00
f01035b5:	e8 b2 d9 ff ff       	call   f0100f6c <cprintf>
f01035ba:	83 c4 10             	add    $0x10,%esp
f01035bd:	eb 2b                	jmp    f01035ea <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f01035bf:	e8 98 b1 00 00       	call   f010e75c <isPageReplacmentAlgorithmModifiedCLOCK>
f01035c4:	85 c0                	test   %eax,%eax
f01035c6:	74 12                	je     f01035da <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f01035c8:	83 ec 0c             	sub    $0xc,%esp
f01035cb:	68 24 5b 12 f0       	push   $0xf0125b24
f01035d0:	e8 97 d9 ff ff       	call   f0100f6c <cprintf>
f01035d5:	83 c4 10             	add    $0x10,%esp
f01035d8:	eb 10                	jmp    f01035ea <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f01035da:	83 ec 0c             	sub    $0xc,%esp
f01035dd:	68 54 5b 12 f0       	push   $0xf0125b54
f01035e2:	e8 85 d9 ff ff       	call   f0100f6c <cprintf>
f01035e7:	83 c4 10             	add    $0x10,%esp

	return 0;
f01035ea:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035ef:	c9                   	leave  
f01035f0:	c3                   	ret    

f01035f1 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01035f1:	55                   	push   %ebp
f01035f2:	89 e5                	mov    %esp,%ebp
f01035f4:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f01035f7:	e8 bf ef ff ff       	call   f01025bb <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f01035fc:	83 ec 0c             	sub    $0xc,%esp
f01035ff:	68 80 5b 12 f0       	push   $0xf0125b80
f0103604:	e8 63 d9 ff ff       	call   f0100f6c <cprintf>
f0103609:	83 c4 10             	add    $0x10,%esp
	return 0;
f010360c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103611:	c9                   	leave  
f0103612:	c3                   	ret    

f0103613 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0103613:	55                   	push   %ebp
f0103614:	89 e5                	mov    %esp,%ebp
f0103616:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0103619:	e8 ad ef ff ff       	call   f01025cb <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f010361e:	83 ec 0c             	sub    $0xc,%esp
f0103621:	68 b0 5b 12 f0       	push   $0xf0125bb0
f0103626:	e8 41 d9 ff ff       	call   f0100f6c <cprintf>
f010362b:	83 c4 10             	add    $0x10,%esp
	return 0;
f010362e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103633:	c9                   	leave  
f0103634:	c3                   	ret    

f0103635 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0103635:	55                   	push   %ebp
f0103636:	89 e5                	mov    %esp,%ebp
f0103638:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f010363b:	e8 9b ef ff ff       	call   f01025db <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f0103640:	83 ec 0c             	sub    $0xc,%esp
f0103643:	68 e0 5b 12 f0       	push   $0xf0125be0
f0103648:	e8 1f d9 ff ff       	call   f0100f6c <cprintf>
f010364d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103650:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103655:	c9                   	leave  
f0103656:	c3                   	ret    

f0103657 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0103657:	55                   	push   %ebp
f0103658:	89 e5                	mov    %esp,%ebp
f010365a:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f010365d:	e8 89 ef ff ff       	call   f01025eb <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f0103662:	83 ec 0c             	sub    $0xc,%esp
f0103665:	68 10 5c 12 f0       	push   $0xf0125c10
f010366a:	e8 fd d8 ff ff       	call   f0100f6c <cprintf>
f010366f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103672:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103677:	c9                   	leave  
f0103678:	c3                   	ret    

f0103679 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f0103679:	55                   	push   %ebp
f010367a:	89 e5                	mov    %esp,%ebp
f010367c:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f010367f:	e8 77 ef ff ff       	call   f01025fb <isUHeapPlacementStrategyFIRSTFIT>
f0103684:	84 c0                	test   %al,%al
f0103686:	74 12                	je     f010369a <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0103688:	83 ec 0c             	sub    $0xc,%esp
f010368b:	68 40 5c 12 f0       	push   $0xf0125c40
f0103690:	e8 d7 d8 ff ff       	call   f0100f6c <cprintf>
f0103695:	83 c4 10             	add    $0x10,%esp
f0103698:	eb 61                	jmp    f01036fb <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f010369a:	e8 71 ef ff ff       	call   f0102610 <isUHeapPlacementStrategyBESTFIT>
f010369f:	84 c0                	test   %al,%al
f01036a1:	74 12                	je     f01036b5 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f01036a3:	83 ec 0c             	sub    $0xc,%esp
f01036a6:	68 6c 5c 12 f0       	push   $0xf0125c6c
f01036ab:	e8 bc d8 ff ff       	call   f0100f6c <cprintf>
f01036b0:	83 c4 10             	add    $0x10,%esp
f01036b3:	eb 46                	jmp    f01036fb <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f01036b5:	e8 6b ef ff ff       	call   f0102625 <isUHeapPlacementStrategyNEXTFIT>
f01036ba:	84 c0                	test   %al,%al
f01036bc:	74 12                	je     f01036d0 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f01036be:	83 ec 0c             	sub    $0xc,%esp
f01036c1:	68 98 5c 12 f0       	push   $0xf0125c98
f01036c6:	e8 a1 d8 ff ff       	call   f0100f6c <cprintf>
f01036cb:	83 c4 10             	add    $0x10,%esp
f01036ce:	eb 2b                	jmp    f01036fb <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f01036d0:	e8 65 ef ff ff       	call   f010263a <isUHeapPlacementStrategyWORSTFIT>
f01036d5:	84 c0                	test   %al,%al
f01036d7:	74 12                	je     f01036eb <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f01036d9:	83 ec 0c             	sub    $0xc,%esp
f01036dc:	68 c4 5c 12 f0       	push   $0xf0125cc4
f01036e1:	e8 86 d8 ff ff       	call   f0100f6c <cprintf>
f01036e6:	83 c4 10             	add    $0x10,%esp
f01036e9:	eb 10                	jmp    f01036fb <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f01036eb:	83 ec 0c             	sub    $0xc,%esp
f01036ee:	68 f0 5c 12 f0       	push   $0xf0125cf0
f01036f3:	e8 74 d8 ff ff       	call   f0100f6c <cprintf>
f01036f8:	83 c4 10             	add    $0x10,%esp

	return 0;
f01036fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103700:	c9                   	leave  
f0103701:	c3                   	ret    

f0103702 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f0103702:	55                   	push   %ebp
f0103703:	89 e5                	mov    %esp,%ebp
f0103705:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0103708:	e8 f6 ed ff ff       	call   f0102503 <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010370d:	83 ec 0c             	sub    $0xc,%esp
f0103710:	68 1c 5d 12 f0       	push   $0xf0125d1c
f0103715:	e8 52 d8 ff ff       	call   f0100f6c <cprintf>
f010371a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010371d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103722:	c9                   	leave  
f0103723:	c3                   	ret    

f0103724 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0103724:	55                   	push   %ebp
f0103725:	89 e5                	mov    %esp,%ebp
f0103727:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f010372a:	e8 e4 ed ff ff       	call   f0102513 <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010372f:	83 ec 0c             	sub    $0xc,%esp
f0103732:	68 1c 5d 12 f0       	push   $0xf0125d1c
f0103737:	e8 30 d8 ff ff       	call   f0100f6c <cprintf>
f010373c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010373f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103744:	c9                   	leave  
f0103745:	c3                   	ret    

f0103746 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0103746:	55                   	push   %ebp
f0103747:	89 e5                	mov    %esp,%ebp
f0103749:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f010374c:	e8 d2 ed ff ff       	call   f0102523 <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f0103751:	83 ec 0c             	sub    $0xc,%esp
f0103754:	68 50 5d 12 f0       	push   $0xf0125d50
f0103759:	e8 0e d8 ff ff       	call   f0100f6c <cprintf>
f010375e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103761:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103766:	c9                   	leave  
f0103767:	c3                   	ret    

f0103768 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0103768:	55                   	push   %ebp
f0103769:	89 e5                	mov    %esp,%ebp
f010376b:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f010376e:	e8 c0 ed ff ff       	call   f0102533 <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f0103773:	83 ec 0c             	sub    $0xc,%esp
f0103776:	68 80 5d 12 f0       	push   $0xf0125d80
f010377b:	e8 ec d7 ff ff       	call   f0100f6c <cprintf>
f0103780:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103783:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103788:	c9                   	leave  
f0103789:	c3                   	ret    

f010378a <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f010378a:	55                   	push   %ebp
f010378b:	89 e5                	mov    %esp,%ebp
f010378d:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f0103790:	e8 ae ed ff ff       	call   f0102543 <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0103795:	83 ec 0c             	sub    $0xc,%esp
f0103798:	68 b0 5d 12 f0       	push   $0xf0125db0
f010379d:	e8 ca d7 ff ff       	call   f0100f6c <cprintf>
f01037a2:	83 c4 10             	add    $0x10,%esp
	return 0;
f01037a5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01037aa:	c9                   	leave  
f01037ab:	c3                   	ret    

f01037ac <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f01037ac:	55                   	push   %ebp
f01037ad:	89 e5                	mov    %esp,%ebp
f01037af:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f01037b2:	e8 9c ed ff ff       	call   f0102553 <isKHeapPlacementStrategyCONTALLOC>
f01037b7:	84 c0                	test   %al,%al
f01037b9:	74 12                	je     f01037cd <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f01037bb:	83 ec 0c             	sub    $0xc,%esp
f01037be:	68 e4 5d 12 f0       	push   $0xf0125de4
f01037c3:	e8 a4 d7 ff ff       	call   f0100f6c <cprintf>
f01037c8:	83 c4 10             	add    $0x10,%esp
f01037cb:	eb 7c                	jmp    f0103849 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01037cd:	e8 95 ed ff ff       	call   f0102567 <isKHeapPlacementStrategyFIRSTFIT>
f01037d2:	84 c0                	test   %al,%al
f01037d4:	74 12                	je     f01037e8 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f01037d6:	83 ec 0c             	sub    $0xc,%esp
f01037d9:	68 20 5e 12 f0       	push   $0xf0125e20
f01037de:	e8 89 d7 ff ff       	call   f0100f6c <cprintf>
f01037e3:	83 c4 10             	add    $0x10,%esp
f01037e6:	eb 61                	jmp    f0103849 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f01037e8:	e8 8f ed ff ff       	call   f010257c <isKHeapPlacementStrategyBESTFIT>
f01037ed:	84 c0                	test   %al,%al
f01037ef:	74 12                	je     f0103803 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f01037f1:	83 ec 0c             	sub    $0xc,%esp
f01037f4:	68 50 5e 12 f0       	push   $0xf0125e50
f01037f9:	e8 6e d7 ff ff       	call   f0100f6c <cprintf>
f01037fe:	83 c4 10             	add    $0x10,%esp
f0103801:	eb 46                	jmp    f0103849 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0103803:	e8 89 ed ff ff       	call   f0102591 <isKHeapPlacementStrategyNEXTFIT>
f0103808:	84 c0                	test   %al,%al
f010380a:	74 12                	je     f010381e <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010380c:	83 ec 0c             	sub    $0xc,%esp
f010380f:	68 7c 5e 12 f0       	push   $0xf0125e7c
f0103814:	e8 53 d7 ff ff       	call   f0100f6c <cprintf>
f0103819:	83 c4 10             	add    $0x10,%esp
f010381c:	eb 2b                	jmp    f0103849 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f010381e:	e8 83 ed ff ff       	call   f01025a6 <isKHeapPlacementStrategyWORSTFIT>
f0103823:	84 c0                	test   %al,%al
f0103825:	74 12                	je     f0103839 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f0103827:	83 ec 0c             	sub    $0xc,%esp
f010382a:	68 a8 5e 12 f0       	push   $0xf0125ea8
f010382f:	e8 38 d7 ff ff       	call   f0100f6c <cprintf>
f0103834:	83 c4 10             	add    $0x10,%esp
f0103837:	eb 10                	jmp    f0103849 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f0103839:	83 ec 0c             	sub    $0xc,%esp
f010383c:	68 d8 5e 12 f0       	push   $0xf0125ed8
f0103841:	e8 26 d7 ff ff       	call   f0100f6c <cprintf>
f0103846:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103849:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010384e:	c9                   	leave  
f010384f:	c3                   	ret    

f0103850 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f0103850:	55                   	push   %ebp
f0103851:	89 e5                	mov    %esp,%ebp
f0103853:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0103856:	e8 78 af 00 00       	call   f010e7d3 <isBufferingEnabled>
f010385b:	84 c0                	test   %al,%al
f010385d:	75 12                	jne    f0103871 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f010385f:	83 ec 0c             	sub    $0xc,%esp
f0103862:	68 08 5f 12 f0       	push   $0xf0125f08
f0103867:	e8 00 d7 ff ff       	call   f0100f6c <cprintf>
f010386c:	83 c4 10             	add    $0x10,%esp
f010386f:	eb 1d                	jmp    f010388e <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f0103871:	83 ec 0c             	sub    $0xc,%esp
f0103874:	6a 00                	push   $0x0
f0103876:	e8 32 af 00 00       	call   f010e7ad <enableModifiedBuffer>
f010387b:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f010387e:	83 ec 0c             	sub    $0xc,%esp
f0103881:	68 44 5f 12 f0       	push   $0xf0125f44
f0103886:	e8 e1 d6 ff ff       	call   f0100f6c <cprintf>
f010388b:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010388e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103893:	c9                   	leave  
f0103894:	c3                   	ret    

f0103895 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0103895:	55                   	push   %ebp
f0103896:	89 e5                	mov    %esp,%ebp
f0103898:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010389b:	e8 33 af 00 00       	call   f010e7d3 <isBufferingEnabled>
f01038a0:	84 c0                	test   %al,%al
f01038a2:	75 12                	jne    f01038b6 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01038a4:	83 ec 0c             	sub    $0xc,%esp
f01038a7:	68 08 5f 12 f0       	push   $0xf0125f08
f01038ac:	e8 bb d6 ff ff       	call   f0100f6c <cprintf>
f01038b1:	83 c4 10             	add    $0x10,%esp
f01038b4:	eb 1d                	jmp    f01038d3 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f01038b6:	83 ec 0c             	sub    $0xc,%esp
f01038b9:	6a 01                	push   $0x1
f01038bb:	e8 ed ae 00 00       	call   f010e7ad <enableModifiedBuffer>
f01038c0:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f01038c3:	83 ec 0c             	sub    $0xc,%esp
f01038c6:	68 68 5f 12 f0       	push   $0xf0125f68
f01038cb:	e8 9c d6 ff ff       	call   f0100f6c <cprintf>
f01038d0:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01038d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01038d8:	c9                   	leave  
f01038d9:	c3                   	ret    

f01038da <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f01038da:	55                   	push   %ebp
f01038db:	89 e5                	mov    %esp,%ebp
f01038dd:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f01038e0:	83 ec 0c             	sub    $0xc,%esp
f01038e3:	6a 00                	push   $0x0
f01038e5:	e8 db ae 00 00       	call   f010e7c5 <enableBuffering>
f01038ea:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f01038ed:	83 ec 0c             	sub    $0xc,%esp
f01038f0:	6a 00                	push   $0x0
f01038f2:	e8 b6 ae 00 00       	call   f010e7ad <enableModifiedBuffer>
f01038f7:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f01038fa:	83 ec 0c             	sub    $0xc,%esp
f01038fd:	68 88 5f 12 f0       	push   $0xf0125f88
f0103902:	e8 65 d6 ff ff       	call   f0100f6c <cprintf>
f0103907:	83 c4 10             	add    $0x10,%esp
	return 0;
f010390a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010390f:	c9                   	leave  
f0103910:	c3                   	ret    

f0103911 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f0103911:	55                   	push   %ebp
f0103912:	89 e5                	mov    %esp,%ebp
f0103914:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0103917:	83 ec 0c             	sub    $0xc,%esp
f010391a:	6a 01                	push   $0x1
f010391c:	e8 a4 ae 00 00       	call   f010e7c5 <enableBuffering>
f0103921:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f0103924:	83 ec 0c             	sub    $0xc,%esp
f0103927:	6a 01                	push   $0x1
f0103929:	e8 7f ae 00 00       	call   f010e7ad <enableModifiedBuffer>
f010392e:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f0103931:	e8 b5 ae 00 00       	call   f010e7eb <getModifiedBufferLength>
f0103936:	85 c0                	test   %eax,%eax
f0103938:	75 59                	jne    f0103993 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f010393a:	83 ec 0c             	sub    $0xc,%esp
f010393d:	68 a4 5f 12 f0       	push   $0xf0125fa4
f0103942:	e8 25 d6 ff ff       	call   f0100f6c <cprintf>
f0103947:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f010394a:	83 ec 08             	sub    $0x8,%esp
f010394d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0103950:	50                   	push   %eax
f0103951:	68 d4 5f 12 f0       	push   $0xf0125fd4
f0103956:	e8 d5 e8 01 00       	call   f0122230 <readline>
f010395b:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f010395e:	83 ec 04             	sub    $0x4,%esp
f0103961:	6a 0a                	push   $0xa
f0103963:	6a 00                	push   $0x0
f0103965:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0103968:	50                   	push   %eax
f0103969:	e8 2a ee 01 00       	call   f0122798 <strtol>
f010396e:	83 c4 10             	add    $0x10,%esp
f0103971:	83 ec 0c             	sub    $0xc,%esp
f0103974:	50                   	push   %eax
f0103975:	e8 63 ae 00 00       	call   f010e7dd <setModifiedBufferLength>
f010397a:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f010397d:	e8 69 ae 00 00       	call   f010e7eb <getModifiedBufferLength>
f0103982:	83 ec 08             	sub    $0x8,%esp
f0103985:	50                   	push   %eax
f0103986:	68 00 60 12 f0       	push   $0xf0126000
f010398b:	e8 dc d5 ff ff       	call   f0100f6c <cprintf>
f0103990:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0103993:	83 ec 0c             	sub    $0xc,%esp
f0103996:	68 25 60 12 f0       	push   $0xf0126025
f010399b:	e8 cc d5 ff ff       	call   f0100f6c <cprintf>
f01039a0:	83 c4 10             	add    $0x10,%esp
	return 0;
f01039a3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01039a8:	c9                   	leave  
f01039a9:	c3                   	ret    

f01039aa <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01039aa:	55                   	push   %ebp
f01039ab:	89 e5                	mov    %esp,%ebp
f01039ad:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01039b0:	e8 1e ae 00 00       	call   f010e7d3 <isBufferingEnabled>
f01039b5:	84 c0                	test   %al,%al
f01039b7:	75 12                	jne    f01039cb <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01039b9:	83 ec 0c             	sub    $0xc,%esp
f01039bc:	68 40 60 12 f0       	push   $0xf0126040
f01039c1:	e8 a6 d5 ff ff       	call   f0100f6c <cprintf>
f01039c6:	83 c4 10             	add    $0x10,%esp
f01039c9:	eb 19                	jmp    f01039e4 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01039cb:	e8 eb ad 00 00       	call   f010e7bb <isModifiedBufferEnabled>
f01039d0:	84 c0                	test   %al,%al
f01039d2:	75 10                	jne    f01039e4 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01039d4:	83 ec 0c             	sub    $0xc,%esp
f01039d7:	68 90 60 12 f0       	push   $0xf0126090
f01039dc:	e8 8b d5 ff ff       	call   f0100f6c <cprintf>
f01039e1:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f01039e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01039e7:	83 c0 04             	add    $0x4,%eax
f01039ea:	8b 00                	mov    (%eax),%eax
f01039ec:	83 ec 04             	sub    $0x4,%esp
f01039ef:	6a 0a                	push   $0xa
f01039f1:	6a 00                	push   $0x0
f01039f3:	50                   	push   %eax
f01039f4:	e8 9f ed 01 00       	call   f0122798 <strtol>
f01039f9:	83 c4 10             	add    $0x10,%esp
f01039fc:	83 ec 0c             	sub    $0xc,%esp
f01039ff:	50                   	push   %eax
f0103a00:	e8 d8 ad 00 00       	call   f010e7dd <setModifiedBufferLength>
f0103a05:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0103a08:	e8 de ad 00 00       	call   f010e7eb <getModifiedBufferLength>
f0103a0d:	83 ec 08             	sub    $0x8,%esp
f0103a10:	50                   	push   %eax
f0103a11:	68 00 60 12 f0       	push   $0xf0126000
f0103a16:	e8 51 d5 ff ff       	call   f0100f6c <cprintf>
f0103a1b:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103a1e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103a23:	c9                   	leave  
f0103a24:	c3                   	ret    

f0103a25 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0103a25:	55                   	push   %ebp
f0103a26:	89 e5                	mov    %esp,%ebp
f0103a28:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0103a2b:	e8 a3 ad 00 00       	call   f010e7d3 <isBufferingEnabled>
f0103a30:	84 c0                	test   %al,%al
f0103a32:	75 12                	jne    f0103a46 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0103a34:	83 ec 0c             	sub    $0xc,%esp
f0103a37:	68 40 60 12 f0       	push   $0xf0126040
f0103a3c:	e8 2b d5 ff ff       	call   f0100f6c <cprintf>
f0103a41:	83 c4 10             	add    $0x10,%esp
f0103a44:	eb 19                	jmp    f0103a5f <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0103a46:	e8 70 ad 00 00       	call   f010e7bb <isModifiedBufferEnabled>
f0103a4b:	84 c0                	test   %al,%al
f0103a4d:	75 10                	jne    f0103a5f <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0103a4f:	83 ec 0c             	sub    $0xc,%esp
f0103a52:	68 90 60 12 f0       	push   $0xf0126090
f0103a57:	e8 10 d5 ff ff       	call   f0100f6c <cprintf>
f0103a5c:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f0103a5f:	e8 87 ad 00 00       	call   f010e7eb <getModifiedBufferLength>
f0103a64:	83 ec 08             	sub    $0x8,%esp
f0103a67:	50                   	push   %eax
f0103a68:	68 d6 60 12 f0       	push   $0xf01260d6
f0103a6d:	e8 fa d4 ff ff       	call   f0100f6c <cprintf>
f0103a72:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103a75:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103a7a:	c9                   	leave  
f0103a7b:	c3                   	ret    

f0103a7c <command_tst>:

int command_tst(int number_of_arguments, char **arguments)
{
f0103a7c:	55                   	push   %ebp
f0103a7d:	89 e5                	mov    %esp,%ebp
f0103a7f:	83 ec 08             	sub    $0x8,%esp
	return tst_handler(number_of_arguments, arguments);
f0103a82:	83 ec 08             	sub    $0x8,%esp
f0103a85:	ff 75 0c             	pushl  0xc(%ebp)
f0103a88:	ff 75 08             	pushl  0x8(%ebp)
f0103a8b:	e8 1b b5 00 00       	call   f010efab <tst_handler>
f0103a90:	83 c4 10             	add    $0x10,%esp
}
f0103a93:	c9                   	leave  
f0103a94:	c3                   	ret    

f0103a95 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0103a95:	55                   	push   %ebp
f0103a96:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0103a98:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a9b:	8b 15 c0 18 5a f0    	mov    0xf05a18c0,%edx
f0103aa1:	29 d0                	sub    %edx,%eax
f0103aa3:	c1 f8 03             	sar    $0x3,%eax
f0103aa6:	89 c2                	mov    %eax,%edx
f0103aa8:	89 d0                	mov    %edx,%eax
f0103aaa:	c1 e0 02             	shl    $0x2,%eax
f0103aad:	01 d0                	add    %edx,%eax
f0103aaf:	c1 e0 02             	shl    $0x2,%eax
f0103ab2:	01 d0                	add    %edx,%eax
f0103ab4:	c1 e0 02             	shl    $0x2,%eax
f0103ab7:	01 d0                	add    %edx,%eax
f0103ab9:	89 c1                	mov    %eax,%ecx
f0103abb:	c1 e1 08             	shl    $0x8,%ecx
f0103abe:	01 c8                	add    %ecx,%eax
f0103ac0:	89 c1                	mov    %eax,%ecx
f0103ac2:	c1 e1 10             	shl    $0x10,%ecx
f0103ac5:	01 c8                	add    %ecx,%eax
f0103ac7:	01 c0                	add    %eax,%eax
f0103ac9:	01 d0                	add    %edx,%eax
}
f0103acb:	5d                   	pop    %ebp
f0103acc:	c3                   	ret    

f0103acd <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0103acd:	55                   	push   %ebp
f0103ace:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0103ad0:	ff 75 08             	pushl  0x8(%ebp)
f0103ad3:	e8 bd ff ff ff       	call   f0103a95 <to_frame_number>
f0103ad8:	83 c4 04             	add    $0x4,%esp
f0103adb:	c1 e0 0c             	shl    $0xc,%eax
}
f0103ade:	c9                   	leave  
f0103adf:	c3                   	ret    

f0103ae0 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0103ae0:	55                   	push   %ebp
f0103ae1:	89 e5                	mov    %esp,%ebp
f0103ae3:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0103ae6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ae9:	c1 e8 0c             	shr    $0xc,%eax
f0103aec:	89 c2                	mov    %eax,%edx
f0103aee:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f0103af3:	39 c2                	cmp    %eax,%edx
f0103af5:	72 14                	jb     f0103b0b <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0103af7:	83 ec 04             	sub    $0x4,%esp
f0103afa:	68 f4 60 12 f0       	push   $0xf01260f4
f0103aff:	6a 55                	push   $0x55
f0103b01:	68 1c 61 12 f0       	push   $0xf012611c
f0103b06:	e8 0f c8 ff ff       	call   f010031a <_panic>
	return &frames_info[PPN(physical_address)];
f0103b0b:	8b 15 c0 18 5a f0    	mov    0xf05a18c0,%edx
f0103b11:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b14:	c1 e8 0c             	shr    $0xc,%eax
f0103b17:	89 c1                	mov    %eax,%ecx
f0103b19:	89 c8                	mov    %ecx,%eax
f0103b1b:	01 c0                	add    %eax,%eax
f0103b1d:	01 c8                	add    %ecx,%eax
f0103b1f:	c1 e0 03             	shl    $0x3,%eax
f0103b22:	01 d0                	add    %edx,%eax
}
f0103b24:	c9                   	leave  
f0103b25:	c3                   	ret    

f0103b26 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f0103b26:	55                   	push   %ebp
f0103b27:	89 e5                	mov    %esp,%ebp
f0103b29:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103b2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b2f:	05 00 14 00 00       	add    $0x1400,%eax
f0103b34:	c1 e0 03             	shl    $0x3,%eax
f0103b37:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103b3a:	83 ec 04             	sub    $0x4,%esp
f0103b3d:	6a 08                	push   $0x8
f0103b3f:	ff 75 0c             	pushl  0xc(%ebp)
f0103b42:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b45:	e8 d6 f0 01 00       	call   f0122c20 <ide_read>
f0103b4a:	83 c4 10             	add    $0x10,%esp
f0103b4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f0103b50:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103b53:	c9                   	leave  
f0103b54:	c3                   	ret    

f0103b55 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f0103b55:	55                   	push   %ebp
f0103b56:	89 e5                	mov    %esp,%ebp
f0103b58:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103b5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b5e:	05 00 14 00 00       	add    $0x1400,%eax
f0103b63:	c1 e0 03             	shl    $0x3,%eax
f0103b66:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103b69:	83 ec 04             	sub    $0x4,%esp
f0103b6c:	6a 08                	push   $0x8
f0103b6e:	ff 75 0c             	pushl  0xc(%ebp)
f0103b71:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b74:	e8 e7 f1 01 00       	call   f0122d60 <ide_write>
f0103b79:	83 c4 10             	add    $0x10,%esp
f0103b7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f0103b7f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103b83:	74 14                	je     f0103b99 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f0103b85:	83 ec 04             	sub    $0x4,%esp
f0103b88:	68 3e 61 12 f0       	push   $0xf012613e
f0103b8d:	6a 2f                	push   $0x2f
f0103b8f:	68 55 61 12 f0       	push   $0xf0126155
f0103b94:	e8 81 c7 ff ff       	call   f010031a <_panic>
	return success;
f0103b99:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103b9c:	c9                   	leave  
f0103b9d:	c3                   	ret    

f0103b9e <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f0103b9e:	55                   	push   %ebp
f0103b9f:	89 e5                	mov    %esp,%ebp
f0103ba1:	53                   	push   %ebx
f0103ba2:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&DiskFrameLists.disk_free_frame_list);
f0103ba5:	c7 05 80 1a 5a f0 00 	movl   $0x0,0xf05a1a80
f0103bac:	00 00 00 
f0103baf:	c7 05 84 1a 5a f0 00 	movl   $0x0,0xf05a1a84
f0103bb6:	00 00 00 
f0103bb9:	c7 05 8c 1a 5a f0 00 	movl   $0x0,0xf05a1a8c
f0103bc0:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103bc3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f0103bca:	e9 e8 00 00 00       	jmp    f0103cb7 <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f0103bcf:	8b 0d 60 ec 59 f0    	mov    0xf059ec60,%ecx
f0103bd5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bd8:	89 d0                	mov    %edx,%eax
f0103bda:	01 c0                	add    %eax,%eax
f0103bdc:	01 d0                	add    %edx,%eax
f0103bde:	c1 e0 03             	shl    $0x3,%eax
f0103be1:	01 c8                	add    %ecx,%eax
f0103be3:	83 ec 0c             	sub    $0xc,%esp
f0103be6:	50                   	push   %eax
f0103be7:	e8 c9 45 00 00       	call   f01081b5 <initialize_frame_info>
f0103bec:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&DiskFrameLists.disk_free_frame_list, &disk_frames_info[i]);
f0103bef:	8b 0d 60 ec 59 f0    	mov    0xf059ec60,%ecx
f0103bf5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bf8:	89 d0                	mov    %edx,%eax
f0103bfa:	01 c0                	add    %eax,%eax
f0103bfc:	01 d0                	add    %edx,%eax
f0103bfe:	c1 e0 03             	shl    $0x3,%eax
f0103c01:	01 c8                	add    %ecx,%eax
f0103c03:	85 c0                	test   %eax,%eax
f0103c05:	75 14                	jne    f0103c1b <initialize_disk_page_file+0x7d>
f0103c07:	83 ec 04             	sub    $0x4,%esp
f0103c0a:	68 74 61 12 f0       	push   $0xf0126174
f0103c0f:	6a 56                	push   $0x56
f0103c11:	68 55 61 12 f0       	push   $0xf0126155
f0103c16:	e8 ff c6 ff ff       	call   f010031a <_panic>
f0103c1b:	8b 0d 60 ec 59 f0    	mov    0xf059ec60,%ecx
f0103c21:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c24:	89 d0                	mov    %edx,%eax
f0103c26:	01 c0                	add    %eax,%eax
f0103c28:	01 d0                	add    %edx,%eax
f0103c2a:	c1 e0 03             	shl    $0x3,%eax
f0103c2d:	01 c8                	add    %ecx,%eax
f0103c2f:	8b 15 80 1a 5a f0    	mov    0xf05a1a80,%edx
f0103c35:	89 10                	mov    %edx,(%eax)
f0103c37:	8b 00                	mov    (%eax),%eax
f0103c39:	85 c0                	test   %eax,%eax
f0103c3b:	74 1f                	je     f0103c5c <initialize_disk_page_file+0xbe>
f0103c3d:	8b 15 80 1a 5a f0    	mov    0xf05a1a80,%edx
f0103c43:	8b 1d 60 ec 59 f0    	mov    0xf059ec60,%ebx
f0103c49:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0103c4c:	89 c8                	mov    %ecx,%eax
f0103c4e:	01 c0                	add    %eax,%eax
f0103c50:	01 c8                	add    %ecx,%eax
f0103c52:	c1 e0 03             	shl    $0x3,%eax
f0103c55:	01 d8                	add    %ebx,%eax
f0103c57:	89 42 04             	mov    %eax,0x4(%edx)
f0103c5a:	eb 19                	jmp    f0103c75 <initialize_disk_page_file+0xd7>
f0103c5c:	8b 0d 60 ec 59 f0    	mov    0xf059ec60,%ecx
f0103c62:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c65:	89 d0                	mov    %edx,%eax
f0103c67:	01 c0                	add    %eax,%eax
f0103c69:	01 d0                	add    %edx,%eax
f0103c6b:	c1 e0 03             	shl    $0x3,%eax
f0103c6e:	01 c8                	add    %ecx,%eax
f0103c70:	a3 84 1a 5a f0       	mov    %eax,0xf05a1a84
f0103c75:	8b 0d 60 ec 59 f0    	mov    0xf059ec60,%ecx
f0103c7b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c7e:	89 d0                	mov    %edx,%eax
f0103c80:	01 c0                	add    %eax,%eax
f0103c82:	01 d0                	add    %edx,%eax
f0103c84:	c1 e0 03             	shl    $0x3,%eax
f0103c87:	01 c8                	add    %ecx,%eax
f0103c89:	a3 80 1a 5a f0       	mov    %eax,0xf05a1a80
f0103c8e:	8b 0d 60 ec 59 f0    	mov    0xf059ec60,%ecx
f0103c94:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c97:	89 d0                	mov    %edx,%eax
f0103c99:	01 c0                	add    %eax,%eax
f0103c9b:	01 d0                	add    %edx,%eax
f0103c9d:	c1 e0 03             	shl    $0x3,%eax
f0103ca0:	01 c8                	add    %ecx,%eax
f0103ca2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103ca9:	a1 8c 1a 5a f0       	mov    0xf05a1a8c,%eax
f0103cae:	40                   	inc    %eax
f0103caf:	a3 8c 1a 5a f0       	mov    %eax,0xf05a1a8c
{
	int i;
	LIST_INIT(&DiskFrameLists.disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103cb4:	ff 45 f4             	incl   -0xc(%ebp)
f0103cb7:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f0103cbe:	0f 8e 0b ff ff ff    	jle    f0103bcf <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&DiskFrameLists.disk_free_frame_list, &disk_frames_info[i]);
	}
}
f0103cc4:	90                   	nop
f0103cc5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103cc8:	c9                   	leave  
f0103cc9:	c3                   	ret    

f0103cca <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f0103cca:	55                   	push   %ebp
f0103ccb:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f0103ccd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cd0:	8b 15 60 ec 59 f0    	mov    0xf059ec60,%edx
f0103cd6:	29 d0                	sub    %edx,%eax
f0103cd8:	c1 f8 03             	sar    $0x3,%eax
f0103cdb:	89 c2                	mov    %eax,%edx
f0103cdd:	89 d0                	mov    %edx,%eax
f0103cdf:	c1 e0 02             	shl    $0x2,%eax
f0103ce2:	01 d0                	add    %edx,%eax
f0103ce4:	c1 e0 02             	shl    $0x2,%eax
f0103ce7:	01 d0                	add    %edx,%eax
f0103ce9:	c1 e0 02             	shl    $0x2,%eax
f0103cec:	01 d0                	add    %edx,%eax
f0103cee:	89 c1                	mov    %eax,%ecx
f0103cf0:	c1 e1 08             	shl    $0x8,%ecx
f0103cf3:	01 c8                	add    %ecx,%eax
f0103cf5:	89 c1                	mov    %eax,%ecx
f0103cf7:	c1 e1 10             	shl    $0x10,%ecx
f0103cfa:	01 c8                	add    %ecx,%eax
f0103cfc:	01 c0                	add    %eax,%eax
f0103cfe:	01 d0                	add    %edx,%eax
}
f0103d00:	5d                   	pop    %ebp
f0103d01:	c3                   	ret    

f0103d02 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103d02:	55                   	push   %ebp
f0103d03:	89 e5                	mov    %esp,%ebp
f0103d05:	83 ec 18             	sub    $0x18,%esp
	int ret = 0;
f0103d08:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	acquire_spinlock(&DiskFrameLists.dfllock);
f0103d0f:	83 ec 0c             	sub    $0xc,%esp
f0103d12:	68 90 1a 5a f0       	push   $0xf05a1a90
f0103d17:	e8 05 ae 00 00       	call   f010eb21 <acquire_spinlock>
f0103d1c:	83 c4 10             	add    $0x10,%esp
	{
		// Fill this function in
		struct FrameInfo *ptr_frame_info = LIST_FIRST(&DiskFrameLists.disk_free_frame_list);
f0103d1f:	a1 80 1a 5a f0       	mov    0xf05a1a80,%eax
f0103d24:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if(ptr_frame_info == NULL)
f0103d27:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103d2b:	75 0c                	jne    f0103d39 <allocate_disk_frame+0x37>
		{
			ret = E_NO_PAGE_FILE_SPACE;
f0103d2d:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
f0103d34:	e9 a2 00 00 00       	jmp    f0103ddb <allocate_disk_frame+0xd9>
		}
		else
		{
			LIST_REMOVE(&DiskFrameLists.disk_free_frame_list, ptr_frame_info);
f0103d39:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103d3d:	75 14                	jne    f0103d53 <allocate_disk_frame+0x51>
f0103d3f:	83 ec 04             	sub    $0x4,%esp
f0103d42:	68 97 61 12 f0       	push   $0xf0126197
f0103d47:	6a 7b                	push   $0x7b
f0103d49:	68 55 61 12 f0       	push   $0xf0126155
f0103d4e:	e8 c7 c5 ff ff       	call   f010031a <_panic>
f0103d53:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d56:	8b 00                	mov    (%eax),%eax
f0103d58:	85 c0                	test   %eax,%eax
f0103d5a:	74 10                	je     f0103d6c <allocate_disk_frame+0x6a>
f0103d5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d5f:	8b 00                	mov    (%eax),%eax
f0103d61:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0103d64:	8b 52 04             	mov    0x4(%edx),%edx
f0103d67:	89 50 04             	mov    %edx,0x4(%eax)
f0103d6a:	eb 0b                	jmp    f0103d77 <allocate_disk_frame+0x75>
f0103d6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d6f:	8b 40 04             	mov    0x4(%eax),%eax
f0103d72:	a3 84 1a 5a f0       	mov    %eax,0xf05a1a84
f0103d77:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d7a:	8b 40 04             	mov    0x4(%eax),%eax
f0103d7d:	85 c0                	test   %eax,%eax
f0103d7f:	74 0f                	je     f0103d90 <allocate_disk_frame+0x8e>
f0103d81:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d84:	8b 40 04             	mov    0x4(%eax),%eax
f0103d87:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0103d8a:	8b 12                	mov    (%edx),%edx
f0103d8c:	89 10                	mov    %edx,(%eax)
f0103d8e:	eb 0a                	jmp    f0103d9a <allocate_disk_frame+0x98>
f0103d90:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d93:	8b 00                	mov    (%eax),%eax
f0103d95:	a3 80 1a 5a f0       	mov    %eax,0xf05a1a80
f0103d9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d9d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0103da3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103da6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103dad:	a1 8c 1a 5a f0       	mov    0xf05a1a8c,%eax
f0103db2:	48                   	dec    %eax
f0103db3:	a3 8c 1a 5a f0       	mov    %eax,0xf05a1a8c
			initialize_frame_info(ptr_frame_info);
f0103db8:	83 ec 0c             	sub    $0xc,%esp
f0103dbb:	ff 75 f0             	pushl  -0x10(%ebp)
f0103dbe:	e8 f2 43 00 00       	call   f01081b5 <initialize_frame_info>
f0103dc3:	83 c4 10             	add    $0x10,%esp
			*dfn = to_disk_frame_number(ptr_frame_info);
f0103dc6:	83 ec 0c             	sub    $0xc,%esp
f0103dc9:	ff 75 f0             	pushl  -0x10(%ebp)
f0103dcc:	e8 f9 fe ff ff       	call   f0103cca <to_disk_frame_number>
f0103dd1:	83 c4 10             	add    $0x10,%esp
f0103dd4:	89 c2                	mov    %eax,%edx
f0103dd6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dd9:	89 10                	mov    %edx,(%eax)
		}
	}
	release_spinlock(&DiskFrameLists.dfllock);
f0103ddb:	83 ec 0c             	sub    $0xc,%esp
f0103dde:	68 90 1a 5a f0       	push   $0xf05a1a90
f0103de3:	e8 c0 ad 00 00       	call   f010eba8 <release_spinlock>
f0103de8:	83 c4 10             	add    $0x10,%esp

	return ret;
f0103deb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103dee:	c9                   	leave  
f0103def:	c3                   	ret    

f0103df0 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f0103df0:	55                   	push   %ebp
f0103df1:	89 e5                	mov    %esp,%ebp
f0103df3:	53                   	push   %ebx
f0103df4:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f0103df7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0103dfb:	0f 84 ea 00 00 00    	je     f0103eeb <free_disk_frame+0xfb>
	acquire_spinlock(&DiskFrameLists.dfllock);
f0103e01:	83 ec 0c             	sub    $0xc,%esp
f0103e04:	68 90 1a 5a f0       	push   $0xf05a1a90
f0103e09:	e8 13 ad 00 00       	call   f010eb21 <acquire_spinlock>
f0103e0e:	83 c4 10             	add    $0x10,%esp
	{
		LIST_INSERT_HEAD(&DiskFrameLists.disk_free_frame_list, &disk_frames_info[dfn]);
f0103e11:	8b 0d 60 ec 59 f0    	mov    0xf059ec60,%ecx
f0103e17:	8b 55 08             	mov    0x8(%ebp),%edx
f0103e1a:	89 d0                	mov    %edx,%eax
f0103e1c:	01 c0                	add    %eax,%eax
f0103e1e:	01 d0                	add    %edx,%eax
f0103e20:	c1 e0 03             	shl    $0x3,%eax
f0103e23:	01 c8                	add    %ecx,%eax
f0103e25:	85 c0                	test   %eax,%eax
f0103e27:	75 17                	jne    f0103e40 <free_disk_frame+0x50>
f0103e29:	83 ec 04             	sub    $0x4,%esp
f0103e2c:	68 74 61 12 f0       	push   $0xf0126174
f0103e31:	68 8e 00 00 00       	push   $0x8e
f0103e36:	68 55 61 12 f0       	push   $0xf0126155
f0103e3b:	e8 da c4 ff ff       	call   f010031a <_panic>
f0103e40:	8b 0d 60 ec 59 f0    	mov    0xf059ec60,%ecx
f0103e46:	8b 55 08             	mov    0x8(%ebp),%edx
f0103e49:	89 d0                	mov    %edx,%eax
f0103e4b:	01 c0                	add    %eax,%eax
f0103e4d:	01 d0                	add    %edx,%eax
f0103e4f:	c1 e0 03             	shl    $0x3,%eax
f0103e52:	01 c8                	add    %ecx,%eax
f0103e54:	8b 15 80 1a 5a f0    	mov    0xf05a1a80,%edx
f0103e5a:	89 10                	mov    %edx,(%eax)
f0103e5c:	8b 00                	mov    (%eax),%eax
f0103e5e:	85 c0                	test   %eax,%eax
f0103e60:	74 1f                	je     f0103e81 <free_disk_frame+0x91>
f0103e62:	8b 15 80 1a 5a f0    	mov    0xf05a1a80,%edx
f0103e68:	8b 1d 60 ec 59 f0    	mov    0xf059ec60,%ebx
f0103e6e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0103e71:	89 c8                	mov    %ecx,%eax
f0103e73:	01 c0                	add    %eax,%eax
f0103e75:	01 c8                	add    %ecx,%eax
f0103e77:	c1 e0 03             	shl    $0x3,%eax
f0103e7a:	01 d8                	add    %ebx,%eax
f0103e7c:	89 42 04             	mov    %eax,0x4(%edx)
f0103e7f:	eb 19                	jmp    f0103e9a <free_disk_frame+0xaa>
f0103e81:	8b 0d 60 ec 59 f0    	mov    0xf059ec60,%ecx
f0103e87:	8b 55 08             	mov    0x8(%ebp),%edx
f0103e8a:	89 d0                	mov    %edx,%eax
f0103e8c:	01 c0                	add    %eax,%eax
f0103e8e:	01 d0                	add    %edx,%eax
f0103e90:	c1 e0 03             	shl    $0x3,%eax
f0103e93:	01 c8                	add    %ecx,%eax
f0103e95:	a3 84 1a 5a f0       	mov    %eax,0xf05a1a84
f0103e9a:	8b 0d 60 ec 59 f0    	mov    0xf059ec60,%ecx
f0103ea0:	8b 55 08             	mov    0x8(%ebp),%edx
f0103ea3:	89 d0                	mov    %edx,%eax
f0103ea5:	01 c0                	add    %eax,%eax
f0103ea7:	01 d0                	add    %edx,%eax
f0103ea9:	c1 e0 03             	shl    $0x3,%eax
f0103eac:	01 c8                	add    %ecx,%eax
f0103eae:	a3 80 1a 5a f0       	mov    %eax,0xf05a1a80
f0103eb3:	8b 0d 60 ec 59 f0    	mov    0xf059ec60,%ecx
f0103eb9:	8b 55 08             	mov    0x8(%ebp),%edx
f0103ebc:	89 d0                	mov    %edx,%eax
f0103ebe:	01 c0                	add    %eax,%eax
f0103ec0:	01 d0                	add    %edx,%eax
f0103ec2:	c1 e0 03             	shl    $0x3,%eax
f0103ec5:	01 c8                	add    %ecx,%eax
f0103ec7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103ece:	a1 8c 1a 5a f0       	mov    0xf05a1a8c,%eax
f0103ed3:	40                   	inc    %eax
f0103ed4:	a3 8c 1a 5a f0       	mov    %eax,0xf05a1a8c
	}
	release_spinlock(&DiskFrameLists.dfllock);
f0103ed9:	83 ec 0c             	sub    $0xc,%esp
f0103edc:	68 90 1a 5a f0       	push   $0xf05a1a90
f0103ee1:	e8 c2 ac 00 00       	call   f010eba8 <release_spinlock>
f0103ee6:	83 c4 10             	add    $0x10,%esp
f0103ee9:	eb 01                	jmp    f0103eec <free_disk_frame+0xfc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f0103eeb:	90                   	nop
	acquire_spinlock(&DiskFrameLists.dfllock);
	{
		LIST_INSERT_HEAD(&DiskFrameLists.disk_free_frame_list, &disk_frames_info[dfn]);
	}
	release_spinlock(&DiskFrameLists.dfllock);
}
f0103eec:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103eef:	c9                   	leave  
f0103ef0:	c3                   	ret    

f0103ef1 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f0103ef1:	55                   	push   %ebp
f0103ef2:	89 e5                	mov    %esp,%ebp
f0103ef4:	83 ec 28             	sub    $0x28,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f0103ef7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103efa:	c1 e8 16             	shr    $0x16,%eax
f0103efd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103f04:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f07:	01 d0                	add    %edx,%eax
f0103f09:	8b 00                	mov    (%eax),%eax
f0103f0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f0103f0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103f11:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103f16:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103f19:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f1c:	c1 e8 0c             	shr    $0xc,%eax
f0103f1f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103f22:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f0103f27:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103f2a:	72 17                	jb     f0103f43 <get_disk_page_table+0x52>
f0103f2c:	ff 75 f0             	pushl  -0x10(%ebp)
f0103f2f:	68 b8 61 12 f0       	push   $0xf01261b8
f0103f34:	68 9d 00 00 00       	push   $0x9d
f0103f39:	68 55 61 12 f0       	push   $0xf0126155
f0103f3e:	e8 d7 c3 ff ff       	call   f010031a <_panic>
f0103f43:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f46:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103f4b:	89 c2                	mov    %eax,%edx
f0103f4d:	8b 45 14             	mov    0x14(%ebp),%eax
f0103f50:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103f52:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103f56:	0f 85 b7 00 00 00    	jne    f0104013 <get_disk_page_table+0x122>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f0103f5c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0103f60:	0f 84 9d 00 00 00    	je     f0104003 <get_disk_page_table+0x112>
						,PERM_PRESENT);
			}
#else
			{
				struct FrameInfo* ptr_frame_info;
				allocate_frame(&ptr_frame_info) ;
f0103f66:	83 ec 0c             	sub    $0xc,%esp
f0103f69:	8d 45 dc             	lea    -0x24(%ebp),%eax
f0103f6c:	50                   	push   %eax
f0103f6d:	e8 5e 42 00 00       	call   f01081d0 <allocate_frame>
f0103f72:	83 c4 10             	add    $0x10,%esp

				//LOG_STATMENT(cprintf("created table"));
				uint32 phys_page_table = to_physical_address(ptr_frame_info);
f0103f75:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103f78:	83 ec 0c             	sub    $0xc,%esp
f0103f7b:	50                   	push   %eax
f0103f7c:	e8 4c fb ff ff       	call   f0103acd <to_physical_address>
f0103f81:	83 c4 10             	add    $0x10,%esp
f0103f84:	89 45 e8             	mov    %eax,-0x18(%ebp)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0103f87:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103f8a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103f8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103f90:	c1 e8 0c             	shr    $0xc,%eax
f0103f93:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103f96:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f0103f9b:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0103f9e:	72 17                	jb     f0103fb7 <get_disk_page_table+0xc6>
f0103fa0:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103fa3:	68 b8 61 12 f0       	push   $0xf01261b8
f0103fa8:	68 b9 00 00 00       	push   $0xb9
f0103fad:	68 55 61 12 f0       	push   $0xf0126155
f0103fb2:	e8 63 c3 ff ff       	call   f010031a <_panic>
f0103fb7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103fba:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103fbf:	89 c2                	mov    %eax,%edx
f0103fc1:	8b 45 14             	mov    0x14(%ebp),%eax
f0103fc4:	89 10                	mov    %edx,(%eax)
				ptr_frame_info->references = 1;
f0103fc6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103fc9:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
f0103fcf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103fd2:	c1 e8 16             	shr    $0x16,%eax
f0103fd5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103fdc:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fdf:	01 d0                	add    %edx,%eax
f0103fe1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0103fe4:	83 ca 01             	or     $0x1,%edx
f0103fe7:	89 10                	mov    %edx,(%eax)
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f0103fe9:	8b 45 14             	mov    0x14(%ebp),%eax
f0103fec:	8b 00                	mov    (%eax),%eax
f0103fee:	83 ec 04             	sub    $0x4,%esp
f0103ff1:	68 00 10 00 00       	push   $0x1000
f0103ff6:	6a 00                	push   $0x0
f0103ff8:	50                   	push   %eax
f0103ff9:	e8 28 e6 01 00       	call   f0122626 <memset>
f0103ffe:	83 c4 10             	add    $0x10,%esp
f0104001:	eb 10                	jmp    f0104013 <get_disk_page_table+0x122>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f0104003:	8b 45 14             	mov    0x14(%ebp),%eax
f0104006:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f010400c:	b8 00 00 00 00       	mov    $0x0,%eax
f0104011:	eb 05                	jmp    f0104018 <get_disk_page_table+0x127>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f0104013:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104018:	c9                   	leave  
f0104019:	c3                   	ret    

f010401a <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f010401a:	55                   	push   %ebp
f010401b:	89 e5                	mov    %esp,%ebp
f010401d:	83 ec 28             	sub    $0x28,%esp
f0104020:	8b 45 10             	mov    0x10(%ebp),%eax
f0104023:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f0104026:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f010402a:	74 72                	je     f010409e <pf_add_empty_env_page+0x84>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f010402c:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0104033:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104036:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010403b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010403e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104041:	ba 00 00 00 00       	mov    $0x0,%edx
f0104046:	f7 75 f4             	divl   -0xc(%ebp)
f0104049:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010404c:	29 d0                	sub    %edx,%eax
f010404e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104051:	73 2f                	jae    f0104082 <pf_add_empty_env_page+0x68>
f0104053:	8b 45 08             	mov    0x8(%ebp),%eax
f0104056:	8b 50 6c             	mov    0x6c(%eax),%edx
f0104059:	b8 00 00 00 00       	mov    $0x0,%eax
f010405e:	29 d0                	sub    %edx,%eax
f0104060:	c1 e0 0c             	shl    $0xc,%eax
f0104063:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0104068:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010406b:	76 15                	jbe    f0104082 <pf_add_empty_env_page+0x68>
			ptr_env->nNewPageAdded++ ;
f010406d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104070:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f0104076:	8d 50 01             	lea    0x1(%eax),%edx
f0104079:	8b 45 08             	mov    0x8(%ebp),%eax
f010407c:	89 90 64 da 01 00    	mov    %edx,0x1da64(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f0104082:	a1 54 19 5a f0       	mov    0xf05a1954,%eax
f0104087:	83 ec 04             	sub    $0x4,%esp
f010408a:	50                   	push   %eax
f010408b:	ff 75 0c             	pushl  0xc(%ebp)
f010408e:	ff 75 08             	pushl  0x8(%ebp)
f0104091:	e8 b2 00 00 00       	call   f0104148 <pf_add_env_page>
f0104096:	83 c4 10             	add    $0x10,%esp
f0104099:	e9 a8 00 00 00       	jmp    f0104146 <pf_add_empty_env_page+0x12c>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010409e:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01040a5:	76 19                	jbe    f01040c0 <pf_add_empty_env_page+0xa6>
f01040a7:	68 e8 61 12 f0       	push   $0xf01261e8
f01040ac:	68 0e 62 12 f0       	push   $0xf012620e
f01040b1:	68 dc 00 00 00       	push   $0xdc
f01040b6:	68 55 61 12 f0       	push   $0xf0126155
f01040bb:	e8 5a c2 ff ff       	call   f010031a <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f01040c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01040c3:	83 c0 74             	add    $0x74,%eax
f01040c6:	83 ec 08             	sub    $0x8,%esp
f01040c9:	50                   	push   %eax
f01040ca:	ff 75 08             	pushl  0x8(%ebp)
f01040cd:	e8 ce 05 00 00       	call   f01046a0 <get_disk_page_directory>
f01040d2:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01040d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01040d8:	8b 40 74             	mov    0x74(%eax),%eax
f01040db:	8d 55 ec             	lea    -0x14(%ebp),%edx
f01040de:	52                   	push   %edx
f01040df:	6a 01                	push   $0x1
f01040e1:	ff 75 0c             	pushl  0xc(%ebp)
f01040e4:	50                   	push   %eax
f01040e5:	e8 07 fe ff ff       	call   f0103ef1 <get_disk_page_table>
f01040ea:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01040ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01040f0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01040f3:	c1 ea 0c             	shr    $0xc,%edx
f01040f6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01040fc:	c1 e2 02             	shl    $0x2,%edx
f01040ff:	01 d0                	add    %edx,%eax
f0104101:	8b 00                	mov    (%eax),%eax
f0104103:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f0104106:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104109:	85 c0                	test   %eax,%eax
f010410b:	75 34                	jne    f0104141 <pf_add_empty_env_page+0x127>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010410d:	83 ec 0c             	sub    $0xc,%esp
f0104110:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0104113:	50                   	push   %eax
f0104114:	e8 e9 fb ff ff       	call   f0103d02 <allocate_disk_frame>
f0104119:	83 c4 10             	add    $0x10,%esp
f010411c:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010411f:	75 07                	jne    f0104128 <pf_add_empty_env_page+0x10e>
f0104121:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0104126:	eb 1e                	jmp    f0104146 <pf_add_empty_env_page+0x12c>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0104128:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010412b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010412e:	c1 ea 0c             	shr    $0xc,%edx
f0104131:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104137:	c1 e2 02             	shl    $0x2,%edx
f010413a:	01 c2                	add    %eax,%edx
f010413c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010413f:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f0104141:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0104146:	c9                   	leave  
f0104147:	c3                   	ret    

f0104148 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0104148:	55                   	push   %ebp
f0104149:	89 e5                	mov    %esp,%ebp
f010414b:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010414e:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0104155:	76 19                	jbe    f0104170 <pf_add_env_page+0x28>
f0104157:	68 e8 61 12 f0       	push   $0xf01261e8
f010415c:	68 0e 62 12 f0       	push   $0xf012620e
f0104161:	68 f1 00 00 00       	push   $0xf1
f0104166:	68 55 61 12 f0       	push   $0xf0126155
f010416b:	e8 aa c1 ff ff       	call   f010031a <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0104170:	8b 45 08             	mov    0x8(%ebp),%eax
f0104173:	83 c0 74             	add    $0x74,%eax
f0104176:	83 ec 08             	sub    $0x8,%esp
f0104179:	50                   	push   %eax
f010417a:	ff 75 08             	pushl  0x8(%ebp)
f010417d:	e8 1e 05 00 00       	call   f01046a0 <get_disk_page_directory>
f0104182:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0104185:	8b 45 08             	mov    0x8(%ebp),%eax
f0104188:	8b 40 74             	mov    0x74(%eax),%eax
f010418b:	8d 55 f0             	lea    -0x10(%ebp),%edx
f010418e:	52                   	push   %edx
f010418f:	6a 01                	push   $0x1
f0104191:	ff 75 0c             	pushl  0xc(%ebp)
f0104194:	50                   	push   %eax
f0104195:	e8 57 fd ff ff       	call   f0103ef1 <get_disk_page_table>
f010419a:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010419d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01041a0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01041a3:	c1 ea 0c             	shr    $0xc,%edx
f01041a6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01041ac:	c1 e2 02             	shl    $0x2,%edx
f01041af:	01 d0                	add    %edx,%eax
f01041b1:	8b 00                	mov    (%eax),%eax
f01041b3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f01041b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01041b9:	85 c0                	test   %eax,%eax
f01041bb:	75 34                	jne    f01041f1 <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01041bd:	83 ec 0c             	sub    $0xc,%esp
f01041c0:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01041c3:	50                   	push   %eax
f01041c4:	e8 39 fb ff ff       	call   f0103d02 <allocate_disk_frame>
f01041c9:	83 c4 10             	add    $0x10,%esp
f01041cc:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01041cf:	75 07                	jne    f01041d8 <pf_add_env_page+0x90>
f01041d1:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01041d6:	eb 31                	jmp    f0104209 <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01041d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01041db:	8b 55 0c             	mov    0xc(%ebp),%edx
f01041de:	c1 ea 0c             	shr    $0xc,%edx
f01041e1:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01041e7:	c1 e2 02             	shl    $0x2,%edx
f01041ea:	01 c2                	add    %eax,%edx
f01041ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01041ef:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f01041f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01041f4:	83 ec 08             	sub    $0x8,%esp
f01041f7:	ff 75 10             	pushl  0x10(%ebp)
f01041fa:	50                   	push   %eax
f01041fb:	e8 55 f9 ff ff       	call   f0103b55 <write_disk_page>
f0104200:	83 c4 10             	add    $0x10,%esp
f0104203:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f0104206:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104209:	c9                   	leave  
f010420a:	c3                   	ret    

f010420b <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f010420b:	55                   	push   %ebp
f010420c:	89 e5                	mov    %esp,%ebp
f010420e:	83 ec 28             	sub    $0x28,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f0104211:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0104218:	76 19                	jbe    f0104233 <pf_update_env_page+0x28>
f010421a:	68 e8 61 12 f0       	push   $0xf01261e8
f010421f:	68 0e 62 12 f0       	push   $0xf012620e
f0104224:	68 13 01 00 00       	push   $0x113
f0104229:	68 55 61 12 f0       	push   $0xf0126155
f010422e:	e8 e7 c0 ff ff       	call   f010031a <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0104233:	8b 45 08             	mov    0x8(%ebp),%eax
f0104236:	83 c0 74             	add    $0x74,%eax
f0104239:	83 ec 08             	sub    $0x8,%esp
f010423c:	50                   	push   %eax
f010423d:	ff 75 08             	pushl  0x8(%ebp)
f0104240:	e8 5b 04 00 00       	call   f01046a0 <get_disk_page_directory>
f0104245:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0104248:	8b 45 08             	mov    0x8(%ebp),%eax
f010424b:	8b 40 74             	mov    0x74(%eax),%eax
f010424e:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0104251:	52                   	push   %edx
f0104252:	6a 00                	push   $0x0
f0104254:	ff 75 0c             	pushl  0xc(%ebp)
f0104257:	50                   	push   %eax
f0104258:	e8 94 fc ff ff       	call   f0103ef1 <get_disk_page_table>
f010425d:	83 c4 10             	add    $0x10,%esp

	//2022
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f0104260:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0104263:	85 c0                	test   %eax,%eax
f0104265:	74 29                	je     f0104290 <pf_update_env_page+0x85>
f0104267:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010426a:	85 c0                	test   %eax,%eax
f010426c:	0f 84 c5 00 00 00    	je     f0104337 <pf_update_env_page+0x12c>
f0104272:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0104275:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104278:	c1 ea 0c             	shr    $0xc,%edx
f010427b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104281:	c1 e2 02             	shl    $0x2,%edx
f0104284:	01 d0                	add    %edx,%eax
f0104286:	8b 00                	mov    (%eax),%eax
f0104288:	85 c0                	test   %eax,%eax
f010428a:	0f 85 a7 00 00 00    	jne    f0104337 <pf_update_env_page+0x12c>
	{

		uint32 VA = (uint32)virtual_address ;
f0104290:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104293:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0104296:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104299:	85 c0                	test   %eax,%eax
f010429b:	79 09                	jns    f01042a6 <pf_update_env_page+0x9b>
f010429d:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f01042a4:	76 30                	jbe    f01042d6 <pf_update_env_page+0xcb>
f01042a6:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01042ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042b0:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f01042b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01042b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01042bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01042c0:	f7 75 f0             	divl   -0x10(%ebp)
f01042c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01042c6:	29 d0                	sub    %edx,%eax
f01042c8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01042cb:	77 53                	ja     f0104320 <pf_update_env_page+0x115>
f01042cd:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f01042d4:	77 4a                	ja     f0104320 <pf_update_env_page+0x115>
			//				return ret ;
			//			}
			//			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			//			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f01042d6:	83 ec 04             	sub    $0x4,%esp
f01042d9:	6a 00                	push   $0x0
f01042db:	ff 75 f4             	pushl  -0xc(%ebp)
f01042de:	ff 75 08             	pushl  0x8(%ebp)
f01042e1:	e8 34 fd ff ff       	call   f010401a <pf_add_empty_env_page>
f01042e6:	83 c4 10             	add    $0x10,%esp
f01042e9:	89 45 e8             	mov    %eax,-0x18(%ebp)

				if (ret == E_NO_PAGE_FILE_SPACE)
f01042ec:	83 7d e8 f8          	cmpl   $0xfffffff8,-0x18(%ebp)
f01042f0:	75 17                	jne    f0104309 <pf_update_env_page+0xfe>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f01042f2:	83 ec 04             	sub    $0x4,%esp
f01042f5:	68 24 62 12 f0       	push   $0xf0126224
f01042fa:	68 43 01 00 00       	push   $0x143
f01042ff:	68 55 61 12 f0       	push   $0xf0126155
f0104304:	e8 11 c0 ff ff       	call   f010031a <_panic>
				}
				//cprintf("[%s] adding EMPTY page with content\n",ptr_env->prog_name);

				ptr_env->nNewPageAdded++ ;
f0104309:	8b 45 08             	mov    0x8(%ebp),%eax
f010430c:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f0104312:	8d 50 01             	lea    0x1(%eax),%edx
f0104315:	8b 45 08             	mov    0x8(%ebp),%eax
f0104318:	89 90 64 da 01 00    	mov    %edx,0x1da64(%eax)
f010431e:	eb 17                	jmp    f0104337 <pf_update_env_page+0x12c>
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f0104320:	83 ec 04             	sub    $0x4,%esp
f0104323:	68 70 62 12 f0       	push   $0xf0126270
f0104328:	68 4c 01 00 00       	push   $0x14c
f010432d:	68 55 61 12 f0       	push   $0xf0126155
f0104332:	e8 e3 bf ff ff       	call   f010031a <_panic>
		}
	}
	//2022 END========================================


	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0104337:	8b 45 08             	mov    0x8(%ebp),%eax
f010433a:	8b 40 74             	mov    0x74(%eax),%eax
f010433d:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0104340:	52                   	push   %edx
f0104341:	6a 00                	push   $0x0
f0104343:	ff 75 0c             	pushl  0xc(%ebp)
f0104346:	50                   	push   %eax
f0104347:	e8 a5 fb ff ff       	call   f0103ef1 <get_disk_page_table>
f010434c:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010434f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0104352:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104355:	c1 ea 0c             	shr    $0xc,%edx
f0104358:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010435e:	c1 e2 02             	shl    $0x2,%edx
f0104361:	01 d0                	add    %edx,%eax
f0104363:	8b 00                	mov    (%eax),%eax
f0104365:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//cprintf("[%s] updating page\n",ptr_env->prog_name);
	}
#else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
f0104368:	83 ec 0c             	sub    $0xc,%esp
f010436b:	ff 75 10             	pushl  0x10(%ebp)
f010436e:	e8 5a f7 ff ff       	call   f0103acd <to_physical_address>
f0104373:	83 c4 10             	add    $0x10,%esp
f0104376:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0104379:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010437c:	c1 e8 0c             	shr    $0xc,%eax
f010437f:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0104382:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f0104387:	39 45 dc             	cmp    %eax,-0x24(%ebp)
f010438a:	72 17                	jb     f01043a3 <pf_update_env_page+0x198>
f010438c:	ff 75 e0             	pushl  -0x20(%ebp)
f010438f:	68 b8 61 12 f0       	push   $0xf01261b8
f0104394:	68 68 01 00 00       	push   $0x168
f0104399:	68 55 61 12 f0       	push   $0xf0126155
f010439e:	e8 77 bf ff ff       	call   f010031a <_panic>
f01043a3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01043a6:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01043ab:	83 ec 08             	sub    $0x8,%esp
f01043ae:	50                   	push   %eax
f01043af:	ff 75 e4             	pushl  -0x1c(%ebp)
f01043b2:	e8 9e f7 ff ff       	call   f0103b55 <write_disk_page>
f01043b7:	83 c4 10             	add    $0x10,%esp
f01043ba:	89 45 e8             	mov    %eax,-0x18(%ebp)
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f01043bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01043c0:	8b 80 60 da 01 00    	mov    0x1da60(%eax),%eax
f01043c6:	8d 50 01             	lea    0x1(%eax),%edx
f01043c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01043cc:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)
	//======================

	return ret;
f01043d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f01043d5:	c9                   	leave  
f01043d6:	c3                   	ret    

f01043d7 <pf_read_env_page>:

	return write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(page_modified_frame_info)));
}
 */
int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f01043d7:	55                   	push   %ebp
f01043d8:	89 e5                	mov    %esp,%ebp
f01043da:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f01043dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01043e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01043e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01043e6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01043eb:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01043ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01043f1:	8b 40 74             	mov    0x74(%eax),%eax
f01043f4:	85 c0                	test   %eax,%eax
f01043f6:	75 0a                	jne    f0104402 <pf_read_env_page+0x2b>
f01043f8:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f01043fd:	e9 90 00 00 00       	jmp    f0104492 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0104402:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104405:	8b 45 08             	mov    0x8(%ebp),%eax
f0104408:	8b 40 74             	mov    0x74(%eax),%eax
f010440b:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f010440e:	51                   	push   %ecx
f010440f:	6a 00                	push   $0x0
f0104411:	52                   	push   %edx
f0104412:	50                   	push   %eax
f0104413:	e8 d9 fa ff ff       	call   f0103ef1 <get_disk_page_table>
f0104418:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010441b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010441e:	85 c0                	test   %eax,%eax
f0104420:	75 07                	jne    f0104429 <pf_read_env_page+0x52>
f0104422:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0104427:	eb 69                	jmp    f0104492 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0104429:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010442c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010442f:	c1 ea 0c             	shr    $0xc,%edx
f0104432:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104438:	c1 e2 02             	shl    $0x2,%edx
f010443b:	01 d0                	add    %edx,%eax
f010443d:	8b 00                	mov    (%eax),%eax
f010443f:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0104442:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104446:	75 07                	jne    f010444f <pf_read_env_page+0x78>
f0104448:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010444d:	eb 43                	jmp    f0104492 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f010444f:	83 ec 08             	sub    $0x8,%esp
f0104452:	ff 75 0c             	pushl  0xc(%ebp)
f0104455:	ff 75 f0             	pushl  -0x10(%ebp)
f0104458:	e8 c9 f6 ff ff       	call   f0103b26 <read_disk_page>
f010445d:	83 c4 10             	add    $0x10,%esp
f0104460:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0104463:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104466:	8b 45 08             	mov    0x8(%ebp),%eax
f0104469:	8b 40 64             	mov    0x64(%eax),%eax
f010446c:	6a 40                	push   $0x40
f010446e:	6a 00                	push   $0x0
f0104470:	52                   	push   %edx
f0104471:	50                   	push   %eax
f0104472:	e8 b1 46 00 00       	call   f0108b28 <pt_set_page_permissions>
f0104477:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f010447a:	8b 45 08             	mov    0x8(%ebp),%eax
f010447d:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0104483:	8d 50 01             	lea    0x1(%eax),%edx
f0104486:	8b 45 08             	mov    0x8(%ebp),%eax
f0104489:	89 90 5c da 01 00    	mov    %edx,0x1da5c(%eax)
	//======================

	return disk_read_error;
f010448f:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0104492:	c9                   	leave  
f0104493:	c3                   	ret    

f0104494 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0104494:	55                   	push   %ebp
f0104495:	89 e5                	mov    %esp,%ebp
f0104497:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f010449a:	8b 45 08             	mov    0x8(%ebp),%eax
f010449d:	8b 40 74             	mov    0x74(%eax),%eax
f01044a0:	85 c0                	test   %eax,%eax
f01044a2:	74 62                	je     f0104506 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01044a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01044a7:	8b 40 74             	mov    0x74(%eax),%eax
f01044aa:	8d 55 f0             	lea    -0x10(%ebp),%edx
f01044ad:	52                   	push   %edx
f01044ae:	6a 00                	push   $0x0
f01044b0:	ff 75 0c             	pushl  0xc(%ebp)
f01044b3:	50                   	push   %eax
f01044b4:	e8 38 fa ff ff       	call   f0103ef1 <get_disk_page_table>
f01044b9:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f01044bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01044bf:	85 c0                	test   %eax,%eax
f01044c1:	74 46                	je     f0104509 <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01044c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01044c6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044c9:	c1 ea 0c             	shr    $0xc,%edx
f01044cc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01044d2:	c1 e2 02             	shl    $0x2,%edx
f01044d5:	01 d0                	add    %edx,%eax
f01044d7:	8b 00                	mov    (%eax),%eax
f01044d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f01044dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01044df:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044e2:	c1 ea 0c             	shr    $0xc,%edx
f01044e5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01044eb:	c1 e2 02             	shl    $0x2,%edx
f01044ee:	01 d0                	add    %edx,%eax
f01044f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f01044f6:	83 ec 0c             	sub    $0xc,%esp
f01044f9:	ff 75 f4             	pushl  -0xc(%ebp)
f01044fc:	e8 ef f8 ff ff       	call   f0103df0 <free_disk_frame>
f0104501:	83 c4 10             	add    $0x10,%esp
f0104504:	eb 04                	jmp    f010450a <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0104506:	90                   	nop
f0104507:	eb 01                	jmp    f010450a <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0104509:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f010450a:	c9                   	leave  
f010450b:	c3                   	ret    

f010450c <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f010450c:	55                   	push   %ebp
f010450d:	89 e5                	mov    %esp,%ebp
f010450f:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104512:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104519:	e9 ee 00 00 00       	jmp    f010460c <pf_free_env+0x100>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f010451e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104521:	8b 40 74             	mov    0x74(%eax),%eax
f0104524:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104527:	c1 e2 02             	shl    $0x2,%edx
f010452a:	01 d0                	add    %edx,%eax
f010452c:	8b 00                	mov    (%eax),%eax
f010452e:	83 e0 01             	and    $0x1,%eax
f0104531:	85 c0                	test   %eax,%eax
f0104533:	0f 84 cf 00 00 00    	je     f0104608 <pf_free_env+0xfc>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0104539:	8b 45 08             	mov    0x8(%ebp),%eax
f010453c:	8b 40 74             	mov    0x74(%eax),%eax
f010453f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104542:	c1 e2 02             	shl    $0x2,%edx
f0104545:	01 d0                	add    %edx,%eax
f0104547:	8b 00                	mov    (%eax),%eax
f0104549:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010454e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f0104551:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104554:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0104557:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010455a:	c1 e8 0c             	shr    $0xc,%eax
f010455d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104560:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f0104565:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0104568:	72 17                	jb     f0104581 <pf_free_env+0x75>
f010456a:	ff 75 e8             	pushl  -0x18(%ebp)
f010456d:	68 b8 61 12 f0       	push   $0xf01261b8
f0104572:	68 c8 01 00 00       	push   $0x1c8
f0104577:	68 55 61 12 f0       	push   $0xf0126155
f010457c:	e8 99 bd ff ff       	call   f010031a <_panic>
f0104581:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104584:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104589:	89 45 e0             	mov    %eax,-0x20(%ebp)
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f010458c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104593:	eb 3a                	jmp    f01045cf <pf_free_env+0xc3>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f0104595:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104598:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010459f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01045a2:	01 d0                	add    %edx,%eax
f01045a4:	8b 00                	mov    (%eax),%eax
f01045a6:	89 45 dc             	mov    %eax,-0x24(%ebp)
			pt[pteno] = 0;
f01045a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01045ac:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01045b3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01045b6:	01 d0                	add    %edx,%eax
f01045b8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f01045be:	83 ec 0c             	sub    $0xc,%esp
f01045c1:	ff 75 dc             	pushl  -0x24(%ebp)
f01045c4:	e8 27 f8 ff ff       	call   f0103df0 <free_disk_frame>
f01045c9:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f01045cc:	ff 45 f0             	incl   -0x10(%ebp)
f01045cf:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f01045d6:	76 bd                	jbe    f0104595 <pf_free_env+0x89>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f01045d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01045db:	8b 40 74             	mov    0x74(%eax),%eax
f01045de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045e1:	c1 e2 02             	shl    $0x2,%edx
f01045e4:	01 d0                	add    %edx,%eax
f01045e6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		{
			kfree(pt);
		}
#else
		{
			decrement_references(to_frame_info(pa));
f01045ec:	83 ec 0c             	sub    $0xc,%esp
f01045ef:	ff 75 ec             	pushl  -0x14(%ebp)
f01045f2:	e8 e9 f4 ff ff       	call   f0103ae0 <to_frame_info>
f01045f7:	83 c4 10             	add    $0x10,%esp
f01045fa:	83 ec 0c             	sub    $0xc,%esp
f01045fd:	50                   	push   %eax
f01045fe:	e8 da 3d 00 00       	call   f01083dd <decrement_references>
f0104603:	83 c4 10             	add    $0x10,%esp
f0104606:	eb 01                	jmp    f0104609 <pf_free_env+0xfd>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0104608:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104609:	ff 45 f4             	incl   -0xc(%ebp)
f010460c:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0104613:	0f 86 05 ff ff ff    	jbe    f010451e <pf_free_env+0x12>
	{
		kfree(ptr_env->disk_env_pgdir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
f0104619:	8b 45 08             	mov    0x8(%ebp),%eax
f010461c:	8b 40 78             	mov    0x78(%eax),%eax
f010461f:	83 ec 0c             	sub    $0xc,%esp
f0104622:	50                   	push   %eax
f0104623:	e8 b8 f4 ff ff       	call   f0103ae0 <to_frame_info>
f0104628:	83 c4 10             	add    $0x10,%esp
f010462b:	83 ec 0c             	sub    $0xc,%esp
f010462e:	50                   	push   %eax
f010462f:	e8 a9 3d 00 00       	call   f01083dd <decrement_references>
f0104634:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0104637:	8b 45 08             	mov    0x8(%ebp),%eax
f010463a:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0104641:	8b 45 08             	mov    0x8(%ebp),%eax
f0104644:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f010464b:	8b 45 08             	mov    0x8(%ebp),%eax
f010464e:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104651:	85 c0                	test   %eax,%eax
f0104653:	74 48                	je     f010469d <pf_free_env+0x191>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0104655:	83 ec 0c             	sub    $0xc,%esp
f0104658:	ff 75 08             	pushl  0x8(%ebp)
f010465b:	e8 dd 03 00 00       	call   f0104a3d <__pf_remove_env_all_tables>
f0104660:	83 c4 10             	add    $0x10,%esp
	{
		kfree(ptr_env->disk_env_tabledir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
f0104663:	8b 45 08             	mov    0x8(%ebp),%eax
f0104666:	8b 80 80 00 00 00    	mov    0x80(%eax),%eax
f010466c:	83 ec 0c             	sub    $0xc,%esp
f010466f:	50                   	push   %eax
f0104670:	e8 6b f4 ff ff       	call   f0103ae0 <to_frame_info>
f0104675:	83 c4 10             	add    $0x10,%esp
f0104678:	83 ec 0c             	sub    $0xc,%esp
f010467b:	50                   	push   %eax
f010467c:	e8 5c 3d 00 00       	call   f01083dd <decrement_references>
f0104681:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0104684:	8b 45 08             	mov    0x8(%ebp),%eax
f0104687:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f010468e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104691:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
f0104698:	00 00 00 
f010469b:	eb 01                	jmp    f010469e <pf_free_env+0x192>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f010469d:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f010469e:	c9                   	leave  
f010469f:	c3                   	ret    

f01046a0 <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f01046a0:	55                   	push   %ebp
f01046a1:	89 e5                	mov    %esp,%ebp
f01046a3:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f01046a6:	8b 45 08             	mov    0x8(%ebp),%eax
f01046a9:	8b 50 74             	mov    0x74(%eax),%edx
f01046ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f01046af:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f01046b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01046b4:	8b 00                	mov    (%eax),%eax
f01046b6:	85 c0                	test   %eax,%eax
f01046b8:	0f 85 aa 00 00 00    	jne    f0104768 <get_disk_page_directory+0xc8>
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f01046be:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f01046c5:	83 ec 0c             	sub    $0xc,%esp
f01046c8:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01046cb:	50                   	push   %eax
f01046cc:	e8 ff 3a 00 00       	call   f01081d0 <allocate_frame>
f01046d1:	83 c4 10             	add    $0x10,%esp
f01046d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01046d7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01046db:	79 08                	jns    f01046e5 <get_disk_page_directory+0x45>
				return r;
f01046dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01046e0:	e9 88 00 00 00       	jmp    f010476d <get_disk_page_directory+0xcd>
			p->references = 1;
f01046e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01046e8:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f01046ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01046f1:	83 ec 0c             	sub    $0xc,%esp
f01046f4:	50                   	push   %eax
f01046f5:	e8 d3 f3 ff ff       	call   f0103acd <to_physical_address>
f01046fa:	83 c4 10             	add    $0x10,%esp
f01046fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104700:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104703:	c1 e8 0c             	shr    $0xc,%eax
f0104706:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104709:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f010470e:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0104711:	72 17                	jb     f010472a <get_disk_page_directory+0x8a>
f0104713:	ff 75 f0             	pushl  -0x10(%ebp)
f0104716:	68 b8 61 12 f0       	push   $0xf01261b8
f010471b:	68 20 02 00 00       	push   $0x220
f0104720:	68 55 61 12 f0       	push   $0xf0126155
f0104725:	e8 f0 bb ff ff       	call   f010031a <_panic>
f010472a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010472d:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104732:	89 c2                	mov    %eax,%edx
f0104734:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104737:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
f0104739:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010473c:	83 ec 0c             	sub    $0xc,%esp
f010473f:	50                   	push   %eax
f0104740:	e8 88 f3 ff ff       	call   f0103acd <to_physical_address>
f0104745:	83 c4 10             	add    $0x10,%esp
f0104748:	89 c2                	mov    %eax,%edx
f010474a:	8b 45 08             	mov    0x8(%ebp),%eax
f010474d:	89 50 78             	mov    %edx,0x78(%eax)
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0104750:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104753:	8b 00                	mov    (%eax),%eax
f0104755:	83 ec 04             	sub    $0x4,%esp
f0104758:	68 00 10 00 00       	push   $0x1000
f010475d:	6a 00                	push   $0x0
f010475f:	50                   	push   %eax
f0104760:	e8 c1 de 01 00       	call   f0122626 <memset>
f0104765:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0104768:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010476d:	c9                   	leave  
f010476e:	c3                   	ret    

f010476f <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f010476f:	55                   	push   %ebp
f0104770:	89 e5                	mov    %esp,%ebp
f0104772:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0104775:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010477c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104783:	e9 a6 00 00 00       	jmp    f010482e <pf_calculate_allocated_pages+0xbf>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0104788:	8b 45 08             	mov    0x8(%ebp),%eax
f010478b:	8b 40 74             	mov    0x74(%eax),%eax
f010478e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104791:	c1 e2 02             	shl    $0x2,%edx
f0104794:	01 d0                	add    %edx,%eax
f0104796:	8b 00                	mov    (%eax),%eax
f0104798:	83 e0 01             	and    $0x1,%eax
f010479b:	85 c0                	test   %eax,%eax
f010479d:	0f 84 87 00 00 00    	je     f010482a <pf_calculate_allocated_pages+0xbb>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f01047a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01047a6:	8b 40 74             	mov    0x74(%eax),%eax
f01047a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01047ac:	c1 e2 02             	shl    $0x2,%edx
f01047af:	01 d0                	add    %edx,%eax
f01047b1:	8b 00                	mov    (%eax),%eax
f01047b3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01047b8:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f01047bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01047be:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01047c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01047c4:	c1 e8 0c             	shr    $0xc,%eax
f01047c7:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01047ca:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f01047cf:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f01047d2:	72 17                	jb     f01047eb <pf_calculate_allocated_pages+0x7c>
f01047d4:	ff 75 e4             	pushl  -0x1c(%ebp)
f01047d7:	68 b8 61 12 f0       	push   $0xf01261b8
f01047dc:	68 40 02 00 00       	push   $0x240
f01047e1:	68 55 61 12 f0       	push   $0xf0126155
f01047e6:	e8 2f bb ff ff       	call   f010031a <_panic>
f01047eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01047ee:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01047f3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f01047f6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01047fd:	eb 20                	jmp    f010481f <pf_calculate_allocated_pages+0xb0>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f01047ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104802:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104809:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010480c:	01 d0                	add    %edx,%eax
f010480e:	8b 00                	mov    (%eax),%eax
f0104810:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if(dfn != 0)
f0104813:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0104817:	74 03                	je     f010481c <pf_calculate_allocated_pages+0xad>
				counter ++;
f0104819:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010481c:	ff 45 ec             	incl   -0x14(%ebp)
f010481f:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0104826:	76 d7                	jbe    f01047ff <pf_calculate_allocated_pages+0x90>
f0104828:	eb 01                	jmp    f010482b <pf_calculate_allocated_pages+0xbc>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f010482a:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010482b:	ff 45 f4             	incl   -0xc(%ebp)
f010482e:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0104835:	0f 86 4d ff ff ff    	jbe    f0104788 <pf_calculate_allocated_pages+0x19>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f010483b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010483e:	c9                   	leave  
f010483f:	c3                   	ret    

f0104840 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0104840:	55                   	push   %ebp
f0104841:	89 e5                	mov    %esp,%ebp
f0104843:	83 ec 18             	sub    $0x18,%esp
	uint32 totalFreeDiskFrames ;
	acquire_spinlock(&DiskFrameLists.dfllock);
f0104846:	83 ec 0c             	sub    $0xc,%esp
f0104849:	68 90 1a 5a f0       	push   $0xf05a1a90
f010484e:	e8 ce a2 00 00       	call   f010eb21 <acquire_spinlock>
f0104853:	83 c4 10             	add    $0x10,%esp
	{
		/*2023: UPDATE beased on suggestion from T112 2023.Term1*/
		totalFreeDiskFrames = LIST_SIZE(&DiskFrameLists.disk_free_frame_list);
f0104856:	a1 8c 1a 5a f0       	mov    0xf05a1a8c,%eax
f010485b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		//	LIST_FOREACH(ptr, &disk_free_frame_list)
		//	{
		//		totalFreeDiskFrames++ ;
		//	}
	}
	release_spinlock(&DiskFrameLists.dfllock);
f010485e:	83 ec 0c             	sub    $0xc,%esp
f0104861:	68 90 1a 5a f0       	push   $0xf05a1a90
f0104866:	e8 3d a3 00 00       	call   f010eba8 <release_spinlock>
f010486b:	83 c4 10             	add    $0x10,%esp
	return totalFreeDiskFrames;
f010486e:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f0104871:	c9                   	leave  
f0104872:	c3                   	ret    

f0104873 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0104873:	55                   	push   %ebp
f0104874:	89 e5                	mov    %esp,%ebp
f0104876:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0104879:	8b 45 08             	mov    0x8(%ebp),%eax
f010487c:	8b 50 7c             	mov    0x7c(%eax),%edx
f010487f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104882:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0104884:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104887:	8b 00                	mov    (%eax),%eax
f0104889:	85 c0                	test   %eax,%eax
f010488b:	0f 85 ad 00 00 00    	jne    f010493e <get_disk_table_directory+0xcb>
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f0104891:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0104898:	83 ec 0c             	sub    $0xc,%esp
f010489b:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010489e:	50                   	push   %eax
f010489f:	e8 2c 39 00 00       	call   f01081d0 <allocate_frame>
f01048a4:	83 c4 10             	add    $0x10,%esp
f01048a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01048aa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01048ae:	79 08                	jns    f01048b8 <get_disk_table_directory+0x45>
				return r;
f01048b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01048b3:	e9 8b 00 00 00       	jmp    f0104943 <get_disk_table_directory+0xd0>
			p->references = 1;
f01048b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01048bb:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f01048c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01048c4:	83 ec 0c             	sub    $0xc,%esp
f01048c7:	50                   	push   %eax
f01048c8:	e8 00 f2 ff ff       	call   f0103acd <to_physical_address>
f01048cd:	83 c4 10             	add    $0x10,%esp
f01048d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01048d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01048d6:	c1 e8 0c             	shr    $0xc,%eax
f01048d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01048dc:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f01048e1:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01048e4:	72 17                	jb     f01048fd <get_disk_table_directory+0x8a>
f01048e6:	ff 75 f0             	pushl  -0x10(%ebp)
f01048e9:	68 b8 61 12 f0       	push   $0xf01261b8
f01048ee:	68 83 02 00 00       	push   $0x283
f01048f3:	68 55 61 12 f0       	push   $0xf0126155
f01048f8:	e8 1d ba ff ff       	call   f010031a <_panic>
f01048fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104900:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104905:	89 c2                	mov    %eax,%edx
f0104907:	8b 45 0c             	mov    0xc(%ebp),%eax
f010490a:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
f010490c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010490f:	83 ec 0c             	sub    $0xc,%esp
f0104912:	50                   	push   %eax
f0104913:	e8 b5 f1 ff ff       	call   f0103acd <to_physical_address>
f0104918:	83 c4 10             	add    $0x10,%esp
f010491b:	89 c2                	mov    %eax,%edx
f010491d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104920:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0104926:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104929:	8b 00                	mov    (%eax),%eax
f010492b:	83 ec 04             	sub    $0x4,%esp
f010492e:	68 00 10 00 00       	push   $0x1000
f0104933:	6a 00                	push   $0x0
f0104935:	50                   	push   %eax
f0104936:	e8 eb dc 01 00       	call   f0122626 <memset>
f010493b:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f010493e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104943:	c9                   	leave  
f0104944:	c3                   	ret    

f0104945 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0104945:	55                   	push   %ebp
f0104946:	89 e5                	mov    %esp,%ebp
f0104948:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f010494b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0104952:	76 19                	jbe    f010496d <__pf_write_env_table+0x28>
f0104954:	68 e8 61 12 f0       	push   $0xf01261e8
f0104959:	68 0e 62 12 f0       	push   $0xf012620e
f010495e:	68 91 02 00 00       	push   $0x291
f0104963:	68 55 61 12 f0       	push   $0xf0126155
f0104968:	e8 ad b9 ff ff       	call   f010031a <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f010496d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104970:	83 c0 7c             	add    $0x7c,%eax
f0104973:	83 ec 08             	sub    $0x8,%esp
f0104976:	50                   	push   %eax
f0104977:	ff 75 08             	pushl  0x8(%ebp)
f010497a:	e8 f4 fe ff ff       	call   f0104873 <get_disk_table_directory>
f010497f:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0104982:	8b 45 08             	mov    0x8(%ebp),%eax
f0104985:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104988:	8b 55 0c             	mov    0xc(%ebp),%edx
f010498b:	c1 ea 16             	shr    $0x16,%edx
f010498e:	c1 e2 02             	shl    $0x2,%edx
f0104991:	01 d0                	add    %edx,%eax
f0104993:	8b 00                	mov    (%eax),%eax
f0104995:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0104998:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010499b:	85 c0                	test   %eax,%eax
f010499d:	75 31                	jne    f01049d0 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010499f:	83 ec 0c             	sub    $0xc,%esp
f01049a2:	8d 45 f0             	lea    -0x10(%ebp),%eax
f01049a5:	50                   	push   %eax
f01049a6:	e8 57 f3 ff ff       	call   f0103d02 <allocate_disk_frame>
f01049ab:	83 c4 10             	add    $0x10,%esp
f01049ae:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01049b1:	75 07                	jne    f01049ba <__pf_write_env_table+0x75>
f01049b3:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01049b8:	eb 2e                	jmp    f01049e8 <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f01049ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01049bd:	8b 40 7c             	mov    0x7c(%eax),%eax
f01049c0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01049c3:	c1 ea 16             	shr    $0x16,%edx
f01049c6:	c1 e2 02             	shl    $0x2,%edx
f01049c9:	01 c2                	add    %eax,%edx
f01049cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01049ce:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f01049d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01049d3:	83 ec 08             	sub    $0x8,%esp
f01049d6:	ff 75 10             	pushl  0x10(%ebp)
f01049d9:	50                   	push   %eax
f01049da:	e8 76 f1 ff ff       	call   f0103b55 <write_disk_page>
f01049df:	83 c4 10             	add    $0x10,%esp
f01049e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f01049e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01049e8:	c9                   	leave  
f01049e9:	c3                   	ret    

f01049ea <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f01049ea:	55                   	push   %ebp
f01049eb:	89 e5                	mov    %esp,%ebp
f01049ed:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f01049f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01049f3:	8b 40 7c             	mov    0x7c(%eax),%eax
f01049f6:	85 c0                	test   %eax,%eax
f01049f8:	75 07                	jne    f0104a01 <__pf_read_env_table+0x17>
f01049fa:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f01049ff:	eb 3a                	jmp    f0104a3b <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0104a01:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a04:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104a07:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104a0a:	c1 ea 16             	shr    $0x16,%edx
f0104a0d:	c1 e2 02             	shl    $0x2,%edx
f0104a10:	01 d0                	add    %edx,%eax
f0104a12:	8b 00                	mov    (%eax),%eax
f0104a14:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0104a17:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104a1b:	75 07                	jne    f0104a24 <__pf_read_env_table+0x3a>
f0104a1d:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0104a22:	eb 17                	jmp    f0104a3b <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0104a24:	83 ec 08             	sub    $0x8,%esp
f0104a27:	ff 75 10             	pushl  0x10(%ebp)
f0104a2a:	ff 75 f4             	pushl  -0xc(%ebp)
f0104a2d:	e8 f4 f0 ff ff       	call   f0103b26 <read_disk_page>
f0104a32:	83 c4 10             	add    $0x10,%esp
f0104a35:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0104a38:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0104a3b:	c9                   	leave  
f0104a3c:	c3                   	ret    

f0104a3d <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0104a3d:	55                   	push   %ebp
f0104a3e:	89 e5                	mov    %esp,%ebp
f0104a40:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0104a43:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a46:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104a49:	85 c0                	test   %eax,%eax
f0104a4b:	74 4c                	je     f0104a99 <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104a4d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104a54:	eb 38                	jmp    f0104a8e <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0104a56:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a59:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104a5c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a5f:	c1 e2 02             	shl    $0x2,%edx
f0104a62:	01 d0                	add    %edx,%eax
f0104a64:	8b 00                	mov    (%eax),%eax
f0104a66:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0104a69:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a6c:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104a6f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a72:	c1 e2 02             	shl    $0x2,%edx
f0104a75:	01 d0                	add    %edx,%eax
f0104a77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0104a7d:	83 ec 0c             	sub    $0xc,%esp
f0104a80:	ff 75 f0             	pushl  -0x10(%ebp)
f0104a83:	e8 68 f3 ff ff       	call   f0103df0 <free_disk_frame>
f0104a88:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104a8b:	ff 45 f4             	incl   -0xc(%ebp)
f0104a8e:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0104a95:	76 bf                	jbe    f0104a56 <__pf_remove_env_all_tables+0x19>
f0104a97:	eb 01                	jmp    f0104a9a <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0104a99:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0104a9a:	c9                   	leave  
f0104a9b:	c3                   	ret    

f0104a9c <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0104a9c:	55                   	push   %ebp
f0104a9d:	89 e5                	mov    %esp,%ebp
f0104a9f:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0104aa2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104aa6:	75 10                	jne    f0104ab8 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0104aa8:	83 ec 0c             	sub    $0xc,%esp
f0104aab:	68 ec 62 12 f0       	push   $0xf01262ec
f0104ab0:	e8 b7 c4 ff ff       	call   f0100f6c <cprintf>
f0104ab5:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0104ab8:	8b 45 08             	mov    0x8(%ebp),%eax
f0104abb:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104abe:	85 c0                	test   %eax,%eax
f0104ac0:	74 3d                	je     f0104aff <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0104ac2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ac5:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104ac8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104acb:	c1 ea 16             	shr    $0x16,%edx
f0104ace:	c1 e2 02             	shl    $0x2,%edx
f0104ad1:	01 d0                	add    %edx,%eax
f0104ad3:	8b 00                	mov    (%eax),%eax
f0104ad5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0104ad8:	8b 45 08             	mov    0x8(%ebp),%eax
f0104adb:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104ade:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104ae1:	c1 ea 16             	shr    $0x16,%edx
f0104ae4:	c1 e2 02             	shl    $0x2,%edx
f0104ae7:	01 d0                	add    %edx,%eax
f0104ae9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104aef:	83 ec 0c             	sub    $0xc,%esp
f0104af2:	ff 75 f4             	pushl  -0xc(%ebp)
f0104af5:	e8 f6 f2 ff ff       	call   f0103df0 <free_disk_frame>
f0104afa:	83 c4 10             	add    $0x10,%esp
f0104afd:	eb 01                	jmp    f0104b00 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0104aff:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0104b00:	c9                   	leave  
f0104b01:	c3                   	ret    

f0104b02 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0104b02:	55                   	push   %ebp
f0104b03:	89 e5                	mov    %esp,%ebp
f0104b05:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0104b08:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0104b0f:	eb 1f                	jmp    f0104b30 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0104b11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b14:	83 ec 04             	sub    $0x4,%esp
f0104b17:	6a 08                	push   $0x8
f0104b19:	ff 75 08             	pushl  0x8(%ebp)
f0104b1c:	50                   	push   %eax
f0104b1d:	e8 3e e2 01 00       	call   f0122d60 <ide_write>
f0104b22:	83 c4 10             	add    $0x10,%esp
f0104b25:	85 c0                	test   %eax,%eax
f0104b27:	75 12                	jne    f0104b3b <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0104b29:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0104b30:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0104b37:	7e d8                	jle    f0104b11 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104b39:	eb 01                	jmp    f0104b3c <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0104b3b:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104b3c:	90                   	nop
f0104b3d:	c9                   	leave  
f0104b3e:	c3                   	ret    

f0104b3f <context_switch>:
# Switch stacks to new and pop previously-saved registers.

.globl context_switch
context_switch:
  # Save old callee-saved registers
  pushl %ebp
f0104b3f:	55                   	push   %ebp
  pushl %eax
f0104b40:	50                   	push   %eax
  pushl %ebx
f0104b41:	53                   	push   %ebx
  pushl %ecx
f0104b42:	51                   	push   %ecx
  pushl %edx
f0104b43:	52                   	push   %edx
  pushl %esi
f0104b44:	56                   	push   %esi
  pushl %edi
f0104b45:	57                   	push   %edi

  # Switch stacks
  movl 32(%esp), %eax
f0104b46:	8b 44 24 20          	mov    0x20(%esp),%eax
  movl 36(%esp), %edx
f0104b4a:	8b 54 24 24          	mov    0x24(%esp),%edx
  movl %esp, (%eax)
f0104b4e:	89 20                	mov    %esp,(%eax)
  movl %edx, %esp
f0104b50:	89 d4                	mov    %edx,%esp

  # Load new callee-saved registers
  popl %edi
f0104b52:	5f                   	pop    %edi
  popl %esi
f0104b53:	5e                   	pop    %esi
  popl %edx
f0104b54:	5a                   	pop    %edx
  popl %ecx
f0104b55:	59                   	pop    %ecx
  popl %ebx
f0104b56:	5b                   	pop    %ebx
  popl %eax
f0104b57:	58                   	pop    %eax
  popl %ebp
f0104b58:	5d                   	pop    %ebp
  ret
f0104b59:	c3                   	ret    

f0104b5a <mc146818_read>:
#include <kern/trap/trap.h>


unsigned
mc146818_read(unsigned reg)
{
f0104b5a:	55                   	push   %ebp
f0104b5b:	89 e5                	mov    %esp,%ebp
f0104b5d:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0104b60:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b63:	0f b6 c0             	movzbl %al,%eax
f0104b66:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0104b6d:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104b70:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104b73:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104b76:	ee                   	out    %al,(%dx)
f0104b77:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104b7e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104b81:	89 c2                	mov    %eax,%edx
f0104b83:	ec                   	in     (%dx),%al
f0104b84:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0104b87:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f0104b8a:	0f b6 c0             	movzbl %al,%eax
}
f0104b8d:	c9                   	leave  
f0104b8e:	c3                   	ret    

f0104b8f <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f0104b8f:	55                   	push   %ebp
f0104b90:	89 e5                	mov    %esp,%ebp
f0104b92:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0104b95:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b98:	0f b6 c0             	movzbl %al,%eax
f0104b9b:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0104ba2:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104ba5:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104ba8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104bab:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0104bac:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104baf:	0f b6 c0             	movzbl %al,%eax
f0104bb2:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0104bb9:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104bbc:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104bbf:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104bc2:	ee                   	out    %al,(%dx)
}
f0104bc3:	90                   	nop
f0104bc4:	c9                   	leave  
f0104bc5:	c3                   	ret    

f0104bc6 <kclock_init>:
 * PIT channel is reset, and the output immediately goes to its initial state
 * (which depends on the mode).
 */

void kclock_init()
{
f0104bc6:	55                   	push   %ebp
f0104bc7:	89 e5                	mov    %esp,%ebp
f0104bc9:	83 ec 08             	sub    $0x8,%esp
	ticks = 0;
f0104bcc:	c7 05 68 1a 5a f0 00 	movl   $0x0,0xf05a1a68
f0104bd3:	00 00 00 
f0104bd6:	c7 05 6c 1a 5a f0 00 	movl   $0x0,0xf05a1a6c
f0104bdd:	00 00 00 
	irq_install_handler(0, &clock_interrupt_handler);
f0104be0:	83 ec 08             	sub    $0x8,%esp
f0104be3:	68 b4 6b 10 f0       	push   $0xf0106bb4
f0104be8:	6a 00                	push   $0x0
f0104bea:	e8 a9 87 00 00       	call   f010d398 <irq_install_handler>
f0104bef:	83 c4 10             	add    $0x10,%esp
}
f0104bf2:	90                   	nop
f0104bf3:	c9                   	leave  
f0104bf4:	c3                   	ret    

f0104bf5 <kclock_start>:
void
kclock_start(uint8 quantum_in_ms)
{
f0104bf5:	55                   	push   %ebp
f0104bf6:	89 e5                	mov    %esp,%ebp
f0104bf8:	53                   	push   %ebx
f0104bf9:	83 ec 24             	sub    $0x24,%esp
f0104bfc:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bff:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104c02:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104c09:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104c0d:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104c10:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c13:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104c14:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104c18:	77 48                	ja     f0104c62 <kclock_start+0x6d>
f0104c1a:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104c21:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104c25:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104c28:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104c2b:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0104c2c:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104c30:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104c35:	99                   	cltd   
f0104c36:	f7 fb                	idiv   %ebx
f0104c38:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104c3e:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104c42:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104c47:	99                   	cltd   
f0104c48:	f7 fb                	idiv   %ebx
f0104c4a:	89 c3                	mov    %eax,%ebx
f0104c4c:	89 c8                	mov    %ecx,%eax
f0104c4e:	99                   	cltd   
f0104c4f:	f7 fb                	idiv   %ebx
f0104c51:	0f b7 c0             	movzwl %ax,%eax
f0104c54:	83 ec 0c             	sub    $0xc,%esp
f0104c57:	50                   	push   %eax
f0104c58:	e8 b3 01 00 00       	call   f0104e10 <kclock_write_cnt0_LSB_first>
f0104c5d:	83 c4 10             	add    $0x10,%esp
f0104c60:	eb 13                	jmp    f0104c75 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104c62:	6a 35                	push   $0x35
f0104c64:	68 10 63 12 f0       	push   $0xf0126310
f0104c69:	6a 41                	push   $0x41
f0104c6b:	68 6c 63 12 f0       	push   $0xf012636c
f0104c70:	e8 a5 b6 ff ff       	call   f010031a <_panic>
//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup IRQ0 (timer interrupts) via 8259A\n");

	//irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
	irq_clear_mask(0);
f0104c75:	83 ec 0c             	sub    $0xc,%esp
f0104c78:	6a 00                	push   $0x0
f0104c7a:	e8 66 23 00 00       	call   f0106fe5 <irq_clear_mask>
f0104c7f:	83 c4 10             	add    $0x10,%esp

	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f0104c82:	90                   	nop
f0104c83:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104c86:	c9                   	leave  
f0104c87:	c3                   	ret    

f0104c88 <kclock_stop>:

void
kclock_stop(void)
{
f0104c88:	55                   	push   %ebp
f0104c89:	89 e5                	mov    %esp,%ebp
f0104c8b:	83 ec 18             	sub    $0x18,%esp
f0104c8e:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104c95:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104c99:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104c9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104c9f:	ee                   	out    %al,(%dx)
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}

	/*Mask the IRQ0 (Timer Interrupt)*/
	//irq_setmask_8259A(0xFFFF);
	irq_set_mask(0);
f0104ca0:	83 ec 0c             	sub    $0xc,%esp
f0104ca3:	6a 00                	push   $0x0
f0104ca5:	e8 c6 22 00 00       	call   f0106f70 <irq_set_mask>
f0104caa:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f0104cad:	90                   	nop
f0104cae:	c9                   	leave  
f0104caf:	c3                   	ret    

f0104cb0 <kclock_resume>:

void
kclock_resume(void)
{
f0104cb0:	55                   	push   %ebp
f0104cb1:	89 e5                	mov    %esp,%ebp
f0104cb3:	83 ec 18             	sub    $0x18,%esp
	/*2024: changed to latch
	 * the current count is copied into an internal "latch register" which can then be read via the data port corresponding to the selected channel (I/O ports 0x40 to 0x42). The value kept in the latch register remains the same until it has been fully read, or until a new mode/command register is written.
	 * The main benefit of the latch command is that it allows both bytes of the current count to be read without inconsistencies. For example, if you didn't use the latch command, then the current count may decrease from 0x0200 to 0x01FF after you've read the low byte but before you've read the high byte, so that your software thinks the counter was 0x0100 instead of 0x0200 (or 0x01FF).
	 */
	//uint16 cnt0 = kclock_read_cnt0() ;
	uint16 cnt0 = kclock_read_cnt0_latch() ;
f0104cb6:	e8 f5 01 00 00       	call   f0104eb0 <kclock_read_cnt0_latch>
f0104cbb:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//cprintf("CLOCK RESUMED: Counter0 Value = %d\n", cnt0 );
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f0104cbf:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f0104cc4:	77 06                	ja     f0104ccc <kclock_resume+0x1c>
	{
		cnt0 = 20;
f0104cc6:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f0104ccc:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104cd0:	83 e0 01             	and    $0x1,%eax
f0104cd3:	66 85 c0             	test   %ax,%ax
f0104cd6:	74 09                	je     f0104ce1 <kclock_resume+0x31>
		cnt0++;
f0104cd8:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104cdc:	40                   	inc    %eax
f0104cdd:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f0104ce1:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104ce8:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104cec:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104cef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104cf2:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104cf3:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104cf7:	83 ec 0c             	sub    $0xc,%esp
f0104cfa:	50                   	push   %eax
f0104cfb:	e8 10 01 00 00       	call   f0104e10 <kclock_write_cnt0_LSB_first>
f0104d00:	83 c4 10             	add    $0x10,%esp
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup IRQ0: timer interrupts via 8259A\n");
	//irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
	irq_clear_mask(0);
f0104d03:	83 ec 0c             	sub    $0xc,%esp
f0104d06:	6a 00                	push   $0x0
f0104d08:	e8 d8 22 00 00       	call   f0106fe5 <irq_clear_mask>
f0104d0d:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0104d10:	90                   	nop
f0104d11:	c9                   	leave  
f0104d12:	c3                   	ret    

f0104d13 <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f0104d13:	55                   	push   %ebp
f0104d14:	89 e5                	mov    %esp,%ebp
f0104d16:	83 ec 28             	sub    $0x28,%esp
f0104d19:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d1c:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104d1f:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104d26:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104d2a:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104d2d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d30:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104d31:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0104d35:	83 ec 0c             	sub    $0xc,%esp
f0104d38:	50                   	push   %eax
f0104d39:	e8 d2 00 00 00       	call   f0104e10 <kclock_write_cnt0_LSB_first>
f0104d3e:	83 c4 10             	add    $0x10,%esp
	//irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
	irq_clear_mask(0);
f0104d41:	83 ec 0c             	sub    $0xc,%esp
f0104d44:	6a 00                	push   $0x0
f0104d46:	e8 9a 22 00 00       	call   f0106fe5 <irq_clear_mask>
f0104d4b:	83 c4 10             	add    $0x10,%esp
}
f0104d4e:	90                   	nop
f0104d4f:	c9                   	leave  
f0104d50:	c3                   	ret    

f0104d51 <kclock_set_quantum>:

//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f0104d51:	55                   	push   %ebp
f0104d52:	89 e5                	mov    %esp,%ebp
f0104d54:	56                   	push   %esi
f0104d55:	53                   	push   %ebx
f0104d56:	83 ec 20             	sub    $0x20,%esp
f0104d59:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d5c:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104d5f:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104d63:	0f 87 8a 00 00 00    	ja     f0104df3 <kclock_set_quantum+0xa2>
	{
		/*2023*/
//		int cnt = TIMER_DIV((1000/quantum_in_ms));
//		if (cnt%2 == 1)
//			cnt++;
		int cnt = NUM_CLKS_PER_QUANTUM(quantum_in_ms);
f0104d69:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104d6d:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104d72:	99                   	cltd   
f0104d73:	f7 fe                	idiv   %esi
f0104d75:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104d7b:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104d7f:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104d84:	99                   	cltd   
f0104d85:	f7 fb                	idiv   %ebx
f0104d87:	89 c6                	mov    %eax,%esi
f0104d89:	89 c8                	mov    %ecx,%eax
f0104d8b:	99                   	cltd   
f0104d8c:	f7 fe                	idiv   %esi
f0104d8e:	89 c3                	mov    %eax,%ebx
f0104d90:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
f0104d94:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104d99:	99                   	cltd   
f0104d9a:	f7 f9                	idiv   %ecx
f0104d9c:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104da2:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104da6:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104dab:	99                   	cltd   
f0104dac:	f7 fe                	idiv   %esi
f0104dae:	89 c6                	mov    %eax,%esi
f0104db0:	89 c8                	mov    %ecx,%eax
f0104db2:	99                   	cltd   
f0104db3:	f7 fe                	idiv   %esi
f0104db5:	25 01 00 00 80       	and    $0x80000001,%eax
f0104dba:	85 c0                	test   %eax,%eax
f0104dbc:	79 05                	jns    f0104dc3 <kclock_set_quantum+0x72>
f0104dbe:	48                   	dec    %eax
f0104dbf:	83 c8 fe             	or     $0xfffffffe,%eax
f0104dc2:	40                   	inc    %eax
f0104dc3:	01 d8                	add    %ebx,%eax
f0104dc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104dc8:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104dcf:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104dd3:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104dd6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104dd9:	ee                   	out    %al,(%dx)


		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f0104dda:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ddd:	0f b7 c0             	movzwl %ax,%eax
f0104de0:	83 ec 0c             	sub    $0xc,%esp
f0104de3:	50                   	push   %eax
f0104de4:	e8 27 00 00 00       	call   f0104e10 <kclock_write_cnt0_LSB_first>
f0104de9:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f0104dec:	e8 97 fe ff ff       	call   f0104c88 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0104df1:	eb 16                	jmp    f0104e09 <kclock_set_quantum+0xb8>
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
		//cprintf("\nkclock_set_quantum: clock after stop = %d\n",cnt0);
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104df3:	6a 35                	push   $0x35
f0104df5:	68 10 63 12 f0       	push   $0xf0126310
f0104dfa:	68 ea 00 00 00       	push   $0xea
f0104dff:	68 6c 63 12 f0       	push   $0xf012636c
f0104e04:	e8 11 b5 ff ff       	call   f010031a <_panic>
	}
}
f0104e09:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0104e0c:	5b                   	pop    %ebx
f0104e0d:	5e                   	pop    %esi
f0104e0e:	5d                   	pop    %ebp
f0104e0f:	c3                   	ret    

f0104e10 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104e10:	55                   	push   %ebp
f0104e11:	89 e5                	mov    %esp,%ebp
f0104e13:	83 ec 28             	sub    $0x28,%esp
f0104e16:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e19:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
	/*You must prevent other code from setting the PIT channel's reload value or reading
	 * its current count once you've sent the lowest 8 bits. Disabling interrupts works
	 * for single CPU computers
	 * */
	pushcli();	//disable interrupt
f0104e1d:	e8 9e 23 00 00       	call   f01071c0 <pushcli>
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104e22:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104e25:	0f b6 c0             	movzbl %al,%eax
f0104e28:	c7 45 f4 40 00 00 00 	movl   $0x40,-0xc(%ebp)
f0104e2f:	88 45 ee             	mov    %al,-0x12(%ebp)
f0104e32:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104e35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104e38:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104e39:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104e3c:	66 c1 e8 08          	shr    $0x8,%ax
f0104e40:	0f b6 c0             	movzbl %al,%eax
f0104e43:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)
f0104e4a:	88 45 ef             	mov    %al,-0x11(%ebp)
f0104e4d:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104e50:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104e53:	ee                   	out    %al,(%dx)
	popcli();	//enable interrupt
f0104e54:	e8 b9 23 00 00       	call   f0107212 <popcli>

}
f0104e59:	90                   	nop
f0104e5a:	c9                   	leave  
f0104e5b:	c3                   	ret    

f0104e5c <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104e5c:	55                   	push   %ebp
f0104e5d:	89 e5                	mov    %esp,%ebp
f0104e5f:	83 ec 28             	sub    $0x28,%esp
	pushcli();	//disable interrupt
f0104e62:	e8 59 23 00 00       	call   f01071c0 <pushcli>
f0104e67:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104e6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104e71:	89 c2                	mov    %eax,%edx
f0104e73:	ec                   	in     (%dx),%al
f0104e74:	88 45 e6             	mov    %al,-0x1a(%ebp)
	return data;
f0104e77:	8a 45 e6             	mov    -0x1a(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104e7a:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104e7d:	c7 45 e8 40 00 00 00 	movl   $0x40,-0x18(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104e84:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104e87:	89 c2                	mov    %eax,%edx
f0104e89:	ec                   	in     (%dx),%al
f0104e8a:	88 45 e7             	mov    %al,-0x19(%ebp)
	return data;
f0104e8d:	8a 45 e7             	mov    -0x19(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104e90:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104e93:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0104e97:	c1 e0 08             	shl    $0x8,%eax
f0104e9a:	89 c2                	mov    %eax,%edx
f0104e9c:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0104ea0:	09 d0                	or     %edx,%eax
f0104ea2:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	popcli();	//enable interrupt
f0104ea6:	e8 67 23 00 00       	call   f0107212 <popcli>
	return cnt0 ;
f0104eab:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0104eae:	c9                   	leave  
f0104eaf:	c3                   	ret    

f0104eb0 <kclock_read_cnt0_latch>:
 * instead of 0x0200 (or 0x01FF).
 * REF: OSDev Wiki
 */
uint16
kclock_read_cnt0_latch(void)
{
f0104eb0:	55                   	push   %ebp
f0104eb1:	89 e5                	mov    %esp,%ebp
f0104eb3:	83 ec 30             	sub    $0x30,%esp
f0104eb6:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104ebd:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104ec0:	89 c2                	mov    %eax,%edx
f0104ec2:	ec                   	in     (%dx),%al
f0104ec3:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0104ec6:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f0104ec9:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104ecc:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104ed3:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104ed7:	8a 45 dc             	mov    -0x24(%ebp),%al
f0104eda:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104edd:	ee                   	out    %al,(%dx)
f0104ede:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104ee5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104ee8:	89 c2                	mov    %eax,%edx
f0104eea:	ec                   	in     (%dx),%al
f0104eeb:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f0104eee:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104ef1:	88 45 f3             	mov    %al,-0xd(%ebp)
f0104ef4:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104efb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104efe:	89 c2                	mov    %eax,%edx
f0104f00:	ec                   	in     (%dx),%al
f0104f01:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0104f04:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104f07:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104f0a:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0104f0e:	c1 e0 08             	shl    $0x8,%eax
f0104f11:	89 c2                	mov    %eax,%edx
f0104f13:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104f17:	09 d0                	or     %edx,%eax
f0104f19:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0104f1d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104f21:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104f28:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104f2b:	8a 45 df             	mov    -0x21(%ebp),%al
f0104f2e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104f31:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104f32:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104f35:	c9                   	leave  
f0104f36:	c3                   	ret    

f0104f37 <init_queue>:

//================================
// [1] Initialize the given queue:
//================================
void init_queue(struct Env_Queue* queue)
{
f0104f37:	55                   	push   %ebp
f0104f38:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104f3a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104f3e:	74 1d                	je     f0104f5d <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104f40:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f43:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104f49:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f4c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104f53:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f56:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0104f5d:	90                   	nop
f0104f5e:	5d                   	pop    %ebp
f0104f5f:	c3                   	ret    

f0104f60 <queue_size>:

//================================
// [2] Get queue size:
//================================
int queue_size(struct Env_Queue* queue)
{
f0104f60:	55                   	push   %ebp
f0104f61:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104f63:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104f67:	74 08                	je     f0104f71 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f0104f69:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f6c:	8b 40 0c             	mov    0xc(%eax),%eax
f0104f6f:	eb 05                	jmp    f0104f76 <queue_size+0x16>
	}
	else
	{
		return 0;
f0104f71:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f0104f76:	5d                   	pop    %ebp
f0104f77:	c3                   	ret    

f0104f78 <enqueue>:

//====================================
// [3] Enqueue env in the given queue:
//====================================
void enqueue(struct Env_Queue* queue, struct Env* env)
{
f0104f78:	55                   	push   %ebp
f0104f79:	89 e5                	mov    %esp,%ebp
f0104f7b:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104f7e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104f82:	75 16                	jne    f0104f9a <enqueue+0x22>
f0104f84:	68 80 63 12 f0       	push   $0xf0126380
f0104f89:	68 8e 63 12 f0       	push   $0xf012638e
f0104f8e:	6a 34                	push   $0x34
f0104f90:	68 a3 63 12 f0       	push   $0xf01263a3
f0104f95:	e8 80 b3 ff ff       	call   f010031a <_panic>
	if(env != NULL)
f0104f9a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104f9e:	74 66                	je     f0105006 <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f0104fa0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104fa4:	75 14                	jne    f0104fba <enqueue+0x42>
f0104fa6:	83 ec 04             	sub    $0x4,%esp
f0104fa9:	68 bc 63 12 f0       	push   $0xf01263bc
f0104fae:	6a 37                	push   $0x37
f0104fb0:	68 a3 63 12 f0       	push   $0xf01263a3
f0104fb5:	e8 60 b3 ff ff       	call   f010031a <_panic>
f0104fba:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fbd:	8b 10                	mov    (%eax),%edx
f0104fbf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fc2:	89 50 08             	mov    %edx,0x8(%eax)
f0104fc5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fc8:	8b 40 08             	mov    0x8(%eax),%eax
f0104fcb:	85 c0                	test   %eax,%eax
f0104fcd:	74 0d                	je     f0104fdc <enqueue+0x64>
f0104fcf:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fd2:	8b 00                	mov    (%eax),%eax
f0104fd4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104fd7:	89 50 0c             	mov    %edx,0xc(%eax)
f0104fda:	eb 09                	jmp    f0104fe5 <enqueue+0x6d>
f0104fdc:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fdf:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104fe2:	89 50 04             	mov    %edx,0x4(%eax)
f0104fe5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fe8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104feb:	89 10                	mov    %edx,(%eax)
f0104fed:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104ff0:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0104ff7:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ffa:	8b 40 0c             	mov    0xc(%eax),%eax
f0104ffd:	8d 50 01             	lea    0x1(%eax),%edx
f0105000:	8b 45 08             	mov    0x8(%ebp),%eax
f0105003:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0105006:	90                   	nop
f0105007:	c9                   	leave  
f0105008:	c3                   	ret    

f0105009 <dequeue>:

//======================================
// [4] Dequeue env from the given queue:
//======================================
struct Env* dequeue(struct Env_Queue* queue)
{
f0105009:	55                   	push   %ebp
f010500a:	89 e5                	mov    %esp,%ebp
f010500c:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f010500f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105013:	75 0a                	jne    f010501f <dequeue+0x16>
f0105015:	b8 00 00 00 00       	mov    $0x0,%eax
f010501a:	e9 a0 00 00 00       	jmp    f01050bf <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f010501f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105022:	8b 40 04             	mov    0x4(%eax),%eax
f0105025:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f0105028:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010502c:	0f 84 8a 00 00 00    	je     f01050bc <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0105032:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105036:	75 14                	jne    f010504c <dequeue+0x43>
f0105038:	83 ec 04             	sub    $0x4,%esp
f010503b:	68 df 63 12 f0       	push   $0xf01263df
f0105040:	6a 44                	push   $0x44
f0105042:	68 a3 63 12 f0       	push   $0xf01263a3
f0105047:	e8 ce b2 ff ff       	call   f010031a <_panic>
f010504c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010504f:	8b 40 08             	mov    0x8(%eax),%eax
f0105052:	85 c0                	test   %eax,%eax
f0105054:	74 11                	je     f0105067 <dequeue+0x5e>
f0105056:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105059:	8b 40 08             	mov    0x8(%eax),%eax
f010505c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010505f:	8b 52 0c             	mov    0xc(%edx),%edx
f0105062:	89 50 0c             	mov    %edx,0xc(%eax)
f0105065:	eb 0c                	jmp    f0105073 <dequeue+0x6a>
f0105067:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010506a:	8b 50 0c             	mov    0xc(%eax),%edx
f010506d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105070:	89 50 04             	mov    %edx,0x4(%eax)
f0105073:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105076:	8b 40 0c             	mov    0xc(%eax),%eax
f0105079:	85 c0                	test   %eax,%eax
f010507b:	74 11                	je     f010508e <dequeue+0x85>
f010507d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105080:	8b 40 0c             	mov    0xc(%eax),%eax
f0105083:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105086:	8b 52 08             	mov    0x8(%edx),%edx
f0105089:	89 50 08             	mov    %edx,0x8(%eax)
f010508c:	eb 0b                	jmp    f0105099 <dequeue+0x90>
f010508e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105091:	8b 50 08             	mov    0x8(%eax),%edx
f0105094:	8b 45 08             	mov    0x8(%ebp),%eax
f0105097:	89 10                	mov    %edx,(%eax)
f0105099:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010509c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f01050a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050a6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f01050ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01050b0:	8b 40 0c             	mov    0xc(%eax),%eax
f01050b3:	8d 50 ff             	lea    -0x1(%eax),%edx
f01050b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01050b9:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f01050bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01050bf:	c9                   	leave  
f01050c0:	c3                   	ret    

f01050c1 <remove_from_queue>:

//====================================
// [5] Remove env from the given queue:
//====================================
void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f01050c1:	55                   	push   %ebp
f01050c2:	89 e5                	mov    %esp,%ebp
f01050c4:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01050c7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01050cb:	75 16                	jne    f01050e3 <remove_from_queue+0x22>
f01050cd:	68 80 63 12 f0       	push   $0xf0126380
f01050d2:	68 8e 63 12 f0       	push   $0xf012638e
f01050d7:	6a 4e                	push   $0x4e
f01050d9:	68 a3 63 12 f0       	push   $0xf01263a3
f01050de:	e8 37 b2 ff ff       	call   f010031a <_panic>

	if (e != NULL)
f01050e3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01050e7:	0f 84 8a 00 00 00    	je     f0105177 <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f01050ed:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01050f1:	75 14                	jne    f0105107 <remove_from_queue+0x46>
f01050f3:	83 ec 04             	sub    $0x4,%esp
f01050f6:	68 df 63 12 f0       	push   $0xf01263df
f01050fb:	6a 52                	push   $0x52
f01050fd:	68 a3 63 12 f0       	push   $0xf01263a3
f0105102:	e8 13 b2 ff ff       	call   f010031a <_panic>
f0105107:	8b 45 0c             	mov    0xc(%ebp),%eax
f010510a:	8b 40 08             	mov    0x8(%eax),%eax
f010510d:	85 c0                	test   %eax,%eax
f010510f:	74 11                	je     f0105122 <remove_from_queue+0x61>
f0105111:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105114:	8b 40 08             	mov    0x8(%eax),%eax
f0105117:	8b 55 0c             	mov    0xc(%ebp),%edx
f010511a:	8b 52 0c             	mov    0xc(%edx),%edx
f010511d:	89 50 0c             	mov    %edx,0xc(%eax)
f0105120:	eb 0c                	jmp    f010512e <remove_from_queue+0x6d>
f0105122:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105125:	8b 50 0c             	mov    0xc(%eax),%edx
f0105128:	8b 45 08             	mov    0x8(%ebp),%eax
f010512b:	89 50 04             	mov    %edx,0x4(%eax)
f010512e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105131:	8b 40 0c             	mov    0xc(%eax),%eax
f0105134:	85 c0                	test   %eax,%eax
f0105136:	74 11                	je     f0105149 <remove_from_queue+0x88>
f0105138:	8b 45 0c             	mov    0xc(%ebp),%eax
f010513b:	8b 40 0c             	mov    0xc(%eax),%eax
f010513e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0105141:	8b 52 08             	mov    0x8(%edx),%edx
f0105144:	89 50 08             	mov    %edx,0x8(%eax)
f0105147:	eb 0b                	jmp    f0105154 <remove_from_queue+0x93>
f0105149:	8b 45 0c             	mov    0xc(%ebp),%eax
f010514c:	8b 50 08             	mov    0x8(%eax),%edx
f010514f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105152:	89 10                	mov    %edx,(%eax)
f0105154:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105157:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f010515e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105161:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0105168:	8b 45 08             	mov    0x8(%ebp),%eax
f010516b:	8b 40 0c             	mov    0xc(%eax),%eax
f010516e:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105171:	8b 45 08             	mov    0x8(%ebp),%eax
f0105174:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0105177:	90                   	nop
f0105178:	c9                   	leave  
f0105179:	c3                   	ret    

f010517a <find_env_in_queue>:

//========================================
// [6] Search by envID in the given queue:
//========================================
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f010517a:	55                   	push   %ebp
f010517b:	89 e5                	mov    %esp,%ebp
f010517d:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f0105180:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105184:	75 07                	jne    f010518d <find_env_in_queue+0x13>
f0105186:	b8 00 00 00 00       	mov    $0x0,%eax
f010518b:	eb 58                	jmp    f01051e5 <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f010518d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f0105194:	8b 45 08             	mov    0x8(%ebp),%eax
f0105197:	8b 00                	mov    (%eax),%eax
f0105199:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010519c:	eb 19                	jmp    f01051b7 <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f010519e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01051a1:	8b 40 10             	mov    0x10(%eax),%eax
f01051a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01051a7:	75 05                	jne    f01051ae <find_env_in_queue+0x34>
		{
			return ptr_env;
f01051a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01051ac:	eb 37                	jmp    f01051e5 <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f01051ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01051b1:	8b 40 08             	mov    0x8(%eax),%eax
f01051b4:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01051b7:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01051bb:	74 08                	je     f01051c5 <find_env_in_queue+0x4b>
f01051bd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01051c0:	8b 40 08             	mov    0x8(%eax),%eax
f01051c3:	eb 05                	jmp    f01051ca <find_env_in_queue+0x50>
f01051c5:	b8 00 00 00 00       	mov    $0x0,%eax
f01051ca:	8b 55 08             	mov    0x8(%ebp),%edx
f01051cd:	89 42 08             	mov    %eax,0x8(%edx)
f01051d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01051d3:	8b 40 08             	mov    0x8(%eax),%eax
f01051d6:	85 c0                	test   %eax,%eax
f01051d8:	75 c4                	jne    f010519e <find_env_in_queue+0x24>
f01051da:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01051de:	75 be                	jne    f010519e <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f01051e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01051e5:	c9                   	leave  
f01051e6:	c3                   	ret    

f01051e7 <sched_delete_ready_queues>:

//========================================
// [1] Delete all ready queues:
//========================================
void sched_delete_ready_queues()
{
f01051e7:	55                   	push   %ebp
f01051e8:	89 e5                	mov    %esp,%ebp
			kfree(quantums);
	}
	release_spinlock(&ProcessQueues.qlock);

#endif
}
f01051ea:	90                   	nop
f01051eb:	5d                   	pop    %ebp
f01051ec:	c3                   	ret    

f01051ed <sched_insert_ready0>:

//=================================================
// [2] Insert the given Env in the 1st Ready Queue:
//=================================================
void sched_insert_ready0(struct Env* env)
{
f01051ed:	55                   	push   %ebp
f01051ee:	89 e5                	mov    %esp,%ebp
f01051f0:	83 ec 08             	sub    $0x8,%esp
	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f01051f3:	83 ec 0c             	sub    $0xc,%esp
f01051f6:	68 00 ee 59 f0       	push   $0xf059ee00
f01051fb:	e8 3a 9b 00 00       	call   f010ed3a <holding_spinlock>
f0105200:	83 c4 10             	add    $0x10,%esp
f0105203:	85 c0                	test   %eax,%eax
f0105205:	75 17                	jne    f010521e <sched_insert_ready0+0x31>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
f0105207:	83 ec 04             	sub    $0x4,%esp
f010520a:	68 00 64 12 f0       	push   $0xf0126400
f010520f:	68 85 00 00 00       	push   $0x85
f0105214:	68 a3 63 12 f0       	push   $0xf01263a3
f0105219:	e8 fc b0 ff ff       	call   f010031a <_panic>
	/*********************************************************************/

	assert(env != NULL);
f010521e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105222:	75 19                	jne    f010523d <sched_insert_ready0+0x50>
f0105224:	68 41 64 12 f0       	push   $0xf0126441
f0105229:	68 8e 63 12 f0       	push   $0xf012638e
f010522e:	68 88 00 00 00       	push   $0x88
f0105233:	68 a3 63 12 f0       	push   $0xf01263a3
f0105238:	e8 dd b0 ff ff       	call   f010031a <_panic>
	{
		//cprintf("\nInserting %d into ready queue 0\n", env->env_id);
		env->env_status = ENV_READY ;
f010523d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105240:	c7 40 18 01 00 00 00 	movl   $0x1,0x18(%eax)
		enqueue(&(ProcessQueues.env_ready_queues[0]), env);
f0105247:	83 ec 08             	sub    $0x8,%esp
f010524a:	ff 75 08             	pushl  0x8(%ebp)
f010524d:	68 90 ee 59 f0       	push   $0xf059ee90
f0105252:	e8 21 fd ff ff       	call   f0104f78 <enqueue>
f0105257:	83 c4 10             	add    $0x10,%esp
	}
}
f010525a:	90                   	nop
f010525b:	c9                   	leave  
f010525c:	c3                   	ret    

f010525d <sched_remove_ready>:

//=================================================
// [3] Remove the given Env from the Ready Queue(s):
//=================================================
void sched_remove_ready(struct Env* env)
{
f010525d:	55                   	push   %ebp
f010525e:	89 e5                	mov    %esp,%ebp
f0105260:	83 ec 18             	sub    $0x18,%esp
	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f0105263:	83 ec 0c             	sub    $0xc,%esp
f0105266:	68 00 ee 59 f0       	push   $0xf059ee00
f010526b:	e8 ca 9a 00 00       	call   f010ed3a <holding_spinlock>
f0105270:	83 c4 10             	add    $0x10,%esp
f0105273:	85 c0                	test   %eax,%eax
f0105275:	75 17                	jne    f010528e <sched_remove_ready+0x31>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
f0105277:	83 ec 04             	sub    $0x4,%esp
f010527a:	68 00 64 12 f0       	push   $0xf0126400
f010527f:	68 97 00 00 00       	push   $0x97
f0105284:	68 a3 63 12 f0       	push   $0xf01263a3
f0105289:	e8 8c b0 ff ff       	call   f010031a <_panic>
	/*********************************************************************/

	assert(env != NULL && env->env_status == ENV_READY);
f010528e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105292:	74 0b                	je     f010529f <sched_remove_ready+0x42>
f0105294:	8b 45 08             	mov    0x8(%ebp),%eax
f0105297:	8b 40 18             	mov    0x18(%eax),%eax
f010529a:	83 f8 01             	cmp    $0x1,%eax
f010529d:	74 19                	je     f01052b8 <sched_remove_ready+0x5b>
f010529f:	68 50 64 12 f0       	push   $0xf0126450
f01052a4:	68 8e 63 12 f0       	push   $0xf012638e
f01052a9:	68 9a 00 00 00       	push   $0x9a
f01052ae:	68 a3 63 12 f0       	push   $0xf01263a3
f01052b3:	e8 62 b0 ff ff       	call   f010031a <_panic>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01052b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01052bf:	e9 f7 00 00 00       	jmp    f01053bb <sched_remove_ready+0x15e>
		{
			struct Env * ptr_env = find_env_in_queue(&(ProcessQueues.env_ready_queues[i]), env->env_id);
f01052c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01052c7:	8b 40 10             	mov    0x10(%eax),%eax
f01052ca:	89 c2                	mov    %eax,%edx
f01052cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052cf:	83 c0 09             	add    $0x9,%eax
f01052d2:	c1 e0 04             	shl    $0x4,%eax
f01052d5:	05 00 ee 59 f0       	add    $0xf059ee00,%eax
f01052da:	83 ec 08             	sub    $0x8,%esp
f01052dd:	52                   	push   %edx
f01052de:	50                   	push   %eax
f01052df:	e8 96 fe ff ff       	call   f010517a <find_env_in_queue>
f01052e4:	83 c4 10             	add    $0x10,%esp
f01052e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f01052ea:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01052ee:	0f 84 c4 00 00 00    	je     f01053b8 <sched_remove_ready+0x15b>
			{
				LIST_REMOVE(&(ProcessQueues.env_ready_queues[i]), env);
f01052f4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01052f8:	75 17                	jne    f0105311 <sched_remove_ready+0xb4>
f01052fa:	83 ec 04             	sub    $0x4,%esp
f01052fd:	68 df 63 12 f0       	push   $0xf01263df
f0105302:	68 a1 00 00 00       	push   $0xa1
f0105307:	68 a3 63 12 f0       	push   $0xf01263a3
f010530c:	e8 09 b0 ff ff       	call   f010031a <_panic>
f0105311:	8b 45 08             	mov    0x8(%ebp),%eax
f0105314:	8b 40 08             	mov    0x8(%eax),%eax
f0105317:	85 c0                	test   %eax,%eax
f0105319:	74 11                	je     f010532c <sched_remove_ready+0xcf>
f010531b:	8b 45 08             	mov    0x8(%ebp),%eax
f010531e:	8b 40 08             	mov    0x8(%eax),%eax
f0105321:	8b 55 08             	mov    0x8(%ebp),%edx
f0105324:	8b 52 0c             	mov    0xc(%edx),%edx
f0105327:	89 50 0c             	mov    %edx,0xc(%eax)
f010532a:	eb 17                	jmp    f0105343 <sched_remove_ready+0xe6>
f010532c:	8b 45 08             	mov    0x8(%ebp),%eax
f010532f:	8b 40 0c             	mov    0xc(%eax),%eax
f0105332:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105335:	83 c2 09             	add    $0x9,%edx
f0105338:	c1 e2 04             	shl    $0x4,%edx
f010533b:	81 c2 04 ee 59 f0    	add    $0xf059ee04,%edx
f0105341:	89 02                	mov    %eax,(%edx)
f0105343:	8b 45 08             	mov    0x8(%ebp),%eax
f0105346:	8b 40 0c             	mov    0xc(%eax),%eax
f0105349:	85 c0                	test   %eax,%eax
f010534b:	74 11                	je     f010535e <sched_remove_ready+0x101>
f010534d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105350:	8b 40 0c             	mov    0xc(%eax),%eax
f0105353:	8b 55 08             	mov    0x8(%ebp),%edx
f0105356:	8b 52 08             	mov    0x8(%edx),%edx
f0105359:	89 50 08             	mov    %edx,0x8(%eax)
f010535c:	eb 17                	jmp    f0105375 <sched_remove_ready+0x118>
f010535e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105361:	8b 40 08             	mov    0x8(%eax),%eax
f0105364:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105367:	83 c2 09             	add    $0x9,%edx
f010536a:	c1 e2 04             	shl    $0x4,%edx
f010536d:	81 c2 00 ee 59 f0    	add    $0xf059ee00,%edx
f0105373:	89 02                	mov    %eax,(%edx)
f0105375:	8b 45 08             	mov    0x8(%ebp),%eax
f0105378:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f010537f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105382:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0105389:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010538c:	83 c0 09             	add    $0x9,%eax
f010538f:	c1 e0 04             	shl    $0x4,%eax
f0105392:	05 0c ee 59 f0       	add    $0xf059ee0c,%eax
f0105397:	8b 00                	mov    (%eax),%eax
f0105399:	8d 50 ff             	lea    -0x1(%eax),%edx
f010539c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010539f:	83 c0 09             	add    $0x9,%eax
f01053a2:	c1 e0 04             	shl    $0x4,%eax
f01053a5:	05 0c ee 59 f0       	add    $0xf059ee0c,%eax
f01053aa:	89 10                	mov    %edx,(%eax)
				env->env_status = ENV_UNKNOWN;
f01053ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01053af:	c7 40 18 06 00 00 00 	movl   $0x6,0x18(%eax)
				return ;
f01053b6:	eb 14                	jmp    f01053cc <sched_remove_ready+0x16f>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
	/*********************************************************************/

	assert(env != NULL && env->env_status == ENV_READY);
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01053b8:	ff 45 f4             	incl   -0xc(%ebp)
f01053bb:	a0 00 1b 5a f0       	mov    0xf05a1b00,%al
f01053c0:	0f b6 c0             	movzbl %al,%eax
f01053c3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01053c6:	0f 8f f8 fe ff ff    	jg     f01052c4 <sched_remove_ready+0x67>
				env->env_status = ENV_UNKNOWN;
				return ;
			}
		}
	}
}
f01053cc:	c9                   	leave  
f01053cd:	c3                   	ret    

f01053ce <sched_insert_new>:

//=================================================
// [4] Insert the given Env in NEW Queue:
//=================================================
void sched_insert_new(struct Env* env)
{
f01053ce:	55                   	push   %ebp
f01053cf:	89 e5                	mov    %esp,%ebp
f01053d1:	83 ec 08             	sub    $0x8,%esp
	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f01053d4:	83 ec 0c             	sub    $0xc,%esp
f01053d7:	68 00 ee 59 f0       	push   $0xf059ee00
f01053dc:	e8 59 99 00 00       	call   f010ed3a <holding_spinlock>
f01053e1:	83 c4 10             	add    $0x10,%esp
f01053e4:	85 c0                	test   %eax,%eax
f01053e6:	75 17                	jne    f01053ff <sched_insert_new+0x31>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
f01053e8:	83 ec 04             	sub    $0x4,%esp
f01053eb:	68 00 64 12 f0       	push   $0xf0126400
f01053f0:	68 b0 00 00 00       	push   $0xb0
f01053f5:	68 a3 63 12 f0       	push   $0xf01263a3
f01053fa:	e8 1b af ff ff       	call   f010031a <_panic>
	/*********************************************************************/

	assert(env != NULL);
f01053ff:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105403:	75 19                	jne    f010541e <sched_insert_new+0x50>
f0105405:	68 41 64 12 f0       	push   $0xf0126441
f010540a:	68 8e 63 12 f0       	push   $0xf012638e
f010540f:	68 b3 00 00 00       	push   $0xb3
f0105414:	68 a3 63 12 f0       	push   $0xf01263a3
f0105419:	e8 fc ae ff ff       	call   f010031a <_panic>
	{
		env->env_status = ENV_NEW ;
f010541e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105421:	c7 40 18 04 00 00 00 	movl   $0x4,0x18(%eax)
		enqueue(&ProcessQueues.env_new_queue, env);
f0105428:	83 ec 08             	sub    $0x8,%esp
f010542b:	ff 75 08             	pushl  0x8(%ebp)
f010542e:	68 70 ee 59 f0       	push   $0xf059ee70
f0105433:	e8 40 fb ff ff       	call   f0104f78 <enqueue>
f0105438:	83 c4 10             	add    $0x10,%esp
	}
}
f010543b:	90                   	nop
f010543c:	c9                   	leave  
f010543d:	c3                   	ret    

f010543e <sched_remove_new>:

//=================================================
// [5] Remove the given Env from NEW Queue:
//=================================================
void sched_remove_new(struct Env* env)
{
f010543e:	55                   	push   %ebp
f010543f:	89 e5                	mov    %esp,%ebp
f0105441:	83 ec 08             	sub    $0x8,%esp
	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f0105444:	83 ec 0c             	sub    $0xc,%esp
f0105447:	68 00 ee 59 f0       	push   $0xf059ee00
f010544c:	e8 e9 98 00 00       	call   f010ed3a <holding_spinlock>
f0105451:	83 c4 10             	add    $0x10,%esp
f0105454:	85 c0                	test   %eax,%eax
f0105456:	75 17                	jne    f010546f <sched_remove_new+0x31>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
f0105458:	83 ec 04             	sub    $0x4,%esp
f010545b:	68 00 64 12 f0       	push   $0xf0126400
f0105460:	68 c1 00 00 00       	push   $0xc1
f0105465:	68 a3 63 12 f0       	push   $0xf01263a3
f010546a:	e8 ab ae ff ff       	call   f010031a <_panic>
	/*********************************************************************/

	assert(env != NULL && env->env_status == ENV_NEW);
f010546f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105473:	74 0b                	je     f0105480 <sched_remove_new+0x42>
f0105475:	8b 45 08             	mov    0x8(%ebp),%eax
f0105478:	8b 40 18             	mov    0x18(%eax),%eax
f010547b:	83 f8 04             	cmp    $0x4,%eax
f010547e:	74 19                	je     f0105499 <sched_remove_new+0x5b>
f0105480:	68 7c 64 12 f0       	push   $0xf012647c
f0105485:	68 8e 63 12 f0       	push   $0xf012638e
f010548a:	68 c4 00 00 00       	push   $0xc4
f010548f:	68 a3 63 12 f0       	push   $0xf01263a3
f0105494:	e8 81 ae ff ff       	call   f010031a <_panic>
	{
		LIST_REMOVE(&ProcessQueues.env_new_queue, env) ;
f0105499:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010549d:	75 17                	jne    f01054b6 <sched_remove_new+0x78>
f010549f:	83 ec 04             	sub    $0x4,%esp
f01054a2:	68 df 63 12 f0       	push   $0xf01263df
f01054a7:	68 c6 00 00 00       	push   $0xc6
f01054ac:	68 a3 63 12 f0       	push   $0xf01263a3
f01054b1:	e8 64 ae ff ff       	call   f010031a <_panic>
f01054b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01054b9:	8b 40 08             	mov    0x8(%eax),%eax
f01054bc:	85 c0                	test   %eax,%eax
f01054be:	74 11                	je     f01054d1 <sched_remove_new+0x93>
f01054c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01054c3:	8b 40 08             	mov    0x8(%eax),%eax
f01054c6:	8b 55 08             	mov    0x8(%ebp),%edx
f01054c9:	8b 52 0c             	mov    0xc(%edx),%edx
f01054cc:	89 50 0c             	mov    %edx,0xc(%eax)
f01054cf:	eb 0b                	jmp    f01054dc <sched_remove_new+0x9e>
f01054d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01054d4:	8b 40 0c             	mov    0xc(%eax),%eax
f01054d7:	a3 74 ee 59 f0       	mov    %eax,0xf059ee74
f01054dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01054df:	8b 40 0c             	mov    0xc(%eax),%eax
f01054e2:	85 c0                	test   %eax,%eax
f01054e4:	74 11                	je     f01054f7 <sched_remove_new+0xb9>
f01054e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01054e9:	8b 40 0c             	mov    0xc(%eax),%eax
f01054ec:	8b 55 08             	mov    0x8(%ebp),%edx
f01054ef:	8b 52 08             	mov    0x8(%edx),%edx
f01054f2:	89 50 08             	mov    %edx,0x8(%eax)
f01054f5:	eb 0b                	jmp    f0105502 <sched_remove_new+0xc4>
f01054f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01054fa:	8b 40 08             	mov    0x8(%eax),%eax
f01054fd:	a3 70 ee 59 f0       	mov    %eax,0xf059ee70
f0105502:	8b 45 08             	mov    0x8(%ebp),%eax
f0105505:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f010550c:	8b 45 08             	mov    0x8(%ebp),%eax
f010550f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0105516:	a1 7c ee 59 f0       	mov    0xf059ee7c,%eax
f010551b:	48                   	dec    %eax
f010551c:	a3 7c ee 59 f0       	mov    %eax,0xf059ee7c
		env->env_status = ENV_UNKNOWN;
f0105521:	8b 45 08             	mov    0x8(%ebp),%eax
f0105524:	c7 40 18 06 00 00 00 	movl   $0x6,0x18(%eax)
	}
}
f010552b:	90                   	nop
f010552c:	c9                   	leave  
f010552d:	c3                   	ret    

f010552e <sched_insert_exit>:

//=================================================
// [6] Insert the given Env in EXIT Queue:
//=================================================
void sched_insert_exit(struct Env* env)
{
f010552e:	55                   	push   %ebp
f010552f:	89 e5                	mov    %esp,%ebp
f0105531:	83 ec 08             	sub    $0x8,%esp
	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f0105534:	83 ec 0c             	sub    $0xc,%esp
f0105537:	68 00 ee 59 f0       	push   $0xf059ee00
f010553c:	e8 f9 97 00 00       	call   f010ed3a <holding_spinlock>
f0105541:	83 c4 10             	add    $0x10,%esp
f0105544:	85 c0                	test   %eax,%eax
f0105546:	75 17                	jne    f010555f <sched_insert_exit+0x31>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
f0105548:	83 ec 04             	sub    $0x4,%esp
f010554b:	68 00 64 12 f0       	push   $0xf0126400
f0105550:	68 d2 00 00 00       	push   $0xd2
f0105555:	68 a3 63 12 f0       	push   $0xf01263a3
f010555a:	e8 bb ad ff ff       	call   f010031a <_panic>
	/*********************************************************************/

	assert(env != NULL);
f010555f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105563:	75 19                	jne    f010557e <sched_insert_exit+0x50>
f0105565:	68 41 64 12 f0       	push   $0xf0126441
f010556a:	68 8e 63 12 f0       	push   $0xf012638e
f010556f:	68 d5 00 00 00       	push   $0xd5
f0105574:	68 a3 63 12 f0       	push   $0xf01263a3
f0105579:	e8 9c ad ff ff       	call   f010031a <_panic>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f010557e:	e8 50 92 00 00       	call   f010e7d3 <isBufferingEnabled>
f0105583:	84 c0                	test   %al,%al
f0105585:	74 0e                	je     f0105595 <sched_insert_exit+0x67>
f0105587:	83 ec 0c             	sub    $0xc,%esp
f010558a:	ff 75 08             	pushl  0x8(%ebp)
f010558d:	e8 ef 67 00 00       	call   f010bd81 <cleanup_buffers>
f0105592:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0105595:	8b 45 08             	mov    0x8(%ebp),%eax
f0105598:	c7 40 18 05 00 00 00 	movl   $0x5,0x18(%eax)
		enqueue(&ProcessQueues.env_exit_queue, env);
f010559f:	83 ec 08             	sub    $0x8,%esp
f01055a2:	ff 75 08             	pushl  0x8(%ebp)
f01055a5:	68 80 ee 59 f0       	push   $0xf059ee80
f01055aa:	e8 c9 f9 ff ff       	call   f0104f78 <enqueue>
f01055af:	83 c4 10             	add    $0x10,%esp
	}
}
f01055b2:	90                   	nop
f01055b3:	c9                   	leave  
f01055b4:	c3                   	ret    

f01055b5 <sched_remove_exit>:
//=================================================
// [7] Remove the given Env from EXIT Queue:
//=================================================
void sched_remove_exit(struct Env* env)
{
f01055b5:	55                   	push   %ebp
f01055b6:	89 e5                	mov    %esp,%ebp
f01055b8:	83 ec 08             	sub    $0x8,%esp
	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f01055bb:	83 ec 0c             	sub    $0xc,%esp
f01055be:	68 00 ee 59 f0       	push   $0xf059ee00
f01055c3:	e8 72 97 00 00       	call   f010ed3a <holding_spinlock>
f01055c8:	83 c4 10             	add    $0x10,%esp
f01055cb:	85 c0                	test   %eax,%eax
f01055cd:	75 17                	jne    f01055e6 <sched_remove_exit+0x31>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
f01055cf:	83 ec 04             	sub    $0x4,%esp
f01055d2:	68 00 64 12 f0       	push   $0xf0126400
f01055d7:	68 e3 00 00 00       	push   $0xe3
f01055dc:	68 a3 63 12 f0       	push   $0xf01263a3
f01055e1:	e8 34 ad ff ff       	call   f010031a <_panic>
	/*********************************************************************/

	assert(env != NULL && env->env_status == ENV_EXIT);
f01055e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01055ea:	74 0b                	je     f01055f7 <sched_remove_exit+0x42>
f01055ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01055ef:	8b 40 18             	mov    0x18(%eax),%eax
f01055f2:	83 f8 05             	cmp    $0x5,%eax
f01055f5:	74 19                	je     f0105610 <sched_remove_exit+0x5b>
f01055f7:	68 a8 64 12 f0       	push   $0xf01264a8
f01055fc:	68 8e 63 12 f0       	push   $0xf012638e
f0105601:	68 e6 00 00 00       	push   $0xe6
f0105606:	68 a3 63 12 f0       	push   $0xf01263a3
f010560b:	e8 0a ad ff ff       	call   f010031a <_panic>
	{
		LIST_REMOVE(&ProcessQueues.env_exit_queue, env) ;
f0105610:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105614:	75 17                	jne    f010562d <sched_remove_exit+0x78>
f0105616:	83 ec 04             	sub    $0x4,%esp
f0105619:	68 df 63 12 f0       	push   $0xf01263df
f010561e:	68 e8 00 00 00       	push   $0xe8
f0105623:	68 a3 63 12 f0       	push   $0xf01263a3
f0105628:	e8 ed ac ff ff       	call   f010031a <_panic>
f010562d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105630:	8b 40 08             	mov    0x8(%eax),%eax
f0105633:	85 c0                	test   %eax,%eax
f0105635:	74 11                	je     f0105648 <sched_remove_exit+0x93>
f0105637:	8b 45 08             	mov    0x8(%ebp),%eax
f010563a:	8b 40 08             	mov    0x8(%eax),%eax
f010563d:	8b 55 08             	mov    0x8(%ebp),%edx
f0105640:	8b 52 0c             	mov    0xc(%edx),%edx
f0105643:	89 50 0c             	mov    %edx,0xc(%eax)
f0105646:	eb 0b                	jmp    f0105653 <sched_remove_exit+0x9e>
f0105648:	8b 45 08             	mov    0x8(%ebp),%eax
f010564b:	8b 40 0c             	mov    0xc(%eax),%eax
f010564e:	a3 84 ee 59 f0       	mov    %eax,0xf059ee84
f0105653:	8b 45 08             	mov    0x8(%ebp),%eax
f0105656:	8b 40 0c             	mov    0xc(%eax),%eax
f0105659:	85 c0                	test   %eax,%eax
f010565b:	74 11                	je     f010566e <sched_remove_exit+0xb9>
f010565d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105660:	8b 40 0c             	mov    0xc(%eax),%eax
f0105663:	8b 55 08             	mov    0x8(%ebp),%edx
f0105666:	8b 52 08             	mov    0x8(%edx),%edx
f0105669:	89 50 08             	mov    %edx,0x8(%eax)
f010566c:	eb 0b                	jmp    f0105679 <sched_remove_exit+0xc4>
f010566e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105671:	8b 40 08             	mov    0x8(%eax),%eax
f0105674:	a3 80 ee 59 f0       	mov    %eax,0xf059ee80
f0105679:	8b 45 08             	mov    0x8(%ebp),%eax
f010567c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f0105683:	8b 45 08             	mov    0x8(%ebp),%eax
f0105686:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f010568d:	a1 8c ee 59 f0       	mov    0xf059ee8c,%eax
f0105692:	48                   	dec    %eax
f0105693:	a3 8c ee 59 f0       	mov    %eax,0xf059ee8c
		env->env_status = ENV_UNKNOWN;
f0105698:	8b 45 08             	mov    0x8(%ebp),%eax
f010569b:	c7 40 18 06 00 00 00 	movl   $0x6,0x18(%eax)
	}
}
f01056a2:	90                   	nop
f01056a3:	c9                   	leave  
f01056a4:	c3                   	ret    

f01056a5 <sched_new_env>:

//=================================================
// [8] Sched the given Env in NEW Queue:
//=================================================
void sched_new_env(struct Env* e)
{
f01056a5:	55                   	push   %ebp
f01056a6:	89 e5                	mov    %esp,%ebp
f01056a8:	83 ec 08             	sub    $0x8,%esp
	  //cprintf("\n[SCHED_NEW_ENV] acquire: lock status before acquire = %d\n", qlock.locked);
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f01056ab:	83 ec 0c             	sub    $0xc,%esp
f01056ae:	68 00 ee 59 f0       	push   $0xf059ee00
f01056b3:	e8 69 94 00 00       	call   f010eb21 <acquire_spinlock>
f01056b8:	83 c4 10             	add    $0x10,%esp

	//add the given env to the scheduler NEW queue
	assert (e!=NULL);
f01056bb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01056bf:	75 19                	jne    f01056da <sched_new_env+0x35>
f01056c1:	68 d3 64 12 f0       	push   $0xf01264d3
f01056c6:	68 8e 63 12 f0       	push   $0xf012638e
f01056cb:	68 f6 00 00 00       	push   $0xf6
f01056d0:	68 a3 63 12 f0       	push   $0xf01263a3
f01056d5:	e8 40 ac ff ff       	call   f010031a <_panic>
	{
		sched_insert_new(e);
f01056da:	83 ec 0c             	sub    $0xc,%esp
f01056dd:	ff 75 08             	pushl  0x8(%ebp)
f01056e0:	e8 e9 fc ff ff       	call   f01053ce <sched_insert_new>
f01056e5:	83 c4 10             	add    $0x10,%esp
	}

	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f01056e8:	83 ec 0c             	sub    $0xc,%esp
f01056eb:	68 00 ee 59 f0       	push   $0xf059ee00
f01056f0:	e8 b3 94 00 00       	call   f010eba8 <release_spinlock>
f01056f5:	83 c4 10             	add    $0x10,%esp
	  //cprintf("\n[SCHED_NEW_ENV] release: lock status after = %d\n", qlock.locked);
}
f01056f8:	90                   	nop
f01056f9:	c9                   	leave  
f01056fa:	c3                   	ret    

f01056fb <sched_run_env>:

//=================================================
// [9] Run the given EnvID:
//=================================================
void sched_run_env(uint32 envId)
{
f01056fb:	55                   	push   %ebp
f01056fc:	89 e5                	mov    %esp,%ebp
f01056fe:	83 ec 18             	sub    $0x18,%esp
	  //cprintf("\n[SCHED_RUN_ENV] acquire: lock status before acquire = %d\n", qlock.locked);
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0105701:	83 ec 0c             	sub    $0xc,%esp
f0105704:	68 00 ee 59 f0       	push   $0xf059ee00
f0105709:	e8 13 94 00 00       	call   f010eb21 <acquire_spinlock>
f010570e:	83 c4 10             	add    $0x10,%esp
	struct Env* ptr_env=NULL;
f0105711:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f0105718:	a1 70 ee 59 f0       	mov    0xf059ee70,%eax
f010571d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105720:	eb 53                	jmp    f0105775 <sched_run_env+0x7a>
	{
		if(ptr_env->env_id == envId)
f0105722:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105725:	8b 40 10             	mov    0x10(%eax),%eax
f0105728:	3b 45 08             	cmp    0x8(%ebp),%eax
f010572b:	75 40                	jne    f010576d <sched_run_env+0x72>
		{
			sched_remove_new(ptr_env);
f010572d:	83 ec 0c             	sub    $0xc,%esp
f0105730:	ff 75 f4             	pushl  -0xc(%ebp)
f0105733:	e8 06 fd ff ff       	call   f010543e <sched_remove_new>
f0105738:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready0(ptr_env);
f010573b:	83 ec 0c             	sub    $0xc,%esp
f010573e:	ff 75 f4             	pushl  -0xc(%ebp)
f0105741:	e8 a7 fa ff ff       	call   f01051ed <sched_insert_ready0>
f0105746:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (mycpu()->scheduler_status == SCH_STOPPED)
f0105749:	e8 af 19 00 00       	call   f01070fd <mycpu>
f010574e:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
f0105754:	85 c0                	test   %eax,%eax
f0105756:	75 46                	jne    f010579e <sched_run_env+0xa3>
			{
				release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0105758:	83 ec 0c             	sub    $0xc,%esp
f010575b:	68 00 ee 59 f0       	push   $0xf059ee00
f0105760:	e8 43 94 00 00       	call   f010eba8 <release_spinlock>
f0105765:	83 c4 10             	add    $0x10,%esp
				  //cprintf("\n[SCHED_RUN_ENV] release#1: lock status after = %d\n", qlock.locked);
				fos_scheduler();
f0105768:	e8 45 10 00 00       	call   f01067b2 <fos_scheduler>
void sched_run_env(uint32 envId)
{
	  //cprintf("\n[SCHED_RUN_ENV] acquire: lock status before acquire = %d\n", qlock.locked);
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f010576d:	a1 78 ee 59 f0       	mov    0xf059ee78,%eax
f0105772:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105775:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105779:	74 08                	je     f0105783 <sched_run_env+0x88>
f010577b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010577e:	8b 40 08             	mov    0x8(%eax),%eax
f0105781:	eb 05                	jmp    f0105788 <sched_run_env+0x8d>
f0105783:	b8 00 00 00 00       	mov    $0x0,%eax
f0105788:	a3 78 ee 59 f0       	mov    %eax,0xf059ee78
f010578d:	a1 78 ee 59 f0       	mov    0xf059ee78,%eax
f0105792:	85 c0                	test   %eax,%eax
f0105794:	75 8c                	jne    f0105722 <sched_run_env+0x27>
f0105796:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010579a:	75 86                	jne    f0105722 <sched_run_env+0x27>
f010579c:	eb 01                	jmp    f010579f <sched_run_env+0xa4>
			}
			else
			{
				//can be invoked from a running environment via sys_run_env(), so just release the lock and resume
			}
			break;
f010579e:	90                   	nop
		}
	}
	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f010579f:	83 ec 0c             	sub    $0xc,%esp
f01057a2:	68 00 ee 59 f0       	push   $0xf059ee00
f01057a7:	e8 fc 93 00 00       	call   f010eba8 <release_spinlock>
f01057ac:	83 c4 10             	add    $0x10,%esp
	  //cprintf("\n[SCHED_RUN_ENV] release#2: lock status after = %d\n", qlock.locked);
}
f01057af:	90                   	nop
f01057b0:	c9                   	leave  
f01057b1:	c3                   	ret    

f01057b2 <sched_exit_env>:

//=================================================
// [10] Exit the given EnvID:
//=================================================
void sched_exit_env(uint32 envId)
{
f01057b2:	55                   	push   %ebp
f01057b3:	89 e5                	mov    %esp,%ebp
f01057b5:	83 ec 28             	sub    $0x28,%esp
	bool lock_already_held = holding_spinlock(&ProcessQueues.qlock);
f01057b8:	83 ec 0c             	sub    $0xc,%esp
f01057bb:	68 00 ee 59 f0       	push   $0xf059ee00
f01057c0:	e8 75 95 00 00       	call   f010ed3a <holding_spinlock>
f01057c5:	83 c4 10             	add    $0x10,%esp
f01057c8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	  //cprintf("\n[SCHED_EXIT_ENV] acquire: lock status before acquire = %d\n", qlock.locked);
	if (!lock_already_held)
f01057cb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01057cf:	75 10                	jne    f01057e1 <sched_exit_env+0x2f>
	{
		acquire_spinlock(&ProcessQueues.qlock);
f01057d1:	83 ec 0c             	sub    $0xc,%esp
f01057d4:	68 00 ee 59 f0       	push   $0xf059ee00
f01057d9:	e8 43 93 00 00       	call   f010eb21 <acquire_spinlock>
f01057de:	83 c4 10             	add    $0x10,%esp
	}
	struct Env* ptr_env=NULL;
f01057e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01057e8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01057ef:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01057f3:	75 59                	jne    f010584e <sched_exit_env+0x9c>
	{
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f01057f5:	a1 70 ee 59 f0       	mov    0xf059ee70,%eax
f01057fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01057fd:	eb 28                	jmp    f0105827 <sched_exit_env+0x75>
		{
			if(ptr_env->env_id == envId)
f01057ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105802:	8b 40 10             	mov    0x10(%eax),%eax
f0105805:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105808:	75 15                	jne    f010581f <sched_exit_env+0x6d>
			{
				sched_remove_new(ptr_env);
f010580a:	83 ec 0c             	sub    $0xc,%esp
f010580d:	ff 75 f4             	pushl  -0xc(%ebp)
f0105810:	e8 29 fc ff ff       	call   f010543e <sched_remove_new>
f0105815:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105818:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	}
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f010581f:	a1 78 ee 59 f0       	mov    0xf059ee78,%eax
f0105824:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105827:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010582b:	74 08                	je     f0105835 <sched_exit_env+0x83>
f010582d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105830:	8b 40 08             	mov    0x8(%eax),%eax
f0105833:	eb 05                	jmp    f010583a <sched_exit_env+0x88>
f0105835:	b8 00 00 00 00       	mov    $0x0,%eax
f010583a:	a3 78 ee 59 f0       	mov    %eax,0xf059ee78
f010583f:	a1 78 ee 59 f0       	mov    0xf059ee78,%eax
f0105844:	85 c0                	test   %eax,%eax
f0105846:	75 b7                	jne    f01057ff <sched_exit_env+0x4d>
f0105848:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010584c:	75 b1                	jne    f01057ff <sched_exit_env+0x4d>
				found = 1;
				//			return;
			}
		}
	}
	if (!found)
f010584e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105852:	0f 85 89 01 00 00    	jne    f01059e1 <sched_exit_env+0x22f>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105858:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010585f:	e9 69 01 00 00       	jmp    f01059cd <sched_exit_env+0x21b>
		{
			if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
f0105864:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105867:	83 c0 09             	add    $0x9,%eax
f010586a:	c1 e0 04             	shl    $0x4,%eax
f010586d:	05 00 ee 59 f0       	add    $0xf059ee00,%eax
f0105872:	8b 00                	mov    (%eax),%eax
f0105874:	85 c0                	test   %eax,%eax
f0105876:	0f 84 48 01 00 00    	je     f01059c4 <sched_exit_env+0x212>
			{
				ptr_env=NULL;
f010587c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f0105883:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105886:	83 c0 09             	add    $0x9,%eax
f0105889:	c1 e0 04             	shl    $0x4,%eax
f010588c:	05 00 ee 59 f0       	add    $0xf059ee00,%eax
f0105891:	8b 00                	mov    (%eax),%eax
f0105893:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105896:	e9 e3 00 00 00       	jmp    f010597e <sched_exit_env+0x1cc>
				{
					if(ptr_env->env_id == envId)
f010589b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010589e:	8b 40 10             	mov    0x10(%eax),%eax
f01058a1:	3b 45 08             	cmp    0x8(%ebp),%eax
f01058a4:	0f 85 c1 00 00 00    	jne    f010596b <sched_exit_env+0x1b9>
					{
						LIST_REMOVE(&(ProcessQueues.env_ready_queues[i]), ptr_env);
f01058aa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01058ae:	75 17                	jne    f01058c7 <sched_exit_env+0x115>
f01058b0:	83 ec 04             	sub    $0x4,%esp
f01058b3:	68 df 63 12 f0       	push   $0xf01263df
f01058b8:	68 44 01 00 00       	push   $0x144
f01058bd:	68 a3 63 12 f0       	push   $0xf01263a3
f01058c2:	e8 53 aa ff ff       	call   f010031a <_panic>
f01058c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058ca:	8b 40 08             	mov    0x8(%eax),%eax
f01058cd:	85 c0                	test   %eax,%eax
f01058cf:	74 11                	je     f01058e2 <sched_exit_env+0x130>
f01058d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058d4:	8b 40 08             	mov    0x8(%eax),%eax
f01058d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01058da:	8b 52 0c             	mov    0xc(%edx),%edx
f01058dd:	89 50 0c             	mov    %edx,0xc(%eax)
f01058e0:	eb 17                	jmp    f01058f9 <sched_exit_env+0x147>
f01058e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058e5:	8b 40 0c             	mov    0xc(%eax),%eax
f01058e8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01058eb:	83 c2 09             	add    $0x9,%edx
f01058ee:	c1 e2 04             	shl    $0x4,%edx
f01058f1:	81 c2 04 ee 59 f0    	add    $0xf059ee04,%edx
f01058f7:	89 02                	mov    %eax,(%edx)
f01058f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058fc:	8b 40 0c             	mov    0xc(%eax),%eax
f01058ff:	85 c0                	test   %eax,%eax
f0105901:	74 11                	je     f0105914 <sched_exit_env+0x162>
f0105903:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105906:	8b 40 0c             	mov    0xc(%eax),%eax
f0105909:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010590c:	8b 52 08             	mov    0x8(%edx),%edx
f010590f:	89 50 08             	mov    %edx,0x8(%eax)
f0105912:	eb 17                	jmp    f010592b <sched_exit_env+0x179>
f0105914:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105917:	8b 40 08             	mov    0x8(%eax),%eax
f010591a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010591d:	83 c2 09             	add    $0x9,%edx
f0105920:	c1 e2 04             	shl    $0x4,%edx
f0105923:	81 c2 00 ee 59 f0    	add    $0xf059ee00,%edx
f0105929:	89 02                	mov    %eax,(%edx)
f010592b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010592e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f0105935:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105938:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f010593f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105942:	83 c0 09             	add    $0x9,%eax
f0105945:	c1 e0 04             	shl    $0x4,%eax
f0105948:	05 0c ee 59 f0       	add    $0xf059ee0c,%eax
f010594d:	8b 00                	mov    (%eax),%eax
f010594f:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105952:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105955:	83 c0 09             	add    $0x9,%eax
f0105958:	c1 e0 04             	shl    $0x4,%eax
f010595b:	05 0c ee 59 f0       	add    $0xf059ee0c,%eax
f0105960:	89 10                	mov    %edx,(%eax)
						found = 1;
f0105962:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105969:	eb 59                	jmp    f01059c4 <sched_exit_env+0x212>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f010596b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010596e:	83 c0 09             	add    $0x9,%eax
f0105971:	c1 e0 04             	shl    $0x4,%eax
f0105974:	05 08 ee 59 f0       	add    $0xf059ee08,%eax
f0105979:	8b 00                	mov    (%eax),%eax
f010597b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010597e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105982:	74 08                	je     f010598c <sched_exit_env+0x1da>
f0105984:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105987:	8b 40 08             	mov    0x8(%eax),%eax
f010598a:	eb 05                	jmp    f0105991 <sched_exit_env+0x1df>
f010598c:	b8 00 00 00 00       	mov    $0x0,%eax
f0105991:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105994:	83 c2 09             	add    $0x9,%edx
f0105997:	c1 e2 04             	shl    $0x4,%edx
f010599a:	81 c2 08 ee 59 f0    	add    $0xf059ee08,%edx
f01059a0:	89 02                	mov    %eax,(%edx)
f01059a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059a5:	83 c0 09             	add    $0x9,%eax
f01059a8:	c1 e0 04             	shl    $0x4,%eax
f01059ab:	05 08 ee 59 f0       	add    $0xf059ee08,%eax
f01059b0:	8b 00                	mov    (%eax),%eax
f01059b2:	85 c0                	test   %eax,%eax
f01059b4:	0f 85 e1 fe ff ff    	jne    f010589b <sched_exit_env+0xe9>
f01059ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01059be:	0f 85 d7 fe ff ff    	jne    f010589b <sched_exit_env+0xe9>
						found = 1;
						break;
					}
				}
			}
			if (found) break;
f01059c4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01059c8:	75 16                	jne    f01059e0 <sched_exit_env+0x22e>
			}
		}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01059ca:	ff 45 ec             	incl   -0x14(%ebp)
f01059cd:	a0 00 1b 5a f0       	mov    0xf05a1b00,%al
f01059d2:	0f b6 c0             	movzbl %al,%eax
f01059d5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01059d8:	0f 8f 86 fe ff ff    	jg     f0105864 <sched_exit_env+0xb2>
f01059de:	eb 01                	jmp    f01059e1 <sched_exit_env+0x22f>
						found = 1;
						break;
					}
				}
			}
			if (found) break;
f01059e0:	90                   	nop
		}
	}
	struct Env* cur_env = get_cpu_proc();
f01059e1:	e8 8a 4d 00 00       	call   f010a770 <get_cpu_proc>
f01059e6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	assert(cur_env != NULL);
f01059e9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01059ed:	75 19                	jne    f0105a08 <sched_exit_env+0x256>
f01059ef:	68 db 64 12 f0       	push   $0xf01264db
f01059f4:	68 8e 63 12 f0       	push   $0xf012638e
f01059f9:	68 4e 01 00 00       	push   $0x14e
f01059fe:	68 a3 63 12 f0       	push   $0xf01263a3
f0105a03:	e8 12 a9 ff ff       	call   f010031a <_panic>
	if (!found)
f0105a08:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105a0c:	75 18                	jne    f0105a26 <sched_exit_env+0x274>
	{
		if (cur_env->env_id == envId)
f0105a0e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105a11:	8b 40 10             	mov    0x10(%eax),%eax
f0105a14:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105a17:	75 0d                	jne    f0105a26 <sched_exit_env+0x274>
		{
			ptr_env = cur_env;
f0105a19:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105a1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f0105a1f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f0105a26:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105a2a:	74 1e                	je     f0105a4a <sched_exit_env+0x298>
	{
		sched_insert_exit(ptr_env);
f0105a2c:	83 ec 0c             	sub    $0xc,%esp
f0105a2f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105a32:	e8 f7 fa ff ff       	call   f010552e <sched_insert_exit>
f0105a37:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back
		//to an exited env. Status already set to EXIT in the sched_insert_exit()
		//It's the fos_scheduler task to release the lock on the Qs after context_switch to it from
		//this process
		if (cur_env->env_id == envId)
f0105a3a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105a3d:	8b 40 10             	mov    0x10(%eax),%eax
f0105a40:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105a43:	75 05                	jne    f0105a4a <sched_exit_env+0x298>
		{
			//2024: Replaced by sched() which call context switch
			//fos_scheduler();
			sched();
f0105a45:	e8 b3 4e 00 00       	call   f010a8fd <sched>
		}
	}
	if (!lock_already_held)
f0105a4a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0105a4e:	75 10                	jne    f0105a60 <sched_exit_env+0x2ae>
	{
		release_spinlock(&ProcessQueues.qlock);
f0105a50:	83 ec 0c             	sub    $0xc,%esp
f0105a53:	68 00 ee 59 f0       	push   $0xf059ee00
f0105a58:	e8 4b 91 00 00       	call   f010eba8 <release_spinlock>
f0105a5d:	83 c4 10             	add    $0x10,%esp
	}
	//cprintf("\n[SCHED_EXIT_ENV] release: lock status after = %d\n", qlock.locked);
}
f0105a60:	90                   	nop
f0105a61:	c9                   	leave  
f0105a62:	c3                   	ret    

f0105a63 <sched_kill_env>:
/*2015*/
//=================================================
// [11] KILL the given EnvID:
//=================================================
void sched_kill_env(uint32 envId)
{
f0105a63:	55                   	push   %ebp
f0105a64:	89 e5                	mov    %esp,%ebp
f0105a66:	83 ec 18             	sub    $0x18,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0105a69:	83 ec 0c             	sub    $0xc,%esp
f0105a6c:	68 00 ee 59 f0       	push   $0xf059ee00
f0105a71:	e8 ab 90 00 00       	call   f010eb21 <acquire_spinlock>
f0105a76:	83 c4 10             	add    $0x10,%esp
	struct Env* ptr_env=NULL;
f0105a79:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0105a80:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105a87:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105a8b:	75 79                	jne    f0105b06 <sched_kill_env+0xa3>
	{
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f0105a8d:	a1 70 ee 59 f0       	mov    0xf059ee70,%eax
f0105a92:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105a95:	eb 48                	jmp    f0105adf <sched_kill_env+0x7c>
		{
			if(ptr_env->env_id == envId)
f0105a97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a9a:	8b 40 10             	mov    0x10(%eax),%eax
f0105a9d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105aa0:	75 35                	jne    f0105ad7 <sched_kill_env+0x74>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0105aa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105aa5:	8d 50 20             	lea    0x20(%eax),%edx
f0105aa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105aab:	8b 40 10             	mov    0x10(%eax),%eax
f0105aae:	83 ec 04             	sub    $0x4,%esp
f0105ab1:	52                   	push   %edx
f0105ab2:	50                   	push   %eax
f0105ab3:	68 ec 64 12 f0       	push   $0xf01264ec
f0105ab8:	e8 af b4 ff ff       	call   f0100f6c <cprintf>
f0105abd:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105ac0:	83 ec 0c             	sub    $0xc,%esp
f0105ac3:	ff 75 f4             	pushl  -0xc(%ebp)
f0105ac6:	e8 73 f9 ff ff       	call   f010543e <sched_remove_new>
f0105acb:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105ace:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
				break;
f0105ad5:	eb 2f                	jmp    f0105b06 <sched_kill_env+0xa3>
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f0105ad7:	a1 78 ee 59 f0       	mov    0xf059ee78,%eax
f0105adc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105adf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ae3:	74 08                	je     f0105aed <sched_kill_env+0x8a>
f0105ae5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ae8:	8b 40 08             	mov    0x8(%eax),%eax
f0105aeb:	eb 05                	jmp    f0105af2 <sched_kill_env+0x8f>
f0105aed:	b8 00 00 00 00       	mov    $0x0,%eax
f0105af2:	a3 78 ee 59 f0       	mov    %eax,0xf059ee78
f0105af7:	a1 78 ee 59 f0       	mov    0xf059ee78,%eax
f0105afc:	85 c0                	test   %eax,%eax
f0105afe:	75 97                	jne    f0105a97 <sched_kill_env+0x34>
f0105b00:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105b04:	75 91                	jne    f0105a97 <sched_kill_env+0x34>
				found = 1;
				break;
			}
		}
	}
	if (!found)
f0105b06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105b0a:	0f 85 a7 01 00 00    	jne    f0105cb7 <sched_kill_env+0x254>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105b10:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105b17:	e9 87 01 00 00       	jmp    f0105ca3 <sched_kill_env+0x240>
		{
			if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
f0105b1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b1f:	83 c0 09             	add    $0x9,%eax
f0105b22:	c1 e0 04             	shl    $0x4,%eax
f0105b25:	05 00 ee 59 f0       	add    $0xf059ee00,%eax
f0105b2a:	8b 00                	mov    (%eax),%eax
f0105b2c:	85 c0                	test   %eax,%eax
f0105b2e:	0f 84 66 01 00 00    	je     f0105c9a <sched_kill_env+0x237>
			{
				ptr_env=NULL;
f0105b34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f0105b3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b3e:	83 c0 09             	add    $0x9,%eax
f0105b41:	c1 e0 04             	shl    $0x4,%eax
f0105b44:	05 00 ee 59 f0       	add    $0xf059ee00,%eax
f0105b49:	8b 00                	mov    (%eax),%eax
f0105b4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b4e:	e9 01 01 00 00       	jmp    f0105c54 <sched_kill_env+0x1f1>
				{
					if(ptr_env->env_id == envId)
f0105b53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b56:	8b 40 10             	mov    0x10(%eax),%eax
f0105b59:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105b5c:	0f 85 df 00 00 00    	jne    f0105c41 <sched_kill_env+0x1de>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105b62:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b65:	8d 50 20             	lea    0x20(%eax),%edx
f0105b68:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b6b:	8b 40 10             	mov    0x10(%eax),%eax
f0105b6e:	ff 75 ec             	pushl  -0x14(%ebp)
f0105b71:	52                   	push   %edx
f0105b72:	50                   	push   %eax
f0105b73:	68 14 65 12 f0       	push   $0xf0126514
f0105b78:	e8 ef b3 ff ff       	call   f0100f6c <cprintf>
f0105b7d:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(ProcessQueues.env_ready_queues[i]), ptr_env);
f0105b80:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105b84:	75 17                	jne    f0105b9d <sched_kill_env+0x13a>
f0105b86:	83 ec 04             	sub    $0x4,%esp
f0105b89:	68 df 63 12 f0       	push   $0xf01263df
f0105b8e:	68 91 01 00 00       	push   $0x191
f0105b93:	68 a3 63 12 f0       	push   $0xf01263a3
f0105b98:	e8 7d a7 ff ff       	call   f010031a <_panic>
f0105b9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ba0:	8b 40 08             	mov    0x8(%eax),%eax
f0105ba3:	85 c0                	test   %eax,%eax
f0105ba5:	74 11                	je     f0105bb8 <sched_kill_env+0x155>
f0105ba7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105baa:	8b 40 08             	mov    0x8(%eax),%eax
f0105bad:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105bb0:	8b 52 0c             	mov    0xc(%edx),%edx
f0105bb3:	89 50 0c             	mov    %edx,0xc(%eax)
f0105bb6:	eb 17                	jmp    f0105bcf <sched_kill_env+0x16c>
f0105bb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105bbb:	8b 40 0c             	mov    0xc(%eax),%eax
f0105bbe:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105bc1:	83 c2 09             	add    $0x9,%edx
f0105bc4:	c1 e2 04             	shl    $0x4,%edx
f0105bc7:	81 c2 04 ee 59 f0    	add    $0xf059ee04,%edx
f0105bcd:	89 02                	mov    %eax,(%edx)
f0105bcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105bd2:	8b 40 0c             	mov    0xc(%eax),%eax
f0105bd5:	85 c0                	test   %eax,%eax
f0105bd7:	74 11                	je     f0105bea <sched_kill_env+0x187>
f0105bd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105bdc:	8b 40 0c             	mov    0xc(%eax),%eax
f0105bdf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105be2:	8b 52 08             	mov    0x8(%edx),%edx
f0105be5:	89 50 08             	mov    %edx,0x8(%eax)
f0105be8:	eb 17                	jmp    f0105c01 <sched_kill_env+0x19e>
f0105bea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105bed:	8b 40 08             	mov    0x8(%eax),%eax
f0105bf0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105bf3:	83 c2 09             	add    $0x9,%edx
f0105bf6:	c1 e2 04             	shl    $0x4,%edx
f0105bf9:	81 c2 00 ee 59 f0    	add    $0xf059ee00,%edx
f0105bff:	89 02                	mov    %eax,(%edx)
f0105c01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c04:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f0105c0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c0e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0105c15:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c18:	83 c0 09             	add    $0x9,%eax
f0105c1b:	c1 e0 04             	shl    $0x4,%eax
f0105c1e:	05 0c ee 59 f0       	add    $0xf059ee0c,%eax
f0105c23:	8b 00                	mov    (%eax),%eax
f0105c25:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105c28:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c2b:	83 c0 09             	add    $0x9,%eax
f0105c2e:	c1 e0 04             	shl    $0x4,%eax
f0105c31:	05 0c ee 59 f0       	add    $0xf059ee0c,%eax
f0105c36:	89 10                	mov    %edx,(%eax)
						found = 1;
f0105c38:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105c3f:	eb 59                	jmp    f0105c9a <sched_kill_env+0x237>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f0105c41:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c44:	83 c0 09             	add    $0x9,%eax
f0105c47:	c1 e0 04             	shl    $0x4,%eax
f0105c4a:	05 08 ee 59 f0       	add    $0xf059ee08,%eax
f0105c4f:	8b 00                	mov    (%eax),%eax
f0105c51:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105c54:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c58:	74 08                	je     f0105c62 <sched_kill_env+0x1ff>
f0105c5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c5d:	8b 40 08             	mov    0x8(%eax),%eax
f0105c60:	eb 05                	jmp    f0105c67 <sched_kill_env+0x204>
f0105c62:	b8 00 00 00 00       	mov    $0x0,%eax
f0105c67:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105c6a:	83 c2 09             	add    $0x9,%edx
f0105c6d:	c1 e2 04             	shl    $0x4,%edx
f0105c70:	81 c2 08 ee 59 f0    	add    $0xf059ee08,%edx
f0105c76:	89 02                	mov    %eax,(%edx)
f0105c78:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c7b:	83 c0 09             	add    $0x9,%eax
f0105c7e:	c1 e0 04             	shl    $0x4,%eax
f0105c81:	05 08 ee 59 f0       	add    $0xf059ee08,%eax
f0105c86:	8b 00                	mov    (%eax),%eax
f0105c88:	85 c0                	test   %eax,%eax
f0105c8a:	0f 85 c3 fe ff ff    	jne    f0105b53 <sched_kill_env+0xf0>
f0105c90:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c94:	0f 85 b9 fe ff ff    	jne    f0105b53 <sched_kill_env+0xf0>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0105c9a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105c9e:	75 16                	jne    f0105cb6 <sched_kill_env+0x253>
			}
		}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105ca0:	ff 45 ec             	incl   -0x14(%ebp)
f0105ca3:	a0 00 1b 5a f0       	mov    0xf05a1b00,%al
f0105ca8:	0f b6 c0             	movzbl %al,%eax
f0105cab:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0105cae:	0f 8f 68 fe ff ff    	jg     f0105b1c <sched_kill_env+0xb9>
f0105cb4:	eb 01                	jmp    f0105cb7 <sched_kill_env+0x254>
						break;
					}
				}
			}
			if (found)
				break;
f0105cb6:	90                   	nop
		}
	}
	if (!found)
f0105cb7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105cbb:	0f 85 80 00 00 00    	jne    f0105d41 <sched_kill_env+0x2de>
	{
		ptr_env=NULL;
f0105cc1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f0105cc8:	a1 80 ee 59 f0       	mov    0xf059ee80,%eax
f0105ccd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105cd0:	eb 48                	jmp    f0105d1a <sched_kill_env+0x2b7>
		{
			if(ptr_env->env_id == envId)
f0105cd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105cd5:	8b 40 10             	mov    0x10(%eax),%eax
f0105cd8:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105cdb:	75 35                	jne    f0105d12 <sched_kill_env+0x2af>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f0105cdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ce0:	8d 50 20             	lea    0x20(%eax),%edx
f0105ce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ce6:	8b 40 10             	mov    0x10(%eax),%eax
f0105ce9:	83 ec 04             	sub    $0x4,%esp
f0105cec:	52                   	push   %edx
f0105ced:	50                   	push   %eax
f0105cee:	68 40 65 12 f0       	push   $0xf0126540
f0105cf3:	e8 74 b2 ff ff       	call   f0100f6c <cprintf>
f0105cf8:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f0105cfb:	83 ec 0c             	sub    $0xc,%esp
f0105cfe:	ff 75 f4             	pushl  -0xc(%ebp)
f0105d01:	e8 af f8 ff ff       	call   f01055b5 <sched_remove_exit>
f0105d06:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105d09:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
				break;
f0105d10:	eb 2f                	jmp    f0105d41 <sched_kill_env+0x2de>
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f0105d12:	a1 88 ee 59 f0       	mov    0xf059ee88,%eax
f0105d17:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105d1a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d1e:	74 08                	je     f0105d28 <sched_kill_env+0x2c5>
f0105d20:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d23:	8b 40 08             	mov    0x8(%eax),%eax
f0105d26:	eb 05                	jmp    f0105d2d <sched_kill_env+0x2ca>
f0105d28:	b8 00 00 00 00       	mov    $0x0,%eax
f0105d2d:	a3 88 ee 59 f0       	mov    %eax,0xf059ee88
f0105d32:	a1 88 ee 59 f0       	mov    0xf059ee88,%eax
f0105d37:	85 c0                	test   %eax,%eax
f0105d39:	75 97                	jne    f0105cd2 <sched_kill_env+0x26f>
f0105d3b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d3f:	75 91                	jne    f0105cd2 <sched_kill_env+0x26f>
				found = 1;
				break;
			}
		}
	}
	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0105d41:	83 ec 0c             	sub    $0xc,%esp
f0105d44:	68 00 ee 59 f0       	push   $0xf059ee00
f0105d49:	e8 5a 8e 00 00       	call   f010eba8 <release_spinlock>
f0105d4e:	83 c4 10             	add    $0x10,%esp

	if (found)
f0105d51:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105d55:	74 23                	je     f0105d7a <sched_kill_env+0x317>
	{
		env_free(ptr_env);
f0105d57:	83 ec 0c             	sub    $0xc,%esp
f0105d5a:	ff 75 f4             	pushl  -0xc(%ebp)
f0105d5d:	e8 c6 49 00 00       	call   f010a728 <env_free>
f0105d62:	83 c4 10             	add    $0x10,%esp
		cprintf("DONE\n");
f0105d65:	83 ec 0c             	sub    $0xc,%esp
f0105d68:	68 66 65 12 f0       	push   $0xf0126566
f0105d6d:	e8 fa b1 ff ff       	call   f0100f6c <cprintf>
f0105d72:	83 c4 10             	add    $0x10,%esp
			//fos_scheduler();
			sched();
		}
	}

}
f0105d75:	e9 a4 00 00 00       	jmp    f0105e1e <sched_kill_env+0x3bb>
		env_free(ptr_env);
		cprintf("DONE\n");
	}
	else
	{
		struct Env* cur_env = get_cpu_proc();
f0105d7a:	e8 f1 49 00 00       	call   f010a770 <get_cpu_proc>
f0105d7f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		assert(cur_env != NULL);
f0105d82:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0105d86:	75 19                	jne    f0105da1 <sched_kill_env+0x33e>
f0105d88:	68 db 64 12 f0       	push   $0xf01264db
f0105d8d:	68 8e 63 12 f0       	push   $0xf012638e
f0105d92:	68 b3 01 00 00       	push   $0x1b3
f0105d97:	68 a3 63 12 f0       	push   $0xf01263a3
f0105d9c:	e8 79 a5 ff ff       	call   f010031a <_panic>

		if (cur_env->env_id == envId)
f0105da1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105da4:	8b 40 10             	mov    0x10(%eax),%eax
f0105da7:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105daa:	75 72                	jne    f0105e1e <sched_kill_env+0x3bb>
		{
			ptr_env = cur_env;
f0105dac:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105daf:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_status == ENV_RUNNING);
f0105db2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105db5:	8b 40 18             	mov    0x18(%eax),%eax
f0105db8:	83 f8 02             	cmp    $0x2,%eax
f0105dbb:	74 19                	je     f0105dd6 <sched_kill_env+0x373>
f0105dbd:	68 6c 65 12 f0       	push   $0xf012656c
f0105dc2:	68 8e 63 12 f0       	push   $0xf012638e
f0105dc7:	68 b8 01 00 00       	push   $0x1b8
f0105dcc:	68 a3 63 12 f0       	push   $0xf01263a3
f0105dd1:	e8 44 a5 ff ff       	call   f010031a <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105dd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105dd9:	8d 50 20             	lea    0x20(%eax),%edx
f0105ddc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ddf:	8b 40 10             	mov    0x10(%eax),%eax
f0105de2:	83 ec 04             	sub    $0x4,%esp
f0105de5:	52                   	push   %edx
f0105de6:	50                   	push   %eax
f0105de7:	68 90 65 12 f0       	push   $0xf0126590
f0105dec:	e8 7b b1 ff ff       	call   f0100f6c <cprintf>
f0105df1:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105df4:	83 ec 0c             	sub    $0xc,%esp
f0105df7:	ff 75 f4             	pushl  -0xc(%ebp)
f0105dfa:	e8 29 49 00 00       	call   f010a728 <env_free>
f0105dff:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105e02:	83 ec 0c             	sub    $0xc,%esp
f0105e05:	68 66 65 12 f0       	push   $0xf0126566
f0105e0a:	e8 5d b1 ff ff       	call   f0100f6c <cprintf>
f0105e0f:	83 c4 10             	add    $0x10,%esp
			found = 1;
f0105e12:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//this process
			/*2024: replaced by sched() to apply context_switch*/
			//lcr3(phys_page_directory);
			//switchkvm();
			//fos_scheduler();
			sched();
f0105e19:	e8 df 4a 00 00       	call   f010a8fd <sched>
		}
	}

}
f0105e1e:	90                   	nop
f0105e1f:	c9                   	leave  
f0105e20:	c3                   	ret    

f0105e21 <sched_print_all>:

//=================================================
// [12] PRINT ALL Envs from all queues:
//=================================================
void sched_print_all()
{
f0105e21:	55                   	push   %ebp
f0105e22:	89 e5                	mov    %esp,%ebp
f0105e24:	83 ec 18             	sub    $0x18,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0105e27:	83 ec 0c             	sub    $0xc,%esp
f0105e2a:	68 00 ee 59 f0       	push   $0xf059ee00
f0105e2f:	e8 ed 8c 00 00       	call   f010eb21 <acquire_spinlock>
f0105e34:	83 c4 10             	add    $0x10,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&ProcessQueues.env_new_queue))
f0105e37:	a1 70 ee 59 f0       	mov    0xf059ee70,%eax
f0105e3c:	85 c0                	test   %eax,%eax
f0105e3e:	74 69                	je     f0105ea9 <sched_print_all+0x88>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0105e40:	83 ec 0c             	sub    $0xc,%esp
f0105e43:	68 bc 65 12 f0       	push   $0xf01265bc
f0105e48:	e8 1f b1 ff ff       	call   f0100f6c <cprintf>
f0105e4d:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f0105e50:	a1 70 ee 59 f0       	mov    0xf059ee70,%eax
f0105e55:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105e58:	eb 26                	jmp    f0105e80 <sched_print_all+0x5f>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105e5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e5d:	8d 50 20             	lea    0x20(%eax),%edx
f0105e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e63:	8b 40 10             	mov    0x10(%eax),%eax
f0105e66:	83 ec 04             	sub    $0x4,%esp
f0105e69:	52                   	push   %edx
f0105e6a:	50                   	push   %eax
f0105e6b:	68 de 65 12 f0       	push   $0xf01265de
f0105e70:	e8 f7 b0 ff ff       	call   f0100f6c <cprintf>
f0105e75:	83 c4 10             	add    $0x10,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&ProcessQueues.env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f0105e78:	a1 78 ee 59 f0       	mov    0xf059ee78,%eax
f0105e7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105e80:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e84:	74 08                	je     f0105e8e <sched_print_all+0x6d>
f0105e86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e89:	8b 40 08             	mov    0x8(%eax),%eax
f0105e8c:	eb 05                	jmp    f0105e93 <sched_print_all+0x72>
f0105e8e:	b8 00 00 00 00       	mov    $0x0,%eax
f0105e93:	a3 78 ee 59 f0       	mov    %eax,0xf059ee78
f0105e98:	a1 78 ee 59 f0       	mov    0xf059ee78,%eax
f0105e9d:	85 c0                	test   %eax,%eax
f0105e9f:	75 b9                	jne    f0105e5a <sched_print_all+0x39>
f0105ea1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ea5:	75 b3                	jne    f0105e5a <sched_print_all+0x39>
f0105ea7:	eb 10                	jmp    f0105eb9 <sched_print_all+0x98>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0105ea9:	83 ec 0c             	sub    $0xc,%esp
f0105eac:	68 e8 65 12 f0       	push   $0xf01265e8
f0105eb1:	e8 b6 b0 ff ff       	call   f0100f6c <cprintf>
f0105eb6:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0105eb9:	83 ec 0c             	sub    $0xc,%esp
f0105ebc:	68 04 66 12 f0       	push   $0xf0126604
f0105ec1:	e8 a6 b0 ff ff       	call   f0100f6c <cprintf>
f0105ec6:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105ec9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105ed0:	e9 d7 00 00 00       	jmp    f0105fac <sched_print_all+0x18b>
	{
		if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
f0105ed5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105ed8:	83 c0 09             	add    $0x9,%eax
f0105edb:	c1 e0 04             	shl    $0x4,%eax
f0105ede:	05 00 ee 59 f0       	add    $0xf059ee00,%eax
f0105ee3:	8b 00                	mov    (%eax),%eax
f0105ee5:	85 c0                	test   %eax,%eax
f0105ee7:	0f 84 99 00 00 00    	je     f0105f86 <sched_print_all+0x165>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0105eed:	83 ec 08             	sub    $0x8,%esp
f0105ef0:	ff 75 f0             	pushl  -0x10(%ebp)
f0105ef3:	68 38 66 12 f0       	push   $0xf0126638
f0105ef8:	e8 6f b0 ff ff       	call   f0100f6c <cprintf>
f0105efd:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f0105f00:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f03:	83 c0 09             	add    $0x9,%eax
f0105f06:	c1 e0 04             	shl    $0x4,%eax
f0105f09:	05 00 ee 59 f0       	add    $0xf059ee00,%eax
f0105f0e:	8b 00                	mov    (%eax),%eax
f0105f10:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105f13:	eb 31                	jmp    f0105f46 <sched_print_all+0x125>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105f15:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f18:	8d 50 20             	lea    0x20(%eax),%edx
f0105f1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f1e:	8b 40 10             	mov    0x10(%eax),%eax
f0105f21:	83 ec 04             	sub    $0x4,%esp
f0105f24:	52                   	push   %edx
f0105f25:	50                   	push   %eax
f0105f26:	68 de 65 12 f0       	push   $0xf01265de
f0105f2b:	e8 3c b0 ff ff       	call   f0100f6c <cprintf>
f0105f30:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f0105f33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f36:	83 c0 09             	add    $0x9,%eax
f0105f39:	c1 e0 04             	shl    $0x4,%eax
f0105f3c:	05 08 ee 59 f0       	add    $0xf059ee08,%eax
f0105f41:	8b 00                	mov    (%eax),%eax
f0105f43:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105f46:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f4a:	74 08                	je     f0105f54 <sched_print_all+0x133>
f0105f4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f4f:	8b 40 08             	mov    0x8(%eax),%eax
f0105f52:	eb 05                	jmp    f0105f59 <sched_print_all+0x138>
f0105f54:	b8 00 00 00 00       	mov    $0x0,%eax
f0105f59:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105f5c:	83 c2 09             	add    $0x9,%edx
f0105f5f:	c1 e2 04             	shl    $0x4,%edx
f0105f62:	81 c2 08 ee 59 f0    	add    $0xf059ee08,%edx
f0105f68:	89 02                	mov    %eax,(%edx)
f0105f6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f6d:	83 c0 09             	add    $0x9,%eax
f0105f70:	c1 e0 04             	shl    $0x4,%eax
f0105f73:	05 08 ee 59 f0       	add    $0xf059ee08,%eax
f0105f78:	8b 00                	mov    (%eax),%eax
f0105f7a:	85 c0                	test   %eax,%eax
f0105f7c:	75 97                	jne    f0105f15 <sched_print_all+0xf4>
f0105f7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f82:	75 91                	jne    f0105f15 <sched_print_all+0xf4>
f0105f84:	eb 13                	jmp    f0105f99 <sched_print_all+0x178>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0105f86:	83 ec 08             	sub    $0x8,%esp
f0105f89:	ff 75 f0             	pushl  -0x10(%ebp)
f0105f8c:	68 60 66 12 f0       	push   $0xf0126660
f0105f91:	e8 d6 af ff ff       	call   f0100f6c <cprintf>
f0105f96:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105f99:	83 ec 0c             	sub    $0xc,%esp
f0105f9c:	68 04 66 12 f0       	push   $0xf0126604
f0105fa1:	e8 c6 af ff ff       	call   f0100f6c <cprintf>
f0105fa6:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105fa9:	ff 45 f0             	incl   -0x10(%ebp)
f0105fac:	a0 00 1b 5a f0       	mov    0xf05a1b00,%al
f0105fb1:	0f b6 c0             	movzbl %al,%eax
f0105fb4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105fb7:	0f 8f 18 ff ff ff    	jg     f0105ed5 <sched_print_all+0xb4>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&ProcessQueues.env_exit_queue))
f0105fbd:	a1 80 ee 59 f0       	mov    0xf059ee80,%eax
f0105fc2:	85 c0                	test   %eax,%eax
f0105fc4:	74 69                	je     f010602f <sched_print_all+0x20e>
	{
		cprintf("The processes in EXIT queue are:\n");
f0105fc6:	83 ec 0c             	sub    $0xc,%esp
f0105fc9:	68 84 66 12 f0       	push   $0xf0126684
f0105fce:	e8 99 af ff ff       	call   f0100f6c <cprintf>
f0105fd3:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f0105fd6:	a1 80 ee 59 f0       	mov    0xf059ee80,%eax
f0105fdb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105fde:	eb 26                	jmp    f0106006 <sched_print_all+0x1e5>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105fe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105fe3:	8d 50 20             	lea    0x20(%eax),%edx
f0105fe6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105fe9:	8b 40 10             	mov    0x10(%eax),%eax
f0105fec:	83 ec 04             	sub    $0x4,%esp
f0105fef:	52                   	push   %edx
f0105ff0:	50                   	push   %eax
f0105ff1:	68 de 65 12 f0       	push   $0xf01265de
f0105ff6:	e8 71 af ff ff       	call   f0100f6c <cprintf>
f0105ffb:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&ProcessQueues.env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f0105ffe:	a1 88 ee 59 f0       	mov    0xf059ee88,%eax
f0106003:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106006:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010600a:	74 08                	je     f0106014 <sched_print_all+0x1f3>
f010600c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010600f:	8b 40 08             	mov    0x8(%eax),%eax
f0106012:	eb 05                	jmp    f0106019 <sched_print_all+0x1f8>
f0106014:	b8 00 00 00 00       	mov    $0x0,%eax
f0106019:	a3 88 ee 59 f0       	mov    %eax,0xf059ee88
f010601e:	a1 88 ee 59 f0       	mov    0xf059ee88,%eax
f0106023:	85 c0                	test   %eax,%eax
f0106025:	75 b9                	jne    f0105fe0 <sched_print_all+0x1bf>
f0106027:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010602b:	75 b3                	jne    f0105fe0 <sched_print_all+0x1bf>
f010602d:	eb 10                	jmp    f010603f <sched_print_all+0x21e>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f010602f:	83 ec 0c             	sub    $0xc,%esp
f0106032:	68 a6 66 12 f0       	push   $0xf01266a6
f0106037:	e8 30 af ff ff       	call   f0100f6c <cprintf>
f010603c:	83 c4 10             	add    $0x10,%esp
	}
	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f010603f:	83 ec 0c             	sub    $0xc,%esp
f0106042:	68 00 ee 59 f0       	push   $0xf059ee00
f0106047:	e8 5c 8b 00 00       	call   f010eba8 <release_spinlock>
f010604c:	83 c4 10             	add    $0x10,%esp
}
f010604f:	90                   	nop
f0106050:	c9                   	leave  
f0106051:	c3                   	ret    

f0106052 <sched_run_all>:

//=================================================
// [13] MOVE ALL NEW Envs into READY Q:
//=================================================
void sched_run_all()
{
f0106052:	55                   	push   %ebp
f0106053:	89 e5                	mov    %esp,%ebp
f0106055:	83 ec 18             	sub    $0x18,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0106058:	83 ec 0c             	sub    $0xc,%esp
f010605b:	68 00 ee 59 f0       	push   $0xf059ee00
f0106060:	e8 bc 8a 00 00       	call   f010eb21 <acquire_spinlock>
f0106065:	83 c4 10             	add    $0x10,%esp
	struct Env* ptr_env=NULL;
f0106068:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*2023: Changed from LIST_FOREACH into DEQUEUE (based on suggestion from T52 & T73 2023.Term1)
	 * to move the processes in FIFO order instead of LIFO in case of LIST_FOREACH
	 * */
	int q_size = LIST_SIZE(&ProcessQueues.env_new_queue);
f010606f:	a1 7c ee 59 f0       	mov    0xf059ee7c,%eax
f0106074:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (int i = 0; i < q_size; ++i)
f0106077:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010607e:	eb 24                	jmp    f01060a4 <sched_run_all+0x52>
	{
		ptr_env = dequeue(&ProcessQueues.env_new_queue);
f0106080:	83 ec 0c             	sub    $0xc,%esp
f0106083:	68 70 ee 59 f0       	push   $0xf059ee70
f0106088:	e8 7c ef ff ff       	call   f0105009 <dequeue>
f010608d:	83 c4 10             	add    $0x10,%esp
f0106090:	89 45 f0             	mov    %eax,-0x10(%ebp)
		sched_insert_ready0(ptr_env);
f0106093:	83 ec 0c             	sub    $0xc,%esp
f0106096:	ff 75 f0             	pushl  -0x10(%ebp)
f0106099:	e8 4f f1 ff ff       	call   f01051ed <sched_insert_ready0>
f010609e:	83 c4 10             	add    $0x10,%esp

	/*2023: Changed from LIST_FOREACH into DEQUEUE (based on suggestion from T52 & T73 2023.Term1)
	 * to move the processes in FIFO order instead of LIFO in case of LIST_FOREACH
	 * */
	int q_size = LIST_SIZE(&ProcessQueues.env_new_queue);
	for (int i = 0; i < q_size; ++i)
f01060a1:	ff 45 f4             	incl   -0xc(%ebp)
f01060a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060a7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01060aa:	7c d4                	jl     f0106080 <sched_run_all+0x2e>
	{
		ptr_env = dequeue(&ProcessQueues.env_new_queue);
		sched_insert_ready0(ptr_env);
	}

	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f01060ac:	83 ec 0c             	sub    $0xc,%esp
f01060af:	68 00 ee 59 f0       	push   $0xf059ee00
f01060b4:	e8 ef 8a 00 00       	call   f010eba8 <release_spinlock>
f01060b9:	83 c4 10             	add    $0x10,%esp
	/*2015*///if scheduler not run yet, then invoke it!
	if (mycpu()->scheduler_status == SCH_STOPPED)
f01060bc:	e8 3c 10 00 00       	call   f01070fd <mycpu>
f01060c1:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
f01060c7:	85 c0                	test   %eax,%eax
f01060c9:	75 05                	jne    f01060d0 <sched_run_all+0x7e>
		fos_scheduler();
f01060cb:	e8 e2 06 00 00       	call   f01067b2 <fos_scheduler>
	else
		panic("scheduler status is NOT STOPPED while it's expected to be!!");
f01060d0:	83 ec 04             	sub    $0x4,%esp
f01060d3:	68 c4 66 12 f0       	push   $0xf01266c4
f01060d8:	68 15 02 00 00       	push   $0x215
f01060dd:	68 a3 63 12 f0       	push   $0xf01263a3
f01060e2:	e8 33 a2 ff ff       	call   f010031a <_panic>

f01060e7 <sched_kill_all>:

//=================================================
// [14] KILL ALL Envs in the System:
//=================================================
void sched_kill_all()
{
f01060e7:	55                   	push   %ebp
f01060e8:	89 e5                	mov    %esp,%ebp
f01060ea:	83 ec 18             	sub    $0x18,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f01060ed:	83 ec 0c             	sub    $0xc,%esp
f01060f0:	68 00 ee 59 f0       	push   $0xf059ee00
f01060f5:	e8 27 8a 00 00       	call   f010eb21 <acquire_spinlock>
f01060fa:	83 c4 10             	add    $0x10,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&ProcessQueues.env_new_queue))
f01060fd:	a1 70 ee 59 f0       	mov    0xf059ee70,%eax
f0106102:	85 c0                	test   %eax,%eax
f0106104:	0f 84 95 00 00 00    	je     f010619f <sched_kill_all+0xb8>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f010610a:	83 ec 0c             	sub    $0xc,%esp
f010610d:	68 00 67 12 f0       	push   $0xf0126700
f0106112:	e8 55 ae ff ff       	call   f0100f6c <cprintf>
f0106117:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f010611a:	a1 70 ee 59 f0       	mov    0xf059ee70,%eax
f010611f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106122:	eb 52                	jmp    f0106176 <sched_kill_all+0x8f>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0106124:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106127:	8d 50 20             	lea    0x20(%eax),%edx
f010612a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010612d:	8b 40 10             	mov    0x10(%eax),%eax
f0106130:	83 ec 04             	sub    $0x4,%esp
f0106133:	52                   	push   %edx
f0106134:	50                   	push   %eax
f0106135:	68 2c 67 12 f0       	push   $0xf012672c
f010613a:	e8 2d ae ff ff       	call   f0100f6c <cprintf>
f010613f:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0106142:	83 ec 0c             	sub    $0xc,%esp
f0106145:	ff 75 f4             	pushl  -0xc(%ebp)
f0106148:	e8 f1 f2 ff ff       	call   f010543e <sched_remove_new>
f010614d:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0106150:	83 ec 0c             	sub    $0xc,%esp
f0106153:	ff 75 f4             	pushl  -0xc(%ebp)
f0106156:	e8 cd 45 00 00       	call   f010a728 <env_free>
f010615b:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f010615e:	83 ec 0c             	sub    $0xc,%esp
f0106161:	68 66 65 12 f0       	push   $0xf0126566
f0106166:	e8 01 ae ff ff       	call   f0100f6c <cprintf>
f010616b:	83 c4 10             	add    $0x10,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&ProcessQueues.env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f010616e:	a1 78 ee 59 f0       	mov    0xf059ee78,%eax
f0106173:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106176:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010617a:	74 08                	je     f0106184 <sched_kill_all+0x9d>
f010617c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010617f:	8b 40 08             	mov    0x8(%eax),%eax
f0106182:	eb 05                	jmp    f0106189 <sched_kill_all+0xa2>
f0106184:	b8 00 00 00 00       	mov    $0x0,%eax
f0106189:	a3 78 ee 59 f0       	mov    %eax,0xf059ee78
f010618e:	a1 78 ee 59 f0       	mov    0xf059ee78,%eax
f0106193:	85 c0                	test   %eax,%eax
f0106195:	75 8d                	jne    f0106124 <sched_kill_all+0x3d>
f0106197:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010619b:	75 87                	jne    f0106124 <sched_kill_all+0x3d>
f010619d:	eb 10                	jmp    f01061af <sched_kill_all+0xc8>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f010619f:	83 ec 0c             	sub    $0xc,%esp
f01061a2:	68 3f 67 12 f0       	push   $0xf012673f
f01061a7:	e8 c0 ad ff ff       	call   f0100f6c <cprintf>
f01061ac:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f01061af:	83 ec 0c             	sub    $0xc,%esp
f01061b2:	68 04 66 12 f0       	push   $0xf0126604
f01061b7:	e8 b0 ad ff ff       	call   f0100f6c <cprintf>
f01061bc:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01061bf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01061c6:	e9 b8 01 00 00       	jmp    f0106383 <sched_kill_all+0x29c>
	{
		if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
f01061cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01061ce:	83 c0 09             	add    $0x9,%eax
f01061d1:	c1 e0 04             	shl    $0x4,%eax
f01061d4:	05 00 ee 59 f0       	add    $0xf059ee00,%eax
f01061d9:	8b 00                	mov    (%eax),%eax
f01061db:	85 c0                	test   %eax,%eax
f01061dd:	0f 84 7a 01 00 00    	je     f010635d <sched_kill_all+0x276>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f01061e3:	83 ec 08             	sub    $0x8,%esp
f01061e6:	ff 75 f0             	pushl  -0x10(%ebp)
f01061e9:	68 5c 67 12 f0       	push   $0xf012675c
f01061ee:	e8 79 ad ff ff       	call   f0100f6c <cprintf>
f01061f3:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f01061f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01061f9:	83 c0 09             	add    $0x9,%eax
f01061fc:	c1 e0 04             	shl    $0x4,%eax
f01061ff:	05 00 ee 59 f0       	add    $0xf059ee00,%eax
f0106204:	8b 00                	mov    (%eax),%eax
f0106206:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106209:	e9 07 01 00 00       	jmp    f0106315 <sched_kill_all+0x22e>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f010620e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106211:	8d 50 20             	lea    0x20(%eax),%edx
f0106214:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106217:	8b 40 10             	mov    0x10(%eax),%eax
f010621a:	83 ec 04             	sub    $0x4,%esp
f010621d:	52                   	push   %edx
f010621e:	50                   	push   %eax
f010621f:	68 2c 67 12 f0       	push   $0xf012672c
f0106224:	e8 43 ad ff ff       	call   f0100f6c <cprintf>
f0106229:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(ProcessQueues.env_ready_queues[i]), ptr_env);
f010622c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106230:	75 17                	jne    f0106249 <sched_kill_all+0x162>
f0106232:	83 ec 04             	sub    $0x4,%esp
f0106235:	68 df 63 12 f0       	push   $0xf01263df
f010623a:	68 37 02 00 00       	push   $0x237
f010623f:	68 a3 63 12 f0       	push   $0xf01263a3
f0106244:	e8 d1 a0 ff ff       	call   f010031a <_panic>
f0106249:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010624c:	8b 40 08             	mov    0x8(%eax),%eax
f010624f:	85 c0                	test   %eax,%eax
f0106251:	74 11                	je     f0106264 <sched_kill_all+0x17d>
f0106253:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106256:	8b 40 08             	mov    0x8(%eax),%eax
f0106259:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010625c:	8b 52 0c             	mov    0xc(%edx),%edx
f010625f:	89 50 0c             	mov    %edx,0xc(%eax)
f0106262:	eb 17                	jmp    f010627b <sched_kill_all+0x194>
f0106264:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106267:	8b 40 0c             	mov    0xc(%eax),%eax
f010626a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010626d:	83 c2 09             	add    $0x9,%edx
f0106270:	c1 e2 04             	shl    $0x4,%edx
f0106273:	81 c2 04 ee 59 f0    	add    $0xf059ee04,%edx
f0106279:	89 02                	mov    %eax,(%edx)
f010627b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010627e:	8b 40 0c             	mov    0xc(%eax),%eax
f0106281:	85 c0                	test   %eax,%eax
f0106283:	74 11                	je     f0106296 <sched_kill_all+0x1af>
f0106285:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106288:	8b 40 0c             	mov    0xc(%eax),%eax
f010628b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010628e:	8b 52 08             	mov    0x8(%edx),%edx
f0106291:	89 50 08             	mov    %edx,0x8(%eax)
f0106294:	eb 17                	jmp    f01062ad <sched_kill_all+0x1c6>
f0106296:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106299:	8b 40 08             	mov    0x8(%eax),%eax
f010629c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010629f:	83 c2 09             	add    $0x9,%edx
f01062a2:	c1 e2 04             	shl    $0x4,%edx
f01062a5:	81 c2 00 ee 59 f0    	add    $0xf059ee00,%edx
f01062ab:	89 02                	mov    %eax,(%edx)
f01062ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062b0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f01062b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062ba:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f01062c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062c4:	83 c0 09             	add    $0x9,%eax
f01062c7:	c1 e0 04             	shl    $0x4,%eax
f01062ca:	05 0c ee 59 f0       	add    $0xf059ee0c,%eax
f01062cf:	8b 00                	mov    (%eax),%eax
f01062d1:	8d 50 ff             	lea    -0x1(%eax),%edx
f01062d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062d7:	83 c0 09             	add    $0x9,%eax
f01062da:	c1 e0 04             	shl    $0x4,%eax
f01062dd:	05 0c ee 59 f0       	add    $0xf059ee0c,%eax
f01062e2:	89 10                	mov    %edx,(%eax)
				env_free(ptr_env);
f01062e4:	83 ec 0c             	sub    $0xc,%esp
f01062e7:	ff 75 f4             	pushl  -0xc(%ebp)
f01062ea:	e8 39 44 00 00       	call   f010a728 <env_free>
f01062ef:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01062f2:	83 ec 0c             	sub    $0xc,%esp
f01062f5:	68 66 65 12 f0       	push   $0xf0126566
f01062fa:	e8 6d ac ff ff       	call   f0100f6c <cprintf>
f01062ff:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f0106302:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106305:	83 c0 09             	add    $0x9,%eax
f0106308:	c1 e0 04             	shl    $0x4,%eax
f010630b:	05 08 ee 59 f0       	add    $0xf059ee08,%eax
f0106310:	8b 00                	mov    (%eax),%eax
f0106312:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106315:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106319:	74 08                	je     f0106323 <sched_kill_all+0x23c>
f010631b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010631e:	8b 40 08             	mov    0x8(%eax),%eax
f0106321:	eb 05                	jmp    f0106328 <sched_kill_all+0x241>
f0106323:	b8 00 00 00 00       	mov    $0x0,%eax
f0106328:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010632b:	83 c2 09             	add    $0x9,%edx
f010632e:	c1 e2 04             	shl    $0x4,%edx
f0106331:	81 c2 08 ee 59 f0    	add    $0xf059ee08,%edx
f0106337:	89 02                	mov    %eax,(%edx)
f0106339:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010633c:	83 c0 09             	add    $0x9,%eax
f010633f:	c1 e0 04             	shl    $0x4,%eax
f0106342:	05 08 ee 59 f0       	add    $0xf059ee08,%eax
f0106347:	8b 00                	mov    (%eax),%eax
f0106349:	85 c0                	test   %eax,%eax
f010634b:	0f 85 bd fe ff ff    	jne    f010620e <sched_kill_all+0x127>
f0106351:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106355:	0f 85 b3 fe ff ff    	jne    f010620e <sched_kill_all+0x127>
f010635b:	eb 13                	jmp    f0106370 <sched_kill_all+0x289>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f010635d:	83 ec 08             	sub    $0x8,%esp
f0106360:	ff 75 f0             	pushl  -0x10(%ebp)
f0106363:	68 60 66 12 f0       	push   $0xf0126660
f0106368:	e8 ff ab ff ff       	call   f0100f6c <cprintf>
f010636d:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0106370:	83 ec 0c             	sub    $0xc,%esp
f0106373:	68 04 66 12 f0       	push   $0xf0126604
f0106378:	e8 ef ab ff ff       	call   f0100f6c <cprintf>
f010637d:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0106380:	ff 45 f0             	incl   -0x10(%ebp)
f0106383:	a0 00 1b 5a f0       	mov    0xf05a1b00,%al
f0106388:	0f b6 c0             	movzbl %al,%eax
f010638b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010638e:	0f 8f 37 fe ff ff    	jg     f01061cb <sched_kill_all+0xe4>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&ProcessQueues.env_exit_queue))
f0106394:	a1 80 ee 59 f0       	mov    0xf059ee80,%eax
f0106399:	85 c0                	test   %eax,%eax
f010639b:	0f 84 95 00 00 00    	je     f0106436 <sched_kill_all+0x34f>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f01063a1:	83 ec 0c             	sub    $0xc,%esp
f01063a4:	68 90 67 12 f0       	push   $0xf0126790
f01063a9:	e8 be ab ff ff       	call   f0100f6c <cprintf>
f01063ae:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f01063b1:	a1 80 ee 59 f0       	mov    0xf059ee80,%eax
f01063b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01063b9:	eb 52                	jmp    f010640d <sched_kill_all+0x326>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01063bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01063be:	8d 50 20             	lea    0x20(%eax),%edx
f01063c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01063c4:	8b 40 10             	mov    0x10(%eax),%eax
f01063c7:	83 ec 04             	sub    $0x4,%esp
f01063ca:	52                   	push   %edx
f01063cb:	50                   	push   %eax
f01063cc:	68 2c 67 12 f0       	push   $0xf012672c
f01063d1:	e8 96 ab ff ff       	call   f0100f6c <cprintf>
f01063d6:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f01063d9:	83 ec 0c             	sub    $0xc,%esp
f01063dc:	ff 75 f4             	pushl  -0xc(%ebp)
f01063df:	e8 d1 f1 ff ff       	call   f01055b5 <sched_remove_exit>
f01063e4:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01063e7:	83 ec 0c             	sub    $0xc,%esp
f01063ea:	ff 75 f4             	pushl  -0xc(%ebp)
f01063ed:	e8 36 43 00 00       	call   f010a728 <env_free>
f01063f2:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01063f5:	83 ec 0c             	sub    $0xc,%esp
f01063f8:	68 66 65 12 f0       	push   $0xf0126566
f01063fd:	e8 6a ab ff ff       	call   f0100f6c <cprintf>
f0106402:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&ProcessQueues.env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f0106405:	a1 88 ee 59 f0       	mov    0xf059ee88,%eax
f010640a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010640d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106411:	74 08                	je     f010641b <sched_kill_all+0x334>
f0106413:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106416:	8b 40 08             	mov    0x8(%eax),%eax
f0106419:	eb 05                	jmp    f0106420 <sched_kill_all+0x339>
f010641b:	b8 00 00 00 00       	mov    $0x0,%eax
f0106420:	a3 88 ee 59 f0       	mov    %eax,0xf059ee88
f0106425:	a1 88 ee 59 f0       	mov    0xf059ee88,%eax
f010642a:	85 c0                	test   %eax,%eax
f010642c:	75 8d                	jne    f01063bb <sched_kill_all+0x2d4>
f010642e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106432:	75 87                	jne    f01063bb <sched_kill_all+0x2d4>
f0106434:	eb 10                	jmp    f0106446 <sched_kill_all+0x35f>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0106436:	83 ec 0c             	sub    $0xc,%esp
f0106439:	68 a6 66 12 f0       	push   $0xf01266a6
f010643e:	e8 29 ab ff ff       	call   f0100f6c <cprintf>
f0106443:	83 c4 10             	add    $0x10,%esp
	}

	struct Env* cur_env = get_cpu_proc();
f0106446:	e8 25 43 00 00       	call   f010a770 <get_cpu_proc>
f010644b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if (cur_env)
f010644e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106452:	74 6b                	je     f01064bf <sched_kill_all+0x3d8>
	{
		ptr_env = cur_env;
f0106454:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106457:	89 45 f4             	mov    %eax,-0xc(%ebp)
		assert(ptr_env->env_status == ENV_RUNNING);
f010645a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010645d:	8b 40 18             	mov    0x18(%eax),%eax
f0106460:	83 f8 02             	cmp    $0x2,%eax
f0106463:	74 19                	je     f010647e <sched_kill_all+0x397>
f0106465:	68 6c 65 12 f0       	push   $0xf012656c
f010646a:	68 8e 63 12 f0       	push   $0xf012638e
f010646f:	68 57 02 00 00       	push   $0x257
f0106474:	68 a3 63 12 f0       	push   $0xf01263a3
f0106479:	e8 9c 9e ff ff       	call   f010031a <_panic>
		cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f010647e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106481:	8d 50 20             	lea    0x20(%eax),%edx
f0106484:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106487:	8b 40 10             	mov    0x10(%eax),%eax
f010648a:	83 ec 04             	sub    $0x4,%esp
f010648d:	52                   	push   %edx
f010648e:	50                   	push   %eax
f010648f:	68 90 65 12 f0       	push   $0xf0126590
f0106494:	e8 d3 aa ff ff       	call   f0100f6c <cprintf>
f0106499:	83 c4 10             	add    $0x10,%esp
		env_free(ptr_env);
f010649c:	83 ec 0c             	sub    $0xc,%esp
f010649f:	ff 75 f4             	pushl  -0xc(%ebp)
f01064a2:	e8 81 42 00 00       	call   f010a728 <env_free>
f01064a7:	83 c4 10             	add    $0x10,%esp
		cprintf("DONE\n");
f01064aa:	83 ec 0c             	sub    $0xc,%esp
f01064ad:	68 66 65 12 f0       	push   $0xf0126566
f01064b2:	e8 b5 aa ff ff       	call   f0100f6c <cprintf>
f01064b7:	83 c4 10             	add    $0x10,%esp
		//return back to a killed env. Status already set to EXIT in the env_free()
		//It's the fos_scheduler task to release the lock on the Qs after context_switch to it from
		//this process
		//reinvoke the scheduler since there're no env to return back to it
		/*2024: replaced by sched() to apply context_switch*/
		sched();
f01064ba:	e8 3e 44 00 00       	call   f010a8fd <sched>
	}
	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f01064bf:	83 ec 0c             	sub    $0xc,%esp
f01064c2:	68 00 ee 59 f0       	push   $0xf059ee00
f01064c7:	e8 dc 86 00 00       	call   f010eba8 <release_spinlock>
f01064cc:	83 c4 10             	add    $0x10,%esp
	//get into the command prompt since there're no env to return back to it
	//fos_scheduler(); //2024: commented
	get_into_prompt();
f01064cf:	e8 cf b8 ff ff       	call   f0101da3 <get_into_prompt>

f01064d4 <sched_exit_all_ready_envs>:
/*2018*/
//=================================================
// [14] EXIT ALL Ready Envs:
//=================================================
void sched_exit_all_ready_envs()
{
f01064d4:	55                   	push   %ebp
f01064d5:	89 e5                	mov    %esp,%ebp
f01064d7:	83 ec 18             	sub    $0x18,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f01064da:	83 ec 0c             	sub    $0xc,%esp
f01064dd:	68 00 ee 59 f0       	push   $0xf059ee00
f01064e2:	e8 3a 86 00 00       	call   f010eb21 <acquire_spinlock>
f01064e7:	83 c4 10             	add    $0x10,%esp
	struct Env* ptr_env=NULL;
f01064ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01064f1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01064f8:	e9 59 01 00 00       	jmp    f0106656 <sched_exit_all_ready_envs+0x182>
	{
		if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
f01064fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106500:	83 c0 09             	add    $0x9,%eax
f0106503:	c1 e0 04             	shl    $0x4,%eax
f0106506:	05 00 ee 59 f0       	add    $0xf059ee00,%eax
f010650b:	8b 00                	mov    (%eax),%eax
f010650d:	85 c0                	test   %eax,%eax
f010650f:	0f 84 3e 01 00 00    	je     f0106653 <sched_exit_all_ready_envs+0x17f>
		{
			ptr_env=NULL;
f0106515:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f010651c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010651f:	83 c0 09             	add    $0x9,%eax
f0106522:	c1 e0 04             	shl    $0x4,%eax
f0106525:	05 00 ee 59 f0       	add    $0xf059ee00,%eax
f010652a:	8b 00                	mov    (%eax),%eax
f010652c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010652f:	e9 d9 00 00 00       	jmp    f010660d <sched_exit_all_ready_envs+0x139>
			{
				LIST_REMOVE(&(ProcessQueues.env_ready_queues[i]), ptr_env);
f0106534:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106538:	75 17                	jne    f0106551 <sched_exit_all_ready_envs+0x7d>
f010653a:	83 ec 04             	sub    $0x4,%esp
f010653d:	68 df 63 12 f0       	push   $0xf01263df
f0106542:	68 79 02 00 00       	push   $0x279
f0106547:	68 a3 63 12 f0       	push   $0xf01263a3
f010654c:	e8 c9 9d ff ff       	call   f010031a <_panic>
f0106551:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106554:	8b 40 08             	mov    0x8(%eax),%eax
f0106557:	85 c0                	test   %eax,%eax
f0106559:	74 11                	je     f010656c <sched_exit_all_ready_envs+0x98>
f010655b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010655e:	8b 40 08             	mov    0x8(%eax),%eax
f0106561:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106564:	8b 52 0c             	mov    0xc(%edx),%edx
f0106567:	89 50 0c             	mov    %edx,0xc(%eax)
f010656a:	eb 17                	jmp    f0106583 <sched_exit_all_ready_envs+0xaf>
f010656c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010656f:	8b 40 0c             	mov    0xc(%eax),%eax
f0106572:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106575:	83 c2 09             	add    $0x9,%edx
f0106578:	c1 e2 04             	shl    $0x4,%edx
f010657b:	81 c2 04 ee 59 f0    	add    $0xf059ee04,%edx
f0106581:	89 02                	mov    %eax,(%edx)
f0106583:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106586:	8b 40 0c             	mov    0xc(%eax),%eax
f0106589:	85 c0                	test   %eax,%eax
f010658b:	74 11                	je     f010659e <sched_exit_all_ready_envs+0xca>
f010658d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106590:	8b 40 0c             	mov    0xc(%eax),%eax
f0106593:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106596:	8b 52 08             	mov    0x8(%edx),%edx
f0106599:	89 50 08             	mov    %edx,0x8(%eax)
f010659c:	eb 17                	jmp    f01065b5 <sched_exit_all_ready_envs+0xe1>
f010659e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065a1:	8b 40 08             	mov    0x8(%eax),%eax
f01065a4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01065a7:	83 c2 09             	add    $0x9,%edx
f01065aa:	c1 e2 04             	shl    $0x4,%edx
f01065ad:	81 c2 00 ee 59 f0    	add    $0xf059ee00,%edx
f01065b3:	89 02                	mov    %eax,(%edx)
f01065b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065b8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f01065bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065c2:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f01065c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065cc:	83 c0 09             	add    $0x9,%eax
f01065cf:	c1 e0 04             	shl    $0x4,%eax
f01065d2:	05 0c ee 59 f0       	add    $0xf059ee0c,%eax
f01065d7:	8b 00                	mov    (%eax),%eax
f01065d9:	8d 50 ff             	lea    -0x1(%eax),%edx
f01065dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065df:	83 c0 09             	add    $0x9,%eax
f01065e2:	c1 e0 04             	shl    $0x4,%eax
f01065e5:	05 0c ee 59 f0       	add    $0xf059ee0c,%eax
f01065ea:	89 10                	mov    %edx,(%eax)
				sched_insert_exit(ptr_env);
f01065ec:	83 ec 0c             	sub    $0xc,%esp
f01065ef:	ff 75 f4             	pushl  -0xc(%ebp)
f01065f2:	e8 37 ef ff ff       	call   f010552e <sched_insert_exit>
f01065f7:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f01065fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065fd:	83 c0 09             	add    $0x9,%eax
f0106600:	c1 e0 04             	shl    $0x4,%eax
f0106603:	05 08 ee 59 f0       	add    $0xf059ee08,%eax
f0106608:	8b 00                	mov    (%eax),%eax
f010660a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010660d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106611:	74 08                	je     f010661b <sched_exit_all_ready_envs+0x147>
f0106613:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106616:	8b 40 08             	mov    0x8(%eax),%eax
f0106619:	eb 05                	jmp    f0106620 <sched_exit_all_ready_envs+0x14c>
f010661b:	b8 00 00 00 00       	mov    $0x0,%eax
f0106620:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106623:	83 c2 09             	add    $0x9,%edx
f0106626:	c1 e2 04             	shl    $0x4,%edx
f0106629:	81 c2 08 ee 59 f0    	add    $0xf059ee08,%edx
f010662f:	89 02                	mov    %eax,(%edx)
f0106631:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106634:	83 c0 09             	add    $0x9,%eax
f0106637:	c1 e0 04             	shl    $0x4,%eax
f010663a:	05 08 ee 59 f0       	add    $0xf059ee08,%eax
f010663f:	8b 00                	mov    (%eax),%eax
f0106641:	85 c0                	test   %eax,%eax
f0106643:	0f 85 eb fe ff ff    	jne    f0106534 <sched_exit_all_ready_envs+0x60>
f0106649:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010664d:	0f 85 e1 fe ff ff    	jne    f0106534 <sched_exit_all_ready_envs+0x60>
//=================================================
void sched_exit_all_ready_envs()
{
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0106653:	ff 45 f0             	incl   -0x10(%ebp)
f0106656:	a0 00 1b 5a f0       	mov    0xf05a1b00,%al
f010665b:	0f b6 c0             	movzbl %al,%eax
f010665e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0106661:	0f 8f 96 fe ff ff    	jg     f01064fd <sched_exit_all_ready_envs+0x29>
				LIST_REMOVE(&(ProcessQueues.env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0106667:	83 ec 0c             	sub    $0xc,%esp
f010666a:	68 00 ee 59 f0       	push   $0xf059ee00
f010666f:	e8 34 85 00 00       	call   f010eba8 <release_spinlock>
f0106674:	83 c4 10             	add    $0x10,%esp
}
f0106677:	90                   	nop
f0106678:	c9                   	leave  
f0106679:	c3                   	ret    

f010667a <timer_ticks>:

/*2023*/
/********* for BSD Priority Scheduler *************/
int64 timer_ticks()
{
f010667a:	55                   	push   %ebp
f010667b:	89 e5                	mov    %esp,%ebp
	return ticks;
f010667d:	a1 68 1a 5a f0       	mov    0xf05a1a68,%eax
f0106682:	8b 15 6c 1a 5a f0    	mov    0xf05a1a6c,%edx
}
f0106688:	5d                   	pop    %ebp
f0106689:	c3                   	ret    

f010668a <env_get_nice>:
int env_get_nice(struct Env* e)
{
f010668a:	55                   	push   %ebp
f010668b:	89 e5                	mov    %esp,%ebp
f010668d:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] BSD Scheduler - env_get_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106690:	83 ec 04             	sub    $0x4,%esp
f0106693:	68 bc 67 12 f0       	push   $0xf01267bc
f0106698:	68 8c 02 00 00       	push   $0x28c
f010669d:	68 a3 63 12 f0       	push   $0xf01263a3
f01066a2:	e8 73 9c ff ff       	call   f010031a <_panic>

f01066a7 <env_set_nice>:
}

void env_set_nice(struct Env* e, int nice_value)
{
f01066a7:	55                   	push   %ebp
f01066a8:	89 e5                	mov    %esp,%ebp
f01066aa:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] BSD Scheduler - env_set_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f01066ad:	83 ec 04             	sub    $0x4,%esp
f01066b0:	68 bc 67 12 f0       	push   $0xf01267bc
f01066b5:	68 94 02 00 00       	push   $0x294
f01066ba:	68 a3 63 12 f0       	push   $0xf01263a3
f01066bf:	e8 56 9c ff ff       	call   f010031a <_panic>

f01066c4 <env_get_recent_cpu>:
}

int env_get_recent_cpu(struct Env* e)
{
f01066c4:	55                   	push   %ebp
f01066c5:	89 e5                	mov    %esp,%ebp
f01066c7:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] BSD Scheduler - env_get_recent_cpu
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f01066ca:	83 ec 04             	sub    $0x4,%esp
f01066cd:	68 bc 67 12 f0       	push   $0xf01267bc
f01066d2:	68 9c 02 00 00       	push   $0x29c
f01066d7:	68 a3 63 12 f0       	push   $0xf01263a3
f01066dc:	e8 39 9c ff ff       	call   f010031a <_panic>

f01066e1 <get_load_average>:
}
int get_load_average()
{
f01066e1:	55                   	push   %ebp
f01066e2:	89 e5                	mov    %esp,%ebp
f01066e4:	83 ec 08             	sub    $0x8,%esp
	//return 1;
	//[PROJECT] BSD Scheduler - get_load_average
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f01066e7:	83 ec 04             	sub    $0x4,%esp
f01066ea:	68 bc 67 12 f0       	push   $0xf01267bc
f01066ef:	68 a4 02 00 00       	push   $0x2a4
f01066f4:	68 a3 63 12 f0       	push   $0xf01263a3
f01066f9:	e8 1c 9c ff ff       	call   f010031a <_panic>

f01066fe <isSchedMethodRR>:
#include <kern/cmd/command_prompt.h>
#include <kern/cpu/cpu.h>
#include <kern/cpu/picirq.h>


uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f01066fe:	55                   	push   %ebp
f01066ff:	89 e5                	mov    %esp,%ebp
f0106701:	a1 b4 18 5a f0       	mov    0xf05a18b4,%eax
f0106706:	85 c0                	test   %eax,%eax
f0106708:	75 07                	jne    f0106711 <isSchedMethodRR+0x13>
f010670a:	b8 01 00 00 00       	mov    $0x1,%eax
f010670f:	eb 05                	jmp    f0106716 <isSchedMethodRR+0x18>
f0106711:	b8 00 00 00 00       	mov    $0x0,%eax
f0106716:	5d                   	pop    %ebp
f0106717:	c3                   	ret    

f0106718 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0106718:	55                   	push   %ebp
f0106719:	89 e5                	mov    %esp,%ebp
f010671b:	a1 b4 18 5a f0       	mov    0xf05a18b4,%eax
f0106720:	83 f8 01             	cmp    $0x1,%eax
f0106723:	75 07                	jne    f010672c <isSchedMethodMLFQ+0x14>
f0106725:	b8 01 00 00 00       	mov    $0x1,%eax
f010672a:	eb 05                	jmp    f0106731 <isSchedMethodMLFQ+0x19>
f010672c:	b8 00 00 00 00       	mov    $0x0,%eax
f0106731:	5d                   	pop    %ebp
f0106732:	c3                   	ret    

f0106733 <isSchedMethodBSD>:
uint32 isSchedMethodBSD(){if(scheduler_method == SCH_BSD) return 1; return 0;}
f0106733:	55                   	push   %ebp
f0106734:	89 e5                	mov    %esp,%ebp
f0106736:	a1 b4 18 5a f0       	mov    0xf05a18b4,%eax
f010673b:	83 f8 02             	cmp    $0x2,%eax
f010673e:	75 07                	jne    f0106747 <isSchedMethodBSD+0x14>
f0106740:	b8 01 00 00 00       	mov    $0x1,%eax
f0106745:	eb 05                	jmp    f010674c <isSchedMethodBSD+0x19>
f0106747:	b8 00 00 00 00       	mov    $0x0,%eax
f010674c:	5d                   	pop    %ebp
f010674d:	c3                   	ret    

f010674e <sched_init>:

//===================================
// [1] Default Scheduler Initializer:
//===================================
void sched_init()
{
f010674e:	55                   	push   %ebp
f010674f:	89 e5                	mov    %esp,%ebp
f0106751:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f0106754:	c7 05 88 15 5a f0 00 	movl   $0x0,0xf05a1588
f010675b:	00 00 00 

	sched_init_RR(INIT_QUANTUM_IN_MS);
f010675e:	83 ec 0c             	sub    $0xc,%esp
f0106761:	6a 0a                	push   $0xa
f0106763:	e8 6d 02 00 00       	call   f01069d5 <sched_init_RR>
f0106768:	83 c4 10             	add    $0x10,%esp

	init_queue(&ProcessQueues.env_new_queue);
f010676b:	83 ec 0c             	sub    $0xc,%esp
f010676e:	68 70 ee 59 f0       	push   $0xf059ee70
f0106773:	e8 bf e7 ff ff       	call   f0104f37 <init_queue>
f0106778:	83 c4 10             	add    $0x10,%esp
	init_queue(&ProcessQueues.env_exit_queue);
f010677b:	83 ec 0c             	sub    $0xc,%esp
f010677e:	68 80 ee 59 f0       	push   $0xf059ee80
f0106783:	e8 af e7 ff ff       	call   f0104f37 <init_queue>
f0106788:	83 c4 10             	add    $0x10,%esp

	mycpu()->scheduler_status = SCH_STOPPED;
f010678b:	e8 6d 09 00 00       	call   f01070fd <mycpu>
f0106790:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f0106797:	00 00 00 

	/*2024: initialize lock to protect these Qs in MULTI-CORE case only*/
	init_spinlock(&ProcessQueues.qlock, "process queues lock");
f010679a:	83 ec 08             	sub    $0x8,%esp
f010679d:	68 d0 67 12 f0       	push   $0xf01267d0
f01067a2:	68 00 ee 59 f0       	push   $0xf059ee00
f01067a7:	e8 44 83 00 00       	call   f010eaf0 <init_spinlock>
f01067ac:	83 c4 10             	add    $0x10,%esp
}
f01067af:	90                   	nop
f01067b0:	c9                   	leave  
f01067b1:	c3                   	ret    

f01067b2 <fos_scheduler>:
// [2] Main FOS Scheduler:
//=========================

void
fos_scheduler(void)
{
f01067b2:	55                   	push   %ebp
f01067b3:	89 e5                	mov    %esp,%ebp
f01067b5:	53                   	push   %ebx
f01067b6:	83 ec 24             	sub    $0x24,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f01067b9:	9c                   	pushf  
f01067ba:	58                   	pop    %eax
f01067bb:	89 45 d8             	mov    %eax,-0x28(%ebp)
        return eflags;
f01067be:	8b 45 d8             	mov    -0x28(%ebp),%eax
	//ensure that the scheduler is invoked while interrupt is disabled
	if (read_eflags() & FL_IF)
f01067c1:	25 00 02 00 00       	and    $0x200,%eax
f01067c6:	85 c0                	test   %eax,%eax
f01067c8:	74 14                	je     f01067de <fos_scheduler+0x2c>
		panic("fos_scheduler: called while the interrupt is enabled!");
f01067ca:	83 ec 04             	sub    $0x4,%esp
f01067cd:	68 e4 67 12 f0       	push   $0xf01267e4
f01067d2:	6a 37                	push   $0x37
f01067d4:	68 1a 68 12 f0       	push   $0xf012681a
f01067d9:	e8 3c 9b ff ff       	call   f010031a <_panic>

	//cprintf("inside scheduler - timer cnt = %d\n", kclock_read_cnt0());
	struct Env *p;
	struct cpu *c = mycpu();
f01067de:	e8 1a 09 00 00       	call   f01070fd <mycpu>
f01067e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	c->proc = 0;
f01067e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01067e9:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f01067f0:	00 00 00 

	chk1();
f01067f3:	e8 05 ae 01 00       	call   f01215fd <chk1>
	c->scheduler_status = SCH_STARTED;
f01067f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01067fb:	c7 80 b4 00 00 00 01 	movl   $0x1,0xb4(%eax)
f0106802:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f0106805:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

	//2024: should be outer loop as long as there's any BLOCKED processes.
	//Ref: xv6-x86 OS
	int is_any_blocked = 0;
f010680c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

//set interrupt flag
static __inline void
sti(void)
{
	__asm __volatile("sti");
f0106813:	fb                   	sti    
		// to avoid a deadlock if all processes are waiting.
		sti();

		// Check ready queue(s) looking for process to run.
		//cprintf("\n[FOS_SCHEDULER] acquire: lock status before acquire = %d\n", qlock.locked);
		acquire_spinlock(&(ProcessQueues.qlock));  //lock: to protect ready & blocked Qs in multi-CPU
f0106814:	83 ec 0c             	sub    $0xc,%esp
f0106817:	68 00 ee 59 f0       	push   $0xf059ee00
f010681c:	e8 00 83 00 00       	call   f010eb21 <acquire_spinlock>
f0106821:	83 c4 10             	add    $0x10,%esp
		//cprintf("ACQUIRED\n");
		do
		{
			//Get next env according to the current scheduler
			next_env = sched_next[scheduler_method]() ;
f0106824:	a1 b4 18 5a f0       	mov    0xf05a18b4,%eax
f0106829:	8b 04 85 4c d9 17 f0 	mov    -0xfe826b4(,%eax,4),%eax
f0106830:	ff d0                	call   *%eax
f0106832:	89 45 e8             	mov    %eax,-0x18(%ebp)

			//temporarily set the curenv by the next env JUST for checking the scheduler
			//Then: reset it again
			struct Env* old_curenv = get_cpu_proc();
f0106835:	e8 36 3f 00 00       	call   f010a770 <get_cpu_proc>
f010683a:	89 45 e0             	mov    %eax,-0x20(%ebp)
			set_cpu_proc(next_env) ;
f010683d:	83 ec 0c             	sub    $0xc,%esp
f0106840:	ff 75 e8             	pushl  -0x18(%ebp)
f0106843:	e8 51 3f 00 00       	call   f010a799 <set_cpu_proc>
f0106848:	83 c4 10             	add    $0x10,%esp
			chk2(next_env) ;
f010684b:	83 ec 0c             	sub    $0xc,%esp
f010684e:	ff 75 e8             	pushl  -0x18(%ebp)
f0106851:	e8 ad ad 01 00       	call   f0121603 <chk2>
f0106856:	83 c4 10             	add    $0x10,%esp
			set_cpu_proc(old_curenv) ;
f0106859:	83 ec 0c             	sub    $0xc,%esp
f010685c:	ff 75 e0             	pushl  -0x20(%ebp)
f010685f:	e8 35 3f 00 00       	call   f010a799 <set_cpu_proc>
f0106864:	83 c4 10             	add    $0x10,%esp

			//sched_print_all();

			if(next_env != NULL)
f0106867:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010686b:	0f 84 d6 00 00 00    	je     f0106947 <fos_scheduler+0x195>
				/*2024: Replaced by context_switch()*/
				//env_run(next_env);

				// Switch to chosen process. It is the process's job to release qlock
				// and then reacquire it before jumping back to us.
				set_cpu_proc(next_env);
f0106871:	83 ec 0c             	sub    $0xc,%esp
f0106874:	ff 75 e8             	pushl  -0x18(%ebp)
f0106877:	e8 1d 3f 00 00       	call   f010a799 <set_cpu_proc>
f010687c:	83 c4 10             	add    $0x10,%esp
				switchuvm(next_env);
f010687f:	83 ec 0c             	sub    $0xc,%esp
f0106882:	ff 75 e8             	pushl  -0x18(%ebp)
f0106885:	e8 96 41 00 00       	call   f010aa20 <switchuvm>
f010688a:	83 c4 10             	add    $0x10,%esp

				//Change its status to RUNNING
				next_env->env_status = ENV_RUNNING;
f010688d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106890:	c7 40 18 02 00 00 00 	movl   $0x2,0x18(%eax)

				//Context switch to it
				context_switch(&(c->scheduler), next_env->context);
f0106897:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010689a:	8b 40 04             	mov    0x4(%eax),%eax
f010689d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01068a0:	83 c2 04             	add    $0x4,%edx
f01068a3:	83 ec 08             	sub    $0x8,%esp
f01068a6:	50                   	push   %eax
f01068a7:	52                   	push   %edx
f01068a8:	e8 92 e2 ff ff       	call   f0104b3f <context_switch>
f01068ad:	83 c4 10             	add    $0x10,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f01068b0:	9c                   	pushf  
f01068b1:	58                   	pop    %eax
f01068b2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        return eflags;
f01068b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax

				//ensure that the scheduler is invoked while interrupt is disabled
				if (read_eflags() & FL_IF)
f01068b8:	25 00 02 00 00       	and    $0x200,%eax
f01068bd:	85 c0                	test   %eax,%eax
f01068bf:	74 14                	je     f01068d5 <fos_scheduler+0x123>
					panic("fos_scheduler: invoked while the interrupt is enabled!");
f01068c1:	83 ec 04             	sub    $0x4,%esp
f01068c4:	68 2c 68 12 f0       	push   $0xf012682c
f01068c9:	6a 74                	push   $0x74
f01068cb:	68 1a 68 12 f0       	push   $0xf012681a
f01068d0:	e8 45 9a ff ff       	call   f010031a <_panic>

				//Stop the clock now till finding a next proc (if any).
				//This is to avoid clock interrupt inside the scheduler after sti() of the outer loop
				kclock_stop();
f01068d5:	e8 ae e3 ff ff       	call   f0104c88 <kclock_stop>
				//cprintf("\n[IEN = %d] clock is stopped! returned to scheduler after context_switch. curenv = %d\n", (read_eflags() & FL_IF) == 0? 0:1, curenv == NULL? 0 : curenv->env_id);

				// Process is done running for now. It should have changed its p->status before coming back.
				//If no process on CPU, switch to the kernel
				assert(get_cpu_proc() == c->proc);
f01068da:	e8 91 3e 00 00       	call   f010a770 <get_cpu_proc>
f01068df:	89 c2                	mov    %eax,%edx
f01068e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01068e4:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01068ea:	39 c2                	cmp    %eax,%edx
f01068ec:	74 16                	je     f0106904 <fos_scheduler+0x152>
f01068ee:	68 63 68 12 f0       	push   $0xf0126863
f01068f3:	68 7d 68 12 f0       	push   $0xf012687d
f01068f8:	6a 7d                	push   $0x7d
f01068fa:	68 1a 68 12 f0       	push   $0xf012681a
f01068ff:	e8 16 9a ff ff       	call   f010031a <_panic>
				int status = c->proc->env_status ;
f0106904:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106907:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010690d:	8b 40 18             	mov    0x18(%eax),%eax
f0106910:	89 45 dc             	mov    %eax,-0x24(%ebp)
				assert(status != ENV_RUNNING);
f0106913:	83 7d dc 02          	cmpl   $0x2,-0x24(%ebp)
f0106917:	75 16                	jne    f010692f <fos_scheduler+0x17d>
f0106919:	68 92 68 12 f0       	push   $0xf0126892
f010691e:	68 7d 68 12 f0       	push   $0xf012687d
f0106923:	6a 7f                	push   $0x7f
f0106925:	68 1a 68 12 f0       	push   $0xf012681a
f010692a:	e8 eb 99 ff ff       	call   f010031a <_panic>
				if (status == ENV_READY)
f010692f:	83 7d dc 01          	cmpl   $0x1,-0x24(%ebp)
f0106933:	74 12                	je     f0106947 <fos_scheduler+0x195>
					//OK... will be placed to the correct ready Q in the next iteration
				}
				else
				{
					//					cprintf("scheduler: process %d is BLOCKED/EXITED\n", c->proc->env_id);
					switchkvm();
f0106935:	e8 cf 40 00 00       	call   f010aa09 <switchkvm>
					set_cpu_proc(NULL);
f010693a:	83 ec 0c             	sub    $0xc,%esp
f010693d:	6a 00                	push   $0x0
f010693f:	e8 55 3e 00 00       	call   f010a799 <set_cpu_proc>
f0106944:	83 c4 10             	add    $0x10,%esp
				}
			}
		} while(next_env);
f0106947:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010694b:	0f 85 d3 fe ff ff    	jne    f0106824 <fos_scheduler+0x72>

		//2024 - check if there's any blocked process?
		is_any_blocked = 0;
f0106951:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		for (int i = 0; i < NENV; ++i)
f0106958:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010695f:	eb 4d                	jmp    f01069ae <fos_scheduler+0x1fc>
		{
			if (envs[i].env_status == ENV_BLOCKED)
f0106961:	8b 0d b0 e3 59 f0    	mov    0xf059e3b0,%ecx
f0106967:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010696a:	89 d0                	mov    %edx,%eax
f010696c:	c1 e0 06             	shl    $0x6,%eax
f010696f:	29 d0                	sub    %edx,%eax
f0106971:	c1 e0 02             	shl    $0x2,%eax
f0106974:	01 d0                	add    %edx,%eax
f0106976:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f010697d:	01 d8                	add    %ebx,%eax
f010697f:	c1 e0 03             	shl    $0x3,%eax
f0106982:	01 d0                	add    %edx,%eax
f0106984:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010698b:	29 c2                	sub    %eax,%edx
f010698d:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f0106994:	89 c2                	mov    %eax,%edx
f0106996:	89 d0                	mov    %edx,%eax
f0106998:	01 c8                	add    %ecx,%eax
f010699a:	8b 40 18             	mov    0x18(%eax),%eax
f010699d:	83 f8 03             	cmp    $0x3,%eax
f01069a0:	75 09                	jne    f01069ab <fos_scheduler+0x1f9>
			{
				is_any_blocked = 1;
f01069a2:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
				break;
f01069a9:	eb 0b                	jmp    f01069b6 <fos_scheduler+0x204>
			}
		} while(next_env);

		//2024 - check if there's any blocked process?
		is_any_blocked = 0;
		for (int i = 0; i < NENV; ++i)
f01069ab:	ff 45 f0             	incl   -0x10(%ebp)
f01069ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01069b1:	83 f8 07             	cmp    $0x7,%eax
f01069b4:	76 ab                	jbe    f0106961 <fos_scheduler+0x1af>
			{
				is_any_blocked = 1;
				break;
			}
		}
		release_spinlock(&ProcessQueues.qlock);  //release lock: to protect ready & blocked Qs in multi-CPU
f01069b6:	83 ec 0c             	sub    $0xc,%esp
f01069b9:	68 00 ee 59 f0       	push   $0xf059ee00
f01069be:	e8 e5 81 00 00       	call   f010eba8 <release_spinlock>
f01069c3:	83 c4 10             	add    $0x10,%esp
		//cprintf("\n[FOS_SCHEDULER] release: lock status after = %d\n", qlock.locked);

	} while (is_any_blocked > 0);
f01069c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01069ca:	0f 8f 43 fe ff ff    	jg     f0106813 <fos_scheduler+0x61>

	/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
	{
		//cprintf("[sched] no envs - nothing more to do!\n");
		get_into_prompt();
f01069d0:	e8 ce b3 ff ff       	call   f0101da3 <get_into_prompt>

f01069d5 <sched_init_RR>:

//=============================
// [3] Initialize RR Scheduler:
//=============================
void sched_init_RR(uint8 quantum)
{
f01069d5:	55                   	push   %ebp
f01069d6:	89 e5                	mov    %esp,%ebp
f01069d8:	83 ec 28             	sub    $0x28,%esp
f01069db:	8b 45 08             	mov    0x8(%ebp),%eax
f01069de:	88 45 e4             	mov    %al,-0x1c(%ebp)

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f01069e1:	c6 05 00 1b 5a f0 01 	movb   $0x1,0xf05a1b00
	//cprintf("sizeof(struct Env_Queue) = %x\n", sizeof(struct Env_Queue));
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
	//cprintf("num_of_ready_queues * sizeof(uint8) = %x\n", num_of_ready_queues * sizeof(uint8));

#endif
	quantums[0] = quantum;
f01069e8:	8a 45 e4             	mov    -0x1c(%ebp),%al
f01069eb:	a2 84 17 5a f0       	mov    %al,0xf05a1784
	kclock_set_quantum(quantums[0]);
f01069f0:	a0 84 17 5a f0       	mov    0xf05a1784,%al
f01069f5:	0f b6 c0             	movzbl %al,%eax
f01069f8:	83 ec 0c             	sub    $0xc,%esp
f01069fb:	50                   	push   %eax
f01069fc:	e8 50 e3 ff ff       	call   f0104d51 <kclock_set_quantum>
f0106a01:	83 c4 10             	add    $0x10,%esp
	init_queue(&(ProcessQueues.env_ready_queues[0]));
f0106a04:	83 ec 0c             	sub    $0xc,%esp
f0106a07:	68 90 ee 59 f0       	push   $0xf059ee90
f0106a0c:	e8 26 e5 ff ff       	call   f0104f37 <init_queue>
f0106a11:	83 c4 10             	add    $0x10,%esp
	//=========================================
	//DON'T CHANGE THESE LINES=================
	uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
f0106a14:	e8 97 e4 ff ff       	call   f0104eb0 <kclock_read_cnt0_latch>
f0106a19:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	cprintf("*	RR scheduler with initial clock = %d\n", cnt0);
f0106a1d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0106a21:	83 ec 08             	sub    $0x8,%esp
f0106a24:	50                   	push   %eax
f0106a25:	68 a8 68 12 f0       	push   $0xf01268a8
f0106a2a:	e8 3d a5 ff ff       	call   f0100f6c <cprintf>
f0106a2f:	83 c4 10             	add    $0x10,%esp
	mycpu()->scheduler_status = SCH_STOPPED;
f0106a32:	e8 c6 06 00 00       	call   f01070fd <mycpu>
f0106a37:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f0106a3e:	00 00 00 
	scheduler_method = SCH_RR;
f0106a41:	c7 05 b4 18 5a f0 00 	movl   $0x0,0xf05a18b4
f0106a48:	00 00 00 
	//=========================================
	//=========================================
}
f0106a4b:	90                   	nop
f0106a4c:	c9                   	leave  
f0106a4d:	c3                   	ret    

f0106a4e <sched_init_MLFQ>:

//===============================
// [4] Initialize MLFQ Scheduler:
//===============================
void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f0106a4e:	55                   	push   %ebp
f0106a4f:	89 e5                	mov    %esp,%ebp
f0106a51:	83 ec 18             	sub    $0x18,%esp
f0106a54:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a57:	88 45 f4             	mov    %al,-0xc(%ebp)
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f0106a5a:	e8 88 e7 ff ff       	call   f01051e7 <sched_delete_ready_queues>
	//=========================================
	//=========================================
	//[PROJECT] MLFQ Scheduler - sched_init_MLFQ
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106a5f:	83 ec 04             	sub    $0x4,%esp
f0106a62:	68 d0 68 12 f0       	push   $0xf01268d0
f0106a67:	68 ce 00 00 00       	push   $0xce
f0106a6c:	68 1a 68 12 f0       	push   $0xf012681a
f0106a71:	e8 a4 98 ff ff       	call   f010031a <_panic>

f0106a76 <sched_init_BSD>:

//===============================
// [5] Initialize BSD Scheduler:
//===============================
void sched_init_BSD(uint8 numOfLevels, uint8 quantum)
{
f0106a76:	55                   	push   %ebp
f0106a77:	89 e5                	mov    %esp,%ebp
f0106a79:	83 ec 18             	sub    $0x18,%esp
f0106a7c:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a82:	88 55 f4             	mov    %dl,-0xc(%ebp)
f0106a85:	88 45 f0             	mov    %al,-0x10(%ebp)
	//[PROJECT] BSD Scheduler - sched_init_BSD
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106a88:	83 ec 04             	sub    $0x4,%esp
f0106a8b:	68 d0 68 12 f0       	push   $0xf01268d0
f0106a90:	68 e4 00 00 00       	push   $0xe4
f0106a95:	68 1a 68 12 f0       	push   $0xf012681a
f0106a9a:	e8 7b 98 ff ff       	call   f010031a <_panic>

f0106a9f <fos_scheduler_RR>:

//=========================
// [6] RR Scheduler:
//=========================
struct Env* fos_scheduler_RR()
{
f0106a9f:	55                   	push   %ebp
f0106aa0:	89 e5                	mov    %esp,%ebp
f0106aa2:	83 ec 18             	sub    $0x18,%esp
	// Pick next environment from the ready queue,
	// and switch to such environment if found.
	// It's OK to choose the previously running env if no other env
	// is runnable.
	/*To protect process Qs (or info of current process) in multi-CPU************************/
	if(!holding_spinlock(&ProcessQueues.qlock))
f0106aa5:	83 ec 0c             	sub    $0xc,%esp
f0106aa8:	68 00 ee 59 f0       	push   $0xf059ee00
f0106aad:	e8 88 82 00 00       	call   f010ed3a <holding_spinlock>
f0106ab2:	83 c4 10             	add    $0x10,%esp
f0106ab5:	85 c0                	test   %eax,%eax
f0106ab7:	75 17                	jne    f0106ad0 <fos_scheduler_RR+0x31>
		panic("fos_scheduler_RR: q.lock is not held by this CPU while it's expected to be.");
f0106ab9:	83 ec 04             	sub    $0x4,%esp
f0106abc:	68 e4 68 12 f0       	push   $0xf01268e4
f0106ac1:	68 fe 00 00 00       	push   $0xfe
f0106ac6:	68 1a 68 12 f0       	push   $0xf012681a
f0106acb:	e8 4a 98 ff ff       	call   f010031a <_panic>
	/****************************************************************************************/
	struct Env *next_env = NULL;
f0106ad0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct Env *cur_env = get_cpu_proc();
f0106ad7:	e8 94 3c 00 00       	call   f010a770 <get_cpu_proc>
f0106adc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//If the curenv is still exist, then insert it again in the ready queue
	if (cur_env != NULL)
f0106adf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106ae3:	74 13                	je     f0106af8 <fos_scheduler_RR+0x59>
	{
		enqueue(&(ProcessQueues.env_ready_queues[0]), cur_env);
f0106ae5:	83 ec 08             	sub    $0x8,%esp
f0106ae8:	ff 75 f0             	pushl  -0x10(%ebp)
f0106aeb:	68 90 ee 59 f0       	push   $0xf059ee90
f0106af0:	e8 83 e4 ff ff       	call   f0104f78 <enqueue>
f0106af5:	83 c4 10             	add    $0x10,%esp
	}

	//Pick the next environment from the ready queue
	next_env = dequeue(&(ProcessQueues.env_ready_queues[0]));
f0106af8:	83 ec 0c             	sub    $0xc,%esp
f0106afb:	68 90 ee 59 f0       	push   $0xf059ee90
f0106b00:	e8 04 e5 ff ff       	call   f0105009 <dequeue>
f0106b05:	83 c4 10             	add    $0x10,%esp
f0106b08:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//Reset the quantum
	//2017: Reset the value of CNT0 for the next clock interval
	kclock_set_quantum(quantums[0]);
f0106b0b:	a0 84 17 5a f0       	mov    0xf05a1784,%al
f0106b10:	0f b6 c0             	movzbl %al,%eax
f0106b13:	83 ec 0c             	sub    $0xc,%esp
f0106b16:	50                   	push   %eax
f0106b17:	e8 35 e2 ff ff       	call   f0104d51 <kclock_set_quantum>
f0106b1c:	83 c4 10             	add    $0x10,%esp
	//uint16 cnt0 = kclock_read_cnt0_latch() ;
	//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	return next_env;
f0106b1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106b22:	c9                   	leave  
f0106b23:	c3                   	ret    

f0106b24 <fos_scheduler_MLFQ>:

//=========================
// [6] MLFQ Scheduler:
//=========================
struct Env* fos_scheduler_MLFQ()
{
f0106b24:	55                   	push   %ebp
f0106b25:	89 e5                	mov    %esp,%ebp
f0106b27:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	/*To protect process Qs (or info of current process) in multi-CPU************************/
	if(!holding_spinlock(&ProcessQueues.qlock))
f0106b2a:	83 ec 0c             	sub    $0xc,%esp
f0106b2d:	68 00 ee 59 f0       	push   $0xf059ee00
f0106b32:	e8 03 82 00 00       	call   f010ed3a <holding_spinlock>
f0106b37:	83 c4 10             	add    $0x10,%esp
f0106b3a:	85 c0                	test   %eax,%eax
f0106b3c:	75 17                	jne    f0106b55 <fos_scheduler_MLFQ+0x31>
		panic("fos_scheduler_MLFQ: q.lock is not held by this CPU while it's expected to be.");
f0106b3e:	83 ec 04             	sub    $0x4,%esp
f0106b41:	68 30 69 12 f0       	push   $0xf0126930
f0106b46:	68 1d 01 00 00       	push   $0x11d
f0106b4b:	68 1a 68 12 f0       	push   $0xf012681a
f0106b50:	e8 c5 97 ff ff       	call   f010031a <_panic>
	/****************************************************************************************/

	//[PROJECT] MLFQ Scheduler - fos_scheduler_MLFQ
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106b55:	83 ec 04             	sub    $0x4,%esp
f0106b58:	68 d0 68 12 f0       	push   $0xf01268d0
f0106b5d:	68 23 01 00 00       	push   $0x123
f0106b62:	68 1a 68 12 f0       	push   $0xf012681a
f0106b67:	e8 ae 97 ff ff       	call   f010031a <_panic>

f0106b6c <fos_scheduler_BSD>:

//=========================
// [7] BSD Scheduler:
//=========================
struct Env* fos_scheduler_BSD()
{
f0106b6c:	55                   	push   %ebp
f0106b6d:	89 e5                	mov    %esp,%ebp
f0106b6f:	83 ec 08             	sub    $0x8,%esp
	/*To protect process Qs (or info of current process) in multi-CPU************************/
	if(!holding_spinlock(&ProcessQueues.qlock))
f0106b72:	83 ec 0c             	sub    $0xc,%esp
f0106b75:	68 00 ee 59 f0       	push   $0xf059ee00
f0106b7a:	e8 bb 81 00 00       	call   f010ed3a <holding_spinlock>
f0106b7f:	83 c4 10             	add    $0x10,%esp
f0106b82:	85 c0                	test   %eax,%eax
f0106b84:	75 17                	jne    f0106b9d <fos_scheduler_BSD+0x31>
		panic("fos_scheduler_BSD: q.lock is not held by this CPU while it's expected to be.");
f0106b86:	83 ec 04             	sub    $0x4,%esp
f0106b89:	68 80 69 12 f0       	push   $0xf0126980
f0106b8e:	68 2e 01 00 00       	push   $0x12e
f0106b93:	68 1a 68 12 f0       	push   $0xf012681a
f0106b98:	e8 7d 97 ff ff       	call   f010031a <_panic>
	/****************************************************************************************/

	//[PROJECT] BSD Scheduler - fos_scheduler_BSD
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106b9d:	83 ec 04             	sub    $0x4,%esp
f0106ba0:	68 d0 68 12 f0       	push   $0xf01268d0
f0106ba5:	68 34 01 00 00       	push   $0x134
f0106baa:	68 1a 68 12 f0       	push   $0xf012681a
f0106baf:	e8 66 97 ff ff       	call   f010031a <_panic>

f0106bb4 <clock_interrupt_handler>:
//========================================
// [8] Clock Interrupt Handler
//	  (Automatically Called Every Quantum)
//========================================
void clock_interrupt_handler(struct Trapframe* tf)
{
f0106bb4:	55                   	push   %ebp
f0106bb5:	89 e5                	mov    %esp,%ebp
f0106bb7:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodBSD())
f0106bba:	e8 74 fb ff ff       	call   f0106733 <isSchedMethodBSD>
f0106bbf:	85 c0                	test   %eax,%eax
f0106bc1:	74 17                	je     f0106bda <clock_interrupt_handler+0x26>
	{
		//[PROJECT] BSD Scheduler - clock_interrupt_handler
		//Your code is here
		//Comment the following line
		panic("Not implemented yet");
f0106bc3:	83 ec 04             	sub    $0x4,%esp
f0106bc6:	68 d0 68 12 f0       	push   $0xf01268d0
f0106bcb:	68 43 01 00 00       	push   $0x143
f0106bd0:	68 1a 68 12 f0       	push   $0xf012681a
f0106bd5:	e8 40 97 ff ff       	call   f010031a <_panic>
	}



	/********DON'T CHANGE THESE LINES***********/
	ticks++ ;
f0106bda:	a1 68 1a 5a f0       	mov    0xf05a1a68,%eax
f0106bdf:	8b 15 6c 1a 5a f0    	mov    0xf05a1a6c,%edx
f0106be5:	83 c0 01             	add    $0x1,%eax
f0106be8:	83 d2 00             	adc    $0x0,%edx
f0106beb:	a3 68 1a 5a f0       	mov    %eax,0xf05a1a68
f0106bf0:	89 15 6c 1a 5a f0    	mov    %edx,0xf05a1a6c
	struct Env* p = get_cpu_proc();
f0106bf6:	e8 75 3b 00 00       	call   f010a770 <get_cpu_proc>
f0106bfb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (p == NULL)
f0106bfe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c02:	74 30                	je     f0106c34 <clock_interrupt_handler+0x80>
	{
	}
	else
	{
		p->nClocks++ ;
f0106c04:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c07:	8b 80 68 da 01 00    	mov    0x1da68(%eax),%eax
f0106c0d:	8d 50 01             	lea    0x1(%eax),%edx
f0106c10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c13:	89 90 68 da 01 00    	mov    %edx,0x1da68(%eax)
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0106c19:	83 ec 0c             	sub    $0xc,%esp
f0106c1c:	6a 01                	push   $0x1
f0106c1e:	e8 ed 7a 00 00       	call   f010e710 <isPageReplacmentAlgorithmLRU>
f0106c23:	83 c4 10             	add    $0x10,%esp
f0106c26:	85 c0                	test   %eax,%eax
f0106c28:	74 05                	je     f0106c2f <clock_interrupt_handler+0x7b>
		{
			update_WS_time_stamps();
f0106c2a:	e8 08 00 00 00       	call   f0106c37 <update_WS_time_stamps>
		}
		//cprintf("\n***************\nClock Handler\n***************\n") ;
		//fos_scheduler();
		yield();
f0106c2f:	e8 6a 3c 00 00       	call   f010a89e <yield>
	}
	/*****************************************/
}
f0106c34:	90                   	nop
f0106c35:	c9                   	leave  
f0106c36:	c3                   	ret    

f0106c37 <update_WS_time_stamps>:
//===================================================================
// [9] Update LRU Timestamp of WS Elements
//	  (Automatically Called Every Quantum in case of LRU Time Approx)
//===================================================================
void update_WS_time_stamps()
{
f0106c37:	55                   	push   %ebp
f0106c38:	89 e5                	mov    %esp,%ebp
f0106c3a:	53                   	push   %ebx
f0106c3b:	83 ec 34             	sub    $0x34,%esp
	struct Env *curr_env_ptr = get_cpu_proc();
f0106c3e:	e8 2d 3b 00 00       	call   f010a770 <get_cpu_proc>
f0106c43:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0106c46:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106c4a:	0f 84 9d 01 00 00    	je     f0106ded <update_WS_time_stamps+0x1b6>
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
				for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0106c50:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106c57:	e9 99 00 00 00       	jmp    f0106cf5 <update_WS_time_stamps+0xbe>
				{
					wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
f0106c5c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106c5f:	89 d0                	mov    %edx,%eax
f0106c61:	01 c0                	add    %eax,%eax
f0106c63:	01 d0                	add    %edx,%eax
f0106c65:	c1 e0 03             	shl    $0x3,%eax
f0106c68:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f0106c6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c71:	01 d0                	add    %edx,%eax
f0106c73:	83 c0 08             	add    $0x8,%eax
f0106c76:	89 45 e8             	mov    %eax,-0x18(%ebp)
					if( wse->empty == 1)
f0106c79:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106c7c:	8a 40 04             	mov    0x4(%eax),%al
f0106c7f:	3c 01                	cmp    $0x1,%al
f0106c81:	74 6e                	je     f0106cf1 <update_WS_time_stamps+0xba>
						continue;
#endif
					//update the time if the page was referenced
					uint32 page_va = wse->virtual_address ;
f0106c83:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106c86:	8b 00                	mov    (%eax),%eax
f0106c88:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0106c8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c8e:	8b 40 64             	mov    0x64(%eax),%eax
f0106c91:	83 ec 08             	sub    $0x8,%esp
f0106c94:	ff 75 e4             	pushl  -0x1c(%ebp)
f0106c97:	50                   	push   %eax
f0106c98:	e8 4f 1f 00 00       	call   f0108bec <pt_get_page_permissions>
f0106c9d:	83 c4 10             	add    $0x10,%esp
f0106ca0:	89 45 e0             	mov    %eax,-0x20(%ebp)
					uint32 oldTimeStamp = wse->time_stamp;
f0106ca3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106ca6:	8b 40 08             	mov    0x8(%eax),%eax
f0106ca9:	89 45 dc             	mov    %eax,-0x24(%ebp)

					if (perm & PERM_USED)
f0106cac:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106caf:	83 e0 20             	and    $0x20,%eax
f0106cb2:	85 c0                	test   %eax,%eax
f0106cb4:	74 2b                	je     f0106ce1 <update_WS_time_stamps+0xaa>
					{
						wse->time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0106cb6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106cb9:	c1 e8 02             	shr    $0x2,%eax
f0106cbc:	0d 00 00 00 80       	or     $0x80000000,%eax
f0106cc1:	89 c2                	mov    %eax,%edx
f0106cc3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106cc6:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0106cc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ccc:	8b 40 64             	mov    0x64(%eax),%eax
f0106ccf:	6a 20                	push   $0x20
f0106cd1:	6a 00                	push   $0x0
f0106cd3:	ff 75 e4             	pushl  -0x1c(%ebp)
f0106cd6:	50                   	push   %eax
f0106cd7:	e8 4c 1e 00 00       	call   f0108b28 <pt_set_page_permissions>
f0106cdc:	83 c4 10             	add    $0x10,%esp
f0106cdf:	eb 11                	jmp    f0106cf2 <update_WS_time_stamps+0xbb>
					}
					else
					{
						wse->time_stamp = (oldTimeStamp>>2);
f0106ce1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106ce4:	c1 e8 02             	shr    $0x2,%eax
f0106ce7:	89 c2                	mov    %eax,%edx
f0106ce9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106cec:	89 50 08             	mov    %edx,0x8(%eax)
f0106cef:	eb 01                	jmp    f0106cf2 <update_WS_time_stamps+0xbb>
#else
				for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
				{
					wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
					if( wse->empty == 1)
						continue;
f0106cf1:	90                   	nop
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
				for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0106cf2:	ff 45 f4             	incl   -0xc(%ebp)
f0106cf5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106cf8:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f0106cfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106d01:	39 c2                	cmp    %eax,%edx
f0106d03:	0f 87 53 ff ff ff    	ja     f0106c5c <update_WS_time_stamps+0x25>
				}
			}

			{
				int t ;
				for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0106d09:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0106d10:	e9 ce 00 00 00       	jmp    f0106de3 <update_WS_time_stamps+0x1ac>
				{
					if( curr_env_ptr->__ptr_tws[t].empty != 1)
f0106d15:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0106d18:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d1b:	89 d0                	mov    %edx,%eax
f0106d1d:	01 c0                	add    %eax,%eax
f0106d1f:	01 d0                	add    %edx,%eax
f0106d21:	c1 e0 03             	shl    $0x3,%eax
f0106d24:	01 c8                	add    %ecx,%eax
f0106d26:	05 60 d5 01 00       	add    $0x1d560,%eax
f0106d2b:	8a 00                	mov    (%eax),%al
f0106d2d:	3c 01                	cmp    $0x1,%al
f0106d2f:	0f 84 ab 00 00 00    	je     f0106de0 <update_WS_time_stamps+0x1a9>
					{
						//update the time if the page was referenced
						uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0106d35:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0106d38:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d3b:	89 d0                	mov    %edx,%eax
f0106d3d:	01 c0                	add    %eax,%eax
f0106d3f:	01 d0                	add    %edx,%eax
f0106d41:	c1 e0 03             	shl    $0x3,%eax
f0106d44:	01 c8                	add    %ecx,%eax
f0106d46:	05 5c d5 01 00       	add    $0x1d55c,%eax
f0106d4b:	8b 00                	mov    (%eax),%eax
f0106d4d:	89 45 d8             	mov    %eax,-0x28(%ebp)
						uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0106d50:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0106d53:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d56:	89 d0                	mov    %edx,%eax
f0106d58:	01 c0                	add    %eax,%eax
f0106d5a:	01 d0                	add    %edx,%eax
f0106d5c:	c1 e0 03             	shl    $0x3,%eax
f0106d5f:	01 c8                	add    %ecx,%eax
f0106d61:	05 64 d5 01 00       	add    $0x1d564,%eax
f0106d66:	8b 00                	mov    (%eax),%eax
f0106d68:	89 45 d4             	mov    %eax,-0x2c(%ebp)

						if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0106d6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d6e:	8b 40 64             	mov    0x64(%eax),%eax
f0106d71:	83 ec 08             	sub    $0x8,%esp
f0106d74:	ff 75 d8             	pushl  -0x28(%ebp)
f0106d77:	50                   	push   %eax
f0106d78:	e8 4b 1f 00 00       	call   f0108cc8 <pd_is_table_used>
f0106d7d:	83 c4 10             	add    $0x10,%esp
f0106d80:	85 c0                	test   %eax,%eax
f0106d82:	74 3c                	je     f0106dc0 <update_WS_time_stamps+0x189>
						{
							curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0106d84:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0106d87:	c1 e8 02             	shr    $0x2,%eax
f0106d8a:	0d 00 00 00 80       	or     $0x80000000,%eax
f0106d8f:	89 c1                	mov    %eax,%ecx
f0106d91:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0106d94:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d97:	89 d0                	mov    %edx,%eax
f0106d99:	01 c0                	add    %eax,%eax
f0106d9b:	01 d0                	add    %edx,%eax
f0106d9d:	c1 e0 03             	shl    $0x3,%eax
f0106da0:	01 d8                	add    %ebx,%eax
f0106da2:	05 64 d5 01 00       	add    $0x1d564,%eax
f0106da7:	89 08                	mov    %ecx,(%eax)
							pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0106da9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106dac:	8b 40 64             	mov    0x64(%eax),%eax
f0106daf:	83 ec 08             	sub    $0x8,%esp
f0106db2:	ff 75 d8             	pushl  -0x28(%ebp)
f0106db5:	50                   	push   %eax
f0106db6:	e8 31 1f 00 00       	call   f0108cec <pd_set_table_unused>
f0106dbb:	83 c4 10             	add    $0x10,%esp
f0106dbe:	eb 20                	jmp    f0106de0 <update_WS_time_stamps+0x1a9>
						}
						else
						{
							curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0106dc0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0106dc3:	c1 e8 02             	shr    $0x2,%eax
f0106dc6:	89 c1                	mov    %eax,%ecx
f0106dc8:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0106dcb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106dce:	89 d0                	mov    %edx,%eax
f0106dd0:	01 c0                	add    %eax,%eax
f0106dd2:	01 d0                	add    %edx,%eax
f0106dd4:	c1 e0 03             	shl    $0x3,%eax
f0106dd7:	01 d8                	add    %ebx,%eax
f0106dd9:	05 64 d5 01 00       	add    $0x1d564,%eax
f0106dde:	89 08                	mov    %ecx,(%eax)
				}
			}

			{
				int t ;
				for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0106de0:	ff 45 f0             	incl   -0x10(%ebp)
f0106de3:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0106de7:	0f 8e 28 ff ff ff    	jle    f0106d15 <update_WS_time_stamps+0xde>
						}
					}
				}
			}
		}
	}
f0106ded:	90                   	nop
f0106dee:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106df1:	c9                   	leave  
f0106df2:	c3                   	ret    

f0106df3 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0106df3:	55                   	push   %ebp
f0106df4:	89 e5                	mov    %esp,%ebp
f0106df6:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0106df9:	c7 05 ac e3 59 f0 01 	movl   $0x1,0xf059e3ac
f0106e00:	00 00 00 
f0106e03:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0106e0a:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0106e0e:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0106e11:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106e14:	ee                   	out    %al,(%dx)
f0106e15:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0106e1c:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0106e20:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0106e23:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106e26:	ee                   	out    %al,(%dx)
f0106e27:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0106e2e:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0106e32:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0106e35:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106e38:	ee                   	out    %al,(%dx)
f0106e39:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0106e40:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0106e44:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0106e47:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0106e4a:	ee                   	out    %al,(%dx)
f0106e4b:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0106e52:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0106e56:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0106e59:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0106e5c:	ee                   	out    %al,(%dx)
f0106e5d:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0106e64:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0106e68:	8a 45 b7             	mov    -0x49(%ebp),%al
f0106e6b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0106e6e:	ee                   	out    %al,(%dx)
f0106e6f:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0106e76:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0106e7a:	8a 45 b8             	mov    -0x48(%ebp),%al
f0106e7d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0106e80:	ee                   	out    %al,(%dx)
f0106e81:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0106e88:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0106e8c:	8a 45 b9             	mov    -0x47(%ebp),%al
f0106e8f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0106e92:	ee                   	out    %al,(%dx)
f0106e93:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0106e9a:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0106e9e:	8a 45 ba             	mov    -0x46(%ebp),%al
f0106ea1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0106ea4:	ee                   	out    %al,(%dx)
f0106ea5:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0106eac:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0106eb0:	8a 45 bb             	mov    -0x45(%ebp),%al
f0106eb3:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0106eb6:	ee                   	out    %al,(%dx)
f0106eb7:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0106ebe:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0106ec2:	8a 45 bc             	mov    -0x44(%ebp),%al
f0106ec5:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0106ec8:	ee                   	out    %al,(%dx)
f0106ec9:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0106ed0:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0106ed4:	8a 45 bd             	mov    -0x43(%ebp),%al
f0106ed7:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0106eda:	ee                   	out    %al,(%dx)
f0106edb:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0106ee2:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0106ee6:	8a 45 be             	mov    -0x42(%ebp),%al
f0106ee9:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0106eec:	ee                   	out    %al,(%dx)
f0106eed:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0106ef4:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0106ef8:	8a 45 bf             	mov    -0x41(%ebp),%al
f0106efb:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0106efe:	ee                   	out    %al,(%dx)
	outb(PIC1_CMD, 0x0a);             /* read IRR by default */

	outb(PIC2_CMD, 0x68);               /* OCW3 */
	outb(PIC2_CMD, 0x0a);               /* OCW3 */

	if (irq_init_mask_8259A != 0xFFFF)
f0106eff:	66 a1 58 d9 17 f0    	mov    0xf017d958,%ax
f0106f05:	66 83 f8 ff          	cmp    $0xffff,%ax
f0106f09:	74 15                	je     f0106f20 <pic_init+0x12d>
		irq_setmask_8259A(irq_init_mask_8259A);
f0106f0b:	66 a1 58 d9 17 f0    	mov    0xf017d958,%ax
f0106f11:	0f b7 c0             	movzwl %ax,%eax
f0106f14:	83 ec 0c             	sub    $0xc,%esp
f0106f17:	50                   	push   %eax
f0106f18:	e8 06 00 00 00       	call   f0106f23 <irq_setmask_8259A>
f0106f1d:	83 c4 10             	add    $0x10,%esp
}
f0106f20:	90                   	nop
f0106f21:	c9                   	leave  
f0106f22:	c3                   	ret    

f0106f23 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0106f23:	55                   	push   %ebp
f0106f24:	89 e5                	mov    %esp,%ebp
f0106f26:	83 ec 14             	sub    $0x14,%esp
f0106f29:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f2c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	 * We then use the new functions irq_set_mask() and irq_clear_mask()
	 * to manipulate a specific IRQ mask
	 */
	//irq_init_mask_8259A = mask;

	if (!didinit)
f0106f30:	a1 ac e3 59 f0       	mov    0xf059e3ac,%eax
f0106f35:	85 c0                	test   %eax,%eax
f0106f37:	74 34                	je     f0106f6d <irq_setmask_8259A+0x4a>
		return;

	outb(PIC1_DATA, (char)mask);
f0106f39:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f3c:	0f b6 c0             	movzbl %al,%eax
f0106f3f:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0106f46:	88 45 f6             	mov    %al,-0xa(%ebp)
f0106f49:	8a 45 f6             	mov    -0xa(%ebp),%al
f0106f4c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106f4f:	ee                   	out    %al,(%dx)
	outb(PIC2_DATA, (char)(mask >> 8));
f0106f50:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f53:	66 c1 e8 08          	shr    $0x8,%ax
f0106f57:	0f b6 c0             	movzbl %al,%eax
f0106f5a:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0106f61:	88 45 f7             	mov    %al,-0x9(%ebp)
f0106f64:	8a 45 f7             	mov    -0x9(%ebp),%al
f0106f67:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106f6a:	ee                   	out    %al,(%dx)
f0106f6b:	eb 01                	jmp    f0106f6e <irq_setmask_8259A+0x4b>
	 * to manipulate a specific IRQ mask
	 */
	//irq_init_mask_8259A = mask;

	if (!didinit)
		return;
f0106f6d:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (int i = 0; i < 16; i++)
	//if (~mask & (1<<i))
	//cprintf(" %d", i);
	//cprintf("\n");
}
f0106f6e:	c9                   	leave  
f0106f6f:	c3                   	ret    

f0106f70 <irq_set_mask>:

/*Ref: OSDev Wiki*/
void irq_set_mask(uint8 IRQline)
{
f0106f70:	55                   	push   %ebp
f0106f71:	89 e5                	mov    %esp,%ebp
f0106f73:	53                   	push   %ebx
f0106f74:	83 ec 14             	sub    $0x14,%esp
f0106f77:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f7a:	88 45 e8             	mov    %al,-0x18(%ebp)
	if (!didinit)
f0106f7d:	a1 ac e3 59 f0       	mov    0xf059e3ac,%eax
f0106f82:	85 c0                	test   %eax,%eax
f0106f84:	74 58                	je     f0106fde <irq_set_mask+0x6e>
		return;

	uint16 port;
	uint8 value;

	if(IRQline < 8) {
f0106f86:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
f0106f8a:	77 08                	ja     f0106f94 <irq_set_mask+0x24>
		port = PIC1_DATA;
f0106f8c:	66 c7 45 fa 21 00    	movw   $0x21,-0x6(%ebp)
f0106f92:	eb 0a                	jmp    f0106f9e <irq_set_mask+0x2e>
	} else {
		port = PIC2_DATA;
f0106f94:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
		IRQline -= 8;
f0106f9a:	80 6d e8 08          	subb   $0x8,-0x18(%ebp)
	}
	value = inb(port) | (1 << IRQline);
f0106f9e:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
f0106fa2:	89 45 f4             	mov    %eax,-0xc(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106fa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106fa8:	89 c2                	mov    %eax,%edx
f0106faa:	ec                   	in     (%dx),%al
f0106fab:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0106fae:	8a 45 ee             	mov    -0x12(%ebp),%al
f0106fb1:	88 c2                	mov    %al,%dl
f0106fb3:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
f0106fb7:	bb 01 00 00 00       	mov    $0x1,%ebx
f0106fbc:	88 c1                	mov    %al,%cl
f0106fbe:	d3 e3                	shl    %cl,%ebx
f0106fc0:	89 d8                	mov    %ebx,%eax
f0106fc2:	09 d0                	or     %edx,%eax
f0106fc4:	88 45 f9             	mov    %al,-0x7(%ebp)
	outb(port, value);
f0106fc7:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
f0106fcb:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
f0106fcf:	89 55 f0             	mov    %edx,-0x10(%ebp)
f0106fd2:	88 45 ef             	mov    %al,-0x11(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0106fd5:	8a 45 ef             	mov    -0x11(%ebp),%al
f0106fd8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106fdb:	ee                   	out    %al,(%dx)
f0106fdc:	eb 01                	jmp    f0106fdf <irq_set_mask+0x6f>

/*Ref: OSDev Wiki*/
void irq_set_mask(uint8 IRQline)
{
	if (!didinit)
		return;
f0106fde:	90                   	nop
		port = PIC2_DATA;
		IRQline -= 8;
	}
	value = inb(port) | (1 << IRQline);
	outb(port, value);
}
f0106fdf:	83 c4 14             	add    $0x14,%esp
f0106fe2:	5b                   	pop    %ebx
f0106fe3:	5d                   	pop    %ebp
f0106fe4:	c3                   	ret    

f0106fe5 <irq_clear_mask>:

/*Ref: OSDev Wiki*/
void irq_clear_mask(uint8 IRQline)
{
f0106fe5:	55                   	push   %ebp
f0106fe6:	89 e5                	mov    %esp,%ebp
f0106fe8:	53                   	push   %ebx
f0106fe9:	83 ec 14             	sub    $0x14,%esp
f0106fec:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fef:	88 45 e8             	mov    %al,-0x18(%ebp)
	if (!didinit)
f0106ff2:	a1 ac e3 59 f0       	mov    0xf059e3ac,%eax
f0106ff7:	85 c0                	test   %eax,%eax
f0106ff9:	74 5a                	je     f0107055 <irq_clear_mask+0x70>
		return;

	uint16 port;
	uint8 value;

	if(IRQline < 8) {
f0106ffb:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
f0106fff:	77 08                	ja     f0107009 <irq_clear_mask+0x24>
		port = PIC1_DATA;
f0107001:	66 c7 45 fa 21 00    	movw   $0x21,-0x6(%ebp)
f0107007:	eb 0a                	jmp    f0107013 <irq_clear_mask+0x2e>
	} else {
		port = PIC2_DATA;
f0107009:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
		IRQline -= 8;
f010700f:	80 6d e8 08          	subb   $0x8,-0x18(%ebp)
	}
	value = inb(port) & ~(1 << IRQline);
f0107013:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
f0107017:	89 45 f4             	mov    %eax,-0xc(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010701a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010701d:	89 c2                	mov    %eax,%edx
f010701f:	ec                   	in     (%dx),%al
f0107020:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0107023:	8a 45 ee             	mov    -0x12(%ebp),%al
f0107026:	88 c2                	mov    %al,%dl
f0107028:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
f010702c:	bb 01 00 00 00       	mov    $0x1,%ebx
f0107031:	88 c1                	mov    %al,%cl
f0107033:	d3 e3                	shl    %cl,%ebx
f0107035:	89 d8                	mov    %ebx,%eax
f0107037:	f7 d0                	not    %eax
f0107039:	21 d0                	and    %edx,%eax
f010703b:	88 45 f9             	mov    %al,-0x7(%ebp)
	outb(port, value);
f010703e:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
f0107042:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
f0107046:	89 55 f0             	mov    %edx,-0x10(%ebp)
f0107049:	88 45 ef             	mov    %al,-0x11(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010704c:	8a 45 ef             	mov    -0x11(%ebp),%al
f010704f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107052:	ee                   	out    %al,(%dx)
f0107053:	eb 01                	jmp    f0107056 <irq_clear_mask+0x71>

/*Ref: OSDev Wiki*/
void irq_clear_mask(uint8 IRQline)
{
	if (!didinit)
		return;
f0107055:	90                   	nop
		port = PIC2_DATA;
		IRQline -= 8;
	}
	value = inb(port) & ~(1 << IRQline);
	outb(port, value);
}
f0107056:	83 c4 14             	add    $0x14,%esp
f0107059:	5b                   	pop    %ebx
f010705a:	5d                   	pop    %ebp
f010705b:	c3                   	ret    

f010705c <irq_get_mask>:


int irq_get_mask(uint8 IRQline)
{
f010705c:	55                   	push   %ebp
f010705d:	89 e5                	mov    %esp,%ebp
f010705f:	53                   	push   %ebx
f0107060:	83 ec 14             	sub    $0x14,%esp
f0107063:	8b 45 08             	mov    0x8(%ebp),%eax
f0107066:	88 45 e8             	mov    %al,-0x18(%ebp)
	if (!didinit)
f0107069:	a1 ac e3 59 f0       	mov    0xf059e3ac,%eax
f010706e:	85 c0                	test   %eax,%eax
f0107070:	75 07                	jne    f0107079 <irq_get_mask+0x1d>
		return -1;
f0107072:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0107077:	eb 45                	jmp    f01070be <irq_get_mask+0x62>

	uint16 port;
	uint8 value;

	if(IRQline < 8) {
f0107079:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
f010707d:	77 08                	ja     f0107087 <irq_get_mask+0x2b>
		port = PIC1_DATA;
f010707f:	66 c7 45 fa 21 00    	movw   $0x21,-0x6(%ebp)
f0107085:	eb 0a                	jmp    f0107091 <irq_get_mask+0x35>
	} else {
		port = PIC2_DATA;
f0107087:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
		IRQline -= 8;
f010708d:	80 6d e8 08          	subb   $0x8,-0x18(%ebp)
	}
	value = inb(port) & (1 << IRQline);
f0107091:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
f0107095:	89 45 f4             	mov    %eax,-0xc(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0107098:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010709b:	89 c2                	mov    %eax,%edx
f010709d:	ec                   	in     (%dx),%al
f010709e:	88 45 f3             	mov    %al,-0xd(%ebp)
	return data;
f01070a1:	8a 45 f3             	mov    -0xd(%ebp),%al
f01070a4:	88 c2                	mov    %al,%dl
f01070a6:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
f01070aa:	bb 01 00 00 00       	mov    $0x1,%ebx
f01070af:	88 c1                	mov    %al,%cl
f01070b1:	d3 e3                	shl    %cl,%ebx
f01070b3:	89 d8                	mov    %ebx,%eax
f01070b5:	21 d0                	and    %edx,%eax
f01070b7:	88 45 f9             	mov    %al,-0x7(%ebp)
	return value;
f01070ba:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
}
f01070be:	83 c4 14             	add    $0x14,%esp
f01070c1:	5b                   	pop    %ebx
f01070c2:	5d                   	pop    %ebp
f01070c3:	c3                   	ret    

f01070c4 <pic_sendEOI>:
 * If the IRQ came from the Master PIC, it is sufficient to issue this command only to the
 * Master PIC; however if the IRQ came from the Slave PIC, it is necessary to issue the command
 * to both PIC chips.
 */
void pic_sendEOI(uint8 irq)
{
f01070c4:	55                   	push   %ebp
f01070c5:	89 e5                	mov    %esp,%ebp
f01070c7:	83 ec 14             	sub    $0x14,%esp
f01070ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01070cd:	88 45 ec             	mov    %al,-0x14(%ebp)
	if(irq >= 8)
f01070d0:	80 7d ec 07          	cmpb   $0x7,-0x14(%ebp)
f01070d4:	76 12                	jbe    f01070e8 <pic_sendEOI+0x24>
f01070d6:	c7 45 f8 a0 00 00 00 	movl   $0xa0,-0x8(%ebp)
f01070dd:	c6 45 f7 20          	movb   $0x20,-0x9(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01070e1:	8a 45 f7             	mov    -0x9(%ebp),%al
f01070e4:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01070e7:	ee                   	out    %al,(%dx)
f01070e8:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%ebp)
f01070ef:	c6 45 f6 20          	movb   $0x20,-0xa(%ebp)
f01070f3:	8a 45 f6             	mov    -0xa(%ebp),%al
f01070f6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01070f9:	ee                   	out    %al,(%dx)
		outb(PIC2_CMD,PIC_EOI);

	outb(PIC1_CMD,PIC_EOI);
}
f01070fa:	90                   	nop
f01070fb:	c9                   	leave  
f01070fc:	c3                   	ret    

f01070fd <mycpu>:
extern void idt_init(void);

// Must be called with interrupts disabled to avoid the caller being
// rescheduled between reading lapicid and running through the loop.
struct cpu* mycpu()
{
f01070fd:	55                   	push   %ebp
f01070fe:	89 e5                	mov    %esp,%ebp
	return &CPUS[0]; //main CPU
f0107100:	b8 a0 15 5a f0       	mov    $0xf05a15a0,%eax
//  for (i = 0; i < ncpu; ++i) {
//    if (cpus[i].apicid == apicid)
//      return &cpus[i];
//  }
//  panic("unknown apicid\n");
}
f0107105:	5d                   	pop    %ebp
f0107106:	c3                   	ret    

f0107107 <cpu_init>:

// Common CPU setup code.
void cpu_init(int cpuIndx)
{
f0107107:	55                   	push   %ebp
f0107108:	89 e5                	mov    %esp,%ebp
f010710a:	83 ec 28             	sub    $0x28,%esp
  struct cpu* c = mycpu();
f010710d:	e8 eb ff ff ff       	call   f01070fd <mycpu>
f0107112:	89 45 f4             	mov    %eax,-0xc(%ebp)
  c->proc = NULL;
f0107115:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107118:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f010711f:	00 00 00 
  c->ncli = 0;
f0107122:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107125:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f010712c:	00 00 00 

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f010712f:	9c                   	pushf  
f0107130:	58                   	pop    %eax
f0107131:	89 45 f0             	mov    %eax,-0x10(%ebp)
        return eflags;
f0107134:	8b 45 f0             	mov    -0x10(%ebp),%eax
  c->intena = read_eflags() & FL_IF ? 1 : 0;
f0107137:	25 00 02 00 00       	and    $0x200,%eax
f010713c:	85 c0                	test   %eax,%eax
f010713e:	0f 95 c0             	setne  %al
f0107141:	0f b6 d0             	movzbl %al,%edx
f0107144:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107147:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
  //c->apicid = ?? ;

  //Initialize the CPU Context to NULL.
  //to be set later to the correct position on the stack during the
  //first switch from scheduler to the first process
  c->scheduler = NULL ;
f010714d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107150:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  c->scheduler_status = SCH_UNINITIALIZED;
f0107157:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010715a:	c7 80 b4 00 00 00 ff 	movl   $0xffffffff,0xb4(%eax)
f0107161:	ff ff ff 

  //Initialize its sched stack
  c->stack = (char*)(KERN_STACK_TOP - (cpuIndx+1)*KERNEL_STACK_SIZE);
f0107164:	8b 45 08             	mov    0x8(%ebp),%eax
f0107167:	40                   	inc    %eax
f0107168:	c1 e0 0f             	shl    $0xf,%eax
f010716b:	ba 00 00 c0 ef       	mov    $0xefc00000,%edx
f0107170:	29 c2                	sub    %eax,%edx
f0107172:	89 d0                	mov    %edx,%eax
f0107174:	89 c2                	mov    %eax,%edx
f0107176:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107179:	89 50 08             	mov    %edx,0x8(%eax)

  //initialize GDT & set it to this CPU
  seg_init();
f010717c:	e8 18 01 00 00       	call   f0107299 <seg_init>

  //initialize IDT
  idt_init();       // load idt register
f0107181:	e8 49 50 00 00       	call   f010c1cf <idt_init>

  //Initialize the TaskState to ZERO.
  //to be initialized later in init.c
  memset(&(c->ts), 0, sizeof(c->ts)) ;
f0107186:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107189:	83 c0 0c             	add    $0xc,%eax
f010718c:	83 ec 04             	sub    $0x4,%esp
f010718f:	6a 68                	push   $0x68
f0107191:	6a 00                	push   $0x0
f0107193:	50                   	push   %eax
f0107194:	e8 8d b4 01 00       	call   f0122626 <memset>
f0107199:	83 c4 10             	add    $0x10,%esp

  //Indicate it's started
  xchg(&(c->started), 1); // tell startothers() we're up
f010719c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010719f:	05 a4 00 00 00       	add    $0xa4,%eax
f01071a4:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01071a7:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
xchg(volatile uint32 *addr, uint32 newval)
{
  uint32 result;

  // The + in "+m" denotes a read-modify-write operand.
  __asm __volatile("lock; xchgl %0, %1" :
f01071ae:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01071b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01071b4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01071b7:	f0 87 02             	lock xchg %eax,(%edx)
f01071ba:	89 45 e4             	mov    %eax,-0x1c(%ebp)

  //scheduler();     // start running processes
}
f01071bd:	90                   	nop
f01071be:	c9                   	leave  
f01071bf:	c3                   	ret    

f01071c0 <pushcli>:
// Pushcli/popcli are like cli/sti except that they are matched:
// it takes two popcli to undo two pushcli.  Also, if interrupts
// are off, then pushcli, popcli leaves them off.

void pushcli(void)
{
f01071c0:	55                   	push   %ebp
f01071c1:	89 e5                	mov    %esp,%ebp
f01071c3:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f01071c6:	9c                   	pushf  
f01071c7:	58                   	pop    %eax
f01071c8:	89 45 f8             	mov    %eax,-0x8(%ebp)
        return eflags;
f01071cb:	8b 45 f8             	mov    -0x8(%ebp),%eax
  int eflags = read_eflags();
f01071ce:	89 45 fc             	mov    %eax,-0x4(%ebp)
 */
//clear interrupt flag
static __inline void
cli(void)
{
	__asm __volatile("cli");
f01071d1:	fa                   	cli    
  cli();
  struct cpu* c = mycpu();
f01071d2:	e8 26 ff ff ff       	call   f01070fd <mycpu>
f01071d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(c->ncli == 0)
f01071da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01071dd:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01071e3:	85 c0                	test   %eax,%eax
f01071e5:	75 13                	jne    f01071fa <pushcli+0x3a>
    c->intena = eflags & FL_IF;
f01071e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01071ea:	25 00 02 00 00       	and    $0x200,%eax
f01071ef:	89 c2                	mov    %eax,%edx
f01071f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01071f4:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
  c->ncli += 1;
f01071fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01071fd:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0107203:	8d 50 01             	lea    0x1(%eax),%edx
f0107206:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107209:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
}
f010720f:	90                   	nop
f0107210:	c9                   	leave  
f0107211:	c3                   	ret    

f0107212 <popcli>:

void popcli(void)
{
f0107212:	55                   	push   %ebp
f0107213:	89 e5                	mov    %esp,%ebp
f0107215:	83 ec 18             	sub    $0x18,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f0107218:	9c                   	pushf  
f0107219:	58                   	pop    %eax
f010721a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        return eflags;
f010721d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  if(read_eflags()&FL_IF)
f0107220:	25 00 02 00 00       	and    $0x200,%eax
f0107225:	85 c0                	test   %eax,%eax
f0107227:	74 14                	je     f010723d <popcli+0x2b>
    panic("popcli - interruptible");
f0107229:	83 ec 04             	sub    $0x4,%esp
f010722c:	68 cd 69 12 f0       	push   $0xf01269cd
f0107231:	6a 5e                	push   $0x5e
f0107233:	68 e4 69 12 f0       	push   $0xf01269e4
f0107238:	e8 dd 90 ff ff       	call   f010031a <_panic>
  struct cpu* c = mycpu();
f010723d:	e8 bb fe ff ff       	call   f01070fd <mycpu>
f0107242:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(--c->ncli < 0)
f0107245:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107248:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f010724e:	8d 50 ff             	lea    -0x1(%eax),%edx
f0107251:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107254:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
f010725a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010725d:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0107263:	85 c0                	test   %eax,%eax
f0107265:	79 14                	jns    f010727b <popcli+0x69>
    panic("popcli");
f0107267:	83 ec 04             	sub    $0x4,%esp
f010726a:	68 f3 69 12 f0       	push   $0xf01269f3
f010726f:	6a 61                	push   $0x61
f0107271:	68 e4 69 12 f0       	push   $0xf01269e4
f0107276:	e8 9f 90 ff ff       	call   f010031a <_panic>
  if(c->ncli == 0 && c->intena)
f010727b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010727e:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0107284:	85 c0                	test   %eax,%eax
f0107286:	75 0e                	jne    f0107296 <popcli+0x84>
f0107288:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010728b:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
f0107291:	85 c0                	test   %eax,%eax
f0107293:	74 01                	je     f0107296 <popcli+0x84>

//set interrupt flag
static __inline void
sti(void)
{
	__asm __volatile("sti");
f0107295:	fb                   	sti    
    sti();
}
f0107296:	90                   	nop
f0107297:	c9                   	leave  
f0107298:	c3                   	ret    

f0107299 <seg_init>:

// Set up CPU's kernel segment descriptors.
// Run once on entry on each CPU.
void
seg_init(void)
{
f0107299:	55                   	push   %ebp
f010729a:	89 e5                	mov    %esp,%ebp
f010729c:	83 ec 18             	sub    $0x18,%esp
	// The kernel and user segments are identical(except for the DPL).
	// To load the SS register, the CPL must equal the DPL.  Thus,
	// we must duplicate the segments for the user and the kernel.
	//

	pushcli();	//disable interrupt
f010729f:	e8 1c ff ff ff       	call   f01071c0 <pushcli>

	c = mycpu();
f01072a4:	e8 54 fe ff ff       	call   f01070fd <mycpu>
f01072a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// 0x0 - unused (always faults -- for trapping NULL far pointers)
	c->gdt[0] = SEG_NULL;
f01072ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072af:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
f01072b6:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%eax)

	// 0x8 - kernel code segment
	c->gdt[GD_KT >> 3] = SEG(STA_X | STA_R, 0x0, 0xffffffff, 0);
f01072bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072c0:	66 c7 40 7c ff ff    	movw   $0xffff,0x7c(%eax)
f01072c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072c9:	66 c7 40 7e 00 00    	movw   $0x0,0x7e(%eax)
f01072cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072d2:	c6 80 80 00 00 00 00 	movb   $0x0,0x80(%eax)
f01072d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072dc:	8a 90 81 00 00 00    	mov    0x81(%eax),%dl
f01072e2:	83 e2 f0             	and    $0xfffffff0,%edx
f01072e5:	83 ca 0a             	or     $0xa,%edx
f01072e8:	88 90 81 00 00 00    	mov    %dl,0x81(%eax)
f01072ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072f1:	8a 90 81 00 00 00    	mov    0x81(%eax),%dl
f01072f7:	83 ca 10             	or     $0x10,%edx
f01072fa:	88 90 81 00 00 00    	mov    %dl,0x81(%eax)
f0107300:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107303:	8a 90 81 00 00 00    	mov    0x81(%eax),%dl
f0107309:	83 e2 9f             	and    $0xffffff9f,%edx
f010730c:	88 90 81 00 00 00    	mov    %dl,0x81(%eax)
f0107312:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107315:	8a 90 81 00 00 00    	mov    0x81(%eax),%dl
f010731b:	83 ca 80             	or     $0xffffff80,%edx
f010731e:	88 90 81 00 00 00    	mov    %dl,0x81(%eax)
f0107324:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107327:	8a 90 82 00 00 00    	mov    0x82(%eax),%dl
f010732d:	83 ca 0f             	or     $0xf,%edx
f0107330:	88 90 82 00 00 00    	mov    %dl,0x82(%eax)
f0107336:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107339:	8a 90 82 00 00 00    	mov    0x82(%eax),%dl
f010733f:	83 e2 ef             	and    $0xffffffef,%edx
f0107342:	88 90 82 00 00 00    	mov    %dl,0x82(%eax)
f0107348:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010734b:	8a 90 82 00 00 00    	mov    0x82(%eax),%dl
f0107351:	83 e2 df             	and    $0xffffffdf,%edx
f0107354:	88 90 82 00 00 00    	mov    %dl,0x82(%eax)
f010735a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010735d:	8a 90 82 00 00 00    	mov    0x82(%eax),%dl
f0107363:	83 ca 40             	or     $0x40,%edx
f0107366:	88 90 82 00 00 00    	mov    %dl,0x82(%eax)
f010736c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010736f:	8a 90 82 00 00 00    	mov    0x82(%eax),%dl
f0107375:	83 ca 80             	or     $0xffffff80,%edx
f0107378:	88 90 82 00 00 00    	mov    %dl,0x82(%eax)
f010737e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107381:	c6 80 83 00 00 00 00 	movb   $0x0,0x83(%eax)

	// 0x10 - kernel data segment
	c->gdt[GD_KD >> 3] = SEG(STA_W, 0x0, 0xffffffff, 0);
f0107388:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010738b:	66 c7 80 84 00 00 00 	movw   $0xffff,0x84(%eax)
f0107392:	ff ff 
f0107394:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107397:	66 c7 80 86 00 00 00 	movw   $0x0,0x86(%eax)
f010739e:	00 00 
f01073a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01073a3:	c6 80 88 00 00 00 00 	movb   $0x0,0x88(%eax)
f01073aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01073ad:	8a 90 89 00 00 00    	mov    0x89(%eax),%dl
f01073b3:	83 e2 f0             	and    $0xfffffff0,%edx
f01073b6:	83 ca 02             	or     $0x2,%edx
f01073b9:	88 90 89 00 00 00    	mov    %dl,0x89(%eax)
f01073bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01073c2:	8a 90 89 00 00 00    	mov    0x89(%eax),%dl
f01073c8:	83 ca 10             	or     $0x10,%edx
f01073cb:	88 90 89 00 00 00    	mov    %dl,0x89(%eax)
f01073d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01073d4:	8a 90 89 00 00 00    	mov    0x89(%eax),%dl
f01073da:	83 e2 9f             	and    $0xffffff9f,%edx
f01073dd:	88 90 89 00 00 00    	mov    %dl,0x89(%eax)
f01073e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01073e6:	8a 90 89 00 00 00    	mov    0x89(%eax),%dl
f01073ec:	83 ca 80             	or     $0xffffff80,%edx
f01073ef:	88 90 89 00 00 00    	mov    %dl,0x89(%eax)
f01073f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01073f8:	8a 90 8a 00 00 00    	mov    0x8a(%eax),%dl
f01073fe:	83 ca 0f             	or     $0xf,%edx
f0107401:	88 90 8a 00 00 00    	mov    %dl,0x8a(%eax)
f0107407:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010740a:	8a 90 8a 00 00 00    	mov    0x8a(%eax),%dl
f0107410:	83 e2 ef             	and    $0xffffffef,%edx
f0107413:	88 90 8a 00 00 00    	mov    %dl,0x8a(%eax)
f0107419:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010741c:	8a 90 8a 00 00 00    	mov    0x8a(%eax),%dl
f0107422:	83 e2 df             	and    $0xffffffdf,%edx
f0107425:	88 90 8a 00 00 00    	mov    %dl,0x8a(%eax)
f010742b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010742e:	8a 90 8a 00 00 00    	mov    0x8a(%eax),%dl
f0107434:	83 ca 40             	or     $0x40,%edx
f0107437:	88 90 8a 00 00 00    	mov    %dl,0x8a(%eax)
f010743d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107440:	8a 90 8a 00 00 00    	mov    0x8a(%eax),%dl
f0107446:	83 ca 80             	or     $0xffffff80,%edx
f0107449:	88 90 8a 00 00 00    	mov    %dl,0x8a(%eax)
f010744f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107452:	c6 80 8b 00 00 00 00 	movb   $0x0,0x8b(%eax)

	// 0x18 - user code segment
	c->gdt[GD_UT >> 3] = SEG(STA_X | STA_R, 0x0, 0xffffffff, 3);
f0107459:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010745c:	66 c7 80 8c 00 00 00 	movw   $0xffff,0x8c(%eax)
f0107463:	ff ff 
f0107465:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107468:	66 c7 80 8e 00 00 00 	movw   $0x0,0x8e(%eax)
f010746f:	00 00 
f0107471:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107474:	c6 80 90 00 00 00 00 	movb   $0x0,0x90(%eax)
f010747b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010747e:	8a 90 91 00 00 00    	mov    0x91(%eax),%dl
f0107484:	83 e2 f0             	and    $0xfffffff0,%edx
f0107487:	83 ca 0a             	or     $0xa,%edx
f010748a:	88 90 91 00 00 00    	mov    %dl,0x91(%eax)
f0107490:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107493:	8a 90 91 00 00 00    	mov    0x91(%eax),%dl
f0107499:	83 ca 10             	or     $0x10,%edx
f010749c:	88 90 91 00 00 00    	mov    %dl,0x91(%eax)
f01074a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074a5:	8a 90 91 00 00 00    	mov    0x91(%eax),%dl
f01074ab:	83 ca 60             	or     $0x60,%edx
f01074ae:	88 90 91 00 00 00    	mov    %dl,0x91(%eax)
f01074b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074b7:	8a 90 91 00 00 00    	mov    0x91(%eax),%dl
f01074bd:	83 ca 80             	or     $0xffffff80,%edx
f01074c0:	88 90 91 00 00 00    	mov    %dl,0x91(%eax)
f01074c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074c9:	8a 90 92 00 00 00    	mov    0x92(%eax),%dl
f01074cf:	83 ca 0f             	or     $0xf,%edx
f01074d2:	88 90 92 00 00 00    	mov    %dl,0x92(%eax)
f01074d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074db:	8a 90 92 00 00 00    	mov    0x92(%eax),%dl
f01074e1:	83 e2 ef             	and    $0xffffffef,%edx
f01074e4:	88 90 92 00 00 00    	mov    %dl,0x92(%eax)
f01074ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074ed:	8a 90 92 00 00 00    	mov    0x92(%eax),%dl
f01074f3:	83 e2 df             	and    $0xffffffdf,%edx
f01074f6:	88 90 92 00 00 00    	mov    %dl,0x92(%eax)
f01074fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074ff:	8a 90 92 00 00 00    	mov    0x92(%eax),%dl
f0107505:	83 ca 40             	or     $0x40,%edx
f0107508:	88 90 92 00 00 00    	mov    %dl,0x92(%eax)
f010750e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107511:	8a 90 92 00 00 00    	mov    0x92(%eax),%dl
f0107517:	83 ca 80             	or     $0xffffff80,%edx
f010751a:	88 90 92 00 00 00    	mov    %dl,0x92(%eax)
f0107520:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107523:	c6 80 93 00 00 00 00 	movb   $0x0,0x93(%eax)

	// 0x20 - user data segment
	c->gdt[GD_UD >> 3] = SEG(STA_W, 0x0, 0xffffffff, 3);
f010752a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010752d:	66 c7 80 94 00 00 00 	movw   $0xffff,0x94(%eax)
f0107534:	ff ff 
f0107536:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107539:	66 c7 80 96 00 00 00 	movw   $0x0,0x96(%eax)
f0107540:	00 00 
f0107542:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107545:	c6 80 98 00 00 00 00 	movb   $0x0,0x98(%eax)
f010754c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010754f:	8a 90 99 00 00 00    	mov    0x99(%eax),%dl
f0107555:	83 e2 f0             	and    $0xfffffff0,%edx
f0107558:	83 ca 02             	or     $0x2,%edx
f010755b:	88 90 99 00 00 00    	mov    %dl,0x99(%eax)
f0107561:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107564:	8a 90 99 00 00 00    	mov    0x99(%eax),%dl
f010756a:	83 ca 10             	or     $0x10,%edx
f010756d:	88 90 99 00 00 00    	mov    %dl,0x99(%eax)
f0107573:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107576:	8a 90 99 00 00 00    	mov    0x99(%eax),%dl
f010757c:	83 ca 60             	or     $0x60,%edx
f010757f:	88 90 99 00 00 00    	mov    %dl,0x99(%eax)
f0107585:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107588:	8a 90 99 00 00 00    	mov    0x99(%eax),%dl
f010758e:	83 ca 80             	or     $0xffffff80,%edx
f0107591:	88 90 99 00 00 00    	mov    %dl,0x99(%eax)
f0107597:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010759a:	8a 90 9a 00 00 00    	mov    0x9a(%eax),%dl
f01075a0:	83 ca 0f             	or     $0xf,%edx
f01075a3:	88 90 9a 00 00 00    	mov    %dl,0x9a(%eax)
f01075a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075ac:	8a 90 9a 00 00 00    	mov    0x9a(%eax),%dl
f01075b2:	83 e2 ef             	and    $0xffffffef,%edx
f01075b5:	88 90 9a 00 00 00    	mov    %dl,0x9a(%eax)
f01075bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075be:	8a 90 9a 00 00 00    	mov    0x9a(%eax),%dl
f01075c4:	83 e2 df             	and    $0xffffffdf,%edx
f01075c7:	88 90 9a 00 00 00    	mov    %dl,0x9a(%eax)
f01075cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075d0:	8a 90 9a 00 00 00    	mov    0x9a(%eax),%dl
f01075d6:	83 ca 40             	or     $0x40,%edx
f01075d9:	88 90 9a 00 00 00    	mov    %dl,0x9a(%eax)
f01075df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075e2:	8a 90 9a 00 00 00    	mov    0x9a(%eax),%dl
f01075e8:	83 ca 80             	or     $0xffffff80,%edx
f01075eb:	88 90 9a 00 00 00    	mov    %dl,0x9a(%eax)
f01075f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075f4:	c6 80 9b 00 00 00 00 	movb   $0x0,0x9b(%eax)

	// 0x28 - tss, initialized in idt_init()
	c->gdt[GD_TSS >> 3] = SEG_NULL;
f01075fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075fe:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%eax)
f0107605:	00 00 00 
f0107608:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
f010760f:	00 00 00 

	popcli();	//enable interrupt
f0107612:	e8 fb fb ff ff       	call   f0107212 <popcli>


}
f0107617:	90                   	nop
f0107618:	c9                   	leave  
f0107619:	c3                   	ret    

f010761a <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f010761a:	55                   	push   %ebp
f010761b:	89 e5                	mov    %esp,%ebp
f010761d:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0107620:	83 ec 08             	sub    $0x8,%esp
f0107623:	68 00 10 00 00       	push   $0x1000
f0107628:	68 00 10 00 00       	push   $0x1000
f010762d:	e8 35 02 00 00       	call   f0107867 <boot_allocate_space>
f0107632:	83 c4 10             	add    $0x10,%esp
f0107635:	a3 7c 1a 5a f0       	mov    %eax,0xf05a1a7c
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(ptr_page_directory, 0, PAGE_SIZE);
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f010763a:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f010763f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107642:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0107649:	77 14                	ja     f010765f <initialize_kernel_VM+0x45>
f010764b:	ff 75 e0             	pushl  -0x20(%ebp)
f010764e:	68 fc 69 12 f0       	push   $0xf01269fc
f0107653:	6a 57                	push   $0x57
f0107655:	68 30 6a 12 f0       	push   $0xf0126a30
f010765a:	e8 bb 8c ff ff       	call   f010031a <_panic>
f010765f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107662:	05 00 00 00 10       	add    $0x10000000,%eax
f0107667:	a3 84 1b 5a f0       	mov    %eax,0xf05a1b84
	// Your code goes here:

	//Ensure that the total size of SCHED Kernel Stack for ALL CPUs is less than PTSIZE (specified area for them)
	assert(NCPUS*KERNEL_STACK_SIZE < PTSIZE);

	boot_map_range(ptr_page_directory, KERN_STACK_TOP - NCPUS*KERNEL_STACK_SIZE, NCPUS*KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f010766c:	c7 45 dc 00 50 17 f0 	movl   $0xf0175000,-0x24(%ebp)
f0107673:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f010767a:	77 14                	ja     f0107690 <initialize_kernel_VM+0x76>
f010767c:	ff 75 dc             	pushl  -0x24(%ebp)
f010767f:	68 fc 69 12 f0       	push   $0xf01269fc
f0107684:	6a 63                	push   $0x63
f0107686:	68 30 6a 12 f0       	push   $0xf0126a30
f010768b:	e8 8a 8c ff ff       	call   f010031a <_panic>
f0107690:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107693:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0107699:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f010769e:	83 ec 0c             	sub    $0xc,%esp
f01076a1:	6a 02                	push   $0x2
f01076a3:	52                   	push   %edx
f01076a4:	68 00 80 00 00       	push   $0x8000
f01076a9:	68 00 80 bf ef       	push   $0xefbf8000
f01076ae:	50                   	push   %eax
f01076af:	e8 27 02 00 00       	call   f01078db <boot_map_range>
f01076b4:	83 c4 20             	add    $0x20,%esp
	//set bottom page of each stack as a GUARD page
	for (int c = 0; c < NCPUS; ++c)
f01076b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01076be:	eb 24                	jmp    f01076e4 <initialize_kernel_VM+0xca>
	{
		pt_set_page_permissions(ptr_page_directory, KERN_STACK_TOP - ((c+1)*KERNEL_STACK_SIZE), 0, PERM_PRESENT);
f01076c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01076c3:	40                   	inc    %eax
f01076c4:	c1 e0 0f             	shl    $0xf,%eax
f01076c7:	ba 00 00 c0 ef       	mov    $0xefc00000,%edx
f01076cc:	29 c2                	sub    %eax,%edx
f01076ce:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f01076d3:	6a 01                	push   $0x1
f01076d5:	6a 00                	push   $0x0
f01076d7:	52                   	push   %edx
f01076d8:	50                   	push   %eax
f01076d9:	e8 4a 14 00 00       	call   f0108b28 <pt_set_page_permissions>
f01076de:	83 c4 10             	add    $0x10,%esp
	//Ensure that the total size of SCHED Kernel Stack for ALL CPUs is less than PTSIZE (specified area for them)
	assert(NCPUS*KERNEL_STACK_SIZE < PTSIZE);

	boot_map_range(ptr_page_directory, KERN_STACK_TOP - NCPUS*KERNEL_STACK_SIZE, NCPUS*KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
	//set bottom page of each stack as a GUARD page
	for (int c = 0; c < NCPUS; ++c)
f01076e1:	ff 45 f4             	incl   -0xc(%ebp)
f01076e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01076e8:	7e d6                	jle    f01076c0 <initialize_kernel_VM+0xa6>
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f01076ea:	c7 45 e8 00 00 00 f0 	movl   $0xf0000000,-0x18(%ebp)
f01076f1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	unsigned int nTables=0;
f01076f8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f01076ff:	eb 25                	jmp    f0107726 <initialize_kernel_VM+0x10c>
	{
		++nTables;
f0107701:	ff 45 e4             	incl   -0x1c(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0107704:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107707:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f010770c:	83 ec 04             	sub    $0x4,%esp
f010770f:	6a 01                	push   $0x1
f0107711:	52                   	push   %edx
f0107712:	50                   	push   %eax
f0107713:	e8 37 02 00 00       	call   f010794f <boot_get_page_table>
f0107718:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f010771b:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0107722:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0107726:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010772a:	72 d5                	jb     f0107701 <initialize_kernel_VM+0xe7>
f010772c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0107730:	77 06                	ja     f0107738 <initialize_kernel_VM+0x11e>
f0107732:	83 7d e8 fe          	cmpl   $0xfffffffe,-0x18(%ebp)
f0107736:	76 c9                	jbe    f0107701 <initialize_kernel_VM+0xe7>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0107738:	8b 15 58 16 5a f0    	mov    0xf05a1658,%edx
f010773e:	89 d0                	mov    %edx,%eax
f0107740:	01 c0                	add    %eax,%eax
f0107742:	01 d0                	add    %edx,%eax
f0107744:	c1 e0 03             	shl    $0x3,%eax
f0107747:	89 45 d8             	mov    %eax,-0x28(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f010774a:	83 ec 08             	sub    $0x8,%esp
f010774d:	68 00 10 00 00       	push   $0x1000
f0107752:	ff 75 d8             	pushl  -0x28(%ebp)
f0107755:	e8 0d 01 00 00       	call   f0107867 <boot_allocate_space>
f010775a:	83 c4 10             	add    $0x10,%esp
f010775d:	a3 c0 18 5a f0       	mov    %eax,0xf05a18c0
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0107762:	c7 45 d4 00 c0 30 00 	movl   $0x30c000,-0x2c(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0107769:	83 ec 08             	sub    $0x8,%esp
f010776c:	68 00 10 00 00       	push   $0x1000
f0107771:	ff 75 d4             	pushl  -0x2c(%ebp)
f0107774:	e8 ee 00 00 00       	call   f0107867 <boot_allocate_space>
f0107779:	83 c4 10             	add    $0x10,%esp
f010777c:	a3 60 ec 59 f0       	mov    %eax,0xf059ec60
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(disk_frames_info , 0, disk_array_size);

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0107781:	e8 32 05 00 00       	call   f0107cb8 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("*	Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0107786:	83 ec 0c             	sub    $0xc,%esp
f0107789:	6a 08                	push   $0x8
f010778b:	e8 00 93 01 00       	call   f0120a90 <nearest_pow2_ceil>
f0107790:	83 c4 10             	add    $0x10,%esp
f0107793:	83 ec 04             	sub    $0x4,%esp
f0107796:	50                   	push   %eax
f0107797:	6a 08                	push   $0x8
f0107799:	68 50 6a 12 f0       	push   $0xf0126a50
f010779e:	e8 c9 97 ff ff       	call   f0100f6c <cprintf>
f01077a3:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f01077a6:	c7 45 d0 60 d3 0e 00 	movl   $0xed360,-0x30(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f01077ad:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01077b0:	83 ec 08             	sub    $0x8,%esp
f01077b3:	68 00 10 00 00       	push   $0x1000
f01077b8:	50                   	push   %eax
f01077b9:	e8 a9 00 00 00       	call   f0107867 <boot_allocate_space>
f01077be:	83 c4 10             	add    $0x10,%esp
f01077c1:	a3 b0 e3 59 f0       	mov    %eax,0xf059e3b0
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(envs , 0, envs_size);

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f01077c6:	a1 b0 e3 59 f0       	mov    0xf059e3b0,%eax
f01077cb:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01077ce:	81 7d cc ff ff ff ef 	cmpl   $0xefffffff,-0x34(%ebp)
f01077d5:	77 17                	ja     f01077ee <initialize_kernel_VM+0x1d4>
f01077d7:	ff 75 cc             	pushl  -0x34(%ebp)
f01077da:	68 fc 69 12 f0       	push   $0xf01269fc
f01077df:	68 b1 00 00 00       	push   $0xb1
f01077e4:	68 30 6a 12 f0       	push   $0xf0126a30
f01077e9:	e8 2c 8b ff ff       	call   f010031a <_panic>
f01077ee:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01077f1:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f01077f7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01077fa:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f01077ff:	83 ec 0c             	sub    $0xc,%esp
f0107802:	6a 04                	push   $0x4
f0107804:	51                   	push   %ecx
f0107805:	52                   	push   %edx
f0107806:	68 00 00 c0 ee       	push   $0xeec00000
f010780b:	50                   	push   %eax
f010780c:	e8 ca 00 00 00       	call   f01078db <boot_map_range>
f0107811:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0107814:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0107819:	05 ec 0e 00 00       	add    $0xeec,%eax
f010781e:	8b 15 7c 1a 5a f0    	mov    0xf05a1a7c,%edx
f0107824:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f010782a:	8b 12                	mov    (%edx),%edx
f010782c:	83 ca 05             	or     $0x5,%edx
f010782f:	89 10                	mov    %edx,(%eax)
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#else
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0107831:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0107836:	83 ec 0c             	sub    $0xc,%esp
f0107839:	6a 02                	push   $0x2
f010783b:	6a 00                	push   $0x0
f010783d:	68 ff ff ff 0f       	push   $0xfffffff
f0107842:	68 00 00 00 f0       	push   $0xf0000000
f0107847:	50                   	push   %eax
f0107848:	e8 8e 00 00 00       	call   f01078db <boot_map_range>
f010784d:	83 c4 20             	add    $0x20,%esp
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0107850:	e8 1d a1 01 00       	call   f0121972 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0107855:	c7 05 80 15 5a f0 19 	movl   $0x19,0xf05a1580
f010785c:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f010785f:	e8 20 03 00 00       	call   f0107b84 <turn_on_paging>
}
f0107864:	90                   	nop
f0107865:	c9                   	leave  
f0107866:	c3                   	ret    

f0107867 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0107867:	55                   	push   %ebp
f0107868:	89 e5                	mov    %esp,%ebp
f010786a:	83 ec 18             	sub    $0x18,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f010786d:	a1 78 1a 5a f0       	mov    0xf05a1a78,%eax
f0107872:	85 c0                	test   %eax,%eax
f0107874:	75 0a                	jne    f0107880 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0107876:	c7 05 78 1a 5a f0 30 	movl   $0xf05c4430,0xf05a1a78
f010787d:	44 5c f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0107880:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107883:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107886:	a1 78 1a 5a f0       	mov    0xf05a1a78,%eax
f010788b:	89 c2                	mov    %eax,%edx
f010788d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107890:	01 d0                	add    %edx,%eax
f0107892:	48                   	dec    %eax
f0107893:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107896:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107899:	ba 00 00 00 00       	mov    $0x0,%edx
f010789e:	f7 75 f4             	divl   -0xc(%ebp)
f01078a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01078a4:	29 d0                	sub    %edx,%eax
f01078a6:	a3 78 1a 5a f0       	mov    %eax,0xf05a1a78

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f01078ab:	a1 78 1a 5a f0       	mov    0xf05a1a78,%eax
f01078b0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f01078b3:	8b 15 78 1a 5a f0    	mov    0xf05a1a78,%edx
f01078b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01078bc:	01 d0                	add    %edx,%eax
f01078be:	a3 78 1a 5a f0       	mov    %eax,0xf05a1a78

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	/*2023*/ /*THIS LINE IS UNCOMMENTED To Ensure that any boot allocations ARE SET TO ZERO
	 * This is mainly to ensure that any restart will be fresh and no grabage data will be exist
	 */
	memset(ptr_allocated_mem, 0, size);
f01078c3:	83 ec 04             	sub    $0x4,%esp
f01078c6:	ff 75 08             	pushl  0x8(%ebp)
f01078c9:	6a 00                	push   $0x0
f01078cb:	ff 75 ec             	pushl  -0x14(%ebp)
f01078ce:	e8 53 ad 01 00       	call   f0122626 <memset>
f01078d3:	83 c4 10             	add    $0x10,%esp

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f01078d6:	8b 45 ec             	mov    -0x14(%ebp),%eax

}
f01078d9:	c9                   	leave  
f01078da:	c3                   	ret    

f01078db <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f01078db:	55                   	push   %ebp
f01078dc:	89 e5                	mov    %esp,%ebp
f01078de:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f01078e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01078e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01078ef:	eb 53                	jmp    f0107944 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f01078f1:	83 ec 04             	sub    $0x4,%esp
f01078f4:	6a 01                	push   $0x1
f01078f6:	ff 75 0c             	pushl  0xc(%ebp)
f01078f9:	ff 75 08             	pushl  0x8(%ebp)
f01078fc:	e8 4e 00 00 00       	call   f010794f <boot_get_page_table>
f0107901:	83 c4 10             	add    $0x10,%esp
f0107904:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0107907:	8b 45 0c             	mov    0xc(%ebp),%eax
f010790a:	c1 e8 0c             	shr    $0xc,%eax
f010790d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0107912:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0107915:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107918:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010791f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107922:	01 c2                	add    %eax,%edx
f0107924:	8b 45 18             	mov    0x18(%ebp),%eax
f0107927:	0b 45 14             	or     0x14(%ebp),%eax
f010792a:	83 c8 01             	or     $0x1,%eax
f010792d:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f010792f:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0107936:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010793d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0107944:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107947:	3b 45 10             	cmp    0x10(%ebp),%eax
f010794a:	72 a5                	jb     f01078f1 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f010794c:	90                   	nop
f010794d:	c9                   	leave  
f010794e:	c3                   	ret    

f010794f <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f010794f:	55                   	push   %ebp
f0107950:	89 e5                	mov    %esp,%ebp
f0107952:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0107955:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107958:	c1 e8 16             	shr    $0x16,%eax
f010795b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f010795e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107961:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107968:	8b 45 08             	mov    0x8(%ebp),%eax
f010796b:	01 d0                	add    %edx,%eax
f010796d:	8b 00                	mov    (%eax),%eax
f010796f:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0107972:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107975:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010797a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f010797d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107980:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0107983:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107986:	c1 e8 0c             	shr    $0xc,%eax
f0107989:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010798c:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f0107991:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0107994:	72 17                	jb     f01079ad <boot_get_page_table+0x5e>
f0107996:	ff 75 e8             	pushl  -0x18(%ebp)
f0107999:	68 78 6a 12 f0       	push   $0xf0126a78
f010799e:	68 33 01 00 00       	push   $0x133
f01079a3:	68 30 6a 12 f0       	push   $0xf0126a30
f01079a8:	e8 6d 89 ff ff       	call   f010031a <_panic>
f01079ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01079b0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01079b5:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f01079b8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01079bc:	75 72                	jne    f0107a30 <boot_get_page_table+0xe1>
	{
		if (create)
f01079be:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01079c2:	74 65                	je     f0107a29 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f01079c4:	83 ec 08             	sub    $0x8,%esp
f01079c7:	68 00 10 00 00       	push   $0x1000
f01079cc:	68 00 10 00 00       	push   $0x1000
f01079d1:	e8 91 fe ff ff       	call   f0107867 <boot_allocate_space>
f01079d6:	83 c4 10             	add    $0x10,%esp
f01079d9:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f01079dc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01079df:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01079e2:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f01079e9:	77 17                	ja     f0107a02 <boot_get_page_table+0xb3>
f01079eb:	ff 75 dc             	pushl  -0x24(%ebp)
f01079ee:	68 fc 69 12 f0       	push   $0xf01269fc
f01079f3:	68 39 01 00 00       	push   $0x139
f01079f8:	68 30 6a 12 f0       	push   $0xf0126a30
f01079fd:	e8 18 89 ff ff       	call   f010031a <_panic>
f0107a02:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107a05:	05 00 00 00 10       	add    $0x10000000,%eax
f0107a0a:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f0107a0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a10:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107a17:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a1a:	01 d0                	add    %edx,%eax
f0107a1c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107a1f:	83 ca 03             	or     $0x3,%edx
f0107a22:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f0107a24:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107a27:	eb 0a                	jmp    f0107a33 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f0107a29:	b8 00 00 00 00       	mov    $0x0,%eax
f0107a2e:	eb 03                	jmp    f0107a33 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0107a30:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0107a33:	c9                   	leave  
f0107a34:	c3                   	ret    

f0107a35 <nvram_read>:


int nvram_read(int r)
{
f0107a35:	55                   	push   %ebp
f0107a36:	89 e5                	mov    %esp,%ebp
f0107a38:	53                   	push   %ebx
f0107a39:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f0107a3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a3f:	83 ec 0c             	sub    $0xc,%esp
f0107a42:	50                   	push   %eax
f0107a43:	e8 12 d1 ff ff       	call   f0104b5a <mc146818_read>
f0107a48:	83 c4 10             	add    $0x10,%esp
f0107a4b:	89 c3                	mov    %eax,%ebx
f0107a4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a50:	40                   	inc    %eax
f0107a51:	83 ec 0c             	sub    $0xc,%esp
f0107a54:	50                   	push   %eax
f0107a55:	e8 00 d1 ff ff       	call   f0104b5a <mc146818_read>
f0107a5a:	83 c4 10             	add    $0x10,%esp
f0107a5d:	c1 e0 08             	shl    $0x8,%eax
f0107a60:	09 d8                	or     %ebx,%eax
}
f0107a62:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107a65:	c9                   	leave  
f0107a66:	c3                   	ret    

f0107a67 <detect_memory>:

void detect_memory()
{
f0107a67:	55                   	push   %ebp
f0107a68:	89 e5                	mov    %esp,%ebp
f0107a6a:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0107a6d:	83 ec 0c             	sub    $0xc,%esp
f0107a70:	6a 15                	push   $0x15
f0107a72:	e8 be ff ff ff       	call   f0107a35 <nvram_read>
f0107a77:	83 c4 10             	add    $0x10,%esp
f0107a7a:	c1 e0 0a             	shl    $0xa,%eax
f0107a7d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107a80:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107a83:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107a88:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0107a8b:	83 ec 0c             	sub    $0xc,%esp
f0107a8e:	6a 17                	push   $0x17
f0107a90:	e8 a0 ff ff ff       	call   f0107a35 <nvram_read>
f0107a95:	83 c4 10             	add    $0x10,%esp
f0107a98:	c1 e0 0a             	shl    $0xa,%eax
f0107a9b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0107a9e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107aa1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107aa6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f0107aa9:	83 ec 0c             	sub    $0xc,%esp
f0107aac:	6a 34                	push   $0x34
f0107aae:	e8 82 ff ff ff       	call   f0107a35 <nvram_read>
f0107ab3:	83 c4 10             	add    $0x10,%esp
f0107ab6:	c1 e0 10             	shl    $0x10,%eax
f0107ab9:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107abc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107abf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107ac4:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0107ac7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0107acb:	74 18                	je     f0107ae5 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0107acd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107ad0:	05 00 00 00 01       	add    $0x1000000,%eax
f0107ad5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f0107ad8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107adb:	2d 00 00 10 00       	sub    $0x100000,%eax
f0107ae0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107ae3:	eb 19                	jmp    f0107afe <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0107ae5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107ae9:	74 0d                	je     f0107af8 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0107aeb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107aee:	05 00 00 10 00       	add    $0x100000,%eax
f0107af3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107af6:	eb 06                	jmp    f0107afe <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f0107af8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107afb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0107afe:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	if(USE_KHEAP == 0 && maxpa > kernel_virtual_area)
f0107b05:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b08:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0107b0b:	76 32                	jbe    f0107b3f <detect_memory+0xd8>
	{
		cprintf("*	Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
f0107b0d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0107b10:	c1 e8 0a             	shr    $0xa,%eax
f0107b13:	89 c2                	mov    %eax,%edx
f0107b15:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b18:	c1 e8 0a             	shr    $0xa,%eax
f0107b1b:	83 ec 04             	sub    $0x4,%esp
f0107b1e:	52                   	push   %edx
f0107b1f:	50                   	push   %eax
f0107b20:	68 a8 6a 12 f0       	push   $0xf0126aa8
f0107b25:	e8 42 94 ff ff       	call   f0100f6c <cprintf>
f0107b2a:	83 c4 10             	add    $0x10,%esp
		cprintf("*	Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
f0107b2d:	83 ec 0c             	sub    $0xc,%esp
f0107b30:	68 f0 6a 12 f0       	push   $0xf0126af0
f0107b35:	e8 32 94 ff ff       	call   f0100f6c <cprintf>
f0107b3a:	83 c4 10             	add    $0x10,%esp
		while(1);
f0107b3d:	eb fe                	jmp    f0107b3d <detect_memory+0xd6>
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0107b3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b42:	c1 e8 0c             	shr    $0xc,%eax
f0107b45:	a3 58 16 5a f0       	mov    %eax,0xf05a1658

	cprintf("*	Physical memory: %dK available, ", (int)(maxpa/1024));
f0107b4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b4d:	c1 e8 0a             	shr    $0xa,%eax
f0107b50:	83 ec 08             	sub    $0x8,%esp
f0107b53:	50                   	push   %eax
f0107b54:	68 88 6b 12 f0       	push   $0xf0126b88
f0107b59:	e8 0e 94 ff ff       	call   f0100f6c <cprintf>
f0107b5e:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f0107b61:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b64:	c1 e8 0a             	shr    $0xa,%eax
f0107b67:	89 c2                	mov    %eax,%edx
f0107b69:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b6c:	c1 e8 0a             	shr    $0xa,%eax
f0107b6f:	83 ec 04             	sub    $0x4,%esp
f0107b72:	52                   	push   %edx
f0107b73:	50                   	push   %eax
f0107b74:	68 ab 6b 12 f0       	push   $0xf0126bab
f0107b79:	e8 ee 93 ff ff       	call   f0100f6c <cprintf>
f0107b7e:	83 c4 10             	add    $0x10,%esp
}
f0107b81:	90                   	nop
f0107b82:	c9                   	leave  
f0107b83:	c3                   	ret    

f0107b84 <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f0107b84:	55                   	push   %ebp
f0107b85:	89 e5                	mov    %esp,%ebp
f0107b87:	83 ec 48             	sub    $0x48,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f0107b8a:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0107b91:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0107b98:	eb 24                	jmp    f0107bbe <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0107b9a:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0107b9f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107ba2:	c1 e2 02             	shl    $0x2,%edx
f0107ba5:	01 c2                	add    %eax,%edx
f0107ba7:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0107bac:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0107baf:	c1 e1 02             	shl    $0x2,%ecx
f0107bb2:	01 c8                	add    %ecx,%eax
f0107bb4:	8b 00                	mov    (%eax),%eax
f0107bb6:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0107bb8:	ff 45 f4             	incl   -0xc(%ebp)
f0107bbb:	ff 45 f0             	incl   -0x10(%ebp)
f0107bbe:	a1 78 1a 5a f0       	mov    0xf05a1a78,%eax
f0107bc3:	c1 e8 16             	shr    $0x16,%eax
f0107bc6:	89 c2                	mov    %eax,%edx
f0107bc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107bcb:	39 c2                	cmp    %eax,%edx
f0107bcd:	77 cb                	ja     f0107b9a <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0107bcf:	a1 84 1b 5a f0       	mov    0xf05a1b84,%eax
f0107bd4:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0107bd7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107bda:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0107bdd:	0f 20 c0             	mov    %cr0,%eax
f0107be0:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0107be3:	8b 45 d8             	mov    -0x28(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0107be6:	89 45 dc             	mov    %eax,-0x24(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0107be9:	81 4d dc 2f 00 05 80 	orl    $0x8005002f,-0x24(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0107bf0:	83 65 dc f3          	andl   $0xfffffff3,-0x24(%ebp)
f0107bf4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107bf7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0107bfa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0107bfd:	0f 22 c0             	mov    %eax,%cr0
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	//2024: replaced by lgdt()
	//asm volatile("lgdt gdt_pd");
	pushcli();	//disable interrupt
f0107c00:	e8 bb f5 ff ff       	call   f01071c0 <pushcli>
	lgdt(mycpu()->gdt, sizeof(mycpu()->gdt));
f0107c05:	e8 f3 f4 ff ff       	call   f01070fd <mycpu>
f0107c0a:	83 c0 74             	add    $0x74,%eax
f0107c0d:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0107c10:	c7 45 cc 30 00 00 00 	movl   $0x30,-0x34(%ebp)
static __inline void
lgdt(struct Segdesc *p, int size)
{
  volatile unsigned short pd[3];

  pd[0] = size-1;
f0107c17:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0107c1a:	48                   	dec    %eax
f0107c1b:	66 89 45 c6          	mov    %ax,-0x3a(%ebp)
  pd[1] = (uint32)p;
f0107c1f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0107c22:	66 89 45 c8          	mov    %ax,-0x38(%ebp)
  pd[2] = (uint32)p >> 16;
f0107c26:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0107c29:	c1 e8 10             	shr    $0x10,%eax
f0107c2c:	66 89 45 ca          	mov    %ax,-0x36(%ebp)

  __asm __volatile("lgdt (%0)" : : "r" (pd));
f0107c30:	8d 45 c6             	lea    -0x3a(%ebp),%eax
f0107c33:	0f 01 10             	lgdtl  (%eax)
	popcli();	//enable interrupt
f0107c36:	e8 d7 f5 ff ff       	call   f0107212 <popcli>
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0107c3b:	b8 23 00 00 00       	mov    $0x23,%eax
f0107c40:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0107c42:	b8 23 00 00 00       	mov    $0x23,%eax
f0107c47:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0107c49:	b8 10 00 00 00       	mov    $0x10,%eax
f0107c4e:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0107c50:	b8 10 00 00 00       	mov    $0x10,%eax
f0107c55:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0107c57:	b8 10 00 00 00       	mov    $0x10,%eax
f0107c5c:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0107c5e:	ea 65 7c 10 f0 08 00 	ljmp   $0x8,$0xf0107c65
	asm volatile("lldt %%ax" :: "a" (0));
f0107c65:	b8 00 00 00 00       	mov    $0x0,%eax
f0107c6a:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f0107c6d:	c7 45 ec c0 03 00 00 	movl   $0x3c0,-0x14(%ebp)
		int j = 0;
f0107c74:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0107c7b:	eb 19                	jmp    f0107c96 <turn_on_paging+0x112>
		{
			ptr_page_directory[j] = 0;
f0107c7d:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0107c82:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107c85:	c1 e2 02             	shl    $0x2,%edx
f0107c88:	01 d0                	add    %edx,%eax
f0107c8a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0107c90:	ff 45 ec             	incl   -0x14(%ebp)
f0107c93:	ff 45 e8             	incl   -0x18(%ebp)
f0107c96:	a1 78 1a 5a f0       	mov    0xf05a1a78,%eax
f0107c9b:	c1 e8 16             	shr    $0x16,%eax
f0107c9e:	89 c2                	mov    %eax,%edx
f0107ca0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107ca3:	39 c2                	cmp    %eax,%edx
f0107ca5:	77 d6                	ja     f0107c7d <turn_on_paging+0xf9>
			ptr_page_directory[j] = 0;
		}
	}

	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0107ca7:	a1 84 1b 5a f0       	mov    0xf05a1b84,%eax
f0107cac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0107caf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107cb2:	0f 22 d8             	mov    %eax,%cr3

}
f0107cb5:	90                   	nop
f0107cb6:	c9                   	leave  
f0107cb7:	c3                   	ret    

f0107cb8 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f0107cb8:	55                   	push   %ebp
f0107cb9:	89 e5                	mov    %esp,%ebp
f0107cbb:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0107cbe:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0107cc3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107cc6:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0107ccd:	77 17                	ja     f0107ce6 <setup_listing_to_all_page_tables_entries+0x2e>
f0107ccf:	ff 75 f4             	pushl  -0xc(%ebp)
f0107cd2:	68 fc 69 12 f0       	push   $0xf01269fc
f0107cd7:	68 cf 01 00 00       	push   $0x1cf
f0107cdc:	68 30 6a 12 f0       	push   $0xf0126a30
f0107ce1:	e8 34 86 ff ff       	call   f010031a <_panic>
f0107ce6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ce9:	05 00 00 00 10       	add    $0x10000000,%eax
f0107cee:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0107cf1:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0107cf6:	05 fc 0e 00 00       	add    $0xefc,%eax
f0107cfb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107cfe:	83 ca 03             	or     $0x3,%edx
f0107d01:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0107d03:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0107d08:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0107d0e:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0107d13:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107d16:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0107d1d:	77 17                	ja     f0107d36 <setup_listing_to_all_page_tables_entries+0x7e>
f0107d1f:	ff 75 ec             	pushl  -0x14(%ebp)
f0107d22:	68 fc 69 12 f0       	push   $0xf01269fc
f0107d27:	68 d4 01 00 00       	push   $0x1d4
f0107d2c:	68 30 6a 12 f0       	push   $0xf0126a30
f0107d31:	e8 e4 85 ff ff       	call   f010031a <_panic>
f0107d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107d39:	05 00 00 00 10       	add    $0x10000000,%eax
f0107d3e:	83 c8 05             	or     $0x5,%eax
f0107d41:	89 02                	mov    %eax,(%edx)

}
f0107d43:	90                   	nop
f0107d44:	c9                   	leave  
f0107d45:	c3                   	ret    

f0107d46 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107d46:	55                   	push   %ebp
f0107d47:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107d49:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d4c:	8b 15 c0 18 5a f0    	mov    0xf05a18c0,%edx
f0107d52:	29 d0                	sub    %edx,%eax
f0107d54:	c1 f8 03             	sar    $0x3,%eax
f0107d57:	89 c2                	mov    %eax,%edx
f0107d59:	89 d0                	mov    %edx,%eax
f0107d5b:	c1 e0 02             	shl    $0x2,%eax
f0107d5e:	01 d0                	add    %edx,%eax
f0107d60:	c1 e0 02             	shl    $0x2,%eax
f0107d63:	01 d0                	add    %edx,%eax
f0107d65:	c1 e0 02             	shl    $0x2,%eax
f0107d68:	01 d0                	add    %edx,%eax
f0107d6a:	89 c1                	mov    %eax,%ecx
f0107d6c:	c1 e1 08             	shl    $0x8,%ecx
f0107d6f:	01 c8                	add    %ecx,%eax
f0107d71:	89 c1                	mov    %eax,%ecx
f0107d73:	c1 e1 10             	shl    $0x10,%ecx
f0107d76:	01 c8                	add    %ecx,%eax
f0107d78:	01 c0                	add    %eax,%eax
f0107d7a:	01 d0                	add    %edx,%eax
}
f0107d7c:	5d                   	pop    %ebp
f0107d7d:	c3                   	ret    

f0107d7e <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107d7e:	55                   	push   %ebp
f0107d7f:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107d81:	ff 75 08             	pushl  0x8(%ebp)
f0107d84:	e8 bd ff ff ff       	call   f0107d46 <to_frame_number>
f0107d89:	83 c4 04             	add    $0x4,%esp
f0107d8c:	c1 e0 0c             	shl    $0xc,%eax
}
f0107d8f:	c9                   	leave  
f0107d90:	c3                   	ret    

f0107d91 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0107d91:	55                   	push   %ebp
f0107d92:	89 e5                	mov    %esp,%ebp
f0107d94:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0107d97:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d9a:	c1 e8 0c             	shr    $0xc,%eax
f0107d9d:	89 c2                	mov    %eax,%edx
f0107d9f:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f0107da4:	39 c2                	cmp    %eax,%edx
f0107da6:	72 14                	jb     f0107dbc <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0107da8:	83 ec 04             	sub    $0x4,%esp
f0107dab:	68 c8 6b 12 f0       	push   $0xf0126bc8
f0107db0:	6a 55                	push   $0x55
f0107db2:	68 ed 6b 12 f0       	push   $0xf0126bed
f0107db7:	e8 5e 85 ff ff       	call   f010031a <_panic>
	return &frames_info[PPN(physical_address)];
f0107dbc:	8b 15 c0 18 5a f0    	mov    0xf05a18c0,%edx
f0107dc2:	8b 45 08             	mov    0x8(%ebp),%eax
f0107dc5:	c1 e8 0c             	shr    $0xc,%eax
f0107dc8:	89 c1                	mov    %eax,%ecx
f0107dca:	89 c8                	mov    %ecx,%eax
f0107dcc:	01 c0                	add    %eax,%eax
f0107dce:	01 c8                	add    %ecx,%eax
f0107dd0:	c1 e0 03             	shl    $0x3,%eax
f0107dd3:	01 d0                	add    %edx,%eax
}
f0107dd5:	c9                   	leave  
f0107dd6:	c3                   	ret    

f0107dd7 <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0107dd7:	55                   	push   %ebp
f0107dd8:	89 e5                	mov    %esp,%ebp
f0107dda:	83 ec 10             	sub    $0x10,%esp
f0107ddd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107de0:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void
invlpg(void *addr)
{
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0107de3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107de6:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0107de9:	90                   	nop
f0107dea:	c9                   	leave  
f0107deb:	c3                   	ret    

f0107dec <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0107dec:	55                   	push   %ebp
f0107ded:	89 e5                	mov    %esp,%ebp
f0107def:	53                   	push   %ebx
f0107df0:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&MemFrameLists.free_frame_list);
f0107df3:	c7 05 c0 ee 59 f0 00 	movl   $0x0,0xf059eec0
f0107dfa:	00 00 00 
f0107dfd:	c7 05 c4 ee 59 f0 00 	movl   $0x0,0xf059eec4
f0107e04:	00 00 00 
f0107e07:	c7 05 cc ee 59 f0 00 	movl   $0x0,0xf059eecc
f0107e0e:	00 00 00 
	LIST_INIT(&MemFrameLists.modified_frame_list);
f0107e11:	c7 05 d0 ee 59 f0 00 	movl   $0x0,0xf059eed0
f0107e18:	00 00 00 
f0107e1b:	c7 05 d4 ee 59 f0 00 	movl   $0x0,0xf059eed4
f0107e22:	00 00 00 
f0107e25:	c7 05 dc ee 59 f0 00 	movl   $0x0,0xf059eedc
f0107e2c:	00 00 00 

	//Initialize the corresponding lock
	init_spinlock(&MemFrameLists.mfllock, "Frame Info Lock");
f0107e2f:	83 ec 08             	sub    $0x8,%esp
f0107e32:	68 07 6c 12 f0       	push   $0xf0126c07
f0107e37:	68 e0 ee 59 f0       	push   $0xf059eee0
f0107e3c:	e8 af 6c 00 00       	call   f010eaf0 <init_spinlock>
f0107e41:	83 c4 10             	add    $0x10,%esp

	frames_info[0].references = 1;
f0107e44:	a1 c0 18 5a f0       	mov    0xf05a18c0,%eax
f0107e49:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0107e4f:	a1 c0 18 5a f0       	mov    0xf05a18c0,%eax
f0107e54:	83 c0 18             	add    $0x18,%eax
f0107e57:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f0107e5d:	a1 c0 18 5a f0       	mov    0xf05a18c0,%eax
f0107e62:	83 c0 30             	add    $0x30,%eax
f0107e65:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f0107e6b:	c7 05 54 19 5a f0 00 	movl   $0xf0001000,0xf05a1954
f0107e72:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0107e75:	c7 05 04 1b 5a f0 00 	movl   $0xf0002000,0xf05a1b04
f0107e7c:	20 00 f0 
	i =0;
f0107e7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f0107e86:	eb 1f                	jmp    f0107ea7 <initialize_paging+0xbb>
	{
		ptr_zero_page[i]=0;
f0107e88:	8b 15 54 19 5a f0    	mov    0xf05a1954,%edx
f0107e8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e91:	01 d0                	add    %edx,%eax
f0107e93:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f0107e96:	8b 15 04 1b 5a f0    	mov    0xf05a1b04,%edx
f0107e9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e9f:	01 d0                	add    %edx,%eax
f0107ea1:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f0107ea4:	ff 45 f4             	incl   -0xc(%ebp)
f0107ea7:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107eae:	7e d8                	jle    f0107e88 <initialize_paging+0x9c>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f0107eb0:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0107eb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107eba:	05 ff ff 09 00       	add    $0x9ffff,%eax
f0107ebf:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107ec2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107ec5:	ba 00 00 00 00       	mov    $0x0,%edx
f0107eca:	f7 75 f0             	divl   -0x10(%ebp)
f0107ecd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107ed0:	29 d0                	sub    %edx,%eax
f0107ed2:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0107ed5:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f0107edc:	e9 e8 00 00 00       	jmp    f0107fc9 <initialize_paging+0x1dd>
	{

		initialize_frame_info(&(frames_info[i]));
f0107ee1:	8b 0d c0 18 5a f0    	mov    0xf05a18c0,%ecx
f0107ee7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107eea:	89 d0                	mov    %edx,%eax
f0107eec:	01 c0                	add    %eax,%eax
f0107eee:	01 d0                	add    %edx,%eax
f0107ef0:	c1 e0 03             	shl    $0x3,%eax
f0107ef3:	01 c8                	add    %ecx,%eax
f0107ef5:	83 ec 0c             	sub    $0xc,%esp
f0107ef8:	50                   	push   %eax
f0107ef9:	e8 b7 02 00 00       	call   f01081b5 <initialize_frame_info>
f0107efe:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&MemFrameLists.free_frame_list, &frames_info[i]);
f0107f01:	8b 0d c0 18 5a f0    	mov    0xf05a18c0,%ecx
f0107f07:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f0a:	89 d0                	mov    %edx,%eax
f0107f0c:	01 c0                	add    %eax,%eax
f0107f0e:	01 d0                	add    %edx,%eax
f0107f10:	c1 e0 03             	shl    $0x3,%eax
f0107f13:	01 c8                	add    %ecx,%eax
f0107f15:	85 c0                	test   %eax,%eax
f0107f17:	75 14                	jne    f0107f2d <initialize_paging+0x141>
f0107f19:	83 ec 04             	sub    $0x4,%esp
f0107f1c:	68 18 6c 12 f0       	push   $0xf0126c18
f0107f21:	6a 60                	push   $0x60
f0107f23:	68 3b 6c 12 f0       	push   $0xf0126c3b
f0107f28:	e8 ed 83 ff ff       	call   f010031a <_panic>
f0107f2d:	8b 0d c0 18 5a f0    	mov    0xf05a18c0,%ecx
f0107f33:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f36:	89 d0                	mov    %edx,%eax
f0107f38:	01 c0                	add    %eax,%eax
f0107f3a:	01 d0                	add    %edx,%eax
f0107f3c:	c1 e0 03             	shl    $0x3,%eax
f0107f3f:	01 c8                	add    %ecx,%eax
f0107f41:	8b 15 c0 ee 59 f0    	mov    0xf059eec0,%edx
f0107f47:	89 10                	mov    %edx,(%eax)
f0107f49:	8b 00                	mov    (%eax),%eax
f0107f4b:	85 c0                	test   %eax,%eax
f0107f4d:	74 1f                	je     f0107f6e <initialize_paging+0x182>
f0107f4f:	8b 15 c0 ee 59 f0    	mov    0xf059eec0,%edx
f0107f55:	8b 1d c0 18 5a f0    	mov    0xf05a18c0,%ebx
f0107f5b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0107f5e:	89 c8                	mov    %ecx,%eax
f0107f60:	01 c0                	add    %eax,%eax
f0107f62:	01 c8                	add    %ecx,%eax
f0107f64:	c1 e0 03             	shl    $0x3,%eax
f0107f67:	01 d8                	add    %ebx,%eax
f0107f69:	89 42 04             	mov    %eax,0x4(%edx)
f0107f6c:	eb 19                	jmp    f0107f87 <initialize_paging+0x19b>
f0107f6e:	8b 0d c0 18 5a f0    	mov    0xf05a18c0,%ecx
f0107f74:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f77:	89 d0                	mov    %edx,%eax
f0107f79:	01 c0                	add    %eax,%eax
f0107f7b:	01 d0                	add    %edx,%eax
f0107f7d:	c1 e0 03             	shl    $0x3,%eax
f0107f80:	01 c8                	add    %ecx,%eax
f0107f82:	a3 c4 ee 59 f0       	mov    %eax,0xf059eec4
f0107f87:	8b 0d c0 18 5a f0    	mov    0xf05a18c0,%ecx
f0107f8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f90:	89 d0                	mov    %edx,%eax
f0107f92:	01 c0                	add    %eax,%eax
f0107f94:	01 d0                	add    %edx,%eax
f0107f96:	c1 e0 03             	shl    $0x3,%eax
f0107f99:	01 c8                	add    %ecx,%eax
f0107f9b:	a3 c0 ee 59 f0       	mov    %eax,0xf059eec0
f0107fa0:	8b 0d c0 18 5a f0    	mov    0xf05a18c0,%ecx
f0107fa6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107fa9:	89 d0                	mov    %edx,%eax
f0107fab:	01 c0                	add    %eax,%eax
f0107fad:	01 d0                	add    %edx,%eax
f0107faf:	c1 e0 03             	shl    $0x3,%eax
f0107fb2:	01 c8                	add    %ecx,%eax
f0107fb4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107fbb:	a1 cc ee 59 f0       	mov    0xf059eecc,%eax
f0107fc0:	40                   	inc    %eax
f0107fc1:	a3 cc ee 59 f0       	mov    %eax,0xf059eecc
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0107fc6:	ff 45 f4             	incl   -0xc(%ebp)
f0107fc9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107fcc:	85 c0                	test   %eax,%eax
f0107fce:	79 05                	jns    f0107fd5 <initialize_paging+0x1e9>
f0107fd0:	05 ff 0f 00 00       	add    $0xfff,%eax
f0107fd5:	c1 f8 0c             	sar    $0xc,%eax
f0107fd8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107fdb:	0f 8f 00 ff ff ff    	jg     f0107ee1 <initialize_paging+0xf5>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&MemFrameLists.free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0107fe1:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f0107fe8:	eb 1d                	jmp    f0108007 <initialize_paging+0x21b>
	{
		frames_info[i].references = 1;
f0107fea:	8b 0d c0 18 5a f0    	mov    0xf05a18c0,%ecx
f0107ff0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107ff3:	89 d0                	mov    %edx,%eax
f0107ff5:	01 c0                	add    %eax,%eax
f0107ff7:	01 d0                	add    %edx,%eax
f0107ff9:	c1 e0 03             	shl    $0x3,%eax
f0107ffc:	01 c8                	add    %ecx,%eax
f0107ffe:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&MemFrameLists.free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0108004:	ff 45 f4             	incl   -0xc(%ebp)
f0108007:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f010800e:	7e da                	jle    f0107fea <initialize_paging+0x1fe>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0108010:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0108017:	a1 78 1a 5a f0       	mov    0xf05a1a78,%eax
f010801c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010801f:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0108026:	77 14                	ja     f010803c <initialize_paging+0x250>
f0108028:	ff 75 e0             	pushl  -0x20(%ebp)
f010802b:	68 58 6c 12 f0       	push   $0xf0126c58
f0108030:	6a 68                	push   $0x68
f0108032:	68 3b 6c 12 f0       	push   $0xf0126c3b
f0108037:	e8 de 82 ff ff       	call   f010031a <_panic>
f010803c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010803f:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0108045:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108048:	01 d0                	add    %edx,%eax
f010804a:	48                   	dec    %eax
f010804b:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010804e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108051:	ba 00 00 00 00       	mov    $0x0,%edx
f0108056:	f7 75 e4             	divl   -0x1c(%ebp)
f0108059:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010805c:	29 d0                	sub    %edx,%eax
f010805e:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0108061:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f0108068:	eb 1d                	jmp    f0108087 <initialize_paging+0x29b>
	{
		frames_info[i].references = 1;
f010806a:	8b 0d c0 18 5a f0    	mov    0xf05a18c0,%ecx
f0108070:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108073:	89 d0                	mov    %edx,%eax
f0108075:	01 c0                	add    %eax,%eax
f0108077:	01 d0                	add    %edx,%eax
f0108079:	c1 e0 03             	shl    $0x3,%eax
f010807c:	01 c8                	add    %ecx,%eax
f010807e:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0108084:	ff 45 f4             	incl   -0xc(%ebp)
f0108087:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010808a:	85 c0                	test   %eax,%eax
f010808c:	79 05                	jns    f0108093 <initialize_paging+0x2a7>
f010808e:	05 ff 0f 00 00       	add    $0xfff,%eax
f0108093:	c1 f8 0c             	sar    $0xc,%eax
f0108096:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108099:	7f cf                	jg     f010806a <initialize_paging+0x27e>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f010809b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010809e:	85 c0                	test   %eax,%eax
f01080a0:	79 05                	jns    f01080a7 <initialize_paging+0x2bb>
f01080a2:	05 ff 0f 00 00       	add    $0xfff,%eax
f01080a7:	c1 f8 0c             	sar    $0xc,%eax
f01080aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01080ad:	e9 e8 00 00 00       	jmp    f010819a <initialize_paging+0x3ae>
	{
		initialize_frame_info(&(frames_info[i]));
f01080b2:	8b 0d c0 18 5a f0    	mov    0xf05a18c0,%ecx
f01080b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01080bb:	89 d0                	mov    %edx,%eax
f01080bd:	01 c0                	add    %eax,%eax
f01080bf:	01 d0                	add    %edx,%eax
f01080c1:	c1 e0 03             	shl    $0x3,%eax
f01080c4:	01 c8                	add    %ecx,%eax
f01080c6:	83 ec 0c             	sub    $0xc,%esp
f01080c9:	50                   	push   %eax
f01080ca:	e8 e6 00 00 00       	call   f01081b5 <initialize_frame_info>
f01080cf:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&MemFrameLists.free_frame_list, &frames_info[i]);
f01080d2:	8b 0d c0 18 5a f0    	mov    0xf05a18c0,%ecx
f01080d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01080db:	89 d0                	mov    %edx,%eax
f01080dd:	01 c0                	add    %eax,%eax
f01080df:	01 d0                	add    %edx,%eax
f01080e1:	c1 e0 03             	shl    $0x3,%eax
f01080e4:	01 c8                	add    %ecx,%eax
f01080e6:	85 c0                	test   %eax,%eax
f01080e8:	75 14                	jne    f01080fe <initialize_paging+0x312>
f01080ea:	83 ec 04             	sub    $0x4,%esp
f01080ed:	68 18 6c 12 f0       	push   $0xf0126c18
f01080f2:	6a 74                	push   $0x74
f01080f4:	68 3b 6c 12 f0       	push   $0xf0126c3b
f01080f9:	e8 1c 82 ff ff       	call   f010031a <_panic>
f01080fe:	8b 0d c0 18 5a f0    	mov    0xf05a18c0,%ecx
f0108104:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108107:	89 d0                	mov    %edx,%eax
f0108109:	01 c0                	add    %eax,%eax
f010810b:	01 d0                	add    %edx,%eax
f010810d:	c1 e0 03             	shl    $0x3,%eax
f0108110:	01 c8                	add    %ecx,%eax
f0108112:	8b 15 c0 ee 59 f0    	mov    0xf059eec0,%edx
f0108118:	89 10                	mov    %edx,(%eax)
f010811a:	8b 00                	mov    (%eax),%eax
f010811c:	85 c0                	test   %eax,%eax
f010811e:	74 1f                	je     f010813f <initialize_paging+0x353>
f0108120:	8b 15 c0 ee 59 f0    	mov    0xf059eec0,%edx
f0108126:	8b 1d c0 18 5a f0    	mov    0xf05a18c0,%ebx
f010812c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010812f:	89 c8                	mov    %ecx,%eax
f0108131:	01 c0                	add    %eax,%eax
f0108133:	01 c8                	add    %ecx,%eax
f0108135:	c1 e0 03             	shl    $0x3,%eax
f0108138:	01 d8                	add    %ebx,%eax
f010813a:	89 42 04             	mov    %eax,0x4(%edx)
f010813d:	eb 19                	jmp    f0108158 <initialize_paging+0x36c>
f010813f:	8b 0d c0 18 5a f0    	mov    0xf05a18c0,%ecx
f0108145:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108148:	89 d0                	mov    %edx,%eax
f010814a:	01 c0                	add    %eax,%eax
f010814c:	01 d0                	add    %edx,%eax
f010814e:	c1 e0 03             	shl    $0x3,%eax
f0108151:	01 c8                	add    %ecx,%eax
f0108153:	a3 c4 ee 59 f0       	mov    %eax,0xf059eec4
f0108158:	8b 0d c0 18 5a f0    	mov    0xf05a18c0,%ecx
f010815e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108161:	89 d0                	mov    %edx,%eax
f0108163:	01 c0                	add    %eax,%eax
f0108165:	01 d0                	add    %edx,%eax
f0108167:	c1 e0 03             	shl    $0x3,%eax
f010816a:	01 c8                	add    %ecx,%eax
f010816c:	a3 c0 ee 59 f0       	mov    %eax,0xf059eec0
f0108171:	8b 0d c0 18 5a f0    	mov    0xf05a18c0,%ecx
f0108177:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010817a:	89 d0                	mov    %edx,%eax
f010817c:	01 c0                	add    %eax,%eax
f010817e:	01 d0                	add    %edx,%eax
f0108180:	c1 e0 03             	shl    $0x3,%eax
f0108183:	01 c8                	add    %ecx,%eax
f0108185:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010818c:	a1 cc ee 59 f0       	mov    0xf059eecc,%eax
f0108191:	40                   	inc    %eax
f0108192:	a3 cc ee 59 f0       	mov    %eax,0xf059eecc
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0108197:	ff 45 f4             	incl   -0xc(%ebp)
f010819a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010819d:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f01081a2:	39 c2                	cmp    %eax,%edx
f01081a4:	0f 82 08 ff ff ff    	jb     f01080b2 <initialize_paging+0x2c6>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&MemFrameLists.free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01081aa:	e8 ef b9 ff ff       	call   f0103b9e <initialize_disk_page_file>
}
f01081af:	90                   	nop
f01081b0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01081b3:	c9                   	leave  
f01081b4:	c3                   	ret    

f01081b5 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f01081b5:	55                   	push   %ebp
f01081b6:	89 e5                	mov    %esp,%ebp
f01081b8:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f01081bb:	83 ec 04             	sub    $0x4,%esp
f01081be:	6a 18                	push   $0x18
f01081c0:	6a 00                	push   $0x0
f01081c2:	ff 75 08             	pushl  0x8(%ebp)
f01081c5:	e8 5c a4 01 00       	call   f0122626 <memset>
f01081ca:	83 c4 10             	add    $0x10,%esp
}
f01081cd:	90                   	nop
f01081ce:	c9                   	leave  
f01081cf:	c3                   	ret    

f01081d0 <allocate_frame>:
//   If failed, it panic.
//
// Hint: use LIST_FIRST, LIST_REMOVE, and initialize_frame_info
// Hint: references should not be incremented
int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f01081d0:	55                   	push   %ebp
f01081d1:	89 e5                	mov    %esp,%ebp
f01081d3:	83 ec 18             	sub    $0x18,%esp
	//cprintf("allocate_frame...\n");

	bool lock_already_held = holding_spinlock(&MemFrameLists.mfllock);
f01081d6:	83 ec 0c             	sub    $0xc,%esp
f01081d9:	68 e0 ee 59 f0       	push   $0xf059eee0
f01081de:	e8 57 6b 00 00       	call   f010ed3a <holding_spinlock>
f01081e3:	83 c4 10             	add    $0x10,%esp
f01081e6:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (!lock_already_held)
f01081e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01081ed:	75 10                	jne    f01081ff <allocate_frame+0x2f>
	{
		acquire_spinlock(&MemFrameLists.mfllock);
f01081ef:	83 ec 0c             	sub    $0xc,%esp
f01081f2:	68 e0 ee 59 f0       	push   $0xf059eee0
f01081f7:	e8 25 69 00 00       	call   f010eb21 <acquire_spinlock>
f01081fc:	83 c4 10             	add    $0x10,%esp
	}

	*ptr_frame_info = LIST_FIRST(&MemFrameLists.free_frame_list);
f01081ff:	8b 15 c0 ee 59 f0    	mov    0xf059eec0,%edx
f0108205:	8b 45 08             	mov    0x8(%ebp),%eax
f0108208:	89 10                	mov    %edx,(%eax)
	int c = 0;
f010820a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (*ptr_frame_info == NULL)
f0108211:	8b 45 08             	mov    0x8(%ebp),%eax
f0108214:	8b 00                	mov    (%eax),%eax
f0108216:	85 c0                	test   %eax,%eax
f0108218:	75 17                	jne    f0108231 <allocate_frame+0x61>
	{
		//[PROJECT] Free RAM when it's FULL
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f010821a:	83 ec 04             	sub    $0x4,%esp
f010821d:	68 8c 6c 12 f0       	push   $0xf0126c8c
f0108222:	68 a2 00 00 00       	push   $0xa2
f0108227:	68 3b 6c 12 f0       	push   $0xf0126c3b
f010822c:	e8 e9 80 ff ff       	call   f010031a <_panic>
		// When allocating new frame, if there's no free frame, then you should:
		//	1-	If any process has exited (those with status ENV_EXIT), then remove one or more of these exited processes from the main memory
		//	2-	otherwise, free at least 1 frame from the user working set by applying the FIFO algorithm
	}

	LIST_REMOVE(&MemFrameLists.free_frame_list,*ptr_frame_info);
f0108231:	8b 45 08             	mov    0x8(%ebp),%eax
f0108234:	8b 00                	mov    (%eax),%eax
f0108236:	85 c0                	test   %eax,%eax
f0108238:	75 17                	jne    f0108251 <allocate_frame+0x81>
f010823a:	83 ec 04             	sub    $0x4,%esp
f010823d:	68 d9 6c 12 f0       	push   $0xf0126cd9
f0108242:	68 a8 00 00 00       	push   $0xa8
f0108247:	68 3b 6c 12 f0       	push   $0xf0126c3b
f010824c:	e8 c9 80 ff ff       	call   f010031a <_panic>
f0108251:	8b 45 08             	mov    0x8(%ebp),%eax
f0108254:	8b 00                	mov    (%eax),%eax
f0108256:	8b 00                	mov    (%eax),%eax
f0108258:	85 c0                	test   %eax,%eax
f010825a:	74 14                	je     f0108270 <allocate_frame+0xa0>
f010825c:	8b 45 08             	mov    0x8(%ebp),%eax
f010825f:	8b 00                	mov    (%eax),%eax
f0108261:	8b 00                	mov    (%eax),%eax
f0108263:	8b 55 08             	mov    0x8(%ebp),%edx
f0108266:	8b 12                	mov    (%edx),%edx
f0108268:	8b 52 04             	mov    0x4(%edx),%edx
f010826b:	89 50 04             	mov    %edx,0x4(%eax)
f010826e:	eb 0d                	jmp    f010827d <allocate_frame+0xad>
f0108270:	8b 45 08             	mov    0x8(%ebp),%eax
f0108273:	8b 00                	mov    (%eax),%eax
f0108275:	8b 40 04             	mov    0x4(%eax),%eax
f0108278:	a3 c4 ee 59 f0       	mov    %eax,0xf059eec4
f010827d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108280:	8b 00                	mov    (%eax),%eax
f0108282:	8b 40 04             	mov    0x4(%eax),%eax
f0108285:	85 c0                	test   %eax,%eax
f0108287:	74 13                	je     f010829c <allocate_frame+0xcc>
f0108289:	8b 45 08             	mov    0x8(%ebp),%eax
f010828c:	8b 00                	mov    (%eax),%eax
f010828e:	8b 40 04             	mov    0x4(%eax),%eax
f0108291:	8b 55 08             	mov    0x8(%ebp),%edx
f0108294:	8b 12                	mov    (%edx),%edx
f0108296:	8b 12                	mov    (%edx),%edx
f0108298:	89 10                	mov    %edx,(%eax)
f010829a:	eb 0c                	jmp    f01082a8 <allocate_frame+0xd8>
f010829c:	8b 45 08             	mov    0x8(%ebp),%eax
f010829f:	8b 00                	mov    (%eax),%eax
f01082a1:	8b 00                	mov    (%eax),%eax
f01082a3:	a3 c0 ee 59 f0       	mov    %eax,0xf059eec0
f01082a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01082ab:	8b 00                	mov    (%eax),%eax
f01082ad:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01082b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01082b6:	8b 00                	mov    (%eax),%eax
f01082b8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01082bf:	a1 cc ee 59 f0       	mov    0xf059eecc,%eax
f01082c4:	48                   	dec    %eax
f01082c5:	a3 cc ee 59 f0       	mov    %eax,0xf059eecc

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/
	if((*ptr_frame_info)->isBuffered)
f01082ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01082cd:	8b 00                	mov    (%eax),%eax
f01082cf:	8a 40 14             	mov    0x14(%eax),%al
f01082d2:	84 c0                	test   %al,%al
f01082d4:	74 20                	je     f01082f6 <allocate_frame+0x126>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->proc->env_page_directory,(*ptr_frame_info)->bufferedVA);
f01082d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01082d9:	8b 00                	mov    (%eax),%eax
f01082db:	8b 50 10             	mov    0x10(%eax),%edx
f01082de:	8b 45 08             	mov    0x8(%ebp),%eax
f01082e1:	8b 00                	mov    (%eax),%eax
f01082e3:	8b 40 0c             	mov    0xc(%eax),%eax
f01082e6:	8b 40 64             	mov    0x64(%eax),%eax
f01082e9:	83 ec 08             	sub    $0x8,%esp
f01082ec:	52                   	push   %edx
f01082ed:	50                   	push   %eax
f01082ee:	e8 42 09 00 00       	call   f0108c35 <pt_clear_page_table_entry>
f01082f3:	83 c4 10             	add    $0x10,%esp
		//pt_set_page_permissions((*ptr_frame_info)->environment->env_pgdir, (*ptr_frame_info)->va, 0, PERM_BUFFERED);
	}
	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f01082f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01082f9:	8b 00                	mov    (%eax),%eax
f01082fb:	83 ec 0c             	sub    $0xc,%esp
f01082fe:	50                   	push   %eax
f01082ff:	e8 b1 fe ff ff       	call   f01081b5 <initialize_frame_info>
f0108304:	83 c4 10             	add    $0x10,%esp

	if (!lock_already_held)
f0108307:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010830b:	75 10                	jne    f010831d <allocate_frame+0x14d>
	{
		release_spinlock(&MemFrameLists.mfllock);
f010830d:	83 ec 0c             	sub    $0xc,%esp
f0108310:	68 e0 ee 59 f0       	push   $0xf059eee0
f0108315:	e8 8e 68 00 00       	call   f010eba8 <release_spinlock>
f010831a:	83 c4 10             	add    $0x10,%esp
	}

	return 0;
f010831d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108322:	c9                   	leave  
f0108323:	c3                   	ret    

f0108324 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f0108324:	55                   	push   %ebp
f0108325:	89 e5                	mov    %esp,%ebp
f0108327:	83 ec 18             	sub    $0x18,%esp
	bool lock_already_held = holding_spinlock(&MemFrameLists.mfllock);
f010832a:	83 ec 0c             	sub    $0xc,%esp
f010832d:	68 e0 ee 59 f0       	push   $0xf059eee0
f0108332:	e8 03 6a 00 00       	call   f010ed3a <holding_spinlock>
f0108337:	83 c4 10             	add    $0x10,%esp
f010833a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (!lock_already_held)
f010833d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108341:	75 10                	jne    f0108353 <free_frame+0x2f>
	{
		acquire_spinlock(&MemFrameLists.mfllock);
f0108343:	83 ec 0c             	sub    $0xc,%esp
f0108346:	68 e0 ee 59 f0       	push   $0xf059eee0
f010834b:	e8 d1 67 00 00       	call   f010eb21 <acquire_spinlock>
f0108350:	83 c4 10             	add    $0x10,%esp
	}
	{
		/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
		initialize_frame_info(ptr_frame_info);
f0108353:	83 ec 0c             	sub    $0xc,%esp
f0108356:	ff 75 08             	pushl  0x8(%ebp)
f0108359:	e8 57 fe ff ff       	call   f01081b5 <initialize_frame_info>
f010835e:	83 c4 10             	add    $0x10,%esp
		/*=============================================================================*/
		// Fill this function in
		LIST_INSERT_HEAD(&MemFrameLists.free_frame_list, ptr_frame_info);
f0108361:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0108365:	75 17                	jne    f010837e <free_frame+0x5a>
f0108367:	83 ec 04             	sub    $0x4,%esp
f010836a:	68 18 6c 12 f0       	push   $0xf0126c18
f010836f:	68 cf 00 00 00       	push   $0xcf
f0108374:	68 3b 6c 12 f0       	push   $0xf0126c3b
f0108379:	e8 9c 7f ff ff       	call   f010031a <_panic>
f010837e:	8b 15 c0 ee 59 f0    	mov    0xf059eec0,%edx
f0108384:	8b 45 08             	mov    0x8(%ebp),%eax
f0108387:	89 10                	mov    %edx,(%eax)
f0108389:	8b 45 08             	mov    0x8(%ebp),%eax
f010838c:	8b 00                	mov    (%eax),%eax
f010838e:	85 c0                	test   %eax,%eax
f0108390:	74 0d                	je     f010839f <free_frame+0x7b>
f0108392:	a1 c0 ee 59 f0       	mov    0xf059eec0,%eax
f0108397:	8b 55 08             	mov    0x8(%ebp),%edx
f010839a:	89 50 04             	mov    %edx,0x4(%eax)
f010839d:	eb 08                	jmp    f01083a7 <free_frame+0x83>
f010839f:	8b 45 08             	mov    0x8(%ebp),%eax
f01083a2:	a3 c4 ee 59 f0       	mov    %eax,0xf059eec4
f01083a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01083aa:	a3 c0 ee 59 f0       	mov    %eax,0xf059eec0
f01083af:	8b 45 08             	mov    0x8(%ebp),%eax
f01083b2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01083b9:	a1 cc ee 59 f0       	mov    0xf059eecc,%eax
f01083be:	40                   	inc    %eax
f01083bf:	a3 cc ee 59 f0       	mov    %eax,0xf059eecc
		//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));
	}
	if (!lock_already_held)
f01083c4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01083c8:	75 10                	jne    f01083da <free_frame+0xb6>
	{
		release_spinlock(&MemFrameLists.mfllock);
f01083ca:	83 ec 0c             	sub    $0xc,%esp
f01083cd:	68 e0 ee 59 f0       	push   $0xf059eee0
f01083d2:	e8 d1 67 00 00       	call   f010eba8 <release_spinlock>
f01083d7:	83 c4 10             	add    $0x10,%esp
	}
}
f01083da:	90                   	nop
f01083db:	c9                   	leave  
f01083dc:	c3                   	ret    

f01083dd <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f01083dd:	55                   	push   %ebp
f01083de:	89 e5                	mov    %esp,%ebp
f01083e0:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f01083e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01083e6:	8b 40 08             	mov    0x8(%eax),%eax
f01083e9:	48                   	dec    %eax
f01083ea:	8b 55 08             	mov    0x8(%ebp),%edx
f01083ed:	66 89 42 08          	mov    %ax,0x8(%edx)
f01083f1:	8b 45 08             	mov    0x8(%ebp),%eax
f01083f4:	8b 40 08             	mov    0x8(%eax),%eax
f01083f7:	66 85 c0             	test   %ax,%ax
f01083fa:	75 0e                	jne    f010840a <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f01083fc:	83 ec 0c             	sub    $0xc,%esp
f01083ff:	ff 75 08             	pushl  0x8(%ebp)
f0108402:	e8 1d ff ff ff       	call   f0108324 <free_frame>
f0108407:	83 c4 10             	add    $0x10,%esp
}
f010840a:	90                   	nop
f010840b:	c9                   	leave  
f010840c:	c3                   	ret    

f010840d <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f010840d:	55                   	push   %ebp
f010840e:	89 e5                	mov    %esp,%ebp
f0108410:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0108413:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108416:	c1 e8 16             	shr    $0x16,%eax
f0108419:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108420:	8b 45 08             	mov    0x8(%ebp),%eax
f0108423:	01 d0                	add    %edx,%eax
f0108425:	8b 00                	mov    (%eax),%eax
f0108427:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f010842a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010842d:	83 e0 01             	and    $0x1,%eax
f0108430:	85 c0                	test   %eax,%eax
f0108432:	74 4e                	je     f0108482 <get_page_table+0x75>
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0108434:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108437:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010843c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010843f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108442:	c1 e8 0c             	shr    $0xc,%eax
f0108445:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108448:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f010844d:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0108450:	72 17                	jb     f0108469 <get_page_table+0x5c>
f0108452:	ff 75 f0             	pushl  -0x10(%ebp)
f0108455:	68 f8 6c 12 f0       	push   $0xf0126cf8
f010845a:	68 fb 00 00 00       	push   $0xfb
f010845f:	68 3b 6c 12 f0       	push   $0xf0126c3b
f0108464:	e8 b1 7e ff ff       	call   f010031a <_panic>
f0108469:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010846c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0108471:	89 c2                	mov    %eax,%edx
f0108473:	8b 45 10             	mov    0x10(%ebp),%eax
f0108476:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0108478:	b8 00 00 00 00       	mov    $0x0,%eax
f010847d:	e9 8f 00 00 00       	jmp    f0108511 <get_page_table+0x104>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0108482:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108486:	74 7b                	je     f0108503 <get_page_table+0xf6>
f0108488:	8b 45 0c             	mov    0xc(%ebp),%eax
f010848b:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f010848e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108491:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0108494:	83 ec 0c             	sub    $0xc,%esp
f0108497:	6a 00                	push   $0x0
f0108499:	e8 57 63 00 00       	call   f010e7f5 <fault_handler>
f010849e:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01084a1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01084a4:	c1 e8 16             	shr    $0x16,%eax
f01084a7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01084ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01084b1:	01 d0                	add    %edx,%eax
f01084b3:	8b 00                	mov    (%eax),%eax
f01084b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f01084b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01084bb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01084c0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01084c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01084c6:	c1 e8 0c             	shr    $0xc,%eax
f01084c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01084cc:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f01084d1:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f01084d4:	72 17                	jb     f01084ed <get_page_table+0xe0>
f01084d6:	ff 75 e8             	pushl  -0x18(%ebp)
f01084d9:	68 f8 6c 12 f0       	push   $0xf0126cf8
f01084de:	68 13 01 00 00       	push   $0x113
f01084e3:	68 3b 6c 12 f0       	push   $0xf0126c3b
f01084e8:	e8 2d 7e ff ff       	call   f010031a <_panic>
f01084ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01084f0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01084f5:	89 c2                	mov    %eax,%edx
f01084f7:	8b 45 10             	mov    0x10(%ebp),%eax
f01084fa:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f01084fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0108501:	eb 0e                	jmp    f0108511 <get_page_table+0x104>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0108503:	8b 45 10             	mov    0x10(%ebp),%eax
f0108506:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f010850c:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0108511:	c9                   	leave  
f0108512:	c3                   	ret    

f0108513 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0108513:	55                   	push   %ebp
f0108514:	89 e5                	mov    %esp,%ebp
f0108516:	83 ec 18             	sub    $0x18,%esp
	memset(ptr_page_table , 0, PAGE_SIZE);
	tlbflush();

#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
f0108519:	83 ec 04             	sub    $0x4,%esp
f010851c:	8d 45 f4             	lea    -0xc(%ebp),%eax
f010851f:	50                   	push   %eax
f0108520:	ff 75 0c             	pushl  0xc(%ebp)
f0108523:	ff 75 08             	pushl  0x8(%ebp)
f0108526:	e8 08 00 00 00       	call   f0108533 <__static_cpt>
f010852b:	83 c4 10             	add    $0x10,%esp
#endif

	//cprintf("KERNEL: NEW TABLE for va %x \n", virtual_address);

	return ptr_page_table;
f010852e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0108531:	c9                   	leave  
f0108532:	c3                   	ret    

f0108533 <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0108533:	55                   	push   %ebp
f0108534:	89 e5                	mov    %esp,%ebp
f0108536:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0108539:	83 ec 0c             	sub    $0xc,%esp
f010853c:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010853f:	50                   	push   %eax
f0108540:	e8 8b fc ff ff       	call   f01081d0 <allocate_frame>
f0108545:	83 c4 10             	add    $0x10,%esp
f0108548:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f010854b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010854e:	83 ec 0c             	sub    $0xc,%esp
f0108551:	50                   	push   %eax
f0108552:	e8 27 f8 ff ff       	call   f0107d7e <to_physical_address>
f0108557:	83 c4 10             	add    $0x10,%esp
f010855a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f010855d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108560:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108563:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108566:	c1 e8 0c             	shr    $0xc,%eax
f0108569:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010856c:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f0108571:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0108574:	72 17                	jb     f010858d <__static_cpt+0x5a>
f0108576:	ff 75 ec             	pushl  -0x14(%ebp)
f0108579:	68 f8 6c 12 f0       	push   $0xf0126cf8
f010857e:	68 4e 01 00 00       	push   $0x14e
f0108583:	68 3b 6c 12 f0       	push   $0xf0126c3b
f0108588:	e8 8d 7d ff ff       	call   f010031a <_panic>
f010858d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108590:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0108595:	89 c2                	mov    %eax,%edx
f0108597:	8b 45 10             	mov    0x10(%ebp),%eax
f010859a:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f010859c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010859f:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f01085a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01085a8:	c1 e8 16             	shr    $0x16,%eax
f01085ab:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01085b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01085b5:	01 d0                	add    %edx,%eax
f01085b7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01085ba:	83 ca 07             	or     $0x7,%edx
f01085bd:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f01085bf:	8b 45 10             	mov    0x10(%ebp),%eax
f01085c2:	8b 00                	mov    (%eax),%eax
f01085c4:	83 ec 04             	sub    $0x4,%esp
f01085c7:	68 00 10 00 00       	push   $0x1000
f01085cc:	6a 00                	push   $0x0
f01085ce:	50                   	push   %eax
f01085cf:	e8 52 a0 01 00       	call   f0122626 <memset>
f01085d4:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01085d7:	0f 20 d8             	mov    %cr3,%eax
f01085da:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01085dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01085e0:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f01085e3:	90                   	nop
f01085e4:	c9                   	leave  
f01085e5:	c3                   	ret    

f01085e6 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f01085e6:	55                   	push   %ebp
f01085e7:	89 e5                	mov    %esp,%ebp
f01085e9:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f01085ec:	ff 75 0c             	pushl  0xc(%ebp)
f01085ef:	e8 8a f7 ff ff       	call   f0107d7e <to_physical_address>
f01085f4:	83 c4 04             	add    $0x4,%esp
f01085f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f01085fa:	83 ec 04             	sub    $0x4,%esp
f01085fd:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0108600:	50                   	push   %eax
f0108601:	ff 75 10             	pushl  0x10(%ebp)
f0108604:	ff 75 08             	pushl  0x8(%ebp)
f0108607:	e8 01 fe ff ff       	call   f010840d <get_page_table>
f010860c:	83 c4 10             	add    $0x10,%esp
f010860f:	83 f8 01             	cmp    $0x1,%eax
f0108612:	75 15                	jne    f0108629 <map_frame+0x43>
			uint32* ptr_page_table2 =NULL;
			//cprintf("======> After the table created at %x\n\n", get_page_table(ptr_page_directory, virtual_address,&ptr_page_table2));
		}
#else
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
f0108614:	83 ec 04             	sub    $0x4,%esp
f0108617:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010861a:	50                   	push   %eax
f010861b:	ff 75 10             	pushl  0x10(%ebp)
f010861e:	ff 75 08             	pushl  0x8(%ebp)
f0108621:	e8 0d ff ff ff       	call   f0108533 <__static_cpt>
f0108626:	83 c4 10             	add    $0x10,%esp
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0108629:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010862c:	8b 55 10             	mov    0x10(%ebp),%edx
f010862f:	c1 ea 0c             	shr    $0xc,%edx
f0108632:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108638:	c1 e2 02             	shl    $0x2,%edx
f010863b:	01 d0                	add    %edx,%eax
f010863d:	8b 00                	mov    (%eax),%eax
f010863f:	89 45 f0             	mov    %eax,-0x10(%ebp)

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0108642:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108645:	83 e0 01             	and    $0x1,%eax
f0108648:	85 c0                	test   %eax,%eax
f010864a:	74 25                	je     f0108671 <map_frame+0x8b>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f010864c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010864f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108654:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108657:	75 07                	jne    f0108660 <map_frame+0x7a>
			return 0;
f0108659:	b8 00 00 00 00       	mov    $0x0,%eax
f010865e:	eb 68                	jmp    f01086c8 <map_frame+0xe2>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0108660:	83 ec 08             	sub    $0x8,%esp
f0108663:	ff 75 10             	pushl  0x10(%ebp)
f0108666:	ff 75 08             	pushl  0x8(%ebp)
f0108669:	e8 d2 00 00 00       	call   f0108740 <unmap_frame>
f010866e:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0108671:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108674:	8b 40 08             	mov    0x8(%eax),%eax
f0108677:	40                   	inc    %eax
f0108678:	8b 55 0c             	mov    0xc(%ebp),%edx
f010867b:	66 89 42 08          	mov    %ax,0x8(%edx)

	/*********************************************************************************/
	/*NEW'23 el7:)
	 * [DONE] map_frame(): KEEP THE VALUES OF THE AVAILABLE BITS*/
	uint32 pte_available_bits = ptr_page_table[PTX(virtual_address)] & PERM_AVAILABLE;
f010867f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108682:	8b 55 10             	mov    0x10(%ebp),%edx
f0108685:	c1 ea 0c             	shr    $0xc,%edx
f0108688:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010868e:	c1 e2 02             	shl    $0x2,%edx
f0108691:	01 d0                	add    %edx,%eax
f0108693:	8b 00                	mov    (%eax),%eax
f0108695:	25 00 0e 00 00       	and    $0xe00,%eax
f010869a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , pte_available_bits | perm | PERM_PRESENT);
f010869d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01086a0:	8b 55 10             	mov    0x10(%ebp),%edx
f01086a3:	c1 ea 0c             	shr    $0xc,%edx
f01086a6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01086ac:	c1 e2 02             	shl    $0x2,%edx
f01086af:	01 c2                	add    %eax,%edx
f01086b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01086b4:	0b 45 ec             	or     -0x14(%ebp),%eax
f01086b7:	89 c1                	mov    %eax,%ecx
f01086b9:	8b 45 14             	mov    0x14(%ebp),%eax
f01086bc:	09 c8                	or     %ecx,%eax
f01086be:	83 c8 01             	or     $0x1,%eax
f01086c1:	89 02                	mov    %eax,(%edx)
	/*********************************************************************************/

	return 0;
f01086c3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01086c8:	c9                   	leave  
f01086c9:	c3                   	ret    

f01086ca <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f01086ca:	55                   	push   %ebp
f01086cb:	89 e5                	mov    %esp,%ebp
f01086cd:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f01086d0:	83 ec 04             	sub    $0x4,%esp
f01086d3:	ff 75 10             	pushl  0x10(%ebp)
f01086d6:	ff 75 0c             	pushl  0xc(%ebp)
f01086d9:	ff 75 08             	pushl  0x8(%ebp)
f01086dc:	e8 2c fd ff ff       	call   f010840d <get_page_table>
f01086e1:	83 c4 10             	add    $0x10,%esp
f01086e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f01086e7:	8b 45 10             	mov    0x10(%ebp),%eax
f01086ea:	8b 00                	mov    (%eax),%eax
f01086ec:	85 c0                	test   %eax,%eax
f01086ee:	74 49                	je     f0108739 <get_frame_info+0x6f>
	{
		uint32 index_page_table = PTX(virtual_address);
f01086f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01086f3:	c1 e8 0c             	shr    $0xc,%eax
f01086f6:	25 ff 03 00 00       	and    $0x3ff,%eax
f01086fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f01086fe:	8b 45 10             	mov    0x10(%ebp),%eax
f0108701:	8b 00                	mov    (%eax),%eax
f0108703:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108706:	c1 e2 02             	shl    $0x2,%edx
f0108709:	01 d0                	add    %edx,%eax
f010870b:	8b 00                	mov    (%eax),%eax
f010870d:	89 45 ec             	mov    %eax,-0x14(%ebp)

		/*2023 el7:)*///Make sure it has a frame number other than 0 (not just a marked page from the page allocator)
		//if( page_table_entry != 0)
		if( (page_table_entry & ~0xFFF) != 0)
f0108710:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108713:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108718:	85 c0                	test   %eax,%eax
f010871a:	74 16                	je     f0108732 <get_frame_info+0x68>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f010871c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010871f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108724:	83 ec 0c             	sub    $0xc,%esp
f0108727:	50                   	push   %eax
f0108728:	e8 64 f6 ff ff       	call   f0107d91 <to_frame_info>
f010872d:	83 c4 10             	add    $0x10,%esp
f0108730:	eb 0c                	jmp    f010873e <get_frame_info+0x74>
		}
		return 0;
f0108732:	b8 00 00 00 00       	mov    $0x0,%eax
f0108737:	eb 05                	jmp    f010873e <get_frame_info+0x74>
	}
	return 0;
f0108739:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010873e:	c9                   	leave  
f010873f:	c3                   	ret    

f0108740 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0108740:	55                   	push   %ebp
f0108741:	89 e5                	mov    %esp,%ebp
f0108743:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0108746:	83 ec 04             	sub    $0x4,%esp
f0108749:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010874c:	50                   	push   %eax
f010874d:	ff 75 0c             	pushl  0xc(%ebp)
f0108750:	ff 75 08             	pushl  0x8(%ebp)
f0108753:	e8 72 ff ff ff       	call   f01086ca <get_frame_info>
f0108758:	83 c4 10             	add    $0x10,%esp
f010875b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f010875e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108762:	74 7d                	je     f01087e1 <unmap_frame+0xa1>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0108764:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108767:	8a 40 14             	mov    0x14(%eax),%al
f010876a:	84 c0                	test   %al,%al
f010876c:	74 1c                	je     f010878a <unmap_frame+0x4a>
f010876e:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0108775:	77 13                	ja     f010878a <unmap_frame+0x4a>
			cprintf("WARNING: Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0108777:	83 ec 08             	sub    $0x8,%esp
f010877a:	ff 75 0c             	pushl  0xc(%ebp)
f010877d:	68 28 6d 12 f0       	push   $0xf0126d28
f0108782:	e8 e5 87 ff ff       	call   f0100f6c <cprintf>
f0108787:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f010878a:	83 ec 0c             	sub    $0xc,%esp
f010878d:	ff 75 f4             	pushl  -0xc(%ebp)
f0108790:	e8 48 fc ff ff       	call   f01083dd <decrement_references>
f0108795:	83 c4 10             	add    $0x10,%esp

		/*********************************************************************************/
		/*NEW'23 el7:)
		 * [DONE] unmap_frame(): KEEP THE VALUES OF THE AVAILABLE BITS*/
		uint32 pte_available_bits = ptr_page_table[PTX(virtual_address)] & PERM_AVAILABLE;
f0108798:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010879b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010879e:	c1 ea 0c             	shr    $0xc,%edx
f01087a1:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01087a7:	c1 e2 02             	shl    $0x2,%edx
f01087aa:	01 d0                	add    %edx,%eax
f01087ac:	8b 00                	mov    (%eax),%eax
f01087ae:	25 00 0e 00 00       	and    $0xe00,%eax
f01087b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_page_table[PTX(virtual_address)] = pte_available_bits;
f01087b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01087b9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01087bc:	c1 ea 0c             	shr    $0xc,%edx
f01087bf:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01087c5:	c1 e2 02             	shl    $0x2,%edx
f01087c8:	01 c2                	add    %eax,%edx
f01087ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01087cd:	89 02                	mov    %eax,(%edx)
		/*********************************************************************************/

		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f01087cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01087d2:	83 ec 08             	sub    $0x8,%esp
f01087d5:	50                   	push   %eax
f01087d6:	ff 75 08             	pushl  0x8(%ebp)
f01087d9:	e8 f9 f5 ff ff       	call   f0107dd7 <tlb_invalidate>
f01087de:	83 c4 10             	add    $0x10,%esp
	}
}
f01087e1:	90                   	nop
f01087e2:	c9                   	leave  
f01087e3:	c3                   	ret    

f01087e4 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f01087e4:	55                   	push   %ebp
f01087e5:	89 e5                	mov    %esp,%ebp
f01087e7:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f01087ea:	ff 75 0c             	pushl  0xc(%ebp)
f01087ed:	e8 8c f5 ff ff       	call   f0107d7e <to_physical_address>
f01087f2:	83 c4 04             	add    $0x4,%esp
f01087f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01087f8:	8b 45 10             	mov    0x10(%ebp),%eax
f01087fb:	c1 e8 16             	shr    $0x16,%eax
f01087fe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108805:	8b 45 08             	mov    0x8(%ebp),%eax
f0108808:	01 d0                	add    %edx,%eax
f010880a:	8b 00                	mov    (%eax),%eax
f010880c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f010880f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108812:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108817:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010881a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010881d:	c1 e8 0c             	shr    $0xc,%eax
f0108820:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108823:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f0108828:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f010882b:	72 17                	jb     f0108844 <loadtime_map_frame+0x60>
f010882d:	ff 75 ec             	pushl  -0x14(%ebp)
f0108830:	68 f8 6c 12 f0       	push   $0xf0126cf8
f0108835:	68 f9 01 00 00       	push   $0x1f9
f010883a:	68 3b 6c 12 f0       	push   $0xf0126c3b
f010883f:	e8 d6 7a ff ff       	call   f010031a <_panic>
f0108844:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108847:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010884c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f010884f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108853:	75 15                	jne    f010886a <loadtime_map_frame+0x86>
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
		}
#else
		{
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
f0108855:	83 ec 04             	sub    $0x4,%esp
f0108858:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f010885b:	50                   	push   %eax
f010885c:	ff 75 10             	pushl  0x10(%ebp)
f010885f:	ff 75 08             	pushl  0x8(%ebp)
f0108862:	e8 cc fc ff ff       	call   f0108533 <__static_cpt>
f0108867:	83 c4 10             	add    $0x10,%esp
		}
#endif
	}

	ptr_frame_info->references++;
f010886a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010886d:	8b 40 08             	mov    0x8(%eax),%eax
f0108870:	40                   	inc    %eax
f0108871:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108874:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0108878:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010887b:	8b 55 10             	mov    0x10(%ebp),%edx
f010887e:	c1 ea 0c             	shr    $0xc,%edx
f0108881:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108887:	c1 e2 02             	shl    $0x2,%edx
f010888a:	01 c2                	add    %eax,%edx
f010888c:	8b 45 14             	mov    0x14(%ebp),%eax
f010888f:	0b 45 f4             	or     -0xc(%ebp),%eax
f0108892:	83 c8 01             	or     $0x1,%eax
f0108895:	89 02                	mov    %eax,(%edx)

	return 0;
f0108897:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010889c:	c9                   	leave  
f010889d:	c3                   	ret    

f010889e <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f010889e:	55                   	push   %ebp
f010889f:	89 e5                	mov    %esp,%ebp
f01088a1:	57                   	push   %edi
f01088a2:	56                   	push   %esi
f01088a3:	53                   	push   %ebx
f01088a4:	83 ec 2c             	sub    $0x2c,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f01088a7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 totalFreeBuffered = 0 ;
f01088ae:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	uint32 totalModified = 0 ;
f01088b5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	bool lock_is_held = holding_spinlock(&MemFrameLists.mfllock);
f01088bc:	83 ec 0c             	sub    $0xc,%esp
f01088bf:	68 e0 ee 59 f0       	push   $0xf059eee0
f01088c4:	e8 71 64 00 00       	call   f010ed3a <holding_spinlock>
f01088c9:	83 c4 10             	add    $0x10,%esp
f01088cc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if (!lock_is_held)
f01088cf:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01088d3:	75 10                	jne    f01088e5 <calculate_available_frames+0x47>
	{
		acquire_spinlock(&MemFrameLists.mfllock);
f01088d5:	83 ec 0c             	sub    $0xc,%esp
f01088d8:	68 e0 ee 59 f0       	push   $0xf059eee0
f01088dd:	e8 3f 62 00 00       	call   f010eb21 <acquire_spinlock>
f01088e2:	83 c4 10             	add    $0x10,%esp
	}
	{
		//calculate the free frames from the free frame list

		LIST_FOREACH(ptr, &MemFrameLists.free_frame_list)
f01088e5:	a1 c0 ee 59 f0       	mov    0xf059eec0,%eax
f01088ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01088ed:	eb 1a                	jmp    f0108909 <calculate_available_frames+0x6b>
		{
			if (ptr->isBuffered)
f01088ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01088f2:	8a 40 14             	mov    0x14(%eax),%al
f01088f5:	84 c0                	test   %al,%al
f01088f7:	74 05                	je     f01088fe <calculate_available_frames+0x60>
				totalFreeBuffered++ ;
f01088f9:	ff 45 dc             	incl   -0x24(%ebp)
f01088fc:	eb 03                	jmp    f0108901 <calculate_available_frames+0x63>
			else
				totalFreeUnBuffered++ ;
f01088fe:	ff 45 e0             	incl   -0x20(%ebp)
		acquire_spinlock(&MemFrameLists.mfllock);
	}
	{
		//calculate the free frames from the free frame list

		LIST_FOREACH(ptr, &MemFrameLists.free_frame_list)
f0108901:	a1 c8 ee 59 f0       	mov    0xf059eec8,%eax
f0108906:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108909:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010890d:	74 07                	je     f0108916 <calculate_available_frames+0x78>
f010890f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108912:	8b 00                	mov    (%eax),%eax
f0108914:	eb 05                	jmp    f010891b <calculate_available_frames+0x7d>
f0108916:	b8 00 00 00 00       	mov    $0x0,%eax
f010891b:	a3 c8 ee 59 f0       	mov    %eax,0xf059eec8
f0108920:	a1 c8 ee 59 f0       	mov    0xf059eec8,%eax
f0108925:	85 c0                	test   %eax,%eax
f0108927:	75 c6                	jne    f01088ef <calculate_available_frames+0x51>
f0108929:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010892d:	75 c0                	jne    f01088ef <calculate_available_frames+0x51>
			else
				totalFreeUnBuffered++ ;
		}

		/*2023: UPDATE based on suggestion from T112 2023.Term1*/
		totalModified= LIST_SIZE(&MemFrameLists.modified_frame_list);
f010892f:	a1 dc ee 59 f0       	mov    0xf059eedc,%eax
f0108934:	89 45 d8             	mov    %eax,-0x28(%ebp)
		//	LIST_FOREACH(ptr, &modified_frame_list)
		//	{
		//		totalModified++ ;
		//	}
	}
	if (!lock_is_held)
f0108937:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f010893b:	75 10                	jne    f010894d <calculate_available_frames+0xaf>
	{
		release_spinlock(&MemFrameLists.mfllock);
f010893d:	83 ec 0c             	sub    $0xc,%esp
f0108940:	68 e0 ee 59 f0       	push   $0xf059eee0
f0108945:	e8 5e 62 00 00       	call   f010eba8 <release_spinlock>
f010894a:	83 c4 10             	add    $0x10,%esp
	}
	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f010894d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108950:	89 45 c8             	mov    %eax,-0x38(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0108953:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108956:	89 45 cc             	mov    %eax,-0x34(%ebp)
	counters.modified = totalModified;
f0108959:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010895c:	89 45 d0             	mov    %eax,-0x30(%ebp)
	return counters;
f010895f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108962:	89 c3                	mov    %eax,%ebx
f0108964:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0108967:	ba 03 00 00 00       	mov    $0x3,%edx
f010896c:	89 df                	mov    %ebx,%edi
f010896e:	89 c6                	mov    %eax,%esi
f0108970:	89 d1                	mov    %edx,%ecx
f0108972:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f0108974:	8b 45 08             	mov    0x8(%ebp),%eax
f0108977:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010897a:	5b                   	pop    %ebx
f010897b:	5e                   	pop    %esi
f010897c:	5f                   	pop    %edi
f010897d:	5d                   	pop    %ebp
f010897e:	c2 04 00             	ret    $0x4

f0108981 <sharing_init>:
//===========================
// [1] INITIALIZE SHARES:
//===========================
//Initialize the list and the corresponding lock
void sharing_init(uint32 numOfElements)
{
f0108981:	55                   	push   %ebp
f0108982:	89 e5                	mov    %esp,%ebp
f0108984:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	LIST_INIT(&AllShares.shares_list) ;
	init_spinlock(&AllShares.shareslock, "shares lock");
#else
	panic("not handled when KERN HEAP is disabled");
f0108987:	83 ec 04             	sub    $0x4,%esp
f010898a:	68 58 6d 12 f0       	push   $0xf0126d58
f010898f:	6a 1e                	push   $0x1e
f0108991:	68 80 6d 12 f0       	push   $0xf0126d80
f0108996:	e8 7f 79 ff ff       	call   f010031a <_panic>

f010899b <create_share>:
//=====================================
//Allocates a new shared object and initialize its member
//It dynamically creates the "framesStorage"
//Return: allocatedObject (pointer to struct Share) passed by reference
struct Share* create_share(int32 ownerID, char* shareName, uint32 size, uint8 isWritable)
{
f010899b:	55                   	push   %ebp
f010899c:	89 e5                	mov    %esp,%ebp
f010899e:	83 ec 18             	sub    $0x18,%esp
f01089a1:	8b 45 14             	mov    0x14(%ebp),%eax
f01089a4:	88 45 f4             	mov    %al,-0xc(%ebp)
	//[PROJECT'24.MS2]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("create_share is not implemented yet");
f01089a7:	83 ec 04             	sub    $0x4,%esp
f01089aa:	68 a4 6d 12 f0       	push   $0xf0126da4
f01089af:	6a 32                	push   $0x32
f01089b1:	68 80 6d 12 f0       	push   $0xf0126d80
f01089b6:	e8 5f 79 ff ff       	call   f010031a <_panic>

f01089bb <get_share>:
//Search for the given shared object in the "shares_list"
//Return:
//	a) if found: ptr to Share object
//	b) else: NULL
struct Share* get_share(int32 ownerID, char* name)
{
f01089bb:	55                   	push   %ebp
f01089bc:	89 e5                	mov    %esp,%ebp
f01089be:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("get_share is not implemented yet");
f01089c1:	83 ec 04             	sub    $0x4,%esp
f01089c4:	68 c8 6d 12 f0       	push   $0xf0126dc8
f01089c9:	6a 42                	push   $0x42
f01089cb:	68 80 6d 12 f0       	push   $0xf0126d80
f01089d0:	e8 45 79 ff ff       	call   f010031a <_panic>

f01089d5 <free_share>:
// [3] Delete Share Object:
//=========================
//delete the given shared object from the "shares_list"
//it should free its framesStorage and the share object itself
void free_share(struct Share* ptrShare)
{
f01089d5:	55                   	push   %ebp
f01089d6:	89 e5                	mov    %esp,%ebp
f01089d8:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] BONUS
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("free_share is not implemented yet");
f01089db:	83 ec 04             	sub    $0x4,%esp
f01089de:	68 ec 6d 12 f0       	push   $0xf0126dec
f01089e3:	6a 50                	push   $0x50
f01089e5:	68 80 6d 12 f0       	push   $0xf0126d80
f01089ea:	e8 2b 79 ff ff       	call   f010031a <_panic>

f01089ef <create_frames_storage>:
//===========================
// [4] Create frames_storage:
//===========================
// Create the frames_storage and initialize it by 0
inline struct FrameInfo** create_frames_storage(int numOfFrames)
{
f01089ef:	55                   	push   %ebp
f01089f0:	89 e5                	mov    %esp,%ebp
f01089f2:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("create_frames_storage is not implemented yet");
f01089f5:	83 ec 04             	sub    $0x4,%esp
f01089f8:	68 10 6e 12 f0       	push   $0xf0126e10
f01089fd:	6a 5c                	push   $0x5c
f01089ff:	68 80 6d 12 f0       	push   $0xf0126d80
f0108a04:	e8 11 79 ff ff       	call   f010031a <_panic>

f0108a09 <createSharedObject>:

//=========================
// [5] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0108a09:	55                   	push   %ebp
f0108a0a:	89 e5                	mov    %esp,%ebp
f0108a0c:	83 ec 18             	sub    $0x18,%esp
f0108a0f:	8b 45 14             	mov    0x14(%ebp),%eax
f0108a12:	88 45 f4             	mov    %al,-0xc(%ebp)
	//[PROJECT'24.MS2]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("createSharedObject is not implemented yet");
f0108a15:	83 ec 04             	sub    $0x4,%esp
f0108a18:	68 40 6e 12 f0       	push   $0xf0126e40
f0108a1d:	6a 68                	push   $0x68
f0108a1f:	68 80 6d 12 f0       	push   $0xf0126d80
f0108a24:	e8 f1 78 ff ff       	call   f010031a <_panic>

f0108a29 <getSizeOfSharedObject>:

//==============================
// [6] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0108a29:	55                   	push   %ebp
f0108a2a:	89 e5                	mov    %esp,%ebp
f0108a2c:	83 ec 18             	sub    $0x18,%esp
	// This function should return the size of the given shared object
	// RETURN:
	//	a) If found, return size of shared object
	//	b) Else, return E_SHARED_MEM_NOT_EXISTS
	//
	struct Share* ptr_share = get_share(ownerID, shareName);
f0108a2f:	83 ec 08             	sub    $0x8,%esp
f0108a32:	ff 75 0c             	pushl  0xc(%ebp)
f0108a35:	ff 75 08             	pushl  0x8(%ebp)
f0108a38:	e8 7e ff ff ff       	call   f01089bb <get_share>
f0108a3d:	83 c4 10             	add    $0x10,%esp
f0108a40:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (ptr_share == NULL)
f0108a43:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108a47:	75 07                	jne    f0108a50 <getSizeOfSharedObject+0x27>
		return E_SHARED_MEM_NOT_EXISTS;
f0108a49:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0108a4e:	eb 06                	jmp    f0108a56 <getSizeOfSharedObject+0x2d>
	else
		return ptr_share->size;
f0108a50:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108a53:	8b 40 48             	mov    0x48(%eax),%eax

	return 0;
}
f0108a56:	c9                   	leave  
f0108a57:	c3                   	ret    

f0108a58 <getSharedObject>:

//======================
// [7] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0108a58:	55                   	push   %ebp
f0108a59:	89 e5                	mov    %esp,%ebp
f0108a5b:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("getSharedObject is not implemented yet");
f0108a5e:	83 ec 04             	sub    $0x4,%esp
f0108a61:	68 6c 6e 12 f0       	push   $0xf0126e6c
f0108a66:	68 89 00 00 00       	push   $0x89
f0108a6b:	68 80 6d 12 f0       	push   $0xf0126d80
f0108a70:	e8 a5 78 ff ff       	call   f010031a <_panic>

f0108a75 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f0108a75:	55                   	push   %ebp
f0108a76:	89 e5                	mov    %esp,%ebp
f0108a78:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] BONUS
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("freeSharedObject is not implemented yet");
f0108a7b:	83 ec 04             	sub    $0x4,%esp
f0108a7e:	68 94 6e 12 f0       	push   $0xf0126e94
f0108a83:	68 9a 00 00 00       	push   $0x9a
f0108a88:	68 80 6d 12 f0       	push   $0xf0126d80
f0108a8d:	e8 88 78 ff ff       	call   f010031a <_panic>

f0108a92 <initialize_kheap_dynamic_allocator>:
//Remember: call the initialize_dynamic_allocator(..) to complete the initialization
//Return:
//	On success: 0
//	Otherwise (if no memory OR initial size exceed the given limit): E_NO_MEM
int initialize_kheap_dynamic_allocator(uint32 daStart, uint32 initSizeToAllocate, uint32 daLimit)
{
f0108a92:	55                   	push   %ebp
f0108a93:	89 e5                	mov    %esp,%ebp
f0108a95:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] [USER HEAP - KERNEL SIDE] initialize_kheap_dynamic_allocator
	// Write your code here, remove the panic and write your code
	panic("initialize_kheap_dynamic_allocator() is not implemented yet...!!");
f0108a98:	83 ec 04             	sub    $0x4,%esp
f0108a9b:	68 bc 6e 12 f0       	push   $0xf0126ebc
f0108aa0:	6a 11                	push   $0x11
f0108aa2:	68 fd 6e 12 f0       	push   $0xf0126efd
f0108aa7:	e8 6e 78 ff ff       	call   f010031a <_panic>

f0108aac <sbrk>:
}

void* sbrk(int numOfPages)
{
f0108aac:	55                   	push   %ebp
f0108aad:	89 e5                	mov    %esp,%ebp
	 * 	1) Allocating additional pages for a kernel dynamic allocator will fail if the free frames are exhausted
	 * 		or the break exceed the limit of the dynamic allocator. If sbrk fails, kernel should panic(...)
	 */

	//MS2: COMMENT THIS LINE BEFORE START CODING====
	return (void*)-1 ;
f0108aaf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	//====================================================

	//[PROJECT'24.MS2] Implement this function
	// Write your code here, remove the panic and write your code
	panic("sbrk() is not implemented yet...!!");
}
f0108ab4:	5d                   	pop    %ebp
f0108ab5:	c3                   	ret    

f0108ab6 <kmalloc>:


void* kmalloc(unsigned int size)
{
f0108ab6:	55                   	push   %ebp
f0108ab7:	89 e5                	mov    %esp,%ebp
f0108ab9:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] Implement this function
	// Write your code here, remove the panic and write your code
	kpanic_into_prompt("kmalloc() is not implemented yet...!!");
f0108abc:	83 ec 04             	sub    $0x4,%esp
f0108abf:	68 10 6f 12 f0       	push   $0xf0126f10
f0108ac4:	6a 2e                	push   $0x2e
f0108ac6:	68 fd 6e 12 f0       	push   $0xf0126efd
f0108acb:	e8 75 79 ff ff       	call   f0100445 <_panic_into_prompt>

f0108ad0 <kfree>:
	// use "isKHeapPlacementStrategyFIRSTFIT() ..." functions to check the current strategy

}

void kfree(void* virtual_address)
{
f0108ad0:	55                   	push   %ebp
f0108ad1:	89 e5                	mov    %esp,%ebp
f0108ad3:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] Implement this function
	// Write your code here, remove the panic and write your code
	panic("kfree() is not implemented yet...!!");
f0108ad6:	83 ec 04             	sub    $0x4,%esp
f0108ad9:	68 38 6f 12 f0       	push   $0xf0126f38
f0108ade:	6a 38                	push   $0x38
f0108ae0:	68 fd 6e 12 f0       	push   $0xf0126efd
f0108ae5:	e8 30 78 ff ff       	call   f010031a <_panic>

f0108aea <kheap_virtual_address>:
	//refer to the project presentation and documentation for details

}

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0108aea:	55                   	push   %ebp
f0108aeb:	89 e5                	mov    %esp,%ebp
f0108aed:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
	panic("kheap_virtual_address() is not implemented yet...!!");
f0108af0:	83 ec 04             	sub    $0x4,%esp
f0108af3:	68 5c 6f 12 f0       	push   $0xf0126f5c
f0108af8:	6a 43                	push   $0x43
f0108afa:	68 fd 6e 12 f0       	push   $0xf0126efd
f0108aff:	e8 16 78 ff ff       	call   f010031a <_panic>

f0108b04 <kheap_physical_address>:

	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0108b04:	55                   	push   %ebp
f0108b05:	89 e5                	mov    %esp,%ebp
f0108b07:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	panic("kheap_physical_address() is not implemented yet...!!");
f0108b0a:	83 ec 04             	sub    $0x4,%esp
f0108b0d:	68 90 6f 12 f0       	push   $0xf0126f90
f0108b12:	6a 4f                	push   $0x4f
f0108b14:	68 fd 6e 12 f0       	push   $0xf0126efd
f0108b19:	e8 fc 77 ff ff       	call   f010031a <_panic>

f0108b1e <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0108b1e:	55                   	push   %ebp
f0108b1f:	89 e5                	mov    %esp,%ebp
	//[PROJECT'24.MS2 BONUS2] Kernel Heap Realloc
	// Write your code here, remove the panic and write your code
	return NULL;
f0108b21:	b8 00 00 00 00       	mov    $0x0,%eax
	panic("krealloc() is not implemented yet...!!");
}
f0108b26:	5d                   	pop    %ebp
f0108b27:	c3                   	ret    

f0108b28 <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0108b28:	55                   	push   %ebp
f0108b29:	89 e5                	mov    %esp,%ebp
f0108b2b:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108b2e:	83 ec 04             	sub    $0x4,%esp
f0108b31:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108b34:	50                   	push   %eax
f0108b35:	ff 75 0c             	pushl  0xc(%ebp)
f0108b38:	ff 75 08             	pushl  0x8(%ebp)
f0108b3b:	e8 cd f8 ff ff       	call   f010840d <get_page_table>
f0108b40:	83 c4 10             	add    $0x10,%esp
f0108b43:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f0108b46:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b49:	85 c0                	test   %eax,%eax
f0108b4b:	74 64                	je     f0108bb1 <pt_set_page_permissions+0x89>
	{
		ptr_page_table[PTX(virtual_address)] |= (permissions_to_set);
f0108b4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b50:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b53:	c1 ea 0c             	shr    $0xc,%edx
f0108b56:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108b5c:	c1 e2 02             	shl    $0x2,%edx
f0108b5f:	01 c2                	add    %eax,%edx
f0108b61:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b64:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0108b67:	c1 e9 0c             	shr    $0xc,%ecx
f0108b6a:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108b70:	c1 e1 02             	shl    $0x2,%ecx
f0108b73:	01 c8                	add    %ecx,%eax
f0108b75:	8b 00                	mov    (%eax),%eax
f0108b77:	0b 45 10             	or     0x10(%ebp),%eax
f0108b7a:	89 02                	mov    %eax,(%edx)
		ptr_page_table[PTX(virtual_address)] &= (~permissions_to_clear);
f0108b7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b7f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b82:	c1 ea 0c             	shr    $0xc,%edx
f0108b85:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108b8b:	c1 e2 02             	shl    $0x2,%edx
f0108b8e:	01 d0                	add    %edx,%eax
f0108b90:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108b93:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0108b96:	c1 e9 0c             	shr    $0xc,%ecx
f0108b99:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108b9f:	c1 e1 02             	shl    $0x2,%ecx
f0108ba2:	01 ca                	add    %ecx,%edx
f0108ba4:	8b 12                	mov    (%edx),%edx
f0108ba6:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0108ba9:	f7 d1                	not    %ecx
f0108bab:	21 ca                	and    %ecx,%edx
f0108bad:	89 10                	mov    %edx,(%eax)
f0108baf:	eb 27                	jmp    f0108bd8 <pt_set_page_permissions+0xb0>

	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		cprintf("va=%x not exist and has no page table\n", virtual_address);
f0108bb1:	83 ec 08             	sub    $0x8,%esp
f0108bb4:	ff 75 0c             	pushl  0xc(%ebp)
f0108bb7:	68 c8 6f 12 f0       	push   $0xf0126fc8
f0108bbc:	e8 ab 83 ff ff       	call   f0100f6c <cprintf>
f0108bc1:	83 c4 10             	add    $0x10,%esp
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_set_page_permissions() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0108bc4:	83 ec 04             	sub    $0x4,%esp
f0108bc7:	68 f0 6f 12 f0       	push   $0xf0126ff0
f0108bcc:	6a 1c                	push   $0x1c
f0108bce:	68 64 70 12 f0       	push   $0xf0127064
f0108bd3:	e8 42 77 ff ff       	call   f010031a <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108bd8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108bdb:	83 ec 08             	sub    $0x8,%esp
f0108bde:	50                   	push   %eax
f0108bdf:	6a 00                	push   $0x0
f0108be1:	e8 f1 f1 ff ff       	call   f0107dd7 <tlb_invalidate>
f0108be6:	83 c4 10             	add    $0x10,%esp
}
f0108be9:	90                   	nop
f0108bea:	c9                   	leave  
f0108beb:	c3                   	ret    

f0108bec <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0108bec:	55                   	push   %ebp
f0108bed:	89 e5                	mov    %esp,%ebp
f0108bef:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108bf2:	83 ec 04             	sub    $0x4,%esp
f0108bf5:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108bf8:	50                   	push   %eax
f0108bf9:	ff 75 0c             	pushl  0xc(%ebp)
f0108bfc:	ff 75 08             	pushl  0x8(%ebp)
f0108bff:	e8 09 f8 ff ff       	call   f010840d <get_page_table>
f0108c04:	83 c4 10             	add    $0x10,%esp
f0108c07:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, return the permissions
	if (ptr_page_table != NULL)
f0108c0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c0d:	85 c0                	test   %eax,%eax
f0108c0f:	74 1d                	je     f0108c2e <pt_get_page_permissions+0x42>
	{
		//cprintf("va=%x perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
		return (ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
f0108c11:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c14:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108c17:	c1 ea 0c             	shr    $0xc,%edx
f0108c1a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108c20:	c1 e2 02             	shl    $0x2,%edx
f0108c23:	01 d0                	add    %edx,%eax
f0108c25:	8b 00                	mov    (%eax),%eax
f0108c27:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108c2c:	eb 05                	jmp    f0108c33 <pt_get_page_permissions+0x47>
	}
	//[3] Else, return -1
	else
	{
		//cprintf("va=%x not exist and has no page table\n", virtual_address);
		return -1;
f0108c2e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f0108c33:	c9                   	leave  
f0108c34:	c3                   	ret    

f0108c35 <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0108c35:	55                   	push   %ebp
f0108c36:	89 e5                	mov    %esp,%ebp
f0108c38:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108c3b:	83 ec 04             	sub    $0x4,%esp
f0108c3e:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108c41:	50                   	push   %eax
f0108c42:	ff 75 0c             	pushl  0xc(%ebp)
f0108c45:	ff 75 08             	pushl  0x8(%ebp)
f0108c48:	e8 c0 f7 ff ff       	call   f010840d <get_page_table>
f0108c4d:	83 c4 10             	add    $0x10,%esp
f0108c50:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f0108c53:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c56:	85 c0                	test   %eax,%eax
f0108c58:	74 46                	je     f0108ca0 <pt_clear_page_table_entry+0x6b>
	{
		cprintf("va=%x before clearing has perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)]);
f0108c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c5d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108c60:	c1 ea 0c             	shr    $0xc,%edx
f0108c63:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108c69:	c1 e2 02             	shl    $0x2,%edx
f0108c6c:	01 d0                	add    %edx,%eax
f0108c6e:	8b 00                	mov    (%eax),%eax
f0108c70:	83 ec 04             	sub    $0x4,%esp
f0108c73:	50                   	push   %eax
f0108c74:	ff 75 0c             	pushl  0xc(%ebp)
f0108c77:	68 80 70 12 f0       	push   $0xf0127080
f0108c7c:	e8 eb 82 ff ff       	call   f0100f6c <cprintf>
f0108c81:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0108c84:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c87:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108c8a:	c1 ea 0c             	shr    $0xc,%edx
f0108c8d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108c93:	c1 e2 02             	shl    $0x2,%edx
f0108c96:	01 d0                	add    %edx,%eax
f0108c98:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108c9e:	eb 14                	jmp    f0108cb4 <pt_clear_page_table_entry+0x7f>
	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_clear_page_table_entry() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0108ca0:	83 ec 04             	sub    $0x4,%esp
f0108ca3:	68 a8 70 12 f0       	push   $0xf01270a8
f0108ca8:	6a 47                	push   $0x47
f0108caa:	68 64 70 12 f0       	push   $0xf0127064
f0108caf:	e8 66 76 ff ff       	call   f010031a <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108cb4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108cb7:	83 ec 08             	sub    $0x8,%esp
f0108cba:	50                   	push   %eax
f0108cbb:	6a 00                	push   $0x0
f0108cbd:	e8 15 f1 ff ff       	call   f0107dd7 <tlb_invalidate>
f0108cc2:	83 c4 10             	add    $0x10,%esp
}
f0108cc5:	90                   	nop
f0108cc6:	c9                   	leave  
f0108cc7:	c3                   	ret    

f0108cc8 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0108cc8:	55                   	push   %ebp
f0108cc9:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0108ccb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108cce:	c1 e8 16             	shr    $0x16,%eax
f0108cd1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108cd8:	8b 45 08             	mov    0x8(%ebp),%eax
f0108cdb:	01 d0                	add    %edx,%eax
f0108cdd:	8b 00                	mov    (%eax),%eax
f0108cdf:	83 e0 20             	and    $0x20,%eax
f0108ce2:	85 c0                	test   %eax,%eax
f0108ce4:	0f 95 c0             	setne  %al
f0108ce7:	0f b6 c0             	movzbl %al,%eax
}
f0108cea:	5d                   	pop    %ebp
f0108ceb:	c3                   	ret    

f0108cec <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0108cec:	55                   	push   %ebp
f0108ced:	89 e5                	mov    %esp,%ebp
f0108cef:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0108cf2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108cf5:	c1 e8 16             	shr    $0x16,%eax
f0108cf8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108cff:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d02:	01 d0                	add    %edx,%eax
f0108d04:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108d07:	c1 ea 16             	shr    $0x16,%edx
f0108d0a:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0108d11:	8b 55 08             	mov    0x8(%ebp),%edx
f0108d14:	01 ca                	add    %ecx,%edx
f0108d16:	8b 12                	mov    (%edx),%edx
f0108d18:	83 e2 df             	and    $0xffffffdf,%edx
f0108d1b:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108d1d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108d20:	83 ec 08             	sub    $0x8,%esp
f0108d23:	50                   	push   %eax
f0108d24:	6a 00                	push   $0x0
f0108d26:	e8 ac f0 ff ff       	call   f0107dd7 <tlb_invalidate>
f0108d2b:	83 c4 10             	add    $0x10,%esp
}
f0108d2e:	90                   	nop
f0108d2f:	c9                   	leave  
f0108d30:	c3                   	ret    

f0108d31 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0108d31:	55                   	push   %ebp
f0108d32:	89 e5                	mov    %esp,%ebp
f0108d34:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0108d37:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108d3a:	c1 e8 16             	shr    $0x16,%eax
f0108d3d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108d44:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d47:	01 d0                	add    %edx,%eax
f0108d49:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0108d4f:	0f 20 d8             	mov    %cr3,%eax
f0108d52:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0108d55:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108d58:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0108d5b:	90                   	nop
f0108d5c:	c9                   	leave  
f0108d5d:	c3                   	ret    

f0108d5e <env_page_ws_get_size>:
		}
	}
}
#else
inline uint32 env_page_ws_get_size(struct Env *e)
{
f0108d5e:	55                   	push   %ebp
f0108d5f:	89 e5                	mov    %esp,%ebp
f0108d61:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108d64:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108d6b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0108d72:	eb 22                	jmp    f0108d96 <env_page_ws_get_size+0x38>
f0108d74:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108d77:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0108d7a:	89 d0                	mov    %edx,%eax
f0108d7c:	01 c0                	add    %eax,%eax
f0108d7e:	01 d0                	add    %edx,%eax
f0108d80:	c1 e0 03             	shl    $0x3,%eax
f0108d83:	01 c8                	add    %ecx,%eax
f0108d85:	05 8c 00 00 00       	add    $0x8c,%eax
f0108d8a:	8a 00                	mov    (%eax),%al
f0108d8c:	84 c0                	test   %al,%al
f0108d8e:	75 03                	jne    f0108d93 <env_page_ws_get_size+0x35>
f0108d90:	ff 45 f8             	incl   -0x8(%ebp)
f0108d93:	ff 45 fc             	incl   -0x4(%ebp)
f0108d96:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d99:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f0108d9f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108da2:	39 c2                	cmp    %eax,%edx
f0108da4:	77 ce                	ja     f0108d74 <env_page_ws_get_size+0x16>
	return counter;
f0108da6:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0108da9:	c9                   	leave  
f0108daa:	c3                   	ret    

f0108dab <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0108dab:	55                   	push   %ebp
f0108dac:	89 e5                	mov    %esp,%ebp
f0108dae:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0108db1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0108db8:	eb 4e                	jmp    f0108e08 <env_page_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0108dba:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108dbd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108dc0:	89 d0                	mov    %edx,%eax
f0108dc2:	01 c0                	add    %eax,%eax
f0108dc4:	01 d0                	add    %edx,%eax
f0108dc6:	c1 e0 03             	shl    $0x3,%eax
f0108dc9:	01 c8                	add    %ecx,%eax
f0108dcb:	05 88 00 00 00       	add    $0x88,%eax
f0108dd0:	8b 00                	mov    (%eax),%eax
f0108dd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108dd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108dd8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108ddd:	89 c2                	mov    %eax,%edx
f0108ddf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108de2:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108de5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108de8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108ded:	39 c2                	cmp    %eax,%edx
f0108def:	75 14                	jne    f0108e05 <env_page_ws_invalidate+0x5a>
		{
			env_page_ws_clear_entry(e, i);
f0108df1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108df4:	83 ec 08             	sub    $0x8,%esp
f0108df7:	50                   	push   %eax
f0108df8:	ff 75 08             	pushl  0x8(%ebp)
f0108dfb:	e8 ce 00 00 00       	call   f0108ece <env_page_ws_clear_entry>
f0108e00:	83 c4 10             	add    $0x10,%esp
			break;
f0108e03:	eb 13                	jmp    f0108e18 <env_page_ws_invalidate+0x6d>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0108e05:	ff 45 f4             	incl   -0xc(%ebp)
f0108e08:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e0b:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f0108e11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108e14:	39 c2                	cmp    %eax,%edx
f0108e16:	77 a2                	ja     f0108dba <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0108e18:	90                   	nop
f0108e19:	c9                   	leave  
f0108e1a:	c3                   	ret    

f0108e1b <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0108e1b:	55                   	push   %ebp
f0108e1c:	89 e5                	mov    %esp,%ebp
f0108e1e:	53                   	push   %ebx
f0108e1f:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0108e22:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e25:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0108e2b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108e2e:	77 19                	ja     f0108e49 <env_page_ws_set_entry+0x2e>
f0108e30:	68 20 71 12 f0       	push   $0xf0127120
f0108e35:	68 56 71 12 f0       	push   $0xf0127156
f0108e3a:	68 a7 00 00 00       	push   $0xa7
f0108e3f:	68 6c 71 12 f0       	push   $0xf012716c
f0108e44:	e8 d1 74 ff ff       	call   f010031a <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0108e49:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0108e50:	76 19                	jbe    f0108e6b <env_page_ws_set_entry+0x50>
f0108e52:	68 8c 71 12 f0       	push   $0xf012718c
f0108e57:	68 56 71 12 f0       	push   $0xf0127156
f0108e5c:	68 a8 00 00 00       	push   $0xa8
f0108e61:	68 6c 71 12 f0       	push   $0xf012716c
f0108e66:	e8 af 74 ff ff       	call   f010031a <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f0108e6b:	8b 45 10             	mov    0x10(%ebp),%eax
f0108e6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108e71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108e74:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108e79:	89 c1                	mov    %eax,%ecx
f0108e7b:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108e7e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108e81:	89 d0                	mov    %edx,%eax
f0108e83:	01 c0                	add    %eax,%eax
f0108e85:	01 d0                	add    %edx,%eax
f0108e87:	c1 e0 03             	shl    $0x3,%eax
f0108e8a:	01 d8                	add    %ebx,%eax
f0108e8c:	05 88 00 00 00       	add    $0x88,%eax
f0108e91:	89 08                	mov    %ecx,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0108e93:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108e96:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108e99:	89 d0                	mov    %edx,%eax
f0108e9b:	01 c0                	add    %eax,%eax
f0108e9d:	01 d0                	add    %edx,%eax
f0108e9f:	c1 e0 03             	shl    $0x3,%eax
f0108ea2:	01 c8                	add    %ecx,%eax
f0108ea4:	05 8c 00 00 00       	add    $0x8c,%eax
f0108ea9:	c6 00 00             	movb   $0x0,(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0108eac:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108eaf:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108eb2:	89 d0                	mov    %edx,%eax
f0108eb4:	01 c0                	add    %eax,%eax
f0108eb6:	01 d0                	add    %edx,%eax
f0108eb8:	c1 e0 03             	shl    $0x3,%eax
f0108ebb:	01 c8                	add    %ecx,%eax
f0108ebd:	05 90 00 00 00       	add    $0x90,%eax
f0108ec2:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0108ec8:	90                   	nop
}
f0108ec9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108ecc:	c9                   	leave  
f0108ecd:	c3                   	ret    

f0108ece <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0108ece:	55                   	push   %ebp
f0108ecf:	89 e5                	mov    %esp,%ebp
f0108ed1:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108ed4:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ed7:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0108edd:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108ee0:	77 19                	ja     f0108efb <env_page_ws_clear_entry+0x2d>
f0108ee2:	68 c0 71 12 f0       	push   $0xf01271c0
f0108ee7:	68 56 71 12 f0       	push   $0xf0127156
f0108eec:	68 b3 00 00 00       	push   $0xb3
f0108ef1:	68 6c 71 12 f0       	push   $0xf012716c
f0108ef6:	e8 1f 74 ff ff       	call   f010031a <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0108efb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108efe:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f01:	89 d0                	mov    %edx,%eax
f0108f03:	01 c0                	add    %eax,%eax
f0108f05:	01 d0                	add    %edx,%eax
f0108f07:	c1 e0 03             	shl    $0x3,%eax
f0108f0a:	01 c8                	add    %ecx,%eax
f0108f0c:	05 88 00 00 00       	add    $0x88,%eax
f0108f11:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f0108f17:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108f1a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f1d:	89 d0                	mov    %edx,%eax
f0108f1f:	01 c0                	add    %eax,%eax
f0108f21:	01 d0                	add    %edx,%eax
f0108f23:	c1 e0 03             	shl    $0x3,%eax
f0108f26:	01 c8                	add    %ecx,%eax
f0108f28:	05 8c 00 00 00       	add    $0x8c,%eax
f0108f2d:	c6 00 01             	movb   $0x1,(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0108f30:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108f33:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f36:	89 d0                	mov    %edx,%eax
f0108f38:	01 c0                	add    %eax,%eax
f0108f3a:	01 d0                	add    %edx,%eax
f0108f3c:	c1 e0 03             	shl    $0x3,%eax
f0108f3f:	01 c8                	add    %ecx,%eax
f0108f41:	05 90 00 00 00       	add    $0x90,%eax
f0108f46:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108f4c:	90                   	nop
f0108f4d:	c9                   	leave  
f0108f4e:	c3                   	ret    

f0108f4f <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108f4f:	55                   	push   %ebp
f0108f50:	89 e5                	mov    %esp,%ebp
f0108f52:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108f55:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f58:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0108f5e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108f61:	77 19                	ja     f0108f7c <env_page_ws_get_virtual_address+0x2d>
f0108f63:	68 c0 71 12 f0       	push   $0xf01271c0
f0108f68:	68 56 71 12 f0       	push   $0xf0127156
f0108f6d:	68 bb 00 00 00       	push   $0xbb
f0108f72:	68 6c 71 12 f0       	push   $0xf012716c
f0108f77:	e8 9e 73 ff ff       	call   f010031a <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f0108f7c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108f7f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f82:	89 d0                	mov    %edx,%eax
f0108f84:	01 c0                	add    %eax,%eax
f0108f86:	01 d0                	add    %edx,%eax
f0108f88:	c1 e0 03             	shl    $0x3,%eax
f0108f8b:	01 c8                	add    %ecx,%eax
f0108f8d:	05 88 00 00 00       	add    $0x88,%eax
f0108f92:	8b 00                	mov    (%eax),%eax
f0108f94:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108f9a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0108f9f:	c9                   	leave  
f0108fa0:	c3                   	ret    

f0108fa1 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108fa1:	55                   	push   %ebp
f0108fa2:	89 e5                	mov    %esp,%ebp
f0108fa4:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108fa7:	8b 45 08             	mov    0x8(%ebp),%eax
f0108faa:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0108fb0:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108fb3:	77 19                	ja     f0108fce <env_page_ws_get_time_stamp+0x2d>
f0108fb5:	68 c0 71 12 f0       	push   $0xf01271c0
f0108fba:	68 56 71 12 f0       	push   $0xf0127156
f0108fbf:	68 c1 00 00 00       	push   $0xc1
f0108fc4:	68 6c 71 12 f0       	push   $0xf012716c
f0108fc9:	e8 4c 73 ff ff       	call   f010031a <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0108fce:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108fd1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108fd4:	89 d0                	mov    %edx,%eax
f0108fd6:	01 c0                	add    %eax,%eax
f0108fd8:	01 d0                	add    %edx,%eax
f0108fda:	c1 e0 03             	shl    $0x3,%eax
f0108fdd:	01 c8                	add    %ecx,%eax
f0108fdf:	05 90 00 00 00       	add    $0x90,%eax
f0108fe4:	8b 00                	mov    (%eax),%eax
}
f0108fe6:	c9                   	leave  
f0108fe7:	c3                   	ret    

f0108fe8 <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108fe8:	55                   	push   %ebp
f0108fe9:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f0108feb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108fee:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108ff1:	89 d0                	mov    %edx,%eax
f0108ff3:	01 c0                	add    %eax,%eax
f0108ff5:	01 d0                	add    %edx,%eax
f0108ff7:	c1 e0 03             	shl    $0x3,%eax
f0108ffa:	01 c8                	add    %ecx,%eax
f0108ffc:	05 8c 00 00 00       	add    $0x8c,%eax
f0109001:	8a 00                	mov    (%eax),%al
f0109003:	0f b6 c0             	movzbl %al,%eax
}
f0109006:	5d                   	pop    %ebp
f0109007:	c3                   	ret    

f0109008 <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f0109008:	55                   	push   %ebp
f0109009:	89 e5                	mov    %esp,%ebp
f010900b:	53                   	push   %ebx
f010900c:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010900f:	83 ec 0c             	sub    $0xc,%esp
f0109012:	6a 02                	push   $0x2
f0109014:	e8 f7 56 00 00       	call   f010e710 <isPageReplacmentAlgorithmLRU>
f0109019:	83 c4 10             	add    $0x10,%esp
f010901c:	85 c0                	test   %eax,%eax
f010901e:	0f 84 fe 00 00 00    	je     f0109122 <env_page_ws_print+0x11a>
	{
		int i = 0;
f0109024:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f010902b:	83 ec 0c             	sub    $0xc,%esp
f010902e:	68 f8 71 12 f0       	push   $0xf01271f8
f0109033:	e8 34 7f ff ff       	call   f0100f6c <cprintf>
f0109038:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010903b:	8b 45 08             	mov    0x8(%ebp),%eax
f010903e:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f0109044:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0109047:	eb 2c                	jmp    f0109075 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0109049:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010904c:	8b 10                	mov    (%eax),%edx
f010904e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109051:	8d 48 01             	lea    0x1(%eax),%ecx
f0109054:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0109057:	83 ec 04             	sub    $0x4,%esp
f010905a:	52                   	push   %edx
f010905b:	50                   	push   %eax
f010905c:	68 12 72 12 f0       	push   $0xf0127212
f0109061:	e8 06 7f ff ff       	call   f0100f6c <cprintf>
f0109066:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f0109069:	8b 45 08             	mov    0x8(%ebp),%eax
f010906c:	8b 80 18 da 01 00    	mov    0x1da18(%eax),%eax
f0109072:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0109075:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109079:	74 08                	je     f0109083 <env_page_ws_print+0x7b>
f010907b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010907e:	8b 40 10             	mov    0x10(%eax),%eax
f0109081:	eb 05                	jmp    f0109088 <env_page_ws_print+0x80>
f0109083:	b8 00 00 00 00       	mov    $0x0,%eax
f0109088:	8b 55 08             	mov    0x8(%ebp),%edx
f010908b:	89 82 18 da 01 00    	mov    %eax,0x1da18(%edx)
f0109091:	8b 45 08             	mov    0x8(%ebp),%eax
f0109094:	8b 80 18 da 01 00    	mov    0x1da18(%eax),%eax
f010909a:	85 c0                	test   %eax,%eax
f010909c:	75 ab                	jne    f0109049 <env_page_ws_print+0x41>
f010909e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01090a2:	75 a5                	jne    f0109049 <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f01090a4:	83 ec 0c             	sub    $0xc,%esp
f01090a7:	68 1a 72 12 f0       	push   $0xf012721a
f01090ac:	e8 bb 7e ff ff       	call   f0100f6c <cprintf>
f01090b1:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01090b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01090b7:	8b 80 20 da 01 00    	mov    0x1da20(%eax),%eax
f01090bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01090c0:	eb 2c                	jmp    f01090ee <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01090c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01090c5:	8b 10                	mov    (%eax),%edx
f01090c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01090ca:	8d 48 01             	lea    0x1(%eax),%ecx
f01090cd:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01090d0:	83 ec 04             	sub    $0x4,%esp
f01090d3:	52                   	push   %edx
f01090d4:	50                   	push   %eax
f01090d5:	68 12 72 12 f0       	push   $0xf0127212
f01090da:	e8 8d 7e ff ff       	call   f0100f6c <cprintf>
f01090df:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01090e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01090e5:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f01090eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01090ee:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01090f2:	74 08                	je     f01090fc <env_page_ws_print+0xf4>
f01090f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01090f7:	8b 40 10             	mov    0x10(%eax),%eax
f01090fa:	eb 05                	jmp    f0109101 <env_page_ws_print+0xf9>
f01090fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0109101:	8b 55 08             	mov    0x8(%ebp),%edx
f0109104:	89 82 28 da 01 00    	mov    %eax,0x1da28(%edx)
f010910a:	8b 45 08             	mov    0x8(%ebp),%eax
f010910d:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f0109113:	85 c0                	test   %eax,%eax
f0109115:	75 ab                	jne    f01090c2 <env_page_ws_print+0xba>
f0109117:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010911b:	75 a5                	jne    f01090c2 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f010911d:	e9 9f 01 00 00       	jmp    f01092c1 <env_page_ws_print+0x2b9>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f0109122:	83 ec 0c             	sub    $0xc,%esp
f0109125:	68 35 72 12 f0       	push   $0xf0127235
f010912a:	e8 3d 7e ff ff       	call   f0100f6c <cprintf>
f010912f:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0109132:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0109139:	e9 71 01 00 00       	jmp    f01092af <env_page_ws_print+0x2a7>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f010913e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109141:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109144:	89 d0                	mov    %edx,%eax
f0109146:	01 c0                	add    %eax,%eax
f0109148:	01 d0                	add    %edx,%eax
f010914a:	c1 e0 03             	shl    $0x3,%eax
f010914d:	01 c8                	add    %ecx,%eax
f010914f:	05 8c 00 00 00       	add    $0x8c,%eax
f0109154:	8a 00                	mov    (%eax),%al
f0109156:	84 c0                	test   %al,%al
f0109158:	74 43                	je     f010919d <env_page_ws_print+0x195>
			{
				cprintf("EMPTY LOCATION");
f010915a:	83 ec 0c             	sub    $0xc,%esp
f010915d:	68 3f 72 12 f0       	push   $0xf012723f
f0109162:	e8 05 7e ff ff       	call   f0100f6c <cprintf>
f0109167:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f010916a:	8b 45 08             	mov    0x8(%ebp),%eax
f010916d:	8b 80 58 d5 01 00    	mov    0x1d558(%eax),%eax
f0109173:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0109176:	75 10                	jne    f0109188 <env_page_ws_print+0x180>
				{
					cprintf("		<--");
f0109178:	83 ec 0c             	sub    $0xc,%esp
f010917b:	68 4e 72 12 f0       	push   $0xf012724e
f0109180:	e8 e7 7d ff ff       	call   f0100f6c <cprintf>
f0109185:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f0109188:	83 ec 0c             	sub    $0xc,%esp
f010918b:	68 54 72 12 f0       	push   $0xf0127254
f0109190:	e8 d7 7d ff ff       	call   f0100f6c <cprintf>
f0109195:	83 c4 10             	add    $0x10,%esp
				continue;
f0109198:	e9 0f 01 00 00       	jmp    f01092ac <env_page_ws_print+0x2a4>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010919d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01091a0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01091a3:	89 d0                	mov    %edx,%eax
f01091a5:	01 c0                	add    %eax,%eax
f01091a7:	01 d0                	add    %edx,%eax
f01091a9:	c1 e0 03             	shl    $0x3,%eax
f01091ac:	01 c8                	add    %ecx,%eax
f01091ae:	05 88 00 00 00       	add    $0x88,%eax
f01091b3:	8b 00                	mov    (%eax),%eax
f01091b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f01091b8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01091bb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01091be:	89 d0                	mov    %edx,%eax
f01091c0:	01 c0                	add    %eax,%eax
f01091c2:	01 d0                	add    %edx,%eax
f01091c4:	c1 e0 03             	shl    $0x3,%eax
f01091c7:	01 c8                	add    %ecx,%eax
f01091c9:	05 90 00 00 00       	add    $0x90,%eax
f01091ce:	8b 00                	mov    (%eax),%eax
f01091d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f01091d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01091d6:	8b 40 64             	mov    0x64(%eax),%eax
f01091d9:	83 ec 08             	sub    $0x8,%esp
f01091dc:	ff 75 e8             	pushl  -0x18(%ebp)
f01091df:	50                   	push   %eax
f01091e0:	e8 07 fa ff ff       	call   f0108bec <pt_get_page_permissions>
f01091e5:	83 c4 10             	add    $0x10,%esp
f01091e8:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f01091eb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01091ee:	83 e0 40             	and    $0x40,%eax
f01091f1:	85 c0                	test   %eax,%eax
f01091f3:	0f 95 c0             	setne  %al
f01091f6:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f01091f9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01091fc:	83 e0 20             	and    $0x20,%eax
f01091ff:	85 c0                	test   %eax,%eax
f0109201:	0f 95 c0             	setne  %al
f0109204:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f0109207:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010920a:	25 00 02 00 00       	and    $0x200,%eax
f010920f:	85 c0                	test   %eax,%eax
f0109211:	0f 95 c0             	setne  %al
f0109214:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f0109217:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010921a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010921d:	89 d0                	mov    %edx,%eax
f010921f:	01 c0                	add    %eax,%eax
f0109221:	01 d0                	add    %edx,%eax
f0109223:	c1 e0 03             	shl    $0x3,%eax
f0109226:	01 c8                	add    %ecx,%eax
f0109228:	05 88 00 00 00       	add    $0x88,%eax
f010922d:	8b 00                	mov    (%eax),%eax
f010922f:	83 ec 04             	sub    $0x4,%esp
f0109232:	50                   	push   %eax
f0109233:	ff 75 ec             	pushl  -0x14(%ebp)
f0109236:	68 56 72 12 f0       	push   $0xf0127256
f010923b:	e8 2c 7d ff ff       	call   f0100f6c <cprintf>
f0109240:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f0109243:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109246:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109249:	89 d0                	mov    %edx,%eax
f010924b:	01 c0                	add    %eax,%eax
f010924d:	01 d0                	add    %edx,%eax
f010924f:	c1 e0 03             	shl    $0x3,%eax
f0109252:	01 c8                	add    %ecx,%eax
f0109254:	05 94 00 00 00       	add    $0x94,%eax
f0109259:	8b 18                	mov    (%eax),%ebx
f010925b:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f010925f:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f0109263:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f0109267:	83 ec 08             	sub    $0x8,%esp
f010926a:	53                   	push   %ebx
f010926b:	ff 75 e4             	pushl  -0x1c(%ebp)
f010926e:	51                   	push   %ecx
f010926f:	52                   	push   %edx
f0109270:	50                   	push   %eax
f0109271:	68 68 72 12 f0       	push   $0xf0127268
f0109276:	e8 f1 7c ff ff       	call   f0100f6c <cprintf>
f010927b:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f010927e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109281:	8b 80 58 d5 01 00    	mov    0x1d558(%eax),%eax
f0109287:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010928a:	75 10                	jne    f010929c <env_page_ws_print+0x294>
			{
				cprintf(" <--");
f010928c:	83 ec 0c             	sub    $0xc,%esp
f010928f:	68 af 72 12 f0       	push   $0xf01272af
f0109294:	e8 d3 7c ff ff       	call   f0100f6c <cprintf>
f0109299:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f010929c:	83 ec 0c             	sub    $0xc,%esp
f010929f:	68 54 72 12 f0       	push   $0xf0127254
f01092a4:	e8 c3 7c ff ff       	call   f0100f6c <cprintf>
f01092a9:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f01092ac:	ff 45 ec             	incl   -0x14(%ebp)
f01092af:	8b 45 08             	mov    0x8(%ebp),%eax
f01092b2:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01092b8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01092bb:	0f 87 7d fe ff ff    	ja     f010913e <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01092c1:	90                   	nop
f01092c2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01092c5:	c9                   	leave  
f01092c6:	c3                   	ret    

f01092c7 <env_table_ws_print>:
#endif
// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f01092c7:	55                   	push   %ebp
f01092c8:	89 e5                	mov    %esp,%ebp
f01092ca:	53                   	push   %ebx
f01092cb:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f01092ce:	83 ec 0c             	sub    $0xc,%esp
f01092d1:	68 b4 72 12 f0       	push   $0xf01272b4
f01092d6:	e8 91 7c ff ff       	call   f0100f6c <cprintf>
f01092db:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f01092de:	83 ec 0c             	sub    $0xc,%esp
f01092e1:	68 e9 72 12 f0       	push   $0xf01272e9
f01092e6:	e8 81 7c ff ff       	call   f0100f6c <cprintf>
f01092eb:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f01092ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01092f5:	e9 16 01 00 00       	jmp    f0109410 <env_table_ws_print+0x149>
	{
		if (e->__ptr_tws[i].empty)
f01092fa:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01092fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109300:	89 d0                	mov    %edx,%eax
f0109302:	01 c0                	add    %eax,%eax
f0109304:	01 d0                	add    %edx,%eax
f0109306:	c1 e0 03             	shl    $0x3,%eax
f0109309:	01 c8                	add    %ecx,%eax
f010930b:	05 60 d5 01 00       	add    $0x1d560,%eax
f0109310:	8a 00                	mov    (%eax),%al
f0109312:	84 c0                	test   %al,%al
f0109314:	74 43                	je     f0109359 <env_table_ws_print+0x92>
		{
			cprintf("EMPTY LOCATION");
f0109316:	83 ec 0c             	sub    $0xc,%esp
f0109319:	68 3f 72 12 f0       	push   $0xf012723f
f010931e:	e8 49 7c ff ff       	call   f0100f6c <cprintf>
f0109323:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f0109326:	8b 45 08             	mov    0x8(%ebp),%eax
f0109329:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f010932f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0109332:	75 10                	jne    f0109344 <env_table_ws_print+0x7d>
			{
				cprintf("		<--");
f0109334:	83 ec 0c             	sub    $0xc,%esp
f0109337:	68 4e 72 12 f0       	push   $0xf012724e
f010933c:	e8 2b 7c ff ff       	call   f0100f6c <cprintf>
f0109341:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0109344:	83 ec 0c             	sub    $0xc,%esp
f0109347:	68 54 72 12 f0       	push   $0xf0127254
f010934c:	e8 1b 7c ff ff       	call   f0100f6c <cprintf>
f0109351:	83 c4 10             	add    $0x10,%esp
			continue;
f0109354:	e9 b4 00 00 00       	jmp    f010940d <env_table_ws_print+0x146>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f0109359:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010935c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010935f:	89 d0                	mov    %edx,%eax
f0109361:	01 c0                	add    %eax,%eax
f0109363:	01 d0                	add    %edx,%eax
f0109365:	c1 e0 03             	shl    $0x3,%eax
f0109368:	01 c8                	add    %ecx,%eax
f010936a:	05 5c d5 01 00       	add    $0x1d55c,%eax
f010936f:	8b 00                	mov    (%eax),%eax
f0109371:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f0109374:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109377:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010937a:	89 d0                	mov    %edx,%eax
f010937c:	01 c0                	add    %eax,%eax
f010937e:	01 d0                	add    %edx,%eax
f0109380:	c1 e0 03             	shl    $0x3,%eax
f0109383:	01 c8                	add    %ecx,%eax
f0109385:	05 5c d5 01 00       	add    $0x1d55c,%eax
f010938a:	8b 00                	mov    (%eax),%eax
f010938c:	83 ec 04             	sub    $0x4,%esp
f010938f:	50                   	push   %eax
f0109390:	ff 75 f4             	pushl  -0xc(%ebp)
f0109393:	68 f4 72 12 f0       	push   $0xf01272f4
f0109398:	e8 cf 7b ff ff       	call   f0100f6c <cprintf>
f010939d:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f01093a0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01093a3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01093a6:	89 d0                	mov    %edx,%eax
f01093a8:	01 c0                	add    %eax,%eax
f01093aa:	01 d0                	add    %edx,%eax
f01093ac:	c1 e0 03             	shl    $0x3,%eax
f01093af:	01 c8                	add    %ecx,%eax
f01093b1:	05 64 d5 01 00       	add    $0x1d564,%eax
f01093b6:	8b 18                	mov    (%eax),%ebx
f01093b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01093bb:	8b 40 64             	mov    0x64(%eax),%eax
f01093be:	83 ec 08             	sub    $0x8,%esp
f01093c1:	ff 75 f0             	pushl  -0x10(%ebp)
f01093c4:	50                   	push   %eax
f01093c5:	e8 fe f8 ff ff       	call   f0108cc8 <pd_is_table_used>
f01093ca:	83 c4 10             	add    $0x10,%esp
f01093cd:	83 ec 04             	sub    $0x4,%esp
f01093d0:	53                   	push   %ebx
f01093d1:	50                   	push   %eax
f01093d2:	68 0c 73 12 f0       	push   $0xf012730c
f01093d7:	e8 90 7b ff ff       	call   f0100f6c <cprintf>
f01093dc:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f01093df:	8b 45 08             	mov    0x8(%ebp),%eax
f01093e2:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f01093e8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01093eb:	75 10                	jne    f01093fd <env_table_ws_print+0x136>
		{
			cprintf(" <--");
f01093ed:	83 ec 0c             	sub    $0xc,%esp
f01093f0:	68 af 72 12 f0       	push   $0xf01272af
f01093f5:	e8 72 7b ff ff       	call   f0100f6c <cprintf>
f01093fa:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f01093fd:	83 ec 0c             	sub    $0xc,%esp
f0109400:	68 54 72 12 f0       	push   $0xf0127254
f0109405:	e8 62 7b ff ff       	call   f0100f6c <cprintf>
f010940a:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f010940d:	ff 45 f4             	incl   -0xc(%ebp)
f0109410:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0109414:	0f 86 e0 fe ff ff    	jbe    f01092fa <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f010941a:	90                   	nop
f010941b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010941e:	c9                   	leave  
f010941f:	c3                   	ret    

f0109420 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0109420:	55                   	push   %ebp
f0109421:	89 e5                	mov    %esp,%ebp
f0109423:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0109426:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f010942d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f0109434:	eb 22                	jmp    f0109458 <env_table_ws_get_size+0x38>
f0109436:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109439:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010943c:	89 d0                	mov    %edx,%eax
f010943e:	01 c0                	add    %eax,%eax
f0109440:	01 d0                	add    %edx,%eax
f0109442:	c1 e0 03             	shl    $0x3,%eax
f0109445:	01 c8                	add    %ecx,%eax
f0109447:	05 60 d5 01 00       	add    $0x1d560,%eax
f010944c:	8a 00                	mov    (%eax),%al
f010944e:	84 c0                	test   %al,%al
f0109450:	75 03                	jne    f0109455 <env_table_ws_get_size+0x35>
f0109452:	ff 45 f8             	incl   -0x8(%ebp)
f0109455:	ff 45 fc             	incl   -0x4(%ebp)
f0109458:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f010945c:	7e d8                	jle    f0109436 <env_table_ws_get_size+0x16>
	return counter;
f010945e:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0109461:	c9                   	leave  
f0109462:	c3                   	ret    

f0109463 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0109463:	55                   	push   %ebp
f0109464:	89 e5                	mov    %esp,%ebp
f0109466:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0109469:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f0109470:	eb 4e                	jmp    f01094c0 <env_table_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f0109472:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109475:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109478:	89 d0                	mov    %edx,%eax
f010947a:	01 c0                	add    %eax,%eax
f010947c:	01 d0                	add    %edx,%eax
f010947e:	c1 e0 03             	shl    $0x3,%eax
f0109481:	01 c8                	add    %ecx,%eax
f0109483:	05 5c d5 01 00       	add    $0x1d55c,%eax
f0109488:	8b 00                	mov    (%eax),%eax
f010948a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010948d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109490:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0109495:	89 c2                	mov    %eax,%edx
f0109497:	8b 45 0c             	mov    0xc(%ebp),%eax
f010949a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010949d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01094a0:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01094a5:	39 c2                	cmp    %eax,%edx
f01094a7:	75 14                	jne    f01094bd <env_table_ws_invalidate+0x5a>
		{
			env_table_ws_clear_entry(e, i);
f01094a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01094ac:	83 ec 08             	sub    $0x8,%esp
f01094af:	50                   	push   %eax
f01094b0:	ff 75 08             	pushl  0x8(%ebp)
f01094b3:	e8 bc 00 00 00       	call   f0109574 <env_table_ws_clear_entry>
f01094b8:	83 c4 10             	add    $0x10,%esp
			break;
f01094bb:	eb 09                	jmp    f01094c6 <env_table_ws_invalidate+0x63>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f01094bd:	ff 45 f4             	incl   -0xc(%ebp)
f01094c0:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01094c4:	7e ac                	jle    f0109472 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f01094c6:	90                   	nop
f01094c7:	c9                   	leave  
f01094c8:	c3                   	ret    

f01094c9 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01094c9:	55                   	push   %ebp
f01094ca:	89 e5                	mov    %esp,%ebp
f01094cc:	53                   	push   %ebx
f01094cd:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01094d0:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01094d4:	76 19                	jbe    f01094ef <env_table_ws_set_entry+0x26>
f01094d6:	68 30 73 12 f0       	push   $0xf0127330
f01094db:	68 56 71 12 f0       	push   $0xf0127156
f01094e0:	68 37 01 00 00       	push   $0x137
f01094e5:	68 6c 71 12 f0       	push   $0xf012716c
f01094ea:	e8 2b 6e ff ff       	call   f010031a <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01094ef:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01094f6:	76 19                	jbe    f0109511 <env_table_ws_set_entry+0x48>
f01094f8:	68 8c 71 12 f0       	push   $0xf012718c
f01094fd:	68 56 71 12 f0       	push   $0xf0127156
f0109502:	68 38 01 00 00       	push   $0x138
f0109507:	68 6c 71 12 f0       	push   $0xf012716c
f010950c:	e8 09 6e ff ff       	call   f010031a <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0109511:	8b 45 10             	mov    0x10(%ebp),%eax
f0109514:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109517:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010951a:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010951f:	89 c1                	mov    %eax,%ecx
f0109521:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109524:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109527:	89 d0                	mov    %edx,%eax
f0109529:	01 c0                	add    %eax,%eax
f010952b:	01 d0                	add    %edx,%eax
f010952d:	c1 e0 03             	shl    $0x3,%eax
f0109530:	01 d8                	add    %ebx,%eax
f0109532:	05 5c d5 01 00       	add    $0x1d55c,%eax
f0109537:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0109539:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010953c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010953f:	89 d0                	mov    %edx,%eax
f0109541:	01 c0                	add    %eax,%eax
f0109543:	01 d0                	add    %edx,%eax
f0109545:	c1 e0 03             	shl    $0x3,%eax
f0109548:	01 c8                	add    %ecx,%eax
f010954a:	05 60 d5 01 00       	add    $0x1d560,%eax
f010954f:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f0109552:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109555:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109558:	89 d0                	mov    %edx,%eax
f010955a:	01 c0                	add    %eax,%eax
f010955c:	01 d0                	add    %edx,%eax
f010955e:	c1 e0 03             	shl    $0x3,%eax
f0109561:	01 c8                	add    %ecx,%eax
f0109563:	05 64 d5 01 00       	add    $0x1d564,%eax
f0109568:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f010956e:	90                   	nop
}
f010956f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109572:	c9                   	leave  
f0109573:	c3                   	ret    

f0109574 <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0109574:	55                   	push   %ebp
f0109575:	89 e5                	mov    %esp,%ebp
f0109577:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010957a:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f010957e:	76 19                	jbe    f0109599 <env_table_ws_clear_entry+0x25>
f0109580:	68 30 73 12 f0       	push   $0xf0127330
f0109585:	68 56 71 12 f0       	push   $0xf0127156
f010958a:	68 43 01 00 00       	push   $0x143
f010958f:	68 6c 71 12 f0       	push   $0xf012716c
f0109594:	e8 81 6d ff ff       	call   f010031a <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0109599:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010959c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010959f:	89 d0                	mov    %edx,%eax
f01095a1:	01 c0                	add    %eax,%eax
f01095a3:	01 d0                	add    %edx,%eax
f01095a5:	c1 e0 03             	shl    $0x3,%eax
f01095a8:	01 c8                	add    %ecx,%eax
f01095aa:	05 5c d5 01 00       	add    $0x1d55c,%eax
f01095af:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f01095b5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01095b8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01095bb:	89 d0                	mov    %edx,%eax
f01095bd:	01 c0                	add    %eax,%eax
f01095bf:	01 d0                	add    %edx,%eax
f01095c1:	c1 e0 03             	shl    $0x3,%eax
f01095c4:	01 c8                	add    %ecx,%eax
f01095c6:	05 60 d5 01 00       	add    $0x1d560,%eax
f01095cb:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f01095ce:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01095d1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01095d4:	89 d0                	mov    %edx,%eax
f01095d6:	01 c0                	add    %eax,%eax
f01095d8:	01 d0                	add    %edx,%eax
f01095da:	c1 e0 03             	shl    $0x3,%eax
f01095dd:	01 c8                	add    %ecx,%eax
f01095df:	05 64 d5 01 00       	add    $0x1d564,%eax
f01095e4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f01095ea:	90                   	nop
f01095eb:	c9                   	leave  
f01095ec:	c3                   	ret    

f01095ed <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01095ed:	55                   	push   %ebp
f01095ee:	89 e5                	mov    %esp,%ebp
f01095f0:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01095f3:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01095f7:	76 19                	jbe    f0109612 <env_table_ws_get_virtual_address+0x25>
f01095f9:	68 30 73 12 f0       	push   $0xf0127330
f01095fe:	68 56 71 12 f0       	push   $0xf0127156
f0109603:	68 4b 01 00 00       	push   $0x14b
f0109608:	68 6c 71 12 f0       	push   $0xf012716c
f010960d:	e8 08 6d ff ff       	call   f010031a <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0109612:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109615:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109618:	89 d0                	mov    %edx,%eax
f010961a:	01 c0                	add    %eax,%eax
f010961c:	01 d0                	add    %edx,%eax
f010961e:	c1 e0 03             	shl    $0x3,%eax
f0109621:	01 c8                	add    %ecx,%eax
f0109623:	05 5c d5 01 00       	add    $0x1d55c,%eax
f0109628:	8b 00                	mov    (%eax),%eax
f010962a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010962d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109630:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0109635:	c9                   	leave  
f0109636:	c3                   	ret    

f0109637 <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0109637:	55                   	push   %ebp
f0109638:	89 e5                	mov    %esp,%ebp
f010963a:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010963d:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0109641:	76 19                	jbe    f010965c <env_table_ws_get_time_stamp+0x25>
f0109643:	68 30 73 12 f0       	push   $0xf0127330
f0109648:	68 56 71 12 f0       	push   $0xf0127156
f010964d:	68 52 01 00 00       	push   $0x152
f0109652:	68 6c 71 12 f0       	push   $0xf012716c
f0109657:	e8 be 6c ff ff       	call   f010031a <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f010965c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010965f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109662:	89 d0                	mov    %edx,%eax
f0109664:	01 c0                	add    %eax,%eax
f0109666:	01 d0                	add    %edx,%eax
f0109668:	c1 e0 03             	shl    $0x3,%eax
f010966b:	01 c8                	add    %ecx,%eax
f010966d:	05 64 d5 01 00       	add    $0x1d564,%eax
f0109672:	8b 00                	mov    (%eax),%eax
}
f0109674:	c9                   	leave  
f0109675:	c3                   	ret    

f0109676 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0109676:	55                   	push   %ebp
f0109677:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f0109679:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010967c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010967f:	89 d0                	mov    %edx,%eax
f0109681:	01 c0                	add    %eax,%eax
f0109683:	01 d0                	add    %edx,%eax
f0109685:	c1 e0 03             	shl    $0x3,%eax
f0109688:	01 c8                	add    %ecx,%eax
f010968a:	05 60 d5 01 00       	add    $0x1d560,%eax
f010968f:	8a 00                	mov    (%eax),%al
f0109691:	0f b6 c0             	movzbl %al,%eax
}
f0109694:	5d                   	pop    %ebp
f0109695:	c3                   	ret    

f0109696 <double_WS_Size>:
///=================================================================================================
///=================================================================================================
///=================================================================================================

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f0109696:	55                   	push   %ebp
f0109697:	89 e5                	mov    %esp,%ebp
f0109699:	83 ec 08             	sub    $0x8,%esp
	panic("not handled yet");
f010969c:	83 ec 04             	sub    $0x4,%esp
f010969f:	68 61 73 12 f0       	push   $0xf0127361
f01096a4:	68 62 01 00 00       	push   $0x162
f01096a9:	68 6c 71 12 f0       	push   $0xf012716c
f01096ae:	e8 67 6c ff ff       	call   f010031a <_panic>

f01096b3 <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f01096b3:	55                   	push   %ebp
f01096b4:	89 e5                	mov    %esp,%ebp
f01096b6:	83 ec 08             	sub    $0x8,%esp
	panic("not handled yet");
f01096b9:	83 ec 04             	sub    $0x4,%esp
f01096bc:	68 61 73 12 f0       	push   $0xf0127361
f01096c1:	68 67 01 00 00       	push   $0x167
f01096c6:	68 6c 71 12 f0       	push   $0xf012716c
f01096cb:	e8 4a 6c ff ff       	call   f010031a <_panic>

f01096d0 <cut_paste_pages>:
//	If the page table at any destination page in the range is not exist, it should create it
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, cut-paste the number of pages and return 0
//	ALL 12 permission bits of the destination should be TYPICAL to those of the source
//	The given addresses may be not aligned on 4 KB
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f01096d0:	55                   	push   %ebp
f01096d1:	89 e5                	mov    %esp,%ebp
f01096d3:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	panic("cut_paste_pages() is not implemented yet...!!");
f01096d6:	83 ec 04             	sub    $0x4,%esp
f01096d9:	68 74 73 12 f0       	push   $0xf0127374
f01096de:	6a 21                	push   $0x21
f01096e0:	68 a2 73 12 f0       	push   $0xf01273a2
f01096e5:	e8 30 6c ff ff       	call   f010031a <_panic>

f01096ea <copy_paste_chunk>:
//	Otherwise, just copy!
//		1. WRITABLE permission
//		2. USER/SUPERVISOR permission must be SAME as the one of the source
//	The given range(s) may be not aligned on 4 KB
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f01096ea:	55                   	push   %ebp
f01096eb:	89 e5                	mov    %esp,%ebp
f01096ed:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the //panic and write your code
	panic("copy_paste_chunk() is not implemented yet...!!");
f01096f0:	83 ec 04             	sub    $0x4,%esp
f01096f3:	68 c0 73 12 f0       	push   $0xf01273c0
f01096f8:	6a 34                	push   $0x34
f01096fa:	68 a2 73 12 f0       	push   $0xf01273a2
f01096ff:	e8 16 6c ff ff       	call   f010031a <_panic>

f0109704 <share_chunk>:
//	It should set the permissions of the second range by the given perms
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, share the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	The given range(s) may be not aligned on 4 KB
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0109704:	55                   	push   %ebp
f0109705:	89 e5                	mov    %esp,%ebp
f0109707:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the //panic and write your code
	panic("share_chunk() is not implemented yet...!!");
f010970a:	83 ec 04             	sub    $0x4,%esp
f010970d:	68 f0 73 12 f0       	push   $0xf01273f0
f0109712:	6a 44                	push   $0x44
f0109714:	68 a2 73 12 f0       	push   $0xf01273a2
f0109719:	e8 fc 6b ff ff       	call   f010031a <_panic>

f010971e <allocate_chunk>:
//This function should allocate the given virtual range [<va>, <va> + <size>) in the given address space  <page_directory> with the given permissions <perms>.
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, allocate the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	Allocation should be aligned on page boundary. However, the given range may be not aligned.
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f010971e:	55                   	push   %ebp
f010971f:	89 e5                	mov    %esp,%ebp
f0109721:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the //panic and write your code
	panic("allocate_chunk() is not implemented yet...!!");
f0109724:	83 ec 04             	sub    $0x4,%esp
f0109727:	68 1c 74 12 f0       	push   $0xf012741c
f010972c:	6a 52                	push   $0x52
f010972e:	68 a2 73 12 f0       	push   $0xf01273a2
f0109733:	e8 e2 6b ff ff       	call   f010031a <_panic>

f0109738 <calculate_allocated_space>:

//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0109738:	55                   	push   %ebp
f0109739:	89 e5                	mov    %esp,%ebp
f010973b:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	panic("calculate_allocated_space() is not implemented yet...!!");
f010973e:	83 ec 04             	sub    $0x4,%esp
f0109741:	68 4c 74 12 f0       	push   $0xf012744c
f0109746:	6a 5c                	push   $0x5c
f0109748:	68 a2 73 12 f0       	push   $0xf01273a2
f010974d:	e8 c8 6b ff ff       	call   f010031a <_panic>

f0109752 <calculate_required_frames>:
//=====================================
//This function should calculate the required number of pages for allocating and mapping the given range [start va, start va + size) (either for the pages themselves or for the page tables required for mapping)
//	Pages and/or page tables that are already exist in the range SHOULD NOT be counted.
//	The given range(s) may be not aligned on 4 KB
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0109752:	55                   	push   %ebp
f0109753:	89 e5                	mov    %esp,%ebp
f0109755:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	panic("calculate_required_frames() is not implemented yet...!!");
f0109758:	83 ec 04             	sub    $0x4,%esp
f010975b:	68 84 74 12 f0       	push   $0xf0127484
f0109760:	6a 69                	push   $0x69
f0109762:	68 a2 73 12 f0       	push   $0xf01273a2
f0109767:	e8 ae 6b ff ff       	call   f010031a <_panic>

f010976c <sys_sbrk>:

//=====================================
/* DYNAMIC ALLOCATOR SYSTEM CALLS */
//=====================================
void* sys_sbrk(int numOfPages)
{
f010976c:	55                   	push   %ebp
f010976d:	89 e5                	mov    %esp,%ebp
f010976f:	83 ec 18             	sub    $0x18,%esp
	 * 		or the break exceed the limit of the dynamic allocator. If sys_sbrk fails, the net effect should
	 * 		be that sys_sbrk returns (void*) -1 and that the segment break and the process heap are unaffected.
	 * 		You might have to undo any operations you have done so far in this case.
	 */

	struct Env* env = get_cpu_proc(); //the current running Environment to adjust its break limit
f0109772:	e8 f9 0f 00 00       	call   f010a770 <get_cpu_proc>
f0109777:	89 45 f4             	mov    %eax,-0xc(%ebp)

	/*====================================*/
	/*Remove this line before start coding*/
	return (void*)-1 ;
f010977a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	/*====================================*/

	//[PROJECT'24.MS2] Implement this function

}
f010977f:	c9                   	leave  
f0109780:	c3                   	ret    

f0109781 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0109781:	55                   	push   %ebp
f0109782:	89 e5                	mov    %esp,%ebp
f0109784:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f0109787:	e8 64 71 01 00       	call   f01208f0 <inctst>
	return;
f010978c:	90                   	nop
	/*====================================*/

	//[PROJECT'24.MS2] [USER HEAP - KERNEL SIDE] allocate_user_mem
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
}
f010978d:	c9                   	leave  
f010978e:	c3                   	ret    

f010978f <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f010978f:	55                   	push   %ebp
f0109790:	89 e5                	mov    %esp,%ebp
f0109792:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f0109795:	e8 56 71 01 00       	call   f01208f0 <inctst>
	return;
f010979a:	90                   	nop
	/*====================================*/

	//[PROJECT'24.MS2] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
}
f010979b:	c9                   	leave  
f010979c:	c3                   	ret    

f010979d <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f010979d:	55                   	push   %ebp
f010979e:	89 e5                	mov    %esp,%ebp
f01097a0:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f01097a3:	83 ec 04             	sub    $0x4,%esp
f01097a6:	68 bc 74 12 f0       	push   $0xf01274bc
f01097ab:	68 bc 00 00 00       	push   $0xbc
f01097b0:	68 a2 73 12 f0       	push   $0xf01273a2
f01097b5:	e8 60 6b ff ff       	call   f010031a <_panic>

f01097ba <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f01097ba:	55                   	push   %ebp
f01097bb:	89 e5                	mov    %esp,%ebp
f01097bd:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f01097c0:	83 ec 04             	sub    $0x4,%esp
f01097c3:	68 fc 74 12 f0       	push   $0xf01274fc
f01097c8:	68 c6 00 00 00       	push   $0xc6
f01097cd:	68 a2 73 12 f0       	push   $0xf01273a2
f01097d2:	e8 43 6b ff ff       	call   f010031a <_panic>

f01097d7 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01097d7:	55                   	push   %ebp
f01097d8:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01097da:	8b 45 08             	mov    0x8(%ebp),%eax
f01097dd:	8b 15 c0 18 5a f0    	mov    0xf05a18c0,%edx
f01097e3:	29 d0                	sub    %edx,%eax
f01097e5:	c1 f8 03             	sar    $0x3,%eax
f01097e8:	89 c2                	mov    %eax,%edx
f01097ea:	89 d0                	mov    %edx,%eax
f01097ec:	c1 e0 02             	shl    $0x2,%eax
f01097ef:	01 d0                	add    %edx,%eax
f01097f1:	c1 e0 02             	shl    $0x2,%eax
f01097f4:	01 d0                	add    %edx,%eax
f01097f6:	c1 e0 02             	shl    $0x2,%eax
f01097f9:	01 d0                	add    %edx,%eax
f01097fb:	89 c1                	mov    %eax,%ecx
f01097fd:	c1 e1 08             	shl    $0x8,%ecx
f0109800:	01 c8                	add    %ecx,%eax
f0109802:	89 c1                	mov    %eax,%ecx
f0109804:	c1 e1 10             	shl    $0x10,%ecx
f0109807:	01 c8                	add    %ecx,%eax
f0109809:	01 c0                	add    %eax,%eax
f010980b:	01 d0                	add    %edx,%eax
}
f010980d:	5d                   	pop    %ebp
f010980e:	c3                   	ret    

f010980f <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010980f:	55                   	push   %ebp
f0109810:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0109812:	ff 75 08             	pushl  0x8(%ebp)
f0109815:	e8 bd ff ff ff       	call   f01097d7 <to_frame_number>
f010981a:	83 c4 04             	add    $0x4,%esp
f010981d:	c1 e0 0c             	shl    $0xc,%eax
}
f0109820:	c9                   	leave  
f0109821:	c3                   	ret    

f0109822 <env_init>:
// and insert them into the env_free_list.
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//
void env_init(void)
{
f0109822:	55                   	push   %ebp
f0109823:	89 e5                	mov    %esp,%ebp
f0109825:	56                   	push   %esi
f0109826:	53                   	push   %ebx
f0109827:	83 ec 10             	sub    $0x10,%esp
	int iEnv = NENV-1;
f010982a:	c7 45 f4 07 00 00 00 	movl   $0x7,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109831:	e9 28 02 00 00       	jmp    f0109a5e <env_init+0x23c>
	{
		envs[iEnv].env_status = ENV_FREE;
f0109836:	8b 0d b0 e3 59 f0    	mov    0xf059e3b0,%ecx
f010983c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010983f:	89 d0                	mov    %edx,%eax
f0109841:	c1 e0 06             	shl    $0x6,%eax
f0109844:	29 d0                	sub    %edx,%eax
f0109846:	c1 e0 02             	shl    $0x2,%eax
f0109849:	01 d0                	add    %edx,%eax
f010984b:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f0109852:	01 d8                	add    %ebx,%eax
f0109854:	c1 e0 03             	shl    $0x3,%eax
f0109857:	01 d0                	add    %edx,%eax
f0109859:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109860:	29 c2                	sub    %eax,%edx
f0109862:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f0109869:	89 c2                	mov    %eax,%edx
f010986b:	89 d0                	mov    %edx,%eax
f010986d:	01 c8                	add    %ecx,%eax
f010986f:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
		envs[iEnv].env_id = 0;
f0109876:	8b 0d b0 e3 59 f0    	mov    0xf059e3b0,%ecx
f010987c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010987f:	89 d0                	mov    %edx,%eax
f0109881:	c1 e0 06             	shl    $0x6,%eax
f0109884:	29 d0                	sub    %edx,%eax
f0109886:	c1 e0 02             	shl    $0x2,%eax
f0109889:	01 d0                	add    %edx,%eax
f010988b:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f0109892:	01 d8                	add    %ebx,%eax
f0109894:	c1 e0 03             	shl    $0x3,%eax
f0109897:	01 d0                	add    %edx,%eax
f0109899:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01098a0:	29 c2                	sub    %eax,%edx
f01098a2:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f01098a9:	89 c2                	mov    %eax,%edx
f01098ab:	89 d0                	mov    %edx,%eax
f01098ad:	01 c8                	add    %ecx,%eax
f01098af:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f01098b6:	8b 0d b0 e3 59 f0    	mov    0xf059e3b0,%ecx
f01098bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01098bf:	89 d0                	mov    %edx,%eax
f01098c1:	c1 e0 06             	shl    $0x6,%eax
f01098c4:	29 d0                	sub    %edx,%eax
f01098c6:	c1 e0 02             	shl    $0x2,%eax
f01098c9:	01 d0                	add    %edx,%eax
f01098cb:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f01098d2:	01 d8                	add    %ebx,%eax
f01098d4:	c1 e0 03             	shl    $0x3,%eax
f01098d7:	01 d0                	add    %edx,%eax
f01098d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01098e0:	29 c2                	sub    %eax,%edx
f01098e2:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f01098e9:	89 c2                	mov    %eax,%edx
f01098eb:	89 d0                	mov    %edx,%eax
f01098ed:	01 c8                	add    %ecx,%eax
f01098ef:	85 c0                	test   %eax,%eax
f01098f1:	75 14                	jne    f0109907 <env_init+0xe5>
f01098f3:	83 ec 04             	sub    $0x4,%esp
f01098f6:	68 28 75 12 f0       	push   $0xf0127528
f01098fb:	6a 64                	push   $0x64
f01098fd:	68 4b 75 12 f0       	push   $0xf012754b
f0109902:	e8 13 6a ff ff       	call   f010031a <_panic>
f0109907:	8b 0d b0 e3 59 f0    	mov    0xf059e3b0,%ecx
f010990d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109910:	89 d0                	mov    %edx,%eax
f0109912:	c1 e0 06             	shl    $0x6,%eax
f0109915:	29 d0                	sub    %edx,%eax
f0109917:	c1 e0 02             	shl    $0x2,%eax
f010991a:	01 d0                	add    %edx,%eax
f010991c:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f0109923:	01 d8                	add    %ebx,%eax
f0109925:	c1 e0 03             	shl    $0x3,%eax
f0109928:	01 d0                	add    %edx,%eax
f010992a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109931:	29 c2                	sub    %eax,%edx
f0109933:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f010993a:	89 c2                	mov    %eax,%edx
f010993c:	89 d0                	mov    %edx,%eax
f010993e:	01 c8                	add    %ecx,%eax
f0109940:	8b 15 b4 e3 59 f0    	mov    0xf059e3b4,%edx
f0109946:	89 50 08             	mov    %edx,0x8(%eax)
f0109949:	8b 40 08             	mov    0x8(%eax),%eax
f010994c:	85 c0                	test   %eax,%eax
f010994e:	74 44                	je     f0109994 <env_init+0x172>
f0109950:	8b 0d b4 e3 59 f0    	mov    0xf059e3b4,%ecx
f0109956:	8b 1d b0 e3 59 f0    	mov    0xf059e3b0,%ebx
f010995c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010995f:	89 d0                	mov    %edx,%eax
f0109961:	c1 e0 06             	shl    $0x6,%eax
f0109964:	29 d0                	sub    %edx,%eax
f0109966:	c1 e0 02             	shl    $0x2,%eax
f0109969:	01 d0                	add    %edx,%eax
f010996b:	8d 34 85 00 00 00 00 	lea    0x0(,%eax,4),%esi
f0109972:	01 f0                	add    %esi,%eax
f0109974:	c1 e0 03             	shl    $0x3,%eax
f0109977:	01 d0                	add    %edx,%eax
f0109979:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109980:	29 c2                	sub    %eax,%edx
f0109982:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f0109989:	89 c2                	mov    %eax,%edx
f010998b:	89 d0                	mov    %edx,%eax
f010998d:	01 d8                	add    %ebx,%eax
f010998f:	89 41 0c             	mov    %eax,0xc(%ecx)
f0109992:	eb 3e                	jmp    f01099d2 <env_init+0x1b0>
f0109994:	8b 0d b0 e3 59 f0    	mov    0xf059e3b0,%ecx
f010999a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010999d:	89 d0                	mov    %edx,%eax
f010999f:	c1 e0 06             	shl    $0x6,%eax
f01099a2:	29 d0                	sub    %edx,%eax
f01099a4:	c1 e0 02             	shl    $0x2,%eax
f01099a7:	01 d0                	add    %edx,%eax
f01099a9:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f01099b0:	01 d8                	add    %ebx,%eax
f01099b2:	c1 e0 03             	shl    $0x3,%eax
f01099b5:	01 d0                	add    %edx,%eax
f01099b7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01099be:	29 c2                	sub    %eax,%edx
f01099c0:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f01099c7:	89 c2                	mov    %eax,%edx
f01099c9:	89 d0                	mov    %edx,%eax
f01099cb:	01 c8                	add    %ecx,%eax
f01099cd:	a3 b8 e3 59 f0       	mov    %eax,0xf059e3b8
f01099d2:	8b 0d b0 e3 59 f0    	mov    0xf059e3b0,%ecx
f01099d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01099db:	89 d0                	mov    %edx,%eax
f01099dd:	c1 e0 06             	shl    $0x6,%eax
f01099e0:	29 d0                	sub    %edx,%eax
f01099e2:	c1 e0 02             	shl    $0x2,%eax
f01099e5:	01 d0                	add    %edx,%eax
f01099e7:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f01099ee:	01 d8                	add    %ebx,%eax
f01099f0:	c1 e0 03             	shl    $0x3,%eax
f01099f3:	01 d0                	add    %edx,%eax
f01099f5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01099fc:	29 c2                	sub    %eax,%edx
f01099fe:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f0109a05:	89 c2                	mov    %eax,%edx
f0109a07:	89 d0                	mov    %edx,%eax
f0109a09:	01 c8                	add    %ecx,%eax
f0109a0b:	a3 b4 e3 59 f0       	mov    %eax,0xf059e3b4
f0109a10:	8b 0d b0 e3 59 f0    	mov    0xf059e3b0,%ecx
f0109a16:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a19:	89 d0                	mov    %edx,%eax
f0109a1b:	c1 e0 06             	shl    $0x6,%eax
f0109a1e:	29 d0                	sub    %edx,%eax
f0109a20:	c1 e0 02             	shl    $0x2,%eax
f0109a23:	01 d0                	add    %edx,%eax
f0109a25:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f0109a2c:	01 d8                	add    %ebx,%eax
f0109a2e:	c1 e0 03             	shl    $0x3,%eax
f0109a31:	01 d0                	add    %edx,%eax
f0109a33:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109a3a:	29 c2                	sub    %eax,%edx
f0109a3c:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f0109a43:	89 c2                	mov    %eax,%edx
f0109a45:	89 d0                	mov    %edx,%eax
f0109a47:	01 c8                	add    %ecx,%eax
f0109a49:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0109a50:	a1 c0 e3 59 f0       	mov    0xf059e3c0,%eax
f0109a55:	40                   	inc    %eax
f0109a56:	a3 c0 e3 59 f0       	mov    %eax,0xf059e3c0
// returns envs[0].
//
void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f0109a5b:	ff 4d f4             	decl   -0xc(%ebp)
f0109a5e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109a62:	0f 89 ce fd ff ff    	jns    f0109836 <env_init+0x14>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f0109a68:	90                   	nop
f0109a69:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0109a6c:	5b                   	pop    %ebx
f0109a6d:	5e                   	pop    %esi
f0109a6e:	5d                   	pop    %ebp
f0109a6f:	c3                   	ret    

f0109a70 <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0109a70:	55                   	push   %ebp
f0109a71:	89 e5                	mov    %esp,%ebp
f0109a73:	57                   	push   %edi
f0109a74:	56                   	push   %esi
f0109a75:	53                   	push   %ebx
f0109a76:	81 ec fc 00 00 00    	sub    $0xfc,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0109a7c:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0109a83:	83 ec 0c             	sub    $0xc,%esp
f0109a86:	ff 75 08             	pushl  0x8(%ebp)
f0109a89:	e8 c8 24 00 00       	call   f010bf56 <get_user_program_info>
f0109a8e:	83 c4 10             	add    $0x10,%esp
f0109a91:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0)
f0109a94:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0109a98:	75 0a                	jne    f0109aa4 <env_create+0x34>
	{
		return NULL;
f0109a9a:	b8 00 00 00 00       	mov    $0x0,%eax
f0109a9f:	e9 2a 0c 00 00       	jmp    f010a6ce <env_create+0xc5e>
	}
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0109aa4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109aa7:	8b 40 08             	mov    0x8(%eax),%eax
f0109aaa:	89 45 b8             	mov    %eax,-0x48(%ebp)

	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0109aad:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%ebp)
f0109ab4:	00 00 00 
	if(allocate_environment(&e) < 0)
f0109ab7:	83 ec 0c             	sub    $0xc,%esp
f0109aba:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0109ac0:	50                   	push   %eax
f0109ac1:	e8 23 11 00 00       	call   f010abe9 <allocate_environment>
f0109ac6:	83 c4 10             	add    $0x10,%esp
f0109ac9:	85 c0                	test   %eax,%eax
f0109acb:	79 0a                	jns    f0109ad7 <env_create+0x67>
	{
		return NULL;
f0109acd:	b8 00 00 00 00       	mov    $0x0,%eax
f0109ad2:	e9 f7 0b 00 00       	jmp    f010a6ce <env_create+0xc5e>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0109ad7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109ada:	8b 00                	mov    (%eax),%eax
f0109adc:	83 ec 0c             	sub    $0xc,%esp
f0109adf:	50                   	push   %eax
f0109ae0:	e8 53 89 01 00       	call   f0122438 <strlen>
f0109ae5:	83 c4 10             	add    $0x10,%esp
f0109ae8:	83 f8 3f             	cmp    $0x3f,%eax
f0109aeb:	7f 1d                	jg     f0109b0a <env_create+0x9a>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0109aed:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109af0:	8b 00                	mov    (%eax),%eax
f0109af2:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109af8:	83 c2 20             	add    $0x20,%edx
f0109afb:	83 ec 08             	sub    $0x8,%esp
f0109afe:	50                   	push   %eax
f0109aff:	52                   	push   %edx
f0109b00:	e8 82 89 01 00       	call   f0122487 <strcpy>
f0109b05:	83 c4 10             	add    $0x10,%esp
f0109b08:	eb 1d                	jmp    f0109b27 <env_create+0xb7>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0109b0a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109b0d:	8b 00                	mov    (%eax),%eax
f0109b0f:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109b15:	83 c2 20             	add    $0x20,%edx
f0109b18:	83 ec 04             	sub    $0x4,%esp
f0109b1b:	6a 3f                	push   $0x3f
f0109b1d:	50                   	push   %eax
f0109b1e:	52                   	push   %edx
f0109b1f:	e8 91 89 01 00       	call   f01224b5 <strncpy>
f0109b24:	83 c4 10             	add    $0x10,%esp
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
	}
#else
	{
		int r;
		struct FrameInfo *p = NULL;
f0109b27:	c7 85 3c ff ff ff 00 	movl   $0x0,-0xc4(%ebp)
f0109b2e:	00 00 00 

		allocate_frame(&p) ;
f0109b31:	83 ec 0c             	sub    $0xc,%esp
f0109b34:	8d 85 3c ff ff ff    	lea    -0xc4(%ebp),%eax
f0109b3a:	50                   	push   %eax
f0109b3b:	e8 90 e6 ff ff       	call   f01081d0 <allocate_frame>
f0109b40:	83 c4 10             	add    $0x10,%esp
		p->references = 1;
f0109b43:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0109b49:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

		ptr_user_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0109b4f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0109b55:	83 ec 0c             	sub    $0xc,%esp
f0109b58:	50                   	push   %eax
f0109b59:	e8 b1 fc ff ff       	call   f010980f <to_physical_address>
f0109b5e:	83 c4 10             	add    $0x10,%esp
f0109b61:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0109b64:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0109b67:	c1 e8 0c             	shr    $0xc,%eax
f0109b6a:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0109b6d:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f0109b72:	39 45 ac             	cmp    %eax,-0x54(%ebp)
f0109b75:	72 17                	jb     f0109b8e <env_create+0x11e>
f0109b77:	ff 75 b0             	pushl  -0x50(%ebp)
f0109b7a:	68 68 75 12 f0       	push   $0xf0127568
f0109b7f:	68 9c 00 00 00       	push   $0x9c
f0109b84:	68 4b 75 12 f0       	push   $0xf012754b
f0109b89:	e8 8c 67 ff ff       	call   f010031a <_panic>
f0109b8e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0109b91:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0109b96:	89 45 a8             	mov    %eax,-0x58(%ebp)
		phys_user_page_directory = to_physical_address(p);
f0109b99:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0109b9f:	83 ec 0c             	sub    $0xc,%esp
f0109ba2:	50                   	push   %eax
f0109ba3:	e8 67 fc ff ff       	call   f010980f <to_physical_address>
f0109ba8:	83 c4 10             	add    $0x10,%esp
f0109bab:	89 45 a4             	mov    %eax,-0x5c(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0109bae:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109bb4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109bb7:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109bbd:	83 ec 0c             	sub    $0xc,%esp
f0109bc0:	6a 02                	push   $0x2
f0109bc2:	e8 49 4b 00 00       	call   f010e710 <isPageReplacmentAlgorithmLRU>
f0109bc7:	83 c4 10             	add    $0x10,%esp
f0109bca:	85 c0                	test   %eax,%eax
f0109bcc:	74 21                	je     f0109bef <env_create+0x17f>
	{
		e->SecondListSize = LRU_second_list_size;
f0109bce:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109bd4:	8b 55 10             	mov    0x10(%ebp),%edx
f0109bd7:	89 90 34 da 01 00    	mov    %edx,0x1da34(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0109bdd:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109be3:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109be6:	2b 55 10             	sub    0x10(%ebp),%edx
f0109be9:	89 90 30 da 01 00    	mov    %edx,0x1da30(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0109bef:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0109bf3:	75 12                	jne    f0109c07 <env_create+0x197>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0109bf5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109bfb:	c7 80 3c da 01 00 0a 	movl   $0xa,0x1da3c(%eax)
f0109c02:	00 00 00 
f0109c05:	eb 0f                	jmp    f0109c16 <env_create+0x1a6>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0109c07:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109c0d:	8b 55 14             	mov    0x14(%ebp),%edx
f0109c10:	89 90 3c da 01 00    	mov    %edx,0x1da3c(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0109c16:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109c1c:	83 ec 04             	sub    $0x4,%esp
f0109c1f:	ff 75 a4             	pushl  -0x5c(%ebp)
f0109c22:	ff 75 a8             	pushl  -0x58(%ebp)
f0109c25:	50                   	push   %eax
f0109c26:	e8 76 18 00 00       	call   f010b4a1 <initialize_environment>
f0109c2b:	83 c4 10             	add    $0x10,%esp
	//	3- uint32 size_in_memory: actual size required by this segment in memory
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[5] 2024: Disable the interrupt before switching the directories
	pushcli();
f0109c2e:	e8 8d d5 ff ff       	call   f01071c0 <pushcli>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0109c33:	0f 20 d8             	mov    %cr3,%eax
f0109c36:	89 45 98             	mov    %eax,-0x68(%ebp)
	return val;
f0109c39:	8b 45 98             	mov    -0x68(%ebp),%eax
	{
		//[6] switch to user page directory
		uint32 cur_phys_pgdir = rcr3() ;
f0109c3c:	89 45 9c             	mov    %eax,-0x64(%ebp)
		lcr3(e->env_cr3) ;
f0109c3f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109c45:	8b 40 68             	mov    0x68(%eax),%eax
f0109c48:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0109c4e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109c54:	0f 22 d8             	mov    %eax,%cr3

		//[7] load each program segment into user virtual space
		struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0109c57:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int segment_counter=0;
f0109c5e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0109c65:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109c6b:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0109c71:	48                   	dec    %eax
f0109c72:	89 45 dc             	mov    %eax,-0x24(%ebp)
		uint32 lastTableNumber=0xffffffff;
f0109c75:	c7 85 38 ff ff ff ff 	movl   $0xffffffff,-0xc8(%ebp)
f0109c7c:	ff ff ff 

		PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109c7f:	8d 85 f8 fe ff ff    	lea    -0x108(%ebp),%eax
f0109c85:	83 ec 08             	sub    $0x8,%esp
f0109c88:	ff 75 b8             	pushl  -0x48(%ebp)
f0109c8b:	50                   	push   %eax
f0109c8c:	e8 d7 1f 00 00       	call   f010bc68 <PROGRAM_SEGMENT_FIRST>
f0109c91:	83 c4 0c             	add    $0xc,%esp
f0109c94:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0109c9a:	8d 95 f8 fe ff ff    	lea    -0x108(%ebp),%edx
f0109ca0:	b9 05 00 00 00       	mov    $0x5,%ecx
f0109ca5:	89 c7                	mov    %eax,%edi
f0109ca7:	89 d6                	mov    %edx,%esi
f0109ca9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0109cab:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0109cb1:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109cb4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109cb7:	8b 40 10             	mov    0x10(%eax),%eax
f0109cba:	83 f8 ff             	cmp    $0xffffffff,%eax
f0109cbd:	75 07                	jne    f0109cc6 <env_create+0x256>
f0109cbf:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0109cc6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109cc9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109ccc:	e9 24 03 00 00       	jmp    f0109ff5 <env_create+0x585>
		{
			segment_counter++;
f0109cd1:	ff 45 e0             	incl   -0x20(%ebp)
			LOG_STRING("===============================================================================");
			LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
					seg->size_in_memory, seg->virtual_address));
			LOG_STRING("===============================================================================");

			uint32 allocated_pages=0;
f0109cd4:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0109cdb:	00 00 00 
			program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0109cde:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109ce4:	83 ec 0c             	sub    $0xc,%esp
f0109ce7:	8d 95 38 ff ff ff    	lea    -0xc8(%ebp),%edx
f0109ced:	52                   	push   %edx
f0109cee:	ff 75 dc             	pushl  -0x24(%ebp)
f0109cf1:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0109cf7:	52                   	push   %edx
f0109cf8:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109cfb:	50                   	push   %eax
f0109cfc:	e8 a6 0f 00 00       	call   f010aca7 <program_segment_alloc_map_copy_workingset>
f0109d01:	83 c4 20             	add    $0x20,%esp

			remaining_ws_pages -= allocated_pages;
f0109d04:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0109d0a:	29 45 dc             	sub    %eax,-0x24(%ebp)
			LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
			LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


			/// 7.2) temporary initialize 1st page in memory then writing it on page file
			uint32 dataSrc_va = (uint32) seg->ptr_start;
f0109d0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109d10:	8b 00                	mov    (%eax),%eax
f0109d12:	89 45 94             	mov    %eax,-0x6c(%ebp)
			uint32 seg_va = (uint32) seg->virtual_address ;
f0109d15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109d18:	8b 40 0c             	mov    0xc(%eax),%eax
f0109d1b:	89 45 90             	mov    %eax,-0x70(%ebp)

			uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0109d1e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109d21:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0109d24:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0109d27:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109d2c:	89 45 88             	mov    %eax,-0x78(%ebp)
			uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0109d2f:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0109d36:	8b 55 90             	mov    -0x70(%ebp),%edx
f0109d39:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0109d3c:	01 d0                	add    %edx,%eax
f0109d3e:	48                   	dec    %eax
f0109d3f:	89 45 80             	mov    %eax,-0x80(%ebp)
f0109d42:	8b 45 80             	mov    -0x80(%ebp),%eax
f0109d45:	ba 00 00 00 00       	mov    $0x0,%edx
f0109d4a:	f7 75 84             	divl   -0x7c(%ebp)
f0109d4d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0109d50:	29 d0                	sub    %edx,%eax
f0109d52:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
			uint32 offset_first_page = seg_va  - start_first_page ;
f0109d58:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109d5b:	2b 45 88             	sub    -0x78(%ebp),%eax
f0109d5e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

			memset(ptr_temp_page , 0, PAGE_SIZE);
f0109d64:	a1 04 1b 5a f0       	mov    0xf05a1b04,%eax
f0109d69:	83 ec 04             	sub    $0x4,%esp
f0109d6c:	68 00 10 00 00       	push   $0x1000
f0109d71:	6a 00                	push   $0x0
f0109d73:	50                   	push   %eax
f0109d74:	e8 ad 88 01 00       	call   f0122626 <memset>
f0109d79:	83 c4 10             	add    $0x10,%esp
			uint8 *src_ptr =  (uint8*) dataSrc_va;
f0109d7c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0109d7f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0109d82:	8b 15 04 1b 5a f0    	mov    0xf05a1b04,%edx
f0109d88:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0109d8e:	01 d0                	add    %edx,%eax
f0109d90:	89 45 d0             	mov    %eax,-0x30(%ebp)
			int i;
			for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109d93:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109d96:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109d99:	eb 13                	jmp    f0109dae <env_create+0x33e>
			{
				*dst_ptr = *src_ptr ;
f0109d9b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109d9e:	8a 10                	mov    (%eax),%dl
f0109da0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109da3:	88 10                	mov    %dl,(%eax)

			memset(ptr_temp_page , 0, PAGE_SIZE);
			uint8 *src_ptr =  (uint8*) dataSrc_va;
			uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
			int i;
			for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109da5:	ff 45 cc             	incl   -0x34(%ebp)
f0109da8:	ff 45 d4             	incl   -0x2c(%ebp)
f0109dab:	ff 45 d0             	incl   -0x30(%ebp)
f0109dae:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109db1:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f0109db7:	72 e2                	jb     f0109d9b <env_create+0x32b>
			{
				*dst_ptr = *src_ptr ;
			}

			if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109db9:	8b 15 04 1b 5a f0    	mov    0xf05a1b04,%edx
f0109dbf:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109dc5:	83 ec 04             	sub    $0x4,%esp
f0109dc8:	52                   	push   %edx
f0109dc9:	ff 75 88             	pushl  -0x78(%ebp)
f0109dcc:	50                   	push   %eax
f0109dcd:	e8 76 a3 ff ff       	call   f0104148 <pf_add_env_page>
f0109dd2:	83 c4 10             	add    $0x10,%esp
f0109dd5:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109dd8:	75 17                	jne    f0109df1 <env_create+0x381>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109dda:	83 ec 04             	sub    $0x4,%esp
f0109ddd:	68 98 75 12 f0       	push   $0xf0127598
f0109de2:	68 f2 00 00 00       	push   $0xf2
f0109de7:	68 4b 75 12 f0       	push   $0xf012754b
f0109dec:	e8 29 65 ff ff       	call   f010031a <_panic>
			//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


			/// 7.3) Start writing the segment ,from 2nd page until before last page, to page file ...

			uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0109df1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109df4:	8b 50 04             	mov    0x4(%eax),%edx
f0109df7:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109dfa:	01 d0                	add    %edx,%eax
f0109dfc:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0109e02:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0109e08:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109e0d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
			uint32 end_last_page = seg_va  + seg->size_in_file;
f0109e13:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109e16:	8b 50 04             	mov    0x4(%eax),%edx
f0109e19:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109e1c:	01 d0                	add    %edx,%eax
f0109e1e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

			for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109e24:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0109e2a:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109e2d:	eb 43                	jmp    f0109e72 <env_create+0x402>
			{
				if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0109e2f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0109e32:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109e38:	83 ec 04             	sub    $0x4,%esp
f0109e3b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0109e3e:	52                   	push   %edx
f0109e3f:	50                   	push   %eax
f0109e40:	e8 03 a3 ff ff       	call   f0104148 <pf_add_env_page>
f0109e45:	83 c4 10             	add    $0x10,%esp
f0109e48:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109e4b:	75 17                	jne    f0109e64 <env_create+0x3f4>
					panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109e4d:	83 ec 04             	sub    $0x4,%esp
f0109e50:	68 98 75 12 f0       	push   $0xf0127598
f0109e55:	68 ff 00 00 00       	push   $0xff
f0109e5a:	68 4b 75 12 f0       	push   $0xf012754b
f0109e5f:	e8 b6 64 ff ff       	call   f010031a <_panic>
			/// 7.3) Start writing the segment ,from 2nd page until before last page, to page file ...

			uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
			uint32 end_last_page = seg_va  + seg->size_in_file;

			for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109e64:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0109e6b:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0109e72:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109e75:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f0109e7b:	72 b2                	jb     f0109e2f <env_create+0x3bf>
			}
			//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

			/// 7.4) temporary initialize last page in memory then writing it on page file

			dst_ptr =  (uint8*) ptr_temp_page;
f0109e7d:	a1 04 1b 5a f0       	mov    0xf05a1b04,%eax
f0109e82:	89 45 d0             	mov    %eax,-0x30(%ebp)
			memset(dst_ptr, 0, PAGE_SIZE);
f0109e85:	83 ec 04             	sub    $0x4,%esp
f0109e88:	68 00 10 00 00       	push   $0x1000
f0109e8d:	6a 00                	push   $0x0
f0109e8f:	ff 75 d0             	pushl  -0x30(%ebp)
f0109e92:	e8 8f 87 01 00       	call   f0122626 <memset>
f0109e97:	83 c4 10             	add    $0x10,%esp

			for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109e9a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0109ea0:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109ea3:	eb 13                	jmp    f0109eb8 <env_create+0x448>
			{
				*dst_ptr = *src_ptr;
f0109ea5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109ea8:	8a 10                	mov    (%eax),%dl
f0109eaa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109ead:	88 10                	mov    %dl,(%eax)
			/// 7.4) temporary initialize last page in memory then writing it on page file

			dst_ptr =  (uint8*) ptr_temp_page;
			memset(dst_ptr, 0, PAGE_SIZE);

			for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109eaf:	ff 45 cc             	incl   -0x34(%ebp)
f0109eb2:	ff 45 d4             	incl   -0x2c(%ebp)
f0109eb5:	ff 45 d0             	incl   -0x30(%ebp)
f0109eb8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109ebb:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f0109ec1:	72 e2                	jb     f0109ea5 <env_create+0x435>
			{
				*dst_ptr = *src_ptr;
			}
			if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109ec3:	8b 15 04 1b 5a f0    	mov    0xf05a1b04,%edx
f0109ec9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109ecf:	83 ec 04             	sub    $0x4,%esp
f0109ed2:	52                   	push   %edx
f0109ed3:	ff b5 70 ff ff ff    	pushl  -0x90(%ebp)
f0109ed9:	50                   	push   %eax
f0109eda:	e8 69 a2 ff ff       	call   f0104148 <pf_add_env_page>
f0109edf:	83 c4 10             	add    $0x10,%esp
f0109ee2:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109ee5:	75 17                	jne    f0109efe <env_create+0x48e>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109ee7:	83 ec 04             	sub    $0x4,%esp
f0109eea:	68 98 75 12 f0       	push   $0xf0127598
f0109eef:	68 0e 01 00 00       	push   $0x10e
f0109ef4:	68 4b 75 12 f0       	push   $0xf012754b
f0109ef9:	e8 1c 64 ff ff       	call   f010031a <_panic>

			//LOG_STRING(" -------------------- PAGE FILE: last page is written");

			/// 7.5) writing the remaining seg->size_in_memory pages to disk

			uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0109efe:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0109f05:	10 00 00 
f0109f08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109f0b:	8b 50 04             	mov    0x4(%eax),%edx
f0109f0e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109f11:	01 c2                	add    %eax,%edx
f0109f13:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0109f19:	01 d0                	add    %edx,%eax
f0109f1b:	48                   	dec    %eax
f0109f1c:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0109f22:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109f28:	ba 00 00 00 00       	mov    $0x0,%edx
f0109f2d:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0109f33:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109f39:	29 d0                	sub    %edx,%eax
f0109f3b:	89 45 c8             	mov    %eax,-0x38(%ebp)
			uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0109f3e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109f41:	8b 50 08             	mov    0x8(%eax),%edx
f0109f44:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109f47:	01 d0                	add    %edx,%eax
f0109f49:	2b 45 c8             	sub    -0x38(%ebp),%eax
f0109f4c:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

			for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109f52:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0109f59:	eb 41                	jmp    f0109f9c <env_create+0x52c>
			{
				if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f0109f5b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109f61:	83 ec 04             	sub    $0x4,%esp
f0109f64:	6a 01                	push   $0x1
f0109f66:	ff 75 c8             	pushl  -0x38(%ebp)
f0109f69:	50                   	push   %eax
f0109f6a:	e8 ab a0 ff ff       	call   f010401a <pf_add_empty_env_page>
f0109f6f:	83 c4 10             	add    $0x10,%esp
f0109f72:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109f75:	75 17                	jne    f0109f8e <env_create+0x51e>
					panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109f77:	83 ec 04             	sub    $0x4,%esp
f0109f7a:	68 98 75 12 f0       	push   $0xf0127598
f0109f7f:	68 1b 01 00 00       	push   $0x11b
f0109f84:	68 4b 75 12 f0       	push   $0xf012754b
f0109f89:	e8 8c 63 ff ff       	call   f010031a <_panic>
			/// 7.5) writing the remaining seg->size_in_memory pages to disk

			uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
			uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

			for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109f8e:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0109f95:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0109f9c:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0109fa3:	10 00 00 
f0109fa6:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f0109fac:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0109fb2:	01 d0                	add    %edx,%eax
f0109fb4:	48                   	dec    %eax
f0109fb5:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0109fbb:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0109fc1:	ba 00 00 00 00       	mov    $0x0,%edx
f0109fc6:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0109fcc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0109fd2:	29 d0                	sub    %edx,%eax
f0109fd4:	89 c2                	mov    %eax,%edx
f0109fd6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109fd9:	39 c2                	cmp    %eax,%edx
f0109fdb:	0f 87 7a ff ff ff    	ja     f0109f5b <env_create+0x4eb>
		struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
		int segment_counter=0;
		uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
		uint32 lastTableNumber=0xffffffff;

		PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109fe1:	83 ec 08             	sub    $0x8,%esp
f0109fe4:	ff 75 b8             	pushl  -0x48(%ebp)
f0109fe7:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109fea:	e8 6e 1b 00 00       	call   f010bb5d <PROGRAM_SEGMENT_NEXT>
f0109fef:	83 c4 10             	add    $0x10,%esp
f0109ff2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109ff5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0109ff9:	0f 85 d2 fc ff ff    	jne    f0109cd1 <env_create+0x261>
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
		}
#else
		int i=0;
f0109fff:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		for(;i<(e->page_WS_max_size); i++)
f010a006:	e9 a0 00 00 00       	jmp    f010a0ab <env_create+0x63b>
		{
			if(e->ptr_pageWorkingSet[i].empty == 0)
f010a00b:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a011:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010a014:	89 d0                	mov    %edx,%eax
f010a016:	01 c0                	add    %eax,%eax
f010a018:	01 d0                	add    %edx,%eax
f010a01a:	c1 e0 03             	shl    $0x3,%eax
f010a01d:	01 c8                	add    %ecx,%eax
f010a01f:	05 8c 00 00 00       	add    $0x8c,%eax
f010a024:	8a 00                	mov    (%eax),%al
f010a026:	84 c0                	test   %al,%al
f010a028:	75 7e                	jne    f010a0a8 <env_create+0x638>
			{
				uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010a02a:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a030:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010a033:	89 d0                	mov    %edx,%eax
f010a035:	01 c0                	add    %eax,%eax
f010a037:	01 d0                	add    %edx,%eax
f010a039:	c1 e0 03             	shl    $0x3,%eax
f010a03c:	01 c8                	add    %ecx,%eax
f010a03e:	05 88 00 00 00       	add    $0x88,%eax
f010a043:	8b 00                	mov    (%eax),%eax
f010a045:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
				uint32* ptr_page_table;

				//Here, page tables of all working set pages should be exist in memory
				//So, get_page_table should return the existing table
				get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f010a04b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a051:	8b 40 64             	mov    0x64(%eax),%eax
f010a054:	83 ec 04             	sub    $0x4,%esp
f010a057:	8d 95 1c ff ff ff    	lea    -0xe4(%ebp),%edx
f010a05d:	52                   	push   %edx
f010a05e:	ff b5 54 ff ff ff    	pushl  -0xac(%ebp)
f010a064:	50                   	push   %eax
f010a065:	e8 a3 e3 ff ff       	call   f010840d <get_page_table>
f010a06a:	83 c4 10             	add    $0x10,%esp
				ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f010a06d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010a073:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f010a079:	c1 ea 0c             	shr    $0xc,%edx
f010a07c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010a082:	c1 e2 02             	shl    $0x2,%edx
f010a085:	01 d0                	add    %edx,%eax
f010a087:	8b 95 1c ff ff ff    	mov    -0xe4(%ebp),%edx
f010a08d:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
f010a093:	c1 e9 0c             	shr    $0xc,%ecx
f010a096:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f010a09c:	c1 e1 02             	shl    $0x2,%ecx
f010a09f:	01 ca                	add    %ecx,%edx
f010a0a1:	8b 12                	mov    (%edx),%edx
f010a0a3:	83 e2 bf             	and    $0xffffffbf,%edx
f010a0a6:	89 10                	mov    %edx,(%eax)
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
		}
#else
		int i=0;
		for(;i<(e->page_WS_max_size); i++)
f010a0a8:	ff 45 c4             	incl   -0x3c(%ebp)
f010a0ab:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a0b1:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f010a0b7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a0ba:	39 c2                	cmp    %eax,%edx
f010a0bc:	0f 87 49 ff ff ff    	ja     f010a00b <env_create+0x59b>
			}
		}
#endif

		//[9] now set the entry point of the environment
		set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f010a0c2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010a0c5:	8b 50 08             	mov    0x8(%eax),%edx
f010a0c8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a0ce:	83 ec 08             	sub    $0x8,%esp
f010a0d1:	52                   	push   %edx
f010a0d2:	50                   	push   %eax
f010a0d3:	e8 45 1a 00 00       	call   f010bb1d <set_environment_entry_point>
f010a0d8:	83 c4 10             	add    $0x10,%esp

		//[10] Allocate and map ONE page for the program's initial stack
		// at virtual address USTACKTOP - PAGE_SIZE.
		// we assume that the stack is counted in the environment working set

		e->initNumStackPages = 1;
f010a0db:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a0e1:	c7 40 6c 01 00 00 00 	movl   $0x1,0x6c(%eax)

		//cprintf("\nwill allocate stack pages\n");
		uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f010a0e8:	c7 85 50 ff ff ff 00 	movl   $0xeebfd000,-0xb0(%ebp)
f010a0ef:	d0 bf ee 

		uint32 stackVa = USTACKTOP - PAGE_SIZE;
f010a0f2:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
		for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f010a0f9:	e9 27 05 00 00       	jmp    f010a625 <env_create+0xbb5>
		{
			//allocate and map
			struct FrameInfo *pp = NULL;
f010a0fe:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f010a105:	00 00 00 
			allocate_frame(&pp);
f010a108:	83 ec 0c             	sub    $0xc,%esp
f010a10b:	8d 85 18 ff ff ff    	lea    -0xe8(%ebp),%eax
f010a111:	50                   	push   %eax
f010a112:	e8 b9 e0 ff ff       	call   f01081d0 <allocate_frame>
f010a117:	83 c4 10             	add    $0x10,%esp
			loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f010a11a:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f010a120:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a126:	8b 40 64             	mov    0x64(%eax),%eax
f010a129:	6a 06                	push   $0x6
f010a12b:	ff 75 c0             	pushl  -0x40(%ebp)
f010a12e:	52                   	push   %edx
f010a12f:	50                   	push   %eax
f010a130:	e8 af e6 ff ff       	call   f01087e4 <loadtime_map_frame>
f010a135:	83 c4 10             	add    $0x10,%esp

			//initialize new page by 0's
			memset((void*)stackVa, 0, PAGE_SIZE);
f010a138:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010a13b:	83 ec 04             	sub    $0x4,%esp
f010a13e:	68 00 10 00 00       	push   $0x1000
f010a143:	6a 00                	push   $0x0
f010a145:	50                   	push   %eax
f010a146:	e8 db 84 01 00       	call   f0122626 <memset>
f010a14b:	83 c4 10             	add    $0x10,%esp
					{
						LIST_INSERT_HEAD(&(e->SecondList), wse);
					}
				}
#else
				env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f010a14e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a154:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010a15a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a160:	83 ec 04             	sub    $0x4,%esp
f010a163:	ff 75 c0             	pushl  -0x40(%ebp)
f010a166:	52                   	push   %edx
f010a167:	50                   	push   %eax
f010a168:	e8 ae ec ff ff       	call   f0108e1b <env_page_ws_set_entry>
f010a16d:	83 c4 10             	add    $0x10,%esp
				uint32 lastWSIndex = e->page_last_WS_index ++;
f010a170:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a176:	8b 82 58 d5 01 00    	mov    0x1d558(%edx),%eax
f010a17c:	8d 48 01             	lea    0x1(%eax),%ecx
f010a17f:	89 8a 58 d5 01 00    	mov    %ecx,0x1d558(%edx)
f010a185:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
				e->page_last_WS_index %= (e->page_WS_max_size);
f010a18b:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a191:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a197:	8b 80 58 d5 01 00    	mov    0x1d558(%eax),%eax
f010a19d:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a1a3:	8b 9a 84 00 00 00    	mov    0x84(%edx),%ebx
f010a1a9:	ba 00 00 00 00       	mov    $0x0,%edx
f010a1ae:	f7 f3                	div    %ebx
f010a1b0:	89 d0                	mov    %edx,%eax
f010a1b2:	89 81 58 d5 01 00    	mov    %eax,0x1d558(%ecx)

				if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a1b8:	83 ec 0c             	sub    $0xc,%esp
f010a1bb:	6a 02                	push   $0x2
f010a1bd:	e8 4e 45 00 00       	call   f010e710 <isPageReplacmentAlgorithmLRU>
f010a1c2:	83 c4 10             	add    $0x10,%esp
f010a1c5:	85 c0                	test   %eax,%eax
f010a1c7:	0f 84 34 04 00 00    	je     f010a601 <env_create+0xb91>
				{
					LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f010a1cd:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a1d3:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a1d9:	89 d0                	mov    %edx,%eax
f010a1db:	01 c0                	add    %eax,%eax
f010a1dd:	01 d0                	add    %edx,%eax
f010a1df:	c1 e0 03             	shl    $0x3,%eax
f010a1e2:	83 e8 80             	sub    $0xffffff80,%eax
f010a1e5:	01 c8                	add    %ecx,%eax
f010a1e7:	83 c0 08             	add    $0x8,%eax
f010a1ea:	85 c0                	test   %eax,%eax
f010a1ec:	75 17                	jne    f010a205 <env_create+0x795>
f010a1ee:	83 ec 04             	sub    $0x4,%esp
f010a1f1:	68 dd 75 12 f0       	push   $0xf01275dd
f010a1f6:	68 7a 01 00 00       	push   $0x17a
f010a1fb:	68 4b 75 12 f0       	push   $0xf012754b
f010a200:	e8 15 61 ff ff       	call   f010031a <_panic>
f010a205:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a20b:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a211:	89 d0                	mov    %edx,%eax
f010a213:	01 c0                	add    %eax,%eax
f010a215:	01 d0                	add    %edx,%eax
f010a217:	c1 e0 03             	shl    $0x3,%eax
f010a21a:	01 c8                	add    %ecx,%eax
f010a21c:	05 98 00 00 00       	add    $0x98,%eax
f010a221:	8b 00                	mov    (%eax),%eax
f010a223:	85 c0                	test   %eax,%eax
f010a225:	74 41                	je     f010a268 <env_create+0x7f8>
f010a227:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a22d:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a233:	89 d0                	mov    %edx,%eax
f010a235:	01 c0                	add    %eax,%eax
f010a237:	01 d0                	add    %edx,%eax
f010a239:	c1 e0 03             	shl    $0x3,%eax
f010a23c:	01 c8                	add    %ecx,%eax
f010a23e:	05 98 00 00 00       	add    $0x98,%eax
f010a243:	8b 10                	mov    (%eax),%edx
f010a245:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a24b:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a251:	89 c8                	mov    %ecx,%eax
f010a253:	01 c0                	add    %eax,%eax
f010a255:	01 c8                	add    %ecx,%eax
f010a257:	c1 e0 03             	shl    $0x3,%eax
f010a25a:	01 d8                	add    %ebx,%eax
f010a25c:	05 9c 00 00 00       	add    $0x9c,%eax
f010a261:	8b 00                	mov    (%eax),%eax
f010a263:	89 42 14             	mov    %eax,0x14(%edx)
f010a266:	eb 2a                	jmp    f010a292 <env_create+0x822>
f010a268:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a26e:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a274:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a27a:	89 c8                	mov    %ecx,%eax
f010a27c:	01 c0                	add    %eax,%eax
f010a27e:	01 c8                	add    %ecx,%eax
f010a280:	c1 e0 03             	shl    $0x3,%eax
f010a283:	01 d8                	add    %ebx,%eax
f010a285:	05 9c 00 00 00       	add    $0x9c,%eax
f010a28a:	8b 00                	mov    (%eax),%eax
f010a28c:	89 82 4c d5 01 00    	mov    %eax,0x1d54c(%edx)
f010a292:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a298:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a29e:	89 d0                	mov    %edx,%eax
f010a2a0:	01 c0                	add    %eax,%eax
f010a2a2:	01 d0                	add    %edx,%eax
f010a2a4:	c1 e0 03             	shl    $0x3,%eax
f010a2a7:	01 c8                	add    %ecx,%eax
f010a2a9:	05 9c 00 00 00       	add    $0x9c,%eax
f010a2ae:	8b 00                	mov    (%eax),%eax
f010a2b0:	85 c0                	test   %eax,%eax
f010a2b2:	74 41                	je     f010a2f5 <env_create+0x885>
f010a2b4:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a2ba:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a2c0:	89 d0                	mov    %edx,%eax
f010a2c2:	01 c0                	add    %eax,%eax
f010a2c4:	01 d0                	add    %edx,%eax
f010a2c6:	c1 e0 03             	shl    $0x3,%eax
f010a2c9:	01 c8                	add    %ecx,%eax
f010a2cb:	05 9c 00 00 00       	add    $0x9c,%eax
f010a2d0:	8b 10                	mov    (%eax),%edx
f010a2d2:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a2d8:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a2de:	89 c8                	mov    %ecx,%eax
f010a2e0:	01 c0                	add    %eax,%eax
f010a2e2:	01 c8                	add    %ecx,%eax
f010a2e4:	c1 e0 03             	shl    $0x3,%eax
f010a2e7:	01 d8                	add    %ebx,%eax
f010a2e9:	05 98 00 00 00       	add    $0x98,%eax
f010a2ee:	8b 00                	mov    (%eax),%eax
f010a2f0:	89 42 10             	mov    %eax,0x10(%edx)
f010a2f3:	eb 2a                	jmp    f010a31f <env_create+0x8af>
f010a2f5:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a2fb:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a301:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a307:	89 c8                	mov    %ecx,%eax
f010a309:	01 c0                	add    %eax,%eax
f010a30b:	01 c8                	add    %ecx,%eax
f010a30d:	c1 e0 03             	shl    $0x3,%eax
f010a310:	01 d8                	add    %ebx,%eax
f010a312:	05 98 00 00 00       	add    $0x98,%eax
f010a317:	8b 00                	mov    (%eax),%eax
f010a319:	89 82 48 d5 01 00    	mov    %eax,0x1d548(%edx)
f010a31f:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a325:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a32b:	89 d0                	mov    %edx,%eax
f010a32d:	01 c0                	add    %eax,%eax
f010a32f:	01 d0                	add    %edx,%eax
f010a331:	c1 e0 03             	shl    $0x3,%eax
f010a334:	01 c8                	add    %ecx,%eax
f010a336:	05 98 00 00 00       	add    $0x98,%eax
f010a33b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a341:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a347:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a34d:	89 d0                	mov    %edx,%eax
f010a34f:	01 c0                	add    %eax,%eax
f010a351:	01 d0                	add    %edx,%eax
f010a353:	c1 e0 03             	shl    $0x3,%eax
f010a356:	01 c8                	add    %ecx,%eax
f010a358:	05 9c 00 00 00       	add    $0x9c,%eax
f010a35d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a363:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a369:	8b 90 54 d5 01 00    	mov    0x1d554(%eax),%edx
f010a36f:	4a                   	dec    %edx
f010a370:	89 90 54 d5 01 00    	mov    %edx,0x1d554(%eax)
					//Now: we are sure that at least the top page in the stack will be added to Active list
					//Since we left 1 empty location in the Active list when we loaded the program segments
					if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f010a376:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a37c:	8b 90 1c da 01 00    	mov    0x1da1c(%eax),%edx
f010a382:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a388:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a38e:	39 c2                	cmp    %eax,%edx
f010a390:	0f 83 38 01 00 00    	jae    f010a4ce <env_create+0xa5e>
					{
						LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f010a396:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a39c:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a3a2:	89 d0                	mov    %edx,%eax
f010a3a4:	01 c0                	add    %eax,%eax
f010a3a6:	01 d0                	add    %edx,%eax
f010a3a8:	c1 e0 03             	shl    $0x3,%eax
f010a3ab:	83 e8 80             	sub    $0xffffff80,%eax
f010a3ae:	01 c8                	add    %ecx,%eax
f010a3b0:	83 c0 08             	add    $0x8,%eax
f010a3b3:	85 c0                	test   %eax,%eax
f010a3b5:	75 17                	jne    f010a3ce <env_create+0x95e>
f010a3b7:	83 ec 04             	sub    $0x4,%esp
f010a3ba:	68 28 75 12 f0       	push   $0xf0127528
f010a3bf:	68 7f 01 00 00       	push   $0x17f
f010a3c4:	68 4b 75 12 f0       	push   $0xf012754b
f010a3c9:	e8 4c 5f ff ff       	call   f010031a <_panic>
f010a3ce:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a3d4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a3da:	8b 88 10 da 01 00    	mov    0x1da10(%eax),%ecx
f010a3e0:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f010a3e6:	89 d8                	mov    %ebx,%eax
f010a3e8:	01 c0                	add    %eax,%eax
f010a3ea:	01 d8                	add    %ebx,%eax
f010a3ec:	c1 e0 03             	shl    $0x3,%eax
f010a3ef:	01 d0                	add    %edx,%eax
f010a3f1:	05 98 00 00 00       	add    $0x98,%eax
f010a3f6:	89 08                	mov    %ecx,(%eax)
f010a3f8:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a3fe:	89 c8                	mov    %ecx,%eax
f010a400:	01 c0                	add    %eax,%eax
f010a402:	01 c8                	add    %ecx,%eax
f010a404:	c1 e0 03             	shl    $0x3,%eax
f010a407:	01 d0                	add    %edx,%eax
f010a409:	05 98 00 00 00       	add    $0x98,%eax
f010a40e:	8b 00                	mov    (%eax),%eax
f010a410:	85 c0                	test   %eax,%eax
f010a412:	74 2e                	je     f010a442 <env_create+0x9d2>
f010a414:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a41a:	8b 90 10 da 01 00    	mov    0x1da10(%eax),%edx
f010a420:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a426:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a42c:	89 c8                	mov    %ecx,%eax
f010a42e:	01 c0                	add    %eax,%eax
f010a430:	01 c8                	add    %ecx,%eax
f010a432:	c1 e0 03             	shl    $0x3,%eax
f010a435:	83 e8 80             	sub    $0xffffff80,%eax
f010a438:	01 d8                	add    %ebx,%eax
f010a43a:	83 c0 08             	add    $0x8,%eax
f010a43d:	89 42 14             	mov    %eax,0x14(%edx)
f010a440:	eb 29                	jmp    f010a46b <env_create+0x9fb>
f010a442:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a448:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a44e:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a454:	89 c8                	mov    %ecx,%eax
f010a456:	01 c0                	add    %eax,%eax
f010a458:	01 c8                	add    %ecx,%eax
f010a45a:	c1 e0 03             	shl    $0x3,%eax
f010a45d:	83 e8 80             	sub    $0xffffff80,%eax
f010a460:	01 d8                	add    %ebx,%eax
f010a462:	83 c0 08             	add    $0x8,%eax
f010a465:	89 82 14 da 01 00    	mov    %eax,0x1da14(%edx)
f010a46b:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a471:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a477:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a47d:	89 c8                	mov    %ecx,%eax
f010a47f:	01 c0                	add    %eax,%eax
f010a481:	01 c8                	add    %ecx,%eax
f010a483:	c1 e0 03             	shl    $0x3,%eax
f010a486:	83 e8 80             	sub    $0xffffff80,%eax
f010a489:	01 d8                	add    %ebx,%eax
f010a48b:	83 c0 08             	add    $0x8,%eax
f010a48e:	89 82 10 da 01 00    	mov    %eax,0x1da10(%edx)
f010a494:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a49a:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a4a0:	89 d0                	mov    %edx,%eax
f010a4a2:	01 c0                	add    %eax,%eax
f010a4a4:	01 d0                	add    %edx,%eax
f010a4a6:	c1 e0 03             	shl    $0x3,%eax
f010a4a9:	01 c8                	add    %ecx,%eax
f010a4ab:	05 9c 00 00 00       	add    $0x9c,%eax
f010a4b0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a4b6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a4bc:	8b 90 1c da 01 00    	mov    0x1da1c(%eax),%edx
f010a4c2:	42                   	inc    %edx
f010a4c3:	89 90 1c da 01 00    	mov    %edx,0x1da1c(%eax)
f010a4c9:	e9 33 01 00 00       	jmp    f010a601 <env_create+0xb91>
					}
					else
					{
						LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f010a4ce:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a4d4:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a4da:	89 d0                	mov    %edx,%eax
f010a4dc:	01 c0                	add    %eax,%eax
f010a4de:	01 d0                	add    %edx,%eax
f010a4e0:	c1 e0 03             	shl    $0x3,%eax
f010a4e3:	83 e8 80             	sub    $0xffffff80,%eax
f010a4e6:	01 c8                	add    %ecx,%eax
f010a4e8:	83 c0 08             	add    $0x8,%eax
f010a4eb:	85 c0                	test   %eax,%eax
f010a4ed:	75 17                	jne    f010a506 <env_create+0xa96>
f010a4ef:	83 ec 04             	sub    $0x4,%esp
f010a4f2:	68 28 75 12 f0       	push   $0xf0127528
f010a4f7:	68 83 01 00 00       	push   $0x183
f010a4fc:	68 4b 75 12 f0       	push   $0xf012754b
f010a501:	e8 14 5e ff ff       	call   f010031a <_panic>
f010a506:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a50c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a512:	8b 88 20 da 01 00    	mov    0x1da20(%eax),%ecx
f010a518:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f010a51e:	89 d8                	mov    %ebx,%eax
f010a520:	01 c0                	add    %eax,%eax
f010a522:	01 d8                	add    %ebx,%eax
f010a524:	c1 e0 03             	shl    $0x3,%eax
f010a527:	01 d0                	add    %edx,%eax
f010a529:	05 98 00 00 00       	add    $0x98,%eax
f010a52e:	89 08                	mov    %ecx,(%eax)
f010a530:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a536:	89 c8                	mov    %ecx,%eax
f010a538:	01 c0                	add    %eax,%eax
f010a53a:	01 c8                	add    %ecx,%eax
f010a53c:	c1 e0 03             	shl    $0x3,%eax
f010a53f:	01 d0                	add    %edx,%eax
f010a541:	05 98 00 00 00       	add    $0x98,%eax
f010a546:	8b 00                	mov    (%eax),%eax
f010a548:	85 c0                	test   %eax,%eax
f010a54a:	74 2e                	je     f010a57a <env_create+0xb0a>
f010a54c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a552:	8b 90 20 da 01 00    	mov    0x1da20(%eax),%edx
f010a558:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a55e:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a564:	89 c8                	mov    %ecx,%eax
f010a566:	01 c0                	add    %eax,%eax
f010a568:	01 c8                	add    %ecx,%eax
f010a56a:	c1 e0 03             	shl    $0x3,%eax
f010a56d:	83 e8 80             	sub    $0xffffff80,%eax
f010a570:	01 d8                	add    %ebx,%eax
f010a572:	83 c0 08             	add    $0x8,%eax
f010a575:	89 42 14             	mov    %eax,0x14(%edx)
f010a578:	eb 29                	jmp    f010a5a3 <env_create+0xb33>
f010a57a:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a580:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a586:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a58c:	89 c8                	mov    %ecx,%eax
f010a58e:	01 c0                	add    %eax,%eax
f010a590:	01 c8                	add    %ecx,%eax
f010a592:	c1 e0 03             	shl    $0x3,%eax
f010a595:	83 e8 80             	sub    $0xffffff80,%eax
f010a598:	01 d8                	add    %ebx,%eax
f010a59a:	83 c0 08             	add    $0x8,%eax
f010a59d:	89 82 24 da 01 00    	mov    %eax,0x1da24(%edx)
f010a5a3:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a5a9:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a5af:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a5b5:	89 c8                	mov    %ecx,%eax
f010a5b7:	01 c0                	add    %eax,%eax
f010a5b9:	01 c8                	add    %ecx,%eax
f010a5bb:	c1 e0 03             	shl    $0x3,%eax
f010a5be:	83 e8 80             	sub    $0xffffff80,%eax
f010a5c1:	01 d8                	add    %ebx,%eax
f010a5c3:	83 c0 08             	add    $0x8,%eax
f010a5c6:	89 82 20 da 01 00    	mov    %eax,0x1da20(%edx)
f010a5cc:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a5d2:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a5d8:	89 d0                	mov    %edx,%eax
f010a5da:	01 c0                	add    %eax,%eax
f010a5dc:	01 d0                	add    %edx,%eax
f010a5de:	c1 e0 03             	shl    $0x3,%eax
f010a5e1:	01 c8                	add    %ecx,%eax
f010a5e3:	05 9c 00 00 00       	add    $0x9c,%eax
f010a5e8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a5ee:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a5f4:	8b 90 2c da 01 00    	mov    0x1da2c(%eax),%edx
f010a5fa:	42                   	inc    %edx
f010a5fb:	89 90 2c da 01 00    	mov    %edx,0x1da2c(%eax)

				//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));
			}

			//add this page to the page file
			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f010a601:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a607:	83 ec 04             	sub    $0x4,%esp
f010a60a:	6a 01                	push   $0x1
f010a60c:	ff 75 c0             	pushl  -0x40(%ebp)
f010a60f:	50                   	push   %eax
f010a610:	e8 05 9a ff ff       	call   f010401a <pf_add_empty_env_page>
f010a615:	83 c4 10             	add    $0x10,%esp
f010a618:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)

		//cprintf("\nwill allocate stack pages\n");
		uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

		uint32 stackVa = USTACKTOP - PAGE_SIZE;
		for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f010a61e:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f010a625:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010a628:	3b 85 50 ff ff ff    	cmp    -0xb0(%ebp),%eax
f010a62e:	0f 83 ca fa ff ff    	jae    f010a0fe <env_create+0x68e>
			//if(success == 0) LOG_STATMENT(cprintf("STACK Page added to page file successfully\n"));
		}

		//2020
		//LRU Lists: Reset PRESENT bit of all pages in Second List
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a634:	83 ec 0c             	sub    $0xc,%esp
f010a637:	6a 02                	push   $0x2
f010a639:	e8 d2 40 00 00       	call   f010e710 <isPageReplacmentAlgorithmLRU>
f010a63e:	83 c4 10             	add    $0x10,%esp
f010a641:	85 c0                	test   %eax,%eax
f010a643:	74 72                	je     f010a6b7 <env_create+0xc47>
		{
			struct WorkingSetElement * elm = NULL;
f010a645:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
			LIST_FOREACH(elm, &(e->SecondList))
f010a64c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a652:	8b 80 20 da 01 00    	mov    0x1da20(%eax),%eax
f010a658:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010a65b:	eb 2b                	jmp    f010a688 <env_create+0xc18>
			{
				//set it's PRESENT bit to 0
				pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f010a65d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010a660:	8b 10                	mov    (%eax),%edx
f010a662:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a668:	8b 40 64             	mov    0x64(%eax),%eax
f010a66b:	6a 01                	push   $0x1
f010a66d:	6a 00                	push   $0x0
f010a66f:	52                   	push   %edx
f010a670:	50                   	push   %eax
f010a671:	e8 b2 e4 ff ff       	call   f0108b28 <pt_set_page_permissions>
f010a676:	83 c4 10             	add    $0x10,%esp
		//2020
		//LRU Lists: Reset PRESENT bit of all pages in Second List
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
		{
			struct WorkingSetElement * elm = NULL;
			LIST_FOREACH(elm, &(e->SecondList))
f010a679:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a67f:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f010a685:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010a688:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a68e:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f010a692:	74 08                	je     f010a69c <env_create+0xc2c>
f010a694:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010a697:	8b 52 10             	mov    0x10(%edx),%edx
f010a69a:	eb 05                	jmp    f010a6a1 <env_create+0xc31>
f010a69c:	ba 00 00 00 00       	mov    $0x0,%edx
f010a6a1:	89 90 28 da 01 00    	mov    %edx,0x1da28(%eax)
f010a6a7:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f010a6ad:	85 c0                	test   %eax,%eax
f010a6af:	75 ac                	jne    f010a65d <env_create+0xbed>
f010a6b1:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f010a6b5:	75 a6                	jne    f010a65d <env_create+0xbed>
f010a6b7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010a6ba:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010a6bd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010a6c0:	0f 22 d8             	mov    %eax,%cr3

		///[11] switch back to the page directory exists before segment loading
		lcr3(cur_phys_pgdir) ;
	}
	//[12] Re-enable the interrupt (if it was too)
	popcli();
f010a6c3:	e8 4a cb ff ff       	call   f0107212 <popcli>
//		env_page_ws_print(e);

		//	cprintf("Table working set after loading the program...\n");
		//	env_table_ws_print(e);
	}
	return e;
f010a6c8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
}
f010a6ce:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010a6d1:	5b                   	pop    %ebx
f010a6d2:	5e                   	pop    %esi
f010a6d3:	5f                   	pop    %edi
f010a6d4:	5d                   	pop    %ebp
f010a6d5:	c3                   	ret    

f010a6d6 <env_start>:
// 2) START EXECUTING THE PROCESS:
//===============================
// called only at the very first scheduling by scheduler()
// will context_switch() here.  "Return" to user space.
void env_start(void)
{
f010a6d6:	55                   	push   %ebp
f010a6d7:	89 e5                	mov    %esp,%ebp
f010a6d9:	83 ec 18             	sub    $0x18,%esp
	static int first = 1;
	// Still holding q.lock from scheduler.
	release_spinlock(&ProcessQueues.qlock);
f010a6dc:	83 ec 0c             	sub    $0xc,%esp
f010a6df:	68 00 ee 59 f0       	push   $0xf059ee00
f010a6e4:	e8 bf 44 00 00       	call   f010eba8 <release_spinlock>
f010a6e9:	83 c4 10             	add    $0x10,%esp

	if (first)
f010a6ec:	a1 60 d9 17 f0       	mov    0xf017d960,%eax
f010a6f1:	85 c0                	test   %eax,%eax
f010a6f3:	74 30                	je     f010a725 <env_start+0x4f>
	{
		struct Env* p = get_cpu_proc();
f010a6f5:	e8 76 00 00 00       	call   f010a770 <get_cpu_proc>
f010a6fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
		cprintf("\n[ENV_START] %s - %d\n", p->prog_name, p->env_id);
f010a6fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a700:	8b 40 10             	mov    0x10(%eax),%eax
f010a703:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a706:	83 c2 20             	add    $0x20,%edx
f010a709:	83 ec 04             	sub    $0x4,%esp
f010a70c:	50                   	push   %eax
f010a70d:	52                   	push   %edx
f010a70e:	68 fb 75 12 f0       	push   $0xf01275fb
f010a713:	e8 54 68 ff ff       	call   f0100f6c <cprintf>
f010a718:	83 c4 10             	add    $0x10,%esp

		// Some initialization functions must be run in the context
		// of a regular process (e.g., they call sleep), and thus cannot
		// be run from main().
		first = 0;
f010a71b:	c7 05 60 d9 17 f0 00 	movl   $0x0,0xf017d960
f010a722:	00 00 00 
	}

	// Return to "caller", actually trapret (see initialize_environment()).
}
f010a725:	90                   	nop
f010a726:	c9                   	leave  
f010a727:	c3                   	ret    

f010a728 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f010a728:	55                   	push   %ebp
f010a729:	89 e5                	mov    %esp,%ebp
	/*REMOVE THIS LINE BEFORE START CODING*/
	return;
f010a72b:	90                   	nop

	// [10] free the environment (return it back to the free environment list)
	/*(ALREADY DONE for you)*/
	free_environment(e); /*(ALREADY DONE for you)*/ // (frees the environment (returns it back to the free environment list))
	/*========================*/
}
f010a72c:	5d                   	pop    %ebp
f010a72d:	c3                   	ret    

f010a72e <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
//Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit(void)
{
f010a72e:	55                   	push   %ebp
f010a72f:	89 e5                	mov    %esp,%ebp
f010a731:	83 ec 18             	sub    $0x18,%esp
	struct Env* cur_env = get_cpu_proc();
f010a734:	e8 37 00 00 00       	call   f010a770 <get_cpu_proc>
f010a739:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(cur_env != NULL);
f010a73c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a740:	75 19                	jne    f010a75b <env_exit+0x2d>
f010a742:	68 11 76 12 f0       	push   $0xf0127611
f010a747:	68 21 76 12 f0       	push   $0xf0127621
f010a74c:	68 ea 01 00 00       	push   $0x1ea
f010a751:	68 4b 75 12 f0       	push   $0xf012754b
f010a756:	e8 bf 5b ff ff       	call   f010031a <_panic>
	sched_exit_env(cur_env->env_id);
f010a75b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a75e:	8b 40 10             	mov    0x10(%eax),%eax
f010a761:	83 ec 0c             	sub    $0xc,%esp
f010a764:	50                   	push   %eax
f010a765:	e8 48 b0 ff ff       	call   f01057b2 <sched_exit_env>
f010a76a:	83 c4 10             	add    $0x10,%esp
	//2024: Replaced by context switch
	//fos_scheduler();
	//context_switch(&(curenv->context), mycpu()->scheduler);
}
f010a76d:	90                   	nop
f010a76e:	c9                   	leave  
f010a76f:	c3                   	ret    

f010a770 <get_cpu_proc>:
//===================================
// Disable interrupts so that we are not rescheduled
// while reading proc from the cpu structure
// Ref: xv6-x86 OS
struct Env* get_cpu_proc(void)
{
f010a770:	55                   	push   %ebp
f010a771:	89 e5                	mov    %esp,%ebp
f010a773:	83 ec 18             	sub    $0x18,%esp
	struct cpu *c;
	struct Env *p;
	pushcli();
f010a776:	e8 45 ca ff ff       	call   f01071c0 <pushcli>
	c = mycpu();
f010a77b:	e8 7d c9 ff ff       	call   f01070fd <mycpu>
f010a780:	89 45 f4             	mov    %eax,-0xc(%ebp)
	p = c->proc;
f010a783:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a786:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010a78c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	popcli();
f010a78f:	e8 7e ca ff ff       	call   f0107212 <popcli>
	return p;
f010a794:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010a797:	c9                   	leave  
f010a798:	c3                   	ret    

f010a799 <set_cpu_proc>:
//===================================
// Disable interrupts so that we are not rescheduled
// while setting proc into the cpu structure
// Ref: xv6-x86 OS
void set_cpu_proc(struct Env* p)
{
f010a799:	55                   	push   %ebp
f010a79a:	89 e5                	mov    %esp,%ebp
f010a79c:	83 ec 18             	sub    $0x18,%esp
	struct cpu *c;
	pushcli();
f010a79f:	e8 1c ca ff ff       	call   f01071c0 <pushcli>
	c = mycpu();
f010a7a4:	e8 54 c9 ff ff       	call   f01070fd <mycpu>
f010a7a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	c->proc = p;
f010a7ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7af:	8b 55 08             	mov    0x8(%ebp),%edx
f010a7b2:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
	popcli();
f010a7b8:	e8 55 ca ff ff       	call   f0107212 <popcli>
}
f010a7bd:	90                   	nop
f010a7be:	c9                   	leave  
f010a7bf:	c3                   	ret    

f010a7c0 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f010a7c0:	55                   	push   %ebp
f010a7c1:	89 e5                	mov    %esp,%ebp
f010a7c3:	53                   	push   %ebx
f010a7c4:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f010a7c7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a7cb:	75 16                	jne    f010a7e3 <envid2env+0x23>
		*env_store = get_cpu_proc();
f010a7cd:	e8 9e ff ff ff       	call   f010a770 <get_cpu_proc>
f010a7d2:	89 c2                	mov    %eax,%edx
f010a7d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a7d7:	89 10                	mov    %edx,(%eax)
		return 0;
f010a7d9:	b8 00 00 00 00       	mov    $0x0,%eax
f010a7de:	e9 b6 00 00 00       	jmp    f010a899 <envid2env+0xd9>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f010a7e3:	8b 1d b0 e3 59 f0    	mov    0xf059e3b0,%ebx
f010a7e9:	83 ec 0c             	sub    $0xc,%esp
f010a7ec:	6a 08                	push   $0x8
f010a7ee:	e8 9d 62 01 00       	call   f0120a90 <nearest_pow2_ceil>
f010a7f3:	83 c4 10             	add    $0x10,%esp
f010a7f6:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a7f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7fc:	21 c2                	and    %eax,%edx
f010a7fe:	89 d0                	mov    %edx,%eax
f010a800:	c1 e0 06             	shl    $0x6,%eax
f010a803:	29 d0                	sub    %edx,%eax
f010a805:	c1 e0 02             	shl    $0x2,%eax
f010a808:	01 d0                	add    %edx,%eax
f010a80a:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010a811:	01 c8                	add    %ecx,%eax
f010a813:	c1 e0 03             	shl    $0x3,%eax
f010a816:	01 d0                	add    %edx,%eax
f010a818:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a81f:	29 c2                	sub    %eax,%edx
f010a821:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f010a828:	89 c2                	mov    %eax,%edx
f010a82a:	89 d0                	mov    %edx,%eax
f010a82c:	01 d8                	add    %ebx,%eax
f010a82e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f010a831:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a834:	8b 40 18             	mov    0x18(%eax),%eax
f010a837:	85 c0                	test   %eax,%eax
f010a839:	74 0b                	je     f010a846 <envid2env+0x86>
f010a83b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a83e:	8b 40 10             	mov    0x10(%eax),%eax
f010a841:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a844:	74 10                	je     f010a856 <envid2env+0x96>
		*env_store = 0;
f010a846:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a849:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010a84f:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010a854:	eb 43                	jmp    f010a899 <envid2env+0xd9>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	struct Env* cur_env = get_cpu_proc();
f010a856:	e8 15 ff ff ff       	call   f010a770 <get_cpu_proc>
f010a85b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (checkperm && e != cur_env && e->env_parent_id != cur_env->env_id) {
f010a85e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010a862:	74 28                	je     f010a88c <envid2env+0xcc>
f010a864:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a867:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010a86a:	74 20                	je     f010a88c <envid2env+0xcc>
f010a86c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a86f:	8b 50 14             	mov    0x14(%eax),%edx
f010a872:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a875:	8b 40 10             	mov    0x10(%eax),%eax
f010a878:	39 c2                	cmp    %eax,%edx
f010a87a:	74 10                	je     f010a88c <envid2env+0xcc>
		*env_store = 0;
f010a87c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a87f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010a885:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010a88a:	eb 0d                	jmp    f010a899 <envid2env+0xd9>
	}

	*env_store = e;
f010a88c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a88f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a892:	89 10                	mov    %edx,(%eax)
	return 0;
f010a894:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a899:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a89c:	c9                   	leave  
f010a89d:	c3                   	ret    

f010a89e <yield>:
// 8) GIVE-UP CPU TO THE SCHEDULER:
//=================================
// Give up the CPU for one scheduling round.
// Ref: xv6-x86 OS
void yield(void)
{
f010a89e:	55                   	push   %ebp
f010a89f:	89 e5                	mov    %esp,%ebp
f010a8a1:	83 ec 18             	sub    $0x18,%esp
	//cprintf("\n[YIELD] acquire: lock status before acquire = %d\n", qlock.locked);
	acquire_spinlock(&ProcessQueues.qlock);  //lock: to protect process Qs in multi-CPU
f010a8a4:	83 ec 0c             	sub    $0xc,%esp
f010a8a7:	68 00 ee 59 f0       	push   $0xf059ee00
f010a8ac:	e8 70 42 00 00       	call   f010eb21 <acquire_spinlock>
f010a8b1:	83 c4 10             	add    $0x10,%esp
	{
		struct Env* p = get_cpu_proc();
f010a8b4:	e8 b7 fe ff ff       	call   f010a770 <get_cpu_proc>
f010a8b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		assert(p != NULL);
f010a8bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a8c0:	75 19                	jne    f010a8db <yield+0x3d>
f010a8c2:	68 36 76 12 f0       	push   $0xf0127636
f010a8c7:	68 21 76 12 f0       	push   $0xf0127621
f010a8cc:	68 49 02 00 00       	push   $0x249
f010a8d1:	68 4b 75 12 f0       	push   $0xf012754b
f010a8d6:	e8 3f 5a ff ff       	call   f010031a <_panic>
		p->env_status = ENV_READY;
f010a8db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a8de:	c7 40 18 01 00 00 00 	movl   $0x1,0x18(%eax)
		sched();
f010a8e5:	e8 13 00 00 00       	call   f010a8fd <sched>
	}
	release_spinlock(&ProcessQueues.qlock); ////release lock
f010a8ea:	83 ec 0c             	sub    $0xc,%esp
f010a8ed:	68 00 ee 59 f0       	push   $0xf059ee00
f010a8f2:	e8 b1 42 00 00       	call   f010eba8 <release_spinlock>
f010a8f7:	83 c4 10             	add    $0x10,%esp
	//cprintf("\n[YIELD] release: lock status after release = %d\n", qlock.locked);
}
f010a8fa:	90                   	nop
f010a8fb:	c9                   	leave  
f010a8fc:	c3                   	ret    

f010a8fd <sched>:
// Saves and restores intena because intena is a property of this kernel thread, not this CPU.
// It should be proc->intena and proc->ncli, but that would break in the few places
// where a lock is held but there's no process.
// Ref: xv6-x86 OS
void sched(void)
{
f010a8fd:	55                   	push   %ebp
f010a8fe:	89 e5                	mov    %esp,%ebp
f010a900:	83 ec 18             	sub    $0x18,%esp
	int intena;
	struct Env *p = get_cpu_proc();
f010a903:	e8 68 fe ff ff       	call   f010a770 <get_cpu_proc>
f010a908:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(p != NULL);
f010a90b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a90f:	75 19                	jne    f010a92a <sched+0x2d>
f010a911:	68 36 76 12 f0       	push   $0xf0127636
f010a916:	68 21 76 12 f0       	push   $0xf0127621
f010a91b:	68 5d 02 00 00       	push   $0x25d
f010a920:	68 4b 75 12 f0       	push   $0xf012754b
f010a925:	e8 f0 59 ff ff       	call   f010031a <_panic>

	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f010a92a:	83 ec 0c             	sub    $0xc,%esp
f010a92d:	68 00 ee 59 f0       	push   $0xf059ee00
f010a932:	e8 03 44 00 00       	call   f010ed3a <holding_spinlock>
f010a937:	83 c4 10             	add    $0x10,%esp
f010a93a:	85 c0                	test   %eax,%eax
f010a93c:	75 17                	jne    f010a955 <sched+0x58>
		panic("sched: q.lock is not held by this CPU while it's expected to be. ");
f010a93e:	83 ec 04             	sub    $0x4,%esp
f010a941:	68 40 76 12 f0       	push   $0xf0127640
f010a946:	68 61 02 00 00       	push   $0x261
f010a94b:	68 4b 75 12 f0       	push   $0xf012754b
f010a950:	e8 c5 59 ff ff       	call   f010031a <_panic>
	/*Should ensure that the ncli = 1 so that the interrupt will be released after scheduling the next proc*/
	if(mycpu()->ncli != 1)
f010a955:	e8 a3 c7 ff ff       	call   f01070fd <mycpu>
f010a95a:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f010a960:	83 f8 01             	cmp    $0x1,%eax
f010a963:	74 20                	je     f010a985 <sched+0x88>
		panic("sched locks: ncli = %d", mycpu()->ncli);
f010a965:	e8 93 c7 ff ff       	call   f01070fd <mycpu>
f010a96a:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f010a970:	50                   	push   %eax
f010a971:	68 82 76 12 f0       	push   $0xf0127682
f010a976:	68 64 02 00 00       	push   $0x264
f010a97b:	68 4b 75 12 f0       	push   $0xf012754b
f010a980:	e8 95 59 ff ff       	call   f010031a <_panic>
	/*********************************************************************/
	if(p->env_status == ENV_RUNNING)
f010a985:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a988:	8b 40 18             	mov    0x18(%eax),%eax
f010a98b:	83 f8 02             	cmp    $0x2,%eax
f010a98e:	75 17                	jne    f010a9a7 <sched+0xaa>
		panic("sched a running process");
f010a990:	83 ec 04             	sub    $0x4,%esp
f010a993:	68 99 76 12 f0       	push   $0xf0127699
f010a998:	68 67 02 00 00       	push   $0x267
f010a99d:	68 4b 75 12 f0       	push   $0xf012754b
f010a9a2:	e8 73 59 ff ff       	call   f010031a <_panic>

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f010a9a7:	9c                   	pushf  
f010a9a8:	58                   	pop    %eax
f010a9a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        return eflags;
f010a9ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
	if(read_eflags()&FL_IF)
f010a9af:	25 00 02 00 00       	and    $0x200,%eax
f010a9b4:	85 c0                	test   %eax,%eax
f010a9b6:	74 17                	je     f010a9cf <sched+0xd2>
		panic("sched is interruptible!");
f010a9b8:	83 ec 04             	sub    $0x4,%esp
f010a9bb:	68 b1 76 12 f0       	push   $0xf01276b1
f010a9c0:	68 69 02 00 00       	push   $0x269
f010a9c5:	68 4b 75 12 f0       	push   $0xf012754b
f010a9ca:	e8 4b 59 ff ff       	call   f010031a <_panic>
	intena = mycpu()->intena;
f010a9cf:	e8 29 c7 ff ff       	call   f01070fd <mycpu>
f010a9d4:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
f010a9da:	89 45 f0             	mov    %eax,-0x10(%ebp)
	context_switch(&(p->context), mycpu()->scheduler);
f010a9dd:	e8 1b c7 ff ff       	call   f01070fd <mycpu>
f010a9e2:	8b 40 04             	mov    0x4(%eax),%eax
f010a9e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a9e8:	83 c2 04             	add    $0x4,%edx
f010a9eb:	83 ec 08             	sub    $0x8,%esp
f010a9ee:	50                   	push   %eax
f010a9ef:	52                   	push   %edx
f010a9f0:	e8 4a a1 ff ff       	call   f0104b3f <context_switch>
f010a9f5:	83 c4 10             	add    $0x10,%esp
	mycpu()->intena = intena;
f010a9f8:	e8 00 c7 ff ff       	call   f01070fd <mycpu>
f010a9fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010aa00:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
}
f010aa06:	90                   	nop
f010aa07:	c9                   	leave  
f010aa08:	c3                   	ret    

f010aa09 <switchkvm>:
// 10) SWITCH VIRTUAL MEMORYs:
//===============================
// [10.1] Switch h/w page table register to the kernel-only page table,
// for when no process is running.
void switchkvm(void)
{
f010aa09:	55                   	push   %ebp
f010aa0a:	89 e5                	mov    %esp,%ebp
f010aa0c:	83 ec 10             	sub    $0x10,%esp
	lcr3(phys_page_directory);   // switch to the kernel page table
f010aa0f:	a1 84 1b 5a f0       	mov    0xf05a1b84,%eax
f010aa14:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010aa17:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010aa1a:	0f 22 d8             	mov    %eax,%cr3
}
f010aa1d:	90                   	nop
f010aa1e:	c9                   	leave  
f010aa1f:	c3                   	ret    

f010aa20 <switchuvm>:

// [10.2] Switch TSS and h/w page table to correspond to process p.
void switchuvm(struct Env *proc)
{
f010aa20:	55                   	push   %ebp
f010aa21:	89 e5                	mov    %esp,%ebp
f010aa23:	53                   	push   %ebx
f010aa24:	83 ec 14             	sub    $0x14,%esp
	if(proc == 0)
f010aa27:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010aa2b:	75 17                	jne    f010aa44 <switchuvm+0x24>
		panic("switchuvm: no process");
f010aa2d:	83 ec 04             	sub    $0x4,%esp
f010aa30:	68 c9 76 12 f0       	push   $0xf01276c9
f010aa35:	68 7e 02 00 00       	push   $0x27e
f010aa3a:	68 4b 75 12 f0       	push   $0xf012754b
f010aa3f:	e8 d6 58 ff ff       	call   f010031a <_panic>
	if(proc->kstack == 0)
f010aa44:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa47:	8b 40 70             	mov    0x70(%eax),%eax
f010aa4a:	85 c0                	test   %eax,%eax
f010aa4c:	75 17                	jne    f010aa65 <switchuvm+0x45>
		panic("switchuvm: no kstack");
f010aa4e:	83 ec 04             	sub    $0x4,%esp
f010aa51:	68 df 76 12 f0       	push   $0xf01276df
f010aa56:	68 80 02 00 00       	push   $0x280
f010aa5b:	68 4b 75 12 f0       	push   $0xf012754b
f010aa60:	e8 b5 58 ff ff       	call   f010031a <_panic>
	if(proc->env_page_directory == 0)
f010aa65:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa68:	8b 40 64             	mov    0x64(%eax),%eax
f010aa6b:	85 c0                	test   %eax,%eax
f010aa6d:	75 17                	jne    f010aa86 <switchuvm+0x66>
		panic("switchuvm: no pgdir");
f010aa6f:	83 ec 04             	sub    $0x4,%esp
f010aa72:	68 f4 76 12 f0       	push   $0xf01276f4
f010aa77:	68 82 02 00 00       	push   $0x282
f010aa7c:	68 4b 75 12 f0       	push   $0xf012754b
f010aa81:	e8 94 58 ff ff       	call   f010031a <_panic>

	pushcli();	//disable interrupt - lock: to protect CPU info
f010aa86:	e8 35 c7 ff ff       	call   f01071c0 <pushcli>
	struct cpu* c = mycpu();
f010aa8b:	e8 6d c6 ff ff       	call   f01070fd <mycpu>
f010aa90:	89 45 f4             	mov    %eax,-0xc(%ebp)
	c->proc = proc;
f010aa93:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa96:	8b 55 08             	mov    0x8(%ebp),%edx
f010aa99:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)

	// Initialize the TSS field of the gdt.
	c->gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&(c->ts)), sizeof(struct Taskstate), 0);
f010aa9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aaa2:	83 c0 0c             	add    $0xc,%eax
f010aaa5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aaa8:	83 c2 0c             	add    $0xc,%edx
f010aaab:	c1 ea 10             	shr    $0x10,%edx
f010aaae:	88 d3                	mov    %dl,%bl
f010aab0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aab3:	83 c2 0c             	add    $0xc,%edx
f010aab6:	c1 ea 18             	shr    $0x18,%edx
f010aab9:	88 d1                	mov    %dl,%cl
f010aabb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aabe:	66 c7 82 9c 00 00 00 	movw   $0x68,0x9c(%edx)
f010aac5:	68 00 
f010aac7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aaca:	66 89 82 9e 00 00 00 	mov    %ax,0x9e(%edx)
f010aad1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aad4:	88 98 a0 00 00 00    	mov    %bl,0xa0(%eax)
f010aada:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aadd:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010aae3:	83 e2 f0             	and    $0xfffffff0,%edx
f010aae6:	83 ca 09             	or     $0x9,%edx
f010aae9:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010aaef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aaf2:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010aaf8:	83 ca 10             	or     $0x10,%edx
f010aafb:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010ab01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab04:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010ab0a:	83 e2 9f             	and    $0xffffff9f,%edx
f010ab0d:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010ab13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab16:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010ab1c:	83 ca 80             	or     $0xffffff80,%edx
f010ab1f:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010ab25:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab28:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010ab2e:	83 e2 f0             	and    $0xfffffff0,%edx
f010ab31:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010ab37:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab3a:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010ab40:	83 e2 ef             	and    $0xffffffef,%edx
f010ab43:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010ab49:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab4c:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010ab52:	83 e2 df             	and    $0xffffffdf,%edx
f010ab55:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010ab5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab5e:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010ab64:	83 ca 40             	or     $0x40,%edx
f010ab67:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010ab6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab70:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010ab76:	83 e2 7f             	and    $0x7f,%edx
f010ab79:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010ab7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab82:	88 88 a3 00 00 00    	mov    %cl,0xa3(%eax)
	c->gdt[GD_TSS >> 3].sd_s = 0;
f010ab88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab8b:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010ab91:	83 e2 ef             	and    $0xffffffef,%edx
f010ab94:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)

	//adjust the default stack for the trap to be the user kernel stack
	c->ts.ts_esp0 = (uint32)(c->proc->kstack + KERNEL_STACK_SIZE);
f010ab9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab9d:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010aba3:	8b 40 70             	mov    0x70(%eax),%eax
f010aba6:	05 00 80 00 00       	add    $0x8000,%eax
f010abab:	89 c2                	mov    %eax,%edx
f010abad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abb0:	89 50 10             	mov    %edx,0x10(%eax)
	c->ts.ts_ss0 = GD_KD;
f010abb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abb6:	66 c7 40 14 10 00    	movw   $0x10,0x14(%eax)
f010abbc:	66 c7 45 f2 28 00    	movw   $0x28,-0xe(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010abc2:	66 8b 45 f2          	mov    -0xe(%ebp),%ax
f010abc6:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	//load the user page directory
	lcr3(c->proc->env_cr3) ;
f010abc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abcc:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010abd2:	8b 40 68             	mov    0x68(%eax),%eax
f010abd5:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010abd8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010abdb:	0f 22 d8             	mov    %eax,%cr3

	popcli();	//enable interrupt
f010abde:	e8 2f c6 ff ff       	call   f0107212 <popcli>
}
f010abe3:	90                   	nop
f010abe4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010abe7:	c9                   	leave  
f010abe8:	c3                   	ret    

f010abe9 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f010abe9:	55                   	push   %ebp
f010abea:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f010abec:	8b 15 b4 e3 59 f0    	mov    0xf059e3b4,%edx
f010abf2:	8b 45 08             	mov    0x8(%ebp),%eax
f010abf5:	89 10                	mov    %edx,(%eax)
f010abf7:	8b 45 08             	mov    0x8(%ebp),%eax
f010abfa:	8b 00                	mov    (%eax),%eax
f010abfc:	85 c0                	test   %eax,%eax
f010abfe:	75 07                	jne    f010ac07 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f010ac00:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f010ac05:	eb 11                	jmp    f010ac18 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f010ac07:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac0a:	8b 00                	mov    (%eax),%eax
f010ac0c:	c7 40 18 06 00 00 00 	movl   $0x6,0x18(%eax)
	return 0;
f010ac13:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ac18:	5d                   	pop    %ebp
f010ac19:	c3                   	ret    

f010ac1a <free_environment>:
//===============================
// 2) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f010ac1a:	55                   	push   %ebp
f010ac1b:	89 e5                	mov    %esp,%ebp
f010ac1d:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f010ac20:	83 ec 04             	sub    $0x4,%esp
f010ac23:	68 6c da 01 00       	push   $0x1da6c
f010ac28:	6a 00                	push   $0x0
f010ac2a:	ff 75 08             	pushl  0x8(%ebp)
f010ac2d:	e8 f4 79 01 00       	call   f0122626 <memset>
f010ac32:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f010ac35:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac38:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f010ac3f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010ac43:	75 17                	jne    f010ac5c <free_environment+0x42>
f010ac45:	83 ec 04             	sub    $0x4,%esp
f010ac48:	68 28 75 12 f0       	push   $0xf0127528
f010ac4d:	68 bd 02 00 00       	push   $0x2bd
f010ac52:	68 4b 75 12 f0       	push   $0xf012754b
f010ac57:	e8 be 56 ff ff       	call   f010031a <_panic>
f010ac5c:	8b 15 b4 e3 59 f0    	mov    0xf059e3b4,%edx
f010ac62:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac65:	89 50 08             	mov    %edx,0x8(%eax)
f010ac68:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac6b:	8b 40 08             	mov    0x8(%eax),%eax
f010ac6e:	85 c0                	test   %eax,%eax
f010ac70:	74 0d                	je     f010ac7f <free_environment+0x65>
f010ac72:	a1 b4 e3 59 f0       	mov    0xf059e3b4,%eax
f010ac77:	8b 55 08             	mov    0x8(%ebp),%edx
f010ac7a:	89 50 0c             	mov    %edx,0xc(%eax)
f010ac7d:	eb 08                	jmp    f010ac87 <free_environment+0x6d>
f010ac7f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac82:	a3 b8 e3 59 f0       	mov    %eax,0xf059e3b8
f010ac87:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac8a:	a3 b4 e3 59 f0       	mov    %eax,0xf059e3b4
f010ac8f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac92:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f010ac99:	a1 c0 e3 59 f0       	mov    0xf059e3c0,%eax
f010ac9e:	40                   	inc    %eax
f010ac9f:	a3 c0 e3 59 f0       	mov    %eax,0xf059e3c0
}
f010aca4:	90                   	nop
f010aca5:	c9                   	leave  
f010aca6:	c3                   	ret    

f010aca7 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f010aca7:	55                   	push   %ebp
f010aca8:	89 e5                	mov    %esp,%ebp
f010acaa:	53                   	push   %ebx
f010acab:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f010acae:	8b 45 0c             	mov    0xc(%ebp),%eax
f010acb1:	8b 40 0c             	mov    0xc(%eax),%eax
f010acb4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f010acb7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010acba:	8b 40 08             	mov    0x8(%eax),%eax
f010acbd:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f010acc0:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010acc7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010acca:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010accd:	01 c2                	add    %eax,%edx
f010accf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010acd2:	01 d0                	add    %edx,%eax
f010acd4:	48                   	dec    %eax
f010acd5:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010acd8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010acdb:	ba 00 00 00 00       	mov    $0x0,%edx
f010ace0:	f7 75 dc             	divl   -0x24(%ebp)
f010ace3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ace6:	29 d0                	sub    %edx,%eax
f010ace8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f010aceb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010acee:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010acf1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010acf4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010acf9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f010acfc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f010ad03:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f010ad0a:	8b 45 10             	mov    0x10(%ebp),%eax
f010ad0d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f010ad13:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f010ad1a:	0f 85 35 06 00 00    	jne    f010b355 <program_segment_alloc_map_copy_workingset+0x6ae>
f010ad20:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad23:	83 c0 20             	add    $0x20,%eax
f010ad26:	83 ec 08             	sub    $0x8,%esp
f010ad29:	68 08 77 12 f0       	push   $0xf0127708
f010ad2e:	50                   	push   %eax
f010ad2f:	e8 10 78 01 00       	call   f0122544 <strcmp>
f010ad34:	83 c4 10             	add    $0x10,%esp
f010ad37:	85 c0                	test   %eax,%eax
f010ad39:	0f 84 16 06 00 00    	je     f010b355 <program_segment_alloc_map_copy_workingset+0x6ae>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f010ad3f:	8b 45 14             	mov    0x14(%ebp),%eax
f010ad42:	83 f8 06             	cmp    $0x6,%eax
f010ad45:	76 05                	jbe    f010ad4c <program_segment_alloc_map_copy_workingset+0xa5>
f010ad47:	b8 06 00 00 00       	mov    $0x6,%eax
f010ad4c:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010ad4f:	e9 01 06 00 00       	jmp    f010b355 <program_segment_alloc_map_copy_workingset+0x6ae>
	{
		// Allocate a page
		allocate_frame(&p) ;
f010ad54:	83 ec 0c             	sub    $0xc,%esp
f010ad57:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ad5a:	50                   	push   %eax
f010ad5b:	e8 70 d4 ff ff       	call   f01081d0 <allocate_frame>
f010ad60:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f010ad63:	8b 55 c0             	mov    -0x40(%ebp),%edx
f010ad66:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad69:	8b 40 64             	mov    0x64(%eax),%eax
f010ad6c:	6a 06                	push   $0x6
f010ad6e:	ff 75 f4             	pushl  -0xc(%ebp)
f010ad71:	52                   	push   %edx
f010ad72:	50                   	push   %eax
f010ad73:	e8 6c da ff ff       	call   f01087e4 <loadtime_map_frame>
f010ad78:	83 c4 10             	add    $0x10,%esp
		wse->time_stamp = 0;
		LIST_INSERT_TAIL(&(e->page_WS_list), wse);

#else
		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));
		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f010ad7b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad7e:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010ad84:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ad87:	89 d0                	mov    %edx,%eax
f010ad89:	01 c0                	add    %eax,%eax
f010ad8b:	01 d0                	add    %edx,%eax
f010ad8d:	c1 e0 03             	shl    $0x3,%eax
f010ad90:	01 c8                	add    %ecx,%eax
f010ad92:	8d 90 88 00 00 00    	lea    0x88(%eax),%edx
f010ad98:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad9b:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f010ad9d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ada0:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010ada6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ada9:	89 d0                	mov    %edx,%eax
f010adab:	01 c0                	add    %eax,%eax
f010adad:	01 d0                	add    %edx,%eax
f010adaf:	c1 e0 03             	shl    $0x3,%eax
f010adb2:	01 c8                	add    %ecx,%eax
f010adb4:	05 8c 00 00 00       	add    $0x8c,%eax
f010adb9:	c6 00 00             	movb   $0x0,(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f010adbc:	8b 45 08             	mov    0x8(%ebp),%eax
f010adbf:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010adc5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010adc8:	89 d0                	mov    %edx,%eax
f010adca:	01 c0                	add    %eax,%eax
f010adcc:	01 d0                	add    %edx,%eax
f010adce:	c1 e0 03             	shl    $0x3,%eax
f010add1:	01 c8                	add    %ecx,%eax
f010add3:	05 90 00 00 00       	add    $0x90,%eax
f010add8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#endif
		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010adde:	83 ec 0c             	sub    $0xc,%esp
f010ade1:	6a 02                	push   $0x2
f010ade3:	e8 28 39 00 00       	call   f010e710 <isPageReplacmentAlgorithmLRU>
f010ade8:	83 c4 10             	add    $0x10,%esp
f010adeb:	85 c0                	test   %eax,%eax
f010aded:	0f 84 2c 04 00 00    	je     f010b21f <program_segment_alloc_map_copy_workingset+0x578>
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), wse);
			}
#else

			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010adf3:	8b 45 08             	mov    0x8(%ebp),%eax
f010adf6:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010adfc:	89 d0                	mov    %edx,%eax
f010adfe:	01 c0                	add    %eax,%eax
f010ae00:	01 d0                	add    %edx,%eax
f010ae02:	c1 e0 03             	shl    $0x3,%eax
f010ae05:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010ae0b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae0e:	01 d0                	add    %edx,%eax
f010ae10:	83 c0 08             	add    $0x8,%eax
f010ae13:	85 c0                	test   %eax,%eax
f010ae15:	75 17                	jne    f010ae2e <program_segment_alloc_map_copy_workingset+0x187>
f010ae17:	83 ec 04             	sub    $0x4,%esp
f010ae1a:	68 dd 75 12 f0       	push   $0xf01275dd
f010ae1f:	68 00 03 00 00       	push   $0x300
f010ae24:	68 4b 75 12 f0       	push   $0xf012754b
f010ae29:	e8 ec 54 ff ff       	call   f010031a <_panic>
f010ae2e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae31:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010ae37:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ae3a:	89 d0                	mov    %edx,%eax
f010ae3c:	01 c0                	add    %eax,%eax
f010ae3e:	01 d0                	add    %edx,%eax
f010ae40:	c1 e0 03             	shl    $0x3,%eax
f010ae43:	01 c8                	add    %ecx,%eax
f010ae45:	05 98 00 00 00       	add    $0x98,%eax
f010ae4a:	8b 00                	mov    (%eax),%eax
f010ae4c:	85 c0                	test   %eax,%eax
f010ae4e:	74 41                	je     f010ae91 <program_segment_alloc_map_copy_workingset+0x1ea>
f010ae50:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae53:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010ae59:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ae5c:	89 d0                	mov    %edx,%eax
f010ae5e:	01 c0                	add    %eax,%eax
f010ae60:	01 d0                	add    %edx,%eax
f010ae62:	c1 e0 03             	shl    $0x3,%eax
f010ae65:	01 c8                	add    %ecx,%eax
f010ae67:	05 98 00 00 00       	add    $0x98,%eax
f010ae6c:	8b 10                	mov    (%eax),%edx
f010ae6e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae71:	8b 88 58 d5 01 00    	mov    0x1d558(%eax),%ecx
f010ae77:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010ae7a:	89 c8                	mov    %ecx,%eax
f010ae7c:	01 c0                	add    %eax,%eax
f010ae7e:	01 c8                	add    %ecx,%eax
f010ae80:	c1 e0 03             	shl    $0x3,%eax
f010ae83:	01 d8                	add    %ebx,%eax
f010ae85:	05 9c 00 00 00       	add    $0x9c,%eax
f010ae8a:	8b 00                	mov    (%eax),%eax
f010ae8c:	89 42 14             	mov    %eax,0x14(%edx)
f010ae8f:	eb 27                	jmp    f010aeb8 <program_segment_alloc_map_copy_workingset+0x211>
f010ae91:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae94:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010ae9a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ae9d:	89 d0                	mov    %edx,%eax
f010ae9f:	01 c0                	add    %eax,%eax
f010aea1:	01 d0                	add    %edx,%eax
f010aea3:	c1 e0 03             	shl    $0x3,%eax
f010aea6:	01 c8                	add    %ecx,%eax
f010aea8:	05 9c 00 00 00       	add    $0x9c,%eax
f010aead:	8b 10                	mov    (%eax),%edx
f010aeaf:	8b 45 08             	mov    0x8(%ebp),%eax
f010aeb2:	89 90 4c d5 01 00    	mov    %edx,0x1d54c(%eax)
f010aeb8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aebb:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010aec1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010aec4:	89 d0                	mov    %edx,%eax
f010aec6:	01 c0                	add    %eax,%eax
f010aec8:	01 d0                	add    %edx,%eax
f010aeca:	c1 e0 03             	shl    $0x3,%eax
f010aecd:	01 c8                	add    %ecx,%eax
f010aecf:	05 9c 00 00 00       	add    $0x9c,%eax
f010aed4:	8b 00                	mov    (%eax),%eax
f010aed6:	85 c0                	test   %eax,%eax
f010aed8:	74 41                	je     f010af1b <program_segment_alloc_map_copy_workingset+0x274>
f010aeda:	8b 45 08             	mov    0x8(%ebp),%eax
f010aedd:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010aee3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010aee6:	89 d0                	mov    %edx,%eax
f010aee8:	01 c0                	add    %eax,%eax
f010aeea:	01 d0                	add    %edx,%eax
f010aeec:	c1 e0 03             	shl    $0x3,%eax
f010aeef:	01 c8                	add    %ecx,%eax
f010aef1:	05 9c 00 00 00       	add    $0x9c,%eax
f010aef6:	8b 10                	mov    (%eax),%edx
f010aef8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aefb:	8b 88 58 d5 01 00    	mov    0x1d558(%eax),%ecx
f010af01:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010af04:	89 c8                	mov    %ecx,%eax
f010af06:	01 c0                	add    %eax,%eax
f010af08:	01 c8                	add    %ecx,%eax
f010af0a:	c1 e0 03             	shl    $0x3,%eax
f010af0d:	01 d8                	add    %ebx,%eax
f010af0f:	05 98 00 00 00       	add    $0x98,%eax
f010af14:	8b 00                	mov    (%eax),%eax
f010af16:	89 42 10             	mov    %eax,0x10(%edx)
f010af19:	eb 27                	jmp    f010af42 <program_segment_alloc_map_copy_workingset+0x29b>
f010af1b:	8b 45 08             	mov    0x8(%ebp),%eax
f010af1e:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010af24:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010af27:	89 d0                	mov    %edx,%eax
f010af29:	01 c0                	add    %eax,%eax
f010af2b:	01 d0                	add    %edx,%eax
f010af2d:	c1 e0 03             	shl    $0x3,%eax
f010af30:	01 c8                	add    %ecx,%eax
f010af32:	05 98 00 00 00       	add    $0x98,%eax
f010af37:	8b 10                	mov    (%eax),%edx
f010af39:	8b 45 08             	mov    0x8(%ebp),%eax
f010af3c:	89 90 48 d5 01 00    	mov    %edx,0x1d548(%eax)
f010af42:	8b 45 08             	mov    0x8(%ebp),%eax
f010af45:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010af4b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010af4e:	89 d0                	mov    %edx,%eax
f010af50:	01 c0                	add    %eax,%eax
f010af52:	01 d0                	add    %edx,%eax
f010af54:	c1 e0 03             	shl    $0x3,%eax
f010af57:	01 c8                	add    %ecx,%eax
f010af59:	05 98 00 00 00       	add    $0x98,%eax
f010af5e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010af64:	8b 45 08             	mov    0x8(%ebp),%eax
f010af67:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010af6d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010af70:	89 d0                	mov    %edx,%eax
f010af72:	01 c0                	add    %eax,%eax
f010af74:	01 d0                	add    %edx,%eax
f010af76:	c1 e0 03             	shl    $0x3,%eax
f010af79:	01 c8                	add    %ecx,%eax
f010af7b:	05 9c 00 00 00       	add    $0x9c,%eax
f010af80:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010af86:	8b 45 08             	mov    0x8(%ebp),%eax
f010af89:	8b 80 54 d5 01 00    	mov    0x1d554(%eax),%eax
f010af8f:	8d 50 ff             	lea    -0x1(%eax),%edx
f010af92:	8b 45 08             	mov    0x8(%ebp),%eax
f010af95:	89 90 54 d5 01 00    	mov    %edx,0x1d554(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010af9b:	8b 45 08             	mov    0x8(%ebp),%eax
f010af9e:	8b 90 1c da 01 00    	mov    0x1da1c(%eax),%edx
f010afa4:	8b 45 08             	mov    0x8(%ebp),%eax
f010afa7:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010afad:	48                   	dec    %eax
f010afae:	39 c2                	cmp    %eax,%edx
f010afb0:	0f 83 37 01 00 00    	jae    f010b0ed <program_segment_alloc_map_copy_workingset+0x446>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010afb6:	8b 45 08             	mov    0x8(%ebp),%eax
f010afb9:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010afbf:	89 d0                	mov    %edx,%eax
f010afc1:	01 c0                	add    %eax,%eax
f010afc3:	01 d0                	add    %edx,%eax
f010afc5:	c1 e0 03             	shl    $0x3,%eax
f010afc8:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010afce:	8b 45 08             	mov    0x8(%ebp),%eax
f010afd1:	01 d0                	add    %edx,%eax
f010afd3:	83 c0 08             	add    $0x8,%eax
f010afd6:	85 c0                	test   %eax,%eax
f010afd8:	75 17                	jne    f010aff1 <program_segment_alloc_map_copy_workingset+0x34a>
f010afda:	83 ec 04             	sub    $0x4,%esp
f010afdd:	68 28 75 12 f0       	push   $0xf0127528
f010afe2:	68 04 03 00 00       	push   $0x304
f010afe7:	68 4b 75 12 f0       	push   $0xf012754b
f010afec:	e8 29 53 ff ff       	call   f010031a <_panic>
f010aff1:	8b 45 08             	mov    0x8(%ebp),%eax
f010aff4:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010affa:	8b 45 08             	mov    0x8(%ebp),%eax
f010affd:	8b 88 10 da 01 00    	mov    0x1da10(%eax),%ecx
f010b003:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010b006:	89 d0                	mov    %edx,%eax
f010b008:	01 c0                	add    %eax,%eax
f010b00a:	01 d0                	add    %edx,%eax
f010b00c:	c1 e0 03             	shl    $0x3,%eax
f010b00f:	01 d8                	add    %ebx,%eax
f010b011:	05 98 00 00 00       	add    $0x98,%eax
f010b016:	89 08                	mov    %ecx,(%eax)
f010b018:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b01b:	89 d0                	mov    %edx,%eax
f010b01d:	01 c0                	add    %eax,%eax
f010b01f:	01 d0                	add    %edx,%eax
f010b021:	c1 e0 03             	shl    $0x3,%eax
f010b024:	01 c8                	add    %ecx,%eax
f010b026:	05 98 00 00 00       	add    $0x98,%eax
f010b02b:	8b 00                	mov    (%eax),%eax
f010b02d:	85 c0                	test   %eax,%eax
f010b02f:	74 2e                	je     f010b05f <program_segment_alloc_map_copy_workingset+0x3b8>
f010b031:	8b 45 08             	mov    0x8(%ebp),%eax
f010b034:	8b 90 10 da 01 00    	mov    0x1da10(%eax),%edx
f010b03a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b03d:	8b 88 58 d5 01 00    	mov    0x1d558(%eax),%ecx
f010b043:	89 c8                	mov    %ecx,%eax
f010b045:	01 c0                	add    %eax,%eax
f010b047:	01 c8                	add    %ecx,%eax
f010b049:	c1 e0 03             	shl    $0x3,%eax
f010b04c:	8d 88 80 00 00 00    	lea    0x80(%eax),%ecx
f010b052:	8b 45 08             	mov    0x8(%ebp),%eax
f010b055:	01 c8                	add    %ecx,%eax
f010b057:	83 c0 08             	add    $0x8,%eax
f010b05a:	89 42 14             	mov    %eax,0x14(%edx)
f010b05d:	eb 29                	jmp    f010b088 <program_segment_alloc_map_copy_workingset+0x3e1>
f010b05f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b062:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b068:	89 d0                	mov    %edx,%eax
f010b06a:	01 c0                	add    %eax,%eax
f010b06c:	01 d0                	add    %edx,%eax
f010b06e:	c1 e0 03             	shl    $0x3,%eax
f010b071:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b077:	8b 45 08             	mov    0x8(%ebp),%eax
f010b07a:	01 d0                	add    %edx,%eax
f010b07c:	8d 50 08             	lea    0x8(%eax),%edx
f010b07f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b082:	89 90 14 da 01 00    	mov    %edx,0x1da14(%eax)
f010b088:	8b 45 08             	mov    0x8(%ebp),%eax
f010b08b:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b091:	89 d0                	mov    %edx,%eax
f010b093:	01 c0                	add    %eax,%eax
f010b095:	01 d0                	add    %edx,%eax
f010b097:	c1 e0 03             	shl    $0x3,%eax
f010b09a:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b0a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0a3:	01 d0                	add    %edx,%eax
f010b0a5:	8d 50 08             	lea    0x8(%eax),%edx
f010b0a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0ab:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
f010b0b1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0b4:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b0ba:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b0bd:	89 d0                	mov    %edx,%eax
f010b0bf:	01 c0                	add    %eax,%eax
f010b0c1:	01 d0                	add    %edx,%eax
f010b0c3:	c1 e0 03             	shl    $0x3,%eax
f010b0c6:	01 c8                	add    %ecx,%eax
f010b0c8:	05 9c 00 00 00       	add    $0x9c,%eax
f010b0cd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b0d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0d6:	8b 80 1c da 01 00    	mov    0x1da1c(%eax),%eax
f010b0dc:	8d 50 01             	lea    0x1(%eax),%edx
f010b0df:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0e2:	89 90 1c da 01 00    	mov    %edx,0x1da1c(%eax)
f010b0e8:	e9 32 01 00 00       	jmp    f010b21f <program_segment_alloc_map_copy_workingset+0x578>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010b0ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0f0:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b0f6:	89 d0                	mov    %edx,%eax
f010b0f8:	01 c0                	add    %eax,%eax
f010b0fa:	01 d0                	add    %edx,%eax
f010b0fc:	c1 e0 03             	shl    $0x3,%eax
f010b0ff:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b105:	8b 45 08             	mov    0x8(%ebp),%eax
f010b108:	01 d0                	add    %edx,%eax
f010b10a:	83 c0 08             	add    $0x8,%eax
f010b10d:	85 c0                	test   %eax,%eax
f010b10f:	75 17                	jne    f010b128 <program_segment_alloc_map_copy_workingset+0x481>
f010b111:	83 ec 04             	sub    $0x4,%esp
f010b114:	68 28 75 12 f0       	push   $0xf0127528
f010b119:	68 09 03 00 00       	push   $0x309
f010b11e:	68 4b 75 12 f0       	push   $0xf012754b
f010b123:	e8 f2 51 ff ff       	call   f010031a <_panic>
f010b128:	8b 45 08             	mov    0x8(%ebp),%eax
f010b12b:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b131:	8b 45 08             	mov    0x8(%ebp),%eax
f010b134:	8b 88 20 da 01 00    	mov    0x1da20(%eax),%ecx
f010b13a:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010b13d:	89 d0                	mov    %edx,%eax
f010b13f:	01 c0                	add    %eax,%eax
f010b141:	01 d0                	add    %edx,%eax
f010b143:	c1 e0 03             	shl    $0x3,%eax
f010b146:	01 d8                	add    %ebx,%eax
f010b148:	05 98 00 00 00       	add    $0x98,%eax
f010b14d:	89 08                	mov    %ecx,(%eax)
f010b14f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b152:	89 d0                	mov    %edx,%eax
f010b154:	01 c0                	add    %eax,%eax
f010b156:	01 d0                	add    %edx,%eax
f010b158:	c1 e0 03             	shl    $0x3,%eax
f010b15b:	01 c8                	add    %ecx,%eax
f010b15d:	05 98 00 00 00       	add    $0x98,%eax
f010b162:	8b 00                	mov    (%eax),%eax
f010b164:	85 c0                	test   %eax,%eax
f010b166:	74 2e                	je     f010b196 <program_segment_alloc_map_copy_workingset+0x4ef>
f010b168:	8b 45 08             	mov    0x8(%ebp),%eax
f010b16b:	8b 90 20 da 01 00    	mov    0x1da20(%eax),%edx
f010b171:	8b 45 08             	mov    0x8(%ebp),%eax
f010b174:	8b 88 58 d5 01 00    	mov    0x1d558(%eax),%ecx
f010b17a:	89 c8                	mov    %ecx,%eax
f010b17c:	01 c0                	add    %eax,%eax
f010b17e:	01 c8                	add    %ecx,%eax
f010b180:	c1 e0 03             	shl    $0x3,%eax
f010b183:	8d 88 80 00 00 00    	lea    0x80(%eax),%ecx
f010b189:	8b 45 08             	mov    0x8(%ebp),%eax
f010b18c:	01 c8                	add    %ecx,%eax
f010b18e:	83 c0 08             	add    $0x8,%eax
f010b191:	89 42 14             	mov    %eax,0x14(%edx)
f010b194:	eb 29                	jmp    f010b1bf <program_segment_alloc_map_copy_workingset+0x518>
f010b196:	8b 45 08             	mov    0x8(%ebp),%eax
f010b199:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b19f:	89 d0                	mov    %edx,%eax
f010b1a1:	01 c0                	add    %eax,%eax
f010b1a3:	01 d0                	add    %edx,%eax
f010b1a5:	c1 e0 03             	shl    $0x3,%eax
f010b1a8:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b1ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1b1:	01 d0                	add    %edx,%eax
f010b1b3:	8d 50 08             	lea    0x8(%eax),%edx
f010b1b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1b9:	89 90 24 da 01 00    	mov    %edx,0x1da24(%eax)
f010b1bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1c2:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b1c8:	89 d0                	mov    %edx,%eax
f010b1ca:	01 c0                	add    %eax,%eax
f010b1cc:	01 d0                	add    %edx,%eax
f010b1ce:	c1 e0 03             	shl    $0x3,%eax
f010b1d1:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b1d7:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1da:	01 d0                	add    %edx,%eax
f010b1dc:	8d 50 08             	lea    0x8(%eax),%edx
f010b1df:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1e2:	89 90 20 da 01 00    	mov    %edx,0x1da20(%eax)
f010b1e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1eb:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b1f1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b1f4:	89 d0                	mov    %edx,%eax
f010b1f6:	01 c0                	add    %eax,%eax
f010b1f8:	01 d0                	add    %edx,%eax
f010b1fa:	c1 e0 03             	shl    $0x3,%eax
f010b1fd:	01 c8                	add    %ecx,%eax
f010b1ff:	05 9c 00 00 00       	add    $0x9c,%eax
f010b204:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b20a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b20d:	8b 80 2c da 01 00    	mov    0x1da2c(%eax),%eax
f010b213:	8d 50 01             	lea    0x1(%eax),%edx
f010b216:	8b 45 08             	mov    0x8(%ebp),%eax
f010b219:	89 90 2c da 01 00    	mov    %edx,0x1da2c(%eax)
		else
		{
			e->page_last_WS_element = NULL;
		}
#else
		e->page_last_WS_index ++;
f010b21f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b222:	8b 80 58 d5 01 00    	mov    0x1d558(%eax),%eax
f010b228:	8d 50 01             	lea    0x1(%eax),%edx
f010b22b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b22e:	89 90 58 d5 01 00    	mov    %edx,0x1d558(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010b234:	8b 45 08             	mov    0x8(%ebp),%eax
f010b237:	8b 80 58 d5 01 00    	mov    0x1d558(%eax),%eax
f010b23d:	8b 55 08             	mov    0x8(%ebp),%edx
f010b240:	8b 8a 84 00 00 00    	mov    0x84(%edx),%ecx
f010b246:	ba 00 00 00 00       	mov    $0x0,%edx
f010b24b:	f7 f1                	div    %ecx
f010b24d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b250:	89 90 58 d5 01 00    	mov    %edx,0x1d558(%eax)
#endif
		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010b256:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b259:	c1 e8 16             	shr    $0x16,%eax
f010b25c:	89 c2                	mov    %eax,%edx
f010b25e:	8b 45 18             	mov    0x18(%ebp),%eax
f010b261:	8b 00                	mov    (%eax),%eax
f010b263:	39 c2                	cmp    %eax,%edx
f010b265:	0f 84 d3 00 00 00    	je     f010b33e <program_segment_alloc_map_copy_workingset+0x697>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010b26b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b26e:	8b 90 0c da 01 00    	mov    0x1da0c(%eax),%edx
f010b274:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b277:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010b27a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010b27d:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010b282:	89 c1                	mov    %eax,%ecx
f010b284:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010b287:	89 d0                	mov    %edx,%eax
f010b289:	01 c0                	add    %eax,%eax
f010b28b:	01 d0                	add    %edx,%eax
f010b28d:	c1 e0 03             	shl    $0x3,%eax
f010b290:	01 d8                	add    %ebx,%eax
f010b292:	05 5c d5 01 00       	add    $0x1d55c,%eax
f010b297:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010b299:	8b 45 08             	mov    0x8(%ebp),%eax
f010b29c:	8b 90 0c da 01 00    	mov    0x1da0c(%eax),%edx
f010b2a2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b2a5:	89 d0                	mov    %edx,%eax
f010b2a7:	01 c0                	add    %eax,%eax
f010b2a9:	01 d0                	add    %edx,%eax
f010b2ab:	c1 e0 03             	shl    $0x3,%eax
f010b2ae:	01 c8                	add    %ecx,%eax
f010b2b0:	05 60 d5 01 00       	add    $0x1d560,%eax
f010b2b5:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010b2b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2bb:	8b 90 0c da 01 00    	mov    0x1da0c(%eax),%edx
f010b2c1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b2c4:	89 d0                	mov    %edx,%eax
f010b2c6:	01 c0                	add    %eax,%eax
f010b2c8:	01 d0                	add    %edx,%eax
f010b2ca:	c1 e0 03             	shl    $0x3,%eax
f010b2cd:	01 c8                	add    %ecx,%eax
f010b2cf:	05 64 d5 01 00       	add    $0x1d564,%eax
f010b2d4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010b2da:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2dd:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f010b2e3:	8d 50 01             	lea    0x1(%eax),%edx
f010b2e6:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2e9:	89 90 0c da 01 00    	mov    %edx,0x1da0c(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010b2ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2f2:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f010b2f8:	b9 32 00 00 00       	mov    $0x32,%ecx
f010b2fd:	ba 00 00 00 00       	mov    $0x0,%edx
f010b302:	f7 f1                	div    %ecx
f010b304:	8b 45 08             	mov    0x8(%ebp),%eax
f010b307:	89 90 0c da 01 00    	mov    %edx,0x1da0c(%eax)
			if (e->table_last_WS_index == 0)
f010b30d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b310:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f010b316:	85 c0                	test   %eax,%eax
f010b318:	75 17                	jne    f010b331 <program_segment_alloc_map_copy_workingset+0x68a>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010b31a:	83 ec 04             	sub    $0x4,%esp
f010b31d:	68 0c 77 12 f0       	push   $0xf012770c
f010b322:	68 24 03 00 00       	push   $0x324
f010b327:	68 4b 75 12 f0       	push   $0xf012754b
f010b32c:	e8 e9 4f ff ff       	call   f010031a <_panic>
			(*lastTableNumber) = PDX(iVA);
f010b331:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b334:	c1 e8 16             	shr    $0x16,%eax
f010b337:	89 c2                	mov    %eax,%edx
f010b339:	8b 45 18             	mov    0x18(%ebp),%eax
f010b33c:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010b33e:	8b 45 10             	mov    0x10(%ebp),%eax
f010b341:	8b 00                	mov    (%eax),%eax
f010b343:	8d 50 01             	lea    0x1(%eax),%edx
f010b346:	8b 45 10             	mov    0x10(%ebp),%eax
f010b349:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010b34b:	ff 45 f0             	incl   -0x10(%ebp)
f010b34e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010b355:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b358:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010b35b:	73 0c                	jae    f010b369 <program_segment_alloc_map_copy_workingset+0x6c2>
f010b35d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b360:	3b 45 14             	cmp    0x14(%ebp),%eax
f010b363:	0f 82 eb f9 ff ff    	jb     f010ad54 <program_segment_alloc_map_copy_workingset+0xad>

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}
	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010b369:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b36c:	8b 00                	mov    (%eax),%eax
f010b36e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010b371:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b374:	8b 40 0c             	mov    0xc(%eax),%eax
f010b377:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010b37a:	eb 10                	jmp    f010b38c <program_segment_alloc_map_copy_workingset+0x6e5>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010b37c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b37f:	8a 10                	mov    (%eax),%dl
f010b381:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b384:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010b386:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010b389:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010b38c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b38f:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010b392:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010b395:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b39a:	89 c2                	mov    %eax,%edx
f010b39c:	8b 45 10             	mov    0x10(%ebp),%eax
f010b39f:	8b 00                	mov    (%eax),%eax
f010b3a1:	c1 e0 0c             	shl    $0xc,%eax
f010b3a4:	01 c2                	add    %eax,%edx
f010b3a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b3a9:	39 c2                	cmp    %eax,%edx
f010b3ab:	76 1d                	jbe    f010b3ca <program_segment_alloc_map_copy_workingset+0x723>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010b3ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b3b0:	8b 50 04             	mov    0x4(%eax),%edx
f010b3b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b3b6:	01 c2                	add    %eax,%edx
f010b3b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010b3bb:	39 c2                	cmp    %eax,%edx
f010b3bd:	77 bd                	ja     f010b37c <program_segment_alloc_map_copy_workingset+0x6d5>
		dst_ptr++ ;
		src_ptr++ ;
	}

	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010b3bf:	eb 09                	jmp    f010b3ca <program_segment_alloc_map_copy_workingset+0x723>
	{
		*dst_ptr = 0;
f010b3c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b3c4:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010b3c7:	ff 45 e8             	incl   -0x18(%ebp)
		dst_ptr++ ;
		src_ptr++ ;
	}

	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010b3ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b3cd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010b3d0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010b3d3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b3d8:	89 c2                	mov    %eax,%edx
f010b3da:	8b 45 10             	mov    0x10(%ebp),%eax
f010b3dd:	8b 00                	mov    (%eax),%eax
f010b3df:	c1 e0 0c             	shl    $0xc,%eax
f010b3e2:	01 c2                	add    %eax,%edx
f010b3e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b3e7:	39 c2                	cmp    %eax,%edx
f010b3e9:	77 d6                	ja     f010b3c1 <program_segment_alloc_map_copy_workingset+0x71a>
	{
		*dst_ptr = 0;
		dst_ptr++ ;
	}

	return 0;
f010b3eb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b3f0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010b3f3:	c9                   	leave  
f010b3f4:	c3                   	ret    

f010b3f5 <create_user_directory>:

//==================================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f010b3f5:	55                   	push   %ebp
f010b3f6:	89 e5                	mov    %esp,%ebp
f010b3f8:	83 ec 18             	sub    $0x18,%esp
	//panic("create_user_directory() is not implemented yet...!!");

	//Use kmalloc() to allocate a new directory

	//change this "return" according to your answer
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f010b3fb:	83 ec 0c             	sub    $0xc,%esp
f010b3fe:	68 00 10 00 00       	push   $0x1000
f010b403:	e8 ae d6 ff ff       	call   f0108ab6 <kmalloc>
f010b408:	83 c4 10             	add    $0x10,%esp
f010b40b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f010b40e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b412:	75 17                	jne    f010b42b <create_user_directory+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010b414:	83 ec 04             	sub    $0x4,%esp
f010b417:	68 af 77 12 f0       	push   $0xf01277af
f010b41c:	68 54 03 00 00       	push   $0x354
f010b421:	68 4b 75 12 f0       	push   $0xf012754b
f010b426:	e8 ef 4e ff ff       	call   f010031a <_panic>
	}
	return ptr_user_page_directory;
f010b42b:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//return 0;
}
f010b42e:	c9                   	leave  
f010b42f:	c3                   	ret    

f010b430 <create_user_kern_stack>:
uint32 __cur_k_stk = KERNEL_HEAP_START;
//===========================================================
// 5) ALLOCATE SPACE FOR USER KERNEL STACK (One Per Process):
//===========================================================
void* create_user_kern_stack(uint32* ptr_user_page_directory)
{
f010b430:	55                   	push   %ebp
f010b431:	89 e5                	mov    %esp,%ebp
f010b433:	83 ec 18             	sub    $0x18,%esp
	//remember to leave its bottom page as a GUARD PAGE (i.e. not mapped)
	//return a pointer to the start of the allocated space (including the GUARD PAGE)


#else
	if (KERNEL_HEAP_MAX - __cur_k_stk < KERNEL_STACK_SIZE)
f010b436:	a1 5c d9 17 f0       	mov    0xf017d95c,%eax
f010b43b:	ba 00 f0 ff ff       	mov    $0xfffff000,%edx
f010b440:	29 c2                	sub    %eax,%edx
f010b442:	89 d0                	mov    %edx,%eax
f010b444:	3d ff 7f 00 00       	cmp    $0x7fff,%eax
f010b449:	77 17                	ja     f010b462 <create_user_kern_stack+0x32>
		panic("Run out of kernel heap!! Unable to create a kernel stack for the process. Can't create more processes!");
f010b44b:	83 ec 04             	sub    $0x4,%esp
f010b44e:	68 cc 77 12 f0       	push   $0xf01277cc
f010b453:	68 6d 03 00 00       	push   $0x36d
f010b458:	68 4b 75 12 f0       	push   $0xf012754b
f010b45d:	e8 b8 4e ff ff       	call   f010031a <_panic>
	void* kstack = (void*) __cur_k_stk;
f010b462:	a1 5c d9 17 f0       	mov    0xf017d95c,%eax
f010b467:	89 45 f4             	mov    %eax,-0xc(%ebp)
	__cur_k_stk += KERNEL_STACK_SIZE;
f010b46a:	a1 5c d9 17 f0       	mov    0xf017d95c,%eax
f010b46f:	05 00 80 00 00       	add    $0x8000,%eax
f010b474:	a3 5c d9 17 f0       	mov    %eax,0xf017d95c
	return kstack ;
f010b479:	8b 45 f4             	mov    -0xc(%ebp),%eax
//	panic("KERNEL HEAP is OFF! user kernel stack is not supported");
#endif
}
f010b47c:	c9                   	leave  
f010b47d:	c3                   	ret    

f010b47e <delete_user_kern_stack>:
/*2024*/
//===========================================================
// 6) DELETE USER KERNEL STACK (One Per Process):
//===========================================================
void delete_user_kern_stack(struct Env* e)
{
f010b47e:	55                   	push   %ebp
f010b47f:	89 e5                	mov    %esp,%ebp
f010b481:	83 ec 08             	sub    $0x8,%esp
	panic("delete_user_kern_stack() is not implemented yet...!!");

	//Delete the allocated space for the user kernel stack of this process "e"
	//remember to delete the bottom GUARD PAGE (i.e. not mapped)
#else
	panic("KERNEL HEAP is OFF! user kernel stack can't be deleted");
f010b484:	83 ec 04             	sub    $0x4,%esp
f010b487:	68 34 78 12 f0       	push   $0xf0127834
f010b48c:	68 83 03 00 00       	push   $0x383
f010b491:	68 4b 75 12 f0       	push   $0xf012754b
f010b496:	e8 7f 4e ff ff       	call   f010031a <_panic>

f010b49b <initialize_uheap_dynamic_allocator>:
}
//===============================================
// 7) INITIALIZE DYNAMIC ALLOCATOR OF UHEAP:
//===============================================
void initialize_uheap_dynamic_allocator(struct Env* e, uint32 daStart, uint32 daLimit)
{
f010b49b:	55                   	push   %ebp
f010b49c:	89 e5                	mov    %esp,%ebp
	//[PROJECT'24.MS2] Initialize the dynamic allocator of the user heap
	//Remember:
	//	1) there's no initial allocations for the dynamic allocator of the user heap (=0)
	//	2) call the initialize_dynamic_allocator(..) to complete the initialization
	//panic("initialize_uheap_dynamic_allocator() is not implemented yet...!!");
}
f010b49e:	90                   	nop
f010b49f:	5d                   	pop    %ebp
f010b4a0:	c3                   	ret    

f010b4a1 <initialize_environment>:
//	  3.3 Setup the context to return to env_start() at the early first run from the scheduler
// 4. Initialize the working set
// 5. Initialize the user dynamic allocator
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010b4a1:	55                   	push   %ebp
f010b4a2:	89 e5                	mov    %esp,%ebp
f010b4a4:	53                   	push   %ebx
f010b4a5:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010b4a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4ab:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b4ae:	89 50 64             	mov    %edx,0x64(%eax)
	e->env_cr3 = phys_user_page_directory;
f010b4b1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4b4:	8b 55 10             	mov    0x10(%ebp),%edx
f010b4b7:	89 50 68             	mov    %edx,0x68(%eax)

	//copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010b4ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b4c1:	eb 17                	jmp    f010b4da <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010b4c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4c6:	8b 40 64             	mov    0x64(%eax),%eax
f010b4c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b4cc:	c1 e2 02             	shl    $0x2,%edx
f010b4cf:	01 d0                	add    %edx,%eax
f010b4d1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010b4d7:	ff 45 f4             	incl   -0xc(%ebp)
f010b4da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b4dd:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010b4e2:	76 df                	jbe    f010b4c3 <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}
	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010b4e4:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010b4eb:	eb 22                	jmp    f010b50f <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010b4ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4f0:	8b 40 64             	mov    0x64(%eax),%eax
f010b4f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b4f6:	c1 e2 02             	shl    $0x2,%edx
f010b4f9:	01 c2                	add    %eax,%edx
f010b4fb:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f010b500:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010b503:	c1 e1 02             	shl    $0x2,%ecx
f010b506:	01 c8                	add    %ecx,%eax
f010b508:	8b 00                	mov    (%eax),%eax
f010b50a:	89 02                	mov    %eax,(%edx)
	//copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}
	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010b50c:	ff 45 f4             	incl   -0xc(%ebp)
f010b50f:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010b516:	7e d5                	jle    f010b4ed <initialize_environment+0x4c>
	 * Setup the new context to start executing at the env_start() to do some initializations then
	 * returns to trapret() to pop the trap frame and invoke iret
	 */
	{
		//[1] Create the stack
		e->kstack = create_user_kern_stack(e->env_page_directory);
f010b518:	8b 45 08             	mov    0x8(%ebp),%eax
f010b51b:	8b 40 64             	mov    0x64(%eax),%eax
f010b51e:	83 ec 0c             	sub    $0xc,%esp
f010b521:	50                   	push   %eax
f010b522:	e8 09 ff ff ff       	call   f010b430 <create_user_kern_stack>
f010b527:	83 c4 10             	add    $0x10,%esp
f010b52a:	89 c2                	mov    %eax,%edx
f010b52c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b52f:	89 50 70             	mov    %edx,0x70(%eax)

		//[2] Leave room for the trap frame
		void* sp = e->kstack + KERNEL_STACK_SIZE;
f010b532:	8b 45 08             	mov    0x8(%ebp),%eax
f010b535:	8b 40 70             	mov    0x70(%eax),%eax
f010b538:	05 00 80 00 00       	add    $0x8000,%eax
f010b53d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		sp -= sizeof(struct Trapframe);
f010b540:	83 6d ec 44          	subl   $0x44,-0x14(%ebp)
		e->env_tf = (struct Trapframe *) sp;
f010b544:	8b 45 08             	mov    0x8(%ebp),%eax
f010b547:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010b54a:	89 10                	mov    %edx,(%eax)

		//[3] Set the address of trapret() first - to return on it after env_start() is returned,
		sp -= 4;
f010b54c:	83 6d ec 04          	subl   $0x4,-0x14(%ebp)
		*(uint32*)sp = (uint32)trapret;
f010b550:	ba 84 d7 10 f0       	mov    $0xf010d784,%edx
f010b555:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b558:	89 10                	mov    %edx,(%eax)

		//[4] Place the context next
		sp -= sizeof(struct Context);
f010b55a:	83 6d ec 20          	subl   $0x20,-0x14(%ebp)
		e->context = (struct Context *) sp;
f010b55e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b561:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010b564:	89 50 04             	mov    %edx,0x4(%eax)

		//[4] Setup the context to return to env_start() at the early first run from the scheduler
		memset(e->context, 0, sizeof(*(e->context)));
f010b567:	8b 45 08             	mov    0x8(%ebp),%eax
f010b56a:	8b 40 04             	mov    0x4(%eax),%eax
f010b56d:	83 ec 04             	sub    $0x4,%esp
f010b570:	6a 20                	push   $0x20
f010b572:	6a 00                	push   $0x0
f010b574:	50                   	push   %eax
f010b575:	e8 ac 70 01 00       	call   f0122626 <memset>
f010b57a:	83 c4 10             	add    $0x10,%esp
		e->context->eip = (uint32) (env_start);
f010b57d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b580:	8b 40 04             	mov    0x4(%eax),%eax
f010b583:	ba d6 a6 10 f0       	mov    $0xf010a6d6,%edx
f010b588:	89 50 1c             	mov    %edx,0x1c(%eax)
	{
		LIST_INIT(&(e->page_WS_list));
	}
#else
	{
		uint32 env_index = (uint32)(e-envs);
f010b58b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b58e:	8b 15 b0 e3 59 f0    	mov    0xf059e3b0,%edx
f010b594:	29 d0                	sub    %edx,%eax
f010b596:	c1 f8 02             	sar    $0x2,%eax
f010b599:	89 c2                	mov    %eax,%edx
f010b59b:	89 d0                	mov    %edx,%eax
f010b59d:	c1 e0 02             	shl    $0x2,%eax
f010b5a0:	01 d0                	add    %edx,%eax
f010b5a2:	c1 e0 02             	shl    $0x2,%eax
f010b5a5:	01 d0                	add    %edx,%eax
f010b5a7:	c1 e0 02             	shl    $0x2,%eax
f010b5aa:	01 d0                	add    %edx,%eax
f010b5ac:	c1 e0 02             	shl    $0x2,%eax
f010b5af:	01 d0                	add    %edx,%eax
f010b5b1:	c1 e0 08             	shl    $0x8,%eax
f010b5b4:	29 d0                	sub    %edx,%eax
f010b5b6:	c1 e0 08             	shl    $0x8,%eax
f010b5b9:	29 d0                	sub    %edx,%eax
f010b5bb:	c1 e0 03             	shl    $0x3,%eax
f010b5be:	01 d0                	add    %edx,%eax
f010b5c0:	c1 e0 03             	shl    $0x3,%eax
f010b5c3:	01 d0                	add    %edx,%eax
f010b5c5:	01 c0                	add    %eax,%eax
f010b5c7:	01 d0                	add    %edx,%eax
f010b5c9:	89 45 e8             	mov    %eax,-0x18(%ebp)
		e->__uptr_pws = (struct WorkingSetElement*) ( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
f010b5cc:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010b5cf:	89 d0                	mov    %edx,%eax
f010b5d1:	c1 e0 06             	shl    $0x6,%eax
f010b5d4:	29 d0                	sub    %edx,%eax
f010b5d6:	c1 e0 02             	shl    $0x2,%eax
f010b5d9:	01 d0                	add    %edx,%eax
f010b5db:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010b5e2:	01 c8                	add    %ecx,%eax
f010b5e4:	c1 e0 03             	shl    $0x3,%eax
f010b5e7:	01 d0                	add    %edx,%eax
f010b5e9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010b5f0:	29 c2                	sub    %eax,%edx
f010b5f2:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f010b5f9:	89 c2                	mov    %eax,%edx
f010b5fb:	89 d0                	mov    %edx,%eax
f010b5fd:	2d 00 00 40 11       	sub    $0x11400000,%eax
f010b602:	8d 90 88 00 00 00    	lea    0x88(%eax),%edx
f010b608:	8b 45 08             	mov    0x8(%ebp),%eax
f010b60b:	89 90 38 da 01 00    	mov    %edx,0x1da38(%eax)
	}
#endif

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010b611:	83 ec 0c             	sub    $0xc,%esp
f010b614:	6a 02                	push   $0x2
f010b616:	e8 f5 30 00 00       	call   f010e710 <isPageReplacmentAlgorithmLRU>
f010b61b:	83 c4 10             	add    $0x10,%esp
f010b61e:	85 c0                	test   %eax,%eax
f010b620:	0f 84 34 01 00 00    	je     f010b75a <initialize_environment+0x2b9>
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010b626:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010b62d:	e9 14 01 00 00       	jmp    f010b746 <initialize_environment+0x2a5>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010b632:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b635:	89 d0                	mov    %edx,%eax
f010b637:	01 c0                	add    %eax,%eax
f010b639:	01 d0                	add    %edx,%eax
f010b63b:	c1 e0 03             	shl    $0x3,%eax
f010b63e:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b644:	8b 45 08             	mov    0x8(%ebp),%eax
f010b647:	01 d0                	add    %edx,%eax
f010b649:	83 c0 08             	add    $0x8,%eax
f010b64c:	85 c0                	test   %eax,%eax
f010b64e:	75 17                	jne    f010b667 <initialize_environment+0x1c6>
f010b650:	83 ec 04             	sub    $0x4,%esp
f010b653:	68 28 75 12 f0       	push   $0xf0127528
f010b658:	68 e6 03 00 00       	push   $0x3e6
f010b65d:	68 4b 75 12 f0       	push   $0xf012754b
f010b662:	e8 b3 4c ff ff       	call   f010031a <_panic>
f010b667:	8b 45 08             	mov    0x8(%ebp),%eax
f010b66a:	8b 90 48 d5 01 00    	mov    0x1d548(%eax),%edx
f010b670:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010b673:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010b676:	89 c8                	mov    %ecx,%eax
f010b678:	01 c0                	add    %eax,%eax
f010b67a:	01 c8                	add    %ecx,%eax
f010b67c:	c1 e0 03             	shl    $0x3,%eax
f010b67f:	01 d8                	add    %ebx,%eax
f010b681:	05 98 00 00 00       	add    $0x98,%eax
f010b686:	89 10                	mov    %edx,(%eax)
f010b688:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b68b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b68e:	89 d0                	mov    %edx,%eax
f010b690:	01 c0                	add    %eax,%eax
f010b692:	01 d0                	add    %edx,%eax
f010b694:	c1 e0 03             	shl    $0x3,%eax
f010b697:	01 c8                	add    %ecx,%eax
f010b699:	05 98 00 00 00       	add    $0x98,%eax
f010b69e:	8b 00                	mov    (%eax),%eax
f010b6a0:	85 c0                	test   %eax,%eax
f010b6a2:	74 28                	je     f010b6cc <initialize_environment+0x22b>
f010b6a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6a7:	8b 90 48 d5 01 00    	mov    0x1d548(%eax),%edx
f010b6ad:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010b6b0:	89 c8                	mov    %ecx,%eax
f010b6b2:	01 c0                	add    %eax,%eax
f010b6b4:	01 c8                	add    %ecx,%eax
f010b6b6:	c1 e0 03             	shl    $0x3,%eax
f010b6b9:	8d 88 80 00 00 00    	lea    0x80(%eax),%ecx
f010b6bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6c2:	01 c8                	add    %ecx,%eax
f010b6c4:	83 c0 08             	add    $0x8,%eax
f010b6c7:	89 42 14             	mov    %eax,0x14(%edx)
f010b6ca:	eb 23                	jmp    f010b6ef <initialize_environment+0x24e>
f010b6cc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b6cf:	89 d0                	mov    %edx,%eax
f010b6d1:	01 c0                	add    %eax,%eax
f010b6d3:	01 d0                	add    %edx,%eax
f010b6d5:	c1 e0 03             	shl    $0x3,%eax
f010b6d8:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b6de:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6e1:	01 d0                	add    %edx,%eax
f010b6e3:	8d 50 08             	lea    0x8(%eax),%edx
f010b6e6:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6e9:	89 90 4c d5 01 00    	mov    %edx,0x1d54c(%eax)
f010b6ef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b6f2:	89 d0                	mov    %edx,%eax
f010b6f4:	01 c0                	add    %eax,%eax
f010b6f6:	01 d0                	add    %edx,%eax
f010b6f8:	c1 e0 03             	shl    $0x3,%eax
f010b6fb:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b701:	8b 45 08             	mov    0x8(%ebp),%eax
f010b704:	01 d0                	add    %edx,%eax
f010b706:	8d 50 08             	lea    0x8(%eax),%edx
f010b709:	8b 45 08             	mov    0x8(%ebp),%eax
f010b70c:	89 90 48 d5 01 00    	mov    %edx,0x1d548(%eax)
f010b712:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b715:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b718:	89 d0                	mov    %edx,%eax
f010b71a:	01 c0                	add    %eax,%eax
f010b71c:	01 d0                	add    %edx,%eax
f010b71e:	c1 e0 03             	shl    $0x3,%eax
f010b721:	01 c8                	add    %ecx,%eax
f010b723:	05 9c 00 00 00       	add    $0x9c,%eax
f010b728:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b72e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b731:	8b 80 54 d5 01 00    	mov    0x1d554(%eax),%eax
f010b737:	8d 50 01             	lea    0x1(%eax),%edx
f010b73a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b73d:	89 90 54 d5 01 00    	mov    %edx,0x1d554(%eax)
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010b743:	ff 45 f0             	incl   -0x10(%ebp)
f010b746:	8b 45 08             	mov    0x8(%ebp),%eax
f010b749:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f010b74f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b752:	39 c2                	cmp    %eax,%edx
f010b754:	0f 87 d8 fe ff ff    	ja     f010b632 <initialize_environment+0x191>
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010b75a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b761:	eb 54                	jmp    f010b7b7 <initialize_environment+0x316>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010b763:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b766:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b769:	89 d0                	mov    %edx,%eax
f010b76b:	01 c0                	add    %eax,%eax
f010b76d:	01 d0                	add    %edx,%eax
f010b76f:	c1 e0 03             	shl    $0x3,%eax
f010b772:	01 c8                	add    %ecx,%eax
f010b774:	05 88 00 00 00       	add    $0x88,%eax
f010b779:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010b77f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b782:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b785:	89 d0                	mov    %edx,%eax
f010b787:	01 c0                	add    %eax,%eax
f010b789:	01 d0                	add    %edx,%eax
f010b78b:	c1 e0 03             	shl    $0x3,%eax
f010b78e:	01 c8                	add    %ecx,%eax
f010b790:	05 8c 00 00 00       	add    $0x8c,%eax
f010b795:	c6 00 01             	movb   $0x1,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010b798:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b79b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b79e:	89 d0                	mov    %edx,%eax
f010b7a0:	01 c0                	add    %eax,%eax
f010b7a2:	01 d0                	add    %edx,%eax
f010b7a4:	c1 e0 03             	shl    $0x3,%eax
f010b7a7:	01 c8                	add    %ecx,%eax
f010b7a9:	05 90 00 00 00       	add    $0x90,%eax
f010b7ae:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010b7b4:	ff 45 f4             	incl   -0xc(%ebp)
f010b7b7:	8b 45 08             	mov    0x8(%ebp),%eax
f010b7ba:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f010b7c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b7c3:	39 c2                	cmp    %eax,%edx
f010b7c5:	77 9c                	ja     f010b763 <initialize_environment+0x2c2>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010b7c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010b7ca:	c7 80 58 d5 01 00 00 	movl   $0x0,0x1d558(%eax)
f010b7d1:	00 00 00 
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010b7d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b7db:	eb 54                	jmp    f010b831 <initialize_environment+0x390>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010b7dd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b7e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b7e3:	89 d0                	mov    %edx,%eax
f010b7e5:	01 c0                	add    %eax,%eax
f010b7e7:	01 d0                	add    %edx,%eax
f010b7e9:	c1 e0 03             	shl    $0x3,%eax
f010b7ec:	01 c8                	add    %ecx,%eax
f010b7ee:	05 5c d5 01 00       	add    $0x1d55c,%eax
f010b7f3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010b7f9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b7fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b7ff:	89 d0                	mov    %edx,%eax
f010b801:	01 c0                	add    %eax,%eax
f010b803:	01 d0                	add    %edx,%eax
f010b805:	c1 e0 03             	shl    $0x3,%eax
f010b808:	01 c8                	add    %ecx,%eax
f010b80a:	05 60 d5 01 00       	add    $0x1d560,%eax
f010b80f:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010b812:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b815:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b818:	89 d0                	mov    %edx,%eax
f010b81a:	01 c0                	add    %eax,%eax
f010b81c:	01 d0                	add    %edx,%eax
f010b81e:	c1 e0 03             	shl    $0x3,%eax
f010b821:	01 c8                	add    %ecx,%eax
f010b823:	05 64 d5 01 00       	add    $0x1d564,%eax
f010b828:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010b82e:	ff 45 f4             	incl   -0xc(%ebp)
f010b831:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010b835:	7e a6                	jle    f010b7dd <initialize_environment+0x33c>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010b837:	8b 45 08             	mov    0x8(%ebp),%eax
f010b83a:	c7 80 0c da 01 00 00 	movl   $0x0,0x1da0c(%eax)
f010b841:	00 00 00 

	e->pageFaultsCounter=0;
f010b844:	8b 45 08             	mov    0x8(%ebp),%eax
f010b847:	c7 80 40 da 01 00 00 	movl   $0x0,0x1da40(%eax)
f010b84e:	00 00 00 
	e->tableFaultsCounter=0;
f010b851:	8b 45 08             	mov    0x8(%ebp),%eax
f010b854:	c7 80 44 da 01 00 00 	movl   $0x0,0x1da44(%eax)
f010b85b:	00 00 00 

	e->freeingFullWSCounter = 0;
f010b85e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b861:	c7 80 48 da 01 00 00 	movl   $0x0,0x1da48(%eax)
f010b868:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010b86b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b86e:	c7 80 4c da 01 00 00 	movl   $0x0,0x1da4c(%eax)
f010b875:	00 00 00 

	e->nModifiedPages=0;
f010b878:	8b 45 08             	mov    0x8(%ebp),%eax
f010b87b:	c7 80 50 da 01 00 00 	movl   $0x0,0x1da50(%eax)
f010b882:	00 00 00 
	e->nNotModifiedPages=0;
f010b885:	8b 45 08             	mov    0x8(%ebp),%eax
f010b888:	c7 80 54 da 01 00 00 	movl   $0x0,0x1da54(%eax)
f010b88f:	00 00 00 
	e->nClocks = 0;
f010b892:	8b 45 08             	mov    0x8(%ebp),%eax
f010b895:	c7 80 68 da 01 00 00 	movl   $0x0,0x1da68(%eax)
f010b89c:	00 00 00 

	//2020
	e->nPageIn = 0;
f010b89f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8a2:	c7 80 5c da 01 00 00 	movl   $0x0,0x1da5c(%eax)
f010b8a9:	00 00 00 
	e->nPageOut = 0;
f010b8ac:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8af:	c7 80 60 da 01 00 00 	movl   $0x0,0x1da60(%eax)
f010b8b6:	00 00 00 
	e->nNewPageAdded = 0;
f010b8b9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8bc:	c7 80 64 da 01 00 00 	movl   $0x0,0x1da64(%eax)
f010b8c3:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//[PROJECT'24.DONE] call initialize_uheap_dynamic_allocator(...)
	initialize_uheap_dynamic_allocator(e, USER_HEAP_START, USER_HEAP_START + DYN_ALLOC_MAX_SIZE);
f010b8c6:	83 ec 04             	sub    $0x4,%esp
f010b8c9:	68 00 00 00 82       	push   $0x82000000
f010b8ce:	68 00 00 00 80       	push   $0x80000000
f010b8d3:	ff 75 08             	pushl  0x8(%ebp)
f010b8d6:	e8 c0 fb ff ff       	call   f010b49b <initialize_uheap_dynamic_allocator>
f010b8db:	83 c4 10             	add    $0x10,%esp

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010b8de:	83 ec 0c             	sub    $0xc,%esp
f010b8e1:	ff 75 08             	pushl  0x8(%ebp)
f010b8e4:	e8 09 00 00 00       	call   f010b8f2 <complete_environment_initialization>
f010b8e9:	83 c4 10             	add    $0x10,%esp
}
f010b8ec:	90                   	nop
f010b8ed:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010b8f0:	c9                   	leave  
f010b8f1:	c3                   	ret    

f010b8f2 <complete_environment_initialization>:

//========================================================
// 9) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010b8f2:	55                   	push   %ebp
f010b8f3:	89 e5                	mov    %esp,%ebp
f010b8f5:	53                   	push   %ebx
f010b8f6:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010b8f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8fc:	8b 40 64             	mov    0x64(%eax),%eax
f010b8ff:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010b905:	8b 45 08             	mov    0x8(%ebp),%eax
f010b908:	8b 40 68             	mov    0x68(%eax),%eax
f010b90b:	83 c8 03             	or     $0x3,%eax
f010b90e:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010b910:	8b 45 08             	mov    0x8(%ebp),%eax
f010b913:	8b 40 64             	mov    0x64(%eax),%eax
f010b916:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010b91c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b91f:	8b 40 68             	mov    0x68(%eax),%eax
f010b922:	83 c8 05             	or     $0x5,%eax
f010b925:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010b927:	8b 45 08             	mov    0x8(%ebp),%eax
f010b92a:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
	e->disk_env_pgdir_PA= 0;
f010b931:	8b 45 08             	mov    0x8(%ebp),%eax
f010b934:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%eax)
	e->disk_env_tabledir = 0;
f010b93b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b93e:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%eax)
	e->disk_env_tabledir_PA = 0;
f010b945:	8b 45 08             	mov    0x8(%ebp),%eax
f010b948:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
f010b94f:	00 00 00 

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010b952:	8b 45 08             	mov    0x8(%ebp),%eax
f010b955:	8b 58 10             	mov    0x10(%eax),%ebx
f010b958:	83 ec 0c             	sub    $0xc,%esp
f010b95b:	6a 08                	push   $0x8
f010b95d:	e8 63 51 01 00       	call   f0120ac5 <log2_ceil>
f010b962:	83 c4 10             	add    $0x10,%esp
f010b965:	ba 01 00 00 00       	mov    $0x1,%edx
f010b96a:	88 c1                	mov    %al,%cl
f010b96c:	d3 e2                	shl    %cl,%edx
f010b96e:	89 d0                	mov    %edx,%eax
f010b970:	01 d8                	add    %ebx,%eax
f010b972:	89 c3                	mov    %eax,%ebx
f010b974:	83 ec 0c             	sub    $0xc,%esp
f010b977:	6a 08                	push   $0x8
f010b979:	e8 12 51 01 00       	call   f0120a90 <nearest_pow2_ceil>
f010b97e:	83 c4 10             	add    $0x10,%esp
f010b981:	f7 d8                	neg    %eax
f010b983:	21 d8                	and    %ebx,%eax
f010b985:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010b988:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b98c:	7f 1b                	jg     f010b9a9 <complete_environment_initialization+0xb7>
		generation = 1 << ENVGENSHIFT;
f010b98e:	83 ec 0c             	sub    $0xc,%esp
f010b991:	6a 08                	push   $0x8
f010b993:	e8 2d 51 01 00       	call   f0120ac5 <log2_ceil>
f010b998:	83 c4 10             	add    $0x10,%esp
f010b99b:	ba 01 00 00 00       	mov    $0x1,%edx
f010b9a0:	88 c1                	mov    %al,%cl
f010b9a2:	d3 e2                	shl    %cl,%edx
f010b9a4:	89 d0                	mov    %edx,%eax
f010b9a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010b9a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b9ac:	8b 15 b0 e3 59 f0    	mov    0xf059e3b0,%edx
f010b9b2:	29 d0                	sub    %edx,%eax
f010b9b4:	c1 f8 02             	sar    $0x2,%eax
f010b9b7:	89 c2                	mov    %eax,%edx
f010b9b9:	89 d0                	mov    %edx,%eax
f010b9bb:	c1 e0 02             	shl    $0x2,%eax
f010b9be:	01 d0                	add    %edx,%eax
f010b9c0:	c1 e0 02             	shl    $0x2,%eax
f010b9c3:	01 d0                	add    %edx,%eax
f010b9c5:	c1 e0 02             	shl    $0x2,%eax
f010b9c8:	01 d0                	add    %edx,%eax
f010b9ca:	c1 e0 02             	shl    $0x2,%eax
f010b9cd:	01 d0                	add    %edx,%eax
f010b9cf:	c1 e0 08             	shl    $0x8,%eax
f010b9d2:	29 d0                	sub    %edx,%eax
f010b9d4:	c1 e0 08             	shl    $0x8,%eax
f010b9d7:	29 d0                	sub    %edx,%eax
f010b9d9:	c1 e0 03             	shl    $0x3,%eax
f010b9dc:	01 d0                	add    %edx,%eax
f010b9de:	c1 e0 03             	shl    $0x3,%eax
f010b9e1:	01 d0                	add    %edx,%eax
f010b9e3:	01 c0                	add    %eax,%eax
f010b9e5:	01 d0                	add    %edx,%eax
f010b9e7:	0b 45 f4             	or     -0xc(%ebp),%eax
f010b9ea:	89 c2                	mov    %eax,%edx
f010b9ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010b9ef:	89 50 10             	mov    %edx,0x10(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	struct Env* cur_env = get_cpu_proc();
f010b9f2:	e8 79 ed ff ff       	call   f010a770 <get_cpu_proc>
f010b9f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (cur_env == NULL)
f010b9fa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010b9fe:	75 0c                	jne    f010ba0c <complete_environment_initialization+0x11a>
		e->env_parent_id = 0;//no parent;
f010ba00:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba03:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010ba0a:	eb 0c                	jmp    f010ba18 <complete_environment_initialization+0x126>
	else
		e->env_parent_id = cur_env->env_id;//curenv is the parent;
f010ba0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ba0f:	8b 50 10             	mov    0x10(%eax),%edx
f010ba12:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba15:	89 50 14             	mov    %edx,0x14(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010ba18:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba1b:	c7 40 18 04 00 00 00 	movl   $0x4,0x18(%eax)
	e->env_runs = 0;
f010ba22:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba25:	c7 80 58 da 01 00 00 	movl   $0x0,0x1da58(%eax)
f010ba2c:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(e->env_tf, 0, sizeof(*(e->env_tf)));
f010ba2f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba32:	8b 00                	mov    (%eax),%eax
f010ba34:	83 ec 04             	sub    $0x4,%esp
f010ba37:	6a 44                	push   $0x44
f010ba39:	6a 00                	push   $0x0
f010ba3b:	50                   	push   %eax
f010ba3c:	e8 e5 6b 01 00       	call   f0122626 <memset>
f010ba41:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf->tf_ds = GD_UD | 3;
f010ba44:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba47:	8b 00                	mov    (%eax),%eax
f010ba49:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf->tf_es = GD_UD | 3;
f010ba4f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba52:	8b 00                	mov    (%eax),%eax
f010ba54:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf->tf_ss = GD_UD | 3;
f010ba5a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba5d:	8b 00                	mov    (%eax),%eax
f010ba5f:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf->tf_esp = (uint32*)USTACKTOP;
f010ba65:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba68:	8b 00                	mov    (%eax),%eax
f010ba6a:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf->tf_cs = GD_UT | 3;
f010ba71:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba74:	8b 00                	mov    (%eax),%eax
f010ba76:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf->tf_eflags |= FL_IF;
f010ba7c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba7f:	8b 00                	mov    (%eax),%eax
f010ba81:	8b 55 08             	mov    0x8(%ebp),%edx
f010ba84:	8b 12                	mov    (%edx),%edx
f010ba86:	8b 52 38             	mov    0x38(%edx),%edx
f010ba89:	80 ce 02             	or     $0x2,%dh
f010ba8c:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010ba8f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010ba93:	75 17                	jne    f010baac <complete_environment_initialization+0x1ba>
f010ba95:	83 ec 04             	sub    $0x4,%esp
f010ba98:	68 dd 75 12 f0       	push   $0xf01275dd
f010ba9d:	68 52 04 00 00       	push   $0x452
f010baa2:	68 4b 75 12 f0       	push   $0xf012754b
f010baa7:	e8 6e 48 ff ff       	call   f010031a <_panic>
f010baac:	8b 45 08             	mov    0x8(%ebp),%eax
f010baaf:	8b 40 08             	mov    0x8(%eax),%eax
f010bab2:	85 c0                	test   %eax,%eax
f010bab4:	74 11                	je     f010bac7 <complete_environment_initialization+0x1d5>
f010bab6:	8b 45 08             	mov    0x8(%ebp),%eax
f010bab9:	8b 40 08             	mov    0x8(%eax),%eax
f010babc:	8b 55 08             	mov    0x8(%ebp),%edx
f010babf:	8b 52 0c             	mov    0xc(%edx),%edx
f010bac2:	89 50 0c             	mov    %edx,0xc(%eax)
f010bac5:	eb 0b                	jmp    f010bad2 <complete_environment_initialization+0x1e0>
f010bac7:	8b 45 08             	mov    0x8(%ebp),%eax
f010baca:	8b 40 0c             	mov    0xc(%eax),%eax
f010bacd:	a3 b8 e3 59 f0       	mov    %eax,0xf059e3b8
f010bad2:	8b 45 08             	mov    0x8(%ebp),%eax
f010bad5:	8b 40 0c             	mov    0xc(%eax),%eax
f010bad8:	85 c0                	test   %eax,%eax
f010bada:	74 11                	je     f010baed <complete_environment_initialization+0x1fb>
f010badc:	8b 45 08             	mov    0x8(%ebp),%eax
f010badf:	8b 40 0c             	mov    0xc(%eax),%eax
f010bae2:	8b 55 08             	mov    0x8(%ebp),%edx
f010bae5:	8b 52 08             	mov    0x8(%edx),%edx
f010bae8:	89 50 08             	mov    %edx,0x8(%eax)
f010baeb:	eb 0b                	jmp    f010baf8 <complete_environment_initialization+0x206>
f010baed:	8b 45 08             	mov    0x8(%ebp),%eax
f010baf0:	8b 40 08             	mov    0x8(%eax),%eax
f010baf3:	a3 b4 e3 59 f0       	mov    %eax,0xf059e3b4
f010baf8:	8b 45 08             	mov    0x8(%ebp),%eax
f010bafb:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f010bb02:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb05:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f010bb0c:	a1 c0 e3 59 f0       	mov    0xf059e3c0,%eax
f010bb11:	48                   	dec    %eax
f010bb12:	a3 c0 e3 59 f0       	mov    %eax,0xf059e3c0
	return ;
f010bb17:	90                   	nop
}
f010bb18:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010bb1b:	c9                   	leave  
f010bb1c:	c3                   	ret    

f010bb1d <set_environment_entry_point>:

//===============================================
// 10) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010bb1d:	55                   	push   %ebp
f010bb1e:	89 e5                	mov    %esp,%ebp
f010bb20:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010bb23:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bb26:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010bb29:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bb2c:	8b 00                	mov    (%eax),%eax
f010bb2e:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010bb33:	74 17                	je     f010bb4c <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010bb35:	83 ec 04             	sub    $0x4,%esp
f010bb38:	68 6b 78 12 f0       	push   $0xf012786b
f010bb3d:	68 5e 04 00 00       	push   $0x45e
f010bb42:	68 4b 75 12 f0       	push   $0xf012754b
f010bb47:	e8 ce 47 ff ff       	call   f010031a <_panic>
	e->env_tf->tf_eip = (uint32*)pELFHDR->e_entry ;
f010bb4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb4f:	8b 00                	mov    (%eax),%eax
f010bb51:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bb54:	8b 52 18             	mov    0x18(%edx),%edx
f010bb57:	89 50 30             	mov    %edx,0x30(%eax)
}
f010bb5a:	90                   	nop
f010bb5b:	c9                   	leave  
f010bb5c:	c3                   	ret    

f010bb5d <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 11) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010bb5d:	55                   	push   %ebp
f010bb5e:	89 e5                	mov    %esp,%ebp
f010bb60:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010bb63:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb66:	8b 40 10             	mov    0x10(%eax),%eax
f010bb69:	8d 48 01             	lea    0x1(%eax),%ecx
f010bb6c:	8b 55 08             	mov    0x8(%ebp),%edx
f010bb6f:	89 4a 10             	mov    %ecx,0x10(%edx)
f010bb72:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010bb75:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bb78:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010bb7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bb7e:	8b 00                	mov    (%eax),%eax
f010bb80:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010bb85:	74 17                	je     f010bb9e <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010bb87:	83 ec 04             	sub    $0x4,%esp
f010bb8a:	68 6b 78 12 f0       	push   $0xf012786b
f010bb8f:	68 6c 04 00 00       	push   $0x46c
f010bb94:	68 4b 75 12 f0       	push   $0xf012754b
f010bb99:	e8 7c 47 ff ff       	call   f010031a <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010bb9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bba1:	8b 50 1c             	mov    0x1c(%eax),%edx
f010bba4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bba7:	01 d0                	add    %edx,%eax
f010bba9:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010bbac:	eb 0f                	jmp    f010bbbd <PROGRAM_SEGMENT_NEXT+0x60>
f010bbae:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbb1:	8b 40 10             	mov    0x10(%eax),%eax
f010bbb4:	8d 50 01             	lea    0x1(%eax),%edx
f010bbb7:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbba:	89 50 10             	mov    %edx,0x10(%eax)
f010bbbd:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbc0:	8b 40 10             	mov    0x10(%eax),%eax
f010bbc3:	c1 e0 05             	shl    $0x5,%eax
f010bbc6:	89 c2                	mov    %eax,%edx
f010bbc8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bbcb:	01 d0                	add    %edx,%eax
f010bbcd:	8b 00                	mov    (%eax),%eax
f010bbcf:	83 f8 01             	cmp    $0x1,%eax
f010bbd2:	74 13                	je     f010bbe7 <PROGRAM_SEGMENT_NEXT+0x8a>
f010bbd4:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbd7:	8b 50 10             	mov    0x10(%eax),%edx
f010bbda:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bbdd:	8b 40 2c             	mov    0x2c(%eax),%eax
f010bbe0:	0f b7 c0             	movzwl %ax,%eax
f010bbe3:	39 c2                	cmp    %eax,%edx
f010bbe5:	72 c7                	jb     f010bbae <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010bbe7:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbea:	8b 40 10             	mov    0x10(%eax),%eax
f010bbed:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010bbf0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bbf3:	8b 40 2c             	mov    0x2c(%eax),%eax
f010bbf6:	0f b7 c0             	movzwl %ax,%eax
f010bbf9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010bbfc:	7e 63                	jle    f010bc61 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010bbfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc01:	c1 e0 05             	shl    $0x5,%eax
f010bc04:	89 c2                	mov    %eax,%edx
f010bc06:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bc09:	01 d0                	add    %edx,%eax
f010bc0b:	8b 50 04             	mov    0x4(%eax),%edx
f010bc0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bc11:	01 c2                	add    %eax,%edx
f010bc13:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc16:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010bc18:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc1b:	c1 e0 05             	shl    $0x5,%eax
f010bc1e:	89 c2                	mov    %eax,%edx
f010bc20:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bc23:	01 d0                	add    %edx,%eax
f010bc25:	8b 50 14             	mov    0x14(%eax),%edx
f010bc28:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc2b:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010bc2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc31:	c1 e0 05             	shl    $0x5,%eax
f010bc34:	89 c2                	mov    %eax,%edx
f010bc36:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bc39:	01 d0                	add    %edx,%eax
f010bc3b:	8b 50 10             	mov    0x10(%eax),%edx
f010bc3e:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc41:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010bc44:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc47:	c1 e0 05             	shl    $0x5,%eax
f010bc4a:	89 c2                	mov    %eax,%edx
f010bc4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bc4f:	01 d0                	add    %edx,%eax
f010bc51:	8b 40 08             	mov    0x8(%eax),%eax
f010bc54:	89 c2                	mov    %eax,%edx
f010bc56:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc59:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010bc5c:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc5f:	eb 05                	jmp    f010bc66 <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010bc61:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010bc66:	c9                   	leave  
f010bc67:	c3                   	ret    

f010bc68 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 12) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010bc68:	55                   	push   %ebp
f010bc69:	89 e5                	mov    %esp,%ebp
f010bc6b:	57                   	push   %edi
f010bc6c:	56                   	push   %esi
f010bc6d:	53                   	push   %ebx
f010bc6e:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010bc71:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010bc78:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bc7b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010bc7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010bc81:	8b 00                	mov    (%eax),%eax
f010bc83:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010bc88:	74 17                	je     f010bca1 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010bc8a:	83 ec 04             	sub    $0x4,%esp
f010bc8d:	68 6b 78 12 f0       	push   $0xf012786b
f010bc92:	68 88 04 00 00       	push   $0x488
f010bc97:	68 4b 75 12 f0       	push   $0xf012754b
f010bc9c:	e8 79 46 ff ff       	call   f010031a <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010bca1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010bca4:	8b 50 1c             	mov    0x1c(%eax),%edx
f010bca7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bcaa:	01 d0                	add    %edx,%eax
f010bcac:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010bcaf:	eb 07                	jmp    f010bcb8 <PROGRAM_SEGMENT_FIRST+0x50>
f010bcb1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010bcb4:	40                   	inc    %eax
f010bcb5:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010bcb8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010bcbb:	c1 e0 05             	shl    $0x5,%eax
f010bcbe:	89 c2                	mov    %eax,%edx
f010bcc0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bcc3:	01 d0                	add    %edx,%eax
f010bcc5:	8b 00                	mov    (%eax),%eax
f010bcc7:	83 f8 01             	cmp    $0x1,%eax
f010bcca:	74 10                	je     f010bcdc <PROGRAM_SEGMENT_FIRST+0x74>
f010bccc:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010bccf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010bcd2:	8b 40 2c             	mov    0x2c(%eax),%eax
f010bcd5:	0f b7 c0             	movzwl %ax,%eax
f010bcd8:	39 c2                	cmp    %eax,%edx
f010bcda:	72 d5                	jb     f010bcb1 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010bcdc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010bcdf:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010bce2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010bce5:	8b 40 2c             	mov    0x2c(%eax),%eax
f010bce8:	0f b7 c0             	movzwl %ax,%eax
f010bceb:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010bcee:	7e 68                	jle    f010bd58 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010bcf0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010bcf3:	c1 e0 05             	shl    $0x5,%eax
f010bcf6:	89 c2                	mov    %eax,%edx
f010bcf8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bcfb:	01 d0                	add    %edx,%eax
f010bcfd:	8b 50 04             	mov    0x4(%eax),%edx
f010bd00:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bd03:	01 d0                	add    %edx,%eax
f010bd05:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010bd08:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010bd0b:	c1 e0 05             	shl    $0x5,%eax
f010bd0e:	89 c2                	mov    %eax,%edx
f010bd10:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bd13:	01 d0                	add    %edx,%eax
f010bd15:	8b 40 14             	mov    0x14(%eax),%eax
f010bd18:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010bd1b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010bd1e:	c1 e0 05             	shl    $0x5,%eax
f010bd21:	89 c2                	mov    %eax,%edx
f010bd23:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bd26:	01 d0                	add    %edx,%eax
f010bd28:	8b 40 10             	mov    0x10(%eax),%eax
f010bd2b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010bd2e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010bd31:	c1 e0 05             	shl    $0x5,%eax
f010bd34:	89 c2                	mov    %eax,%edx
f010bd36:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bd39:	01 d0                	add    %edx,%eax
f010bd3b:	8b 40 08             	mov    0x8(%eax),%eax
f010bd3e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010bd41:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd44:	89 c3                	mov    %eax,%ebx
f010bd46:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010bd49:	ba 05 00 00 00       	mov    $0x5,%edx
f010bd4e:	89 df                	mov    %ebx,%edi
f010bd50:	89 c6                	mov    %eax,%esi
f010bd52:	89 d1                	mov    %edx,%ecx
f010bd54:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010bd56:	eb 1c                	jmp    f010bd74 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010bd58:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010bd5f:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd62:	89 c3                	mov    %eax,%ebx
f010bd64:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010bd67:	ba 05 00 00 00       	mov    $0x5,%edx
f010bd6c:	89 df                	mov    %ebx,%edi
f010bd6e:	89 c6                	mov    %eax,%esi
f010bd70:	89 d1                	mov    %edx,%ecx
f010bd72:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010bd74:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd77:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010bd7a:	5b                   	pop    %ebx
f010bd7b:	5e                   	pop    %esi
f010bd7c:	5f                   	pop    %edi
f010bd7d:	5d                   	pop    %ebp
f010bd7e:	c2 04 00             	ret    $0x4

f010bd81 <cleanup_buffers>:

//===============================================================================
// 13) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================================================
void cleanup_buffers(struct Env* e)
{
f010bd81:	55                   	push   %ebp
f010bd82:	89 e5                	mov    %esp,%ebp
f010bd84:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010bd87:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	acquire_spinlock(&MemFrameLists.mfllock);
f010bd8e:	83 ec 0c             	sub    $0xc,%esp
f010bd91:	68 e0 ee 59 f0       	push   $0xf059eee0
f010bd96:	e8 86 2d 00 00       	call   f010eb21 <acquire_spinlock>
f010bd9b:	83 c4 10             	add    $0x10,%esp
	{
		LIST_FOREACH(ptr_fi, &MemFrameLists.modified_frame_list)
f010bd9e:	a1 d0 ee 59 f0       	mov    0xf059eed0,%eax
f010bda3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010bda6:	e9 c3 00 00 00       	jmp    f010be6e <cleanup_buffers+0xed>
		{
			if(ptr_fi->proc == e)
f010bdab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bdae:	8b 40 0c             	mov    0xc(%eax),%eax
f010bdb1:	3b 45 08             	cmp    0x8(%ebp),%eax
f010bdb4:	0f 85 ac 00 00 00    	jne    f010be66 <cleanup_buffers+0xe5>
			{
				pt_clear_page_table_entry(ptr_fi->proc->env_page_directory,ptr_fi->bufferedVA);
f010bdba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bdbd:	8b 50 10             	mov    0x10(%eax),%edx
f010bdc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bdc3:	8b 40 0c             	mov    0xc(%eax),%eax
f010bdc6:	8b 40 64             	mov    0x64(%eax),%eax
f010bdc9:	83 ec 08             	sub    $0x8,%esp
f010bdcc:	52                   	push   %edx
f010bdcd:	50                   	push   %eax
f010bdce:	e8 62 ce ff ff       	call   f0108c35 <pt_clear_page_table_entry>
f010bdd3:	83 c4 10             	add    $0x10,%esp

				//cprintf("==================\n");
				//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
				LIST_REMOVE(&MemFrameLists.modified_frame_list, ptr_fi);
f010bdd6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010bdda:	75 17                	jne    f010bdf3 <cleanup_buffers+0x72>
f010bddc:	83 ec 04             	sub    $0x4,%esp
f010bddf:	68 dd 75 12 f0       	push   $0xf01275dd
f010bde4:	68 b1 04 00 00       	push   $0x4b1
f010bde9:	68 4b 75 12 f0       	push   $0xf012754b
f010bdee:	e8 27 45 ff ff       	call   f010031a <_panic>
f010bdf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bdf6:	8b 00                	mov    (%eax),%eax
f010bdf8:	85 c0                	test   %eax,%eax
f010bdfa:	74 10                	je     f010be0c <cleanup_buffers+0x8b>
f010bdfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bdff:	8b 00                	mov    (%eax),%eax
f010be01:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010be04:	8b 52 04             	mov    0x4(%edx),%edx
f010be07:	89 50 04             	mov    %edx,0x4(%eax)
f010be0a:	eb 0b                	jmp    f010be17 <cleanup_buffers+0x96>
f010be0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be0f:	8b 40 04             	mov    0x4(%eax),%eax
f010be12:	a3 d4 ee 59 f0       	mov    %eax,0xf059eed4
f010be17:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be1a:	8b 40 04             	mov    0x4(%eax),%eax
f010be1d:	85 c0                	test   %eax,%eax
f010be1f:	74 0f                	je     f010be30 <cleanup_buffers+0xaf>
f010be21:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be24:	8b 40 04             	mov    0x4(%eax),%eax
f010be27:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010be2a:	8b 12                	mov    (%edx),%edx
f010be2c:	89 10                	mov    %edx,(%eax)
f010be2e:	eb 0a                	jmp    f010be3a <cleanup_buffers+0xb9>
f010be30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be33:	8b 00                	mov    (%eax),%eax
f010be35:	a3 d0 ee 59 f0       	mov    %eax,0xf059eed0
f010be3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be3d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010be43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be46:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010be4d:	a1 dc ee 59 f0       	mov    0xf059eedc,%eax
f010be52:	48                   	dec    %eax
f010be53:	a3 dc ee 59 f0       	mov    %eax,0xf059eedc

				free_frame(ptr_fi);
f010be58:	83 ec 0c             	sub    $0xc,%esp
f010be5b:	ff 75 f4             	pushl  -0xc(%ebp)
f010be5e:	e8 c1 c4 ff ff       	call   f0108324 <free_frame>
f010be63:	83 c4 10             	add    $0x10,%esp
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	acquire_spinlock(&MemFrameLists.mfllock);
	{
		LIST_FOREACH(ptr_fi, &MemFrameLists.modified_frame_list)
f010be66:	a1 d8 ee 59 f0       	mov    0xf059eed8,%eax
f010be6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010be6e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010be72:	74 07                	je     f010be7b <cleanup_buffers+0xfa>
f010be74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be77:	8b 00                	mov    (%eax),%eax
f010be79:	eb 05                	jmp    f010be80 <cleanup_buffers+0xff>
f010be7b:	b8 00 00 00 00       	mov    $0x0,%eax
f010be80:	a3 d8 ee 59 f0       	mov    %eax,0xf059eed8
f010be85:	a1 d8 ee 59 f0       	mov    0xf059eed8,%eax
f010be8a:	85 c0                	test   %eax,%eax
f010be8c:	0f 85 19 ff ff ff    	jne    f010bdab <cleanup_buffers+0x2a>
f010be92:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010be96:	0f 85 0f ff ff ff    	jne    f010bdab <cleanup_buffers+0x2a>
				//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x, saved next = %x \n", curenv->prog_name ,ptr_fi, LIST_NEXT(ptr_fi), ___ptr_next);
				//cprintf("==================\n");
			}
		}
	}
	release_spinlock(&MemFrameLists.mfllock);
f010be9c:	83 ec 0c             	sub    $0xc,%esp
f010be9f:	68 e0 ee 59 f0       	push   $0xf059eee0
f010bea4:	e8 ff 2c 00 00       	call   f010eba8 <release_spinlock>
f010bea9:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010beac:	90                   	nop
f010bead:	c9                   	leave  
f010beae:	c3                   	ret    

f010beaf <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010beaf:	55                   	push   %ebp
f010beb0:	89 e5                	mov    %esp,%ebp
f010beb2:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010beb5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010beb9:	7e 06                	jle    f010bec1 <set_program_priority+0x12>
f010bebb:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010bebf:	7e 14                	jle    f010bed5 <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010bec1:	83 ec 04             	sub    $0x4,%esp
f010bec4:	68 84 78 12 f0       	push   $0xf0127884
f010bec9:	6a 10                	push   $0x10
f010becb:	68 a8 78 12 f0       	push   $0xf01278a8
f010bed0:	e8 45 44 ff ff       	call   f010031a <_panic>
		return;
	}
	if(env == NULL)
f010bed5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010bed9:	74 78                	je     f010bf53 <set_program_priority+0xa4>
		return;
	switch(priority)
f010bedb:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010bedf:	77 56                	ja     f010bf37 <set_program_priority+0x88>
f010bee1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bee4:	c1 e0 02             	shl    $0x2,%eax
f010bee7:	05 e4 78 12 f0       	add    $0xf01278e4,%eax
f010beec:	8b 00                	mov    (%eax),%eax
f010beee:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010bef0:	83 ec 08             	sub    $0x8,%esp
f010bef3:	6a 01                	push   $0x1
f010bef5:	ff 75 08             	pushl  0x8(%ebp)
f010bef8:	e8 b6 d7 ff ff       	call   f01096b3 <half_WS_Size>
f010befd:	83 c4 10             	add    $0x10,%esp
			break;
f010bf00:	eb 35                	jmp    f010bf37 <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010bf02:	83 ec 08             	sub    $0x8,%esp
f010bf05:	6a 00                	push   $0x0
f010bf07:	ff 75 08             	pushl  0x8(%ebp)
f010bf0a:	e8 a4 d7 ff ff       	call   f01096b3 <half_WS_Size>
f010bf0f:	83 c4 10             	add    $0x10,%esp
			break;
f010bf12:	eb 23                	jmp    f010bf37 <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010bf14:	83 ec 08             	sub    $0x8,%esp
f010bf17:	6a 01                	push   $0x1
f010bf19:	ff 75 08             	pushl  0x8(%ebp)
f010bf1c:	e8 75 d7 ff ff       	call   f0109696 <double_WS_Size>
f010bf21:	83 c4 10             	add    $0x10,%esp
			break;
f010bf24:	eb 11                	jmp    f010bf37 <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010bf26:	83 ec 08             	sub    $0x8,%esp
f010bf29:	6a 00                	push   $0x0
f010bf2b:	ff 75 08             	pushl  0x8(%ebp)
f010bf2e:	e8 63 d7 ff ff       	call   f0109696 <double_WS_Size>
f010bf33:	83 c4 10             	add    $0x10,%esp
			break;
f010bf36:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010bf37:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf3a:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f010bf40:	83 ec 08             	sub    $0x8,%esp
f010bf43:	50                   	push   %eax
f010bf44:	68 c5 78 12 f0       	push   $0xf01278c5
f010bf49:	e8 1e 50 ff ff       	call   f0100f6c <cprintf>
f010bf4e:	83 c4 10             	add    $0x10,%esp
f010bf51:	eb 01                	jmp    f010bf54 <set_program_priority+0xa5>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010bf53:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010bf54:	c9                   	leave  
f010bf55:	c3                   	ret    

f010bf56 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010bf56:	55                   	push   %ebp
f010bf57:	89 e5                	mov    %esp,%ebp
f010bf59:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010bf5c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010bf63:	eb 29                	jmp    f010bf8e <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010bf65:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bf68:	89 d0                	mov    %edx,%eax
f010bf6a:	01 c0                	add    %eax,%eax
f010bf6c:	01 d0                	add    %edx,%eax
f010bf6e:	c1 e0 02             	shl    $0x2,%eax
f010bf71:	05 80 d9 17 f0       	add    $0xf017d980,%eax
f010bf76:	8b 00                	mov    (%eax),%eax
f010bf78:	83 ec 08             	sub    $0x8,%esp
f010bf7b:	50                   	push   %eax
f010bf7c:	ff 75 08             	pushl  0x8(%ebp)
f010bf7f:	e8 c0 65 01 00       	call   f0122544 <strcmp>
f010bf84:	83 c4 10             	add    $0x10,%esp
f010bf87:	85 c0                	test   %eax,%eax
f010bf89:	74 0f                	je     f010bf9a <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010bf8b:	ff 45 f4             	incl   -0xc(%ebp)
f010bf8e:	a1 e4 dc 17 f0       	mov    0xf017dce4,%eax
f010bf93:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010bf96:	7c cd                	jl     f010bf65 <get_user_program_info+0xf>
f010bf98:	eb 01                	jmp    f010bf9b <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010bf9a:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010bf9b:	a1 e4 dc 17 f0       	mov    0xf017dce4,%eax
f010bfa0:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010bfa3:	75 1a                	jne    f010bfbf <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010bfa5:	83 ec 08             	sub    $0x8,%esp
f010bfa8:	ff 75 08             	pushl  0x8(%ebp)
f010bfab:	68 49 86 12 f0       	push   $0xf0128649
f010bfb0:	e8 b7 4f ff ff       	call   f0100f6c <cprintf>
f010bfb5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010bfb8:	b8 00 00 00 00       	mov    $0x0,%eax
f010bfbd:	eb 11                	jmp    f010bfd0 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010bfbf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bfc2:	89 d0                	mov    %edx,%eax
f010bfc4:	01 c0                	add    %eax,%eax
f010bfc6:	01 d0                	add    %edx,%eax
f010bfc8:	c1 e0 02             	shl    $0x2,%eax
f010bfcb:	05 80 d9 17 f0       	add    $0xf017d980,%eax
}
f010bfd0:	c9                   	leave  
f010bfd1:	c3                   	ret    

f010bfd2 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010bfd2:	55                   	push   %ebp
f010bfd3:	89 e5                	mov    %esp,%ebp
f010bfd5:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010bfd8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010bfdf:	eb 2d                	jmp    f010c00e <get_user_program_info_by_env+0x3c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010bfe1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bfe4:	89 d0                	mov    %edx,%eax
f010bfe6:	01 c0                	add    %eax,%eax
f010bfe8:	01 d0                	add    %edx,%eax
f010bfea:	c1 e0 02             	shl    $0x2,%eax
f010bfed:	05 80 d9 17 f0       	add    $0xf017d980,%eax
f010bff2:	8b 00                	mov    (%eax),%eax
f010bff4:	8b 55 08             	mov    0x8(%ebp),%edx
f010bff7:	83 c2 20             	add    $0x20,%edx
f010bffa:	83 ec 08             	sub    $0x8,%esp
f010bffd:	50                   	push   %eax
f010bffe:	52                   	push   %edx
f010bfff:	e8 40 65 01 00       	call   f0122544 <strcmp>
f010c004:	83 c4 10             	add    $0x10,%esp
f010c007:	85 c0                	test   %eax,%eax
f010c009:	74 0f                	je     f010c01a <get_user_program_info_by_env+0x48>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010c00b:	ff 45 f4             	incl   -0xc(%ebp)
f010c00e:	a1 e4 dc 17 f0       	mov    0xf017dce4,%eax
f010c013:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010c016:	7c c9                	jl     f010bfe1 <get_user_program_info_by_env+0xf>
f010c018:	eb 01                	jmp    f010c01b <get_user_program_info_by_env+0x49>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010c01a:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010c01b:	a1 e4 dc 17 f0       	mov    0xf017dce4,%eax
f010c020:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010c023:	75 17                	jne    f010c03c <get_user_program_info_by_env+0x6a>
	{
		cprintf("Unknown user program \n");
f010c025:	83 ec 0c             	sub    $0xc,%esp
f010c028:	68 64 86 12 f0       	push   $0xf0128664
f010c02d:	e8 3a 4f ff ff       	call   f0100f6c <cprintf>
f010c032:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c035:	b8 00 00 00 00       	mov    $0x0,%eax
f010c03a:	eb 11                	jmp    f010c04d <get_user_program_info_by_env+0x7b>
	}

	return &userPrograms[i];
f010c03c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c03f:	89 d0                	mov    %edx,%eax
f010c041:	01 c0                	add    %eax,%eax
f010c043:	01 d0                	add    %edx,%eax
f010c045:	c1 e0 02             	shl    $0x2,%eax
f010c048:	05 80 d9 17 f0       	add    $0xf017d980,%eax
}
f010c04d:	c9                   	leave  
f010c04e:	c3                   	ret    

f010c04f <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010c04f:	55                   	push   %ebp
f010c050:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010c052:	8b 45 08             	mov    0x8(%ebp),%eax
f010c055:	83 f8 13             	cmp    $0x13,%eax
f010c058:	77 0c                	ja     f010c066 <trapname+0x17>
		return excnames[trapno];
f010c05a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c05d:	8b 04 85 40 8a 12 f0 	mov    -0xfed75c0(,%eax,4),%eax
f010c064:	eb 2c                	jmp    f010c092 <trapname+0x43>
	if (trapno == T_SYSCALL)
f010c066:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010c06a:	75 07                	jne    f010c073 <trapname+0x24>
		return "System call";
f010c06c:	b8 80 86 12 f0       	mov    $0xf0128680,%eax
f010c071:	eb 1f                	jmp    f010c092 <trapname+0x43>
	else if (trapno == IRQ0_Clock)
f010c073:	83 7d 08 20          	cmpl   $0x20,0x8(%ebp)
f010c077:	75 07                	jne    f010c080 <trapname+0x31>
		return "Clock Interrupt";
f010c079:	b8 8c 86 12 f0       	mov    $0xf012868c,%eax
f010c07e:	eb 12                	jmp    f010c092 <trapname+0x43>
	else if (trapno == IRQ1_KB)
f010c080:	83 7d 08 21          	cmpl   $0x21,0x8(%ebp)
f010c084:	75 07                	jne    f010c08d <trapname+0x3e>
		return "Keyboard Interrupt";
f010c086:	b8 9c 86 12 f0       	mov    $0xf012869c,%eax
f010c08b:	eb 05                	jmp    f010c092 <trapname+0x43>
	return "(unknown trap)";
f010c08d:	b8 af 86 12 f0       	mov    $0xf01286af,%eax
}
f010c092:	5d                   	pop    %ebp
f010c093:	c3                   	ret    

f010c094 <ts_init>:


void ts_init(void)
{
f010c094:	55                   	push   %ebp
f010c095:	89 e5                	mov    %esp,%ebp
f010c097:	53                   	push   %ebx
f010c098:	83 ec 14             	sub    $0x14,%esp
	pushcli();	//disable interrupt - lock: to protect CPU info in multi-CPU
f010c09b:	e8 20 b1 ff ff       	call   f01071c0 <pushcli>

	struct cpu* c = mycpu();
f010c0a0:	e8 58 b0 ff ff       	call   f01070fd <mycpu>
f010c0a5:	89 45 f4             	mov    %eax,-0xc(%ebp)

	// Setup a TSS so that we get the right user kernel stack
	// when we trap to the kernel.
	// 2024: for now, temporarily set it to 0
	// since the scheduler will run first then switch to the first process
	c->ts.ts_esp0 = 0;
f010c0a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c0ab:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
	c->ts.ts_ss0 = GD_KD;
f010c0b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c0b5:	66 c7 40 14 10 00    	movw   $0x10,0x14(%eax)

	// Initialize the TSS field of the gdt.
	c->gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&(c->ts)), sizeof(struct Taskstate), 0);
f010c0bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c0be:	83 c0 0c             	add    $0xc,%eax
f010c0c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c0c4:	83 c2 0c             	add    $0xc,%edx
f010c0c7:	c1 ea 10             	shr    $0x10,%edx
f010c0ca:	88 d3                	mov    %dl,%bl
f010c0cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c0cf:	83 c2 0c             	add    $0xc,%edx
f010c0d2:	c1 ea 18             	shr    $0x18,%edx
f010c0d5:	88 d1                	mov    %dl,%cl
f010c0d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c0da:	66 c7 82 9c 00 00 00 	movw   $0x68,0x9c(%edx)
f010c0e1:	68 00 
f010c0e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c0e6:	66 89 82 9e 00 00 00 	mov    %ax,0x9e(%edx)
f010c0ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c0f0:	88 98 a0 00 00 00    	mov    %bl,0xa0(%eax)
f010c0f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c0f9:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010c0ff:	83 e2 f0             	and    $0xfffffff0,%edx
f010c102:	83 ca 09             	or     $0x9,%edx
f010c105:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010c10b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c10e:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010c114:	83 ca 10             	or     $0x10,%edx
f010c117:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010c11d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c120:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010c126:	83 e2 9f             	and    $0xffffff9f,%edx
f010c129:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010c12f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c132:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010c138:	83 ca 80             	or     $0xffffff80,%edx
f010c13b:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010c141:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c144:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010c14a:	83 e2 f0             	and    $0xfffffff0,%edx
f010c14d:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010c153:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c156:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010c15c:	83 e2 ef             	and    $0xffffffef,%edx
f010c15f:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010c165:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c168:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010c16e:	83 e2 df             	and    $0xffffffdf,%edx
f010c171:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010c177:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c17a:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010c180:	83 ca 40             	or     $0x40,%edx
f010c183:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010c189:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c18c:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010c192:	83 e2 7f             	and    $0x7f,%edx
f010c195:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010c19b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c19e:	88 88 a3 00 00 00    	mov    %cl,0xa3(%eax)
	c->gdt[GD_TSS >> 3].sd_s = 0;
f010c1a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c1a7:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010c1ad:	83 e2 ef             	and    $0xffffffef,%edx
f010c1b0:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)

	popcli();	//enable interrupt - lock: to protect CPU info in multi-CPU
f010c1b6:	e8 57 b0 ff ff       	call   f0107212 <popcli>
f010c1bb:	66 c7 45 f2 28 00    	movw   $0x28,-0xe(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c1c1:	66 8b 45 f2          	mov    -0xe(%ebp),%ax
f010c1c5:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);
}
f010c1c8:	90                   	nop
f010c1c9:	83 c4 14             	add    $0x14,%esp
f010c1cc:	5b                   	pop    %ebx
f010c1cd:	5d                   	pop    %ebp
f010c1ce:	c3                   	ret    

f010c1cf <idt_init>:
/// shifted function addresses can't be represented in relocation records.)
///
struct Gatedesc idt[256] = { { 0 } };

void idt_init(void)
{
f010c1cf:	55                   	push   %ebp
f010c1d0:	89 e5                	mov    %esp,%ebp
f010c1d2:	83 ec 10             	sub    $0x10,%esp
	//initialize idt
	SETGATE(idt[T_DBLFLT  ], 0, GD_KT , &DBL_FAULT, 0) ;		//8
f010c1d5:	b8 7e d6 10 f0       	mov    $0xf010d67e,%eax
f010c1da:	66 a3 20 e4 59 f0    	mov    %ax,0xf059e420
f010c1e0:	66 c7 05 22 e4 59 f0 	movw   $0x8,0xf059e422
f010c1e7:	08 00 
f010c1e9:	a0 24 e4 59 f0       	mov    0xf059e424,%al
f010c1ee:	83 e0 e0             	and    $0xffffffe0,%eax
f010c1f1:	a2 24 e4 59 f0       	mov    %al,0xf059e424
f010c1f6:	a0 24 e4 59 f0       	mov    0xf059e424,%al
f010c1fb:	83 e0 1f             	and    $0x1f,%eax
f010c1fe:	a2 24 e4 59 f0       	mov    %al,0xf059e424
f010c203:	a0 25 e4 59 f0       	mov    0xf059e425,%al
f010c208:	83 e0 f0             	and    $0xfffffff0,%eax
f010c20b:	83 c8 0e             	or     $0xe,%eax
f010c20e:	a2 25 e4 59 f0       	mov    %al,0xf059e425
f010c213:	a0 25 e4 59 f0       	mov    0xf059e425,%al
f010c218:	83 e0 ef             	and    $0xffffffef,%eax
f010c21b:	a2 25 e4 59 f0       	mov    %al,0xf059e425
f010c220:	a0 25 e4 59 f0       	mov    0xf059e425,%al
f010c225:	83 e0 9f             	and    $0xffffff9f,%eax
f010c228:	a2 25 e4 59 f0       	mov    %al,0xf059e425
f010c22d:	a0 25 e4 59 f0       	mov    0xf059e425,%al
f010c232:	83 c8 80             	or     $0xffffff80,%eax
f010c235:	a2 25 e4 59 f0       	mov    %al,0xf059e425
f010c23a:	b8 7e d6 10 f0       	mov    $0xf010d67e,%eax
f010c23f:	c1 e8 10             	shr    $0x10,%eax
f010c242:	66 a3 26 e4 59 f0    	mov    %ax,0xf059e426
	SETGATE(idt[T_PGFLT   ], 0, GD_KT , &PAGE_FAULT, 0) ;		//14
f010c248:	b8 86 d6 10 f0       	mov    $0xf010d686,%eax
f010c24d:	66 a3 50 e4 59 f0    	mov    %ax,0xf059e450
f010c253:	66 c7 05 52 e4 59 f0 	movw   $0x8,0xf059e452
f010c25a:	08 00 
f010c25c:	a0 54 e4 59 f0       	mov    0xf059e454,%al
f010c261:	83 e0 e0             	and    $0xffffffe0,%eax
f010c264:	a2 54 e4 59 f0       	mov    %al,0xf059e454
f010c269:	a0 54 e4 59 f0       	mov    0xf059e454,%al
f010c26e:	83 e0 1f             	and    $0x1f,%eax
f010c271:	a2 54 e4 59 f0       	mov    %al,0xf059e454
f010c276:	a0 55 e4 59 f0       	mov    0xf059e455,%al
f010c27b:	83 e0 f0             	and    $0xfffffff0,%eax
f010c27e:	83 c8 0e             	or     $0xe,%eax
f010c281:	a2 55 e4 59 f0       	mov    %al,0xf059e455
f010c286:	a0 55 e4 59 f0       	mov    0xf059e455,%al
f010c28b:	83 e0 ef             	and    $0xffffffef,%eax
f010c28e:	a2 55 e4 59 f0       	mov    %al,0xf059e455
f010c293:	a0 55 e4 59 f0       	mov    0xf059e455,%al
f010c298:	83 e0 9f             	and    $0xffffff9f,%eax
f010c29b:	a2 55 e4 59 f0       	mov    %al,0xf059e455
f010c2a0:	a0 55 e4 59 f0       	mov    0xf059e455,%al
f010c2a5:	83 c8 80             	or     $0xffffff80,%eax
f010c2a8:	a2 55 e4 59 f0       	mov    %al,0xf059e455
f010c2ad:	b8 86 d6 10 f0       	mov    $0xf010d686,%eax
f010c2b2:	c1 e8 10             	shr    $0x10,%eax
f010c2b5:	66 a3 56 e4 59 f0    	mov    %ax,0xf059e456
	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &IRQ0_CLK_HANDLER, 3) ;	//32
f010c2bb:	b8 8e d6 10 f0       	mov    $0xf010d68e,%eax
f010c2c0:	66 a3 e0 e4 59 f0    	mov    %ax,0xf059e4e0
f010c2c6:	66 c7 05 e2 e4 59 f0 	movw   $0x8,0xf059e4e2
f010c2cd:	08 00 
f010c2cf:	a0 e4 e4 59 f0       	mov    0xf059e4e4,%al
f010c2d4:	83 e0 e0             	and    $0xffffffe0,%eax
f010c2d7:	a2 e4 e4 59 f0       	mov    %al,0xf059e4e4
f010c2dc:	a0 e4 e4 59 f0       	mov    0xf059e4e4,%al
f010c2e1:	83 e0 1f             	and    $0x1f,%eax
f010c2e4:	a2 e4 e4 59 f0       	mov    %al,0xf059e4e4
f010c2e9:	a0 e5 e4 59 f0       	mov    0xf059e4e5,%al
f010c2ee:	83 e0 f0             	and    $0xfffffff0,%eax
f010c2f1:	83 c8 0e             	or     $0xe,%eax
f010c2f4:	a2 e5 e4 59 f0       	mov    %al,0xf059e4e5
f010c2f9:	a0 e5 e4 59 f0       	mov    0xf059e4e5,%al
f010c2fe:	83 e0 ef             	and    $0xffffffef,%eax
f010c301:	a2 e5 e4 59 f0       	mov    %al,0xf059e4e5
f010c306:	a0 e5 e4 59 f0       	mov    0xf059e4e5,%al
f010c30b:	83 c8 60             	or     $0x60,%eax
f010c30e:	a2 e5 e4 59 f0       	mov    %al,0xf059e4e5
f010c313:	a0 e5 e4 59 f0       	mov    0xf059e4e5,%al
f010c318:	83 c8 80             	or     $0xffffff80,%eax
f010c31b:	a2 e5 e4 59 f0       	mov    %al,0xf059e4e5
f010c320:	b8 8e d6 10 f0       	mov    $0xf010d68e,%eax
f010c325:	c1 e8 10             	shr    $0x10,%eax
f010c328:	66 a3 e6 e4 59 f0    	mov    %ax,0xf059e4e6
	SETGATE(idt[IRQ1_KB	  ], 0, GD_KT , &IRQ1_KBD_HANDLER, 3) ;	//33
f010c32e:	b8 98 d6 10 f0       	mov    $0xf010d698,%eax
f010c333:	66 a3 e8 e4 59 f0    	mov    %ax,0xf059e4e8
f010c339:	66 c7 05 ea e4 59 f0 	movw   $0x8,0xf059e4ea
f010c340:	08 00 
f010c342:	a0 ec e4 59 f0       	mov    0xf059e4ec,%al
f010c347:	83 e0 e0             	and    $0xffffffe0,%eax
f010c34a:	a2 ec e4 59 f0       	mov    %al,0xf059e4ec
f010c34f:	a0 ec e4 59 f0       	mov    0xf059e4ec,%al
f010c354:	83 e0 1f             	and    $0x1f,%eax
f010c357:	a2 ec e4 59 f0       	mov    %al,0xf059e4ec
f010c35c:	a0 ed e4 59 f0       	mov    0xf059e4ed,%al
f010c361:	83 e0 f0             	and    $0xfffffff0,%eax
f010c364:	83 c8 0e             	or     $0xe,%eax
f010c367:	a2 ed e4 59 f0       	mov    %al,0xf059e4ed
f010c36c:	a0 ed e4 59 f0       	mov    0xf059e4ed,%al
f010c371:	83 e0 ef             	and    $0xffffffef,%eax
f010c374:	a2 ed e4 59 f0       	mov    %al,0xf059e4ed
f010c379:	a0 ed e4 59 f0       	mov    0xf059e4ed,%al
f010c37e:	83 c8 60             	or     $0x60,%eax
f010c381:	a2 ed e4 59 f0       	mov    %al,0xf059e4ed
f010c386:	a0 ed e4 59 f0       	mov    0xf059e4ed,%al
f010c38b:	83 c8 80             	or     $0xffffff80,%eax
f010c38e:	a2 ed e4 59 f0       	mov    %al,0xf059e4ed
f010c393:	b8 98 d6 10 f0       	mov    $0xf010d698,%eax
f010c398:	c1 e8 10             	shr    $0x10,%eax
f010c39b:	66 a3 ee e4 59 f0    	mov    %ax,0xf059e4ee
	SETGATE(idt[T_SYSCALL ], 0, GD_KT , &SYSCALL_HANDLER, 3) ;	//48
f010c3a1:	b8 a2 d6 10 f0       	mov    $0xf010d6a2,%eax
f010c3a6:	66 a3 60 e5 59 f0    	mov    %ax,0xf059e560
f010c3ac:	66 c7 05 62 e5 59 f0 	movw   $0x8,0xf059e562
f010c3b3:	08 00 
f010c3b5:	a0 64 e5 59 f0       	mov    0xf059e564,%al
f010c3ba:	83 e0 e0             	and    $0xffffffe0,%eax
f010c3bd:	a2 64 e5 59 f0       	mov    %al,0xf059e564
f010c3c2:	a0 64 e5 59 f0       	mov    0xf059e564,%al
f010c3c7:	83 e0 1f             	and    $0x1f,%eax
f010c3ca:	a2 64 e5 59 f0       	mov    %al,0xf059e564
f010c3cf:	a0 65 e5 59 f0       	mov    0xf059e565,%al
f010c3d4:	83 e0 f0             	and    $0xfffffff0,%eax
f010c3d7:	83 c8 0e             	or     $0xe,%eax
f010c3da:	a2 65 e5 59 f0       	mov    %al,0xf059e565
f010c3df:	a0 65 e5 59 f0       	mov    0xf059e565,%al
f010c3e4:	83 e0 ef             	and    $0xffffffef,%eax
f010c3e7:	a2 65 e5 59 f0       	mov    %al,0xf059e565
f010c3ec:	a0 65 e5 59 f0       	mov    0xf059e565,%al
f010c3f1:	83 c8 60             	or     $0x60,%eax
f010c3f4:	a2 65 e5 59 f0       	mov    %al,0xf059e565
f010c3f9:	a0 65 e5 59 f0       	mov    0xf059e565,%al
f010c3fe:	83 c8 80             	or     $0xffffff80,%eax
f010c401:	a2 65 e5 59 f0       	mov    %al,0xf059e565
f010c406:	b8 a2 d6 10 f0       	mov    $0xf010d6a2,%eax
f010c40b:	c1 e8 10             	shr    $0x10,%eax
f010c40e:	66 a3 66 e5 59 f0    	mov    %ax,0xf059e566

	//S/W Exceptions
	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010c414:	b8 ac d6 10 f0       	mov    $0xf010d6ac,%eax
f010c419:	66 a3 e0 e3 59 f0    	mov    %ax,0xf059e3e0
f010c41f:	66 c7 05 e2 e3 59 f0 	movw   $0x8,0xf059e3e2
f010c426:	08 00 
f010c428:	a0 e4 e3 59 f0       	mov    0xf059e3e4,%al
f010c42d:	83 e0 e0             	and    $0xffffffe0,%eax
f010c430:	a2 e4 e3 59 f0       	mov    %al,0xf059e3e4
f010c435:	a0 e4 e3 59 f0       	mov    0xf059e3e4,%al
f010c43a:	83 e0 1f             	and    $0x1f,%eax
f010c43d:	a2 e4 e3 59 f0       	mov    %al,0xf059e3e4
f010c442:	a0 e5 e3 59 f0       	mov    0xf059e3e5,%al
f010c447:	83 e0 f0             	and    $0xfffffff0,%eax
f010c44a:	83 c8 0e             	or     $0xe,%eax
f010c44d:	a2 e5 e3 59 f0       	mov    %al,0xf059e3e5
f010c452:	a0 e5 e3 59 f0       	mov    0xf059e3e5,%al
f010c457:	83 e0 ef             	and    $0xffffffef,%eax
f010c45a:	a2 e5 e3 59 f0       	mov    %al,0xf059e3e5
f010c45f:	a0 e5 e3 59 f0       	mov    0xf059e3e5,%al
f010c464:	83 c8 60             	or     $0x60,%eax
f010c467:	a2 e5 e3 59 f0       	mov    %al,0xf059e3e5
f010c46c:	a0 e5 e3 59 f0       	mov    0xf059e3e5,%al
f010c471:	83 c8 80             	or     $0xffffff80,%eax
f010c474:	a2 e5 e3 59 f0       	mov    %al,0xf059e3e5
f010c479:	b8 ac d6 10 f0       	mov    $0xf010d6ac,%eax
f010c47e:	c1 e8 10             	shr    $0x10,%eax
f010c481:	66 a3 e6 e3 59 f0    	mov    %ax,0xf059e3e6
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010c487:	b8 b6 d6 10 f0       	mov    $0xf010d6b6,%eax
f010c48c:	66 a3 e8 e3 59 f0    	mov    %ax,0xf059e3e8
f010c492:	66 c7 05 ea e3 59 f0 	movw   $0x8,0xf059e3ea
f010c499:	08 00 
f010c49b:	a0 ec e3 59 f0       	mov    0xf059e3ec,%al
f010c4a0:	83 e0 e0             	and    $0xffffffe0,%eax
f010c4a3:	a2 ec e3 59 f0       	mov    %al,0xf059e3ec
f010c4a8:	a0 ec e3 59 f0       	mov    0xf059e3ec,%al
f010c4ad:	83 e0 1f             	and    $0x1f,%eax
f010c4b0:	a2 ec e3 59 f0       	mov    %al,0xf059e3ec
f010c4b5:	a0 ed e3 59 f0       	mov    0xf059e3ed,%al
f010c4ba:	83 c8 0f             	or     $0xf,%eax
f010c4bd:	a2 ed e3 59 f0       	mov    %al,0xf059e3ed
f010c4c2:	a0 ed e3 59 f0       	mov    0xf059e3ed,%al
f010c4c7:	83 e0 ef             	and    $0xffffffef,%eax
f010c4ca:	a2 ed e3 59 f0       	mov    %al,0xf059e3ed
f010c4cf:	a0 ed e3 59 f0       	mov    0xf059e3ed,%al
f010c4d4:	83 c8 60             	or     $0x60,%eax
f010c4d7:	a2 ed e3 59 f0       	mov    %al,0xf059e3ed
f010c4dc:	a0 ed e3 59 f0       	mov    0xf059e3ed,%al
f010c4e1:	83 c8 80             	or     $0xffffff80,%eax
f010c4e4:	a2 ed e3 59 f0       	mov    %al,0xf059e3ed
f010c4e9:	b8 b6 d6 10 f0       	mov    $0xf010d6b6,%eax
f010c4ee:	c1 e8 10             	shr    $0x10,%eax
f010c4f1:	66 a3 ee e3 59 f0    	mov    %ax,0xf059e3ee
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010c4f7:	b8 c0 d6 10 f0       	mov    $0xf010d6c0,%eax
f010c4fc:	66 a3 f0 e3 59 f0    	mov    %ax,0xf059e3f0
f010c502:	66 c7 05 f2 e3 59 f0 	movw   $0x8,0xf059e3f2
f010c509:	08 00 
f010c50b:	a0 f4 e3 59 f0       	mov    0xf059e3f4,%al
f010c510:	83 e0 e0             	and    $0xffffffe0,%eax
f010c513:	a2 f4 e3 59 f0       	mov    %al,0xf059e3f4
f010c518:	a0 f4 e3 59 f0       	mov    0xf059e3f4,%al
f010c51d:	83 e0 1f             	and    $0x1f,%eax
f010c520:	a2 f4 e3 59 f0       	mov    %al,0xf059e3f4
f010c525:	a0 f5 e3 59 f0       	mov    0xf059e3f5,%al
f010c52a:	83 e0 f0             	and    $0xfffffff0,%eax
f010c52d:	83 c8 0e             	or     $0xe,%eax
f010c530:	a2 f5 e3 59 f0       	mov    %al,0xf059e3f5
f010c535:	a0 f5 e3 59 f0       	mov    0xf059e3f5,%al
f010c53a:	83 e0 ef             	and    $0xffffffef,%eax
f010c53d:	a2 f5 e3 59 f0       	mov    %al,0xf059e3f5
f010c542:	a0 f5 e3 59 f0       	mov    0xf059e3f5,%al
f010c547:	83 c8 60             	or     $0x60,%eax
f010c54a:	a2 f5 e3 59 f0       	mov    %al,0xf059e3f5
f010c54f:	a0 f5 e3 59 f0       	mov    0xf059e3f5,%al
f010c554:	83 c8 80             	or     $0xffffff80,%eax
f010c557:	a2 f5 e3 59 f0       	mov    %al,0xf059e3f5
f010c55c:	b8 c0 d6 10 f0       	mov    $0xf010d6c0,%eax
f010c561:	c1 e8 10             	shr    $0x10,%eax
f010c564:	66 a3 f6 e3 59 f0    	mov    %ax,0xf059e3f6
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010c56a:	b8 ca d6 10 f0       	mov    $0xf010d6ca,%eax
f010c56f:	66 a3 f8 e3 59 f0    	mov    %ax,0xf059e3f8
f010c575:	66 c7 05 fa e3 59 f0 	movw   $0x8,0xf059e3fa
f010c57c:	08 00 
f010c57e:	a0 fc e3 59 f0       	mov    0xf059e3fc,%al
f010c583:	83 e0 e0             	and    $0xffffffe0,%eax
f010c586:	a2 fc e3 59 f0       	mov    %al,0xf059e3fc
f010c58b:	a0 fc e3 59 f0       	mov    0xf059e3fc,%al
f010c590:	83 e0 1f             	and    $0x1f,%eax
f010c593:	a2 fc e3 59 f0       	mov    %al,0xf059e3fc
f010c598:	a0 fd e3 59 f0       	mov    0xf059e3fd,%al
f010c59d:	83 c8 0f             	or     $0xf,%eax
f010c5a0:	a2 fd e3 59 f0       	mov    %al,0xf059e3fd
f010c5a5:	a0 fd e3 59 f0       	mov    0xf059e3fd,%al
f010c5aa:	83 e0 ef             	and    $0xffffffef,%eax
f010c5ad:	a2 fd e3 59 f0       	mov    %al,0xf059e3fd
f010c5b2:	a0 fd e3 59 f0       	mov    0xf059e3fd,%al
f010c5b7:	83 c8 60             	or     $0x60,%eax
f010c5ba:	a2 fd e3 59 f0       	mov    %al,0xf059e3fd
f010c5bf:	a0 fd e3 59 f0       	mov    0xf059e3fd,%al
f010c5c4:	83 c8 80             	or     $0xffffff80,%eax
f010c5c7:	a2 fd e3 59 f0       	mov    %al,0xf059e3fd
f010c5cc:	b8 ca d6 10 f0       	mov    $0xf010d6ca,%eax
f010c5d1:	c1 e8 10             	shr    $0x10,%eax
f010c5d4:	66 a3 fe e3 59 f0    	mov    %ax,0xf059e3fe
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010c5da:	b8 d4 d6 10 f0       	mov    $0xf010d6d4,%eax
f010c5df:	66 a3 00 e4 59 f0    	mov    %ax,0xf059e400
f010c5e5:	66 c7 05 02 e4 59 f0 	movw   $0x8,0xf059e402
f010c5ec:	08 00 
f010c5ee:	a0 04 e4 59 f0       	mov    0xf059e404,%al
f010c5f3:	83 e0 e0             	and    $0xffffffe0,%eax
f010c5f6:	a2 04 e4 59 f0       	mov    %al,0xf059e404
f010c5fb:	a0 04 e4 59 f0       	mov    0xf059e404,%al
f010c600:	83 e0 1f             	and    $0x1f,%eax
f010c603:	a2 04 e4 59 f0       	mov    %al,0xf059e404
f010c608:	a0 05 e4 59 f0       	mov    0xf059e405,%al
f010c60d:	83 c8 0f             	or     $0xf,%eax
f010c610:	a2 05 e4 59 f0       	mov    %al,0xf059e405
f010c615:	a0 05 e4 59 f0       	mov    0xf059e405,%al
f010c61a:	83 e0 ef             	and    $0xffffffef,%eax
f010c61d:	a2 05 e4 59 f0       	mov    %al,0xf059e405
f010c622:	a0 05 e4 59 f0       	mov    0xf059e405,%al
f010c627:	83 c8 60             	or     $0x60,%eax
f010c62a:	a2 05 e4 59 f0       	mov    %al,0xf059e405
f010c62f:	a0 05 e4 59 f0       	mov    0xf059e405,%al
f010c634:	83 c8 80             	or     $0xffffff80,%eax
f010c637:	a2 05 e4 59 f0       	mov    %al,0xf059e405
f010c63c:	b8 d4 d6 10 f0       	mov    $0xf010d6d4,%eax
f010c641:	c1 e8 10             	shr    $0x10,%eax
f010c644:	66 a3 06 e4 59 f0    	mov    %ax,0xf059e406
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010c64a:	b8 de d6 10 f0       	mov    $0xf010d6de,%eax
f010c64f:	66 a3 08 e4 59 f0    	mov    %ax,0xf059e408
f010c655:	66 c7 05 0a e4 59 f0 	movw   $0x8,0xf059e40a
f010c65c:	08 00 
f010c65e:	a0 0c e4 59 f0       	mov    0xf059e40c,%al
f010c663:	83 e0 e0             	and    $0xffffffe0,%eax
f010c666:	a2 0c e4 59 f0       	mov    %al,0xf059e40c
f010c66b:	a0 0c e4 59 f0       	mov    0xf059e40c,%al
f010c670:	83 e0 1f             	and    $0x1f,%eax
f010c673:	a2 0c e4 59 f0       	mov    %al,0xf059e40c
f010c678:	a0 0d e4 59 f0       	mov    0xf059e40d,%al
f010c67d:	83 e0 f0             	and    $0xfffffff0,%eax
f010c680:	83 c8 0e             	or     $0xe,%eax
f010c683:	a2 0d e4 59 f0       	mov    %al,0xf059e40d
f010c688:	a0 0d e4 59 f0       	mov    0xf059e40d,%al
f010c68d:	83 e0 ef             	and    $0xffffffef,%eax
f010c690:	a2 0d e4 59 f0       	mov    %al,0xf059e40d
f010c695:	a0 0d e4 59 f0       	mov    0xf059e40d,%al
f010c69a:	83 c8 60             	or     $0x60,%eax
f010c69d:	a2 0d e4 59 f0       	mov    %al,0xf059e40d
f010c6a2:	a0 0d e4 59 f0       	mov    0xf059e40d,%al
f010c6a7:	83 c8 80             	or     $0xffffff80,%eax
f010c6aa:	a2 0d e4 59 f0       	mov    %al,0xf059e40d
f010c6af:	b8 de d6 10 f0       	mov    $0xf010d6de,%eax
f010c6b4:	c1 e8 10             	shr    $0x10,%eax
f010c6b7:	66 a3 0e e4 59 f0    	mov    %ax,0xf059e40e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010c6bd:	b8 e8 d6 10 f0       	mov    $0xf010d6e8,%eax
f010c6c2:	66 a3 10 e4 59 f0    	mov    %ax,0xf059e410
f010c6c8:	66 c7 05 12 e4 59 f0 	movw   $0x8,0xf059e412
f010c6cf:	08 00 
f010c6d1:	a0 14 e4 59 f0       	mov    0xf059e414,%al
f010c6d6:	83 e0 e0             	and    $0xffffffe0,%eax
f010c6d9:	a2 14 e4 59 f0       	mov    %al,0xf059e414
f010c6de:	a0 14 e4 59 f0       	mov    0xf059e414,%al
f010c6e3:	83 e0 1f             	and    $0x1f,%eax
f010c6e6:	a2 14 e4 59 f0       	mov    %al,0xf059e414
f010c6eb:	a0 15 e4 59 f0       	mov    0xf059e415,%al
f010c6f0:	83 e0 f0             	and    $0xfffffff0,%eax
f010c6f3:	83 c8 0e             	or     $0xe,%eax
f010c6f6:	a2 15 e4 59 f0       	mov    %al,0xf059e415
f010c6fb:	a0 15 e4 59 f0       	mov    0xf059e415,%al
f010c700:	83 e0 ef             	and    $0xffffffef,%eax
f010c703:	a2 15 e4 59 f0       	mov    %al,0xf059e415
f010c708:	a0 15 e4 59 f0       	mov    0xf059e415,%al
f010c70d:	83 c8 60             	or     $0x60,%eax
f010c710:	a2 15 e4 59 f0       	mov    %al,0xf059e415
f010c715:	a0 15 e4 59 f0       	mov    0xf059e415,%al
f010c71a:	83 c8 80             	or     $0xffffff80,%eax
f010c71d:	a2 15 e4 59 f0       	mov    %al,0xf059e415
f010c722:	b8 e8 d6 10 f0       	mov    $0xf010d6e8,%eax
f010c727:	c1 e8 10             	shr    $0x10,%eax
f010c72a:	66 a3 16 e4 59 f0    	mov    %ax,0xf059e416
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010c730:	b8 f2 d6 10 f0       	mov    $0xf010d6f2,%eax
f010c735:	66 a3 18 e4 59 f0    	mov    %ax,0xf059e418
f010c73b:	66 c7 05 1a e4 59 f0 	movw   $0x8,0xf059e41a
f010c742:	08 00 
f010c744:	a0 1c e4 59 f0       	mov    0xf059e41c,%al
f010c749:	83 e0 e0             	and    $0xffffffe0,%eax
f010c74c:	a2 1c e4 59 f0       	mov    %al,0xf059e41c
f010c751:	a0 1c e4 59 f0       	mov    0xf059e41c,%al
f010c756:	83 e0 1f             	and    $0x1f,%eax
f010c759:	a2 1c e4 59 f0       	mov    %al,0xf059e41c
f010c75e:	a0 1d e4 59 f0       	mov    0xf059e41d,%al
f010c763:	83 e0 f0             	and    $0xfffffff0,%eax
f010c766:	83 c8 0e             	or     $0xe,%eax
f010c769:	a2 1d e4 59 f0       	mov    %al,0xf059e41d
f010c76e:	a0 1d e4 59 f0       	mov    0xf059e41d,%al
f010c773:	83 e0 ef             	and    $0xffffffef,%eax
f010c776:	a2 1d e4 59 f0       	mov    %al,0xf059e41d
f010c77b:	a0 1d e4 59 f0       	mov    0xf059e41d,%al
f010c780:	83 c8 60             	or     $0x60,%eax
f010c783:	a2 1d e4 59 f0       	mov    %al,0xf059e41d
f010c788:	a0 1d e4 59 f0       	mov    0xf059e41d,%al
f010c78d:	83 c8 80             	or     $0xffffff80,%eax
f010c790:	a2 1d e4 59 f0       	mov    %al,0xf059e41d
f010c795:	b8 f2 d6 10 f0       	mov    $0xf010d6f2,%eax
f010c79a:	c1 e8 10             	shr    $0x10,%eax
f010c79d:	66 a3 1e e4 59 f0    	mov    %ax,0xf059e41e
	//SETGATE(idt[T_DBLFLT ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010c7a3:	b8 f8 d6 10 f0       	mov    $0xf010d6f8,%eax
f010c7a8:	66 a3 30 e4 59 f0    	mov    %ax,0xf059e430
f010c7ae:	66 c7 05 32 e4 59 f0 	movw   $0x8,0xf059e432
f010c7b5:	08 00 
f010c7b7:	a0 34 e4 59 f0       	mov    0xf059e434,%al
f010c7bc:	83 e0 e0             	and    $0xffffffe0,%eax
f010c7bf:	a2 34 e4 59 f0       	mov    %al,0xf059e434
f010c7c4:	a0 34 e4 59 f0       	mov    0xf059e434,%al
f010c7c9:	83 e0 1f             	and    $0x1f,%eax
f010c7cc:	a2 34 e4 59 f0       	mov    %al,0xf059e434
f010c7d1:	a0 35 e4 59 f0       	mov    0xf059e435,%al
f010c7d6:	83 e0 f0             	and    $0xfffffff0,%eax
f010c7d9:	83 c8 0e             	or     $0xe,%eax
f010c7dc:	a2 35 e4 59 f0       	mov    %al,0xf059e435
f010c7e1:	a0 35 e4 59 f0       	mov    0xf059e435,%al
f010c7e6:	83 e0 ef             	and    $0xffffffef,%eax
f010c7e9:	a2 35 e4 59 f0       	mov    %al,0xf059e435
f010c7ee:	a0 35 e4 59 f0       	mov    0xf059e435,%al
f010c7f3:	83 c8 60             	or     $0x60,%eax
f010c7f6:	a2 35 e4 59 f0       	mov    %al,0xf059e435
f010c7fb:	a0 35 e4 59 f0       	mov    0xf059e435,%al
f010c800:	83 c8 80             	or     $0xffffff80,%eax
f010c803:	a2 35 e4 59 f0       	mov    %al,0xf059e435
f010c808:	b8 f8 d6 10 f0       	mov    $0xf010d6f8,%eax
f010c80d:	c1 e8 10             	shr    $0x10,%eax
f010c810:	66 a3 36 e4 59 f0    	mov    %ax,0xf059e436
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010c816:	b8 fc d6 10 f0       	mov    $0xf010d6fc,%eax
f010c81b:	66 a3 38 e4 59 f0    	mov    %ax,0xf059e438
f010c821:	66 c7 05 3a e4 59 f0 	movw   $0x8,0xf059e43a
f010c828:	08 00 
f010c82a:	a0 3c e4 59 f0       	mov    0xf059e43c,%al
f010c82f:	83 e0 e0             	and    $0xffffffe0,%eax
f010c832:	a2 3c e4 59 f0       	mov    %al,0xf059e43c
f010c837:	a0 3c e4 59 f0       	mov    0xf059e43c,%al
f010c83c:	83 e0 1f             	and    $0x1f,%eax
f010c83f:	a2 3c e4 59 f0       	mov    %al,0xf059e43c
f010c844:	a0 3d e4 59 f0       	mov    0xf059e43d,%al
f010c849:	83 e0 f0             	and    $0xfffffff0,%eax
f010c84c:	83 c8 0e             	or     $0xe,%eax
f010c84f:	a2 3d e4 59 f0       	mov    %al,0xf059e43d
f010c854:	a0 3d e4 59 f0       	mov    0xf059e43d,%al
f010c859:	83 e0 ef             	and    $0xffffffef,%eax
f010c85c:	a2 3d e4 59 f0       	mov    %al,0xf059e43d
f010c861:	a0 3d e4 59 f0       	mov    0xf059e43d,%al
f010c866:	83 c8 60             	or     $0x60,%eax
f010c869:	a2 3d e4 59 f0       	mov    %al,0xf059e43d
f010c86e:	a0 3d e4 59 f0       	mov    0xf059e43d,%al
f010c873:	83 c8 80             	or     $0xffffff80,%eax
f010c876:	a2 3d e4 59 f0       	mov    %al,0xf059e43d
f010c87b:	b8 fc d6 10 f0       	mov    $0xf010d6fc,%eax
f010c880:	c1 e8 10             	shr    $0x10,%eax
f010c883:	66 a3 3e e4 59 f0    	mov    %ax,0xf059e43e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010c889:	b8 00 d7 10 f0       	mov    $0xf010d700,%eax
f010c88e:	66 a3 40 e4 59 f0    	mov    %ax,0xf059e440
f010c894:	66 c7 05 42 e4 59 f0 	movw   $0x8,0xf059e442
f010c89b:	08 00 
f010c89d:	a0 44 e4 59 f0       	mov    0xf059e444,%al
f010c8a2:	83 e0 e0             	and    $0xffffffe0,%eax
f010c8a5:	a2 44 e4 59 f0       	mov    %al,0xf059e444
f010c8aa:	a0 44 e4 59 f0       	mov    0xf059e444,%al
f010c8af:	83 e0 1f             	and    $0x1f,%eax
f010c8b2:	a2 44 e4 59 f0       	mov    %al,0xf059e444
f010c8b7:	a0 45 e4 59 f0       	mov    0xf059e445,%al
f010c8bc:	83 e0 f0             	and    $0xfffffff0,%eax
f010c8bf:	83 c8 0e             	or     $0xe,%eax
f010c8c2:	a2 45 e4 59 f0       	mov    %al,0xf059e445
f010c8c7:	a0 45 e4 59 f0       	mov    0xf059e445,%al
f010c8cc:	83 e0 ef             	and    $0xffffffef,%eax
f010c8cf:	a2 45 e4 59 f0       	mov    %al,0xf059e445
f010c8d4:	a0 45 e4 59 f0       	mov    0xf059e445,%al
f010c8d9:	83 c8 60             	or     $0x60,%eax
f010c8dc:	a2 45 e4 59 f0       	mov    %al,0xf059e445
f010c8e1:	a0 45 e4 59 f0       	mov    0xf059e445,%al
f010c8e6:	83 c8 80             	or     $0xffffff80,%eax
f010c8e9:	a2 45 e4 59 f0       	mov    %al,0xf059e445
f010c8ee:	b8 00 d7 10 f0       	mov    $0xf010d700,%eax
f010c8f3:	c1 e8 10             	shr    $0x10,%eax
f010c8f6:	66 a3 46 e4 59 f0    	mov    %ax,0xf059e446
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010c8fc:	b8 04 d7 10 f0       	mov    $0xf010d704,%eax
f010c901:	66 a3 48 e4 59 f0    	mov    %ax,0xf059e448
f010c907:	66 c7 05 4a e4 59 f0 	movw   $0x8,0xf059e44a
f010c90e:	08 00 
f010c910:	a0 4c e4 59 f0       	mov    0xf059e44c,%al
f010c915:	83 e0 e0             	and    $0xffffffe0,%eax
f010c918:	a2 4c e4 59 f0       	mov    %al,0xf059e44c
f010c91d:	a0 4c e4 59 f0       	mov    0xf059e44c,%al
f010c922:	83 e0 1f             	and    $0x1f,%eax
f010c925:	a2 4c e4 59 f0       	mov    %al,0xf059e44c
f010c92a:	a0 4d e4 59 f0       	mov    0xf059e44d,%al
f010c92f:	83 e0 f0             	and    $0xfffffff0,%eax
f010c932:	83 c8 0e             	or     $0xe,%eax
f010c935:	a2 4d e4 59 f0       	mov    %al,0xf059e44d
f010c93a:	a0 4d e4 59 f0       	mov    0xf059e44d,%al
f010c93f:	83 e0 ef             	and    $0xffffffef,%eax
f010c942:	a2 4d e4 59 f0       	mov    %al,0xf059e44d
f010c947:	a0 4d e4 59 f0       	mov    0xf059e44d,%al
f010c94c:	83 c8 60             	or     $0x60,%eax
f010c94f:	a2 4d e4 59 f0       	mov    %al,0xf059e44d
f010c954:	a0 4d e4 59 f0       	mov    0xf059e44d,%al
f010c959:	83 c8 80             	or     $0xffffff80,%eax
f010c95c:	a2 4d e4 59 f0       	mov    %al,0xf059e44d
f010c961:	b8 04 d7 10 f0       	mov    $0xf010d704,%eax
f010c966:	c1 e8 10             	shr    $0x10,%eax
f010c969:	66 a3 4e e4 59 f0    	mov    %ax,0xf059e44e
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010c96f:	b8 08 d7 10 f0       	mov    $0xf010d708,%eax
f010c974:	66 a3 60 e4 59 f0    	mov    %ax,0xf059e460
f010c97a:	66 c7 05 62 e4 59 f0 	movw   $0x8,0xf059e462
f010c981:	08 00 
f010c983:	a0 64 e4 59 f0       	mov    0xf059e464,%al
f010c988:	83 e0 e0             	and    $0xffffffe0,%eax
f010c98b:	a2 64 e4 59 f0       	mov    %al,0xf059e464
f010c990:	a0 64 e4 59 f0       	mov    0xf059e464,%al
f010c995:	83 e0 1f             	and    $0x1f,%eax
f010c998:	a2 64 e4 59 f0       	mov    %al,0xf059e464
f010c99d:	a0 65 e4 59 f0       	mov    0xf059e465,%al
f010c9a2:	83 e0 f0             	and    $0xfffffff0,%eax
f010c9a5:	83 c8 0e             	or     $0xe,%eax
f010c9a8:	a2 65 e4 59 f0       	mov    %al,0xf059e465
f010c9ad:	a0 65 e4 59 f0       	mov    0xf059e465,%al
f010c9b2:	83 e0 ef             	and    $0xffffffef,%eax
f010c9b5:	a2 65 e4 59 f0       	mov    %al,0xf059e465
f010c9ba:	a0 65 e4 59 f0       	mov    0xf059e465,%al
f010c9bf:	83 c8 60             	or     $0x60,%eax
f010c9c2:	a2 65 e4 59 f0       	mov    %al,0xf059e465
f010c9c7:	a0 65 e4 59 f0       	mov    0xf059e465,%al
f010c9cc:	83 c8 80             	or     $0xffffff80,%eax
f010c9cf:	a2 65 e4 59 f0       	mov    %al,0xf059e465
f010c9d4:	b8 08 d7 10 f0       	mov    $0xf010d708,%eax
f010c9d9:	c1 e8 10             	shr    $0x10,%eax
f010c9dc:	66 a3 66 e4 59 f0    	mov    %ax,0xf059e466
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010c9e2:	b8 0e d7 10 f0       	mov    $0xf010d70e,%eax
f010c9e7:	66 a3 68 e4 59 f0    	mov    %ax,0xf059e468
f010c9ed:	66 c7 05 6a e4 59 f0 	movw   $0x8,0xf059e46a
f010c9f4:	08 00 
f010c9f6:	a0 6c e4 59 f0       	mov    0xf059e46c,%al
f010c9fb:	83 e0 e0             	and    $0xffffffe0,%eax
f010c9fe:	a2 6c e4 59 f0       	mov    %al,0xf059e46c
f010ca03:	a0 6c e4 59 f0       	mov    0xf059e46c,%al
f010ca08:	83 e0 1f             	and    $0x1f,%eax
f010ca0b:	a2 6c e4 59 f0       	mov    %al,0xf059e46c
f010ca10:	a0 6d e4 59 f0       	mov    0xf059e46d,%al
f010ca15:	83 e0 f0             	and    $0xfffffff0,%eax
f010ca18:	83 c8 0e             	or     $0xe,%eax
f010ca1b:	a2 6d e4 59 f0       	mov    %al,0xf059e46d
f010ca20:	a0 6d e4 59 f0       	mov    0xf059e46d,%al
f010ca25:	83 e0 ef             	and    $0xffffffef,%eax
f010ca28:	a2 6d e4 59 f0       	mov    %al,0xf059e46d
f010ca2d:	a0 6d e4 59 f0       	mov    0xf059e46d,%al
f010ca32:	83 c8 60             	or     $0x60,%eax
f010ca35:	a2 6d e4 59 f0       	mov    %al,0xf059e46d
f010ca3a:	a0 6d e4 59 f0       	mov    0xf059e46d,%al
f010ca3f:	83 c8 80             	or     $0xffffff80,%eax
f010ca42:	a2 6d e4 59 f0       	mov    %al,0xf059e46d
f010ca47:	b8 0e d7 10 f0       	mov    $0xf010d70e,%eax
f010ca4c:	c1 e8 10             	shr    $0x10,%eax
f010ca4f:	66 a3 6e e4 59 f0    	mov    %ax,0xf059e46e
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010ca55:	b8 12 d7 10 f0       	mov    $0xf010d712,%eax
f010ca5a:	66 a3 70 e4 59 f0    	mov    %ax,0xf059e470
f010ca60:	66 c7 05 72 e4 59 f0 	movw   $0x8,0xf059e472
f010ca67:	08 00 
f010ca69:	a0 74 e4 59 f0       	mov    0xf059e474,%al
f010ca6e:	83 e0 e0             	and    $0xffffffe0,%eax
f010ca71:	a2 74 e4 59 f0       	mov    %al,0xf059e474
f010ca76:	a0 74 e4 59 f0       	mov    0xf059e474,%al
f010ca7b:	83 e0 1f             	and    $0x1f,%eax
f010ca7e:	a2 74 e4 59 f0       	mov    %al,0xf059e474
f010ca83:	a0 75 e4 59 f0       	mov    0xf059e475,%al
f010ca88:	83 e0 f0             	and    $0xfffffff0,%eax
f010ca8b:	83 c8 0e             	or     $0xe,%eax
f010ca8e:	a2 75 e4 59 f0       	mov    %al,0xf059e475
f010ca93:	a0 75 e4 59 f0       	mov    0xf059e475,%al
f010ca98:	83 e0 ef             	and    $0xffffffef,%eax
f010ca9b:	a2 75 e4 59 f0       	mov    %al,0xf059e475
f010caa0:	a0 75 e4 59 f0       	mov    0xf059e475,%al
f010caa5:	83 c8 60             	or     $0x60,%eax
f010caa8:	a2 75 e4 59 f0       	mov    %al,0xf059e475
f010caad:	a0 75 e4 59 f0       	mov    0xf059e475,%al
f010cab2:	83 c8 80             	or     $0xffffff80,%eax
f010cab5:	a2 75 e4 59 f0       	mov    %al,0xf059e475
f010caba:	b8 12 d7 10 f0       	mov    $0xf010d712,%eax
f010cabf:	c1 e8 10             	shr    $0x10,%eax
f010cac2:	66 a3 76 e4 59 f0    	mov    %ax,0xf059e476
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010cac8:	b8 18 d7 10 f0       	mov    $0xf010d718,%eax
f010cacd:	66 a3 78 e4 59 f0    	mov    %ax,0xf059e478
f010cad3:	66 c7 05 7a e4 59 f0 	movw   $0x8,0xf059e47a
f010cada:	08 00 
f010cadc:	a0 7c e4 59 f0       	mov    0xf059e47c,%al
f010cae1:	83 e0 e0             	and    $0xffffffe0,%eax
f010cae4:	a2 7c e4 59 f0       	mov    %al,0xf059e47c
f010cae9:	a0 7c e4 59 f0       	mov    0xf059e47c,%al
f010caee:	83 e0 1f             	and    $0x1f,%eax
f010caf1:	a2 7c e4 59 f0       	mov    %al,0xf059e47c
f010caf6:	a0 7d e4 59 f0       	mov    0xf059e47d,%al
f010cafb:	83 e0 f0             	and    $0xfffffff0,%eax
f010cafe:	83 c8 0e             	or     $0xe,%eax
f010cb01:	a2 7d e4 59 f0       	mov    %al,0xf059e47d
f010cb06:	a0 7d e4 59 f0       	mov    0xf059e47d,%al
f010cb0b:	83 e0 ef             	and    $0xffffffef,%eax
f010cb0e:	a2 7d e4 59 f0       	mov    %al,0xf059e47d
f010cb13:	a0 7d e4 59 f0       	mov    0xf059e47d,%al
f010cb18:	83 c8 60             	or     $0x60,%eax
f010cb1b:	a2 7d e4 59 f0       	mov    %al,0xf059e47d
f010cb20:	a0 7d e4 59 f0       	mov    0xf059e47d,%al
f010cb25:	83 c8 80             	or     $0xffffff80,%eax
f010cb28:	a2 7d e4 59 f0       	mov    %al,0xf059e47d
f010cb2d:	b8 18 d7 10 f0       	mov    $0xf010d718,%eax
f010cb32:	c1 e8 10             	shr    $0x10,%eax
f010cb35:	66 a3 7e e4 59 f0    	mov    %ax,0xf059e47e

	//IRQs
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010cb3b:	b8 1e d7 10 f0       	mov    $0xf010d71e,%eax
f010cb40:	66 a3 f0 e4 59 f0    	mov    %ax,0xf059e4f0
f010cb46:	66 c7 05 f2 e4 59 f0 	movw   $0x8,0xf059e4f2
f010cb4d:	08 00 
f010cb4f:	a0 f4 e4 59 f0       	mov    0xf059e4f4,%al
f010cb54:	83 e0 e0             	and    $0xffffffe0,%eax
f010cb57:	a2 f4 e4 59 f0       	mov    %al,0xf059e4f4
f010cb5c:	a0 f4 e4 59 f0       	mov    0xf059e4f4,%al
f010cb61:	83 e0 1f             	and    $0x1f,%eax
f010cb64:	a2 f4 e4 59 f0       	mov    %al,0xf059e4f4
f010cb69:	a0 f5 e4 59 f0       	mov    0xf059e4f5,%al
f010cb6e:	83 e0 f0             	and    $0xfffffff0,%eax
f010cb71:	83 c8 0e             	or     $0xe,%eax
f010cb74:	a2 f5 e4 59 f0       	mov    %al,0xf059e4f5
f010cb79:	a0 f5 e4 59 f0       	mov    0xf059e4f5,%al
f010cb7e:	83 e0 ef             	and    $0xffffffef,%eax
f010cb81:	a2 f5 e4 59 f0       	mov    %al,0xf059e4f5
f010cb86:	a0 f5 e4 59 f0       	mov    0xf059e4f5,%al
f010cb8b:	83 c8 60             	or     $0x60,%eax
f010cb8e:	a2 f5 e4 59 f0       	mov    %al,0xf059e4f5
f010cb93:	a0 f5 e4 59 f0       	mov    0xf059e4f5,%al
f010cb98:	83 c8 80             	or     $0xffffff80,%eax
f010cb9b:	a2 f5 e4 59 f0       	mov    %al,0xf059e4f5
f010cba0:	b8 1e d7 10 f0       	mov    $0xf010d71e,%eax
f010cba5:	c1 e8 10             	shr    $0x10,%eax
f010cba8:	66 a3 f6 e4 59 f0    	mov    %ax,0xf059e4f6
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010cbae:	b8 24 d7 10 f0       	mov    $0xf010d724,%eax
f010cbb3:	66 a3 f8 e4 59 f0    	mov    %ax,0xf059e4f8
f010cbb9:	66 c7 05 fa e4 59 f0 	movw   $0x8,0xf059e4fa
f010cbc0:	08 00 
f010cbc2:	a0 fc e4 59 f0       	mov    0xf059e4fc,%al
f010cbc7:	83 e0 e0             	and    $0xffffffe0,%eax
f010cbca:	a2 fc e4 59 f0       	mov    %al,0xf059e4fc
f010cbcf:	a0 fc e4 59 f0       	mov    0xf059e4fc,%al
f010cbd4:	83 e0 1f             	and    $0x1f,%eax
f010cbd7:	a2 fc e4 59 f0       	mov    %al,0xf059e4fc
f010cbdc:	a0 fd e4 59 f0       	mov    0xf059e4fd,%al
f010cbe1:	83 e0 f0             	and    $0xfffffff0,%eax
f010cbe4:	83 c8 0e             	or     $0xe,%eax
f010cbe7:	a2 fd e4 59 f0       	mov    %al,0xf059e4fd
f010cbec:	a0 fd e4 59 f0       	mov    0xf059e4fd,%al
f010cbf1:	83 e0 ef             	and    $0xffffffef,%eax
f010cbf4:	a2 fd e4 59 f0       	mov    %al,0xf059e4fd
f010cbf9:	a0 fd e4 59 f0       	mov    0xf059e4fd,%al
f010cbfe:	83 c8 60             	or     $0x60,%eax
f010cc01:	a2 fd e4 59 f0       	mov    %al,0xf059e4fd
f010cc06:	a0 fd e4 59 f0       	mov    0xf059e4fd,%al
f010cc0b:	83 c8 80             	or     $0xffffff80,%eax
f010cc0e:	a2 fd e4 59 f0       	mov    %al,0xf059e4fd
f010cc13:	b8 24 d7 10 f0       	mov    $0xf010d724,%eax
f010cc18:	c1 e8 10             	shr    $0x10,%eax
f010cc1b:	66 a3 fe e4 59 f0    	mov    %ax,0xf059e4fe
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010cc21:	b8 2a d7 10 f0       	mov    $0xf010d72a,%eax
f010cc26:	66 a3 00 e5 59 f0    	mov    %ax,0xf059e500
f010cc2c:	66 c7 05 02 e5 59 f0 	movw   $0x8,0xf059e502
f010cc33:	08 00 
f010cc35:	a0 04 e5 59 f0       	mov    0xf059e504,%al
f010cc3a:	83 e0 e0             	and    $0xffffffe0,%eax
f010cc3d:	a2 04 e5 59 f0       	mov    %al,0xf059e504
f010cc42:	a0 04 e5 59 f0       	mov    0xf059e504,%al
f010cc47:	83 e0 1f             	and    $0x1f,%eax
f010cc4a:	a2 04 e5 59 f0       	mov    %al,0xf059e504
f010cc4f:	a0 05 e5 59 f0       	mov    0xf059e505,%al
f010cc54:	83 e0 f0             	and    $0xfffffff0,%eax
f010cc57:	83 c8 0e             	or     $0xe,%eax
f010cc5a:	a2 05 e5 59 f0       	mov    %al,0xf059e505
f010cc5f:	a0 05 e5 59 f0       	mov    0xf059e505,%al
f010cc64:	83 e0 ef             	and    $0xffffffef,%eax
f010cc67:	a2 05 e5 59 f0       	mov    %al,0xf059e505
f010cc6c:	a0 05 e5 59 f0       	mov    0xf059e505,%al
f010cc71:	83 c8 60             	or     $0x60,%eax
f010cc74:	a2 05 e5 59 f0       	mov    %al,0xf059e505
f010cc79:	a0 05 e5 59 f0       	mov    0xf059e505,%al
f010cc7e:	83 c8 80             	or     $0xffffff80,%eax
f010cc81:	a2 05 e5 59 f0       	mov    %al,0xf059e505
f010cc86:	b8 2a d7 10 f0       	mov    $0xf010d72a,%eax
f010cc8b:	c1 e8 10             	shr    $0x10,%eax
f010cc8e:	66 a3 06 e5 59 f0    	mov    %ax,0xf059e506
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010cc94:	b8 30 d7 10 f0       	mov    $0xf010d730,%eax
f010cc99:	66 a3 08 e5 59 f0    	mov    %ax,0xf059e508
f010cc9f:	66 c7 05 0a e5 59 f0 	movw   $0x8,0xf059e50a
f010cca6:	08 00 
f010cca8:	a0 0c e5 59 f0       	mov    0xf059e50c,%al
f010ccad:	83 e0 e0             	and    $0xffffffe0,%eax
f010ccb0:	a2 0c e5 59 f0       	mov    %al,0xf059e50c
f010ccb5:	a0 0c e5 59 f0       	mov    0xf059e50c,%al
f010ccba:	83 e0 1f             	and    $0x1f,%eax
f010ccbd:	a2 0c e5 59 f0       	mov    %al,0xf059e50c
f010ccc2:	a0 0d e5 59 f0       	mov    0xf059e50d,%al
f010ccc7:	83 e0 f0             	and    $0xfffffff0,%eax
f010ccca:	83 c8 0e             	or     $0xe,%eax
f010cccd:	a2 0d e5 59 f0       	mov    %al,0xf059e50d
f010ccd2:	a0 0d e5 59 f0       	mov    0xf059e50d,%al
f010ccd7:	83 e0 ef             	and    $0xffffffef,%eax
f010ccda:	a2 0d e5 59 f0       	mov    %al,0xf059e50d
f010ccdf:	a0 0d e5 59 f0       	mov    0xf059e50d,%al
f010cce4:	83 c8 60             	or     $0x60,%eax
f010cce7:	a2 0d e5 59 f0       	mov    %al,0xf059e50d
f010ccec:	a0 0d e5 59 f0       	mov    0xf059e50d,%al
f010ccf1:	83 c8 80             	or     $0xffffff80,%eax
f010ccf4:	a2 0d e5 59 f0       	mov    %al,0xf059e50d
f010ccf9:	b8 30 d7 10 f0       	mov    $0xf010d730,%eax
f010ccfe:	c1 e8 10             	shr    $0x10,%eax
f010cd01:	66 a3 0e e5 59 f0    	mov    %ax,0xf059e50e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010cd07:	b8 36 d7 10 f0       	mov    $0xf010d736,%eax
f010cd0c:	66 a3 10 e5 59 f0    	mov    %ax,0xf059e510
f010cd12:	66 c7 05 12 e5 59 f0 	movw   $0x8,0xf059e512
f010cd19:	08 00 
f010cd1b:	a0 14 e5 59 f0       	mov    0xf059e514,%al
f010cd20:	83 e0 e0             	and    $0xffffffe0,%eax
f010cd23:	a2 14 e5 59 f0       	mov    %al,0xf059e514
f010cd28:	a0 14 e5 59 f0       	mov    0xf059e514,%al
f010cd2d:	83 e0 1f             	and    $0x1f,%eax
f010cd30:	a2 14 e5 59 f0       	mov    %al,0xf059e514
f010cd35:	a0 15 e5 59 f0       	mov    0xf059e515,%al
f010cd3a:	83 e0 f0             	and    $0xfffffff0,%eax
f010cd3d:	83 c8 0e             	or     $0xe,%eax
f010cd40:	a2 15 e5 59 f0       	mov    %al,0xf059e515
f010cd45:	a0 15 e5 59 f0       	mov    0xf059e515,%al
f010cd4a:	83 e0 ef             	and    $0xffffffef,%eax
f010cd4d:	a2 15 e5 59 f0       	mov    %al,0xf059e515
f010cd52:	a0 15 e5 59 f0       	mov    0xf059e515,%al
f010cd57:	83 c8 60             	or     $0x60,%eax
f010cd5a:	a2 15 e5 59 f0       	mov    %al,0xf059e515
f010cd5f:	a0 15 e5 59 f0       	mov    0xf059e515,%al
f010cd64:	83 c8 80             	or     $0xffffff80,%eax
f010cd67:	a2 15 e5 59 f0       	mov    %al,0xf059e515
f010cd6c:	b8 36 d7 10 f0       	mov    $0xf010d736,%eax
f010cd71:	c1 e8 10             	shr    $0x10,%eax
f010cd74:	66 a3 16 e5 59 f0    	mov    %ax,0xf059e516
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010cd7a:	b8 3c d7 10 f0       	mov    $0xf010d73c,%eax
f010cd7f:	66 a3 18 e5 59 f0    	mov    %ax,0xf059e518
f010cd85:	66 c7 05 1a e5 59 f0 	movw   $0x8,0xf059e51a
f010cd8c:	08 00 
f010cd8e:	a0 1c e5 59 f0       	mov    0xf059e51c,%al
f010cd93:	83 e0 e0             	and    $0xffffffe0,%eax
f010cd96:	a2 1c e5 59 f0       	mov    %al,0xf059e51c
f010cd9b:	a0 1c e5 59 f0       	mov    0xf059e51c,%al
f010cda0:	83 e0 1f             	and    $0x1f,%eax
f010cda3:	a2 1c e5 59 f0       	mov    %al,0xf059e51c
f010cda8:	a0 1d e5 59 f0       	mov    0xf059e51d,%al
f010cdad:	83 e0 f0             	and    $0xfffffff0,%eax
f010cdb0:	83 c8 0e             	or     $0xe,%eax
f010cdb3:	a2 1d e5 59 f0       	mov    %al,0xf059e51d
f010cdb8:	a0 1d e5 59 f0       	mov    0xf059e51d,%al
f010cdbd:	83 e0 ef             	and    $0xffffffef,%eax
f010cdc0:	a2 1d e5 59 f0       	mov    %al,0xf059e51d
f010cdc5:	a0 1d e5 59 f0       	mov    0xf059e51d,%al
f010cdca:	83 c8 60             	or     $0x60,%eax
f010cdcd:	a2 1d e5 59 f0       	mov    %al,0xf059e51d
f010cdd2:	a0 1d e5 59 f0       	mov    0xf059e51d,%al
f010cdd7:	83 c8 80             	or     $0xffffff80,%eax
f010cdda:	a2 1d e5 59 f0       	mov    %al,0xf059e51d
f010cddf:	b8 3c d7 10 f0       	mov    $0xf010d73c,%eax
f010cde4:	c1 e8 10             	shr    $0x10,%eax
f010cde7:	66 a3 1e e5 59 f0    	mov    %ax,0xf059e51e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010cded:	b8 42 d7 10 f0       	mov    $0xf010d742,%eax
f010cdf2:	66 a3 20 e5 59 f0    	mov    %ax,0xf059e520
f010cdf8:	66 c7 05 22 e5 59 f0 	movw   $0x8,0xf059e522
f010cdff:	08 00 
f010ce01:	a0 24 e5 59 f0       	mov    0xf059e524,%al
f010ce06:	83 e0 e0             	and    $0xffffffe0,%eax
f010ce09:	a2 24 e5 59 f0       	mov    %al,0xf059e524
f010ce0e:	a0 24 e5 59 f0       	mov    0xf059e524,%al
f010ce13:	83 e0 1f             	and    $0x1f,%eax
f010ce16:	a2 24 e5 59 f0       	mov    %al,0xf059e524
f010ce1b:	a0 25 e5 59 f0       	mov    0xf059e525,%al
f010ce20:	83 e0 f0             	and    $0xfffffff0,%eax
f010ce23:	83 c8 0e             	or     $0xe,%eax
f010ce26:	a2 25 e5 59 f0       	mov    %al,0xf059e525
f010ce2b:	a0 25 e5 59 f0       	mov    0xf059e525,%al
f010ce30:	83 e0 ef             	and    $0xffffffef,%eax
f010ce33:	a2 25 e5 59 f0       	mov    %al,0xf059e525
f010ce38:	a0 25 e5 59 f0       	mov    0xf059e525,%al
f010ce3d:	83 c8 60             	or     $0x60,%eax
f010ce40:	a2 25 e5 59 f0       	mov    %al,0xf059e525
f010ce45:	a0 25 e5 59 f0       	mov    0xf059e525,%al
f010ce4a:	83 c8 80             	or     $0xffffff80,%eax
f010ce4d:	a2 25 e5 59 f0       	mov    %al,0xf059e525
f010ce52:	b8 42 d7 10 f0       	mov    $0xf010d742,%eax
f010ce57:	c1 e8 10             	shr    $0x10,%eax
f010ce5a:	66 a3 26 e5 59 f0    	mov    %ax,0xf059e526
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010ce60:	b8 48 d7 10 f0       	mov    $0xf010d748,%eax
f010ce65:	66 a3 28 e5 59 f0    	mov    %ax,0xf059e528
f010ce6b:	66 c7 05 2a e5 59 f0 	movw   $0x8,0xf059e52a
f010ce72:	08 00 
f010ce74:	a0 2c e5 59 f0       	mov    0xf059e52c,%al
f010ce79:	83 e0 e0             	and    $0xffffffe0,%eax
f010ce7c:	a2 2c e5 59 f0       	mov    %al,0xf059e52c
f010ce81:	a0 2c e5 59 f0       	mov    0xf059e52c,%al
f010ce86:	83 e0 1f             	and    $0x1f,%eax
f010ce89:	a2 2c e5 59 f0       	mov    %al,0xf059e52c
f010ce8e:	a0 2d e5 59 f0       	mov    0xf059e52d,%al
f010ce93:	83 e0 f0             	and    $0xfffffff0,%eax
f010ce96:	83 c8 0e             	or     $0xe,%eax
f010ce99:	a2 2d e5 59 f0       	mov    %al,0xf059e52d
f010ce9e:	a0 2d e5 59 f0       	mov    0xf059e52d,%al
f010cea3:	83 e0 ef             	and    $0xffffffef,%eax
f010cea6:	a2 2d e5 59 f0       	mov    %al,0xf059e52d
f010ceab:	a0 2d e5 59 f0       	mov    0xf059e52d,%al
f010ceb0:	83 c8 60             	or     $0x60,%eax
f010ceb3:	a2 2d e5 59 f0       	mov    %al,0xf059e52d
f010ceb8:	a0 2d e5 59 f0       	mov    0xf059e52d,%al
f010cebd:	83 c8 80             	or     $0xffffff80,%eax
f010cec0:	a2 2d e5 59 f0       	mov    %al,0xf059e52d
f010cec5:	b8 48 d7 10 f0       	mov    $0xf010d748,%eax
f010ceca:	c1 e8 10             	shr    $0x10,%eax
f010cecd:	66 a3 2e e5 59 f0    	mov    %ax,0xf059e52e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010ced3:	b8 4e d7 10 f0       	mov    $0xf010d74e,%eax
f010ced8:	66 a3 30 e5 59 f0    	mov    %ax,0xf059e530
f010cede:	66 c7 05 32 e5 59 f0 	movw   $0x8,0xf059e532
f010cee5:	08 00 
f010cee7:	a0 34 e5 59 f0       	mov    0xf059e534,%al
f010ceec:	83 e0 e0             	and    $0xffffffe0,%eax
f010ceef:	a2 34 e5 59 f0       	mov    %al,0xf059e534
f010cef4:	a0 34 e5 59 f0       	mov    0xf059e534,%al
f010cef9:	83 e0 1f             	and    $0x1f,%eax
f010cefc:	a2 34 e5 59 f0       	mov    %al,0xf059e534
f010cf01:	a0 35 e5 59 f0       	mov    0xf059e535,%al
f010cf06:	83 e0 f0             	and    $0xfffffff0,%eax
f010cf09:	83 c8 0e             	or     $0xe,%eax
f010cf0c:	a2 35 e5 59 f0       	mov    %al,0xf059e535
f010cf11:	a0 35 e5 59 f0       	mov    0xf059e535,%al
f010cf16:	83 e0 ef             	and    $0xffffffef,%eax
f010cf19:	a2 35 e5 59 f0       	mov    %al,0xf059e535
f010cf1e:	a0 35 e5 59 f0       	mov    0xf059e535,%al
f010cf23:	83 c8 60             	or     $0x60,%eax
f010cf26:	a2 35 e5 59 f0       	mov    %al,0xf059e535
f010cf2b:	a0 35 e5 59 f0       	mov    0xf059e535,%al
f010cf30:	83 c8 80             	or     $0xffffff80,%eax
f010cf33:	a2 35 e5 59 f0       	mov    %al,0xf059e535
f010cf38:	b8 4e d7 10 f0       	mov    $0xf010d74e,%eax
f010cf3d:	c1 e8 10             	shr    $0x10,%eax
f010cf40:	66 a3 36 e5 59 f0    	mov    %ax,0xf059e536
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010cf46:	b8 54 d7 10 f0       	mov    $0xf010d754,%eax
f010cf4b:	66 a3 38 e5 59 f0    	mov    %ax,0xf059e538
f010cf51:	66 c7 05 3a e5 59 f0 	movw   $0x8,0xf059e53a
f010cf58:	08 00 
f010cf5a:	a0 3c e5 59 f0       	mov    0xf059e53c,%al
f010cf5f:	83 e0 e0             	and    $0xffffffe0,%eax
f010cf62:	a2 3c e5 59 f0       	mov    %al,0xf059e53c
f010cf67:	a0 3c e5 59 f0       	mov    0xf059e53c,%al
f010cf6c:	83 e0 1f             	and    $0x1f,%eax
f010cf6f:	a2 3c e5 59 f0       	mov    %al,0xf059e53c
f010cf74:	a0 3d e5 59 f0       	mov    0xf059e53d,%al
f010cf79:	83 e0 f0             	and    $0xfffffff0,%eax
f010cf7c:	83 c8 0e             	or     $0xe,%eax
f010cf7f:	a2 3d e5 59 f0       	mov    %al,0xf059e53d
f010cf84:	a0 3d e5 59 f0       	mov    0xf059e53d,%al
f010cf89:	83 e0 ef             	and    $0xffffffef,%eax
f010cf8c:	a2 3d e5 59 f0       	mov    %al,0xf059e53d
f010cf91:	a0 3d e5 59 f0       	mov    0xf059e53d,%al
f010cf96:	83 c8 60             	or     $0x60,%eax
f010cf99:	a2 3d e5 59 f0       	mov    %al,0xf059e53d
f010cf9e:	a0 3d e5 59 f0       	mov    0xf059e53d,%al
f010cfa3:	83 c8 80             	or     $0xffffff80,%eax
f010cfa6:	a2 3d e5 59 f0       	mov    %al,0xf059e53d
f010cfab:	b8 54 d7 10 f0       	mov    $0xf010d754,%eax
f010cfb0:	c1 e8 10             	shr    $0x10,%eax
f010cfb3:	66 a3 3e e5 59 f0    	mov    %ax,0xf059e53e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010cfb9:	b8 5a d7 10 f0       	mov    $0xf010d75a,%eax
f010cfbe:	66 a3 40 e5 59 f0    	mov    %ax,0xf059e540
f010cfc4:	66 c7 05 42 e5 59 f0 	movw   $0x8,0xf059e542
f010cfcb:	08 00 
f010cfcd:	a0 44 e5 59 f0       	mov    0xf059e544,%al
f010cfd2:	83 e0 e0             	and    $0xffffffe0,%eax
f010cfd5:	a2 44 e5 59 f0       	mov    %al,0xf059e544
f010cfda:	a0 44 e5 59 f0       	mov    0xf059e544,%al
f010cfdf:	83 e0 1f             	and    $0x1f,%eax
f010cfe2:	a2 44 e5 59 f0       	mov    %al,0xf059e544
f010cfe7:	a0 45 e5 59 f0       	mov    0xf059e545,%al
f010cfec:	83 e0 f0             	and    $0xfffffff0,%eax
f010cfef:	83 c8 0e             	or     $0xe,%eax
f010cff2:	a2 45 e5 59 f0       	mov    %al,0xf059e545
f010cff7:	a0 45 e5 59 f0       	mov    0xf059e545,%al
f010cffc:	83 e0 ef             	and    $0xffffffef,%eax
f010cfff:	a2 45 e5 59 f0       	mov    %al,0xf059e545
f010d004:	a0 45 e5 59 f0       	mov    0xf059e545,%al
f010d009:	83 c8 60             	or     $0x60,%eax
f010d00c:	a2 45 e5 59 f0       	mov    %al,0xf059e545
f010d011:	a0 45 e5 59 f0       	mov    0xf059e545,%al
f010d016:	83 c8 80             	or     $0xffffff80,%eax
f010d019:	a2 45 e5 59 f0       	mov    %al,0xf059e545
f010d01e:	b8 5a d7 10 f0       	mov    $0xf010d75a,%eax
f010d023:	c1 e8 10             	shr    $0x10,%eax
f010d026:	66 a3 46 e5 59 f0    	mov    %ax,0xf059e546
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010d02c:	b8 60 d7 10 f0       	mov    $0xf010d760,%eax
f010d031:	66 a3 48 e5 59 f0    	mov    %ax,0xf059e548
f010d037:	66 c7 05 4a e5 59 f0 	movw   $0x8,0xf059e54a
f010d03e:	08 00 
f010d040:	a0 4c e5 59 f0       	mov    0xf059e54c,%al
f010d045:	83 e0 e0             	and    $0xffffffe0,%eax
f010d048:	a2 4c e5 59 f0       	mov    %al,0xf059e54c
f010d04d:	a0 4c e5 59 f0       	mov    0xf059e54c,%al
f010d052:	83 e0 1f             	and    $0x1f,%eax
f010d055:	a2 4c e5 59 f0       	mov    %al,0xf059e54c
f010d05a:	a0 4d e5 59 f0       	mov    0xf059e54d,%al
f010d05f:	83 e0 f0             	and    $0xfffffff0,%eax
f010d062:	83 c8 0e             	or     $0xe,%eax
f010d065:	a2 4d e5 59 f0       	mov    %al,0xf059e54d
f010d06a:	a0 4d e5 59 f0       	mov    0xf059e54d,%al
f010d06f:	83 e0 ef             	and    $0xffffffef,%eax
f010d072:	a2 4d e5 59 f0       	mov    %al,0xf059e54d
f010d077:	a0 4d e5 59 f0       	mov    0xf059e54d,%al
f010d07c:	83 c8 60             	or     $0x60,%eax
f010d07f:	a2 4d e5 59 f0       	mov    %al,0xf059e54d
f010d084:	a0 4d e5 59 f0       	mov    0xf059e54d,%al
f010d089:	83 c8 80             	or     $0xffffff80,%eax
f010d08c:	a2 4d e5 59 f0       	mov    %al,0xf059e54d
f010d091:	b8 60 d7 10 f0       	mov    $0xf010d760,%eax
f010d096:	c1 e8 10             	shr    $0x10,%eax
f010d099:	66 a3 4e e5 59 f0    	mov    %ax,0xf059e54e
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010d09f:	b8 66 d7 10 f0       	mov    $0xf010d766,%eax
f010d0a4:	66 a3 50 e5 59 f0    	mov    %ax,0xf059e550
f010d0aa:	66 c7 05 52 e5 59 f0 	movw   $0x8,0xf059e552
f010d0b1:	08 00 
f010d0b3:	a0 54 e5 59 f0       	mov    0xf059e554,%al
f010d0b8:	83 e0 e0             	and    $0xffffffe0,%eax
f010d0bb:	a2 54 e5 59 f0       	mov    %al,0xf059e554
f010d0c0:	a0 54 e5 59 f0       	mov    0xf059e554,%al
f010d0c5:	83 e0 1f             	and    $0x1f,%eax
f010d0c8:	a2 54 e5 59 f0       	mov    %al,0xf059e554
f010d0cd:	a0 55 e5 59 f0       	mov    0xf059e555,%al
f010d0d2:	83 e0 f0             	and    $0xfffffff0,%eax
f010d0d5:	83 c8 0e             	or     $0xe,%eax
f010d0d8:	a2 55 e5 59 f0       	mov    %al,0xf059e555
f010d0dd:	a0 55 e5 59 f0       	mov    0xf059e555,%al
f010d0e2:	83 e0 ef             	and    $0xffffffef,%eax
f010d0e5:	a2 55 e5 59 f0       	mov    %al,0xf059e555
f010d0ea:	a0 55 e5 59 f0       	mov    0xf059e555,%al
f010d0ef:	83 c8 60             	or     $0x60,%eax
f010d0f2:	a2 55 e5 59 f0       	mov    %al,0xf059e555
f010d0f7:	a0 55 e5 59 f0       	mov    0xf059e555,%al
f010d0fc:	83 c8 80             	or     $0xffffff80,%eax
f010d0ff:	a2 55 e5 59 f0       	mov    %al,0xf059e555
f010d104:	b8 66 d7 10 f0       	mov    $0xf010d766,%eax
f010d109:	c1 e8 10             	shr    $0x10,%eax
f010d10c:	66 a3 56 e5 59 f0    	mov    %ax,0xf059e556
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010d112:	b8 6c d7 10 f0       	mov    $0xf010d76c,%eax
f010d117:	66 a3 58 e5 59 f0    	mov    %ax,0xf059e558
f010d11d:	66 c7 05 5a e5 59 f0 	movw   $0x8,0xf059e55a
f010d124:	08 00 
f010d126:	a0 5c e5 59 f0       	mov    0xf059e55c,%al
f010d12b:	83 e0 e0             	and    $0xffffffe0,%eax
f010d12e:	a2 5c e5 59 f0       	mov    %al,0xf059e55c
f010d133:	a0 5c e5 59 f0       	mov    0xf059e55c,%al
f010d138:	83 e0 1f             	and    $0x1f,%eax
f010d13b:	a2 5c e5 59 f0       	mov    %al,0xf059e55c
f010d140:	a0 5d e5 59 f0       	mov    0xf059e55d,%al
f010d145:	83 e0 f0             	and    $0xfffffff0,%eax
f010d148:	83 c8 0e             	or     $0xe,%eax
f010d14b:	a2 5d e5 59 f0       	mov    %al,0xf059e55d
f010d150:	a0 5d e5 59 f0       	mov    0xf059e55d,%al
f010d155:	83 e0 ef             	and    $0xffffffef,%eax
f010d158:	a2 5d e5 59 f0       	mov    %al,0xf059e55d
f010d15d:	a0 5d e5 59 f0       	mov    0xf059e55d,%al
f010d162:	83 c8 60             	or     $0x60,%eax
f010d165:	a2 5d e5 59 f0       	mov    %al,0xf059e55d
f010d16a:	a0 5d e5 59 f0       	mov    0xf059e55d,%al
f010d16f:	83 c8 80             	or     $0xffffff80,%eax
f010d172:	a2 5d e5 59 f0       	mov    %al,0xf059e55d
f010d177:	b8 6c d7 10 f0       	mov    $0xf010d76c,%eax
f010d17c:	c1 e8 10             	shr    $0x10,%eax
f010d17f:	66 a3 5e e5 59 f0    	mov    %ax,0xf059e55e
f010d185:	c7 45 fc e0 e3 59 f0 	movl   $0xf059e3e0,-0x4(%ebp)
f010d18c:	c7 45 f8 00 08 00 00 	movl   $0x800,-0x8(%ebp)
//load IDT register
static __inline void lidt(struct Gatedesc *p, int size)
{
  volatile unsigned short pd[3];

  pd[0] = size-1;
f010d193:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d196:	48                   	dec    %eax
f010d197:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
  pd[1] = (uint32)p;
f010d19b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d19e:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
  pd[2] = (uint32)p >> 16;
f010d1a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d1a5:	c1 e8 10             	shr    $0x10,%eax
f010d1a8:	66 89 45 f6          	mov    %ax,-0xa(%ebp)

  asm volatile("lidt (%0)" : : "r" (pd));
f010d1ac:	8d 45 f2             	lea    -0xe(%ebp),%eax
f010d1af:	0f 01 18             	lidtl  (%eax)

	// Load the IDT
	//asm volatile("lidt idt_pd");
	lidt(idt, sizeof(idt));

}
f010d1b2:	90                   	nop
f010d1b3:	c9                   	leave  
f010d1b4:	c3                   	ret    

f010d1b5 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010d1b5:	55                   	push   %ebp
f010d1b6:	89 e5                	mov    %esp,%ebp
f010d1b8:	53                   	push   %ebx
f010d1b9:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010d1bc:	83 ec 08             	sub    $0x8,%esp
f010d1bf:	ff 75 08             	pushl  0x8(%ebp)
f010d1c2:	68 be 86 12 f0       	push   $0xf01286be
f010d1c7:	e8 a0 3d ff ff       	call   f0100f6c <cprintf>
f010d1cc:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010d1cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1d2:	83 ec 0c             	sub    $0xc,%esp
f010d1d5:	50                   	push   %eax
f010d1d6:	e8 fd 00 00 00       	call   f010d2d8 <print_regs>
f010d1db:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010d1de:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1e1:	8b 40 20             	mov    0x20(%eax),%eax
f010d1e4:	0f b7 c0             	movzwl %ax,%eax
f010d1e7:	83 ec 08             	sub    $0x8,%esp
f010d1ea:	50                   	push   %eax
f010d1eb:	68 d0 86 12 f0       	push   $0xf01286d0
f010d1f0:	e8 77 3d ff ff       	call   f0100f6c <cprintf>
f010d1f5:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010d1f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1fb:	8b 40 24             	mov    0x24(%eax),%eax
f010d1fe:	0f b7 c0             	movzwl %ax,%eax
f010d201:	83 ec 08             	sub    $0x8,%esp
f010d204:	50                   	push   %eax
f010d205:	68 e3 86 12 f0       	push   $0xf01286e3
f010d20a:	e8 5d 3d ff ff       	call   f0100f6c <cprintf>
f010d20f:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010d212:	8b 45 08             	mov    0x8(%ebp),%eax
f010d215:	8b 58 28             	mov    0x28(%eax),%ebx
f010d218:	8b 45 08             	mov    0x8(%ebp),%eax
f010d21b:	8b 40 28             	mov    0x28(%eax),%eax
f010d21e:	83 ec 0c             	sub    $0xc,%esp
f010d221:	50                   	push   %eax
f010d222:	e8 28 ee ff ff       	call   f010c04f <trapname>
f010d227:	83 c4 10             	add    $0x10,%esp
f010d22a:	89 c2                	mov    %eax,%edx
f010d22c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d22f:	8b 40 28             	mov    0x28(%eax),%eax
f010d232:	53                   	push   %ebx
f010d233:	52                   	push   %edx
f010d234:	50                   	push   %eax
f010d235:	68 f6 86 12 f0       	push   $0xf01286f6
f010d23a:	e8 2d 3d ff ff       	call   f0100f6c <cprintf>
f010d23f:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010d242:	8b 45 08             	mov    0x8(%ebp),%eax
f010d245:	8b 40 2c             	mov    0x2c(%eax),%eax
f010d248:	83 ec 08             	sub    $0x8,%esp
f010d24b:	50                   	push   %eax
f010d24c:	68 0d 87 12 f0       	push   $0xf012870d
f010d251:	e8 16 3d ff ff       	call   f0100f6c <cprintf>
f010d256:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010d259:	8b 45 08             	mov    0x8(%ebp),%eax
f010d25c:	8b 40 30             	mov    0x30(%eax),%eax
f010d25f:	83 ec 08             	sub    $0x8,%esp
f010d262:	50                   	push   %eax
f010d263:	68 1c 87 12 f0       	push   $0xf012871c
f010d268:	e8 ff 3c ff ff       	call   f0100f6c <cprintf>
f010d26d:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010d270:	8b 45 08             	mov    0x8(%ebp),%eax
f010d273:	8b 40 34             	mov    0x34(%eax),%eax
f010d276:	0f b7 c0             	movzwl %ax,%eax
f010d279:	83 ec 08             	sub    $0x8,%esp
f010d27c:	50                   	push   %eax
f010d27d:	68 2b 87 12 f0       	push   $0xf012872b
f010d282:	e8 e5 3c ff ff       	call   f0100f6c <cprintf>
f010d287:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010d28a:	8b 45 08             	mov    0x8(%ebp),%eax
f010d28d:	8b 40 38             	mov    0x38(%eax),%eax
f010d290:	83 ec 08             	sub    $0x8,%esp
f010d293:	50                   	push   %eax
f010d294:	68 3e 87 12 f0       	push   $0xf012873e
f010d299:	e8 ce 3c ff ff       	call   f0100f6c <cprintf>
f010d29e:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010d2a1:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2a4:	8b 40 3c             	mov    0x3c(%eax),%eax
f010d2a7:	83 ec 08             	sub    $0x8,%esp
f010d2aa:	50                   	push   %eax
f010d2ab:	68 4d 87 12 f0       	push   $0xf012874d
f010d2b0:	e8 b7 3c ff ff       	call   f0100f6c <cprintf>
f010d2b5:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010d2b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2bb:	8b 40 40             	mov    0x40(%eax),%eax
f010d2be:	0f b7 c0             	movzwl %ax,%eax
f010d2c1:	83 ec 08             	sub    $0x8,%esp
f010d2c4:	50                   	push   %eax
f010d2c5:	68 5c 87 12 f0       	push   $0xf012875c
f010d2ca:	e8 9d 3c ff ff       	call   f0100f6c <cprintf>
f010d2cf:	83 c4 10             	add    $0x10,%esp
}
f010d2d2:	90                   	nop
f010d2d3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010d2d6:	c9                   	leave  
f010d2d7:	c3                   	ret    

f010d2d8 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010d2d8:	55                   	push   %ebp
f010d2d9:	89 e5                	mov    %esp,%ebp
f010d2db:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010d2de:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2e1:	8b 00                	mov    (%eax),%eax
f010d2e3:	83 ec 08             	sub    $0x8,%esp
f010d2e6:	50                   	push   %eax
f010d2e7:	68 6f 87 12 f0       	push   $0xf012876f
f010d2ec:	e8 7b 3c ff ff       	call   f0100f6c <cprintf>
f010d2f1:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010d2f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2f7:	8b 40 04             	mov    0x4(%eax),%eax
f010d2fa:	83 ec 08             	sub    $0x8,%esp
f010d2fd:	50                   	push   %eax
f010d2fe:	68 7e 87 12 f0       	push   $0xf012877e
f010d303:	e8 64 3c ff ff       	call   f0100f6c <cprintf>
f010d308:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010d30b:	8b 45 08             	mov    0x8(%ebp),%eax
f010d30e:	8b 40 08             	mov    0x8(%eax),%eax
f010d311:	83 ec 08             	sub    $0x8,%esp
f010d314:	50                   	push   %eax
f010d315:	68 8d 87 12 f0       	push   $0xf012878d
f010d31a:	e8 4d 3c ff ff       	call   f0100f6c <cprintf>
f010d31f:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010d322:	8b 45 08             	mov    0x8(%ebp),%eax
f010d325:	8b 40 0c             	mov    0xc(%eax),%eax
f010d328:	83 ec 08             	sub    $0x8,%esp
f010d32b:	50                   	push   %eax
f010d32c:	68 9c 87 12 f0       	push   $0xf012879c
f010d331:	e8 36 3c ff ff       	call   f0100f6c <cprintf>
f010d336:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010d339:	8b 45 08             	mov    0x8(%ebp),%eax
f010d33c:	8b 40 10             	mov    0x10(%eax),%eax
f010d33f:	83 ec 08             	sub    $0x8,%esp
f010d342:	50                   	push   %eax
f010d343:	68 ab 87 12 f0       	push   $0xf01287ab
f010d348:	e8 1f 3c ff ff       	call   f0100f6c <cprintf>
f010d34d:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010d350:	8b 45 08             	mov    0x8(%ebp),%eax
f010d353:	8b 40 14             	mov    0x14(%eax),%eax
f010d356:	83 ec 08             	sub    $0x8,%esp
f010d359:	50                   	push   %eax
f010d35a:	68 ba 87 12 f0       	push   $0xf01287ba
f010d35f:	e8 08 3c ff ff       	call   f0100f6c <cprintf>
f010d364:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010d367:	8b 45 08             	mov    0x8(%ebp),%eax
f010d36a:	8b 40 18             	mov    0x18(%eax),%eax
f010d36d:	83 ec 08             	sub    $0x8,%esp
f010d370:	50                   	push   %eax
f010d371:	68 c9 87 12 f0       	push   $0xf01287c9
f010d376:	e8 f1 3b ff ff       	call   f0100f6c <cprintf>
f010d37b:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010d37e:	8b 45 08             	mov    0x8(%ebp),%eax
f010d381:	8b 40 1c             	mov    0x1c(%eax),%eax
f010d384:	83 ec 08             	sub    $0x8,%esp
f010d387:	50                   	push   %eax
f010d388:	68 d8 87 12 f0       	push   $0xf01287d8
f010d38d:	e8 da 3b ff ff       	call   f0100f6c <cprintf>
f010d392:	83 c4 10             	add    $0x10,%esp
}
f010d395:	90                   	nop
f010d396:	c9                   	leave  
f010d397:	c3                   	ret    

f010d398 <irq_install_handler>:


void *irq_handlers[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ;
void irq_install_handler(int irq, void (*handler)(struct Trapframe *tf))
{
f010d398:	55                   	push   %ebp
f010d399:	89 e5                	mov    %esp,%ebp
	irq_handlers[irq] = handler;
f010d39b:	8b 45 08             	mov    0x8(%ebp),%eax
f010d39e:	8b 55 0c             	mov    0xc(%ebp),%edx
f010d3a1:	89 14 85 e0 eb 59 f0 	mov    %edx,-0xfa61420(,%eax,4)
}
f010d3a8:	90                   	nop
f010d3a9:	5d                   	pop    %ebp
f010d3aa:	c3                   	ret    

f010d3ab <irq_uninstall_handler>:
void irq_uninstall_handler(int irq)
{
f010d3ab:	55                   	push   %ebp
f010d3ac:	89 e5                	mov    %esp,%ebp
	irq_handlers[irq] = NULL;
f010d3ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010d3b1:	c7 04 85 e0 eb 59 f0 	movl   $0x0,-0xfa61420(,%eax,4)
f010d3b8:	00 00 00 00 
}
f010d3bc:	90                   	nop
f010d3bd:	5d                   	pop    %ebp
f010d3be:	c3                   	ret    

f010d3bf <irq_dispatch>:
void irq_dispatch(struct Trapframe *tf)
{
f010d3bf:	55                   	push   %ebp
f010d3c0:	89 e5                	mov    %esp,%ebp
f010d3c2:	83 ec 18             	sub    $0x18,%esp
	void (*handler)(struct Trapframe *tf);
	int IRQNum = tf->tf_trapno - IRQ_OFFSET;
f010d3c5:	8b 45 08             	mov    0x8(%ebp),%eax
f010d3c8:	8b 40 28             	mov    0x28(%eax),%eax
f010d3cb:	83 e8 20             	sub    $0x20,%eax
f010d3ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
	handler = irq_handlers[IRQNum] ;
f010d3d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d3d4:	8b 04 85 e0 eb 59 f0 	mov    -0xfa61420(,%eax,4),%eax
f010d3db:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (handler)
f010d3de:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010d3e2:	74 0e                	je     f010d3f2 <irq_dispatch+0x33>
	{
		handler(tf);
f010d3e4:	83 ec 0c             	sub    $0xc,%esp
f010d3e7:	ff 75 08             	pushl  0x8(%ebp)
f010d3ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d3ed:	ff d0                	call   *%eax
f010d3ef:	83 c4 10             	add    $0x10,%esp
	}

	//Send End Of Interrupt CMD to PIC
	pic_sendEOI(IRQNum);
f010d3f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d3f5:	0f b6 c0             	movzbl %al,%eax
f010d3f8:	83 ec 0c             	sub    $0xc,%esp
f010d3fb:	50                   	push   %eax
f010d3fc:	e8 c3 9c ff ff       	call   f01070c4 <pic_sendEOI>
f010d401:	83 c4 10             	add    $0x10,%esp
}
f010d404:	90                   	nop
f010d405:	c9                   	leave  
f010d406:	c3                   	ret    

f010d407 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010d407:	55                   	push   %ebp
f010d408:	89 e5                	mov    %esp,%ebp
f010d40a:	57                   	push   %edi
f010d40b:	56                   	push   %esi
f010d40c:	53                   	push   %ebx
f010d40d:	83 ec 1c             	sub    $0x1c,%esp
	if(tf->tf_trapno == T_PGFLT)
f010d410:	8b 45 08             	mov    0x8(%ebp),%eax
f010d413:	8b 40 28             	mov    0x28(%eax),%eax
f010d416:	83 f8 0e             	cmp    $0xe,%eax
f010d419:	75 51                	jne    f010d46c <trap_dispatch+0x65>
	{
		//2016: Bypass the faulted instruction [used for some tests in which we need to resume the execution after an intended page fault]
		if (bypassInstrLength != 0)
f010d41b:	a0 20 ec 59 f0       	mov    0xf059ec20,%al
f010d420:	84 c0                	test   %al,%al
f010d422:	74 1f                	je     f010d443 <trap_dispatch+0x3c>
		{
			tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010d424:	8b 45 08             	mov    0x8(%ebp),%eax
f010d427:	8b 40 30             	mov    0x30(%eax),%eax
f010d42a:	89 c2                	mov    %eax,%edx
f010d42c:	a0 20 ec 59 f0       	mov    0xf059ec20,%al
f010d431:	0f b6 c0             	movzbl %al,%eax
f010d434:	01 d0                	add    %edx,%eax
f010d436:	89 c2                	mov    %eax,%edx
f010d438:	8b 45 08             	mov    0x8(%ebp),%eax
f010d43b:	89 50 30             	mov    %edx,0x30(%eax)
			/*2024: commented. already will be returned to the trapret() in trapentry.S which return to the user/kernel caller code*/
			//kclock_resume();
			//env_pop_tf(tf);
			return;
f010d43e:	e9 0c 01 00 00       	jmp    f010d54f <trap_dispatch+0x148>
		}

		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010d443:	83 ec 0c             	sub    $0xc,%esp
f010d446:	6a 01                	push   $0x1
f010d448:	e8 c3 12 00 00       	call   f010e710 <isPageReplacmentAlgorithmLRU>
f010d44d:	83 c4 10             	add    $0x10,%esp
f010d450:	85 c0                	test   %eax,%eax
f010d452:	74 05                	je     f010d459 <trap_dispatch+0x52>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010d454:	e8 de 97 ff ff       	call   f0106c37 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010d459:	83 ec 0c             	sub    $0xc,%esp
f010d45c:	ff 75 08             	pushl  0x8(%ebp)
f010d45f:	e8 91 13 00 00       	call   f010e7f5 <fault_handler>
f010d464:	83 c4 10             	add    $0x10,%esp
f010d467:	e9 e3 00 00 00       	jmp    f010d54f <trap_dispatch+0x148>
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010d46c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d46f:	8b 40 28             	mov    0x28(%eax),%eax
f010d472:	83 f8 30             	cmp    $0x30,%eax
f010d475:	75 6e                	jne    f010d4e5 <trap_dispatch+0xde>
	{
		/* If the original status of the interrupt is ENABLED (before getting into kernel),
		 * Then, re-enable the interrupts & resume the clock during the system calls
		 * to allow switching between processes
		 */
		if (tf->tf_eflags & FL_IF)
f010d477:	8b 45 08             	mov    0x8(%ebp),%eax
f010d47a:	8b 40 38             	mov    0x38(%eax),%eax
f010d47d:	25 00 02 00 00       	and    $0x200,%eax
f010d482:	85 c0                	test   %eax,%eax
f010d484:	74 06                	je     f010d48c <trap_dispatch+0x85>

//set interrupt flag
static __inline void
sti(void)
{
	__asm __volatile("sti");
f010d486:	fb                   	sti    
		{
			sti();
			kclock_resume();
f010d487:	e8 24 78 ff ff       	call   f0104cb0 <kclock_resume>
		}
		//cprintf("\nserving system call #%d\n", tf->tf_regs.reg_eax);
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010d48c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d48f:	8b 78 04             	mov    0x4(%eax),%edi
f010d492:	8b 45 08             	mov    0x8(%ebp),%eax
f010d495:	8b 30                	mov    (%eax),%esi
f010d497:	8b 45 08             	mov    0x8(%ebp),%eax
f010d49a:	8b 58 10             	mov    0x10(%eax),%ebx
f010d49d:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4a0:	8b 48 18             	mov    0x18(%eax),%ecx
f010d4a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4a6:	8b 50 14             	mov    0x14(%eax),%edx
f010d4a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4ac:	8b 40 1c             	mov    0x1c(%eax),%eax
f010d4af:	83 ec 08             	sub    $0x8,%esp
f010d4b2:	57                   	push   %edi
f010d4b3:	56                   	push   %esi
f010d4b4:	53                   	push   %ebx
f010d4b5:	51                   	push   %ecx
f010d4b6:	52                   	push   %edx
f010d4b7:	50                   	push   %eax
f010d4b8:	e8 7a 09 00 00       	call   f010de37 <syscall>
f010d4bd:	83 c4 20             	add    $0x20,%esp
f010d4c0:	89 45 e0             	mov    %eax,-0x20(%ebp)
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);

		tf->tf_regs.reg_eax = ret;
f010d4c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4c6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010d4c9:	89 50 1c             	mov    %edx,0x1c(%eax)

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f010d4cc:	9c                   	pushf  
f010d4cd:	58                   	pop    %eax
f010d4ce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        return eflags;
f010d4d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax

		/*If still enabled, Disable the interrupt & stop clock before getting into user again
		 */
		if (read_eflags() & FL_IF)
f010d4d4:	25 00 02 00 00       	and    $0x200,%eax
f010d4d9:	85 c0                	test   %eax,%eax
f010d4db:	74 72                	je     f010d54f <trap_dispatch+0x148>
 */
//clear interrupt flag
static __inline void
cli(void)
{
	__asm __volatile("cli");
f010d4dd:	fa                   	cli    
		{
			cli();
			kclock_stop();
f010d4de:	e8 a5 77 ff ff       	call   f0104c88 <kclock_stop>
f010d4e3:	eb 6a                	jmp    f010d54f <trap_dispatch+0x148>
		}
		//cprintf("ret val form syscall = %d\n", ret);
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010d4e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4e8:	8b 40 28             	mov    0x28(%eax),%eax
f010d4eb:	83 f8 08             	cmp    $0x8,%eax
f010d4ee:	75 17                	jne    f010d507 <trap_dispatch+0x100>
	{
		panic("double fault!!");
f010d4f0:	83 ec 04             	sub    $0x4,%esp
f010d4f3:	68 e7 87 12 f0       	push   $0xf01287e7
f010d4f8:	68 22 01 00 00       	push   $0x122
f010d4fd:	68 f6 87 12 f0       	push   $0xf01287f6
f010d502:	e8 13 2e ff ff       	call   f010031a <_panic>
	}
	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		print_trapframe(tf);
f010d507:	83 ec 0c             	sub    $0xc,%esp
f010d50a:	ff 75 08             	pushl  0x8(%ebp)
f010d50d:	e8 a3 fc ff ff       	call   f010d1b5 <print_trapframe>
f010d512:	83 c4 10             	add    $0x10,%esp
		if (tf->tf_cs == GD_KT)
f010d515:	8b 45 08             	mov    0x8(%ebp),%eax
f010d518:	8b 40 34             	mov    0x34(%eax),%eax
f010d51b:	66 83 f8 08          	cmp    $0x8,%ax
f010d51f:	75 17                	jne    f010d538 <trap_dispatch+0x131>
		{
			panic("unhandled trap in kernel");
f010d521:	83 ec 04             	sub    $0x4,%esp
f010d524:	68 07 88 12 f0       	push   $0xf0128807
f010d529:	68 2a 01 00 00       	push   $0x12a
f010d52e:	68 f6 87 12 f0       	push   $0xf01287f6
f010d533:	e8 e2 2d ff ff       	call   f010031a <_panic>
		}
		else
		{
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010d538:	83 ec 04             	sub    $0x4,%esp
f010d53b:	68 20 88 12 f0       	push   $0xf0128820
f010d540:	68 2f 01 00 00       	push   $0x12f
f010d545:	68 f6 87 12 f0       	push   $0xf01287f6
f010d54a:	e8 cb 2d ff ff       	call   f010031a <_panic>
		}
	}
}
f010d54f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010d552:	5b                   	pop    %ebx
f010d553:	5e                   	pop    %esi
f010d554:	5f                   	pop    %edi
f010d555:	5d                   	pop    %ebp
f010d556:	c3                   	ret    

f010d557 <trap>:

void trap(struct Trapframe *tf)
{
f010d557:	55                   	push   %ebp
f010d558:	89 e5                	mov    %esp,%ebp
f010d55a:	83 ec 28             	sub    $0x28,%esp
	/* to avoid counting down on the current process while handling exceptions
	 * This avoid pending clock interrupt after returning from the trap.
	 * NOTE: interrupt is automatically disabled by the interrupt cycle (by marking all traps as "Interrupt Gates").
	 * Resume the clock and Re-enable the interrupt whenever required (e.g. in system calls).
	 */
	kclock_stop();
f010d55d:	e8 26 77 ff ff       	call   f0104c88 <kclock_stop>

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f010d562:	9c                   	pushf  
f010d563:	58                   	pop    %eax
f010d564:	89 45 e0             	mov    %eax,-0x20(%ebp)
        return eflags;
f010d567:	8b 45 e0             	mov    -0x20(%ebp),%eax

	//[2] Some validations

	//2024 check if interrupt is enabled during the trap handler, then panic
	uint32 flags = read_eflags();
f010d56a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (flags & FL_IF)
f010d56d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d570:	25 00 02 00 00       	and    $0x200,%eax
f010d575:	85 c0                	test   %eax,%eax
f010d577:	74 25                	je     f010d59e <trap+0x47>
	{
		print_trapframe(tf);
f010d579:	83 ec 0c             	sub    $0xc,%esp
f010d57c:	ff 75 08             	pushl  0x8(%ebp)
f010d57f:	e8 31 fc ff ff       	call   f010d1b5 <print_trapframe>
f010d584:	83 c4 10             	add    $0x10,%esp
		panic("trap(): interrupt is enabled while it's expected to be disabled\n");
f010d587:	83 ec 04             	sub    $0x4,%esp
f010d58a:	68 40 88 12 f0       	push   $0xf0128840
f010d58f:	68 45 01 00 00       	push   $0x145
f010d594:	68 f6 87 12 f0       	push   $0xf01287f6
f010d599:	e8 7c 2d ff ff       	call   f010031a <_panic>
	}

	int userTrap = 0;
f010d59e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct Env* cur_env = get_cpu_proc(); //the current running Environment (if any)
f010d5a5:	e8 c6 d1 ff ff       	call   f010a770 <get_cpu_proc>
f010d5aa:	89 45 e8             	mov    %eax,-0x18(%ebp)

	if ((tf->tf_cs & 3) == 3)
f010d5ad:	8b 45 08             	mov    0x8(%ebp),%eax
f010d5b0:	8b 40 34             	mov    0x34(%eax),%eax
f010d5b3:	0f b7 c0             	movzwl %ax,%eax
f010d5b6:	83 e0 03             	and    $0x3,%eax
f010d5b9:	83 f8 03             	cmp    $0x3,%eax
f010d5bc:	75 54                	jne    f010d612 <trap+0xbb>
	{
		assert(cur_env && cur_env->env_status == ENV_RUNNING);	//environment should be exist & run
f010d5be:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010d5c2:	74 0b                	je     f010d5cf <trap+0x78>
f010d5c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d5c7:	8b 40 18             	mov    0x18(%eax),%eax
f010d5ca:	83 f8 02             	cmp    $0x2,%eax
f010d5cd:	74 19                	je     f010d5e8 <trap+0x91>
f010d5cf:	68 84 88 12 f0       	push   $0xf0128884
f010d5d4:	68 b2 88 12 f0       	push   $0xf01288b2
f010d5d9:	68 4d 01 00 00       	push   $0x14d
f010d5de:	68 f6 87 12 f0       	push   $0xf01287f6
f010d5e3:	e8 32 2d ff ff       	call   f010031a <_panic>
		//cprintf("curenv->env_tf @ %x, tf param @ %x\n", curenv->env_tf , tf);
		assert(cur_env->env_tf == tf);	//tf should be placed in the kernel stack of this process (@e->env_tf)
f010d5e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d5eb:	8b 00                	mov    (%eax),%eax
f010d5ed:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d5f0:	74 19                	je     f010d60b <trap+0xb4>
f010d5f2:	68 c7 88 12 f0       	push   $0xf01288c7
f010d5f7:	68 b2 88 12 f0       	push   $0xf01288b2
f010d5fc:	68 4f 01 00 00       	push   $0x14f
f010d601:	68 f6 87 12 f0       	push   $0xf01287f6
f010d606:	e8 0f 2d ff ff       	call   f010031a <_panic>
		userTrap = 1;
f010d60b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//	if (tf->tf_trapno == T_SYSCALL)
	//	{
	//		cprintf("System Call #%d\n", tf->tf_regs.reg_eax);
	//	}
	//[3] Handle the incoming trap/interrupt
	if (tf->tf_trapno >= IRQ_OFFSET && tf->tf_trapno < IRQ_OFFSET + MAX_IRQS)
f010d612:	8b 45 08             	mov    0x8(%ebp),%eax
f010d615:	8b 40 28             	mov    0x28(%eax),%eax
f010d618:	83 f8 1f             	cmp    $0x1f,%eax
f010d61b:	76 1b                	jbe    f010d638 <trap+0xe1>
f010d61d:	8b 45 08             	mov    0x8(%ebp),%eax
f010d620:	8b 40 28             	mov    0x28(%eax),%eax
f010d623:	83 f8 2f             	cmp    $0x2f,%eax
f010d626:	77 10                	ja     f010d638 <trap+0xe1>
	{
		irq_dispatch(tf);
f010d628:	83 ec 0c             	sub    $0xc,%esp
f010d62b:	ff 75 08             	pushl  0x8(%ebp)
f010d62e:	e8 8c fd ff ff       	call   f010d3bf <irq_dispatch>
f010d633:	83 c4 10             	add    $0x10,%esp
f010d636:	eb 0e                	jmp    f010d646 <trap+0xef>
	}
	else
	{
		trap_dispatch(tf);
f010d638:	83 ec 0c             	sub    $0xc,%esp
f010d63b:	ff 75 08             	pushl  0x8(%ebp)
f010d63e:	e8 c4 fd ff ff       	call   f010d407 <trap_dispatch>
f010d643:	83 c4 10             	add    $0x10,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f010d646:	9c                   	pushf  
f010d647:	58                   	pop    %eax
f010d648:	89 45 f4             	mov    %eax,-0xc(%ebp)
        return eflags;
f010d64b:	8b 45 f4             	mov    -0xc(%ebp),%eax

	//cprintf("will be returned to the trapret() \n");
	/*2024: will be returned to the trapret() in trapentry.S which return to the caller*/

	//[4] Make sure that the interrupt is disabled before executing the trapret()
	uint32 IEN = read_eflags() & FL_IF;
f010d64e:	25 00 02 00 00       	and    $0x200,%eax
f010d653:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	assert(IEN == 0);
f010d656:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010d65a:	74 19                	je     f010d675 <trap+0x11e>
f010d65c:	68 dd 88 12 f0       	push   $0xf01288dd
f010d661:	68 b2 88 12 f0       	push   $0xf01288b2
f010d666:	68 66 01 00 00       	push   $0x166
f010d66b:	68 f6 87 12 f0       	push   $0xf01287f6
f010d670:	e8 a5 2c ff ff       	call   f010031a <_panic>

	//cprintf("will resume the clock\n");

	//[5] Resume the clock
	kclock_resume();
f010d675:	e8 36 76 ff ff       	call   f0104cb0 <kclock_resume>
	//	cprintf("\nclock is resumed with counter = %d.\n", kclock_read_cnt0_latch());
	//	cprintf("[tf] tf @%x - tf.cs = %x - tf.eip = %x - tf.eax = %d\n", tf, tf->tf_cs,tf->tf_eip, tf->tf_regs.reg_eax );
}
f010d67a:	90                   	nop
f010d67b:	c9                   	leave  
f010d67c:	c3                   	ret    
f010d67d:	90                   	nop

f010d67e <DBL_FAULT>:
	jmp _alltraps

.text
/* Lab 3: Your code here for generating entry points for the different traps.
*/
TRAPHANDLER(DBL_FAULT, T_DBLFLT)					//8 double fault
f010d67e:	6a 08                	push   $0x8
f010d680:	e9 ed 00 00 00       	jmp    f010d772 <_alltraps>
f010d685:	90                   	nop

f010d686 <PAGE_FAULT>:
TRAPHANDLER(PAGE_FAULT, T_PGFLT)					//14 page fault
f010d686:	6a 0e                	push   $0xe
f010d688:	e9 e5 00 00 00       	jmp    f010d772 <_alltraps>
f010d68d:	90                   	nop

f010d68e <IRQ0_CLK_HANDLER>:
TRAPHANDLER_NOEC(IRQ0_CLK_HANDLER, IRQ0_Clock)		//32 the first IRQ (clock iterrrupt)
f010d68e:	6a 00                	push   $0x0
f010d690:	6a 20                	push   $0x20
f010d692:	e9 db 00 00 00       	jmp    f010d772 <_alltraps>
f010d697:	90                   	nop

f010d698 <IRQ1_KBD_HANDLER>:
TRAPHANDLER_NOEC(IRQ1_KBD_HANDLER, IRQ1_KB	)		//33 keyboard interrupt request
f010d698:	6a 00                	push   $0x0
f010d69a:	6a 21                	push   $0x21
f010d69c:	e9 d1 00 00 00       	jmp    f010d772 <_alltraps>
f010d6a1:	90                   	nop

f010d6a2 <SYSCALL_HANDLER>:
TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)		//48 SYSTEM CALLS
f010d6a2:	6a 00                	push   $0x0
f010d6a4:	6a 30                	push   $0x30
f010d6a6:	e9 c7 00 00 00       	jmp    f010d772 <_alltraps>
f010d6ab:	90                   	nop

f010d6ac <ALL_FAULTS0>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)		//0			// divide error
f010d6ac:	6a 00                	push   $0x0
f010d6ae:	6a 00                	push   $0x0
f010d6b0:	e9 bd 00 00 00       	jmp    f010d772 <_alltraps>
f010d6b5:	90                   	nop

f010d6b6 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )	//1			// debug exception
f010d6b6:	6a 00                	push   $0x0
f010d6b8:	6a 01                	push   $0x1
f010d6ba:	e9 b3 00 00 00       	jmp    f010d772 <_alltraps>
f010d6bf:	90                   	nop

f010d6c0 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )//2			// NMI: non-maskable interrupt
f010d6c0:	6a 00                	push   $0x0
f010d6c2:	6a 02                	push   $0x2
f010d6c4:	e9 a9 00 00 00       	jmp    f010d772 <_alltraps>
f010d6c9:	90                   	nop

f010d6ca <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT     )//3			// breakpoint
f010d6ca:	6a 00                	push   $0x0
f010d6cc:	6a 03                	push   $0x3
f010d6ce:	e9 9f 00 00 00       	jmp    f010d772 <_alltraps>
f010d6d3:	90                   	nop

f010d6d4 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW     )//4			// overflow
f010d6d4:	6a 00                	push   $0x0
f010d6d6:	6a 04                	push   $0x4
f010d6d8:	e9 95 00 00 00       	jmp    f010d772 <_alltraps>
f010d6dd:	90                   	nop

f010d6de <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND     )//5			// bounds check
f010d6de:	6a 00                	push   $0x0
f010d6e0:	6a 05                	push   $0x5
f010d6e2:	e9 8b 00 00 00       	jmp    f010d772 <_alltraps>
f010d6e7:	90                   	nop

f010d6e8 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP     )//6			// illegal opcode
f010d6e8:	6a 00                	push   $0x0
f010d6ea:	6a 06                	push   $0x6
f010d6ec:	e9 81 00 00 00       	jmp    f010d772 <_alltraps>
f010d6f1:	90                   	nop

f010d6f2 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE    )//7			// device not available
f010d6f2:	6a 00                	push   $0x0
f010d6f4:	6a 07                	push   $0x7
f010d6f6:	eb 7a                	jmp    f010d772 <_alltraps>

f010d6f8 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS8,  T_DBLFLT)     	//8			// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS9,  9   )		//9			// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )	//10		// invalid task switch segment
f010d6f8:	6a 0a                	push   $0xa
f010d6fa:	eb 76                	jmp    f010d772 <_alltraps>

f010d6fc <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )	//11		// segment not present
f010d6fc:	6a 0b                	push   $0xb
f010d6fe:	eb 72                	jmp    f010d772 <_alltraps>

f010d700 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )	//12		// stack exception
f010d700:	6a 0c                	push   $0xc
f010d702:	eb 6e                	jmp    f010d772 <_alltraps>

f010d704 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )	//13		// General protection fault
f010d704:	6a 0d                	push   $0xd
f010d706:	eb 6a                	jmp    f010d772 <_alltraps>

f010d708 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS14,  T_PGFLT)     	//14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )			//15 		// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR    )//16		// floating point error
f010d708:	6a 00                	push   $0x0
f010d70a:	6a 10                	push   $0x10
f010d70c:	eb 64                	jmp    f010d772 <_alltraps>

f010d70e <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )	//17		// Alignment check
f010d70e:	6a 11                	push   $0x11
f010d710:	eb 60                	jmp    f010d772 <_alltraps>

f010d712 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK     )//18		// machine check
f010d712:	6a 00                	push   $0x0
f010d714:	6a 12                	push   $0x12
f010d716:	eb 5a                	jmp    f010d772 <_alltraps>

f010d718 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )	//19		// the last one
f010d718:	6a 00                	push   $0x0
f010d71a:	6a 13                	push   $0x13
f010d71c:	eb 54                	jmp    f010d772 <_alltraps>

f010d71e <ALL_FAULTS34>:

//TRAPHANDLER_NOEC(IRQ0_CLK_HANDLER,IRQ0_Clock)			//32 the first IRQ (clock iterrrupt)
//TRAPHANDLER_NOEC(IRQ1_KBD_HANDLER,IRQ1_KB	)			//33 keyboard interrupt request
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010d71e:	6a 00                	push   $0x0
f010d720:	6a 22                	push   $0x22
f010d722:	eb 4e                	jmp    f010d772 <_alltraps>

f010d724 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010d724:	6a 00                	push   $0x0
f010d726:	6a 23                	push   $0x23
f010d728:	eb 48                	jmp    f010d772 <_alltraps>

f010d72a <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010d72a:	6a 00                	push   $0x0
f010d72c:	6a 24                	push   $0x24
f010d72e:	eb 42                	jmp    f010d772 <_alltraps>

f010d730 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010d730:	6a 00                	push   $0x0
f010d732:	6a 25                	push   $0x25
f010d734:	eb 3c                	jmp    f010d772 <_alltraps>

f010d736 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010d736:	6a 00                	push   $0x0
f010d738:	6a 26                	push   $0x26
f010d73a:	eb 36                	jmp    f010d772 <_alltraps>

f010d73c <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010d73c:	6a 00                	push   $0x0
f010d73e:	6a 27                	push   $0x27
f010d740:	eb 30                	jmp    f010d772 <_alltraps>

f010d742 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010d742:	6a 00                	push   $0x0
f010d744:	6a 28                	push   $0x28
f010d746:	eb 2a                	jmp    f010d772 <_alltraps>

f010d748 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010d748:	6a 00                	push   $0x0
f010d74a:	6a 29                	push   $0x29
f010d74c:	eb 24                	jmp    f010d772 <_alltraps>

f010d74e <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010d74e:	6a 00                	push   $0x0
f010d750:	6a 2a                	push   $0x2a
f010d752:	eb 1e                	jmp    f010d772 <_alltraps>

f010d754 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010d754:	6a 00                	push   $0x0
f010d756:	6a 2b                	push   $0x2b
f010d758:	eb 18                	jmp    f010d772 <_alltraps>

f010d75a <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010d75a:	6a 00                	push   $0x0
f010d75c:	6a 2c                	push   $0x2c
f010d75e:	eb 12                	jmp    f010d772 <_alltraps>

f010d760 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010d760:	6a 00                	push   $0x0
f010d762:	6a 2d                	push   $0x2d
f010d764:	eb 0c                	jmp    f010d772 <_alltraps>

f010d766 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010d766:	6a 00                	push   $0x0
f010d768:	6a 2e                	push   $0x2e
f010d76a:	eb 06                	jmp    f010d772 <_alltraps>

f010d76c <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 		//the last IRQ
f010d76c:	6a 00                	push   $0x0
f010d76e:	6a 2f                	push   $0x2f
f010d770:	eb 00                	jmp    f010d772 <_alltraps>

f010d772 <_alltraps>:

/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:
push 	%ds
f010d772:	1e                   	push   %ds
push 	%es
f010d773:	06                   	push   %es
pushal
f010d774:	60                   	pusha  

mov 	$(GD_KD), %ax
f010d775:	66 b8 10 00          	mov    $0x10,%ax
mov 	%ax,%ds
f010d779:	8e d8                	mov    %eax,%ds
mov 	%ax,%es
f010d77b:	8e c0                	mov    %eax,%es

push 	%esp /* push the pointer to the tf into the stack to be passed as a param to the trap()*/
f010d77d:	54                   	push   %esp
call 	trap
f010d77e:	e8 d4 fd ff ff       	call   f010d557 <trap>

pop 	%ecx /* pop the pointer to the tf from the stack so that the stack top is at the beginning values of the registers pushed by pusha*/
f010d783:	59                   	pop    %ecx

f010d784 <trapret>:
.globl trapret
trapret:
popal
f010d784:	61                   	popa   
pop 	%es
f010d785:	07                   	pop    %es
pop 	%ds
f010d786:	1f                   	pop    %ds
add 	$(8),%esp /*skipping the trap_no and the error code so that the stack top is at the old eip value*/
f010d787:	83 c4 08             	add    $0x8,%esp
iret
f010d78a:	cf                   	iret   

f010d78b <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010d78b:	55                   	push   %ebp
f010d78c:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010d78e:	8b 45 08             	mov    0x8(%ebp),%eax
f010d791:	8b 15 c0 18 5a f0    	mov    0xf05a18c0,%edx
f010d797:	29 d0                	sub    %edx,%eax
f010d799:	c1 f8 03             	sar    $0x3,%eax
f010d79c:	89 c2                	mov    %eax,%edx
f010d79e:	89 d0                	mov    %edx,%eax
f010d7a0:	c1 e0 02             	shl    $0x2,%eax
f010d7a3:	01 d0                	add    %edx,%eax
f010d7a5:	c1 e0 02             	shl    $0x2,%eax
f010d7a8:	01 d0                	add    %edx,%eax
f010d7aa:	c1 e0 02             	shl    $0x2,%eax
f010d7ad:	01 d0                	add    %edx,%eax
f010d7af:	89 c1                	mov    %eax,%ecx
f010d7b1:	c1 e1 08             	shl    $0x8,%ecx
f010d7b4:	01 c8                	add    %ecx,%eax
f010d7b6:	89 c1                	mov    %eax,%ecx
f010d7b8:	c1 e1 10             	shl    $0x10,%ecx
f010d7bb:	01 c8                	add    %ecx,%eax
f010d7bd:	01 c0                	add    %eax,%eax
f010d7bf:	01 d0                	add    %edx,%eax
}
f010d7c1:	5d                   	pop    %ebp
f010d7c2:	c3                   	ret    

f010d7c3 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010d7c3:	55                   	push   %ebp
f010d7c4:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010d7c6:	ff 75 08             	pushl  0x8(%ebp)
f010d7c9:	e8 bd ff ff ff       	call   f010d78b <to_frame_number>
f010d7ce:	83 c4 04             	add    $0x4,%esp
f010d7d1:	c1 e0 0c             	shl    $0xc,%eax
}
f010d7d4:	c9                   	leave  
f010d7d5:	c3                   	ret    

f010d7d6 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010d7d6:	55                   	push   %ebp
f010d7d7:	89 e5                	mov    %esp,%ebp
f010d7d9:	83 ec 18             	sub    $0x18,%esp
f010d7dc:	8b 45 10             	mov    0x10(%ebp),%eax
f010d7df:	88 45 f4             	mov    %al,-0xc(%ebp)
	//2024 - better to use locks instead (to support multiprocessors)
	pushcli();	//disable interrupts
f010d7e2:	e8 d9 99 ff ff       	call   f01071c0 <pushcli>
		// Destroy the environment if not.

		// LAB 3: Your code here.

		// Print the string supplied by the user.
		if (printProgName)
f010d7e7:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010d7eb:	74 23                	je     f010d810 <sys_cputs+0x3a>
			cprintf("[%s %d] ",cur_env->prog_name, cur_env->env_id);
f010d7ed:	a1 64 00 5c f0       	mov    0xf05c0064,%eax
f010d7f2:	8b 40 10             	mov    0x10(%eax),%eax
f010d7f5:	8b 15 64 00 5c f0    	mov    0xf05c0064,%edx
f010d7fb:	83 c2 20             	add    $0x20,%edx
f010d7fe:	83 ec 04             	sub    $0x4,%esp
f010d801:	50                   	push   %eax
f010d802:	52                   	push   %edx
f010d803:	68 90 8a 12 f0       	push   $0xf0128a90
f010d808:	e8 5f 37 ff ff       	call   f0100f6c <cprintf>
f010d80d:	83 c4 10             	add    $0x10,%esp
		cprintf("%.*s",len, s);
f010d810:	83 ec 04             	sub    $0x4,%esp
f010d813:	ff 75 08             	pushl  0x8(%ebp)
f010d816:	ff 75 0c             	pushl  0xc(%ebp)
f010d819:	68 99 8a 12 f0       	push   $0xf0128a99
f010d81e:	e8 49 37 ff ff       	call   f0100f6c <cprintf>
f010d823:	83 c4 10             	add    $0x10,%esp
	}
	popcli();	//enable interrupts
f010d826:	e8 e7 99 ff ff       	call   f0107212 <popcli>
}
f010d82b:	90                   	nop
f010d82c:	c9                   	leave  
f010d82d:	c3                   	ret    

f010d82e <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010d82e:	55                   	push   %ebp
f010d82f:	89 e5                	mov    %esp,%ebp
f010d831:	83 ec 18             	sub    $0x18,%esp
f010d834:	8b 45 08             	mov    0x8(%ebp),%eax
f010d837:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010d83a:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010d83e:	83 ec 08             	sub    $0x8,%esp
f010d841:	50                   	push   %eax
f010d842:	68 9e 8a 12 f0       	push   $0xf0128a9e
f010d847:	e8 20 37 ff ff       	call   f0100f6c <cprintf>
f010d84c:	83 c4 10             	add    $0x10,%esp
}
f010d84f:	90                   	nop
f010d850:	c9                   	leave  
f010d851:	c3                   	ret    

f010d852 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010d852:	55                   	push   %ebp
f010d853:	89 e5                	mov    %esp,%ebp
f010d855:	83 ec 18             	sub    $0x18,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f010d858:	9c                   	pushf  
f010d859:	58                   	pop    %eax
f010d85a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        return eflags;
f010d85d:	8b 45 ec             	mov    -0x14(%ebp),%eax
	int c;
	int IEN = read_eflags() & FL_IF;
f010d860:	25 00 02 00 00       	and    $0x200,%eax
f010d865:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if (IEN) /*Interrupt-Enabled I/O*/
f010d868:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010d86c:	74 10                	je     f010d87e <sys_cgetc+0x2c>
	{
		// The cons_getc2() primitive doesn't wait for a character
		while ((c = cons_getc2()) == 0)
f010d86e:	e8 32 35 ff ff       	call   f0100da5 <cons_getc2>
f010d873:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d876:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d87a:	74 f2                	je     f010d86e <sys_cgetc+0x1c>
f010d87c:	eb 0e                	jmp    f010d88c <sys_cgetc+0x3a>
	else	/*Programmed I/O*/
	{
		//cprintf("\n(((((((Programmed I/O))))))\n");
		// The cons_getc() primitive doesn't wait for a character,
		// but the sys_cgetc() system call does.
		while ((c = cons_getc()) == 0)
f010d87e:	e8 c7 34 ff ff       	call   f0100d4a <cons_getc>
f010d883:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d886:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d88a:	74 f2                	je     f010d87e <sys_cgetc+0x2c>
			/* do nothing */;
		}
	}
	//cprintf("\nCHAR %d is READ from KB, IEN = %d\n", c, read_eflags() & FL_IF);

	return c;
f010d88c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010d88f:	c9                   	leave  
f010d890:	c3                   	ret    

f010d891 <sys_lock_cons>:

//Lock the console so that no other processes can read from KB or output to the monitor
void sys_lock_cons(void)
{
f010d891:	55                   	push   %ebp
f010d892:	89 e5                	mov    %esp,%ebp
f010d894:	83 ec 08             	sub    $0x8,%esp
	cons_lock();
f010d897:	e8 f5 35 ff ff       	call   f0100e91 <cons_lock>
}
f010d89c:	90                   	nop
f010d89d:	c9                   	leave  
f010d89e:	c3                   	ret    

f010d89f <sys_unlock_cons>:
//Unlock the console so that other processes can read from KB or output to the monitor
void sys_unlock_cons(void)
{
f010d89f:	55                   	push   %ebp
f010d8a0:	89 e5                	mov    %esp,%ebp
f010d8a2:	83 ec 08             	sub    $0x8,%esp
	cons_unlock();
f010d8a5:	e8 2e 36 ff ff       	call   f0100ed8 <cons_unlock>
}
f010d8aa:	90                   	nop
f010d8ab:	c9                   	leave  
f010d8ac:	c3                   	ret    

f010d8ad <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010d8ad:	55                   	push   %ebp
f010d8ae:	89 e5                	mov    %esp,%ebp
f010d8b0:	83 ec 28             	sub    $0x28,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = cur_env;
f010d8b3:	a1 64 00 5c f0       	mov    0xf05c0064,%eax
f010d8b8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010d8bb:	83 ec 0c             	sub    $0xc,%esp
f010d8be:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010d8c1:	50                   	push   %eax
f010d8c2:	e8 09 a9 ff ff       	call   f01081d0 <allocate_frame>
f010d8c7:	83 c4 10             	add    $0x10,%esp
f010d8ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010d8cd:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010d8d1:	75 08                	jne    f010d8db <__sys_allocate_page+0x2e>
		return r ;
f010d8d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d8d6:	e9 d0 00 00 00       	jmp    f010d9ab <__sys_allocate_page+0xfe>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010d8db:	8b 45 08             	mov    0x8(%ebp),%eax
f010d8de:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010d8e3:	77 0c                	ja     f010d8f1 <__sys_allocate_page+0x44>
f010d8e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010d8e8:	25 ff 0f 00 00       	and    $0xfff,%eax
f010d8ed:	85 c0                	test   %eax,%eax
f010d8ef:	74 0a                	je     f010d8fb <__sys_allocate_page+0x4e>
		return E_INVAL;
f010d8f1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010d8f6:	e9 b0 00 00 00       	jmp    f010d9ab <__sys_allocate_page+0xfe>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010d8fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8fe:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010d903:	83 f8 04             	cmp    $0x4,%eax
f010d906:	74 0a                	je     f010d912 <__sys_allocate_page+0x65>
		return E_INVAL;
f010d908:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010d90d:	e9 99 00 00 00       	jmp    f010d9ab <__sys_allocate_page+0xfe>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010d912:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d915:	83 ec 0c             	sub    $0xc,%esp
f010d918:	50                   	push   %eax
f010d919:	e8 a5 fe ff ff       	call   f010d7c3 <to_physical_address>
f010d91e:	83 c4 10             	add    $0x10,%esp
f010d921:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//return it to the original status
		ptr_frame_info->references -= 1;
	}
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
f010d924:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d927:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010d92a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d92d:	c1 e8 0c             	shr    $0xc,%eax
f010d930:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d933:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f010d938:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d93b:	72 17                	jb     f010d954 <__sys_allocate_page+0xa7>
f010d93d:	ff 75 e8             	pushl  -0x18(%ebp)
f010d940:	68 a4 8a 12 f0       	push   $0xf0128aa4
f010d945:	68 b5 00 00 00       	push   $0xb5
f010d94a:	68 d3 8a 12 f0       	push   $0xf0128ad3
f010d94f:	e8 c6 29 ff ff       	call   f010031a <_panic>
f010d954:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d957:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010d95c:	83 ec 04             	sub    $0x4,%esp
f010d95f:	68 00 10 00 00       	push   $0x1000
f010d964:	6a 00                	push   $0x0
f010d966:	50                   	push   %eax
f010d967:	e8 ba 4c 01 00       	call   f0122626 <memset>
f010d96c:	83 c4 10             	add    $0x10,%esp
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010d96f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d972:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010d975:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d978:	8b 40 64             	mov    0x64(%eax),%eax
f010d97b:	ff 75 0c             	pushl  0xc(%ebp)
f010d97e:	51                   	push   %ecx
f010d97f:	52                   	push   %edx
f010d980:	50                   	push   %eax
f010d981:	e8 60 ac ff ff       	call   f01085e6 <map_frame>
f010d986:	83 c4 10             	add    $0x10,%esp
f010d989:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010d98c:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010d990:	75 14                	jne    f010d9a6 <__sys_allocate_page+0xf9>
	{
		decrement_references(ptr_frame_info);
f010d992:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d995:	83 ec 0c             	sub    $0xc,%esp
f010d998:	50                   	push   %eax
f010d999:	e8 3f aa ff ff       	call   f01083dd <decrement_references>
f010d99e:	83 c4 10             	add    $0x10,%esp
		return r;
f010d9a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d9a4:	eb 05                	jmp    f010d9ab <__sys_allocate_page+0xfe>
	}
	return 0 ;
f010d9a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d9ab:	c9                   	leave  
f010d9ac:	c3                   	ret    

f010d9ad <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010d9ad:	55                   	push   %ebp
f010d9ae:	89 e5                	mov    %esp,%ebp
f010d9b0:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010d9b3:	83 ec 04             	sub    $0x4,%esp
f010d9b6:	68 e7 8a 12 f0       	push   $0xf0128ae7
f010d9bb:	68 dc 00 00 00       	push   $0xdc
f010d9c0:	68 d3 8a 12 f0       	push   $0xf0128ad3
f010d9c5:	e8 50 29 ff ff       	call   f010031a <_panic>

f010d9ca <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010d9ca:	55                   	push   %ebp
f010d9cb:	89 e5                	mov    %esp,%ebp
f010d9cd:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010d9d0:	83 ec 04             	sub    $0x4,%esp
f010d9d3:	68 08 8b 12 f0       	push   $0xf0128b08
f010d9d8:	68 ed 00 00 00       	push   $0xed
f010d9dd:	68 d3 8a 12 f0       	push   $0xf0128ad3
f010d9e2:	e8 33 29 ff ff       	call   f010031a <_panic>

f010d9e7 <sys_calculate_required_frames>:
	return 0;
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010d9e7:	55                   	push   %ebp
f010d9e8:	89 e5                	mov    %esp,%ebp
f010d9ea:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(cur_env->env_page_directory, start_virtual_address, size);
f010d9ed:	a1 64 00 5c f0       	mov    0xf05c0064,%eax
f010d9f2:	8b 40 64             	mov    0x64(%eax),%eax
f010d9f5:	83 ec 04             	sub    $0x4,%esp
f010d9f8:	ff 75 0c             	pushl  0xc(%ebp)
f010d9fb:	ff 75 08             	pushl  0x8(%ebp)
f010d9fe:	50                   	push   %eax
f010d9ff:	e8 4e bd ff ff       	call   f0109752 <calculate_required_frames>
f010da04:	83 c4 10             	add    $0x10,%esp
}
f010da07:	c9                   	leave  
f010da08:	c3                   	ret    

f010da09 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010da09:	55                   	push   %ebp
f010da0a:	89 e5                	mov    %esp,%ebp
f010da0c:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010da0f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010da12:	83 ec 0c             	sub    $0xc,%esp
f010da15:	50                   	push   %eax
f010da16:	e8 83 ae ff ff       	call   f010889e <calculate_available_frames>
f010da1b:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010da1e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010da21:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010da24:	01 d0                	add    %edx,%eax
}
f010da26:	c9                   	leave  
f010da27:	c3                   	ret    

f010da28 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010da28:	55                   	push   %ebp
f010da29:	89 e5                	mov    %esp,%ebp
f010da2b:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010da2e:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010da31:	83 ec 0c             	sub    $0xc,%esp
f010da34:	50                   	push   %eax
f010da35:	e8 64 ae ff ff       	call   f010889e <calculate_available_frames>
f010da3a:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010da3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010da40:	c9                   	leave  
f010da41:	c3                   	ret    

f010da42 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010da42:	55                   	push   %ebp
f010da43:	89 e5                	mov    %esp,%ebp
f010da45:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010da48:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010da4b:	83 ec 0c             	sub    $0xc,%esp
f010da4e:	50                   	push   %eax
f010da4f:	e8 4a ae ff ff       	call   f010889e <calculate_available_frames>
f010da54:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010da57:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010da5a:	c9                   	leave  
f010da5b:	c3                   	ret    

f010da5c <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010da5c:	55                   	push   %ebp
f010da5d:	89 e5                	mov    %esp,%ebp
f010da5f:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010da62:	83 ec 0c             	sub    $0xc,%esp
f010da65:	ff 75 08             	pushl  0x8(%ebp)
f010da68:	e8 44 37 01 00       	call   f01211b1 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010da6d:	83 c4 10             	add    $0x10,%esp
}
f010da70:	c9                   	leave  
f010da71:	c3                   	ret    

f010da72 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010da72:	55                   	push   %ebp
f010da73:	89 e5                	mov    %esp,%ebp
f010da75:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010da78:	e8 5f 36 01 00       	call   f01210dc <scarce_memory>
}
f010da7d:	90                   	nop
f010da7e:	c9                   	leave  
f010da7f:	c3                   	ret    

f010da80 <sys_clearFFL>:

void sys_clearFFL()
{
f010da80:	55                   	push   %ebp
f010da81:	89 e5                	mov    %esp,%ebp
f010da83:	83 ec 18             	sub    $0x18,%esp
	int size;
	acquire_spinlock(&MemFrameLists.mfllock);
f010da86:	83 ec 0c             	sub    $0xc,%esp
f010da89:	68 e0 ee 59 f0       	push   $0xf059eee0
f010da8e:	e8 8e 10 00 00       	call   f010eb21 <acquire_spinlock>
f010da93:	83 c4 10             	add    $0x10,%esp
	{
		size = LIST_SIZE(&MemFrameLists.free_frame_list) ;
f010da96:	a1 cc ee 59 f0       	mov    0xf059eecc,%eax
f010da9b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		struct FrameInfo* ptr_tmp_FI ;
		for (int i = 0; i < size ; i++)
f010da9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010daa5:	eb 12                	jmp    f010dab9 <sys_clearFFL+0x39>
		{
			allocate_frame(&ptr_tmp_FI) ;
f010daa7:	83 ec 0c             	sub    $0xc,%esp
f010daaa:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010daad:	50                   	push   %eax
f010daae:	e8 1d a7 ff ff       	call   f01081d0 <allocate_frame>
f010dab3:	83 c4 10             	add    $0x10,%esp
	int size;
	acquire_spinlock(&MemFrameLists.mfllock);
	{
		size = LIST_SIZE(&MemFrameLists.free_frame_list) ;
		struct FrameInfo* ptr_tmp_FI ;
		for (int i = 0; i < size ; i++)
f010dab6:	ff 45 f4             	incl   -0xc(%ebp)
f010dab9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dabc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010dabf:	7c e6                	jl     f010daa7 <sys_clearFFL+0x27>
		{
			allocate_frame(&ptr_tmp_FI) ;
		}
	}
	release_spinlock(&MemFrameLists.mfllock);
f010dac1:	83 ec 0c             	sub    $0xc,%esp
f010dac4:	68 e0 ee 59 f0       	push   $0xf059eee0
f010dac9:	e8 da 10 00 00       	call   f010eba8 <release_spinlock>
f010dace:	83 c4 10             	add    $0x10,%esp
}
f010dad1:	90                   	nop
f010dad2:	c9                   	leave  
f010dad3:	c3                   	ret    

f010dad4 <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010dad4:	55                   	push   %ebp
f010dad5:	89 e5                	mov    %esp,%ebp
f010dad7:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(cur_env);
f010dada:	a1 64 00 5c f0       	mov    0xf05c0064,%eax
f010dadf:	83 ec 0c             	sub    $0xc,%esp
f010dae2:	50                   	push   %eax
f010dae3:	e8 87 6c ff ff       	call   f010476f <pf_calculate_allocated_pages>
f010dae8:	83 c4 10             	add    $0x10,%esp
}
f010daeb:	c9                   	leave  
f010daec:	c3                   	ret    

f010daed <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010daed:	55                   	push   %ebp
f010daee:	89 e5                	mov    %esp,%ebp
f010daf0:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010daf3:	e8 db 0c 00 00       	call   f010e7d3 <isBufferingEnabled>
f010daf8:	84 c0                	test   %al,%al
f010dafa:	74 19                	je     f010db15 <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(cur_env, virtual_address, size);
f010dafc:	a1 64 00 5c f0       	mov    0xf05c0064,%eax
f010db01:	83 ec 04             	sub    $0x4,%esp
f010db04:	ff 75 0c             	pushl  0xc(%ebp)
f010db07:	ff 75 08             	pushl  0x8(%ebp)
f010db0a:	50                   	push   %eax
f010db0b:	e8 8d bc ff ff       	call   f010979d <__free_user_mem_with_buffering>
f010db10:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(cur_env, virtual_address, size);
	}
	return;
f010db13:	eb 18                	jmp    f010db2d <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(cur_env, virtual_address, size);
	}
	else
	{
		free_user_mem(cur_env, virtual_address, size);
f010db15:	a1 64 00 5c f0       	mov    0xf05c0064,%eax
f010db1a:	83 ec 04             	sub    $0x4,%esp
f010db1d:	ff 75 0c             	pushl  0xc(%ebp)
f010db20:	ff 75 08             	pushl  0x8(%ebp)
f010db23:	50                   	push   %eax
f010db24:	e8 66 bc ff ff       	call   f010978f <free_user_mem>
f010db29:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010db2c:	90                   	nop
}
f010db2d:	c9                   	leave  
f010db2e:	c3                   	ret    

f010db2f <check_Param>:
// Youssef Mohsen
void check_Param(uint32 virtual_address)
{
f010db2f:	55                   	push   %ebp
f010db30:	89 e5                	mov    %esp,%ebp
f010db32:	83 ec 08             	sub    $0x8,%esp
	if(virtual_address == 0)
f010db35:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010db39:	75 07                	jne    f010db42 <check_Param+0x13>
	{
		env_exit();
f010db3b:	e8 ee cb ff ff       	call   f010a72e <env_exit>
	}
	else if(virtual_address >= KERNEL_BASE)
	{
		env_exit();
	}
}
f010db40:	eb 25                	jmp    f010db67 <check_Param+0x38>
{
	if(virtual_address == 0)
	{
		env_exit();
	}
	else if(virtual_address > USER_HEAP_MAX || virtual_address < USER_HEAP_START)
f010db42:	81 7d 08 00 00 00 a0 	cmpl   $0xa0000000,0x8(%ebp)
f010db49:	77 07                	ja     f010db52 <check_Param+0x23>
f010db4b:	8b 45 08             	mov    0x8(%ebp),%eax
f010db4e:	85 c0                	test   %eax,%eax
f010db50:	78 07                	js     f010db59 <check_Param+0x2a>
	{
		env_exit();
f010db52:	e8 d7 cb ff ff       	call   f010a72e <env_exit>
	}
	else if(virtual_address >= KERNEL_BASE)
	{
		env_exit();
	}
}
f010db57:	eb 0e                	jmp    f010db67 <check_Param+0x38>
	}
	else if(virtual_address > USER_HEAP_MAX || virtual_address < USER_HEAP_START)
	{
		env_exit();
	}
	else if(virtual_address >= KERNEL_BASE)
f010db59:	81 7d 08 ff ff ff ef 	cmpl   $0xefffffff,0x8(%ebp)
f010db60:	76 05                	jbe    f010db67 <check_Param+0x38>
	{
		env_exit();
f010db62:	e8 c7 cb ff ff       	call   f010a72e <env_exit>
	}
}
f010db67:	90                   	nop
f010db68:	c9                   	leave  
f010db69:	c3                   	ret    

f010db6a <sys_allocate_user_mem>:
// Youssef Mohsen
void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010db6a:	55                   	push   %ebp
f010db6b:	89 e5                	mov    %esp,%ebp
f010db6d:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #03] [2] SYSTEM CALLS - Params Validation
	check_Param(virtual_address);
f010db70:	83 ec 0c             	sub    $0xc,%esp
f010db73:	ff 75 08             	pushl  0x8(%ebp)
f010db76:	e8 b4 ff ff ff       	call   f010db2f <check_Param>
f010db7b:	83 c4 10             	add    $0x10,%esp
	allocate_user_mem(cur_env, virtual_address, size);
f010db7e:	a1 64 00 5c f0       	mov    0xf05c0064,%eax
f010db83:	83 ec 04             	sub    $0x4,%esp
f010db86:	ff 75 0c             	pushl  0xc(%ebp)
f010db89:	ff 75 08             	pushl  0x8(%ebp)
f010db8c:	50                   	push   %eax
f010db8d:	e8 ef bb ff ff       	call   f0109781 <allocate_user_mem>
f010db92:	83 c4 10             	add    $0x10,%esp
	return;
f010db95:	90                   	nop
}
f010db96:	c9                   	leave  
f010db97:	c3                   	ret    

f010db98 <sys_allocate_chunk>:
// Youssef Mohsen
void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010db98:	55                   	push   %ebp
f010db99:	89 e5                	mov    %esp,%ebp
f010db9b:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #03] [2] SYSTEM CALLS - Params Validation
	check_Param(virtual_address);
f010db9e:	83 ec 0c             	sub    $0xc,%esp
f010dba1:	ff 75 08             	pushl  0x8(%ebp)
f010dba4:	e8 86 ff ff ff       	call   f010db2f <check_Param>
f010dba9:	83 c4 10             	add    $0x10,%esp
	allocate_chunk(cur_env->env_page_directory, virtual_address, size, perms);
f010dbac:	a1 64 00 5c f0       	mov    0xf05c0064,%eax
f010dbb1:	8b 40 64             	mov    0x64(%eax),%eax
f010dbb4:	ff 75 10             	pushl  0x10(%ebp)
f010dbb7:	ff 75 0c             	pushl  0xc(%ebp)
f010dbba:	ff 75 08             	pushl  0x8(%ebp)
f010dbbd:	50                   	push   %eax
f010dbbe:	e8 5b bb ff ff       	call   f010971e <allocate_chunk>
f010dbc3:	83 c4 10             	add    $0x10,%esp
	return;
f010dbc6:	90                   	nop
}
f010dbc7:	c9                   	leave  
f010dbc8:	c3                   	ret    

f010dbc9 <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010dbc9:	55                   	push   %ebp
f010dbca:	89 e5                	mov    %esp,%ebp
f010dbcc:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(cur_env, src_virtual_address, dst_virtual_address, size);
f010dbcf:	a1 64 00 5c f0       	mov    0xf05c0064,%eax
f010dbd4:	ff 75 10             	pushl  0x10(%ebp)
f010dbd7:	ff 75 0c             	pushl  0xc(%ebp)
f010dbda:	ff 75 08             	pushl  0x8(%ebp)
f010dbdd:	50                   	push   %eax
f010dbde:	e8 d7 bb ff ff       	call   f01097ba <move_user_mem>
f010dbe3:	83 c4 10             	add    $0x10,%esp
	return;
f010dbe6:	90                   	nop
}
f010dbe7:	c9                   	leave  
f010dbe8:	c3                   	ret    

f010dbe9 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010dbe9:	55                   	push   %ebp
f010dbea:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010dbec:	a1 a4 18 5a f0       	mov    0xf05a18a4,%eax
}
f010dbf1:	5d                   	pop    %ebp
f010dbf2:	c3                   	ret    

f010dbf3 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010dbf3:	55                   	push   %ebp
f010dbf4:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010dbf6:	8b 45 08             	mov    0x8(%ebp),%eax
f010dbf9:	a3 a4 18 5a f0       	mov    %eax,0xf05a18a4
}
f010dbfe:	90                   	nop
f010dbff:	5d                   	pop    %ebp
f010dc00:	c3                   	ret    

f010dc01 <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010dc01:	55                   	push   %ebp
f010dc02:	89 e5                	mov    %esp,%ebp
f010dc04:	83 ec 18             	sub    $0x18,%esp
f010dc07:	8b 45 10             	mov    0x10(%ebp),%eax
f010dc0a:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(cur_env->env_id, shareName, size, isWritable, virtual_address);
f010dc0d:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010dc11:	a1 64 00 5c f0       	mov    0xf05c0064,%eax
f010dc16:	8b 40 10             	mov    0x10(%eax),%eax
f010dc19:	83 ec 0c             	sub    $0xc,%esp
f010dc1c:	ff 75 14             	pushl  0x14(%ebp)
f010dc1f:	52                   	push   %edx
f010dc20:	ff 75 0c             	pushl  0xc(%ebp)
f010dc23:	ff 75 08             	pushl  0x8(%ebp)
f010dc26:	50                   	push   %eax
f010dc27:	e8 dd ad ff ff       	call   f0108a09 <createSharedObject>
f010dc2c:	83 c4 20             	add    $0x20,%esp
}
f010dc2f:	c9                   	leave  
f010dc30:	c3                   	ret    

f010dc31 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010dc31:	55                   	push   %ebp
f010dc32:	89 e5                	mov    %esp,%ebp
f010dc34:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010dc37:	83 ec 08             	sub    $0x8,%esp
f010dc3a:	ff 75 0c             	pushl  0xc(%ebp)
f010dc3d:	ff 75 08             	pushl  0x8(%ebp)
f010dc40:	e8 e4 ad ff ff       	call   f0108a29 <getSizeOfSharedObject>
f010dc45:	83 c4 10             	add    $0x10,%esp
}
f010dc48:	c9                   	leave  
f010dc49:	c3                   	ret    

f010dc4a <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010dc4a:	55                   	push   %ebp
f010dc4b:	89 e5                	mov    %esp,%ebp
f010dc4d:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010dc50:	83 ec 04             	sub    $0x4,%esp
f010dc53:	ff 75 10             	pushl  0x10(%ebp)
f010dc56:	ff 75 0c             	pushl  0xc(%ebp)
f010dc59:	ff 75 08             	pushl  0x8(%ebp)
f010dc5c:	e8 f7 ad ff ff       	call   f0108a58 <getSharedObject>
f010dc61:	83 c4 10             	add    $0x10,%esp
}
f010dc64:	c9                   	leave  
f010dc65:	c3                   	ret    

f010dc66 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010dc66:	55                   	push   %ebp
f010dc67:	89 e5                	mov    %esp,%ebp
f010dc69:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010dc6c:	83 ec 08             	sub    $0x8,%esp
f010dc6f:	ff 75 0c             	pushl  0xc(%ebp)
f010dc72:	ff 75 08             	pushl  0x8(%ebp)
f010dc75:	e8 fb ad ff ff       	call   f0108a75 <freeSharedObject>
f010dc7a:	83 c4 10             	add    $0x10,%esp
}
f010dc7d:	c9                   	leave  
f010dc7e:	c3                   	ret    

f010dc7f <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010dc7f:	55                   	push   %ebp
f010dc80:	89 e5                	mov    %esp,%ebp
	return cur_env->env_id;
f010dc82:	a1 64 00 5c f0       	mov    0xf05c0064,%eax
f010dc87:	8b 40 10             	mov    0x10(%eax),%eax
}
f010dc8a:	5d                   	pop    %ebp
f010dc8b:	c3                   	ret    

f010dc8c <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010dc8c:	55                   	push   %ebp
f010dc8d:	89 e5                	mov    %esp,%ebp
	//return cur_env->env_id;
	return (cur_env - envs) ;
f010dc8f:	a1 64 00 5c f0       	mov    0xf05c0064,%eax
f010dc94:	89 c2                	mov    %eax,%edx
f010dc96:	a1 b0 e3 59 f0       	mov    0xf059e3b0,%eax
f010dc9b:	29 c2                	sub    %eax,%edx
f010dc9d:	89 d0                	mov    %edx,%eax
f010dc9f:	c1 f8 02             	sar    $0x2,%eax
f010dca2:	89 c2                	mov    %eax,%edx
f010dca4:	89 d0                	mov    %edx,%eax
f010dca6:	c1 e0 02             	shl    $0x2,%eax
f010dca9:	01 d0                	add    %edx,%eax
f010dcab:	c1 e0 02             	shl    $0x2,%eax
f010dcae:	01 d0                	add    %edx,%eax
f010dcb0:	c1 e0 02             	shl    $0x2,%eax
f010dcb3:	01 d0                	add    %edx,%eax
f010dcb5:	c1 e0 02             	shl    $0x2,%eax
f010dcb8:	01 d0                	add    %edx,%eax
f010dcba:	c1 e0 08             	shl    $0x8,%eax
f010dcbd:	29 d0                	sub    %edx,%eax
f010dcbf:	c1 e0 08             	shl    $0x8,%eax
f010dcc2:	29 d0                	sub    %edx,%eax
f010dcc4:	c1 e0 03             	shl    $0x3,%eax
f010dcc7:	01 d0                	add    %edx,%eax
f010dcc9:	c1 e0 03             	shl    $0x3,%eax
f010dccc:	01 d0                	add    %edx,%eax
f010dcce:	01 c0                	add    %eax,%eax
f010dcd0:	01 d0                	add    %edx,%eax
}
f010dcd2:	5d                   	pop    %ebp
f010dcd3:	c3                   	ret    

f010dcd4 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010dcd4:	55                   	push   %ebp
f010dcd5:	89 e5                	mov    %esp,%ebp
	return cur_env->env_parent_id;
f010dcd7:	a1 64 00 5c f0       	mov    0xf05c0064,%eax
f010dcdc:	8b 40 14             	mov    0x14(%eax),%eax
}
f010dcdf:	5d                   	pop    %ebp
f010dce0:	c3                   	ret    

f010dce1 <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010dce1:	55                   	push   %ebp
f010dce2:	89 e5                	mov    %esp,%ebp
f010dce4:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010dce7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010dceb:	75 0a                	jne    f010dcf7 <sys_destroy_env+0x16>
	{
		e = cur_env ;
f010dced:	a1 64 00 5c f0       	mov    0xf05c0064,%eax
f010dcf2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010dcf5:	eb 22                	jmp    f010dd19 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010dcf7:	83 ec 04             	sub    $0x4,%esp
f010dcfa:	6a 00                	push   $0x0
f010dcfc:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010dcff:	50                   	push   %eax
f010dd00:	ff 75 08             	pushl  0x8(%ebp)
f010dd03:	e8 b8 ca ff ff       	call   f010a7c0 <envid2env>
f010dd08:	83 c4 10             	add    $0x10,%esp
f010dd0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010dd0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010dd12:	79 05                	jns    f010dd19 <sys_destroy_env+0x38>
	{
		return r;
f010dd14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dd17:	eb 5e                	jmp    f010dd77 <sys_destroy_env+0x96>
	}

	if (e == cur_env)
f010dd19:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dd1c:	a1 64 00 5c f0       	mov    0xf05c0064,%eax
f010dd21:	39 c2                	cmp    %eax,%edx
f010dd23:	75 1b                	jne    f010dd40 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", cur_env->env_id);
f010dd25:	a1 64 00 5c f0       	mov    0xf05c0064,%eax
f010dd2a:	8b 40 10             	mov    0x10(%eax),%eax
f010dd2d:	83 ec 08             	sub    $0x8,%esp
f010dd30:	50                   	push   %eax
f010dd31:	68 27 8b 12 f0       	push   $0xf0128b27
f010dd36:	e8 31 32 ff ff       	call   f0100f6c <cprintf>
f010dd3b:	83 c4 10             	add    $0x10,%esp
f010dd3e:	eb 20                	jmp    f010dd60 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", cur_env->env_id, e->env_id);
f010dd40:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dd43:	8b 50 10             	mov    0x10(%eax),%edx
f010dd46:	a1 64 00 5c f0       	mov    0xf05c0064,%eax
f010dd4b:	8b 40 10             	mov    0x10(%eax),%eax
f010dd4e:	83 ec 04             	sub    $0x4,%esp
f010dd51:	52                   	push   %edx
f010dd52:	50                   	push   %eax
f010dd53:	68 42 8b 12 f0       	push   $0xf0128b42
f010dd58:	e8 0f 32 ff ff       	call   f0100f6c <cprintf>
f010dd5d:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010dd60:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dd63:	8b 40 10             	mov    0x10(%eax),%eax
f010dd66:	83 ec 0c             	sub    $0xc,%esp
f010dd69:	50                   	push   %eax
f010dd6a:	e8 f4 7c ff ff       	call   f0105a63 <sched_kill_env>
f010dd6f:	83 c4 10             	add    $0x10,%esp

	return 0;
f010dd72:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd77:	c9                   	leave  
f010dd78:	c3                   	ret    

f010dd79 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010dd79:	55                   	push   %ebp
f010dd7a:	89 e5                	mov    %esp,%ebp
f010dd7c:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010dd7f:	e8 aa c9 ff ff       	call   f010a72e <env_exit>

	//2024: if returned here, then it's not the current environment. So, just return
	//env_run_cmd_prmpt();
	//context_switch(&(cur_env->context), mycpu()->scheduler);

}
f010dd84:	90                   	nop
f010dd85:	c9                   	leave  
f010dd86:	c3                   	ret    

f010dd87 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010dd87:	55                   	push   %ebp
f010dd88:	89 e5                	mov    %esp,%ebp
f010dd8a:	83 ec 18             	sub    $0x18,%esp
	//cprintf("\nAttempt to create a new env\n");

	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010dd8d:	ff 75 14             	pushl  0x14(%ebp)
f010dd90:	ff 75 10             	pushl  0x10(%ebp)
f010dd93:	ff 75 0c             	pushl  0xc(%ebp)
f010dd96:	ff 75 08             	pushl  0x8(%ebp)
f010dd99:	e8 d2 bc ff ff       	call   f0109a70 <env_create>
f010dd9e:	83 c4 10             	add    $0x10,%esp
f010dda1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010dda4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010dda8:	75 07                	jne    f010ddb1 <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010ddaa:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010ddaf:	eb 14                	jmp    f010ddc5 <sys_create_env+0x3e>
	}
	//cprintf("\nENV %d is created\n", env->env_id);

	//2015
	sched_new_env(env);
f010ddb1:	83 ec 0c             	sub    $0xc,%esp
f010ddb4:	ff 75 f4             	pushl  -0xc(%ebp)
f010ddb7:	e8 e9 78 ff ff       	call   f01056a5 <sched_new_env>
f010ddbc:	83 c4 10             	add    $0x10,%esp

	//cprintf("\nENV %d is scheduled as NEW\n", env->env_id);

	return env->env_id;
f010ddbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ddc2:	8b 40 10             	mov    0x10(%eax),%eax
}
f010ddc5:	c9                   	leave  
f010ddc6:	c3                   	ret    

f010ddc7 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010ddc7:	55                   	push   %ebp
f010ddc8:	89 e5                	mov    %esp,%ebp
f010ddca:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010ddcd:	8b 45 08             	mov    0x8(%ebp),%eax
f010ddd0:	83 ec 0c             	sub    $0xc,%esp
f010ddd3:	50                   	push   %eax
f010ddd4:	e8 22 79 ff ff       	call   f01056fb <sched_run_env>
f010ddd9:	83 c4 10             	add    $0x10,%esp
}
f010dddc:	90                   	nop
f010dddd:	c9                   	leave  
f010ddde:	c3                   	ret    

f010dddf <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010dddf:	55                   	push   %ebp
f010dde0:	89 e5                	mov    %esp,%ebp
f010dde2:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010dde5:	0f 31                	rdtsc  
f010dde7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010ddea:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010dded:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ddf0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ddf3:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010ddf6:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010ddf9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ddfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010ddff:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010de02:	89 01                	mov    %eax,(%ecx)
f010de04:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010de07:	8b 45 08             	mov    0x8(%ebp),%eax
f010de0a:	c9                   	leave  
f010de0b:	c2 04 00             	ret    $0x4

f010de0e <sys_rcr2>:

uint32 sys_rcr2()
{
f010de0e:	55                   	push   %ebp
f010de0f:	89 e5                	mov    %esp,%ebp
f010de11:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010de14:	0f 20 d0             	mov    %cr2,%eax
f010de17:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010de1a:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010de1d:	90                   	nop
}
f010de1e:	c9                   	leave  
f010de1f:	c3                   	ret    

f010de20 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010de20:	55                   	push   %ebp
f010de21:	89 e5                	mov    %esp,%ebp
f010de23:	83 ec 04             	sub    $0x4,%esp
f010de26:	8b 45 08             	mov    0x8(%ebp),%eax
f010de29:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010de2c:	8a 45 fc             	mov    -0x4(%ebp),%al
f010de2f:	a2 20 ec 59 f0       	mov    %al,0xf059ec20
}
f010de34:	90                   	nop
f010de35:	c9                   	leave  
f010de36:	c3                   	ret    

f010de37 <syscall>:
/**************************************************************************/
/************************* SYSTEM CALLS HANDLER ***************************/
/**************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010de37:	55                   	push   %ebp
f010de38:	89 e5                	mov    %esp,%ebp
f010de3a:	56                   	push   %esi
f010de3b:	53                   	push   %ebx
f010de3c:	83 ec 10             	sub    $0x10,%esp
	cur_env = get_cpu_proc();
f010de3f:	e8 2c c9 ff ff       	call   f010a770 <get_cpu_proc>
f010de44:	a3 64 00 5c f0       	mov    %eax,0xf05c0064
	assert(cur_env != NULL);
f010de49:	a1 64 00 5c f0       	mov    0xf05c0064,%eax
f010de4e:	85 c0                	test   %eax,%eax
f010de50:	75 19                	jne    f010de6b <syscall+0x34>
f010de52:	68 5a 8b 12 f0       	push   $0xf0128b5a
f010de57:	68 6a 8b 12 f0       	push   $0xf0128b6a
f010de5c:	68 05 02 00 00       	push   $0x205
f010de61:	68 d3 8a 12 f0       	push   $0xf0128ad3
f010de66:	e8 af 24 ff ff       	call   f010031a <_panic>

	//cprintf("syscallno = %d\n", syscallno);
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	switch(syscallno)
f010de6b:	83 7d 08 2e          	cmpl   $0x2e,0x8(%ebp)
f010de6f:	0f 87 06 04 00 00    	ja     f010e27b <syscall+0x444>
f010de75:	8b 45 08             	mov    0x8(%ebp),%eax
f010de78:	c1 e0 02             	shl    $0x2,%eax
f010de7b:	05 80 8b 12 f0       	add    $0xf0128b80,%eax
f010de80:	8b 00                	mov    (%eax),%eax
f010de82:	ff e0                	jmp    *%eax
	{
	//TODO: [PROJECT'24.MS1 - #02] [2] SYSTEM CALLS - Add suitable code here
	case SYS_sbrk:
		return (uint32)sys_sbrk(a1);
f010de84:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de87:	83 ec 0c             	sub    $0xc,%esp
f010de8a:	50                   	push   %eax
f010de8b:	e8 dc b8 ff ff       	call   f010976c <sys_sbrk>
f010de90:	83 c4 10             	add    $0x10,%esp
f010de93:	e9 e8 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1,a2);
f010de98:	83 ec 08             	sub    $0x8,%esp
f010de9b:	ff 75 10             	pushl  0x10(%ebp)
f010de9e:	ff 75 0c             	pushl  0xc(%ebp)
f010dea1:	e8 47 fc ff ff       	call   f010daed <sys_free_user_mem>
f010dea6:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dea9:	b8 00 00 00 00       	mov    $0x0,%eax
f010deae:	e9 cd 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;

	case SYS_allocate_user_mem:
		sys_allocate_user_mem(a1,a2);
f010deb3:	83 ec 08             	sub    $0x8,%esp
f010deb6:	ff 75 10             	pushl  0x10(%ebp)
f010deb9:	ff 75 0c             	pushl  0xc(%ebp)
f010debc:	e8 a9 fc ff ff       	call   f010db6a <sys_allocate_user_mem>
f010dec1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dec4:	b8 00 00 00 00       	mov    $0x0,%eax
f010dec9:	e9 b2 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	//======================================================================
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010dece:	8b 45 14             	mov    0x14(%ebp),%eax
f010ded1:	0f b6 d0             	movzbl %al,%edx
f010ded4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ded7:	83 ec 04             	sub    $0x4,%esp
f010deda:	52                   	push   %edx
f010dedb:	ff 75 10             	pushl  0x10(%ebp)
f010dede:	50                   	push   %eax
f010dedf:	e8 f2 f8 ff ff       	call   f010d7d6 <sys_cputs>
f010dee4:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dee7:	b8 00 00 00 00       	mov    $0x0,%eax
f010deec:	e9 8f 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010def1:	e8 5c f9 ff ff       	call   f010d852 <sys_cgetc>
f010def6:	e9 85 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_lock_cons:
		sys_lock_cons();
f010defb:	e8 91 f9 ff ff       	call   f010d891 <sys_lock_cons>
		return 0;
f010df00:	b8 00 00 00 00       	mov    $0x0,%eax
f010df05:	e9 76 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_unlock_cons:
		sys_unlock_cons();
f010df0a:	e8 90 f9 ff ff       	call   f010d89f <sys_unlock_cons>
		return 0;
f010df0f:	b8 00 00 00 00       	mov    $0x0,%eax
f010df14:	e9 67 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010df19:	83 ec 08             	sub    $0x8,%esp
f010df1c:	ff 75 10             	pushl  0x10(%ebp)
f010df1f:	ff 75 0c             	pushl  0xc(%ebp)
f010df22:	e8 c0 fa ff ff       	call   f010d9e7 <sys_calculate_required_frames>
f010df27:	83 c4 10             	add    $0x10,%esp
f010df2a:	e9 51 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010df2f:	e8 d5 fa ff ff       	call   f010da09 <sys_calculate_free_frames>
f010df34:	e9 47 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010df39:	e8 ea fa ff ff       	call   f010da28 <sys_calculate_modified_frames>
f010df3e:	e9 3d 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010df43:	e8 fa fa ff ff       	call   f010da42 <sys_calculate_notmod_frames>
f010df48:	e9 33 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010df4d:	e8 82 fb ff ff       	call   f010dad4 <sys_pf_calculate_allocated_pages>
f010df52:	e9 29 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010df57:	83 ec 0c             	sub    $0xc,%esp
f010df5a:	ff 75 0c             	pushl  0xc(%ebp)
f010df5d:	e8 fa fa ff ff       	call   f010da5c <sys_calculate_pages_tobe_removed_ready_exit>
f010df62:	83 c4 10             	add    $0x10,%esp
f010df65:	e9 16 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010df6a:	e8 03 fb ff ff       	call   f010da72 <sys_scarce_memory>
		return 0;
f010df6f:	b8 00 00 00 00       	mov    $0x0,%eax
f010df74:	e9 07 03 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010df79:	83 ec 04             	sub    $0x4,%esp
f010df7c:	ff 75 14             	pushl  0x14(%ebp)
f010df7f:	ff 75 10             	pushl  0x10(%ebp)
f010df82:	ff 75 0c             	pushl  0xc(%ebp)
f010df85:	e8 0e fc ff ff       	call   f010db98 <sys_allocate_chunk>
f010df8a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010df8d:	b8 00 00 00 00       	mov    $0x0,%eax
f010df92:	e9 e9 02 00 00       	jmp    f010e280 <syscall+0x449>
		break;

		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010df97:	8b 55 10             	mov    0x10(%ebp),%edx
f010df9a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df9d:	83 ec 08             	sub    $0x8,%esp
f010dfa0:	52                   	push   %edx
f010dfa1:	50                   	push   %eax
f010dfa2:	e8 06 f9 ff ff       	call   f010d8ad <__sys_allocate_page>
f010dfa7:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dfaa:	b8 00 00 00 00       	mov    $0x0,%eax
f010dfaf:	e9 cc 02 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010dfb4:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010dfb7:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010dfba:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010dfbd:	8b 55 10             	mov    0x10(%ebp),%edx
f010dfc0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfc3:	83 ec 0c             	sub    $0xc,%esp
f010dfc6:	56                   	push   %esi
f010dfc7:	53                   	push   %ebx
f010dfc8:	51                   	push   %ecx
f010dfc9:	52                   	push   %edx
f010dfca:	50                   	push   %eax
f010dfcb:	e8 dd f9 ff ff       	call   f010d9ad <__sys_map_frame>
f010dfd0:	83 c4 20             	add    $0x20,%esp
		return 0;
f010dfd3:	b8 00 00 00 00       	mov    $0x0,%eax
f010dfd8:	e9 a3 02 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010dfdd:	8b 55 10             	mov    0x10(%ebp),%edx
f010dfe0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfe3:	83 ec 08             	sub    $0x8,%esp
f010dfe6:	52                   	push   %edx
f010dfe7:	50                   	push   %eax
f010dfe8:	e8 dd f9 ff ff       	call   f010d9ca <__sys_unmap_frame>
f010dfed:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dff0:	b8 00 00 00 00       	mov    $0x0,%eax
f010dff5:	e9 86 02 00 00       	jmp    f010e280 <syscall+0x449>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010dffa:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dffd:	0f be c0             	movsbl %al,%eax
f010e000:	83 ec 0c             	sub    $0xc,%esp
f010e003:	50                   	push   %eax
f010e004:	e8 25 f8 ff ff       	call   f010d82e <sys_cputc>
f010e009:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e00c:	b8 00 00 00 00       	mov    $0x0,%eax
f010e011:	e9 6a 02 00 00       	jmp    f010e280 <syscall+0x449>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010e016:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e019:	0f be c0             	movsbl %al,%eax
f010e01c:	83 ec 0c             	sub    $0xc,%esp
f010e01f:	50                   	push   %eax
f010e020:	e8 5b fa ff ff       	call   f010da80 <sys_clearFFL>
f010e025:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e028:	b8 00 00 00 00       	mov    $0x0,%eax
f010e02d:	e9 4e 02 00 00       	jmp    f010e280 <syscall+0x449>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010e032:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010e035:	8b 45 14             	mov    0x14(%ebp),%eax
f010e038:	0f b6 d0             	movzbl %al,%edx
f010e03b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e03e:	51                   	push   %ecx
f010e03f:	52                   	push   %edx
f010e040:	ff 75 10             	pushl  0x10(%ebp)
f010e043:	50                   	push   %eax
f010e044:	e8 b8 fb ff ff       	call   f010dc01 <sys_createSharedObject>
f010e049:	83 c4 10             	add    $0x10,%esp
f010e04c:	e9 2f 02 00 00       	jmp    f010e280 <syscall+0x449>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010e051:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010e054:	8b 55 10             	mov    0x10(%ebp),%edx
f010e057:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e05a:	83 ec 04             	sub    $0x4,%esp
f010e05d:	51                   	push   %ecx
f010e05e:	52                   	push   %edx
f010e05f:	50                   	push   %eax
f010e060:	e8 e5 fb ff ff       	call   f010dc4a <sys_getSharedObject>
f010e065:	83 c4 10             	add    $0x10,%esp
f010e068:	e9 13 02 00 00       	jmp    f010e280 <syscall+0x449>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010e06d:	8b 55 10             	mov    0x10(%ebp),%edx
f010e070:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e073:	83 ec 08             	sub    $0x8,%esp
f010e076:	52                   	push   %edx
f010e077:	50                   	push   %eax
f010e078:	e8 e9 fb ff ff       	call   f010dc66 <sys_freeSharedObject>
f010e07d:	83 c4 10             	add    $0x10,%esp
f010e080:	e9 fb 01 00 00       	jmp    f010e280 <syscall+0x449>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010e085:	8b 55 10             	mov    0x10(%ebp),%edx
f010e088:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e08b:	83 ec 08             	sub    $0x8,%esp
f010e08e:	52                   	push   %edx
f010e08f:	50                   	push   %eax
f010e090:	e8 9c fb ff ff       	call   f010dc31 <sys_getSizeOfSharedObject>
f010e095:	83 c4 10             	add    $0x10,%esp
f010e098:	e9 e3 01 00 00       	jmp    f010e280 <syscall+0x449>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010e09d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0a0:	ff 75 18             	pushl  0x18(%ebp)
f010e0a3:	ff 75 14             	pushl  0x14(%ebp)
f010e0a6:	ff 75 10             	pushl  0x10(%ebp)
f010e0a9:	50                   	push   %eax
f010e0aa:	e8 d8 fc ff ff       	call   f010dd87 <sys_create_env>
f010e0af:	83 c4 10             	add    $0x10,%esp
f010e0b2:	e9 c9 01 00 00       	jmp    f010e280 <syscall+0x449>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010e0b7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0ba:	83 ec 0c             	sub    $0xc,%esp
f010e0bd:	50                   	push   %eax
f010e0be:	e8 04 fd ff ff       	call   f010ddc7 <sys_run_env>
f010e0c3:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e0c6:	b8 00 00 00 00       	mov    $0x0,%eax
f010e0cb:	e9 b0 01 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010e0d0:	e8 b7 fb ff ff       	call   f010dc8c <sys_getenvindex>
f010e0d5:	e9 a6 01 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010e0da:	e8 a0 fb ff ff       	call   f010dc7f <sys_getenvid>
f010e0df:	e9 9c 01 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010e0e4:	e8 eb fb ff ff       	call   f010dcd4 <sys_getparentenvid>
f010e0e9:	e9 92 01 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010e0ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0f1:	83 ec 0c             	sub    $0xc,%esp
f010e0f4:	50                   	push   %eax
f010e0f5:	e8 e7 fb ff ff       	call   f010dce1 <sys_destroy_env>
f010e0fa:	83 c4 10             	add    $0x10,%esp
f010e0fd:	e9 7e 01 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010e102:	e8 72 fc ff ff       	call   f010dd79 <sys_exit_env>
		return 0;
f010e107:	b8 00 00 00 00       	mov    $0x0,%eax
f010e10c:	e9 6f 01 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010e111:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010e114:	83 ec 0c             	sub    $0xc,%esp
f010e117:	50                   	push   %eax
f010e118:	e8 c2 fc ff ff       	call   f010dddf <sys_get_virtual_time>
f010e11d:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010e120:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e123:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010e126:	8b 45 10             	mov    0x10(%ebp),%eax
f010e129:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010e12c:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010e12f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e132:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010e134:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e137:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e13a:	89 10                	mov    %edx,(%eax)
		return 0;
f010e13c:	b8 00 00 00 00       	mov    $0x0,%eax
f010e141:	e9 3a 01 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010e146:	83 ec 04             	sub    $0x4,%esp
f010e149:	ff 75 14             	pushl  0x14(%ebp)
f010e14c:	ff 75 10             	pushl  0x10(%ebp)
f010e14f:	ff 75 0c             	pushl  0xc(%ebp)
f010e152:	e8 72 fa ff ff       	call   f010dbc9 <sys_move_user_mem>
f010e157:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e15a:	b8 00 00 00 00       	mov    $0x0,%eax
f010e15f:	e9 1c 01 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010e164:	e8 a5 fc ff ff       	call   f010de0e <sys_rcr2>
f010e169:	e9 12 01 00 00       	jmp    f010e280 <syscall+0x449>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010e16e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e171:	0f b6 c0             	movzbl %al,%eax
f010e174:	83 ec 0c             	sub    $0xc,%esp
f010e177:	50                   	push   %eax
f010e178:	e8 a3 fc ff ff       	call   f010de20 <sys_bypassPageFault>
f010e17d:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e180:	b8 00 00 00 00       	mov    $0x0,%eax
f010e185:	e9 f6 00 00 00       	jmp    f010e280 <syscall+0x449>

	case SYS_rsttst:
		rsttst();
f010e18a:	e8 19 27 01 00       	call   f01208a8 <rsttst>
		return 0;
f010e18f:	b8 00 00 00 00       	mov    $0x0,%eax
f010e194:	e9 e7 00 00 00       	jmp    f010e280 <syscall+0x449>
	case SYS_inctst:
		inctst();
f010e199:	e8 52 27 01 00       	call   f01208f0 <inctst>
		return 0;
f010e19e:	b8 00 00 00 00       	mov    $0x0,%eax
f010e1a3:	e9 d8 00 00 00       	jmp    f010e280 <syscall+0x449>
	case SYS_chktst:
		chktst(a1);
f010e1a8:	83 ec 0c             	sub    $0xc,%esp
f010e1ab:	ff 75 0c             	pushl  0xc(%ebp)
f010e1ae:	e8 7f 28 01 00       	call   f0120a32 <chktst>
f010e1b3:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e1b6:	b8 00 00 00 00       	mov    $0x0,%eax
f010e1bb:	e9 c0 00 00 00       	jmp    f010e280 <syscall+0x449>
	case SYS_gettst:
		return gettst();
f010e1c0:	e8 5f 27 01 00       	call   f0120924 <gettst>
f010e1c5:	e9 b6 00 00 00       	jmp    f010e280 <syscall+0x449>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010e1ca:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010e1cd:	8b 45 18             	mov    0x18(%ebp),%eax
f010e1d0:	0f be c0             	movsbl %al,%eax
f010e1d3:	83 ec 0c             	sub    $0xc,%esp
f010e1d6:	52                   	push   %edx
f010e1d7:	50                   	push   %eax
f010e1d8:	ff 75 14             	pushl  0x14(%ebp)
f010e1db:	ff 75 10             	pushl  0x10(%ebp)
f010e1de:	ff 75 0c             	pushl  0xc(%ebp)
f010e1e1:	e8 48 27 01 00       	call   f012092e <tst>
f010e1e6:	83 c4 20             	add    $0x20,%esp
		return 0;
f010e1e9:	b8 00 00 00 00       	mov    $0x0,%eax
f010e1ee:	e9 8d 00 00 00       	jmp    f010e280 <syscall+0x449>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010e1f3:	e8 f1 f9 ff ff       	call   f010dbe9 <sys_get_heap_strategy>
f010e1f8:	e9 83 00 00 00       	jmp    f010e280 <syscall+0x449>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010e1fd:	83 ec 0c             	sub    $0xc,%esp
f010e200:	ff 75 0c             	pushl  0xc(%ebp)
f010e203:	e8 eb f9 ff ff       	call   f010dbf3 <sys_set_uheap_strategy>
f010e208:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e20b:	b8 00 00 00 00       	mov    $0x0,%eax
f010e210:	eb 6e                	jmp    f010e280 <syscall+0x449>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010e212:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010e215:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010e218:	8b 55 10             	mov    0x10(%ebp),%edx
f010e21b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e21e:	53                   	push   %ebx
f010e21f:	51                   	push   %ecx
f010e220:	52                   	push   %edx
f010e221:	50                   	push   %eax
f010e222:	e8 98 4b 00 00       	call   f0112dbf <sys_check_LRU_lists>
f010e227:	83 c4 10             	add    $0x10,%esp
f010e22a:	eb 54                	jmp    f010e280 <syscall+0x449>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010e22c:	8b 55 10             	mov    0x10(%ebp),%edx
f010e22f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e232:	83 ec 08             	sub    $0x8,%esp
f010e235:	52                   	push   %edx
f010e236:	50                   	push   %eax
f010e237:	e8 45 4d 00 00       	call   f0112f81 <sys_check_LRU_lists_free>
f010e23c:	83 c4 10             	add    $0x10,%esp
f010e23f:	eb 3f                	jmp    f010e280 <syscall+0x449>

	case SYS_check_WS_list:
		return sys_check_WS_list((uint32*)a1, (int)a2, (uint32)a3, (bool)a4);
f010e241:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010e244:	8b 55 10             	mov    0x10(%ebp),%edx
f010e247:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e24a:	51                   	push   %ecx
f010e24b:	ff 75 14             	pushl  0x14(%ebp)
f010e24e:	52                   	push   %edx
f010e24f:	50                   	push   %eax
f010e250:	e8 b9 4e 00 00       	call   f011310e <sys_check_WS_list>
f010e255:	83 c4 10             	add    $0x10,%esp
f010e258:	eb 26                	jmp    f010e280 <syscall+0x449>

	case SYS_utilities:
		sys_utilities((char*)a1, (int)a2);
f010e25a:	8b 55 10             	mov    0x10(%ebp),%edx
f010e25d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e260:	83 ec 08             	sub    $0x8,%esp
f010e263:	52                   	push   %edx
f010e264:	50                   	push   %eax
f010e265:	e8 c9 29 01 00       	call   f0120c33 <sys_utilities>
f010e26a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e26d:	b8 00 00 00 00       	mov    $0x0,%eax
f010e272:	eb 0c                	jmp    f010e280 <syscall+0x449>

	case NSYSCALLS:
		return 	-E_INVAL;
f010e274:	b8 03 00 00 00       	mov    $0x3,%eax
f010e279:	eb 05                	jmp    f010e280 <syscall+0x449>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010e27b:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010e280:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010e283:	5b                   	pop    %ebx
f010e284:	5e                   	pop    %esi
f010e285:	5d                   	pop    %ebp
f010e286:	c3                   	ret    

f010e287 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010e287:	55                   	push   %ebp
f010e288:	89 e5                	mov    %esp,%ebp
f010e28a:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010e28d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e290:	8b 00                	mov    (%eax),%eax
f010e292:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010e295:	8b 45 10             	mov    0x10(%ebp),%eax
f010e298:	8b 00                	mov    (%eax),%eax
f010e29a:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010e29d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010e2a4:	e9 ca 00 00 00       	jmp    f010e373 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010e2a9:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010e2ac:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010e2af:	01 d0                	add    %edx,%eax
f010e2b1:	89 c2                	mov    %eax,%edx
f010e2b3:	c1 ea 1f             	shr    $0x1f,%edx
f010e2b6:	01 d0                	add    %edx,%eax
f010e2b8:	d1 f8                	sar    %eax
f010e2ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010e2bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e2c0:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010e2c3:	eb 03                	jmp    f010e2c8 <stab_binsearch+0x41>
			m--;
f010e2c5:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010e2c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e2cb:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010e2ce:	7c 1e                	jl     f010e2ee <stab_binsearch+0x67>
f010e2d0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e2d3:	89 d0                	mov    %edx,%eax
f010e2d5:	01 c0                	add    %eax,%eax
f010e2d7:	01 d0                	add    %edx,%eax
f010e2d9:	c1 e0 02             	shl    $0x2,%eax
f010e2dc:	89 c2                	mov    %eax,%edx
f010e2de:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2e1:	01 d0                	add    %edx,%eax
f010e2e3:	8a 40 04             	mov    0x4(%eax),%al
f010e2e6:	0f b6 c0             	movzbl %al,%eax
f010e2e9:	3b 45 14             	cmp    0x14(%ebp),%eax
f010e2ec:	75 d7                	jne    f010e2c5 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010e2ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e2f1:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010e2f4:	7d 09                	jge    f010e2ff <stab_binsearch+0x78>
			l = true_m + 1;
f010e2f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e2f9:	40                   	inc    %eax
f010e2fa:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010e2fd:	eb 74                	jmp    f010e373 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010e2ff:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010e306:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e309:	89 d0                	mov    %edx,%eax
f010e30b:	01 c0                	add    %eax,%eax
f010e30d:	01 d0                	add    %edx,%eax
f010e30f:	c1 e0 02             	shl    $0x2,%eax
f010e312:	89 c2                	mov    %eax,%edx
f010e314:	8b 45 08             	mov    0x8(%ebp),%eax
f010e317:	01 d0                	add    %edx,%eax
f010e319:	8b 40 08             	mov    0x8(%eax),%eax
f010e31c:	3b 45 18             	cmp    0x18(%ebp),%eax
f010e31f:	73 11                	jae    f010e332 <stab_binsearch+0xab>
			*region_left = m;
f010e321:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e324:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e327:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010e329:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e32c:	40                   	inc    %eax
f010e32d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010e330:	eb 41                	jmp    f010e373 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010e332:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e335:	89 d0                	mov    %edx,%eax
f010e337:	01 c0                	add    %eax,%eax
f010e339:	01 d0                	add    %edx,%eax
f010e33b:	c1 e0 02             	shl    $0x2,%eax
f010e33e:	89 c2                	mov    %eax,%edx
f010e340:	8b 45 08             	mov    0x8(%ebp),%eax
f010e343:	01 d0                	add    %edx,%eax
f010e345:	8b 40 08             	mov    0x8(%eax),%eax
f010e348:	3b 45 18             	cmp    0x18(%ebp),%eax
f010e34b:	76 14                	jbe    f010e361 <stab_binsearch+0xda>
			*region_right = m - 1;
f010e34d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e350:	8d 50 ff             	lea    -0x1(%eax),%edx
f010e353:	8b 45 10             	mov    0x10(%ebp),%eax
f010e356:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010e358:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e35b:	48                   	dec    %eax
f010e35c:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010e35f:	eb 12                	jmp    f010e373 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010e361:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e364:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e367:	89 10                	mov    %edx,(%eax)
			l = m;
f010e369:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e36c:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010e36f:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010e373:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010e376:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010e379:	0f 8e 2a ff ff ff    	jle    f010e2a9 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010e37f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e383:	75 0f                	jne    f010e394 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010e385:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e388:	8b 00                	mov    (%eax),%eax
f010e38a:	8d 50 ff             	lea    -0x1(%eax),%edx
f010e38d:	8b 45 10             	mov    0x10(%ebp),%eax
f010e390:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010e392:	eb 3d                	jmp    f010e3d1 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010e394:	8b 45 10             	mov    0x10(%ebp),%eax
f010e397:	8b 00                	mov    (%eax),%eax
f010e399:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010e39c:	eb 03                	jmp    f010e3a1 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010e39e:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010e3a1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3a4:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010e3a6:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010e3a9:	7d 1e                	jge    f010e3c9 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010e3ab:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010e3ae:	89 d0                	mov    %edx,%eax
f010e3b0:	01 c0                	add    %eax,%eax
f010e3b2:	01 d0                	add    %edx,%eax
f010e3b4:	c1 e0 02             	shl    $0x2,%eax
f010e3b7:	89 c2                	mov    %eax,%edx
f010e3b9:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3bc:	01 d0                	add    %edx,%eax
f010e3be:	8a 40 04             	mov    0x4(%eax),%al
f010e3c1:	0f b6 c0             	movzbl %al,%eax
f010e3c4:	3b 45 14             	cmp    0x14(%ebp),%eax
f010e3c7:	75 d5                	jne    f010e39e <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010e3c9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3cc:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010e3cf:	89 10                	mov    %edx,(%eax)
	}
}
f010e3d1:	90                   	nop
f010e3d2:	c9                   	leave  
f010e3d3:	c3                   	ret    

f010e3d4 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010e3d4:	55                   	push   %ebp
f010e3d5:	89 e5                	mov    %esp,%ebp
f010e3d7:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010e3da:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3dd:	c7 00 3c 8c 12 f0    	movl   $0xf0128c3c,(%eax)
	info->eip_line = 0;
f010e3e3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3e6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010e3ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3f0:	c7 40 08 3c 8c 12 f0 	movl   $0xf0128c3c,0x8(%eax)
	info->eip_fn_namelen = 9;
f010e3f7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3fa:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010e401:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e404:	8b 55 08             	mov    0x8(%ebp),%edx
f010e407:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010e40a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e40d:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010e414:	8b 45 08             	mov    0x8(%ebp),%eax
f010e417:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010e41c:	76 1e                	jbe    f010e43c <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010e41e:	c7 45 f4 a8 ff 12 f0 	movl   $0xf012ffa8,-0xc(%ebp)
		stab_end = __STAB_END__;
f010e425:	c7 45 f0 14 36 16 f0 	movl   $0xf0163614,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010e42c:	c7 45 ec 15 36 16 f0 	movl   $0xf0163615,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010e433:	c7 45 e8 cf 4d 17 f0 	movl   $0xf0174dcf,-0x18(%ebp)
f010e43a:	eb 2a                	jmp    f010e466 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010e43c:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010e443:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e446:	8b 00                	mov    (%eax),%eax
f010e448:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010e44b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e44e:	8b 40 04             	mov    0x4(%eax),%eax
f010e451:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010e454:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e457:	8b 40 08             	mov    0x8(%eax),%eax
f010e45a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010e45d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e460:	8b 40 0c             	mov    0xc(%eax),%eax
f010e463:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010e466:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e469:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e46c:	76 0a                	jbe    f010e478 <debuginfo_eip+0xa4>
f010e46e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e471:	48                   	dec    %eax
f010e472:	8a 00                	mov    (%eax),%al
f010e474:	84 c0                	test   %al,%al
f010e476:	74 0a                	je     f010e482 <debuginfo_eip+0xae>
		return -1;
f010e478:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010e47d:	e9 01 02 00 00       	jmp    f010e683 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010e482:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010e489:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e48c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e48f:	29 c2                	sub    %eax,%edx
f010e491:	89 d0                	mov    %edx,%eax
f010e493:	c1 f8 02             	sar    $0x2,%eax
f010e496:	89 c2                	mov    %eax,%edx
f010e498:	89 d0                	mov    %edx,%eax
f010e49a:	c1 e0 02             	shl    $0x2,%eax
f010e49d:	01 d0                	add    %edx,%eax
f010e49f:	c1 e0 02             	shl    $0x2,%eax
f010e4a2:	01 d0                	add    %edx,%eax
f010e4a4:	c1 e0 02             	shl    $0x2,%eax
f010e4a7:	01 d0                	add    %edx,%eax
f010e4a9:	89 c1                	mov    %eax,%ecx
f010e4ab:	c1 e1 08             	shl    $0x8,%ecx
f010e4ae:	01 c8                	add    %ecx,%eax
f010e4b0:	89 c1                	mov    %eax,%ecx
f010e4b2:	c1 e1 10             	shl    $0x10,%ecx
f010e4b5:	01 c8                	add    %ecx,%eax
f010e4b7:	01 c0                	add    %eax,%eax
f010e4b9:	01 d0                	add    %edx,%eax
f010e4bb:	48                   	dec    %eax
f010e4bc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010e4bf:	ff 75 08             	pushl  0x8(%ebp)
f010e4c2:	6a 64                	push   $0x64
f010e4c4:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010e4c7:	50                   	push   %eax
f010e4c8:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e4cb:	50                   	push   %eax
f010e4cc:	ff 75 f4             	pushl  -0xc(%ebp)
f010e4cf:	e8 b3 fd ff ff       	call   f010e287 <stab_binsearch>
f010e4d4:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010e4d7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e4da:	85 c0                	test   %eax,%eax
f010e4dc:	75 0a                	jne    f010e4e8 <debuginfo_eip+0x114>
		return -1;
f010e4de:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010e4e3:	e9 9b 01 00 00       	jmp    f010e683 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010e4e8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e4eb:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010e4ee:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e4f1:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010e4f4:	ff 75 08             	pushl  0x8(%ebp)
f010e4f7:	6a 24                	push   $0x24
f010e4f9:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010e4fc:	50                   	push   %eax
f010e4fd:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010e500:	50                   	push   %eax
f010e501:	ff 75 f4             	pushl  -0xc(%ebp)
f010e504:	e8 7e fd ff ff       	call   f010e287 <stab_binsearch>
f010e509:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010e50c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010e50f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e512:	39 c2                	cmp    %eax,%edx
f010e514:	0f 8f 86 00 00 00    	jg     f010e5a0 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010e51a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e51d:	89 c2                	mov    %eax,%edx
f010e51f:	89 d0                	mov    %edx,%eax
f010e521:	01 c0                	add    %eax,%eax
f010e523:	01 d0                	add    %edx,%eax
f010e525:	c1 e0 02             	shl    $0x2,%eax
f010e528:	89 c2                	mov    %eax,%edx
f010e52a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e52d:	01 d0                	add    %edx,%eax
f010e52f:	8b 00                	mov    (%eax),%eax
f010e531:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010e534:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e537:	29 d1                	sub    %edx,%ecx
f010e539:	89 ca                	mov    %ecx,%edx
f010e53b:	39 d0                	cmp    %edx,%eax
f010e53d:	73 22                	jae    f010e561 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010e53f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e542:	89 c2                	mov    %eax,%edx
f010e544:	89 d0                	mov    %edx,%eax
f010e546:	01 c0                	add    %eax,%eax
f010e548:	01 d0                	add    %edx,%eax
f010e54a:	c1 e0 02             	shl    $0x2,%eax
f010e54d:	89 c2                	mov    %eax,%edx
f010e54f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e552:	01 d0                	add    %edx,%eax
f010e554:	8b 10                	mov    (%eax),%edx
f010e556:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e559:	01 c2                	add    %eax,%edx
f010e55b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e55e:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010e561:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e564:	89 c2                	mov    %eax,%edx
f010e566:	89 d0                	mov    %edx,%eax
f010e568:	01 c0                	add    %eax,%eax
f010e56a:	01 d0                	add    %edx,%eax
f010e56c:	c1 e0 02             	shl    $0x2,%eax
f010e56f:	89 c2                	mov    %eax,%edx
f010e571:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e574:	01 d0                	add    %edx,%eax
f010e576:	8b 50 08             	mov    0x8(%eax),%edx
f010e579:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e57c:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010e57f:	8b 55 08             	mov    0x8(%ebp),%edx
f010e582:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e585:	8b 40 10             	mov    0x10(%eax),%eax
f010e588:	29 c2                	sub    %eax,%edx
f010e58a:	89 d0                	mov    %edx,%eax
f010e58c:	c1 f8 02             	sar    $0x2,%eax
f010e58f:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010e592:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e595:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010e598:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e59b:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010e59e:	eb 15                	jmp    f010e5b5 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010e5a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e5a3:	8b 55 08             	mov    0x8(%ebp),%edx
f010e5a6:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010e5a9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e5ac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010e5af:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e5b2:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010e5b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e5b8:	8b 40 08             	mov    0x8(%eax),%eax
f010e5bb:	83 ec 08             	sub    $0x8,%esp
f010e5be:	6a 3a                	push   $0x3a
f010e5c0:	50                   	push   %eax
f010e5c1:	e8 34 40 01 00       	call   f01225fa <strfind>
f010e5c6:	83 c4 10             	add    $0x10,%esp
f010e5c9:	89 c2                	mov    %eax,%edx
f010e5cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e5ce:	8b 40 08             	mov    0x8(%eax),%eax
f010e5d1:	29 c2                	sub    %eax,%edx
f010e5d3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e5d6:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010e5d9:	eb 03                	jmp    f010e5de <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010e5db:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010e5de:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e5e1:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010e5e4:	7c 4e                	jl     f010e634 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010e5e6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e5e9:	89 d0                	mov    %edx,%eax
f010e5eb:	01 c0                	add    %eax,%eax
f010e5ed:	01 d0                	add    %edx,%eax
f010e5ef:	c1 e0 02             	shl    $0x2,%eax
f010e5f2:	89 c2                	mov    %eax,%edx
f010e5f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e5f7:	01 d0                	add    %edx,%eax
f010e5f9:	8a 40 04             	mov    0x4(%eax),%al
f010e5fc:	3c 84                	cmp    $0x84,%al
f010e5fe:	74 34                	je     f010e634 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010e600:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e603:	89 d0                	mov    %edx,%eax
f010e605:	01 c0                	add    %eax,%eax
f010e607:	01 d0                	add    %edx,%eax
f010e609:	c1 e0 02             	shl    $0x2,%eax
f010e60c:	89 c2                	mov    %eax,%edx
f010e60e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e611:	01 d0                	add    %edx,%eax
f010e613:	8a 40 04             	mov    0x4(%eax),%al
f010e616:	3c 64                	cmp    $0x64,%al
f010e618:	75 c1                	jne    f010e5db <debuginfo_eip+0x207>
f010e61a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e61d:	89 d0                	mov    %edx,%eax
f010e61f:	01 c0                	add    %eax,%eax
f010e621:	01 d0                	add    %edx,%eax
f010e623:	c1 e0 02             	shl    $0x2,%eax
f010e626:	89 c2                	mov    %eax,%edx
f010e628:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e62b:	01 d0                	add    %edx,%eax
f010e62d:	8b 40 08             	mov    0x8(%eax),%eax
f010e630:	85 c0                	test   %eax,%eax
f010e632:	74 a7                	je     f010e5db <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010e634:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e637:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010e63a:	7c 42                	jl     f010e67e <debuginfo_eip+0x2aa>
f010e63c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e63f:	89 d0                	mov    %edx,%eax
f010e641:	01 c0                	add    %eax,%eax
f010e643:	01 d0                	add    %edx,%eax
f010e645:	c1 e0 02             	shl    $0x2,%eax
f010e648:	89 c2                	mov    %eax,%edx
f010e64a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e64d:	01 d0                	add    %edx,%eax
f010e64f:	8b 00                	mov    (%eax),%eax
f010e651:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010e654:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e657:	29 d1                	sub    %edx,%ecx
f010e659:	89 ca                	mov    %ecx,%edx
f010e65b:	39 d0                	cmp    %edx,%eax
f010e65d:	73 1f                	jae    f010e67e <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010e65f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e662:	89 d0                	mov    %edx,%eax
f010e664:	01 c0                	add    %eax,%eax
f010e666:	01 d0                	add    %edx,%eax
f010e668:	c1 e0 02             	shl    $0x2,%eax
f010e66b:	89 c2                	mov    %eax,%edx
f010e66d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e670:	01 d0                	add    %edx,%eax
f010e672:	8b 10                	mov    (%eax),%edx
f010e674:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e677:	01 c2                	add    %eax,%edx
f010e679:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e67c:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010e67e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e683:	c9                   	leave  
f010e684:	c3                   	ret    

f010e685 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010e685:	55                   	push   %ebp
f010e686:	89 e5                	mov    %esp,%ebp
f010e688:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010e68b:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010e68f:	74 1c                	je     f010e6ad <setPageReplacmentAlgorithmLRU+0x28>
f010e691:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e695:	74 16                	je     f010e6ad <setPageReplacmentAlgorithmLRU+0x28>
f010e697:	68 48 8c 12 f0       	push   $0xf0128c48
f010e69c:	68 92 8c 12 f0       	push   $0xf0128c92
f010e6a1:	6a 19                	push   $0x19
f010e6a3:	68 a7 8c 12 f0       	push   $0xf0128ca7
f010e6a8:	e8 6d 1c ff ff       	call   f010031a <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010e6ad:	8b 45 08             	mov    0x8(%ebp),%eax
f010e6b0:	a3 08 1b 5a f0       	mov    %eax,0xf05a1b08
}
f010e6b5:	90                   	nop
f010e6b6:	c9                   	leave  
f010e6b7:	c3                   	ret    

f010e6b8 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010e6b8:	55                   	push   %ebp
f010e6b9:	89 e5                	mov    %esp,%ebp
f010e6bb:	c7 05 08 1b 5a f0 03 	movl   $0x3,0xf05a1b08
f010e6c2:	00 00 00 
f010e6c5:	90                   	nop
f010e6c6:	5d                   	pop    %ebp
f010e6c7:	c3                   	ret    

f010e6c8 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010e6c8:	55                   	push   %ebp
f010e6c9:	89 e5                	mov    %esp,%ebp
f010e6cb:	c7 05 08 1b 5a f0 04 	movl   $0x4,0xf05a1b08
f010e6d2:	00 00 00 
f010e6d5:	90                   	nop
f010e6d6:	5d                   	pop    %ebp
f010e6d7:	c3                   	ret    

f010e6d8 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010e6d8:	55                   	push   %ebp
f010e6d9:	89 e5                	mov    %esp,%ebp
f010e6db:	c7 05 08 1b 5a f0 05 	movl   $0x5,0xf05a1b08
f010e6e2:	00 00 00 
f010e6e5:	90                   	nop
f010e6e6:	5d                   	pop    %ebp
f010e6e7:	c3                   	ret    

f010e6e8 <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010e6e8:	55                   	push   %ebp
f010e6e9:	89 e5                	mov    %esp,%ebp
f010e6eb:	c7 05 08 1b 5a f0 07 	movl   $0x7,0xf05a1b08
f010e6f2:	00 00 00 
f010e6f5:	90                   	nop
f010e6f6:	5d                   	pop    %ebp
f010e6f7:	c3                   	ret    

f010e6f8 <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010e6f8:	55                   	push   %ebp
f010e6f9:	89 e5                	mov    %esp,%ebp
f010e6fb:	c7 05 08 1b 5a f0 06 	movl   $0x6,0xf05a1b08
f010e702:	00 00 00 
f010e705:	8b 45 08             	mov    0x8(%ebp),%eax
f010e708:	a3 a0 ee 59 f0       	mov    %eax,0xf059eea0
f010e70d:	90                   	nop
f010e70e:	5d                   	pop    %ebp
f010e70f:	c3                   	ret    

f010e710 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010e710:	55                   	push   %ebp
f010e711:	89 e5                	mov    %esp,%ebp
f010e713:	8b 15 08 1b 5a f0    	mov    0xf05a1b08,%edx
f010e719:	8b 45 08             	mov    0x8(%ebp),%eax
f010e71c:	39 c2                	cmp    %eax,%edx
f010e71e:	0f 94 c0             	sete   %al
f010e721:	0f b6 c0             	movzbl %al,%eax
f010e724:	5d                   	pop    %ebp
f010e725:	c3                   	ret    

f010e726 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010e726:	55                   	push   %ebp
f010e727:	89 e5                	mov    %esp,%ebp
f010e729:	a1 08 1b 5a f0       	mov    0xf05a1b08,%eax
f010e72e:	83 f8 03             	cmp    $0x3,%eax
f010e731:	75 07                	jne    f010e73a <isPageReplacmentAlgorithmCLOCK+0x14>
f010e733:	b8 01 00 00 00       	mov    $0x1,%eax
f010e738:	eb 05                	jmp    f010e73f <isPageReplacmentAlgorithmCLOCK+0x19>
f010e73a:	b8 00 00 00 00       	mov    $0x0,%eax
f010e73f:	5d                   	pop    %ebp
f010e740:	c3                   	ret    

f010e741 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010e741:	55                   	push   %ebp
f010e742:	89 e5                	mov    %esp,%ebp
f010e744:	a1 08 1b 5a f0       	mov    0xf05a1b08,%eax
f010e749:	83 f8 04             	cmp    $0x4,%eax
f010e74c:	75 07                	jne    f010e755 <isPageReplacmentAlgorithmFIFO+0x14>
f010e74e:	b8 01 00 00 00       	mov    $0x1,%eax
f010e753:	eb 05                	jmp    f010e75a <isPageReplacmentAlgorithmFIFO+0x19>
f010e755:	b8 00 00 00 00       	mov    $0x0,%eax
f010e75a:	5d                   	pop    %ebp
f010e75b:	c3                   	ret    

f010e75c <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010e75c:	55                   	push   %ebp
f010e75d:	89 e5                	mov    %esp,%ebp
f010e75f:	a1 08 1b 5a f0       	mov    0xf05a1b08,%eax
f010e764:	83 f8 05             	cmp    $0x5,%eax
f010e767:	75 07                	jne    f010e770 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010e769:	b8 01 00 00 00       	mov    $0x1,%eax
f010e76e:	eb 05                	jmp    f010e775 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010e770:	b8 00 00 00 00       	mov    $0x0,%eax
f010e775:	5d                   	pop    %ebp
f010e776:	c3                   	ret    

f010e777 <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010e777:	55                   	push   %ebp
f010e778:	89 e5                	mov    %esp,%ebp
f010e77a:	a1 08 1b 5a f0       	mov    0xf05a1b08,%eax
f010e77f:	83 f8 07             	cmp    $0x7,%eax
f010e782:	75 07                	jne    f010e78b <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010e784:	b8 01 00 00 00       	mov    $0x1,%eax
f010e789:	eb 05                	jmp    f010e790 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010e78b:	b8 00 00 00 00       	mov    $0x0,%eax
f010e790:	5d                   	pop    %ebp
f010e791:	c3                   	ret    

f010e792 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010e792:	55                   	push   %ebp
f010e793:	89 e5                	mov    %esp,%ebp
f010e795:	a1 08 1b 5a f0       	mov    0xf05a1b08,%eax
f010e79a:	83 f8 06             	cmp    $0x6,%eax
f010e79d:	75 07                	jne    f010e7a6 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010e79f:	b8 01 00 00 00       	mov    $0x1,%eax
f010e7a4:	eb 05                	jmp    f010e7ab <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010e7a6:	b8 00 00 00 00       	mov    $0x0,%eax
f010e7ab:	5d                   	pop    %ebp
f010e7ac:	c3                   	ret    

f010e7ad <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010e7ad:	55                   	push   %ebp
f010e7ae:	89 e5                	mov    %esp,%ebp
f010e7b0:	8b 45 08             	mov    0x8(%ebp),%eax
f010e7b3:	a3 b8 18 5a f0       	mov    %eax,0xf05a18b8
f010e7b8:	90                   	nop
f010e7b9:	5d                   	pop    %ebp
f010e7ba:	c3                   	ret    

f010e7bb <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010e7bb:	55                   	push   %ebp
f010e7bc:	89 e5                	mov    %esp,%ebp
f010e7be:	a1 b8 18 5a f0       	mov    0xf05a18b8,%eax
f010e7c3:	5d                   	pop    %ebp
f010e7c4:	c3                   	ret    

f010e7c5 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010e7c5:	55                   	push   %ebp
f010e7c6:	89 e5                	mov    %esp,%ebp
f010e7c8:	8b 45 08             	mov    0x8(%ebp),%eax
f010e7cb:	a3 74 1b 5a f0       	mov    %eax,0xf05a1b74
f010e7d0:	90                   	nop
f010e7d1:	5d                   	pop    %ebp
f010e7d2:	c3                   	ret    

f010e7d3 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010e7d3:	55                   	push   %ebp
f010e7d4:	89 e5                	mov    %esp,%ebp
f010e7d6:	a1 74 1b 5a f0       	mov    0xf05a1b74,%eax
f010e7db:	5d                   	pop    %ebp
f010e7dc:	c3                   	ret    

f010e7dd <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010e7dd:	55                   	push   %ebp
f010e7de:	89 e5                	mov    %esp,%ebp
f010e7e0:	8b 45 08             	mov    0x8(%ebp),%eax
f010e7e3:	a3 10 1c 5a f0       	mov    %eax,0xf05a1c10
f010e7e8:	90                   	nop
f010e7e9:	5d                   	pop    %ebp
f010e7ea:	c3                   	ret    

f010e7eb <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010e7eb:	55                   	push   %ebp
f010e7ec:	89 e5                	mov    %esp,%ebp
f010e7ee:	a1 10 1c 5a f0       	mov    0xf05a1c10,%eax
f010e7f3:	5d                   	pop    %ebp
f010e7f4:	c3                   	ret    

f010e7f5 <fault_handler>:
uint32 before_last_fault_va = 0;
int8 num_repeated_fault  = 0;

struct Env* last_faulted_env = NULL;
void fault_handler(struct Trapframe *tf)
{
f010e7f5:	55                   	push   %ebp
f010e7f6:	89 e5                	mov    %esp,%ebp
f010e7f8:	83 ec 28             	sub    $0x28,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010e7fb:	0f 20 d0             	mov    %cr2,%eax
f010e7fe:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f010e801:	8b 45 d8             	mov    -0x28(%ebp),%eax
	/******************************************************/
	// Read processor's CR2 register to find the faulting address
	uint32 fault_va = rcr2();
f010e804:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//	print_trapframe(tf);
	/******************************************************/

	//If same fault va for 3 times, then panic
	//UPDATE: 3 FAULTS MUST come from the same environment (or the kernel)
	struct Env* cur_env = get_cpu_proc();
f010e807:	e8 64 bf ff ff       	call   f010a770 <get_cpu_proc>
f010e80c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (last_fault_va == fault_va && last_faulted_env == cur_env)
f010e80f:	a1 2c ec 59 f0       	mov    0xf059ec2c,%eax
f010e814:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e817:	75 50                	jne    f010e869 <fault_handler+0x74>
f010e819:	a1 38 ec 59 f0       	mov    0xf059ec38,%eax
f010e81e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010e821:	75 46                	jne    f010e869 <fault_handler+0x74>
	{
		num_repeated_fault++ ;
f010e823:	a0 34 ec 59 f0       	mov    0xf059ec34,%al
f010e828:	40                   	inc    %eax
f010e829:	a2 34 ec 59 f0       	mov    %al,0xf059ec34
		if (num_repeated_fault == 3)
f010e82e:	a0 34 ec 59 f0       	mov    0xf059ec34,%al
f010e833:	3c 03                	cmp    $0x3,%al
f010e835:	75 4d                	jne    f010e884 <fault_handler+0x8f>
		{
			print_trapframe(tf);
f010e837:	83 ec 0c             	sub    $0xc,%esp
f010e83a:	ff 75 08             	pushl  0x8(%ebp)
f010e83d:	e8 73 e9 ff ff       	call   f010d1b5 <print_trapframe>
f010e842:	83 c4 10             	add    $0x10,%esp
			panic("Failed to handle fault! fault @ at va = %x from eip = %x causes va (%x) to be faulted for 3 successive times\n", before_last_fault_va, before_last_eip, fault_va);
f010e845:	8b 15 28 ec 59 f0    	mov    0xf059ec28,%edx
f010e84b:	a1 30 ec 59 f0       	mov    0xf059ec30,%eax
f010e850:	83 ec 08             	sub    $0x8,%esp
f010e853:	ff 75 ec             	pushl  -0x14(%ebp)
f010e856:	52                   	push   %edx
f010e857:	50                   	push   %eax
f010e858:	68 c4 8c 12 f0       	push   $0xf0128cc4
f010e85d:	6a 57                	push   $0x57
f010e85f:	68 a7 8c 12 f0       	push   $0xf0128ca7
f010e864:	e8 b1 1a ff ff       	call   f010031a <_panic>
		}
	}
	else
	{
		before_last_fault_va = last_fault_va;
f010e869:	a1 2c ec 59 f0       	mov    0xf059ec2c,%eax
f010e86e:	a3 30 ec 59 f0       	mov    %eax,0xf059ec30
		before_last_eip = last_eip;
f010e873:	a1 24 ec 59 f0       	mov    0xf059ec24,%eax
f010e878:	a3 28 ec 59 f0       	mov    %eax,0xf059ec28
		num_repeated_fault = 0;
f010e87d:	c6 05 34 ec 59 f0 00 	movb   $0x0,0xf059ec34
	}
	last_eip = (uint32)tf->tf_eip;
f010e884:	8b 45 08             	mov    0x8(%ebp),%eax
f010e887:	8b 40 30             	mov    0x30(%eax),%eax
f010e88a:	a3 24 ec 59 f0       	mov    %eax,0xf059ec24
	last_fault_va = fault_va ;
f010e88f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e892:	a3 2c ec 59 f0       	mov    %eax,0xf059ec2c
	last_faulted_env = cur_env;
f010e897:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e89a:	a3 38 ec 59 f0       	mov    %eax,0xf059ec38
	/******************************************************/
	//2017: Check stack overflow for Kernel
	int userTrap = 0;
f010e89f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010e8a6:	8b 45 08             	mov    0x8(%ebp),%eax
f010e8a9:	8b 40 34             	mov    0x34(%eax),%eax
f010e8ac:	0f b7 c0             	movzwl %ax,%eax
f010e8af:	83 e0 03             	and    $0x3,%eax
f010e8b2:	83 f8 03             	cmp    $0x3,%eax
f010e8b5:	75 07                	jne    f010e8be <fault_handler+0xc9>
		userTrap = 1;
f010e8b7:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	}
	if (!userTrap)
f010e8be:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e8c2:	0f 85 a9 00 00 00    	jne    f010e971 <fault_handler+0x17c>
	{
		struct cpu* c = mycpu();
f010e8c8:	e8 30 88 ff ff       	call   f01070fd <mycpu>
f010e8cd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		//cprintf("trap from KERNEL\n");
		if (cur_env && fault_va >= (uint32)cur_env->kstack && fault_va < (uint32)cur_env->kstack + PAGE_SIZE)
f010e8d0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010e8d4:	74 2f                	je     f010e905 <fault_handler+0x110>
f010e8d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e8d9:	8b 40 70             	mov    0x70(%eax),%eax
f010e8dc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e8df:	77 24                	ja     f010e905 <fault_handler+0x110>
f010e8e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e8e4:	8b 40 70             	mov    0x70(%eax),%eax
f010e8e7:	05 00 10 00 00       	add    $0x1000,%eax
f010e8ec:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e8ef:	76 14                	jbe    f010e905 <fault_handler+0x110>
			panic("User Kernel Stack: overflow exception!");
f010e8f1:	83 ec 04             	sub    $0x4,%esp
f010e8f4:	68 34 8d 12 f0       	push   $0xf0128d34
f010e8f9:	6a 6e                	push   $0x6e
f010e8fb:	68 a7 8c 12 f0       	push   $0xf0128ca7
f010e900:	e8 15 1a ff ff       	call   f010031a <_panic>
		else if (fault_va >= (uint32)c->stack && fault_va < (uint32)c->stack + PAGE_SIZE)
f010e905:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e908:	8b 40 08             	mov    0x8(%eax),%eax
f010e90b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e90e:	0f 87 83 00 00 00    	ja     f010e997 <fault_handler+0x1a2>
f010e914:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e917:	8b 40 08             	mov    0x8(%eax),%eax
f010e91a:	05 00 10 00 00       	add    $0x1000,%eax
f010e91f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e922:	76 73                	jbe    f010e997 <fault_handler+0x1a2>
			panic("Sched Kernel Stack of CPU #%d: overflow exception!", c - CPUS);
f010e924:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e927:	ba a0 15 5a f0       	mov    $0xf05a15a0,%edx
f010e92c:	29 d0                	sub    %edx,%eax
f010e92e:	c1 f8 03             	sar    $0x3,%eax
f010e931:	89 c2                	mov    %eax,%edx
f010e933:	89 d0                	mov    %edx,%eax
f010e935:	c1 e0 02             	shl    $0x2,%eax
f010e938:	01 d0                	add    %edx,%eax
f010e93a:	01 c0                	add    %eax,%eax
f010e93c:	01 d0                	add    %edx,%eax
f010e93e:	c1 e0 03             	shl    $0x3,%eax
f010e941:	01 d0                	add    %edx,%eax
f010e943:	89 c1                	mov    %eax,%ecx
f010e945:	c1 e1 0b             	shl    $0xb,%ecx
f010e948:	01 c8                	add    %ecx,%eax
f010e94a:	c1 e0 05             	shl    $0x5,%eax
f010e94d:	01 d0                	add    %edx,%eax
f010e94f:	c1 e0 02             	shl    $0x2,%eax
f010e952:	01 d0                	add    %edx,%eax
f010e954:	01 c0                	add    %eax,%eax
f010e956:	01 d0                	add    %edx,%eax
f010e958:	c1 e0 03             	shl    $0x3,%eax
f010e95b:	01 d0                	add    %edx,%eax
f010e95d:	f7 d8                	neg    %eax
f010e95f:	50                   	push   %eax
f010e960:	68 5c 8d 12 f0       	push   $0xf0128d5c
f010e965:	6a 70                	push   $0x70
f010e967:	68 a7 8c 12 f0       	push   $0xf0128ca7
f010e96c:	e8 a9 19 ff ff       	call   f010031a <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		//cprintf("trap from USER\n");
		if (fault_va >= USTACKTOP && fault_va < USER_TOP)
f010e971:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010e978:	76 1d                	jbe    f010e997 <fault_handler+0x1a2>
f010e97a:	81 7d ec ff ff bf ee 	cmpl   $0xeebfffff,-0x14(%ebp)
f010e981:	77 14                	ja     f010e997 <fault_handler+0x1a2>
			panic("User: stack underflow exception!");
f010e983:	83 ec 04             	sub    $0x4,%esp
f010e986:	68 90 8d 12 f0       	push   $0xf0128d90
f010e98b:	6a 7b                	push   $0x7b
f010e98d:	68 a7 8c 12 f0       	push   $0xf0128ca7
f010e992:	e8 83 19 ff ff       	call   f010031a <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	//cprintf("curenv = %x\n", curenv);
	struct Env* faulted_env = cur_env;
f010e997:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e99a:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (faulted_env == NULL)
f010e99d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010e9a1:	75 25                	jne    f010e9c8 <fault_handler+0x1d3>
	{
		print_trapframe(tf);
f010e9a3:	83 ec 0c             	sub    $0xc,%esp
f010e9a6:	ff 75 08             	pushl  0x8(%ebp)
f010e9a9:	e8 07 e8 ff ff       	call   f010d1b5 <print_trapframe>
f010e9ae:	83 c4 10             	add    $0x10,%esp
		panic("faulted env == NULL!");
f010e9b1:	83 ec 04             	sub    $0x4,%esp
f010e9b4:	68 b1 8d 12 f0       	push   $0xf0128db1
f010e9b9:	68 84 00 00 00       	push   $0x84
f010e9be:	68 a7 8c 12 f0       	push   $0xf0128ca7
f010e9c3:	e8 52 19 ff ff       	call   f010031a <_panic>
	}
	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010e9c8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e9cb:	8b 40 64             	mov    0x64(%eax),%eax
f010e9ce:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e9d1:	c1 ea 16             	shr    $0x16,%edx
f010e9d4:	c1 e2 02             	shl    $0x2,%edx
f010e9d7:	01 d0                	add    %edx,%eax
f010e9d9:	8b 00                	mov    (%eax),%eax
f010e9db:	83 e0 01             	and    $0x1,%eax
f010e9de:	85 c0                	test   %eax,%eax
f010e9e0:	75 28                	jne    f010ea0a <fault_handler+0x215>
	{
		// we have a table fault =============================================================
		//		cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		//		print_trapframe(tf);

		faulted_env->tableFaultsCounter ++ ;
f010e9e2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e9e5:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f010e9eb:	8d 50 01             	lea    0x1(%eax),%edx
f010e9ee:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e9f1:	89 90 44 da 01 00    	mov    %edx,0x1da44(%eax)

		table_fault_handler(faulted_env, fault_va);
f010e9f7:	83 ec 08             	sub    $0x8,%esp
f010e9fa:	ff 75 ec             	pushl  -0x14(%ebp)
f010e9fd:	ff 75 e0             	pushl  -0x20(%ebp)
f010ea00:	e8 8f 00 00 00       	call   f010ea94 <table_fault_handler>
f010ea05:	83 c4 10             	add    $0x10,%esp
f010ea08:	eb 7b                	jmp    f010ea85 <fault_handler+0x290>

			/*============================================================================================*/
		}

		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010ea0a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ea0d:	8b 40 64             	mov    0x64(%eax),%eax
f010ea10:	83 ec 08             	sub    $0x8,%esp
f010ea13:	ff 75 ec             	pushl  -0x14(%ebp)
f010ea16:	50                   	push   %eax
f010ea17:	e8 d0 a1 ff ff       	call   f0108bec <pt_get_page_permissions>
f010ea1c:	83 c4 10             	add    $0x10,%esp
f010ea1f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if (perms & PERM_PRESENT)
f010ea22:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ea25:	83 e0 01             	and    $0x1,%eax
f010ea28:	85 c0                	test   %eax,%eax
f010ea2a:	74 17                	je     f010ea43 <fault_handler+0x24e>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010ea2c:	ff 75 ec             	pushl  -0x14(%ebp)
f010ea2f:	68 c8 8d 12 f0       	push   $0xf0128dc8
f010ea34:	68 a1 00 00 00       	push   $0xa1
f010ea39:	68 a7 8c 12 f0       	push   $0xf0128ca7
f010ea3e:	e8 d7 18 ff ff       	call   f010031a <_panic>
		/*============================================================================================*/


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010ea43:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ea46:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f010ea4c:	8d 50 01             	lea    0x1(%eax),%edx
f010ea4f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ea52:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)

		//		cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//		cprintf("\nPage working set BEFORE fault handler...\n");
		//		env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010ea58:	e8 76 fd ff ff       	call   f010e7d3 <isBufferingEnabled>
f010ea5d:	84 c0                	test   %al,%al
f010ea5f:	74 13                	je     f010ea74 <fault_handler+0x27f>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010ea61:	83 ec 08             	sub    $0x8,%esp
f010ea64:	ff 75 ec             	pushl  -0x14(%ebp)
f010ea67:	ff 75 e0             	pushl  -0x20(%ebp)
f010ea6a:	e8 64 00 00 00       	call   f010ead3 <__page_fault_handler_with_buffering>
f010ea6f:	83 c4 10             	add    $0x10,%esp
f010ea72:	eb 11                	jmp    f010ea85 <fault_handler+0x290>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010ea74:	83 ec 08             	sub    $0x8,%esp
f010ea77:	ff 75 ec             	pushl  -0x14(%ebp)
f010ea7a:	ff 75 e0             	pushl  -0x20(%ebp)
f010ea7d:	e8 34 00 00 00       	call   f010eab6 <page_fault_handler>
f010ea82:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010ea85:	0f 20 d8             	mov    %cr3,%eax
f010ea88:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010ea8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ea8e:	0f 22 d8             	mov    %eax,%cr3

	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/
}
f010ea91:	90                   	nop
f010ea92:	c9                   	leave  
f010ea93:	c3                   	ret    

f010ea94 <table_fault_handler>:

//=========================
// [2] TABLE FAULT HANDLER:
//=========================
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010ea94:	55                   	push   %ebp
f010ea95:	89 e5                	mov    %esp,%ebp
f010ea97:	83 ec 18             	sub    $0x18,%esp
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
	}
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
f010ea9a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ea9d:	8b 40 64             	mov    0x64(%eax),%eax
f010eaa0:	83 ec 04             	sub    $0x4,%esp
f010eaa3:	8d 55 f4             	lea    -0xc(%ebp),%edx
f010eaa6:	52                   	push   %edx
f010eaa7:	ff 75 0c             	pushl  0xc(%ebp)
f010eaaa:	50                   	push   %eax
f010eaab:	e8 83 9a ff ff       	call   f0108533 <__static_cpt>
f010eab0:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f010eab3:	90                   	nop
f010eab4:	c9                   	leave  
f010eab5:	c3                   	ret    

f010eab6 <page_fault_handler>:

//=========================
// [3] PAGE FAULT HANDLER:
//=========================
void page_fault_handler(struct Env * faulted_env, uint32 fault_va)
{
f010eab6:	55                   	push   %ebp
f010eab7:	89 e5                	mov    %esp,%ebp
f010eab9:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24] [3] PAGE FAULT HANDLER
	// Write your code here, remove the panic and write your code
	panic("page_fault_handler() is not implemented yet...!!");
f010eabc:	83 ec 04             	sub    $0x4,%esp
f010eabf:	68 0c 8e 12 f0       	push   $0xf0128e0c
f010eac4:	68 db 00 00 00       	push   $0xdb
f010eac9:	68 a7 8c 12 f0       	push   $0xf0128ca7
f010eace:	e8 47 18 ff ff       	call   f010031a <_panic>

f010ead3 <__page_fault_handler_with_buffering>:
		panic("page_fault_handler() Replacement is not implemented yet...!!");
	}
}

void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010ead3:	55                   	push   %ebp
f010ead4:	89 e5                	mov    %esp,%ebp
f010ead6:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] PAGE FAULT HANDLER WITH BUFFERING
	// your code is here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010ead9:	83 ec 04             	sub    $0x4,%esp
f010eadc:	68 40 8e 12 f0       	push   $0xf0128e40
f010eae1:	68 fc 00 00 00       	push   $0xfc
f010eae6:	68 a7 8c 12 f0       	push   $0xf0128ca7
f010eaeb:	e8 2a 18 ff ff       	call   f010031a <_panic>

f010eaf0 <init_spinlock>:
#include "spinlock.h"
#include "../cpu/cpu.h"
#include "../proc/user_environment.h"

void init_spinlock(struct spinlock *lk, char *name)
{
f010eaf0:	55                   	push   %ebp
f010eaf1:	89 e5                	mov    %esp,%ebp
f010eaf3:	83 ec 08             	sub    $0x8,%esp
	strcpy(lk->name, name);
f010eaf6:	8b 45 08             	mov    0x8(%ebp),%eax
f010eaf9:	83 c0 04             	add    $0x4,%eax
f010eafc:	83 ec 08             	sub    $0x8,%esp
f010eaff:	ff 75 0c             	pushl  0xc(%ebp)
f010eb02:	50                   	push   %eax
f010eb03:	e8 7f 39 01 00       	call   f0122487 <strcpy>
f010eb08:	83 c4 10             	add    $0x10,%esp
	lk->locked = 0;
f010eb0b:	8b 45 08             	mov    0x8(%ebp),%eax
f010eb0e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	lk->cpu = 0;
f010eb14:	8b 45 08             	mov    0x8(%ebp),%eax
f010eb17:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
}
f010eb1e:	90                   	nop
f010eb1f:	c9                   	leave  
f010eb20:	c3                   	ret    

f010eb21 <acquire_spinlock>:
// Acquire the lock.
// Loops (spins) until the lock is acquired.
// Holding a lock for a long time may cause
// other CPUs to waste time spinning to acquire it.
void acquire_spinlock(struct spinlock *lk)
{
f010eb21:	55                   	push   %ebp
f010eb22:	89 e5                	mov    %esp,%ebp
f010eb24:	53                   	push   %ebx
f010eb25:	83 ec 14             	sub    $0x14,%esp
	if(holding_spinlock(lk))
f010eb28:	8b 45 08             	mov    0x8(%ebp),%eax
f010eb2b:	83 ec 0c             	sub    $0xc,%esp
f010eb2e:	50                   	push   %eax
f010eb2f:	e8 06 02 00 00       	call   f010ed3a <holding_spinlock>
f010eb34:	83 c4 10             	add    $0x10,%esp
f010eb37:	85 c0                	test   %eax,%eax
f010eb39:	74 18                	je     f010eb53 <acquire_spinlock+0x32>
		panic("acquire_spinlock: lock \"%s\" is already held by the same CPU.", lk->name);
f010eb3b:	8b 45 08             	mov    0x8(%ebp),%eax
f010eb3e:	83 c0 04             	add    $0x4,%eax
f010eb41:	50                   	push   %eax
f010eb42:	68 84 8e 12 f0       	push   $0xf0128e84
f010eb47:	6a 1f                	push   $0x1f
f010eb49:	68 c1 8e 12 f0       	push   $0xf0128ec1
f010eb4e:	e8 c7 17 ff ff       	call   f010031a <_panic>

	pushcli(); // disable interrupts to avoid deadlock (in case if interrupted from a higher priority (or event handler) just after holding the lock => the handler will stuck in busy-waiting and prevent the other from resuming)
f010eb53:	e8 68 86 ff ff       	call   f01071c0 <pushcli>

	//cprintf("\nAttempt to acquire SPIN lock [%s] by [%d]\n", lk->name, myproc() != NULL? myproc()->env_id : 0);

	// The xchg is atomic.
	while(xchg(&lk->locked, 1) != 0) ;
f010eb58:	90                   	nop
f010eb59:	8b 45 08             	mov    0x8(%ebp),%eax
f010eb5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010eb5f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
xchg(volatile uint32 *addr, uint32 newval)
{
  uint32 result;

  // The + in "+m" denotes a read-modify-write operand.
  __asm __volatile("lock; xchgl %0, %1" :
f010eb66:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010eb69:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010eb6c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010eb6f:	f0 87 02             	lock xchg %eax,(%edx)
f010eb72:	89 45 ec             	mov    %eax,-0x14(%ebp)
               "+m" (*addr), "=a" (result) :
               "1" (newval) :
               "cc");
  return result;
f010eb75:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010eb78:	85 c0                	test   %eax,%eax
f010eb7a:	75 dd                	jne    f010eb59 <acquire_spinlock+0x38>
	//cprintf("SPIN lock [%s] is ACQUIRED  by [%d]\n", lk->name, myproc() != NULL? myproc()->env_id : 0);

	// Tell the C compiler and the processor to not move loads or stores
	// past this point, to ensure that the critical section's memory
	// references happen after the lock is acquired.
	__sync_synchronize();
f010eb7c:	f0 83 0c 24 00       	lock orl $0x0,(%esp)

	// Record info about lock acquisition for debugging.
	lk->cpu = mycpu();
f010eb81:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010eb84:	e8 74 85 ff ff       	call   f01070fd <mycpu>
f010eb89:	89 43 44             	mov    %eax,0x44(%ebx)
	getcallerpcs(&lk, lk->pcs);
f010eb8c:	8b 45 08             	mov    0x8(%ebp),%eax
f010eb8f:	83 c0 48             	add    $0x48,%eax
f010eb92:	83 ec 08             	sub    $0x8,%esp
f010eb95:	50                   	push   %eax
f010eb96:	8d 45 08             	lea    0x8(%ebp),%eax
f010eb99:	50                   	push   %eax
f010eb9a:	e8 74 00 00 00       	call   f010ec13 <getcallerpcs>
f010eb9f:	83 c4 10             	add    $0x10,%esp

}
f010eba2:	90                   	nop
f010eba3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010eba6:	c9                   	leave  
f010eba7:	c3                   	ret    

f010eba8 <release_spinlock>:

// Release the lock.
void release_spinlock(struct spinlock *lk)
{
f010eba8:	55                   	push   %ebp
f010eba9:	89 e5                	mov    %esp,%ebp
f010ebab:	83 ec 08             	sub    $0x8,%esp
	if(!holding_spinlock(lk))
f010ebae:	83 ec 0c             	sub    $0xc,%esp
f010ebb1:	ff 75 08             	pushl  0x8(%ebp)
f010ebb4:	e8 81 01 00 00       	call   f010ed3a <holding_spinlock>
f010ebb9:	83 c4 10             	add    $0x10,%esp
f010ebbc:	85 c0                	test   %eax,%eax
f010ebbe:	75 26                	jne    f010ebe6 <release_spinlock+0x3e>
	{
		printcallstack(lk);
f010ebc0:	83 ec 0c             	sub    $0xc,%esp
f010ebc3:	ff 75 08             	pushl  0x8(%ebp)
f010ebc6:	e8 08 01 00 00       	call   f010ecd3 <printcallstack>
f010ebcb:	83 c4 10             	add    $0x10,%esp
		panic("release: lock \"%s\" is either not held or held by another CPU!", lk->name);
f010ebce:	8b 45 08             	mov    0x8(%ebp),%eax
f010ebd1:	83 c0 04             	add    $0x4,%eax
f010ebd4:	50                   	push   %eax
f010ebd5:	68 d8 8e 12 f0       	push   $0xf0128ed8
f010ebda:	6a 3b                	push   $0x3b
f010ebdc:	68 c1 8e 12 f0       	push   $0xf0128ec1
f010ebe1:	e8 34 17 ff ff       	call   f010031a <_panic>
	}
	lk->pcs[0] = 0;
f010ebe6:	8b 45 08             	mov    0x8(%ebp),%eax
f010ebe9:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
	lk->cpu = 0;
f010ebf0:	8b 45 08             	mov    0x8(%ebp),%eax
f010ebf3:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
	// Tell the C compiler and the processor to not move loads or stores
	// past this point, to ensure that all the stores in the critical
	// section are visible to other cores before the lock is released.
	// Both the C compiler and the hardware may re-order loads and
	// stores; __sync_synchronize() tells them both not to.
	__sync_synchronize();
f010ebfa:	f0 83 0c 24 00       	lock orl $0x0,(%esp)

	// Release the lock, equivalent to lk->locked = 0.
	// This code can't use a C assignment, since it might
	// not be atomic. A real OS would use C atomics here.
	asm volatile("movl $0, %0" : "+m" (lk->locked) : );
f010ebff:	8b 45 08             	mov    0x8(%ebp),%eax
f010ec02:	8b 55 08             	mov    0x8(%ebp),%edx
f010ec05:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	popcli();
f010ec0b:	e8 02 86 ff ff       	call   f0107212 <popcli>
}
f010ec10:	90                   	nop
f010ec11:	c9                   	leave  
f010ec12:	c3                   	ret    

f010ec13 <getcallerpcs>:

// Record the current call stack in pcs[] by following the %ebp chain.
int getcallerpcs(void *v, uint32 pcs[])
{
f010ec13:	55                   	push   %ebp
f010ec14:	89 e5                	mov    %esp,%ebp
f010ec16:	83 ec 28             	sub    $0x28,%esp
	uint32 *ebp;
	int i;
	struct Env* p = get_cpu_proc();
f010ec19:	e8 52 bb ff ff       	call   f010a770 <get_cpu_proc>
f010ec1e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct cpu* c = mycpu();
f010ec21:	e8 d7 84 ff ff       	call   f01070fd <mycpu>
f010ec26:	89 45 e8             	mov    %eax,-0x18(%ebp)
	ebp = (uint32*)v - 2;
f010ec29:	8b 45 08             	mov    0x8(%ebp),%eax
f010ec2c:	83 e8 08             	sub    $0x8,%eax
f010ec2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for(i = 0; i < 10; i++)
f010ec32:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010ec39:	eb 67                	jmp    f010eca2 <getcallerpcs+0x8f>
	{
		//cprintf("old ebp = %x\n", ebp);
		if	(	ebp == 0 || (ebp < (uint32*) USER_LIMIT) ||
f010ec3b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ec3f:	74 67                	je     f010eca8 <getcallerpcs+0x95>
f010ec41:	81 7d f4 ff ff 7f ef 	cmpl   $0xef7fffff,-0xc(%ebp)
f010ec48:	76 5e                	jbe    f010eca8 <getcallerpcs+0x95>
				(ebp >= (uint32*)(c->stack + KERNEL_STACK_SIZE) && ebp < (uint32*)(c->stack + KERNEL_STACK_SIZE + PAGE_SIZE)) ||
f010ec4a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ec4d:	8b 40 08             	mov    0x8(%eax),%eax
f010ec50:	05 00 80 00 00       	add    $0x8000,%eax
	struct cpu* c = mycpu();
	ebp = (uint32*)v - 2;
	for(i = 0; i < 10; i++)
	{
		//cprintf("old ebp = %x\n", ebp);
		if	(	ebp == 0 || (ebp < (uint32*) USER_LIMIT) ||
f010ec55:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ec58:	77 10                	ja     f010ec6a <getcallerpcs+0x57>
				(ebp >= (uint32*)(c->stack + KERNEL_STACK_SIZE) && ebp < (uint32*)(c->stack + KERNEL_STACK_SIZE + PAGE_SIZE)) ||
f010ec5a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ec5d:	8b 40 08             	mov    0x8(%eax),%eax
f010ec60:	05 00 90 00 00       	add    $0x9000,%eax
f010ec65:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ec68:	77 3e                	ja     f010eca8 <getcallerpcs+0x95>
f010ec6a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010ec6e:	74 10                	je     f010ec80 <getcallerpcs+0x6d>
				(p && ebp >= (uint32*) (p->kstack + KERNEL_STACK_SIZE)))
f010ec70:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ec73:	8b 40 70             	mov    0x70(%eax),%eax
f010ec76:	05 00 80 00 00       	add    $0x8000,%eax
f010ec7b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ec7e:	76 28                	jbe    f010eca8 <getcallerpcs+0x95>
			break;
		pcs[i] = ebp[1];     // saved %eip
f010ec80:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ec83:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ec8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ec8d:	01 c2                	add    %eax,%edx
f010ec8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ec92:	8b 40 04             	mov    0x4(%eax),%eax
f010ec95:	89 02                	mov    %eax,(%edx)
		ebp = (uint32*)ebp[0]; // saved %ebp
f010ec97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ec9a:	8b 00                	mov    (%eax),%eax
f010ec9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ebp;
	int i;
	struct Env* p = get_cpu_proc();
	struct cpu* c = mycpu();
	ebp = (uint32*)v - 2;
	for(i = 0; i < 10; i++)
f010ec9f:	ff 45 f0             	incl   -0x10(%ebp)
f010eca2:	83 7d f0 09          	cmpl   $0x9,-0x10(%ebp)
f010eca6:	7e 93                	jle    f010ec3b <getcallerpcs+0x28>
		pcs[i] = ebp[1];     // saved %eip
		ebp = (uint32*)ebp[0]; // saved %ebp
		//		cprintf("new ebp = %x\n", ebp);
		//		cprintf("pc[%d] = %x\n", i, pcs[i]);
	}
	int length = i ;
f010eca8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ecab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	for(; i < 10; i++)
f010ecae:	eb 18                	jmp    f010ecc8 <getcallerpcs+0xb5>
		pcs[i] = 0;
f010ecb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ecb3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ecba:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ecbd:	01 d0                	add    %edx,%eax
f010ecbf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		ebp = (uint32*)ebp[0]; // saved %ebp
		//		cprintf("new ebp = %x\n", ebp);
		//		cprintf("pc[%d] = %x\n", i, pcs[i]);
	}
	int length = i ;
	for(; i < 10; i++)
f010ecc5:	ff 45 f0             	incl   -0x10(%ebp)
f010ecc8:	83 7d f0 09          	cmpl   $0x9,-0x10(%ebp)
f010eccc:	7e e2                	jle    f010ecb0 <getcallerpcs+0x9d>
		pcs[i] = 0;
	return length ;
f010ecce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f010ecd1:	c9                   	leave  
f010ecd2:	c3                   	ret    

f010ecd3 <printcallstack>:

void printcallstack(struct spinlock *lk)
{
f010ecd3:	55                   	push   %ebp
f010ecd4:	89 e5                	mov    %esp,%ebp
f010ecd6:	83 ec 18             	sub    $0x18,%esp
	cprintf("\nCaller Stack:\n");
f010ecd9:	83 ec 0c             	sub    $0xc,%esp
f010ecdc:	68 16 8f 12 f0       	push   $0xf0128f16
f010ece1:	e8 86 22 ff ff       	call   f0100f6c <cprintf>
f010ece6:	83 c4 10             	add    $0x10,%esp
	int stacklen = 	getcallerpcs(&lk, lk->pcs);
f010ece9:	8b 45 08             	mov    0x8(%ebp),%eax
f010ecec:	83 c0 48             	add    $0x48,%eax
f010ecef:	83 ec 08             	sub    $0x8,%esp
f010ecf2:	50                   	push   %eax
f010ecf3:	8d 45 08             	lea    0x8(%ebp),%eax
f010ecf6:	50                   	push   %eax
f010ecf7:	e8 17 ff ff ff       	call   f010ec13 <getcallerpcs>
f010ecfc:	83 c4 10             	add    $0x10,%esp
f010ecff:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (int i = 0; i < stacklen; ++i) {
f010ed02:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ed09:	eb 24                	jmp    f010ed2f <printcallstack+0x5c>
		cprintf("  PC[%d] = %x\n", i, lk->pcs[i]);
f010ed0b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ed0e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ed11:	83 c2 10             	add    $0x10,%edx
f010ed14:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
f010ed18:	83 ec 04             	sub    $0x4,%esp
f010ed1b:	50                   	push   %eax
f010ed1c:	ff 75 f4             	pushl  -0xc(%ebp)
f010ed1f:	68 26 8f 12 f0       	push   $0xf0128f26
f010ed24:	e8 43 22 ff ff       	call   f0100f6c <cprintf>
f010ed29:	83 c4 10             	add    $0x10,%esp

void printcallstack(struct spinlock *lk)
{
	cprintf("\nCaller Stack:\n");
	int stacklen = 	getcallerpcs(&lk, lk->pcs);
	for (int i = 0; i < stacklen; ++i) {
f010ed2c:	ff 45 f4             	incl   -0xc(%ebp)
f010ed2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ed32:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010ed35:	7c d4                	jl     f010ed0b <printcallstack+0x38>
		cprintf("  PC[%d] = %x\n", i, lk->pcs[i]);
	}
}
f010ed37:	90                   	nop
f010ed38:	c9                   	leave  
f010ed39:	c3                   	ret    

f010ed3a <holding_spinlock>:
// Check whether this cpu is holding the lock.
int holding_spinlock(struct spinlock *lock)
{
f010ed3a:	55                   	push   %ebp
f010ed3b:	89 e5                	mov    %esp,%ebp
f010ed3d:	53                   	push   %ebx
f010ed3e:	83 ec 14             	sub    $0x14,%esp
	int r;
	pushcli();
f010ed41:	e8 7a 84 ff ff       	call   f01071c0 <pushcli>
	r = lock->locked && lock->cpu == mycpu();
f010ed46:	8b 45 08             	mov    0x8(%ebp),%eax
f010ed49:	8b 00                	mov    (%eax),%eax
f010ed4b:	85 c0                	test   %eax,%eax
f010ed4d:	74 16                	je     f010ed65 <holding_spinlock+0x2b>
f010ed4f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ed52:	8b 58 44             	mov    0x44(%eax),%ebx
f010ed55:	e8 a3 83 ff ff       	call   f01070fd <mycpu>
f010ed5a:	39 c3                	cmp    %eax,%ebx
f010ed5c:	75 07                	jne    f010ed65 <holding_spinlock+0x2b>
f010ed5e:	b8 01 00 00 00       	mov    $0x1,%eax
f010ed63:	eb 05                	jmp    f010ed6a <holding_spinlock+0x30>
f010ed65:	b8 00 00 00 00       	mov    $0x0,%eax
f010ed6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	popcli();
f010ed6d:	e8 a0 84 ff ff       	call   f0107212 <popcli>
	return r;
f010ed72:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ed75:	83 c4 14             	add    $0x14,%esp
f010ed78:	5b                   	pop    %ebx
f010ed79:	5d                   	pop    %ebp
f010ed7a:	c3                   	ret    

f010ed7b <init_sleeplock>:
#include "channel.h"
#include "../cpu/cpu.h"
#include "../proc/user_environment.h"

void init_sleeplock(struct sleeplock *lk, char *name)
{
f010ed7b:	55                   	push   %ebp
f010ed7c:	89 e5                	mov    %esp,%ebp
f010ed7e:	83 ec 08             	sub    $0x8,%esp
	init_channel(&(lk->chan), "sleep lock channel");
f010ed81:	8b 45 08             	mov    0x8(%ebp),%eax
f010ed84:	83 c0 74             	add    $0x74,%eax
f010ed87:	83 ec 08             	sub    $0x8,%esp
f010ed8a:	68 38 8f 12 f0       	push   $0xf0128f38
f010ed8f:	50                   	push   %eax
f010ed90:	e8 de 00 00 00       	call   f010ee73 <init_channel>
f010ed95:	83 c4 10             	add    $0x10,%esp
	init_spinlock(&(lk->lk), "lock of sleep lock");
f010ed98:	8b 45 08             	mov    0x8(%ebp),%eax
f010ed9b:	83 c0 04             	add    $0x4,%eax
f010ed9e:	83 ec 08             	sub    $0x8,%esp
f010eda1:	68 4b 8f 12 f0       	push   $0xf0128f4b
f010eda6:	50                   	push   %eax
f010eda7:	e8 44 fd ff ff       	call   f010eaf0 <init_spinlock>
f010edac:	83 c4 10             	add    $0x10,%esp
	strcpy(lk->name, name);
f010edaf:	8b 45 08             	mov    0x8(%ebp),%eax
f010edb2:	05 c4 00 00 00       	add    $0xc4,%eax
f010edb7:	83 ec 08             	sub    $0x8,%esp
f010edba:	ff 75 0c             	pushl  0xc(%ebp)
f010edbd:	50                   	push   %eax
f010edbe:	e8 c4 36 01 00       	call   f0122487 <strcpy>
f010edc3:	83 c4 10             	add    $0x10,%esp
	lk->locked = 0;
f010edc6:	8b 45 08             	mov    0x8(%ebp),%eax
f010edc9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	lk->pid = 0;
f010edcf:	8b 45 08             	mov    0x8(%ebp),%eax
f010edd2:	c7 80 04 01 00 00 00 	movl   $0x0,0x104(%eax)
f010edd9:	00 00 00 
}
f010eddc:	90                   	nop
f010eddd:	c9                   	leave  
f010edde:	c3                   	ret    

f010eddf <holding_sleeplock>:
int holding_sleeplock(struct sleeplock *lk)
{
f010eddf:	55                   	push   %ebp
f010ede0:	89 e5                	mov    %esp,%ebp
f010ede2:	53                   	push   %ebx
f010ede3:	83 ec 14             	sub    $0x14,%esp
	int r;
	acquire_spinlock(&(lk->lk));
f010ede6:	8b 45 08             	mov    0x8(%ebp),%eax
f010ede9:	83 c0 04             	add    $0x4,%eax
f010edec:	83 ec 0c             	sub    $0xc,%esp
f010edef:	50                   	push   %eax
f010edf0:	e8 2c fd ff ff       	call   f010eb21 <acquire_spinlock>
f010edf5:	83 c4 10             	add    $0x10,%esp
	r = lk->locked && (lk->pid == get_cpu_proc()->env_id);
f010edf8:	8b 45 08             	mov    0x8(%ebp),%eax
f010edfb:	8b 00                	mov    (%eax),%eax
f010edfd:	85 c0                	test   %eax,%eax
f010edff:	74 1c                	je     f010ee1d <holding_sleeplock+0x3e>
f010ee01:	8b 45 08             	mov    0x8(%ebp),%eax
f010ee04:	8b 98 04 01 00 00    	mov    0x104(%eax),%ebx
f010ee0a:	e8 61 b9 ff ff       	call   f010a770 <get_cpu_proc>
f010ee0f:	8b 40 10             	mov    0x10(%eax),%eax
f010ee12:	39 c3                	cmp    %eax,%ebx
f010ee14:	75 07                	jne    f010ee1d <holding_sleeplock+0x3e>
f010ee16:	b8 01 00 00 00       	mov    $0x1,%eax
f010ee1b:	eb 05                	jmp    f010ee22 <holding_sleeplock+0x43>
f010ee1d:	b8 00 00 00 00       	mov    $0x0,%eax
f010ee22:	89 45 f4             	mov    %eax,-0xc(%ebp)
	release_spinlock(&(lk->lk));
f010ee25:	8b 45 08             	mov    0x8(%ebp),%eax
f010ee28:	83 c0 04             	add    $0x4,%eax
f010ee2b:	83 ec 0c             	sub    $0xc,%esp
f010ee2e:	50                   	push   %eax
f010ee2f:	e8 74 fd ff ff       	call   f010eba8 <release_spinlock>
f010ee34:	83 c4 10             	add    $0x10,%esp
	return r;
f010ee37:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ee3a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010ee3d:	c9                   	leave  
f010ee3e:	c3                   	ret    

f010ee3f <acquire_sleeplock>:
//==========================================================================

void acquire_sleeplock(struct sleeplock *lk)
{
f010ee3f:	55                   	push   %ebp
f010ee40:	89 e5                	mov    %esp,%ebp
f010ee42:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #13] [4] LOCKS - acquire_sleeplock
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("acquire_sleeplock is not implemented yet");
f010ee45:	83 ec 04             	sub    $0x4,%esp
f010ee48:	68 60 8f 12 f0       	push   $0xf0128f60
f010ee4d:	6a 25                	push   $0x25
f010ee4f:	68 89 8f 12 f0       	push   $0xf0128f89
f010ee54:	e8 c1 14 ff ff       	call   f010031a <_panic>

f010ee59 <release_sleeplock>:
	//Your Code is Here...

}

void release_sleeplock(struct sleeplock *lk)
{
f010ee59:	55                   	push   %ebp
f010ee5a:	89 e5                	mov    %esp,%ebp
f010ee5c:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #14] [4] LOCKS - release_sleeplock
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("release_sleeplock is not implemented yet");
f010ee5f:	83 ec 04             	sub    $0x4,%esp
f010ee62:	68 a0 8f 12 f0       	push   $0xf0128fa0
f010ee67:	6a 2e                	push   $0x2e
f010ee69:	68 89 8f 12 f0       	push   $0xf0128f89
f010ee6e:	e8 a7 14 ff ff       	call   f010031a <_panic>

f010ee73 <init_channel>:
//===============================
// 1) INITIALIZE THE CHANNEL:
//===============================
// initialize its lock & queue
void init_channel(struct Channel *chan, char *name)
{
f010ee73:	55                   	push   %ebp
f010ee74:	89 e5                	mov    %esp,%ebp
f010ee76:	83 ec 08             	sub    $0x8,%esp
	strcpy(chan->name, name);
f010ee79:	8b 45 08             	mov    0x8(%ebp),%eax
f010ee7c:	83 c0 10             	add    $0x10,%eax
f010ee7f:	83 ec 08             	sub    $0x8,%esp
f010ee82:	ff 75 0c             	pushl  0xc(%ebp)
f010ee85:	50                   	push   %eax
f010ee86:	e8 fc 35 01 00       	call   f0122487 <strcpy>
f010ee8b:	83 c4 10             	add    $0x10,%esp
	init_queue(&(chan->queue));
f010ee8e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ee91:	83 ec 0c             	sub    $0xc,%esp
f010ee94:	50                   	push   %eax
f010ee95:	e8 9d 60 ff ff       	call   f0104f37 <init_queue>
f010ee9a:	83 c4 10             	add    $0x10,%esp
}
f010ee9d:	90                   	nop
f010ee9e:	c9                   	leave  
f010ee9f:	c3                   	ret    

f010eea0 <sleep>:
//===============================
// Atomically release lock and sleep on chan.
// Reacquires lock when awakened.
// Ref: xv6-x86 OS code
void sleep(struct Channel *chan, struct spinlock* lk)
{
f010eea0:	55                   	push   %ebp
f010eea1:	89 e5                	mov    %esp,%ebp
f010eea3:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #10] [4] LOCKS - sleep
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("sleep is not implemented yet");
f010eea6:	83 ec 04             	sub    $0x4,%esp
f010eea9:	68 cc 8f 12 f0       	push   $0xf0128fcc
f010eeae:	6a 21                	push   $0x21
f010eeb0:	68 e9 8f 12 f0       	push   $0xf0128fe9
f010eeb5:	e8 60 14 ff ff       	call   f010031a <_panic>

f010eeba <wakeup_one>:
// Wake up ONE process sleeping on chan.
// The qlock must be held.
// Ref: xv6-x86 OS code
// chan MUST be of type "struct Env_Queue" to hold the blocked processes
void wakeup_one(struct Channel *chan)
{
f010eeba:	55                   	push   %ebp
f010eebb:	89 e5                	mov    %esp,%ebp
f010eebd:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #11] [4] LOCKS - wakeup_one
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("wakeup_one is not implemented yet");
f010eec0:	83 ec 04             	sub    $0x4,%esp
f010eec3:	68 00 90 12 f0       	push   $0xf0129000
f010eec8:	6a 31                	push   $0x31
f010eeca:	68 e9 8f 12 f0       	push   $0xf0128fe9
f010eecf:	e8 46 14 ff ff       	call   f010031a <_panic>

f010eed4 <wakeup_all>:
// The queues lock must be held.
// Ref: xv6-x86 OS code
// chan MUST be of type "struct Env_Queue" to hold the blocked processes

void wakeup_all(struct Channel *chan)
{
f010eed4:	55                   	push   %ebp
f010eed5:	89 e5                	mov    %esp,%ebp
f010eed7:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #12] [4] LOCKS - wakeup_all
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("wakeup_all is not implemented yet");
f010eeda:	83 ec 04             	sub    $0x4,%esp
f010eedd:	68 24 90 12 f0       	push   $0xf0129024
f010eee2:	6a 41                	push   $0x41
f010eee4:	68 e9 8f 12 f0       	push   $0xf0128fe9
f010eee9:	e8 2c 14 ff ff       	call   f010031a <_panic>

f010eeee <init_ksemaphore>:
#include "channel.h"
#include "../cpu/cpu.h"
#include "../proc/user_environment.h"

void init_ksemaphore(struct ksemaphore *ksem, int value, char *name)
{
f010eeee:	55                   	push   %ebp
f010eeef:	89 e5                	mov    %esp,%ebp
f010eef1:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS3]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("init_ksemaphore is not implemented yet");
f010eef4:	83 ec 04             	sub    $0x4,%esp
f010eef7:	68 48 90 12 f0       	push   $0xf0129048
f010eefc:	6a 13                	push   $0x13
f010eefe:	68 6f 90 12 f0       	push   $0xf012906f
f010ef03:	e8 12 14 ff ff       	call   f010031a <_panic>

f010ef08 <wait_ksemaphore>:
	//Your Code is Here...
}

void wait_ksemaphore(struct ksemaphore *ksem)
{
f010ef08:	55                   	push   %ebp
f010ef09:	89 e5                	mov    %esp,%ebp
f010ef0b:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS3]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("wait_ksemaphore is not implemented yet");
f010ef0e:	83 ec 04             	sub    $0x4,%esp
f010ef11:	68 88 90 12 f0       	push   $0xf0129088
f010ef16:	6a 1b                	push   $0x1b
f010ef18:	68 6f 90 12 f0       	push   $0xf012906f
f010ef1d:	e8 f8 13 ff ff       	call   f010031a <_panic>

f010ef22 <signal_ksemaphore>:
	//Your Code is Here...

}

void signal_ksemaphore(struct ksemaphore *ksem)
{
f010ef22:	55                   	push   %ebp
f010ef23:	89 e5                	mov    %esp,%ebp
f010ef25:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS3]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("signal_ksemaphore is not implemented yet");
f010ef28:	83 ec 04             	sub    $0x4,%esp
f010ef2b:	68 b0 90 12 f0       	push   $0xf01290b0
f010ef30:	6a 24                	push   $0x24
f010ef32:	68 6f 90 12 f0       	push   $0xf012906f
f010ef37:	e8 de 13 ff ff       	call   f010031a <_panic>

f010ef3c <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010ef3c:	55                   	push   %ebp
f010ef3d:	89 e5                	mov    %esp,%ebp
f010ef3f:	c7 05 50 19 5a f0 01 	movl   $0x1,0xf05a1950
f010ef46:	00 00 00 
f010ef49:	90                   	nop
f010ef4a:	5d                   	pop    %ebp
f010ef4b:	c3                   	ret    

f010ef4c <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f010ef4c:	55                   	push   %ebp
f010ef4d:	89 e5                	mov    %esp,%ebp
f010ef4f:	c7 05 50 19 5a f0 02 	movl   $0x2,0xf05a1950
f010ef56:	00 00 00 
f010ef59:	90                   	nop
f010ef5a:	5d                   	pop    %ebp
f010ef5b:	c3                   	ret    

f010ef5c <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f010ef5c:	55                   	push   %ebp
f010ef5d:	89 e5                	mov    %esp,%ebp
f010ef5f:	c7 05 50 19 5a f0 03 	movl   $0x3,0xf05a1950
f010ef66:	00 00 00 
f010ef69:	90                   	nop
f010ef6a:	5d                   	pop    %ebp
f010ef6b:	c3                   	ret    

f010ef6c <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f010ef6c:	55                   	push   %ebp
f010ef6d:	89 e5                	mov    %esp,%ebp
f010ef6f:	a1 50 19 5a f0       	mov    0xf05a1950,%eax
f010ef74:	83 f8 01             	cmp    $0x1,%eax
f010ef77:	75 04                	jne    f010ef7d <isKHeapPlacementStrategyFIRSTFIT+0x11>
f010ef79:	b0 01                	mov    $0x1,%al
f010ef7b:	eb 02                	jmp    f010ef7f <isKHeapPlacementStrategyFIRSTFIT+0x13>
f010ef7d:	b0 00                	mov    $0x0,%al
f010ef7f:	5d                   	pop    %ebp
f010ef80:	c3                   	ret    

f010ef81 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010ef81:	55                   	push   %ebp
f010ef82:	89 e5                	mov    %esp,%ebp
f010ef84:	a1 50 19 5a f0       	mov    0xf05a1950,%eax
f010ef89:	83 f8 02             	cmp    $0x2,%eax
f010ef8c:	75 04                	jne    f010ef92 <isKHeapPlacementStrategyBESTFIT+0x11>
f010ef8e:	b0 01                	mov    $0x1,%al
f010ef90:	eb 02                	jmp    f010ef94 <isKHeapPlacementStrategyBESTFIT+0x13>
f010ef92:	b0 00                	mov    $0x0,%al
f010ef94:	5d                   	pop    %ebp
f010ef95:	c3                   	ret    

f010ef96 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f010ef96:	55                   	push   %ebp
f010ef97:	89 e5                	mov    %esp,%ebp
f010ef99:	a1 50 19 5a f0       	mov    0xf05a1950,%eax
f010ef9e:	83 f8 03             	cmp    $0x3,%eax
f010efa1:	75 04                	jne    f010efa7 <isKHeapPlacementStrategyNEXTFIT+0x11>
f010efa3:	b0 01                	mov    $0x1,%al
f010efa5:	eb 02                	jmp    f010efa9 <isKHeapPlacementStrategyNEXTFIT+0x13>
f010efa7:	b0 00                	mov    $0x0,%al
f010efa9:	5d                   	pop    %ebp
f010efaa:	c3                   	ret    

f010efab <tst_handler>:

//=================//
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
f010efab:	55                   	push   %ebp
f010efac:	89 e5                	mov    %esp,%ebp
f010efae:	83 ec 18             	sub    $0x18,%esp
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010efb1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010efb8:	eb 26                	jmp    f010efe0 <tst_handler+0x35>
	{
		arguments[a] = arguments[a+1] ;
f010efba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010efbd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010efc4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010efc7:	01 c2                	add    %eax,%edx
f010efc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010efcc:	40                   	inc    %eax
f010efcd:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010efd4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010efd7:	01 c8                	add    %ecx,%eax
f010efd9:	8b 00                	mov    (%eax),%eax
f010efdb:	89 02                	mov    %eax,(%edx)
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010efdd:	ff 45 f4             	incl   -0xc(%ebp)
f010efe0:	8b 45 08             	mov    0x8(%ebp),%eax
f010efe3:	48                   	dec    %eax
f010efe4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010efe7:	7f d1                	jg     f010efba <tst_handler+0xf>
	{
		arguments[a] = arguments[a+1] ;
	}
	number_of_arguments--;
f010efe9:	ff 4d 08             	decl   0x8(%ebp)

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
f010efec:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010eff3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010effa:	eb 35                	jmp    f010f031 <tst_handler+0x86>
	{
		if (strcmp(arguments[0], tests[i].name) == 0)
f010effc:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010efff:	89 d0                	mov    %edx,%eax
f010f001:	01 c0                	add    %eax,%eax
f010f003:	01 d0                	add    %edx,%eax
f010f005:	c1 e0 02             	shl    $0x2,%eax
f010f008:	05 00 dd 17 f0       	add    $0xf017dd00,%eax
f010f00d:	8b 10                	mov    (%eax),%edx
f010f00f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f012:	8b 00                	mov    (%eax),%eax
f010f014:	83 ec 08             	sub    $0x8,%esp
f010f017:	52                   	push   %edx
f010f018:	50                   	push   %eax
f010f019:	e8 26 35 01 00       	call   f0122544 <strcmp>
f010f01e:	83 c4 10             	add    $0x10,%esp
f010f021:	85 c0                	test   %eax,%eax
f010f023:	75 09                	jne    f010f02e <tst_handler+0x83>
		{
			test_found = 1;
f010f025:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			break;
f010f02c:	eb 0f                	jmp    f010f03d <tst_handler+0x92>
	number_of_arguments--;

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010f02e:	ff 45 ec             	incl   -0x14(%ebp)
f010f031:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010f034:	a1 b4 dd 17 f0       	mov    0xf017ddb4,%eax
f010f039:	39 c2                	cmp    %eax,%edx
f010f03b:	72 bf                	jb     f010effc <tst_handler+0x51>
			test_found = 1;
			break;
		}
	}

	if(test_found)
f010f03d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f041:	74 29                	je     f010f06c <tst_handler+0xc1>
	{
		int return_value;
		return_value = tests[i].function_to_execute(number_of_arguments, arguments);
f010f043:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010f046:	89 d0                	mov    %edx,%eax
f010f048:	01 c0                	add    %eax,%eax
f010f04a:	01 d0                	add    %edx,%eax
f010f04c:	c1 e0 02             	shl    $0x2,%eax
f010f04f:	05 08 dd 17 f0       	add    $0xf017dd08,%eax
f010f054:	8b 00                	mov    (%eax),%eax
f010f056:	83 ec 08             	sub    $0x8,%esp
f010f059:	ff 75 0c             	pushl  0xc(%ebp)
f010f05c:	ff 75 08             	pushl  0x8(%ebp)
f010f05f:	ff d0                	call   *%eax
f010f061:	83 c4 10             	add    $0x10,%esp
f010f064:	89 45 e8             	mov    %eax,-0x18(%ebp)
		return return_value;
f010f067:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f06a:	eb 1b                	jmp    f010f087 <tst_handler+0xdc>
	}
	else
	{
		cprintf("Unknown test '%s'\n", arguments[0]);
f010f06c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f06f:	8b 00                	mov    (%eax),%eax
f010f071:	83 ec 08             	sub    $0x8,%esp
f010f074:	50                   	push   %eax
f010f075:	68 f0 93 12 f0       	push   $0xf01293f0
f010f07a:	e8 ed 1e ff ff       	call   f0100f6c <cprintf>
f010f07f:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f082:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010f087:	c9                   	leave  
f010f088:	c3                   	ret    

f010f089 <tst_three_creation_functions>:

//=================//
/*TESTING Functions*/
//=================//
int tst_three_creation_functions(int number_of_arguments, char **arguments)
{
f010f089:	55                   	push   %ebp
f010f08a:	89 e5                	mov    %esp,%ebp
f010f08c:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f010f08f:	e8 34 0b 01 00       	call   f011fbc8 <test_three_creation_functions>
	return 0;
f010f094:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f099:	c9                   	leave  
f010f09a:	c3                   	ret    

f010f09b <tst_priority1>:

int tst_priority1(int number_of_arguments, char **arguments)
{
f010f09b:	55                   	push   %ebp
f010f09c:	89 e5                	mov    %esp,%ebp
f010f09e:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f010f0a1:	e8 76 9a 00 00       	call   f0118b1c <test_priority_normal_and_higher>
	return 0;
f010f0a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f0ab:	c9                   	leave  
f010f0ac:	c3                   	ret    

f010f0ad <tst_priority2>:

int tst_priority2(int number_of_arguments, char **arguments)
{
f010f0ad:	55                   	push   %ebp
f010f0ae:	89 e5                	mov    %esp,%ebp
f010f0b0:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f010f0b3:	e8 ce a4 00 00       	call   f0119586 <test_priority_normal_and_lower>
	return 0;
f010f0b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f0bd:	c9                   	leave  
f010f0be:	c3                   	ret    

f010f0bf <tst_kfreeall>:

int tst_kfreeall(int number_of_arguments, char **arguments)
{
f010f0bf:	55                   	push   %ebp
f010f0c0:	89 e5                	mov    %esp,%ebp
f010f0c2:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f010f0c5:	e8 b6 0c 01 00       	call   f011fd80 <test_kfreeall>
	return 0;
f010f0ca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f0cf:	c9                   	leave  
f010f0d0:	c3                   	ret    

f010f0d1 <tst_kexpand>:

int tst_kexpand(int number_of_arguments, char **arguments)
{
f010f0d1:	55                   	push   %ebp
f010f0d2:	89 e5                	mov    %esp,%ebp
f010f0d4:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f010f0d7:	e8 c1 0c 01 00       	call   f011fd9d <test_kexpand>
	return 0;
f010f0dc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f0e1:	c9                   	leave  
f010f0e2:	c3                   	ret    

f010f0e3 <tst_kshrink>:

int tst_kshrink(int number_of_arguments, char **arguments)
{
f010f0e3:	55                   	push   %ebp
f010f0e4:	89 e5                	mov    %esp,%ebp
f010f0e6:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f010f0e9:	e8 cc 0c 01 00       	call   f011fdba <test_kshrink>
	return 0;
f010f0ee:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f0f3:	c9                   	leave  
f010f0f4:	c3                   	ret    

f010f0f5 <tst_kfreelast>:

int tst_kfreelast(int number_of_arguments, char **arguments)
{
f010f0f5:	55                   	push   %ebp
f010f0f6:	89 e5                	mov    %esp,%ebp
f010f0f8:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f010f0fb:	e8 d7 0c 01 00       	call   f011fdd7 <test_kfreelast>
	return 0;
f010f100:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f105:	c9                   	leave  
f010f106:	c3                   	ret    

f010f107 <tst_sc_MLFQ>:

int tst_sc_MLFQ(int number_of_arguments, char **arguments)
{
f010f107:	55                   	push   %ebp
f010f108:	89 e5                	mov    %esp,%ebp
f010f10a:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f010f10d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f110:	83 c0 04             	add    $0x4,%eax
f010f113:	8b 00                	mov    (%eax),%eax
f010f115:	83 ec 04             	sub    $0x4,%esp
f010f118:	6a 0a                	push   $0xa
f010f11a:	6a 00                	push   $0x0
f010f11c:	50                   	push   %eax
f010f11d:	e8 76 36 01 00       	call   f0122798 <strtol>
f010f122:	83 c4 10             	add    $0x10,%esp
f010f125:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f010f128:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f010f12f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	acquire_spinlock(&ProcessQueues.qlock);
f010f136:	83 ec 0c             	sub    $0xc,%esp
f010f139:	68 00 ee 59 f0       	push   $0xf059ee00
f010f13e:	e8 de f9 ff ff       	call   f010eb21 <acquire_spinlock>
f010f143:	83 c4 10             	add    $0x10,%esp
	{
		LIST_FOREACH(e, &ProcessQueues.env_exit_queue)
f010f146:	a1 80 ee 59 f0       	mov    0xf059ee80,%eax
f010f14b:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010f14e:	eb 3b                	jmp    f010f18b <tst_sc_MLFQ+0x84>
			{
			if (strcmp(e->prog_name, "tmlfq_2") == 0)
f010f150:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f153:	83 c0 20             	add    $0x20,%eax
f010f156:	83 ec 08             	sub    $0x8,%esp
f010f159:	68 03 94 12 f0       	push   $0xf0129403
f010f15e:	50                   	push   %eax
f010f15f:	e8 e0 33 01 00       	call   f0122544 <strcmp>
f010f164:	83 c4 10             	add    $0x10,%esp
f010f167:	85 c0                	test   %eax,%eax
f010f169:	75 12                	jne    f010f17d <tst_sc_MLFQ+0x76>
			{
				if (firstTime)
f010f16b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f16f:	74 07                	je     f010f178 <tst_sc_MLFQ+0x71>
					firstTime = 0;
f010f171:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				cnt++ ;
f010f178:	ff 45 f4             	incl   -0xc(%ebp)
f010f17b:	eb 06                	jmp    f010f183 <tst_sc_MLFQ+0x7c>
			}
			else if (!firstTime)
f010f17d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f181:	74 31                	je     f010f1b4 <tst_sc_MLFQ+0xad>
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	acquire_spinlock(&ProcessQueues.qlock);
	{
		LIST_FOREACH(e, &ProcessQueues.env_exit_queue)
f010f183:	a1 88 ee 59 f0       	mov    0xf059ee88,%eax
f010f188:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010f18b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010f18f:	74 08                	je     f010f199 <tst_sc_MLFQ+0x92>
f010f191:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f194:	8b 40 08             	mov    0x8(%eax),%eax
f010f197:	eb 05                	jmp    f010f19e <tst_sc_MLFQ+0x97>
f010f199:	b8 00 00 00 00       	mov    $0x0,%eax
f010f19e:	a3 88 ee 59 f0       	mov    %eax,0xf059ee88
f010f1a3:	a1 88 ee 59 f0       	mov    0xf059ee88,%eax
f010f1a8:	85 c0                	test   %eax,%eax
f010f1aa:	75 a4                	jne    f010f150 <tst_sc_MLFQ+0x49>
f010f1ac:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010f1b0:	75 9e                	jne    f010f150 <tst_sc_MLFQ+0x49>
f010f1b2:	eb 01                	jmp    f010f1b5 <tst_sc_MLFQ+0xae>
				if (firstTime)
					firstTime = 0;
				cnt++ ;
			}
			else if (!firstTime)
				break;
f010f1b4:	90                   	nop
			}
		if(cnt == numOfSlave2)
f010f1b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f1b8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010f1bb:	75 12                	jne    f010f1cf <tst_sc_MLFQ+0xc8>
		{
			cprintf("Congratulations... MLFQScenario# completed successfully\n");
f010f1bd:	83 ec 0c             	sub    $0xc,%esp
f010f1c0:	68 0c 94 12 f0       	push   $0xf012940c
f010f1c5:	e8 a2 1d ff ff       	call   f0100f6c <cprintf>
f010f1ca:	83 c4 10             	add    $0x10,%esp
f010f1cd:	eb 17                	jmp    f010f1e6 <tst_sc_MLFQ+0xdf>
		}
		else
		{
			panic("MLFQScenario# failed\n");
f010f1cf:	83 ec 04             	sub    $0x4,%esp
f010f1d2:	68 45 94 12 f0       	push   $0xf0129445
f010f1d7:	68 9b 00 00 00       	push   $0x9b
f010f1dc:	68 5b 94 12 f0       	push   $0xf012945b
f010f1e1:	e8 34 11 ff ff       	call   f010031a <_panic>
		}
	}
	release_spinlock(&ProcessQueues.qlock);
f010f1e6:	83 ec 0c             	sub    $0xc,%esp
f010f1e9:	68 00 ee 59 f0       	push   $0xf059ee00
f010f1ee:	e8 b5 f9 ff ff       	call   f010eba8 <release_spinlock>
f010f1f3:	83 c4 10             	add    $0x10,%esp
	return 0;
f010f1f6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f1fb:	c9                   	leave  
f010f1fc:	c3                   	ret    

f010f1fd <tst_bsd_nice>:


/*2023*/
int tst_bsd_nice(int number_of_arguments, char **arguments)
{
f010f1fd:	55                   	push   %ebp
f010f1fe:	89 e5                	mov    %esp,%ebp
f010f200:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments != 2)
f010f203:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010f207:	74 17                	je     f010f220 <tst_bsd_nice+0x23>
	{
		cprintf("Invalid number of arguments! USAGE: tst bsd_nice <testnumber>\n");
f010f209:	83 ec 0c             	sub    $0xc,%esp
f010f20c:	68 74 94 12 f0       	push   $0xf0129474
f010f211:	e8 56 1d ff ff       	call   f0100f6c <cprintf>
f010f216:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f219:	b8 00 00 00 00       	mov    $0x0,%eax
f010f21e:	eb 45                	jmp    f010f265 <tst_bsd_nice+0x68>
	}
	int testNumber = strtol(arguments[1], NULL, 10);
f010f220:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f223:	83 c0 04             	add    $0x4,%eax
f010f226:	8b 00                	mov    (%eax),%eax
f010f228:	83 ec 04             	sub    $0x4,%esp
f010f22b:	6a 0a                	push   $0xa
f010f22d:	6a 00                	push   $0x0
f010f22f:	50                   	push   %eax
f010f230:	e8 63 35 01 00       	call   f0122798 <strtol>
f010f235:	83 c4 10             	add    $0x10,%esp
f010f238:	89 45 f4             	mov    %eax,-0xc(%ebp)
	switch (testNumber)
f010f23b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f23e:	83 f8 01             	cmp    $0x1,%eax
f010f241:	74 10                	je     f010f253 <tst_bsd_nice+0x56>
f010f243:	83 f8 02             	cmp    $0x2,%eax
f010f246:	74 12                	je     f010f25a <tst_bsd_nice+0x5d>
f010f248:	85 c0                	test   %eax,%eax
f010f24a:	75 14                	jne    f010f260 <tst_bsd_nice+0x63>
	{
	case 0:
		test_bsd_nice_0();
f010f24c:	e8 79 0e 01 00       	call   f01200ca <test_bsd_nice_0>
		break;
f010f251:	eb 0d                	jmp    f010f260 <tst_bsd_nice+0x63>
	case 1:
		test_bsd_nice_1();
f010f253:	e8 fc 10 01 00       	call   f0120354 <test_bsd_nice_1>
		break;
f010f258:	eb 06                	jmp    f010f260 <tst_bsd_nice+0x63>
	case 2:
		test_bsd_nice_2();
f010f25a:	e8 09 13 01 00       	call   f0120568 <test_bsd_nice_2>
		break;
f010f25f:	90                   	nop
	}
	return 0;
f010f260:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f265:	c9                   	leave  
f010f266:	c3                   	ret    

f010f267 <tst_str2lower>:

int tst_str2lower(int number_of_arguments, char **arguments)
{
f010f267:	55                   	push   %ebp
f010f268:	89 e5                	mov    %esp,%ebp
f010f26a:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 1)
f010f26d:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010f271:	74 17                	je     f010f28a <tst_str2lower+0x23>
	{
		cprintf("Invalid number of arguments! USAGE: tst str2lower\n");
f010f273:	83 ec 0c             	sub    $0xc,%esp
f010f276:	68 b4 94 12 f0       	push   $0xf01294b4
f010f27b:	e8 ec 1c ff ff       	call   f0100f6c <cprintf>
f010f280:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f283:	b8 00 00 00 00       	mov    $0x0,%eax
f010f288:	eb 0a                	jmp    f010f294 <tst_str2lower+0x2d>
	}

	test_str2lower_function();
f010f28a:	e8 67 43 00 00       	call   f01135f6 <test_str2lower_function>
	return 0;
f010f28f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f294:	c9                   	leave  
f010f295:	c3                   	ret    

f010f296 <tst_autocomplete>:

int tst_autocomplete(int number_of_arguments, char **arguments)
{
f010f296:	55                   	push   %ebp
f010f297:	89 e5                	mov    %esp,%ebp
f010f299:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f010f29c:	e8 8b 3f 00 00       	call   f011322c <TestAutoCompleteCommand>
f010f2a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f010f2a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f2a9:	c9                   	leave  
f010f2aa:	c3                   	ret    

f010f2ab <tst_dyn_alloc>:
int tst_dyn_alloc(int number_of_arguments, char **arguments)
{
f010f2ab:	55                   	push   %ebp
f010f2ac:	89 e5                	mov    %esp,%ebp
f010f2ae:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010f2b1:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010f2b5:	74 1a                	je     f010f2d1 <tst_dyn_alloc+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tst dynalloc <testname>\n") ;
f010f2b7:	83 ec 0c             	sub    $0xc,%esp
f010f2ba:	68 e8 94 12 f0       	push   $0xf01294e8
f010f2bf:	e8 a8 1c ff ff       	call   f0100f6c <cprintf>
f010f2c4:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f2c7:	b8 00 00 00 00       	mov    $0x0,%eax
f010f2cc:	e9 2f 01 00 00       	jmp    f010f400 <tst_dyn_alloc+0x155>
	}
	//str2lower(arguments[1]);
	// Test 1 Example for initialize_MemBlocksList: tstdynalloc init
	if(strcmp(arguments[1], "init") == 0)
f010f2d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f2d4:	83 c0 04             	add    $0x4,%eax
f010f2d7:	8b 00                	mov    (%eax),%eax
f010f2d9:	83 ec 08             	sub    $0x8,%esp
f010f2dc:	68 25 95 12 f0       	push   $0xf0129525
f010f2e1:	50                   	push   %eax
f010f2e2:	e8 5d 32 01 00       	call   f0122544 <strcmp>
f010f2e7:	83 c4 10             	add    $0x10,%esp
f010f2ea:	85 c0                	test   %eax,%eax
f010f2ec:	75 0a                	jne    f010f2f8 <tst_dyn_alloc+0x4d>
	{
		test_initialize_dynamic_allocator();
f010f2ee:	e8 f4 07 00 00       	call   f010fae7 <test_initialize_dynamic_allocator>
f010f2f3:	e9 03 01 00 00       	jmp    f010f3fb <tst_dyn_alloc+0x150>
	}
	// Test 2 Example for alloc_block_FF: tstdynalloc allocFF
	else if(strcmp(arguments[1], "allocff") == 0)
f010f2f8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f2fb:	83 c0 04             	add    $0x4,%eax
f010f2fe:	8b 00                	mov    (%eax),%eax
f010f300:	83 ec 08             	sub    $0x8,%esp
f010f303:	68 2a 95 12 f0       	push   $0xf012952a
f010f308:	50                   	push   %eax
f010f309:	e8 36 32 01 00       	call   f0122544 <strcmp>
f010f30e:	83 c4 10             	add    $0x10,%esp
f010f311:	85 c0                	test   %eax,%eax
f010f313:	75 0a                	jne    f010f31f <tst_dyn_alloc+0x74>
	{
		test_alloc_block_FF();
f010f315:	e8 9d 0c 00 00       	call   f010ffb7 <test_alloc_block_FF>
f010f31a:	e9 dc 00 00 00       	jmp    f010f3fb <tst_dyn_alloc+0x150>
	}
	// Test 3 Example for alloc_block_BF: tstdynalloc allocBF
	else if(strcmp(arguments[1], "allocbf") == 0)
f010f31f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f322:	83 c0 04             	add    $0x4,%eax
f010f325:	8b 00                	mov    (%eax),%eax
f010f327:	83 ec 08             	sub    $0x8,%esp
f010f32a:	68 32 95 12 f0       	push   $0xf0129532
f010f32f:	50                   	push   %eax
f010f330:	e8 0f 32 01 00       	call   f0122544 <strcmp>
f010f335:	83 c4 10             	add    $0x10,%esp
f010f338:	85 c0                	test   %eax,%eax
f010f33a:	75 0a                	jne    f010f346 <tst_dyn_alloc+0x9b>
	{
		test_alloc_block_BF();
f010f33c:	e8 93 11 00 00       	call   f01104d4 <test_alloc_block_BF>
f010f341:	e9 b5 00 00 00       	jmp    f010f3fb <tst_dyn_alloc+0x150>
	}
	// Test 4 Example for alloc_block_NF: tstdynalloc allocNF
	else if(strcmp(arguments[1], "allocnf") == 0)
f010f346:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f349:	83 c0 04             	add    $0x4,%eax
f010f34c:	8b 00                	mov    (%eax),%eax
f010f34e:	83 ec 08             	sub    $0x8,%esp
f010f351:	68 3a 95 12 f0       	push   $0xf012953a
f010f356:	50                   	push   %eax
f010f357:	e8 e8 31 01 00       	call   f0122544 <strcmp>
f010f35c:	83 c4 10             	add    $0x10,%esp
f010f35f:	85 c0                	test   %eax,%eax
f010f361:	75 0a                	jne    f010f36d <tst_dyn_alloc+0xc2>
	{
		test_alloc_block_NF();
f010f363:	e8 ab 16 00 00       	call   f0110a13 <test_alloc_block_NF>
f010f368:	e9 8e 00 00 00       	jmp    f010f3fb <tst_dyn_alloc+0x150>
	}
	// Test 5 Example for free_block: tstdynalloc freeFF
	else if(strcmp(arguments[1], "freeff") == 0)
f010f36d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f370:	83 c0 04             	add    $0x4,%eax
f010f373:	8b 00                	mov    (%eax),%eax
f010f375:	83 ec 08             	sub    $0x8,%esp
f010f378:	68 42 95 12 f0       	push   $0xf0129542
f010f37d:	50                   	push   %eax
f010f37e:	e8 c1 31 01 00       	call   f0122544 <strcmp>
f010f383:	83 c4 10             	add    $0x10,%esp
f010f386:	85 c0                	test   %eax,%eax
f010f388:	75 07                	jne    f010f391 <tst_dyn_alloc+0xe6>
	{
		test_free_block_FF();
f010f38a:	e8 8a 16 00 00       	call   f0110a19 <test_free_block_FF>
f010f38f:	eb 6a                	jmp    f010f3fb <tst_dyn_alloc+0x150>
	}
	// Test 6 Example for free_block: tstdynalloc freeBF
	else if(strcmp(arguments[1], "freebf") == 0)
f010f391:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f394:	83 c0 04             	add    $0x4,%eax
f010f397:	8b 00                	mov    (%eax),%eax
f010f399:	83 ec 08             	sub    $0x8,%esp
f010f39c:	68 49 95 12 f0       	push   $0xf0129549
f010f3a1:	50                   	push   %eax
f010f3a2:	e8 9d 31 01 00       	call   f0122544 <strcmp>
f010f3a7:	83 c4 10             	add    $0x10,%esp
f010f3aa:	85 c0                	test   %eax,%eax
f010f3ac:	75 07                	jne    f010f3b5 <tst_dyn_alloc+0x10a>
	{
		test_free_block_BF();
f010f3ae:	e8 cd 22 00 00       	call   f0111680 <test_free_block_BF>
f010f3b3:	eb 46                	jmp    f010f3fb <tst_dyn_alloc+0x150>
	}
	// Test 7 Example for free_block: tstdynalloc freeNF
	else if(strcmp(arguments[1], "freenf") == 0)
f010f3b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f3b8:	83 c0 04             	add    $0x4,%eax
f010f3bb:	8b 00                	mov    (%eax),%eax
f010f3bd:	83 ec 08             	sub    $0x8,%esp
f010f3c0:	68 50 95 12 f0       	push   $0xf0129550
f010f3c5:	50                   	push   %eax
f010f3c6:	e8 79 31 01 00       	call   f0122544 <strcmp>
f010f3cb:	83 c4 10             	add    $0x10,%esp
f010f3ce:	85 c0                	test   %eax,%eax
f010f3d0:	75 07                	jne    f010f3d9 <tst_dyn_alloc+0x12e>
	{
		test_free_block_NF();
f010f3d2:	e8 20 2f 00 00       	call   f01122f7 <test_free_block_NF>
f010f3d7:	eb 22                	jmp    f010f3fb <tst_dyn_alloc+0x150>
	}
	// Test 8 Example for realloc_block_ff: tstdynalloc reallocFF
	else if(strcmp(arguments[1], "reallocff") == 0)
f010f3d9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f3dc:	83 c0 04             	add    $0x4,%eax
f010f3df:	8b 00                	mov    (%eax),%eax
f010f3e1:	83 ec 08             	sub    $0x8,%esp
f010f3e4:	68 57 95 12 f0       	push   $0xf0129557
f010f3e9:	50                   	push   %eax
f010f3ea:	e8 55 31 01 00       	call   f0122544 <strcmp>
f010f3ef:	83 c4 10             	add    $0x10,%esp
f010f3f2:	85 c0                	test   %eax,%eax
f010f3f4:	75 05                	jne    f010f3fb <tst_dyn_alloc+0x150>
	{
		test_realloc_block_FF();
f010f3f6:	e8 19 2f 00 00       	call   f0112314 <test_realloc_block_FF>
		//test_realloc_block_FF_COMPLETE();
	}
	return 0;
f010f3fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f400:	c9                   	leave  
f010f401:	c3                   	ret    

f010f402 <tst_chunks>:

int tst_chunks(int number_of_arguments, char **arguments)
{
f010f402:	55                   	push   %ebp
f010f403:	89 e5                	mov    %esp,%ebp
f010f405:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010f408:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010f40c:	74 1a                	je     f010f428 <tst_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f010f40e:	83 ec 0c             	sub    $0xc,%esp
f010f411:	68 64 95 12 f0       	push   $0xf0129564
f010f416:	e8 51 1b ff ff       	call   f0100f6c <cprintf>
f010f41b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f41e:	b8 00 00 00 00       	mov    $0x0,%eax
f010f423:	e9 e1 00 00 00       	jmp    f010f509 <tst_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f010f428:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f42b:	83 c0 04             	add    $0x4,%eax
f010f42e:	8b 00                	mov    (%eax),%eax
f010f430:	83 ec 08             	sub    $0x8,%esp
f010f433:	68 9d 95 12 f0       	push   $0xf012959d
f010f438:	50                   	push   %eax
f010f439:	e8 06 31 01 00       	call   f0122544 <strcmp>
f010f43e:	83 c4 10             	add    $0x10,%esp
f010f441:	85 c0                	test   %eax,%eax
f010f443:	75 0a                	jne    f010f44f <tst_chunks+0x4d>
	{
		test_cut_paste_pages();
f010f445:	e8 bf 4a 00 00       	call   f0113f09 <test_cut_paste_pages>
f010f44a:	e9 b5 00 00 00       	jmp    f010f504 <tst_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f010f44f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f452:	83 c0 04             	add    $0x4,%eax
f010f455:	8b 00                	mov    (%eax),%eax
f010f457:	83 ec 08             	sub    $0x8,%esp
f010f45a:	68 a6 95 12 f0       	push   $0xf01295a6
f010f45f:	50                   	push   %eax
f010f460:	e8 df 30 01 00       	call   f0122544 <strcmp>
f010f465:	83 c4 10             	add    $0x10,%esp
f010f468:	85 c0                	test   %eax,%eax
f010f46a:	75 0a                	jne    f010f476 <tst_chunks+0x74>
	{
		test_copy_paste_chunk();
f010f46c:	e8 e3 54 00 00       	call   f0114954 <test_copy_paste_chunk>
f010f471:	e9 8e 00 00 00       	jmp    f010f504 <tst_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f010f476:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f479:	83 c0 04             	add    $0x4,%eax
f010f47c:	8b 00                	mov    (%eax),%eax
f010f47e:	83 ec 08             	sub    $0x8,%esp
f010f481:	68 b0 95 12 f0       	push   $0xf01295b0
f010f486:	50                   	push   %eax
f010f487:	e8 b8 30 01 00       	call   f0122544 <strcmp>
f010f48c:	83 c4 10             	add    $0x10,%esp
f010f48f:	85 c0                	test   %eax,%eax
f010f491:	75 07                	jne    f010f49a <tst_chunks+0x98>
	{
		test_share_chunk();
f010f493:	e8 ba 65 00 00       	call   f0115a52 <test_share_chunk>
f010f498:	eb 6a                	jmp    f010f504 <tst_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f010f49a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f49d:	83 c0 04             	add    $0x4,%eax
f010f4a0:	8b 00                	mov    (%eax),%eax
f010f4a2:	83 ec 08             	sub    $0x8,%esp
f010f4a5:	68 b6 95 12 f0       	push   $0xf01295b6
f010f4aa:	50                   	push   %eax
f010f4ab:	e8 94 30 01 00       	call   f0122544 <strcmp>
f010f4b0:	83 c4 10             	add    $0x10,%esp
f010f4b3:	85 c0                	test   %eax,%eax
f010f4b5:	75 07                	jne    f010f4be <tst_chunks+0xbc>
	{
		test_allocate_chunk();
f010f4b7:	e8 be 6f 00 00       	call   f011647a <test_allocate_chunk>
f010f4bc:	eb 46                	jmp    f010f504 <tst_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f010f4be:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f4c1:	83 c0 04             	add    $0x4,%eax
f010f4c4:	8b 00                	mov    (%eax),%eax
f010f4c6:	83 ec 08             	sub    $0x8,%esp
f010f4c9:	68 bf 95 12 f0       	push   $0xf01295bf
f010f4ce:	50                   	push   %eax
f010f4cf:	e8 70 30 01 00       	call   f0122544 <strcmp>
f010f4d4:	83 c4 10             	add    $0x10,%esp
f010f4d7:	85 c0                	test   %eax,%eax
f010f4d9:	75 07                	jne    f010f4e2 <tst_chunks+0xe0>
	{
		test_calculate_required_frames();
f010f4db:	e8 a1 78 00 00       	call   f0116d81 <test_calculate_required_frames>
f010f4e0:	eb 22                	jmp    f010f504 <tst_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f010f4e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f4e5:	83 c0 04             	add    $0x4,%eax
f010f4e8:	8b 00                	mov    (%eax),%eax
f010f4ea:	83 ec 08             	sub    $0x8,%esp
f010f4ed:	68 ce 95 12 f0       	push   $0xf01295ce
f010f4f2:	50                   	push   %eax
f010f4f3:	e8 4c 30 01 00       	call   f0122544 <strcmp>
f010f4f8:	83 c4 10             	add    $0x10,%esp
f010f4fb:	85 c0                	test   %eax,%eax
f010f4fd:	75 05                	jne    f010f504 <tst_chunks+0x102>
	{
		test_calculate_allocated_space();
f010f4ff:	e8 f1 80 00 00       	call   f01175f5 <test_calculate_allocated_space>
	}
	return 0;
f010f504:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f509:	c9                   	leave  
f010f50a:	c3                   	ret    

f010f50b <tst_paging_manipulation>:

int tst_paging_manipulation(int number_of_arguments, char **arguments)
{
f010f50b:	55                   	push   %ebp
f010f50c:	89 e5                	mov    %esp,%ebp
f010f50e:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010f511:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010f515:	74 1a                	je     f010f531 <tst_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f010f517:	83 ec 0c             	sub    $0xc,%esp
f010f51a:	68 e0 95 12 f0       	push   $0xf01295e0
f010f51f:	e8 48 1a ff ff       	call   f0100f6c <cprintf>
f010f524:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f527:	b8 00 00 00 00       	mov    $0x0,%eax
f010f52c:	e9 ba 00 00 00       	jmp    f010f5eb <tst_paging_manipulation+0xe0>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f010f531:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f534:	83 c0 04             	add    $0x4,%eax
f010f537:	8b 00                	mov    (%eax),%eax
f010f539:	83 ec 08             	sub    $0x8,%esp
f010f53c:	68 16 96 12 f0       	push   $0xf0129616
f010f541:	50                   	push   %eax
f010f542:	e8 fd 2f 01 00       	call   f0122544 <strcmp>
f010f547:	83 c4 10             	add    $0x10,%esp
f010f54a:	85 c0                	test   %eax,%eax
f010f54c:	75 0a                	jne    f010f558 <tst_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f010f54e:	e8 29 44 00 00       	call   f011397c <test_pt_set_page_permissions>
f010f553:	e9 8e 00 00 00       	jmp    f010f5e6 <tst_paging_manipulation+0xdb>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f010f558:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f55b:	83 c0 04             	add    $0x4,%eax
f010f55e:	8b 00                	mov    (%eax),%eax
f010f560:	83 ec 08             	sub    $0x8,%esp
f010f563:	68 1e 96 12 f0       	push   $0xf012961e
f010f568:	50                   	push   %eax
f010f569:	e8 d6 2f 01 00       	call   f0122544 <strcmp>
f010f56e:	83 c4 10             	add    $0x10,%esp
f010f571:	85 c0                	test   %eax,%eax
f010f573:	75 07                	jne    f010f57c <tst_paging_manipulation+0x71>
	{
		test_pt_set_page_permissions_invalid_va();
f010f575:	e8 71 46 00 00       	call   f0113beb <test_pt_set_page_permissions_invalid_va>
f010f57a:	eb 6a                	jmp    f010f5e6 <tst_paging_manipulation+0xdb>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f010f57c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f57f:	83 c0 04             	add    $0x4,%eax
f010f582:	8b 00                	mov    (%eax),%eax
f010f584:	83 ec 08             	sub    $0x8,%esp
f010f587:	68 26 96 12 f0       	push   $0xf0129626
f010f58c:	50                   	push   %eax
f010f58d:	e8 b2 2f 01 00       	call   f0122544 <strcmp>
f010f592:	83 c4 10             	add    $0x10,%esp
f010f595:	85 c0                	test   %eax,%eax
f010f597:	75 07                	jne    f010f5a0 <tst_paging_manipulation+0x95>
	{
		test_pt_get_page_permissions();
f010f599:	e8 96 46 00 00       	call   f0113c34 <test_pt_get_page_permissions>
f010f59e:	eb 46                	jmp    f010f5e6 <tst_paging_manipulation+0xdb>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f010f5a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f5a3:	83 c0 04             	add    $0x4,%eax
f010f5a6:	8b 00                	mov    (%eax),%eax
f010f5a8:	83 ec 08             	sub    $0x8,%esp
f010f5ab:	68 2e 96 12 f0       	push   $0xf012962e
f010f5b0:	50                   	push   %eax
f010f5b1:	e8 8e 2f 01 00       	call   f0122544 <strcmp>
f010f5b6:	83 c4 10             	add    $0x10,%esp
f010f5b9:	85 c0                	test   %eax,%eax
f010f5bb:	75 07                	jne    f010f5c4 <tst_paging_manipulation+0xb9>
	{
		test_pt_clear_page_table_entry();
f010f5bd:	e8 b6 47 00 00       	call   f0113d78 <test_pt_clear_page_table_entry>
f010f5c2:	eb 22                	jmp    f010f5e6 <tst_paging_manipulation+0xdb>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f010f5c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f5c7:	83 c0 04             	add    $0x4,%eax
f010f5ca:	8b 00                	mov    (%eax),%eax
f010f5cc:	83 ec 08             	sub    $0x8,%esp
f010f5cf:	68 35 96 12 f0       	push   $0xf0129635
f010f5d4:	50                   	push   %eax
f010f5d5:	e8 6a 2f 01 00       	call   f0122544 <strcmp>
f010f5da:	83 c4 10             	add    $0x10,%esp
f010f5dd:	85 c0                	test   %eax,%eax
f010f5df:	75 05                	jne    f010f5e6 <tst_paging_manipulation+0xdb>
	{
		test_pt_clear_page_table_entry_invalid_va();
f010f5e1:	e8 eb 48 00 00       	call   f0113ed1 <test_pt_clear_page_table_entry_invalid_va>
	// Test 4-Convert virtual to physical: tstpg v2p
//	else if(strcmp(arguments[1], "v2p") == 0)
//	{
//		test_virtual_to_physical();
//	}
	return 0;
f010f5e6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f5eb:	c9                   	leave  
f010f5ec:	c3                   	ret    

f010f5ed <tst_kheap>:

int tst_kheap(int number_of_arguments, char **arguments)
{
f010f5ed:	55                   	push   %ebp
f010f5ee:	89 e5                	mov    %esp,%ebp
f010f5f0:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f010f5f3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f5f6:	83 c0 08             	add    $0x8,%eax
f010f5f9:	8b 00                	mov    (%eax),%eax
f010f5fb:	83 ec 08             	sub    $0x8,%esp
f010f5fe:	68 3c 96 12 f0       	push   $0xf012963c
f010f603:	50                   	push   %eax
f010f604:	e8 3b 2f 01 00       	call   f0122544 <strcmp>
f010f609:	83 c4 10             	add    $0x10,%esp
f010f60c:	85 c0                	test   %eax,%eax
f010f60e:	75 20                	jne    f010f630 <tst_kheap+0x43>
f010f610:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010f614:	74 1a                	je     f010f630 <tst_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f010f616:	83 ec 0c             	sub    $0xc,%esp
f010f619:	68 44 96 12 f0       	push   $0xf0129644
f010f61e:	e8 49 19 ff ff       	call   f0100f6c <cprintf>
f010f623:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f626:	b8 00 00 00 00       	mov    $0x0,%eax
f010f62b:	e9 f6 03 00 00       	jmp    f010fa26 <tst_kheap+0x439>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f010f630:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f633:	83 c0 08             	add    $0x8,%eax
f010f636:	8b 00                	mov    (%eax),%eax
f010f638:	83 ec 08             	sub    $0x8,%esp
f010f63b:	68 3c 96 12 f0       	push   $0xf012963c
f010f640:	50                   	push   %eax
f010f641:	e8 fe 2e 01 00       	call   f0122544 <strcmp>
f010f646:	83 c4 10             	add    $0x10,%esp
f010f649:	85 c0                	test   %eax,%eax
f010f64b:	74 43                	je     f010f690 <tst_kheap+0xa3>
f010f64d:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010f651:	74 3d                	je     f010f690 <tst_kheap+0xa3>
	{
		if (strcmp(arguments[2], "krealloc") != 0 && number_of_arguments != 5)
f010f653:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f656:	83 c0 08             	add    $0x8,%eax
f010f659:	8b 00                	mov    (%eax),%eax
f010f65b:	83 ec 08             	sub    $0x8,%esp
f010f65e:	68 94 96 12 f0       	push   $0xf0129694
f010f663:	50                   	push   %eax
f010f664:	e8 db 2e 01 00       	call   f0122544 <strcmp>
f010f669:	83 c4 10             	add    $0x10,%esp
f010f66c:	85 c0                	test   %eax,%eax
f010f66e:	74 20                	je     f010f690 <tst_kheap+0xa3>
f010f670:	83 7d 08 05          	cmpl   $0x5,0x8(%ebp)
f010f674:	74 1a                	je     f010f690 <tst_kheap+0xa3>
		{
			cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> <testname>\n") ;
f010f676:	83 ec 0c             	sub    $0xc,%esp
f010f679:	68 a0 96 12 f0       	push   $0xf01296a0
f010f67e:	e8 e9 18 ff ff       	call   f0100f6c <cprintf>
f010f683:	83 c4 10             	add    $0x10,%esp
			return 0;
f010f686:	b8 00 00 00 00       	mov    $0x0,%eax
f010f68b:	e9 96 03 00 00       	jmp    f010fa26 <tst_kheap+0x439>
		}
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f010f690:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f693:	83 c0 04             	add    $0x4,%eax
f010f696:	8b 00                	mov    (%eax),%eax
f010f698:	83 ec 08             	sub    $0x8,%esp
f010f69b:	68 e5 96 12 f0       	push   $0xf01296e5
f010f6a0:	50                   	push   %eax
f010f6a1:	e8 9e 2e 01 00       	call   f0122544 <strcmp>
f010f6a6:	83 c4 10             	add    $0x10,%esp
f010f6a9:	85 c0                	test   %eax,%eax
f010f6ab:	74 1d                	je     f010f6ca <tst_kheap+0xdd>
f010f6ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f6b0:	83 c0 04             	add    $0x4,%eax
f010f6b3:	8b 00                	mov    (%eax),%eax
f010f6b5:	83 ec 08             	sub    $0x8,%esp
f010f6b8:	68 e8 96 12 f0       	push   $0xf01296e8
f010f6bd:	50                   	push   %eax
f010f6be:	e8 81 2e 01 00       	call   f0122544 <strcmp>
f010f6c3:	83 c4 10             	add    $0x10,%esp
f010f6c6:	85 c0                	test   %eax,%eax
f010f6c8:	75 1a                	jne    f010f6e4 <tst_kheap+0xf7>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f010f6ca:	e8 6d f8 ff ff       	call   f010ef3c <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f010f6cf:	83 ec 0c             	sub    $0xc,%esp
f010f6d2:	68 ec 96 12 f0       	push   $0xf01296ec
f010f6d7:	e8 90 18 ff ff       	call   f0100f6c <cprintf>
f010f6dc:	83 c4 10             	add    $0x10,%esp
f010f6df:	e9 a0 00 00 00       	jmp    f010f784 <tst_kheap+0x197>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f010f6e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f6e7:	83 c0 04             	add    $0x4,%eax
f010f6ea:	8b 00                	mov    (%eax),%eax
f010f6ec:	83 ec 08             	sub    $0x8,%esp
f010f6ef:	68 19 97 12 f0       	push   $0xf0129719
f010f6f4:	50                   	push   %eax
f010f6f5:	e8 4a 2e 01 00       	call   f0122544 <strcmp>
f010f6fa:	83 c4 10             	add    $0x10,%esp
f010f6fd:	85 c0                	test   %eax,%eax
f010f6ff:	74 1d                	je     f010f71e <tst_kheap+0x131>
f010f701:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f704:	83 c0 04             	add    $0x4,%eax
f010f707:	8b 00                	mov    (%eax),%eax
f010f709:	83 ec 08             	sub    $0x8,%esp
f010f70c:	68 1c 97 12 f0       	push   $0xf012971c
f010f711:	50                   	push   %eax
f010f712:	e8 2d 2e 01 00       	call   f0122544 <strcmp>
f010f717:	83 c4 10             	add    $0x10,%esp
f010f71a:	85 c0                	test   %eax,%eax
f010f71c:	75 17                	jne    f010f735 <tst_kheap+0x148>
	{
		setKHeapPlacementStrategyBESTFIT();
f010f71e:	e8 29 f8 ff ff       	call   f010ef4c <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010f723:	83 ec 0c             	sub    $0xc,%esp
f010f726:	68 20 97 12 f0       	push   $0xf0129720
f010f72b:	e8 3c 18 ff ff       	call   f0100f6c <cprintf>
f010f730:	83 c4 10             	add    $0x10,%esp
f010f733:	eb 4f                	jmp    f010f784 <tst_kheap+0x197>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f010f735:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f738:	83 c0 04             	add    $0x4,%eax
f010f73b:	8b 00                	mov    (%eax),%eax
f010f73d:	83 ec 08             	sub    $0x8,%esp
f010f740:	68 4c 97 12 f0       	push   $0xf012974c
f010f745:	50                   	push   %eax
f010f746:	e8 f9 2d 01 00       	call   f0122544 <strcmp>
f010f74b:	83 c4 10             	add    $0x10,%esp
f010f74e:	85 c0                	test   %eax,%eax
f010f750:	74 1d                	je     f010f76f <tst_kheap+0x182>
f010f752:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f755:	83 c0 04             	add    $0x4,%eax
f010f758:	8b 00                	mov    (%eax),%eax
f010f75a:	83 ec 08             	sub    $0x8,%esp
f010f75d:	68 4f 97 12 f0       	push   $0xf012974f
f010f762:	50                   	push   %eax
f010f763:	e8 dc 2d 01 00       	call   f0122544 <strcmp>
f010f768:	83 c4 10             	add    $0x10,%esp
f010f76b:	85 c0                	test   %eax,%eax
f010f76d:	75 15                	jne    f010f784 <tst_kheap+0x197>
	{
		setKHeapPlacementStrategyNEXTFIT();
f010f76f:	e8 e8 f7 ff ff       	call   f010ef5c <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010f774:	83 ec 0c             	sub    $0xc,%esp
f010f777:	68 54 97 12 f0       	push   $0xf0129754
f010f77c:	e8 eb 17 ff ff       	call   f0100f6c <cprintf>
f010f781:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tst kheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f010f784:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f787:	83 c0 08             	add    $0x8,%eax
f010f78a:	8b 00                	mov    (%eax),%eax
f010f78c:	83 ec 08             	sub    $0x8,%esp
f010f78f:	68 3c 96 12 f0       	push   $0xf012963c
f010f794:	50                   	push   %eax
f010f795:	e8 aa 2d 01 00       	call   f0122544 <strcmp>
f010f79a:	83 c4 10             	add    $0x10,%esp
f010f79d:	85 c0                	test   %eax,%eax
f010f79f:	0f 85 13 01 00 00    	jne    f010f8b8 <tst_kheap+0x2cb>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f010f7a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f7a8:	83 c0 0c             	add    $0xc,%eax
f010f7ab:	8b 00                	mov    (%eax),%eax
f010f7ad:	83 ec 04             	sub    $0x4,%esp
f010f7b0:	6a 0a                	push   $0xa
f010f7b2:	6a 00                	push   $0x0
f010f7b4:	50                   	push   %eax
f010f7b5:	e8 de 2f 01 00       	call   f0122798 <strtol>
f010f7ba:	83 c4 10             	add    $0x10,%esp
f010f7bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f010f7c0:	e8 a7 f7 ff ff       	call   f010ef6c <isKHeapPlacementStrategyFIRSTFIT>
f010f7c5:	84 c0                	test   %al,%al
f010f7c7:	74 54                	je     f010f81d <tst_kheap+0x230>
		{
			if (testNum == 0)
f010f7c9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010f7cd:	75 1a                	jne    f010f7e9 <tst_kheap+0x1fc>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010f7cf:	83 ec 0c             	sub    $0xc,%esp
f010f7d2:	68 80 97 12 f0       	push   $0xf0129780
f010f7d7:	e8 90 17 ff ff       	call   f0100f6c <cprintf>
f010f7dc:	83 c4 10             	add    $0x10,%esp
				return 0;
f010f7df:	b8 00 00 00 00       	mov    $0x0,%eax
f010f7e4:	e9 3d 02 00 00       	jmp    f010fa26 <tst_kheap+0x439>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f010f7e9:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010f7ed:	75 0a                	jne    f010f7f9 <tst_kheap+0x20c>
				test_kmalloc();
f010f7ef:	e8 df a7 00 00       	call   f0119fd3 <test_kmalloc>
f010f7f4:	e9 b5 00 00 00       	jmp    f010f8ae <tst_kheap+0x2c1>
			else if (testNum == 2)
f010f7f9:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010f7fd:	75 0a                	jne    f010f809 <tst_kheap+0x21c>
				test_kmalloc_firstfit1();
f010f7ff:	e8 e9 b2 00 00       	call   f011aaed <test_kmalloc_firstfit1>
f010f804:	e9 a5 00 00 00       	jmp    f010f8ae <tst_kheap+0x2c1>
			else if (testNum == 3)
f010f809:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010f80d:	0f 85 9b 00 00 00    	jne    f010f8ae <tst_kheap+0x2c1>
				test_kmalloc_firstfit2();
f010f813:	e8 69 bd 00 00       	call   f011b581 <test_kmalloc_firstfit2>
f010f818:	e9 91 00 00 00       	jmp    f010f8ae <tst_kheap+0x2c1>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f010f81d:	e8 5f f7 ff ff       	call   f010ef81 <isKHeapPlacementStrategyBESTFIT>
f010f822:	84 c0                	test   %al,%al
f010f824:	74 47                	je     f010f86d <tst_kheap+0x280>
		{
			if (testNum == 0)
f010f826:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010f82a:	75 1a                	jne    f010f846 <tst_kheap+0x259>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f010f82c:	83 ec 0c             	sub    $0xc,%esp
f010f82f:	68 d0 97 12 f0       	push   $0xf01297d0
f010f834:	e8 33 17 ff ff       	call   f0100f6c <cprintf>
f010f839:	83 c4 10             	add    $0x10,%esp
				return 0;
f010f83c:	b8 00 00 00 00       	mov    $0x0,%eax
f010f841:	e9 e0 01 00 00       	jmp    f010fa26 <tst_kheap+0x439>
			}
			if (testNum == 1)
f010f846:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010f84a:	75 07                	jne    f010f853 <tst_kheap+0x266>
				test_kmalloc();
f010f84c:	e8 82 a7 00 00       	call   f0119fd3 <test_kmalloc>
f010f851:	eb 5b                	jmp    f010f8ae <tst_kheap+0x2c1>
			else if (testNum == 2)
f010f853:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010f857:	75 07                	jne    f010f860 <tst_kheap+0x273>
				test_kmalloc_bestfit1();
f010f859:	e8 f0 02 01 00       	call   f011fb4e <test_kmalloc_bestfit1>
f010f85e:	eb 4e                	jmp    f010f8ae <tst_kheap+0x2c1>
			else if (testNum == 3)
f010f860:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010f864:	75 48                	jne    f010f8ae <tst_kheap+0x2c1>
				test_kmalloc_bestfit2();
f010f866:	e8 00 03 01 00       	call   f011fb6b <test_kmalloc_bestfit2>
f010f86b:	eb 41                	jmp    f010f8ae <tst_kheap+0x2c1>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f010f86d:	e8 24 f7 ff ff       	call   f010ef96 <isKHeapPlacementStrategyNEXTFIT>
f010f872:	84 c0                	test   %al,%al
f010f874:	74 38                	je     f010f8ae <tst_kheap+0x2c1>
		{
			if (testNum == 0)
f010f876:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010f87a:	75 1a                	jne    f010f896 <tst_kheap+0x2a9>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f010f87c:	83 ec 0c             	sub    $0xc,%esp
f010f87f:	68 20 98 12 f0       	push   $0xf0129820
f010f884:	e8 e3 16 ff ff       	call   f0100f6c <cprintf>
f010f889:	83 c4 10             	add    $0x10,%esp
				return 0;
f010f88c:	b8 00 00 00 00       	mov    $0x0,%eax
f010f891:	e9 90 01 00 00       	jmp    f010fa26 <tst_kheap+0x439>
			}
			//Test cont. allocation
			if (testNum == 1)
f010f896:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010f89a:	75 07                	jne    f010f8a3 <tst_kheap+0x2b6>
				test_kmalloc();
f010f89c:	e8 32 a7 00 00       	call   f0119fd3 <test_kmalloc>
f010f8a1:	eb 0b                	jmp    f010f8ae <tst_kheap+0x2c1>
			//Test nextfit strategy
			else if (testNum == 2)
f010f8a3:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010f8a7:	75 05                	jne    f010f8ae <tst_kheap+0x2c1>
				test_kmalloc_nextfit();
f010f8a9:	e8 80 02 01 00       	call   f011fb2e <test_kmalloc_nextfit>
		}
		return 0;
f010f8ae:	b8 00 00 00 00       	mov    $0x0,%eax
f010f8b3:	e9 6e 01 00 00       	jmp    f010fa26 <tst_kheap+0x439>
	}
	// Test 2-kfree: tst kheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f010f8b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f8bb:	83 c0 08             	add    $0x8,%eax
f010f8be:	8b 00                	mov    (%eax),%eax
f010f8c0:	83 ec 08             	sub    $0x8,%esp
f010f8c3:	68 6e 98 12 f0       	push   $0xf012986e
f010f8c8:	50                   	push   %eax
f010f8c9:	e8 76 2c 01 00       	call   f0122544 <strcmp>
f010f8ce:	83 c4 10             	add    $0x10,%esp
f010f8d1:	85 c0                	test   %eax,%eax
f010f8d3:	75 28                	jne    f010f8fd <tst_kheap+0x310>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f010f8d5:	e8 a7 f6 ff ff       	call   f010ef81 <isKHeapPlacementStrategyBESTFIT>
f010f8da:	84 c0                	test   %al,%al
f010f8dc:	75 09                	jne    f010f8e7 <tst_kheap+0x2fa>
f010f8de:	e8 89 f6 ff ff       	call   f010ef6c <isKHeapPlacementStrategyFIRSTFIT>
f010f8e3:	84 c0                	test   %al,%al
f010f8e5:	74 07                	je     f010f8ee <tst_kheap+0x301>
		{
			test_kfree_bestfirstfit();
f010f8e7:	e8 4e c7 00 00       	call   f011c03a <test_kfree_bestfirstfit>
f010f8ec:	eb 05                	jmp    f010f8f3 <tst_kheap+0x306>
		}
		else //NEXT & CONT
		{
			test_kfree();
f010f8ee:	e8 b5 02 01 00       	call   f011fba8 <test_kfree>
		}
		return 0;
f010f8f3:	b8 00 00 00 00       	mov    $0x0,%eax
f010f8f8:	e9 29 01 00 00       	jmp    f010fa26 <tst_kheap+0x439>
	}
	// Test 3-kphysaddr: tst kheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f010f8fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f900:	83 c0 08             	add    $0x8,%eax
f010f903:	8b 00                	mov    (%eax),%eax
f010f905:	83 ec 08             	sub    $0x8,%esp
f010f908:	68 74 98 12 f0       	push   $0xf0129874
f010f90d:	50                   	push   %eax
f010f90e:	e8 31 2c 01 00       	call   f0122544 <strcmp>
f010f913:	83 c4 10             	add    $0x10,%esp
f010f916:	85 c0                	test   %eax,%eax
f010f918:	75 0f                	jne    f010f929 <tst_kheap+0x33c>
	{
		test_kheap_phys_addr();
f010f91a:	e8 26 dd 00 00       	call   f011d645 <test_kheap_phys_addr>
		return 0;
f010f91f:	b8 00 00 00 00       	mov    $0x0,%eax
f010f924:	e9 fd 00 00 00       	jmp    f010fa26 <tst_kheap+0x439>
	}
	// Test 4-kvirtaddr: tst kheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f010f929:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f92c:	83 c0 08             	add    $0x8,%eax
f010f92f:	8b 00                	mov    (%eax),%eax
f010f931:	83 ec 08             	sub    $0x8,%esp
f010f934:	68 7e 98 12 f0       	push   $0xf012987e
f010f939:	50                   	push   %eax
f010f93a:	e8 05 2c 01 00       	call   f0122544 <strcmp>
f010f93f:	83 c4 10             	add    $0x10,%esp
f010f942:	85 c0                	test   %eax,%eax
f010f944:	75 0f                	jne    f010f955 <tst_kheap+0x368>
	{
		test_kheap_virt_addr();
f010f946:	e8 74 ea 00 00       	call   f011e3bf <test_kheap_virt_addr>
		return 0;
f010f94b:	b8 00 00 00 00       	mov    $0x0,%eax
f010f950:	e9 d1 00 00 00       	jmp    f010fa26 <tst_kheap+0x439>
	}
	// Test 5-krealloc: tst kheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010f955:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f958:	83 c0 08             	add    $0x8,%eax
f010f95b:	8b 00                	mov    (%eax),%eax
f010f95d:	83 ec 08             	sub    $0x8,%esp
f010f960:	68 94 96 12 f0       	push   $0xf0129694
f010f965:	50                   	push   %eax
f010f966:	e8 d9 2b 01 00       	call   f0122544 <strcmp>
f010f96b:	83 c4 10             	add    $0x10,%esp
f010f96e:	85 c0                	test   %eax,%eax
f010f970:	0f 85 89 00 00 00    	jne    f010f9ff <tst_kheap+0x412>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f010f976:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f979:	83 c0 0c             	add    $0xc,%eax
f010f97c:	8b 00                	mov    (%eax),%eax
f010f97e:	83 ec 04             	sub    $0x4,%esp
f010f981:	6a 0a                	push   $0xa
f010f983:	6a 00                	push   $0x0
f010f985:	50                   	push   %eax
f010f986:	e8 0d 2e 01 00       	call   f0122798 <strtol>
f010f98b:	83 c4 10             	add    $0x10,%esp
f010f98e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f010f991:	e8 d6 f5 ff ff       	call   f010ef6c <isKHeapPlacementStrategyFIRSTFIT>
f010f996:	84 c0                	test   %al,%al
f010f998:	74 42                	je     f010f9dc <tst_kheap+0x3ef>
		{
			if (testNum == 0)
f010f99a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f99e:	75 17                	jne    f010f9b7 <tst_kheap+0x3ca>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010f9a0:	83 ec 0c             	sub    $0xc,%esp
f010f9a3:	68 80 97 12 f0       	push   $0xf0129780
f010f9a8:	e8 bf 15 ff ff       	call   f0100f6c <cprintf>
f010f9ad:	83 c4 10             	add    $0x10,%esp
				return 0;
f010f9b0:	b8 00 00 00 00       	mov    $0x0,%eax
f010f9b5:	eb 6f                	jmp    f010fa26 <tst_kheap+0x439>
			}
			if (testNum==1)
f010f9b7:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f010f9bb:	75 07                	jne    f010f9c4 <tst_kheap+0x3d7>
				test_krealloc_FF1();
f010f9bd:	e8 cc 04 01 00       	call   f011fe8e <test_krealloc_FF1>
f010f9c2:	eb 18                	jmp    f010f9dc <tst_kheap+0x3ef>
			else if (testNum==2)
f010f9c4:	83 7d f0 02          	cmpl   $0x2,-0x10(%ebp)
f010f9c8:	75 07                	jne    f010f9d1 <tst_kheap+0x3e4>
				test_krealloc_FF2();
f010f9ca:	e8 0c 05 01 00       	call   f011fedb <test_krealloc_FF2>
f010f9cf:	eb 0b                	jmp    f010f9dc <tst_kheap+0x3ef>
			else if (testNum==3)
f010f9d1:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f010f9d5:	75 05                	jne    f010f9dc <tst_kheap+0x3ef>
				test_krealloc_FF3();
f010f9d7:	e8 4c 05 01 00       	call   f011ff28 <test_krealloc_FF3>
		}
		if (isKHeapPlacementStrategyNEXTFIT())
f010f9dc:	e8 b5 f5 ff ff       	call   f010ef96 <isKHeapPlacementStrategyNEXTFIT>
f010f9e1:	84 c0                	test   %al,%al
f010f9e3:	74 05                	je     f010f9ea <tst_kheap+0x3fd>
		{
			test_krealloc();
f010f9e5:	e8 0a 04 01 00       	call   f011fdf4 <test_krealloc>
		}
		if (isKHeapPlacementStrategyBESTFIT())
f010f9ea:	e8 92 f5 ff ff       	call   f010ef81 <isKHeapPlacementStrategyBESTFIT>
f010f9ef:	84 c0                	test   %al,%al
f010f9f1:	74 05                	je     f010f9f8 <tst_kheap+0x40b>
		{
			test_krealloc_BF();
f010f9f3:	e8 49 04 01 00       	call   f011fe41 <test_krealloc_BF>
		}
		return 0;
f010f9f8:	b8 00 00 00 00       	mov    $0x0,%eax
f010f9fd:	eb 27                	jmp    f010fa26 <tst_kheap+0x439>
	}
	// Test 6-sbr: tst kheap FF sbrk
	else if (strcmp(arguments[2], "sbrk") == 0)
f010f9ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f010fa02:	83 c0 08             	add    $0x8,%eax
f010fa05:	8b 00                	mov    (%eax),%eax
f010fa07:	83 ec 08             	sub    $0x8,%esp
f010fa0a:	68 88 98 12 f0       	push   $0xf0129888
f010fa0f:	50                   	push   %eax
f010fa10:	e8 2f 2b 01 00       	call   f0122544 <strcmp>
f010fa15:	83 c4 10             	add    $0x10,%esp
f010fa18:	85 c0                	test   %eax,%eax
f010fa1a:	75 05                	jne    f010fa21 <tst_kheap+0x434>
	{
		test_ksbrk();
f010fa1c:	e8 38 f6 00 00       	call   f011f059 <test_ksbrk>
	}
	return 0;
f010fa21:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010fa26:	c9                   	leave  
f010fa27:	c3                   	ret    

f010fa28 <check_block>:
short* startVAs[numOfAllocs*allocCntPerSize+1] ;
short* midVAs[numOfAllocs*allocCntPerSize+1] ;
short* endVAs[numOfAllocs*allocCntPerSize+1] ;

int check_block(void* va, void* expectedVA, uint32 expectedSize, uint8 expectedFlag)
{
f010fa28:	55                   	push   %ebp
f010fa29:	89 e5                	mov    %esp,%ebp
f010fa2b:	83 ec 28             	sub    $0x28,%esp
f010fa2e:	8b 45 14             	mov    0x14(%ebp),%eax
f010fa31:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//Check returned va
	if(va != expectedVA)
f010fa34:	8b 45 08             	mov    0x8(%ebp),%eax
f010fa37:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010fa3a:	74 1d                	je     f010fa59 <check_block+0x31>
	{
		cprintf("wrong block address. Expected %x, Actual %x\n", expectedVA, va);
f010fa3c:	83 ec 04             	sub    $0x4,%esp
f010fa3f:	ff 75 08             	pushl  0x8(%ebp)
f010fa42:	ff 75 0c             	pushl  0xc(%ebp)
f010fa45:	68 90 98 12 f0       	push   $0xf0129890
f010fa4a:	e8 1d 15 ff ff       	call   f0100f6c <cprintf>
f010fa4f:	83 c4 10             	add    $0x10,%esp
		return 0;
f010fa52:	b8 00 00 00 00       	mov    $0x0,%eax
f010fa57:	eb 55                	jmp    f010faae <check_block+0x86>
	}
	//Check header & footer
	uint32 header = *((uint32*)va-1);
f010fa59:	8b 45 08             	mov    0x8(%ebp),%eax
f010fa5c:	8b 40 fc             	mov    -0x4(%eax),%eax
f010fa5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 footer = *((uint32*)(va + expectedSize - 8));
f010fa62:	8b 45 10             	mov    0x10(%ebp),%eax
f010fa65:	8d 50 f8             	lea    -0x8(%eax),%edx
f010fa68:	8b 45 08             	mov    0x8(%ebp),%eax
f010fa6b:	01 d0                	add    %edx,%eax
f010fa6d:	8b 00                	mov    (%eax),%eax
f010fa6f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	uint32 expectedData = expectedSize | expectedFlag ;
f010fa72:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f010fa76:	0b 45 10             	or     0x10(%ebp),%eax
f010fa79:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(header != expectedData || footer != expectedData)
f010fa7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fa7f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010fa82:	75 08                	jne    f010fa8c <check_block+0x64>
f010fa84:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010fa87:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010fa8a:	74 1d                	je     f010faa9 <check_block+0x81>
	{
		cprintf("wrong header/footer data. Expected %d, Actual H:%d F:%d\n", expectedData, header, footer);
f010fa8c:	ff 75 f0             	pushl  -0x10(%ebp)
f010fa8f:	ff 75 f4             	pushl  -0xc(%ebp)
f010fa92:	ff 75 ec             	pushl  -0x14(%ebp)
f010fa95:	68 c0 98 12 f0       	push   $0xf01298c0
f010fa9a:	e8 cd 14 ff ff       	call   f0100f6c <cprintf>
f010fa9f:	83 c4 10             	add    $0x10,%esp
		return 0;
f010faa2:	b8 00 00 00 00       	mov    $0x0,%eax
f010faa7:	eb 05                	jmp    f010faae <check_block+0x86>
	}
	return 1;
f010faa9:	b8 01 00 00 00       	mov    $0x1,%eax
}
f010faae:	c9                   	leave  
f010faaf:	c3                   	ret    

f010fab0 <check_list_size>:
int check_list_size(uint32 expectedListSize)
{
f010fab0:	55                   	push   %ebp
f010fab1:	89 e5                	mov    %esp,%ebp
f010fab3:	83 ec 08             	sub    $0x8,%esp
	if (LIST_SIZE(&freeBlocksList) != expectedListSize)
f010fab6:	a1 5c ef 59 f0       	mov    0xf059ef5c,%eax
f010fabb:	3b 45 08             	cmp    0x8(%ebp),%eax
f010fabe:	74 20                	je     f010fae0 <check_list_size+0x30>
	{
		cprintf("freeBlocksList: wrong size! expected %d, actual %d\n", expectedListSize, LIST_SIZE(&freeBlocksList));
f010fac0:	a1 5c ef 59 f0       	mov    0xf059ef5c,%eax
f010fac5:	83 ec 04             	sub    $0x4,%esp
f010fac8:	50                   	push   %eax
f010fac9:	ff 75 08             	pushl  0x8(%ebp)
f010facc:	68 fc 98 12 f0       	push   $0xf01298fc
f010fad1:	e8 96 14 ff ff       	call   f0100f6c <cprintf>
f010fad6:	83 c4 10             	add    $0x10,%esp
		return 0;
f010fad9:	b8 00 00 00 00       	mov    $0x0,%eax
f010fade:	eb 05                	jmp    f010fae5 <check_list_size+0x35>
	}
	return 1;
f010fae0:	b8 01 00 00 00       	mov    $0x1,%eax
}
f010fae5:	c9                   	leave  
f010fae6:	c3                   	ret    

f010fae7 <test_initialize_dynamic_allocator>:
/***********************************************************************************************************************/

void test_initialize_dynamic_allocator()
{
f010fae7:	55                   	push   %ebp
f010fae8:	89 e5                	mov    %esp,%ebp
f010faea:	83 ec 28             	sub    $0x28,%esp
	panic("test_initialize_dynamic_allocator: the kernel heap should be diabled. make sure USE_KHEAP = 0");
	return;
#endif

	//write initial data at the start (for checking)
	int* tmp_ptr = (int*)KERNEL_HEAP_START;
f010faed:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
	*tmp_ptr = -1 ;
f010faf4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010faf7:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	*(tmp_ptr+1) = 1 ;
f010fafd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fb00:	83 c0 04             	add    $0x4,%eax
f010fb03:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

	uint32 initAllocatedSpace = 2*Mega;
f010fb09:	c7 45 f0 00 00 20 00 	movl   $0x200000,-0x10(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010fb10:	83 ec 08             	sub    $0x8,%esp
f010fb13:	ff 75 f0             	pushl  -0x10(%ebp)
f010fb16:	68 00 00 00 f6       	push   $0xf6000000
f010fb1b:	e8 e7 34 01 00       	call   f0123007 <initialize_dynamic_allocator>
f010fb20:	83 c4 10             	add    $0x10,%esp


	//Check#1: Metadata
	uint32* daBeg = (uint32*) KERNEL_HEAP_START ;
f010fb23:	c7 45 ec 00 00 00 f6 	movl   $0xf6000000,-0x14(%ebp)
	uint32* daEnd = (uint32*) (KERNEL_HEAP_START +  initAllocatedSpace - sizeof(int));
f010fb2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010fb2d:	2d 04 00 00 0a       	sub    $0xa000004,%eax
f010fb32:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32* blkHeader = (uint32*) (KERNEL_HEAP_START + sizeof(int));
f010fb35:	c7 45 e4 04 00 00 f6 	movl   $0xf6000004,-0x1c(%ebp)
	uint32* blkFooter = (uint32*) (KERNEL_HEAP_START +  initAllocatedSpace - 2*sizeof(int));
f010fb3c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010fb3f:	2d 08 00 00 0a       	sub    $0xa000008,%eax
f010fb44:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (*daBeg != 1 || *daEnd != 1 || (*blkHeader != initAllocatedSpace - 2*sizeof(int))|| (*blkFooter != initAllocatedSpace - 2*sizeof(int)))
f010fb47:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb4a:	8b 00                	mov    (%eax),%eax
f010fb4c:	83 f8 01             	cmp    $0x1,%eax
f010fb4f:	75 28                	jne    f010fb79 <test_initialize_dynamic_allocator+0x92>
f010fb51:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010fb54:	8b 00                	mov    (%eax),%eax
f010fb56:	83 f8 01             	cmp    $0x1,%eax
f010fb59:	75 1e                	jne    f010fb79 <test_initialize_dynamic_allocator+0x92>
f010fb5b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fb5e:	8b 00                	mov    (%eax),%eax
f010fb60:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010fb63:	83 ea 08             	sub    $0x8,%edx
f010fb66:	39 d0                	cmp    %edx,%eax
f010fb68:	75 0f                	jne    f010fb79 <test_initialize_dynamic_allocator+0x92>
f010fb6a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010fb6d:	8b 00                	mov    (%eax),%eax
f010fb6f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010fb72:	83 ea 08             	sub    $0x8,%edx
f010fb75:	39 d0                	cmp    %edx,%eax
f010fb77:	74 14                	je     f010fb8d <test_initialize_dynamic_allocator+0xa6>
	{
		panic("Content of header/footer and/or DA begin/end are not set correctly");
f010fb79:	83 ec 04             	sub    $0x4,%esp
f010fb7c:	68 30 99 12 f0       	push   $0xf0129930
f010fb81:	6a 53                	push   $0x53
f010fb83:	68 74 99 12 f0       	push   $0xf0129974
f010fb88:	e8 8d 07 ff ff       	call   f010031a <_panic>
	}
	if (LIST_SIZE(&freeBlocksList) != 1 || (uint32)LIST_FIRST(&freeBlocksList) != KERNEL_HEAP_START + 2*sizeof(int))
f010fb8d:	a1 5c ef 59 f0       	mov    0xf059ef5c,%eax
f010fb92:	83 f8 01             	cmp    $0x1,%eax
f010fb95:	75 0c                	jne    f010fba3 <test_initialize_dynamic_allocator+0xbc>
f010fb97:	a1 50 ef 59 f0       	mov    0xf059ef50,%eax
f010fb9c:	3d 08 00 00 f6       	cmp    $0xf6000008,%eax
f010fba1:	74 14                	je     f010fbb7 <test_initialize_dynamic_allocator+0xd0>
	{
		panic("free block is not added correctly");
f010fba3:	83 ec 04             	sub    $0x4,%esp
f010fba6:	68 98 99 12 f0       	push   $0xf0129998
f010fbab:	6a 57                	push   $0x57
f010fbad:	68 74 99 12 f0       	push   $0xf0129974
f010fbb2:	e8 63 07 ff ff       	call   f010031a <_panic>
	}

	cprintf("Congratulations!! test initialize_dynamic_allocator completed successfully.\n");
f010fbb7:	83 ec 0c             	sub    $0xc,%esp
f010fbba:	68 bc 99 12 f0       	push   $0xf01299bc
f010fbbf:	e8 a8 13 ff ff       	call   f0100f6c <cprintf>
f010fbc4:	83 c4 10             	add    $0x10,%esp
}
f010fbc7:	90                   	nop
f010fbc8:	c9                   	leave  
f010fbc9:	c3                   	ret    

f010fbca <test_initial_alloc>:


int test_initial_alloc(int ALLOC_STRATEGY)
{
f010fbca:	55                   	push   %ebp
f010fbcb:	89 e5                	mov    %esp,%ebp
f010fbcd:	83 ec 48             	sub    $0x48,%esp
#if USE_KHEAP
	panic("test_initial_alloc: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return 0;
#endif

	int eval = 0;
f010fbd0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct = 1;
f010fbd7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int initAllocatedSpace = 3*Mega;
f010fbde:	c7 45 d0 00 00 30 00 	movl   $0x300000,-0x30(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010fbe5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010fbe8:	83 ec 08             	sub    $0x8,%esp
f010fbeb:	50                   	push   %eax
f010fbec:	68 00 00 00 f6       	push   $0xf6000000
f010fbf1:	e8 11 34 01 00       	call   f0123007 <initialize_dynamic_allocator>
f010fbf6:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/*INITIAL ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010fbf9:	83 ec 0c             	sub    $0xc,%esp
f010fbfc:	68 0c 9a 12 f0       	push   $0xf0129a0c
f010fc01:	e8 66 13 ff ff       	call   f0100f6c <cprintf>
f010fc06:	83 c4 10             	add    $0x10,%esp

	is_correct = 1;
f010fc09:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	va = alloc_block(3*initAllocatedSpace, ALLOC_STRATEGY);
f010fc10:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010fc13:	89 c2                	mov    %eax,%edx
f010fc15:	01 d2                	add    %edx,%edx
f010fc17:	01 d0                	add    %edx,%eax
f010fc19:	83 ec 08             	sub    $0x8,%esp
f010fc1c:	ff 75 08             	pushl  0x8(%ebp)
f010fc1f:	50                   	push   %eax
f010fc20:	e8 b5 32 01 00       	call   f0122eda <alloc_block>
f010fc25:	83 c4 10             	add    $0x10,%esp
f010fc28:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010fc2b:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010fc2f:	74 17                	je     f010fc48 <test_initial_alloc+0x7e>
	{
		is_correct = 0;
f010fc31:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #1: should not be allocated.\n");
f010fc38:	83 ec 0c             	sub    $0xc,%esp
f010fc3b:	68 48 9a 12 f0       	push   $0xf0129a48
f010fc40:	e8 27 13 ff ff       	call   f0100f6c <cprintf>
f010fc45:	83 c4 10             	add    $0x10,%esp
	}
	va = alloc_block(initAllocatedSpace, ALLOC_STRATEGY);
f010fc48:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010fc4b:	83 ec 08             	sub    $0x8,%esp
f010fc4e:	ff 75 08             	pushl  0x8(%ebp)
f010fc51:	50                   	push   %eax
f010fc52:	e8 83 32 01 00       	call   f0122eda <alloc_block>
f010fc57:	83 c4 10             	add    $0x10,%esp
f010fc5a:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010fc5d:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010fc61:	74 17                	je     f010fc7a <test_initial_alloc+0xb0>
	{
		is_correct = 0;
f010fc63:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #2: should not be allocated.\n");
f010fc6a:	83 ec 0c             	sub    $0xc,%esp
f010fc6d:	68 78 9a 12 f0       	push   $0xf0129a78
f010fc72:	e8 f5 12 ff ff       	call   f0100f6c <cprintf>
f010fc77:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010fc7a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fc7e:	74 04                	je     f010fc84 <test_initial_alloc+0xba>
	{
		eval += 5;
f010fc80:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 2: Try to allocate set of blocks with different sizes*/
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
f010fc84:	83 ec 0c             	sub    $0xc,%esp
f010fc87:	68 a8 9a 12 f0       	push   $0xf0129aa8
f010fc8c:	e8 db 12 ff ff       	call   f0100f6c <cprintf>
f010fc91:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fc94:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	void* expectedVA;
	uint32 expectedNumFreeBlks;
	int totalSizes = 0;
f010fc9b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010fca2:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010fca9:	eb 2a                	jmp    f010fcd5 <test_initial_alloc+0x10b>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f010fcab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010fcae:	8b 14 85 b8 dd 17 f0 	mov    -0xfe82248(,%eax,4),%edx
f010fcb5:	89 d0                	mov    %edx,%eax
f010fcb7:	c1 e0 02             	shl    $0x2,%eax
f010fcba:	01 d0                	add    %edx,%eax
f010fcbc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010fcc3:	01 d0                	add    %edx,%eax
f010fcc5:	c1 e0 03             	shl    $0x3,%eax
f010fcc8:	89 c2                	mov    %eax,%edx
f010fcca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fccd:	01 d0                	add    %edx,%eax
f010fccf:	89 45 ec             	mov    %eax,-0x14(%ebp)
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
	is_correct = 1;
	void* expectedVA;
	uint32 expectedNumFreeBlks;
	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f010fcd2:	ff 45 e8             	incl   -0x18(%ebp)
f010fcd5:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f010fcd9:	7e d0                	jle    f010fcab <test_initial_alloc+0xe1>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes - 2*sizeof(int) ; //exclude size of "DA Begin & End" blocks
f010fcdb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010fcde:	2b 45 ec             	sub    -0x14(%ebp),%eax
f010fce1:	83 e8 08             	sub    $0x8,%eax
f010fce4:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//cprintf("\n********* Remaining size = %d\n", remainSize);
	if (remainSize <= 0)
f010fce7:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010fceb:	7f 17                	jg     f010fd04 <test_initial_alloc+0x13a>
	{
		is_correct = 0;
f010fced:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
f010fcf4:	83 ec 0c             	sub    $0xc,%esp
f010fcf7:	68 f4 9a 12 f0       	push   $0xf0129af4
f010fcfc:	e8 6b 12 ff ff       	call   f0100f6c <cprintf>
f010fd01:	83 c4 10             	add    $0x10,%esp
	}
	int idx = 0;
f010fd04:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
f010fd0b:	c7 45 e0 04 00 00 f6 	movl   $0xf6000004,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010fd12:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010fd19:	e9 f3 00 00 00       	jmp    f010fe11 <test_initial_alloc+0x247>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010fd1e:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010fd25:	e9 d7 00 00 00       	jmp    f010fe01 <test_initial_alloc+0x237>
		{
			actualSize = allocSizes[i] - sizeOfMetaData;
f010fd2a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fd2d:	8b 04 85 b8 dd 17 f0 	mov    -0xfe82248(,%eax,4),%eax
f010fd34:	83 e8 08             	sub    $0x8,%eax
f010fd37:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010fd3a:	83 ec 08             	sub    $0x8,%esp
f010fd3d:	ff 75 08             	pushl  0x8(%ebp)
f010fd40:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fd43:	e8 92 31 01 00       	call   f0122eda <alloc_block>
f010fd48:	83 c4 10             	add    $0x10,%esp
f010fd4b:	89 c2                	mov    %eax,%edx
f010fd4d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fd50:	89 14 85 80 00 5c f0 	mov    %edx,-0xfa3ff80(,%eax,4)
f010fd57:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fd5a:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f010fd61:	89 45 cc             	mov    %eax,-0x34(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f010fd64:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010fd67:	d1 e8                	shr    %eax
f010fd69:	89 c2                	mov    %eax,%edx
f010fd6b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010fd6e:	01 c2                	add    %eax,%edx
f010fd70:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fd73:	89 14 85 80 2c 5c f0 	mov    %edx,-0xfa3d380(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f010fd7a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010fd7d:	8d 50 fe             	lea    -0x2(%eax),%edx
f010fd80:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010fd83:	01 c2                	add    %eax,%edx
f010fd85:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fd88:	89 14 85 80 16 5c f0 	mov    %edx,-0xfa3e980(,%eax,4)
			//Check block
			expectedVA = (curVA + sizeOfMetaData/2);
f010fd8f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010fd92:	83 c0 04             	add    $0x4,%eax
f010fd95:	89 45 c0             	mov    %eax,-0x40(%ebp)
			if (check_block(va, expectedVA, allocSizes[i], 1) == 0)
f010fd98:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fd9b:	8b 04 85 b8 dd 17 f0 	mov    -0xfe82248(,%eax,4),%eax
f010fda2:	6a 01                	push   $0x1
f010fda4:	50                   	push   %eax
f010fda5:	ff 75 c0             	pushl  -0x40(%ebp)
f010fda8:	ff 75 cc             	pushl  -0x34(%ebp)
f010fdab:	e8 78 fc ff ff       	call   f010fa28 <check_block>
f010fdb0:	83 c4 10             	add    $0x10,%esp
f010fdb3:	85 c0                	test   %eax,%eax
f010fdb5:	75 07                	jne    f010fdbe <test_initial_alloc+0x1f4>
			{
				is_correct = 0;
f010fdb7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			}
			curVA += allocSizes[i] ;
f010fdbe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fdc1:	8b 04 85 b8 dd 17 f0 	mov    -0xfe82248(,%eax,4),%eax
f010fdc8:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f010fdcb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fdce:	8b 14 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%edx
f010fdd5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fdd8:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f010fddb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fdde:	8b 14 85 80 2c 5c f0 	mov    -0xfa3d380(,%eax,4),%edx
f010fde5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fde8:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f010fdeb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fdee:	8b 14 85 80 16 5c f0 	mov    -0xfa3e980(,%eax,4),%edx
f010fdf5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fdf8:	66 89 02             	mov    %ax,(%edx)
			idx++;
f010fdfb:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010fdfe:	ff 45 d8             	incl   -0x28(%ebp)
f010fe01:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f010fe08:	0f 8e 1c ff ff ff    	jle    f010fd2a <test_initial_alloc+0x160>
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
	}
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010fe0e:	ff 45 dc             	incl   -0x24(%ebp)
f010fe11:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010fe15:	0f 8e 03 ff ff ff    	jle    f010fd1e <test_initial_alloc+0x154>
			idx++;
		}
		//if (is_correct == 0)
		//break;
	}
	if (is_correct)
f010fe1b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fe1f:	74 04                	je     f010fe25 <test_initial_alloc+0x25b>
	{
		eval += 15;
f010fe21:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}
	if (check_list_size(1))
f010fe25:	83 ec 0c             	sub    $0xc,%esp
f010fe28:	6a 01                	push   $0x1
f010fe2a:	e8 81 fc ff ff       	call   f010fab0 <check_list_size>
f010fe2f:	83 c4 10             	add    $0x10,%esp
f010fe32:	85 c0                	test   %eax,%eax
f010fe34:	74 04                	je     f010fe3a <test_initial_alloc+0x270>
	{
		eval += 5;
f010fe36:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f010fe3a:	83 ec 0c             	sub    $0xc,%esp
f010fe3d:	68 70 9b 12 f0       	push   $0xf0129b70
f010fe42:	e8 25 11 ff ff       	call   f0100f6c <cprintf>
f010fe47:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fe4a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	actualSize = remainSize - sizeOfMetaData;
f010fe51:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010fe54:	83 e8 08             	sub    $0x8,%eax
f010fe57:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010fe5a:	83 ec 08             	sub    $0x8,%esp
f010fe5d:	ff 75 08             	pushl  0x8(%ebp)
f010fe60:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fe63:	e8 72 30 01 00       	call   f0122eda <alloc_block>
f010fe68:	83 c4 10             	add    $0x10,%esp
f010fe6b:	89 c2                	mov    %eax,%edx
f010fe6d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe70:	89 14 85 80 00 5c f0 	mov    %edx,-0xfa3ff80(,%eax,4)
f010fe77:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe7a:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f010fe81:	89 45 cc             	mov    %eax,-0x34(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f010fe84:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010fe87:	d1 e8                	shr    %eax
f010fe89:	89 c2                	mov    %eax,%edx
f010fe8b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010fe8e:	01 c2                	add    %eax,%edx
f010fe90:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fe93:	89 14 85 80 2c 5c f0 	mov    %edx,-0xfa3d380(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f010fe9a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010fe9d:	8d 50 fe             	lea    -0x2(%eax),%edx
f010fea0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010fea3:	01 c2                	add    %eax,%edx
f010fea5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fea8:	89 14 85 80 16 5c f0 	mov    %edx,-0xfa3e980(,%eax,4)
	//Check block
	expectedVA = (curVA + sizeOfMetaData/2);
f010feaf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010feb2:	83 c0 04             	add    $0x4,%eax
f010feb5:	89 45 c0             	mov    %eax,-0x40(%ebp)

	if (is_correct) is_correct = check_block(va, expectedVA, remainSize, 1) ;
f010feb8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010febc:	74 17                	je     f010fed5 <test_initial_alloc+0x30b>
f010febe:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010fec1:	6a 01                	push   $0x1
f010fec3:	50                   	push   %eax
f010fec4:	ff 75 c0             	pushl  -0x40(%ebp)
f010fec7:	ff 75 cc             	pushl  -0x34(%ebp)
f010feca:	e8 59 fb ff ff       	call   f010fa28 <check_block>
f010fecf:	83 c4 10             	add    $0x10,%esp
f010fed2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (is_correct) is_correct = check_list_size(0);
f010fed5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fed9:	74 10                	je     f010feeb <test_initial_alloc+0x321>
f010fedb:	83 ec 0c             	sub    $0xc,%esp
f010fede:	6a 00                	push   $0x0
f010fee0:	e8 cb fb ff ff       	call   f010fab0 <check_list_size>
f010fee5:	83 c4 10             	add    $0x10,%esp
f010fee8:	89 45 f0             	mov    %eax,-0x10(%ebp)

	*(startVAs[idx]) = idx ;
f010feeb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010feee:	8b 14 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%edx
f010fef5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fef8:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f010fefb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fefe:	8b 14 85 80 2c 5c f0 	mov    -0xfa3d380(,%eax,4),%edx
f010ff05:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ff08:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f010ff0b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ff0e:	8b 14 85 80 16 5c f0 	mov    -0xfa3e980(,%eax,4),%edx
f010ff15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ff18:	66 89 02             	mov    %ax,(%edx)
	if (is_correct)
f010ff1b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ff1f:	74 04                	je     f010ff25 <test_initial_alloc+0x35b>
	{
		eval += 5;
f010ff21:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010ff25:	83 ec 0c             	sub    $0xc,%esp
f010ff28:	68 bc 9b 12 f0       	push   $0xf0129bbc
f010ff2d:	e8 3a 10 ff ff       	call   f0100f6c <cprintf>
f010ff32:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ff35:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f010ff3c:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010ff43:	eb 5b                	jmp    f010ffa0 <test_initial_alloc+0x3d6>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f010ff45:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ff48:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f010ff4f:	66 8b 00             	mov    (%eax),%ax
f010ff52:	98                   	cwtl   
f010ff53:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010ff56:	75 26                	jne    f010ff7e <test_initial_alloc+0x3b4>
f010ff58:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ff5b:	8b 04 85 80 2c 5c f0 	mov    -0xfa3d380(,%eax,4),%eax
f010ff62:	66 8b 00             	mov    (%eax),%ax
f010ff65:	98                   	cwtl   
f010ff66:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010ff69:	75 13                	jne    f010ff7e <test_initial_alloc+0x3b4>
f010ff6b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ff6e:	8b 04 85 80 16 5c f0 	mov    -0xfa3e980(,%eax,4),%eax
f010ff75:	66 8b 00             	mov    (%eax),%ax
f010ff78:	98                   	cwtl   
f010ff79:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010ff7c:	74 1f                	je     f010ff9d <test_initial_alloc+0x3d3>
		{
			is_correct = 0;
f010ff7e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f010ff85:	83 ec 04             	sub    $0x4,%esp
f010ff88:	ff 75 d4             	pushl  -0x2c(%ebp)
f010ff8b:	ff 75 d4             	pushl  -0x2c(%ebp)
f010ff8e:	68 f0 9b 12 f0       	push   $0xf0129bf0
f010ff93:	e8 d4 0f ff ff       	call   f0100f6c <cprintf>
f010ff98:	83 c4 10             	add    $0x10,%esp
			break;
f010ff9b:	eb 0b                	jmp    f010ffa8 <test_initial_alloc+0x3de>
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f010ff9d:	ff 45 d4             	incl   -0x2c(%ebp)
f010ffa0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ffa3:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010ffa6:	7c 9d                	jl     f010ff45 <test_initial_alloc+0x37b>
			is_correct = 0;
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
			break;
		}
	}
	if (is_correct)
f010ffa8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010ffac:	74 04                	je     f010ffb2 <test_initial_alloc+0x3e8>
	{
		eval += 10;
f010ffae:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}
	return eval;
f010ffb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ffb5:	c9                   	leave  
f010ffb6:	c3                   	ret    

f010ffb7 <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010ffb7:	55                   	push   %ebp
f010ffb8:	89 e5                	mov    %esp,%ebp
f010ffba:	57                   	push   %edi
f010ffbb:	56                   	push   %esi
f010ffbc:	53                   	push   %ebx
f010ffbd:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
#if USE_KHEAP
	panic("test_alloc_block_FF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f010ffc3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f010ffca:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f010ffd1:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=======================================================\n") ;
f010ffd8:	83 ec 0c             	sub    $0xc,%esp
f010ffdb:	68 40 9c 12 f0       	push   $0xf0129c40
f010ffe0:	e8 87 0f ff ff       	call   f0100f6c <cprintf>
f010ffe5:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY [40%]\n") ;
f010ffe8:	83 ec 0c             	sub    $0xc,%esp
f010ffeb:	68 7c 9c 12 f0       	push   $0xf0129c7c
f010fff0:	e8 77 0f ff ff       	call   f0100f6c <cprintf>
f010fff5:	83 c4 10             	add    $0x10,%esp
	cprintf("=======================================================\n") ;
f010fff8:	83 ec 0c             	sub    $0xc,%esp
f010fffb:	68 40 9c 12 f0       	push   $0xf0129c40
f0110000:	e8 67 0f ff ff       	call   f0100f6c <cprintf>
f0110005:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_FF);
f0110008:	83 ec 0c             	sub    $0xc,%esp
f011000b:	6a 01                	push   $0x1
f011000d:	e8 b8 fb ff ff       	call   f010fbca <test_initial_alloc>
f0110012:	83 c4 10             	add    $0x10,%esp
f0110015:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("====================================================\n") ;
f0110018:	83 ec 0c             	sub    $0xc,%esp
f011001b:	68 b8 9c 12 f0       	push   $0xf0129cb8
f0110020:	e8 47 0f ff ff       	call   f0100f6c <cprintf>
f0110025:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
f0110028:	83 ec 0c             	sub    $0xc,%esp
f011002b:	68 f0 9c 12 f0       	push   $0xf0129cf0
f0110030:	e8 37 0f ff ff       	call   f0100f6c <cprintf>
f0110035:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
f0110038:	83 ec 0c             	sub    $0xc,%esp
f011003b:	68 b8 9c 12 f0       	push   $0xf0129cb8
f0110040:	e8 27 0f ff ff       	call   f0100f6c <cprintf>
f0110045:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110048:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011004f:	eb 2c                	jmp    f011007d <test_alloc_block_FF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f0110051:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0110054:	89 d0                	mov    %edx,%eax
f0110056:	c1 e0 02             	shl    $0x2,%eax
f0110059:	01 d0                	add    %edx,%eax
f011005b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110062:	01 d0                	add    %edx,%eax
f0110064:	c1 e0 03             	shl    $0x3,%eax
f0110067:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f011006e:	83 ec 0c             	sub    $0xc,%esp
f0110071:	50                   	push   %eax
f0110072:	e8 06 33 01 00       	call   f012337d <free_block>
f0110077:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
	cprintf("====================================================\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f011007a:	ff 45 dc             	incl   -0x24(%ebp)
f011007d:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f0110081:	7e ce                	jle    f0110051 <test_alloc_block_FF+0x9a>
	{
		free_block(startVAs[i*allocCntPerSize]);
	}
	//Check number of freed blocks
	is_correct = check_list_size(numOfAllocs);
f0110083:	83 ec 0c             	sub    $0xc,%esp
f0110086:	6a 07                	push   $0x7
f0110088:	e8 23 fa ff ff       	call   f010fab0 <check_list_size>
f011008d:	83 c4 10             	add    $0x10,%esp
f0110090:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (is_correct)
f0110093:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110097:	74 04                	je     f011009d <test_alloc_block_FF+0xe6>
	{
		eval += 10;
f0110099:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f011009d:	83 ec 0c             	sub    $0xc,%esp
f01100a0:	68 0c 9a 12 f0       	push   $0xf0129a0c
f01100a5:	e8 c2 0e ff ff       	call   f0100f6c <cprintf>
f01100aa:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01100ad:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f01100b4:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f01100bb:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01100c2:	eb 1f                	jmp    f01100e3 <test_alloc_block_FF+0x12c>
	{
		if (allocSizes[i] > maxSize)
f01100c4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01100c7:	8b 04 85 b8 dd 17 f0 	mov    -0xfe82248(,%eax,4),%eax
f01100ce:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01100d1:	76 0d                	jbe    f01100e0 <test_alloc_block_FF+0x129>
			maxSize = allocSizes[i] ;
f01100d3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01100d6:	8b 04 85 b8 dd 17 f0 	mov    -0xfe82248(,%eax,4),%eax
f01100dd:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f01100e0:	ff 45 d4             	incl   -0x2c(%ebp)
f01100e3:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f01100e7:	7e db                	jle    f01100c4 <test_alloc_block_FF+0x10d>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_FF);
f01100e9:	83 ec 08             	sub    $0x8,%esp
f01100ec:	6a 01                	push   $0x1
f01100ee:	ff 75 d8             	pushl  -0x28(%ebp)
f01100f1:	e8 e4 2d 01 00       	call   f0122eda <alloc_block>
f01100f6:	83 c4 10             	add    $0x10,%esp
f01100f9:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f01100fc:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110100:	74 17                	je     f0110119 <test_alloc_block_FF+0x162>
	{
		is_correct = 0;
f0110102:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #5: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.\n");
f0110109:	83 ec 0c             	sub    $0xc,%esp
f011010c:	68 28 9d 12 f0       	push   $0xf0129d28
f0110111:	e8 56 0e ff ff       	call   f0100f6c <cprintf>
f0110116:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f0110119:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011011d:	74 04                	je     f0110123 <test_alloc_block_FF+0x16c>
	{
		eval += 5;
f011011f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f0110123:	83 ec 0c             	sub    $0xc,%esp
f0110126:	68 a0 9d 12 f0       	push   $0xf0129da0
f011012b:	e8 3c 0e ff ff       	call   f0100f6c <cprintf>
f0110130:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110133:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	void* expectedVA;
	uint32 expectedNumFreeBlks;
#define numOfFFTests 3
	uint32 startVA = KERNEL_HEAP_START + sizeof(int); //just after the DA Begin block
f011013a:	c7 45 c0 04 00 00 f6 	movl   $0xf6000004,-0x40(%ebp)
	uint32 testSizes[numOfFFTests] = {1*kilo + kilo/2, 3*kilo, kilo/2} ;
f0110141:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0110144:	bb 2c 9f 12 f0       	mov    $0xf0129f2c,%ebx
f0110149:	ba 03 00 00 00       	mov    $0x3,%edx
f011014e:	89 c7                	mov    %eax,%edi
f0110150:	89 de                	mov    %ebx,%esi
f0110152:	89 d1                	mov    %edx,%ecx
f0110154:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f0110156:	a1 40 13 5c f0       	mov    0xf05c1340,%eax
f011015b:	89 45 bc             	mov    %eax,-0x44(%ebp)
	uint32 expectedVAs[numOfFFTests] = {startVA + sizeOfMetaData/2, startOf1st7KB, startVA + testSizes[0] + sizeOfMetaData/2};
f011015e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110161:	83 c0 04             	add    $0x4,%eax
f0110164:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0110167:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011016a:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011016d:	8b 55 ac             	mov    -0x54(%ebp),%edx
f0110170:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110173:	01 d0                	add    %edx,%eax
f0110175:	83 c0 04             	add    $0x4,%eax
f0110178:	89 45 a8             	mov    %eax,-0x58(%ebp)
	short* tstStartVAs[numOfFFTests+2] ;
	short* tstMidVAs[numOfFFTests+2] ;
	short* tstEndVAs[numOfFFTests+2] ;
	for (int i = 0; i < numOfFFTests; ++i)
f011017b:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0110182:	e9 c8 00 00 00       	jmp    f011024f <test_alloc_block_FF+0x298>
	{
		actualSize = testSizes[i] - sizeOfMetaData;
f0110187:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011018a:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f011018e:	83 e8 08             	sub    $0x8,%eax
f0110191:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		va = tstStartVAs[i] = alloc_block(actualSize, DA_FF);
f0110194:	83 ec 08             	sub    $0x8,%esp
f0110197:	6a 01                	push   $0x1
f0110199:	ff 75 c4             	pushl  -0x3c(%ebp)
f011019c:	e8 39 2d 01 00       	call   f0122eda <alloc_block>
f01101a1:	83 c4 10             	add    $0x10,%esp
f01101a4:	89 c2                	mov    %eax,%edx
f01101a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01101a9:	89 54 85 8c          	mov    %edx,-0x74(%ebp,%eax,4)
f01101ad:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01101b0:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f01101b4:	89 45 c8             	mov    %eax,-0x38(%ebp)
		tstMidVAs[i] = va + actualSize/2 ;
f01101b7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01101ba:	d1 e8                	shr    %eax
f01101bc:	89 c2                	mov    %eax,%edx
f01101be:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01101c1:	01 c2                	add    %eax,%edx
f01101c3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01101c6:	89 94 85 78 ff ff ff 	mov    %edx,-0x88(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f01101cd:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01101d0:	8d 50 fe             	lea    -0x2(%eax),%edx
f01101d3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01101d6:	01 c2                	add    %eax,%edx
f01101d8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01101db:	89 94 85 64 ff ff ff 	mov    %edx,-0x9c(%ebp,%eax,4)
		//Check block
		cprintf("test#%d\n",i);
f01101e2:	83 ec 08             	sub    $0x8,%esp
f01101e5:	ff 75 d0             	pushl  -0x30(%ebp)
f01101e8:	68 fb 9d 12 f0       	push   $0xf0129dfb
f01101ed:	e8 7a 0d ff ff       	call   f0100f6c <cprintf>
f01101f2:	83 c4 10             	add    $0x10,%esp
		expectedVA = (void*)expectedVAs[i];
f01101f5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01101f8:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
f01101fc:	89 45 b8             	mov    %eax,-0x48(%ebp)
		if (check_block(va, expectedVA, testSizes[i], 1) == 0)
f01101ff:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110202:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f0110206:	6a 01                	push   $0x1
f0110208:	50                   	push   %eax
f0110209:	ff 75 b8             	pushl  -0x48(%ebp)
f011020c:	ff 75 c8             	pushl  -0x38(%ebp)
f011020f:	e8 14 f8 ff ff       	call   f010fa28 <check_block>
f0110214:	83 c4 10             	add    $0x10,%esp
f0110217:	85 c0                	test   %eax,%eax
f0110219:	75 07                	jne    f0110222 <test_alloc_block_FF+0x26b>
		{
			is_correct = 0;
f011021b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		*(tstStartVAs[i]) = 353;
f0110222:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110225:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f0110229:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f011022e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110231:	8b 84 85 78 ff ff ff 	mov    -0x88(%ebp,%eax,4),%eax
f0110238:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f011023d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110240:	8b 84 85 64 ff ff ff 	mov    -0x9c(%ebp,%eax,4),%eax
f0110247:	66 c7 00 61 01       	movw   $0x161,(%eax)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
	uint32 expectedVAs[numOfFFTests] = {startVA + sizeOfMetaData/2, startOf1st7KB, startVA + testSizes[0] + sizeOfMetaData/2};
	short* tstStartVAs[numOfFFTests+2] ;
	short* tstMidVAs[numOfFFTests+2] ;
	short* tstEndVAs[numOfFFTests+2] ;
	for (int i = 0; i < numOfFFTests; ++i)
f011024c:	ff 45 d0             	incl   -0x30(%ebp)
f011024f:	83 7d d0 02          	cmpl   $0x2,-0x30(%ebp)
f0110253:	0f 8e 2e ff ff ff    	jle    f0110187 <test_alloc_block_FF+0x1d0>
		}
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}
	if (is_correct) is_correct = check_list_size(numOfAllocs);
f0110259:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011025d:	74 10                	je     f011026f <test_alloc_block_FF+0x2b8>
f011025f:	83 ec 0c             	sub    $0xc,%esp
f0110262:	6a 07                	push   $0x7
f0110264:	e8 47 f8 ff ff       	call   f010fab0 <check_list_size>
f0110269:	83 c4 10             	add    $0x10,%esp
f011026c:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (is_correct)
f011026f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110273:	74 04                	je     f0110279 <test_alloc_block_FF+0x2c2>
	{
		eval += 15;
f0110275:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f0110279:	83 ec 0c             	sub    $0xc,%esp
f011027c:	68 70 9b 12 f0       	push   $0xf0129b70
f0110281:	e8 e6 0c ff ff       	call   f0100f6c <cprintf>
f0110286:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110289:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = 2*kilo - sizeOfMetaData;
f0110290:	c7 45 c4 f8 07 00 00 	movl   $0x7f8,-0x3c(%ebp)
	va = tstStartVAs[numOfFFTests] = alloc_block(actualSize, DA_FF);
f0110297:	83 ec 08             	sub    $0x8,%esp
f011029a:	6a 01                	push   $0x1
f011029c:	ff 75 c4             	pushl  -0x3c(%ebp)
f011029f:	e8 36 2c 01 00       	call   f0122eda <alloc_block>
f01102a4:	83 c4 10             	add    $0x10,%esp
f01102a7:	89 45 98             	mov    %eax,-0x68(%ebp)
f01102aa:	8b 45 98             	mov    -0x68(%ebp),%eax
f01102ad:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfFFTests] = va + actualSize/2 ;
f01102b0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01102b3:	d1 e8                	shr    %eax
f01102b5:	89 c2                	mov    %eax,%edx
f01102b7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01102ba:	01 d0                	add    %edx,%eax
f01102bc:	89 45 84             	mov    %eax,-0x7c(%ebp)
	tstEndVAs[numOfFFTests] = va + actualSize - sizeof(short);
f01102bf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01102c2:	8d 50 fe             	lea    -0x2(%eax),%edx
f01102c5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01102c8:	01 d0                	add    %edx,%eax
f01102ca:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
	//Check block
	expectedVA = (void*)(startVA + testSizes[0] + testSizes[2] + sizeOfMetaData/2) ;
f01102d0:	8b 55 ac             	mov    -0x54(%ebp),%edx
f01102d3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01102d6:	01 c2                	add    %eax,%edx
f01102d8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01102db:	01 d0                	add    %edx,%eax
f01102dd:	83 c0 04             	add    $0x4,%eax
f01102e0:	89 45 b8             	mov    %eax,-0x48(%ebp)

	if (is_correct) is_correct = check_block(va, expectedVA, 2*kilo, 1);
f01102e3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01102e7:	74 18                	je     f0110301 <test_alloc_block_FF+0x34a>
f01102e9:	6a 01                	push   $0x1
f01102eb:	68 00 08 00 00       	push   $0x800
f01102f0:	ff 75 b8             	pushl  -0x48(%ebp)
f01102f3:	ff 75 c8             	pushl  -0x38(%ebp)
f01102f6:	e8 2d f7 ff ff       	call   f010fa28 <check_block>
f01102fb:	83 c4 10             	add    $0x10,%esp
f01102fe:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (is_correct) is_correct = check_list_size(numOfAllocs - 1);
f0110301:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110305:	74 10                	je     f0110317 <test_alloc_block_FF+0x360>
f0110307:	83 ec 0c             	sub    $0xc,%esp
f011030a:	6a 06                	push   $0x6
f011030c:	e8 9f f7 ff ff       	call   f010fab0 <check_list_size>
f0110311:	83 c4 10             	add    $0x10,%esp
f0110314:	89 45 e0             	mov    %eax,-0x20(%ebp)

	*(tstStartVAs[numOfFFTests]) = 353 ;
f0110317:	8b 45 98             	mov    -0x68(%ebp),%eax
f011031a:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfFFTests]) = 353 ;
f011031f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0110322:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfFFTests]) = 353 ;
f0110327:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011032d:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f0110332:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110336:	74 04                	je     f011033c <test_alloc_block_FF+0x385>
	{
		eval += 10;
f0110338:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 4: Try to allocate a block with a bit smaller size [internal fragmentation case]*/
	cprintf("	4: Try to allocate a block with a bit smaller size [internal fragmentation case]\n\n") ;
f011033c:	83 ec 0c             	sub    $0xc,%esp
f011033f:	68 04 9e 12 f0       	push   $0xf0129e04
f0110344:	e8 23 0c ff ff       	call   f0100f6c <cprintf>
f0110349:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f011034c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = allocSizes[1] - sizeOfMetaData - 10;
f0110353:	a1 bc dd 17 f0       	mov    0xf017ddbc,%eax
f0110358:	83 e8 12             	sub    $0x12,%eax
f011035b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = tstStartVAs[numOfFFTests+1] = alloc_block(actualSize, DA_FF);
f011035e:	83 ec 08             	sub    $0x8,%esp
f0110361:	6a 01                	push   $0x1
f0110363:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110366:	e8 6f 2b 01 00       	call   f0122eda <alloc_block>
f011036b:	83 c4 10             	add    $0x10,%esp
f011036e:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0110371:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0110374:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfFFTests+1] = va + actualSize/2 ;
f0110377:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011037a:	d1 e8                	shr    %eax
f011037c:	89 c2                	mov    %eax,%edx
f011037e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110381:	01 d0                	add    %edx,%eax
f0110383:	89 45 88             	mov    %eax,-0x78(%ebp)
	tstEndVAs[numOfFFTests+1] = va + actualSize - sizeof(short);
f0110386:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110389:	8d 50 fe             	lea    -0x2(%eax),%edx
f011038c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011038f:	01 d0                	add    %edx,%eax
f0110391:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
	//Check block
	expectedVA = startVAs[1*allocCntPerSize];
f0110397:	a1 a0 03 5c f0       	mov    0xf05c03a0,%eax
f011039c:	89 45 b8             	mov    %eax,-0x48(%ebp)

	if (is_correct) is_correct = check_block(va, expectedVA, allocSizes[1], 1);
f011039f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01103a3:	74 19                	je     f01103be <test_alloc_block_FF+0x407>
f01103a5:	a1 bc dd 17 f0       	mov    0xf017ddbc,%eax
f01103aa:	6a 01                	push   $0x1
f01103ac:	50                   	push   %eax
f01103ad:	ff 75 b8             	pushl  -0x48(%ebp)
f01103b0:	ff 75 c8             	pushl  -0x38(%ebp)
f01103b3:	e8 70 f6 ff ff       	call   f010fa28 <check_block>
f01103b8:	83 c4 10             	add    $0x10,%esp
f01103bb:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (is_correct) is_correct = check_list_size(numOfAllocs - 2);
f01103be:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01103c2:	74 10                	je     f01103d4 <test_alloc_block_FF+0x41d>
f01103c4:	83 ec 0c             	sub    $0xc,%esp
f01103c7:	6a 05                	push   $0x5
f01103c9:	e8 e2 f6 ff ff       	call   f010fab0 <check_list_size>
f01103ce:	83 c4 10             	add    $0x10,%esp
f01103d1:	89 45 e0             	mov    %eax,-0x20(%ebp)

	*(tstStartVAs[numOfFFTests+1]) = 353 ;
f01103d4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01103d7:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfFFTests+1]) = 353 ;
f01103dc:	8b 45 88             	mov    -0x78(%ebp),%eax
f01103df:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfFFTests+1]) = 353 ;
f01103e4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01103ea:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f01103ef:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01103f3:	74 04                	je     f01103f9 <test_alloc_block_FF+0x442>
	{
		eval += 10;
f01103f5:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 5: Check stored data inside each allocated block*/
	cprintf("	5: Check stored data inside each allocated block\n\n") ;
f01103f9:	83 ec 0c             	sub    $0xc,%esp
f01103fc:	68 58 9e 12 f0       	push   $0xf0129e58
f0110401:	e8 66 0b ff ff       	call   f0100f6c <cprintf>
f0110406:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110409:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i < numOfFFTests + 2; ++i)
f0110410:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0110417:	e9 88 00 00 00       	jmp    f01104a4 <test_alloc_block_FF+0x4ed>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f011041c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011041f:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f0110423:	66 8b 00             	mov    (%eax),%ax
f0110426:	66 3d 61 01          	cmp    $0x161,%ax
f011042a:	75 26                	jne    f0110452 <test_alloc_block_FF+0x49b>
f011042c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011042f:	8b 84 85 78 ff ff ff 	mov    -0x88(%ebp,%eax,4),%eax
f0110436:	66 8b 00             	mov    (%eax),%ax
f0110439:	66 3d 61 01          	cmp    $0x161,%ax
f011043d:	75 13                	jne    f0110452 <test_alloc_block_FF+0x49b>
f011043f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110442:	8b 84 85 64 ff ff ff 	mov    -0x9c(%ebp,%eax,4),%eax
f0110449:	66 8b 00             	mov    (%eax),%ax
f011044c:	66 3d 61 01          	cmp    $0x161,%ax
f0110450:	74 4f                	je     f01104a1 <test_alloc_block_FF+0x4ea>
		{
			is_correct = 0;
f0110452:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f0110459:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011045c:	8b 84 85 64 ff ff ff 	mov    -0x9c(%ebp,%eax,4),%eax
f0110463:	66 8b 00             	mov    (%eax),%ax
f0110466:	0f bf c8             	movswl %ax,%ecx
f0110469:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011046c:	8b 84 85 78 ff ff ff 	mov    -0x88(%ebp,%eax,4),%eax
f0110473:	66 8b 00             	mov    (%eax),%ax
f0110476:	0f bf d0             	movswl %ax,%edx
f0110479:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011047c:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f0110480:	66 8b 00             	mov    (%eax),%ax
f0110483:	98                   	cwtl   
f0110484:	83 ec 08             	sub    $0x8,%esp
f0110487:	51                   	push   %ecx
f0110488:	52                   	push   %edx
f0110489:	50                   	push   %eax
f011048a:	68 61 01 00 00       	push   $0x161
f011048f:	ff 75 cc             	pushl  -0x34(%ebp)
f0110492:	68 8c 9e 12 f0       	push   $0xf0129e8c
f0110497:	e8 d0 0a ff ff       	call   f0100f6c <cprintf>
f011049c:	83 c4 20             	add    $0x20,%esp
			break;
f011049f:	eb 0d                	jmp    f01104ae <test_alloc_block_FF+0x4f7>
	//====================================================================//
	/*FF ALLOC Scenario 5: Check stored data inside each allocated block*/
	cprintf("	5: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < numOfFFTests + 2; ++i)
f01104a1:	ff 45 cc             	incl   -0x34(%ebp)
f01104a4:	83 7d cc 04          	cmpl   $0x4,-0x34(%ebp)
f01104a8:	0f 8e 6e ff ff ff    	jle    f011041c <test_alloc_block_FF+0x465>
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f01104ae:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01104b2:	74 04                	je     f01104b8 <test_alloc_block_FF+0x501>
	{
		eval += 10;
f01104b4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	cprintf("test alloc_block_FF completed. Evaluation = %d%\n", eval);
f01104b8:	83 ec 08             	sub    $0x8,%esp
f01104bb:	ff 75 e4             	pushl  -0x1c(%ebp)
f01104be:	68 f8 9e 12 f0       	push   $0xf0129ef8
f01104c3:	e8 a4 0a ff ff       	call   f0100f6c <cprintf>
f01104c8:	83 c4 10             	add    $0x10,%esp
}
f01104cb:	90                   	nop
f01104cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01104cf:	5b                   	pop    %ebx
f01104d0:	5e                   	pop    %esi
f01104d1:	5f                   	pop    %edi
f01104d2:	5d                   	pop    %ebp
f01104d3:	c3                   	ret    

f01104d4 <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f01104d4:	55                   	push   %ebp
f01104d5:	89 e5                	mov    %esp,%ebp
f01104d7:	57                   	push   %edi
f01104d8:	56                   	push   %esi
f01104d9:	53                   	push   %ebx
f01104da:	81 ec bc 00 00 00    	sub    $0xbc,%esp
#if USE_KHEAP
	panic("test_alloc_block_BF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f01104e0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f01104e7:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f01104ee:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=======================================================\n") ;
f01104f5:	83 ec 0c             	sub    $0xc,%esp
f01104f8:	68 40 9c 12 f0       	push   $0xf0129c40
f01104fd:	e8 6a 0a ff ff       	call   f0100f6c <cprintf>
f0110502:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY [40%]\n") ;
f0110505:	83 ec 0c             	sub    $0xc,%esp
f0110508:	68 7c 9c 12 f0       	push   $0xf0129c7c
f011050d:	e8 5a 0a ff ff       	call   f0100f6c <cprintf>
f0110512:	83 c4 10             	add    $0x10,%esp
	cprintf("=======================================================\n") ;
f0110515:	83 ec 0c             	sub    $0xc,%esp
f0110518:	68 40 9c 12 f0       	push   $0xf0129c40
f011051d:	e8 4a 0a ff ff       	call   f0100f6c <cprintf>
f0110522:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_BF);
f0110525:	83 ec 0c             	sub    $0xc,%esp
f0110528:	6a 03                	push   $0x3
f011052a:	e8 9b f6 ff ff       	call   f010fbca <test_initial_alloc>
f011052f:	83 c4 10             	add    $0x10,%esp
f0110532:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("====================================================\n") ;
f0110535:	83 ec 0c             	sub    $0xc,%esp
f0110538:	68 b8 9c 12 f0       	push   $0xf0129cb8
f011053d:	e8 2a 0a ff ff       	call   f0100f6c <cprintf>
f0110542:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
f0110545:	83 ec 0c             	sub    $0xc,%esp
f0110548:	68 f0 9c 12 f0       	push   $0xf0129cf0
f011054d:	e8 1a 0a ff ff       	call   f0100f6c <cprintf>
f0110552:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
f0110555:	83 ec 0c             	sub    $0xc,%esp
f0110558:	68 b8 9c 12 f0       	push   $0xf0129cb8
f011055d:	e8 0a 0a ff ff       	call   f0100f6c <cprintf>
f0110562:	83 c4 10             	add    $0x10,%esp
	void* expectedVA;
	uint32 expectedNumFreeBlks;
	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110565:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011056c:	eb 2c                	jmp    f011059a <test_alloc_block_BF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f011056e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0110571:	89 d0                	mov    %edx,%eax
f0110573:	c1 e0 02             	shl    $0x2,%eax
f0110576:	01 d0                	add    %edx,%eax
f0110578:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011057f:	01 d0                	add    %edx,%eax
f0110581:	c1 e0 03             	shl    $0x3,%eax
f0110584:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f011058b:	83 ec 0c             	sub    $0xc,%esp
f011058e:	50                   	push   %eax
f011058f:	e8 e9 2d 01 00       	call   f012337d <free_block>
f0110594:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
	cprintf("====================================================\n") ;
	void* expectedVA;
	uint32 expectedNumFreeBlks;
	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110597:	ff 45 dc             	incl   -0x24(%ebp)
f011059a:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f011059e:	7e ce                	jle    f011056e <test_alloc_block_BF+0x9a>
	{
		free_block(startVAs[i*allocCntPerSize]);
	}
	//Check number of freed blocks
	is_correct = check_list_size(numOfAllocs);
f01105a0:	83 ec 0c             	sub    $0xc,%esp
f01105a3:	6a 07                	push   $0x7
f01105a5:	e8 06 f5 ff ff       	call   f010fab0 <check_list_size>
f01105aa:	83 c4 10             	add    $0x10,%esp
f01105ad:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (is_correct)
f01105b0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01105b4:	74 04                	je     f01105ba <test_alloc_block_BF+0xe6>
	{
		eval += 10;
f01105b6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f01105ba:	83 ec 0c             	sub    $0xc,%esp
f01105bd:	68 0c 9a 12 f0       	push   $0xf0129a0c
f01105c2:	e8 a5 09 ff ff       	call   f0100f6c <cprintf>
f01105c7:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01105ca:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f01105d1:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f01105d8:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01105df:	eb 1f                	jmp    f0110600 <test_alloc_block_BF+0x12c>
	{
		if (allocSizes[i] > maxSize)
f01105e1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01105e4:	8b 04 85 b8 dd 17 f0 	mov    -0xfe82248(,%eax,4),%eax
f01105eb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01105ee:	76 0d                	jbe    f01105fd <test_alloc_block_BF+0x129>
			maxSize = allocSizes[i] ;
f01105f0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01105f3:	8b 04 85 b8 dd 17 f0 	mov    -0xfe82248(,%eax,4),%eax
f01105fa:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f01105fd:	ff 45 d4             	incl   -0x2c(%ebp)
f0110600:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f0110604:	7e db                	jle    f01105e1 <test_alloc_block_BF+0x10d>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_BF);
f0110606:	83 ec 08             	sub    $0x8,%esp
f0110609:	6a 03                	push   $0x3
f011060b:	ff 75 d8             	pushl  -0x28(%ebp)
f011060e:	e8 c7 28 01 00       	call   f0122eda <alloc_block>
f0110613:	83 c4 10             	add    $0x10,%esp
f0110616:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f0110619:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f011061d:	74 17                	je     f0110636 <test_alloc_block_BF+0x162>
	{
		is_correct = 0;
f011061f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_BF #5: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.\n");
f0110626:	83 ec 0c             	sub    $0xc,%esp
f0110629:	68 38 9f 12 f0       	push   $0xf0129f38
f011062e:	e8 39 09 ff ff       	call   f0100f6c <cprintf>
f0110633:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f0110636:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011063a:	74 04                	je     f0110640 <test_alloc_block_BF+0x16c>
	{
		eval += 5;
f011063c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f0110640:	83 ec 0c             	sub    $0xc,%esp
f0110643:	68 a0 9d 12 f0       	push   $0xf0129da0
f0110648:	e8 1f 09 ff ff       	call   f0100f6c <cprintf>
f011064d:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110650:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

#define numOfBFTests 5
	uint32 testSizes[numOfBFTests] = {
f0110657:	8d 45 a0             	lea    -0x60(%ebp),%eax
f011065a:	bb 94 a0 12 f0       	mov    $0xf012a094,%ebx
f011065f:	ba 05 00 00 00       	mov    $0x5,%edx
f0110664:	89 c7                	mov    %eax,%edi
f0110666:	89 de                	mov    %ebx,%esi
f0110668:	89 d1                	mov    %edx,%ecx
f011066a:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
			/*only 1 can fit*/4*kilo + kilo/2,
			/*many can fit*/ 1*kilo + kilo/4,
			/*many can fit*/kilo/2,
			/*many can fit*/kilo/2,
			/*only 1 can fit (@head)*/3*kilo } ;
	uint32 startOf1st1KB = (uint32)startVAs[2*allocCntPerSize];
f011066c:	a1 c0 06 5c f0       	mov    0xf05c06c0,%eax
f0110671:	89 45 c0             	mov    %eax,-0x40(%ebp)
	uint32 startOf1st2KB = (uint32)startVAs[4*allocCntPerSize];
f0110674:	a1 00 0d 5c f0       	mov    0xf05c0d00,%eax
f0110679:	89 45 bc             	mov    %eax,-0x44(%ebp)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f011067c:	a1 40 13 5c f0       	mov    0xf05c1340,%eax
f0110681:	89 45 b8             	mov    %eax,-0x48(%ebp)

	uint32 expectedVAs[numOfBFTests] = {startOf1st7KB, startOf1st2KB, startOf1st2KB + testSizes[1],startOf1st1KB, KERNEL_HEAP_START + 2*sizeof(int)};
f0110684:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110687:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011068a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011068d:	89 45 90             	mov    %eax,-0x70(%ebp)
f0110690:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0110693:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0110696:	01 d0                	add    %edx,%eax
f0110698:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011069b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011069e:	89 45 98             	mov    %eax,-0x68(%ebp)
f01106a1:	c7 45 9c 08 00 00 f6 	movl   $0xf6000008,-0x64(%ebp)
	short* tstStartVAs[numOfBFTests+2] ;
	short* tstMidVAs[numOfBFTests+2] ;
	short* tstEndVAs[numOfBFTests+2] ;
	for (int i = 0; i < numOfBFTests; ++i)
f01106a8:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f01106af:	e9 d1 00 00 00       	jmp    f0110785 <test_alloc_block_BF+0x2b1>
	{
		actualSize = testSizes[i] - sizeOfMetaData;
f01106b4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01106b7:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
f01106bb:	83 e8 08             	sub    $0x8,%eax
f01106be:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		va = tstStartVAs[i] = alloc_block(actualSize, DA_BF);
f01106c1:	83 ec 08             	sub    $0x8,%esp
f01106c4:	6a 03                	push   $0x3
f01106c6:	ff 75 c4             	pushl  -0x3c(%ebp)
f01106c9:	e8 0c 28 01 00       	call   f0122eda <alloc_block>
f01106ce:	83 c4 10             	add    $0x10,%esp
f01106d1:	89 c2                	mov    %eax,%edx
f01106d3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01106d6:	89 94 85 70 ff ff ff 	mov    %edx,-0x90(%ebp,%eax,4)
f01106dd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01106e0:	8b 84 85 70 ff ff ff 	mov    -0x90(%ebp,%eax,4),%eax
f01106e7:	89 45 c8             	mov    %eax,-0x38(%ebp)
		tstMidVAs[i] = va + actualSize/2 ;
f01106ea:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01106ed:	d1 e8                	shr    %eax
f01106ef:	89 c2                	mov    %eax,%edx
f01106f1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01106f4:	01 c2                	add    %eax,%edx
f01106f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01106f9:	89 94 85 54 ff ff ff 	mov    %edx,-0xac(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f0110700:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110703:	8d 50 fe             	lea    -0x2(%eax),%edx
f0110706:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110709:	01 c2                	add    %eax,%edx
f011070b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011070e:	89 94 85 38 ff ff ff 	mov    %edx,-0xc8(%ebp,%eax,4)

		//Check block
		cprintf("test#%d\n",i);
f0110715:	83 ec 08             	sub    $0x8,%esp
f0110718:	ff 75 d0             	pushl  -0x30(%ebp)
f011071b:	68 fb 9d 12 f0       	push   $0xf0129dfb
f0110720:	e8 47 08 ff ff       	call   f0100f6c <cprintf>
f0110725:	83 c4 10             	add    $0x10,%esp
		expectedVA = (void*)expectedVAs[i];
f0110728:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011072b:	8b 44 85 8c          	mov    -0x74(%ebp,%eax,4),%eax
f011072f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		if (check_block(va, expectedVA, testSizes[i], 1) == 0)
f0110732:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110735:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
f0110739:	6a 01                	push   $0x1
f011073b:	50                   	push   %eax
f011073c:	ff 75 b4             	pushl  -0x4c(%ebp)
f011073f:	ff 75 c8             	pushl  -0x38(%ebp)
f0110742:	e8 e1 f2 ff ff       	call   f010fa28 <check_block>
f0110747:	83 c4 10             	add    $0x10,%esp
f011074a:	85 c0                	test   %eax,%eax
f011074c:	75 07                	jne    f0110755 <test_alloc_block_BF+0x281>
		{
			is_correct = 0;
f011074e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		*(tstStartVAs[i]) = 353;
f0110755:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110758:	8b 84 85 70 ff ff ff 	mov    -0x90(%ebp,%eax,4),%eax
f011075f:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f0110764:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110767:	8b 84 85 54 ff ff ff 	mov    -0xac(%ebp,%eax,4),%eax
f011076e:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f0110773:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110776:	8b 84 85 38 ff ff ff 	mov    -0xc8(%ebp,%eax,4),%eax
f011077d:	66 c7 00 61 01       	movw   $0x161,(%eax)

	uint32 expectedVAs[numOfBFTests] = {startOf1st7KB, startOf1st2KB, startOf1st2KB + testSizes[1],startOf1st1KB, KERNEL_HEAP_START + 2*sizeof(int)};
	short* tstStartVAs[numOfBFTests+2] ;
	short* tstMidVAs[numOfBFTests+2] ;
	short* tstEndVAs[numOfBFTests+2] ;
	for (int i = 0; i < numOfBFTests; ++i)
f0110782:	ff 45 d0             	incl   -0x30(%ebp)
f0110785:	83 7d d0 04          	cmpl   $0x4,-0x30(%ebp)
f0110789:	0f 8e 25 ff ff ff    	jle    f01106b4 <test_alloc_block_BF+0x1e0>
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}

	if (is_correct) is_correct = check_list_size(numOfAllocs);
f011078f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110793:	74 10                	je     f01107a5 <test_alloc_block_BF+0x2d1>
f0110795:	83 ec 0c             	sub    $0xc,%esp
f0110798:	6a 07                	push   $0x7
f011079a:	e8 11 f3 ff ff       	call   f010fab0 <check_list_size>
f011079f:	83 c4 10             	add    $0x10,%esp
f01107a2:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (is_correct)
f01107a5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01107a9:	74 04                	je     f01107af <test_alloc_block_BF+0x2db>
	{
		eval += 15;
f01107ab:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of an existing free block*/
	cprintf("	3: Try to allocate a block with equal to an existing free block\n\n") ;
f01107af:	83 ec 0c             	sub    $0xc,%esp
f01107b2:	68 b0 9f 12 f0       	push   $0xf0129fb0
f01107b7:	e8 b0 07 ff ff       	call   f0100f6c <cprintf>
f01107bc:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01107bf:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = kilo/4 - sizeOfMetaData;
f01107c6:	c7 45 c4 f8 00 00 00 	movl   $0xf8,-0x3c(%ebp)
	va = tstStartVAs[numOfBFTests] = alloc_block(actualSize, DA_BF);
f01107cd:	83 ec 08             	sub    $0x8,%esp
f01107d0:	6a 03                	push   $0x3
f01107d2:	ff 75 c4             	pushl  -0x3c(%ebp)
f01107d5:	e8 00 27 01 00       	call   f0122eda <alloc_block>
f01107da:	83 c4 10             	add    $0x10,%esp
f01107dd:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01107e0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01107e3:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfBFTests] = va + actualSize/2 ;
f01107e6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01107e9:	d1 e8                	shr    %eax
f01107eb:	89 c2                	mov    %eax,%edx
f01107ed:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01107f0:	01 d0                	add    %edx,%eax
f01107f2:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
	tstEndVAs[numOfBFTests] = va + actualSize - sizeof(short);
f01107f8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01107fb:	8d 50 fe             	lea    -0x2(%eax),%edx
f01107fe:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110801:	01 d0                	add    %edx,%eax
f0110803:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	//Check returned va
	expectedVA = (void*)(startOf1st2KB + testSizes[1] + testSizes[3]) ;
f0110809:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f011080c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011080f:	01 c2                	add    %eax,%edx
f0110811:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110814:	01 d0                	add    %edx,%eax
f0110816:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (is_correct) is_correct = check_block(va, expectedVA, kilo/4, 1);
f0110819:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011081d:	74 18                	je     f0110837 <test_alloc_block_BF+0x363>
f011081f:	6a 01                	push   $0x1
f0110821:	68 00 01 00 00       	push   $0x100
f0110826:	ff 75 b4             	pushl  -0x4c(%ebp)
f0110829:	ff 75 c8             	pushl  -0x38(%ebp)
f011082c:	e8 f7 f1 ff ff       	call   f010fa28 <check_block>
f0110831:	83 c4 10             	add    $0x10,%esp
f0110834:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (is_correct) is_correct = check_list_size(numOfAllocs-1);
f0110837:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011083b:	74 10                	je     f011084d <test_alloc_block_BF+0x379>
f011083d:	83 ec 0c             	sub    $0xc,%esp
f0110840:	6a 06                	push   $0x6
f0110842:	e8 69 f2 ff ff       	call   f010fab0 <check_list_size>
f0110847:	83 c4 10             	add    $0x10,%esp
f011084a:	89 45 e0             	mov    %eax,-0x20(%ebp)

	*(tstStartVAs[numOfBFTests]) = 353 ;
f011084d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0110850:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfBFTests]) = 353 ;
f0110855:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011085b:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfBFTests]) = 353 ;
f0110860:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0110866:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f011086b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011086f:	74 04                	je     f0110875 <test_alloc_block_BF+0x3a1>
	{
		eval += 10;
f0110871:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 4: Try to allocate a block with a bit smaller size [internal fragmentation case]*/
	cprintf("	4: Try to allocate a block with a bit smaller size [internal fragmentation case]\n\n") ;
f0110875:	83 ec 0c             	sub    $0xc,%esp
f0110878:	68 04 9e 12 f0       	push   $0xf0129e04
f011087d:	e8 ea 06 ff ff       	call   f0100f6c <cprintf>
f0110882:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110885:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = allocSizes[5] - sizeOfMetaData - 2;
f011088c:	a1 cc dd 17 f0       	mov    0xf017ddcc,%eax
f0110891:	83 e8 0a             	sub    $0xa,%eax
f0110894:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = tstStartVAs[numOfBFTests+1] = alloc_block(actualSize, DA_BF);
f0110897:	83 ec 08             	sub    $0x8,%esp
f011089a:	6a 03                	push   $0x3
f011089c:	ff 75 c4             	pushl  -0x3c(%ebp)
f011089f:	e8 36 26 01 00       	call   f0122eda <alloc_block>
f01108a4:	83 c4 10             	add    $0x10,%esp
f01108a7:	89 45 88             	mov    %eax,-0x78(%ebp)
f01108aa:	8b 45 88             	mov    -0x78(%ebp),%eax
f01108ad:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfBFTests+1] = va + 2 ;
f01108b0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01108b3:	83 c0 02             	add    $0x2,%eax
f01108b6:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	tstEndVAs[numOfBFTests+1] = va + actualSize - sizeof(short);
f01108bc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01108bf:	8d 50 fe             	lea    -0x2(%eax),%edx
f01108c2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01108c5:	01 d0                	add    %edx,%eax
f01108c7:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
	//Check block
	expectedVA = startVAs[5*allocCntPerSize];
f01108cd:	a1 20 10 5c f0       	mov    0xf05c1020,%eax
f01108d2:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	if (is_correct) is_correct = check_block(va, expectedVA, allocSizes[5], 1);
f01108d5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01108d9:	74 19                	je     f01108f4 <test_alloc_block_BF+0x420>
f01108db:	a1 cc dd 17 f0       	mov    0xf017ddcc,%eax
f01108e0:	6a 01                	push   $0x1
f01108e2:	50                   	push   %eax
f01108e3:	ff 75 b4             	pushl  -0x4c(%ebp)
f01108e6:	ff 75 c8             	pushl  -0x38(%ebp)
f01108e9:	e8 3a f1 ff ff       	call   f010fa28 <check_block>
f01108ee:	83 c4 10             	add    $0x10,%esp
f01108f1:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (is_correct) is_correct = check_list_size(numOfAllocs - 2);
f01108f4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01108f8:	74 10                	je     f011090a <test_alloc_block_BF+0x436>
f01108fa:	83 ec 0c             	sub    $0xc,%esp
f01108fd:	6a 05                	push   $0x5
f01108ff:	e8 ac f1 ff ff       	call   f010fab0 <check_list_size>
f0110904:	83 c4 10             	add    $0x10,%esp
f0110907:	89 45 e0             	mov    %eax,-0x20(%ebp)

	*(tstStartVAs[numOfBFTests+1]) = 353 ;
f011090a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011090d:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfBFTests+1]) = 353 ;
f0110912:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0110918:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfBFTests+1]) = 353 ;
f011091d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0110923:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f0110928:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011092c:	74 04                	je     f0110932 <test_alloc_block_BF+0x45e>
	{
		eval += 10;
f011092e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*BF ALLOC Scenario 5: Check stored data inside each allocated block*/
	cprintf("	5: Check stored data inside each allocated block\n\n") ;
f0110932:	83 ec 0c             	sub    $0xc,%esp
f0110935:	68 58 9e 12 f0       	push   $0xf0129e58
f011093a:	e8 2d 06 ff ff       	call   f0100f6c <cprintf>
f011093f:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110942:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i < numOfBFTests+2; ++i)
f0110949:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0110950:	e9 8e 00 00 00       	jmp    f01109e3 <test_alloc_block_BF+0x50f>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f0110955:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110958:	8b 84 85 70 ff ff ff 	mov    -0x90(%ebp,%eax,4),%eax
f011095f:	66 8b 00             	mov    (%eax),%ax
f0110962:	66 3d 61 01          	cmp    $0x161,%ax
f0110966:	75 26                	jne    f011098e <test_alloc_block_BF+0x4ba>
f0110968:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011096b:	8b 84 85 54 ff ff ff 	mov    -0xac(%ebp,%eax,4),%eax
f0110972:	66 8b 00             	mov    (%eax),%ax
f0110975:	66 3d 61 01          	cmp    $0x161,%ax
f0110979:	75 13                	jne    f011098e <test_alloc_block_BF+0x4ba>
f011097b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011097e:	8b 84 85 38 ff ff ff 	mov    -0xc8(%ebp,%eax,4),%eax
f0110985:	66 8b 00             	mov    (%eax),%ax
f0110988:	66 3d 61 01          	cmp    $0x161,%ax
f011098c:	74 52                	je     f01109e0 <test_alloc_block_BF+0x50c>
		{
			//cprintf("start VA = %x, mid VA = %x, end VA = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
			is_correct = 0;
f011098e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_BF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f0110995:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110998:	8b 84 85 38 ff ff ff 	mov    -0xc8(%ebp,%eax,4),%eax
f011099f:	66 8b 00             	mov    (%eax),%ax
f01109a2:	0f bf c8             	movswl %ax,%ecx
f01109a5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01109a8:	8b 84 85 54 ff ff ff 	mov    -0xac(%ebp,%eax,4),%eax
f01109af:	66 8b 00             	mov    (%eax),%ax
f01109b2:	0f bf d0             	movswl %ax,%edx
f01109b5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01109b8:	8b 84 85 70 ff ff ff 	mov    -0x90(%ebp,%eax,4),%eax
f01109bf:	66 8b 00             	mov    (%eax),%ax
f01109c2:	98                   	cwtl   
f01109c3:	83 ec 08             	sub    $0x8,%esp
f01109c6:	51                   	push   %ecx
f01109c7:	52                   	push   %edx
f01109c8:	50                   	push   %eax
f01109c9:	68 61 01 00 00       	push   $0x161
f01109ce:	ff 75 cc             	pushl  -0x34(%ebp)
f01109d1:	68 f4 9f 12 f0       	push   $0xf0129ff4
f01109d6:	e8 91 05 ff ff       	call   f0100f6c <cprintf>
f01109db:	83 c4 20             	add    $0x20,%esp
			break;
f01109de:	eb 0d                	jmp    f01109ed <test_alloc_block_BF+0x519>
	//====================================================================//
	/*BF ALLOC Scenario 5: Check stored data inside each allocated block*/
	cprintf("	5: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < numOfBFTests+2; ++i)
f01109e0:	ff 45 cc             	incl   -0x34(%ebp)
f01109e3:	83 7d cc 06          	cmpl   $0x6,-0x34(%ebp)
f01109e7:	0f 8e 68 ff ff ff    	jle    f0110955 <test_alloc_block_BF+0x481>
			cprintf("alloc_block_BF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f01109ed:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01109f1:	74 04                	je     f01109f7 <test_alloc_block_BF+0x523>
	{
		eval += 10;
f01109f3:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	cprintf("test alloc_block_BF completed. Evaluation = %d%\n", eval);
f01109f7:	83 ec 08             	sub    $0x8,%esp
f01109fa:	ff 75 e4             	pushl  -0x1c(%ebp)
f01109fd:	68 60 a0 12 f0       	push   $0xf012a060
f0110a02:	e8 65 05 ff ff       	call   f0100f6c <cprintf>
f0110a07:	83 c4 10             	add    $0x10,%esp
}
f0110a0a:	90                   	nop
f0110a0b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110a0e:	5b                   	pop    %ebx
f0110a0f:	5e                   	pop    %esi
f0110a10:	5f                   	pop    %edi
f0110a11:	5d                   	pop    %ebp
f0110a12:	c3                   	ret    

f0110a13 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f0110a13:	55                   	push   %ebp
f0110a14:	89 e5                	mov    %esp,%ebp
	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/

	//cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");

}
f0110a16:	90                   	nop
f0110a17:	5d                   	pop    %ebp
f0110a18:	c3                   	ret    

f0110a19 <test_free_block_FF>:

void test_free_block_FF()
{
f0110a19:	55                   	push   %ebp
f0110a1a:	89 e5                	mov    %esp,%ebp
f0110a1c:	53                   	push   %ebx
f0110a1d:	81 ec 94 00 00 00    	sub    $0x94,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f0110a23:	83 ec 0c             	sub    $0xc,%esp
f0110a26:	68 a8 a0 12 f0       	push   $0xf012a0a8
f0110a2b:	e8 3c 05 ff ff       	call   f0100f6c <cprintf>
f0110a30:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f0110a33:	83 ec 0c             	sub    $0xc,%esp
f0110a36:	68 e8 a0 12 f0       	push   $0xf012a0e8
f0110a3b:	e8 2c 05 ff ff       	call   f0100f6c <cprintf>
f0110a40:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f0110a43:	83 ec 0c             	sub    $0xc,%esp
f0110a46:	68 a8 a0 12 f0       	push   $0xf012a0a8
f0110a4b:	e8 1c 05 ff ff       	call   f0100f6c <cprintf>
f0110a50:	83 c4 10             	add    $0x10,%esp
	void*expected_va ;

	int eval = 0;
f0110a53:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;
	int initAllocatedSpace = 3*Mega;
f0110a5a:	c7 45 cc 00 00 30 00 	movl   $0x300000,-0x34(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f0110a61:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110a64:	83 ec 08             	sub    $0x8,%esp
f0110a67:	50                   	push   %eax
f0110a68:	68 00 00 00 f6       	push   $0xf6000000
f0110a6d:	e8 95 25 01 00       	call   f0123007 <initialize_dynamic_allocator>
f0110a72:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f0110a75:	83 ec 0c             	sub    $0xc,%esp
f0110a78:	68 28 a1 12 f0       	push   $0xf012a128
f0110a7d:	e8 ea 04 ff ff       	call   f0100f6c <cprintf>
f0110a82:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f0110a85:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f0110a8c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0110a93:	eb 2a                	jmp    f0110abf <test_free_block_FF+0xa6>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f0110a95:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0110a98:	8b 14 85 b8 dd 17 f0 	mov    -0xfe82248(,%eax,4),%edx
f0110a9f:	89 d0                	mov    %edx,%eax
f0110aa1:	c1 e0 02             	shl    $0x2,%eax
f0110aa4:	01 d0                	add    %edx,%eax
f0110aa6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110aad:	01 d0                	add    %edx,%eax
f0110aaf:	c1 e0 03             	shl    $0x3,%eax
f0110ab2:	89 c2                	mov    %eax,%edx
f0110ab4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0110ab7:	01 d0                	add    %edx,%eax
f0110ab9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f0110abc:	ff 45 e8             	incl   -0x18(%ebp)
f0110abf:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f0110ac3:	7e d0                	jle    f0110a95 <test_free_block_FF+0x7c>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes - 2*sizeof(int) ; //exclude size of "DA Begin & End" blocks
f0110ac5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110ac8:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0110acb:	83 e8 08             	sub    $0x8,%eax
f0110ace:	89 45 c8             	mov    %eax,-0x38(%ebp)
	if (remainSize <= 0)
f0110ad1:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f0110ad5:	7f 17                	jg     f0110aee <test_free_block_FF+0xd5>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f0110ad7:	83 ec 04             	sub    $0x4,%esp
f0110ada:	68 80 a1 12 f0       	push   $0xf012a180
f0110adf:	68 68 02 00 00       	push   $0x268
f0110ae4:	68 74 99 12 f0       	push   $0xf0129974
f0110ae9:	e8 2c f8 fe ff       	call   f010031a <_panic>

	int idx = 0;
f0110aee:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
f0110af5:	c7 45 e0 04 00 00 f6 	movl   $0xf6000004,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0110afc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0110b03:	e9 0b 01 00 00       	jmp    f0110c13 <test_free_block_FF+0x1fa>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0110b08:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0110b0f:	e9 ef 00 00 00       	jmp    f0110c03 <test_free_block_FF+0x1ea>
		{
			actualSize = allocSizes[i] - sizeOfMetaData;
f0110b14:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110b17:	8b 04 85 b8 dd 17 f0 	mov    -0xfe82248(,%eax,4),%eax
f0110b1e:	83 e8 08             	sub    $0x8,%eax
f0110b21:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f0110b24:	83 ec 08             	sub    $0x8,%esp
f0110b27:	6a 01                	push   $0x1
f0110b29:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110b2c:	e8 a9 23 01 00       	call   f0122eda <alloc_block>
f0110b31:	83 c4 10             	add    $0x10,%esp
f0110b34:	89 c2                	mov    %eax,%edx
f0110b36:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110b39:	89 14 85 80 00 5c f0 	mov    %edx,-0xfa3ff80(,%eax,4)
f0110b40:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110b43:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0110b4a:	89 45 c0             	mov    %eax,-0x40(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f0110b4d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110b50:	d1 e8                	shr    %eax
f0110b52:	89 c2                	mov    %eax,%edx
f0110b54:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110b57:	01 c2                	add    %eax,%edx
f0110b59:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110b5c:	89 14 85 80 2c 5c f0 	mov    %edx,-0xfa3d380(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f0110b63:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110b66:	8d 50 fe             	lea    -0x2(%eax),%edx
f0110b69:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110b6c:	01 c2                	add    %eax,%edx
f0110b6e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110b71:	89 14 85 80 16 5c f0 	mov    %edx,-0xfa3e980(,%eax,4)
			//Check returned va
			expected_va = curVA + sizeOfMetaData/2;
f0110b78:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0110b7b:	83 c0 04             	add    $0x4,%eax
f0110b7e:	89 45 bc             	mov    %eax,-0x44(%ebp)
			if (check_block(va, expected_va, allocSizes[i], 1) == 0)
f0110b81:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110b84:	8b 04 85 b8 dd 17 f0 	mov    -0xfe82248(,%eax,4),%eax
f0110b8b:	6a 01                	push   $0x1
f0110b8d:	50                   	push   %eax
f0110b8e:	ff 75 bc             	pushl  -0x44(%ebp)
f0110b91:	ff 75 c0             	pushl  -0x40(%ebp)
f0110b94:	e8 8f ee ff ff       	call   f010fa28 <check_block>
f0110b99:	83 c4 10             	add    $0x10,%esp
f0110b9c:	85 c0                	test   %eax,%eax
f0110b9e:	75 20                	jne    f0110bc0 <test_free_block_FF+0x1a7>
				//			if(va != (curVA + sizeOfMetaData/2))
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x", idx, expected_va ,va);
f0110ba0:	83 ec 08             	sub    $0x8,%esp
f0110ba3:	ff 75 c0             	pushl  -0x40(%ebp)
f0110ba6:	ff 75 bc             	pushl  -0x44(%ebp)
f0110ba9:	ff 75 e4             	pushl  -0x1c(%ebp)
f0110bac:	68 f8 a1 12 f0       	push   $0xf012a1f8
f0110bb1:	68 79 02 00 00       	push   $0x279
f0110bb6:	68 74 99 12 f0       	push   $0xf0129974
f0110bbb:	e8 5a f7 fe ff       	call   f010031a <_panic>
			curVA += allocSizes[i] ;
f0110bc0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0110bc3:	8b 04 85 b8 dd 17 f0 	mov    -0xfe82248(,%eax,4),%eax
f0110bca:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f0110bcd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110bd0:	8b 14 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%edx
f0110bd7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110bda:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f0110bdd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110be0:	8b 14 85 80 2c 5c f0 	mov    -0xfa3d380(,%eax,4),%edx
f0110be7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110bea:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f0110bed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110bf0:	8b 14 85 80 16 5c f0 	mov    -0xfa3e980(,%eax,4),%edx
f0110bf7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110bfa:	66 89 02             	mov    %ax,(%edx)
			idx++;
f0110bfd:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0110c00:	ff 45 d8             	incl   -0x28(%ebp)
f0110c03:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f0110c0a:	0f 8e 04 ff ff ff    	jle    f0110b14 <test_free_block_FF+0xfb>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0110c10:	ff 45 dc             	incl   -0x24(%ebp)
f0110c13:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f0110c17:	0f 8e eb fe ff ff    	jle    f0110b08 <test_free_block_FF+0xef>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData;
f0110c1d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110c20:	83 e8 08             	sub    $0x8,%eax
f0110c23:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f0110c26:	83 ec 08             	sub    $0x8,%esp
f0110c29:	6a 01                	push   $0x1
f0110c2b:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110c2e:	e8 a7 22 01 00       	call   f0122eda <alloc_block>
f0110c33:	83 c4 10             	add    $0x10,%esp
f0110c36:	89 c2                	mov    %eax,%edx
f0110c38:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110c3b:	89 14 85 80 00 5c f0 	mov    %edx,-0xfa3ff80(,%eax,4)
f0110c42:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110c45:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0110c4c:	89 45 c0             	mov    %eax,-0x40(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f0110c4f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110c52:	d1 e8                	shr    %eax
f0110c54:	89 c2                	mov    %eax,%edx
f0110c56:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110c59:	01 c2                	add    %eax,%edx
f0110c5b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110c5e:	89 14 85 80 2c 5c f0 	mov    %edx,-0xfa3d380(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f0110c65:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110c68:	8d 50 fe             	lea    -0x2(%eax),%edx
f0110c6b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110c6e:	01 c2                	add    %eax,%edx
f0110c70:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110c73:	89 14 85 80 16 5c f0 	mov    %edx,-0xfa3e980(,%eax,4)
	//Check returned va
	expected_va = curVA + sizeOfMetaData/2;
f0110c7a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0110c7d:	83 c0 04             	add    $0x4,%eax
f0110c80:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (check_block(va, expected_va, remainSize, 1) == 0)
f0110c83:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110c86:	6a 01                	push   $0x1
f0110c88:	50                   	push   %eax
f0110c89:	ff 75 bc             	pushl  -0x44(%ebp)
f0110c8c:	ff 75 c0             	pushl  -0x40(%ebp)
f0110c8f:	e8 94 ed ff ff       	call   f010fa28 <check_block>
f0110c94:	83 c4 10             	add    $0x10,%esp
f0110c97:	85 c0                	test   %eax,%eax
f0110c99:	75 1d                	jne    f0110cb8 <test_free_block_FF+0x29f>
		//			if(va != (curVA + sizeOfMetaData/2))
		panic("test_free_block #2: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x",  expected_va ,va);
f0110c9b:	83 ec 0c             	sub    $0xc,%esp
f0110c9e:	ff 75 c0             	pushl  -0x40(%ebp)
f0110ca1:	ff 75 bc             	pushl  -0x44(%ebp)
f0110ca4:	68 5c a2 12 f0       	push   $0xf012a25c
f0110ca9:	68 8c 02 00 00       	push   $0x28c
f0110cae:	68 74 99 12 f0       	push   $0xf0129974
f0110cb3:	e8 62 f6 fe ff       	call   f010031a <_panic>
	*(startVAs[idx]) = idx ;
f0110cb8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110cbb:	8b 14 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%edx
f0110cc2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110cc5:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f0110cc8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110ccb:	8b 14 85 80 2c 5c f0 	mov    -0xfa3d380(,%eax,4),%edx
f0110cd2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110cd5:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f0110cd8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110cdb:	8b 14 85 80 16 5c f0 	mov    -0xfa3e980(,%eax,4),%edx
f0110ce2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110ce5:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f0110ce8:	83 ec 0c             	sub    $0xc,%esp
f0110ceb:	68 bc a2 12 f0       	push   $0xf012a2bc
f0110cf0:	e8 77 02 ff ff       	call   f0100f6c <cprintf>
f0110cf5:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110cf8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f0110cff:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0110d06:	eb 5b                	jmp    f0110d63 <test_free_block_FF+0x34a>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f0110d08:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110d0b:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0110d12:	66 8b 00             	mov    (%eax),%ax
f0110d15:	98                   	cwtl   
f0110d16:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0110d19:	75 26                	jne    f0110d41 <test_free_block_FF+0x328>
f0110d1b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110d1e:	8b 04 85 80 2c 5c f0 	mov    -0xfa3d380(,%eax,4),%eax
f0110d25:	66 8b 00             	mov    (%eax),%ax
f0110d28:	98                   	cwtl   
f0110d29:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0110d2c:	75 13                	jne    f0110d41 <test_free_block_FF+0x328>
f0110d2e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110d31:	8b 04 85 80 16 5c f0 	mov    -0xfa3e980(,%eax,4),%eax
f0110d38:	66 8b 00             	mov    (%eax),%ax
f0110d3b:	98                   	cwtl   
f0110d3c:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0110d3f:	74 1f                	je     f0110d60 <test_free_block_FF+0x347>
		{
			is_correct = 0;
f0110d41:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f0110d48:	83 ec 04             	sub    $0x4,%esp
f0110d4b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110d4e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110d51:	68 f0 a2 12 f0       	push   $0xf012a2f0
f0110d56:	e8 11 02 ff ff       	call   f0100f6c <cprintf>
f0110d5b:	83 c4 10             	add    $0x10,%esp
			break;
f0110d5e:	eb 0b                	jmp    f0110d6b <test_free_block_FF+0x352>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f0110d60:	ff 45 d4             	incl   -0x2c(%ebp)
f0110d63:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110d66:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0110d69:	7c 9d                	jl     f0110d08 <test_free_block_FF+0x2ef>
		}
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f0110d6b:	83 ec 0c             	sub    $0xc,%esp
f0110d6e:	68 40 a3 12 f0       	push   $0xf012a340
f0110d73:	e8 f4 01 ff ff       	call   f0100f6c <cprintf>
f0110d78:	83 c4 10             	add    $0x10,%esp
	uint32 block_size, block_status, expected_size, *blk_header, *blk_footer;
	is_correct = 1;
f0110d7b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110d82:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0110d89:	e9 9b 00 00 00       	jmp    f0110e29 <test_free_block_FF+0x410>
	{
		cprintf("test#%d\n",i);
f0110d8e:	83 ec 08             	sub    $0x8,%esp
f0110d91:	ff 75 d0             	pushl  -0x30(%ebp)
f0110d94:	68 fb 9d 12 f0       	push   $0xf0129dfb
f0110d99:	e8 ce 01 ff ff       	call   f0100f6c <cprintf>
f0110d9e:	83 c4 10             	add    $0x10,%esp
		free_block(startVAs[i*allocCntPerSize]);
f0110da1:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0110da4:	89 d0                	mov    %edx,%eax
f0110da6:	c1 e0 02             	shl    $0x2,%eax
f0110da9:	01 d0                	add    %edx,%eax
f0110dab:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110db2:	01 d0                	add    %edx,%eax
f0110db4:	c1 e0 03             	shl    $0x3,%eax
f0110db7:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0110dbe:	83 ec 0c             	sub    $0xc,%esp
f0110dc1:	50                   	push   %eax
f0110dc2:	e8 b6 25 01 00       	call   f012337d <free_block>
f0110dc7:	83 c4 10             	add    $0x10,%esp
		if (check_block(startVAs[i*allocCntPerSize], startVAs[i*allocCntPerSize], allocSizes[i], 0) == 0)
f0110dca:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110dcd:	8b 0c 85 b8 dd 17 f0 	mov    -0xfe82248(,%eax,4),%ecx
f0110dd4:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0110dd7:	89 d0                	mov    %edx,%eax
f0110dd9:	c1 e0 02             	shl    $0x2,%eax
f0110ddc:	01 d0                	add    %edx,%eax
f0110dde:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0110de5:	01 d0                	add    %edx,%eax
f0110de7:	c1 e0 03             	shl    $0x3,%eax
f0110dea:	8b 14 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%edx
f0110df1:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0110df4:	89 d8                	mov    %ebx,%eax
f0110df6:	c1 e0 02             	shl    $0x2,%eax
f0110df9:	01 d8                	add    %ebx,%eax
f0110dfb:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f0110e02:	01 d8                	add    %ebx,%eax
f0110e04:	c1 e0 03             	shl    $0x3,%eax
f0110e07:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0110e0e:	6a 00                	push   $0x0
f0110e10:	51                   	push   %ecx
f0110e11:	52                   	push   %edx
f0110e12:	50                   	push   %eax
f0110e13:	e8 10 ec ff ff       	call   f010fa28 <check_block>
f0110e18:	83 c4 10             	add    $0x10,%esp
f0110e1b:	85 c0                	test   %eax,%eax
f0110e1d:	75 07                	jne    f0110e26 <test_free_block_FF+0x40d>
		{
			is_correct = 0;
f0110e1f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
	uint32 block_size, block_status, expected_size, *blk_header, *blk_footer;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110e26:	ff 45 d0             	incl   -0x30(%ebp)
f0110e29:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f0110e2d:	0f 8e 5b ff ff ff    	jle    f0110d8e <test_free_block_FF+0x375>
		if (check_block(startVAs[i*allocCntPerSize], startVAs[i*allocCntPerSize], allocSizes[i], 0) == 0)
		{
			is_correct = 0;
		}
	}
	uint32 expectedNumOfFreeBlks = numOfAllocs;
f0110e33:	c7 45 b8 07 00 00 00 	movl   $0x7,-0x48(%ebp)
	if (is_correct) is_correct = check_list_size(expectedNumOfFreeBlks);
f0110e3a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110e3e:	74 11                	je     f0110e51 <test_free_block_FF+0x438>
f0110e40:	83 ec 0c             	sub    $0xc,%esp
f0110e43:	ff 75 b8             	pushl  -0x48(%ebp)
f0110e46:	e8 65 ec ff ff       	call   f010fab0 <check_list_size>
f0110e4b:	83 c4 10             	add    $0x10,%esp
f0110e4e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (is_correct)
f0110e51:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110e55:	74 04                	je     f0110e5b <test_free_block_FF+0x442>
	{
		eval += 10;
f0110e57:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	is_correct = 1;
f0110e5b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f0110e62:	a1 60 16 5c f0       	mov    0xf05c1660,%eax
f0110e67:	83 ec 0c             	sub    $0xc,%esp
f0110e6a:	50                   	push   %eax
f0110e6b:	e8 0d 25 01 00       	call   f012337d <free_block>
f0110e70:	83 c4 10             	add    $0x10,%esp
	if (is_correct) is_correct = check_block(startVAs[numOfAllocs*allocCntPerSize], startVAs[numOfAllocs*allocCntPerSize], remainSize, 0);
f0110e73:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110e77:	74 1e                	je     f0110e97 <test_free_block_FF+0x47e>
f0110e79:	8b 4d c8             	mov    -0x38(%ebp),%ecx
f0110e7c:	8b 15 60 16 5c f0    	mov    0xf05c1660,%edx
f0110e82:	a1 60 16 5c f0       	mov    0xf05c1660,%eax
f0110e87:	6a 00                	push   $0x0
f0110e89:	51                   	push   %ecx
f0110e8a:	52                   	push   %edx
f0110e8b:	50                   	push   %eax
f0110e8c:	e8 97 eb ff ff       	call   f010fa28 <check_block>
f0110e91:	83 c4 10             	add    $0x10,%esp
f0110e94:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData;
f0110e97:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110e9a:	83 e8 08             	sub    $0x8,%eax
f0110e9d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0110ea0:	83 ec 08             	sub    $0x8,%esp
f0110ea3:	6a 01                	push   $0x1
f0110ea5:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110ea8:	e8 2d 20 01 00       	call   f0122eda <alloc_block>
f0110ead:	83 c4 10             	add    $0x10,%esp
f0110eb0:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check block
	expected_va = (curVA + sizeOfMetaData/2);
f0110eb3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0110eb6:	83 c0 04             	add    $0x4,%eax
f0110eb9:	89 45 bc             	mov    %eax,-0x44(%ebp)
	if (is_correct) is_correct = check_block(va, expected_va, remainSize, 1);
f0110ebc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110ec0:	74 17                	je     f0110ed9 <test_free_block_FF+0x4c0>
f0110ec2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110ec5:	6a 01                	push   $0x1
f0110ec7:	50                   	push   %eax
f0110ec8:	ff 75 bc             	pushl  -0x44(%ebp)
f0110ecb:	ff 75 c0             	pushl  -0x40(%ebp)
f0110ece:	e8 55 eb ff ff       	call   f010fa28 <check_block>
f0110ed3:	83 c4 10             	add    $0x10,%esp
f0110ed6:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f0110ed9:	a1 5c 16 5c f0       	mov    0xf05c165c,%eax
f0110ede:	83 ec 0c             	sub    $0xc,%esp
f0110ee1:	50                   	push   %eax
f0110ee2:	e8 96 24 01 00       	call   f012337d <free_block>
f0110ee7:	83 c4 10             	add    $0x10,%esp
	if (is_correct) is_correct = check_block(startVAs[numOfAllocs*allocCntPerSize-1], startVAs[numOfAllocs*allocCntPerSize-1], allocSizes[numOfAllocs-1], 0);
f0110eea:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110eee:	74 21                	je     f0110f11 <test_free_block_FF+0x4f8>
f0110ef0:	8b 0d d0 dd 17 f0    	mov    0xf017ddd0,%ecx
f0110ef6:	8b 15 5c 16 5c f0    	mov    0xf05c165c,%edx
f0110efc:	a1 5c 16 5c f0       	mov    0xf05c165c,%eax
f0110f01:	6a 00                	push   $0x0
f0110f03:	51                   	push   %ecx
f0110f04:	52                   	push   %edx
f0110f05:	50                   	push   %eax
f0110f06:	e8 1d eb ff ff       	call   f010fa28 <check_block>
f0110f0b:	83 c4 10             	add    $0x10,%esp
f0110f0e:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData;
f0110f11:	a1 b8 dd 17 f0       	mov    0xf017ddb8,%eax
f0110f16:	83 e8 08             	sub    $0x8,%eax
f0110f19:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0110f1c:	83 ec 08             	sub    $0x8,%esp
f0110f1f:	6a 01                	push   $0x1
f0110f21:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110f24:	e8 b1 1f 01 00       	call   f0122eda <alloc_block>
f0110f29:	83 c4 10             	add    $0x10,%esp
f0110f2c:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected_va = (void*)(KERNEL_HEAP_START + sizeof(int) + sizeOfMetaData/2);
f0110f2f:	c7 45 bc 08 00 00 f6 	movl   $0xf6000008,-0x44(%ebp)
	if (is_correct) is_correct = check_block(va, expected_va, allocSizes[0], 1);
f0110f36:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110f3a:	74 19                	je     f0110f55 <test_free_block_FF+0x53c>
f0110f3c:	a1 b8 dd 17 f0       	mov    0xf017ddb8,%eax
f0110f41:	6a 01                	push   $0x1
f0110f43:	50                   	push   %eax
f0110f44:	ff 75 bc             	pushl  -0x44(%ebp)
f0110f47:	ff 75 c0             	pushl  -0x40(%ebp)
f0110f4a:	e8 d9 ea ff ff       	call   f010fa28 <check_block>
f0110f4f:	83 c4 10             	add    $0x10,%esp
f0110f52:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//Free 2nd block
	free_block(startVAs[1]);
f0110f55:	a1 84 00 5c f0       	mov    0xf05c0084,%eax
f0110f5a:	83 ec 0c             	sub    $0xc,%esp
f0110f5d:	50                   	push   %eax
f0110f5e:	e8 1a 24 01 00       	call   f012337d <free_block>
f0110f63:	83 c4 10             	add    $0x10,%esp
	if (is_correct) is_correct = check_block(startVAs[1], startVAs[1], allocSizes[0], 0);
f0110f66:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110f6a:	74 21                	je     f0110f8d <test_free_block_FF+0x574>
f0110f6c:	8b 0d b8 dd 17 f0    	mov    0xf017ddb8,%ecx
f0110f72:	8b 15 84 00 5c f0    	mov    0xf05c0084,%edx
f0110f78:	a1 84 00 5c f0       	mov    0xf05c0084,%eax
f0110f7d:	6a 00                	push   $0x0
f0110f7f:	51                   	push   %ecx
f0110f80:	52                   	push   %edx
f0110f81:	50                   	push   %eax
f0110f82:	e8 a1 ea ff ff       	call   f010fa28 <check_block>
f0110f87:	83 c4 10             	add    $0x10,%esp
f0110f8a:	89 45 f0             	mov    %eax,-0x10(%ebp)

	expectedNumOfFreeBlks++ ;
f0110f8d:	ff 45 b8             	incl   -0x48(%ebp)
	if (is_correct) is_correct = check_list_size(expectedNumOfFreeBlks);
f0110f90:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110f94:	74 11                	je     f0110fa7 <test_free_block_FF+0x58e>
f0110f96:	83 ec 0c             	sub    $0xc,%esp
f0110f99:	ff 75 b8             	pushl  -0x48(%ebp)
f0110f9c:	e8 0f eb ff ff       	call   f010fab0 <check_list_size>
f0110fa1:	83 c4 10             	add    $0x10,%esp
f0110fa4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (is_correct)
f0110fa7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110fab:	74 04                	je     f0110fb1 <test_free_block_FF+0x598>
	{
		eval += 10;
f0110fad:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f0110fb1:	83 ec 0c             	sub    $0xc,%esp
f0110fb4:	68 70 a3 12 f0       	push   $0xf012a370
f0110fb9:	e8 ae ff fe ff       	call   f0100f6c <cprintf>
f0110fbe:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f0110fc1:	83 ec 0c             	sub    $0xc,%esp
f0110fc4:	68 ac a3 12 f0       	push   $0xf012a3ac
f0110fc9:	e8 9e ff fe ff       	call   f0100f6c <cprintf>
f0110fce:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110fd1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f0110fd8:	c7 45 b4 78 05 00 00 	movl   $0x578,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f0110fdf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0110fe2:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0110fe9:	83 ec 0c             	sub    $0xc,%esp
f0110fec:	50                   	push   %eax
f0110fed:	e8 8b 23 01 00       	call   f012337d <free_block>
f0110ff2:	83 c4 10             	add    $0x10,%esp
	expected_size = remainSize + allocSizes[numOfAllocs-1];
f0110ff5:	8b 15 d0 dd 17 f0    	mov    0xf017ddd0,%edx
f0110ffb:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110ffe:	01 d0                	add    %edx,%eax
f0111000:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if (check_block(startVAs[blockIndex-1], startVAs[blockIndex-1], expected_size, 0) == 0)
f0111003:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111006:	48                   	dec    %eax
f0111007:	8b 14 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%edx
f011100e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111011:	48                   	dec    %eax
f0111012:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0111019:	6a 00                	push   $0x0
f011101b:	ff 75 b0             	pushl  -0x50(%ebp)
f011101e:	52                   	push   %edx
f011101f:	50                   	push   %eax
f0111020:	e8 03 ea ff ff       	call   f010fa28 <check_block>
f0111025:	83 c4 10             	add    $0x10,%esp
f0111028:	85 c0                	test   %eax,%eax
f011102a:	75 07                	jne    f0111033 <test_free_block_FF+0x61a>
	{
		is_correct = 0;
f011102c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	}
	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f0111033:	83 ec 0c             	sub    $0xc,%esp
f0111036:	68 c1 a3 12 f0       	push   $0xf012a3c1
f011103b:	e8 2c ff fe ff       	call   f0100f6c <cprintf>
f0111040:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f0111043:	c7 45 b4 91 01 00 00 	movl   $0x191,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f011104a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011104d:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0111054:	83 ec 0c             	sub    $0xc,%esp
f0111057:	50                   	push   %eax
f0111058:	e8 20 23 01 00       	call   f012337d <free_block>
f011105d:	83 c4 10             	add    $0x10,%esp
	expected_size = allocSizes[2]+allocSizes[2];
f0111060:	8b 15 c0 dd 17 f0    	mov    0xf017ddc0,%edx
f0111066:	a1 c0 dd 17 f0       	mov    0xf017ddc0,%eax
f011106b:	01 d0                	add    %edx,%eax
f011106d:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if (check_block(startVAs[blockIndex-1], startVAs[blockIndex-1], expected_size, 0) == 0)
f0111070:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111073:	48                   	dec    %eax
f0111074:	8b 14 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%edx
f011107b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011107e:	48                   	dec    %eax
f011107f:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0111086:	6a 00                	push   $0x0
f0111088:	ff 75 b0             	pushl  -0x50(%ebp)
f011108b:	52                   	push   %edx
f011108c:	50                   	push   %eax
f011108d:	e8 96 e9 ff ff       	call   f010fa28 <check_block>
f0111092:	83 c4 10             	add    $0x10,%esp
f0111095:	85 c0                	test   %eax,%eax
f0111097:	75 07                	jne    f01110a0 <test_free_block_FF+0x687>
	{
		is_correct = 0;
f0111099:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	}
	if (check_list_size(expectedNumOfFreeBlks) == 0)
f01110a0:	83 ec 0c             	sub    $0xc,%esp
f01110a3:	ff 75 b8             	pushl  -0x48(%ebp)
f01110a6:	e8 05 ea ff ff       	call   f010fab0 <check_list_size>
f01110ab:	83 c4 10             	add    $0x10,%esp
f01110ae:	85 c0                	test   %eax,%eax
f01110b0:	75 07                	jne    f01110b9 <test_free_block_FF+0x6a0>
	{
		is_correct = 0;
f01110b2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	}
	if (is_correct)
f01110b9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01110bd:	74 04                	je     f01110c3 <test_free_block_FF+0x6aa>
	{
		eval += 15;
f01110bf:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f01110c3:	83 ec 0c             	sub    $0xc,%esp
f01110c6:	68 dc a3 12 f0       	push   $0xf012a3dc
f01110cb:	e8 9c fe fe ff       	call   f0100f6c <cprintf>
f01110d0:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f01110d3:	83 ec 0c             	sub    $0xc,%esp
f01110d6:	68 14 a4 12 f0       	push   $0xf012a414
f01110db:	e8 8c fe fe ff       	call   f0100f6c <cprintf>
f01110e0:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01110e3:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 0 ;
f01110ea:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f01110f1:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01110f4:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f01110fb:	83 ec 0c             	sub    $0xc,%esp
f01110fe:	50                   	push   %eax
f01110ff:	e8 79 22 01 00       	call   f012337d <free_block>
f0111104:	83 c4 10             	add    $0x10,%esp
	expected_size = allocSizes[0]+allocSizes[0];
f0111107:	8b 15 b8 dd 17 f0    	mov    0xf017ddb8,%edx
f011110d:	a1 b8 dd 17 f0       	mov    0xf017ddb8,%eax
f0111112:	01 d0                	add    %edx,%eax
f0111114:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if (check_block(startVAs[blockIndex], startVAs[blockIndex], expected_size, 0) == 0)
f0111117:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011111a:	8b 14 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%edx
f0111121:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111124:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f011112b:	6a 00                	push   $0x0
f011112d:	ff 75 b0             	pushl  -0x50(%ebp)
f0111130:	52                   	push   %edx
f0111131:	50                   	push   %eax
f0111132:	e8 f1 e8 ff ff       	call   f010fa28 <check_block>
f0111137:	83 c4 10             	add    $0x10,%esp
f011113a:	85 c0                	test   %eax,%eax
f011113c:	75 07                	jne    f0111145 <test_free_block_FF+0x72c>
	{
		is_correct = 0;
f011113e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f0111145:	83 ec 0c             	sub    $0xc,%esp
f0111148:	68 29 a4 12 f0       	push   $0xf012a429
f011114d:	e8 1a fe fe ff       	call   f0100f6c <cprintf>
f0111152:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f0111155:	c7 45 b4 c7 00 00 00 	movl   $0xc7,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);
f011115c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011115f:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0111166:	83 ec 0c             	sub    $0xc,%esp
f0111169:	50                   	push   %eax
f011116a:	e8 0e 22 01 00       	call   f012337d <free_block>
f011116f:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f0111172:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111175:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f011117c:	83 ec 0c             	sub    $0xc,%esp
f011117f:	50                   	push   %eax
f0111180:	e8 1e 1d 01 00       	call   f0122ea3 <get_block_size>
f0111185:	83 c4 10             	add    $0x10,%esp
f0111188:	89 45 ac             	mov    %eax,-0x54(%ebp)
	expected_size = allocSizes[0]+allocSizes[1];
f011118b:	8b 15 b8 dd 17 f0    	mov    0xf017ddb8,%edx
f0111191:	a1 bc dd 17 f0       	mov    0xf017ddbc,%eax
f0111196:	01 d0                	add    %edx,%eax
f0111198:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if (check_block(startVAs[blockIndex], startVAs[blockIndex], expected_size, 0) == 0)
f011119b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011119e:	8b 14 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%edx
f01111a5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01111a8:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f01111af:	6a 00                	push   $0x0
f01111b1:	ff 75 b0             	pushl  -0x50(%ebp)
f01111b4:	52                   	push   %edx
f01111b5:	50                   	push   %eax
f01111b6:	e8 6d e8 ff ff       	call   f010fa28 <check_block>
f01111bb:	83 c4 10             	add    $0x10,%esp
f01111be:	85 c0                	test   %eax,%eax
f01111c0:	75 07                	jne    f01111c9 <test_free_block_FF+0x7b0>
	{
		is_correct = 0;
f01111c2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	}

	if (is_correct) is_correct = check_list_size(expectedNumOfFreeBlks);
f01111c9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01111cd:	74 11                	je     f01111e0 <test_free_block_FF+0x7c7>
f01111cf:	83 ec 0c             	sub    $0xc,%esp
f01111d2:	ff 75 b8             	pushl  -0x48(%ebp)
f01111d5:	e8 d6 e8 ff ff       	call   f010fab0 <check_list_size>
f01111da:	83 c4 10             	add    $0x10,%esp
f01111dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (is_correct)
f01111e0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01111e4:	74 04                	je     f01111ea <test_free_block_FF+0x7d1>
	{
		eval += 15;
f01111e6:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f01111ea:	83 ec 0c             	sub    $0xc,%esp
f01111ed:	68 44 a4 12 f0       	push   $0xf012a444
f01111f2:	e8 75 fd fe ff       	call   f0100f6c <cprintf>
f01111f7:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01111fa:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 4*allocCntPerSize - 2 ;
f0111201:	c7 45 b4 1e 03 00 00 	movl   $0x31e,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);	//no merge
f0111208:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011120b:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0111212:	83 ec 0c             	sub    $0xc,%esp
f0111215:	50                   	push   %eax
f0111216:	e8 62 21 01 00       	call   f012337d <free_block>
f011121b:	83 c4 10             	add    $0x10,%esp
	expectedNumOfFreeBlks++;
f011121e:	ff 45 b8             	incl   -0x48(%ebp)

	blockIndex = 4*allocCntPerSize - 1 ;
f0111221:	c7 45 b4 1f 03 00 00 	movl   $0x31f,-0x4c(%ebp)
	free_block(startVAs[blockIndex]);	//merge with prev & next
f0111228:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011122b:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0111232:	83 ec 0c             	sub    $0xc,%esp
f0111235:	50                   	push   %eax
f0111236:	e8 42 21 01 00       	call   f012337d <free_block>
f011123b:	83 c4 10             	add    $0x10,%esp
	expectedNumOfFreeBlks--;
f011123e:	ff 4d b8             	decl   -0x48(%ebp)

	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0111241:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111244:	48                   	dec    %eax
f0111245:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f011124c:	83 ec 0c             	sub    $0xc,%esp
f011124f:	50                   	push   %eax
f0111250:	e8 4e 1c 01 00       	call   f0122ea3 <get_block_size>
f0111255:	83 c4 10             	add    $0x10,%esp
f0111258:	89 45 ac             	mov    %eax,-0x54(%ebp)
	expected_size = allocSizes[3]+allocSizes[3]+allocSizes[4];
f011125b:	8b 15 c4 dd 17 f0    	mov    0xf017ddc4,%edx
f0111261:	a1 c4 dd 17 f0       	mov    0xf017ddc4,%eax
f0111266:	01 c2                	add    %eax,%edx
f0111268:	a1 c8 dd 17 f0       	mov    0xf017ddc8,%eax
f011126d:	01 d0                	add    %edx,%eax
f011126f:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if (check_block(startVAs[blockIndex-1], startVAs[blockIndex-1], expected_size, 0) == 0)
f0111272:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111275:	48                   	dec    %eax
f0111276:	8b 14 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%edx
f011127d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111280:	48                   	dec    %eax
f0111281:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0111288:	6a 00                	push   $0x0
f011128a:	ff 75 b0             	pushl  -0x50(%ebp)
f011128d:	52                   	push   %edx
f011128e:	50                   	push   %eax
f011128f:	e8 94 e7 ff ff       	call   f010fa28 <check_block>
f0111294:	83 c4 10             	add    $0x10,%esp
f0111297:	85 c0                	test   %eax,%eax
f0111299:	75 07                	jne    f01112a2 <test_free_block_FF+0x889>
	{
		is_correct = 0;
f011129b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	}

	if (is_correct) is_correct = check_list_size(expectedNumOfFreeBlks);
f01112a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01112a6:	74 11                	je     f01112b9 <test_free_block_FF+0x8a0>
f01112a8:	83 ec 0c             	sub    $0xc,%esp
f01112ab:	ff 75 b8             	pushl  -0x48(%ebp)
f01112ae:	e8 fd e7 ff ff       	call   f010fab0 <check_list_size>
f01112b3:	83 c4 10             	add    $0x10,%esp
f01112b6:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if (is_correct)
f01112b9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01112bd:	74 04                	je     f01112c3 <test_free_block_FF+0x8aa>
	{
		eval += 20;
f01112bf:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
	}

	//====================================================================//
	/*Allocate After Free Scenarios */
	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f01112c3:	83 ec 0c             	sub    $0xc,%esp
f01112c6:	68 84 a4 12 f0       	push   $0xf012a484
f01112cb:	e8 9c fc fe ff       	call   f0100f6c <cprintf>
f01112d0:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with NEXT\n\n") ;
f01112d3:	83 ec 0c             	sub    $0xc,%esp
f01112d6:	68 c8 a4 12 f0       	push   $0xf012a4c8
f01112db:	e8 8c fc fe ff       	call   f0100f6c <cprintf>
f01112e0:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01112e3:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 5*kilo - sizeOfMetaData;
f01112ea:	c7 45 c4 f8 13 00 00 	movl   $0x13f8,-0x3c(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData, 2);
f01112f1:	c7 45 a8 02 00 00 00 	movl   $0x2,-0x58(%ebp)
f01112f8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01112fb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01112fe:	01 d0                	add    %edx,%eax
f0111300:	83 c0 07             	add    $0x7,%eax
f0111303:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0111306:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111309:	ba 00 00 00 00       	mov    $0x0,%edx
f011130e:	f7 75 a8             	divl   -0x58(%ebp)
f0111311:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111314:	29 d0                	sub    %edx,%eax
f0111316:	89 45 b0             	mov    %eax,-0x50(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0111319:	83 ec 08             	sub    $0x8,%esp
f011131c:	6a 01                	push   $0x1
f011131e:	ff 75 c4             	pushl  -0x3c(%ebp)
f0111321:	e8 b4 1b 01 00       	call   f0122eda <alloc_block>
f0111326:	83 c4 10             	add    $0x10,%esp
f0111329:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	void* expected = (void*)(KERNEL_HEAP_START + sizeof(int) + sizeOfMetaData/2);
f011132c:	c7 45 a0 08 00 00 f6 	movl   $0xf6000008,-0x60(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f0111333:	6a 01                	push   $0x1
f0111335:	ff 75 b0             	pushl  -0x50(%ebp)
f0111338:	ff 75 a0             	pushl  -0x60(%ebp)
f011133b:	ff 75 c0             	pushl  -0x40(%ebp)
f011133e:	e8 e5 e6 ff ff       	call   f010fa28 <check_block>
f0111343:	83 c4 10             	add    $0x10,%esp
f0111346:	85 c0                	test   %eax,%eax
f0111348:	75 17                	jne    f0111361 <test_free_block_FF+0x948>
	{
		is_correct = 0;
f011134a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.1: Failed\n");
f0111351:	83 ec 0c             	sub    $0xc,%esp
f0111354:	68 ee a4 12 f0       	push   $0xf012a4ee
f0111359:	e8 0e fc fe ff       	call   f0100f6c <cprintf>
f011135e:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 3*kilo - sizeOfMetaData;
f0111361:	c7 45 c4 f8 0b 00 00 	movl   $0xbf8,-0x3c(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData, 2);
f0111368:	c7 45 9c 02 00 00 00 	movl   $0x2,-0x64(%ebp)
f011136f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0111372:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111375:	01 d0                	add    %edx,%eax
f0111377:	83 c0 07             	add    $0x7,%eax
f011137a:	89 45 98             	mov    %eax,-0x68(%ebp)
f011137d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111380:	ba 00 00 00 00       	mov    $0x0,%edx
f0111385:	f7 75 9c             	divl   -0x64(%ebp)
f0111388:	8b 45 98             	mov    -0x68(%ebp),%eax
f011138b:	29 d0                	sub    %edx,%eax
f011138d:	89 45 b0             	mov    %eax,-0x50(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0111390:	83 ec 08             	sub    $0x8,%esp
f0111393:	6a 01                	push   $0x1
f0111395:	ff 75 c4             	pushl  -0x3c(%ebp)
f0111398:	e8 3d 1b 01 00       	call   f0122eda <alloc_block>
f011139d:	83 c4 10             	add    $0x10,%esp
f01113a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + sizeof(int) + 5*kilo + sizeOfMetaData/2);
f01113a3:	c7 45 a0 08 14 00 f6 	movl   $0xf6001408,-0x60(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f01113aa:	6a 01                	push   $0x1
f01113ac:	ff 75 b0             	pushl  -0x50(%ebp)
f01113af:	ff 75 a0             	pushl  -0x60(%ebp)
f01113b2:	ff 75 c0             	pushl  -0x40(%ebp)
f01113b5:	e8 6e e6 ff ff       	call   f010fa28 <check_block>
f01113ba:	83 c4 10             	add    $0x10,%esp
f01113bd:	85 c0                	test   %eax,%eax
f01113bf:	75 17                	jne    f01113d8 <test_free_block_FF+0x9bf>
	{
		is_correct = 0;
f01113c1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.2: Failed\n");
f01113c8:	83 ec 0c             	sub    $0xc,%esp
f01113cb:	68 0c a5 12 f0       	push   $0xf012a50c
f01113d0:	e8 97 fb fe ff       	call   f0100f6c <cprintf>
f01113d5:	83 c4 10             	add    $0x10,%esp
	}

	expectedNumOfFreeBlks--;
f01113d8:	ff 4d b8             	decl   -0x48(%ebp)

	/*INTERNAL FRAGMENTATION CASE*/
	actualSize = 4*kilo + 10 ;
f01113db:	c7 45 c4 0a 10 00 00 	movl   $0x100a,-0x3c(%ebp)
	expected_size = MAX(ROUNDUP(actualSize + sizeOfMetaData, 2), allocSizes[0]+allocSizes[1]) ;
f01113e2:	c7 45 94 02 00 00 00 	movl   $0x2,-0x6c(%ebp)
f01113e9:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01113ec:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01113ef:	01 d0                	add    %edx,%eax
f01113f1:	83 c0 07             	add    $0x7,%eax
f01113f4:	89 45 90             	mov    %eax,-0x70(%ebp)
f01113f7:	8b 45 90             	mov    -0x70(%ebp),%eax
f01113fa:	ba 00 00 00 00       	mov    $0x0,%edx
f01113ff:	f7 75 94             	divl   -0x6c(%ebp)
f0111402:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111405:	29 d0                	sub    %edx,%eax
f0111407:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011140a:	8b 15 b8 dd 17 f0    	mov    0xf017ddb8,%edx
f0111410:	a1 bc dd 17 f0       	mov    0xf017ddbc,%eax
f0111415:	01 d0                	add    %edx,%eax
f0111417:	89 45 88             	mov    %eax,-0x78(%ebp)
f011141a:	8b 55 88             	mov    -0x78(%ebp),%edx
f011141d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111420:	39 d0                	cmp    %edx,%eax
f0111422:	73 02                	jae    f0111426 <test_free_block_FF+0xa0d>
f0111424:	89 d0                	mov    %edx,%eax
f0111426:	89 45 b0             	mov    %eax,-0x50(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0111429:	83 ec 08             	sub    $0x8,%esp
f011142c:	6a 01                	push   $0x1
f011142e:	ff 75 c4             	pushl  -0x3c(%ebp)
f0111431:	e8 a4 1a 01 00       	call   f0122eda <alloc_block>
f0111436:	83 c4 10             	add    $0x10,%esp
f0111439:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f011143c:	a1 9c 03 5c f0       	mov    0xf05c039c,%eax
f0111441:	89 45 a0             	mov    %eax,-0x60(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f0111444:	6a 01                	push   $0x1
f0111446:	ff 75 b0             	pushl  -0x50(%ebp)
f0111449:	ff 75 a0             	pushl  -0x60(%ebp)
f011144c:	ff 75 c0             	pushl  -0x40(%ebp)
f011144f:	e8 d4 e5 ff ff       	call   f010fa28 <check_block>
f0111454:	83 c4 10             	add    $0x10,%esp
f0111457:	85 c0                	test   %eax,%eax
f0111459:	75 17                	jne    f0111472 <test_free_block_FF+0xa59>
	{
		is_correct = 0;
f011145b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.3: Failed INTERNAL FRAGMENTATION CASE\n");
f0111462:	83 ec 0c             	sub    $0xc,%esp
f0111465:	68 2c a5 12 f0       	push   $0xf012a52c
f011146a:	e8 fd fa fe ff       	call   f0100f6c <cprintf>
f011146f:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f0111472:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111476:	74 04                	je     f011147c <test_free_block_FF+0xa63>
	{
		eval += 10;
f0111478:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	expectedNumOfFreeBlks--;
f011147c:	ff 4d b8             	decl   -0x48(%ebp)

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f011147f:	83 ec 0c             	sub    $0xc,%esp
f0111482:	68 68 a5 12 f0       	push   $0xf012a568
f0111487:	e8 e0 fa fe ff       	call   f0100f6c <cprintf>
f011148c:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f011148f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo + 1;
f0111496:	c7 45 c4 01 08 00 00 	movl   $0x801,-0x3c(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData, 2);
f011149d:	c7 45 84 02 00 00 00 	movl   $0x2,-0x7c(%ebp)
f01114a4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01114a7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01114aa:	01 d0                	add    %edx,%eax
f01114ac:	83 c0 07             	add    $0x7,%eax
f01114af:	89 45 80             	mov    %eax,-0x80(%ebp)
f01114b2:	8b 45 80             	mov    -0x80(%ebp),%eax
f01114b5:	ba 00 00 00 00       	mov    $0x0,%edx
f01114ba:	f7 75 84             	divl   -0x7c(%ebp)
f01114bd:	8b 45 80             	mov    -0x80(%ebp),%eax
f01114c0:	29 d0                	sub    %edx,%eax
f01114c2:	89 45 b0             	mov    %eax,-0x50(%ebp)
	va = alloc_block(actualSize, DA_FF);
f01114c5:	83 ec 08             	sub    $0x8,%esp
f01114c8:	6a 01                	push   $0x1
f01114ca:	ff 75 c4             	pushl  -0x3c(%ebp)
f01114cd:	e8 08 1a 01 00       	call   f0122eda <alloc_block>
f01114d2:	83 c4 10             	add    $0x10,%esp
f01114d5:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f01114d8:	a1 f8 0c 5c f0       	mov    0xf05c0cf8,%eax
f01114dd:	89 45 a0             	mov    %eax,-0x60(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f01114e0:	6a 01                	push   $0x1
f01114e2:	ff 75 b0             	pushl  -0x50(%ebp)
f01114e5:	ff 75 a0             	pushl  -0x60(%ebp)
f01114e8:	ff 75 c0             	pushl  -0x40(%ebp)
f01114eb:	e8 38 e5 ff ff       	call   f010fa28 <check_block>
f01114f0:	83 c4 10             	add    $0x10,%esp
f01114f3:	85 c0                	test   %eax,%eax
f01114f5:	75 17                	jne    f011150e <test_free_block_FF+0xaf5>
	{
		is_correct = 0;
f01114f7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.4: Failed\n");
f01114fe:	83 ec 0c             	sub    $0xc,%esp
f0111501:	68 95 a5 12 f0       	push   $0xf012a595
f0111506:	e8 61 fa fe ff       	call   f0100f6c <cprintf>
f011150b:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f011150e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111512:	74 04                	je     f0111518 <test_free_block_FF+0xaff>
	{
		eval += 10;
f0111514:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("		7.3: in block coalesces with PREV\n\n") ;
f0111518:	83 ec 0c             	sub    $0xc,%esp
f011151b:	68 b4 a5 12 f0       	push   $0xf012a5b4
f0111520:	e8 47 fa fe ff       	call   f0100f6c <cprintf>
f0111525:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111528:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo - sizeOfMetaData;
f011152f:	c7 45 c4 f8 07 00 00 	movl   $0x7f8,-0x3c(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData, 2);
f0111536:	c7 85 7c ff ff ff 02 	movl   $0x2,-0x84(%ebp)
f011153d:	00 00 00 
f0111540:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0111543:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0111549:	01 d0                	add    %edx,%eax
f011154b:	83 c0 07             	add    $0x7,%eax
f011154e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0111554:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011155a:	ba 00 00 00 00       	mov    $0x0,%edx
f011155f:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0111565:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011156b:	29 d0                	sub    %edx,%eax
f011156d:	89 45 b0             	mov    %eax,-0x50(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0111570:	83 ec 08             	sub    $0x8,%esp
f0111573:	6a 01                	push   $0x1
f0111575:	ff 75 c4             	pushl  -0x3c(%ebp)
f0111578:	e8 5d 19 01 00       	call   f0122eda <alloc_block>
f011157d:	83 c4 10             	add    $0x10,%esp
f0111580:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f0111583:	a1 c0 06 5c f0       	mov    0xf05c06c0,%eax
f0111588:	89 45 a0             	mov    %eax,-0x60(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f011158b:	6a 01                	push   $0x1
f011158d:	ff 75 b0             	pushl  -0x50(%ebp)
f0111590:	ff 75 a0             	pushl  -0x60(%ebp)
f0111593:	ff 75 c0             	pushl  -0x40(%ebp)
f0111596:	e8 8d e4 ff ff       	call   f010fa28 <check_block>
f011159b:	83 c4 10             	add    $0x10,%esp
f011159e:	85 c0                	test   %eax,%eax
f01115a0:	75 17                	jne    f01115b9 <test_free_block_FF+0xba0>
	{
		is_correct = 0;
f01115a2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.5: Failed\n");
f01115a9:	83 ec 0c             	sub    $0xc,%esp
f01115ac:	68 da a5 12 f0       	push   $0xf012a5da
f01115b1:	e8 b6 f9 fe ff       	call   f0100f6c <cprintf>
f01115b6:	83 c4 10             	add    $0x10,%esp
	}

	expectedNumOfFreeBlks--;
f01115b9:	ff 4d b8             	decl   -0x48(%ebp)

	actualSize = 8*kilo - sizeOfMetaData;
f01115bc:	c7 45 c4 f8 1f 00 00 	movl   $0x1ff8,-0x3c(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData, 2);
f01115c3:	c7 85 74 ff ff ff 02 	movl   $0x2,-0x8c(%ebp)
f01115ca:	00 00 00 
f01115cd:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01115d0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01115d6:	01 d0                	add    %edx,%eax
f01115d8:	83 c0 07             	add    $0x7,%eax
f01115db:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01115e1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01115e7:	ba 00 00 00 00       	mov    $0x0,%edx
f01115ec:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f01115f2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01115f8:	29 d0                	sub    %edx,%eax
f01115fa:	89 45 b0             	mov    %eax,-0x50(%ebp)
	va = alloc_block(actualSize, DA_FF);
f01115fd:	83 ec 08             	sub    $0x8,%esp
f0111600:	6a 01                	push   $0x1
f0111602:	ff 75 c4             	pushl  -0x3c(%ebp)
f0111605:	e8 d0 18 01 00       	call   f0122eda <alloc_block>
f011160a:	83 c4 10             	add    $0x10,%esp
f011160d:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f0111610:	a1 5c 16 5c f0       	mov    0xf05c165c,%eax
f0111615:	89 45 a0             	mov    %eax,-0x60(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f0111618:	6a 01                	push   $0x1
f011161a:	ff 75 b0             	pushl  -0x50(%ebp)
f011161d:	ff 75 a0             	pushl  -0x60(%ebp)
f0111620:	ff 75 c0             	pushl  -0x40(%ebp)
f0111623:	e8 00 e4 ff ff       	call   f010fa28 <check_block>
f0111628:	83 c4 10             	add    $0x10,%esp
f011162b:	85 c0                	test   %eax,%eax
f011162d:	75 17                	jne    f0111646 <test_free_block_FF+0xc2d>
	{
		is_correct = 0;
f011162f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.6: Failed\n");
f0111636:	83 ec 0c             	sub    $0xc,%esp
f0111639:	68 f8 a5 12 f0       	push   $0xf012a5f8
f011163e:	e8 29 f9 fe ff       	call   f0100f6c <cprintf>
f0111643:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct) is_correct = check_list_size(expectedNumOfFreeBlks);
f0111646:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011164a:	74 11                	je     f011165d <test_free_block_FF+0xc44>
f011164c:	83 ec 0c             	sub    $0xc,%esp
f011164f:	ff 75 b8             	pushl  -0x48(%ebp)
f0111652:	e8 59 e4 ff ff       	call   f010fab0 <check_list_size>
f0111657:	83 c4 10             	add    $0x10,%esp
f011165a:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if (is_correct)
f011165d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111661:	74 04                	je     f0111667 <test_free_block_FF+0xc4e>
	{
		eval += 10;
f0111663:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("test free_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f0111667:	83 ec 08             	sub    $0x8,%esp
f011166a:	ff 75 f4             	pushl  -0xc(%ebp)
f011166d:	68 18 a6 12 f0       	push   $0xf012a618
f0111672:	e8 f5 f8 fe ff       	call   f0100f6c <cprintf>
f0111677:	83 c4 10             	add    $0x10,%esp

}
f011167a:	90                   	nop
f011167b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f011167e:	c9                   	leave  
f011167f:	c3                   	ret    

f0111680 <test_free_block_BF>:

void test_free_block_BF()
{
f0111680:	55                   	push   %ebp
f0111681:	89 e5                	mov    %esp,%ebp
f0111683:	53                   	push   %ebx
f0111684:	81 ec 84 00 00 00    	sub    $0x84,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f011168a:	83 ec 0c             	sub    $0xc,%esp
f011168d:	68 a8 a0 12 f0       	push   $0xf012a0a8
f0111692:	e8 d5 f8 fe ff       	call   f0100f6c <cprintf>
f0111697:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f011169a:	83 ec 0c             	sub    $0xc,%esp
f011169d:	68 e8 a0 12 f0       	push   $0xf012a0e8
f01116a2:	e8 c5 f8 fe ff       	call   f0100f6c <cprintf>
f01116a7:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f01116aa:	83 ec 0c             	sub    $0xc,%esp
f01116ad:	68 a8 a0 12 f0       	push   $0xf012a0a8
f01116b2:	e8 b5 f8 fe ff       	call   f0100f6c <cprintf>
f01116b7:	83 c4 10             	add    $0x10,%esp

	int initAllocatedSpace = 3*Mega;
f01116ba:	c7 45 d4 00 00 30 00 	movl   $0x300000,-0x2c(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f01116c1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01116c4:	83 ec 08             	sub    $0x8,%esp
f01116c7:	50                   	push   %eax
f01116c8:	68 00 00 00 f6       	push   $0xf6000000
f01116cd:	e8 35 19 01 00       	call   f0123007 <initialize_dynamic_allocator>
f01116d2:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f01116d5:	83 ec 0c             	sub    $0xc,%esp
f01116d8:	68 28 a1 12 f0       	push   $0xf012a128
f01116dd:	e8 8a f8 fe ff       	call   f0100f6c <cprintf>
f01116e2:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f01116e5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f01116ec:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01116f3:	eb 2a                	jmp    f011171f <test_free_block_BF+0x9f>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f01116f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01116f8:	8b 14 85 b8 dd 17 f0 	mov    -0xfe82248(,%eax,4),%edx
f01116ff:	89 d0                	mov    %edx,%eax
f0111701:	c1 e0 02             	shl    $0x2,%eax
f0111704:	01 d0                	add    %edx,%eax
f0111706:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011170d:	01 d0                	add    %edx,%eax
f011170f:	c1 e0 03             	shl    $0x3,%eax
f0111712:	89 c2                	mov    %eax,%edx
f0111714:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111717:	01 d0                	add    %edx,%eax
f0111719:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f011171c:	ff 45 f0             	incl   -0x10(%ebp)
f011171f:	83 7d f0 06          	cmpl   $0x6,-0x10(%ebp)
f0111723:	7e d0                	jle    f01116f5 <test_free_block_BF+0x75>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes - 2*sizeof(int) ; //exclude size of "DA Begin & End" blocks
f0111725:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0111728:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011172b:	83 e8 08             	sub    $0x8,%eax
f011172e:	89 45 d0             	mov    %eax,-0x30(%ebp)
	if (remainSize <= 0)
f0111731:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
f0111735:	7f 17                	jg     f011174e <test_free_block_BF+0xce>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f0111737:	83 ec 04             	sub    $0x4,%esp
f011173a:	68 80 a1 12 f0       	push   $0xf012a180
f011173f:	68 b1 03 00 00       	push   $0x3b1
f0111744:	68 74 99 12 f0       	push   $0xf0129974
f0111749:	e8 cc eb fe ff       	call   f010031a <_panic>

	int idx = 0;
f011174e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
f0111755:	c7 45 e8 04 00 00 f6 	movl   $0xf6000004,-0x18(%ebp)

	uint32 actualSize, expected_size;
	void* expected_va;
	for (int i = 0; i < numOfAllocs; ++i)
f011175c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0111763:	e9 0f 01 00 00       	jmp    f0111877 <test_free_block_BF+0x1f7>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0111768:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011176f:	e9 f3 00 00 00       	jmp    f0111867 <test_free_block_BF+0x1e7>
		{
			actualSize = allocSizes[i] - sizeOfMetaData;
f0111774:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111777:	8b 04 85 b8 dd 17 f0 	mov    -0xfe82248(,%eax,4),%eax
f011177e:	83 e8 08             	sub    $0x8,%eax
f0111781:	89 45 cc             	mov    %eax,-0x34(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_BF);
f0111784:	83 ec 08             	sub    $0x8,%esp
f0111787:	6a 03                	push   $0x3
f0111789:	ff 75 cc             	pushl  -0x34(%ebp)
f011178c:	e8 49 17 01 00       	call   f0122eda <alloc_block>
f0111791:	83 c4 10             	add    $0x10,%esp
f0111794:	89 c2                	mov    %eax,%edx
f0111796:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111799:	89 14 85 80 00 5c f0 	mov    %edx,-0xfa3ff80(,%eax,4)
f01117a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01117a3:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f01117aa:	89 45 c8             	mov    %eax,-0x38(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f01117ad:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01117b0:	d1 e8                	shr    %eax
f01117b2:	89 c2                	mov    %eax,%edx
f01117b4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01117b7:	01 c2                	add    %eax,%edx
f01117b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01117bc:	89 14 85 80 2c 5c f0 	mov    %edx,-0xfa3d380(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f01117c3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01117c6:	8d 50 fe             	lea    -0x2(%eax),%edx
f01117c9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01117cc:	01 c2                	add    %eax,%edx
f01117ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01117d1:	89 14 85 80 16 5c f0 	mov    %edx,-0xfa3e980(,%eax,4)
			//Check returned va
			expected_va = curVA + sizeOfMetaData/2;
f01117d8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01117db:	83 c0 04             	add    $0x4,%eax
f01117de:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			if (check_block(va, expected_va, allocSizes[i], 1) == 0)
f01117e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01117e4:	8b 04 85 b8 dd 17 f0 	mov    -0xfe82248(,%eax,4),%eax
f01117eb:	6a 01                	push   $0x1
f01117ed:	50                   	push   %eax
f01117ee:	ff 75 c4             	pushl  -0x3c(%ebp)
f01117f1:	ff 75 c8             	pushl  -0x38(%ebp)
f01117f4:	e8 2f e2 ff ff       	call   f010fa28 <check_block>
f01117f9:	83 c4 10             	add    $0x10,%esp
f01117fc:	85 c0                	test   %eax,%eax
f01117fe:	75 24                	jne    f0111824 <test_free_block_BF+0x1a4>
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_BF return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData ,va);
f0111800:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111803:	83 c0 08             	add    $0x8,%eax
f0111806:	83 ec 08             	sub    $0x8,%esp
f0111809:	ff 75 c8             	pushl  -0x38(%ebp)
f011180c:	50                   	push   %eax
f011180d:	ff 75 ec             	pushl  -0x14(%ebp)
f0111810:	68 54 a6 12 f0       	push   $0xf012a654
f0111815:	68 c3 03 00 00       	push   $0x3c3
f011181a:	68 74 99 12 f0       	push   $0xf0129974
f011181f:	e8 f6 ea fe ff       	call   f010031a <_panic>
			curVA += allocSizes[i] ;
f0111824:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0111827:	8b 04 85 b8 dd 17 f0 	mov    -0xfe82248(,%eax,4),%eax
f011182e:	01 45 e8             	add    %eax,-0x18(%ebp)
			*(startVAs[idx]) = idx ;
f0111831:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111834:	8b 14 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%edx
f011183b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011183e:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f0111841:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111844:	8b 14 85 80 2c 5c f0 	mov    -0xfa3d380(,%eax,4),%edx
f011184b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011184e:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f0111851:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111854:	8b 14 85 80 16 5c f0 	mov    -0xfa3e980(,%eax,4),%edx
f011185b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011185e:	66 89 02             	mov    %ax,(%edx)
			idx++;
f0111861:	ff 45 ec             	incl   -0x14(%ebp)

	uint32 actualSize, expected_size;
	void* expected_va;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0111864:	ff 45 e0             	incl   -0x20(%ebp)
f0111867:	81 7d e0 c7 00 00 00 	cmpl   $0xc7,-0x20(%ebp)
f011186e:	0f 8e 00 ff ff ff    	jle    f0111774 <test_free_block_BF+0xf4>
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block

	uint32 actualSize, expected_size;
	void* expected_va;
	for (int i = 0; i < numOfAllocs; ++i)
f0111874:	ff 45 e4             	incl   -0x1c(%ebp)
f0111877:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f011187b:	0f 8e e7 fe ff ff    	jle    f0111768 <test_free_block_BF+0xe8>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData;
f0111881:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111884:	83 e8 08             	sub    $0x8,%eax
f0111887:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_BF);
f011188a:	83 ec 08             	sub    $0x8,%esp
f011188d:	6a 03                	push   $0x3
f011188f:	ff 75 cc             	pushl  -0x34(%ebp)
f0111892:	e8 43 16 01 00       	call   f0122eda <alloc_block>
f0111897:	83 c4 10             	add    $0x10,%esp
f011189a:	89 c2                	mov    %eax,%edx
f011189c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011189f:	89 14 85 80 00 5c f0 	mov    %edx,-0xfa3ff80(,%eax,4)
f01118a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01118a9:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f01118b0:	89 45 c8             	mov    %eax,-0x38(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f01118b3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01118b6:	d1 e8                	shr    %eax
f01118b8:	89 c2                	mov    %eax,%edx
f01118ba:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01118bd:	01 c2                	add    %eax,%edx
f01118bf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01118c2:	89 14 85 80 2c 5c f0 	mov    %edx,-0xfa3d380(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f01118c9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01118cc:	8d 50 fe             	lea    -0x2(%eax),%edx
f01118cf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01118d2:	01 c2                	add    %eax,%edx
f01118d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01118d7:	89 14 85 80 16 5c f0 	mov    %edx,-0xfa3e980(,%eax,4)
	//Check returned va
	expected_va = curVA + sizeOfMetaData/2;
f01118de:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01118e1:	83 c0 04             	add    $0x4,%eax
f01118e4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	if (check_block(va, expected_va, remainSize, 1) == 0)
f01118e7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01118ea:	6a 01                	push   $0x1
f01118ec:	50                   	push   %eax
f01118ed:	ff 75 c4             	pushl  -0x3c(%ebp)
f01118f0:	ff 75 c8             	pushl  -0x38(%ebp)
f01118f3:	e8 30 e1 ff ff       	call   f010fa28 <check_block>
f01118f8:	83 c4 10             	add    $0x10,%esp
f01118fb:	85 c0                	test   %eax,%eax
f01118fd:	75 17                	jne    f0111916 <test_free_block_BF+0x296>
		panic("test_free_block #1: WRONG ALLOC - alloc_block_BF return wrong address.");
f01118ff:	83 ec 04             	sub    $0x4,%esp
f0111902:	68 b8 a6 12 f0       	push   $0xf012a6b8
f0111907:	68 d5 03 00 00       	push   $0x3d5
f011190c:	68 74 99 12 f0       	push   $0xf0129974
f0111911:	e8 04 ea fe ff       	call   f010031a <_panic>
	*(startVAs[idx]) = idx ;
f0111916:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111919:	8b 14 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%edx
f0111920:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111923:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f0111926:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111929:	8b 14 85 80 2c 5c f0 	mov    -0xfa3d380(,%eax,4),%edx
f0111930:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111933:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f0111936:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111939:	8b 14 85 80 16 5c f0 	mov    -0xfa3e980(,%eax,4),%edx
f0111940:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111943:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f0111946:	83 ec 0c             	sub    $0xc,%esp
f0111949:	68 bc a2 12 f0       	push   $0xf012a2bc
f011194e:	e8 19 f6 fe ff       	call   f0100f6c <cprintf>
f0111953:	83 c4 10             	add    $0x10,%esp

	for (int i = 0; i < idx; ++i)
f0111956:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011195d:	eb 59                	jmp    f01119b8 <test_free_block_BF+0x338>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f011195f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111962:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0111969:	66 8b 00             	mov    (%eax),%ax
f011196c:	98                   	cwtl   
f011196d:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0111970:	75 26                	jne    f0111998 <test_free_block_BF+0x318>
f0111972:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111975:	8b 04 85 80 2c 5c f0 	mov    -0xfa3d380(,%eax,4),%eax
f011197c:	66 8b 00             	mov    (%eax),%ax
f011197f:	98                   	cwtl   
f0111980:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0111983:	75 13                	jne    f0111998 <test_free_block_BF+0x318>
f0111985:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111988:	8b 04 85 80 16 5c f0 	mov    -0xfa3e980(,%eax,4),%eax
f011198f:	66 8b 00             	mov    (%eax),%ax
f0111992:	98                   	cwtl   
f0111993:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0111996:	74 1d                	je     f01119b5 <test_free_block_BF+0x335>
			panic("test_free_block #2.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f0111998:	83 ec 0c             	sub    $0xc,%esp
f011199b:	ff 75 dc             	pushl  -0x24(%ebp)
f011199e:	ff 75 dc             	pushl  -0x24(%ebp)
f01119a1:	68 00 a7 12 f0       	push   $0xf012a700
f01119a6:	68 e1 03 00 00       	push   $0x3e1
f01119ab:	68 74 99 12 f0       	push   $0xf0129974
f01119b0:	e8 65 e9 fe ff       	call   f010031a <_panic>

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;

	for (int i = 0; i < idx; ++i)
f01119b5:	ff 45 dc             	incl   -0x24(%ebp)
f01119b8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01119bb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01119be:	7c 9f                	jl     f011195f <test_free_block_BF+0x2df>
			panic("test_free_block #2.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f01119c0:	83 ec 0c             	sub    $0xc,%esp
f01119c3:	68 40 a3 12 f0       	push   $0xf012a340
f01119c8:	e8 9f f5 fe ff       	call   f0100f6c <cprintf>
f01119cd:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f01119d0:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01119d7:	e9 98 00 00 00       	jmp    f0111a74 <test_free_block_BF+0x3f4>
	{
		free_block(startVAs[i*allocCntPerSize]);
f01119dc:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01119df:	89 d0                	mov    %edx,%eax
f01119e1:	c1 e0 02             	shl    $0x2,%eax
f01119e4:	01 d0                	add    %edx,%eax
f01119e6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01119ed:	01 d0                	add    %edx,%eax
f01119ef:	c1 e0 03             	shl    $0x3,%eax
f01119f2:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f01119f9:	83 ec 0c             	sub    $0xc,%esp
f01119fc:	50                   	push   %eax
f01119fd:	e8 7b 19 01 00       	call   f012337d <free_block>
f0111a02:	83 c4 10             	add    $0x10,%esp
		if (check_block(startVAs[i*allocCntPerSize], startVAs[i*allocCntPerSize], allocSizes[i], 0) == 0)
f0111a05:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111a08:	8b 0c 85 b8 dd 17 f0 	mov    -0xfe82248(,%eax,4),%ecx
f0111a0f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0111a12:	89 d0                	mov    %edx,%eax
f0111a14:	c1 e0 02             	shl    $0x2,%eax
f0111a17:	01 d0                	add    %edx,%eax
f0111a19:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0111a20:	01 d0                	add    %edx,%eax
f0111a22:	c1 e0 03             	shl    $0x3,%eax
f0111a25:	8b 14 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%edx
f0111a2c:	8b 5d d8             	mov    -0x28(%ebp),%ebx
f0111a2f:	89 d8                	mov    %ebx,%eax
f0111a31:	c1 e0 02             	shl    $0x2,%eax
f0111a34:	01 d8                	add    %ebx,%eax
f0111a36:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f0111a3d:	01 d8                	add    %ebx,%eax
f0111a3f:	c1 e0 03             	shl    $0x3,%eax
f0111a42:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0111a49:	6a 00                	push   $0x0
f0111a4b:	51                   	push   %ecx
f0111a4c:	52                   	push   %edx
f0111a4d:	50                   	push   %eax
f0111a4e:	e8 d5 df ff ff       	call   f010fa28 <check_block>
f0111a53:	83 c4 10             	add    $0x10,%esp
f0111a56:	85 c0                	test   %eax,%eax
f0111a58:	75 17                	jne    f0111a71 <test_free_block_BF+0x3f1>
		{
			panic("3.1 Failed");
f0111a5a:	83 ec 04             	sub    $0x4,%esp
f0111a5d:	68 4f a7 12 f0       	push   $0xf012a74f
f0111a62:	68 ee 03 00 00       	push   $0x3ee
f0111a67:	68 74 99 12 f0       	push   $0xf0129974
f0111a6c:	e8 a9 e8 fe ff       	call   f010031a <_panic>
	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0111a71:	ff 45 d8             	incl   -0x28(%ebp)
f0111a74:	83 7d d8 06          	cmpl   $0x6,-0x28(%ebp)
f0111a78:	0f 8e 5e ff ff ff    	jle    f01119dc <test_free_block_BF+0x35c>
		if (check_block(startVAs[i*allocCntPerSize], startVAs[i*allocCntPerSize], allocSizes[i], 0) == 0)
		{
			panic("3.1 Failed");
		}
	}
	uint32 expectedNumOfFreeBlks = numOfAllocs;
f0111a7e:	c7 45 c0 07 00 00 00 	movl   $0x7,-0x40(%ebp)
	if (check_list_size(expectedNumOfFreeBlks) == 0)
f0111a85:	83 ec 0c             	sub    $0xc,%esp
f0111a88:	ff 75 c0             	pushl  -0x40(%ebp)
f0111a8b:	e8 20 e0 ff ff       	call   f010fab0 <check_list_size>
f0111a90:	83 c4 10             	add    $0x10,%esp
f0111a93:	85 c0                	test   %eax,%eax
f0111a95:	75 17                	jne    f0111aae <test_free_block_BF+0x42e>
	{
		panic("3.2 Failed");
f0111a97:	83 ec 04             	sub    $0x4,%esp
f0111a9a:	68 5a a7 12 f0       	push   $0xf012a75a
f0111a9f:	68 f4 03 00 00       	push   $0x3f4
f0111aa4:	68 74 99 12 f0       	push   $0xf0129974
f0111aa9:	e8 6c e8 fe ff       	call   f010031a <_panic>
	}

	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f0111aae:	a1 60 16 5c f0       	mov    0xf05c1660,%eax
f0111ab3:	83 ec 0c             	sub    $0xc,%esp
f0111ab6:	50                   	push   %eax
f0111ab7:	e8 c1 18 01 00       	call   f012337d <free_block>
f0111abc:	83 c4 10             	add    $0x10,%esp
	if (check_block(startVAs[numOfAllocs*allocCntPerSize], startVAs[numOfAllocs*allocCntPerSize], remainSize, 0) == 0)
f0111abf:	8b 4d d0             	mov    -0x30(%ebp),%ecx
f0111ac2:	8b 15 60 16 5c f0    	mov    0xf05c1660,%edx
f0111ac8:	a1 60 16 5c f0       	mov    0xf05c1660,%eax
f0111acd:	6a 00                	push   $0x0
f0111acf:	51                   	push   %ecx
f0111ad0:	52                   	push   %edx
f0111ad1:	50                   	push   %eax
f0111ad2:	e8 51 df ff ff       	call   f010fa28 <check_block>
f0111ad7:	83 c4 10             	add    $0x10,%esp
f0111ada:	85 c0                	test   %eax,%eax
f0111adc:	75 17                	jne    f0111af5 <test_free_block_BF+0x475>
		panic("3.3 Failed");
f0111ade:	83 ec 04             	sub    $0x4,%esp
f0111ae1:	68 65 a7 12 f0       	push   $0xf012a765
f0111ae6:	68 fa 03 00 00       	push   $0x3fa
f0111aeb:	68 74 99 12 f0       	push   $0xf0129974
f0111af0:	e8 25 e8 fe ff       	call   f010031a <_panic>

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData;
f0111af5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111af8:	83 e8 08             	sub    $0x8,%eax
f0111afb:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0111afe:	83 ec 08             	sub    $0x8,%esp
f0111b01:	6a 03                	push   $0x3
f0111b03:	ff 75 cc             	pushl  -0x34(%ebp)
f0111b06:	e8 cf 13 01 00       	call   f0122eda <alloc_block>
f0111b0b:	83 c4 10             	add    $0x10,%esp
f0111b0e:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected_va = (curVA + sizeOfMetaData/2);
f0111b11:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111b14:	83 c0 04             	add    $0x4,%eax
f0111b17:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	if(check_block(va, expected_va, remainSize, 1) == 0)
f0111b1a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111b1d:	6a 01                	push   $0x1
f0111b1f:	50                   	push   %eax
f0111b20:	ff 75 c4             	pushl  -0x3c(%ebp)
f0111b23:	ff 75 c8             	pushl  -0x38(%ebp)
f0111b26:	e8 fd de ff ff       	call   f010fa28 <check_block>
f0111b2b:	83 c4 10             	add    $0x10,%esp
f0111b2e:	85 c0                	test   %eax,%eax
f0111b30:	75 17                	jne    f0111b49 <test_free_block_BF+0x4c9>
		panic("3.4 Failed");
f0111b32:	83 ec 04             	sub    $0x4,%esp
f0111b35:	68 70 a7 12 f0       	push   $0xf012a770
f0111b3a:	68 02 04 00 00       	push   $0x402
f0111b3f:	68 74 99 12 f0       	push   $0xf0129974
f0111b44:	e8 d1 e7 fe ff       	call   f010031a <_panic>

	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f0111b49:	a1 5c 16 5c f0       	mov    0xf05c165c,%eax
f0111b4e:	83 ec 0c             	sub    $0xc,%esp
f0111b51:	50                   	push   %eax
f0111b52:	e8 26 18 01 00       	call   f012337d <free_block>
f0111b57:	83 c4 10             	add    $0x10,%esp
	if (check_block(startVAs[numOfAllocs*allocCntPerSize-1], startVAs[numOfAllocs*allocCntPerSize-1], allocSizes[numOfAllocs-1], 0) == 0)
f0111b5a:	8b 0d d0 dd 17 f0    	mov    0xf017ddd0,%ecx
f0111b60:	8b 15 5c 16 5c f0    	mov    0xf05c165c,%edx
f0111b66:	a1 5c 16 5c f0       	mov    0xf05c165c,%eax
f0111b6b:	6a 00                	push   $0x0
f0111b6d:	51                   	push   %ecx
f0111b6e:	52                   	push   %edx
f0111b6f:	50                   	push   %eax
f0111b70:	e8 b3 de ff ff       	call   f010fa28 <check_block>
f0111b75:	83 c4 10             	add    $0x10,%esp
f0111b78:	85 c0                	test   %eax,%eax
f0111b7a:	75 17                	jne    f0111b93 <test_free_block_BF+0x513>
		panic("3.5 Failed");
f0111b7c:	83 ec 04             	sub    $0x4,%esp
f0111b7f:	68 7b a7 12 f0       	push   $0xf012a77b
f0111b84:	68 07 04 00 00       	push   $0x407
f0111b89:	68 74 99 12 f0       	push   $0xf0129974
f0111b8e:	e8 87 e7 fe ff       	call   f010031a <_panic>

	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData;
f0111b93:	a1 b8 dd 17 f0       	mov    0xf017ddb8,%eax
f0111b98:	83 e8 08             	sub    $0x8,%eax
f0111b9b:	89 45 cc             	mov    %eax,-0x34(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0111b9e:	83 ec 08             	sub    $0x8,%esp
f0111ba1:	6a 03                	push   $0x3
f0111ba3:	ff 75 cc             	pushl  -0x34(%ebp)
f0111ba6:	e8 2f 13 01 00       	call   f0122eda <alloc_block>
f0111bab:	83 c4 10             	add    $0x10,%esp
f0111bae:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected_va = (void*)(KERNEL_HEAP_START + 2*sizeof(int));
f0111bb1:	c7 45 c4 08 00 00 f6 	movl   $0xf6000008,-0x3c(%ebp)
	if(check_block(va, expected_va, allocSizes[0], 1) == 0)
f0111bb8:	a1 b8 dd 17 f0       	mov    0xf017ddb8,%eax
f0111bbd:	6a 01                	push   $0x1
f0111bbf:	50                   	push   %eax
f0111bc0:	ff 75 c4             	pushl  -0x3c(%ebp)
f0111bc3:	ff 75 c8             	pushl  -0x38(%ebp)
f0111bc6:	e8 5d de ff ff       	call   f010fa28 <check_block>
f0111bcb:	83 c4 10             	add    $0x10,%esp
f0111bce:	85 c0                	test   %eax,%eax
f0111bd0:	75 17                	jne    f0111be9 <test_free_block_BF+0x569>
		panic("3.6 Failed");
f0111bd2:	83 ec 04             	sub    $0x4,%esp
f0111bd5:	68 86 a7 12 f0       	push   $0xf012a786
f0111bda:	68 0f 04 00 00       	push   $0x40f
f0111bdf:	68 74 99 12 f0       	push   $0xf0129974
f0111be4:	e8 31 e7 fe ff       	call   f010031a <_panic>

	//Free 2nd block
	free_block(startVAs[1]);
f0111be9:	a1 84 00 5c f0       	mov    0xf05c0084,%eax
f0111bee:	83 ec 0c             	sub    $0xc,%esp
f0111bf1:	50                   	push   %eax
f0111bf2:	e8 86 17 01 00       	call   f012337d <free_block>
f0111bf7:	83 c4 10             	add    $0x10,%esp
	if (check_block(startVAs[1], startVAs[1], allocSizes[0], 0) == 0)
f0111bfa:	8b 0d b8 dd 17 f0    	mov    0xf017ddb8,%ecx
f0111c00:	8b 15 84 00 5c f0    	mov    0xf05c0084,%edx
f0111c06:	a1 84 00 5c f0       	mov    0xf05c0084,%eax
f0111c0b:	6a 00                	push   $0x0
f0111c0d:	51                   	push   %ecx
f0111c0e:	52                   	push   %edx
f0111c0f:	50                   	push   %eax
f0111c10:	e8 13 de ff ff       	call   f010fa28 <check_block>
f0111c15:	83 c4 10             	add    $0x10,%esp
f0111c18:	85 c0                	test   %eax,%eax
f0111c1a:	75 17                	jne    f0111c33 <test_free_block_BF+0x5b3>
		panic("3.7 Failed");
f0111c1c:	83 ec 04             	sub    $0x4,%esp
f0111c1f:	68 91 a7 12 f0       	push   $0xf012a791
f0111c24:	68 14 04 00 00       	push   $0x414
f0111c29:	68 74 99 12 f0       	push   $0xf0129974
f0111c2e:	e8 e7 e6 fe ff       	call   f010031a <_panic>

	expectedNumOfFreeBlks++ ;
f0111c33:	ff 45 c0             	incl   -0x40(%ebp)
	if (check_list_size(expectedNumOfFreeBlks) == 0)
f0111c36:	83 ec 0c             	sub    $0xc,%esp
f0111c39:	ff 75 c0             	pushl  -0x40(%ebp)
f0111c3c:	e8 6f de ff ff       	call   f010fab0 <check_list_size>
f0111c41:	83 c4 10             	add    $0x10,%esp
f0111c44:	85 c0                	test   %eax,%eax
f0111c46:	75 17                	jne    f0111c5f <test_free_block_BF+0x5df>
	{
		panic("3.8 Failed");
f0111c48:	83 ec 04             	sub    $0x4,%esp
f0111c4b:	68 9c a7 12 f0       	push   $0xf012a79c
f0111c50:	68 19 04 00 00       	push   $0x419
f0111c55:	68 74 99 12 f0       	push   $0xf0129974
f0111c5a:	e8 bb e6 fe ff       	call   f010031a <_panic>
	}

	uint32 block_size, block_status;
	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f0111c5f:	83 ec 0c             	sub    $0xc,%esp
f0111c62:	68 70 a3 12 f0       	push   $0xf012a370
f0111c67:	e8 00 f3 fe ff       	call   f0100f6c <cprintf>
f0111c6c:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f0111c6f:	83 ec 0c             	sub    $0xc,%esp
f0111c72:	68 ac a3 12 f0       	push   $0xf012a3ac
f0111c77:	e8 f0 f2 fe ff       	call   f0100f6c <cprintf>
f0111c7c:	83 c4 10             	add    $0x10,%esp
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f0111c7f:	c7 45 bc 78 05 00 00 	movl   $0x578,-0x44(%ebp)
	free_block(startVAs[blockIndex]);
f0111c86:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111c89:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0111c90:	83 ec 0c             	sub    $0xc,%esp
f0111c93:	50                   	push   %eax
f0111c94:	e8 e4 16 01 00       	call   f012337d <free_block>
f0111c99:	83 c4 10             	add    $0x10,%esp
	expected_size = remainSize + allocSizes[numOfAllocs-1];
f0111c9c:	8b 15 d0 dd 17 f0    	mov    0xf017ddd0,%edx
f0111ca2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111ca5:	01 d0                	add    %edx,%eax
f0111ca7:	89 45 b8             	mov    %eax,-0x48(%ebp)
	if (check_block(startVAs[blockIndex-1], startVAs[blockIndex-1], expected_size, 0) == 0)
f0111caa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111cad:	48                   	dec    %eax
f0111cae:	8b 14 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%edx
f0111cb5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111cb8:	48                   	dec    %eax
f0111cb9:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0111cc0:	6a 00                	push   $0x0
f0111cc2:	ff 75 b8             	pushl  -0x48(%ebp)
f0111cc5:	52                   	push   %edx
f0111cc6:	50                   	push   %eax
f0111cc7:	e8 5c dd ff ff       	call   f010fa28 <check_block>
f0111ccc:	83 c4 10             	add    $0x10,%esp
f0111ccf:	85 c0                	test   %eax,%eax
f0111cd1:	75 17                	jne    f0111cea <test_free_block_BF+0x66a>
	{
		panic("4.1 Failed");
f0111cd3:	83 ec 04             	sub    $0x4,%esp
f0111cd6:	68 a7 a7 12 f0       	push   $0xf012a7a7
f0111cdb:	68 27 04 00 00       	push   $0x427
f0111ce0:	68 74 99 12 f0       	push   $0xf0129974
f0111ce5:	e8 30 e6 fe ff       	call   f010031a <_panic>
	}
	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f0111cea:	83 ec 0c             	sub    $0xc,%esp
f0111ced:	68 c1 a3 12 f0       	push   $0xf012a3c1
f0111cf2:	e8 75 f2 fe ff       	call   f0100f6c <cprintf>
f0111cf7:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f0111cfa:	c7 45 bc 91 01 00 00 	movl   $0x191,-0x44(%ebp)
	free_block(startVAs[blockIndex]);
f0111d01:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111d04:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0111d0b:	83 ec 0c             	sub    $0xc,%esp
f0111d0e:	50                   	push   %eax
f0111d0f:	e8 69 16 01 00       	call   f012337d <free_block>
f0111d14:	83 c4 10             	add    $0x10,%esp
	expected_size = allocSizes[2]+allocSizes[2];
f0111d17:	8b 15 c0 dd 17 f0    	mov    0xf017ddc0,%edx
f0111d1d:	a1 c0 dd 17 f0       	mov    0xf017ddc0,%eax
f0111d22:	01 d0                	add    %edx,%eax
f0111d24:	89 45 b8             	mov    %eax,-0x48(%ebp)
	if (check_block(startVAs[blockIndex-1], startVAs[blockIndex-1], expected_size, 0) == 0)
f0111d27:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111d2a:	48                   	dec    %eax
f0111d2b:	8b 14 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%edx
f0111d32:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111d35:	48                   	dec    %eax
f0111d36:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0111d3d:	6a 00                	push   $0x0
f0111d3f:	ff 75 b8             	pushl  -0x48(%ebp)
f0111d42:	52                   	push   %edx
f0111d43:	50                   	push   %eax
f0111d44:	e8 df dc ff ff       	call   f010fa28 <check_block>
f0111d49:	83 c4 10             	add    $0x10,%esp
f0111d4c:	85 c0                	test   %eax,%eax
f0111d4e:	75 17                	jne    f0111d67 <test_free_block_BF+0x6e7>
	{
		panic("4.2 Failed");
f0111d50:	83 ec 04             	sub    $0x4,%esp
f0111d53:	68 b2 a7 12 f0       	push   $0xf012a7b2
f0111d58:	68 31 04 00 00       	push   $0x431
f0111d5d:	68 74 99 12 f0       	push   $0xf0129974
f0111d62:	e8 b3 e5 fe ff       	call   f010031a <_panic>
	}
	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f0111d67:	83 ec 0c             	sub    $0xc,%esp
f0111d6a:	68 dc a3 12 f0       	push   $0xf012a3dc
f0111d6f:	e8 f8 f1 fe ff       	call   f0100f6c <cprintf>
f0111d74:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f0111d77:	83 ec 0c             	sub    $0xc,%esp
f0111d7a:	68 14 a4 12 f0       	push   $0xf012a414
f0111d7f:	e8 e8 f1 fe ff       	call   f0100f6c <cprintf>
f0111d84:	83 c4 10             	add    $0x10,%esp
	blockIndex = 0 ;
f0111d87:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	free_block(startVAs[blockIndex]);
f0111d8e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111d91:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0111d98:	83 ec 0c             	sub    $0xc,%esp
f0111d9b:	50                   	push   %eax
f0111d9c:	e8 dc 15 01 00       	call   f012337d <free_block>
f0111da1:	83 c4 10             	add    $0x10,%esp
	expected_size = allocSizes[0]+allocSizes[0];
f0111da4:	8b 15 b8 dd 17 f0    	mov    0xf017ddb8,%edx
f0111daa:	a1 b8 dd 17 f0       	mov    0xf017ddb8,%eax
f0111daf:	01 d0                	add    %edx,%eax
f0111db1:	89 45 b8             	mov    %eax,-0x48(%ebp)
	if (check_block(startVAs[blockIndex], startVAs[blockIndex], expected_size, 0) == 0)
f0111db4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111db7:	8b 14 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%edx
f0111dbe:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111dc1:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0111dc8:	6a 00                	push   $0x0
f0111dca:	ff 75 b8             	pushl  -0x48(%ebp)
f0111dcd:	52                   	push   %edx
f0111dce:	50                   	push   %eax
f0111dcf:	e8 54 dc ff ff       	call   f010fa28 <check_block>
f0111dd4:	83 c4 10             	add    $0x10,%esp
f0111dd7:	85 c0                	test   %eax,%eax
f0111dd9:	75 17                	jne    f0111df2 <test_free_block_BF+0x772>
	{
		panic("5.1 Failed");
f0111ddb:	83 ec 04             	sub    $0x4,%esp
f0111dde:	68 bd a7 12 f0       	push   $0xf012a7bd
f0111de3:	68 3c 04 00 00       	push   $0x43c
f0111de8:	68 74 99 12 f0       	push   $0xf0129974
f0111ded:	e8 28 e5 fe ff       	call   f010031a <_panic>
	}
	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f0111df2:	83 ec 0c             	sub    $0xc,%esp
f0111df5:	68 29 a4 12 f0       	push   $0xf012a429
f0111dfa:	e8 6d f1 fe ff       	call   f0100f6c <cprintf>
f0111dff:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f0111e02:	c7 45 bc c7 00 00 00 	movl   $0xc7,-0x44(%ebp)
	free_block(startVAs[blockIndex]);
f0111e09:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111e0c:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0111e13:	83 ec 0c             	sub    $0xc,%esp
f0111e16:	50                   	push   %eax
f0111e17:	e8 61 15 01 00       	call   f012337d <free_block>
f0111e1c:	83 c4 10             	add    $0x10,%esp
	expected_size = allocSizes[0]+allocSizes[1];
f0111e1f:	8b 15 b8 dd 17 f0    	mov    0xf017ddb8,%edx
f0111e25:	a1 bc dd 17 f0       	mov    0xf017ddbc,%eax
f0111e2a:	01 d0                	add    %edx,%eax
f0111e2c:	89 45 b8             	mov    %eax,-0x48(%ebp)
	if (check_block(startVAs[blockIndex], startVAs[blockIndex], expected_size, 0) == 0)
f0111e2f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111e32:	8b 14 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%edx
f0111e39:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111e3c:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0111e43:	6a 00                	push   $0x0
f0111e45:	ff 75 b8             	pushl  -0x48(%ebp)
f0111e48:	52                   	push   %edx
f0111e49:	50                   	push   %eax
f0111e4a:	e8 d9 db ff ff       	call   f010fa28 <check_block>
f0111e4f:	83 c4 10             	add    $0x10,%esp
f0111e52:	85 c0                	test   %eax,%eax
f0111e54:	75 17                	jne    f0111e6d <test_free_block_BF+0x7ed>
	{
		panic("5.2 Failed");
f0111e56:	83 ec 04             	sub    $0x4,%esp
f0111e59:	68 c8 a7 12 f0       	push   $0xf012a7c8
f0111e5e:	68 46 04 00 00       	push   $0x446
f0111e63:	68 74 99 12 f0       	push   $0xf0129974
f0111e68:	e8 ad e4 fe ff       	call   f010031a <_panic>
	}
	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f0111e6d:	83 ec 0c             	sub    $0xc,%esp
f0111e70:	68 44 a4 12 f0       	push   $0xf012a444
f0111e75:	e8 f2 f0 fe ff       	call   f0100f6c <cprintf>
f0111e7a:	83 c4 10             	add    $0x10,%esp
	blockIndex = 4*allocCntPerSize - 2 ;
f0111e7d:	c7 45 bc 1e 03 00 00 	movl   $0x31e,-0x44(%ebp)
	free_block(startVAs[blockIndex]);
f0111e84:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111e87:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0111e8e:	83 ec 0c             	sub    $0xc,%esp
f0111e91:	50                   	push   %eax
f0111e92:	e8 e6 14 01 00       	call   f012337d <free_block>
f0111e97:	83 c4 10             	add    $0x10,%esp

	blockIndex = 4*allocCntPerSize - 1 ;
f0111e9a:	c7 45 bc 1f 03 00 00 	movl   $0x31f,-0x44(%ebp)
	free_block(startVAs[blockIndex]);
f0111ea1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111ea4:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0111eab:	83 ec 0c             	sub    $0xc,%esp
f0111eae:	50                   	push   %eax
f0111eaf:	e8 c9 14 01 00       	call   f012337d <free_block>
f0111eb4:	83 c4 10             	add    $0x10,%esp
	expected_size = allocSizes[3]+allocSizes[3]+allocSizes[4];
f0111eb7:	8b 15 c4 dd 17 f0    	mov    0xf017ddc4,%edx
f0111ebd:	a1 c4 dd 17 f0       	mov    0xf017ddc4,%eax
f0111ec2:	01 c2                	add    %eax,%edx
f0111ec4:	a1 c8 dd 17 f0       	mov    0xf017ddc8,%eax
f0111ec9:	01 d0                	add    %edx,%eax
f0111ecb:	89 45 b8             	mov    %eax,-0x48(%ebp)
	if (check_block(startVAs[blockIndex-1], startVAs[blockIndex-1], expected_size, 0) == 0)
f0111ece:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111ed1:	48                   	dec    %eax
f0111ed2:	8b 14 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%edx
f0111ed9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111edc:	48                   	dec    %eax
f0111edd:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0111ee4:	6a 00                	push   $0x0
f0111ee6:	ff 75 b8             	pushl  -0x48(%ebp)
f0111ee9:	52                   	push   %edx
f0111eea:	50                   	push   %eax
f0111eeb:	e8 38 db ff ff       	call   f010fa28 <check_block>
f0111ef0:	83 c4 10             	add    $0x10,%esp
f0111ef3:	85 c0                	test   %eax,%eax
f0111ef5:	75 17                	jne    f0111f0e <test_free_block_BF+0x88e>
	{
		panic("6.1 Failed");
f0111ef7:	83 ec 04             	sub    $0x4,%esp
f0111efa:	68 d3 a7 12 f0       	push   $0xf012a7d3
f0111eff:	68 53 04 00 00       	push   $0x453
f0111f04:	68 74 99 12 f0       	push   $0xf0129974
f0111f09:	e8 0c e4 fe ff       	call   f010031a <_panic>
	}
	if (check_list_size(expectedNumOfFreeBlks) == 0)
f0111f0e:	83 ec 0c             	sub    $0xc,%esp
f0111f11:	ff 75 c0             	pushl  -0x40(%ebp)
f0111f14:	e8 97 db ff ff       	call   f010fab0 <check_list_size>
f0111f19:	83 c4 10             	add    $0x10,%esp
f0111f1c:	85 c0                	test   %eax,%eax
f0111f1e:	75 17                	jne    f0111f37 <test_free_block_BF+0x8b7>
	{
		panic("6.2 Failed");
f0111f20:	83 ec 04             	sub    $0x4,%esp
f0111f23:	68 de a7 12 f0       	push   $0xf012a7de
f0111f28:	68 57 04 00 00       	push   $0x457
f0111f2d:	68 74 99 12 f0       	push   $0xf0129974
f0111f32:	e8 e3 e3 fe ff       	call   f010031a <_panic>
	}
	//====================================================================//
	/*Allocate After Free Scenarios */
	void* expected = NULL;
f0111f37:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	{
		//Consume 1st 7KB Block
		actualSize = 7*kilo - sizeOfMetaData ;
f0111f3e:	c7 45 cc f8 1b 00 00 	movl   $0x1bf8,-0x34(%ebp)
		expected_size = ROUNDUP(actualSize + sizeOfMetaData,2) ;
f0111f45:	c7 45 b0 02 00 00 00 	movl   $0x2,-0x50(%ebp)
f0111f4c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0111f4f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0111f52:	01 d0                	add    %edx,%eax
f0111f54:	83 c0 07             	add    $0x7,%eax
f0111f57:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0111f5a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111f5d:	ba 00 00 00 00       	mov    $0x0,%edx
f0111f62:	f7 75 b0             	divl   -0x50(%ebp)
f0111f65:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111f68:	29 d0                	sub    %edx,%eax
f0111f6a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		va = alloc_block(actualSize, DA_BF);
f0111f6d:	83 ec 08             	sub    $0x8,%esp
f0111f70:	6a 03                	push   $0x3
f0111f72:	ff 75 cc             	pushl  -0x34(%ebp)
f0111f75:	e8 60 0f 01 00       	call   f0122eda <alloc_block>
f0111f7a:	83 c4 10             	add    $0x10,%esp
f0111f7d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		//Check returned va
		expected = (void*)(startVAs[6*allocCntPerSize]);
f0111f80:	a1 40 13 5c f0       	mov    0xf05c1340,%eax
f0111f85:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		if (check_block(va, expected, expected_size, 1) == 0)
f0111f88:	6a 01                	push   $0x1
f0111f8a:	ff 75 b8             	pushl  -0x48(%ebp)
f0111f8d:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111f90:	ff 75 c8             	pushl  -0x38(%ebp)
f0111f93:	e8 90 da ff ff       	call   f010fa28 <check_block>
f0111f98:	83 c4 10             	add    $0x10,%esp
f0111f9b:	85 c0                	test   %eax,%eax
f0111f9d:	75 17                	jne    f0111fb6 <test_free_block_BF+0x936>
		{
			panic("6.3 Failed");
f0111f9f:	83 ec 04             	sub    $0x4,%esp
f0111fa2:	68 e9 a7 12 f0       	push   $0xf012a7e9
f0111fa7:	68 65 04 00 00       	push   $0x465
f0111fac:	68 74 99 12 f0       	push   $0xf0129974
f0111fb1:	e8 64 e3 fe ff       	call   f010031a <_panic>
		}
		expectedNumOfFreeBlks--;
f0111fb6:	ff 4d c0             	decl   -0x40(%ebp)
	}

	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f0111fb9:	83 ec 0c             	sub    $0xc,%esp
f0111fbc:	68 84 a4 12 f0       	push   $0xf012a484
f0111fc1:	e8 a6 ef fe ff       	call   f0100f6c <cprintf>
f0111fc6:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with PREV\n\n") ;
f0111fc9:	83 ec 0c             	sub    $0xc,%esp
f0111fcc:	68 f4 a7 12 f0       	push   $0xf012a7f4
f0111fd1:	e8 96 ef fe ff       	call   f0100f6c <cprintf>
f0111fd6:	83 c4 10             	add    $0x10,%esp
	actualSize = 2*kilo - sizeOfMetaData;
f0111fd9:	c7 45 cc f8 07 00 00 	movl   $0x7f8,-0x34(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData,2) ;
f0111fe0:	c7 45 a8 02 00 00 00 	movl   $0x2,-0x58(%ebp)
f0111fe7:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0111fea:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111fed:	01 d0                	add    %edx,%eax
f0111fef:	83 c0 07             	add    $0x7,%eax
f0111ff2:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0111ff5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111ff8:	ba 00 00 00 00       	mov    $0x0,%edx
f0111ffd:	f7 75 a8             	divl   -0x58(%ebp)
f0112000:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112003:	29 d0                	sub    %edx,%eax
f0112005:	89 45 b8             	mov    %eax,-0x48(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0112008:	83 ec 08             	sub    $0x8,%esp
f011200b:	6a 03                	push   $0x3
f011200d:	ff 75 cc             	pushl  -0x34(%ebp)
f0112010:	e8 c5 0e 01 00       	call   f0122eda <alloc_block>
f0112015:	83 c4 10             	add    $0x10,%esp
f0112018:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f011201b:	a1 c0 06 5c f0       	mov    0xf05c06c0,%eax
f0112020:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f0112023:	6a 01                	push   $0x1
f0112025:	ff 75 b8             	pushl  -0x48(%ebp)
f0112028:	ff 75 b4             	pushl  -0x4c(%ebp)
f011202b:	ff 75 c8             	pushl  -0x38(%ebp)
f011202e:	e8 f5 d9 ff ff       	call   f010fa28 <check_block>
f0112033:	83 c4 10             	add    $0x10,%esp
f0112036:	85 c0                	test   %eax,%eax
f0112038:	75 17                	jne    f0112051 <test_free_block_BF+0x9d1>
	{
		panic("7.1 Failed");
f011203a:	83 ec 04             	sub    $0x4,%esp
f011203d:	68 1a a8 12 f0       	push   $0xf012a81a
f0112042:	68 74 04 00 00       	push   $0x474
f0112047:	68 74 99 12 f0       	push   $0xf0129974
f011204c:	e8 c9 e2 fe ff       	call   f010031a <_panic>
	}

	expectedNumOfFreeBlks--;
f0112051:	ff 4d c0             	decl   -0x40(%ebp)

	actualSize = 8*kilo;
f0112054:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData,2) ;
f011205b:	c7 45 a0 02 00 00 00 	movl   $0x2,-0x60(%ebp)
f0112062:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0112065:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112068:	01 d0                	add    %edx,%eax
f011206a:	83 c0 07             	add    $0x7,%eax
f011206d:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0112070:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112073:	ba 00 00 00 00       	mov    $0x0,%edx
f0112078:	f7 75 a0             	divl   -0x60(%ebp)
f011207b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011207e:	29 d0                	sub    %edx,%eax
f0112080:	89 45 b8             	mov    %eax,-0x48(%ebp)
	va = alloc_block(actualSize, DA_BF);
f0112083:	83 ec 08             	sub    $0x8,%esp
f0112086:	6a 03                	push   $0x3
f0112088:	ff 75 cc             	pushl  -0x34(%ebp)
f011208b:	e8 4a 0e 01 00       	call   f0122eda <alloc_block>
f0112090:	83 c4 10             	add    $0x10,%esp
f0112093:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f0112096:	a1 5c 16 5c f0       	mov    0xf05c165c,%eax
f011209b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f011209e:	6a 01                	push   $0x1
f01120a0:	ff 75 b8             	pushl  -0x48(%ebp)
f01120a3:	ff 75 b4             	pushl  -0x4c(%ebp)
f01120a6:	ff 75 c8             	pushl  -0x38(%ebp)
f01120a9:	e8 7a d9 ff ff       	call   f010fa28 <check_block>
f01120ae:	83 c4 10             	add    $0x10,%esp
f01120b1:	85 c0                	test   %eax,%eax
f01120b3:	75 17                	jne    f01120cc <test_free_block_BF+0xa4c>
	{
		panic("7.2 Failed");
f01120b5:	83 ec 04             	sub    $0x4,%esp
f01120b8:	68 25 a8 12 f0       	push   $0xf012a825
f01120bd:	68 80 04 00 00       	push   $0x480
f01120c2:	68 74 99 12 f0       	push   $0xf0129974
f01120c7:	e8 4e e2 fe ff       	call   f010031a <_panic>
	}

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f01120cc:	83 ec 0c             	sub    $0xc,%esp
f01120cf:	68 68 a5 12 f0       	push   $0xf012a568
f01120d4:	e8 93 ee fe ff       	call   f0100f6c <cprintf>
f01120d9:	83 c4 10             	add    $0x10,%esp
	actualSize = 2*kilo + 1;
f01120dc:	c7 45 cc 01 08 00 00 	movl   $0x801,-0x34(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData,2) ;
f01120e3:	c7 45 98 02 00 00 00 	movl   $0x2,-0x68(%ebp)
f01120ea:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01120ed:	8b 45 98             	mov    -0x68(%ebp),%eax
f01120f0:	01 d0                	add    %edx,%eax
f01120f2:	83 c0 07             	add    $0x7,%eax
f01120f5:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01120f8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01120fb:	ba 00 00 00 00       	mov    $0x0,%edx
f0112100:	f7 75 98             	divl   -0x68(%ebp)
f0112103:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112106:	29 d0                	sub    %edx,%eax
f0112108:	89 45 b8             	mov    %eax,-0x48(%ebp)
	va = alloc_block(actualSize, DA_BF);
f011210b:	83 ec 08             	sub    $0x8,%esp
f011210e:	6a 03                	push   $0x3
f0112110:	ff 75 cc             	pushl  -0x34(%ebp)
f0112113:	e8 c2 0d 01 00       	call   f0122eda <alloc_block>
f0112118:	83 c4 10             	add    $0x10,%esp
f011211b:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f011211e:	a1 f8 0c 5c f0       	mov    0xf05c0cf8,%eax
f0112123:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f0112126:	6a 01                	push   $0x1
f0112128:	ff 75 b8             	pushl  -0x48(%ebp)
f011212b:	ff 75 b4             	pushl  -0x4c(%ebp)
f011212e:	ff 75 c8             	pushl  -0x38(%ebp)
f0112131:	e8 f2 d8 ff ff       	call   f010fa28 <check_block>
f0112136:	83 c4 10             	add    $0x10,%esp
f0112139:	85 c0                	test   %eax,%eax
f011213b:	75 17                	jne    f0112154 <test_free_block_BF+0xad4>
	{
		panic("7.3 Failed");
f011213d:	83 ec 04             	sub    $0x4,%esp
f0112140:	68 30 a8 12 f0       	push   $0xf012a830
f0112145:	68 8b 04 00 00       	push   $0x48b
f011214a:	68 74 99 12 f0       	push   $0xf0129974
f011214f:	e8 c6 e1 fe ff       	call   f010031a <_panic>
	}

	cprintf("		7.3: in block coalesces with NEXT [INTERNAL FRAGMENTATION]\n\n") ;
f0112154:	83 ec 0c             	sub    $0xc,%esp
f0112157:	68 3c a8 12 f0       	push   $0xf012a83c
f011215c:	e8 0b ee fe ff       	call   f0100f6c <cprintf>
f0112161:	83 c4 10             	add    $0x10,%esp
	actualSize = 4*kilo + 10;
f0112164:	c7 45 cc 0a 10 00 00 	movl   $0x100a,-0x34(%ebp)
	expected_size = allocSizes[0]+allocSizes[1]; //ROUNDUP(actualSize + sizeOfMetaData,2) ;
f011216b:	8b 15 b8 dd 17 f0    	mov    0xf017ddb8,%edx
f0112171:	a1 bc dd 17 f0       	mov    0xf017ddbc,%eax
f0112176:	01 d0                	add    %edx,%eax
f0112178:	89 45 b8             	mov    %eax,-0x48(%ebp)
	va = alloc_block(actualSize, DA_BF);
f011217b:	83 ec 08             	sub    $0x8,%esp
f011217e:	6a 03                	push   $0x3
f0112180:	ff 75 cc             	pushl  -0x34(%ebp)
f0112183:	e8 52 0d 01 00       	call   f0122eda <alloc_block>
f0112188:	83 c4 10             	add    $0x10,%esp
f011218b:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f011218e:	a1 9c 03 5c f0       	mov    0xf05c039c,%eax
f0112193:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f0112196:	6a 01                	push   $0x1
f0112198:	ff 75 b8             	pushl  -0x48(%ebp)
f011219b:	ff 75 b4             	pushl  -0x4c(%ebp)
f011219e:	ff 75 c8             	pushl  -0x38(%ebp)
f01121a1:	e8 82 d8 ff ff       	call   f010fa28 <check_block>
f01121a6:	83 c4 10             	add    $0x10,%esp
f01121a9:	85 c0                	test   %eax,%eax
f01121ab:	75 17                	jne    f01121c4 <test_free_block_BF+0xb44>
	{
		panic("7.4 Failed");
f01121ad:	83 ec 04             	sub    $0x4,%esp
f01121b0:	68 7b a8 12 f0       	push   $0xf012a87b
f01121b5:	68 96 04 00 00       	push   $0x496
f01121ba:	68 74 99 12 f0       	push   $0xf0129974
f01121bf:	e8 56 e1 fe ff       	call   f010031a <_panic>
	}
	expectedNumOfFreeBlks--;
f01121c4:	ff 4d c0             	decl   -0x40(%ebp)

	actualSize = 5*kilo - sizeOfMetaData;
f01121c7:	c7 45 cc f8 13 00 00 	movl   $0x13f8,-0x34(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData,2) ;
f01121ce:	c7 45 90 02 00 00 00 	movl   $0x2,-0x70(%ebp)
f01121d5:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01121d8:	8b 45 90             	mov    -0x70(%ebp),%eax
f01121db:	01 d0                	add    %edx,%eax
f01121dd:	83 c0 07             	add    $0x7,%eax
f01121e0:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01121e3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01121e6:	ba 00 00 00 00       	mov    $0x0,%edx
f01121eb:	f7 75 90             	divl   -0x70(%ebp)
f01121ee:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01121f1:	29 d0                	sub    %edx,%eax
f01121f3:	89 45 b8             	mov    %eax,-0x48(%ebp)
	va = alloc_block(actualSize, DA_BF);
f01121f6:	83 ec 08             	sub    $0x8,%esp
f01121f9:	6a 03                	push   $0x3
f01121fb:	ff 75 cc             	pushl  -0x34(%ebp)
f01121fe:	e8 d7 0c 01 00       	call   f0122eda <alloc_block>
f0112203:	83 c4 10             	add    $0x10,%esp
f0112206:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + sizeOfMetaData);
f0112209:	c7 45 b4 08 00 00 f6 	movl   $0xf6000008,-0x4c(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f0112210:	6a 01                	push   $0x1
f0112212:	ff 75 b8             	pushl  -0x48(%ebp)
f0112215:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112218:	ff 75 c8             	pushl  -0x38(%ebp)
f011221b:	e8 08 d8 ff ff       	call   f010fa28 <check_block>
f0112220:	83 c4 10             	add    $0x10,%esp
f0112223:	85 c0                	test   %eax,%eax
f0112225:	75 17                	jne    f011223e <test_free_block_BF+0xbbe>
	{
		panic("7.5 Failed");
f0112227:	83 ec 04             	sub    $0x4,%esp
f011222a:	68 86 a8 12 f0       	push   $0xf012a886
f011222f:	68 a1 04 00 00       	push   $0x4a1
f0112234:	68 74 99 12 f0       	push   $0xf0129974
f0112239:	e8 dc e0 fe ff       	call   f010031a <_panic>
	}

	actualSize = 3*kilo - sizeOfMetaData;
f011223e:	c7 45 cc f8 0b 00 00 	movl   $0xbf8,-0x34(%ebp)
	expected_size = ROUNDUP(actualSize + sizeOfMetaData,2) ;
f0112245:	c7 45 88 02 00 00 00 	movl   $0x2,-0x78(%ebp)
f011224c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011224f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0112252:	01 d0                	add    %edx,%eax
f0112254:	83 c0 07             	add    $0x7,%eax
f0112257:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011225a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011225d:	ba 00 00 00 00       	mov    $0x0,%edx
f0112262:	f7 75 88             	divl   -0x78(%ebp)
f0112265:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0112268:	29 d0                	sub    %edx,%eax
f011226a:	89 45 b8             	mov    %eax,-0x48(%ebp)
	va = alloc_block(actualSize, DA_BF);
f011226d:	83 ec 08             	sub    $0x8,%esp
f0112270:	6a 03                	push   $0x3
f0112272:	ff 75 cc             	pushl  -0x34(%ebp)
f0112275:	e8 60 0c 01 00       	call   f0122eda <alloc_block>
f011227a:	83 c4 10             	add    $0x10,%esp
f011227d:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + 5*kilo + sizeOfMetaData);
f0112280:	c7 45 b4 08 14 00 f6 	movl   $0xf6001408,-0x4c(%ebp)
	if (check_block(va, expected, expected_size, 1) == 0)
f0112287:	6a 01                	push   $0x1
f0112289:	ff 75 b8             	pushl  -0x48(%ebp)
f011228c:	ff 75 b4             	pushl  -0x4c(%ebp)
f011228f:	ff 75 c8             	pushl  -0x38(%ebp)
f0112292:	e8 91 d7 ff ff       	call   f010fa28 <check_block>
f0112297:	83 c4 10             	add    $0x10,%esp
f011229a:	85 c0                	test   %eax,%eax
f011229c:	75 17                	jne    f01122b5 <test_free_block_BF+0xc35>
	{
		panic("7.6 Failed");
f011229e:	83 ec 04             	sub    $0x4,%esp
f01122a1:	68 91 a8 12 f0       	push   $0xf012a891
f01122a6:	68 ab 04 00 00       	push   $0x4ab
f01122ab:	68 74 99 12 f0       	push   $0xf0129974
f01122b0:	e8 65 e0 fe ff       	call   f010031a <_panic>
	}
	expectedNumOfFreeBlks--;
f01122b5:	ff 4d c0             	decl   -0x40(%ebp)

	if (check_list_size(expectedNumOfFreeBlks) == 0)
f01122b8:	83 ec 0c             	sub    $0xc,%esp
f01122bb:	ff 75 c0             	pushl  -0x40(%ebp)
f01122be:	e8 ed d7 ff ff       	call   f010fab0 <check_list_size>
f01122c3:	83 c4 10             	add    $0x10,%esp
f01122c6:	85 c0                	test   %eax,%eax
f01122c8:	75 17                	jne    f01122e1 <test_free_block_BF+0xc61>
	{
		panic("7.7 Failed");
f01122ca:	83 ec 04             	sub    $0x4,%esp
f01122cd:	68 9c a8 12 f0       	push   $0xf012a89c
f01122d2:	68 b1 04 00 00       	push   $0x4b1
f01122d7:	68 74 99 12 f0       	push   $0xf0129974
f01122dc:	e8 39 e0 fe ff       	call   f010031a <_panic>
	}

	cprintf("Congratulations!! test free_block with BEST FIT completed successfully.\n");
f01122e1:	83 ec 0c             	sub    $0xc,%esp
f01122e4:	68 a8 a8 12 f0       	push   $0xf012a8a8
f01122e9:	e8 7e ec fe ff       	call   f0100f6c <cprintf>
f01122ee:	83 c4 10             	add    $0x10,%esp

}
f01122f1:	90                   	nop
f01122f2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01122f5:	c9                   	leave  
f01122f6:	c3                   	ret    

f01122f7 <test_free_block_NF>:

void test_free_block_NF()
{
f01122f7:	55                   	push   %ebp
f01122f8:	89 e5                	mov    %esp,%ebp
f01122fa:	83 ec 08             	sub    $0x8,%esp
	panic("not implemented");
f01122fd:	83 ec 04             	sub    $0x4,%esp
f0112300:	68 f1 a8 12 f0       	push   $0xf012a8f1
f0112305:	68 ba 04 00 00       	push   $0x4ba
f011230a:	68 74 99 12 f0       	push   $0xf0129974
f011230f:	e8 06 e0 fe ff       	call   f010031a <_panic>

f0112314 <test_realloc_block_FF>:
}

void test_realloc_block_FF()
{
f0112314:	55                   	push   %ebp
f0112315:	89 e5                	mov    %esp,%ebp
f0112317:	81 ec 98 00 00 00    	sub    $0x98,%esp
#endif

	//TODO: [PROJECT'24.MS1 - #09] [3] DYNAMIC ALLOCATOR - test_realloc_block_FF()
	//CHECK MISSING CASES AND TRY TO TEST THEM !

	cprintf("===================================================\n");
f011231d:	83 ec 0c             	sub    $0xc,%esp
f0112320:	68 04 a9 12 f0       	push   $0xf012a904
f0112325:	e8 42 ec fe ff       	call   f0100f6c <cprintf>
f011232a:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A PARTIAL TEST FOR REALLOC******\n") ;
f011232d:	83 ec 0c             	sub    $0xc,%esp
f0112330:	68 3c a9 12 f0       	push   $0xf012a93c
f0112335:	e8 32 ec fe ff       	call   f0100f6c <cprintf>
f011233a:	83 c4 10             	add    $0x10,%esp
	cprintf("You need to pick-up the missing tests and test them\n") ;
f011233d:	83 ec 0c             	sub    $0xc,%esp
f0112340:	68 74 a9 12 f0       	push   $0xf012a974
f0112345:	e8 22 ec fe ff       	call   f0100f6c <cprintf>
f011234a:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f011234d:	83 ec 0c             	sub    $0xc,%esp
f0112350:	68 04 a9 12 f0       	push   $0xf012a904
f0112355:	e8 12 ec fe ff       	call   f0100f6c <cprintf>
f011235a:	83 c4 10             	add    $0x10,%esp

	int eval = 0;
f011235d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;

	int initAllocatedSpace = 3*Mega;
f0112364:	c7 45 c8 00 00 30 00 	movl   $0x300000,-0x38(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f011236b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011236e:	83 ec 08             	sub    $0x8,%esp
f0112371:	50                   	push   %eax
f0112372:	68 00 00 00 f6       	push   $0xf6000000
f0112377:	e8 8b 0c 01 00       	call   f0123007 <initialize_dynamic_allocator>
f011237c:	83 c4 10             	add    $0x10,%esp
	void * va, *expectedVA ;
	//====================================================================//
	//[1] Test calling realloc with VA = NULL. It should call malloc
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("1: Test calling realloc with VA = NULL.[10%]\n\n") ;
f011237f:	83 ec 0c             	sub    $0xc,%esp
f0112382:	68 ac a9 12 f0       	push   $0xf012a9ac
f0112387:	e8 e0 eb fe ff       	call   f0100f6c <cprintf>
f011238c:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f011238f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	int totalSizes = 0;
f0112396:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f011239d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f01123a4:	eb 2a                	jmp    f01123d0 <test_realloc_block_FF+0xbc>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f01123a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01123a9:	8b 14 85 b8 dd 17 f0 	mov    -0xfe82248(,%eax,4),%edx
f01123b0:	89 d0                	mov    %edx,%eax
f01123b2:	c1 e0 02             	shl    $0x2,%eax
f01123b5:	01 d0                	add    %edx,%eax
f01123b7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01123be:	01 d0                	add    %edx,%eax
f01123c0:	c1 e0 03             	shl    $0x3,%eax
f01123c3:	89 c2                	mov    %eax,%edx
f01123c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01123c8:	01 d0                	add    %edx,%eax
f01123ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/* Try to allocate set of blocks with different sizes*/
	cprintf("1: Test calling realloc with VA = NULL.[10%]\n\n") ;
	is_correct = 1;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f01123cd:	ff 45 e8             	incl   -0x18(%ebp)
f01123d0:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f01123d4:	7e d0                	jle    f01123a6 <test_realloc_block_FF+0x92>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes - 2*sizeof(int) ; //exclude size of "DA Begin & End" blocks
f01123d6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01123d9:	2b 45 ec             	sub    -0x14(%ebp),%eax
f01123dc:	83 e8 08             	sub    $0x8,%eax
f01123df:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	if (remainSize <= 0)
f01123e2:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f01123e6:	7f 17                	jg     f01123ff <test_realloc_block_FF+0xeb>
		panic("test_realloc_block_FF is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f01123e8:	83 ec 04             	sub    $0x4,%esp
f01123eb:	68 dc a9 12 f0       	push   $0xf012a9dc
f01123f0:	68 e1 04 00 00       	push   $0x4e1
f01123f5:	68 74 99 12 f0       	push   $0xf0129974
f01123fa:	e8 1b df fe ff       	call   f010031a <_panic>

	int idx = 0;
f01123ff:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) /*BEG block*/ ;
f0112406:	c7 45 e0 04 00 00 f6 	movl   $0xf6000004,-0x20(%ebp)
	uint32 actualSize, expectedSize;
	for (int i = 0; i < numOfAllocs; ++i)
f011240d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0112414:	e9 2f 01 00 00       	jmp    f0112548 <test_realloc_block_FF+0x234>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0112419:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0112420:	e9 13 01 00 00       	jmp    f0112538 <test_realloc_block_FF+0x224>
		{
			actualSize = allocSizes[i] - sizeOfMetaData;
f0112425:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112428:	8b 04 85 b8 dd 17 f0 	mov    -0xfe82248(,%eax,4),%eax
f011242f:	83 e8 08             	sub    $0x8,%eax
f0112432:	89 45 c0             	mov    %eax,-0x40(%ebp)
			expectedSize = ROUNDUP(actualSize + sizeOfMetaData, 2);
f0112435:	c7 45 bc 02 00 00 00 	movl   $0x2,-0x44(%ebp)
f011243c:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011243f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112442:	01 d0                	add    %edx,%eax
f0112444:	83 c0 07             	add    $0x7,%eax
f0112447:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011244a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011244d:	ba 00 00 00 00       	mov    $0x0,%edx
f0112452:	f7 75 bc             	divl   -0x44(%ebp)
f0112455:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112458:	29 d0                	sub    %edx,%eax
f011245a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
			expectedVA = (curVA + sizeOfMetaData/2);
f011245d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0112460:	83 c0 04             	add    $0x4,%eax
f0112463:	89 45 b0             	mov    %eax,-0x50(%ebp)
			va = startVAs[idx] = realloc_block_FF(NULL, actualSize);
f0112466:	83 ec 08             	sub    $0x8,%esp
f0112469:	ff 75 c0             	pushl  -0x40(%ebp)
f011246c:	6a 00                	push   $0x0
f011246e:	e8 27 0f 01 00       	call   f012339a <realloc_block_FF>
f0112473:	83 c4 10             	add    $0x10,%esp
f0112476:	89 c2                	mov    %eax,%edx
f0112478:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011247b:	89 14 85 80 00 5c f0 	mov    %edx,-0xfa3ff80(,%eax,4)
f0112482:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112485:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f011248c:	89 45 ac             	mov    %eax,-0x54(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f011248f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112492:	d1 e8                	shr    %eax
f0112494:	89 c2                	mov    %eax,%edx
f0112496:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112499:	01 c2                	add    %eax,%edx
f011249b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011249e:	89 14 85 80 2c 5c f0 	mov    %edx,-0xfa3d380(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f01124a5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01124a8:	8d 50 fe             	lea    -0x2(%eax),%edx
f01124ab:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01124ae:	01 c2                	add    %eax,%edx
f01124b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01124b3:	89 14 85 80 16 5c f0 	mov    %edx,-0xfa3e980(,%eax,4)
			if (check_block(va, expectedVA, expectedSize, 1) == 0)
f01124ba:	6a 01                	push   $0x1
f01124bc:	ff 75 b4             	pushl  -0x4c(%ebp)
f01124bf:	ff 75 b0             	pushl  -0x50(%ebp)
f01124c2:	ff 75 ac             	pushl  -0x54(%ebp)
f01124c5:	e8 5e d5 ff ff       	call   f010fa28 <check_block>
f01124ca:	83 c4 10             	add    $0x10,%esp
f01124cd:	85 c0                	test   %eax,%eax
f01124cf:	75 24                	jne    f01124f5 <test_realloc_block_FF+0x1e1>
			{
				panic("test_realloc_block_FF #1.1.%d: WRONG ALLOC - it return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData ,va);
f01124d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01124d4:	83 c0 08             	add    $0x8,%eax
f01124d7:	83 ec 08             	sub    $0x8,%esp
f01124da:	ff 75 ac             	pushl  -0x54(%ebp)
f01124dd:	50                   	push   %eax
f01124de:	ff 75 e4             	pushl  -0x1c(%ebp)
f01124e1:	68 5c aa 12 f0       	push   $0xf012aa5c
f01124e6:	68 f2 04 00 00       	push   $0x4f2
f01124eb:	68 74 99 12 f0       	push   $0xf0129974
f01124f0:	e8 25 de fe ff       	call   f010031a <_panic>
			}
			curVA += allocSizes[i] ;
f01124f5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01124f8:	8b 04 85 b8 dd 17 f0 	mov    -0xfe82248(,%eax,4),%eax
f01124ff:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f0112502:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112505:	8b 14 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%edx
f011250c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011250f:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f0112512:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112515:	8b 14 85 80 2c 5c f0 	mov    -0xfa3d380(,%eax,4),%edx
f011251c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011251f:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f0112522:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112525:	8b 14 85 80 16 5c f0 	mov    -0xfa3e980(,%eax,4),%edx
f011252c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011252f:	66 89 02             	mov    %ax,(%edx)
			idx++;
f0112532:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) /*BEG block*/ ;
	uint32 actualSize, expectedSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0112535:	ff 45 d8             	incl   -0x28(%ebp)
f0112538:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f011253f:	0f 8e e0 fe ff ff    	jle    f0112425 <test_realloc_block_FF+0x111>
		panic("test_realloc_block_FF is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) /*BEG block*/ ;
	uint32 actualSize, expectedSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0112545:	ff 45 dc             	incl   -0x24(%ebp)
f0112548:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f011254c:	0f 8e c7 fe ff ff    	jle    f0112419 <test_realloc_block_FF+0x105>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData;
f0112552:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112555:	83 e8 08             	sub    $0x8,%eax
f0112558:	89 45 c0             	mov    %eax,-0x40(%ebp)
	expectedSize = ROUNDUP(actualSize + sizeOfMetaData, 2);
f011255b:	c7 45 a8 02 00 00 00 	movl   $0x2,-0x58(%ebp)
f0112562:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0112565:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112568:	01 d0                	add    %edx,%eax
f011256a:	83 c0 07             	add    $0x7,%eax
f011256d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0112570:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112573:	ba 00 00 00 00       	mov    $0x0,%edx
f0112578:	f7 75 a8             	divl   -0x58(%ebp)
f011257b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011257e:	29 d0                	sub    %edx,%eax
f0112580:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	expectedVA = (curVA + sizeOfMetaData/2);
f0112583:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0112586:	83 c0 04             	add    $0x4,%eax
f0112589:	89 45 b0             	mov    %eax,-0x50(%ebp)

	va = startVAs[idx] = realloc_block_FF(NULL, actualSize);
f011258c:	83 ec 08             	sub    $0x8,%esp
f011258f:	ff 75 c0             	pushl  -0x40(%ebp)
f0112592:	6a 00                	push   $0x0
f0112594:	e8 01 0e 01 00       	call   f012339a <realloc_block_FF>
f0112599:	83 c4 10             	add    $0x10,%esp
f011259c:	89 c2                	mov    %eax,%edx
f011259e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01125a1:	89 14 85 80 00 5c f0 	mov    %edx,-0xfa3ff80(,%eax,4)
f01125a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01125ab:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f01125b2:	89 45 ac             	mov    %eax,-0x54(%ebp)

	midVAs[idx] = va + actualSize/2 ;
f01125b5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01125b8:	d1 e8                	shr    %eax
f01125ba:	89 c2                	mov    %eax,%edx
f01125bc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01125bf:	01 c2                	add    %eax,%edx
f01125c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01125c4:	89 14 85 80 2c 5c f0 	mov    %edx,-0xfa3d380(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f01125cb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01125ce:	8d 50 fe             	lea    -0x2(%eax),%edx
f01125d1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01125d4:	01 c2                	add    %eax,%edx
f01125d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01125d9:	89 14 85 80 16 5c f0 	mov    %edx,-0xfa3e980(,%eax,4)
	//Check returned va
	if (check_block(va, expectedVA, expectedSize, 1) == 0)
f01125e0:	6a 01                	push   $0x1
f01125e2:	ff 75 b4             	pushl  -0x4c(%ebp)
f01125e5:	ff 75 b0             	pushl  -0x50(%ebp)
f01125e8:	ff 75 ac             	pushl  -0x54(%ebp)
f01125eb:	e8 38 d4 ff ff       	call   f010fa28 <check_block>
f01125f0:	83 c4 10             	add    $0x10,%esp
f01125f3:	85 c0                	test   %eax,%eax
f01125f5:	75 17                	jne    f011260e <test_realloc_block_FF+0x2fa>
	{
		panic("test_realloc_block_FF #1.2.0: WRONG ALLOC - it return wrong address.");
f01125f7:	83 ec 04             	sub    $0x4,%esp
f01125fa:	68 bc aa 12 f0       	push   $0xf012aabc
f01125ff:	68 09 05 00 00       	push   $0x509
f0112604:	68 74 99 12 f0       	push   $0xf0129974
f0112609:	e8 0c dd fe ff       	call   f010031a <_panic>
	}
	*(startVAs[idx]) = idx ;
f011260e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112611:	8b 14 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%edx
f0112618:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011261b:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f011261e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112621:	8b 14 85 80 2c 5c f0 	mov    -0xfa3d380(,%eax,4),%edx
f0112628:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011262b:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f011262e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112631:	8b 14 85 80 16 5c f0 	mov    -0xfa3e980(,%eax,4),%edx
f0112638:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011263b:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f011263e:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0112645:	eb 59                	jmp    f01126a0 <test_realloc_block_FF+0x38c>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f0112647:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011264a:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0112651:	66 8b 00             	mov    (%eax),%ax
f0112654:	98                   	cwtl   
f0112655:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0112658:	75 26                	jne    f0112680 <test_realloc_block_FF+0x36c>
f011265a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011265d:	8b 04 85 80 2c 5c f0 	mov    -0xfa3d380(,%eax,4),%eax
f0112664:	66 8b 00             	mov    (%eax),%ax
f0112667:	98                   	cwtl   
f0112668:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011266b:	75 13                	jne    f0112680 <test_realloc_block_FF+0x36c>
f011266d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0112670:	8b 04 85 80 16 5c f0 	mov    -0xfa3e980(,%eax,4),%eax
f0112677:	66 8b 00             	mov    (%eax),%ax
f011267a:	98                   	cwtl   
f011267b:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011267e:	74 1d                	je     f011269d <test_realloc_block_FF+0x389>
			panic("test_realloc_block_FF #1.3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f0112680:	83 ec 0c             	sub    $0xc,%esp
f0112683:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112686:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112689:	68 04 ab 12 f0       	push   $0xf012ab04
f011268e:	68 14 05 00 00       	push   $0x514
f0112693:	68 74 99 12 f0       	push   $0xf0129974
f0112698:	e8 7d dc fe ff       	call   f010031a <_panic>
	*(midVAs[idx]) = idx ;
	*(endVAs[idx]) = idx ;

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f011269d:	ff 45 d4             	incl   -0x2c(%ebp)
f01126a0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01126a3:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01126a6:	7c 9f                	jl     f0112647 <test_realloc_block_FF+0x333>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
			panic("test_realloc_block_FF #1.3.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	if (is_correct)
f01126a8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01126ac:	74 04                	je     f01126b2 <test_realloc_block_FF+0x39e>
	{
		eval += 10;
f01126ae:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	//[2] Test krealloc by passing size = 0. It should call free
	//====================================================================//
	cprintf("2: Test calling realloc with SIZE = 0.[10%]\n\n") ;
f01126b2:	83 ec 0c             	sub    $0xc,%esp
f01126b5:	68 5c ab 12 f0       	push   $0xf012ab5c
f01126ba:	e8 ad e8 fe ff       	call   f0100f6c <cprintf>
f01126bf:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01126c2:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f01126c9:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f01126d0:	e9 f1 00 00 00       	jmp    f01127c6 <test_realloc_block_FF+0x4b2>
	{
		va = realloc_block_FF(startVAs[i*allocCntPerSize], 0);
f01126d5:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01126d8:	89 d0                	mov    %edx,%eax
f01126da:	c1 e0 02             	shl    $0x2,%eax
f01126dd:	01 d0                	add    %edx,%eax
f01126df:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01126e6:	01 d0                	add    %edx,%eax
f01126e8:	c1 e0 03             	shl    $0x3,%eax
f01126eb:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f01126f2:	83 ec 08             	sub    $0x8,%esp
f01126f5:	6a 00                	push   $0x0
f01126f7:	50                   	push   %eax
f01126f8:	e8 9d 0c 01 00       	call   f012339a <realloc_block_FF>
f01126fd:	83 c4 10             	add    $0x10,%esp
f0112700:	89 45 ac             	mov    %eax,-0x54(%ebp)

		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f0112703:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0112706:	89 d0                	mov    %edx,%eax
f0112708:	c1 e0 02             	shl    $0x2,%eax
f011270b:	01 d0                	add    %edx,%eax
f011270d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0112714:	01 d0                	add    %edx,%eax
f0112716:	c1 e0 03             	shl    $0x3,%eax
f0112719:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0112720:	83 ec 0c             	sub    $0xc,%esp
f0112723:	50                   	push   %eax
f0112724:	e8 7a 07 01 00       	call   f0122ea3 <get_block_size>
f0112729:	83 c4 10             	add    $0x10,%esp
f011272c:	89 45 a0             	mov    %eax,-0x60(%ebp)
		expectedSize = allocSizes[i];
f011272f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112732:	8b 04 85 b8 dd 17 f0 	mov    -0xfe82248(,%eax,4),%eax
f0112739:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		expectedVA = va;
f011273c:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011273f:	89 45 b0             	mov    %eax,-0x50(%ebp)
		if (check_block(startVAs[i*allocCntPerSize], startVAs[i*allocCntPerSize], expectedSize, 0) == 0)
f0112742:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0112745:	89 d0                	mov    %edx,%eax
f0112747:	c1 e0 02             	shl    $0x2,%eax
f011274a:	01 d0                	add    %edx,%eax
f011274c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0112753:	01 d0                	add    %edx,%eax
f0112755:	c1 e0 03             	shl    $0x3,%eax
f0112758:	8b 14 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%edx
f011275f:	8b 4d d0             	mov    -0x30(%ebp),%ecx
f0112762:	89 c8                	mov    %ecx,%eax
f0112764:	c1 e0 02             	shl    $0x2,%eax
f0112767:	01 c8                	add    %ecx,%eax
f0112769:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0112770:	01 c8                	add    %ecx,%eax
f0112772:	c1 e0 03             	shl    $0x3,%eax
f0112775:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f011277c:	6a 00                	push   $0x0
f011277e:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112781:	52                   	push   %edx
f0112782:	50                   	push   %eax
f0112783:	e8 a0 d2 ff ff       	call   f010fa28 <check_block>
f0112788:	83 c4 10             	add    $0x10,%esp
f011278b:	85 c0                	test   %eax,%eax
f011278d:	75 17                	jne    f01127a6 <test_realloc_block_FF+0x492>
		{
			panic("test_realloc_block_FF #2.1.%d: Failed.", i);
f011278f:	ff 75 d0             	pushl  -0x30(%ebp)
f0112792:	68 8c ab 12 f0       	push   $0xf012ab8c
f0112797:	68 2c 05 00 00       	push   $0x52c
f011279c:	68 74 99 12 f0       	push   $0xf0129974
f01127a1:	e8 74 db fe ff       	call   f010031a <_panic>
		}
		if(va != NULL)
f01127a6:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
f01127aa:	74 17                	je     f01127c3 <test_realloc_block_FF+0x4af>
			panic("test_realloc_block_FF #2.2.%d: it should return NULL.", i);
f01127ac:	ff 75 d0             	pushl  -0x30(%ebp)
f01127af:	68 b4 ab 12 f0       	push   $0xf012abb4
f01127b4:	68 2f 05 00 00       	push   $0x52f
f01127b9:	68 74 99 12 f0       	push   $0xf0129974
f01127be:	e8 57 db fe ff       	call   f010031a <_panic>
	//====================================================================//
	cprintf("2: Test calling realloc with SIZE = 0.[10%]\n\n") ;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f01127c3:	ff 45 d0             	incl   -0x30(%ebp)
f01127c6:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f01127ca:	0f 8e 05 ff ff ff    	jle    f01126d5 <test_realloc_block_FF+0x3c1>
		if(va != NULL)
			panic("test_realloc_block_FF #2.2.%d: it should return NULL.", i);
	}

	//test calling it with NULL & ZERO
	va = realloc_block_FF(NULL, 0);
f01127d0:	83 ec 08             	sub    $0x8,%esp
f01127d3:	6a 00                	push   $0x0
f01127d5:	6a 00                	push   $0x0
f01127d7:	e8 be 0b 01 00       	call   f012339a <realloc_block_FF>
f01127dc:	83 c4 10             	add    $0x10,%esp
f01127df:	89 45 ac             	mov    %eax,-0x54(%ebp)
	if(va != NULL)
f01127e2:	83 7d ac 00          	cmpl   $0x0,-0x54(%ebp)
f01127e6:	74 17                	je     f01127ff <test_realloc_block_FF+0x4eb>
		panic("test_realloc_block_FF #2.3.0: it should return NULL.");
f01127e8:	83 ec 04             	sub    $0x4,%esp
f01127eb:	68 ec ab 12 f0       	push   $0xf012abec
f01127f0:	68 35 05 00 00       	push   $0x535
f01127f5:	68 74 99 12 f0       	push   $0xf0129974
f01127fa:	e8 1b db fe ff       	call   f010031a <_panic>

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f01127ff:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0112806:	eb 6b                	jmp    f0112873 <test_realloc_block_FF+0x55f>
	{
		if (i % allocCntPerSize == 0)
f0112808:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011280b:	b9 c8 00 00 00       	mov    $0xc8,%ecx
f0112810:	99                   	cltd   
f0112811:	f7 f9                	idiv   %ecx
f0112813:	89 d0                	mov    %edx,%eax
f0112815:	85 c0                	test   %eax,%eax
f0112817:	74 56                	je     f011286f <test_realloc_block_FF+0x55b>
			continue;
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f0112819:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011281c:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0112823:	66 8b 00             	mov    (%eax),%ax
f0112826:	98                   	cwtl   
f0112827:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011282a:	75 26                	jne    f0112852 <test_realloc_block_FF+0x53e>
f011282c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011282f:	8b 04 85 80 2c 5c f0 	mov    -0xfa3d380(,%eax,4),%eax
f0112836:	66 8b 00             	mov    (%eax),%ax
f0112839:	98                   	cwtl   
f011283a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011283d:	75 13                	jne    f0112852 <test_realloc_block_FF+0x53e>
f011283f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0112842:	8b 04 85 80 16 5c f0 	mov    -0xfa3e980(,%eax,4),%eax
f0112849:	66 8b 00             	mov    (%eax),%ax
f011284c:	98                   	cwtl   
f011284d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0112850:	74 1e                	je     f0112870 <test_realloc_block_FF+0x55c>
			panic("test_realloc_block_FF #2.4.%d: WRONG! content of the block is not correct. Expected %d",i, i);
f0112852:	83 ec 0c             	sub    $0xc,%esp
f0112855:	ff 75 cc             	pushl  -0x34(%ebp)
f0112858:	ff 75 cc             	pushl  -0x34(%ebp)
f011285b:	68 24 ac 12 f0       	push   $0xf012ac24
f0112860:	68 3e 05 00 00       	push   $0x53e
f0112865:	68 74 99 12 f0       	push   $0xf0129974
f011286a:	e8 ab da fe ff       	call   f010031a <_panic>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
	{
		if (i % allocCntPerSize == 0)
			continue;
f011286f:	90                   	nop
	if(va != NULL)
		panic("test_realloc_block_FF #2.3.0: it should return NULL.");

	//====================================================================//
	/* Check stored data inside each allocated block*/
	for (int i = 0; i < idx; ++i)
f0112870:	ff 45 cc             	incl   -0x34(%ebp)
f0112873:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0112876:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0112879:	7c 8d                	jl     f0112808 <test_realloc_block_FF+0x4f4>
			continue;
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
			panic("test_realloc_block_FF #2.4.%d: WRONG! content of the block is not correct. Expected %d",i, i);
	}

	uint32 expectedNumOfFreeBlks = numOfAllocs;
f011287b:	c7 45 9c 07 00 00 00 	movl   $0x7,-0x64(%ebp)
	if (check_list_size(expectedNumOfFreeBlks) == 0)
f0112882:	83 ec 0c             	sub    $0xc,%esp
f0112885:	ff 75 9c             	pushl  -0x64(%ebp)
f0112888:	e8 23 d2 ff ff       	call   f010fab0 <check_list_size>
f011288d:	83 c4 10             	add    $0x10,%esp
f0112890:	85 c0                	test   %eax,%eax
f0112892:	75 17                	jne    f01128ab <test_realloc_block_FF+0x597>
	{
		panic("2.5 Failed");
f0112894:	83 ec 04             	sub    $0x4,%esp
f0112897:	68 7b ac 12 f0       	push   $0xf012ac7b
f011289c:	68 44 05 00 00       	push   $0x544
f01128a1:	68 74 99 12 f0       	push   $0xf0129974
f01128a6:	e8 6f da fe ff       	call   f010031a <_panic>
	}

	if (is_correct)
f01128ab:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01128af:	74 04                	je     f01128b5 <test_realloc_block_FF+0x5a1>
	{
		eval += 10;
f01128b1:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	//[3] Test realloc with increased sizes
	//====================================================================//
	cprintf("3: Test calling realloc with increased sizes [50%].\n\n") ;
f01128b5:	83 ec 0c             	sub    $0xc,%esp
f01128b8:	68 88 ac 12 f0       	push   $0xf012ac88
f01128bd:	e8 aa e6 fe ff       	call   f0100f6c <cprintf>
f01128c2:	83 c4 10             	add    $0x10,%esp
	int blockIndex, block_size, block_status, old_size, new_size, newBlockIndex;
	//[3.1] reallocate in same place (NO relocate - split)
	cprintf("	3.1: reallocate in same place (NO relocate - split)\n\n") ;
f01128c5:	83 ec 0c             	sub    $0xc,%esp
f01128c8:	68 c0 ac 12 f0       	push   $0xf012acc0
f01128cd:	e8 9a e6 fe ff       	call   f0100f6c <cprintf>
f01128d2:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01128d5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 4*allocCntPerSize - 1 ;
f01128dc:	c7 45 98 1f 03 00 00 	movl   $0x31f,-0x68(%ebp)
		new_size = allocSizes[3] /*12+16 B*/ + allocSizes[4]/2 /*2KB/2*/ - sizeOfMetaData;
f01128e3:	a1 c4 dd 17 f0       	mov    0xf017ddc4,%eax
f01128e8:	8b 15 c8 dd 17 f0    	mov    0xf017ddc8,%edx
f01128ee:	d1 ea                	shr    %edx
f01128f0:	01 d0                	add    %edx,%eax
f01128f2:	83 e8 08             	sub    $0x8,%eax
f01128f5:	89 45 94             	mov    %eax,-0x6c(%ebp)
		expectedSize = ROUNDUP(new_size + sizeOfMetaData, 2);
f01128f8:	c7 45 90 02 00 00 00 	movl   $0x2,-0x70(%ebp)
f01128ff:	8b 55 94             	mov    -0x6c(%ebp),%edx
f0112902:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112905:	01 d0                	add    %edx,%eax
f0112907:	83 c0 07             	add    $0x7,%eax
f011290a:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011290d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112910:	ba 00 00 00 00       	mov    $0x0,%edx
f0112915:	f7 75 90             	divl   -0x70(%ebp)
f0112918:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011291b:	29 d0                	sub    %edx,%eax
f011291d:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		expectedVA = startVAs[blockIndex];
f0112920:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112923:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f011292a:	89 45 b0             	mov    %eax,-0x50(%ebp)

		va = realloc_block_FF(startVAs[blockIndex], new_size);
f011292d:	8b 55 94             	mov    -0x6c(%ebp),%edx
f0112930:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112933:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f011293a:	83 ec 08             	sub    $0x8,%esp
f011293d:	52                   	push   %edx
f011293e:	50                   	push   %eax
f011293f:	e8 56 0a 01 00       	call   f012339a <realloc_block_FF>
f0112944:	83 c4 10             	add    $0x10,%esp
f0112947:	89 45 ac             	mov    %eax,-0x54(%ebp)

		//check return address
		if (check_block(va, expectedVA, expectedSize, 1) == 0)
f011294a:	6a 01                	push   $0x1
f011294c:	ff 75 b4             	pushl  -0x4c(%ebp)
f011294f:	ff 75 b0             	pushl  -0x50(%ebp)
f0112952:	ff 75 ac             	pushl  -0x54(%ebp)
f0112955:	e8 ce d0 ff ff       	call   f010fa28 <check_block>
f011295a:	83 c4 10             	add    $0x10,%esp
f011295d:	85 c0                	test   %eax,%eax
f011295f:	75 17                	jne    f0112978 <test_realloc_block_FF+0x664>
		{
			is_correct = 0;
f0112961:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #3.1.1: Failed\n");
f0112968:	83 ec 0c             	sub    $0xc,%esp
f011296b:	68 f8 ac 12 f0       	push   $0xf012acf8
f0112970:	e8 f7 e5 fe ff       	call   f0100f6c <cprintf>
f0112975:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex ||	*(endVAs[blockIndex]) != blockIndex)
f0112978:	8b 45 98             	mov    -0x68(%ebp),%eax
f011297b:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0112982:	66 8b 00             	mov    (%eax),%ax
f0112985:	98                   	cwtl   
f0112986:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112989:	75 26                	jne    f01129b1 <test_realloc_block_FF+0x69d>
f011298b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011298e:	8b 04 85 80 2c 5c f0 	mov    -0xfa3d380(,%eax,4),%eax
f0112995:	66 8b 00             	mov    (%eax),%ax
f0112998:	98                   	cwtl   
f0112999:	3b 45 98             	cmp    -0x68(%ebp),%eax
f011299c:	75 13                	jne    f01129b1 <test_realloc_block_FF+0x69d>
f011299e:	8b 45 98             	mov    -0x68(%ebp),%eax
f01129a1:	8b 04 85 80 16 5c f0 	mov    -0xfa3e980(,%eax,4),%eax
f01129a8:	66 8b 00             	mov    (%eax),%ax
f01129ab:	98                   	cwtl   
f01129ac:	3b 45 98             	cmp    -0x68(%ebp),%eax
f01129af:	74 1a                	je     f01129cb <test_realloc_block_FF+0x6b7>
		{
			is_correct = 0;
f01129b1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #3.1.2: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f01129b8:	83 ec 08             	sub    $0x8,%esp
f01129bb:	ff 75 98             	pushl  -0x68(%ebp)
f01129be:	68 20 ad 12 f0       	push   $0xf012ad20
f01129c3:	e8 a4 e5 fe ff       	call   f0100f6c <cprintf>
f01129c8:	83 c4 10             	add    $0x10,%esp
		}
	}
	if (is_correct)
f01129cb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01129cf:	74 04                	je     f01129d5 <test_realloc_block_FF+0x6c1>
	{
		eval += 25;
f01129d1:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
	}

	//[3.2] reallocate in same place (NO relocate - NO split)
	cprintf("	3.2: reallocate in same place (NO relocate - NO split)\n\n") ;
f01129d5:	83 ec 0c             	sub    $0xc,%esp
f01129d8:	68 80 ad 12 f0       	push   $0xf012ad80
f01129dd:	e8 8a e5 fe ff       	call   f0100f6c <cprintf>
f01129e2:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01129e5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 4*allocCntPerSize - 1 ;
f01129ec:	c7 45 98 1f 03 00 00 	movl   $0x31f,-0x68(%ebp)
		//new_size = allocSizes[3] /*12+16B + 2KB/2*/ + allocSizes[4]/2 /*2KB/2*/ - sizeOfMetaData;
		new_size = allocSizes[3] + allocSizes[4] - sizeOfMetaData;
f01129f3:	8b 15 c4 dd 17 f0    	mov    0xf017ddc4,%edx
f01129f9:	a1 c8 dd 17 f0       	mov    0xf017ddc8,%eax
f01129fe:	01 d0                	add    %edx,%eax
f0112a00:	83 e8 08             	sub    $0x8,%eax
f0112a03:	89 45 94             	mov    %eax,-0x6c(%ebp)
		expectedSize = ROUNDUP(new_size + sizeOfMetaData, 2);
f0112a06:	c7 45 88 02 00 00 00 	movl   $0x2,-0x78(%ebp)
f0112a0d:	8b 55 94             	mov    -0x6c(%ebp),%edx
f0112a10:	8b 45 88             	mov    -0x78(%ebp),%eax
f0112a13:	01 d0                	add    %edx,%eax
f0112a15:	83 c0 07             	add    $0x7,%eax
f0112a18:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0112a1b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0112a1e:	ba 00 00 00 00       	mov    $0x0,%edx
f0112a23:	f7 75 88             	divl   -0x78(%ebp)
f0112a26:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0112a29:	29 d0                	sub    %edx,%eax
f0112a2b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		expectedVA = startVAs[blockIndex];
f0112a2e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112a31:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0112a38:	89 45 b0             	mov    %eax,-0x50(%ebp)

		va = realloc_block_FF(startVAs[blockIndex], new_size);
f0112a3b:	8b 55 94             	mov    -0x6c(%ebp),%edx
f0112a3e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112a41:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0112a48:	83 ec 08             	sub    $0x8,%esp
f0112a4b:	52                   	push   %edx
f0112a4c:	50                   	push   %eax
f0112a4d:	e8 48 09 01 00       	call   f012339a <realloc_block_FF>
f0112a52:	83 c4 10             	add    $0x10,%esp
f0112a55:	89 45 ac             	mov    %eax,-0x54(%ebp)

		expectedNumOfFreeBlks--;
f0112a58:	ff 4d 9c             	decl   -0x64(%ebp)

		if (check_block(va, expectedVA, expectedSize, 1) == 0)
f0112a5b:	6a 01                	push   $0x1
f0112a5d:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112a60:	ff 75 b0             	pushl  -0x50(%ebp)
f0112a63:	ff 75 ac             	pushl  -0x54(%ebp)
f0112a66:	e8 bd cf ff ff       	call   f010fa28 <check_block>
f0112a6b:	83 c4 10             	add    $0x10,%esp
f0112a6e:	85 c0                	test   %eax,%eax
f0112a70:	75 17                	jne    f0112a89 <test_realloc_block_FF+0x775>
		{
			is_correct = 0;
f0112a72:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #3.2.1: Failed\n");
f0112a79:	83 ec 0c             	sub    $0xc,%esp
f0112a7c:	68 bc ad 12 f0       	push   $0xf012adbc
f0112a81:	e8 e6 e4 fe ff       	call   f0100f6c <cprintf>
f0112a86:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex ||	*(endVAs[blockIndex]) != blockIndex)
f0112a89:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112a8c:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0112a93:	66 8b 00             	mov    (%eax),%ax
f0112a96:	98                   	cwtl   
f0112a97:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112a9a:	75 26                	jne    f0112ac2 <test_realloc_block_FF+0x7ae>
f0112a9c:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112a9f:	8b 04 85 80 2c 5c f0 	mov    -0xfa3d380(,%eax,4),%eax
f0112aa6:	66 8b 00             	mov    (%eax),%ax
f0112aa9:	98                   	cwtl   
f0112aaa:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112aad:	75 13                	jne    f0112ac2 <test_realloc_block_FF+0x7ae>
f0112aaf:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112ab2:	8b 04 85 80 16 5c f0 	mov    -0xfa3e980(,%eax,4),%eax
f0112ab9:	66 8b 00             	mov    (%eax),%ax
f0112abc:	98                   	cwtl   
f0112abd:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112ac0:	74 1a                	je     f0112adc <test_realloc_block_FF+0x7c8>
		{
			is_correct = 0;
f0112ac2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #3.2.2: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0112ac9:	83 ec 08             	sub    $0x8,%esp
f0112acc:	ff 75 98             	pushl  -0x68(%ebp)
f0112acf:	68 e4 ad 12 f0       	push   $0xf012ade4
f0112ad4:	e8 93 e4 fe ff       	call   f0100f6c <cprintf>
f0112ad9:	83 c4 10             	add    $0x10,%esp
		}

		if (is_correct) is_correct = check_list_size(expectedNumOfFreeBlks);
f0112adc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112ae0:	74 11                	je     f0112af3 <test_realloc_block_FF+0x7df>
f0112ae2:	83 ec 0c             	sub    $0xc,%esp
f0112ae5:	ff 75 9c             	pushl  -0x64(%ebp)
f0112ae8:	e8 c3 cf ff ff       	call   f010fab0 <check_list_size>
f0112aed:	83 c4 10             	add    $0x10,%esp
f0112af0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	}
	if (is_correct)
f0112af3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112af7:	74 04                	je     f0112afd <test_realloc_block_FF+0x7e9>
	{
		eval += 25;
f0112af9:	83 45 f4 19          	addl   $0x19,-0xc(%ebp)
	}

	//====================================================================//
	//[4] Test realloc with decreased sizes
	//====================================================================//
	cprintf("4: Test calling realloc with decreased sizes.[30%]\n\n") ;
f0112afd:	83 ec 0c             	sub    $0xc,%esp
f0112b00:	68 44 ae 12 f0       	push   $0xf012ae44
f0112b05:	e8 62 e4 fe ff       	call   f0100f6c <cprintf>
f0112b0a:	83 c4 10             	add    $0x10,%esp
	//[4.1] next block is full (NO coalesce)
	cprintf("	4.1: next block is full (NO coalesce)\n\n") ;
f0112b0d:	83 ec 0c             	sub    $0xc,%esp
f0112b10:	68 7c ae 12 f0       	push   $0xf012ae7c
f0112b15:	e8 52 e4 fe ff       	call   f0100f6c <cprintf>
f0112b1a:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0112b1d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 0*allocCntPerSize + 1; /*4KB*/
f0112b24:	c7 45 98 01 00 00 00 	movl   $0x1,-0x68(%ebp)
		old_size = allocSizes[0] - sizeOfMetaData; /*4KB - sizeOfMetaData*/;
f0112b2b:	a1 b8 dd 17 f0       	mov    0xf017ddb8,%eax
f0112b30:	83 e8 08             	sub    $0x8,%eax
f0112b33:	89 45 80             	mov    %eax,-0x80(%ebp)
		new_size = old_size - 1*kilo ;
f0112b36:	8b 45 80             	mov    -0x80(%ebp),%eax
f0112b39:	2d 00 04 00 00       	sub    $0x400,%eax
f0112b3e:	89 45 94             	mov    %eax,-0x6c(%ebp)
		expectedSize = ROUNDUP(new_size + sizeOfMetaData, 2);
f0112b41:	c7 85 7c ff ff ff 02 	movl   $0x2,-0x84(%ebp)
f0112b48:	00 00 00 
f0112b4b:	8b 55 94             	mov    -0x6c(%ebp),%edx
f0112b4e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0112b54:	01 d0                	add    %edx,%eax
f0112b56:	83 c0 07             	add    $0x7,%eax
f0112b59:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0112b5f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0112b65:	ba 00 00 00 00       	mov    $0x0,%edx
f0112b6a:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0112b70:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0112b76:	29 d0                	sub    %edx,%eax
f0112b78:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		expectedVA = startVAs[blockIndex];
f0112b7b:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112b7e:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0112b85:	89 45 b0             	mov    %eax,-0x50(%ebp)

		va = realloc_block_FF(startVAs[blockIndex], new_size);
f0112b88:	8b 55 94             	mov    -0x6c(%ebp),%edx
f0112b8b:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112b8e:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0112b95:	83 ec 08             	sub    $0x8,%esp
f0112b98:	52                   	push   %edx
f0112b99:	50                   	push   %eax
f0112b9a:	e8 fb 07 01 00       	call   f012339a <realloc_block_FF>
f0112b9f:	83 c4 10             	add    $0x10,%esp
f0112ba2:	89 45 ac             	mov    %eax,-0x54(%ebp)

		expectedNumOfFreeBlks++;
f0112ba5:	ff 45 9c             	incl   -0x64(%ebp)

		if (check_block(va, expectedVA, expectedSize, 1) == 0)
f0112ba8:	6a 01                	push   $0x1
f0112baa:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112bad:	ff 75 b0             	pushl  -0x50(%ebp)
f0112bb0:	ff 75 ac             	pushl  -0x54(%ebp)
f0112bb3:	e8 70 ce ff ff       	call   f010fa28 <check_block>
f0112bb8:	83 c4 10             	add    $0x10,%esp
f0112bbb:	85 c0                	test   %eax,%eax
f0112bbd:	75 17                	jne    f0112bd6 <test_realloc_block_FF+0x8c2>
		{
			is_correct = 0;
f0112bbf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #4.1.1: Failed\n");
f0112bc6:	83 ec 0c             	sub    $0xc,%esp
f0112bc9:	68 a8 ae 12 f0       	push   $0xf012aea8
f0112bce:	e8 99 e3 fe ff       	call   f0100f6c <cprintf>
f0112bd3:	83 c4 10             	add    $0x10,%esp
		}
		//check new free block
		struct BlockElement *newBlkAddr = (struct BlockElement *)(va + new_size + 2*sizeof(int));
f0112bd6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112bd9:	8d 50 08             	lea    0x8(%eax),%edx
f0112bdc:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112bdf:	01 d0                	add    %edx,%eax
f0112be1:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
		cprintf("\nrealloc Test: newBlkAddr @va %x\n", newBlkAddr);
f0112be7:	83 ec 08             	sub    $0x8,%esp
f0112bea:	ff b5 74 ff ff ff    	pushl  -0x8c(%ebp)
f0112bf0:	68 d0 ae 12 f0       	push   $0xf012aed0
f0112bf5:	e8 72 e3 fe ff       	call   f0100f6c <cprintf>
f0112bfa:	83 c4 10             	add    $0x10,%esp
		expectedSize = 1*kilo ;
f0112bfd:	c7 45 b4 00 04 00 00 	movl   $0x400,-0x4c(%ebp)
		if (check_block(newBlkAddr, newBlkAddr, expectedSize, 0) == 0)
f0112c04:	6a 00                	push   $0x0
f0112c06:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112c09:	ff b5 74 ff ff ff    	pushl  -0x8c(%ebp)
f0112c0f:	ff b5 74 ff ff ff    	pushl  -0x8c(%ebp)
f0112c15:	e8 0e ce ff ff       	call   f010fa28 <check_block>
f0112c1a:	83 c4 10             	add    $0x10,%esp
f0112c1d:	85 c0                	test   %eax,%eax
f0112c1f:	75 17                	jne    f0112c38 <test_realloc_block_FF+0x924>
		{
			is_correct = 0;
f0112c21:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #4.1.2: Failed\n");
f0112c28:	83 ec 0c             	sub    $0xc,%esp
f0112c2b:	68 f4 ae 12 f0       	push   $0xf012aef4
f0112c30:	e8 37 e3 fe ff       	call   f0100f6c <cprintf>
f0112c35:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex)
f0112c38:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112c3b:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0112c42:	66 8b 00             	mov    (%eax),%ax
f0112c45:	98                   	cwtl   
f0112c46:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112c49:	75 13                	jne    f0112c5e <test_realloc_block_FF+0x94a>
f0112c4b:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112c4e:	8b 04 85 80 2c 5c f0 	mov    -0xfa3d380(,%eax,4),%eax
f0112c55:	66 8b 00             	mov    (%eax),%ax
f0112c58:	98                   	cwtl   
f0112c59:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112c5c:	74 1a                	je     f0112c78 <test_realloc_block_FF+0x964>
		{
			is_correct = 0;
f0112c5e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #4.1.3: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0112c65:	83 ec 08             	sub    $0x8,%esp
f0112c68:	ff 75 98             	pushl  -0x68(%ebp)
f0112c6b:	68 1c af 12 f0       	push   $0xf012af1c
f0112c70:	e8 f7 e2 fe ff       	call   f0100f6c <cprintf>
f0112c75:	83 c4 10             	add    $0x10,%esp
		}

		//Check # free blocks
		if (is_correct) is_correct = check_list_size(expectedNumOfFreeBlks);
f0112c78:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112c7c:	74 11                	je     f0112c8f <test_realloc_block_FF+0x97b>
f0112c7e:	83 ec 0c             	sub    $0xc,%esp
f0112c81:	ff 75 9c             	pushl  -0x64(%ebp)
f0112c84:	e8 27 ce ff ff       	call   f010fab0 <check_list_size>
f0112c89:	83 c4 10             	add    $0x10,%esp
f0112c8c:	89 45 f0             	mov    %eax,-0x10(%ebp)

	}
	if (is_correct)
f0112c8f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112c93:	74 04                	je     f0112c99 <test_realloc_block_FF+0x985>
	{
		eval += 15;
f0112c95:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}
	cprintf("	4.2: next block is full (NO coalesce) [Internal Fragmentation]\n\n") ;
f0112c99:	83 ec 0c             	sub    $0xc,%esp
f0112c9c:	68 7c af 12 f0       	push   $0xf012af7c
f0112ca1:	e8 c6 e2 fe ff       	call   f0100f6c <cprintf>
f0112ca6:	83 c4 10             	add    $0x10,%esp

	is_correct = 1;
f0112ca9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		blockIndex = 1*allocCntPerSize + 1;
f0112cb0:	c7 45 98 c9 00 00 00 	movl   $0xc9,-0x68(%ebp)
		old_size = allocSizes[1] - sizeOfMetaData;/*20 B*/
f0112cb7:	a1 bc dd 17 f0       	mov    0xf017ddbc,%eax
f0112cbc:	83 e8 08             	sub    $0x8,%eax
f0112cbf:	89 45 80             	mov    %eax,-0x80(%ebp)
		new_size = old_size - 6;
f0112cc2:	8b 45 80             	mov    -0x80(%ebp),%eax
f0112cc5:	83 e8 06             	sub    $0x6,%eax
f0112cc8:	89 45 94             	mov    %eax,-0x6c(%ebp)
		expectedSize = allocSizes[1]; /*Same block size [Internal Framgmentation]*/
f0112ccb:	a1 bc dd 17 f0       	mov    0xf017ddbc,%eax
f0112cd0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		expectedVA = startVAs[blockIndex];
f0112cd3:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112cd6:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0112cdd:	89 45 b0             	mov    %eax,-0x50(%ebp)

		va = realloc_block_FF(startVAs[blockIndex], new_size);
f0112ce0:	8b 55 94             	mov    -0x6c(%ebp),%edx
f0112ce3:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112ce6:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0112ced:	83 ec 08             	sub    $0x8,%esp
f0112cf0:	52                   	push   %edx
f0112cf1:	50                   	push   %eax
f0112cf2:	e8 a3 06 01 00       	call   f012339a <realloc_block_FF>
f0112cf7:	83 c4 10             	add    $0x10,%esp
f0112cfa:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (check_block(va, expectedVA, expectedSize, 1) == 0)
f0112cfd:	6a 01                	push   $0x1
f0112cff:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112d02:	ff 75 b0             	pushl  -0x50(%ebp)
f0112d05:	ff 75 ac             	pushl  -0x54(%ebp)
f0112d08:	e8 1b cd ff ff       	call   f010fa28 <check_block>
f0112d0d:	83 c4 10             	add    $0x10,%esp
f0112d10:	85 c0                	test   %eax,%eax
f0112d12:	75 17                	jne    f0112d2b <test_realloc_block_FF+0xa17>
		{
			is_correct = 0;
f0112d14:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #4.2.1: Failed\n");
f0112d1b:	83 ec 0c             	sub    $0xc,%esp
f0112d1e:	68 c0 af 12 f0       	push   $0xf012afc0
f0112d23:	e8 44 e2 fe ff       	call   f0100f6c <cprintf>
f0112d28:	83 c4 10             	add    $0x10,%esp
		}
		//check content of reallocated block
		if (*(startVAs[blockIndex]) != blockIndex || *(midVAs[blockIndex]) != blockIndex)
f0112d2b:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112d2e:	8b 04 85 80 00 5c f0 	mov    -0xfa3ff80(,%eax,4),%eax
f0112d35:	66 8b 00             	mov    (%eax),%ax
f0112d38:	98                   	cwtl   
f0112d39:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112d3c:	75 13                	jne    f0112d51 <test_realloc_block_FF+0xa3d>
f0112d3e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112d41:	8b 04 85 80 2c 5c f0 	mov    -0xfa3d380(,%eax,4),%eax
f0112d48:	66 8b 00             	mov    (%eax),%ax
f0112d4b:	98                   	cwtl   
f0112d4c:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0112d4f:	74 1a                	je     f0112d6b <test_realloc_block_FF+0xa57>
		{
			is_correct = 0;
f0112d51:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_realloc_block_FF #4.2.2: WRONG REALLOC! content of the block is not correct. Expected %d\n", blockIndex);
f0112d58:	83 ec 08             	sub    $0x8,%esp
f0112d5b:	ff 75 98             	pushl  -0x68(%ebp)
f0112d5e:	68 e8 af 12 f0       	push   $0xf012afe8
f0112d63:	e8 04 e2 fe ff       	call   f0100f6c <cprintf>
f0112d68:	83 c4 10             	add    $0x10,%esp
		}

		//Check # free blocks
		if (is_correct) is_correct = check_list_size(expectedNumOfFreeBlks);
f0112d6b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112d6f:	74 11                	je     f0112d82 <test_realloc_block_FF+0xa6e>
f0112d71:	83 ec 0c             	sub    $0xc,%esp
f0112d74:	ff 75 9c             	pushl  -0x64(%ebp)
f0112d77:	e8 34 cd ff ff       	call   f010fab0 <check_list_size>
f0112d7c:	83 c4 10             	add    $0x10,%esp
f0112d7f:	89 45 f0             	mov    %eax,-0x10(%ebp)

	}
	if (is_correct)
f0112d82:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112d86:	74 04                	je     f0112d8c <test_realloc_block_FF+0xa78>
	{
		eval += 15;
f0112d88:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	cprintf("[PARTIAL] test realloc_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f0112d8c:	83 ec 08             	sub    $0x8,%esp
f0112d8f:	ff 75 f4             	pushl  -0xc(%ebp)
f0112d92:	68 48 b0 12 f0       	push   $0xf012b048
f0112d97:	e8 d0 e1 fe ff       	call   f0100f6c <cprintf>
f0112d9c:	83 c4 10             	add    $0x10,%esp

}
f0112d9f:	90                   	nop
f0112da0:	c9                   	leave  
f0112da1:	c3                   	ret    

f0112da2 <test_realloc_block_FF_COMPLETE>:


void test_realloc_block_FF_COMPLETE()
{
f0112da2:	55                   	push   %ebp
f0112da3:	89 e5                	mov    %esp,%ebp
f0112da5:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	panic("this is UNSEEN test");
f0112da8:	83 ec 04             	sub    $0x4,%esp
f0112dab:	68 91 b0 12 f0       	push   $0xf012b091
f0112db0:	68 eb 05 00 00       	push   $0x5eb
f0112db5:	68 74 99 12 f0       	push   $0xf0129974
f0112dba:	e8 5b d5 fe ff       	call   f010031a <_panic>

f0112dbf <sys_check_LRU_lists>:
#include <kern/proc/user_environment.h>
#include <kern/mem/working_set_manager.h>

//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f0112dbf:	55                   	push   %ebp
f0112dc0:	89 e5                	mov    %esp,%ebp
f0112dc2:	83 ec 38             	sub    $0x38,%esp
	struct Env* cur_env = get_cpu_proc();
f0112dc5:	e8 a6 79 ff ff       	call   f010a770 <get_cpu_proc>
f0112dca:	89 45 e0             	mov    %eax,-0x20(%ebp)
	assert(cur_env != NULL);
f0112dcd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112dd1:	75 16                	jne    f0112de9 <sys_check_LRU_lists+0x2a>
f0112dd3:	68 a8 b0 12 f0       	push   $0xf012b0a8
f0112dd8:	68 b8 b0 12 f0       	push   $0xf012b0b8
f0112ddd:	6a 10                	push   $0x10
f0112ddf:	68 cd b0 12 f0       	push   $0xf012b0cd
f0112de4:	e8 31 d5 fe ff       	call   f010031a <_panic>
	cprintf("CURRENT WS CONTENT BEFORE CHECKING:\n");
f0112de9:	83 ec 0c             	sub    $0xc,%esp
f0112dec:	68 ec b0 12 f0       	push   $0xf012b0ec
f0112df1:	e8 76 e1 fe ff       	call   f0100f6c <cprintf>
f0112df6:	83 c4 10             	add    $0x10,%esp
	env_page_ws_print(cur_env);
f0112df9:	83 ec 0c             	sub    $0xc,%esp
f0112dfc:	ff 75 e0             	pushl  -0x20(%ebp)
f0112dff:	e8 04 62 ff ff       	call   f0109008 <env_page_ws_print>
f0112e04:	83 c4 10             	add    $0x10,%esp

	struct Env* env = cur_env;
f0112e07:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0112e0a:	89 45 dc             	mov    %eax,-0x24(%ebp)
	int active_list_validation = 1;
f0112e0d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	int second_list_validation = 1;
f0112e14:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f0112e1b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0112e1f:	0f 84 a5 00 00 00    	je     f0112eca <sys_check_LRU_lists+0x10b>
	{
		int idx_active_list = 0;
f0112e25:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0112e2c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112e2f:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f0112e35:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0112e38:	eb 4a                	jmp    f0112e84 <sys_check_LRU_lists+0xc5>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f0112e3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0112e3d:	8b 00                	mov    (%eax),%eax
f0112e3f:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0112e42:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112e45:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0112e4a:	89 c2                	mov    %eax,%edx
f0112e4c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0112e4f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0112e56:	8b 45 08             	mov    0x8(%ebp),%eax
f0112e59:	01 c8                	add    %ecx,%eax
f0112e5b:	8b 00                	mov    (%eax),%eax
f0112e5d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0112e60:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0112e63:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0112e68:	39 c2                	cmp    %eax,%edx
f0112e6a:	74 09                	je     f0112e75 <sys_check_LRU_lists+0xb6>
			{
				active_list_validation = 0;
f0112e6c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				break;
f0112e73:	eb 3e                	jmp    f0112eb3 <sys_check_LRU_lists+0xf4>
			}
			idx_active_list++;
f0112e75:	ff 45 e8             	incl   -0x18(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0112e78:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112e7b:	8b 80 18 da 01 00    	mov    0x1da18(%eax),%eax
f0112e81:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0112e84:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0112e88:	74 08                	je     f0112e92 <sys_check_LRU_lists+0xd3>
f0112e8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0112e8d:	8b 40 10             	mov    0x10(%eax),%eax
f0112e90:	eb 05                	jmp    f0112e97 <sys_check_LRU_lists+0xd8>
f0112e92:	b8 00 00 00 00       	mov    $0x0,%eax
f0112e97:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0112e9a:	89 82 18 da 01 00    	mov    %eax,0x1da18(%edx)
f0112ea0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112ea3:	8b 80 18 da 01 00    	mov    0x1da18(%eax),%eax
f0112ea9:	85 c0                	test   %eax,%eax
f0112eab:	75 8d                	jne    f0112e3a <sys_check_LRU_lists+0x7b>
f0112ead:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0112eb1:	75 87                	jne    f0112e3a <sys_check_LRU_lists+0x7b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f0112eb3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112eb6:	8b 90 1c da 01 00    	mov    0x1da1c(%eax),%edx
f0112ebc:	8b 45 10             	mov    0x10(%ebp),%eax
f0112ebf:	39 c2                	cmp    %eax,%edx
f0112ec1:	74 07                	je     f0112eca <sys_check_LRU_lists+0x10b>
		{
			active_list_validation = 0;
f0112ec3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f0112eca:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0112ece:	0f 84 a5 00 00 00    	je     f0112f79 <sys_check_LRU_lists+0x1ba>
	{
		int idx_second_list = 0;
f0112ed4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0112edb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112ede:	8b 80 20 da 01 00    	mov    0x1da20(%eax),%eax
f0112ee4:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0112ee7:	eb 4a                	jmp    f0112f33 <sys_check_LRU_lists+0x174>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f0112ee9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0112eec:	8b 00                	mov    (%eax),%eax
f0112eee:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112ef1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112ef4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0112ef9:	89 c2                	mov    %eax,%edx
f0112efb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112efe:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0112f05:	8b 45 0c             	mov    0xc(%ebp),%eax
f0112f08:	01 c8                	add    %ecx,%eax
f0112f0a:	8b 00                	mov    (%eax),%eax
f0112f0c:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0112f0f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0112f12:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0112f17:	39 c2                	cmp    %eax,%edx
f0112f19:	74 09                	je     f0112f24 <sys_check_LRU_lists+0x165>
			{
				second_list_validation = 0;
f0112f1b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				break;
f0112f22:	eb 3e                	jmp    f0112f62 <sys_check_LRU_lists+0x1a3>
			}
			idx_second_list++;
f0112f24:	ff 45 e4             	incl   -0x1c(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0112f27:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112f2a:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f0112f30:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0112f33:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0112f37:	74 08                	je     f0112f41 <sys_check_LRU_lists+0x182>
f0112f39:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0112f3c:	8b 40 10             	mov    0x10(%eax),%eax
f0112f3f:	eb 05                	jmp    f0112f46 <sys_check_LRU_lists+0x187>
f0112f41:	b8 00 00 00 00       	mov    $0x0,%eax
f0112f46:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0112f49:	89 82 28 da 01 00    	mov    %eax,0x1da28(%edx)
f0112f4f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112f52:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f0112f58:	85 c0                	test   %eax,%eax
f0112f5a:	75 8d                	jne    f0112ee9 <sys_check_LRU_lists+0x12a>
f0112f5c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0112f60:	75 87                	jne    f0112ee9 <sys_check_LRU_lists+0x12a>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f0112f62:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0112f65:	8b 90 2c da 01 00    	mov    0x1da2c(%eax),%edx
f0112f6b:	8b 45 14             	mov    0x14(%ebp),%eax
f0112f6e:	39 c2                	cmp    %eax,%edx
f0112f70:	74 07                	je     f0112f79 <sys_check_LRU_lists+0x1ba>
			second_list_validation = 0;
f0112f72:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	}
	return active_list_validation&second_list_validation;
f0112f79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0112f7c:	23 45 f0             	and    -0x10(%ebp),%eax
}
f0112f7f:	c9                   	leave  
f0112f80:	c3                   	ret    

f0112f81 <sys_check_LRU_lists_free>:


//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f0112f81:	55                   	push   %ebp
f0112f82:	89 e5                	mov    %esp,%ebp
f0112f84:	83 ec 38             	sub    $0x38,%esp
	struct Env* cur_env = get_cpu_proc();
f0112f87:	e8 e4 77 ff ff       	call   f010a770 <get_cpu_proc>
f0112f8c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	assert(cur_env != NULL);
f0112f8f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0112f93:	75 16                	jne    f0112fab <sys_check_LRU_lists_free+0x2a>
f0112f95:	68 a8 b0 12 f0       	push   $0xf012b0a8
f0112f9a:	68 b8 b0 12 f0       	push   $0xf012b0b8
f0112f9f:	6a 45                	push   $0x45
f0112fa1:	68 cd b0 12 f0       	push   $0xf012b0cd
f0112fa6:	e8 6f d3 fe ff       	call   f010031a <_panic>
	struct Env* env = cur_env;
f0112fab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0112fae:	89 45 e0             	mov    %eax,-0x20(%ebp)
	int list_validation_count = 0;
f0112fb1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0112fb8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0112fbb:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f0112fc1:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0112fc4:	eb 65                	jmp    f011302b <sys_check_LRU_lists_free+0xaa>
	{
		for(int var = 0; var < list_size; var++)
f0112fc6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0112fcd:	eb 3a                	jmp    f0113009 <sys_check_LRU_lists_free+0x88>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f0112fcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0112fd2:	8b 00                	mov    (%eax),%eax
f0112fd4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0112fd7:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0112fda:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0112fdf:	89 c2                	mov    %eax,%edx
f0112fe1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0112fe4:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0112feb:	8b 45 08             	mov    0x8(%ebp),%eax
f0112fee:	01 c8                	add    %ecx,%eax
f0112ff0:	8b 00                	mov    (%eax),%eax
f0112ff2:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112ff5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112ff8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0112ffd:	39 c2                	cmp    %eax,%edx
f0112fff:	75 05                	jne    f0113006 <sys_check_LRU_lists_free+0x85>
			{
				list_validation_count++;
f0113001:	ff 45 f4             	incl   -0xc(%ebp)
				break;
f0113004:	eb 0b                	jmp    f0113011 <sys_check_LRU_lists_free+0x90>
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f0113006:	ff 45 ec             	incl   -0x14(%ebp)
f0113009:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011300c:	3b 45 0c             	cmp    0xc(%ebp),%eax
f011300f:	7c be                	jl     f0112fcf <sys_check_LRU_lists_free+0x4e>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f0113011:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0113015:	7e 08                	jle    f011301f <sys_check_LRU_lists_free+0x9e>
			return list_validation_count;
f0113017:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011301a:	e9 ed 00 00 00       	jmp    f011310c <sys_check_LRU_lists_free+0x18b>
	assert(cur_env != NULL);
	struct Env* env = cur_env;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f011301f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0113022:	8b 80 18 da 01 00    	mov    0x1da18(%eax),%eax
f0113028:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011302b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011302f:	74 08                	je     f0113039 <sys_check_LRU_lists_free+0xb8>
f0113031:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0113034:	8b 40 10             	mov    0x10(%eax),%eax
f0113037:	eb 05                	jmp    f011303e <sys_check_LRU_lists_free+0xbd>
f0113039:	b8 00 00 00 00       	mov    $0x0,%eax
f011303e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0113041:	89 82 18 da 01 00    	mov    %eax,0x1da18(%edx)
f0113047:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011304a:	8b 80 18 da 01 00    	mov    0x1da18(%eax),%eax
f0113050:	85 c0                	test   %eax,%eax
f0113052:	0f 85 6e ff ff ff    	jne    f0112fc6 <sys_check_LRU_lists_free+0x45>
f0113058:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011305c:	0f 85 64 ff ff ff    	jne    f0112fc6 <sys_check_LRU_lists_free+0x45>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0113062:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0113065:	8b 80 20 da 01 00    	mov    0x1da20(%eax),%eax
f011306b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011306e:	eb 62                	jmp    f01130d2 <sys_check_LRU_lists_free+0x151>
	{
		for(int var = 0; var < list_size; var++)
f0113070:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0113077:	eb 3a                	jmp    f01130b3 <sys_check_LRU_lists_free+0x132>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f0113079:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011307c:	8b 00                	mov    (%eax),%eax
f011307e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0113081:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113084:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0113089:	89 c2                	mov    %eax,%edx
f011308b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011308e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0113095:	8b 45 08             	mov    0x8(%ebp),%eax
f0113098:	01 c8                	add    %ecx,%eax
f011309a:	8b 00                	mov    (%eax),%eax
f011309c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011309f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01130a2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01130a7:	39 c2                	cmp    %eax,%edx
f01130a9:	75 05                	jne    f01130b0 <sys_check_LRU_lists_free+0x12f>
			{
				list_validation_count++;
f01130ab:	ff 45 f4             	incl   -0xc(%ebp)
				break;
f01130ae:	eb 0b                	jmp    f01130bb <sys_check_LRU_lists_free+0x13a>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f01130b0:	ff 45 e8             	incl   -0x18(%ebp)
f01130b3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01130b6:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01130b9:	7c be                	jl     f0113079 <sys_check_LRU_lists_free+0xf8>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f01130bb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01130bf:	7e 05                	jle    f01130c6 <sys_check_LRU_lists_free+0x145>
			return list_validation_count;
f01130c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01130c4:	eb 46                	jmp    f011310c <sys_check_LRU_lists_free+0x18b>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f01130c6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01130c9:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f01130cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01130d2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01130d6:	74 08                	je     f01130e0 <sys_check_LRU_lists_free+0x15f>
f01130d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01130db:	8b 40 10             	mov    0x10(%eax),%eax
f01130de:	eb 05                	jmp    f01130e5 <sys_check_LRU_lists_free+0x164>
f01130e0:	b8 00 00 00 00       	mov    $0x0,%eax
f01130e5:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01130e8:	89 82 28 da 01 00    	mov    %eax,0x1da28(%edx)
f01130ee:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01130f1:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f01130f7:	85 c0                	test   %eax,%eax
f01130f9:	0f 85 71 ff ff ff    	jne    f0113070 <sys_check_LRU_lists_free+0xef>
f01130ff:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0113103:	0f 85 67 ff ff ff    	jne    f0113070 <sys_check_LRU_lists_free+0xef>
			return list_validation_count;

	}


	return list_validation_count;
f0113109:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f011310c:	c9                   	leave  
f011310d:	c3                   	ret    

f011310e <sys_check_WS_list>:
 * = 1: check entire list (order is important)
 * = 2: check only the existence of the given set of elements
 * = 3: check only the NOT existence of the given set of elements
 */
int sys_check_WS_list(uint32* WS_list_content, int actual_WS_list_size, uint32 last_WS_element_content, bool chk_status)
{
f011310e:	55                   	push   %ebp
f011310f:	89 e5                	mov    %esp,%ebp
f0113111:	83 ec 08             	sub    $0x8,%esp
		}
	}

	return WS_list_validation;
#else
	panic("sys_check_WS_list: this function is intended to be used when USE_KHEAP = 1");
f0113114:	83 ec 04             	sub    $0x4,%esp
f0113117:	68 14 b1 12 f0       	push   $0xf012b114
f011311c:	68 ea 00 00 00       	push   $0xea
f0113121:	68 cd b0 12 f0       	push   $0xf012b0cd
f0113126:	e8 ef d1 fe ff       	call   f010031a <_panic>

f011312b <hasExpectedCommands>:
	cprintf("=================\n\n");
	return 0;
}*/

int hasExpectedCommands(char **expectedCommands, int commandsCount)
{
f011312b:	55                   	push   %ebp
f011312c:	89 e5                	mov    %esp,%ebp
f011312e:	83 ec 18             	sub    $0x18,%esp
	struct Command *cmd = NULL;
f0113131:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (LIST_SIZE(&foundCommands) != commandsCount)
f0113138:	8b 15 18 1b 5a f0    	mov    0xf05a1b18,%edx
f011313e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0113141:	39 c2                	cmp    %eax,%edx
f0113143:	74 0a                	je     f011314f <hasExpectedCommands+0x24>
		return 0;
f0113145:	b8 00 00 00 00       	mov    $0x0,%eax
f011314a:	e9 8b 00 00 00       	jmp    f01131da <hasExpectedCommands+0xaf>

	LIST_FOREACH(cmd, &foundCommands)
f011314f:	a1 0c 1b 5a f0       	mov    0xf05a1b0c,%eax
f0113154:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0113157:	eb 55                	jmp    f01131ae <hasExpectedCommands+0x83>
	{
		int i;
		for (i = 0; i < commandsCount; i++)
f0113159:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0113160:	eb 2a                	jmp    f011318c <hasExpectedCommands+0x61>
			if (strcmp(cmd->name, expectedCommands[i]) == 0)
f0113162:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0113165:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011316c:	8b 45 08             	mov    0x8(%ebp),%eax
f011316f:	01 d0                	add    %edx,%eax
f0113171:	8b 10                	mov    (%eax),%edx
f0113173:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0113176:	8b 00                	mov    (%eax),%eax
f0113178:	83 ec 08             	sub    $0x8,%esp
f011317b:	52                   	push   %edx
f011317c:	50                   	push   %eax
f011317d:	e8 c2 f3 00 00       	call   f0122544 <strcmp>
f0113182:	83 c4 10             	add    $0x10,%esp
f0113185:	85 c0                	test   %eax,%eax
f0113187:	74 0d                	je     f0113196 <hasExpectedCommands+0x6b>
		return 0;

	LIST_FOREACH(cmd, &foundCommands)
	{
		int i;
		for (i = 0; i < commandsCount; i++)
f0113189:	ff 45 f0             	incl   -0x10(%ebp)
f011318c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011318f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0113192:	7c ce                	jl     f0113162 <hasExpectedCommands+0x37>
f0113194:	eb 01                	jmp    f0113197 <hasExpectedCommands+0x6c>
			if (strcmp(cmd->name, expectedCommands[i]) == 0)
				break;
f0113196:	90                   	nop
		if (i == commandsCount)
f0113197:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011319a:	3b 45 0c             	cmp    0xc(%ebp),%eax
f011319d:	75 07                	jne    f01131a6 <hasExpectedCommands+0x7b>
			return 0;
f011319f:	b8 00 00 00 00       	mov    $0x0,%eax
f01131a4:	eb 34                	jmp    f01131da <hasExpectedCommands+0xaf>
{
	struct Command *cmd = NULL;
	if (LIST_SIZE(&foundCommands) != commandsCount)
		return 0;

	LIST_FOREACH(cmd, &foundCommands)
f01131a6:	a1 14 1b 5a f0       	mov    0xf05a1b14,%eax
f01131ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01131ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01131b2:	74 08                	je     f01131bc <hasExpectedCommands+0x91>
f01131b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01131b7:	8b 40 10             	mov    0x10(%eax),%eax
f01131ba:	eb 05                	jmp    f01131c1 <hasExpectedCommands+0x96>
f01131bc:	b8 00 00 00 00       	mov    $0x0,%eax
f01131c1:	a3 14 1b 5a f0       	mov    %eax,0xf05a1b14
f01131c6:	a1 14 1b 5a f0       	mov    0xf05a1b14,%eax
f01131cb:	85 c0                	test   %eax,%eax
f01131cd:	75 8a                	jne    f0113159 <hasExpectedCommands+0x2e>
f01131cf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01131d3:	75 84                	jne    f0113159 <hasExpectedCommands+0x2e>
			if (strcmp(cmd->name, expectedCommands[i]) == 0)
				break;
		if (i == commandsCount)
			return 0;
	}
	return 1;
f01131d5:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01131da:	c9                   	leave  
f01131db:	c3                   	ret    

f01131dc <getIndexOfCommand>:

int getIndexOfCommand(const char *commandName)
{
f01131dc:	55                   	push   %ebp
f01131dd:	89 e5                	mov    %esp,%ebp
f01131df:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01131e2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01131e9:	eb 2e                	jmp    f0113219 <getIndexOfCommand+0x3d>
		if (strcmp(commands[i].name, commandName) == 0)
f01131eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01131ee:	89 d0                	mov    %edx,%eax
f01131f0:	01 c0                	add    %eax,%eax
f01131f2:	01 d0                	add    %edx,%eax
f01131f4:	c1 e0 03             	shl    $0x3,%eax
f01131f7:	05 40 d5 17 f0       	add    $0xf017d540,%eax
f01131fc:	8b 00                	mov    (%eax),%eax
f01131fe:	83 ec 08             	sub    $0x8,%esp
f0113201:	ff 75 08             	pushl  0x8(%ebp)
f0113204:	50                   	push   %eax
f0113205:	e8 3a f3 00 00       	call   f0122544 <strcmp>
f011320a:	83 c4 10             	add    $0x10,%esp
f011320d:	85 c0                	test   %eax,%eax
f011320f:	75 05                	jne    f0113216 <getIndexOfCommand+0x3a>
			return i;
f0113211:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0113214:	eb 14                	jmp    f011322a <getIndexOfCommand+0x4e>
}

int getIndexOfCommand(const char *commandName)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0113216:	ff 45 f4             	incl   -0xc(%ebp)
f0113219:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011321c:	a1 48 d9 17 f0       	mov    0xf017d948,%eax
f0113221:	39 c2                	cmp    %eax,%edx
f0113223:	72 c6                	jb     f01131eb <getIndexOfCommand+0xf>
		if (strcmp(commands[i].name, commandName) == 0)
			return i;
	return -404;
f0113225:	b8 6c fe ff ff       	mov    $0xfffffe6c,%eax
}
f011322a:	c9                   	leave  
f011322b:	c3                   	ret    

f011322c <TestAutoCompleteCommand>:

int TestAutoCompleteCommand()
{
f011322c:	55                   	push   %ebp
f011322d:	89 e5                	mov    %esp,%ebp
f011322f:	57                   	push   %edi
f0113230:	56                   	push   %esi
f0113231:	53                   	push   %ebx
f0113232:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f0113238:	83 ec 0c             	sub    $0xc,%esp
f011323b:	68 60 b1 12 f0       	push   $0xf012b160
f0113240:	e8 27 dd fe ff       	call   f0100f6c <cprintf>
f0113245:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f0113248:	83 ec 0c             	sub    $0xc,%esp
f011324b:	68 84 b1 12 f0       	push   $0xf012b184
f0113250:	e8 17 dd fe ff       	call   f0100f6c <cprintf>
f0113255:	83 c4 10             	add    $0x10,%esp

	// CASE1: command is found with correct number of arguments
	int eval = 0;
f0113258:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	char *args1[] = {"kernel_info"};
f011325f:	c7 45 8c 9f b1 12 f0 	movl   $0xf012b19f,-0x74(%ebp)
	int ret = process_command(ARRAY_LENGTH(args1), args1);
f0113266:	83 ec 08             	sub    $0x8,%esp
f0113269:	8d 45 8c             	lea    -0x74(%ebp),%eax
f011326c:	50                   	push   %eax
f011326d:	6a 01                	push   $0x1
f011326f:	e8 3d ef fe ff       	call   f01021b1 <process_command>
f0113274:	83 c4 10             	add    $0x10,%esp
f0113277:	89 45 e0             	mov    %eax,-0x20(%ebp)
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f011327a:	83 ec 0c             	sub    $0xc,%esp
f011327d:	68 ac b1 12 f0       	push   $0xf012b1ac
f0113282:	e8 e5 dc fe ff       	call   f0100f6c <cprintf>
f0113287:	83 c4 10             	add    $0x10,%esp
	if (ret == getIndexOfCommand(args1[0]) && LIST_EMPTY(&foundCommands))
f011328a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011328d:	83 ec 0c             	sub    $0xc,%esp
f0113290:	50                   	push   %eax
f0113291:	e8 46 ff ff ff       	call   f01131dc <getIndexOfCommand>
f0113296:	83 c4 10             	add    $0x10,%esp
f0113299:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011329c:	75 0f                	jne    f01132ad <TestAutoCompleteCommand+0x81>
f011329e:	a1 0c 1b 5a f0       	mov    0xf05a1b0c,%eax
f01132a3:	85 c0                	test   %eax,%eax
f01132a5:	75 06                	jne    f01132ad <TestAutoCompleteCommand+0x81>
		eval += 15;
f01132a7:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
f01132ab:	eb 10                	jmp    f01132bd <TestAutoCompleteCommand+0x91>
	else
		cprintf("#1: WRONG - process_command return wrong value or foundCommands is not empty.\n");
f01132ad:	83 ec 0c             	sub    $0xc,%esp
f01132b0:	68 dc b1 12 f0       	push   $0xf012b1dc
f01132b5:	e8 b2 dc fe ff       	call   f0100f6c <cprintf>
f01132ba:	83 c4 10             	add    $0x10,%esp

	// CASE2: command is not found BUT its chars are subsequence-matched with one or more commands
	// should print the commands that contains "clk" as subsequence
	cprintf("==>Testing now AUTOCOMPLETE for: clk\n");
f01132bd:	83 ec 0c             	sub    $0xc,%esp
f01132c0:	68 2c b2 12 f0       	push   $0xf012b22c
f01132c5:	e8 a2 dc fe ff       	call   f0100f6c <cprintf>
f01132ca:	83 c4 10             	add    $0x10,%esp
	char *args2[] = {"clk"};
f01132cd:	c7 45 88 52 b2 12 f0 	movl   $0xf012b252,-0x78(%ebp)
	ret = process_command(ARRAY_LENGTH(args2), args2);
f01132d4:	83 ec 08             	sub    $0x8,%esp
f01132d7:	8d 45 88             	lea    -0x78(%ebp),%eax
f01132da:	50                   	push   %eax
f01132db:	6a 01                	push   $0x1
f01132dd:	e8 cf ee fe ff       	call   f01021b1 <process_command>
f01132e2:	83 c4 10             	add    $0x10,%esp
f01132e5:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == CMD_MATCHED && hasExpectedCommands((char *[]){"clock", "modifiedclock", "nclock"}, 3))
f01132e8:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f01132ec:	75 30                	jne    f011331e <TestAutoCompleteCommand+0xf2>
f01132ee:	8d 45 90             	lea    -0x70(%ebp),%eax
f01132f1:	bb 30 b6 12 f0       	mov    $0xf012b630,%ebx
f01132f6:	ba 03 00 00 00       	mov    $0x3,%edx
f01132fb:	89 c7                	mov    %eax,%edi
f01132fd:	89 de                	mov    %ebx,%esi
f01132ff:	89 d1                	mov    %edx,%ecx
f0113301:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0113303:	83 ec 08             	sub    $0x8,%esp
f0113306:	6a 03                	push   $0x3
f0113308:	8d 45 90             	lea    -0x70(%ebp),%eax
f011330b:	50                   	push   %eax
f011330c:	e8 1a fe ff ff       	call   f011312b <hasExpectedCommands>
f0113311:	83 c4 10             	add    $0x10,%esp
f0113314:	85 c0                	test   %eax,%eax
f0113316:	74 06                	je     f011331e <TestAutoCompleteCommand+0xf2>
		eval += 15;
f0113318:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
f011331c:	eb 10                	jmp    f011332e <TestAutoCompleteCommand+0x102>
	else
		cprintf("#2: WRONG - process_command return wrong value or foundCommands is not empty.\n");
f011331e:	83 ec 0c             	sub    $0xc,%esp
f0113321:	68 58 b2 12 f0       	push   $0xf012b258
f0113326:	e8 41 dc fe ff       	call   f0100f6c <cprintf>
f011332b:	83 c4 10             	add    $0x10,%esp

	// CASE3: should print invalid number of args
	cprintf("==>Testing now AUTOCOMPLETE for: wm\n");
f011332e:	83 ec 0c             	sub    $0xc,%esp
f0113331:	68 a8 b2 12 f0       	push   $0xf012b2a8
f0113336:	e8 31 dc fe ff       	call   f0100f6c <cprintf>
f011333b:	83 c4 10             	add    $0x10,%esp
	char *args3[] = {"wm"};
f011333e:	c7 45 84 cd b2 12 f0 	movl   $0xf012b2cd,-0x7c(%ebp)
	cprintf("va of args3 = %x, *args3 = %x\n", args3, *args3);
f0113345:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0113348:	83 ec 04             	sub    $0x4,%esp
f011334b:	50                   	push   %eax
f011334c:	8d 45 84             	lea    -0x7c(%ebp),%eax
f011334f:	50                   	push   %eax
f0113350:	68 d0 b2 12 f0       	push   $0xf012b2d0
f0113355:	e8 12 dc fe ff       	call   f0100f6c <cprintf>
f011335a:	83 c4 10             	add    $0x10,%esp
	ret = process_command(ARRAY_LENGTH(args3), args3);
f011335d:	83 ec 08             	sub    $0x8,%esp
f0113360:	8d 45 84             	lea    -0x7c(%ebp),%eax
f0113363:	50                   	push   %eax
f0113364:	6a 01                	push   $0x1
f0113366:	e8 46 ee fe ff       	call   f01021b1 <process_command>
f011336b:	83 c4 10             	add    $0x10,%esp
f011336e:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == CMD_INV_NUM_ARGS && hasExpectedCommands(args3, 1))
f0113371:	83 7d e0 fe          	cmpl   $0xfffffffe,-0x20(%ebp)
f0113375:	75 1b                	jne    f0113392 <TestAutoCompleteCommand+0x166>
f0113377:	83 ec 08             	sub    $0x8,%esp
f011337a:	6a 01                	push   $0x1
f011337c:	8d 45 84             	lea    -0x7c(%ebp),%eax
f011337f:	50                   	push   %eax
f0113380:	e8 a6 fd ff ff       	call   f011312b <hasExpectedCommands>
f0113385:	83 c4 10             	add    $0x10,%esp
f0113388:	85 c0                	test   %eax,%eax
f011338a:	74 06                	je     f0113392 <TestAutoCompleteCommand+0x166>
		eval += 15;
f011338c:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
f0113390:	eb 10                	jmp    f01133a2 <TestAutoCompleteCommand+0x176>
	else
		cprintf("#3: WRONG - process_command return wrong value or foundCommands contains wrong values.\n");
f0113392:	83 ec 0c             	sub    $0xc,%esp
f0113395:	68 f0 b2 12 f0       	push   $0xf012b2f0
f011339a:	e8 cd db fe ff       	call   f0100f6c <cprintf>
f011339f:	83 c4 10             	add    $0x10,%esp

	// CASE4: should print invalid command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f01133a2:	83 ec 0c             	sub    $0xc,%esp
f01133a5:	68 48 b3 12 f0       	push   $0xf012b348
f01133aa:	e8 bd db fe ff       	call   f0100f6c <cprintf>
f01133af:	83 c4 10             	add    $0x10,%esp
	char *args4[] = {"smm"};
f01133b2:	c7 45 80 6e b3 12 f0 	movl   $0xf012b36e,-0x80(%ebp)
	ret = process_command(ARRAY_LENGTH(args4), args4);
f01133b9:	83 ec 08             	sub    $0x8,%esp
f01133bc:	8d 45 80             	lea    -0x80(%ebp),%eax
f01133bf:	50                   	push   %eax
f01133c0:	6a 01                	push   $0x1
f01133c2:	e8 ea ed fe ff       	call   f01021b1 <process_command>
f01133c7:	83 c4 10             	add    $0x10,%esp
f01133ca:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == CMD_INVALID && LIST_SIZE(&foundCommands) == 0)
f01133cd:	83 7d e0 fd          	cmpl   $0xfffffffd,-0x20(%ebp)
f01133d1:	75 0f                	jne    f01133e2 <TestAutoCompleteCommand+0x1b6>
f01133d3:	a1 18 1b 5a f0       	mov    0xf05a1b18,%eax
f01133d8:	85 c0                	test   %eax,%eax
f01133da:	75 06                	jne    f01133e2 <TestAutoCompleteCommand+0x1b6>
		eval += 15;
f01133dc:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
f01133e0:	eb 10                	jmp    f01133f2 <TestAutoCompleteCommand+0x1c6>
	else
		cprintf("#4: WRONG - process_command return wrong value or foundCommands is not empty.\n");
f01133e2:	83 ec 0c             	sub    $0xc,%esp
f01133e5:	68 74 b3 12 f0       	push   $0xf012b374
f01133ea:	e8 7d db fe ff       	call   f0100f6c <cprintf>
f01133ef:	83 c4 10             	add    $0x10,%esp

	// CASE5: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f01133f2:	83 ec 0c             	sub    $0xc,%esp
f01133f5:	68 c4 b3 12 f0       	push   $0xf012b3c4
f01133fa:	e8 6d db fe ff       	call   f0100f6c <cprintf>
f01133ff:	83 c4 10             	add    $0x10,%esp
	char *args5[] = {"he"};
f0113402:	c7 85 7c ff ff ff e9 	movl   $0xf012b3e9,-0x84(%ebp)
f0113409:	b3 12 f0 
	ret = process_command(ARRAY_LENGTH(args5), args5);
f011340c:	83 ec 08             	sub    $0x8,%esp
f011340f:	8d 85 7c ff ff ff    	lea    -0x84(%ebp),%eax
f0113415:	50                   	push   %eax
f0113416:	6a 01                	push   $0x1
f0113418:	e8 94 ed fe ff       	call   f01021b1 <process_command>
f011341d:	83 c4 10             	add    $0x10,%esp
f0113420:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == CMD_MATCHED && hasExpectedCommands((char *[]){"help", "sched?", "uhbestfit", "uhnextfit", "uheap?", "khbestfit", "khnextfit", "kheap?", "schedRR", "schedTest", "schedBSD", "schedMLFQ"}, 12))
f0113423:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f0113427:	75 30                	jne    f0113459 <TestAutoCompleteCommand+0x22d>
f0113429:	8d 45 9c             	lea    -0x64(%ebp),%eax
f011342c:	bb c0 b6 12 f0       	mov    $0xf012b6c0,%ebx
f0113431:	ba 0c 00 00 00       	mov    $0xc,%edx
f0113436:	89 c7                	mov    %eax,%edi
f0113438:	89 de                	mov    %ebx,%esi
f011343a:	89 d1                	mov    %edx,%ecx
f011343c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f011343e:	83 ec 08             	sub    $0x8,%esp
f0113441:	6a 0c                	push   $0xc
f0113443:	8d 45 9c             	lea    -0x64(%ebp),%eax
f0113446:	50                   	push   %eax
f0113447:	e8 df fc ff ff       	call   f011312b <hasExpectedCommands>
f011344c:	83 c4 10             	add    $0x10,%esp
f011344f:	85 c0                	test   %eax,%eax
f0113451:	74 06                	je     f0113459 <TestAutoCompleteCommand+0x22d>
		eval += 10;
f0113453:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
f0113457:	eb 10                	jmp    f0113469 <TestAutoCompleteCommand+0x23d>
	else
		cprintf("#5: WRONG - process_command return wrong value or foundCommands is has wrong values.\n");
f0113459:	83 ec 0c             	sub    $0xc,%esp
f011345c:	68 ec b3 12 f0       	push   $0xf012b3ec
f0113461:	e8 06 db fe ff       	call   f0100f6c <cprintf>
f0113466:	83 c4 10             	add    $0x10,%esp

	// CASE6: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f0113469:	83 ec 0c             	sub    $0xc,%esp
f011346c:	68 44 b4 12 f0       	push   $0xf012b444
f0113471:	e8 f6 da fe ff       	call   f0100f6c <cprintf>
f0113476:	83 c4 10             	add    $0x10,%esp
	char *args6[] = {"ru"};
f0113479:	c7 85 78 ff ff ff 69 	movl   $0xf012b469,-0x88(%ebp)
f0113480:	b4 12 f0 
	ret = process_command(ARRAY_LENGTH(args6), args6);
f0113483:	83 ec 08             	sub    $0x8,%esp
f0113486:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f011348c:	50                   	push   %eax
f011348d:	6a 01                	push   $0x1
f011348f:	e8 1d ed fe ff       	call   f01021b1 <process_command>
f0113494:	83 c4 10             	add    $0x10,%esp
f0113497:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == CMD_MATCHED && hasExpectedCommands((char *[]){"runall", "lru", "rub", "run", "rum"}, 5))
f011349a:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f011349e:	75 30                	jne    f01134d0 <TestAutoCompleteCommand+0x2a4>
f01134a0:	8d 45 cc             	lea    -0x34(%ebp),%eax
f01134a3:	bb 08 b7 12 f0       	mov    $0xf012b708,%ebx
f01134a8:	ba 05 00 00 00       	mov    $0x5,%edx
f01134ad:	89 c7                	mov    %eax,%edi
f01134af:	89 de                	mov    %ebx,%esi
f01134b1:	89 d1                	mov    %edx,%ecx
f01134b3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01134b5:	83 ec 08             	sub    $0x8,%esp
f01134b8:	6a 05                	push   $0x5
f01134ba:	8d 45 cc             	lea    -0x34(%ebp),%eax
f01134bd:	50                   	push   %eax
f01134be:	e8 68 fc ff ff       	call   f011312b <hasExpectedCommands>
f01134c3:	83 c4 10             	add    $0x10,%esp
f01134c6:	85 c0                	test   %eax,%eax
f01134c8:	74 06                	je     f01134d0 <TestAutoCompleteCommand+0x2a4>
		eval += 10;
f01134ca:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
f01134ce:	eb 10                	jmp    f01134e0 <TestAutoCompleteCommand+0x2b4>
	else
		cprintf("#6: WRONG - process_command return wrong value. or foundCommands is has wrong values.\n");
f01134d0:	83 ec 0c             	sub    $0xc,%esp
f01134d3:	68 6c b4 12 f0       	push   $0xf012b46c
f01134d8:	e8 8f da fe ff       	call   f0100f6c <cprintf>
f01134dd:	83 c4 10             	add    $0x10,%esp

	// CASE7: command is found with correct number of arguments
	cprintf("==>Testing now AUTOCOMPLETE for: load game\n");
f01134e0:	83 ec 0c             	sub    $0xc,%esp
f01134e3:	68 c4 b4 12 f0       	push   $0xf012b4c4
f01134e8:	e8 7f da fe ff       	call   f0100f6c <cprintf>
f01134ed:	83 c4 10             	add    $0x10,%esp
	char *args7[] = {"load", "game"};
f01134f0:	c7 85 70 ff ff ff f0 	movl   $0xf012b4f0,-0x90(%ebp)
f01134f7:	b4 12 f0 
f01134fa:	c7 85 74 ff ff ff f5 	movl   $0xf012b4f5,-0x8c(%ebp)
f0113501:	b4 12 f0 
	ret = process_command(ARRAY_LENGTH(args7), args7);
f0113504:	83 ec 08             	sub    $0x8,%esp
f0113507:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f011350d:	50                   	push   %eax
f011350e:	6a 02                	push   $0x2
f0113510:	e8 9c ec fe ff       	call   f01021b1 <process_command>
f0113515:	83 c4 10             	add    $0x10,%esp
f0113518:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == getIndexOfCommand(args7[0]) && LIST_EMPTY(&foundCommands))
f011351b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0113521:	83 ec 0c             	sub    $0xc,%esp
f0113524:	50                   	push   %eax
f0113525:	e8 b2 fc ff ff       	call   f01131dc <getIndexOfCommand>
f011352a:	83 c4 10             	add    $0x10,%esp
f011352d:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0113530:	75 0f                	jne    f0113541 <TestAutoCompleteCommand+0x315>
f0113532:	a1 0c 1b 5a f0       	mov    0xf05a1b0c,%eax
f0113537:	85 c0                	test   %eax,%eax
f0113539:	75 06                	jne    f0113541 <TestAutoCompleteCommand+0x315>
		eval += 10;
f011353b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
f011353f:	eb 10                	jmp    f0113551 <TestAutoCompleteCommand+0x325>
	else
		cprintf("#7: WRONG - process_command return wrong value or foundCommands is not empty.\n");
f0113541:	83 ec 0c             	sub    $0xc,%esp
f0113544:	68 fc b4 12 f0       	push   $0xf012b4fc
f0113549:	e8 1e da fe ff       	call   f0100f6c <cprintf>
f011354e:	83 c4 10             	add    $0x10,%esp

	// CASE8: command is found with correct number of arguments
	cprintf("==>Testing now AUTOCOMPLETE for: wum 0xF0000000 M\n");
f0113551:	83 ec 0c             	sub    $0xc,%esp
f0113554:	68 4c b5 12 f0       	push   $0xf012b54c
f0113559:	e8 0e da fe ff       	call   f0100f6c <cprintf>
f011355e:	83 c4 10             	add    $0x10,%esp
	char *args8[] = {"wum", "0xF0000000", "M"};
f0113561:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f0113567:	bb 30 b7 12 f0       	mov    $0xf012b730,%ebx
f011356c:	ba 03 00 00 00       	mov    $0x3,%edx
f0113571:	89 c7                	mov    %eax,%edi
f0113573:	89 de                	mov    %ebx,%esi
f0113575:	89 d1                	mov    %edx,%ecx
f0113577:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	ret = process_command(ARRAY_LENGTH(args8), args8);
f0113579:	83 ec 08             	sub    $0x8,%esp
f011357c:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f0113582:	50                   	push   %eax
f0113583:	6a 03                	push   $0x3
f0113585:	e8 27 ec fe ff       	call   f01021b1 <process_command>
f011358a:	83 c4 10             	add    $0x10,%esp
f011358d:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == getIndexOfCommand(args8[0]) && LIST_EMPTY(&foundCommands))
f0113590:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0113596:	83 ec 0c             	sub    $0xc,%esp
f0113599:	50                   	push   %eax
f011359a:	e8 3d fc ff ff       	call   f01131dc <getIndexOfCommand>
f011359f:	83 c4 10             	add    $0x10,%esp
f01135a2:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f01135a5:	75 0f                	jne    f01135b6 <TestAutoCompleteCommand+0x38a>
f01135a7:	a1 0c 1b 5a f0       	mov    0xf05a1b0c,%eax
f01135ac:	85 c0                	test   %eax,%eax
f01135ae:	75 06                	jne    f01135b6 <TestAutoCompleteCommand+0x38a>
		eval += 10;
f01135b0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
f01135b4:	eb 10                	jmp    f01135c6 <TestAutoCompleteCommand+0x39a>
	else
		cprintf("#8: WRONG - process_command return wrong value or foundCommands is not empty.\n");
f01135b6:	83 ec 0c             	sub    $0xc,%esp
f01135b9:	68 80 b5 12 f0       	push   $0xf012b580
f01135be:	e8 a9 d9 fe ff       	call   f0100f6c <cprintf>
f01135c3:	83 c4 10             	add    $0x10,%esp

	cprintf("test autocomplete completed. Evaluation = %d%%\n", eval);
f01135c6:	83 ec 08             	sub    $0x8,%esp
f01135c9:	ff 75 e4             	pushl  -0x1c(%ebp)
f01135cc:	68 d0 b5 12 f0       	push   $0xf012b5d0
f01135d1:	e8 96 d9 fe ff       	call   f0100f6c <cprintf>
f01135d6:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01135d9:	83 ec 0c             	sub    $0xc,%esp
f01135dc:	68 00 b6 12 f0       	push   $0xf012b600
f01135e1:	e8 86 d9 fe ff       	call   f0100f6c <cprintf>
f01135e6:	83 c4 10             	add    $0x10,%esp

	return 0;
f01135e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01135ee:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01135f1:	5b                   	pop    %ebx
f01135f2:	5e                   	pop    %esi
f01135f3:	5f                   	pop    %edi
f01135f4:	5d                   	pop    %ebp
f01135f5:	c3                   	ret    

f01135f6 <test_str2lower_function>:

int test_str2lower_function()
{
f01135f6:	55                   	push   %ebp
f01135f7:	89 e5                	mov    %esp,%ebp
f01135f9:	81 ec f8 02 00 00    	sub    $0x2f8,%esp
	cprintf("Automatic Testing of str2lower:\n");
f01135ff:	83 ec 0c             	sub    $0xc,%esp
f0113602:	68 3c b7 12 f0       	push   $0xf012b73c
f0113607:	e8 60 d9 fe ff       	call   f0100f6c <cprintf>
f011360c:	83 c4 10             	add    $0x10,%esp
	cprintf("========================\n");
f011360f:	83 ec 0c             	sub    $0xc,%esp
f0113612:	68 5d b7 12 f0       	push   $0xf012b75d
f0113617:	e8 50 d9 fe ff       	call   f0100f6c <cprintf>
f011361c:	83 c4 10             	add    $0x10,%esp
	int i = 0;
f011361f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int eval = 0;
f0113626:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	// CASE1: input string in lower case
	const char *src1 = "HelloWorld";
f011362d:	c7 45 ec 77 b7 12 f0 	movl   $0xf012b777,-0x14(%ebp)
	char dst1[100];
	char *result = str2lower(dst1, src1);
f0113634:	83 ec 08             	sub    $0x8,%esp
f0113637:	ff 75 ec             	pushl  -0x14(%ebp)
f011363a:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
f0113640:	50                   	push   %eax
f0113641:	e8 db f4 00 00       	call   f0122b21 <str2lower>
f0113646:	83 c4 10             	add    $0x10,%esp
f0113649:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int resultLength = strlen(result);
f011364c:	83 ec 0c             	sub    $0xc,%esp
f011364f:	ff 75 e8             	pushl  -0x18(%ebp)
f0113652:	e8 e1 ed 00 00       	call   f0122438 <strlen>
f0113657:	83 c4 10             	add    $0x10,%esp
f011365a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "helloworld") != 0 || resultLength != strlen(src1))
f011365d:	83 ec 08             	sub    $0x8,%esp
f0113660:	68 82 b7 12 f0       	push   $0xf012b782
f0113665:	ff 75 e8             	pushl  -0x18(%ebp)
f0113668:	e8 d7 ee 00 00       	call   f0122544 <strcmp>
f011366d:	83 c4 10             	add    $0x10,%esp
f0113670:	85 c0                	test   %eax,%eax
f0113672:	75 13                	jne    f0113687 <test_str2lower_function+0x91>
f0113674:	83 ec 0c             	sub    $0xc,%esp
f0113677:	ff 75 ec             	pushl  -0x14(%ebp)
f011367a:	e8 b9 ed 00 00       	call   f0122438 <strlen>
f011367f:	83 c4 10             	add    $0x10,%esp
f0113682:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0113685:	74 15                	je     f011369c <test_str2lower_function+0xa6>
		cprintf("str2lower #1: WRONG - str2lower return wrong value or length. Expected \"helloworld\", Actual \"%s\"\n", result);
f0113687:	83 ec 08             	sub    $0x8,%esp
f011368a:	ff 75 e8             	pushl  -0x18(%ebp)
f011368d:	68 90 b7 12 f0       	push   $0xf012b790
f0113692:	e8 d5 d8 fe ff       	call   f0100f6c <cprintf>
f0113697:	83 c4 10             	add    $0x10,%esp
f011369a:	eb 04                	jmp    f01136a0 <test_str2lower_function+0xaa>
	else
		eval += 10;
f011369c:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	// CASE2: input string is empty
	const char *src2 = "";
f01136a0:	c7 45 e0 f2 b7 12 f0 	movl   $0xf012b7f2,-0x20(%ebp)
	char dst2[100];
	result = str2lower(dst2, src2);
f01136a7:	83 ec 08             	sub    $0x8,%esp
f01136aa:	ff 75 e0             	pushl  -0x20(%ebp)
f01136ad:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01136b3:	50                   	push   %eax
f01136b4:	e8 68 f4 00 00       	call   f0122b21 <str2lower>
f01136b9:	83 c4 10             	add    $0x10,%esp
f01136bc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	resultLength = strlen(result);
f01136bf:	83 ec 0c             	sub    $0xc,%esp
f01136c2:	ff 75 e8             	pushl  -0x18(%ebp)
f01136c5:	e8 6e ed 00 00       	call   f0122438 <strlen>
f01136ca:	83 c4 10             	add    $0x10,%esp
f01136cd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "") != 0 || resultLength != strlen(src2))
f01136d0:	83 ec 08             	sub    $0x8,%esp
f01136d3:	68 f2 b7 12 f0       	push   $0xf012b7f2
f01136d8:	ff 75 e8             	pushl  -0x18(%ebp)
f01136db:	e8 64 ee 00 00       	call   f0122544 <strcmp>
f01136e0:	83 c4 10             	add    $0x10,%esp
f01136e3:	85 c0                	test   %eax,%eax
f01136e5:	75 13                	jne    f01136fa <test_str2lower_function+0x104>
f01136e7:	83 ec 0c             	sub    $0xc,%esp
f01136ea:	ff 75 e0             	pushl  -0x20(%ebp)
f01136ed:	e8 46 ed 00 00       	call   f0122438 <strlen>
f01136f2:	83 c4 10             	add    $0x10,%esp
f01136f5:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01136f8:	74 15                	je     f011370f <test_str2lower_function+0x119>
		cprintf("str2lower #2: WRONG - str2lower return wrong value or length. Expected \"\", Actual \"%s\"\n", result);
f01136fa:	83 ec 08             	sub    $0x8,%esp
f01136fd:	ff 75 e8             	pushl  -0x18(%ebp)
f0113700:	68 f4 b7 12 f0       	push   $0xf012b7f4
f0113705:	e8 62 d8 fe ff       	call   f0100f6c <cprintf>
f011370a:	83 c4 10             	add    $0x10,%esp
f011370d:	eb 04                	jmp    f0113713 <test_str2lower_function+0x11d>
	else
		eval += 10;
f011370f:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	// CASE3: input string is Only special characters
	const char *src3 = "!@#$%%^&*()";
f0113713:	c7 45 dc 4c b8 12 f0 	movl   $0xf012b84c,-0x24(%ebp)
	char dst3[100];
	result = str2lower(dst3, src3);
f011371a:	83 ec 08             	sub    $0x8,%esp
f011371d:	ff 75 dc             	pushl  -0x24(%ebp)
f0113720:	8d 85 a0 fe ff ff    	lea    -0x160(%ebp),%eax
f0113726:	50                   	push   %eax
f0113727:	e8 f5 f3 00 00       	call   f0122b21 <str2lower>
f011372c:	83 c4 10             	add    $0x10,%esp
f011372f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	resultLength = strlen(result);
f0113732:	83 ec 0c             	sub    $0xc,%esp
f0113735:	ff 75 e8             	pushl  -0x18(%ebp)
f0113738:	e8 fb ec 00 00       	call   f0122438 <strlen>
f011373d:	83 c4 10             	add    $0x10,%esp
f0113740:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "!@#$%%^&*()") != 0 || resultLength != strlen(src3))
f0113743:	83 ec 08             	sub    $0x8,%esp
f0113746:	68 4c b8 12 f0       	push   $0xf012b84c
f011374b:	ff 75 e8             	pushl  -0x18(%ebp)
f011374e:	e8 f1 ed 00 00       	call   f0122544 <strcmp>
f0113753:	83 c4 10             	add    $0x10,%esp
f0113756:	85 c0                	test   %eax,%eax
f0113758:	75 13                	jne    f011376d <test_str2lower_function+0x177>
f011375a:	83 ec 0c             	sub    $0xc,%esp
f011375d:	ff 75 dc             	pushl  -0x24(%ebp)
f0113760:	e8 d3 ec 00 00       	call   f0122438 <strlen>
f0113765:	83 c4 10             	add    $0x10,%esp
f0113768:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011376b:	74 15                	je     f0113782 <test_str2lower_function+0x18c>
		cprintf("str2lower #3: WRONG - str2lower return wrong value or length. Expected \"!@#$%%^&*()\", Actual \"%s\"\n", result);
f011376d:	83 ec 08             	sub    $0x8,%esp
f0113770:	ff 75 e8             	pushl  -0x18(%ebp)
f0113773:	68 58 b8 12 f0       	push   $0xf012b858
f0113778:	e8 ef d7 fe ff       	call   f0100f6c <cprintf>
f011377d:	83 c4 10             	add    $0x10,%esp
f0113780:	eb 04                	jmp    f0113786 <test_str2lower_function+0x190>
	else
		eval += 15;
f0113782:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)

	// CASE4: input string is only numbers
	const char *src4 = "1234567890";
f0113786:	c7 45 d8 bb b8 12 f0 	movl   $0xf012b8bb,-0x28(%ebp)
	char dst4[100];
	result = str2lower(dst4, src4);
f011378d:	83 ec 08             	sub    $0x8,%esp
f0113790:	ff 75 d8             	pushl  -0x28(%ebp)
f0113793:	8d 85 3c fe ff ff    	lea    -0x1c4(%ebp),%eax
f0113799:	50                   	push   %eax
f011379a:	e8 82 f3 00 00       	call   f0122b21 <str2lower>
f011379f:	83 c4 10             	add    $0x10,%esp
f01137a2:	89 45 e8             	mov    %eax,-0x18(%ebp)
	resultLength = strlen(result);
f01137a5:	83 ec 0c             	sub    $0xc,%esp
f01137a8:	ff 75 e8             	pushl  -0x18(%ebp)
f01137ab:	e8 88 ec 00 00       	call   f0122438 <strlen>
f01137b0:	83 c4 10             	add    $0x10,%esp
f01137b3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "1234567890") != 0 || resultLength != strlen(src4))
f01137b6:	83 ec 08             	sub    $0x8,%esp
f01137b9:	68 bb b8 12 f0       	push   $0xf012b8bb
f01137be:	ff 75 e8             	pushl  -0x18(%ebp)
f01137c1:	e8 7e ed 00 00       	call   f0122544 <strcmp>
f01137c6:	83 c4 10             	add    $0x10,%esp
f01137c9:	85 c0                	test   %eax,%eax
f01137cb:	75 13                	jne    f01137e0 <test_str2lower_function+0x1ea>
f01137cd:	83 ec 0c             	sub    $0xc,%esp
f01137d0:	ff 75 d8             	pushl  -0x28(%ebp)
f01137d3:	e8 60 ec 00 00       	call   f0122438 <strlen>
f01137d8:	83 c4 10             	add    $0x10,%esp
f01137db:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01137de:	74 15                	je     f01137f5 <test_str2lower_function+0x1ff>
		cprintf("str2lower #4: WRONG - str2lower return wrong value or length. Expected \"1234567890\", Actual \"%s\"\n", result);
f01137e0:	83 ec 08             	sub    $0x8,%esp
f01137e3:	ff 75 e8             	pushl  -0x18(%ebp)
f01137e6:	68 c8 b8 12 f0       	push   $0xf012b8c8
f01137eb:	e8 7c d7 fe ff       	call   f0100f6c <cprintf>
f01137f0:	83 c4 10             	add    $0x10,%esp
f01137f3:	eb 04                	jmp    f01137f9 <test_str2lower_function+0x203>
	else
		eval += 15;
f01137f5:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)

	// CASE5: input string contains invalid characters
	const char *src5 = "Hello!@#$%%^&*()World";
f01137f9:	c7 45 d4 2a b9 12 f0 	movl   $0xf012b92a,-0x2c(%ebp)
	char dst5[100];
	result = str2lower(dst5, src5);
f0113800:	83 ec 08             	sub    $0x8,%esp
f0113803:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113806:	8d 85 d8 fd ff ff    	lea    -0x228(%ebp),%eax
f011380c:	50                   	push   %eax
f011380d:	e8 0f f3 00 00       	call   f0122b21 <str2lower>
f0113812:	83 c4 10             	add    $0x10,%esp
f0113815:	89 45 e8             	mov    %eax,-0x18(%ebp)
	resultLength = strlen(result);
f0113818:	83 ec 0c             	sub    $0xc,%esp
f011381b:	ff 75 e8             	pushl  -0x18(%ebp)
f011381e:	e8 15 ec 00 00       	call   f0122438 <strlen>
f0113823:	83 c4 10             	add    $0x10,%esp
f0113826:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "hello!@#$%%^&*()world") != 0 || resultLength != strlen(src5))
f0113829:	83 ec 08             	sub    $0x8,%esp
f011382c:	68 40 b9 12 f0       	push   $0xf012b940
f0113831:	ff 75 e8             	pushl  -0x18(%ebp)
f0113834:	e8 0b ed 00 00       	call   f0122544 <strcmp>
f0113839:	83 c4 10             	add    $0x10,%esp
f011383c:	85 c0                	test   %eax,%eax
f011383e:	75 13                	jne    f0113853 <test_str2lower_function+0x25d>
f0113840:	83 ec 0c             	sub    $0xc,%esp
f0113843:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113846:	e8 ed eb 00 00       	call   f0122438 <strlen>
f011384b:	83 c4 10             	add    $0x10,%esp
f011384e:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0113851:	74 15                	je     f0113868 <test_str2lower_function+0x272>
		cprintf("str2lower #5: WRONG - str2lower return wrong value or length. Expected \"hello!@#$%%^&*()world\", Actual \"%s\"\n", result);
f0113853:	83 ec 08             	sub    $0x8,%esp
f0113856:	ff 75 e8             	pushl  -0x18(%ebp)
f0113859:	68 58 b9 12 f0       	push   $0xf012b958
f011385e:	e8 09 d7 fe ff       	call   f0100f6c <cprintf>
f0113863:	83 c4 10             	add    $0x10,%esp
f0113866:	eb 04                	jmp    f011386c <test_str2lower_function+0x276>
	else
		eval += 15;
f0113868:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)

	// CASE6: input string contains characters with white-space characters
	const char *src6 = "Hello World";
f011386c:	c7 45 d0 c5 b9 12 f0 	movl   $0xf012b9c5,-0x30(%ebp)
	char dst6[100];
	result = str2lower(dst6, src6);
f0113873:	83 ec 08             	sub    $0x8,%esp
f0113876:	ff 75 d0             	pushl  -0x30(%ebp)
f0113879:	8d 85 74 fd ff ff    	lea    -0x28c(%ebp),%eax
f011387f:	50                   	push   %eax
f0113880:	e8 9c f2 00 00       	call   f0122b21 <str2lower>
f0113885:	83 c4 10             	add    $0x10,%esp
f0113888:	89 45 e8             	mov    %eax,-0x18(%ebp)
	resultLength = strlen(result);
f011388b:	83 ec 0c             	sub    $0xc,%esp
f011388e:	ff 75 e8             	pushl  -0x18(%ebp)
f0113891:	e8 a2 eb 00 00       	call   f0122438 <strlen>
f0113896:	83 c4 10             	add    $0x10,%esp
f0113899:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "hello world") != 0 || resultLength != strlen(src6))
f011389c:	83 ec 08             	sub    $0x8,%esp
f011389f:	68 d1 b9 12 f0       	push   $0xf012b9d1
f01138a4:	ff 75 e8             	pushl  -0x18(%ebp)
f01138a7:	e8 98 ec 00 00       	call   f0122544 <strcmp>
f01138ac:	83 c4 10             	add    $0x10,%esp
f01138af:	85 c0                	test   %eax,%eax
f01138b1:	75 13                	jne    f01138c6 <test_str2lower_function+0x2d0>
f01138b3:	83 ec 0c             	sub    $0xc,%esp
f01138b6:	ff 75 d0             	pushl  -0x30(%ebp)
f01138b9:	e8 7a eb 00 00       	call   f0122438 <strlen>
f01138be:	83 c4 10             	add    $0x10,%esp
f01138c1:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01138c4:	74 15                	je     f01138db <test_str2lower_function+0x2e5>
		cprintf("str2lower #6: WRONG - str2lower return wrong value or length. Expected \"hello world\", Actual \"%s\"\n", result);
f01138c6:	83 ec 08             	sub    $0x8,%esp
f01138c9:	ff 75 e8             	pushl  -0x18(%ebp)
f01138cc:	68 e0 b9 12 f0       	push   $0xf012b9e0
f01138d1:	e8 96 d6 fe ff       	call   f0100f6c <cprintf>
f01138d6:	83 c4 10             	add    $0x10,%esp
f01138d9:	eb 04                	jmp    f01138df <test_str2lower_function+0x2e9>
	else
		eval += 15;
f01138db:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)

	// CASE7: input string contains valid characters separated by _
	const char *src7 = "Hello WORLD String_2_LOWeR";
f01138df:	c7 45 cc 43 ba 12 f0 	movl   $0xf012ba43,-0x34(%ebp)
	char dst7[100];
	result = str2lower(dst7, src7);
f01138e6:	83 ec 08             	sub    $0x8,%esp
f01138e9:	ff 75 cc             	pushl  -0x34(%ebp)
f01138ec:	8d 85 10 fd ff ff    	lea    -0x2f0(%ebp),%eax
f01138f2:	50                   	push   %eax
f01138f3:	e8 29 f2 00 00       	call   f0122b21 <str2lower>
f01138f8:	83 c4 10             	add    $0x10,%esp
f01138fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	resultLength = strlen(result);
f01138fe:	83 ec 0c             	sub    $0xc,%esp
f0113901:	ff 75 e8             	pushl  -0x18(%ebp)
f0113904:	e8 2f eb 00 00       	call   f0122438 <strlen>
f0113909:	83 c4 10             	add    $0x10,%esp
f011390c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "hello world string_2_lower") != 0 || resultLength != strlen(src7))
f011390f:	83 ec 08             	sub    $0x8,%esp
f0113912:	68 5e ba 12 f0       	push   $0xf012ba5e
f0113917:	ff 75 e8             	pushl  -0x18(%ebp)
f011391a:	e8 25 ec 00 00       	call   f0122544 <strcmp>
f011391f:	83 c4 10             	add    $0x10,%esp
f0113922:	85 c0                	test   %eax,%eax
f0113924:	75 13                	jne    f0113939 <test_str2lower_function+0x343>
f0113926:	83 ec 0c             	sub    $0xc,%esp
f0113929:	ff 75 cc             	pushl  -0x34(%ebp)
f011392c:	e8 07 eb 00 00       	call   f0122438 <strlen>
f0113931:	83 c4 10             	add    $0x10,%esp
f0113934:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0113937:	74 15                	je     f011394e <test_str2lower_function+0x358>
		cprintf("str2lower #7: WRONG - str2lower return wrong value or length. Expected \"hello world string_2_lower\", Actual \"%s\"\n", result);
f0113939:	83 ec 08             	sub    $0x8,%esp
f011393c:	ff 75 e8             	pushl  -0x18(%ebp)
f011393f:	68 7c ba 12 f0       	push   $0xf012ba7c
f0113944:	e8 23 d6 fe ff       	call   f0100f6c <cprintf>
f0113949:	83 c4 10             	add    $0x10,%esp
f011394c:	eb 04                	jmp    f0113952 <test_str2lower_function+0x35c>
	else
		eval += 20;
f011394e:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)

	cprintf("Test str2lower completed. Evaluation = %d%%\n", eval);
f0113952:	83 ec 08             	sub    $0x8,%esp
f0113955:	ff 75 f4             	pushl  -0xc(%ebp)
f0113958:	68 f0 ba 12 f0       	push   $0xf012baf0
f011395d:	e8 0a d6 fe ff       	call   f0100f6c <cprintf>
f0113962:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0113965:	83 ec 0c             	sub    $0xc,%esp
f0113968:	68 00 b6 12 f0       	push   $0xf012b600
f011396d:	e8 fa d5 fe ff       	call   f0100f6c <cprintf>
f0113972:	83 c4 10             	add    $0x10,%esp
	return 0;
f0113975:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011397a:	c9                   	leave  
f011397b:	c3                   	ret    

f011397c <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f011397c:	55                   	push   %ebp
f011397d:	89 e5                	mov    %esp,%ebp
f011397f:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f0113982:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0113989:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0113990:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113997:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f011399c:	ff 75 ec             	pushl  -0x14(%ebp)
f011399f:	ff 75 f0             	pushl  -0x10(%ebp)
f01139a2:	ff 75 f4             	pushl  -0xc(%ebp)
f01139a5:	50                   	push   %eax
f01139a6:	e8 7d 51 ff ff       	call   f0108b28 <pt_set_page_permissions>
f01139ab:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01139ae:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f01139b3:	ff 75 ec             	pushl  -0x14(%ebp)
f01139b6:	ff 75 f0             	pushl  -0x10(%ebp)
f01139b9:	ff 75 f4             	pushl  -0xc(%ebp)
f01139bc:	50                   	push   %eax
f01139bd:	e8 a0 4d 00 00       	call   f0118762 <CP>
f01139c2:	83 c4 10             	add    $0x10,%esp
f01139c5:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01139c8:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01139cc:	74 17                	je     f01139e5 <test_pt_set_page_permissions+0x69>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f01139ce:	83 ec 04             	sub    $0x4,%esp
f01139d1:	68 20 bb 12 f0       	push   $0xf012bb20
f01139d6:	68 23 01 00 00       	push   $0x123
f01139db:	68 42 bb 12 f0       	push   $0xf012bb42
f01139e0:	e8 35 c9 fe ff       	call   f010031a <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f01139e5:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f01139ec:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f01139f3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01139fa:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f01139ff:	ff 75 ec             	pushl  -0x14(%ebp)
f0113a02:	ff 75 f0             	pushl  -0x10(%ebp)
f0113a05:	ff 75 f4             	pushl  -0xc(%ebp)
f0113a08:	50                   	push   %eax
f0113a09:	e8 1a 51 ff ff       	call   f0108b28 <pt_set_page_permissions>
f0113a0e:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113a11:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0113a16:	ff 75 ec             	pushl  -0x14(%ebp)
f0113a19:	ff 75 f0             	pushl  -0x10(%ebp)
f0113a1c:	ff 75 f4             	pushl  -0xc(%ebp)
f0113a1f:	50                   	push   %eax
f0113a20:	e8 3d 4d 00 00       	call   f0118762 <CP>
f0113a25:	83 c4 10             	add    $0x10,%esp
f0113a28:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0113a2b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0113a2f:	74 17                	je     f0113a48 <test_pt_set_page_permissions+0xcc>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f0113a31:	83 ec 04             	sub    $0x4,%esp
f0113a34:	68 60 bb 12 f0       	push   $0xf012bb60
f0113a39:	68 2f 01 00 00       	push   $0x12f
f0113a3e:	68 42 bb 12 f0       	push   $0xf012bb42
f0113a43:	e8 d2 c8 fe ff       	call   f010031a <_panic>
	}

	va = 0xEF800000;
f0113a48:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0113a4f:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0113a56:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113a5d:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0113a62:	ff 75 ec             	pushl  -0x14(%ebp)
f0113a65:	ff 75 f0             	pushl  -0x10(%ebp)
f0113a68:	ff 75 f4             	pushl  -0xc(%ebp)
f0113a6b:	50                   	push   %eax
f0113a6c:	e8 b7 50 ff ff       	call   f0108b28 <pt_set_page_permissions>
f0113a71:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113a74:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0113a79:	ff 75 ec             	pushl  -0x14(%ebp)
f0113a7c:	ff 75 f0             	pushl  -0x10(%ebp)
f0113a7f:	ff 75 f4             	pushl  -0xc(%ebp)
f0113a82:	50                   	push   %eax
f0113a83:	e8 da 4c 00 00       	call   f0118762 <CP>
f0113a88:	83 c4 10             	add    $0x10,%esp
f0113a8b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0113a8e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0113a92:	74 17                	je     f0113aab <test_pt_set_page_permissions+0x12f>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0113a94:	83 ec 04             	sub    $0x4,%esp
f0113a97:	68 84 bb 12 f0       	push   $0xf012bb84
f0113a9c:	68 3a 01 00 00       	push   $0x13a
f0113aa1:	68 42 bb 12 f0       	push   $0xf012bb42
f0113aa6:	e8 6f c8 fe ff       	call   f010031a <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f0113aab:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f0113ab2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f0113ab9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113ac0:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0113ac5:	ff 75 ec             	pushl  -0x14(%ebp)
f0113ac8:	ff 75 f0             	pushl  -0x10(%ebp)
f0113acb:	ff 75 f4             	pushl  -0xc(%ebp)
f0113ace:	50                   	push   %eax
f0113acf:	e8 54 50 ff ff       	call   f0108b28 <pt_set_page_permissions>
f0113ad4:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113ad7:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0113adc:	ff 75 ec             	pushl  -0x14(%ebp)
f0113adf:	ff 75 f0             	pushl  -0x10(%ebp)
f0113ae2:	ff 75 f4             	pushl  -0xc(%ebp)
f0113ae5:	50                   	push   %eax
f0113ae6:	e8 77 4c 00 00       	call   f0118762 <CP>
f0113aeb:	83 c4 10             	add    $0x10,%esp
f0113aee:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0113af1:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0113af5:	74 17                	je     f0113b0e <test_pt_set_page_permissions+0x192>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0113af7:	83 ec 04             	sub    $0x4,%esp
f0113afa:	68 a8 bb 12 f0       	push   $0xf012bba8
f0113aff:	68 46 01 00 00       	push   $0x146
f0113b04:	68 42 bb 12 f0       	push   $0xf012bb42
f0113b09:	e8 0c c8 fe ff       	call   f010031a <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0113b0e:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f0113b15:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0113b1c:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113b23:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0113b28:	ff 75 ec             	pushl  -0x14(%ebp)
f0113b2b:	ff 75 f0             	pushl  -0x10(%ebp)
f0113b2e:	ff 75 f4             	pushl  -0xc(%ebp)
f0113b31:	50                   	push   %eax
f0113b32:	e8 f1 4f ff ff       	call   f0108b28 <pt_set_page_permissions>
f0113b37:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113b3a:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0113b3f:	ff 75 ec             	pushl  -0x14(%ebp)
f0113b42:	ff 75 f0             	pushl  -0x10(%ebp)
f0113b45:	ff 75 f4             	pushl  -0xc(%ebp)
f0113b48:	50                   	push   %eax
f0113b49:	e8 14 4c 00 00       	call   f0118762 <CP>
f0113b4e:	83 c4 10             	add    $0x10,%esp
f0113b51:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0113b54:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0113b58:	74 17                	je     f0113b71 <test_pt_set_page_permissions+0x1f5>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0113b5a:	83 ec 04             	sub    $0x4,%esp
f0113b5d:	68 cc bb 12 f0       	push   $0xf012bbcc
f0113b62:	68 52 01 00 00       	push   $0x152
f0113b67:	68 42 bb 12 f0       	push   $0xf012bb42
f0113b6c:	e8 a9 c7 fe ff       	call   f010031a <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0113b71:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0113b78:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0113b7f:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113b86:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0113b8b:	ff 75 ec             	pushl  -0x14(%ebp)
f0113b8e:	ff 75 f0             	pushl  -0x10(%ebp)
f0113b91:	ff 75 f4             	pushl  -0xc(%ebp)
f0113b94:	50                   	push   %eax
f0113b95:	e8 8e 4f ff ff       	call   f0108b28 <pt_set_page_permissions>
f0113b9a:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113b9d:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0113ba2:	ff 75 ec             	pushl  -0x14(%ebp)
f0113ba5:	ff 75 f0             	pushl  -0x10(%ebp)
f0113ba8:	ff 75 f4             	pushl  -0xc(%ebp)
f0113bab:	50                   	push   %eax
f0113bac:	e8 b1 4b 00 00       	call   f0118762 <CP>
f0113bb1:	83 c4 10             	add    $0x10,%esp
f0113bb4:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0113bb7:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0113bbb:	74 17                	je     f0113bd4 <test_pt_set_page_permissions+0x258>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f0113bbd:	83 ec 04             	sub    $0x4,%esp
f0113bc0:	68 f0 bb 12 f0       	push   $0xf012bbf0
f0113bc5:	68 5e 01 00 00       	push   $0x15e
f0113bca:	68 42 bb 12 f0       	push   $0xf012bb42
f0113bcf:	e8 46 c7 fe ff       	call   f010031a <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f0113bd4:	83 ec 0c             	sub    $0xc,%esp
f0113bd7:	68 1c bc 12 f0       	push   $0xf012bc1c
f0113bdc:	e8 8b d3 fe ff       	call   f0100f6c <cprintf>
f0113be1:	83 c4 10             	add    $0x10,%esp
	return 0;
f0113be4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113be9:	c9                   	leave  
f0113bea:	c3                   	ret    

f0113beb <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0113beb:	55                   	push   %ebp
f0113bec:	89 e5                	mov    %esp,%ebp
f0113bee:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f0113bf1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0113bf8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0113bff:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0113c06:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0113c0b:	ff 75 ec             	pushl  -0x14(%ebp)
f0113c0e:	ff 75 f0             	pushl  -0x10(%ebp)
f0113c11:	ff 75 f4             	pushl  -0xc(%ebp)
f0113c14:	50                   	push   %eax
f0113c15:	e8 0e 4f ff ff       	call   f0108b28 <pt_set_page_permissions>
f0113c1a:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f0113c1d:	83 ec 04             	sub    $0x4,%esp
f0113c20:	68 6c bc 12 f0       	push   $0xf012bc6c
f0113c25:	68 6b 01 00 00       	push   $0x16b
f0113c2a:	68 42 bb 12 f0       	push   $0xf012bb42
f0113c2f:	e8 e6 c6 fe ff       	call   f010031a <_panic>

f0113c34 <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f0113c34:	55                   	push   %ebp
f0113c35:	89 e5                	mov    %esp,%ebp
f0113c37:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0113c3a:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f0113c41:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0113c46:	83 ec 08             	sub    $0x8,%esp
f0113c49:	ff 75 f4             	pushl  -0xc(%ebp)
f0113c4c:	50                   	push   %eax
f0113c4d:	e8 9a 4f ff ff       	call   f0108bec <pt_get_page_permissions>
f0113c52:	83 c4 10             	add    $0x10,%esp
f0113c55:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0113c58:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0113c5c:	74 17                	je     f0113c75 <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f0113c5e:	83 ec 04             	sub    $0x4,%esp
f0113c61:	68 08 bd 12 f0       	push   $0xf012bd08
f0113c66:	68 79 01 00 00       	push   $0x179
f0113c6b:	68 42 bb 12 f0       	push   $0xf012bb42
f0113c70:	e8 a5 c6 fe ff       	call   f010031a <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f0113c75:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0113c7c:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0113c81:	83 ec 08             	sub    $0x8,%esp
f0113c84:	ff 75 f4             	pushl  -0xc(%ebp)
f0113c87:	50                   	push   %eax
f0113c88:	e8 5f 4f ff ff       	call   f0108bec <pt_get_page_permissions>
f0113c8d:	83 c4 10             	add    $0x10,%esp
f0113c90:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f0113c93:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0113c97:	74 17                	je     f0113cb0 <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f0113c99:	83 ec 04             	sub    $0x4,%esp
f0113c9c:	68 2c bd 12 f0       	push   $0xf012bd2c
f0113ca1:	68 81 01 00 00       	push   $0x181
f0113ca6:	68 42 bb 12 f0       	push   $0xf012bb42
f0113cab:	e8 6a c6 fe ff       	call   f010031a <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f0113cb0:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0113cb7:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0113cbc:	83 ec 08             	sub    $0x8,%esp
f0113cbf:	ff 75 f4             	pushl  -0xc(%ebp)
f0113cc2:	50                   	push   %eax
f0113cc3:	e8 24 4f ff ff       	call   f0108bec <pt_get_page_permissions>
f0113cc8:	83 c4 10             	add    $0x10,%esp
f0113ccb:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0113cce:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0113cd2:	74 17                	je     f0113ceb <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f0113cd4:	83 ec 04             	sub    $0x4,%esp
f0113cd7:	68 50 bd 12 f0       	push   $0xf012bd50
f0113cdc:	68 89 01 00 00       	push   $0x189
f0113ce1:	68 42 bb 12 f0       	push   $0xf012bb42
f0113ce6:	e8 2f c6 fe ff       	call   f010031a <_panic>
	}

	va = 0xF1000000;
f0113ceb:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0113cf2:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0113cf7:	83 ec 08             	sub    $0x8,%esp
f0113cfa:	ff 75 f4             	pushl  -0xc(%ebp)
f0113cfd:	50                   	push   %eax
f0113cfe:	e8 e9 4e ff ff       	call   f0108bec <pt_get_page_permissions>
f0113d03:	83 c4 10             	add    $0x10,%esp
f0113d06:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0113d09:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0113d0d:	74 17                	je     f0113d26 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f0113d0f:	83 ec 04             	sub    $0x4,%esp
f0113d12:	68 74 bd 12 f0       	push   $0xf012bd74
f0113d17:	68 90 01 00 00       	push   $0x190
f0113d1c:	68 42 bb 12 f0       	push   $0xf012bb42
f0113d21:	e8 f4 c5 fe ff       	call   f010031a <_panic>
	}

	va = 0xF0001000;
f0113d26:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0113d2d:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0113d32:	83 ec 08             	sub    $0x8,%esp
f0113d35:	ff 75 f4             	pushl  -0xc(%ebp)
f0113d38:	50                   	push   %eax
f0113d39:	e8 ae 4e ff ff       	call   f0108bec <pt_get_page_permissions>
f0113d3e:	83 c4 10             	add    $0x10,%esp
f0113d41:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f0113d44:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0113d48:	74 17                	je     f0113d61 <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0113d4a:	83 ec 04             	sub    $0x4,%esp
f0113d4d:	68 98 bd 12 f0       	push   $0xf012bd98
f0113d52:	68 97 01 00 00       	push   $0x197
f0113d57:	68 42 bb 12 f0       	push   $0xf012bb42
f0113d5c:	e8 b9 c5 fe ff       	call   f010031a <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f0113d61:	83 ec 0c             	sub    $0xc,%esp
f0113d64:	68 bc bd 12 f0       	push   $0xf012bdbc
f0113d69:	e8 fe d1 fe ff       	call   f0100f6c <cprintf>
f0113d6e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0113d71:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113d76:	c9                   	leave  
f0113d77:	c3                   	ret    

f0113d78 <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0113d78:	55                   	push   %ebp
f0113d79:	89 e5                	mov    %esp,%ebp
f0113d7b:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f0113d7e:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0113d85:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0113d8a:	83 ec 08             	sub    $0x8,%esp
f0113d8d:	ff 75 f4             	pushl  -0xc(%ebp)
f0113d90:	50                   	push   %eax
f0113d91:	e8 9f 4e ff ff       	call   f0108c35 <pt_clear_page_table_entry>
f0113d96:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f0113d99:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0113d9e:	83 ec 08             	sub    $0x8,%esp
f0113da1:	ff 75 f4             	pushl  -0xc(%ebp)
f0113da4:	50                   	push   %eax
f0113da5:	e8 14 49 00 00       	call   f01186be <CE>
f0113daa:	83 c4 10             	add    $0x10,%esp
f0113dad:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0113db0:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0113db4:	74 17                	je     f0113dcd <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f0113db6:	83 ec 04             	sub    $0x4,%esp
f0113db9:	68 04 be 12 f0       	push   $0xf012be04
f0113dbe:	68 a7 01 00 00       	push   $0x1a7
f0113dc3:	68 42 bb 12 f0       	push   $0xf012bb42
f0113dc8:	e8 4d c5 fe ff       	call   f010031a <_panic>
	}

	va = 0xF0001000;
f0113dcd:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0113dd4:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0113dd9:	83 ec 08             	sub    $0x8,%esp
f0113ddc:	ff 75 f4             	pushl  -0xc(%ebp)
f0113ddf:	50                   	push   %eax
f0113de0:	e8 50 4e ff ff       	call   f0108c35 <pt_clear_page_table_entry>
f0113de5:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0113de8:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0113ded:	83 ec 08             	sub    $0x8,%esp
f0113df0:	ff 75 f4             	pushl  -0xc(%ebp)
f0113df3:	50                   	push   %eax
f0113df4:	e8 c5 48 00 00       	call   f01186be <CE>
f0113df9:	83 c4 10             	add    $0x10,%esp
f0113dfc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0113dff:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0113e03:	74 17                	je     f0113e1c <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f0113e05:	83 ec 04             	sub    $0x4,%esp
f0113e08:	68 30 be 12 f0       	push   $0xf012be30
f0113e0d:	68 af 01 00 00       	push   $0x1af
f0113e12:	68 42 bb 12 f0       	push   $0xf012bb42
f0113e17:	e8 fe c4 fe ff       	call   f010031a <_panic>
	}

	va = 0xEF800000;
f0113e1c:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0113e23:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0113e28:	83 ec 08             	sub    $0x8,%esp
f0113e2b:	ff 75 f4             	pushl  -0xc(%ebp)
f0113e2e:	50                   	push   %eax
f0113e2f:	e8 01 4e ff ff       	call   f0108c35 <pt_clear_page_table_entry>
f0113e34:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0113e37:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0113e3c:	83 ec 08             	sub    $0x8,%esp
f0113e3f:	ff 75 f4             	pushl  -0xc(%ebp)
f0113e42:	50                   	push   %eax
f0113e43:	e8 76 48 00 00       	call   f01186be <CE>
f0113e48:	83 c4 10             	add    $0x10,%esp
f0113e4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0113e4e:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0113e52:	74 17                	je     f0113e6b <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f0113e54:	83 ec 04             	sub    $0x4,%esp
f0113e57:	68 5c be 12 f0       	push   $0xf012be5c
f0113e5c:	68 b7 01 00 00       	push   $0x1b7
f0113e61:	68 42 bb 12 f0       	push   $0xf012bb42
f0113e66:	e8 af c4 fe ff       	call   f010031a <_panic>
	}

	va = 0xF0000000;
f0113e6b:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0113e72:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0113e77:	83 ec 08             	sub    $0x8,%esp
f0113e7a:	ff 75 f4             	pushl  -0xc(%ebp)
f0113e7d:	50                   	push   %eax
f0113e7e:	e8 b2 4d ff ff       	call   f0108c35 <pt_clear_page_table_entry>
f0113e83:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0113e86:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0113e8b:	83 ec 08             	sub    $0x8,%esp
f0113e8e:	ff 75 f4             	pushl  -0xc(%ebp)
f0113e91:	50                   	push   %eax
f0113e92:	e8 27 48 00 00       	call   f01186be <CE>
f0113e97:	83 c4 10             	add    $0x10,%esp
f0113e9a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0113e9d:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0113ea1:	74 17                	je     f0113eba <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0113ea3:	83 ec 04             	sub    $0x4,%esp
f0113ea6:	68 88 be 12 f0       	push   $0xf012be88
f0113eab:	68 bf 01 00 00       	push   $0x1bf
f0113eb0:	68 42 bb 12 f0       	push   $0xf012bb42
f0113eb5:	e8 60 c4 fe ff       	call   f010031a <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f0113eba:	83 ec 0c             	sub    $0xc,%esp
f0113ebd:	68 b4 be 12 f0       	push   $0xf012beb4
f0113ec2:	e8 a5 d0 fe ff       	call   f0100f6c <cprintf>
f0113ec7:	83 c4 10             	add    $0x10,%esp
	return 0;
f0113eca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113ecf:	c9                   	leave  
f0113ed0:	c3                   	ret    

f0113ed1 <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f0113ed1:	55                   	push   %ebp
f0113ed2:	89 e5                	mov    %esp,%ebp
f0113ed4:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f0113ed7:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0113ede:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0113ee3:	83 ec 08             	sub    $0x8,%esp
f0113ee6:	ff 75 f4             	pushl  -0xc(%ebp)
f0113ee9:	50                   	push   %eax
f0113eea:	e8 46 4d ff ff       	call   f0108c35 <pt_clear_page_table_entry>
f0113eef:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f0113ef2:	83 ec 04             	sub    $0x4,%esp
f0113ef5:	68 00 bf 12 f0       	push   $0xf012bf00
f0113efa:	68 ca 01 00 00       	push   $0x1ca
f0113eff:	68 42 bb 12 f0       	push   $0xf012bb42
f0113f04:	e8 11 c4 fe ff       	call   f010031a <_panic>

f0113f09 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0113f09:	55                   	push   %ebp
f0113f0a:	89 e5                	mov    %esp,%ebp
f0113f0c:	57                   	push   %edi
f0113f0d:	56                   	push   %esi
f0113f0e:	53                   	push   %ebx
f0113f0f:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113f15:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0113f1b:	bb 44 c2 12 f0       	mov    $0xf012c244,%ebx
f0113f20:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113f25:	89 c7                	mov    %eax,%edi
f0113f27:	89 de                	mov    %ebx,%esi
f0113f29:	89 d1                	mov    %edx,%ecx
f0113f2b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113f2d:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0113f33:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113f38:	b0 00                	mov    $0x0,%al
f0113f3a:	89 d7                	mov    %edx,%edi
f0113f3c:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113f3e:	6a 00                	push   $0x0
f0113f40:	6a 0a                	push   $0xa
f0113f42:	6a 14                	push   $0x14
f0113f44:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0113f4a:	50                   	push   %eax
f0113f4b:	e8 20 5b ff ff       	call   f0109a70 <env_create>
f0113f50:	83 c4 10             	add    $0x10,%esp
f0113f53:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113f56:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0113f59:	8b 40 64             	mov    0x64(%eax),%eax
f0113f5c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0113f5f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0113f62:	8b 40 68             	mov    0x68(%eax),%eax
f0113f65:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0113f68:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113f6b:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0113f6e:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0113f75:	75 70 20 
f0113f78:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0113f7f:	00 00 00 
f0113f82:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f0113f88:	b9 03 00 00 00       	mov    $0x3,%ecx
f0113f8d:	b8 00 00 00 00       	mov    $0x0,%eax
f0113f92:	89 d7                	mov    %edx,%edi
f0113f94:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0113f96:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0113f99:	8b 40 10             	mov    0x10(%eax),%eax
f0113f9c:	83 ec 08             	sub    $0x8,%esp
f0113f9f:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0113fa5:	52                   	push   %edx
f0113fa6:	50                   	push   %eax
f0113fa7:	e8 32 e9 00 00       	call   f01228de <ltostr>
f0113fac:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0113faf:	83 ec 04             	sub    $0x4,%esp
f0113fb2:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0113fb8:	50                   	push   %eax
f0113fb9:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f0113fbf:	50                   	push   %eax
f0113fc0:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0113fc6:	50                   	push   %eax
f0113fc7:	e8 eb e9 00 00       	call   f01229b7 <strcconcat>
f0113fcc:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f0113fcf:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f0113fd6:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0113fdd:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f0113fe4:	83 ec 0c             	sub    $0xc,%esp
f0113fe7:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113fea:	e8 d0 48 00 00       	call   f01188bf <ClearUserSpace>
f0113fef:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0113ff2:	83 ec 04             	sub    $0x4,%esp
f0113ff5:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0113ffb:	50                   	push   %eax
f0113ffc:	68 96 bf 12 f0       	push   $0xf012bf96
f0114001:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0114007:	50                   	push   %eax
f0114008:	e8 aa e9 00 00       	call   f01229b7 <strcconcat>
f011400d:	83 c4 10             	add    $0x10,%esp
f0114010:	83 ec 0c             	sub    $0xc,%esp
f0114013:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0114019:	50                   	push   %eax
f011401a:	e8 bd de fe ff       	call   f0101edc <execute_command>
f011401f:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f0114022:	83 ec 04             	sub    $0x4,%esp
f0114025:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f011402b:	50                   	push   %eax
f011402c:	68 a1 bf 12 f0       	push   $0xf012bfa1
f0114031:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0114037:	50                   	push   %eax
f0114038:	e8 7a e9 00 00       	call   f01229b7 <strcconcat>
f011403d:	83 c4 10             	add    $0x10,%esp
f0114040:	83 ec 0c             	sub    $0xc,%esp
f0114043:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0114049:	50                   	push   %eax
f011404a:	e8 8d de fe ff       	call   f0101edc <execute_command>
f011404f:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f0114052:	83 ec 04             	sub    $0x4,%esp
f0114055:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f011405b:	50                   	push   %eax
f011405c:	68 ac bf 12 f0       	push   $0xf012bfac
f0114061:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0114067:	50                   	push   %eax
f0114068:	e8 4a e9 00 00       	call   f01229b7 <strcconcat>
f011406d:	83 c4 10             	add    $0x10,%esp
f0114070:	83 ec 0c             	sub    $0xc,%esp
f0114073:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0114079:	50                   	push   %eax
f011407a:	e8 5d de fe ff       	call   f0101edc <execute_command>
f011407f:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0114082:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f0114089:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011408c:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f011408f:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f0114096:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114099:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f011409c:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f01140a3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01140a6:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f01140a9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01140ac:	83 ec 08             	sub    $0x8,%esp
f01140af:	50                   	push   %eax
f01140b0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01140b3:	e8 6e 47 00 00       	call   f0118826 <GP>
f01140b8:	83 c4 10             	add    $0x10,%esp
f01140bb:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f01140be:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f01140c5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f01140cc:	e8 38 99 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01140d1:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f01140d4:	83 ec 0c             	sub    $0xc,%esp
f01140d7:	68 b8 bf 12 f0       	push   $0xf012bfb8
f01140dc:	e8 8b ce fe ff       	call   f0100f6c <cprintf>
f01140e1:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f01140e4:	6a 03                	push   $0x3
f01140e6:	68 00 00 90 02       	push   $0x2900000
f01140eb:	68 00 00 80 02       	push   $0x2800000
f01140f0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01140f3:	e8 d8 55 ff ff       	call   f01096d0 <cut_paste_pages>
f01140f8:	83 c4 10             	add    $0x10,%esp
f01140fb:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f01140fe:	e8 06 99 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114103:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f0114106:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f011410d:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0114111:	75 08                	jne    f011411b <test_cut_paste_pages+0x212>
f0114113:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114116:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0114119:	74 2b                	je     f0114146 <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f011411b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011411e:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0114121:	83 ec 0c             	sub    $0xc,%esp
f0114124:	50                   	push   %eax
f0114125:	ff 75 b4             	pushl  -0x4c(%ebp)
f0114128:	68 e8 bf 12 f0       	push   $0xf012bfe8
f011412d:	68 04 02 00 00       	push   $0x204
f0114132:	68 42 bb 12 f0       	push   $0xf012bb42
f0114137:	e8 7b c3 fe ff       	call   f01004b7 <_warn>
f011413c:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011413f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f0114146:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011414a:	74 04                	je     f0114150 <test_cut_paste_pages+0x247>
f011414c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0114150:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0114157:	83 ec 08             	sub    $0x8,%esp
f011415a:	6a 00                	push   $0x0
f011415c:	6a 01                	push   $0x1
f011415e:	6a 00                	push   $0x0
f0114160:	68 ff 0f 00 00       	push   $0xfff
f0114165:	ff 75 bc             	pushl  -0x44(%ebp)
f0114168:	6a 01                	push   $0x1
f011416a:	68 00 30 00 00       	push   $0x3000
f011416f:	68 00 00 90 02       	push   $0x2900000
f0114174:	68 00 00 80 02       	push   $0x2800000
f0114179:	ff 75 d4             	pushl  -0x2c(%ebp)
f011417c:	e8 72 47 00 00       	call   f01188f3 <CCP>
f0114181:	83 c4 30             	add    $0x30,%esp
f0114184:	83 f8 01             	cmp    $0x1,%eax
f0114187:	74 21                	je     f01141aa <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0114189:	83 ec 04             	sub    $0x4,%esp
f011418c:	68 3c c0 12 f0       	push   $0xf012c03c
f0114191:	68 0c 02 00 00       	push   $0x20c
f0114196:	68 42 bb 12 f0       	push   $0xf012bb42
f011419b:	e8 17 c3 fe ff       	call   f01004b7 <_warn>
f01141a0:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01141a3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f01141aa:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01141ae:	74 04                	je     f01141b4 <test_cut_paste_pages+0x2ab>
f01141b0:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f01141b4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f01141bb:	83 ec 04             	sub    $0x4,%esp
f01141be:	6a 00                	push   $0x0
f01141c0:	68 00 00 90 02       	push   $0x2900000
f01141c5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01141c8:	e8 b7 41 00 00       	call   f0118384 <CB>
f01141cd:	83 c4 10             	add    $0x10,%esp
f01141d0:	85 c0                	test   %eax,%eax
f01141d2:	0f 84 f6 00 00 00    	je     f01142ce <test_cut_paste_pages+0x3c5>
f01141d8:	83 ec 04             	sub    $0x4,%esp
f01141db:	6a 00                	push   $0x0
f01141dd:	68 00 10 90 02       	push   $0x2901000
f01141e2:	ff 75 d4             	pushl  -0x2c(%ebp)
f01141e5:	e8 9a 41 00 00       	call   f0118384 <CB>
f01141ea:	83 c4 10             	add    $0x10,%esp
f01141ed:	85 c0                	test   %eax,%eax
f01141ef:	0f 84 d9 00 00 00    	je     f01142ce <test_cut_paste_pages+0x3c5>
f01141f5:	83 ec 04             	sub    $0x4,%esp
f01141f8:	6a 00                	push   $0x0
f01141fa:	68 00 20 90 02       	push   $0x2902000
f01141ff:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114202:	e8 7d 41 00 00       	call   f0118384 <CB>
f0114207:	83 c4 10             	add    $0x10,%esp
f011420a:	85 c0                	test   %eax,%eax
f011420c:	0f 84 bc 00 00 00    	je     f01142ce <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f0114212:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f0114219:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f0114220:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f0114227:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011422a:	8a 00                	mov    (%eax),%al
f011422c:	3c 61                	cmp    $0x61,%al
f011422e:	75 12                	jne    f0114242 <test_cut_paste_pages+0x339>
f0114230:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0114233:	8a 00                	mov    (%eax),%al
f0114235:	3c 62                	cmp    $0x62,%al
f0114237:	75 09                	jne    f0114242 <test_cut_paste_pages+0x339>
f0114239:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011423c:	8a 00                	mov    (%eax),%al
f011423e:	3c 63                	cmp    $0x63,%al
f0114240:	74 21                	je     f0114263 <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0114242:	83 ec 04             	sub    $0x4,%esp
f0114245:	68 88 c0 12 f0       	push   $0xf012c088
f011424a:	68 19 02 00 00       	push   $0x219
f011424f:	68 42 bb 12 f0       	push   $0xf012bb42
f0114254:	e8 5e c2 fe ff       	call   f01004b7 <_warn>
f0114259:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011425c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0114263:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114267:	74 04                	je     f011426d <test_cut_paste_pages+0x364>
f0114269:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011426d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f0114274:	83 ec 04             	sub    $0x4,%esp
f0114277:	6a 01                	push   $0x1
f0114279:	68 00 10 90 02       	push   $0x2901000
f011427e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114281:	e8 fe 40 00 00       	call   f0118384 <CB>
f0114286:	83 c4 10             	add    $0x10,%esp
f0114289:	85 c0                	test   %eax,%eax
f011428b:	74 41                	je     f01142ce <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f011428d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0114290:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f0114293:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0114296:	8a 00                	mov    (%eax),%al
f0114298:	3c 79                	cmp    $0x79,%al
f011429a:	74 21                	je     f01142bd <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011429c:	83 ec 04             	sub    $0x4,%esp
f011429f:	68 88 c0 12 f0       	push   $0xf012c088
f01142a4:	68 24 02 00 00       	push   $0x224
f01142a9:	68 42 bb 12 f0       	push   $0xf012bb42
f01142ae:	e8 04 c2 fe ff       	call   f01004b7 <_warn>
f01142b3:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01142b6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f01142bd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01142c1:	74 04                	je     f01142c7 <test_cut_paste_pages+0x3be>
f01142c3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01142c7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f01142ce:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01142d1:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f01142d4:	6a 02                	push   $0x2
f01142d6:	68 00 f0 bf 02       	push   $0x2bff000
f01142db:	68 00 10 90 02       	push   $0x2901000
f01142e0:	ff 75 d4             	pushl  -0x2c(%ebp)
f01142e3:	e8 e8 53 ff ff       	call   f01096d0 <cut_paste_pages>
f01142e8:	83 c4 10             	add    $0x10,%esp
f01142eb:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01142ee:	e8 16 97 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01142f3:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f01142f6:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f01142fa:	75 0b                	jne    f0114307 <test_cut_paste_pages+0x3fe>
f01142fc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01142ff:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0114302:	83 f8 01             	cmp    $0x1,%eax
f0114305:	74 2b                	je     f0114332 <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0114307:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011430a:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011430d:	83 ec 0c             	sub    $0xc,%esp
f0114310:	50                   	push   %eax
f0114311:	ff 75 b4             	pushl  -0x4c(%ebp)
f0114314:	68 e8 bf 12 f0       	push   $0xf012bfe8
f0114319:	68 35 02 00 00       	push   $0x235
f011431e:	68 42 bb 12 f0       	push   $0xf012bb42
f0114323:	e8 8f c1 fe ff       	call   f01004b7 <_warn>
f0114328:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011432b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0114332:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114336:	74 04                	je     f011433c <test_cut_paste_pages+0x433>
f0114338:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f011433c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0114343:	83 ec 08             	sub    $0x8,%esp
f0114346:	6a 00                	push   $0x0
f0114348:	6a 01                	push   $0x1
f011434a:	6a 00                	push   $0x0
f011434c:	68 ff 0f 00 00       	push   $0xfff
f0114351:	ff 75 bc             	pushl  -0x44(%ebp)
f0114354:	6a 01                	push   $0x1
f0114356:	68 00 20 00 00       	push   $0x2000
f011435b:	68 00 f0 bf 02       	push   $0x2bff000
f0114360:	68 00 10 90 02       	push   $0x2901000
f0114365:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114368:	e8 86 45 00 00       	call   f01188f3 <CCP>
f011436d:	83 c4 30             	add    $0x30,%esp
f0114370:	83 f8 01             	cmp    $0x1,%eax
f0114373:	74 21                	je     f0114396 <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0114375:	83 ec 04             	sub    $0x4,%esp
f0114378:	68 3c c0 12 f0       	push   $0xf012c03c
f011437d:	68 3d 02 00 00       	push   $0x23d
f0114382:	68 42 bb 12 f0       	push   $0xf012bb42
f0114387:	e8 2b c1 fe ff       	call   f01004b7 <_warn>
f011438c:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f011438f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0114396:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011439a:	74 04                	je     f01143a0 <test_cut_paste_pages+0x497>
f011439c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01143a0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f01143a7:	83 ec 04             	sub    $0x4,%esp
f01143aa:	6a 00                	push   $0x0
f01143ac:	68 ff f7 bf 02       	push   $0x2bff7ff
f01143b1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01143b4:	e8 cb 3f 00 00       	call   f0118384 <CB>
f01143b9:	83 c4 10             	add    $0x10,%esp
f01143bc:	85 c0                	test   %eax,%eax
f01143be:	74 6b                	je     f011442b <test_cut_paste_pages+0x522>
f01143c0:	83 ec 04             	sub    $0x4,%esp
f01143c3:	6a 00                	push   $0x0
f01143c5:	68 ff 0f c0 02       	push   $0x2c00fff
f01143ca:	ff 75 d4             	pushl  -0x2c(%ebp)
f01143cd:	e8 b2 3f 00 00       	call   f0118384 <CB>
f01143d2:	83 c4 10             	add    $0x10,%esp
f01143d5:	85 c0                	test   %eax,%eax
f01143d7:	74 52                	je     f011442b <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f01143d9:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f01143e0:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f01143e7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01143ea:	8a 00                	mov    (%eax),%al
f01143ec:	3c 79                	cmp    $0x79,%al
f01143ee:	75 09                	jne    f01143f9 <test_cut_paste_pages+0x4f0>
f01143f0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01143f3:	8a 00                	mov    (%eax),%al
f01143f5:	3c 63                	cmp    $0x63,%al
f01143f7:	74 21                	je     f011441a <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01143f9:	83 ec 04             	sub    $0x4,%esp
f01143fc:	68 88 c0 12 f0       	push   $0xf012c088
f0114401:	68 49 02 00 00       	push   $0x249
f0114406:	68 42 bb 12 f0       	push   $0xf012bb42
f011440b:	e8 a7 c0 fe ff       	call   f01004b7 <_warn>
f0114410:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114413:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011441a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011441e:	74 04                	je     f0114424 <test_cut_paste_pages+0x51b>
f0114420:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114424:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f011442b:	83 ec 0c             	sub    $0xc,%esp
f011442e:	68 c1 c0 12 f0       	push   $0xf012c0c1
f0114433:	e8 34 cb fe ff       	call   f0100f6c <cprintf>
f0114438:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f011443b:	83 ec 0c             	sub    $0xc,%esp
f011443e:	68 d0 c0 12 f0       	push   $0xf012c0d0
f0114443:	e8 24 cb fe ff       	call   f0100f6c <cprintf>
f0114448:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f011444b:	83 ec 04             	sub    $0x4,%esp
f011444e:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0114454:	50                   	push   %eax
f0114455:	68 f9 c0 12 f0       	push   $0xf012c0f9
f011445a:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0114460:	50                   	push   %eax
f0114461:	e8 51 e5 00 00       	call   f01229b7 <strcconcat>
f0114466:	83 c4 10             	add    $0x10,%esp
f0114469:	83 ec 0c             	sub    $0xc,%esp
f011446c:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0114472:	50                   	push   %eax
f0114473:	e8 64 da fe ff       	call   f0101edc <execute_command>
f0114478:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f011447b:	83 ec 04             	sub    $0x4,%esp
f011447e:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0114484:	50                   	push   %eax
f0114485:	68 04 c1 12 f0       	push   $0xf012c104
f011448a:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0114490:	50                   	push   %eax
f0114491:	e8 21 e5 00 00       	call   f01229b7 <strcconcat>
f0114496:	83 c4 10             	add    $0x10,%esp
f0114499:	83 ec 0c             	sub    $0xc,%esp
f011449c:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f01144a2:	50                   	push   %eax
f01144a3:	e8 34 da fe ff       	call   f0101edc <execute_command>
f01144a8:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f01144ab:	83 ec 04             	sub    $0x4,%esp
f01144ae:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f01144b4:	50                   	push   %eax
f01144b5:	68 0f c1 12 f0       	push   $0xf012c10f
f01144ba:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01144c0:	50                   	push   %eax
f01144c1:	e8 f1 e4 00 00       	call   f01229b7 <strcconcat>
f01144c6:	83 c4 10             	add    $0x10,%esp
f01144c9:	83 ec 0c             	sub    $0xc,%esp
f01144cc:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f01144d2:	50                   	push   %eax
f01144d3:	e8 04 da fe ff       	call   f0101edc <execute_command>
f01144d8:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f01144db:	83 ec 04             	sub    $0x4,%esp
f01144de:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f01144e4:	50                   	push   %eax
f01144e5:	68 1a c1 12 f0       	push   $0xf012c11a
f01144ea:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01144f0:	50                   	push   %eax
f01144f1:	e8 c1 e4 00 00       	call   f01229b7 <strcconcat>
f01144f6:	83 c4 10             	add    $0x10,%esp
f01144f9:	83 ec 0c             	sub    $0xc,%esp
f01144fc:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0114502:	50                   	push   %eax
f0114503:	e8 d4 d9 fe ff       	call   f0101edc <execute_command>
f0114508:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f011450b:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f0114512:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114515:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f0114518:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f011451f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114522:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f0114525:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f011452c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011452f:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f0114532:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f0114539:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011453c:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f011453f:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f0114546:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114549:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f011454c:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f0114553:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114556:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f0114559:	83 ec 08             	sub    $0x8,%esp
f011455c:	68 00 00 c0 01       	push   $0x1c00000
f0114561:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114564:	e8 bd 42 00 00       	call   f0118826 <GP>
f0114569:	83 c4 10             	add    $0x10,%esp
f011456c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f011456f:	83 ec 08             	sub    $0x8,%esp
f0114572:	68 00 00 40 01       	push   $0x1400000
f0114577:	ff 75 d4             	pushl  -0x2c(%ebp)
f011457a:	e8 a7 42 00 00       	call   f0118826 <GP>
f011457f:	83 c4 10             	add    $0x10,%esp
f0114582:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f0114585:	e8 7f 94 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011458a:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f011458d:	6a 01                	push   $0x1
f011458f:	68 00 00 40 01       	push   $0x1400000
f0114594:	68 00 00 c0 01       	push   $0x1c00000
f0114599:	ff 75 d4             	pushl  -0x2c(%ebp)
f011459c:	e8 2f 51 ff ff       	call   f01096d0 <cut_paste_pages>
f01145a1:	83 c4 10             	add    $0x10,%esp
f01145a4:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01145a7:	e8 5d 94 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01145ac:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f01145af:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f01145b3:	75 08                	jne    f01145bd <test_cut_paste_pages+0x6b4>
f01145b5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01145b8:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01145bb:	74 2b                	je     f01145e8 <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f01145bd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01145c0:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01145c3:	83 ec 0c             	sub    $0xc,%esp
f01145c6:	50                   	push   %eax
f01145c7:	ff 75 b4             	pushl  -0x4c(%ebp)
f01145ca:	68 28 c1 12 f0       	push   $0xf012c128
f01145cf:	68 6c 02 00 00       	push   $0x26c
f01145d4:	68 42 bb 12 f0       	push   $0xf012bb42
f01145d9:	e8 d9 be fe ff       	call   f01004b7 <_warn>
f01145de:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01145e1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01145e8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01145ec:	74 04                	je     f01145f2 <test_cut_paste_pages+0x6e9>
f01145ee:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01145f2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f01145f9:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f0114600:	83 ec 08             	sub    $0x8,%esp
f0114603:	6a 00                	push   $0x0
f0114605:	68 ff 0f 00 00       	push   $0xfff
f011460a:	ff 75 a4             	pushl  -0x5c(%ebp)
f011460d:	68 ff 0f 00 00       	push   $0xfff
f0114612:	ff 75 a0             	pushl  -0x60(%ebp)
f0114615:	6a 01                	push   $0x1
f0114617:	68 00 10 00 00       	push   $0x1000
f011461c:	68 00 00 40 01       	push   $0x1400000
f0114621:	68 00 00 c0 01       	push   $0x1c00000
f0114626:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114629:	e8 c5 42 00 00       	call   f01188f3 <CCP>
f011462e:	83 c4 30             	add    $0x30,%esp
f0114631:	83 f8 01             	cmp    $0x1,%eax
f0114634:	74 28                	je     f011465e <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0114636:	83 ec 04             	sub    $0x4,%esp
f0114639:	68 3c c0 12 f0       	push   $0xf012c03c
f011463e:	68 75 02 00 00       	push   $0x275
f0114643:	68 42 bb 12 f0       	push   $0xf012bb42
f0114648:	e8 6a be fe ff       	call   f01004b7 <_warn>
f011464d:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0114650:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0114657:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f011465e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114662:	74 04                	je     f0114668 <test_cut_paste_pages+0x75f>
f0114664:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0114668:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f011466f:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0114673:	0f 84 92 00 00 00    	je     f011470b <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f0114679:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0114680:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0114687:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f011468e:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0114695:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f011469c:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01146a3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01146a6:	8a 00                	mov    (%eax),%al
f01146a8:	3c 61                	cmp    $0x61,%al
f01146aa:	75 2d                	jne    f01146d9 <test_cut_paste_pages+0x7d0>
f01146ac:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01146af:	8a 00                	mov    (%eax),%al
f01146b1:	3c 78                	cmp    $0x78,%al
f01146b3:	75 24                	jne    f01146d9 <test_cut_paste_pages+0x7d0>
f01146b5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01146b8:	8a 00                	mov    (%eax),%al
f01146ba:	3c 62                	cmp    $0x62,%al
f01146bc:	75 1b                	jne    f01146d9 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01146be:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01146c1:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01146c3:	3c 79                	cmp    $0x79,%al
f01146c5:	75 12                	jne    f01146d9 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01146c7:	8b 45 98             	mov    -0x68(%ebp),%eax
f01146ca:	8a 00                	mov    (%eax),%al
f01146cc:	3c 63                	cmp    $0x63,%al
f01146ce:	75 09                	jne    f01146d9 <test_cut_paste_pages+0x7d0>
f01146d0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01146d3:	8a 00                	mov    (%eax),%al
f01146d5:	3c 7a                	cmp    $0x7a,%al
f01146d7:	74 21                	je     f01146fa <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01146d9:	83 ec 04             	sub    $0x4,%esp
f01146dc:	68 88 c0 12 f0       	push   $0xf012c088
f01146e1:	68 87 02 00 00       	push   $0x287
f01146e6:	68 42 bb 12 f0       	push   $0xf012bb42
f01146eb:	e8 c7 bd fe ff       	call   f01004b7 <_warn>
f01146f0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01146f3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01146fa:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01146fe:	74 04                	je     f0114704 <test_cut_paste_pages+0x7fb>
f0114700:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114704:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f011470b:	e8 f9 92 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114710:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f0114713:	6a 03                	push   $0x3
f0114715:	68 00 f0 bf 01       	push   $0x1bff000
f011471a:	68 00 00 40 01       	push   $0x1400000
f011471f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114722:	e8 a9 4f ff ff       	call   f01096d0 <cut_paste_pages>
f0114727:	83 c4 10             	add    $0x10,%esp
f011472a:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f011472d:	e8 d7 92 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114732:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0114735:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0114739:	75 08                	jne    f0114743 <test_cut_paste_pages+0x83a>
f011473b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011473e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0114741:	74 2b                	je     f011476e <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0114743:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114746:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0114749:	83 ec 0c             	sub    $0xc,%esp
f011474c:	50                   	push   %eax
f011474d:	ff 75 b4             	pushl  -0x4c(%ebp)
f0114750:	68 28 c1 12 f0       	push   $0xf012c128
f0114755:	68 96 02 00 00       	push   $0x296
f011475a:	68 42 bb 12 f0       	push   $0xf012bb42
f011475f:	e8 53 bd fe ff       	call   f01004b7 <_warn>
f0114764:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0114767:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f011476e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114772:	74 04                	je     f0114778 <test_cut_paste_pages+0x86f>
f0114774:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0114778:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f011477f:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0114786:	83 ec 04             	sub    $0x4,%esp
f0114789:	6a 00                	push   $0x0
f011478b:	68 00 00 40 01       	push   $0x1400000
f0114790:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114793:	e8 ec 3b 00 00       	call   f0118384 <CB>
f0114798:	83 c4 10             	add    $0x10,%esp
f011479b:	83 f8 01             	cmp    $0x1,%eax
f011479e:	0f 85 80 00 00 00    	jne    f0114824 <test_cut_paste_pages+0x91b>
f01147a4:	83 ec 04             	sub    $0x4,%esp
f01147a7:	6a 00                	push   $0x0
f01147a9:	68 00 10 40 01       	push   $0x1401000
f01147ae:	ff 75 d4             	pushl  -0x2c(%ebp)
f01147b1:	e8 ce 3b 00 00       	call   f0118384 <CB>
f01147b6:	83 c4 10             	add    $0x10,%esp
f01147b9:	83 f8 01             	cmp    $0x1,%eax
f01147bc:	75 66                	jne    f0114824 <test_cut_paste_pages+0x91b>
f01147be:	83 ec 04             	sub    $0x4,%esp
f01147c1:	6a 00                	push   $0x0
f01147c3:	68 00 20 40 01       	push   $0x1402000
f01147c8:	ff 75 d4             	pushl  -0x2c(%ebp)
f01147cb:	e8 b4 3b 00 00       	call   f0118384 <CB>
f01147d0:	83 c4 10             	add    $0x10,%esp
f01147d3:	83 f8 01             	cmp    $0x1,%eax
f01147d6:	75 4c                	jne    f0114824 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f01147d8:	83 ec 04             	sub    $0x4,%esp
f01147db:	6a 00                	push   $0x0
f01147dd:	68 00 f0 bf 01       	push   $0x1bff000
f01147e2:	ff 75 d4             	pushl  -0x2c(%ebp)
f01147e5:	e8 9a 3b 00 00       	call   f0118384 <CB>
f01147ea:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f01147ed:	85 c0                	test   %eax,%eax
f01147ef:	75 33                	jne    f0114824 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f01147f1:	83 ec 04             	sub    $0x4,%esp
f01147f4:	6a 00                	push   $0x0
f01147f6:	68 00 00 c0 01       	push   $0x1c00000
f01147fb:	ff 75 d4             	pushl  -0x2c(%ebp)
f01147fe:	e8 81 3b 00 00       	call   f0118384 <CB>
f0114803:	83 c4 10             	add    $0x10,%esp
f0114806:	83 f8 01             	cmp    $0x1,%eax
f0114809:	75 19                	jne    f0114824 <test_cut_paste_pages+0x91b>
f011480b:	83 ec 04             	sub    $0x4,%esp
f011480e:	6a 00                	push   $0x0
f0114810:	68 00 10 c0 01       	push   $0x1c01000
f0114815:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114818:	e8 67 3b 00 00       	call   f0118384 <CB>
f011481d:	83 c4 10             	add    $0x10,%esp
f0114820:	85 c0                	test   %eax,%eax
f0114822:	74 28                	je     f011484c <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f0114824:	83 ec 04             	sub    $0x4,%esp
f0114827:	68 88 c1 12 f0       	push   $0xf012c188
f011482c:	68 9f 02 00 00       	push   $0x29f
f0114831:	68 42 bb 12 f0       	push   $0xf012bb42
f0114836:	e8 7c bc fe ff       	call   f01004b7 <_warn>
f011483b:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f011483e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0114845:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f011484c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114850:	74 04                	je     f0114856 <test_cut_paste_pages+0x94d>
f0114852:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0114856:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f011485d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0114861:	0f 84 99 00 00 00    	je     f0114900 <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f0114867:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f011486e:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0114875:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f011487c:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0114883:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f011488a:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0114891:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114894:	8a 00                	mov    (%eax),%al
f0114896:	3c 61                	cmp    $0x61,%al
f0114898:	75 2d                	jne    f01148c7 <test_cut_paste_pages+0x9be>
f011489a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011489d:	8a 00                	mov    (%eax),%al
f011489f:	3c 78                	cmp    $0x78,%al
f01148a1:	75 24                	jne    f01148c7 <test_cut_paste_pages+0x9be>
f01148a3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01148a6:	8a 00                	mov    (%eax),%al
f01148a8:	3c 62                	cmp    $0x62,%al
f01148aa:	75 1b                	jne    f01148c7 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01148ac:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01148af:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f01148b1:	3c 79                	cmp    $0x79,%al
f01148b3:	75 12                	jne    f01148c7 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f01148b5:	8b 45 98             	mov    -0x68(%ebp),%eax
f01148b8:	8a 00                	mov    (%eax),%al
f01148ba:	3c 63                	cmp    $0x63,%al
f01148bc:	75 09                	jne    f01148c7 <test_cut_paste_pages+0x9be>
f01148be:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01148c1:	8a 00                	mov    (%eax),%al
f01148c3:	3c 7a                	cmp    $0x7a,%al
f01148c5:	74 28                	je     f01148ef <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f01148c7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f01148ce:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01148d5:	83 ec 04             	sub    $0x4,%esp
f01148d8:	68 88 c0 12 f0       	push   $0xf012c088
f01148dd:	68 b3 02 00 00       	push   $0x2b3
f01148e2:	68 42 bb 12 f0       	push   $0xf012bb42
f01148e7:	e8 cb bb fe ff       	call   f01004b7 <_warn>
f01148ec:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f01148ef:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01148f3:	74 04                	je     f01148f9 <test_cut_paste_pages+0x9f0>
f01148f5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01148f9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0114900:	83 ec 0c             	sub    $0xc,%esp
f0114903:	68 c1 c1 12 f0       	push   $0xf012c1c1
f0114908:	e8 5f c6 fe ff       	call   f0100f6c <cprintf>
f011490d:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f0114910:	83 ec 08             	sub    $0x8,%esp
f0114913:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114916:	68 d0 c1 12 f0       	push   $0xf012c1d0
f011491b:	e8 4c c6 fe ff       	call   f0100f6c <cprintf>
f0114920:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114923:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114927:	75 10                	jne    f0114939 <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f0114929:	83 ec 0c             	sub    $0xc,%esp
f011492c:	68 04 c2 12 f0       	push   $0xf012c204
f0114931:	e8 36 c6 fe ff       	call   f0100f6c <cprintf>
f0114936:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114939:	a1 84 1b 5a f0       	mov    0xf05a1b84,%eax
f011493e:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0114941:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114944:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114947:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011494c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011494f:	5b                   	pop    %ebx
f0114950:	5e                   	pop    %esi
f0114951:	5f                   	pop    %edi
f0114952:	5d                   	pop    %ebp
f0114953:	c3                   	ret    

f0114954 <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f0114954:	55                   	push   %ebp
f0114955:	89 e5                	mov    %esp,%ebp
f0114957:	57                   	push   %edi
f0114958:	56                   	push   %esi
f0114959:	53                   	push   %ebx
f011495a:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114960:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0114966:	bb 44 c2 12 f0       	mov    $0xf012c244,%ebx
f011496b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114970:	89 c7                	mov    %eax,%edi
f0114972:	89 de                	mov    %ebx,%esi
f0114974:	89 d1                	mov    %edx,%ecx
f0114976:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114978:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f011497e:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114983:	b0 00                	mov    $0x0,%al
f0114985:	89 d7                	mov    %edx,%edi
f0114987:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114989:	6a 00                	push   $0x0
f011498b:	6a 0a                	push   $0xa
f011498d:	6a 14                	push   $0x14
f011498f:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0114995:	50                   	push   %eax
f0114996:	e8 d5 50 ff ff       	call   f0109a70 <env_create>
f011499b:	83 c4 10             	add    $0x10,%esp
f011499e:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01149a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01149a4:	8b 40 64             	mov    0x64(%eax),%eax
f01149a7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f01149aa:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01149ad:	8b 40 68             	mov    0x68(%eax),%eax
f01149b0:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f01149b6:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01149bc:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01149bf:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f01149c6:	75 70 20 
f01149c9:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f01149d0:	00 00 00 
f01149d3:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f01149d9:	b9 03 00 00 00       	mov    $0x3,%ecx
f01149de:	b8 00 00 00 00       	mov    $0x0,%eax
f01149e3:	89 d7                	mov    %edx,%edi
f01149e5:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01149e7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01149ea:	8b 40 10             	mov    0x10(%eax),%eax
f01149ed:	83 ec 08             	sub    $0x8,%esp
f01149f0:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f01149f6:	52                   	push   %edx
f01149f7:	50                   	push   %eax
f01149f8:	e8 e1 de 00 00       	call   f01228de <ltostr>
f01149fd:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0114a00:	83 ec 04             	sub    $0x4,%esp
f0114a03:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0114a09:	50                   	push   %eax
f0114a0a:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0114a10:	50                   	push   %eax
f0114a11:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f0114a17:	50                   	push   %eax
f0114a18:	e8 9a df 00 00       	call   f01229b7 <strcconcat>
f0114a1d:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f0114a20:	83 ec 0c             	sub    $0xc,%esp
f0114a23:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114a26:	e8 94 3e 00 00       	call   f01188bf <ClearUserSpace>
f0114a2b:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0114a2e:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f0114a35:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0114a3c:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0114a43:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0114a4a:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0114a51:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0114a58:	83 ec 0c             	sub    $0xc,%esp
f0114a5b:	68 78 c2 12 f0       	push   $0xf012c278
f0114a60:	e8 07 c5 fe ff       	call   f0100f6c <cprintf>
f0114a65:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0114a68:	83 ec 04             	sub    $0x4,%esp
f0114a6b:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0114a71:	50                   	push   %eax
f0114a72:	68 ae c2 12 f0       	push   $0xf012c2ae
f0114a77:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0114a7d:	50                   	push   %eax
f0114a7e:	e8 34 df 00 00       	call   f01229b7 <strcconcat>
f0114a83:	83 c4 10             	add    $0x10,%esp
f0114a86:	83 ec 0c             	sub    $0xc,%esp
f0114a89:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0114a8f:	50                   	push   %eax
f0114a90:	e8 47 d4 fe ff       	call   f0101edc <execute_command>
f0114a95:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0114a98:	83 ec 04             	sub    $0x4,%esp
f0114a9b:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0114aa1:	50                   	push   %eax
f0114aa2:	68 b3 c2 12 f0       	push   $0xf012c2b3
f0114aa7:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0114aad:	50                   	push   %eax
f0114aae:	e8 04 df 00 00       	call   f01229b7 <strcconcat>
f0114ab3:	83 c4 10             	add    $0x10,%esp
f0114ab6:	83 ec 0c             	sub    $0xc,%esp
f0114ab9:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0114abf:	50                   	push   %eax
f0114ac0:	e8 17 d4 fe ff       	call   f0101edc <execute_command>
f0114ac5:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0114ac8:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0114ace:	bb b9 c5 12 f0       	mov    $0xf012c5b9,%ebx
f0114ad3:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114ad8:	89 c7                	mov    %eax,%edi
f0114ada:	89 de                	mov    %ebx,%esi
f0114adc:	89 d1                	mov    %edx,%ecx
f0114ade:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114ae0:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0114ae6:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114aeb:	b0 00                	mov    $0x0,%al
f0114aed:	89 d7                	mov    %edx,%edi
f0114aef:	f3 aa                	rep stos %al,%es:(%edi)
f0114af1:	83 ec 0c             	sub    $0xc,%esp
f0114af4:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0114afa:	50                   	push   %eax
f0114afb:	e8 dc d3 fe ff       	call   f0101edc <execute_command>
f0114b00:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0114b03:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0114b09:	bb 1d c6 12 f0       	mov    $0xf012c61d,%ebx
f0114b0e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114b13:	89 c7                	mov    %eax,%edi
f0114b15:	89 de                	mov    %ebx,%esi
f0114b17:	89 d1                	mov    %edx,%ecx
f0114b19:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114b1b:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0114b21:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114b26:	b0 00                	mov    $0x0,%al
f0114b28:	89 d7                	mov    %edx,%edi
f0114b2a:	f3 aa                	rep stos %al,%es:(%edi)
f0114b2c:	83 ec 0c             	sub    $0xc,%esp
f0114b2f:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0114b35:	50                   	push   %eax
f0114b36:	e8 a1 d3 fe ff       	call   f0101edc <execute_command>
f0114b3b:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f0114b3e:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0114b44:	bb 81 c6 12 f0       	mov    $0xf012c681,%ebx
f0114b49:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114b4e:	89 c7                	mov    %eax,%edi
f0114b50:	89 de                	mov    %ebx,%esi
f0114b52:	89 d1                	mov    %edx,%ecx
f0114b54:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114b56:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0114b5c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114b61:	b0 00                	mov    $0x0,%al
f0114b63:	89 d7                	mov    %edx,%edi
f0114b65:	f3 aa                	rep stos %al,%es:(%edi)
f0114b67:	83 ec 0c             	sub    $0xc,%esp
f0114b6a:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0114b70:	50                   	push   %eax
f0114b71:	e8 66 d3 fe ff       	call   f0101edc <execute_command>
f0114b76:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0114b79:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0114b7f:	bb e5 c6 12 f0       	mov    $0xf012c6e5,%ebx
f0114b84:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114b89:	89 c7                	mov    %eax,%edi
f0114b8b:	89 de                	mov    %ebx,%esi
f0114b8d:	89 d1                	mov    %edx,%ecx
f0114b8f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114b91:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0114b97:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114b9c:	b0 00                	mov    $0x0,%al
f0114b9e:	89 d7                	mov    %edx,%edi
f0114ba0:	f3 aa                	rep stos %al,%es:(%edi)
f0114ba2:	83 ec 0c             	sub    $0xc,%esp
f0114ba5:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0114bab:	50                   	push   %eax
f0114bac:	e8 2b d3 fe ff       	call   f0101edc <execute_command>
f0114bb1:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0114bb4:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0114bba:	bb 49 c7 12 f0       	mov    $0xf012c749,%ebx
f0114bbf:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114bc4:	89 c7                	mov    %eax,%edi
f0114bc6:	89 de                	mov    %ebx,%esi
f0114bc8:	89 d1                	mov    %edx,%ecx
f0114bca:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114bcc:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0114bd2:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114bd7:	b0 00                	mov    $0x0,%al
f0114bd9:	89 d7                	mov    %edx,%edi
f0114bdb:	f3 aa                	rep stos %al,%es:(%edi)
f0114bdd:	83 ec 0c             	sub    $0xc,%esp
f0114be0:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0114be6:	50                   	push   %eax
f0114be7:	e8 f0 d2 fe ff       	call   f0101edc <execute_command>
f0114bec:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0114bef:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0114bf5:	bb ad c7 12 f0       	mov    $0xf012c7ad,%ebx
f0114bfa:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114bff:	89 c7                	mov    %eax,%edi
f0114c01:	89 de                	mov    %ebx,%esi
f0114c03:	89 d1                	mov    %edx,%ecx
f0114c05:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114c07:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0114c0d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114c12:	b0 00                	mov    $0x0,%al
f0114c14:	89 d7                	mov    %edx,%edi
f0114c16:	f3 aa                	rep stos %al,%es:(%edi)
f0114c18:	83 ec 0c             	sub    $0xc,%esp
f0114c1b:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0114c21:	50                   	push   %eax
f0114c22:	e8 b5 d2 fe ff       	call   f0101edc <execute_command>
f0114c27:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f0114c2a:	83 ec 04             	sub    $0x4,%esp
f0114c2d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0114c33:	50                   	push   %eax
f0114c34:	68 bb c2 12 f0       	push   $0xf012c2bb
f0114c39:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0114c3f:	50                   	push   %eax
f0114c40:	e8 72 dd 00 00       	call   f01229b7 <strcconcat>
f0114c45:	83 c4 10             	add    $0x10,%esp
f0114c48:	83 ec 0c             	sub    $0xc,%esp
f0114c4b:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0114c51:	50                   	push   %eax
f0114c52:	e8 85 d2 fe ff       	call   f0101edc <execute_command>
f0114c57:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f0114c5a:	83 ec 04             	sub    $0x4,%esp
f0114c5d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0114c63:	50                   	push   %eax
f0114c64:	68 c5 c2 12 f0       	push   $0xf012c2c5
f0114c69:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0114c6f:	50                   	push   %eax
f0114c70:	e8 42 dd 00 00       	call   f01229b7 <strcconcat>
f0114c75:	83 c4 10             	add    $0x10,%esp
f0114c78:	83 ec 0c             	sub    $0xc,%esp
f0114c7b:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0114c81:	50                   	push   %eax
f0114c82:	e8 55 d2 fe ff       	call   f0101edc <execute_command>
f0114c87:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f0114c8a:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0114c90:	bb 11 c8 12 f0       	mov    $0xf012c811,%ebx
f0114c95:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114c9a:	89 c7                	mov    %eax,%edi
f0114c9c:	89 de                	mov    %ebx,%esi
f0114c9e:	89 d1                	mov    %edx,%ecx
f0114ca0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114ca2:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0114ca8:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114cad:	b0 00                	mov    $0x0,%al
f0114caf:	89 d7                	mov    %edx,%edi
f0114cb1:	f3 aa                	rep stos %al,%es:(%edi)
f0114cb3:	83 ec 0c             	sub    $0xc,%esp
f0114cb6:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0114cbc:	50                   	push   %eax
f0114cbd:	e8 1a d2 fe ff       	call   f0101edc <execute_command>
f0114cc2:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f0114cc5:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0114ccb:	bb 75 c8 12 f0       	mov    $0xf012c875,%ebx
f0114cd0:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114cd5:	89 c7                	mov    %eax,%edi
f0114cd7:	89 de                	mov    %ebx,%esi
f0114cd9:	89 d1                	mov    %edx,%ecx
f0114cdb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114cdd:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0114ce3:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114ce8:	b0 00                	mov    $0x0,%al
f0114cea:	89 d7                	mov    %edx,%edi
f0114cec:	f3 aa                	rep stos %al,%es:(%edi)
f0114cee:	83 ec 0c             	sub    $0xc,%esp
f0114cf1:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0114cf7:	50                   	push   %eax
f0114cf8:	e8 df d1 fe ff       	call   f0101edc <execute_command>
f0114cfd:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0114d00:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0114d06:	bb d9 c8 12 f0       	mov    $0xf012c8d9,%ebx
f0114d0b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114d10:	89 c7                	mov    %eax,%edi
f0114d12:	89 de                	mov    %ebx,%esi
f0114d14:	89 d1                	mov    %edx,%ecx
f0114d16:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114d18:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0114d1e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114d23:	b0 00                	mov    $0x0,%al
f0114d25:	89 d7                	mov    %edx,%edi
f0114d27:	f3 aa                	rep stos %al,%es:(%edi)
f0114d29:	83 ec 0c             	sub    $0xc,%esp
f0114d2c:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0114d32:	50                   	push   %eax
f0114d33:	e8 a4 d1 fe ff       	call   f0101edc <execute_command>
f0114d38:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f0114d3b:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0114d42:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f0114d49:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f0114d50:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f0114d57:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0114d5e:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f0114d65:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0114d6c:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0114d73:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f0114d7a:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0114d81:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f0114d88:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0114d8f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0114d92:	8a 00                	mov    (%eax),%al
f0114d94:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f0114d9a:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114d9d:	8a 00                	mov    (%eax),%al
f0114d9f:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0114da5:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114da8:	8a 00                	mov    (%eax),%al
f0114daa:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114db0:	e8 54 8c ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114db5:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f0114db8:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114dbb:	89 d0                	mov    %edx,%eax
f0114dbd:	01 c0                	add    %eax,%eax
f0114dbf:	01 d0                	add    %edx,%eax
f0114dc1:	01 c0                	add    %eax,%eax
f0114dc3:	50                   	push   %eax
f0114dc4:	68 00 00 10 00       	push   $0x100000
f0114dc9:	6a 00                	push   $0x0
f0114dcb:	ff 75 d4             	pushl  -0x2c(%ebp)
f0114dce:	e8 17 49 ff ff       	call   f01096ea <copy_paste_chunk>
f0114dd3:	83 c4 10             	add    $0x10,%esp
f0114dd6:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114dd9:	e8 2b 8c ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114dde:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0114de1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0114de8:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0114dec:	75 08                	jne    f0114df6 <test_copy_paste_chunk+0x4a2>
f0114dee:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0114df1:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0114df4:	74 2b                	je     f0114e21 <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0114df6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0114df9:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0114dfc:	83 ec 0c             	sub    $0xc,%esp
f0114dff:	50                   	push   %eax
f0114e00:	ff 75 88             	pushl  -0x78(%ebp)
f0114e03:	68 d4 c2 12 f0       	push   $0xf012c2d4
f0114e08:	68 06 03 00 00       	push   $0x306
f0114e0d:	68 42 bb 12 f0       	push   $0xf012bb42
f0114e12:	e8 a0 b6 fe ff       	call   f01004b7 <_warn>
f0114e17:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e1a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0114e21:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114e25:	74 04                	je     f0114e2b <test_copy_paste_chunk+0x4d7>
f0114e27:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114e2b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f0114e32:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114e35:	8a 00                	mov    (%eax),%al
f0114e37:	3c 61                	cmp    $0x61,%al
f0114e39:	75 75                	jne    f0114eb0 <test_copy_paste_chunk+0x55c>
f0114e3b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114e3e:	8a 00                	mov    (%eax),%al
f0114e40:	3c 78                	cmp    $0x78,%al
f0114e42:	75 6c                	jne    f0114eb0 <test_copy_paste_chunk+0x55c>
f0114e44:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114e47:	8a 00                	mov    (%eax),%al
f0114e49:	3c 62                	cmp    $0x62,%al
f0114e4b:	75 63                	jne    f0114eb0 <test_copy_paste_chunk+0x55c>
f0114e4d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0114e50:	8a 00                	mov    (%eax),%al
f0114e52:	3c 79                	cmp    $0x79,%al
f0114e54:	75 5a                	jne    f0114eb0 <test_copy_paste_chunk+0x55c>
f0114e56:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0114e59:	8a 00                	mov    (%eax),%al
f0114e5b:	3c 63                	cmp    $0x63,%al
f0114e5d:	75 51                	jne    f0114eb0 <test_copy_paste_chunk+0x55c>
f0114e5f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0114e62:	8a 00                	mov    (%eax),%al
f0114e64:	3c 7a                	cmp    $0x7a,%al
f0114e66:	75 48                	jne    f0114eb0 <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f0114e68:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0114e6b:	8a 00                	mov    (%eax),%al
f0114e6d:	3c 64                	cmp    $0x64,%al
f0114e6f:	75 3f                	jne    f0114eb0 <test_copy_paste_chunk+0x55c>
f0114e71:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0114e74:	8a 10                	mov    (%eax),%dl
f0114e76:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f0114e7c:	38 c2                	cmp    %al,%dl
f0114e7e:	75 30                	jne    f0114eb0 <test_copy_paste_chunk+0x55c>
f0114e80:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0114e83:	8a 00                	mov    (%eax),%al
f0114e85:	3c 65                	cmp    $0x65,%al
f0114e87:	75 27                	jne    f0114eb0 <test_copy_paste_chunk+0x55c>
f0114e89:	8b 45 98             	mov    -0x68(%ebp),%eax
f0114e8c:	8a 10                	mov    (%eax),%dl
f0114e8e:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0114e94:	38 c2                	cmp    %al,%dl
f0114e96:	75 18                	jne    f0114eb0 <test_copy_paste_chunk+0x55c>
f0114e98:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114e9b:	8a 00                	mov    (%eax),%al
f0114e9d:	3c 66                	cmp    $0x66,%al
f0114e9f:	75 0f                	jne    f0114eb0 <test_copy_paste_chunk+0x55c>
f0114ea1:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114ea4:	8a 10                	mov    (%eax),%dl
f0114ea6:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0114eac:	38 c2                	cmp    %al,%dl
f0114eae:	74 21                	je     f0114ed1 <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0114eb0:	83 ec 04             	sub    $0x4,%esp
f0114eb3:	68 38 c3 12 f0       	push   $0xf012c338
f0114eb8:	68 0f 03 00 00       	push   $0x30f
f0114ebd:	68 42 bb 12 f0       	push   $0xf012bb42
f0114ec2:	e8 f0 b5 fe ff       	call   f01004b7 <_warn>
f0114ec7:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114eca:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0114ed1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0114ed5:	74 04                	je     f0114edb <test_copy_paste_chunk+0x587>
f0114ed7:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114edb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0114ee2:	83 ec 0c             	sub    $0xc,%esp
f0114ee5:	68 72 c3 12 f0       	push   $0xf012c372
f0114eea:	e8 7d c0 fe ff       	call   f0100f6c <cprintf>
f0114eef:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0114ef2:	83 ec 0c             	sub    $0xc,%esp
f0114ef5:	68 84 c3 12 f0       	push   $0xf012c384
f0114efa:	e8 6d c0 fe ff       	call   f0100f6c <cprintf>
f0114eff:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0114f02:	83 ec 04             	sub    $0x4,%esp
f0114f05:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0114f0b:	50                   	push   %eax
f0114f0c:	68 ba c3 12 f0       	push   $0xf012c3ba
f0114f11:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0114f17:	50                   	push   %eax
f0114f18:	e8 9a da 00 00       	call   f01229b7 <strcconcat>
f0114f1d:	83 c4 10             	add    $0x10,%esp
f0114f20:	83 ec 0c             	sub    $0xc,%esp
f0114f23:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0114f29:	50                   	push   %eax
f0114f2a:	e8 ad cf fe ff       	call   f0101edc <execute_command>
f0114f2f:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f0114f32:	83 ec 04             	sub    $0x4,%esp
f0114f35:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0114f3b:	50                   	push   %eax
f0114f3c:	68 c4 c3 12 f0       	push   $0xf012c3c4
f0114f41:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0114f47:	50                   	push   %eax
f0114f48:	e8 6a da 00 00       	call   f01229b7 <strcconcat>
f0114f4d:	83 c4 10             	add    $0x10,%esp
f0114f50:	83 ec 0c             	sub    $0xc,%esp
f0114f53:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0114f59:	50                   	push   %eax
f0114f5a:	e8 7d cf fe ff       	call   f0101edc <execute_command>
f0114f5f:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f0114f62:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0114f68:	bb 3d c9 12 f0       	mov    $0xf012c93d,%ebx
f0114f6d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114f72:	89 c7                	mov    %eax,%edi
f0114f74:	89 de                	mov    %ebx,%esi
f0114f76:	89 d1                	mov    %edx,%ecx
f0114f78:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114f7a:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0114f80:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114f85:	b0 00                	mov    $0x0,%al
f0114f87:	89 d7                	mov    %edx,%edi
f0114f89:	f3 aa                	rep stos %al,%es:(%edi)
f0114f8b:	83 ec 0c             	sub    $0xc,%esp
f0114f8e:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0114f94:	50                   	push   %eax
f0114f95:	e8 42 cf fe ff       	call   f0101edc <execute_command>
f0114f9a:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0114f9d:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0114fa3:	bb a1 c9 12 f0       	mov    $0xf012c9a1,%ebx
f0114fa8:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114fad:	89 c7                	mov    %eax,%edi
f0114faf:	89 de                	mov    %ebx,%esi
f0114fb1:	89 d1                	mov    %edx,%ecx
f0114fb3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114fb5:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0114fbb:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114fc0:	b0 00                	mov    $0x0,%al
f0114fc2:	89 d7                	mov    %edx,%edi
f0114fc4:	f3 aa                	rep stos %al,%es:(%edi)
f0114fc6:	83 ec 0c             	sub    $0xc,%esp
f0114fc9:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0114fcf:	50                   	push   %eax
f0114fd0:	e8 07 cf fe ff       	call   f0101edc <execute_command>
f0114fd5:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f0114fd8:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0114fde:	bb 05 ca 12 f0       	mov    $0xf012ca05,%ebx
f0114fe3:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114fe8:	89 c7                	mov    %eax,%edi
f0114fea:	89 de                	mov    %ebx,%esi
f0114fec:	89 d1                	mov    %edx,%ecx
f0114fee:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114ff0:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0114ff6:	b9 55 00 00 00       	mov    $0x55,%ecx
f0114ffb:	b0 00                	mov    $0x0,%al
f0114ffd:	89 d7                	mov    %edx,%edi
f0114fff:	f3 aa                	rep stos %al,%es:(%edi)
f0115001:	83 ec 0c             	sub    $0xc,%esp
f0115004:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f011500a:	50                   	push   %eax
f011500b:	e8 cc ce fe ff       	call   f0101edc <execute_command>
f0115010:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f0115013:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0115019:	bb 69 ca 12 f0       	mov    $0xf012ca69,%ebx
f011501e:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115023:	89 c7                	mov    %eax,%edi
f0115025:	89 de                	mov    %ebx,%esi
f0115027:	89 d1                	mov    %edx,%ecx
f0115029:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011502b:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0115031:	b9 55 00 00 00       	mov    $0x55,%ecx
f0115036:	b0 00                	mov    $0x0,%al
f0115038:	89 d7                	mov    %edx,%edi
f011503a:	f3 aa                	rep stos %al,%es:(%edi)
f011503c:	83 ec 0c             	sub    $0xc,%esp
f011503f:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0115045:	50                   	push   %eax
f0115046:	e8 91 ce fe ff       	call   f0101edc <execute_command>
f011504b:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f011504e:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0115054:	bb cd ca 12 f0       	mov    $0xf012cacd,%ebx
f0115059:	ba 0f 00 00 00       	mov    $0xf,%edx
f011505e:	89 c7                	mov    %eax,%edi
f0115060:	89 de                	mov    %ebx,%esi
f0115062:	89 d1                	mov    %edx,%ecx
f0115064:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115066:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f011506c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0115071:	b0 00                	mov    $0x0,%al
f0115073:	89 d7                	mov    %edx,%edi
f0115075:	f3 aa                	rep stos %al,%es:(%edi)
f0115077:	83 ec 0c             	sub    $0xc,%esp
f011507a:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0115080:	50                   	push   %eax
f0115081:	e8 56 ce fe ff       	call   f0101edc <execute_command>
f0115086:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f0115089:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011508f:	bb 31 cb 12 f0       	mov    $0xf012cb31,%ebx
f0115094:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115099:	89 c7                	mov    %eax,%edi
f011509b:	89 de                	mov    %ebx,%esi
f011509d:	89 d1                	mov    %edx,%ecx
f011509f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01150a1:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f01150a7:	b9 55 00 00 00       	mov    $0x55,%ecx
f01150ac:	b0 00                	mov    $0x0,%al
f01150ae:	89 d7                	mov    %edx,%edi
f01150b0:	f3 aa                	rep stos %al,%es:(%edi)
f01150b2:	83 ec 0c             	sub    $0xc,%esp
f01150b5:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01150bb:	50                   	push   %eax
f01150bc:	e8 1b ce fe ff       	call   f0101edc <execute_command>
f01150c1:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f01150c4:	83 ec 04             	sub    $0x4,%esp
f01150c7:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01150cd:	50                   	push   %eax
f01150ce:	68 ce c3 12 f0       	push   $0xf012c3ce
f01150d3:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01150d9:	50                   	push   %eax
f01150da:	e8 d8 d8 00 00       	call   f01229b7 <strcconcat>
f01150df:	83 c4 10             	add    $0x10,%esp
f01150e2:	83 ec 0c             	sub    $0xc,%esp
f01150e5:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01150eb:	50                   	push   %eax
f01150ec:	e8 eb cd fe ff       	call   f0101edc <execute_command>
f01150f1:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f01150f4:	83 ec 04             	sub    $0x4,%esp
f01150f7:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01150fd:	50                   	push   %eax
f01150fe:	68 d8 c3 12 f0       	push   $0xf012c3d8
f0115103:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0115109:	50                   	push   %eax
f011510a:	e8 a8 d8 00 00       	call   f01229b7 <strcconcat>
f011510f:	83 c4 10             	add    $0x10,%esp
f0115112:	83 ec 0c             	sub    $0xc,%esp
f0115115:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011511b:	50                   	push   %eax
f011511c:	e8 bb cd fe ff       	call   f0101edc <execute_command>
f0115121:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f0115124:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011512a:	bb 95 cb 12 f0       	mov    $0xf012cb95,%ebx
f011512f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115134:	89 c7                	mov    %eax,%edi
f0115136:	89 de                	mov    %ebx,%esi
f0115138:	89 d1                	mov    %edx,%ecx
f011513a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011513c:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0115142:	b9 55 00 00 00       	mov    $0x55,%ecx
f0115147:	b0 00                	mov    $0x0,%al
f0115149:	89 d7                	mov    %edx,%edi
f011514b:	f3 aa                	rep stos %al,%es:(%edi)
f011514d:	83 ec 0c             	sub    $0xc,%esp
f0115150:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0115156:	50                   	push   %eax
f0115157:	e8 80 cd fe ff       	call   f0101edc <execute_command>
f011515c:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f011515f:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0115165:	bb f9 cb 12 f0       	mov    $0xf012cbf9,%ebx
f011516a:	ba 0f 00 00 00       	mov    $0xf,%edx
f011516f:	89 c7                	mov    %eax,%edi
f0115171:	89 de                	mov    %ebx,%esi
f0115173:	89 d1                	mov    %edx,%ecx
f0115175:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115177:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f011517d:	b9 55 00 00 00       	mov    $0x55,%ecx
f0115182:	b0 00                	mov    $0x0,%al
f0115184:	89 d7                	mov    %edx,%edi
f0115186:	f3 aa                	rep stos %al,%es:(%edi)
f0115188:	83 ec 0c             	sub    $0xc,%esp
f011518b:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0115191:	50                   	push   %eax
f0115192:	e8 45 cd fe ff       	call   f0101edc <execute_command>
f0115197:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f011519a:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01151a0:	bb 5d cc 12 f0       	mov    $0xf012cc5d,%ebx
f01151a5:	ba 0f 00 00 00       	mov    $0xf,%edx
f01151aa:	89 c7                	mov    %eax,%edi
f01151ac:	89 de                	mov    %ebx,%esi
f01151ae:	89 d1                	mov    %edx,%ecx
f01151b0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01151b2:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01151b8:	b9 55 00 00 00       	mov    $0x55,%ecx
f01151bd:	b0 00                	mov    $0x0,%al
f01151bf:	89 d7                	mov    %edx,%edi
f01151c1:	f3 aa                	rep stos %al,%es:(%edi)
f01151c3:	83 ec 0c             	sub    $0xc,%esp
f01151c6:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01151cc:	50                   	push   %eax
f01151cd:	e8 0a cd fe ff       	call   f0101edc <execute_command>
f01151d2:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f01151d5:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f01151dc:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f01151e3:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f01151ea:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f01151f1:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f01151f8:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f01151ff:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f0115206:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f011520d:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f0115214:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f011521b:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f0115222:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f0115229:	8b 45 90             	mov    -0x70(%ebp),%eax
f011522c:	8a 00                	mov    (%eax),%al
f011522e:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0115234:	e8 d0 87 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115239:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f011523c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011523f:	89 d0                	mov    %edx,%eax
f0115241:	01 c0                	add    %eax,%eax
f0115243:	01 d0                	add    %edx,%eax
f0115245:	01 c0                	add    %eax,%eax
f0115247:	50                   	push   %eax
f0115248:	68 00 00 40 00       	push   $0x400000
f011524d:	68 00 00 20 00       	push   $0x200000
f0115252:	ff 75 d4             	pushl  -0x2c(%ebp)
f0115255:	e8 90 44 ff ff       	call   f01096ea <copy_paste_chunk>
f011525a:	83 c4 10             	add    $0x10,%esp
f011525d:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0115260:	e8 a4 87 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115265:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0115268:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f011526f:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0115273:	75 08                	jne    f011527d <test_copy_paste_chunk+0x929>
f0115275:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0115278:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011527b:	74 2b                	je     f01152a8 <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011527d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0115280:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0115283:	83 ec 0c             	sub    $0xc,%esp
f0115286:	50                   	push   %eax
f0115287:	ff 75 80             	pushl  -0x80(%ebp)
f011528a:	68 e4 c3 12 f0       	push   $0xf012c3e4
f011528f:	68 3f 03 00 00       	push   $0x33f
f0115294:	68 42 bb 12 f0       	push   $0xf012bb42
f0115299:	e8 19 b2 fe ff       	call   f01004b7 <_warn>
f011529e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01152a1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01152a8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01152ac:	74 04                	je     f01152b2 <test_copy_paste_chunk+0x95e>
f01152ae:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01152b2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f01152b9:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f01152c0:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01152c3:	83 ec 08             	sub    $0x8,%esp
f01152c6:	6a 01                	push   $0x1
f01152c8:	6a 07                	push   $0x7
f01152ca:	6a 07                	push   $0x7
f01152cc:	6a 07                	push   $0x7
f01152ce:	6a 07                	push   $0x7
f01152d0:	6a 01                	push   $0x1
f01152d2:	68 00 20 00 00       	push   $0x2000
f01152d7:	68 00 00 40 00       	push   $0x400000
f01152dc:	68 00 00 20 00       	push   $0x200000
f01152e1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01152e4:	e8 0a 36 00 00       	call   f01188f3 <CCP>
f01152e9:	83 c4 30             	add    $0x30,%esp
f01152ec:	83 f8 01             	cmp    $0x1,%eax
f01152ef:	74 2b                	je     f011531c <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f01152f1:	83 ec 04             	sub    $0x4,%esp
f01152f4:	68 38 c4 12 f0       	push   $0xf012c438
f01152f9:	68 48 03 00 00       	push   $0x348
f01152fe:	68 42 bb 12 f0       	push   $0xf012bb42
f0115303:	e8 af b1 fe ff       	call   f01004b7 <_warn>
f0115308:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011530b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f0115312:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f0115319:	00 00 00 
		}
		if (correct) eval += 5 ;
f011531c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0115320:	74 04                	je     f0115326 <test_copy_paste_chunk+0x9d2>
f0115322:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115326:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f011532d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115330:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f0115333:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115336:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f0115339:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011533c:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f011533f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115342:	8a 00                	mov    (%eax),%al
f0115344:	3c 61                	cmp    $0x61,%al
f0115346:	75 69                	jne    f01153b1 <test_copy_paste_chunk+0xa5d>
f0115348:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011534b:	8a 00                	mov    (%eax),%al
f011534d:	3c 61                	cmp    $0x61,%al
f011534f:	75 60                	jne    f01153b1 <test_copy_paste_chunk+0xa5d>
f0115351:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115354:	8a 00                	mov    (%eax),%al
f0115356:	3c 79                	cmp    $0x79,%al
f0115358:	75 57                	jne    f01153b1 <test_copy_paste_chunk+0xa5d>
f011535a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011535d:	8a 00                	mov    (%eax),%al
f011535f:	3c 62                	cmp    $0x62,%al
f0115361:	75 4e                	jne    f01153b1 <test_copy_paste_chunk+0xa5d>
f0115363:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115366:	8a 00                	mov    (%eax),%al
f0115368:	3c 63                	cmp    $0x63,%al
f011536a:	75 45                	jne    f01153b1 <test_copy_paste_chunk+0xa5d>
f011536c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011536f:	8a 00                	mov    (%eax),%al
f0115371:	3c 7a                	cmp    $0x7a,%al
f0115373:	75 3c                	jne    f01153b1 <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f0115375:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115378:	8a 00                	mov    (%eax),%al
f011537a:	3c 77                	cmp    $0x77,%al
f011537c:	75 33                	jne    f01153b1 <test_copy_paste_chunk+0xa5d>
f011537e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0115381:	8a 00                	mov    (%eax),%al
f0115383:	3c 64                	cmp    $0x64,%al
f0115385:	75 2a                	jne    f01153b1 <test_copy_paste_chunk+0xa5d>
f0115387:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011538a:	8a 00                	mov    (%eax),%al
f011538c:	3c 65                	cmp    $0x65,%al
f011538e:	75 21                	jne    f01153b1 <test_copy_paste_chunk+0xa5d>
f0115390:	8b 45 98             	mov    -0x68(%ebp),%eax
f0115393:	8a 00                	mov    (%eax),%al
f0115395:	3c 65                	cmp    $0x65,%al
f0115397:	75 18                	jne    f01153b1 <test_copy_paste_chunk+0xa5d>
f0115399:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011539c:	8a 00                	mov    (%eax),%al
f011539e:	3c 66                	cmp    $0x66,%al
f01153a0:	75 0f                	jne    f01153b1 <test_copy_paste_chunk+0xa5d>
f01153a2:	8b 45 90             	mov    -0x70(%ebp),%eax
f01153a5:	8a 10                	mov    (%eax),%dl
f01153a7:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01153ad:	38 c2                	cmp    %al,%dl
f01153af:	74 21                	je     f01153d2 <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01153b1:	83 ec 04             	sub    $0x4,%esp
f01153b4:	68 38 c3 12 f0       	push   $0xf012c338
f01153b9:	68 56 03 00 00       	push   $0x356
f01153be:	68 42 bb 12 f0       	push   $0xf012bb42
f01153c3:	e8 ef b0 fe ff       	call   f01004b7 <_warn>
f01153c8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01153cb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01153d2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01153d6:	74 04                	je     f01153dc <test_copy_paste_chunk+0xa88>
f01153d8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01153dc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f01153e3:	8b 45 98             	mov    -0x68(%ebp),%eax
f01153e6:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01153e9:	e8 1b 86 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01153ee:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f01153f1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01153f4:	89 c2                	mov    %eax,%edx
f01153f6:	01 d2                	add    %edx,%edx
f01153f8:	01 d0                	add    %edx,%eax
f01153fa:	50                   	push   %eax
f01153fb:	68 00 08 20 00       	push   $0x200800
f0115400:	68 00 08 40 00       	push   $0x400800
f0115405:	ff 75 d4             	pushl  -0x2c(%ebp)
f0115408:	e8 dd 42 ff ff       	call   f01096ea <copy_paste_chunk>
f011540d:	83 c4 10             	add    $0x10,%esp
f0115410:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0115413:	e8 f1 85 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115418:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f011541b:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f011541f:	75 08                	jne    f0115429 <test_copy_paste_chunk+0xad5>
f0115421:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0115424:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0115427:	74 2b                	je     f0115454 <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0115429:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011542c:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011542f:	83 ec 0c             	sub    $0xc,%esp
f0115432:	50                   	push   %eax
f0115433:	ff 75 80             	pushl  -0x80(%ebp)
f0115436:	68 e4 c3 12 f0       	push   $0xf012c3e4
f011543b:	68 66 03 00 00       	push   $0x366
f0115440:	68 42 bb 12 f0       	push   $0xf012bb42
f0115445:	e8 6d b0 fe ff       	call   f01004b7 <_warn>
f011544a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011544d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0115454:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0115458:	74 04                	je     f011545e <test_copy_paste_chunk+0xb0a>
f011545a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011545e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0115465:	83 ec 08             	sub    $0x8,%esp
f0115468:	6a 01                	push   $0x1
f011546a:	6a 07                	push   $0x7
f011546c:	6a 07                	push   $0x7
f011546e:	6a 07                	push   $0x7
f0115470:	6a 07                	push   $0x7
f0115472:	6a 01                	push   $0x1
f0115474:	68 00 20 00 00       	push   $0x2000
f0115479:	68 00 00 20 00       	push   $0x200000
f011547e:	68 00 00 40 00       	push   $0x400000
f0115483:	ff 75 d4             	pushl  -0x2c(%ebp)
f0115486:	e8 68 34 00 00       	call   f01188f3 <CCP>
f011548b:	83 c4 30             	add    $0x30,%esp
f011548e:	83 f8 01             	cmp    $0x1,%eax
f0115491:	74 21                	je     f01154b4 <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0115493:	83 ec 04             	sub    $0x4,%esp
f0115496:	68 84 c4 12 f0       	push   $0xf012c484
f011549b:	68 6e 03 00 00       	push   $0x36e
f01154a0:	68 42 bb 12 f0       	push   $0xf012bb42
f01154a5:	e8 0d b0 fe ff       	call   f01004b7 <_warn>
f01154aa:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01154ad:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01154b4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01154b8:	74 04                	je     f01154be <test_copy_paste_chunk+0xb6a>
f01154ba:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01154be:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f01154c5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01154c8:	8a 00                	mov    (%eax),%al
f01154ca:	3c 61                	cmp    $0x61,%al
f01154cc:	75 69                	jne    f0115537 <test_copy_paste_chunk+0xbe3>
f01154ce:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01154d1:	8a 00                	mov    (%eax),%al
f01154d3:	3c 61                	cmp    $0x61,%al
f01154d5:	75 60                	jne    f0115537 <test_copy_paste_chunk+0xbe3>
f01154d7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01154da:	8a 00                	mov    (%eax),%al
f01154dc:	3c 79                	cmp    $0x79,%al
f01154de:	75 57                	jne    f0115537 <test_copy_paste_chunk+0xbe3>
f01154e0:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01154e3:	8a 00                	mov    (%eax),%al
f01154e5:	3c 62                	cmp    $0x62,%al
f01154e7:	75 4e                	jne    f0115537 <test_copy_paste_chunk+0xbe3>
f01154e9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01154ec:	8a 00                	mov    (%eax),%al
f01154ee:	3c 7a                	cmp    $0x7a,%al
f01154f0:	75 45                	jne    f0115537 <test_copy_paste_chunk+0xbe3>
f01154f2:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01154f5:	8a 00                	mov    (%eax),%al
f01154f7:	3c 7a                	cmp    $0x7a,%al
f01154f9:	75 3c                	jne    f0115537 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f01154fb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01154fe:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0115500:	3c 64                	cmp    $0x64,%al
f0115502:	75 33                	jne    f0115537 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0115504:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0115507:	8a 00                	mov    (%eax),%al
f0115509:	3c 64                	cmp    $0x64,%al
f011550b:	75 2a                	jne    f0115537 <test_copy_paste_chunk+0xbe3>
f011550d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0115510:	8a 00                	mov    (%eax),%al
f0115512:	3c 65                	cmp    $0x65,%al
f0115514:	75 21                	jne    f0115537 <test_copy_paste_chunk+0xbe3>
f0115516:	8b 45 98             	mov    -0x68(%ebp),%eax
f0115519:	8a 00                	mov    (%eax),%al
f011551b:	3c 78                	cmp    $0x78,%al
f011551d:	75 18                	jne    f0115537 <test_copy_paste_chunk+0xbe3>
f011551f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0115522:	8a 00                	mov    (%eax),%al
f0115524:	3c 66                	cmp    $0x66,%al
f0115526:	75 0f                	jne    f0115537 <test_copy_paste_chunk+0xbe3>
f0115528:	8b 45 90             	mov    -0x70(%ebp),%eax
f011552b:	8a 10                	mov    (%eax),%dl
f011552d:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0115533:	38 c2                	cmp    %al,%dl
f0115535:	74 21                	je     f0115558 <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0115537:	83 ec 04             	sub    $0x4,%esp
f011553a:	68 38 c3 12 f0       	push   $0xf012c338
f011553f:	68 77 03 00 00       	push   $0x377
f0115544:	68 42 bb 12 f0       	push   $0xf012bb42
f0115549:	e8 69 af fe ff       	call   f01004b7 <_warn>
f011554e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115551:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0115558:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011555c:	74 04                	je     f0115562 <test_copy_paste_chunk+0xc0e>
f011555e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115562:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f0115569:	83 ec 0c             	sub    $0xc,%esp
f011556c:	68 cf c4 12 f0       	push   $0xf012c4cf
f0115571:	e8 f6 b9 fe ff       	call   f0100f6c <cprintf>
f0115576:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f0115579:	83 ec 0c             	sub    $0xc,%esp
f011557c:	68 e0 c4 12 f0       	push   $0xf012c4e0
f0115581:	e8 e6 b9 fe ff       	call   f0100f6c <cprintf>
f0115586:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f0115589:	83 ec 04             	sub    $0x4,%esp
f011558c:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0115592:	50                   	push   %eax
f0115593:	68 14 c5 12 f0       	push   $0xf012c514
f0115598:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011559e:	50                   	push   %eax
f011559f:	e8 13 d4 00 00       	call   f01229b7 <strcconcat>
f01155a4:	83 c4 10             	add    $0x10,%esp
f01155a7:	83 ec 0c             	sub    $0xc,%esp
f01155aa:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01155b0:	50                   	push   %eax
f01155b1:	e8 26 c9 fe ff       	call   f0101edc <execute_command>
f01155b6:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f01155b9:	83 ec 04             	sub    $0x4,%esp
f01155bc:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01155c2:	50                   	push   %eax
f01155c3:	68 1e c5 12 f0       	push   $0xf012c51e
f01155c8:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01155ce:	50                   	push   %eax
f01155cf:	e8 e3 d3 00 00       	call   f01229b7 <strcconcat>
f01155d4:	83 c4 10             	add    $0x10,%esp
f01155d7:	83 ec 0c             	sub    $0xc,%esp
f01155da:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01155e0:	50                   	push   %eax
f01155e1:	e8 f6 c8 fe ff       	call   f0101edc <execute_command>
f01155e6:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f01155e9:	83 ec 04             	sub    $0x4,%esp
f01155ec:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01155f2:	50                   	push   %eax
f01155f3:	68 28 c5 12 f0       	push   $0xf012c528
f01155f8:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01155fe:	50                   	push   %eax
f01155ff:	e8 b3 d3 00 00       	call   f01229b7 <strcconcat>
f0115604:	83 c4 10             	add    $0x10,%esp
f0115607:	83 ec 0c             	sub    $0xc,%esp
f011560a:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0115610:	50                   	push   %eax
f0115611:	e8 c6 c8 fe ff       	call   f0101edc <execute_command>
f0115616:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f0115619:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011561f:	bb c1 cc 12 f0       	mov    $0xf012ccc1,%ebx
f0115624:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115629:	89 c7                	mov    %eax,%edi
f011562b:	89 de                	mov    %ebx,%esi
f011562d:	89 d1                	mov    %edx,%ecx
f011562f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115631:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0115637:	b9 55 00 00 00       	mov    $0x55,%ecx
f011563c:	b0 00                	mov    $0x0,%al
f011563e:	89 d7                	mov    %edx,%edi
f0115640:	f3 aa                	rep stos %al,%es:(%edi)
f0115642:	83 ec 0c             	sub    $0xc,%esp
f0115645:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011564b:	50                   	push   %eax
f011564c:	e8 8b c8 fe ff       	call   f0101edc <execute_command>
f0115651:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f0115654:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011565a:	bb 25 cd 12 f0       	mov    $0xf012cd25,%ebx
f011565f:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115664:	89 c7                	mov    %eax,%edi
f0115666:	89 de                	mov    %ebx,%esi
f0115668:	89 d1                	mov    %edx,%ecx
f011566a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011566c:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0115672:	b9 55 00 00 00       	mov    $0x55,%ecx
f0115677:	b0 00                	mov    $0x0,%al
f0115679:	89 d7                	mov    %edx,%edi
f011567b:	f3 aa                	rep stos %al,%es:(%edi)
f011567d:	83 ec 0c             	sub    $0xc,%esp
f0115680:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0115686:	50                   	push   %eax
f0115687:	e8 50 c8 fe ff       	call   f0101edc <execute_command>
f011568c:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f011568f:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0115695:	bb 89 cd 12 f0       	mov    $0xf012cd89,%ebx
f011569a:	ba 0f 00 00 00       	mov    $0xf,%edx
f011569f:	89 c7                	mov    %eax,%edi
f01156a1:	89 de                	mov    %ebx,%esi
f01156a3:	89 d1                	mov    %edx,%ecx
f01156a5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01156a7:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01156ad:	b9 55 00 00 00       	mov    $0x55,%ecx
f01156b2:	b0 00                	mov    $0x0,%al
f01156b4:	89 d7                	mov    %edx,%edi
f01156b6:	f3 aa                	rep stos %al,%es:(%edi)
f01156b8:	83 ec 0c             	sub    $0xc,%esp
f01156bb:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01156c1:	50                   	push   %eax
f01156c2:	e8 15 c8 fe ff       	call   f0101edc <execute_command>
f01156c7:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01156ca:	e8 3a 83 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01156cf:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f01156d2:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01156d5:	89 d0                	mov    %edx,%eax
f01156d7:	01 c0                	add    %eax,%eax
f01156d9:	01 d0                	add    %edx,%eax
f01156db:	c1 e0 02             	shl    $0x2,%eax
f01156de:	50                   	push   %eax
f01156df:	68 00 00 90 00       	push   $0x900000
f01156e4:	68 00 00 80 00       	push   $0x800000
f01156e9:	ff 75 d4             	pushl  -0x2c(%ebp)
f01156ec:	e8 f9 3f ff ff       	call   f01096ea <copy_paste_chunk>
f01156f1:	83 c4 10             	add    $0x10,%esp
f01156f4:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01156fa:	e8 0a 83 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01156ff:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0115702:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0115709:	75 0b                	jne    f0115716 <test_copy_paste_chunk+0xdc2>
f011570b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011570e:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0115711:	83 f8 03             	cmp    $0x3,%eax
f0115714:	74 2e                	je     f0115744 <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0115716:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0115719:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011571c:	83 ec 0c             	sub    $0xc,%esp
f011571f:	50                   	push   %eax
f0115720:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0115726:	68 e4 c3 12 f0       	push   $0xf012c3e4
f011572b:	68 95 03 00 00       	push   $0x395
f0115730:	68 42 bb 12 f0       	push   $0xf012bb42
f0115735:	e8 7d ad fe ff       	call   f01004b7 <_warn>
f011573a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011573d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0115744:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0115748:	74 04                	je     f011574e <test_copy_paste_chunk+0xdfa>
f011574a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011574e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f0115755:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f011575c:	83 ec 08             	sub    $0x8,%esp
f011575f:	6a 01                	push   $0x1
f0115761:	6a 07                	push   $0x7
f0115763:	6a 07                	push   $0x7
f0115765:	6a 07                	push   $0x7
f0115767:	6a 07                	push   $0x7
f0115769:	6a 01                	push   $0x1
f011576b:	68 00 30 00 00       	push   $0x3000
f0115770:	68 00 00 90 00       	push   $0x900000
f0115775:	68 00 00 80 00       	push   $0x800000
f011577a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011577d:	e8 71 31 00 00       	call   f01188f3 <CCP>
f0115782:	83 c4 30             	add    $0x30,%esp
f0115785:	83 f8 01             	cmp    $0x1,%eax
f0115788:	74 28                	je     f01157b2 <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f011578a:	83 ec 04             	sub    $0x4,%esp
f011578d:	68 84 c4 12 f0       	push   $0xf012c484
f0115792:	68 9e 03 00 00       	push   $0x39e
f0115797:	68 42 bb 12 f0       	push   $0xf012bb42
f011579c:	e8 16 ad fe ff       	call   f01004b7 <_warn>
f01157a1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01157a4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f01157ab:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f01157b2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01157b6:	74 04                	je     f01157bc <test_copy_paste_chunk+0xe68>
f01157b8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01157bc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f01157c3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01157c7:	0f 84 9e 00 00 00    	je     f011586b <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f01157cd:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f01157d4:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f01157db:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f01157e2:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f01157e9:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f01157f0:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f01157f7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01157fa:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f01157fd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115800:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f0115803:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115806:	8a 00                	mov    (%eax),%al
f0115808:	3c 61                	cmp    $0x61,%al
f011580a:	75 2d                	jne    f0115839 <test_copy_paste_chunk+0xee5>
f011580c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011580f:	8a 00                	mov    (%eax),%al
f0115811:	3c 61                	cmp    $0x61,%al
f0115813:	75 24                	jne    f0115839 <test_copy_paste_chunk+0xee5>
f0115815:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115818:	8a 00                	mov    (%eax),%al
f011581a:	3c 79                	cmp    $0x79,%al
f011581c:	75 1b                	jne    f0115839 <test_copy_paste_chunk+0xee5>
f011581e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0115821:	8a 00                	mov    (%eax),%al
f0115823:	3c 62                	cmp    $0x62,%al
f0115825:	75 12                	jne    f0115839 <test_copy_paste_chunk+0xee5>
f0115827:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011582a:	8a 00                	mov    (%eax),%al
f011582c:	3c 63                	cmp    $0x63,%al
f011582e:	75 09                	jne    f0115839 <test_copy_paste_chunk+0xee5>
f0115830:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115833:	8a 00                	mov    (%eax),%al
f0115835:	3c 7a                	cmp    $0x7a,%al
f0115837:	74 21                	je     f011585a <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0115839:	83 ec 04             	sub    $0x4,%esp
f011583c:	68 38 c3 12 f0       	push   $0xf012c338
f0115841:	68 b0 03 00 00       	push   $0x3b0
f0115846:	68 42 bb 12 f0       	push   $0xf012bb42
f011584b:	e8 67 ac fe ff       	call   f01004b7 <_warn>
f0115850:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0115853:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f011585a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011585e:	74 04                	je     f0115864 <test_copy_paste_chunk+0xf10>
f0115860:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f0115864:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011586b:	e8 99 81 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115870:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0115873:	6a 00                	push   $0x0
f0115875:	6a 02                	push   $0x2
f0115877:	68 00 10 90 00       	push   $0x901000
f011587c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011587f:	e8 b1 2b 00 00       	call   f0118435 <SB>
f0115884:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f0115887:	6a 00                	push   $0x0
f0115889:	6a 02                	push   $0x2
f011588b:	68 00 20 90 00       	push   $0x902000
f0115890:	ff 75 d4             	pushl  -0x2c(%ebp)
f0115893:	e8 9d 2b 00 00       	call   f0118435 <SB>
f0115898:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f011589b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011589e:	c1 e0 03             	shl    $0x3,%eax
f01158a1:	50                   	push   %eax
f01158a2:	68 00 f0 bf 00       	push   $0xbff000
f01158a7:	68 00 10 90 00       	push   $0x901000
f01158ac:	ff 75 d4             	pushl  -0x2c(%ebp)
f01158af:	e8 36 3e ff ff       	call   f01096ea <copy_paste_chunk>
f01158b4:	83 c4 10             	add    $0x10,%esp
f01158b7:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01158bd:	e8 47 81 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01158c2:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f01158c5:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f01158cc:	75 0b                	jne    f01158d9 <test_copy_paste_chunk+0xf85>
f01158ce:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01158d1:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01158d4:	83 f8 03             	cmp    $0x3,%eax
f01158d7:	74 2e                	je     f0115907 <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01158d9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01158dc:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01158df:	83 ec 0c             	sub    $0xc,%esp
f01158e2:	50                   	push   %eax
f01158e3:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f01158e9:	68 e4 c3 12 f0       	push   $0xf012c3e4
f01158ee:	68 c0 03 00 00       	push   $0x3c0
f01158f3:	68 42 bb 12 f0       	push   $0xf012bb42
f01158f8:	e8 ba ab fe ff       	call   f01004b7 <_warn>
f01158fd:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115900:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0115907:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011590b:	74 04                	je     f0115911 <test_copy_paste_chunk+0xfbd>
f011590d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115911:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0115918:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f011591f:	83 ec 08             	sub    $0x8,%esp
f0115922:	6a 01                	push   $0x1
f0115924:	6a 07                	push   $0x7
f0115926:	6a 03                	push   $0x3
f0115928:	6a 07                	push   $0x7
f011592a:	6a 03                	push   $0x3
f011592c:	6a 01                	push   $0x1
f011592e:	68 00 20 00 00       	push   $0x2000
f0115933:	68 00 f0 bf 00       	push   $0xbff000
f0115938:	68 00 10 90 00       	push   $0x901000
f011593d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0115940:	e8 ae 2f 00 00       	call   f01188f3 <CCP>
f0115945:	83 c4 30             	add    $0x30,%esp
f0115948:	83 f8 01             	cmp    $0x1,%eax
f011594b:	74 28                	je     f0115975 <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f011594d:	83 ec 04             	sub    $0x4,%esp
f0115950:	68 84 c4 12 f0       	push   $0xf012c484
f0115955:	68 c9 03 00 00       	push   $0x3c9
f011595a:	68 42 bb 12 f0       	push   $0xf012bb42
f011595f:	e8 53 ab fe ff       	call   f01004b7 <_warn>
f0115964:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115967:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f011596e:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0115975:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0115979:	74 04                	je     f011597f <test_copy_paste_chunk+0x102b>
f011597b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011597f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0115986:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011598a:	74 72                	je     f01159fe <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f011598c:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0115993:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f011599a:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f01159a1:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f01159a8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01159ab:	8a 00                	mov    (%eax),%al
f01159ad:	3c 62                	cmp    $0x62,%al
f01159af:	75 1b                	jne    f01159cc <test_copy_paste_chunk+0x1078>
f01159b1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01159b4:	8a 00                	mov    (%eax),%al
f01159b6:	3c 62                	cmp    $0x62,%al
f01159b8:	75 12                	jne    f01159cc <test_copy_paste_chunk+0x1078>
f01159ba:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01159bd:	8a 00                	mov    (%eax),%al
f01159bf:	3c 7a                	cmp    $0x7a,%al
f01159c1:	75 09                	jne    f01159cc <test_copy_paste_chunk+0x1078>
f01159c3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01159c6:	8a 00                	mov    (%eax),%al
f01159c8:	3c 7a                	cmp    $0x7a,%al
f01159ca:	74 21                	je     f01159ed <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01159cc:	83 ec 04             	sub    $0x4,%esp
f01159cf:	68 38 c3 12 f0       	push   $0xf012c338
f01159d4:	68 d5 03 00 00       	push   $0x3d5
f01159d9:	68 42 bb 12 f0       	push   $0xf012bb42
f01159de:	e8 d4 aa fe ff       	call   f01004b7 <_warn>
f01159e3:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01159e6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f01159ed:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01159f1:	74 04                	je     f01159f7 <test_copy_paste_chunk+0x10a3>
f01159f3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01159f7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f01159fe:	83 ec 0c             	sub    $0xc,%esp
f0115a01:	68 32 c5 12 f0       	push   $0xf012c532
f0115a06:	e8 61 b5 fe ff       	call   f0100f6c <cprintf>
f0115a0b:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0115a0e:	83 ec 08             	sub    $0x8,%esp
f0115a11:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115a14:	68 44 c5 12 f0       	push   $0xf012c544
f0115a19:	e8 4e b5 fe ff       	call   f0100f6c <cprintf>
f0115a1e:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115a21:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0115a25:	75 10                	jne    f0115a37 <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f0115a27:	83 ec 0c             	sub    $0xc,%esp
f0115a2a:	68 78 c5 12 f0       	push   $0xf012c578
f0115a2f:	e8 38 b5 fe ff       	call   f0100f6c <cprintf>
f0115a34:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0115a37:	a1 84 1b 5a f0       	mov    0xf05a1b84,%eax
f0115a3c:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0115a3f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115a42:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115a45:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115a4a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115a4d:	5b                   	pop    %ebx
f0115a4e:	5e                   	pop    %esi
f0115a4f:	5f                   	pop    %edi
f0115a50:	5d                   	pop    %ebp
f0115a51:	c3                   	ret    

f0115a52 <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0115a52:	55                   	push   %ebp
f0115a53:	89 e5                	mov    %esp,%ebp
f0115a55:	57                   	push   %edi
f0115a56:	56                   	push   %esi
f0115a57:	53                   	push   %ebx
f0115a58:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0115a5e:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0115a64:	bb 44 c2 12 f0       	mov    $0xf012c244,%ebx
f0115a69:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115a6e:	89 c7                	mov    %eax,%edi
f0115a70:	89 de                	mov    %ebx,%esi
f0115a72:	89 d1                	mov    %edx,%ecx
f0115a74:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115a76:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0115a7c:	b9 23 00 00 00       	mov    $0x23,%ecx
f0115a81:	b0 00                	mov    $0x0,%al
f0115a83:	89 d7                	mov    %edx,%edi
f0115a85:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0115a87:	6a 00                	push   $0x0
f0115a89:	6a 0a                	push   $0xa
f0115a8b:	6a 14                	push   $0x14
f0115a8d:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0115a93:	50                   	push   %eax
f0115a94:	e8 d7 3f ff ff       	call   f0109a70 <env_create>
f0115a99:	83 c4 10             	add    $0x10,%esp
f0115a9c:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0115a9f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115aa2:	8b 40 64             	mov    0x64(%eax),%eax
f0115aa5:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0115aa8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115aab:	8b 40 68             	mov    0x68(%eax),%eax
f0115aae:	89 45 80             	mov    %eax,-0x80(%ebp)
f0115ab1:	8b 45 80             	mov    -0x80(%ebp),%eax
f0115ab4:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0115ab7:	83 ec 0c             	sub    $0xc,%esp
f0115aba:	ff 75 cc             	pushl  -0x34(%ebp)
f0115abd:	e8 fd 2d 00 00       	call   f01188bf <ClearUserSpace>
f0115ac2:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0115ac5:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0115acc:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0115ad3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0115ada:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0115ade:	83 ec 0c             	sub    $0xc,%esp
f0115ae1:	68 f0 cd 12 f0       	push   $0xf012cdf0
f0115ae6:	e8 81 b4 fe ff       	call   f0100f6c <cprintf>
f0115aeb:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f0115aee:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF0104000;
f0115af5:	c7 45 b8 00 40 10 f0 	movl   $0xf0104000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f0115afc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115aff:	8a 00                	mov    (%eax),%al
f0115b01:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0115b07:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115b0a:	8a 00                	mov    (%eax),%al
f0115b0c:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0115b12:	e8 f2 7e ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115b17:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f0115b1a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115b1d:	89 d0                	mov    %edx,%eax
f0115b1f:	01 c0                	add    %eax,%eax
f0115b21:	01 d0                	add    %edx,%eax
f0115b23:	01 c0                	add    %eax,%eax
f0115b25:	83 ec 0c             	sub    $0xc,%esp
f0115b28:	6a 02                	push   $0x2
f0115b2a:	50                   	push   %eax
f0115b2b:	68 00 40 10 f0       	push   $0xf0104000
f0115b30:	68 00 00 10 f0       	push   $0xf0100000
f0115b35:	ff 75 cc             	pushl  -0x34(%ebp)
f0115b38:	e8 c7 3b ff ff       	call   f0109704 <share_chunk>
f0115b3d:	83 c4 20             	add    $0x20,%esp
f0115b40:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0115b43:	e8 c1 7e ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115b48:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0115b4b:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0115b4f:	75 08                	jne    f0115b59 <test_share_chunk+0x107>
f0115b51:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115b54:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0115b57:	74 28                	je     f0115b81 <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0115b59:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115b5c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0115b5f:	83 ec 0c             	sub    $0xc,%esp
f0115b62:	50                   	push   %eax
f0115b63:	ff 75 b0             	pushl  -0x50(%ebp)
f0115b66:	68 1c ce 12 f0       	push   $0xf012ce1c
f0115b6b:	68 11 04 00 00       	push   $0x411
f0115b70:	68 42 bb 12 f0       	push   $0xf012bb42
f0115b75:	e8 3d a9 fe ff       	call   f01004b7 <_warn>
f0115b7a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b7d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115b81:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115b85:	74 04                	je     f0115b8b <test_share_chunk+0x139>
f0115b87:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115b8b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0115b8f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0115b92:	c1 e0 03             	shl    $0x3,%eax
f0115b95:	83 ec 08             	sub    $0x8,%esp
f0115b98:	68 fd 00 00 00       	push   $0xfd
f0115b9d:	6a 07                	push   $0x7
f0115b9f:	6a 03                	push   $0x3
f0115ba1:	6a 07                	push   $0x7
f0115ba3:	6a 03                	push   $0x3
f0115ba5:	6a 01                	push   $0x1
f0115ba7:	50                   	push   %eax
f0115ba8:	68 00 40 10 f0       	push   $0xf0104000
f0115bad:	68 00 00 10 f0       	push   $0xf0100000
f0115bb2:	ff 75 cc             	pushl  -0x34(%ebp)
f0115bb5:	e8 39 2d 00 00       	call   f01188f3 <CCP>
f0115bba:	83 c4 30             	add    $0x30,%esp
f0115bbd:	85 c0                	test   %eax,%eax
f0115bbf:	75 1e                	jne    f0115bdf <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0115bc1:	83 ec 04             	sub    $0x4,%esp
f0115bc4:	68 78 ce 12 f0       	push   $0xf012ce78
f0115bc9:	68 19 04 00 00       	push   $0x419
f0115bce:	68 42 bb 12 f0       	push   $0xf012bb42
f0115bd3:	e8 df a8 fe ff       	call   f01004b7 <_warn>
f0115bd8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115bdb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115bdf:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115be3:	74 04                	je     f0115be9 <test_share_chunk+0x197>
f0115be5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f0115be9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115bec:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0115bef:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115bf2:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0115bf5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115bf8:	8a 00                	mov    (%eax),%al
f0115bfa:	3c 41                	cmp    $0x41,%al
f0115bfc:	75 09                	jne    f0115c07 <test_share_chunk+0x1b5>
f0115bfe:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115c01:	8a 00                	mov    (%eax),%al
f0115c03:	3c 42                	cmp    $0x42,%al
f0115c05:	74 1e                	je     f0115c25 <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0115c07:	83 ec 04             	sub    $0x4,%esp
f0115c0a:	68 c0 ce 12 f0       	push   $0xf012cec0
f0115c0f:	68 23 04 00 00       	push   $0x423
f0115c14:	68 42 bb 12 f0       	push   $0xf012bb42
f0115c19:	e8 99 a8 fe ff       	call   f01004b7 <_warn>
f0115c1e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115c21:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115c25:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115c29:	74 04                	je     f0115c2f <test_share_chunk+0x1dd>
f0115c2b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115c2f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f0115c33:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f0115c39:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115c3c:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f0115c3e:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f0115c44:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115c47:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f0115c49:	83 ec 0c             	sub    $0xc,%esp
f0115c4c:	68 f5 ce 12 f0       	push   $0xf012cef5
f0115c51:	e8 16 b3 fe ff       	call   f0100f6c <cprintf>
f0115c56:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0115c59:	83 ec 0c             	sub    $0xc,%esp
f0115c5c:	68 04 cf 12 f0       	push   $0xf012cf04
f0115c61:	e8 06 b3 fe ff       	call   f0100f6c <cprintf>
f0115c66:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0115c69:	e8 9b 7d ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115c6e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0115c71:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115c74:	c1 e0 05             	shl    $0x5,%eax
f0115c77:	83 ec 0c             	sub    $0xc,%esp
f0115c7a:	68 02 0e 00 00       	push   $0xe02
f0115c7f:	50                   	push   %eax
f0115c80:	68 00 00 00 40       	push   $0x40000000
f0115c85:	68 00 00 00 f0       	push   $0xf0000000
f0115c8a:	ff 75 cc             	pushl  -0x34(%ebp)
f0115c8d:	e8 72 3a ff ff       	call   f0109704 <share_chunk>
f0115c92:	83 c4 20             	add    $0x20,%esp
f0115c95:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0115c98:	e8 6c 7d ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115c9d:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0115ca0:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0115ca4:	75 1f                	jne    f0115cc5 <test_share_chunk+0x273>
f0115ca6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115ca9:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0115cac:	89 c1                	mov    %eax,%ecx
f0115cae:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115cb1:	c1 e0 05             	shl    $0x5,%eax
f0115cb4:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0115cb7:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0115cbe:	99                   	cltd   
f0115cbf:	f7 fb                	idiv   %ebx
f0115cc1:	39 c1                	cmp    %eax,%ecx
f0115cc3:	74 28                	je     f0115ced <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0115cc5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115cc8:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0115ccb:	83 ec 0c             	sub    $0xc,%esp
f0115cce:	50                   	push   %eax
f0115ccf:	ff 75 a8             	pushl  -0x58(%ebp)
f0115cd2:	68 40 cf 12 f0       	push   $0xf012cf40
f0115cd7:	68 3b 04 00 00       	push   $0x43b
f0115cdc:	68 42 bb 12 f0       	push   $0xf012bb42
f0115ce1:	e8 d1 a7 fe ff       	call   f01004b7 <_warn>
f0115ce6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ce9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115ced:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115cf1:	74 04                	je     f0115cf7 <test_share_chunk+0x2a5>
f0115cf3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115cf7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0115cfb:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0115d02:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115d05:	c1 e0 05             	shl    $0x5,%eax
f0115d08:	83 ec 08             	sub    $0x8,%esp
f0115d0b:	6a 02                	push   $0x2
f0115d0d:	6a 07                	push   $0x7
f0115d0f:	6a 03                	push   $0x3
f0115d11:	68 07 0e 00 00       	push   $0xe07
f0115d16:	68 03 0e 00 00       	push   $0xe03
f0115d1b:	6a ff                	push   $0xffffffff
f0115d1d:	50                   	push   %eax
f0115d1e:	68 00 00 00 40       	push   $0x40000000
f0115d23:	68 00 00 00 f0       	push   $0xf0000000
f0115d28:	ff 75 cc             	pushl  -0x34(%ebp)
f0115d2b:	e8 c3 2b 00 00       	call   f01188f3 <CCP>
f0115d30:	83 c4 30             	add    $0x30,%esp
f0115d33:	85 c0                	test   %eax,%eax
f0115d35:	75 25                	jne    f0115d5c <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0115d37:	83 ec 04             	sub    $0x4,%esp
f0115d3a:	68 78 ce 12 f0       	push   $0xf012ce78
f0115d3f:	68 44 04 00 00       	push   $0x444
f0115d44:	68 42 bb 12 f0       	push   $0xf012bb42
f0115d49:	e8 69 a7 fe ff       	call   f01004b7 <_warn>
f0115d4e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115d51:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0115d55:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0115d5c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115d5f:	89 d0                	mov    %edx,%eax
f0115d61:	01 c0                	add    %eax,%eax
f0115d63:	01 d0                	add    %edx,%eax
f0115d65:	c1 e0 02             	shl    $0x2,%eax
f0115d68:	83 ec 08             	sub    $0x8,%esp
f0115d6b:	6a 02                	push   $0x2
f0115d6d:	6a 07                	push   $0x7
f0115d6f:	6a 03                	push   $0x3
f0115d71:	68 07 0e 00 00       	push   $0xe07
f0115d76:	68 03 0e 00 00       	push   $0xe03
f0115d7b:	6a 02                	push   $0x2
f0115d7d:	50                   	push   %eax
f0115d7e:	68 00 00 00 40       	push   $0x40000000
f0115d83:	68 00 00 00 f0       	push   $0xf0000000
f0115d88:	ff 75 cc             	pushl  -0x34(%ebp)
f0115d8b:	e8 63 2b 00 00       	call   f01188f3 <CCP>
f0115d90:	83 c4 30             	add    $0x30,%esp
f0115d93:	85 c0                	test   %eax,%eax
f0115d95:	75 1e                	jne    f0115db5 <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0115d97:	83 ec 04             	sub    $0x4,%esp
f0115d9a:	68 78 ce 12 f0       	push   $0xf012ce78
f0115d9f:	68 4b 04 00 00       	push   $0x44b
f0115da4:	68 42 bb 12 f0       	push   $0xf012bb42
f0115da9:	e8 09 a7 fe ff       	call   f01004b7 <_warn>
f0115dae:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115db1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115db5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115db9:	74 04                	je     f0115dbf <test_share_chunk+0x36d>
f0115dbb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115dbf:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0115dc3:	b8 30 44 5c f0       	mov    $0xf05c4430,%eax
f0115dc8:	05 00 00 00 10       	add    $0x10000000,%eax
f0115dcd:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0115dd0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115dd3:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0115dd8:	83 ec 08             	sub    $0x8,%esp
f0115ddb:	6a 02                	push   $0x2
f0115ddd:	6a 07                	push   $0x7
f0115ddf:	6a 03                	push   $0x3
f0115de1:	68 07 0e 00 00       	push   $0xe07
f0115de6:	68 03 0e 00 00       	push   $0xe03
f0115deb:	6a 02                	push   $0x2
f0115ded:	50                   	push   %eax
f0115dee:	68 00 00 0a 40       	push   $0x400a0000
f0115df3:	68 00 00 0a f0       	push   $0xf00a0000
f0115df8:	ff 75 cc             	pushl  -0x34(%ebp)
f0115dfb:	e8 f3 2a 00 00       	call   f01188f3 <CCP>
f0115e00:	83 c4 30             	add    $0x30,%esp
f0115e03:	85 c0                	test   %eax,%eax
f0115e05:	75 1e                	jne    f0115e25 <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0115e07:	83 ec 04             	sub    $0x4,%esp
f0115e0a:	68 78 ce 12 f0       	push   $0xf012ce78
f0115e0f:	68 55 04 00 00       	push   $0x455
f0115e14:	68 42 bb 12 f0       	push   $0xf012bb42
f0115e19:	e8 99 a6 fe ff       	call   f01004b7 <_warn>
f0115e1e:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115e21:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115e25:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e29:	74 04                	je     f0115e2f <test_share_chunk+0x3dd>
f0115e2b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115e2f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0115e33:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0115e37:	0f 84 a4 00 00 00    	je     f0115ee1 <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f0115e3d:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f0115e44:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115e47:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f0115e4a:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f0115e51:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115e54:	8a 00                	mov    (%eax),%al
f0115e56:	3c 41                	cmp    $0x41,%al
f0115e58:	75 09                	jne    f0115e63 <test_share_chunk+0x411>
f0115e5a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115e5d:	8a 00                	mov    (%eax),%al
f0115e5f:	3c 41                	cmp    $0x41,%al
f0115e61:	74 1e                	je     f0115e81 <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0115e63:	83 ec 04             	sub    $0x4,%esp
f0115e66:	68 c0 ce 12 f0       	push   $0xf012cec0
f0115e6b:	68 62 04 00 00       	push   $0x462
f0115e70:	68 42 bb 12 f0       	push   $0xf012bb42
f0115e75:	e8 3d a6 fe ff       	call   f01004b7 <_warn>
f0115e7a:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0115e7d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0115e81:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e85:	74 04                	je     f0115e8b <test_share_chunk+0x439>
f0115e87:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0115e8b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0115e8f:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0115e96:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115e99:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f0115e9c:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0115ea3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115ea6:	8a 00                	mov    (%eax),%al
f0115ea8:	3c 43                	cmp    $0x43,%al
f0115eaa:	75 09                	jne    f0115eb5 <test_share_chunk+0x463>
f0115eac:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0115eaf:	8a 00                	mov    (%eax),%al
f0115eb1:	3c 43                	cmp    $0x43,%al
f0115eb3:	74 1e                	je     f0115ed3 <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0115eb5:	83 ec 04             	sub    $0x4,%esp
f0115eb8:	68 c0 ce 12 f0       	push   $0xf012cec0
f0115ebd:	68 6d 04 00 00       	push   $0x46d
f0115ec2:	68 42 bb 12 f0       	push   $0xf012bb42
f0115ec7:	e8 eb a5 fe ff       	call   f01004b7 <_warn>
f0115ecc:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0115ecf:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0115ed3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115ed7:	74 04                	je     f0115edd <test_share_chunk+0x48b>
f0115ed9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0115edd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0115ee1:	83 ec 0c             	sub    $0xc,%esp
f0115ee4:	68 cf c4 12 f0       	push   $0xf012c4cf
f0115ee9:	e8 7e b0 fe ff       	call   f0100f6c <cprintf>
f0115eee:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0115ef1:	83 ec 0c             	sub    $0xc,%esp
f0115ef4:	68 90 cf 12 f0       	push   $0xf012cf90
f0115ef9:	e8 6e b0 fe ff       	call   f0100f6c <cprintf>
f0115efe:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0115f01:	e8 03 7b ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115f06:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0115f09:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115f0c:	89 d0                	mov    %edx,%eax
f0115f0e:	c1 e0 03             	shl    $0x3,%eax
f0115f11:	01 d0                	add    %edx,%eax
f0115f13:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0115f1a:	01 d0                	add    %edx,%eax
f0115f1c:	c1 e0 03             	shl    $0x3,%eax
f0115f1f:	83 ec 0c             	sub    $0xc,%esp
f0115f22:	6a 06                	push   $0x6
f0115f24:	50                   	push   %eax
f0115f25:	6a 00                	push   $0x0
f0115f27:	68 00 00 00 40       	push   $0x40000000
f0115f2c:	ff 75 cc             	pushl  -0x34(%ebp)
f0115f2f:	e8 d0 37 ff ff       	call   f0109704 <share_chunk>
f0115f34:	83 c4 20             	add    $0x20,%esp
f0115f37:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0115f3a:	e8 ca 7a ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115f3f:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0115f42:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0115f46:	75 0b                	jne    f0115f53 <test_share_chunk+0x501>
f0115f48:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115f4b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0115f4e:	83 f8 01             	cmp    $0x1,%eax
f0115f51:	74 28                	je     f0115f7b <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0115f53:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115f56:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0115f59:	83 ec 0c             	sub    $0xc,%esp
f0115f5c:	50                   	push   %eax
f0115f5d:	ff 75 a0             	pushl  -0x60(%ebp)
f0115f60:	68 40 cf 12 f0       	push   $0xf012cf40
f0115f65:	68 83 04 00 00       	push   $0x483
f0115f6a:	68 42 bb 12 f0       	push   $0xf012bb42
f0115f6f:	e8 43 a5 fe ff       	call   f01004b7 <_warn>
f0115f74:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f77:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115f7b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115f7f:	74 04                	je     f0115f85 <test_share_chunk+0x533>
f0115f81:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115f85:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0115f89:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0115f90:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0115f93:	05 00 80 02 00       	add    $0x28000,%eax
f0115f98:	c1 e0 02             	shl    $0x2,%eax
f0115f9b:	83 ec 08             	sub    $0x8,%esp
f0115f9e:	6a 02                	push   $0x2
f0115fa0:	6a 07                	push   $0x7
f0115fa2:	6a 03                	push   $0x3
f0115fa4:	6a 07                	push   $0x7
f0115fa6:	6a 07                	push   $0x7
f0115fa8:	6a ff                	push   $0xffffffff
f0115faa:	50                   	push   %eax
f0115fab:	6a 00                	push   $0x0
f0115fad:	68 00 00 00 40       	push   $0x40000000
f0115fb2:	ff 75 cc             	pushl  -0x34(%ebp)
f0115fb5:	e8 39 29 00 00       	call   f01188f3 <CCP>
f0115fba:	83 c4 30             	add    $0x30,%esp
f0115fbd:	85 c0                	test   %eax,%eax
f0115fbf:	75 25                	jne    f0115fe6 <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0115fc1:	83 ec 04             	sub    $0x4,%esp
f0115fc4:	68 78 ce 12 f0       	push   $0xf012ce78
f0115fc9:	68 8c 04 00 00       	push   $0x48c
f0115fce:	68 42 bb 12 f0       	push   $0xf012bb42
f0115fd3:	e8 df a4 fe ff       	call   f01004b7 <_warn>
f0115fd8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0115fdb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0115fdf:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0115fe6:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115fe9:	89 d0                	mov    %edx,%eax
f0115feb:	01 c0                	add    %eax,%eax
f0115fed:	01 d0                	add    %edx,%eax
f0115fef:	c1 e0 02             	shl    $0x2,%eax
f0115ff2:	83 ec 08             	sub    $0x8,%esp
f0115ff5:	6a 02                	push   $0x2
f0115ff7:	6a 07                	push   $0x7
f0115ff9:	6a 03                	push   $0x3
f0115ffb:	6a 07                	push   $0x7
f0115ffd:	6a 07                	push   $0x7
f0115fff:	6a 03                	push   $0x3
f0116001:	50                   	push   %eax
f0116002:	6a 00                	push   $0x0
f0116004:	68 00 00 00 40       	push   $0x40000000
f0116009:	ff 75 cc             	pushl  -0x34(%ebp)
f011600c:	e8 e2 28 00 00       	call   f01188f3 <CCP>
f0116011:	83 c4 30             	add    $0x30,%esp
f0116014:	85 c0                	test   %eax,%eax
f0116016:	75 1e                	jne    f0116036 <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0116018:	83 ec 04             	sub    $0x4,%esp
f011601b:	68 78 ce 12 f0       	push   $0xf012ce78
f0116020:	68 93 04 00 00       	push   $0x493
f0116025:	68 42 bb 12 f0       	push   $0xf012bb42
f011602a:	e8 88 a4 fe ff       	call   f01004b7 <_warn>
f011602f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0116032:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116036:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011603a:	74 04                	je     f0116040 <test_share_chunk+0x5ee>
f011603c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116040:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0116044:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116047:	89 d0                	mov    %edx,%eax
f0116049:	01 c0                	add    %eax,%eax
f011604b:	01 d0                	add    %edx,%eax
f011604d:	c1 e0 02             	shl    $0x2,%eax
f0116050:	f7 d8                	neg    %eax
f0116052:	05 00 00 0a 00       	add    $0xa0000,%eax
f0116057:	83 ec 08             	sub    $0x8,%esp
f011605a:	6a 02                	push   $0x2
f011605c:	6a 07                	push   $0x7
f011605e:	6a 03                	push   $0x3
f0116060:	6a 07                	push   $0x7
f0116062:	6a 07                	push   $0x7
f0116064:	6a 02                	push   $0x2
f0116066:	50                   	push   %eax
f0116067:	68 00 30 00 00       	push   $0x3000
f011606c:	68 00 30 00 40       	push   $0x40003000
f0116071:	ff 75 cc             	pushl  -0x34(%ebp)
f0116074:	e8 7a 28 00 00       	call   f01188f3 <CCP>
f0116079:	83 c4 30             	add    $0x30,%esp
f011607c:	85 c0                	test   %eax,%eax
f011607e:	75 1e                	jne    f011609e <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0116080:	83 ec 04             	sub    $0x4,%esp
f0116083:	68 78 ce 12 f0       	push   $0xf012ce78
f0116088:	68 9b 04 00 00       	push   $0x49b
f011608d:	68 42 bb 12 f0       	push   $0xf012bb42
f0116092:	e8 20 a4 fe ff       	call   f01004b7 <_warn>
f0116097:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011609a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011609e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01160a2:	74 04                	je     f01160a8 <test_share_chunk+0x656>
f01160a4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01160a8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01160ac:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01160af:	c1 e0 02             	shl    $0x2,%eax
f01160b2:	83 ec 08             	sub    $0x8,%esp
f01160b5:	6a 02                	push   $0x2
f01160b7:	6a 07                	push   $0x7
f01160b9:	6a 03                	push   $0x3
f01160bb:	6a 07                	push   $0x7
f01160bd:	6a 07                	push   $0x7
f01160bf:	6a 03                	push   $0x3
f01160c1:	50                   	push   %eax
f01160c2:	68 00 00 0a 00       	push   $0xa0000
f01160c7:	68 00 00 0a 40       	push   $0x400a0000
f01160cc:	ff 75 cc             	pushl  -0x34(%ebp)
f01160cf:	e8 1f 28 00 00       	call   f01188f3 <CCP>
f01160d4:	83 c4 30             	add    $0x30,%esp
f01160d7:	85 c0                	test   %eax,%eax
f01160d9:	75 1e                	jne    f01160f9 <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01160db:	83 ec 04             	sub    $0x4,%esp
f01160de:	68 78 ce 12 f0       	push   $0xf012ce78
f01160e3:	68 a3 04 00 00       	push   $0x4a3
f01160e8:	68 42 bb 12 f0       	push   $0xf012bb42
f01160ed:	e8 c5 a3 fe ff       	call   f01004b7 <_warn>
f01160f2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01160f5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01160f9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01160fd:	74 04                	je     f0116103 <test_share_chunk+0x6b1>
f01160ff:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116103:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0116107:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f011610b:	0f 84 92 00 00 00    	je     f01161a3 <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f0116111:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f0116118:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f011611f:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f0116126:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f011612d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116130:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f0116133:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f011613a:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0116141:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116144:	8a 00                	mov    (%eax),%al
f0116146:	3c 41                	cmp    $0x41,%al
f0116148:	75 2d                	jne    f0116177 <test_share_chunk+0x725>
f011614a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011614d:	8a 00                	mov    (%eax),%al
f011614f:	3c 41                	cmp    $0x41,%al
f0116151:	75 24                	jne    f0116177 <test_share_chunk+0x725>
f0116153:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0116156:	8a 00                	mov    (%eax),%al
f0116158:	3c 41                	cmp    $0x41,%al
f011615a:	75 1b                	jne    f0116177 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f011615c:	8b 45 98             	mov    -0x68(%ebp),%eax
f011615f:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0116161:	3c 44                	cmp    $0x44,%al
f0116163:	75 12                	jne    f0116177 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0116165:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0116168:	8a 00                	mov    (%eax),%al
f011616a:	3c 44                	cmp    $0x44,%al
f011616c:	75 09                	jne    f0116177 <test_share_chunk+0x725>
f011616e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0116171:	8a 00                	mov    (%eax),%al
f0116173:	3c 44                	cmp    $0x44,%al
f0116175:	74 1e                	je     f0116195 <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0116177:	83 ec 04             	sub    $0x4,%esp
f011617a:	68 c0 ce 12 f0       	push   $0xf012cec0
f011617f:	68 b5 04 00 00       	push   $0x4b5
f0116184:	68 42 bb 12 f0       	push   $0xf012bb42
f0116189:	e8 29 a3 fe ff       	call   f01004b7 <_warn>
f011618e:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0116191:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0116195:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116199:	74 04                	je     f011619f <test_share_chunk+0x74d>
f011619b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011619f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f01161a3:	83 ec 0c             	sub    $0xc,%esp
f01161a6:	68 32 c5 12 f0       	push   $0xf012c532
f01161ab:	e8 bc ad fe ff       	call   f0100f6c <cprintf>
f01161b0:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f01161b3:	83 ec 0c             	sub    $0xc,%esp
f01161b6:	68 cc cf 12 f0       	push   $0xf012cfcc
f01161bb:	e8 ac ad fe ff       	call   f0100f6c <cprintf>
f01161c0:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01161c3:	e8 41 78 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01161c8:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f01161cb:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01161ce:	89 d0                	mov    %edx,%eax
f01161d0:	01 c0                	add    %eax,%eax
f01161d2:	01 d0                	add    %edx,%eax
f01161d4:	01 c0                	add    %eax,%eax
f01161d6:	01 d0                	add    %edx,%eax
f01161d8:	83 ec 0c             	sub    $0xc,%esp
f01161db:	6a 04                	push   $0x4
f01161dd:	50                   	push   %eax
f01161de:	68 00 fc 3f 00       	push   $0x3ffc00
f01161e3:	68 00 fc 09 00       	push   $0x9fc00
f01161e8:	ff 75 cc             	pushl  -0x34(%ebp)
f01161eb:	e8 14 35 ff ff       	call   f0109704 <share_chunk>
f01161f0:	83 c4 20             	add    $0x20,%esp
f01161f3:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01161f6:	e8 0e 78 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01161fb:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f01161fe:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f0116202:	75 0b                	jne    f011620f <test_share_chunk+0x7bd>
f0116204:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116207:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011620a:	83 f8 01             	cmp    $0x1,%eax
f011620d:	74 28                	je     f0116237 <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011620f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116212:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0116215:	83 ec 0c             	sub    $0xc,%esp
f0116218:	50                   	push   %eax
f0116219:	ff 75 8c             	pushl  -0x74(%ebp)
f011621c:	68 40 cf 12 f0       	push   $0xf012cf40
f0116221:	68 cb 04 00 00       	push   $0x4cb
f0116226:	68 42 bb 12 f0       	push   $0xf012bb42
f011622b:	e8 87 a2 fe ff       	call   f01004b7 <_warn>
f0116230:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116233:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116237:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011623b:	74 04                	je     f0116241 <test_share_chunk+0x7ef>
f011623d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0116241:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0116245:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f011624c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011624f:	89 d0                	mov    %edx,%eax
f0116251:	01 c0                	add    %eax,%eax
f0116253:	01 d0                	add    %edx,%eax
f0116255:	c1 e0 02             	shl    $0x2,%eax
f0116258:	83 ec 08             	sub    $0x8,%esp
f011625b:	6a 02                	push   $0x2
f011625d:	6a 07                	push   $0x7
f011625f:	6a 07                	push   $0x7
f0116261:	6a 07                	push   $0x7
f0116263:	6a 05                	push   $0x5
f0116265:	6a ff                	push   $0xffffffff
f0116267:	50                   	push   %eax
f0116268:	68 00 f0 3f 00       	push   $0x3ff000
f011626d:	68 00 f0 09 00       	push   $0x9f000
f0116272:	ff 75 cc             	pushl  -0x34(%ebp)
f0116275:	e8 79 26 00 00       	call   f01188f3 <CCP>
f011627a:	83 c4 30             	add    $0x30,%esp
f011627d:	85 c0                	test   %eax,%eax
f011627f:	75 25                	jne    f01162a6 <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0116281:	83 ec 04             	sub    $0x4,%esp
f0116284:	68 78 ce 12 f0       	push   $0xf012ce78
f0116289:	68 d4 04 00 00       	push   $0x4d4
f011628e:	68 42 bb 12 f0       	push   $0xf012bb42
f0116293:	e8 1f a2 fe ff       	call   f01004b7 <_warn>
f0116298:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011629b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f011629f:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f01162a6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01162aa:	74 04                	je     f01162b0 <test_share_chunk+0x85e>
f01162ac:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01162b0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01162b4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01162b7:	c1 e0 02             	shl    $0x2,%eax
f01162ba:	83 ec 08             	sub    $0x8,%esp
f01162bd:	6a 02                	push   $0x2
f01162bf:	6a 07                	push   $0x7
f01162c1:	6a 07                	push   $0x7
f01162c3:	6a 07                	push   $0x7
f01162c5:	6a 05                	push   $0x5
f01162c7:	6a 03                	push   $0x3
f01162c9:	50                   	push   %eax
f01162ca:	68 00 f0 3f 00       	push   $0x3ff000
f01162cf:	68 00 f0 09 00       	push   $0x9f000
f01162d4:	ff 75 cc             	pushl  -0x34(%ebp)
f01162d7:	e8 17 26 00 00       	call   f01188f3 <CCP>
f01162dc:	83 c4 30             	add    $0x30,%esp
f01162df:	85 c0                	test   %eax,%eax
f01162e1:	75 1e                	jne    f0116301 <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01162e3:	83 ec 04             	sub    $0x4,%esp
f01162e6:	68 78 ce 12 f0       	push   $0xf012ce78
f01162eb:	68 dd 04 00 00       	push   $0x4dd
f01162f0:	68 42 bb 12 f0       	push   $0xf012bb42
f01162f5:	e8 bd a1 fe ff       	call   f01004b7 <_warn>
f01162fa:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01162fd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116301:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116305:	74 04                	je     f011630b <test_share_chunk+0x8b9>
f0116307:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011630b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f011630f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116312:	c1 e0 03             	shl    $0x3,%eax
f0116315:	83 ec 08             	sub    $0x8,%esp
f0116318:	6a 02                	push   $0x2
f011631a:	6a 07                	push   $0x7
f011631c:	6a 07                	push   $0x7
f011631e:	6a 07                	push   $0x7
f0116320:	6a 05                	push   $0x5
f0116322:	6a 04                	push   $0x4
f0116324:	50                   	push   %eax
f0116325:	68 00 00 40 00       	push   $0x400000
f011632a:	68 00 00 0a 00       	push   $0xa0000
f011632f:	ff 75 cc             	pushl  -0x34(%ebp)
f0116332:	e8 bc 25 00 00       	call   f01188f3 <CCP>
f0116337:	83 c4 30             	add    $0x30,%esp
f011633a:	85 c0                	test   %eax,%eax
f011633c:	75 1e                	jne    f011635c <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011633e:	83 ec 04             	sub    $0x4,%esp
f0116341:	68 78 ce 12 f0       	push   $0xf012ce78
f0116346:	68 e5 04 00 00       	push   $0x4e5
f011634b:	68 42 bb 12 f0       	push   $0xf012bb42
f0116350:	e8 62 a1 fe ff       	call   f01004b7 <_warn>
f0116355:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0116358:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011635c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116360:	74 04                	je     f0116366 <test_share_chunk+0x914>
f0116362:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116366:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f011636a:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f011636e:	0f 84 b2 00 00 00    	je     f0116426 <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f0116374:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f011637b:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f0116382:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f0116389:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f0116390:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f0116397:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f011639e:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f01163a5:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f01163ac:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01163af:	8a 00                	mov    (%eax),%al
f01163b1:	3c 44                	cmp    $0x44,%al
f01163b3:	75 45                	jne    f01163fa <test_share_chunk+0x9a8>
f01163b5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01163b8:	8a 00                	mov    (%eax),%al
f01163ba:	3c 44                	cmp    $0x44,%al
f01163bc:	75 3c                	jne    f01163fa <test_share_chunk+0x9a8>
f01163be:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01163c1:	8a 00                	mov    (%eax),%al
f01163c3:	3c 44                	cmp    $0x44,%al
f01163c5:	75 33                	jne    f01163fa <test_share_chunk+0x9a8>
f01163c7:	8b 45 98             	mov    -0x68(%ebp),%eax
f01163ca:	8a 00                	mov    (%eax),%al
f01163cc:	3c 44                	cmp    $0x44,%al
f01163ce:	75 2a                	jne    f01163fa <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f01163d0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01163d3:	8a 10                	mov    (%eax),%dl
f01163d5:	8b 45 90             	mov    -0x70(%ebp),%eax
f01163d8:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f01163da:	38 c2                	cmp    %al,%dl
f01163dc:	75 1c                	jne    f01163fa <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f01163de:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01163e1:	8a 10                	mov    (%eax),%dl
f01163e3:	8b 45 88             	mov    -0x78(%ebp),%eax
f01163e6:	8a 00                	mov    (%eax),%al
f01163e8:	38 c2                	cmp    %al,%dl
f01163ea:	75 0e                	jne    f01163fa <test_share_chunk+0x9a8>
f01163ec:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01163ef:	8a 10                	mov    (%eax),%dl
f01163f1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01163f4:	8a 00                	mov    (%eax),%al
f01163f6:	38 c2                	cmp    %al,%dl
f01163f8:	74 1e                	je     f0116418 <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01163fa:	83 ec 04             	sub    $0x4,%esp
f01163fd:	68 c0 ce 12 f0       	push   $0xf012cec0
f0116402:	68 fa 04 00 00       	push   $0x4fa
f0116407:	68 42 bb 12 f0       	push   $0xf012bb42
f011640c:	e8 a6 a0 fe ff       	call   f01004b7 <_warn>
f0116411:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0116414:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0116418:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011641c:	74 04                	je     f0116422 <test_share_chunk+0x9d0>
f011641e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0116422:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f0116426:	83 ec 0c             	sub    $0xc,%esp
f0116429:	68 04 d0 12 f0       	push   $0xf012d004
f011642e:	e8 39 ab fe ff       	call   f0100f6c <cprintf>
f0116433:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f0116436:	83 ec 08             	sub    $0x8,%esp
f0116439:	ff 75 e4             	pushl  -0x1c(%ebp)
f011643c:	68 14 d0 12 f0       	push   $0xf012d014
f0116441:	e8 26 ab fe ff       	call   f0100f6c <cprintf>
f0116446:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0116449:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f011644d:	75 10                	jne    f011645f <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f011644f:	83 ec 0c             	sub    $0xc,%esp
f0116452:	68 44 d0 12 f0       	push   $0xf012d044
f0116457:	e8 10 ab fe ff       	call   f0100f6c <cprintf>
f011645c:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011645f:	a1 84 1b 5a f0       	mov    0xf05a1b84,%eax
f0116464:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0116467:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011646a:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f011646d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0116472:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116475:	5b                   	pop    %ebx
f0116476:	5e                   	pop    %esi
f0116477:	5f                   	pop    %edi
f0116478:	5d                   	pop    %ebp
f0116479:	c3                   	ret    

f011647a <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f011647a:	55                   	push   %ebp
f011647b:	89 e5                	mov    %esp,%ebp
f011647d:	57                   	push   %edi
f011647e:	56                   	push   %esi
f011647f:	53                   	push   %ebx
f0116480:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0116486:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f011648c:	bb 44 c2 12 f0       	mov    $0xf012c244,%ebx
f0116491:	ba 0f 00 00 00       	mov    $0xf,%edx
f0116496:	89 c7                	mov    %eax,%edi
f0116498:	89 de                	mov    %ebx,%esi
f011649a:	89 d1                	mov    %edx,%ecx
f011649c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011649e:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f01164a4:	b9 23 00 00 00       	mov    $0x23,%ecx
f01164a9:	b0 00                	mov    $0x0,%al
f01164ab:	89 d7                	mov    %edx,%edi
f01164ad:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01164af:	6a 00                	push   $0x0
f01164b1:	6a 0a                	push   $0xa
f01164b3:	6a 14                	push   $0x14
f01164b5:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01164bb:	50                   	push   %eax
f01164bc:	e8 af 35 ff ff       	call   f0109a70 <env_create>
f01164c1:	83 c4 10             	add    $0x10,%esp
f01164c4:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01164c7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01164ca:	8b 40 64             	mov    0x64(%eax),%eax
f01164cd:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f01164d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01164d3:	8b 40 68             	mov    0x68(%eax),%eax
f01164d6:	89 45 90             	mov    %eax,-0x70(%ebp)
f01164d9:	8b 45 90             	mov    -0x70(%ebp),%eax
f01164dc:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f01164df:	83 ec 0c             	sub    $0xc,%esp
f01164e2:	ff 75 cc             	pushl  -0x34(%ebp)
f01164e5:	e8 d5 23 00 00       	call   f01188bf <ClearUserSpace>
f01164ea:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01164ed:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f01164f4:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f01164fb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint8 correct =1 ;
f0116502:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f0116506:	83 ec 0c             	sub    $0xc,%esp
f0116509:	68 80 d0 12 f0       	push   $0xf012d080
f011650e:	e8 59 aa fe ff       	call   f0100f6c <cprintf>
f0116513:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERN_STACK_TOP - 1;
f0116516:	c7 45 e4 ff ff bf ef 	movl   $0xefbfffff,-0x1c(%ebp)
		ptr2 = (char*)KERN_STACK_TOP - 2;
f011651d:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		while ((ptr1 > (char*)(KERN_STACK_TOP - PAGE_SIZE)) && *ptr1 == 0)	ptr1-- ;
f0116524:	eb 03                	jmp    f0116529 <test_allocate_chunk+0xaf>
f0116526:	ff 4d e4             	decl   -0x1c(%ebp)
f0116529:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f0116530:	76 09                	jbe    f011653b <test_allocate_chunk+0xc1>
f0116532:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116535:	8a 00                	mov    (%eax),%al
f0116537:	84 c0                	test   %al,%al
f0116539:	74 eb                	je     f0116526 <test_allocate_chunk+0xac>
		if (ptr1 == (char*)(KERN_STACK_TOP - PAGE_SIZE))	*ptr1 = 'A' ;
f011653b:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f0116542:	75 06                	jne    f011654a <test_allocate_chunk+0xd0>
f0116544:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116547:	c6 00 41             	movb   $0x41,(%eax)
		tptr[1] = *ptr1 ;
f011654a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011654d:	8a 00                	mov    (%eax),%al
f011654f:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f0116555:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116558:	8a 00                	mov    (%eax),%al
f011655a:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		cprintf("*ptr1 = %c\n", *ptr1) ;
f0116560:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116563:	8a 00                	mov    (%eax),%al
f0116565:	0f be c0             	movsbl %al,%eax
f0116568:	83 ec 08             	sub    $0x8,%esp
f011656b:	50                   	push   %eax
f011656c:	68 aa d0 12 f0       	push   $0xf012d0aa
f0116571:	e8 f6 a9 fe ff       	call   f0100f6c <cprintf>
f0116576:	83 c4 10             	add    $0x10,%esp
		cprintf("*ptr2 = %c\n", *ptr2) ;
f0116579:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011657c:	8a 00                	mov    (%eax),%al
f011657e:	0f be c0             	movsbl %al,%eax
f0116581:	83 ec 08             	sub    $0x8,%esp
f0116584:	50                   	push   %eax
f0116585:	68 b6 d0 12 f0       	push   $0xf012d0b6
f011658a:	e8 dd a9 fe ff       	call   f0100f6c <cprintf>
f011658f:	83 c4 10             	add    $0x10,%esp
		uint32 old_perms = GP(proc_directory, KERN_STACK_TOP - 1*PAGE_SIZE) ;
f0116592:	83 ec 08             	sub    $0x8,%esp
f0116595:	68 00 f0 bf ef       	push   $0xefbff000
f011659a:	ff 75 cc             	pushl  -0x34(%ebp)
f011659d:	e8 84 22 00 00       	call   f0118826 <GP>
f01165a2:	83 c4 10             	add    $0x10,%esp
f01165a5:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01165a8:	e8 5c 74 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01165ad:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERN_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f01165b0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01165b3:	c1 e0 02             	shl    $0x2,%eax
f01165b6:	6a 02                	push   $0x2
f01165b8:	50                   	push   %eax
f01165b9:	68 00 f0 bf ef       	push   $0xefbff000
f01165be:	ff 75 cc             	pushl  -0x34(%ebp)
f01165c1:	e8 58 31 ff ff       	call   f010971e <allocate_chunk>
f01165c6:	83 c4 10             	add    $0x10,%esp
f01165c9:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01165cc:	e8 38 74 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01165d1:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01165d4:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01165d8:	75 08                	jne    f01165e2 <test_allocate_chunk+0x168>
f01165da:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01165dd:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01165e0:	74 2a                	je     f011660c <test_allocate_chunk+0x192>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f01165e2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01165e5:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01165e8:	83 ec 08             	sub    $0x8,%esp
f01165eb:	6a 00                	push   $0x0
f01165ed:	50                   	push   %eax
f01165ee:	ff 75 b0             	pushl  -0x50(%ebp)
f01165f1:	68 c4 d0 12 f0       	push   $0xf012d0c4
f01165f6:	68 3a 05 00 00       	push   $0x53a
f01165fb:	68 42 bb 12 f0       	push   $0xf012bb42
f0116600:	e8 b2 9e fe ff       	call   f01004b7 <_warn>
f0116605:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116608:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f011660c:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116610:	74 04                	je     f0116616 <test_allocate_chunk+0x19c>
f0116612:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0116616:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f011661a:	e8 ea 73 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011661f:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERN_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0116622:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116625:	01 c0                	add    %eax,%eax
f0116627:	89 c1                	mov    %eax,%ecx
f0116629:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011662c:	89 d0                	mov    %edx,%eax
f011662e:	c1 e0 02             	shl    $0x2,%eax
f0116631:	01 d0                	add    %edx,%eax
f0116633:	f7 d8                	neg    %eax
f0116635:	2d 00 00 40 10       	sub    $0x10400000,%eax
f011663a:	6a 02                	push   $0x2
f011663c:	51                   	push   %ecx
f011663d:	50                   	push   %eax
f011663e:	ff 75 cc             	pushl  -0x34(%ebp)
f0116641:	e8 d8 30 ff ff       	call   f010971e <allocate_chunk>
f0116646:	83 c4 10             	add    $0x10,%esp
f0116649:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011664c:	e8 b8 73 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116651:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0116654:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0116658:	75 08                	jne    f0116662 <test_allocate_chunk+0x1e8>
f011665a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011665d:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0116660:	74 2a                	je     f011668c <test_allocate_chunk+0x212>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0116662:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116665:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0116668:	83 ec 08             	sub    $0x8,%esp
f011666b:	6a 00                	push   $0x0
f011666d:	50                   	push   %eax
f011666e:	ff 75 b0             	pushl  -0x50(%ebp)
f0116671:	68 c4 d0 12 f0       	push   $0xf012d0c4
f0116676:	68 48 05 00 00       	push   $0x548
f011667b:	68 42 bb 12 f0       	push   $0xf012bb42
f0116680:	e8 32 9e fe ff       	call   f01004b7 <_warn>
f0116685:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116688:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f011668c:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116690:	74 04                	je     f0116696 <test_allocate_chunk+0x21c>
f0116692:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0116696:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (CCP(proc_directory, 0, KERN_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f011669a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011669d:	c1 e0 02             	shl    $0x2,%eax
f01166a0:	83 ec 08             	sub    $0x8,%esp
f01166a3:	6a 03                	push   $0x3
f01166a5:	6a 00                	push   $0x0
f01166a7:	6a 00                	push   $0x0
f01166a9:	68 ff 0f 00 00       	push   $0xfff
f01166ae:	ff 75 b8             	pushl  -0x48(%ebp)
f01166b1:	6a 01                	push   $0x1
f01166b3:	50                   	push   %eax
f01166b4:	68 00 f0 bf ef       	push   $0xefbff000
f01166b9:	6a 00                	push   $0x0
f01166bb:	ff 75 cc             	pushl  -0x34(%ebp)
f01166be:	e8 30 22 00 00       	call   f01188f3 <CCP>
f01166c3:	83 c4 30             	add    $0x30,%esp
f01166c6:	85 c0                	test   %eax,%eax
f01166c8:	75 1e                	jne    f01166e8 <test_allocate_chunk+0x26e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01166ca:	83 ec 04             	sub    $0x4,%esp
f01166cd:	68 2c d1 12 f0       	push   $0xf012d12c
f01166d2:	68 50 05 00 00       	push   $0x550
f01166d7:	68 42 bb 12 f0       	push   $0xf012bb42
f01166dc:	e8 d6 9d fe ff       	call   f01004b7 <_warn>
f01166e1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01166e4:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f01166e8:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01166ec:	74 04                	je     f01166f2 <test_allocate_chunk+0x278>
f01166ee:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f01166f2:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f01166f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01166f9:	8a 10                	mov    (%eax),%dl
f01166fb:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f0116701:	38 c2                	cmp    %al,%dl
f0116703:	75 0f                	jne    f0116714 <test_allocate_chunk+0x29a>
f0116705:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116708:	8a 10                	mov    (%eax),%dl
f011670a:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f0116710:	38 c2                	cmp    %al,%dl
f0116712:	74 1e                	je     f0116732 <test_allocate_chunk+0x2b8>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0116714:	83 ec 04             	sub    $0x4,%esp
f0116717:	68 78 d1 12 f0       	push   $0xf012d178
f011671c:	68 58 05 00 00       	push   $0x558
f0116721:	68 42 bb 12 f0       	push   $0xf012bb42
f0116726:	e8 8c 9d fe ff       	call   f01004b7 <_warn>
f011672b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011672e:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0116732:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116736:	74 04                	je     f011673c <test_allocate_chunk+0x2c2>
f0116738:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f011673c:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0116740:	83 ec 0c             	sub    $0xc,%esp
f0116743:	68 f5 ce 12 f0       	push   $0xf012cef5
f0116748:	e8 1f a8 fe ff       	call   f0100f6c <cprintf>
f011674d:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0116750:	83 ec 0c             	sub    $0xc,%esp
f0116753:	68 b0 d1 12 f0       	push   $0xf012d1b0
f0116758:	e8 0f a8 fe ff       	call   f0100f6c <cprintf>
f011675d:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0116760:	e8 a4 72 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116765:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0116768:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011676b:	c1 e0 05             	shl    $0x5,%eax
f011676e:	68 02 0e 00 00       	push   $0xe02
f0116773:	50                   	push   %eax
f0116774:	6a 00                	push   $0x0
f0116776:	ff 75 cc             	pushl  -0x34(%ebp)
f0116779:	e8 a0 2f ff ff       	call   f010971e <allocate_chunk>
f011677e:	83 c4 10             	add    $0x10,%esp
f0116781:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0116784:	e8 80 72 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116789:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f011678c:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0116790:	75 36                	jne    f01167c8 <test_allocate_chunk+0x34e>
f0116792:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116795:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0116798:	89 c1                	mov    %eax,%ecx
f011679a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011679d:	c1 e0 05             	shl    $0x5,%eax
f01167a0:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01167a3:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01167aa:	99                   	cltd   
f01167ab:	f7 fe                	idiv   %esi
f01167ad:	89 c3                	mov    %eax,%ebx
f01167af:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01167b2:	c1 e0 05             	shl    $0x5,%eax
f01167b5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01167b8:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01167bf:	99                   	cltd   
f01167c0:	f7 fe                	idiv   %esi
f01167c2:	01 d8                	add    %ebx,%eax
f01167c4:	39 c1                	cmp    %eax,%ecx
f01167c6:	74 54                	je     f011681c <test_allocate_chunk+0x3a2>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f01167c8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01167cb:	c1 e0 05             	shl    $0x5,%eax
f01167ce:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01167d1:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01167d8:	99                   	cltd   
f01167d9:	f7 ff                	idiv   %edi
f01167db:	89 c1                	mov    %eax,%ecx
f01167dd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01167e0:	c1 e0 05             	shl    $0x5,%eax
f01167e3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01167e6:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01167ed:	99                   	cltd   
f01167ee:	f7 fe                	idiv   %esi
f01167f0:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01167f3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01167f6:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01167f9:	83 ec 08             	sub    $0x8,%esp
f01167fc:	52                   	push   %edx
f01167fd:	50                   	push   %eax
f01167fe:	ff 75 a8             	pushl  -0x58(%ebp)
f0116801:	68 f0 d1 12 f0       	push   $0xf012d1f0
f0116806:	68 6d 05 00 00       	push   $0x56d
f011680b:	68 42 bb 12 f0       	push   $0xf012bb42
f0116810:	e8 a2 9c fe ff       	call   f01004b7 <_warn>
f0116815:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116818:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f011681c:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116820:	74 04                	je     f0116826 <test_allocate_chunk+0x3ac>
f0116822:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0116826:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f011682a:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0116831:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116834:	c1 e0 05             	shl    $0x5,%eax
f0116837:	83 ec 08             	sub    $0x8,%esp
f011683a:	6a 03                	push   $0x3
f011683c:	6a 00                	push   $0x0
f011683e:	6a 00                	push   $0x0
f0116840:	68 07 0e 00 00       	push   $0xe07
f0116845:	68 03 0e 00 00       	push   $0xe03
f011684a:	6a 01                	push   $0x1
f011684c:	50                   	push   %eax
f011684d:	6a 00                	push   $0x0
f011684f:	6a 00                	push   $0x0
f0116851:	ff 75 cc             	pushl  -0x34(%ebp)
f0116854:	e8 9a 20 00 00       	call   f01188f3 <CCP>
f0116859:	83 c4 30             	add    $0x30,%esp
f011685c:	85 c0                	test   %eax,%eax
f011685e:	75 25                	jne    f0116885 <test_allocate_chunk+0x40b>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0116860:	83 ec 04             	sub    $0x4,%esp
f0116863:	68 2c d1 12 f0       	push   $0xf012d12c
f0116868:	68 76 05 00 00       	push   $0x576
f011686d:	68 42 bb 12 f0       	push   $0xf012bb42
f0116872:	e8 40 9c fe ff       	call   f01004b7 <_warn>
f0116877:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011687a:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f011687e:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0116885:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116889:	74 04                	je     f011688f <test_allocate_chunk+0x415>
f011688b:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f011688f:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0116893:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0116897:	74 5a                	je     f01168f3 <test_allocate_chunk+0x479>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0116899:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011689c:	01 c0                	add    %eax,%eax
f011689e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01168a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01168a4:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f01168a7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01168aa:	01 c0                	add    %eax,%eax
f01168ac:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01168af:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01168b2:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f01168b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01168b8:	8a 00                	mov    (%eax),%al
f01168ba:	3c 4b                	cmp    $0x4b,%al
f01168bc:	75 09                	jne    f01168c7 <test_allocate_chunk+0x44d>
f01168be:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01168c1:	8a 00                	mov    (%eax),%al
f01168c3:	3c 4d                	cmp    $0x4d,%al
f01168c5:	74 1e                	je     f01168e5 <test_allocate_chunk+0x46b>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f01168c7:	83 ec 04             	sub    $0x4,%esp
f01168ca:	68 78 d1 12 f0       	push   $0xf012d178
f01168cf:	68 84 05 00 00       	push   $0x584
f01168d4:	68 42 bb 12 f0       	push   $0xf012bb42
f01168d9:	e8 d9 9b fe ff       	call   f01004b7 <_warn>
f01168de:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01168e1:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f01168e5:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01168e9:	74 04                	je     f01168ef <test_allocate_chunk+0x475>
f01168eb:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f01168ef:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f01168f3:	83 ec 0c             	sub    $0xc,%esp
f01168f6:	68 cf c4 12 f0       	push   $0xf012c4cf
f01168fb:	e8 6c a6 fe ff       	call   f0100f6c <cprintf>
f0116900:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0116903:	83 ec 0c             	sub    $0xc,%esp
f0116906:	68 50 d2 12 f0       	push   $0xf012d250
f011690b:	e8 5c a6 fe ff       	call   f0100f6c <cprintf>
f0116910:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0116913:	e8 f1 70 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116918:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f011691b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011691e:	c1 e0 06             	shl    $0x6,%eax
f0116921:	89 c2                	mov    %eax,%edx
f0116923:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116926:	c1 e0 05             	shl    $0x5,%eax
f0116929:	6a 00                	push   $0x0
f011692b:	52                   	push   %edx
f011692c:	50                   	push   %eax
f011692d:	ff 75 cc             	pushl  -0x34(%ebp)
f0116930:	e8 e9 2d ff ff       	call   f010971e <allocate_chunk>
f0116935:	83 c4 10             	add    $0x10,%esp
f0116938:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011693b:	e8 c9 70 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116940:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0116943:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0116947:	75 36                	jne    f011697f <test_allocate_chunk+0x505>
f0116949:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011694c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011694f:	89 c1                	mov    %eax,%ecx
f0116951:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116954:	c1 e0 06             	shl    $0x6,%eax
f0116957:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011695a:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0116961:	99                   	cltd   
f0116962:	f7 ff                	idiv   %edi
f0116964:	89 c3                	mov    %eax,%ebx
f0116966:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116969:	c1 e0 06             	shl    $0x6,%eax
f011696c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011696f:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0116976:	99                   	cltd   
f0116977:	f7 fe                	idiv   %esi
f0116979:	01 d8                	add    %ebx,%eax
f011697b:	39 c1                	cmp    %eax,%ecx
f011697d:	74 54                	je     f01169d3 <test_allocate_chunk+0x559>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f011697f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116982:	c1 e0 06             	shl    $0x6,%eax
f0116985:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116988:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011698f:	99                   	cltd   
f0116990:	f7 fb                	idiv   %ebx
f0116992:	89 c1                	mov    %eax,%ecx
f0116994:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116997:	c1 e0 06             	shl    $0x6,%eax
f011699a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011699d:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01169a4:	99                   	cltd   
f01169a5:	f7 ff                	idiv   %edi
f01169a7:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f01169aa:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01169ad:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01169b0:	83 ec 08             	sub    $0x8,%esp
f01169b3:	52                   	push   %edx
f01169b4:	50                   	push   %eax
f01169b5:	ff 75 a4             	pushl  -0x5c(%ebp)
f01169b8:	68 f0 d1 12 f0       	push   $0xf012d1f0
f01169bd:	68 9a 05 00 00       	push   $0x59a
f01169c2:	68 42 bb 12 f0       	push   $0xf012bb42
f01169c7:	e8 eb 9a fe ff       	call   f01004b7 <_warn>
f01169cc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01169cf:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f01169d3:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01169d7:	74 04                	je     f01169dd <test_allocate_chunk+0x563>
f01169d9:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f01169dd:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f01169e1:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01169e8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01169eb:	c1 e0 06             	shl    $0x6,%eax
f01169ee:	89 c2                	mov    %eax,%edx
f01169f0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01169f3:	c1 e0 05             	shl    $0x5,%eax
f01169f6:	83 ec 08             	sub    $0x8,%esp
f01169f9:	6a 03                	push   $0x3
f01169fb:	6a 00                	push   $0x0
f01169fd:	6a 00                	push   $0x0
f01169ff:	68 07 0e 00 00       	push   $0xe07
f0116a04:	6a 01                	push   $0x1
f0116a06:	6a 01                	push   $0x1
f0116a08:	52                   	push   %edx
f0116a09:	50                   	push   %eax
f0116a0a:	6a 00                	push   $0x0
f0116a0c:	ff 75 cc             	pushl  -0x34(%ebp)
f0116a0f:	e8 df 1e 00 00       	call   f01188f3 <CCP>
f0116a14:	83 c4 30             	add    $0x30,%esp
f0116a17:	85 c0                	test   %eax,%eax
f0116a19:	75 25                	jne    f0116a40 <test_allocate_chunk+0x5c6>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0116a1b:	83 ec 04             	sub    $0x4,%esp
f0116a1e:	68 2c d1 12 f0       	push   $0xf012d12c
f0116a23:	68 a3 05 00 00       	push   $0x5a3
f0116a28:	68 42 bb 12 f0       	push   $0xf012bb42
f0116a2d:	e8 85 9a fe ff       	call   f01004b7 <_warn>
f0116a32:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0116a35:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0116a39:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0116a40:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116a44:	74 04                	je     f0116a4a <test_allocate_chunk+0x5d0>
f0116a46:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0116a4a:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0116a4e:	83 ec 0c             	sub    $0xc,%esp
f0116a51:	68 32 c5 12 f0       	push   $0xf012c532
f0116a56:	e8 11 a5 fe ff       	call   f0100f6c <cprintf>
f0116a5b:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0116a5e:	83 ec 0c             	sub    $0xc,%esp
f0116a61:	68 90 d2 12 f0       	push   $0xf012d290
f0116a66:	e8 01 a5 fe ff       	call   f0100f6c <cprintf>
f0116a6b:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0116a6e:	e8 96 6f ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116a73:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0116a76:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116a79:	c1 e0 06             	shl    $0x6,%eax
f0116a7c:	68 06 0e 00 00       	push   $0xe06
f0116a81:	50                   	push   %eax
f0116a82:	68 00 00 00 80       	push   $0x80000000
f0116a87:	ff 75 cc             	pushl  -0x34(%ebp)
f0116a8a:	e8 8f 2c ff ff       	call   f010971e <allocate_chunk>
f0116a8f:	83 c4 10             	add    $0x10,%esp
f0116a92:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0116a95:	e8 6f 6f ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116a9a:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f0116a9d:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0116aa1:	75 36                	jne    f0116ad9 <test_allocate_chunk+0x65f>
f0116aa3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116aa6:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0116aa9:	89 c1                	mov    %eax,%ecx
f0116aab:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116aae:	c1 e0 06             	shl    $0x6,%eax
f0116ab1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116ab4:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0116abb:	99                   	cltd   
f0116abc:	f7 fb                	idiv   %ebx
f0116abe:	89 c3                	mov    %eax,%ebx
f0116ac0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116ac3:	c1 e0 06             	shl    $0x6,%eax
f0116ac6:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116ac9:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0116ad0:	99                   	cltd   
f0116ad1:	f7 fe                	idiv   %esi
f0116ad3:	01 d8                	add    %ebx,%eax
f0116ad5:	39 c1                	cmp    %eax,%ecx
f0116ad7:	74 54                	je     f0116b2d <test_allocate_chunk+0x6b3>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0116ad9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116adc:	c1 e0 06             	shl    $0x6,%eax
f0116adf:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116ae2:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0116ae9:	99                   	cltd   
f0116aea:	f7 ff                	idiv   %edi
f0116aec:	89 c1                	mov    %eax,%ecx
f0116aee:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116af1:	c1 e0 06             	shl    $0x6,%eax
f0116af4:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116af7:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0116afe:	99                   	cltd   
f0116aff:	f7 fb                	idiv   %ebx
f0116b01:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0116b04:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116b07:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0116b0a:	83 ec 08             	sub    $0x8,%esp
f0116b0d:	52                   	push   %edx
f0116b0e:	50                   	push   %eax
f0116b0f:	ff 75 9c             	pushl  -0x64(%ebp)
f0116b12:	68 f0 d1 12 f0       	push   $0xf012d1f0
f0116b17:	68 b9 05 00 00       	push   $0x5b9
f0116b1c:	68 42 bb 12 f0       	push   $0xf012bb42
f0116b21:	e8 91 99 fe ff       	call   f01004b7 <_warn>
f0116b26:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116b29:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0116b2d:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116b31:	74 04                	je     f0116b37 <test_allocate_chunk+0x6bd>
f0116b33:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0116b37:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0116b3b:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0116b42:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116b45:	c1 e0 06             	shl    $0x6,%eax
f0116b48:	83 ec 08             	sub    $0x8,%esp
f0116b4b:	6a 03                	push   $0x3
f0116b4d:	6a 00                	push   $0x0
f0116b4f:	6a 00                	push   $0x0
f0116b51:	68 07 0e 00 00       	push   $0xe07
f0116b56:	68 07 0e 00 00       	push   $0xe07
f0116b5b:	6a 01                	push   $0x1
f0116b5d:	50                   	push   %eax
f0116b5e:	68 00 00 00 80       	push   $0x80000000
f0116b63:	6a 00                	push   $0x0
f0116b65:	ff 75 cc             	pushl  -0x34(%ebp)
f0116b68:	e8 86 1d 00 00       	call   f01188f3 <CCP>
f0116b6d:	83 c4 30             	add    $0x30,%esp
f0116b70:	85 c0                	test   %eax,%eax
f0116b72:	75 25                	jne    f0116b99 <test_allocate_chunk+0x71f>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0116b74:	83 ec 04             	sub    $0x4,%esp
f0116b77:	68 2c d1 12 f0       	push   $0xf012d12c
f0116b7c:	68 c2 05 00 00       	push   $0x5c2
f0116b81:	68 42 bb 12 f0       	push   $0xf012bb42
f0116b86:	e8 2c 99 fe ff       	call   f01004b7 <_warn>
f0116b8b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0116b8e:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0116b92:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 10 ;
f0116b99:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116b9d:	74 04                	je     f0116ba3 <test_allocate_chunk+0x729>
f0116b9f:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0116ba3:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0116ba7:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0116bab:	74 6f                	je     f0116c1c <test_allocate_chunk+0x7a2>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f0116bad:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116bb0:	01 c0                	add    %eax,%eax
f0116bb2:	05 00 00 00 80       	add    $0x80000000,%eax
f0116bb7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0116bba:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116bbd:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0116bc0:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0116bc3:	89 d0                	mov    %edx,%eax
f0116bc5:	c1 e0 02             	shl    $0x2,%eax
f0116bc8:	01 d0                	add    %edx,%eax
f0116bca:	01 c0                	add    %eax,%eax
f0116bcc:	01 d0                	add    %edx,%eax
f0116bce:	01 c0                	add    %eax,%eax
f0116bd0:	05 00 00 00 80       	add    $0x80000000,%eax
f0116bd5:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0116bd8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116bdb:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0116bde:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116be1:	8a 00                	mov    (%eax),%al
f0116be3:	3c 4b                	cmp    $0x4b,%al
f0116be5:	75 09                	jne    f0116bf0 <test_allocate_chunk+0x776>
f0116be7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116bea:	8a 00                	mov    (%eax),%al
f0116bec:	3c 4d                	cmp    $0x4d,%al
f0116bee:	74 1e                	je     f0116c0e <test_allocate_chunk+0x794>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0116bf0:	83 ec 04             	sub    $0x4,%esp
f0116bf3:	68 78 d1 12 f0       	push   $0xf012d178
f0116bf8:	68 d0 05 00 00       	push   $0x5d0
f0116bfd:	68 42 bb 12 f0       	push   $0xf012bb42
f0116c02:	e8 b0 98 fe ff       	call   f01004b7 <_warn>
f0116c07:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0116c0a:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f0116c0e:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116c12:	74 04                	je     f0116c18 <test_allocate_chunk+0x79e>
f0116c14:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f0116c18:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f0116c1c:	83 ec 0c             	sub    $0xc,%esp
f0116c1f:	68 04 d0 12 f0       	push   $0xf012d004
f0116c24:	e8 43 a3 fe ff       	call   f0100f6c <cprintf>
f0116c29:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f0116c2c:	83 ec 0c             	sub    $0xc,%esp
f0116c2f:	68 cc d2 12 f0       	push   $0xf012d2cc
f0116c34:	e8 33 a3 fe ff       	call   f0100f6c <cprintf>
f0116c39:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0116c3c:	e8 c8 6d ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116c41:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f0116c44:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116c47:	89 d0                	mov    %edx,%eax
f0116c49:	01 c0                	add    %eax,%eax
f0116c4b:	01 d0                	add    %edx,%eax
f0116c4d:	01 c0                	add    %eax,%eax
f0116c4f:	01 d0                	add    %edx,%eax
f0116c51:	68 04 0e 00 00       	push   $0xe04
f0116c56:	50                   	push   %eax
f0116c57:	68 00 fc 3f 40       	push   $0x403ffc00
f0116c5c:	ff 75 cc             	pushl  -0x34(%ebp)
f0116c5f:	e8 ba 2a ff ff       	call   f010971e <allocate_chunk>
f0116c64:	83 c4 10             	add    $0x10,%esp
f0116c67:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0116c6a:	e8 9a 6d ff ff       	call   f010da09 <sys_calculate_free_frames>
f0116c6f:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0116c72:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0116c76:	75 0b                	jne    f0116c83 <test_allocate_chunk+0x809>
f0116c78:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116c7b:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0116c7e:	83 f8 05             	cmp    $0x5,%eax
f0116c81:	74 2a                	je     f0116cad <test_allocate_chunk+0x833>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f0116c83:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116c86:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0116c89:	83 ec 08             	sub    $0x8,%esp
f0116c8c:	6a 05                	push   $0x5
f0116c8e:	50                   	push   %eax
f0116c8f:	ff 75 98             	pushl  -0x68(%ebp)
f0116c92:	68 f0 d1 12 f0       	push   $0xf012d1f0
f0116c97:	68 e7 05 00 00       	push   $0x5e7
f0116c9c:	68 42 bb 12 f0       	push   $0xf012bb42
f0116ca1:	e8 11 98 fe ff       	call   f01004b7 <_warn>
f0116ca6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116ca9:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0116cad:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116cb1:	74 04                	je     f0116cb7 <test_allocate_chunk+0x83d>
f0116cb3:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0116cb7:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0116cbb:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0116cc2:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116cc5:	89 d0                	mov    %edx,%eax
f0116cc7:	01 c0                	add    %eax,%eax
f0116cc9:	01 d0                	add    %edx,%eax
f0116ccb:	c1 e0 02             	shl    $0x2,%eax
f0116cce:	83 ec 08             	sub    $0x8,%esp
f0116cd1:	6a 03                	push   $0x3
f0116cd3:	6a 00                	push   $0x0
f0116cd5:	6a 00                	push   $0x0
f0116cd7:	68 07 0e 00 00       	push   $0xe07
f0116cdc:	68 05 0e 00 00       	push   $0xe05
f0116ce1:	6a 01                	push   $0x1
f0116ce3:	50                   	push   %eax
f0116ce4:	68 00 f0 3f 40       	push   $0x403ff000
f0116ce9:	6a 00                	push   $0x0
f0116ceb:	ff 75 cc             	pushl  -0x34(%ebp)
f0116cee:	e8 00 1c 00 00       	call   f01188f3 <CCP>
f0116cf3:	83 c4 30             	add    $0x30,%esp
f0116cf6:	85 c0                	test   %eax,%eax
f0116cf8:	75 25                	jne    f0116d1f <test_allocate_chunk+0x8a5>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0116cfa:	83 ec 04             	sub    $0x4,%esp
f0116cfd:	68 2c d1 12 f0       	push   $0xf012d12c
f0116d02:	68 f0 05 00 00       	push   $0x5f0
f0116d07:	68 42 bb 12 f0       	push   $0xf012bb42
f0116d0c:	e8 a6 97 fe ff       	call   f01004b7 <_warn>
f0116d11:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0116d14:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0116d18:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f0116d1f:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0116d23:	74 04                	je     f0116d29 <test_allocate_chunk+0x8af>
f0116d25:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0116d29:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f0116d2d:	83 ec 0c             	sub    $0xc,%esp
f0116d30:	68 03 d3 12 f0       	push   $0xf012d303
f0116d35:	e8 32 a2 fe ff       	call   f0100f6c <cprintf>
f0116d3a:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f0116d3d:	83 ec 08             	sub    $0x8,%esp
f0116d40:	ff 75 e0             	pushl  -0x20(%ebp)
f0116d43:	68 14 d3 12 f0       	push   $0xf012d314
f0116d48:	e8 1f a2 fe ff       	call   f0100f6c <cprintf>
f0116d4d:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0116d50:	83 7d e0 64          	cmpl   $0x64,-0x20(%ebp)
f0116d54:	75 10                	jne    f0116d66 <test_allocate_chunk+0x8ec>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f0116d56:	83 ec 0c             	sub    $0xc,%esp
f0116d59:	68 48 d3 12 f0       	push   $0xf012d348
f0116d5e:	e8 09 a2 fe ff       	call   f0100f6c <cprintf>
f0116d63:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0116d66:	a1 84 1b 5a f0       	mov    0xf05a1b84,%eax
f0116d6b:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0116d6e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116d71:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0116d74:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0116d79:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116d7c:	5b                   	pop    %ebx
f0116d7d:	5e                   	pop    %esi
f0116d7e:	5f                   	pop    %edi
f0116d7f:	5d                   	pop    %ebp
f0116d80:	c3                   	ret    

f0116d81 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f0116d81:	55                   	push   %ebp
f0116d82:	89 e5                	mov    %esp,%ebp
f0116d84:	57                   	push   %edi
f0116d85:	56                   	push   %esi
f0116d86:	53                   	push   %ebx
f0116d87:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0116d8d:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0116d90:	bb 44 c2 12 f0       	mov    $0xf012c244,%ebx
f0116d95:	ba 0f 00 00 00       	mov    $0xf,%edx
f0116d9a:	89 c7                	mov    %eax,%edi
f0116d9c:	89 de                	mov    %ebx,%esi
f0116d9e:	89 d1                	mov    %edx,%ecx
f0116da0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116da2:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0116da5:	b9 23 00 00 00       	mov    $0x23,%ecx
f0116daa:	b0 00                	mov    $0x0,%al
f0116dac:	89 d7                	mov    %edx,%edi
f0116dae:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0116db0:	6a 00                	push   $0x0
f0116db2:	6a 0a                	push   $0xa
f0116db4:	6a 14                	push   $0x14
f0116db6:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0116db9:	50                   	push   %eax
f0116dba:	e8 b1 2c ff ff       	call   f0109a70 <env_create>
f0116dbf:	83 c4 10             	add    $0x10,%esp
f0116dc2:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0116dc5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116dc8:	8b 40 64             	mov    0x64(%eax),%eax
f0116dcb:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0116dce:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116dd1:	8b 40 68             	mov    0x68(%eax),%eax
f0116dd4:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0116dd7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116dda:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0116ddd:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0116de4:	75 70 20 
f0116de7:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0116dee:	00 00 00 
f0116df1:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0116df4:	b9 03 00 00 00       	mov    $0x3,%ecx
f0116df9:	b8 00 00 00 00       	mov    $0x0,%eax
f0116dfe:	89 d7                	mov    %edx,%edi
f0116e00:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0116e02:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116e05:	8b 40 10             	mov    0x10(%eax),%eax
f0116e08:	83 ec 08             	sub    $0x8,%esp
f0116e0b:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0116e11:	52                   	push   %edx
f0116e12:	50                   	push   %eax
f0116e13:	e8 c6 ba 00 00       	call   f01228de <ltostr>
f0116e18:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0116e1b:	83 ec 04             	sub    $0x4,%esp
f0116e1e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116e24:	50                   	push   %eax
f0116e25:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0116e2b:	50                   	push   %eax
f0116e2c:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0116e32:	50                   	push   %eax
f0116e33:	e8 7f bb 00 00       	call   f01229b7 <strcconcat>
f0116e38:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0116e3b:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0116e42:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0116e49:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0116e50:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f0116e57:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0116e5b:	83 ec 0c             	sub    $0xc,%esp
f0116e5e:	ff 75 d8             	pushl  -0x28(%ebp)
f0116e61:	e8 59 1a 00 00       	call   f01188bf <ClearUserSpace>
f0116e66:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0116e69:	83 ec 0c             	sub    $0xc,%esp
f0116e6c:	68 88 d3 12 f0       	push   $0xf012d388
f0116e71:	e8 f6 a0 fe ff       	call   f0100f6c <cprintf>
f0116e76:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0116e79:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116e7c:	c1 e0 03             	shl    $0x3,%eax
f0116e7f:	83 ec 04             	sub    $0x4,%esp
f0116e82:	50                   	push   %eax
f0116e83:	6a 00                	push   $0x0
f0116e85:	ff 75 d8             	pushl  -0x28(%ebp)
f0116e88:	e8 c5 28 ff ff       	call   f0109752 <calculate_required_frames>
f0116e8d:	83 c4 10             	add    $0x10,%esp
f0116e90:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0116e93:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0116e97:	74 23                	je     f0116ebc <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0116e99:	83 ec 0c             	sub    $0xc,%esp
f0116e9c:	6a 03                	push   $0x3
f0116e9e:	ff 75 c8             	pushl  -0x38(%ebp)
f0116ea1:	68 bc d3 12 f0       	push   $0xf012d3bc
f0116ea6:	68 29 06 00 00       	push   $0x629
f0116eab:	68 42 bb 12 f0       	push   $0xf012bb42
f0116eb0:	e8 02 96 fe ff       	call   f01004b7 <_warn>
f0116eb5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116eb8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116ebc:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116ec0:	74 04                	je     f0116ec6 <test_calculate_required_frames+0x145>
f0116ec2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116ec6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f0116eca:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116ecd:	c1 e0 02             	shl    $0x2,%eax
f0116ed0:	83 ec 04             	sub    $0x4,%esp
f0116ed3:	50                   	push   %eax
f0116ed4:	6a 00                	push   $0x0
f0116ed6:	ff 75 d8             	pushl  -0x28(%ebp)
f0116ed9:	e8 74 28 ff ff       	call   f0109752 <calculate_required_frames>
f0116ede:	83 c4 10             	add    $0x10,%esp
f0116ee1:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f0116ee4:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0116eeb:	74 26                	je     f0116f13 <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0116eed:	83 ec 0c             	sub    $0xc,%esp
f0116ef0:	68 01 04 00 00       	push   $0x401
f0116ef5:	ff 75 c8             	pushl  -0x38(%ebp)
f0116ef8:	68 bc d3 12 f0       	push   $0xf012d3bc
f0116efd:	68 33 06 00 00       	push   $0x633
f0116f02:	68 42 bb 12 f0       	push   $0xf012bb42
f0116f07:	e8 ab 95 fe ff       	call   f01004b7 <_warn>
f0116f0c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116f0f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116f13:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116f17:	74 04                	je     f0116f1d <test_calculate_required_frames+0x19c>
f0116f19:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116f1d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0116f21:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116f24:	c1 e0 0a             	shl    $0xa,%eax
f0116f27:	83 ec 04             	sub    $0x4,%esp
f0116f2a:	50                   	push   %eax
f0116f2b:	6a 00                	push   $0x0
f0116f2d:	ff 75 d8             	pushl  -0x28(%ebp)
f0116f30:	e8 1d 28 ff ff       	call   f0109752 <calculate_required_frames>
f0116f35:	83 c4 10             	add    $0x10,%esp
f0116f38:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0116f3b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116f3e:	c1 e0 0a             	shl    $0xa,%eax
f0116f41:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116f44:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0116f4b:	99                   	cltd   
f0116f4c:	f7 fb                	idiv   %ebx
f0116f4e:	89 c1                	mov    %eax,%ecx
f0116f50:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116f53:	c1 e0 0a             	shl    $0xa,%eax
f0116f56:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116f59:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0116f60:	99                   	cltd   
f0116f61:	f7 fe                	idiv   %esi
f0116f63:	01 c8                	add    %ecx,%eax
f0116f65:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116f68:	74 4c                	je     f0116fb6 <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0116f6a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116f6d:	c1 e0 0a             	shl    $0xa,%eax
f0116f70:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116f73:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0116f7a:	99                   	cltd   
f0116f7b:	f7 fb                	idiv   %ebx
f0116f7d:	89 c1                	mov    %eax,%ecx
f0116f7f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116f82:	c1 e0 0a             	shl    $0xa,%eax
f0116f85:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116f88:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0116f8f:	99                   	cltd   
f0116f90:	f7 fe                	idiv   %esi
f0116f92:	01 c8                	add    %ecx,%eax
f0116f94:	83 ec 0c             	sub    $0xc,%esp
f0116f97:	50                   	push   %eax
f0116f98:	ff 75 c8             	pushl  -0x38(%ebp)
f0116f9b:	68 bc d3 12 f0       	push   $0xf012d3bc
f0116fa0:	68 3d 06 00 00       	push   $0x63d
f0116fa5:	68 42 bb 12 f0       	push   $0xf012bb42
f0116faa:	e8 08 95 fe ff       	call   f01004b7 <_warn>
f0116faf:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116fb2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116fb6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116fba:	74 04                	je     f0116fc0 <test_calculate_required_frames+0x23f>
f0116fbc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116fc0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f0116fc4:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116fc7:	89 d0                	mov    %edx,%eax
f0116fc9:	01 c0                	add    %eax,%eax
f0116fcb:	01 d0                	add    %edx,%eax
f0116fcd:	01 c0                	add    %eax,%eax
f0116fcf:	83 ec 04             	sub    $0x4,%esp
f0116fd2:	50                   	push   %eax
f0116fd3:	68 00 10 00 00       	push   $0x1000
f0116fd8:	ff 75 d8             	pushl  -0x28(%ebp)
f0116fdb:	e8 72 27 ff ff       	call   f0109752 <calculate_required_frames>
f0116fe0:	83 c4 10             	add    $0x10,%esp
f0116fe3:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0116fe6:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0116fea:	74 23                	je     f011700f <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0116fec:	83 ec 0c             	sub    $0xc,%esp
f0116fef:	6a 03                	push   $0x3
f0116ff1:	ff 75 c8             	pushl  -0x38(%ebp)
f0116ff4:	68 bc d3 12 f0       	push   $0xf012d3bc
f0116ff9:	68 49 06 00 00       	push   $0x649
f0116ffe:	68 42 bb 12 f0       	push   $0xf012bb42
f0117003:	e8 af 94 fe ff       	call   f01004b7 <_warn>
f0117008:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011700b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011700f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117013:	74 04                	je     f0117019 <test_calculate_required_frames+0x298>
f0117015:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117019:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f011701d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117020:	89 c2                	mov    %eax,%edx
f0117022:	01 d2                	add    %edx,%edx
f0117024:	01 d0                	add    %edx,%eax
f0117026:	83 ec 04             	sub    $0x4,%esp
f0117029:	50                   	push   %eax
f011702a:	68 00 18 00 00       	push   $0x1800
f011702f:	ff 75 d8             	pushl  -0x28(%ebp)
f0117032:	e8 1b 27 ff ff       	call   f0109752 <calculate_required_frames>
f0117037:	83 c4 10             	add    $0x10,%esp
f011703a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f011703d:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0117041:	74 23                	je     f0117066 <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0117043:	83 ec 0c             	sub    $0xc,%esp
f0117046:	6a 03                	push   $0x3
f0117048:	ff 75 c8             	pushl  -0x38(%ebp)
f011704b:	68 bc d3 12 f0       	push   $0xf012d3bc
f0117050:	68 53 06 00 00       	push   $0x653
f0117055:	68 42 bb 12 f0       	push   $0xf012bb42
f011705a:	e8 58 94 fe ff       	call   f01004b7 <_warn>
f011705f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117062:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117066:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011706a:	74 04                	je     f0117070 <test_calculate_required_frames+0x2ef>
f011706c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117070:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0117074:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117077:	89 d0                	mov    %edx,%eax
f0117079:	c1 e0 02             	shl    $0x2,%eax
f011707c:	01 d0                	add    %edx,%eax
f011707e:	01 c0                	add    %eax,%eax
f0117080:	83 ec 04             	sub    $0x4,%esp
f0117083:	50                   	push   %eax
f0117084:	68 00 00 40 00       	push   $0x400000
f0117089:	ff 75 d8             	pushl  -0x28(%ebp)
f011708c:	e8 c1 26 ff ff       	call   f0109752 <calculate_required_frames>
f0117091:	83 c4 10             	add    $0x10,%esp
f0117094:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f0117097:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f011709e:	74 26                	je     f01170c6 <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f01170a0:	83 ec 0c             	sub    $0xc,%esp
f01170a3:	68 03 0a 00 00       	push   $0xa03
f01170a8:	ff 75 c8             	pushl  -0x38(%ebp)
f01170ab:	68 bc d3 12 f0       	push   $0xf012d3bc
f01170b0:	68 5d 06 00 00       	push   $0x65d
f01170b5:	68 42 bb 12 f0       	push   $0xf012bb42
f01170ba:	e8 f8 93 fe ff       	call   f01004b7 <_warn>
f01170bf:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01170c2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01170c6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01170ca:	74 04                	je     f01170d0 <test_calculate_required_frames+0x34f>
f01170cc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01170d0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f01170d4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01170d7:	01 c0                	add    %eax,%eax
f01170d9:	83 ec 04             	sub    $0x4,%esp
f01170dc:	50                   	push   %eax
f01170dd:	68 00 00 70 00       	push   $0x700000
f01170e2:	ff 75 d8             	pushl  -0x28(%ebp)
f01170e5:	e8 68 26 ff ff       	call   f0109752 <calculate_required_frames>
f01170ea:	83 c4 10             	add    $0x10,%esp
f01170ed:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f01170f0:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f01170f7:	74 26                	je     f011711f <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f01170f9:	83 ec 0c             	sub    $0xc,%esp
f01170fc:	68 02 02 00 00       	push   $0x202
f0117101:	ff 75 c8             	pushl  -0x38(%ebp)
f0117104:	68 bc d3 12 f0       	push   $0xf012d3bc
f0117109:	68 69 06 00 00       	push   $0x669
f011710e:	68 42 bb 12 f0       	push   $0xf012bb42
f0117113:	e8 9f 93 fe ff       	call   f01004b7 <_warn>
f0117118:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011711b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011711f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117123:	74 04                	je     f0117129 <test_calculate_required_frames+0x3a8>
f0117125:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0117129:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f011712d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117130:	83 ec 04             	sub    $0x4,%esp
f0117133:	50                   	push   %eax
f0117134:	68 ff ff 3f 00       	push   $0x3fffff
f0117139:	ff 75 d8             	pushl  -0x28(%ebp)
f011713c:	e8 11 26 ff ff       	call   f0109752 <calculate_required_frames>
f0117141:	83 c4 10             	add    $0x10,%esp
f0117144:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f0117147:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f011714b:	74 23                	je     f0117170 <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f011714d:	83 ec 0c             	sub    $0xc,%esp
f0117150:	6a 04                	push   $0x4
f0117152:	ff 75 c8             	pushl  -0x38(%ebp)
f0117155:	68 bc d3 12 f0       	push   $0xf012d3bc
f011715a:	68 73 06 00 00       	push   $0x673
f011715f:	68 42 bb 12 f0       	push   $0xf012bb42
f0117164:	e8 4e 93 fe ff       	call   f01004b7 <_warn>
f0117169:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011716c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0117170:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117174:	74 04                	je     f011717a <test_calculate_required_frames+0x3f9>
f0117176:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011717a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f011717e:	83 ec 0c             	sub    $0xc,%esp
f0117181:	68 f5 ce 12 f0       	push   $0xf012cef5
f0117186:	e8 e1 9d fe ff       	call   f0100f6c <cprintf>
f011718b:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f011718e:	83 ec 0c             	sub    $0xc,%esp
f0117191:	68 14 d4 12 f0       	push   $0xf012d414
f0117196:	e8 d1 9d fe ff       	call   f0100f6c <cprintf>
f011719b:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f011719e:	83 ec 04             	sub    $0x4,%esp
f01171a1:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01171a7:	50                   	push   %eax
f01171a8:	68 ae c2 12 f0       	push   $0xf012c2ae
f01171ad:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01171b3:	50                   	push   %eax
f01171b4:	e8 fe b7 00 00       	call   f01229b7 <strcconcat>
f01171b9:	83 c4 10             	add    $0x10,%esp
f01171bc:	83 ec 0c             	sub    $0xc,%esp
f01171bf:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f01171c5:	50                   	push   %eax
f01171c6:	e8 11 ad fe ff       	call   f0101edc <execute_command>
f01171cb:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f01171ce:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01171d1:	c1 e0 03             	shl    $0x3,%eax
f01171d4:	83 ec 04             	sub    $0x4,%esp
f01171d7:	50                   	push   %eax
f01171d8:	6a 00                	push   $0x0
f01171da:	ff 75 d8             	pushl  -0x28(%ebp)
f01171dd:	e8 70 25 ff ff       	call   f0109752 <calculate_required_frames>
f01171e2:	83 c4 10             	add    $0x10,%esp
f01171e5:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01171e8:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01171ef:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01171f2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01171f5:	74 24                	je     f011721b <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01171f7:	83 ec 0c             	sub    $0xc,%esp
f01171fa:	ff 75 c4             	pushl  -0x3c(%ebp)
f01171fd:	ff 75 c8             	pushl  -0x38(%ebp)
f0117200:	68 bc d3 12 f0       	push   $0xf012d3bc
f0117205:	68 87 06 00 00       	push   $0x687
f011720a:	68 42 bb 12 f0       	push   $0xf012bb42
f011720f:	e8 a3 92 fe ff       	call   f01004b7 <_warn>
f0117214:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117217:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011721b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011721f:	74 04                	je     f0117225 <test_calculate_required_frames+0x4a4>
f0117221:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117225:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0117229:	83 ec 04             	sub    $0x4,%esp
f011722c:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0117232:	50                   	push   %eax
f0117233:	68 bb c2 12 f0       	push   $0xf012c2bb
f0117238:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011723e:	50                   	push   %eax
f011723f:	e8 73 b7 00 00       	call   f01229b7 <strcconcat>
f0117244:	83 c4 10             	add    $0x10,%esp
f0117247:	83 ec 0c             	sub    $0xc,%esp
f011724a:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0117250:	50                   	push   %eax
f0117251:	e8 86 ac fe ff       	call   f0101edc <execute_command>
f0117256:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0117259:	83 ec 04             	sub    $0x4,%esp
f011725c:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0117262:	50                   	push   %eax
f0117263:	68 48 d4 12 f0       	push   $0xf012d448
f0117268:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011726e:	50                   	push   %eax
f011726f:	e8 43 b7 00 00       	call   f01229b7 <strcconcat>
f0117274:	83 c4 10             	add    $0x10,%esp
f0117277:	83 ec 0c             	sub    $0xc,%esp
f011727a:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0117280:	50                   	push   %eax
f0117281:	e8 56 ac fe ff       	call   f0101edc <execute_command>
f0117286:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f0117289:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011728c:	c1 e0 03             	shl    $0x3,%eax
f011728f:	83 ec 04             	sub    $0x4,%esp
f0117292:	50                   	push   %eax
f0117293:	6a 00                	push   $0x0
f0117295:	ff 75 d8             	pushl  -0x28(%ebp)
f0117298:	e8 b5 24 ff ff       	call   f0109752 <calculate_required_frames>
f011729d:	83 c4 10             	add    $0x10,%esp
f01172a0:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f01172a3:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f01172aa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01172ad:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01172b0:	74 24                	je     f01172d6 <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01172b2:	83 ec 0c             	sub    $0xc,%esp
f01172b5:	ff 75 c4             	pushl  -0x3c(%ebp)
f01172b8:	ff 75 c8             	pushl  -0x38(%ebp)
f01172bb:	68 bc d3 12 f0       	push   $0xf012d3bc
f01172c0:	68 95 06 00 00       	push   $0x695
f01172c5:	68 42 bb 12 f0       	push   $0xf012bb42
f01172ca:	e8 e8 91 fe ff       	call   f01004b7 <_warn>
f01172cf:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01172d2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01172d6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01172da:	74 04                	je     f01172e0 <test_calculate_required_frames+0x55f>
f01172dc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01172e0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f01172e4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01172e7:	c1 e0 0a             	shl    $0xa,%eax
f01172ea:	83 ec 04             	sub    $0x4,%esp
f01172ed:	50                   	push   %eax
f01172ee:	6a 00                	push   $0x0
f01172f0:	ff 75 d8             	pushl  -0x28(%ebp)
f01172f3:	e8 5a 24 ff ff       	call   f0109752 <calculate_required_frames>
f01172f8:	83 c4 10             	add    $0x10,%esp
f01172fb:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f01172fe:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117301:	c1 e0 0a             	shl    $0xa,%eax
f0117304:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117307:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011730e:	99                   	cltd   
f011730f:	f7 fb                	idiv   %ebx
f0117311:	89 c1                	mov    %eax,%ecx
f0117313:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117316:	c1 e0 0a             	shl    $0xa,%eax
f0117319:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011731c:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0117323:	99                   	cltd   
f0117324:	f7 fe                	idiv   %esi
f0117326:	01 c8                	add    %ecx,%eax
f0117328:	83 e8 05             	sub    $0x5,%eax
f011732b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f011732e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117331:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117334:	74 24                	je     f011735a <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0117336:	83 ec 0c             	sub    $0xc,%esp
f0117339:	ff 75 c4             	pushl  -0x3c(%ebp)
f011733c:	ff 75 c8             	pushl  -0x38(%ebp)
f011733f:	68 bc d3 12 f0       	push   $0xf012d3bc
f0117344:	68 a0 06 00 00       	push   $0x6a0
f0117349:	68 42 bb 12 f0       	push   $0xf012bb42
f011734e:	e8 64 91 fe ff       	call   f01004b7 <_warn>
f0117353:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117356:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011735a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011735e:	74 04                	je     f0117364 <test_calculate_required_frames+0x5e3>
f0117360:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0117364:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0117368:	83 ec 04             	sub    $0x4,%esp
f011736b:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0117371:	50                   	push   %eax
f0117372:	68 54 d4 12 f0       	push   $0xf012d454
f0117377:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011737d:	50                   	push   %eax
f011737e:	e8 34 b6 00 00       	call   f01229b7 <strcconcat>
f0117383:	83 c4 10             	add    $0x10,%esp
f0117386:	83 ec 0c             	sub    $0xc,%esp
f0117389:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f011738f:	50                   	push   %eax
f0117390:	e8 47 ab fe ff       	call   f0101edc <execute_command>
f0117395:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0117398:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011739b:	89 c2                	mov    %eax,%edx
f011739d:	01 d2                	add    %edx,%edx
f011739f:	01 d0                	add    %edx,%eax
f01173a1:	83 ec 04             	sub    $0x4,%esp
f01173a4:	50                   	push   %eax
f01173a5:	68 00 18 00 00       	push   $0x1800
f01173aa:	ff 75 d8             	pushl  -0x28(%ebp)
f01173ad:	e8 a0 23 ff ff       	call   f0109752 <calculate_required_frames>
f01173b2:	83 c4 10             	add    $0x10,%esp
f01173b5:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f01173b8:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f01173bf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01173c2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01173c5:	74 24                	je     f01173eb <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01173c7:	83 ec 0c             	sub    $0xc,%esp
f01173ca:	ff 75 c4             	pushl  -0x3c(%ebp)
f01173cd:	ff 75 c8             	pushl  -0x38(%ebp)
f01173d0:	68 bc d3 12 f0       	push   $0xf012d3bc
f01173d5:	68 af 06 00 00       	push   $0x6af
f01173da:	68 42 bb 12 f0       	push   $0xf012bb42
f01173df:	e8 d3 90 fe ff       	call   f01004b7 <_warn>
f01173e4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01173e7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01173eb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01173ef:	74 04                	je     f01173f5 <test_calculate_required_frames+0x674>
f01173f1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01173f5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f01173f9:	83 ec 04             	sub    $0x4,%esp
f01173fc:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0117402:	50                   	push   %eax
f0117403:	68 14 c5 12 f0       	push   $0xf012c514
f0117408:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011740e:	50                   	push   %eax
f011740f:	e8 a3 b5 00 00       	call   f01229b7 <strcconcat>
f0117414:	83 c4 10             	add    $0x10,%esp
f0117417:	83 ec 0c             	sub    $0xc,%esp
f011741a:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0117420:	50                   	push   %eax
f0117421:	e8 b6 aa fe ff       	call   f0101edc <execute_command>
f0117426:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0117429:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011742c:	89 d0                	mov    %edx,%eax
f011742e:	c1 e0 02             	shl    $0x2,%eax
f0117431:	01 d0                	add    %edx,%eax
f0117433:	01 c0                	add    %eax,%eax
f0117435:	83 ec 04             	sub    $0x4,%esp
f0117438:	50                   	push   %eax
f0117439:	68 00 00 40 00       	push   $0x400000
f011743e:	ff 75 d8             	pushl  -0x28(%ebp)
f0117441:	e8 0c 23 ff ff       	call   f0109752 <calculate_required_frames>
f0117446:	83 c4 10             	add    $0x10,%esp
f0117449:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f011744c:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f0117453:	74 26                	je     f011747b <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0117455:	83 ec 0c             	sub    $0xc,%esp
f0117458:	68 03 0a 00 00       	push   $0xa03
f011745d:	ff 75 c8             	pushl  -0x38(%ebp)
f0117460:	68 bc d3 12 f0       	push   $0xf012d3bc
f0117465:	68 bb 06 00 00       	push   $0x6bb
f011746a:	68 42 bb 12 f0       	push   $0xf012bb42
f011746f:	e8 43 90 fe ff       	call   f01004b7 <_warn>
f0117474:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117477:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011747b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011747f:	74 04                	je     f0117485 <test_calculate_required_frames+0x704>
f0117481:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117485:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0117489:	83 ec 04             	sub    $0x4,%esp
f011748c:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0117492:	50                   	push   %eax
f0117493:	68 1e c5 12 f0       	push   $0xf012c51e
f0117498:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011749e:	50                   	push   %eax
f011749f:	e8 13 b5 00 00       	call   f01229b7 <strcconcat>
f01174a4:	83 c4 10             	add    $0x10,%esp
f01174a7:	83 ec 0c             	sub    $0xc,%esp
f01174aa:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01174b0:	50                   	push   %eax
f01174b1:	e8 26 aa fe ff       	call   f0101edc <execute_command>
f01174b6:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f01174b9:	83 ec 04             	sub    $0x4,%esp
f01174bc:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01174c2:	50                   	push   %eax
f01174c3:	68 5c d4 12 f0       	push   $0xf012d45c
f01174c8:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01174ce:	50                   	push   %eax
f01174cf:	e8 e3 b4 00 00       	call   f01229b7 <strcconcat>
f01174d4:	83 c4 10             	add    $0x10,%esp
f01174d7:	83 ec 0c             	sub    $0xc,%esp
f01174da:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01174e0:	50                   	push   %eax
f01174e1:	e8 f6 a9 fe ff       	call   f0101edc <execute_command>
f01174e6:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f01174e9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01174ec:	01 c0                	add    %eax,%eax
f01174ee:	83 ec 04             	sub    $0x4,%esp
f01174f1:	50                   	push   %eax
f01174f2:	68 00 00 70 00       	push   $0x700000
f01174f7:	ff 75 d8             	pushl  -0x28(%ebp)
f01174fa:	e8 53 22 ff ff       	call   f0109752 <calculate_required_frames>
f01174ff:	83 c4 10             	add    $0x10,%esp
f0117502:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f0117505:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f011750c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011750f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117512:	74 24                	je     f0117538 <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0117514:	83 ec 0c             	sub    $0xc,%esp
f0117517:	ff 75 c4             	pushl  -0x3c(%ebp)
f011751a:	ff 75 c8             	pushl  -0x38(%ebp)
f011751d:	68 bc d3 12 f0       	push   $0xf012d3bc
f0117522:	68 cb 06 00 00       	push   $0x6cb
f0117527:	68 42 bb 12 f0       	push   $0xf012bb42
f011752c:	e8 86 8f fe ff       	call   f01004b7 <_warn>
f0117531:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117534:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0117538:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011753c:	74 04                	je     f0117542 <test_calculate_required_frames+0x7c1>
f011753e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0117542:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0117546:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117549:	83 ec 04             	sub    $0x4,%esp
f011754c:	50                   	push   %eax
f011754d:	68 ff ff 3f 00       	push   $0x3fffff
f0117552:	ff 75 d8             	pushl  -0x28(%ebp)
f0117555:	e8 f8 21 ff ff       	call   f0109752 <calculate_required_frames>
f011755a:	83 c4 10             	add    $0x10,%esp
f011755d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0117560:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f0117567:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011756a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011756d:	74 24                	je     f0117593 <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f011756f:	83 ec 0c             	sub    $0xc,%esp
f0117572:	ff 75 c4             	pushl  -0x3c(%ebp)
f0117575:	ff 75 c8             	pushl  -0x38(%ebp)
f0117578:	68 bc d3 12 f0       	push   $0xf012d3bc
f011757d:	68 d6 06 00 00       	push   $0x6d6
f0117582:	68 42 bb 12 f0       	push   $0xf012bb42
f0117587:	e8 2b 8f fe ff       	call   f01004b7 <_warn>
f011758c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011758f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0117593:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117597:	74 04                	je     f011759d <test_calculate_required_frames+0x81c>
f0117599:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011759d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f01175a1:	83 ec 0c             	sub    $0xc,%esp
f01175a4:	68 cf c4 12 f0       	push   $0xf012c4cf
f01175a9:	e8 be 99 fe ff       	call   f0100f6c <cprintf>
f01175ae:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f01175b1:	83 ec 08             	sub    $0x8,%esp
f01175b4:	ff 75 e4             	pushl  -0x1c(%ebp)
f01175b7:	68 68 d4 12 f0       	push   $0xf012d468
f01175bc:	e8 ab 99 fe ff       	call   f0100f6c <cprintf>
f01175c1:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01175c4:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01175c8:	75 10                	jne    f01175da <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f01175ca:	83 ec 0c             	sub    $0xc,%esp
f01175cd:	68 a8 d4 12 f0       	push   $0xf012d4a8
f01175d2:	e8 95 99 fe ff       	call   f0100f6c <cprintf>
f01175d7:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01175da:	a1 84 1b 5a f0       	mov    0xf05a1b84,%eax
f01175df:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01175e2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01175e5:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01175e8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01175ed:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01175f0:	5b                   	pop    %ebx
f01175f1:	5e                   	pop    %esi
f01175f2:	5f                   	pop    %edi
f01175f3:	5d                   	pop    %ebp
f01175f4:	c3                   	ret    

f01175f5 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f01175f5:	55                   	push   %ebp
f01175f6:	89 e5                	mov    %esp,%ebp
f01175f8:	57                   	push   %edi
f01175f9:	56                   	push   %esi
f01175fa:	53                   	push   %ebx
f01175fb:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0117601:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0117604:	bb 44 c2 12 f0       	mov    $0xf012c244,%ebx
f0117609:	ba 0f 00 00 00       	mov    $0xf,%edx
f011760e:	89 c7                	mov    %eax,%edi
f0117610:	89 de                	mov    %ebx,%esi
f0117612:	89 d1                	mov    %edx,%ecx
f0117614:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117616:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0117619:	b9 23 00 00 00       	mov    $0x23,%ecx
f011761e:	b0 00                	mov    $0x0,%al
f0117620:	89 d7                	mov    %edx,%edi
f0117622:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0117624:	6a 00                	push   $0x0
f0117626:	6a 0a                	push   $0xa
f0117628:	6a 14                	push   $0x14
f011762a:	8d 45 8e             	lea    -0x72(%ebp),%eax
f011762d:	50                   	push   %eax
f011762e:	e8 3d 24 ff ff       	call   f0109a70 <env_create>
f0117633:	83 c4 10             	add    $0x10,%esp
f0117636:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0117639:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011763c:	8b 40 64             	mov    0x64(%eax),%eax
f011763f:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0117642:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117645:	8b 40 68             	mov    0x68(%eax),%eax
f0117648:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011764b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011764e:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0117651:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0117658:	75 70 20 
f011765b:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0117662:	00 00 00 
f0117665:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0117668:	b9 03 00 00 00       	mov    $0x3,%ecx
f011766d:	b8 00 00 00 00       	mov    $0x0,%eax
f0117672:	89 d7                	mov    %edx,%edi
f0117674:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0117676:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117679:	8b 40 10             	mov    0x10(%eax),%eax
f011767c:	83 ec 08             	sub    $0x8,%esp
f011767f:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0117685:	52                   	push   %edx
f0117686:	50                   	push   %eax
f0117687:	e8 52 b2 00 00       	call   f01228de <ltostr>
f011768c:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f011768f:	83 ec 04             	sub    $0x4,%esp
f0117692:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0117698:	50                   	push   %eax
f0117699:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f011769f:	50                   	push   %eax
f01176a0:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f01176a6:	50                   	push   %eax
f01176a7:	e8 0b b3 00 00       	call   f01229b7 <strcconcat>
f01176ac:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01176af:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f01176b6:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f01176bd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f01176c4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f01176c8:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01176cf:	00 00 00 
	uint32 num_tables = 0;
f01176d2:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01176d9:	00 00 00 
	ClearUserSpace(proc_directory);
f01176dc:	83 ec 0c             	sub    $0xc,%esp
f01176df:	ff 75 d8             	pushl  -0x28(%ebp)
f01176e2:	e8 d8 11 00 00       	call   f01188bf <ClearUserSpace>
f01176e7:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f01176ea:	83 ec 0c             	sub    $0xc,%esp
f01176ed:	68 88 d3 12 f0       	push   $0xf012d388
f01176f2:	e8 75 98 fe ff       	call   f0100f6c <cprintf>
f01176f7:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f01176fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01176fd:	c1 e0 03             	shl    $0x3,%eax
f0117700:	89 c2                	mov    %eax,%edx
f0117702:	83 ec 0c             	sub    $0xc,%esp
f0117705:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011770b:	50                   	push   %eax
f011770c:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117712:	50                   	push   %eax
f0117713:	52                   	push   %edx
f0117714:	6a 00                	push   $0x0
f0117716:	ff 75 d8             	pushl  -0x28(%ebp)
f0117719:	e8 1a 20 ff ff       	call   f0109738 <calculate_allocated_space>
f011771e:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0117721:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117727:	85 c0                	test   %eax,%eax
f0117729:	74 27                	je     f0117752 <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011772b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117731:	83 ec 0c             	sub    $0xc,%esp
f0117734:	6a 00                	push   $0x0
f0117736:	50                   	push   %eax
f0117737:	68 f4 d4 12 f0       	push   $0xf012d4f4
f011773c:	68 0b 07 00 00       	push   $0x70b
f0117741:	68 42 bb 12 f0       	push   $0xf012bb42
f0117746:	e8 6c 8d fe ff       	call   f01004b7 <_warn>
f011774b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011774e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0117752:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117758:	85 c0                	test   %eax,%eax
f011775a:	74 27                	je     f0117783 <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011775c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117762:	83 ec 0c             	sub    $0xc,%esp
f0117765:	6a 00                	push   $0x0
f0117767:	50                   	push   %eax
f0117768:	68 54 d5 12 f0       	push   $0xf012d554
f011776d:	68 10 07 00 00       	push   $0x710
f0117772:	68 42 bb 12 f0       	push   $0xf012bb42
f0117777:	e8 3b 8d fe ff       	call   f01004b7 <_warn>
f011777c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011777f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117783:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117787:	74 04                	je     f011778d <test_calculate_allocated_space+0x198>
f0117789:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011778d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0117791:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0117798:	00 00 00 
		num_pages = 0;
f011779b:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01177a2:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f01177a5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01177a8:	c1 e0 02             	shl    $0x2,%eax
f01177ab:	89 c2                	mov    %eax,%edx
f01177ad:	83 ec 0c             	sub    $0xc,%esp
f01177b0:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01177b6:	50                   	push   %eax
f01177b7:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01177bd:	50                   	push   %eax
f01177be:	52                   	push   %edx
f01177bf:	6a 00                	push   $0x0
f01177c1:	ff 75 d8             	pushl  -0x28(%ebp)
f01177c4:	e8 6f 1f ff ff       	call   f0109738 <calculate_allocated_space>
f01177c9:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01177cc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01177d2:	85 c0                	test   %eax,%eax
f01177d4:	74 27                	je     f01177fd <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01177d6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01177dc:	83 ec 0c             	sub    $0xc,%esp
f01177df:	6a 00                	push   $0x0
f01177e1:	50                   	push   %eax
f01177e2:	68 f4 d4 12 f0       	push   $0xf012d4f4
f01177e7:	68 1c 07 00 00       	push   $0x71c
f01177ec:	68 42 bb 12 f0       	push   $0xf012bb42
f01177f1:	e8 c1 8c fe ff       	call   f01004b7 <_warn>
f01177f6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01177f9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01177fd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117803:	85 c0                	test   %eax,%eax
f0117805:	74 27                	je     f011782e <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0117807:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011780d:	83 ec 0c             	sub    $0xc,%esp
f0117810:	6a 00                	push   $0x0
f0117812:	50                   	push   %eax
f0117813:	68 54 d5 12 f0       	push   $0xf012d554
f0117818:	68 21 07 00 00       	push   $0x721
f011781d:	68 42 bb 12 f0       	push   $0xf012bb42
f0117822:	e8 90 8c fe ff       	call   f01004b7 <_warn>
f0117827:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011782a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011782e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117832:	74 04                	je     f0117838 <test_calculate_allocated_space+0x243>
f0117834:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117838:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f011783c:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0117843:	00 00 00 
		num_pages = 0;
f0117846:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011784d:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0117850:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117853:	c1 e0 0a             	shl    $0xa,%eax
f0117856:	89 c2                	mov    %eax,%edx
f0117858:	83 ec 0c             	sub    $0xc,%esp
f011785b:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117861:	50                   	push   %eax
f0117862:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117868:	50                   	push   %eax
f0117869:	52                   	push   %edx
f011786a:	6a 00                	push   $0x0
f011786c:	ff 75 d8             	pushl  -0x28(%ebp)
f011786f:	e8 c4 1e ff ff       	call   f0109738 <calculate_allocated_space>
f0117874:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0117877:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011787d:	85 c0                	test   %eax,%eax
f011787f:	74 27                	je     f01178a8 <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0117881:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117887:	83 ec 0c             	sub    $0xc,%esp
f011788a:	6a 00                	push   $0x0
f011788c:	50                   	push   %eax
f011788d:	68 f4 d4 12 f0       	push   $0xf012d4f4
f0117892:	68 2d 07 00 00       	push   $0x72d
f0117897:	68 42 bb 12 f0       	push   $0xf012bb42
f011789c:	e8 16 8c fe ff       	call   f01004b7 <_warn>
f01178a1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01178a4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01178a8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01178ae:	85 c0                	test   %eax,%eax
f01178b0:	74 27                	je     f01178d9 <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01178b2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01178b8:	83 ec 0c             	sub    $0xc,%esp
f01178bb:	6a 00                	push   $0x0
f01178bd:	50                   	push   %eax
f01178be:	68 54 d5 12 f0       	push   $0xf012d554
f01178c3:	68 32 07 00 00       	push   $0x732
f01178c8:	68 42 bb 12 f0       	push   $0xf012bb42
f01178cd:	e8 e5 8b fe ff       	call   f01004b7 <_warn>
f01178d2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01178d5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01178d9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01178dd:	74 04                	je     f01178e3 <test_calculate_allocated_space+0x2ee>
f01178df:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01178e3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f01178e7:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01178ee:	00 00 00 
		num_pages = 0;
f01178f1:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01178f8:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f01178fb:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01178fe:	89 d0                	mov    %edx,%eax
f0117900:	01 c0                	add    %eax,%eax
f0117902:	01 d0                	add    %edx,%eax
f0117904:	01 c0                	add    %eax,%eax
f0117906:	05 00 10 00 00       	add    $0x1000,%eax
f011790b:	89 c2                	mov    %eax,%edx
f011790d:	83 ec 0c             	sub    $0xc,%esp
f0117910:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117916:	50                   	push   %eax
f0117917:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011791d:	50                   	push   %eax
f011791e:	52                   	push   %edx
f011791f:	68 00 10 00 00       	push   $0x1000
f0117924:	ff 75 d8             	pushl  -0x28(%ebp)
f0117927:	e8 0c 1e ff ff       	call   f0109738 <calculate_allocated_space>
f011792c:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011792f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117935:	85 c0                	test   %eax,%eax
f0117937:	74 27                	je     f0117960 <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0117939:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011793f:	83 ec 0c             	sub    $0xc,%esp
f0117942:	6a 00                	push   $0x0
f0117944:	50                   	push   %eax
f0117945:	68 f4 d4 12 f0       	push   $0xf012d4f4
f011794a:	68 3f 07 00 00       	push   $0x73f
f011794f:	68 42 bb 12 f0       	push   $0xf012bb42
f0117954:	e8 5e 8b fe ff       	call   f01004b7 <_warn>
f0117959:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011795c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0117960:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117966:	85 c0                	test   %eax,%eax
f0117968:	74 27                	je     f0117991 <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011796a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117970:	83 ec 0c             	sub    $0xc,%esp
f0117973:	6a 00                	push   $0x0
f0117975:	50                   	push   %eax
f0117976:	68 54 d5 12 f0       	push   $0xf012d554
f011797b:	68 44 07 00 00       	push   $0x744
f0117980:	68 42 bb 12 f0       	push   $0xf012bb42
f0117985:	e8 2d 8b fe ff       	call   f01004b7 <_warn>
f011798a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011798d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117991:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117995:	74 04                	je     f011799b <test_calculate_allocated_space+0x3a6>
f0117997:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011799b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f011799f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01179a6:	00 00 00 
		num_pages = 0;
f01179a9:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01179b0:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f01179b3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01179b6:	89 c2                	mov    %eax,%edx
f01179b8:	01 d2                	add    %edx,%edx
f01179ba:	01 d0                	add    %edx,%eax
f01179bc:	05 00 18 00 00       	add    $0x1800,%eax
f01179c1:	89 c2                	mov    %eax,%edx
f01179c3:	83 ec 0c             	sub    $0xc,%esp
f01179c6:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01179cc:	50                   	push   %eax
f01179cd:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01179d3:	50                   	push   %eax
f01179d4:	52                   	push   %edx
f01179d5:	68 00 18 00 00       	push   $0x1800
f01179da:	ff 75 d8             	pushl  -0x28(%ebp)
f01179dd:	e8 56 1d ff ff       	call   f0109738 <calculate_allocated_space>
f01179e2:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01179e5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01179eb:	85 c0                	test   %eax,%eax
f01179ed:	74 27                	je     f0117a16 <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01179ef:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01179f5:	83 ec 0c             	sub    $0xc,%esp
f01179f8:	6a 00                	push   $0x0
f01179fa:	50                   	push   %eax
f01179fb:	68 f4 d4 12 f0       	push   $0xf012d4f4
f0117a00:	68 50 07 00 00       	push   $0x750
f0117a05:	68 42 bb 12 f0       	push   $0xf012bb42
f0117a0a:	e8 a8 8a fe ff       	call   f01004b7 <_warn>
f0117a0f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117a12:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0117a16:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117a1c:	85 c0                	test   %eax,%eax
f0117a1e:	74 27                	je     f0117a47 <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0117a20:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117a26:	83 ec 0c             	sub    $0xc,%esp
f0117a29:	6a 00                	push   $0x0
f0117a2b:	50                   	push   %eax
f0117a2c:	68 54 d5 12 f0       	push   $0xf012d554
f0117a31:	68 55 07 00 00       	push   $0x755
f0117a36:	68 42 bb 12 f0       	push   $0xf012bb42
f0117a3b:	e8 77 8a fe ff       	call   f01004b7 <_warn>
f0117a40:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117a43:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117a47:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117a4b:	74 04                	je     f0117a51 <test_calculate_allocated_space+0x45c>
f0117a4d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117a51:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0117a55:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0117a5c:	00 00 00 
		num_pages = 0;
f0117a5f:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117a66:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0117a69:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0117a6c:	89 d0                	mov    %edx,%eax
f0117a6e:	c1 e0 02             	shl    $0x2,%eax
f0117a71:	01 d0                	add    %edx,%eax
f0117a73:	01 c0                	add    %eax,%eax
f0117a75:	05 00 00 40 00       	add    $0x400000,%eax
f0117a7a:	89 c2                	mov    %eax,%edx
f0117a7c:	83 ec 0c             	sub    $0xc,%esp
f0117a7f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117a85:	50                   	push   %eax
f0117a86:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117a8c:	50                   	push   %eax
f0117a8d:	52                   	push   %edx
f0117a8e:	68 00 00 40 00       	push   $0x400000
f0117a93:	ff 75 d8             	pushl  -0x28(%ebp)
f0117a96:	e8 9d 1c ff ff       	call   f0109738 <calculate_allocated_space>
f0117a9b:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0117a9e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117aa4:	85 c0                	test   %eax,%eax
f0117aa6:	74 27                	je     f0117acf <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0117aa8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117aae:	83 ec 0c             	sub    $0xc,%esp
f0117ab1:	6a 00                	push   $0x0
f0117ab3:	50                   	push   %eax
f0117ab4:	68 f4 d4 12 f0       	push   $0xf012d4f4
f0117ab9:	68 61 07 00 00       	push   $0x761
f0117abe:	68 42 bb 12 f0       	push   $0xf012bb42
f0117ac3:	e8 ef 89 fe ff       	call   f01004b7 <_warn>
f0117ac8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117acb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0117acf:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117ad5:	85 c0                	test   %eax,%eax
f0117ad7:	74 27                	je     f0117b00 <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0117ad9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117adf:	83 ec 0c             	sub    $0xc,%esp
f0117ae2:	6a 00                	push   $0x0
f0117ae4:	50                   	push   %eax
f0117ae5:	68 54 d5 12 f0       	push   $0xf012d554
f0117aea:	68 66 07 00 00       	push   $0x766
f0117aef:	68 42 bb 12 f0       	push   $0xf012bb42
f0117af4:	e8 be 89 fe ff       	call   f01004b7 <_warn>
f0117af9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117afc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117b00:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117b04:	74 04                	je     f0117b0a <test_calculate_allocated_space+0x515>
f0117b06:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117b0a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f0117b0e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0117b15:	00 00 00 
		num_pages = 0;
f0117b18:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117b1f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0117b22:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117b25:	05 00 00 38 00       	add    $0x380000,%eax
f0117b2a:	01 c0                	add    %eax,%eax
f0117b2c:	89 c2                	mov    %eax,%edx
f0117b2e:	83 ec 0c             	sub    $0xc,%esp
f0117b31:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117b37:	50                   	push   %eax
f0117b38:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117b3e:	50                   	push   %eax
f0117b3f:	52                   	push   %edx
f0117b40:	68 00 00 70 00       	push   $0x700000
f0117b45:	ff 75 d8             	pushl  -0x28(%ebp)
f0117b48:	e8 eb 1b ff ff       	call   f0109738 <calculate_allocated_space>
f0117b4d:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0117b50:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117b56:	85 c0                	test   %eax,%eax
f0117b58:	74 27                	je     f0117b81 <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0117b5a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117b60:	83 ec 0c             	sub    $0xc,%esp
f0117b63:	6a 00                	push   $0x0
f0117b65:	50                   	push   %eax
f0117b66:	68 f4 d4 12 f0       	push   $0xf012d4f4
f0117b6b:	68 73 07 00 00       	push   $0x773
f0117b70:	68 42 bb 12 f0       	push   $0xf012bb42
f0117b75:	e8 3d 89 fe ff       	call   f01004b7 <_warn>
f0117b7a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117b7d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0117b81:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117b87:	85 c0                	test   %eax,%eax
f0117b89:	74 27                	je     f0117bb2 <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0117b8b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117b91:	83 ec 0c             	sub    $0xc,%esp
f0117b94:	6a 00                	push   $0x0
f0117b96:	50                   	push   %eax
f0117b97:	68 54 d5 12 f0       	push   $0xf012d554
f0117b9c:	68 78 07 00 00       	push   $0x778
f0117ba1:	68 42 bb 12 f0       	push   $0xf012bb42
f0117ba6:	e8 0c 89 fe ff       	call   f01004b7 <_warn>
f0117bab:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117bae:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0117bb2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117bb6:	74 04                	je     f0117bbc <test_calculate_allocated_space+0x5c7>
f0117bb8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0117bbc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0117bc0:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0117bc7:	00 00 00 
		num_pages = 0;
f0117bca:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117bd1:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0117bd4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117bd7:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0117bdc:	89 c2                	mov    %eax,%edx
f0117bde:	83 ec 0c             	sub    $0xc,%esp
f0117be1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117be7:	50                   	push   %eax
f0117be8:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117bee:	50                   	push   %eax
f0117bef:	52                   	push   %edx
f0117bf0:	68 ff ff 3f 00       	push   $0x3fffff
f0117bf5:	ff 75 d8             	pushl  -0x28(%ebp)
f0117bf8:	e8 3b 1b ff ff       	call   f0109738 <calculate_allocated_space>
f0117bfd:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0117c00:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117c06:	85 c0                	test   %eax,%eax
f0117c08:	74 27                	je     f0117c31 <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0117c0a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117c10:	83 ec 0c             	sub    $0xc,%esp
f0117c13:	6a 00                	push   $0x0
f0117c15:	50                   	push   %eax
f0117c16:	68 f4 d4 12 f0       	push   $0xf012d4f4
f0117c1b:	68 84 07 00 00       	push   $0x784
f0117c20:	68 42 bb 12 f0       	push   $0xf012bb42
f0117c25:	e8 8d 88 fe ff       	call   f01004b7 <_warn>
f0117c2a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117c2d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0117c31:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117c37:	85 c0                	test   %eax,%eax
f0117c39:	74 27                	je     f0117c62 <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0117c3b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117c41:	83 ec 0c             	sub    $0xc,%esp
f0117c44:	6a 00                	push   $0x0
f0117c46:	50                   	push   %eax
f0117c47:	68 54 d5 12 f0       	push   $0xf012d554
f0117c4c:	68 89 07 00 00       	push   $0x789
f0117c51:	68 42 bb 12 f0       	push   $0xf012bb42
f0117c56:	e8 5c 88 fe ff       	call   f01004b7 <_warn>
f0117c5b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117c5e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0117c62:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117c66:	74 04                	je     f0117c6c <test_calculate_allocated_space+0x677>
f0117c68:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0117c6c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0117c70:	83 ec 0c             	sub    $0xc,%esp
f0117c73:	68 f5 ce 12 f0       	push   $0xf012cef5
f0117c78:	e8 ef 92 fe ff       	call   f0100f6c <cprintf>
f0117c7d:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0117c80:	83 ec 0c             	sub    $0xc,%esp
f0117c83:	68 14 d4 12 f0       	push   $0xf012d414
f0117c88:	e8 df 92 fe ff       	call   f0100f6c <cprintf>
f0117c8d:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0117c90:	83 ec 04             	sub    $0x4,%esp
f0117c93:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0117c99:	50                   	push   %eax
f0117c9a:	68 ae c2 12 f0       	push   $0xf012c2ae
f0117c9f:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0117ca5:	50                   	push   %eax
f0117ca6:	e8 0c ad 00 00       	call   f01229b7 <strcconcat>
f0117cab:	83 c4 10             	add    $0x10,%esp
f0117cae:	83 ec 0c             	sub    $0xc,%esp
f0117cb1:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0117cb7:	50                   	push   %eax
f0117cb8:	e8 1f a2 fe ff       	call   f0101edc <execute_command>
f0117cbd:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f0117cc0:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0117cc7:	00 00 00 
		num_pages = 0;
f0117cca:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117cd1:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0117cd4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117cd7:	c1 e0 03             	shl    $0x3,%eax
f0117cda:	89 c2                	mov    %eax,%edx
f0117cdc:	83 ec 0c             	sub    $0xc,%esp
f0117cdf:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117ce5:	50                   	push   %eax
f0117ce6:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117cec:	50                   	push   %eax
f0117ced:	52                   	push   %edx
f0117cee:	6a 00                	push   $0x0
f0117cf0:	ff 75 d8             	pushl  -0x28(%ebp)
f0117cf3:	e8 40 1a ff ff       	call   f0109738 <calculate_allocated_space>
f0117cf8:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0117cfb:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0117d02:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0117d09:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117d0f:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0117d12:	74 28                	je     f0117d3c <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0117d14:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117d1a:	83 ec 0c             	sub    $0xc,%esp
f0117d1d:	ff 75 c8             	pushl  -0x38(%ebp)
f0117d20:	50                   	push   %eax
f0117d21:	68 f4 d4 12 f0       	push   $0xf012d4f4
f0117d26:	68 a0 07 00 00       	push   $0x7a0
f0117d2b:	68 42 bb 12 f0       	push   $0xf012bb42
f0117d30:	e8 82 87 fe ff       	call   f01004b7 <_warn>
f0117d35:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117d38:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0117d3c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117d42:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117d45:	74 28                	je     f0117d6f <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0117d47:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117d4d:	83 ec 0c             	sub    $0xc,%esp
f0117d50:	ff 75 c4             	pushl  -0x3c(%ebp)
f0117d53:	50                   	push   %eax
f0117d54:	68 54 d5 12 f0       	push   $0xf012d554
f0117d59:	68 a5 07 00 00       	push   $0x7a5
f0117d5e:	68 42 bb 12 f0       	push   $0xf012bb42
f0117d63:	e8 4f 87 fe ff       	call   f01004b7 <_warn>
f0117d68:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117d6b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117d6f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117d73:	74 04                	je     f0117d79 <test_calculate_allocated_space+0x784>
f0117d75:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117d79:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0117d7d:	83 ec 04             	sub    $0x4,%esp
f0117d80:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0117d86:	50                   	push   %eax
f0117d87:	68 bb c2 12 f0       	push   $0xf012c2bb
f0117d8c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0117d92:	50                   	push   %eax
f0117d93:	e8 1f ac 00 00       	call   f01229b7 <strcconcat>
f0117d98:	83 c4 10             	add    $0x10,%esp
f0117d9b:	83 ec 0c             	sub    $0xc,%esp
f0117d9e:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0117da4:	50                   	push   %eax
f0117da5:	e8 32 a1 fe ff       	call   f0101edc <execute_command>
f0117daa:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0117dad:	83 ec 04             	sub    $0x4,%esp
f0117db0:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0117db6:	50                   	push   %eax
f0117db7:	68 48 d4 12 f0       	push   $0xf012d448
f0117dbc:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0117dc2:	50                   	push   %eax
f0117dc3:	e8 ef ab 00 00       	call   f01229b7 <strcconcat>
f0117dc8:	83 c4 10             	add    $0x10,%esp
f0117dcb:	83 ec 0c             	sub    $0xc,%esp
f0117dce:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0117dd4:	50                   	push   %eax
f0117dd5:	e8 02 a1 fe ff       	call   f0101edc <execute_command>
f0117dda:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f0117ddd:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0117de4:	00 00 00 
		num_pages = 0;
f0117de7:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117dee:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f0117df1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117df4:	c1 e0 03             	shl    $0x3,%eax
f0117df7:	89 c2                	mov    %eax,%edx
f0117df9:	83 ec 0c             	sub    $0xc,%esp
f0117dfc:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117e02:	50                   	push   %eax
f0117e03:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117e09:	50                   	push   %eax
f0117e0a:	52                   	push   %edx
f0117e0b:	6a 00                	push   $0x0
f0117e0d:	ff 75 d8             	pushl  -0x28(%ebp)
f0117e10:	e8 23 19 ff ff       	call   f0109738 <calculate_allocated_space>
f0117e15:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0117e18:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f0117e1f:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0117e26:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117e2c:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0117e2f:	74 28                	je     f0117e59 <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0117e31:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117e37:	83 ec 0c             	sub    $0xc,%esp
f0117e3a:	ff 75 c8             	pushl  -0x38(%ebp)
f0117e3d:	50                   	push   %eax
f0117e3e:	68 f4 d4 12 f0       	push   $0xf012d4f4
f0117e43:	68 b6 07 00 00       	push   $0x7b6
f0117e48:	68 42 bb 12 f0       	push   $0xf012bb42
f0117e4d:	e8 65 86 fe ff       	call   f01004b7 <_warn>
f0117e52:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117e55:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0117e59:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117e5f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117e62:	74 28                	je     f0117e8c <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0117e64:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117e6a:	83 ec 0c             	sub    $0xc,%esp
f0117e6d:	ff 75 c4             	pushl  -0x3c(%ebp)
f0117e70:	50                   	push   %eax
f0117e71:	68 54 d5 12 f0       	push   $0xf012d554
f0117e76:	68 bb 07 00 00       	push   $0x7bb
f0117e7b:	68 42 bb 12 f0       	push   $0xf012bb42
f0117e80:	e8 32 86 fe ff       	call   f01004b7 <_warn>
f0117e85:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117e88:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0117e8c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117e90:	74 04                	je     f0117e96 <test_calculate_allocated_space+0x8a1>
f0117e92:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0117e96:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0117e9a:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0117ea1:	00 00 00 
		num_pages = 0;
f0117ea4:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117eab:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0117eae:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117eb1:	c1 e0 0a             	shl    $0xa,%eax
f0117eb4:	89 c2                	mov    %eax,%edx
f0117eb6:	83 ec 0c             	sub    $0xc,%esp
f0117eb9:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117ebf:	50                   	push   %eax
f0117ec0:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117ec6:	50                   	push   %eax
f0117ec7:	52                   	push   %edx
f0117ec8:	6a 00                	push   $0x0
f0117eca:	ff 75 d8             	pushl  -0x28(%ebp)
f0117ecd:	e8 66 18 ff ff       	call   f0109738 <calculate_allocated_space>
f0117ed2:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0117ed5:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f0117edc:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0117ee3:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117ee9:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0117eec:	74 28                	je     f0117f16 <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0117eee:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117ef4:	83 ec 0c             	sub    $0xc,%esp
f0117ef7:	ff 75 c8             	pushl  -0x38(%ebp)
f0117efa:	50                   	push   %eax
f0117efb:	68 f4 d4 12 f0       	push   $0xf012d4f4
f0117f00:	68 c9 07 00 00       	push   $0x7c9
f0117f05:	68 42 bb 12 f0       	push   $0xf012bb42
f0117f0a:	e8 a8 85 fe ff       	call   f01004b7 <_warn>
f0117f0f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117f12:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0117f16:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117f1c:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0117f1f:	74 28                	je     f0117f49 <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0117f21:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117f27:	83 ec 0c             	sub    $0xc,%esp
f0117f2a:	ff 75 c4             	pushl  -0x3c(%ebp)
f0117f2d:	50                   	push   %eax
f0117f2e:	68 54 d5 12 f0       	push   $0xf012d554
f0117f33:	68 ce 07 00 00       	push   $0x7ce
f0117f38:	68 42 bb 12 f0       	push   $0xf012bb42
f0117f3d:	e8 75 85 fe ff       	call   f01004b7 <_warn>
f0117f42:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0117f45:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0117f49:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0117f4d:	74 04                	je     f0117f53 <test_calculate_allocated_space+0x95e>
f0117f4f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0117f53:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0117f57:	83 ec 04             	sub    $0x4,%esp
f0117f5a:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0117f60:	50                   	push   %eax
f0117f61:	68 54 d4 12 f0       	push   $0xf012d454
f0117f66:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0117f6c:	50                   	push   %eax
f0117f6d:	e8 45 aa 00 00       	call   f01229b7 <strcconcat>
f0117f72:	83 c4 10             	add    $0x10,%esp
f0117f75:	83 ec 0c             	sub    $0xc,%esp
f0117f78:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0117f7e:	50                   	push   %eax
f0117f7f:	e8 58 9f fe ff       	call   f0101edc <execute_command>
f0117f84:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f0117f87:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0117f8e:	00 00 00 
		num_pages = 0;
f0117f91:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0117f98:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0117f9b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117f9e:	89 c2                	mov    %eax,%edx
f0117fa0:	01 d2                	add    %edx,%edx
f0117fa2:	01 d0                	add    %edx,%eax
f0117fa4:	05 00 18 00 00       	add    $0x1800,%eax
f0117fa9:	89 c2                	mov    %eax,%edx
f0117fab:	83 ec 0c             	sub    $0xc,%esp
f0117fae:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0117fb4:	50                   	push   %eax
f0117fb5:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0117fbb:	50                   	push   %eax
f0117fbc:	52                   	push   %edx
f0117fbd:	68 00 18 00 00       	push   $0x1800
f0117fc2:	ff 75 d8             	pushl  -0x28(%ebp)
f0117fc5:	e8 6e 17 ff ff       	call   f0109738 <calculate_allocated_space>
f0117fca:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0117fcd:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0117fd4:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0117fdb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117fe1:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0117fe4:	74 28                	je     f011800e <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0117fe6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0117fec:	83 ec 0c             	sub    $0xc,%esp
f0117fef:	ff 75 c8             	pushl  -0x38(%ebp)
f0117ff2:	50                   	push   %eax
f0117ff3:	68 f4 d4 12 f0       	push   $0xf012d4f4
f0117ff8:	68 df 07 00 00       	push   $0x7df
f0117ffd:	68 42 bb 12 f0       	push   $0xf012bb42
f0118002:	e8 b0 84 fe ff       	call   f01004b7 <_warn>
f0118007:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011800a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011800e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118014:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0118017:	74 28                	je     f0118041 <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0118019:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011801f:	83 ec 0c             	sub    $0xc,%esp
f0118022:	ff 75 c4             	pushl  -0x3c(%ebp)
f0118025:	50                   	push   %eax
f0118026:	68 54 d5 12 f0       	push   $0xf012d554
f011802b:	68 e4 07 00 00       	push   $0x7e4
f0118030:	68 42 bb 12 f0       	push   $0xf012bb42
f0118035:	e8 7d 84 fe ff       	call   f01004b7 <_warn>
f011803a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011803d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0118041:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0118045:	74 04                	je     f011804b <test_calculate_allocated_space+0xa56>
f0118047:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011804b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f011804f:	83 ec 04             	sub    $0x4,%esp
f0118052:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0118058:	50                   	push   %eax
f0118059:	68 14 c5 12 f0       	push   $0xf012c514
f011805e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0118064:	50                   	push   %eax
f0118065:	e8 4d a9 00 00       	call   f01229b7 <strcconcat>
f011806a:	83 c4 10             	add    $0x10,%esp
f011806d:	83 ec 0c             	sub    $0xc,%esp
f0118070:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0118076:	50                   	push   %eax
f0118077:	e8 60 9e fe ff       	call   f0101edc <execute_command>
f011807c:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f011807f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0118086:	00 00 00 
		num_pages = 0;
f0118089:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0118090:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0118093:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0118096:	89 d0                	mov    %edx,%eax
f0118098:	c1 e0 02             	shl    $0x2,%eax
f011809b:	01 d0                	add    %edx,%eax
f011809d:	01 c0                	add    %eax,%eax
f011809f:	05 00 00 40 00       	add    $0x400000,%eax
f01180a4:	89 c2                	mov    %eax,%edx
f01180a6:	83 ec 0c             	sub    $0xc,%esp
f01180a9:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01180af:	50                   	push   %eax
f01180b0:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01180b6:	50                   	push   %eax
f01180b7:	52                   	push   %edx
f01180b8:	68 00 00 40 00       	push   $0x400000
f01180bd:	ff 75 d8             	pushl  -0x28(%ebp)
f01180c0:	e8 73 16 ff ff       	call   f0109738 <calculate_allocated_space>
f01180c5:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01180c8:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f01180cf:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01180d6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01180dc:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01180df:	74 28                	je     f0118109 <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01180e1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01180e7:	83 ec 0c             	sub    $0xc,%esp
f01180ea:	ff 75 c8             	pushl  -0x38(%ebp)
f01180ed:	50                   	push   %eax
f01180ee:	68 f4 d4 12 f0       	push   $0xf012d4f4
f01180f3:	68 f4 07 00 00       	push   $0x7f4
f01180f8:	68 42 bb 12 f0       	push   $0xf012bb42
f01180fd:	e8 b5 83 fe ff       	call   f01004b7 <_warn>
f0118102:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0118105:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0118109:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011810f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0118112:	74 28                	je     f011813c <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0118114:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011811a:	83 ec 0c             	sub    $0xc,%esp
f011811d:	ff 75 c4             	pushl  -0x3c(%ebp)
f0118120:	50                   	push   %eax
f0118121:	68 54 d5 12 f0       	push   $0xf012d554
f0118126:	68 f9 07 00 00       	push   $0x7f9
f011812b:	68 42 bb 12 f0       	push   $0xf012bb42
f0118130:	e8 82 83 fe ff       	call   f01004b7 <_warn>
f0118135:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0118138:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011813c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0118140:	74 04                	je     f0118146 <test_calculate_allocated_space+0xb51>
f0118142:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0118146:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f011814a:	83 ec 04             	sub    $0x4,%esp
f011814d:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0118153:	50                   	push   %eax
f0118154:	68 1e c5 12 f0       	push   $0xf012c51e
f0118159:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011815f:	50                   	push   %eax
f0118160:	e8 52 a8 00 00       	call   f01229b7 <strcconcat>
f0118165:	83 c4 10             	add    $0x10,%esp
f0118168:	83 ec 0c             	sub    $0xc,%esp
f011816b:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0118171:	50                   	push   %eax
f0118172:	e8 65 9d fe ff       	call   f0101edc <execute_command>
f0118177:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f011817a:	83 ec 04             	sub    $0x4,%esp
f011817d:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0118183:	50                   	push   %eax
f0118184:	68 5c d4 12 f0       	push   $0xf012d45c
f0118189:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011818f:	50                   	push   %eax
f0118190:	e8 22 a8 00 00       	call   f01229b7 <strcconcat>
f0118195:	83 c4 10             	add    $0x10,%esp
f0118198:	83 ec 0c             	sub    $0xc,%esp
f011819b:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01181a1:	50                   	push   %eax
f01181a2:	e8 35 9d fe ff       	call   f0101edc <execute_command>
f01181a7:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f01181aa:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01181b1:	00 00 00 
		num_pages = 0;
f01181b4:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01181bb:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f01181be:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01181c1:	05 00 00 38 00       	add    $0x380000,%eax
f01181c6:	01 c0                	add    %eax,%eax
f01181c8:	89 c2                	mov    %eax,%edx
f01181ca:	83 ec 0c             	sub    $0xc,%esp
f01181cd:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01181d3:	50                   	push   %eax
f01181d4:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01181da:	50                   	push   %eax
f01181db:	52                   	push   %edx
f01181dc:	68 00 00 70 00       	push   $0x700000
f01181e1:	ff 75 d8             	pushl  -0x28(%ebp)
f01181e4:	e8 4f 15 ff ff       	call   f0109738 <calculate_allocated_space>
f01181e9:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01181ec:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f01181f3:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01181fa:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0118200:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0118203:	74 28                	je     f011822d <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0118205:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011820b:	83 ec 0c             	sub    $0xc,%esp
f011820e:	ff 75 c8             	pushl  -0x38(%ebp)
f0118211:	50                   	push   %eax
f0118212:	68 f4 d4 12 f0       	push   $0xf012d4f4
f0118217:	68 0b 08 00 00       	push   $0x80b
f011821c:	68 42 bb 12 f0       	push   $0xf012bb42
f0118221:	e8 91 82 fe ff       	call   f01004b7 <_warn>
f0118226:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0118229:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011822d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118233:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0118236:	74 28                	je     f0118260 <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0118238:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011823e:	83 ec 0c             	sub    $0xc,%esp
f0118241:	ff 75 c4             	pushl  -0x3c(%ebp)
f0118244:	50                   	push   %eax
f0118245:	68 54 d5 12 f0       	push   $0xf012d554
f011824a:	68 10 08 00 00       	push   $0x810
f011824f:	68 42 bb 12 f0       	push   $0xf012bb42
f0118254:	e8 5e 82 fe ff       	call   f01004b7 <_warn>
f0118259:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011825c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0118260:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0118264:	74 04                	je     f011826a <test_calculate_allocated_space+0xc75>
f0118266:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011826a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f011826e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0118275:	00 00 00 
		num_pages = 0;
f0118278:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011827f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0118282:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0118285:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f011828a:	89 c2                	mov    %eax,%edx
f011828c:	83 ec 0c             	sub    $0xc,%esp
f011828f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0118295:	50                   	push   %eax
f0118296:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011829c:	50                   	push   %eax
f011829d:	52                   	push   %edx
f011829e:	68 ff ff 3f 00       	push   $0x3fffff
f01182a3:	ff 75 d8             	pushl  -0x28(%ebp)
f01182a6:	e8 8d 14 ff ff       	call   f0109738 <calculate_allocated_space>
f01182ab:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f01182ae:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f01182b5:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01182bc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01182c2:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01182c5:	74 28                	je     f01182ef <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01182c7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01182cd:	83 ec 0c             	sub    $0xc,%esp
f01182d0:	ff 75 c8             	pushl  -0x38(%ebp)
f01182d3:	50                   	push   %eax
f01182d4:	68 f4 d4 12 f0       	push   $0xf012d4f4
f01182d9:	68 1e 08 00 00       	push   $0x81e
f01182de:	68 42 bb 12 f0       	push   $0xf012bb42
f01182e3:	e8 cf 81 fe ff       	call   f01004b7 <_warn>
f01182e8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01182eb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01182ef:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01182f5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01182f8:	74 28                	je     f0118322 <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01182fa:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0118300:	83 ec 0c             	sub    $0xc,%esp
f0118303:	ff 75 c4             	pushl  -0x3c(%ebp)
f0118306:	50                   	push   %eax
f0118307:	68 54 d5 12 f0       	push   $0xf012d554
f011830c:	68 23 08 00 00       	push   $0x823
f0118311:	68 42 bb 12 f0       	push   $0xf012bb42
f0118316:	e8 9c 81 fe ff       	call   f01004b7 <_warn>
f011831b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011831e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0118322:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0118326:	74 04                	je     f011832c <test_calculate_allocated_space+0xd37>
f0118328:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011832c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0118330:	83 ec 0c             	sub    $0xc,%esp
f0118333:	68 cf c4 12 f0       	push   $0xf012c4cf
f0118338:	e8 2f 8c fe ff       	call   f0100f6c <cprintf>
f011833d:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0118340:	83 ec 08             	sub    $0x8,%esp
f0118343:	ff 75 e4             	pushl  -0x1c(%ebp)
f0118346:	68 b0 d5 12 f0       	push   $0xf012d5b0
f011834b:	e8 1c 8c fe ff       	call   f0100f6c <cprintf>
f0118350:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0118353:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0118357:	75 10                	jne    f0118369 <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f0118359:	83 ec 0c             	sub    $0xc,%esp
f011835c:	68 f0 d5 12 f0       	push   $0xf012d5f0
f0118361:	e8 06 8c fe ff       	call   f0100f6c <cprintf>
f0118366:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0118369:	a1 84 1b 5a f0       	mov    0xf05a1b84,%eax
f011836e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0118371:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118374:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0118377:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011837c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011837f:	5b                   	pop    %ebx
f0118380:	5e                   	pop    %esi
f0118381:	5f                   	pop    %edi
f0118382:	5d                   	pop    %ebp
f0118383:	c3                   	ret    

f0118384 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f0118384:	55                   	push   %ebp
f0118385:	89 e5                	mov    %esp,%ebp
f0118387:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f011838a:	8b 45 10             	mov    0x10(%ebp),%eax
f011838d:	ba 01 00 00 00       	mov    $0x1,%edx
f0118392:	88 c1                	mov    %al,%cl
f0118394:	d3 e2                	shl    %cl,%edx
f0118396:	89 d0                	mov    %edx,%eax
f0118398:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011839b:	8b 45 0c             	mov    0xc(%ebp),%eax
f011839e:	c1 e8 16             	shr    $0x16,%eax
f01183a1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01183a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01183ab:	01 d0                	add    %edx,%eax
f01183ad:	8b 00                	mov    (%eax),%eax
f01183af:	83 e0 01             	and    $0x1,%eax
f01183b2:	85 c0                	test   %eax,%eax
f01183b4:	75 07                	jne    f01183bd <CB+0x39>
f01183b6:	b8 00 00 00 00       	mov    $0x0,%eax
f01183bb:	eb 76                	jmp    f0118433 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01183bd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01183c0:	c1 e8 16             	shr    $0x16,%eax
f01183c3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01183ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01183cd:	01 d0                	add    %edx,%eax
f01183cf:	8b 00                	mov    (%eax),%eax
f01183d1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01183d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01183d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01183dc:	c1 e8 0c             	shr    $0xc,%eax
f01183df:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01183e2:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f01183e7:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01183ea:	72 17                	jb     f0118403 <CB+0x7f>
f01183ec:	ff 75 f0             	pushl  -0x10(%ebp)
f01183ef:	68 3c d6 12 f0       	push   $0xf012d63c
f01183f4:	68 3e 08 00 00       	push   $0x83e
f01183f9:	68 42 bb 12 f0       	push   $0xf012bb42
f01183fe:	e8 17 7f fe ff       	call   f010031a <_panic>
f0118403:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118406:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011840b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f011840e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118411:	c1 e8 0c             	shr    $0xc,%eax
f0118414:	25 ff 03 00 00       	and    $0x3ff,%eax
f0118419:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118420:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0118423:	01 d0                	add    %edx,%eax
f0118425:	8b 00                	mov    (%eax),%eax
f0118427:	23 45 f4             	and    -0xc(%ebp),%eax
f011842a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011842d:	0f 94 c0             	sete   %al
f0118430:	0f b6 c0             	movzbl %al,%eax
}
f0118433:	c9                   	leave  
f0118434:	c3                   	ret    

f0118435 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f0118435:	55                   	push   %ebp
f0118436:	89 e5                	mov    %esp,%ebp
f0118438:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f011843b:	8b 45 10             	mov    0x10(%ebp),%eax
f011843e:	ba 01 00 00 00       	mov    $0x1,%edx
f0118443:	88 c1                	mov    %al,%cl
f0118445:	d3 e2                	shl    %cl,%edx
f0118447:	89 d0                	mov    %edx,%eax
f0118449:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011844c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011844f:	c1 e8 16             	shr    $0x16,%eax
f0118452:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118459:	8b 45 08             	mov    0x8(%ebp),%eax
f011845c:	01 d0                	add    %edx,%eax
f011845e:	8b 00                	mov    (%eax),%eax
f0118460:	83 e0 01             	and    $0x1,%eax
f0118463:	85 c0                	test   %eax,%eax
f0118465:	75 0a                	jne    f0118471 <SB+0x3c>
f0118467:	b8 00 00 00 00       	mov    $0x0,%eax
f011846c:	e9 cd 00 00 00       	jmp    f011853e <SB+0x109>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0118471:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118474:	c1 e8 16             	shr    $0x16,%eax
f0118477:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011847e:	8b 45 08             	mov    0x8(%ebp),%eax
f0118481:	01 d0                	add    %edx,%eax
f0118483:	8b 00                	mov    (%eax),%eax
f0118485:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011848a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011848d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118490:	c1 e8 0c             	shr    $0xc,%eax
f0118493:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0118496:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f011849b:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f011849e:	72 17                	jb     f01184b7 <SB+0x82>
f01184a0:	ff 75 f0             	pushl  -0x10(%ebp)
f01184a3:	68 3c d6 12 f0       	push   $0xf012d63c
f01184a8:	68 46 08 00 00       	push   $0x846
f01184ad:	68 42 bb 12 f0       	push   $0xf012bb42
f01184b2:	e8 63 7e fe ff       	call   f010031a <_panic>
f01184b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01184ba:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01184bf:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
f01184c2:	83 7d 14 ff          	cmpl   $0xffffffff,0x14(%ebp)
f01184c6:	74 3c                	je     f0118504 <SB+0xcf>
f01184c8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01184cb:	c1 e8 0c             	shr    $0xc,%eax
f01184ce:	25 ff 03 00 00       	and    $0x3ff,%eax
f01184d3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01184da:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01184dd:	01 d0                	add    %edx,%eax
f01184df:	8b 55 0c             	mov    0xc(%ebp),%edx
f01184e2:	c1 ea 0c             	shr    $0xc,%edx
f01184e5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01184eb:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f01184f2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01184f5:	01 ca                	add    %ecx,%edx
f01184f7:	8b 12                	mov    (%edx),%edx
f01184f9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01184fc:	f7 d1                	not    %ecx
f01184fe:	21 ca                	and    %ecx,%edx
f0118500:	89 10                	mov    %edx,(%eax)
f0118502:	eb 35                	jmp    f0118539 <SB+0x104>
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
f0118504:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118507:	c1 e8 0c             	shr    $0xc,%eax
f011850a:	25 ff 03 00 00       	and    $0x3ff,%eax
f011850f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118516:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0118519:	01 c2                	add    %eax,%edx
f011851b:	8b 45 0c             	mov    0xc(%ebp),%eax
f011851e:	c1 e8 0c             	shr    $0xc,%eax
f0118521:	25 ff 03 00 00       	and    $0x3ff,%eax
f0118526:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011852d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0118530:	01 c8                	add    %ecx,%eax
f0118532:	8b 00                	mov    (%eax),%eax
f0118534:	0b 45 f4             	or     -0xc(%ebp),%eax
f0118537:	89 02                	mov    %eax,(%edx)
	return 0;
f0118539:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011853e:	c9                   	leave  
f011853f:	c3                   	ret    

f0118540 <CPs>:
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f0118540:	55                   	push   %ebp
f0118541:	89 e5                	mov    %esp,%ebp
f0118543:	83 ec 28             	sub    $0x28,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0118546:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118549:	c1 e8 16             	shr    $0x16,%eax
f011854c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118553:	8b 45 08             	mov    0x8(%ebp),%eax
f0118556:	01 d0                	add    %edx,%eax
f0118558:	8b 00                	mov    (%eax),%eax
f011855a:	83 e0 01             	and    $0x1,%eax
f011855d:	85 c0                	test   %eax,%eax
f011855f:	75 0a                	jne    f011856b <CPs+0x2b>
f0118561:	b8 00 00 00 00       	mov    $0x0,%eax
f0118566:	e9 b8 00 00 00       	jmp    f0118623 <CPs+0xe3>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011856b:	8b 45 0c             	mov    0xc(%ebp),%eax
f011856e:	c1 e8 16             	shr    $0x16,%eax
f0118571:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118578:	8b 45 08             	mov    0x8(%ebp),%eax
f011857b:	01 d0                	add    %edx,%eax
f011857d:	8b 00                	mov    (%eax),%eax
f011857f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0118584:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0118587:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011858a:	c1 e8 0c             	shr    $0xc,%eax
f011858d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0118590:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f0118595:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0118598:	72 17                	jb     f01185b1 <CPs+0x71>
f011859a:	ff 75 f0             	pushl  -0x10(%ebp)
f011859d:	68 3c d6 12 f0       	push   $0xf012d63c
f01185a2:	68 4f 08 00 00       	push   $0x84f
f01185a7:	68 42 bb 12 f0       	push   $0xf012bb42
f01185ac:	e8 69 7d fe ff       	call   f010031a <_panic>
f01185b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01185b4:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01185b9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	for (int i = 0 ; i < 12 ; i++)
f01185bc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01185c3:	eb 53                	jmp    f0118618 <CPs+0xd8>
	{
		uint32 mask = 1<<i;
f01185c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01185c8:	ba 01 00 00 00       	mov    $0x1,%edx
f01185cd:	88 c1                	mov    %al,%cl
f01185cf:	d3 e2                	shl    %cl,%edx
f01185d1:	89 d0                	mov    %edx,%eax
f01185d3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (!(which & mask))	continue ;
f01185d6:	8b 45 14             	mov    0x14(%ebp),%eax
f01185d9:	23 45 e4             	and    -0x1c(%ebp),%eax
f01185dc:	85 c0                	test   %eax,%eax
f01185de:	74 34                	je     f0118614 <CPs+0xd4>
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
f01185e0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01185e3:	c1 e8 0c             	shr    $0xc,%eax
f01185e6:	25 ff 03 00 00       	and    $0x3ff,%eax
f01185eb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01185f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01185f5:	01 d0                	add    %edx,%eax
f01185f7:	8b 00                	mov    (%eax),%eax
f01185f9:	33 45 10             	xor    0x10(%ebp),%eax
f01185fc:	23 45 e4             	and    -0x1c(%ebp),%eax
f01185ff:	85 c0                	test   %eax,%eax
f0118601:	0f 94 c0             	sete   %al
f0118604:	88 45 e3             	mov    %al,-0x1d(%ebp)
		if (!c) return 0;
f0118607:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011860b:	75 08                	jne    f0118615 <CPs+0xd5>
f011860d:	b8 00 00 00 00       	mov    $0x0,%eax
f0118612:	eb 0f                	jmp    f0118623 <CPs+0xe3>
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
	{
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
f0118614:	90                   	nop
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
f0118615:	ff 45 f4             	incl   -0xc(%ebp)
f0118618:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
f011861c:	7e a7                	jle    f01185c5 <CPs+0x85>
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
		if (!c) return 0;
	}
	return 1;
f011861e:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0118623:	c9                   	leave  
f0118624:	c3                   	ret    

f0118625 <CA>:

int CA(uint32 *ptr_dir, uint32 va)
{
f0118625:	55                   	push   %ebp
f0118626:	89 e5                	mov    %esp,%ebp
f0118628:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011862b:	8b 45 0c             	mov    0xc(%ebp),%eax
f011862e:	c1 e8 16             	shr    $0x16,%eax
f0118631:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118638:	8b 45 08             	mov    0x8(%ebp),%eax
f011863b:	01 d0                	add    %edx,%eax
f011863d:	8b 00                	mov    (%eax),%eax
f011863f:	83 e0 01             	and    $0x1,%eax
f0118642:	85 c0                	test   %eax,%eax
f0118644:	75 07                	jne    f011864d <CA+0x28>
f0118646:	b8 00 00 00 00       	mov    $0x0,%eax
f011864b:	eb 6f                	jmp    f01186bc <CA+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011864d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118650:	c1 e8 16             	shr    $0x16,%eax
f0118653:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011865a:	8b 45 08             	mov    0x8(%ebp),%eax
f011865d:	01 d0                	add    %edx,%eax
f011865f:	8b 00                	mov    (%eax),%eax
f0118661:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0118666:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0118669:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011866c:	c1 e8 0c             	shr    $0xc,%eax
f011866f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0118672:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f0118677:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f011867a:	72 17                	jb     f0118693 <CA+0x6e>
f011867c:	ff 75 f4             	pushl  -0xc(%ebp)
f011867f:	68 3c d6 12 f0       	push   $0xf012d63c
f0118684:	68 5e 08 00 00       	push   $0x85e
f0118689:	68 42 bb 12 f0       	push   $0xf012bb42
f011868e:	e8 87 7c fe ff       	call   f010031a <_panic>
f0118693:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118696:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011869b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
f011869e:	8b 45 0c             	mov    0xc(%ebp),%eax
f01186a1:	c1 e8 0c             	shr    $0xc,%eax
f01186a4:	25 ff 03 00 00       	and    $0x3ff,%eax
f01186a9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01186b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01186b3:	01 d0                	add    %edx,%eax
f01186b5:	8b 00                	mov    (%eax),%eax
f01186b7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f01186bc:	c9                   	leave  
f01186bd:	c3                   	ret    

f01186be <CE>:

int CE(uint32 *_d, uint32 va)
{
f01186be:	55                   	push   %ebp
f01186bf:	89 e5                	mov    %esp,%ebp
f01186c1:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01186c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01186c7:	c1 e8 16             	shr    $0x16,%eax
f01186ca:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01186d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01186d4:	01 d0                	add    %edx,%eax
f01186d6:	8b 00                	mov    (%eax),%eax
f01186d8:	83 e0 01             	and    $0x1,%eax
f01186db:	85 c0                	test   %eax,%eax
f01186dd:	75 07                	jne    f01186e6 <CE+0x28>
f01186df:	b8 00 00 00 00       	mov    $0x0,%eax
f01186e4:	eb 7a                	jmp    f0118760 <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01186e6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01186e9:	c1 e8 16             	shr    $0x16,%eax
f01186ec:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01186f3:	8b 45 08             	mov    0x8(%ebp),%eax
f01186f6:	01 d0                	add    %edx,%eax
f01186f8:	8b 00                	mov    (%eax),%eax
f01186fa:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01186ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0118702:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118705:	c1 e8 0c             	shr    $0xc,%eax
f0118708:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011870b:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f0118710:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0118713:	72 17                	jb     f011872c <CE+0x6e>
f0118715:	ff 75 f4             	pushl  -0xc(%ebp)
f0118718:	68 3c d6 12 f0       	push   $0xf012d63c
f011871d:	68 65 08 00 00       	push   $0x865
f0118722:	68 42 bb 12 f0       	push   $0xf012bb42
f0118727:	e8 ee 7b fe ff       	call   f010031a <_panic>
f011872c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011872f:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0118734:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f0118737:	8b 45 0c             	mov    0xc(%ebp),%eax
f011873a:	c1 e8 0c             	shr    $0xc,%eax
f011873d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0118742:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118749:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011874c:	01 d0                	add    %edx,%eax
f011874e:	8b 00                	mov    (%eax),%eax
f0118750:	85 c0                	test   %eax,%eax
f0118752:	74 07                	je     f011875b <CE+0x9d>
f0118754:	b8 00 00 00 00       	mov    $0x0,%eax
f0118759:	eb 05                	jmp    f0118760 <CE+0xa2>
	return 1;
f011875b:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0118760:	c9                   	leave  
f0118761:	c3                   	ret    

f0118762 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f0118762:	55                   	push   %ebp
f0118763:	89 e5                	mov    %esp,%ebp
f0118765:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 pd_entry = pd[((((uint32) (va)) >> 22) & 0x3FF)];
f0118768:	8b 45 0c             	mov    0xc(%ebp),%eax
f011876b:	c1 e8 16             	shr    $0x16,%eax
f011876e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118775:	8b 45 08             	mov    0x8(%ebp),%eax
f0118778:	01 d0                	add    %edx,%eax
f011877a:	8b 00                	mov    (%eax),%eax
f011877c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ( (pd_entry & 1) == 1)
f011877f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118782:	83 e0 01             	and    $0x1,%eax
f0118785:	85 c0                	test   %eax,%eax
f0118787:	0f 84 92 00 00 00    	je     f011881f <CP+0xbd>
	{
		uint32 *t = NULL;
f011878d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		t = (STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(pd_entry)));
f0118794:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118797:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011879c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f011879f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01187a2:	c1 e8 0c             	shr    $0xc,%eax
f01187a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01187a8:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f01187ad:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f01187b0:	72 17                	jb     f01187c9 <CP+0x67>
f01187b2:	ff 75 ec             	pushl  -0x14(%ebp)
f01187b5:	68 3c d6 12 f0       	push   $0xf012d63c
f01187ba:	68 71 08 00 00       	push   $0x871
f01187bf:	68 42 bb 12 f0       	push   $0xf012bb42
f01187c4:	e8 51 7b fe ff       	call   f010031a <_panic>
f01187c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01187cc:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01187d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf("va =%x, ENTRY after PERM = %x, perm to set = %x, perm to clear = %x\n", va, t[PTX(va)]&0x00000FFF, ps, pc);

		if (((t[((((uint32) (va)) >> 12) & 0x3FF)]&ps) == ps)&&((~(t[((((uint32) (va)) >> 12) & 0x3FF)])&pc) == pc))
f01187d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01187d7:	c1 e8 0c             	shr    $0xc,%eax
f01187da:	25 ff 03 00 00       	and    $0x3ff,%eax
f01187df:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01187e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01187e9:	01 d0                	add    %edx,%eax
f01187eb:	8b 00                	mov    (%eax),%eax
f01187ed:	23 45 10             	and    0x10(%ebp),%eax
f01187f0:	3b 45 10             	cmp    0x10(%ebp),%eax
f01187f3:	75 2a                	jne    f011881f <CP+0xbd>
f01187f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01187f8:	c1 e8 0c             	shr    $0xc,%eax
f01187fb:	25 ff 03 00 00       	and    $0x3ff,%eax
f0118800:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118807:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011880a:	01 d0                	add    %edx,%eax
f011880c:	8b 00                	mov    (%eax),%eax
f011880e:	f7 d0                	not    %eax
f0118810:	23 45 14             	and    0x14(%ebp),%eax
f0118813:	3b 45 14             	cmp    0x14(%ebp),%eax
f0118816:	75 07                	jne    f011881f <CP+0xbd>
			return 1;
f0118818:	b8 01 00 00 00       	mov    $0x1,%eax
f011881d:	eb 05                	jmp    f0118824 <CP+0xc2>
	}
	return 0;
f011881f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0118824:	c9                   	leave  
f0118825:	c3                   	ret    

f0118826 <GP>:

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f0118826:	55                   	push   %ebp
f0118827:	89 e5                	mov    %esp,%ebp
f0118829:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011882c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011882f:	c1 e8 16             	shr    $0x16,%eax
f0118832:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118839:	8b 45 08             	mov    0x8(%ebp),%eax
f011883c:	01 d0                	add    %edx,%eax
f011883e:	8b 00                	mov    (%eax),%eax
f0118840:	83 e0 01             	and    $0x1,%eax
f0118843:	85 c0                	test   %eax,%eax
f0118845:	75 07                	jne    f011884e <GP+0x28>
f0118847:	b8 00 00 00 00       	mov    $0x0,%eax
f011884c:	eb 6f                	jmp    f01188bd <GP+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011884e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118851:	c1 e8 16             	shr    $0x16,%eax
f0118854:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011885b:	8b 45 08             	mov    0x8(%ebp),%eax
f011885e:	01 d0                	add    %edx,%eax
f0118860:	8b 00                	mov    (%eax),%eax
f0118862:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0118867:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011886a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011886d:	c1 e8 0c             	shr    $0xc,%eax
f0118870:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0118873:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f0118878:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f011887b:	72 17                	jb     f0118894 <GP+0x6e>
f011887d:	ff 75 f4             	pushl  -0xc(%ebp)
f0118880:	68 3c d6 12 f0       	push   $0xf012d63c
f0118885:	68 7e 08 00 00       	push   $0x87e
f011888a:	68 42 bb 12 f0       	push   $0xf012bb42
f011888f:	e8 86 7a fe ff       	call   f010031a <_panic>
f0118894:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118897:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011889c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
f011889f:	8b 45 0c             	mov    0xc(%ebp),%eax
f01188a2:	c1 e8 0c             	shr    $0xc,%eax
f01188a5:	25 ff 03 00 00       	and    $0x3ff,%eax
f01188aa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01188b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01188b4:	01 d0                	add    %edx,%eax
f01188b6:	8b 00                	mov    (%eax),%eax
f01188b8:	25 ff 0f 00 00       	and    $0xfff,%eax
}
f01188bd:	c9                   	leave  
f01188be:	c3                   	ret    

f01188bf <ClearUserSpace>:

void ClearUserSpace(uint32 *ptr_dir)
{
f01188bf:	55                   	push   %ebp
f01188c0:	89 e5                	mov    %esp,%ebp
f01188c2:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f01188c5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01188cc:	eb 18                	jmp    f01188e6 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f01188ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01188d1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01188d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01188db:	01 d0                	add    %edx,%eax
f01188dd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f01188e3:	ff 45 fc             	incl   -0x4(%ebp)
f01188e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01188e9:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f01188ee:	76 de                	jbe    f01188ce <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f01188f0:	90                   	nop
f01188f1:	c9                   	leave  
f01188f2:	c3                   	ret    

f01188f3 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f01188f3:	55                   	push   %ebp
f01188f4:	89 e5                	mov    %esp,%ebp
f01188f6:	83 ec 38             	sub    $0x38,%esp
f01188f9:	8b 45 2c             	mov    0x2c(%ebp),%eax
f01188fc:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f01188ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0118902:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0118907:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f011890a:	8b 45 10             	mov    0x10(%ebp),%eax
f011890d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0118912:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0118915:	e9 ea 01 00 00       	jmp    f0118b04 <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f011891a:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f011891e:	74 44                	je     f0118964 <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f0118920:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118923:	83 ec 04             	sub    $0x4,%esp
f0118926:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0118929:	52                   	push   %edx
f011892a:	50                   	push   %eax
f011892b:	ff 75 08             	pushl  0x8(%ebp)
f011892e:	e8 97 fd fe ff       	call   f01086ca <get_frame_info>
f0118933:	83 c4 10             	add    $0x10,%esp
f0118936:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f0118939:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011893c:	85 c0                	test   %eax,%eax
f011893e:	75 24                	jne    f0118964 <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f0118940:	83 ec 04             	sub    $0x4,%esp
f0118943:	68 6c d6 12 f0       	push   $0xf012d66c
f0118948:	68 99 08 00 00       	push   $0x899
f011894d:	68 42 bb 12 f0       	push   $0xf012bb42
f0118952:	e8 60 7b fe ff       	call   f01004b7 <_warn>
f0118957:	83 c4 10             	add    $0x10,%esp
				return 0;
f011895a:	b8 00 00 00 00       	mov    $0x0,%eax
f011895f:	e9 b6 01 00 00       	jmp    f0118b1a <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f0118964:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118967:	83 ec 04             	sub    $0x4,%esp
f011896a:	8d 55 d8             	lea    -0x28(%ebp),%edx
f011896d:	52                   	push   %edx
f011896e:	50                   	push   %eax
f011896f:	ff 75 08             	pushl  0x8(%ebp)
f0118972:	e8 53 fd fe ff       	call   f01086ca <get_frame_info>
f0118977:	83 c4 10             	add    $0x10,%esp
f011897a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f011897d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0118980:	85 c0                	test   %eax,%eax
f0118982:	75 24                	jne    f01189a8 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f0118984:	83 ec 04             	sub    $0x4,%esp
f0118987:	68 98 d6 12 f0       	push   $0xf012d698
f011898c:	68 a0 08 00 00       	push   $0x8a0
f0118991:	68 42 bb 12 f0       	push   $0xf012bb42
f0118996:	e8 1c 7b fe ff       	call   f01004b7 <_warn>
f011899b:	83 c4 10             	add    $0x10,%esp
			return 0;
f011899e:	b8 00 00 00 00       	mov    $0x0,%eax
f01189a3:	e9 72 01 00 00       	jmp    f0118b1a <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f01189a8:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f01189ac:	75 70                	jne    f0118a1e <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f01189ae:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01189b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01189b4:	c1 ea 0c             	shr    $0xc,%edx
f01189b7:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01189bd:	c1 e2 02             	shl    $0x2,%edx
f01189c0:	01 d0                	add    %edx,%eax
f01189c2:	8b 00                	mov    (%eax),%eax
f01189c4:	c1 e8 0c             	shr    $0xc,%eax
f01189c7:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f01189ca:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01189cd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01189d0:	c1 ea 0c             	shr    $0xc,%edx
f01189d3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01189d9:	c1 e2 02             	shl    $0x2,%edx
f01189dc:	01 d0                	add    %edx,%eax
f01189de:	8b 00                	mov    (%eax),%eax
f01189e0:	c1 e8 0c             	shr    $0xc,%eax
f01189e3:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f01189e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01189e9:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01189ec:	74 30                	je     f0118a1e <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f01189ee:	83 ec 04             	sub    $0x4,%esp
f01189f1:	ff 75 e4             	pushl  -0x1c(%ebp)
f01189f4:	ff 75 e8             	pushl  -0x18(%ebp)
f01189f7:	ff 75 f0             	pushl  -0x10(%ebp)
f01189fa:	ff 75 f4             	pushl  -0xc(%ebp)
f01189fd:	68 c4 d6 12 f0       	push   $0xf012d6c4
f0118a02:	68 aa 08 00 00       	push   $0x8aa
f0118a07:	68 42 bb 12 f0       	push   $0xf012bb42
f0118a0c:	e8 a6 7a fe ff       	call   f01004b7 <_warn>
f0118a11:	83 c4 20             	add    $0x20,%esp
				return 0;
f0118a14:	b8 00 00 00 00       	mov    $0x0,%eax
f0118a19:	e9 fc 00 00 00       	jmp    f0118b1a <CCP+0x227>
			}
		}
		if (ref != -1)
f0118a1e:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f0118a22:	74 52                	je     f0118a76 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0118a24:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0118a28:	74 0e                	je     f0118a38 <CCP+0x145>
f0118a2a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0118a2d:	8b 40 08             	mov    0x8(%eax),%eax
f0118a30:	0f b7 c0             	movzwl %ax,%eax
f0118a33:	3b 45 18             	cmp    0x18(%ebp),%eax
f0118a36:	74 3e                	je     f0118a76 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0118a38:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0118a3c:	74 0b                	je     f0118a49 <CCP+0x156>
f0118a3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0118a41:	8b 40 08             	mov    0x8(%eax),%eax
f0118a44:	0f b7 c0             	movzwl %ax,%eax
f0118a47:	eb 05                	jmp    f0118a4e <CCP+0x15b>
f0118a49:	b8 00 00 00 00       	mov    $0x0,%eax
f0118a4e:	83 ec 0c             	sub    $0xc,%esp
f0118a51:	50                   	push   %eax
f0118a52:	ff 75 f0             	pushl  -0x10(%ebp)
f0118a55:	68 20 d7 12 f0       	push   $0xf012d720
f0118a5a:	68 b2 08 00 00       	push   $0x8b2
f0118a5f:	68 42 bb 12 f0       	push   $0xf012bb42
f0118a64:	e8 4e 7a fe ff       	call   f01004b7 <_warn>
f0118a69:	83 c4 20             	add    $0x20,%esp
				return 0;
f0118a6c:	b8 00 00 00 00       	mov    $0x0,%eax
f0118a71:	e9 a4 00 00 00       	jmp    f0118b1a <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0118a76:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118a79:	ff 75 20             	pushl  0x20(%ebp)
f0118a7c:	ff 75 1c             	pushl  0x1c(%ebp)
f0118a7f:	50                   	push   %eax
f0118a80:	ff 75 08             	pushl  0x8(%ebp)
f0118a83:	e8 b8 fa ff ff       	call   f0118540 <CPs>
f0118a88:	83 c4 10             	add    $0x10,%esp
f0118a8b:	85 c0                	test   %eax,%eax
f0118a8d:	7f 21                	jg     f0118ab0 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0118a8f:	83 ec 04             	sub    $0x4,%esp
f0118a92:	68 90 d7 12 f0       	push   $0xf012d790
f0118a97:	68 b8 08 00 00       	push   $0x8b8
f0118a9c:	68 42 bb 12 f0       	push   $0xf012bb42
f0118aa1:	e8 11 7a fe ff       	call   f01004b7 <_warn>
f0118aa6:	83 c4 10             	add    $0x10,%esp
			return 0;
f0118aa9:	b8 00 00 00 00       	mov    $0x0,%eax
f0118aae:	eb 6a                	jmp    f0118b1a <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0118ab0:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0118ab4:	74 3a                	je     f0118af0 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0118ab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0118ab9:	ff 75 28             	pushl  0x28(%ebp)
f0118abc:	ff 75 24             	pushl  0x24(%ebp)
f0118abf:	50                   	push   %eax
f0118ac0:	ff 75 08             	pushl  0x8(%ebp)
f0118ac3:	e8 78 fa ff ff       	call   f0118540 <CPs>
f0118ac8:	83 c4 10             	add    $0x10,%esp
f0118acb:	85 c0                	test   %eax,%eax
f0118acd:	7f 21                	jg     f0118af0 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0118acf:	83 ec 04             	sub    $0x4,%esp
f0118ad2:	68 d8 d7 12 f0       	push   $0xf012d7d8
f0118ad7:	68 bf 08 00 00       	push   $0x8bf
f0118adc:	68 42 bb 12 f0       	push   $0xf012bb42
f0118ae1:	e8 d1 79 fe ff       	call   f01004b7 <_warn>
f0118ae6:	83 c4 10             	add    $0x10,%esp
				return 0;
f0118ae9:	b8 00 00 00 00       	mov    $0x0,%eax
f0118aee:	eb 2a                	jmp    f0118b1a <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0118af0:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0118af4:	74 07                	je     f0118afd <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0118af6:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0118afd:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0118b04:	8b 55 10             	mov    0x10(%ebp),%edx
f0118b07:	8b 45 14             	mov    0x14(%ebp),%eax
f0118b0a:	01 d0                	add    %edx,%eax
f0118b0c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0118b0f:	0f 87 05 fe ff ff    	ja     f011891a <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0118b15:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0118b1a:	c9                   	leave  
f0118b1b:	c3                   	ret    

f0118b1c <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f0118b1c:	55                   	push   %ebp
f0118b1d:	89 e5                	mov    %esp,%ebp
f0118b1f:	57                   	push   %edi
f0118b20:	56                   	push   %esi
f0118b21:	53                   	push   %ebx
f0118b22:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f0118b28:	a0 d4 dd 17 f0       	mov    0xf017ddd4,%al
f0118b2d:	84 c0                	test   %al,%al
f0118b2f:	0f 84 38 0a 00 00    	je     f011956d <test_priority_normal_and_higher+0xa51>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0118b35:	c6 05 d4 dd 17 f0 00 	movb   $0x0,0xf017ddd4
		char command[100] = "load fos_add 20";
f0118b3c:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0118b42:	bb 94 da 12 f0       	mov    $0xf012da94,%ebx
f0118b47:	ba 04 00 00 00       	mov    $0x4,%edx
f0118b4c:	89 c7                	mov    %eax,%edi
f0118b4e:	89 de                	mov    %ebx,%esi
f0118b50:	89 d1                	mov    %edx,%ecx
f0118b52:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0118b54:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f0118b5a:	b9 15 00 00 00       	mov    $0x15,%ecx
f0118b5f:	b8 00 00 00 00       	mov    $0x0,%eax
f0118b64:	89 d7                	mov    %edx,%edi
f0118b66:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0118b68:	83 ec 0c             	sub    $0xc,%esp
f0118b6b:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0118b71:	50                   	push   %eax
f0118b72:	e8 65 93 fe ff       	call   f0101edc <execute_command>
f0118b77:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f0118b7a:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0118b80:	bb f8 da 12 f0       	mov    $0xf012daf8,%ebx
f0118b85:	ba 0d 00 00 00       	mov    $0xd,%edx
f0118b8a:	89 c7                	mov    %eax,%edi
f0118b8c:	89 de                	mov    %ebx,%esi
f0118b8e:	89 d1                	mov    %edx,%ecx
f0118b90:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0118b92:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0118b98:	b9 57 00 00 00       	mov    $0x57,%ecx
f0118b9d:	b0 00                	mov    $0x0,%al
f0118b9f:	89 d7                	mov    %edx,%edi
f0118ba1:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0118ba3:	83 ec 0c             	sub    $0xc,%esp
f0118ba6:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0118bac:	50                   	push   %eax
f0118bad:	e8 2a 93 fe ff       	call   f0101edc <execute_command>
f0118bb2:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0118bb5:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0118bbb:	bb 5c db 12 f0       	mov    $0xf012db5c,%ebx
f0118bc0:	ba 17 00 00 00       	mov    $0x17,%edx
f0118bc5:	89 c7                	mov    %eax,%edi
f0118bc7:	89 de                	mov    %ebx,%esi
f0118bc9:	89 d1                	mov    %edx,%ecx
f0118bcb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0118bcd:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0118bd3:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0118bd8:	b0 00                	mov    $0x0,%al
f0118bda:	89 d7                	mov    %edx,%edi
f0118bdc:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0118bde:	83 ec 0c             	sub    $0xc,%esp
f0118be1:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0118be7:	50                   	push   %eax
f0118be8:	e8 ef 92 fe ff       	call   f0101edc <execute_command>
f0118bed:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(16, &addEnv, 0);
f0118bf0:	83 ec 04             	sub    $0x4,%esp
f0118bf3:	6a 00                	push   $0x0
f0118bf5:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0118bf8:	50                   	push   %eax
f0118bf9:	6a 10                	push   $0x10
f0118bfb:	e8 c0 1b ff ff       	call   f010a7c0 <envid2env>
f0118c00:	83 c4 10             	add    $0x10,%esp
		envid2env(17, &factEnv, 0);
f0118c03:	83 ec 04             	sub    $0x4,%esp
f0118c06:	6a 00                	push   $0x0
f0118c08:	8d 45 a8             	lea    -0x58(%ebp),%eax
f0118c0b:	50                   	push   %eax
f0118c0c:	6a 11                	push   $0x11
f0118c0e:	e8 ad 1b ff ff       	call   f010a7c0 <envid2env>
f0118c13:	83 c4 10             	add    $0x10,%esp
		envid2env(18, &helloEnv, 0);
f0118c16:	83 ec 04             	sub    $0x4,%esp
f0118c19:	6a 00                	push   $0x0
f0118c1b:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0118c1e:	50                   	push   %eax
f0118c1f:	6a 12                	push   $0x12
f0118c21:	e8 9a 1b ff ff       	call   f010a7c0 <envid2env>
f0118c26:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0118c29:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118c2c:	85 c0                	test   %eax,%eax
f0118c2e:	74 0e                	je     f0118c3e <test_priority_normal_and_higher+0x122>
f0118c30:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118c33:	85 c0                	test   %eax,%eax
f0118c35:	74 07                	je     f0118c3e <test_priority_normal_and_higher+0x122>
f0118c37:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118c3a:	85 c0                	test   %eax,%eax
f0118c3c:	75 14                	jne    f0118c52 <test_priority_normal_and_higher+0x136>
			panic("Loading programs failed\n");
f0118c3e:	83 ec 04             	sub    $0x4,%esp
f0118c41:	68 18 d8 12 f0       	push   $0xf012d818
f0118c46:	6a 29                	push   $0x29
f0118c48:	68 31 d8 12 f0       	push   $0xf012d831
f0118c4d:	e8 c8 76 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0118c52:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118c55:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118c5b:	83 f8 14             	cmp    $0x14,%eax
f0118c5e:	75 1c                	jne    f0118c7c <test_priority_normal_and_higher+0x160>
f0118c60:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118c63:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118c69:	83 f8 0f             	cmp    $0xf,%eax
f0118c6c:	75 0e                	jne    f0118c7c <test_priority_normal_and_higher+0x160>
f0118c6e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118c71:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118c77:	83 f8 0a             	cmp    $0xa,%eax
f0118c7a:	74 32                	je     f0118cae <test_priority_normal_and_higher+0x192>
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );
f0118c7c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118c7f:	8b 88 84 00 00 00    	mov    0x84(%eax),%ecx
f0118c85:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118c88:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f0118c8e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118c91:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118c97:	83 ec 08             	sub    $0x8,%esp
f0118c9a:	51                   	push   %ecx
f0118c9b:	52                   	push   %edx
f0118c9c:	50                   	push   %eax
f0118c9d:	68 4c d8 12 f0       	push   $0xf012d84c
f0118ca2:	6a 2c                	push   $0x2c
f0118ca4:	68 31 d8 12 f0       	push   $0xf012d831
f0118ca9:	e8 6c 76 fe ff       	call   f010031a <_panic>

		for(int i = 0; i < 20; i++)
f0118cae:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0118cb5:	eb 47                	jmp    f0118cfe <test_priority_normal_and_higher+0x1e2>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0118cb7:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0118cba:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0118cbd:	89 d0                	mov    %edx,%eax
f0118cbf:	01 c0                	add    %eax,%eax
f0118cc1:	01 d0                	add    %edx,%eax
f0118cc3:	c1 e0 03             	shl    $0x3,%eax
f0118cc6:	01 c8                	add    %ecx,%eax
f0118cc8:	05 88 00 00 00       	add    $0x88,%eax
f0118ccd:	8b 10                	mov    (%eax),%edx
f0118ccf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118cd2:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0118cd9:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f0118cdc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0118cdf:	89 d0                	mov    %edx,%eax
f0118ce1:	01 c0                	add    %eax,%eax
f0118ce3:	01 d0                	add    %edx,%eax
f0118ce5:	c1 e0 03             	shl    $0x3,%eax
f0118ce8:	01 c8                	add    %ecx,%eax
f0118cea:	05 90 00 00 00       	add    $0x90,%eax
f0118cef:	8b 10                	mov    (%eax),%edx
f0118cf1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0118cf4:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );

		for(int i = 0; i < 20; i++)
f0118cfb:	ff 45 e4             	incl   -0x1c(%ebp)
f0118cfe:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0118d02:	7e b3                	jle    f0118cb7 <test_priority_normal_and_higher+0x19b>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0118d04:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0118d0b:	eb 47                	jmp    f0118d54 <test_priority_normal_and_higher+0x238>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0118d0d:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0118d10:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0118d13:	89 d0                	mov    %edx,%eax
f0118d15:	01 c0                	add    %eax,%eax
f0118d17:	01 d0                	add    %edx,%eax
f0118d19:	c1 e0 03             	shl    $0x3,%eax
f0118d1c:	01 c8                	add    %ecx,%eax
f0118d1e:	05 88 00 00 00       	add    $0x88,%eax
f0118d23:	8b 10                	mov    (%eax),%edx
f0118d25:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0118d28:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0118d2f:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0118d32:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0118d35:	89 d0                	mov    %edx,%eax
f0118d37:	01 c0                	add    %eax,%eax
f0118d39:	01 d0                	add    %edx,%eax
f0118d3b:	c1 e0 03             	shl    $0x3,%eax
f0118d3e:	01 c8                	add    %ecx,%eax
f0118d40:	05 90 00 00 00       	add    $0x90,%eax
f0118d45:	8b 10                	mov    (%eax),%edx
f0118d47:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0118d4a:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0118d51:	ff 45 e0             	incl   -0x20(%ebp)
f0118d54:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0118d58:	7e b3                	jle    f0118d0d <test_priority_normal_and_higher+0x1f1>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0118d5a:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0118d61:	eb 47                	jmp    f0118daa <test_priority_normal_and_higher+0x28e>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0118d63:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0118d66:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0118d69:	89 d0                	mov    %edx,%eax
f0118d6b:	01 c0                	add    %eax,%eax
f0118d6d:	01 d0                	add    %edx,%eax
f0118d6f:	c1 e0 03             	shl    $0x3,%eax
f0118d72:	01 c8                	add    %ecx,%eax
f0118d74:	05 88 00 00 00       	add    $0x88,%eax
f0118d79:	8b 10                	mov    (%eax),%edx
f0118d7b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118d7e:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0118d85:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0118d88:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0118d8b:	89 d0                	mov    %edx,%eax
f0118d8d:	01 c0                	add    %eax,%eax
f0118d8f:	01 d0                	add    %edx,%eax
f0118d91:	c1 e0 03             	shl    $0x3,%eax
f0118d94:	01 c8                	add    %ecx,%eax
f0118d96:	05 90 00 00 00       	add    $0x90,%eax
f0118d9b:	8b 10                	mov    (%eax),%edx
f0118d9d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118da0:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0118da7:	ff 45 dc             	incl   -0x24(%ebp)
f0118daa:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f0118dae:	7e b3                	jle    f0118d63 <test_priority_normal_and_higher+0x247>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0118db0:	e8 54 4c ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118db5:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0118db8:	e8 83 ba fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118dbd:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0118dc0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118dc3:	83 ec 08             	sub    $0x8,%esp
f0118dc6:	6a 03                	push   $0x3
f0118dc8:	50                   	push   %eax
f0118dc9:	e8 e1 30 ff ff       	call   f010beaf <set_program_priority>
f0118dce:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0118dd1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118dd4:	83 ec 08             	sub    $0x8,%esp
f0118dd7:	6a 03                	push   $0x3
f0118dd9:	50                   	push   %eax
f0118dda:	e8 d0 30 ff ff       	call   f010beaf <set_program_priority>
f0118ddf:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0118de2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118de5:	83 ec 08             	sub    $0x8,%esp
f0118de8:	6a 03                	push   $0x3
f0118dea:	50                   	push   %eax
f0118deb:	e8 bf 30 ff ff       	call   f010beaf <set_program_priority>
f0118df0:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0118df3:	e8 48 ba fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118df8:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0118dfb:	74 14                	je     f0118e11 <test_priority_normal_and_higher+0x2f5>
f0118dfd:	83 ec 04             	sub    $0x4,%esp
f0118e00:	68 b4 d8 12 f0       	push   $0xf012d8b4
f0118e05:	6a 48                	push   $0x48
f0118e07:	68 31 d8 12 f0       	push   $0xf012d831
f0118e0c:	e8 09 75 fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0118e11:	e8 f3 4b ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118e16:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0118e19:	74 14                	je     f0118e2f <test_priority_normal_and_higher+0x313>
f0118e1b:	83 ec 04             	sub    $0x4,%esp
f0118e1e:	68 b4 d8 12 f0       	push   $0xf012d8b4
f0118e23:	6a 49                	push   $0x49
f0118e25:	68 31 d8 12 f0       	push   $0xf012d831
f0118e2a:	e8 eb 74 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0118e2f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118e32:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118e38:	83 f8 14             	cmp    $0x14,%eax
f0118e3b:	75 1c                	jne    f0118e59 <test_priority_normal_and_higher+0x33d>
f0118e3d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118e40:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118e46:	83 f8 0f             	cmp    $0xf,%eax
f0118e49:	75 0e                	jne    f0118e59 <test_priority_normal_and_higher+0x33d>
f0118e4b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118e4e:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118e54:	83 f8 0a             	cmp    $0xa,%eax
f0118e57:	74 14                	je     f0118e6d <test_priority_normal_and_higher+0x351>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0118e59:	83 ec 04             	sub    $0x4,%esp
f0118e5c:	68 e0 d8 12 f0       	push   $0xf012d8e0
f0118e61:	6a 4c                	push   $0x4c
f0118e63:	68 31 d8 12 f0       	push   $0xf012d831
f0118e68:	e8 ad 74 fe ff       	call   f010031a <_panic>

		freeFrames = sys_calculate_free_frames();
f0118e6d:	e8 97 4b ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118e72:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118e75:	e8 c6 b9 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118e7a:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f0118e7d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118e80:	83 ec 08             	sub    $0x8,%esp
f0118e83:	6a 04                	push   $0x4
f0118e85:	50                   	push   %eax
f0118e86:	e8 24 30 ff ff       	call   f010beaf <set_program_priority>
f0118e8b:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0118e8e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118e91:	83 ec 08             	sub    $0x8,%esp
f0118e94:	6a 04                	push   $0x4
f0118e96:	50                   	push   %eax
f0118e97:	e8 13 30 ff ff       	call   f010beaf <set_program_priority>
f0118e9c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0118e9f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118ea2:	83 ec 08             	sub    $0x8,%esp
f0118ea5:	6a 04                	push   $0x4
f0118ea7:	50                   	push   %eax
f0118ea8:	e8 02 30 ff ff       	call   f010beaf <set_program_priority>
f0118ead:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0118eb0:	e8 8b b9 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118eb5:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0118eb8:	74 14                	je     f0118ece <test_priority_normal_and_higher+0x3b2>
f0118eba:	83 ec 04             	sub    $0x4,%esp
f0118ebd:	68 b4 d8 12 f0       	push   $0xf012d8b4
f0118ec2:	6a 56                	push   $0x56
f0118ec4:	68 31 d8 12 f0       	push   $0xf012d831
f0118ec9:	e8 4c 74 fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0118ece:	e8 36 4b ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118ed3:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0118ed6:	74 14                	je     f0118eec <test_priority_normal_and_higher+0x3d0>
f0118ed8:	83 ec 04             	sub    $0x4,%esp
f0118edb:	68 34 d9 12 f0       	push   $0xf012d934
f0118ee0:	6a 57                	push   $0x57
f0118ee2:	68 31 d8 12 f0       	push   $0xf012d831
f0118ee7:	e8 2e 74 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0118eec:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118eef:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118ef5:	83 f8 14             	cmp    $0x14,%eax
f0118ef8:	75 1c                	jne    f0118f16 <test_priority_normal_and_higher+0x3fa>
f0118efa:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118efd:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118f03:	83 f8 0f             	cmp    $0xf,%eax
f0118f06:	75 0e                	jne    f0118f16 <test_priority_normal_and_higher+0x3fa>
f0118f08:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118f0b:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118f11:	83 f8 14             	cmp    $0x14,%eax
f0118f14:	74 14                	je     f0118f2a <test_priority_normal_and_higher+0x40e>
			panic("The programs' working set size should be doubled only if it is full\n");
f0118f16:	83 ec 04             	sub    $0x4,%esp
f0118f19:	68 64 d9 12 f0       	push   $0xf012d964
f0118f1e:	6a 5a                	push   $0x5a
f0118f20:	68 31 d8 12 f0       	push   $0xf012d831
f0118f25:	e8 f0 73 fe ff       	call   f010031a <_panic>

		freeFrames = sys_calculate_free_frames();
f0118f2a:	e8 da 4a ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118f2f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118f32:	e8 09 b9 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118f37:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0118f3a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118f3d:	83 ec 08             	sub    $0x8,%esp
f0118f40:	6a 04                	push   $0x4
f0118f42:	50                   	push   %eax
f0118f43:	e8 67 2f ff ff       	call   f010beaf <set_program_priority>
f0118f48:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0118f4b:	e8 f0 b8 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118f50:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0118f53:	74 14                	je     f0118f69 <test_priority_normal_and_higher+0x44d>
f0118f55:	83 ec 04             	sub    $0x4,%esp
f0118f58:	68 b4 d8 12 f0       	push   $0xf012d8b4
f0118f5d:	6a 62                	push   $0x62
f0118f5f:	68 31 d8 12 f0       	push   $0xf012d831
f0118f64:	e8 b1 73 fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0118f69:	e8 9b 4a ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118f6e:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0118f71:	74 14                	je     f0118f87 <test_priority_normal_and_higher+0x46b>
f0118f73:	83 ec 04             	sub    $0x4,%esp
f0118f76:	68 b4 d8 12 f0       	push   $0xf012d8b4
f0118f7b:	6a 63                	push   $0x63
f0118f7d:	68 31 d8 12 f0       	push   $0xf012d831
f0118f82:	e8 93 73 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0118f87:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0118f8a:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118f90:	83 f8 14             	cmp    $0x14,%eax
f0118f93:	75 1c                	jne    f0118fb1 <test_priority_normal_and_higher+0x495>
f0118f95:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118f98:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118f9e:	83 f8 0f             	cmp    $0xf,%eax
f0118fa1:	75 0e                	jne    f0118fb1 <test_priority_normal_and_higher+0x495>
f0118fa3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118fa6:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118fac:	83 f8 14             	cmp    $0x14,%eax
f0118faf:	74 14                	je     f0118fc5 <test_priority_normal_and_higher+0x4a9>
			panic("The programs' working set size should be doubled only once\n");
f0118fb1:	83 ec 04             	sub    $0x4,%esp
f0118fb4:	68 ac d9 12 f0       	push   $0xf012d9ac
f0118fb9:	6a 66                	push   $0x66
f0118fbb:	68 31 d8 12 f0       	push   $0xf012d831
f0118fc0:	e8 55 73 fe ff       	call   f010031a <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0118fc5:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f0118fcc:	eb 1c                	jmp    f0118fea <test_priority_normal_and_higher+0x4ce>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0118fce:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0118fd1:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0118fd4:	89 d0                	mov    %edx,%eax
f0118fd6:	01 c0                	add    %eax,%eax
f0118fd8:	01 d0                	add    %edx,%eax
f0118fda:	c1 e0 03             	shl    $0x3,%eax
f0118fdd:	01 c8                	add    %ecx,%eax
f0118fdf:	05 8c 00 00 00       	add    $0x8c,%eax
f0118fe4:	c6 00 00             	movb   $0x0,(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0118fe7:	ff 45 d8             	incl   -0x28(%ebp)
f0118fea:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f0118fee:	7e de                	jle    f0118fce <test_priority_normal_and_higher+0x4b2>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0118ff0:	e8 14 4a ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118ff5:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118ff8:	e8 43 b8 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118ffd:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0119000:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119003:	83 ec 08             	sub    $0x8,%esp
f0119006:	6a 04                	push   $0x4
f0119008:	50                   	push   %eax
f0119009:	e8 a1 2e ff ff       	call   f010beaf <set_program_priority>
f011900e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0119011:	e8 2a b8 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119016:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0119019:	74 14                	je     f011902f <test_priority_normal_and_higher+0x513>
f011901b:	83 ec 04             	sub    $0x4,%esp
f011901e:	68 b4 d8 12 f0       	push   $0xf012d8b4
f0119023:	6a 73                	push   $0x73
f0119025:	68 31 d8 12 f0       	push   $0xf012d831
f011902a:	e8 eb 72 fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011902f:	e8 d5 49 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119034:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0119037:	74 14                	je     f011904d <test_priority_normal_and_higher+0x531>
f0119039:	83 ec 04             	sub    $0x4,%esp
f011903c:	68 b4 d8 12 f0       	push   $0xf012d8b4
f0119041:	6a 74                	push   $0x74
f0119043:	68 31 d8 12 f0       	push   $0xf012d831
f0119048:	e8 cd 72 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011904d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119050:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119056:	83 f8 14             	cmp    $0x14,%eax
f0119059:	75 1c                	jne    f0119077 <test_priority_normal_and_higher+0x55b>
f011905b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011905e:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119064:	83 f8 0f             	cmp    $0xf,%eax
f0119067:	75 0e                	jne    f0119077 <test_priority_normal_and_higher+0x55b>
f0119069:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011906c:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119072:	83 f8 14             	cmp    $0x14,%eax
f0119075:	74 14                	je     f011908b <test_priority_normal_and_higher+0x56f>
			panic("The programs' working set size should be doubled only once\n");
f0119077:	83 ec 04             	sub    $0x4,%esp
f011907a:	68 ac d9 12 f0       	push   $0xf012d9ac
f011907f:	6a 77                	push   $0x77
f0119081:	68 31 d8 12 f0       	push   $0xf012d831
f0119086:	e8 8f 72 fe ff       	call   f010031a <_panic>

		for(int i = 10; i < 15; i++)
f011908b:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0119092:	eb 1c                	jmp    f01190b0 <test_priority_normal_and_higher+0x594>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0119094:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0119097:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011909a:	89 d0                	mov    %edx,%eax
f011909c:	01 c0                	add    %eax,%eax
f011909e:	01 d0                	add    %edx,%eax
f01190a0:	c1 e0 03             	shl    $0x3,%eax
f01190a3:	01 c8                	add    %ecx,%eax
f01190a5:	05 8c 00 00 00       	add    $0x8c,%eax
f01190aa:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f01190ad:	ff 45 d4             	incl   -0x2c(%ebp)
f01190b0:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f01190b4:	7e de                	jle    f0119094 <test_priority_normal_and_higher+0x578>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f01190b6:	e8 4e 49 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01190bb:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01190be:	e8 7d b7 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01190c3:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01190c6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01190c9:	83 ec 08             	sub    $0x8,%esp
f01190cc:	6a 05                	push   $0x5
f01190ce:	50                   	push   %eax
f01190cf:	e8 db 2d ff ff       	call   f010beaf <set_program_priority>
f01190d4:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f01190d7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01190da:	83 ec 08             	sub    $0x8,%esp
f01190dd:	6a 05                	push   $0x5
f01190df:	50                   	push   %eax
f01190e0:	e8 ca 2d ff ff       	call   f010beaf <set_program_priority>
f01190e5:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01190e8:	e8 53 b7 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01190ed:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01190f0:	74 17                	je     f0119109 <test_priority_normal_and_higher+0x5ed>
f01190f2:	83 ec 04             	sub    $0x4,%esp
f01190f5:	68 b4 d8 12 f0       	push   $0xf012d8b4
f01190fa:	68 82 00 00 00       	push   $0x82
f01190ff:	68 31 d8 12 f0       	push   $0xf012d831
f0119104:	e8 11 72 fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0119109:	e8 fb 48 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011910e:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0119111:	74 17                	je     f011912a <test_priority_normal_and_higher+0x60e>
f0119113:	83 ec 04             	sub    $0x4,%esp
f0119116:	68 b4 d8 12 f0       	push   $0xf012d8b4
f011911b:	68 83 00 00 00       	push   $0x83
f0119120:	68 31 d8 12 f0       	push   $0xf012d831
f0119125:	e8 f0 71 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011912a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011912d:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119133:	83 f8 14             	cmp    $0x14,%eax
f0119136:	75 1c                	jne    f0119154 <test_priority_normal_and_higher+0x638>
f0119138:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011913b:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119141:	83 f8 1e             	cmp    $0x1e,%eax
f0119144:	75 0e                	jne    f0119154 <test_priority_normal_and_higher+0x638>
f0119146:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119149:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f011914f:	83 f8 28             	cmp    $0x28,%eax
f0119152:	74 17                	je     f011916b <test_priority_normal_and_higher+0x64f>
			panic("The programs' working set size should be doubled if full\n");
f0119154:	83 ec 04             	sub    $0x4,%esp
f0119157:	68 e8 d9 12 f0       	push   $0xf012d9e8
f011915c:	68 86 00 00 00       	push   $0x86
f0119161:	68 31 d8 12 f0       	push   $0xf012d831
f0119166:	e8 af 71 fe ff       	call   f010031a <_panic>

		for(int i = 20; i < 40; i++)
f011916b:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f0119172:	eb 1c                	jmp    f0119190 <test_priority_normal_and_higher+0x674>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0119174:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0119177:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011917a:	89 d0                	mov    %edx,%eax
f011917c:	01 c0                	add    %eax,%eax
f011917e:	01 d0                	add    %edx,%eax
f0119180:	c1 e0 03             	shl    $0x3,%eax
f0119183:	01 c8                	add    %ecx,%eax
f0119185:	05 8c 00 00 00       	add    $0x8c,%eax
f011918a:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f011918d:	ff 45 d0             	incl   -0x30(%ebp)
f0119190:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f0119194:	7e de                	jle    f0119174 <test_priority_normal_and_higher+0x658>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0119196:	e8 6e 48 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011919b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011919e:	e8 9d b6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01191a3:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f01191a6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01191a9:	83 ec 08             	sub    $0x8,%esp
f01191ac:	6a 05                	push   $0x5
f01191ae:	50                   	push   %eax
f01191af:	e8 fb 2c ff ff       	call   f010beaf <set_program_priority>
f01191b4:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f01191b7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01191ba:	83 ec 08             	sub    $0x8,%esp
f01191bd:	6a 04                	push   $0x4
f01191bf:	50                   	push   %eax
f01191c0:	e8 ea 2c ff ff       	call   f010beaf <set_program_priority>
f01191c5:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01191c8:	e8 73 b6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01191cd:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01191d0:	74 17                	je     f01191e9 <test_priority_normal_and_higher+0x6cd>
f01191d2:	83 ec 04             	sub    $0x4,%esp
f01191d5:	68 b4 d8 12 f0       	push   $0xf012d8b4
f01191da:	68 91 00 00 00       	push   $0x91
f01191df:	68 31 d8 12 f0       	push   $0xf012d831
f01191e4:	e8 31 71 fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01191e9:	e8 1b 48 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01191ee:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01191f1:	74 17                	je     f011920a <test_priority_normal_and_higher+0x6ee>
f01191f3:	83 ec 04             	sub    $0x4,%esp
f01191f6:	68 b4 d8 12 f0       	push   $0xf012d8b4
f01191fb:	68 92 00 00 00       	push   $0x92
f0119200:	68 31 d8 12 f0       	push   $0xf012d831
f0119205:	e8 10 71 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011920a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011920d:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119213:	83 f8 14             	cmp    $0x14,%eax
f0119216:	75 1c                	jne    f0119234 <test_priority_normal_and_higher+0x718>
f0119218:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011921b:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119221:	83 f8 1e             	cmp    $0x1e,%eax
f0119224:	75 0e                	jne    f0119234 <test_priority_normal_and_higher+0x718>
f0119226:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119229:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f011922f:	83 f8 28             	cmp    $0x28,%eax
f0119232:	74 17                	je     f011924b <test_priority_normal_and_higher+0x72f>
			panic("The programs' working set size should be doubled if full\n");
f0119234:	83 ec 04             	sub    $0x4,%esp
f0119237:	68 e8 d9 12 f0       	push   $0xf012d9e8
f011923c:	68 95 00 00 00       	push   $0x95
f0119241:	68 31 d8 12 f0       	push   $0xf012d831
f0119246:	e8 cf 70 fe ff       	call   f010031a <_panic>

		for(int i = 15; i < 30; i++)
f011924b:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f0119252:	eb 1c                	jmp    f0119270 <test_priority_normal_and_higher+0x754>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0119254:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0119257:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011925a:	89 d0                	mov    %edx,%eax
f011925c:	01 c0                	add    %eax,%eax
f011925e:	01 d0                	add    %edx,%eax
f0119260:	c1 e0 03             	shl    $0x3,%eax
f0119263:	01 c8                	add    %ecx,%eax
f0119265:	05 8c 00 00 00       	add    $0x8c,%eax
f011926a:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f011926d:	ff 45 cc             	incl   -0x34(%ebp)
f0119270:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f0119274:	7e de                	jle    f0119254 <test_priority_normal_and_higher+0x738>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0119276:	e8 8e 47 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011927b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011927e:	e8 bd b5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119283:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0119286:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119289:	83 ec 08             	sub    $0x8,%esp
f011928c:	6a 05                	push   $0x5
f011928e:	50                   	push   %eax
f011928f:	e8 1b 2c ff ff       	call   f010beaf <set_program_priority>
f0119294:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0119297:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011929a:	83 ec 08             	sub    $0x8,%esp
f011929d:	6a 04                	push   $0x4
f011929f:	50                   	push   %eax
f01192a0:	e8 0a 2c ff ff       	call   f010beaf <set_program_priority>
f01192a5:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01192a8:	e8 93 b5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01192ad:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01192b0:	74 17                	je     f01192c9 <test_priority_normal_and_higher+0x7ad>
f01192b2:	83 ec 04             	sub    $0x4,%esp
f01192b5:	68 b4 d8 12 f0       	push   $0xf012d8b4
f01192ba:	68 a0 00 00 00       	push   $0xa0
f01192bf:	68 31 d8 12 f0       	push   $0xf012d831
f01192c4:	e8 51 70 fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01192c9:	e8 3b 47 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01192ce:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01192d1:	74 17                	je     f01192ea <test_priority_normal_and_higher+0x7ce>
f01192d3:	83 ec 04             	sub    $0x4,%esp
f01192d6:	68 b4 d8 12 f0       	push   $0xf012d8b4
f01192db:	68 a1 00 00 00       	push   $0xa1
f01192e0:	68 31 d8 12 f0       	push   $0xf012d831
f01192e5:	e8 30 70 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f01192ea:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01192ed:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01192f3:	83 f8 14             	cmp    $0x14,%eax
f01192f6:	75 1c                	jne    f0119314 <test_priority_normal_and_higher+0x7f8>
f01192f8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01192fb:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119301:	83 f8 3c             	cmp    $0x3c,%eax
f0119304:	75 0e                	jne    f0119314 <test_priority_normal_and_higher+0x7f8>
f0119306:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119309:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f011930f:	83 f8 28             	cmp    $0x28,%eax
f0119312:	74 17                	je     f011932b <test_priority_normal_and_higher+0x80f>
			panic("The programs' working set size should be doubled if full\n");
f0119314:	83 ec 04             	sub    $0x4,%esp
f0119317:	68 e8 d9 12 f0       	push   $0xf012d9e8
f011931c:	68 a4 00 00 00       	push   $0xa4
f0119321:	68 31 d8 12 f0       	push   $0xf012d831
f0119326:	e8 ef 6f fe ff       	call   f010031a <_panic>

		for(int i = 15; i < 60; i++)
f011932b:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0119332:	eb 1c                	jmp    f0119350 <test_priority_normal_and_higher+0x834>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0119334:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0119337:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011933a:	89 d0                	mov    %edx,%eax
f011933c:	01 c0                	add    %eax,%eax
f011933e:	01 d0                	add    %edx,%eax
f0119340:	c1 e0 03             	shl    $0x3,%eax
f0119343:	01 c8                	add    %ecx,%eax
f0119345:	05 8c 00 00 00       	add    $0x8c,%eax
f011934a:	c6 00 01             	movb   $0x1,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f011934d:	ff 45 c8             	incl   -0x38(%ebp)
f0119350:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f0119354:	7e de                	jle    f0119334 <test_priority_normal_and_higher+0x818>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0119356:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f011935d:	eb 1c                	jmp    f011937b <test_priority_normal_and_higher+0x85f>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f011935f:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0119362:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0119365:	89 d0                	mov    %edx,%eax
f0119367:	01 c0                	add    %eax,%eax
f0119369:	01 d0                	add    %edx,%eax
f011936b:	c1 e0 03             	shl    $0x3,%eax
f011936e:	01 c8                	add    %ecx,%eax
f0119370:	05 8c 00 00 00       	add    $0x8c,%eax
f0119375:	c6 00 01             	movb   $0x1,(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0119378:	ff 45 c4             	incl   -0x3c(%ebp)
f011937b:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f011937f:	7e de                	jle    f011935f <test_priority_normal_and_higher+0x843>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0119381:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0119388:	eb 7d                	jmp    f0119407 <test_priority_normal_and_higher+0x8eb>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011938a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011938d:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0119394:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0119397:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011939a:	89 d0                	mov    %edx,%eax
f011939c:	01 c0                	add    %eax,%eax
f011939e:	01 d0                	add    %edx,%eax
f01193a0:	c1 e0 03             	shl    $0x3,%eax
f01193a3:	01 d8                	add    %ebx,%eax
f01193a5:	05 88 00 00 00       	add    $0x88,%eax
f01193aa:	8b 00                	mov    (%eax),%eax
f01193ac:	39 c1                	cmp    %eax,%ecx
f01193ae:	74 17                	je     f01193c7 <test_priority_normal_and_higher+0x8ab>
				panic("Working set should be moved properly to the new one");
f01193b0:	83 ec 04             	sub    $0x4,%esp
f01193b3:	68 24 da 12 f0       	push   $0xf012da24
f01193b8:	68 b2 00 00 00       	push   $0xb2
f01193bd:	68 31 d8 12 f0       	push   $0xf012d831
f01193c2:	e8 53 6f fe ff       	call   f010031a <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f01193c7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01193ca:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f01193d1:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f01193d4:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01193d7:	89 d0                	mov    %edx,%eax
f01193d9:	01 c0                	add    %eax,%eax
f01193db:	01 d0                	add    %edx,%eax
f01193dd:	c1 e0 03             	shl    $0x3,%eax
f01193e0:	01 d8                	add    %ebx,%eax
f01193e2:	05 90 00 00 00       	add    $0x90,%eax
f01193e7:	8b 00                	mov    (%eax),%eax
f01193e9:	39 c1                	cmp    %eax,%ecx
f01193eb:	74 17                	je     f0119404 <test_priority_normal_and_higher+0x8e8>
				panic("Working set should be moved properly to the new one");
f01193ed:	83 ec 04             	sub    $0x4,%esp
f01193f0:	68 24 da 12 f0       	push   $0xf012da24
f01193f5:	68 b5 00 00 00       	push   $0xb5
f01193fa:	68 31 d8 12 f0       	push   $0xf012d831
f01193ff:	e8 16 6f fe ff       	call   f010031a <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0119404:	ff 45 c0             	incl   -0x40(%ebp)
f0119407:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f011940b:	0f 8e 79 ff ff ff    	jle    f011938a <test_priority_normal_and_higher+0x86e>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0119411:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0119418:	eb 7d                	jmp    f0119497 <test_priority_normal_and_higher+0x97b>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f011941a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011941d:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0119424:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0119427:	8b 55 bc             	mov    -0x44(%ebp),%edx
f011942a:	89 d0                	mov    %edx,%eax
f011942c:	01 c0                	add    %eax,%eax
f011942e:	01 d0                	add    %edx,%eax
f0119430:	c1 e0 03             	shl    $0x3,%eax
f0119433:	01 d8                	add    %ebx,%eax
f0119435:	05 88 00 00 00       	add    $0x88,%eax
f011943a:	8b 00                	mov    (%eax),%eax
f011943c:	39 c1                	cmp    %eax,%ecx
f011943e:	74 17                	je     f0119457 <test_priority_normal_and_higher+0x93b>
				panic("Working set should be moved properly to the new one");
f0119440:	83 ec 04             	sub    $0x4,%esp
f0119443:	68 24 da 12 f0       	push   $0xf012da24
f0119448:	68 bb 00 00 00       	push   $0xbb
f011944d:	68 31 d8 12 f0       	push   $0xf012d831
f0119452:	e8 c3 6e fe ff       	call   f010031a <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0119457:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011945a:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f0119461:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0119464:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0119467:	89 d0                	mov    %edx,%eax
f0119469:	01 c0                	add    %eax,%eax
f011946b:	01 d0                	add    %edx,%eax
f011946d:	c1 e0 03             	shl    $0x3,%eax
f0119470:	01 d8                	add    %ebx,%eax
f0119472:	05 90 00 00 00       	add    $0x90,%eax
f0119477:	8b 00                	mov    (%eax),%eax
f0119479:	39 c1                	cmp    %eax,%ecx
f011947b:	74 17                	je     f0119494 <test_priority_normal_and_higher+0x978>
				panic("Working set should be moved properly to the new one");
f011947d:	83 ec 04             	sub    $0x4,%esp
f0119480:	68 24 da 12 f0       	push   $0xf012da24
f0119485:	68 be 00 00 00       	push   $0xbe
f011948a:	68 31 d8 12 f0       	push   $0xf012d831
f011948f:	e8 86 6e fe ff       	call   f010031a <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0119494:	ff 45 bc             	incl   -0x44(%ebp)
f0119497:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f011949b:	0f 8e 79 ff ff ff    	jle    f011941a <test_priority_normal_and_higher+0x8fe>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01194a1:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f01194a8:	eb 7d                	jmp    f0119527 <test_priority_normal_and_higher+0xa0b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f01194aa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01194ad:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f01194b4:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f01194b7:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01194ba:	89 d0                	mov    %edx,%eax
f01194bc:	01 c0                	add    %eax,%eax
f01194be:	01 d0                	add    %edx,%eax
f01194c0:	c1 e0 03             	shl    $0x3,%eax
f01194c3:	01 d8                	add    %ebx,%eax
f01194c5:	05 88 00 00 00       	add    $0x88,%eax
f01194ca:	8b 00                	mov    (%eax),%eax
f01194cc:	39 c1                	cmp    %eax,%ecx
f01194ce:	74 17                	je     f01194e7 <test_priority_normal_and_higher+0x9cb>
				panic("Working set should be moved properly to the new one");
f01194d0:	83 ec 04             	sub    $0x4,%esp
f01194d3:	68 24 da 12 f0       	push   $0xf012da24
f01194d8:	68 c4 00 00 00       	push   $0xc4
f01194dd:	68 31 d8 12 f0       	push   $0xf012d831
f01194e2:	e8 33 6e fe ff       	call   f010031a <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01194e7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01194ea:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f01194f1:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f01194f4:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01194f7:	89 d0                	mov    %edx,%eax
f01194f9:	01 c0                	add    %eax,%eax
f01194fb:	01 d0                	add    %edx,%eax
f01194fd:	c1 e0 03             	shl    $0x3,%eax
f0119500:	01 d8                	add    %ebx,%eax
f0119502:	05 90 00 00 00       	add    $0x90,%eax
f0119507:	8b 00                	mov    (%eax),%eax
f0119509:	39 c1                	cmp    %eax,%ecx
f011950b:	74 17                	je     f0119524 <test_priority_normal_and_higher+0xa08>
				panic("Working set should be moved properly to the new one");
f011950d:	83 ec 04             	sub    $0x4,%esp
f0119510:	68 24 da 12 f0       	push   $0xf012da24
f0119515:	68 c7 00 00 00       	push   $0xc7
f011951a:	68 31 d8 12 f0       	push   $0xf012d831
f011951f:	e8 f6 6d fe ff       	call   f010031a <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0119524:	ff 45 b8             	incl   -0x48(%ebp)
f0119527:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f011952b:	0f 8e 79 ff ff ff    	jle    f01194aa <test_priority_normal_and_higher+0x98e>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0119531:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0119538:	75 6e 61 
f011953b:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0119542:	6c 00 00 
f0119545:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f011954b:	b9 17 00 00 00       	mov    $0x17,%ecx
f0119550:	b8 00 00 00 00       	mov    $0x0,%eax
f0119555:	89 d7                	mov    %edx,%edi
f0119557:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0119559:	83 ec 0c             	sub    $0xc,%esp
f011955c:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0119562:	50                   	push   %eax
f0119563:	e8 74 89 fe ff       	call   f0101edc <execute_command>
f0119568:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
#endif
}
f011956b:	eb 10                	jmp    f011957d <test_priority_normal_and_higher+0xa61>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f011956d:	83 ec 0c             	sub    $0xc,%esp
f0119570:	68 58 da 12 f0       	push   $0xf012da58
f0119575:	e8 f2 79 fe ff       	call   f0100f6c <cprintf>
f011957a:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f011957d:	90                   	nop
f011957e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0119581:	5b                   	pop    %ebx
f0119582:	5e                   	pop    %esi
f0119583:	5f                   	pop    %edi
f0119584:	5d                   	pop    %ebp
f0119585:	c3                   	ret    

f0119586 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f0119586:	55                   	push   %ebp
f0119587:	89 e5                	mov    %esp,%ebp
f0119589:	57                   	push   %edi
f011958a:	56                   	push   %esi
f011958b:	53                   	push   %ebx
f011958c:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f0119592:	a0 d4 dd 17 f0       	mov    0xf017ddd4,%al
f0119597:	84 c0                	test   %al,%al
f0119599:	0f 84 1b 0a 00 00    	je     f0119fba <test_priority_normal_and_lower+0xa34>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f011959f:	c6 05 d4 dd 17 f0 00 	movb   $0x0,0xf017ddd4
		char command[100] = "load fos_add 20";
f01195a6:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01195ac:	bb 94 da 12 f0       	mov    $0xf012da94,%ebx
f01195b1:	ba 04 00 00 00       	mov    $0x4,%edx
f01195b6:	89 c7                	mov    %eax,%edi
f01195b8:	89 de                	mov    %ebx,%esi
f01195ba:	89 d1                	mov    %edx,%ecx
f01195bc:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01195be:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f01195c4:	b9 15 00 00 00       	mov    $0x15,%ecx
f01195c9:	b8 00 00 00 00       	mov    $0x0,%eax
f01195ce:	89 d7                	mov    %edx,%edi
f01195d0:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f01195d2:	83 ec 0c             	sub    $0xc,%esp
f01195d5:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01195db:	50                   	push   %eax
f01195dc:	e8 fb 88 fe ff       	call   f0101edc <execute_command>
f01195e1:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f01195e4:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01195ea:	bb 9c dd 12 f0       	mov    $0xf012dd9c,%ebx
f01195ef:	ba 0d 00 00 00       	mov    $0xd,%edx
f01195f4:	89 c7                	mov    %eax,%edi
f01195f6:	89 de                	mov    %ebx,%esi
f01195f8:	89 d1                	mov    %edx,%ecx
f01195fa:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01195fc:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f0119602:	b9 57 00 00 00       	mov    $0x57,%ecx
f0119607:	b0 00                	mov    $0x0,%al
f0119609:	89 d7                	mov    %edx,%edi
f011960b:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f011960d:	83 ec 0c             	sub    $0xc,%esp
f0119610:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0119616:	50                   	push   %eax
f0119617:	e8 c0 88 fe ff       	call   f0101edc <execute_command>
f011961c:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f011961f:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0119625:	bb 00 de 12 f0       	mov    $0xf012de00,%ebx
f011962a:	ba 17 00 00 00       	mov    $0x17,%edx
f011962f:	89 c7                	mov    %eax,%edi
f0119631:	89 de                	mov    %ebx,%esi
f0119633:	89 d1                	mov    %edx,%ecx
f0119635:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0119637:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f011963d:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0119642:	b0 00                	mov    $0x0,%al
f0119644:	89 d7                	mov    %edx,%edi
f0119646:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0119648:	83 ec 0c             	sub    $0xc,%esp
f011964b:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0119651:	50                   	push   %eax
f0119652:	e8 85 88 fe ff       	call   f0101edc <execute_command>
f0119657:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f011965a:	83 ec 04             	sub    $0x4,%esp
f011965d:	6a 00                	push   $0x0
f011965f:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0119662:	50                   	push   %eax
f0119663:	68 00 10 00 00       	push   $0x1000
f0119668:	e8 53 11 ff ff       	call   f010a7c0 <envid2env>
f011966d:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0119670:	83 ec 04             	sub    $0x4,%esp
f0119673:	6a 00                	push   $0x0
f0119675:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0119678:	50                   	push   %eax
f0119679:	68 01 10 00 00       	push   $0x1001
f011967e:	e8 3d 11 ff ff       	call   f010a7c0 <envid2env>
f0119683:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0119686:	83 ec 04             	sub    $0x4,%esp
f0119689:	6a 00                	push   $0x0
f011968b:	8d 45 b0             	lea    -0x50(%ebp),%eax
f011968e:	50                   	push   %eax
f011968f:	68 02 10 00 00       	push   $0x1002
f0119694:	e8 27 11 ff ff       	call   f010a7c0 <envid2env>
f0119699:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f011969c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011969f:	85 c0                	test   %eax,%eax
f01196a1:	74 0e                	je     f01196b1 <test_priority_normal_and_lower+0x12b>
f01196a3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01196a6:	85 c0                	test   %eax,%eax
f01196a8:	74 07                	je     f01196b1 <test_priority_normal_and_lower+0x12b>
f01196aa:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01196ad:	85 c0                	test   %eax,%eax
f01196af:	75 17                	jne    f01196c8 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f01196b1:	83 ec 04             	sub    $0x4,%esp
f01196b4:	68 18 d8 12 f0       	push   $0xf012d818
f01196b9:	68 f2 00 00 00       	push   $0xf2
f01196be:	68 31 d8 12 f0       	push   $0xf012d831
f01196c3:	e8 52 6c fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01196c8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01196cb:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01196d1:	83 f8 14             	cmp    $0x14,%eax
f01196d4:	75 1c                	jne    f01196f2 <test_priority_normal_and_lower+0x16c>
f01196d6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01196d9:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01196df:	83 f8 1e             	cmp    $0x1e,%eax
f01196e2:	75 0e                	jne    f01196f2 <test_priority_normal_and_lower+0x16c>
f01196e4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01196e7:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01196ed:	83 f8 28             	cmp    $0x28,%eax
f01196f0:	74 17                	je     f0119709 <test_priority_normal_and_lower+0x183>
			panic("The programs should be initially loaded with the given working set size\n");
f01196f2:	83 ec 04             	sub    $0x4,%esp
f01196f5:	68 c0 db 12 f0       	push   $0xf012dbc0
f01196fa:	68 f5 00 00 00       	push   $0xf5
f01196ff:	68 31 d8 12 f0       	push   $0xf012d831
f0119704:	e8 11 6c fe ff       	call   f010031a <_panic>

		for(int i = 0; i < 20; i++)
f0119709:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0119710:	eb 47                	jmp    f0119759 <test_priority_normal_and_lower+0x1d3>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0119712:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f0119715:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0119718:	89 d0                	mov    %edx,%eax
f011971a:	01 c0                	add    %eax,%eax
f011971c:	01 d0                	add    %edx,%eax
f011971e:	c1 e0 03             	shl    $0x3,%eax
f0119721:	01 c8                	add    %ecx,%eax
f0119723:	05 88 00 00 00       	add    $0x88,%eax
f0119728:	8b 10                	mov    (%eax),%edx
f011972a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011972d:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0119734:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f0119737:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011973a:	89 d0                	mov    %edx,%eax
f011973c:	01 c0                	add    %eax,%eax
f011973e:	01 d0                	add    %edx,%eax
f0119740:	c1 e0 03             	shl    $0x3,%eax
f0119743:	01 c8                	add    %ecx,%eax
f0119745:	05 90 00 00 00       	add    $0x90,%eax
f011974a:	8b 10                	mov    (%eax),%edx
f011974c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011974f:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0119756:	ff 45 e4             	incl   -0x1c(%ebp)
f0119759:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f011975d:	7e b3                	jle    f0119712 <test_priority_normal_and_lower+0x18c>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f011975f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0119766:	eb 47                	jmp    f01197af <test_priority_normal_and_lower+0x229>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0119768:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f011976b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011976e:	89 d0                	mov    %edx,%eax
f0119770:	01 c0                	add    %eax,%eax
f0119772:	01 d0                	add    %edx,%eax
f0119774:	c1 e0 03             	shl    $0x3,%eax
f0119777:	01 c8                	add    %ecx,%eax
f0119779:	05 88 00 00 00       	add    $0x88,%eax
f011977e:	8b 10                	mov    (%eax),%edx
f0119780:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119783:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f011978a:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f011978d:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0119790:	89 d0                	mov    %edx,%eax
f0119792:	01 c0                	add    %eax,%eax
f0119794:	01 d0                	add    %edx,%eax
f0119796:	c1 e0 03             	shl    $0x3,%eax
f0119799:	01 c8                	add    %ecx,%eax
f011979b:	05 90 00 00 00       	add    $0x90,%eax
f01197a0:	8b 10                	mov    (%eax),%edx
f01197a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01197a5:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f01197ac:	ff 45 e0             	incl   -0x20(%ebp)
f01197af:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f01197b3:	7e b3                	jle    f0119768 <test_priority_normal_and_lower+0x1e2>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f01197b5:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01197bc:	eb 47                	jmp    f0119805 <test_priority_normal_and_lower+0x27f>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f01197be:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f01197c1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01197c4:	89 d0                	mov    %edx,%eax
f01197c6:	01 c0                	add    %eax,%eax
f01197c8:	01 d0                	add    %edx,%eax
f01197ca:	c1 e0 03             	shl    $0x3,%eax
f01197cd:	01 c8                	add    %ecx,%eax
f01197cf:	05 88 00 00 00       	add    $0x88,%eax
f01197d4:	8b 10                	mov    (%eax),%edx
f01197d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01197d9:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f01197e0:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f01197e3:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01197e6:	89 d0                	mov    %edx,%eax
f01197e8:	01 c0                	add    %eax,%eax
f01197ea:	01 d0                	add    %edx,%eax
f01197ec:	c1 e0 03             	shl    $0x3,%eax
f01197ef:	01 c8                	add    %ecx,%eax
f01197f1:	05 90 00 00 00       	add    $0x90,%eax
f01197f6:	8b 10                	mov    (%eax),%edx
f01197f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01197fb:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0119802:	ff 45 dc             	incl   -0x24(%ebp)
f0119805:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f0119809:	7e b3                	jle    f01197be <test_priority_normal_and_lower+0x238>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f011980b:	e8 f9 41 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119810:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0119813:	e8 28 b0 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119818:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f011981b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011981e:	83 ec 08             	sub    $0x8,%esp
f0119821:	6a 03                	push   $0x3
f0119823:	50                   	push   %eax
f0119824:	e8 86 26 ff ff       	call   f010beaf <set_program_priority>
f0119829:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f011982c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011982f:	83 ec 08             	sub    $0x8,%esp
f0119832:	6a 03                	push   $0x3
f0119834:	50                   	push   %eax
f0119835:	e8 75 26 ff ff       	call   f010beaf <set_program_priority>
f011983a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f011983d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119840:	83 ec 08             	sub    $0x8,%esp
f0119843:	6a 03                	push   $0x3
f0119845:	50                   	push   %eax
f0119846:	e8 64 26 ff ff       	call   f010beaf <set_program_priority>
f011984b:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011984e:	e8 ed af fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119853:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0119856:	74 17                	je     f011986f <test_priority_normal_and_lower+0x2e9>
f0119858:	83 ec 04             	sub    $0x4,%esp
f011985b:	68 b4 d8 12 f0       	push   $0xf012d8b4
f0119860:	68 11 01 00 00       	push   $0x111
f0119865:	68 31 d8 12 f0       	push   $0xf012d831
f011986a:	e8 ab 6a fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011986f:	e8 95 41 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119874:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0119877:	74 17                	je     f0119890 <test_priority_normal_and_lower+0x30a>
f0119879:	83 ec 04             	sub    $0x4,%esp
f011987c:	68 b4 d8 12 f0       	push   $0xf012d8b4
f0119881:	68 12 01 00 00       	push   $0x112
f0119886:	68 31 d8 12 f0       	push   $0xf012d831
f011988b:	e8 8a 6a fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0119890:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119893:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119899:	83 f8 14             	cmp    $0x14,%eax
f011989c:	75 1c                	jne    f01198ba <test_priority_normal_and_lower+0x334>
f011989e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01198a1:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01198a7:	83 f8 1e             	cmp    $0x1e,%eax
f01198aa:	75 0e                	jne    f01198ba <test_priority_normal_and_lower+0x334>
f01198ac:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01198af:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01198b5:	83 f8 28             	cmp    $0x28,%eax
f01198b8:	74 17                	je     f01198d1 <test_priority_normal_and_lower+0x34b>
			panic("The programs' working set size should not change after setting priority to normal\n");
f01198ba:	83 ec 04             	sub    $0x4,%esp
f01198bd:	68 e0 d8 12 f0       	push   $0xf012d8e0
f01198c2:	68 15 01 00 00       	push   $0x115
f01198c7:	68 31 d8 12 f0       	push   $0xf012d831
f01198cc:	e8 49 6a fe ff       	call   f010031a <_panic>

		freeFrames = sys_calculate_free_frames();
f01198d1:	e8 33 41 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01198d6:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01198d9:	e8 62 af fe ff       	call   f0104840 <pf_calculate_free_frames>
f01198de:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01198e1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01198e4:	83 ec 08             	sub    $0x8,%esp
f01198e7:	6a 02                	push   $0x2
f01198e9:	50                   	push   %eax
f01198ea:	e8 c0 25 ff ff       	call   f010beaf <set_program_priority>
f01198ef:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01198f2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01198f5:	83 ec 08             	sub    $0x8,%esp
f01198f8:	6a 02                	push   $0x2
f01198fa:	50                   	push   %eax
f01198fb:	e8 af 25 ff ff       	call   f010beaf <set_program_priority>
f0119900:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0119903:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119906:	83 ec 08             	sub    $0x8,%esp
f0119909:	6a 02                	push   $0x2
f011990b:	50                   	push   %eax
f011990c:	e8 9e 25 ff ff       	call   f010beaf <set_program_priority>
f0119911:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0119914:	e8 27 af fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119919:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f011991c:	74 17                	je     f0119935 <test_priority_normal_and_lower+0x3af>
f011991e:	83 ec 04             	sub    $0x4,%esp
f0119921:	68 b4 d8 12 f0       	push   $0xf012d8b4
f0119926:	68 1f 01 00 00       	push   $0x11f
f011992b:	68 31 d8 12 f0       	push   $0xf012d831
f0119930:	e8 e5 69 fe ff       	call   f010031a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0119935:	e8 cf 40 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011993a:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011993d:	74 21                	je     f0119960 <test_priority_normal_and_lower+0x3da>
f011993f:	e8 c5 40 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119944:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0119947:	29 c2                	sub    %eax,%edx
f0119949:	89 d0                	mov    %edx,%eax
f011994b:	50                   	push   %eax
f011994c:	68 34 d9 12 f0       	push   $0xf012d934
f0119951:	68 20 01 00 00       	push   $0x120
f0119956:	68 31 d8 12 f0       	push   $0xf012d831
f011995b:	e8 ba 69 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0119960:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119963:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119969:	83 f8 0a             	cmp    $0xa,%eax
f011996c:	75 1c                	jne    f011998a <test_priority_normal_and_lower+0x404>
f011996e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119971:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119977:	83 f8 0f             	cmp    $0xf,%eax
f011997a:	75 0e                	jne    f011998a <test_priority_normal_and_lower+0x404>
f011997c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011997f:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119985:	83 f8 14             	cmp    $0x14,%eax
f0119988:	74 17                	je     f01199a1 <test_priority_normal_and_lower+0x41b>
			panic("The programs' working set size should be doubled only if it is full\n");
f011998a:	83 ec 04             	sub    $0x4,%esp
f011998d:	68 64 d9 12 f0       	push   $0xf012d964
f0119992:	68 23 01 00 00       	push   $0x123
f0119997:	68 31 d8 12 f0       	push   $0xf012d831
f011999c:	e8 79 69 fe ff       	call   f010031a <_panic>

		freeFrames = sys_calculate_free_frames();
f01199a1:	e8 63 40 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01199a6:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01199a9:	e8 92 ae fe ff       	call   f0104840 <pf_calculate_free_frames>
f01199ae:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f01199b1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01199b4:	83 ec 08             	sub    $0x8,%esp
f01199b7:	6a 02                	push   $0x2
f01199b9:	50                   	push   %eax
f01199ba:	e8 f0 24 ff ff       	call   f010beaf <set_program_priority>
f01199bf:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01199c2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01199c5:	83 ec 08             	sub    $0x8,%esp
f01199c8:	6a 02                	push   $0x2
f01199ca:	50                   	push   %eax
f01199cb:	e8 df 24 ff ff       	call   f010beaf <set_program_priority>
f01199d0:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01199d3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01199d6:	83 ec 08             	sub    $0x8,%esp
f01199d9:	6a 02                	push   $0x2
f01199db:	50                   	push   %eax
f01199dc:	e8 ce 24 ff ff       	call   f010beaf <set_program_priority>
f01199e1:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01199e4:	e8 57 ae fe ff       	call   f0104840 <pf_calculate_free_frames>
f01199e9:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01199ec:	74 17                	je     f0119a05 <test_priority_normal_and_lower+0x47f>
f01199ee:	83 ec 04             	sub    $0x4,%esp
f01199f1:	68 b4 d8 12 f0       	push   $0xf012d8b4
f01199f6:	68 2d 01 00 00       	push   $0x12d
f01199fb:	68 31 d8 12 f0       	push   $0xf012d831
f0119a00:	e8 15 69 fe ff       	call   f010031a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0119a05:	e8 ff 3f ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119a0a:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0119a0d:	74 21                	je     f0119a30 <test_priority_normal_and_lower+0x4aa>
f0119a0f:	e8 f5 3f ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119a14:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0119a17:	29 c2                	sub    %eax,%edx
f0119a19:	89 d0                	mov    %edx,%eax
f0119a1b:	50                   	push   %eax
f0119a1c:	68 34 d9 12 f0       	push   $0xf012d934
f0119a21:	68 2e 01 00 00       	push   $0x12e
f0119a26:	68 31 d8 12 f0       	push   $0xf012d831
f0119a2b:	e8 ea 68 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0119a30:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119a33:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119a39:	83 f8 0a             	cmp    $0xa,%eax
f0119a3c:	75 1c                	jne    f0119a5a <test_priority_normal_and_lower+0x4d4>
f0119a3e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119a41:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119a47:	83 f8 0f             	cmp    $0xf,%eax
f0119a4a:	75 0e                	jne    f0119a5a <test_priority_normal_and_lower+0x4d4>
f0119a4c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119a4f:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119a55:	83 f8 0a             	cmp    $0xa,%eax
f0119a58:	74 17                	je     f0119a71 <test_priority_normal_and_lower+0x4eb>
			panic("The programs' working set size should be doubled only if it is full\n");
f0119a5a:	83 ec 04             	sub    $0x4,%esp
f0119a5d:	68 64 d9 12 f0       	push   $0xf012d964
f0119a62:	68 31 01 00 00       	push   $0x131
f0119a67:	68 31 d8 12 f0       	push   $0xf012d831
f0119a6c:	e8 a9 68 fe ff       	call   f010031a <_panic>

		for(int i = 0; i < 10; i++)
f0119a71:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0119a78:	eb 7d                	jmp    f0119af7 <test_priority_normal_and_lower+0x571>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0119a7a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119a7d:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0119a84:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0119a87:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0119a8a:	89 d0                	mov    %edx,%eax
f0119a8c:	01 c0                	add    %eax,%eax
f0119a8e:	01 d0                	add    %edx,%eax
f0119a90:	c1 e0 03             	shl    $0x3,%eax
f0119a93:	01 d8                	add    %ebx,%eax
f0119a95:	05 88 00 00 00       	add    $0x88,%eax
f0119a9a:	8b 00                	mov    (%eax),%eax
f0119a9c:	39 c1                	cmp    %eax,%ecx
f0119a9e:	74 17                	je     f0119ab7 <test_priority_normal_and_lower+0x531>
				panic("Working set should be moved properly to the new one");
f0119aa0:	83 ec 04             	sub    $0x4,%esp
f0119aa3:	68 24 da 12 f0       	push   $0xf012da24
f0119aa8:	68 36 01 00 00       	push   $0x136
f0119aad:	68 31 d8 12 f0       	push   $0xf012d831
f0119ab2:	e8 63 68 fe ff       	call   f010031a <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0119ab7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119aba:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0119ac1:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0119ac4:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0119ac7:	89 d0                	mov    %edx,%eax
f0119ac9:	01 c0                	add    %eax,%eax
f0119acb:	01 d0                	add    %edx,%eax
f0119acd:	c1 e0 03             	shl    $0x3,%eax
f0119ad0:	01 d8                	add    %ebx,%eax
f0119ad2:	05 90 00 00 00       	add    $0x90,%eax
f0119ad7:	8b 00                	mov    (%eax),%eax
f0119ad9:	39 c1                	cmp    %eax,%ecx
f0119adb:	74 17                	je     f0119af4 <test_priority_normal_and_lower+0x56e>
				panic("Working set should be moved properly to the new one");
f0119add:	83 ec 04             	sub    $0x4,%esp
f0119ae0:	68 24 da 12 f0       	push   $0xf012da24
f0119ae5:	68 39 01 00 00       	push   $0x139
f0119aea:	68 31 d8 12 f0       	push   $0xf012d831
f0119aef:	e8 26 68 fe ff       	call   f010031a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0119af4:	ff 45 d8             	incl   -0x28(%ebp)
f0119af7:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0119afb:	0f 8e 79 ff ff ff    	jle    f0119a7a <test_priority_normal_and_lower+0x4f4>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0119b01:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0119b08:	eb 7d                	jmp    f0119b87 <test_priority_normal_and_lower+0x601>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0119b0a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119b0d:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0119b14:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0119b17:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0119b1a:	89 d0                	mov    %edx,%eax
f0119b1c:	01 c0                	add    %eax,%eax
f0119b1e:	01 d0                	add    %edx,%eax
f0119b20:	c1 e0 03             	shl    $0x3,%eax
f0119b23:	01 d8                	add    %ebx,%eax
f0119b25:	05 88 00 00 00       	add    $0x88,%eax
f0119b2a:	8b 00                	mov    (%eax),%eax
f0119b2c:	39 c1                	cmp    %eax,%ecx
f0119b2e:	74 17                	je     f0119b47 <test_priority_normal_and_lower+0x5c1>
				panic("Working set should be moved properly to the new one");
f0119b30:	83 ec 04             	sub    $0x4,%esp
f0119b33:	68 24 da 12 f0       	push   $0xf012da24
f0119b38:	68 3f 01 00 00       	push   $0x13f
f0119b3d:	68 31 d8 12 f0       	push   $0xf012d831
f0119b42:	e8 d3 67 fe ff       	call   f010031a <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0119b47:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119b4a:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0119b51:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0119b54:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0119b57:	89 d0                	mov    %edx,%eax
f0119b59:	01 c0                	add    %eax,%eax
f0119b5b:	01 d0                	add    %edx,%eax
f0119b5d:	c1 e0 03             	shl    $0x3,%eax
f0119b60:	01 d8                	add    %ebx,%eax
f0119b62:	05 90 00 00 00       	add    $0x90,%eax
f0119b67:	8b 00                	mov    (%eax),%eax
f0119b69:	39 c1                	cmp    %eax,%ecx
f0119b6b:	74 17                	je     f0119b84 <test_priority_normal_and_lower+0x5fe>
				panic("Working set should be moved properly to the new one");
f0119b6d:	83 ec 04             	sub    $0x4,%esp
f0119b70:	68 24 da 12 f0       	push   $0xf012da24
f0119b75:	68 42 01 00 00       	push   $0x142
f0119b7a:	68 31 d8 12 f0       	push   $0xf012d831
f0119b7f:	e8 96 67 fe ff       	call   f010031a <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0119b84:	ff 45 d4             	incl   -0x2c(%ebp)
f0119b87:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0119b8b:	0f 8e 79 ff ff ff    	jle    f0119b0a <test_priority_normal_and_lower+0x584>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0119b91:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0119b98:	eb 7d                	jmp    f0119c17 <test_priority_normal_and_lower+0x691>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0119b9a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119b9d:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0119ba4:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0119ba7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0119baa:	89 d0                	mov    %edx,%eax
f0119bac:	01 c0                	add    %eax,%eax
f0119bae:	01 d0                	add    %edx,%eax
f0119bb0:	c1 e0 03             	shl    $0x3,%eax
f0119bb3:	01 d8                	add    %ebx,%eax
f0119bb5:	05 88 00 00 00       	add    $0x88,%eax
f0119bba:	8b 00                	mov    (%eax),%eax
f0119bbc:	39 c1                	cmp    %eax,%ecx
f0119bbe:	74 17                	je     f0119bd7 <test_priority_normal_and_lower+0x651>
				panic("Working set should be moved properly to the new one");
f0119bc0:	83 ec 04             	sub    $0x4,%esp
f0119bc3:	68 24 da 12 f0       	push   $0xf012da24
f0119bc8:	68 48 01 00 00       	push   $0x148
f0119bcd:	68 31 d8 12 f0       	push   $0xf012d831
f0119bd2:	e8 43 67 fe ff       	call   f010031a <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0119bd7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119bda:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0119be1:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0119be4:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0119be7:	89 d0                	mov    %edx,%eax
f0119be9:	01 c0                	add    %eax,%eax
f0119beb:	01 d0                	add    %edx,%eax
f0119bed:	c1 e0 03             	shl    $0x3,%eax
f0119bf0:	01 d8                	add    %ebx,%eax
f0119bf2:	05 90 00 00 00       	add    $0x90,%eax
f0119bf7:	8b 00                	mov    (%eax),%eax
f0119bf9:	39 c1                	cmp    %eax,%ecx
f0119bfb:	74 17                	je     f0119c14 <test_priority_normal_and_lower+0x68e>
				panic("Working set should be moved properly to the new one");
f0119bfd:	83 ec 04             	sub    $0x4,%esp
f0119c00:	68 24 da 12 f0       	push   $0xf012da24
f0119c05:	68 4b 01 00 00       	push   $0x14b
f0119c0a:	68 31 d8 12 f0       	push   $0xf012d831
f0119c0f:	e8 06 67 fe ff       	call   f010031a <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0119c14:	ff 45 d0             	incl   -0x30(%ebp)
f0119c17:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f0119c1b:	0f 8e 79 ff ff ff    	jle    f0119b9a <test_priority_normal_and_lower+0x614>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f0119c21:	e8 e3 3d ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119c26:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119c29:	e8 12 ac fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119c2e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0119c31:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119c34:	83 ec 08             	sub    $0x8,%esp
f0119c37:	6a 01                	push   $0x1
f0119c39:	50                   	push   %eax
f0119c3a:	e8 70 22 ff ff       	call   f010beaf <set_program_priority>
f0119c3f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f0119c42:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119c45:	83 ec 08             	sub    $0x8,%esp
f0119c48:	6a 01                	push   $0x1
f0119c4a:	50                   	push   %eax
f0119c4b:	e8 5f 22 ff ff       	call   f010beaf <set_program_priority>
f0119c50:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f0119c53:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119c56:	83 ec 08             	sub    $0x8,%esp
f0119c59:	6a 01                	push   $0x1
f0119c5b:	50                   	push   %eax
f0119c5c:	e8 4e 22 ff ff       	call   f010beaf <set_program_priority>
f0119c61:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0119c64:	e8 d7 ab fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119c69:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0119c6c:	74 17                	je     f0119c85 <test_priority_normal_and_lower+0x6ff>
f0119c6e:	83 ec 04             	sub    $0x4,%esp
f0119c71:	68 b4 d8 12 f0       	push   $0xf012d8b4
f0119c76:	68 54 01 00 00       	push   $0x154
f0119c7b:	68 31 d8 12 f0       	push   $0xf012d831
f0119c80:	e8 95 66 fe ff       	call   f010031a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0119c85:	e8 7f 3d ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119c8a:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0119c8d:	83 f8 0d             	cmp    $0xd,%eax
f0119c90:	74 17                	je     f0119ca9 <test_priority_normal_and_lower+0x723>
f0119c92:	83 ec 04             	sub    $0x4,%esp
f0119c95:	68 0c dc 12 f0       	push   $0xf012dc0c
f0119c9a:	68 55 01 00 00       	push   $0x155
f0119c9f:	68 31 d8 12 f0       	push   $0xf012d831
f0119ca4:	e8 71 66 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0119ca9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119cac:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119cb2:	83 f8 05             	cmp    $0x5,%eax
f0119cb5:	75 1c                	jne    f0119cd3 <test_priority_normal_and_lower+0x74d>
f0119cb7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119cba:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119cc0:	83 f8 07             	cmp    $0x7,%eax
f0119cc3:	75 0e                	jne    f0119cd3 <test_priority_normal_and_lower+0x74d>
f0119cc5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119cc8:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119cce:	83 f8 05             	cmp    $0x5,%eax
f0119cd1:	74 17                	je     f0119cea <test_priority_normal_and_lower+0x764>
			panic("The programs' working set size should be half\n");
f0119cd3:	83 ec 04             	sub    $0x4,%esp
f0119cd6:	68 54 dc 12 f0       	push   $0xf012dc54
f0119cdb:	68 58 01 00 00       	push   $0x158
f0119ce0:	68 31 d8 12 f0       	push   $0xf012d831
f0119ce5:	e8 30 66 fe ff       	call   f010031a <_panic>


		freeFrames = sys_calculate_free_frames();
f0119cea:	e8 1a 3d ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119cef:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119cf2:	e8 49 ab fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119cf7:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0119cfa:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119cfd:	83 ec 08             	sub    $0x8,%esp
f0119d00:	6a 01                	push   $0x1
f0119d02:	50                   	push   %eax
f0119d03:	e8 a7 21 ff ff       	call   f010beaf <set_program_priority>
f0119d08:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0119d0b:	e8 30 ab fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119d10:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0119d13:	74 17                	je     f0119d2c <test_priority_normal_and_lower+0x7a6>
f0119d15:	83 ec 04             	sub    $0x4,%esp
f0119d18:	68 b4 d8 12 f0       	push   $0xf012d8b4
f0119d1d:	68 5e 01 00 00       	push   $0x15e
f0119d22:	68 31 d8 12 f0       	push   $0xf012d831
f0119d27:	e8 ee 65 fe ff       	call   f010031a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f0119d2c:	e8 d8 3c ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119d31:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0119d34:	83 f8 03             	cmp    $0x3,%eax
f0119d37:	74 17                	je     f0119d50 <test_priority_normal_and_lower+0x7ca>
f0119d39:	83 ec 04             	sub    $0x4,%esp
f0119d3c:	68 b4 d8 12 f0       	push   $0xf012d8b4
f0119d41:	68 5f 01 00 00       	push   $0x15f
f0119d46:	68 31 d8 12 f0       	push   $0xf012d831
f0119d4b:	e8 ca 65 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0119d50:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119d53:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119d59:	83 f8 02             	cmp    $0x2,%eax
f0119d5c:	75 1c                	jne    f0119d7a <test_priority_normal_and_lower+0x7f4>
f0119d5e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0119d61:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119d67:	83 f8 07             	cmp    $0x7,%eax
f0119d6a:	75 0e                	jne    f0119d7a <test_priority_normal_and_lower+0x7f4>
f0119d6c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119d6f:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0119d75:	83 f8 05             	cmp    $0x5,%eax
f0119d78:	74 17                	je     f0119d91 <test_priority_normal_and_lower+0x80b>
			panic("The programs' working set size should be doubled if full\n");
f0119d7a:	83 ec 04             	sub    $0x4,%esp
f0119d7d:	68 e8 d9 12 f0       	push   $0xf012d9e8
f0119d82:	68 62 01 00 00       	push   $0x162
f0119d87:	68 31 d8 12 f0       	push   $0xf012d831
f0119d8c:	e8 89 65 fe ff       	call   f010031a <_panic>

		for(int i = 0; i < 2; i++)
f0119d91:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0119d98:	e9 83 00 00 00       	jmp    f0119e20 <test_priority_normal_and_lower+0x89a>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0119d9d:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119da0:	83 c0 08             	add    $0x8,%eax
f0119da3:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0119daa:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0119dad:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0119db0:	89 d0                	mov    %edx,%eax
f0119db2:	01 c0                	add    %eax,%eax
f0119db4:	01 d0                	add    %edx,%eax
f0119db6:	c1 e0 03             	shl    $0x3,%eax
f0119db9:	01 d8                	add    %ebx,%eax
f0119dbb:	05 88 00 00 00       	add    $0x88,%eax
f0119dc0:	8b 00                	mov    (%eax),%eax
f0119dc2:	39 c1                	cmp    %eax,%ecx
f0119dc4:	74 17                	je     f0119ddd <test_priority_normal_and_lower+0x857>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0119dc6:	83 ec 04             	sub    $0x4,%esp
f0119dc9:	68 84 dc 12 f0       	push   $0xf012dc84
f0119dce:	68 67 01 00 00       	push   $0x167
f0119dd3:	68 31 d8 12 f0       	push   $0xf012d831
f0119dd8:	e8 3d 65 fe ff       	call   f010031a <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0119ddd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119de0:	83 c0 08             	add    $0x8,%eax
f0119de3:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0119dea:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0119ded:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0119df0:	89 d0                	mov    %edx,%eax
f0119df2:	01 c0                	add    %eax,%eax
f0119df4:	01 d0                	add    %edx,%eax
f0119df6:	c1 e0 03             	shl    $0x3,%eax
f0119df9:	01 d8                	add    %ebx,%eax
f0119dfb:	05 90 00 00 00       	add    $0x90,%eax
f0119e00:	8b 00                	mov    (%eax),%eax
f0119e02:	39 c1                	cmp    %eax,%ecx
f0119e04:	74 17                	je     f0119e1d <test_priority_normal_and_lower+0x897>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0119e06:	83 ec 04             	sub    $0x4,%esp
f0119e09:	68 84 dc 12 f0       	push   $0xf012dc84
f0119e0e:	68 6a 01 00 00       	push   $0x16a
f0119e13:	68 31 d8 12 f0       	push   $0xf012d831
f0119e18:	e8 fd 64 fe ff       	call   f010031a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f0119e1d:	ff 45 cc             	incl   -0x34(%ebp)
f0119e20:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0119e24:	0f 8e 73 ff ff ff    	jle    f0119d9d <test_priority_normal_and_lower+0x817>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0119e2a:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f0119e31:	e9 83 00 00 00       	jmp    f0119eb9 <test_priority_normal_and_lower+0x933>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0119e36:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119e39:	83 c0 03             	add    $0x3,%eax
f0119e3c:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f0119e43:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0119e46:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0119e49:	89 d0                	mov    %edx,%eax
f0119e4b:	01 c0                	add    %eax,%eax
f0119e4d:	01 d0                	add    %edx,%eax
f0119e4f:	c1 e0 03             	shl    $0x3,%eax
f0119e52:	01 d8                	add    %ebx,%eax
f0119e54:	05 88 00 00 00       	add    $0x88,%eax
f0119e59:	8b 00                	mov    (%eax),%eax
f0119e5b:	39 c1                	cmp    %eax,%ecx
f0119e5d:	74 17                	je     f0119e76 <test_priority_normal_and_lower+0x8f0>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f0119e5f:	ff 75 c8             	pushl  -0x38(%ebp)
f0119e62:	68 f0 dc 12 f0       	push   $0xf012dcf0
f0119e67:	68 70 01 00 00       	push   $0x170
f0119e6c:	68 31 d8 12 f0       	push   $0xf012d831
f0119e71:	e8 a4 64 fe ff       	call   f010031a <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0119e76:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119e79:	83 c0 03             	add    $0x3,%eax
f0119e7c:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0119e83:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0119e86:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0119e89:	89 d0                	mov    %edx,%eax
f0119e8b:	01 c0                	add    %eax,%eax
f0119e8d:	01 d0                	add    %edx,%eax
f0119e8f:	c1 e0 03             	shl    $0x3,%eax
f0119e92:	01 d8                	add    %ebx,%eax
f0119e94:	05 90 00 00 00       	add    $0x90,%eax
f0119e99:	8b 00                	mov    (%eax),%eax
f0119e9b:	39 c1                	cmp    %eax,%ecx
f0119e9d:	74 17                	je     f0119eb6 <test_priority_normal_and_lower+0x930>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0119e9f:	83 ec 04             	sub    $0x4,%esp
f0119ea2:	68 84 dc 12 f0       	push   $0xf012dc84
f0119ea7:	68 73 01 00 00       	push   $0x173
f0119eac:	68 31 d8 12 f0       	push   $0xf012d831
f0119eb1:	e8 64 64 fe ff       	call   f010031a <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0119eb6:	ff 45 c8             	incl   -0x38(%ebp)
f0119eb9:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0119ebd:	0f 8e 73 ff ff ff    	jle    f0119e36 <test_priority_normal_and_lower+0x8b0>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0119ec3:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0119eca:	e9 83 00 00 00       	jmp    f0119f52 <test_priority_normal_and_lower+0x9cc>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0119ecf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119ed2:	83 c0 05             	add    $0x5,%eax
f0119ed5:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0119edc:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0119edf:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0119ee2:	89 d0                	mov    %edx,%eax
f0119ee4:	01 c0                	add    %eax,%eax
f0119ee6:	01 d0                	add    %edx,%eax
f0119ee8:	c1 e0 03             	shl    $0x3,%eax
f0119eeb:	01 d8                	add    %ebx,%eax
f0119eed:	05 88 00 00 00       	add    $0x88,%eax
f0119ef2:	8b 00                	mov    (%eax),%eax
f0119ef4:	39 c1                	cmp    %eax,%ecx
f0119ef6:	74 17                	je     f0119f0f <test_priority_normal_and_lower+0x989>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0119ef8:	83 ec 04             	sub    $0x4,%esp
f0119efb:	68 84 dc 12 f0       	push   $0xf012dc84
f0119f00:	68 79 01 00 00       	push   $0x179
f0119f05:	68 31 d8 12 f0       	push   $0xf012d831
f0119f0a:	e8 0b 64 fe ff       	call   f010031a <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0119f0f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119f12:	83 c0 05             	add    $0x5,%eax
f0119f15:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0119f1c:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0119f1f:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0119f22:	89 d0                	mov    %edx,%eax
f0119f24:	01 c0                	add    %eax,%eax
f0119f26:	01 d0                	add    %edx,%eax
f0119f28:	c1 e0 03             	shl    $0x3,%eax
f0119f2b:	01 d8                	add    %ebx,%eax
f0119f2d:	05 90 00 00 00       	add    $0x90,%eax
f0119f32:	8b 00                	mov    (%eax),%eax
f0119f34:	39 c1                	cmp    %eax,%ecx
f0119f36:	74 17                	je     f0119f4f <test_priority_normal_and_lower+0x9c9>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0119f38:	83 ec 04             	sub    $0x4,%esp
f0119f3b:	68 84 dc 12 f0       	push   $0xf012dc84
f0119f40:	68 7c 01 00 00       	push   $0x17c
f0119f45:	68 31 d8 12 f0       	push   $0xf012d831
f0119f4a:	e8 cb 63 fe ff       	call   f010031a <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0119f4f:	ff 45 c4             	incl   -0x3c(%ebp)
f0119f52:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0119f56:	0f 8e 73 ff ff ff    	jle    f0119ecf <test_priority_normal_and_lower+0x949>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f0119f5c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119f5f:	83 ec 08             	sub    $0x8,%esp
f0119f62:	6a 05                	push   $0x5
f0119f64:	50                   	push   %eax
f0119f65:	e8 45 1f ff ff       	call   f010beaf <set_program_priority>
f0119f6a:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0119f6d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119f70:	83 ec 08             	sub    $0x8,%esp
f0119f73:	6a 05                	push   $0x5
f0119f75:	50                   	push   %eax
f0119f76:	e8 34 1f ff ff       	call   f010beaf <set_program_priority>
f0119f7b:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0119f7e:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0119f85:	75 6e 61 
f0119f88:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0119f8f:	6c 00 00 
f0119f92:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0119f98:	b9 17 00 00 00       	mov    $0x17,%ecx
f0119f9d:	b8 00 00 00 00       	mov    $0x0,%eax
f0119fa2:	89 d7                	mov    %edx,%edi
f0119fa4:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0119fa6:	83 ec 0c             	sub    $0xc,%esp
f0119fa9:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0119faf:	50                   	push   %eax
f0119fb0:	e8 27 7f fe ff       	call   f0101edc <execute_command>
f0119fb5:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
#endif
}
f0119fb8:	eb 10                	jmp    f0119fca <test_priority_normal_and_lower+0xa44>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0119fba:	83 ec 0c             	sub    $0xc,%esp
f0119fbd:	68 60 dd 12 f0       	push   $0xf012dd60
f0119fc2:	e8 a5 6f fe ff       	call   f0100f6c <cprintf>
f0119fc7:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f0119fca:	90                   	nop
f0119fcb:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0119fce:	5b                   	pop    %ebx
f0119fcf:	5e                   	pop    %esi
f0119fd0:	5f                   	pop    %edi
f0119fd1:	5d                   	pop    %ebp
f0119fd2:	c3                   	ret    

f0119fd3 <test_kmalloc>:
	int c;
};

uint32 da_limit = KERNEL_HEAP_START + DYN_ALLOC_MAX_SIZE ;
int test_kmalloc()
{
f0119fd3:	55                   	push   %ebp
f0119fd4:	89 e5                	mov    %esp,%ebp
f0119fd6:	57                   	push   %edi
f0119fd7:	53                   	push   %ebx
f0119fd8:	81 ec d0 00 00 00    	sub    $0xd0,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f0119fde:	83 ec 0c             	sub    $0xc,%esp
f0119fe1:	68 80 de 12 f0       	push   $0xf012de80
f0119fe6:	e8 81 6f fe ff       	call   f0100f6c <cprintf>
f0119feb:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0119fee:	83 ec 0c             	sub    $0xc,%esp
f0119ff1:	68 b0 de 12 f0       	push   $0xf012deb0
f0119ff6:	e8 71 6f fe ff       	call   f0100f6c <cprintf>
f0119ffb:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0119ffe:	83 ec 0c             	sub    $0xc,%esp
f011a001:	68 80 de 12 f0       	push   $0xf012de80
f011a006:	e8 61 6f fe ff       	call   f0100f6c <cprintf>
f011a00b:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011a00e:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f011a012:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f011a016:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f011a01c:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f011a022:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f011a029:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2, *byteArr3 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfByte3, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = (int)sys_calculate_free_frames() ;
f011a030:	e8 d4 39 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a035:	89 45 d8             	mov    %eax,-0x28(%ebp)
	int eval = 0;
f011a038:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool correct = 1 ;
f011a03f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int freeFrames, freeDiskFrames;
	uint32 sizeOfKHeap;
	void* ptr_allocations[20] = {0};
f011a046:	8d 95 38 ff ff ff    	lea    -0xc8(%ebp),%edx
f011a04c:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a051:	b8 00 00 00 00       	mov    $0x0,%eax
f011a056:	89 d7                	mov    %edx,%edi
f011a058:	f3 ab                	rep stos %eax,%es:(%edi)
	correct = 1 ;
f011a05a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		//Insufficient space
		freeFrames = (int)sys_calculate_free_frames() ;
f011a061:	e8 a3 39 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a066:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a069:	e8 d2 a7 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a06e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f011a071:	c7 45 cc 01 e0 ff 07 	movl   $0x7ffe001,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f011a078:	83 ec 0c             	sub    $0xc,%esp
f011a07b:	ff 75 cc             	pushl  -0x34(%ebp)
f011a07e:	e8 33 ea fe ff       	call   f0108ab6 <kmalloc>
f011a083:	83 c4 10             	add    $0x10,%esp
f011a086:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
		if (ptr_allocations[0] != NULL) { correct = 0; cprintf("Allocating insufficient space: should return NULL\n"); }
f011a08c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a092:	85 c0                	test   %eax,%eax
f011a094:	74 17                	je     f011a0ad <test_kmalloc+0xda>
f011a096:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a09d:	83 ec 0c             	sub    $0xc,%esp
f011a0a0:	68 0c df 12 f0       	push   $0xf012df0c
f011a0a5:	e8 c2 6e fe ff       	call   f0100f6c <cprintf>
f011a0aa:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a0ad:	e8 8e a7 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a0b2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a0b5:	74 17                	je     f011a0ce <test_kmalloc+0xfb>
f011a0b7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a0be:	83 ec 0c             	sub    $0xc,%esp
f011a0c1:	68 40 df 12 f0       	push   $0xf012df40
f011a0c6:	e8 a1 6e fe ff       	call   f0100f6c <cprintf>
f011a0cb:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a0ce:	e8 36 39 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a0d3:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011a0d6:	74 17                	je     f011a0ef <test_kmalloc+0x11c>
f011a0d8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a0df:	83 ec 0c             	sub    $0xc,%esp
f011a0e2:	68 ac df 12 f0       	push   $0xf012dfac
f011a0e7:	e8 80 6e fe ff       	call   f0100f6c <cprintf>
f011a0ec:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011a0ef:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011a0f3:	74 04                	je     f011a0f9 <test_kmalloc+0x126>
f011a0f5:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011a0f9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		//2 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011a100:	e8 04 39 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a105:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a108:	e8 33 a7 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a10d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011a110:	83 ec 0c             	sub    $0xc,%esp
f011a113:	68 00 fc 1f 00       	push   $0x1ffc00
f011a118:	e8 99 e9 fe ff       	call   f0108ab6 <kmalloc>
f011a11d:	83 c4 10             	add    $0x10,%esp
f011a120:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011a126:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a12c:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011a131:	74 17                	je     f011a14a <test_kmalloc+0x177>
f011a133:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a13a:	83 ec 0c             	sub    $0xc,%esp
f011a13d:	68 f0 df 12 f0       	push   $0xf012dff0
f011a142:	e8 25 6e fe ff       	call   f0100f6c <cprintf>
f011a147:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a14a:	e8 f1 a6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a14f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a152:	74 17                	je     f011a16b <test_kmalloc+0x198>
f011a154:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a15b:	83 ec 0c             	sub    $0xc,%esp
f011a15e:	68 40 df 12 f0       	push   $0xf012df40
f011a163:	e8 04 6e fe ff       	call   f0100f6c <cprintf>
f011a168:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a16b:	e8 99 38 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a170:	89 c2                	mov    %eax,%edx
f011a172:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a175:	29 d0                	sub    %edx,%eax
f011a177:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011a17c:	7f 17                	jg     f011a195 <test_kmalloc+0x1c2>
f011a17e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a185:	83 ec 0c             	sub    $0xc,%esp
f011a188:	68 ac df 12 f0       	push   $0xf012dfac
f011a18d:	e8 da 6d fe ff       	call   f0100f6c <cprintf>
f011a192:	83 c4 10             	add    $0x10,%esp

		//2 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011a195:	e8 6f 38 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a19a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a19d:	e8 9e a6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a1a2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011a1a5:	83 ec 0c             	sub    $0xc,%esp
f011a1a8:	68 00 fc 1f 00       	push   $0x1ffc00
f011a1ad:	e8 04 e9 fe ff       	call   f0108ab6 <kmalloc>
f011a1b2:	83 c4 10             	add    $0x10,%esp
f011a1b5:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011a1bb:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011a1c1:	3d 00 10 20 f8       	cmp    $0xf8201000,%eax
f011a1c6:	74 17                	je     f011a1df <test_kmalloc+0x20c>
f011a1c8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a1cf:	83 ec 0c             	sub    $0xc,%esp
f011a1d2:	68 f0 df 12 f0       	push   $0xf012dff0
f011a1d7:	e8 90 6d fe ff       	call   f0100f6c <cprintf>
f011a1dc:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a1df:	e8 5c a6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a1e4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a1e7:	74 17                	je     f011a200 <test_kmalloc+0x22d>
f011a1e9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a1f0:	83 ec 0c             	sub    $0xc,%esp
f011a1f3:	68 40 df 12 f0       	push   $0xf012df40
f011a1f8:	e8 6f 6d fe ff       	call   f0100f6c <cprintf>
f011a1fd:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a200:	e8 04 38 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a205:	89 c2                	mov    %eax,%edx
f011a207:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a20a:	29 d0                	sub    %edx,%eax
f011a20c:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011a211:	7f 17                	jg     f011a22a <test_kmalloc+0x257>
f011a213:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a21a:	83 ec 0c             	sub    $0xc,%esp
f011a21d:	68 ac df 12 f0       	push   $0xf012dfac
f011a222:	e8 45 6d fe ff       	call   f0100f6c <cprintf>
f011a227:	83 c4 10             	add    $0x10,%esp

		//2 KB - 1 (should be allocated by dynamic allocator not page allocator)
		freeFrames = (int)sys_calculate_free_frames() ;
f011a22a:	e8 da 37 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a22f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a232:	e8 09 a6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a237:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo-1);
f011a23a:	83 ec 0c             	sub    $0xc,%esp
f011a23d:	68 ff 07 00 00       	push   $0x7ff
f011a242:	e8 6f e8 fe ff       	call   f0108ab6 <kmalloc>
f011a247:	83 c4 10             	add    $0x10,%esp
f011a24a:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f011a250:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a256:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011a25b:	76 28                	jbe    f011a285 <test_kmalloc+0x2b2>
f011a25d:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f011a263:	83 ec 0c             	sub    $0xc,%esp
f011a266:	6a 00                	push   $0x0
f011a268:	e8 3f e8 fe ff       	call   f0108aac <sbrk>
f011a26d:	83 c4 10             	add    $0x10,%esp
f011a270:	39 c3                	cmp    %eax,%ebx
f011a272:	73 11                	jae    f011a285 <test_kmalloc+0x2b2>
f011a274:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a27a:	89 c2                	mov    %eax,%edx
f011a27c:	a1 d8 dd 17 f0       	mov    0xf017ddd8,%eax
f011a281:	39 c2                	cmp    %eax,%edx
f011a283:	72 17                	jb     f011a29c <test_kmalloc+0x2c9>
		{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011a285:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a28c:	83 ec 0c             	sub    $0xc,%esp
f011a28f:	68 40 e0 12 f0       	push   $0xf012e040
f011a294:	e8 d3 6c fe ff       	call   f0100f6c <cprintf>
f011a299:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a29c:	e8 9f a5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a2a1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a2a4:	74 17                	je     f011a2bd <test_kmalloc+0x2ea>
f011a2a6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a2ad:	83 ec 0c             	sub    $0xc,%esp
f011a2b0:	68 40 df 12 f0       	push   $0xf012df40
f011a2b5:	e8 b2 6c fe ff       	call   f0100f6c <cprintf>
f011a2ba:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - (int)sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//2 KB - 1 (should be allocated by dynamic allocator not page allocator)
		freeFrames = (int)sys_calculate_free_frames() ;
f011a2bd:	e8 47 37 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a2c2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a2c5:	e8 76 a5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a2ca:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo-1);
f011a2cd:	83 ec 0c             	sub    $0xc,%esp
f011a2d0:	68 ff 07 00 00       	push   $0x7ff
f011a2d5:	e8 dc e7 fe ff       	call   f0108ab6 <kmalloc>
f011a2da:	83 c4 10             	add    $0x10,%esp
f011a2dd:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f011a2e3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011a2e9:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011a2ee:	76 28                	jbe    f011a318 <test_kmalloc+0x345>
f011a2f0:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f011a2f6:	83 ec 0c             	sub    $0xc,%esp
f011a2f9:	6a 00                	push   $0x0
f011a2fb:	e8 ac e7 fe ff       	call   f0108aac <sbrk>
f011a300:	83 c4 10             	add    $0x10,%esp
f011a303:	39 c3                	cmp    %eax,%ebx
f011a305:	73 11                	jae    f011a318 <test_kmalloc+0x345>
f011a307:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011a30d:	89 c2                	mov    %eax,%edx
f011a30f:	a1 d8 dd 17 f0       	mov    0xf017ddd8,%eax
f011a314:	39 c2                	cmp    %eax,%edx
f011a316:	72 17                	jb     f011a32f <test_kmalloc+0x35c>
		{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011a318:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a31f:	83 ec 0c             	sub    $0xc,%esp
f011a322:	68 40 e0 12 f0       	push   $0xf012e040
f011a327:	e8 40 6c fe ff       	call   f0100f6c <cprintf>
f011a32c:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a32f:	e8 0c a5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a334:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a337:	74 17                	je     f011a350 <test_kmalloc+0x37d>
f011a339:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a340:	83 ec 0c             	sub    $0xc,%esp
f011a343:	68 40 df 12 f0       	push   $0xf012df40
f011a348:	e8 1f 6c fe ff       	call   f0100f6c <cprintf>
f011a34d:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - (int)sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//7 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011a350:	e8 b4 36 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a355:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a358:	e8 e3 a4 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a35d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011a360:	83 ec 0c             	sub    $0xc,%esp
f011a363:	68 00 1c 00 00       	push   $0x1c00
f011a368:	e8 49 e7 fe ff       	call   f0108ab6 <kmalloc>
f011a36d:	83 c4 10             	add    $0x10,%esp
f011a370:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega /*+ 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011a376:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a37c:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011a381:	74 17                	je     f011a39a <test_kmalloc+0x3c7>
f011a383:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a38a:	83 ec 0c             	sub    $0xc,%esp
f011a38d:	68 f0 df 12 f0       	push   $0xf012dff0
f011a392:	e8 d5 6b fe ff       	call   f0100f6c <cprintf>
f011a397:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a39a:	e8 a1 a4 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a39f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a3a2:	74 17                	je     f011a3bb <test_kmalloc+0x3e8>
f011a3a4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a3ab:	83 ec 0c             	sub    $0xc,%esp
f011a3ae:	68 40 df 12 f0       	push   $0xf012df40
f011a3b3:	e8 b4 6b fe ff       	call   f0100f6c <cprintf>
f011a3b8:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a3bb:	e8 49 36 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a3c0:	89 c2                	mov    %eax,%edx
f011a3c2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a3c5:	29 d0                	sub    %edx,%eax
f011a3c7:	83 f8 01             	cmp    $0x1,%eax
f011a3ca:	7f 17                	jg     f011a3e3 <test_kmalloc+0x410>
f011a3cc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a3d3:	83 ec 0c             	sub    $0xc,%esp
f011a3d6:	68 ac df 12 f0       	push   $0xf012dfac
f011a3db:	e8 8c 6b fe ff       	call   f0100f6c <cprintf>
f011a3e0:	83 c4 10             	add    $0x10,%esp

		//3 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011a3e3:	e8 21 36 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a3e8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a3eb:	e8 50 a4 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a3f0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011a3f3:	83 ec 0c             	sub    $0xc,%esp
f011a3f6:	68 00 fc 2f 00       	push   $0x2ffc00
f011a3fb:	e8 b6 e6 fe ff       	call   f0108ab6 <kmalloc>
f011a400:	83 c4 10             	add    $0x10,%esp
f011a403:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011a409:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011a40f:	3d 00 30 40 f8       	cmp    $0xf8403000,%eax
f011a414:	74 17                	je     f011a42d <test_kmalloc+0x45a>
f011a416:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a41d:	83 ec 0c             	sub    $0xc,%esp
f011a420:	68 f0 df 12 f0       	push   $0xf012dff0
f011a425:	e8 42 6b fe ff       	call   f0100f6c <cprintf>
f011a42a:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a42d:	e8 0e a4 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a432:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a435:	74 17                	je     f011a44e <test_kmalloc+0x47b>
f011a437:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a43e:	83 ec 0c             	sub    $0xc,%esp
f011a441:	68 40 df 12 f0       	push   $0xf012df40
f011a446:	e8 21 6b fe ff       	call   f0100f6c <cprintf>
f011a44b:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a44e:	e8 b6 35 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a453:	89 c2                	mov    %eax,%edx
f011a455:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a458:	29 d0                	sub    %edx,%eax
f011a45a:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011a45f:	7f 17                	jg     f011a478 <test_kmalloc+0x4a5>
f011a461:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a468:	83 ec 0c             	sub    $0xc,%esp
f011a46b:	68 ac df 12 f0       	push   $0xf012dfac
f011a470:	e8 f7 6a fe ff       	call   f0100f6c <cprintf>
f011a475:	83 c4 10             	add    $0x10,%esp

		//6 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011a478:	e8 8c 35 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a47d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a480:	e8 bb a3 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a485:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011a488:	83 ec 0c             	sub    $0xc,%esp
f011a48b:	68 00 fc 5f 00       	push   $0x5ffc00
f011a490:	e8 21 e6 fe ff       	call   f0108ab6 <kmalloc>
f011a495:	83 c4 10             	add    $0x10,%esp
f011a498:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011a49e:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a4a4:	3d 00 30 70 f8       	cmp    $0xf8703000,%eax
f011a4a9:	74 17                	je     f011a4c2 <test_kmalloc+0x4ef>
f011a4ab:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a4b2:	83 ec 0c             	sub    $0xc,%esp
f011a4b5:	68 f0 df 12 f0       	push   $0xf012dff0
f011a4ba:	e8 ad 6a fe ff       	call   f0100f6c <cprintf>
f011a4bf:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a4c2:	e8 79 a3 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a4c7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a4ca:	74 17                	je     f011a4e3 <test_kmalloc+0x510>
f011a4cc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a4d3:	83 ec 0c             	sub    $0xc,%esp
f011a4d6:	68 40 df 12 f0       	push   $0xf012df40
f011a4db:	e8 8c 6a fe ff       	call   f0100f6c <cprintf>
f011a4e0:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 1536) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a4e3:	e8 21 35 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a4e8:	89 c2                	mov    %eax,%edx
f011a4ea:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a4ed:	29 d0                	sub    %edx,%eax
f011a4ef:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011a4f4:	7f 17                	jg     f011a50d <test_kmalloc+0x53a>
f011a4f6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a4fd:	83 ec 0c             	sub    $0xc,%esp
f011a500:	68 ac df 12 f0       	push   $0xf012dfac
f011a505:	e8 62 6a fe ff       	call   f0100f6c <cprintf>
f011a50a:	83 c4 10             	add    $0x10,%esp

		//14 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011a50d:	e8 f7 34 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a512:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a515:	e8 26 a3 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a51a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011a51d:	83 ec 0c             	sub    $0xc,%esp
f011a520:	68 00 38 00 00       	push   $0x3800
f011a525:	e8 8c e5 fe ff       	call   f0108ab6 <kmalloc>
f011a52a:	83 c4 10             	add    $0x10,%esp
f011a52d:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011a533:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011a539:	3d 00 30 d0 f8       	cmp    $0xf8d03000,%eax
f011a53e:	74 17                	je     f011a557 <test_kmalloc+0x584>
f011a540:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a547:	83 ec 0c             	sub    $0xc,%esp
f011a54a:	68 f0 df 12 f0       	push   $0xf012dff0
f011a54f:	e8 18 6a fe ff       	call   f0100f6c <cprintf>
f011a554:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a557:	e8 e4 a2 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a55c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a55f:	74 17                	je     f011a578 <test_kmalloc+0x5a5>
f011a561:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a568:	83 ec 0c             	sub    $0xc,%esp
f011a56b:	68 40 df 12 f0       	push   $0xf012df40
f011a570:	e8 f7 69 fe ff       	call   f0100f6c <cprintf>
f011a575:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a578:	e8 8c 34 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a57d:	89 c2                	mov    %eax,%edx
f011a57f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a582:	29 d0                	sub    %edx,%eax
f011a584:	83 f8 03             	cmp    $0x3,%eax
f011a587:	7f 17                	jg     f011a5a0 <test_kmalloc+0x5cd>
f011a589:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a590:	83 ec 0c             	sub    $0xc,%esp
f011a593:	68 ac df 12 f0       	push   $0xf012dfac
f011a598:	e8 cf 69 fe ff       	call   f0100f6c <cprintf>
f011a59d:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=40 ;
f011a5a0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011a5a4:	74 04                	je     f011a5aa <test_kmalloc+0x5d7>
f011a5a6:	83 45 f4 28          	addl   $0x28,-0xc(%ebp)

	correct = 1 ;
f011a5aa:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Checking read/write on the allocated spaces
	{

		freeFrames = (int)sys_calculate_free_frames() ;
f011a5b1:	e8 53 34 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a5b6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a5b9:	e8 82 a2 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a5be:	89 45 d0             	mov    %eax,-0x30(%ebp)

		//Write values
		//In 1st 2 MB
		lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f011a5c1:	c7 45 c8 ff fb 1f 00 	movl   $0x1ffbff,-0x38(%ebp)
		byteArr = (char *) ptr_allocations[0];
f011a5c8:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011a5ce:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		byteArr[0] = minByte ;
f011a5d1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a5d4:	8a 55 eb             	mov    -0x15(%ebp),%dl
f011a5d7:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte ;
f011a5d9:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011a5dc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a5df:	01 c2                	add    %eax,%edx
f011a5e1:	8a 45 ea             	mov    -0x16(%ebp),%al
f011a5e4:	88 02                	mov    %al,(%edx)

		//In 2nd 2 MB
		shortArr = (short *) ptr_allocations[1];
f011a5e6:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011a5ec:	89 45 c0             	mov    %eax,-0x40(%ebp)
		lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f011a5ef:	c7 45 bc ff fd 0f 00 	movl   $0xffdff,-0x44(%ebp)
		shortArr[0] = minShort;
f011a5f6:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011a5f9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a5fc:	66 89 02             	mov    %ax,(%edx)
		shortArr[lastIndexOfShort] = maxShort;
f011a5ff:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011a602:	01 c0                	add    %eax,%eax
f011a604:	89 c2                	mov    %eax,%edx
f011a606:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a609:	01 c2                	add    %eax,%edx
f011a60b:	66 8b 45 e6          	mov    -0x1a(%ebp),%ax
f011a60f:	66 89 02             	mov    %ax,(%edx)

		//In Dynamic Allocator Area
		{
			//In 2 KB - 1
			intArr = (int *) ptr_allocations[2];
f011a612:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011a618:	89 45 b8             	mov    %eax,-0x48(%ebp)
			lastIndexOfInt = (2*kilo-1)/sizeof(int) - 1;
f011a61b:	c7 45 b4 fe 01 00 00 	movl   $0x1fe,-0x4c(%ebp)
			intArr[0] = minInt;
f011a622:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a625:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011a628:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f011a62a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011a62d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011a634:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a637:	01 c2                	add    %eax,%edx
f011a639:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a63c:	89 02                	mov    %eax,(%edx)

			//In 2 KB - 1
			byteArr2 = (char *) ptr_allocations[3];
f011a63e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011a644:	89 45 b0             	mov    %eax,-0x50(%ebp)
			lastIndexOfByte2 = (2*kilo-1)/sizeof(char) - 1;
f011a647:	c7 45 ac fe 07 00 00 	movl   $0x7fe,-0x54(%ebp)
			byteArr2[0] = minByte;
f011a64e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a651:	8a 55 eb             	mov    -0x15(%ebp),%dl
f011a654:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2] = maxByte;
f011a656:	8b 55 ac             	mov    -0x54(%ebp),%edx
f011a659:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a65c:	01 c2                	add    %eax,%edx
f011a65e:	8a 45 ea             	mov    -0x16(%ebp),%al
f011a661:	88 02                	mov    %al,(%edx)
		}

		//In 7 KB
		structArr = (struct MyStruct *) ptr_allocations[4];
f011a663:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011a669:	89 45 a8             	mov    %eax,-0x58(%ebp)
		lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f011a66c:	c7 45 a4 7f 03 00 00 	movl   $0x37f,-0x5c(%ebp)
		structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f011a673:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a676:	8a 55 eb             	mov    -0x15(%ebp),%dl
f011a679:	88 10                	mov    %dl,(%eax)
f011a67b:	8b 55 a8             	mov    -0x58(%ebp),%edx
f011a67e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a681:	66 89 42 02          	mov    %ax,0x2(%edx)
f011a685:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a688:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011a68b:	89 50 04             	mov    %edx,0x4(%eax)
		structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f011a68e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a691:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011a698:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a69b:	01 c2                	add    %eax,%edx
f011a69d:	8a 45 ea             	mov    -0x16(%ebp),%al
f011a6a0:	88 02                	mov    %al,(%edx)
f011a6a2:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a6a5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011a6ac:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a6af:	01 c2                	add    %eax,%edx
f011a6b1:	66 8b 45 e6          	mov    -0x1a(%ebp),%ax
f011a6b5:	66 89 42 02          	mov    %ax,0x2(%edx)
f011a6b9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a6bc:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011a6c3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a6c6:	01 c2                	add    %eax,%edx
f011a6c8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011a6cb:	89 42 04             	mov    %eax,0x4(%edx)

		//In 6 MB
		lastIndexOfByte3 = (6*Mega-kilo)/sizeof(char) - 1;
f011a6ce:	c7 45 a0 ff fb 5f 00 	movl   $0x5ffbff,-0x60(%ebp)
		byteArr3 = (char *) ptr_allocations[6];
f011a6d5:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011a6db:	89 45 9c             	mov    %eax,-0x64(%ebp)
		byteArr3[0] = minByte ;
f011a6de:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a6e1:	8a 55 eb             	mov    -0x15(%ebp),%dl
f011a6e4:	88 10                	mov    %dl,(%eax)
		byteArr3[lastIndexOfByte3 / 2] = maxByte / 2;
f011a6e6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a6e9:	89 c2                	mov    %eax,%edx
f011a6eb:	c1 ea 1f             	shr    $0x1f,%edx
f011a6ee:	01 d0                	add    %edx,%eax
f011a6f0:	d1 f8                	sar    %eax
f011a6f2:	89 c2                	mov    %eax,%edx
f011a6f4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a6f7:	01 c2                	add    %eax,%edx
f011a6f9:	8a 45 ea             	mov    -0x16(%ebp),%al
f011a6fc:	88 c1                	mov    %al,%cl
f011a6fe:	c0 e9 07             	shr    $0x7,%cl
f011a701:	01 c8                	add    %ecx,%eax
f011a703:	d0 f8                	sar    %al
f011a705:	88 02                	mov    %al,(%edx)
		byteArr3[lastIndexOfByte3] = maxByte ;
f011a707:	8b 55 a0             	mov    -0x60(%ebp),%edx
f011a70a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a70d:	01 c2                	add    %eax,%edx
f011a70f:	8a 45 ea             	mov    -0x16(%ebp),%al
f011a712:	88 02                	mov    %al,(%edx)

		//In 14 KB
		shortArr2 = (short *) ptr_allocations[7];
f011a714:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011a71a:	89 45 98             	mov    %eax,-0x68(%ebp)
		lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f011a71d:	c7 45 94 ff 1b 00 00 	movl   $0x1bff,-0x6c(%ebp)
		shortArr2[0] = minShort;
f011a724:	8b 55 98             	mov    -0x68(%ebp),%edx
f011a727:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a72a:	66 89 02             	mov    %ax,(%edx)
		shortArr2[lastIndexOfShort2] = maxShort;
f011a72d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011a730:	01 c0                	add    %eax,%eax
f011a732:	89 c2                	mov    %eax,%edx
f011a734:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a737:	01 c2                	add    %eax,%edx
f011a739:	66 8b 45 e6          	mov    -0x1a(%ebp),%ax
f011a73d:	66 89 02             	mov    %ax,(%edx)

		//Read values: check that the values are successfully written
		if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a740:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a743:	8a 00                	mov    (%eax),%al
f011a745:	3a 45 eb             	cmp    -0x15(%ebp),%al
f011a748:	75 0f                	jne    f011a759 <test_kmalloc+0x786>
f011a74a:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011a74d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a750:	01 d0                	add    %edx,%eax
f011a752:	8a 00                	mov    (%eax),%al
f011a754:	3a 45 ea             	cmp    -0x16(%ebp),%al
f011a757:	74 17                	je     f011a770 <test_kmalloc+0x79d>
f011a759:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a760:	83 ec 0c             	sub    $0xc,%esp
f011a763:	68 c8 e0 12 f0       	push   $0xf012e0c8
f011a768:	e8 ff 67 fe ff       	call   f0100f6c <cprintf>
f011a76d:	83 c4 10             	add    $0x10,%esp
		if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a770:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a773:	66 8b 00             	mov    (%eax),%ax
f011a776:	66 3b 45 e8          	cmp    -0x18(%ebp),%ax
f011a77a:	75 15                	jne    f011a791 <test_kmalloc+0x7be>
f011a77c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011a77f:	01 c0                	add    %eax,%eax
f011a781:	89 c2                	mov    %eax,%edx
f011a783:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a786:	01 d0                	add    %edx,%eax
f011a788:	66 8b 00             	mov    (%eax),%ax
f011a78b:	66 3b 45 e6          	cmp    -0x1a(%ebp),%ax
f011a78f:	74 17                	je     f011a7a8 <test_kmalloc+0x7d5>
f011a791:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a798:	83 ec 0c             	sub    $0xc,%esp
f011a79b:	68 c8 e0 12 f0       	push   $0xf012e0c8
f011a7a0:	e8 c7 67 fe ff       	call   f0100f6c <cprintf>
f011a7a5:	83 c4 10             	add    $0x10,%esp
		if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a7a8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a7ab:	8b 00                	mov    (%eax),%eax
f011a7ad:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011a7b0:	75 16                	jne    f011a7c8 <test_kmalloc+0x7f5>
f011a7b2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011a7b5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011a7bc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a7bf:	01 d0                	add    %edx,%eax
f011a7c1:	8b 00                	mov    (%eax),%eax
f011a7c3:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011a7c6:	74 17                	je     f011a7df <test_kmalloc+0x80c>
f011a7c8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a7cf:	83 ec 0c             	sub    $0xc,%esp
f011a7d2:	68 c8 e0 12 f0       	push   $0xf012e0c8
f011a7d7:	e8 90 67 fe ff       	call   f0100f6c <cprintf>
f011a7dc:	83 c4 10             	add    $0x10,%esp
		if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2] != maxByte) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a7df:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a7e2:	8a 00                	mov    (%eax),%al
f011a7e4:	3a 45 eb             	cmp    -0x15(%ebp),%al
f011a7e7:	75 0f                	jne    f011a7f8 <test_kmalloc+0x825>
f011a7e9:	8b 55 ac             	mov    -0x54(%ebp),%edx
f011a7ec:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a7ef:	01 d0                	add    %edx,%eax
f011a7f1:	8a 00                	mov    (%eax),%al
f011a7f3:	3a 45 ea             	cmp    -0x16(%ebp),%al
f011a7f6:	74 17                	je     f011a80f <test_kmalloc+0x83c>
f011a7f8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a7ff:	83 ec 0c             	sub    $0xc,%esp
f011a802:	68 c8 e0 12 f0       	push   $0xf012e0c8
f011a807:	e8 60 67 fe ff       	call   f0100f6c <cprintf>
f011a80c:	83 c4 10             	add    $0x10,%esp

		if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	{ correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a80f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a812:	8a 00                	mov    (%eax),%al
f011a814:	3a 45 eb             	cmp    -0x15(%ebp),%al
f011a817:	75 16                	jne    f011a82f <test_kmalloc+0x85c>
f011a819:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a81c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011a823:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a826:	01 d0                	add    %edx,%eax
f011a828:	8a 00                	mov    (%eax),%al
f011a82a:	3a 45 ea             	cmp    -0x16(%ebp),%al
f011a82d:	74 17                	je     f011a846 <test_kmalloc+0x873>
f011a82f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a836:	83 ec 0c             	sub    $0xc,%esp
f011a839:	68 c8 e0 12 f0       	push   $0xf012e0c8
f011a83e:	e8 29 67 fe ff       	call   f0100f6c <cprintf>
f011a843:	83 c4 10             	add    $0x10,%esp
		if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	{ correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a846:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a849:	66 8b 40 02          	mov    0x2(%eax),%ax
f011a84d:	66 3b 45 e8          	cmp    -0x18(%ebp),%ax
f011a851:	75 19                	jne    f011a86c <test_kmalloc+0x899>
f011a853:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a856:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011a85d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a860:	01 d0                	add    %edx,%eax
f011a862:	66 8b 40 02          	mov    0x2(%eax),%ax
f011a866:	66 3b 45 e6          	cmp    -0x1a(%ebp),%ax
f011a86a:	74 17                	je     f011a883 <test_kmalloc+0x8b0>
f011a86c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a873:	83 ec 0c             	sub    $0xc,%esp
f011a876:	68 c8 e0 12 f0       	push   $0xf012e0c8
f011a87b:	e8 ec 66 fe ff       	call   f0100f6c <cprintf>
f011a880:	83 c4 10             	add    $0x10,%esp
		if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	{ correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a883:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a886:	8b 40 04             	mov    0x4(%eax),%eax
f011a889:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011a88c:	75 17                	jne    f011a8a5 <test_kmalloc+0x8d2>
f011a88e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a891:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011a898:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a89b:	01 d0                	add    %edx,%eax
f011a89d:	8b 40 04             	mov    0x4(%eax),%eax
f011a8a0:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011a8a3:	74 17                	je     f011a8bc <test_kmalloc+0x8e9>
f011a8a5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a8ac:	83 ec 0c             	sub    $0xc,%esp
f011a8af:	68 c8 e0 12 f0       	push   $0xf012e0c8
f011a8b4:	e8 b3 66 fe ff       	call   f0100f6c <cprintf>
f011a8b9:	83 c4 10             	add    $0x10,%esp

		if (byteArr3[0] != minByte || byteArr3[lastIndexOfByte3/2] != maxByte/2 || byteArr3[lastIndexOfByte3] != maxByte) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a8bc:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a8bf:	8a 00                	mov    (%eax),%al
f011a8c1:	3a 45 eb             	cmp    -0x15(%ebp),%al
f011a8c4:	75 34                	jne    f011a8fa <test_kmalloc+0x927>
f011a8c6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a8c9:	89 c2                	mov    %eax,%edx
f011a8cb:	c1 ea 1f             	shr    $0x1f,%edx
f011a8ce:	01 d0                	add    %edx,%eax
f011a8d0:	d1 f8                	sar    %eax
f011a8d2:	89 c2                	mov    %eax,%edx
f011a8d4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a8d7:	01 d0                	add    %edx,%eax
f011a8d9:	8a 10                	mov    (%eax),%dl
f011a8db:	8a 45 ea             	mov    -0x16(%ebp),%al
f011a8de:	88 c1                	mov    %al,%cl
f011a8e0:	c0 e9 07             	shr    $0x7,%cl
f011a8e3:	01 c8                	add    %ecx,%eax
f011a8e5:	d0 f8                	sar    %al
f011a8e7:	38 c2                	cmp    %al,%dl
f011a8e9:	75 0f                	jne    f011a8fa <test_kmalloc+0x927>
f011a8eb:	8b 55 a0             	mov    -0x60(%ebp),%edx
f011a8ee:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a8f1:	01 d0                	add    %edx,%eax
f011a8f3:	8a 00                	mov    (%eax),%al
f011a8f5:	3a 45 ea             	cmp    -0x16(%ebp),%al
f011a8f8:	74 17                	je     f011a911 <test_kmalloc+0x93e>
f011a8fa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a901:	83 ec 0c             	sub    $0xc,%esp
f011a904:	68 c8 e0 12 f0       	push   $0xf012e0c8
f011a909:	e8 5e 66 fe ff       	call   f0100f6c <cprintf>
f011a90e:	83 c4 10             	add    $0x10,%esp
		if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f011a911:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a914:	66 8b 00             	mov    (%eax),%ax
f011a917:	66 3b 45 e8          	cmp    -0x18(%ebp),%ax
f011a91b:	75 15                	jne    f011a932 <test_kmalloc+0x95f>
f011a91d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011a920:	01 c0                	add    %eax,%eax
f011a922:	89 c2                	mov    %eax,%edx
f011a924:	8b 45 98             	mov    -0x68(%ebp),%eax
f011a927:	01 d0                	add    %edx,%eax
f011a929:	66 8b 00             	mov    (%eax),%ax
f011a92c:	66 3b 45 e6          	cmp    -0x1a(%ebp),%ax
f011a930:	74 17                	je     f011a949 <test_kmalloc+0x976>
f011a932:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a939:	83 ec 0c             	sub    $0xc,%esp
f011a93c:	68 c8 e0 12 f0       	push   $0xf012e0c8
f011a941:	e8 26 66 fe ff       	call   f0100f6c <cprintf>
f011a946:	83 c4 10             	add    $0x10,%esp

		if ((freeFrames - (int)sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a949:	e8 bb 30 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a94e:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011a951:	74 17                	je     f011a96a <test_kmalloc+0x997>
f011a953:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a95a:	83 ec 0c             	sub    $0xc,%esp
f011a95d:	68 ac df 12 f0       	push   $0xf012dfac
f011a962:	e8 05 66 fe ff       	call   f0100f6c <cprintf>
f011a967:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a96a:	e8 d1 9e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a96f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a972:	74 17                	je     f011a98b <test_kmalloc+0x9b8>
f011a974:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a97b:	83 ec 0c             	sub    $0xc,%esp
f011a97e:	68 40 df 12 f0       	push   $0xf012df40
f011a983:	e8 e4 65 fe ff       	call   f0100f6c <cprintf>
f011a988:	83 c4 10             	add    $0x10,%esp

	}
	if (correct)	eval+=30 ;
f011a98b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011a98f:	74 04                	je     f011a995 <test_kmalloc+0x9c2>
f011a991:	83 45 f4 1e          	addl   $0x1e,-0xc(%ebp)

	correct = 1 ;
f011a995:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Insufficient space again
	{
		freeFrames = (int)sys_calculate_free_frames() ;
f011a99c:	e8 68 30 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a9a1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a9a4:	e8 97 9e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a9a9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+/*4*kilo+4*kilo+*/8*kilo+3*Mega+6*Mega+16*kilo) ;
f011a9ac:	c7 45 90 00 a0 2f 07 	movl   $0x72fa000,-0x70(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f011a9b3:	83 ec 0c             	sub    $0xc,%esp
f011a9b6:	ff 75 90             	pushl  -0x70(%ebp)
f011a9b9:	e8 f8 e0 fe ff       	call   f0108ab6 <kmalloc>
f011a9be:	83 c4 10             	add    $0x10,%esp
f011a9c1:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
		if (ptr_allocations[8] != NULL) { correct = 0; cprintf("Allocating insufficient space: should return NULL\n"); }
f011a9c7:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011a9cd:	85 c0                	test   %eax,%eax
f011a9cf:	74 17                	je     f011a9e8 <test_kmalloc+0xa15>
f011a9d1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a9d8:	83 ec 0c             	sub    $0xc,%esp
f011a9db:	68 0c df 12 f0       	push   $0xf012df0c
f011a9e0:	e8 87 65 fe ff       	call   f0100f6c <cprintf>
f011a9e5:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a9e8:	e8 53 9e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a9ed:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011a9f0:	74 17                	je     f011aa09 <test_kmalloc+0xa36>
f011a9f2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a9f9:	83 ec 0c             	sub    $0xc,%esp
f011a9fc:	68 40 df 12 f0       	push   $0xf012df40
f011aa01:	e8 66 65 fe ff       	call   f0100f6c <cprintf>
f011aa06:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011aa09:	e8 fb 2f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011aa0e:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011aa11:	74 17                	je     f011aa2a <test_kmalloc+0xa57>
f011aa13:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011aa1a:	83 ec 0c             	sub    $0xc,%esp
f011aa1d:	68 ac df 12 f0       	push   $0xf012dfac
f011aa22:	e8 45 65 fe ff       	call   f0100f6c <cprintf>
f011aa27:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011aa2a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011aa2e:	74 04                	je     f011aa34 <test_kmalloc+0xa61>
f011aa30:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011aa34:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//permissions
	{
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f011aa3b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011aa41:	05 00 40 00 00       	add    $0x4000,%eax
f011aa46:	89 45 8c             	mov    %eax,-0x74(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f011aa49:	c7 45 ec 00 10 00 f8 	movl   $0xf8001000,-0x14(%ebp)
f011aa50:	eb 6a                	jmp    f011aabc <test_kmalloc+0xae9>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f011aa52:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f011aa57:	83 ec 04             	sub    $0x4,%esp
f011aa5a:	8d 95 34 ff ff ff    	lea    -0xcc(%ebp),%edx
f011aa60:	52                   	push   %edx
f011aa61:	ff 75 ec             	pushl  -0x14(%ebp)
f011aa64:	50                   	push   %eax
f011aa65:	e8 a3 d9 fe ff       	call   f010840d <get_page_table>
f011aa6a:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f011aa6d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011aa73:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011aa76:	c1 ea 0c             	shr    $0xc,%edx
f011aa79:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011aa7f:	c1 e2 02             	shl    $0x2,%edx
f011aa82:	01 d0                	add    %edx,%eax
f011aa84:	8b 00                	mov    (%eax),%eax
f011aa86:	25 ff 0f 00 00       	and    $0xfff,%eax
f011aa8b:	89 45 88             	mov    %eax,-0x78(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f011aa8e:	8b 45 88             	mov    -0x78(%ebp),%eax
f011aa91:	83 e0 04             	and    $0x4,%eax
f011aa94:	85 c0                	test   %eax,%eax
f011aa96:	74 1d                	je     f011aab5 <test_kmalloc+0xae2>
			{
				if (correct)
f011aa98:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011aa9c:	74 17                	je     f011aab5 <test_kmalloc+0xae2>
				{
					correct = 0; cprintf("Wrong permissions: pages should be mapped with Supervisor permission only\n");
f011aa9e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011aaa5:	83 ec 0c             	sub    $0xc,%esp
f011aaa8:	68 00 e1 12 f0       	push   $0xf012e100
f011aaad:	e8 ba 64 fe ff       	call   f0100f6c <cprintf>
f011aab2:	83 c4 10             	add    $0x10,%esp
	correct = 1 ;
	//permissions
	{
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f011aab5:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f011aabc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011aabf:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f011aac2:	72 8e                	jb     f011aa52 <test_kmalloc+0xa7f>
					correct = 0; cprintf("Wrong permissions: pages should be mapped with Supervisor permission only\n");
				}
			}
		}
	}
	if (correct)	eval+=10 ;
f011aac4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011aac8:	74 04                	je     f011aace <test_kmalloc+0xafb>
f011aaca:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	cprintf("\ntest kmalloc completed. Evaluation = %d%\n", eval);
f011aace:	83 ec 08             	sub    $0x8,%esp
f011aad1:	ff 75 f4             	pushl  -0xc(%ebp)
f011aad4:	68 4c e1 12 f0       	push   $0xf012e14c
f011aad9:	e8 8e 64 fe ff       	call   f0100f6c <cprintf>
f011aade:	83 c4 10             	add    $0x10,%esp

	return 1;
f011aae1:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011aae6:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011aae9:	5b                   	pop    %ebx
f011aaea:	5f                   	pop    %edi
f011aaeb:	5d                   	pop    %ebp
f011aaec:	c3                   	ret    

f011aaed <test_kmalloc_firstfit1>:


int test_kmalloc_firstfit1()
{
f011aaed:	55                   	push   %ebp
f011aaee:	89 e5                	mov    %esp,%ebp
f011aaf0:	57                   	push   %edi
f011aaf1:	83 ec 64             	sub    $0x64,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f011aaf4:	83 ec 0c             	sub    $0xc,%esp
f011aaf7:	68 80 de 12 f0       	push   $0xf012de80
f011aafc:	e8 6b 64 fe ff       	call   f0100f6c <cprintf>
f011ab01:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011ab04:	83 ec 0c             	sub    $0xc,%esp
f011ab07:	68 b0 de 12 f0       	push   $0xf012deb0
f011ab0c:	e8 5b 64 fe ff       	call   f0100f6c <cprintf>
f011ab11:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011ab14:	83 ec 0c             	sub    $0xc,%esp
f011ab17:	68 80 de 12 f0       	push   $0xf012de80
f011ab1c:	e8 4b 64 fe ff       	call   f0100f6c <cprintf>
f011ab21:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011ab24:	8d 55 98             	lea    -0x68(%ebp),%edx
f011ab27:	b9 14 00 00 00       	mov    $0x14,%ecx
f011ab2c:	b8 00 00 00 00       	mov    $0x0,%eax
f011ab31:	89 d7                	mov    %edx,%edi
f011ab33:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;
	int eval = 0;
f011ab35:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool correct = 1 ;
f011ab3c:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	correct = 1 ;
f011ab43:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011ab4a:	e8 ba 2e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ab4f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011ab52:	e8 e9 9c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ab57:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011ab5a:	83 ec 0c             	sub    $0xc,%esp
f011ab5d:	68 00 fc 0f 00       	push   $0xffc00
f011ab62:	e8 4f df fe ff       	call   f0108ab6 <kmalloc>
f011ab67:	83 c4 10             	add    $0x10,%esp
f011ab6a:	89 45 98             	mov    %eax,-0x68(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011ab6d:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ab70:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011ab75:	74 17                	je     f011ab8e <test_kmalloc_firstfit1+0xa1>
f011ab77:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ab7e:	83 ec 0c             	sub    $0xc,%esp
f011ab81:	68 78 e1 12 f0       	push   $0xf012e178
f011ab86:	e8 e1 63 fe ff       	call   f0100f6c <cprintf>
f011ab8b:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ab8e:	e8 ad 9c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ab93:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011ab96:	74 17                	je     f011abaf <test_kmalloc_firstfit1+0xc2>
f011ab98:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ab9f:	83 ec 0c             	sub    $0xc,%esp
f011aba2:	68 40 df 12 f0       	push   $0xf012df40
f011aba7:	e8 c0 63 fe ff       	call   f0100f6c <cprintf>
f011abac:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f011abaf:	e8 55 2e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011abb4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011abb7:	29 c2                	sub    %eax,%edx
f011abb9:	89 d0                	mov    %edx,%eax
f011abbb:	3d ff 00 00 00       	cmp    $0xff,%eax
f011abc0:	77 17                	ja     f011abd9 <test_kmalloc_firstfit1+0xec>
f011abc2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011abc9:	83 ec 0c             	sub    $0xc,%esp
f011abcc:	68 a9 e1 12 f0       	push   $0xf012e1a9
f011abd1:	e8 96 63 fe ff       	call   f0100f6c <cprintf>
f011abd6:	83 c4 10             	add    $0x10,%esp

		//Allocate 1 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011abd9:	e8 2b 2e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011abde:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011abe1:	e8 5a 9c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011abe6:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011abe9:	83 ec 0c             	sub    $0xc,%esp
f011abec:	68 00 fc 0f 00       	push   $0xffc00
f011abf1:	e8 c0 de fe ff       	call   f0108ab6 <kmalloc>
f011abf6:	83 c4 10             	add    $0x10,%esp
f011abf9:	89 45 9c             	mov    %eax,-0x64(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011abfc:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011abff:	3d 00 10 10 f8       	cmp    $0xf8101000,%eax
f011ac04:	74 17                	je     f011ac1d <test_kmalloc_firstfit1+0x130>
f011ac06:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ac0d:	83 ec 0c             	sub    $0xc,%esp
f011ac10:	68 78 e1 12 f0       	push   $0xf012e178
f011ac15:	e8 52 63 fe ff       	call   f0100f6c <cprintf>
f011ac1a:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ac1d:	e8 1e 9c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ac22:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011ac25:	74 17                	je     f011ac3e <test_kmalloc_firstfit1+0x151>
f011ac27:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ac2e:	83 ec 0c             	sub    $0xc,%esp
f011ac31:	68 40 df 12 f0       	push   $0xf012df40
f011ac36:	e8 31 63 fe ff       	call   f0100f6c <cprintf>
f011ac3b:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f011ac3e:	e8 c6 2d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ac43:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011ac46:	29 c2                	sub    %eax,%edx
f011ac48:	89 d0                	mov    %edx,%eax
f011ac4a:	3d ff 00 00 00       	cmp    $0xff,%eax
f011ac4f:	77 17                	ja     f011ac68 <test_kmalloc_firstfit1+0x17b>
f011ac51:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ac58:	83 ec 0c             	sub    $0xc,%esp
f011ac5b:	68 a9 e1 12 f0       	push   $0xf012e1a9
f011ac60:	e8 07 63 fe ff       	call   f0100f6c <cprintf>
f011ac65:	83 c4 10             	add    $0x10,%esp

		//Allocate 1 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011ac68:	e8 9c 2d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ac6d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011ac70:	e8 cb 9b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ac75:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011ac78:	83 ec 0c             	sub    $0xc,%esp
f011ac7b:	68 00 fc 0f 00       	push   $0xffc00
f011ac80:	e8 31 de fe ff       	call   f0108ab6 <kmalloc>
f011ac85:	83 c4 10             	add    $0x10,%esp
f011ac88:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011ac8b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ac8e:	3d 00 10 20 f8       	cmp    $0xf8201000,%eax
f011ac93:	74 17                	je     f011acac <test_kmalloc_firstfit1+0x1bf>
f011ac95:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ac9c:	83 ec 0c             	sub    $0xc,%esp
f011ac9f:	68 78 e1 12 f0       	push   $0xf012e178
f011aca4:	e8 c3 62 fe ff       	call   f0100f6c <cprintf>
f011aca9:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011acac:	e8 8f 9b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011acb1:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011acb4:	74 17                	je     f011accd <test_kmalloc_firstfit1+0x1e0>
f011acb6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011acbd:	83 ec 0c             	sub    $0xc,%esp
f011acc0:	68 40 df 12 f0       	push   $0xf012df40
f011acc5:	e8 a2 62 fe ff       	call   f0100f6c <cprintf>
f011acca:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f011accd:	e8 37 2d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011acd2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011acd5:	29 c2                	sub    %eax,%edx
f011acd7:	89 d0                	mov    %edx,%eax
f011acd9:	3d ff 00 00 00       	cmp    $0xff,%eax
f011acde:	77 17                	ja     f011acf7 <test_kmalloc_firstfit1+0x20a>
f011ace0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ace7:	83 ec 0c             	sub    $0xc,%esp
f011acea:	68 a9 e1 12 f0       	push   $0xf012e1a9
f011acef:	e8 78 62 fe ff       	call   f0100f6c <cprintf>
f011acf4:	83 c4 10             	add    $0x10,%esp

		//Allocate 1 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011acf7:	e8 0d 2d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011acfc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011acff:	e8 3c 9b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ad04:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011ad07:	83 ec 0c             	sub    $0xc,%esp
f011ad0a:	68 00 fc 0f 00       	push   $0xffc00
f011ad0f:	e8 a2 dd fe ff       	call   f0108ab6 <kmalloc>
f011ad14:	83 c4 10             	add    $0x10,%esp
f011ad17:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011ad1a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011ad1d:	3d 00 10 30 f8       	cmp    $0xf8301000,%eax
f011ad22:	74 17                	je     f011ad3b <test_kmalloc_firstfit1+0x24e>
f011ad24:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ad2b:	83 ec 0c             	sub    $0xc,%esp
f011ad2e:	68 78 e1 12 f0       	push   $0xf012e178
f011ad33:	e8 34 62 fe ff       	call   f0100f6c <cprintf>
f011ad38:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ad3b:	e8 00 9b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ad40:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011ad43:	74 17                	je     f011ad5c <test_kmalloc_firstfit1+0x26f>
f011ad45:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ad4c:	83 ec 0c             	sub    $0xc,%esp
f011ad4f:	68 40 df 12 f0       	push   $0xf012df40
f011ad54:	e8 13 62 fe ff       	call   f0100f6c <cprintf>
f011ad59:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f011ad5c:	e8 a8 2c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ad61:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011ad64:	29 c2                	sub    %eax,%edx
f011ad66:	89 d0                	mov    %edx,%eax
f011ad68:	3d ff 00 00 00       	cmp    $0xff,%eax
f011ad6d:	77 17                	ja     f011ad86 <test_kmalloc_firstfit1+0x299>
f011ad6f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ad76:	83 ec 0c             	sub    $0xc,%esp
f011ad79:	68 a9 e1 12 f0       	push   $0xf012e1a9
f011ad7e:	e8 e9 61 fe ff       	call   f0100f6c <cprintf>
f011ad83:	83 c4 10             	add    $0x10,%esp

		//Allocate 2 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011ad86:	e8 7e 2c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ad8b:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011ad8e:	e8 ad 9a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ad93:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011ad96:	83 ec 0c             	sub    $0xc,%esp
f011ad99:	68 00 fc 1f 00       	push   $0x1ffc00
f011ad9e:	e8 13 dd fe ff       	call   f0108ab6 <kmalloc>
f011ada3:	83 c4 10             	add    $0x10,%esp
f011ada6:	89 45 a8             	mov    %eax,-0x58(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011ada9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011adac:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011adb1:	74 17                	je     f011adca <test_kmalloc_firstfit1+0x2dd>
f011adb3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011adba:	83 ec 0c             	sub    $0xc,%esp
f011adbd:	68 78 e1 12 f0       	push   $0xf012e178
f011adc2:	e8 a5 61 fe ff       	call   f0100f6c <cprintf>
f011adc7:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011adca:	e8 71 9a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011adcf:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011add2:	74 17                	je     f011adeb <test_kmalloc_firstfit1+0x2fe>
f011add4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011addb:	83 ec 0c             	sub    $0xc,%esp
f011adde:	68 40 df 12 f0       	push   $0xf012df40
f011ade3:	e8 84 61 fe ff       	call   f0100f6c <cprintf>
f011ade8:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f011adeb:	e8 19 2c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011adf0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011adf3:	29 c2                	sub    %eax,%edx
f011adf5:	89 d0                	mov    %edx,%eax
f011adf7:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011adfc:	77 17                	ja     f011ae15 <test_kmalloc_firstfit1+0x328>
f011adfe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ae05:	83 ec 0c             	sub    $0xc,%esp
f011ae08:	68 a9 e1 12 f0       	push   $0xf012e1a9
f011ae0d:	e8 5a 61 fe ff       	call   f0100f6c <cprintf>
f011ae12:	83 c4 10             	add    $0x10,%esp

		//Allocate 2 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011ae15:	e8 ef 2b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ae1a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011ae1d:	e8 1e 9a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ae22:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011ae25:	83 ec 0c             	sub    $0xc,%esp
f011ae28:	68 00 fc 1f 00       	push   $0x1ffc00
f011ae2d:	e8 84 dc fe ff       	call   f0108ab6 <kmalloc>
f011ae32:	83 c4 10             	add    $0x10,%esp
f011ae35:	89 45 ac             	mov    %eax,-0x54(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011ae38:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011ae3b:	3d 00 10 60 f8       	cmp    $0xf8601000,%eax
f011ae40:	74 17                	je     f011ae59 <test_kmalloc_firstfit1+0x36c>
f011ae42:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ae49:	83 ec 0c             	sub    $0xc,%esp
f011ae4c:	68 78 e1 12 f0       	push   $0xf012e178
f011ae51:	e8 16 61 fe ff       	call   f0100f6c <cprintf>
f011ae56:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ae59:	e8 e2 99 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ae5e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011ae61:	74 17                	je     f011ae7a <test_kmalloc_firstfit1+0x38d>
f011ae63:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ae6a:	83 ec 0c             	sub    $0xc,%esp
f011ae6d:	68 40 df 12 f0       	push   $0xf012df40
f011ae72:	e8 f5 60 fe ff       	call   f0100f6c <cprintf>
f011ae77:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f011ae7a:	e8 8a 2b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ae7f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011ae82:	29 c2                	sub    %eax,%edx
f011ae84:	89 d0                	mov    %edx,%eax
f011ae86:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011ae8b:	77 17                	ja     f011aea4 <test_kmalloc_firstfit1+0x3b7>
f011ae8d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ae94:	83 ec 0c             	sub    $0xc,%esp
f011ae97:	68 a9 e1 12 f0       	push   $0xf012e1a9
f011ae9c:	e8 cb 60 fe ff       	call   f0100f6c <cprintf>
f011aea1:	83 c4 10             	add    $0x10,%esp

		//Allocate 3 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011aea4:	e8 60 2b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011aea9:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011aeac:	e8 8f 99 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011aeb1:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011aeb4:	83 ec 0c             	sub    $0xc,%esp
f011aeb7:	68 00 fc 2f 00       	push   $0x2ffc00
f011aebc:	e8 f5 db fe ff       	call   f0108ab6 <kmalloc>
f011aec1:	83 c4 10             	add    $0x10,%esp
f011aec4:	89 45 b0             	mov    %eax,-0x50(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011aec7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011aeca:	3d 00 10 80 f8       	cmp    $0xf8801000,%eax
f011aecf:	74 17                	je     f011aee8 <test_kmalloc_firstfit1+0x3fb>
f011aed1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011aed8:	83 ec 0c             	sub    $0xc,%esp
f011aedb:	68 78 e1 12 f0       	push   $0xf012e178
f011aee0:	e8 87 60 fe ff       	call   f0100f6c <cprintf>
f011aee5:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011aee8:	e8 53 99 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011aeed:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011aef0:	74 17                	je     f011af09 <test_kmalloc_firstfit1+0x41c>
f011aef2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011aef9:	83 ec 0c             	sub    $0xc,%esp
f011aefc:	68 40 df 12 f0       	push   $0xf012df40
f011af01:	e8 66 60 fe ff       	call   f0100f6c <cprintf>
f011af06:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: \n"); }
f011af09:	e8 fb 2a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011af0e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011af11:	29 c2                	sub    %eax,%edx
f011af13:	89 d0                	mov    %edx,%eax
f011af15:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011af1a:	77 17                	ja     f011af33 <test_kmalloc_firstfit1+0x446>
f011af1c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011af23:	83 ec 0c             	sub    $0xc,%esp
f011af26:	68 a9 e1 12 f0       	push   $0xf012e1a9
f011af2b:	e8 3c 60 fe ff       	call   f0100f6c <cprintf>
f011af30:	83 c4 10             	add    $0x10,%esp

		//Allocate 3 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011af33:	e8 d1 2a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011af38:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011af3b:	e8 00 99 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011af40:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011af43:	83 ec 0c             	sub    $0xc,%esp
f011af46:	68 00 fc 2f 00       	push   $0x2ffc00
f011af4b:	e8 66 db fe ff       	call   f0108ab6 <kmalloc>
f011af50:	83 c4 10             	add    $0x10,%esp
f011af53:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011af56:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011af59:	3d 00 10 b0 f8       	cmp    $0xf8b01000,%eax
f011af5e:	74 17                	je     f011af77 <test_kmalloc_firstfit1+0x48a>
f011af60:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011af67:	83 ec 0c             	sub    $0xc,%esp
f011af6a:	68 78 e1 12 f0       	push   $0xf012e178
f011af6f:	e8 f8 5f fe ff       	call   f0100f6c <cprintf>
f011af74:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011af77:	e8 c4 98 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011af7c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011af7f:	74 17                	je     f011af98 <test_kmalloc_firstfit1+0x4ab>
f011af81:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011af88:	83 ec 0c             	sub    $0xc,%esp
f011af8b:	68 40 df 12 f0       	push   $0xf012df40
f011af90:	e8 d7 5f fe ff       	call   f0100f6c <cprintf>
f011af95:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: \n"); }
f011af98:	e8 6c 2a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011af9d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011afa0:	29 c2                	sub    %eax,%edx
f011afa2:	89 d0                	mov    %edx,%eax
f011afa4:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011afa9:	77 17                	ja     f011afc2 <test_kmalloc_firstfit1+0x4d5>
f011afab:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011afb2:	83 ec 0c             	sub    $0xc,%esp
f011afb5:	68 a9 e1 12 f0       	push   $0xf012e1a9
f011afba:	e8 ad 5f fe ff       	call   f0100f6c <cprintf>
f011afbf:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011afc2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011afc6:	74 04                	je     f011afcc <test_kmalloc_firstfit1+0x4df>
f011afc8:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011afcc:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011afd3:	e8 31 2a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011afd8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011afdb:	e8 60 98 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011afe0:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[1]);
f011afe3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011afe6:	83 ec 0c             	sub    $0xc,%esp
f011afe9:	50                   	push   %eax
f011afea:	e8 e1 da fe ff       	call   f0108ad0 <kfree>
f011afef:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011aff2:	e8 49 98 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011aff7:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011affa:	74 17                	je     f011b013 <test_kmalloc_firstfit1+0x526>
f011affc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b003:	83 ec 0c             	sub    $0xc,%esp
f011b006:	68 40 df 12 f0       	push   $0xf012df40
f011b00b:	e8 5c 5f fe ff       	call   f0100f6c <cprintf>
f011b010:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 256) { correct = 0; cprintf("Wrong free: \n"); }
f011b013:	e8 f1 29 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b018:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011b01b:	3d ff 00 00 00       	cmp    $0xff,%eax
f011b020:	77 17                	ja     f011b039 <test_kmalloc_firstfit1+0x54c>
f011b022:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b029:	83 ec 0c             	sub    $0xc,%esp
f011b02c:	68 bd e1 12 f0       	push   $0xf012e1bd
f011b031:	e8 36 5f fe ff       	call   f0100f6c <cprintf>
f011b036:	83 c4 10             	add    $0x10,%esp

		//2 MB Hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011b039:	e8 cb 29 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b03e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b041:	e8 fa 97 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b046:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[4]);
f011b049:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b04c:	83 ec 0c             	sub    $0xc,%esp
f011b04f:	50                   	push   %eax
f011b050:	e8 7b da fe ff       	call   f0108ad0 <kfree>
f011b055:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b058:	e8 e3 97 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b05d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b060:	74 17                	je     f011b079 <test_kmalloc_firstfit1+0x58c>
f011b062:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b069:	83 ec 0c             	sub    $0xc,%esp
f011b06c:	68 40 df 12 f0       	push   $0xf012df40
f011b071:	e8 f6 5e fe ff       	call   f0100f6c <cprintf>
f011b076:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong free: \n"); }
f011b079:	e8 8b 29 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b07e:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011b081:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011b086:	77 17                	ja     f011b09f <test_kmalloc_firstfit1+0x5b2>
f011b088:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b08f:	83 ec 0c             	sub    $0xc,%esp
f011b092:	68 bd e1 12 f0       	push   $0xf012e1bd
f011b097:	e8 d0 5e fe ff       	call   f0100f6c <cprintf>
f011b09c:	83 c4 10             	add    $0x10,%esp

		//3 MB Hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011b09f:	e8 65 29 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b0a4:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b0a7:	e8 94 97 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b0ac:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[6]);
f011b0af:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011b0b2:	83 ec 0c             	sub    $0xc,%esp
f011b0b5:	50                   	push   %eax
f011b0b6:	e8 15 da fe ff       	call   f0108ad0 <kfree>
f011b0bb:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b0be:	e8 7d 97 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b0c3:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b0c6:	74 17                	je     f011b0df <test_kmalloc_firstfit1+0x5f2>
f011b0c8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b0cf:	83 ec 0c             	sub    $0xc,%esp
f011b0d2:	68 40 df 12 f0       	push   $0xf012df40
f011b0d7:	e8 90 5e fe ff       	call   f0100f6c <cprintf>
f011b0dc:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 768) { correct = 0; cprintf("Wrong free: \n"); }
f011b0df:	e8 25 29 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b0e4:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011b0e7:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011b0ec:	77 17                	ja     f011b105 <test_kmalloc_firstfit1+0x618>
f011b0ee:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b0f5:	83 ec 0c             	sub    $0xc,%esp
f011b0f8:	68 bd e1 12 f0       	push   $0xf012e1bd
f011b0fd:	e8 6a 5e fe ff       	call   f0100f6c <cprintf>
f011b102:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011b105:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011b109:	74 04                	je     f011b10f <test_kmalloc_firstfit1+0x622>
f011b10b:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011b10f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011b116:	e8 ee 28 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b11b:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b11e:	e8 1d 97 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b123:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011b126:	83 ec 0c             	sub    $0xc,%esp
f011b129:	68 00 fc 07 00       	push   $0x7fc00
f011b12e:	e8 83 d9 fe ff       	call   f0108ab6 <kmalloc>
f011b133:	83 c4 10             	add    $0x10,%esp
f011b136:	89 45 b8             	mov    %eax,-0x48(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b139:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011b13c:	3d 00 10 10 f8       	cmp    $0xf8101000,%eax
f011b141:	74 17                	je     f011b15a <test_kmalloc_firstfit1+0x66d>
f011b143:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b14a:	83 ec 0c             	sub    $0xc,%esp
f011b14d:	68 78 e1 12 f0       	push   $0xf012e178
f011b152:	e8 15 5e fe ff       	call   f0100f6c <cprintf>
f011b157:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b15a:	e8 e1 96 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b15f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b162:	74 17                	je     f011b17b <test_kmalloc_firstfit1+0x68e>
f011b164:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b16b:	83 ec 0c             	sub    $0xc,%esp
f011b16e:	68 40 df 12 f0       	push   $0xf012df40
f011b173:	e8 f4 5d fe ff       	call   f0100f6c <cprintf>
f011b178:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 128) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b17b:	e8 89 28 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b180:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b183:	29 c2                	sub    %eax,%edx
f011b185:	89 d0                	mov    %edx,%eax
f011b187:	83 f8 7f             	cmp    $0x7f,%eax
f011b18a:	77 17                	ja     f011b1a3 <test_kmalloc_firstfit1+0x6b6>
f011b18c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b193:	83 ec 0c             	sub    $0xc,%esp
f011b196:	68 a9 e1 12 f0       	push   $0xf012e1a9
f011b19b:	e8 cc 5d fe ff       	call   f0100f6c <cprintf>
f011b1a0:	83 c4 10             	add    $0x10,%esp

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011b1a3:	e8 61 28 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b1a8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b1ab:	e8 90 96 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b1b0:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011b1b3:	83 ec 0c             	sub    $0xc,%esp
f011b1b6:	68 00 fc 0f 00       	push   $0xffc00
f011b1bb:	e8 f6 d8 fe ff       	call   f0108ab6 <kmalloc>
f011b1c0:	83 c4 10             	add    $0x10,%esp
f011b1c3:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b1c6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011b1c9:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011b1ce:	74 17                	je     f011b1e7 <test_kmalloc_firstfit1+0x6fa>
f011b1d0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b1d7:	83 ec 0c             	sub    $0xc,%esp
f011b1da:	68 78 e1 12 f0       	push   $0xf012e178
f011b1df:	e8 88 5d fe ff       	call   f0100f6c <cprintf>
f011b1e4:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b1e7:	e8 54 96 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b1ec:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b1ef:	74 17                	je     f011b208 <test_kmalloc_firstfit1+0x71b>
f011b1f1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b1f8:	83 ec 0c             	sub    $0xc,%esp
f011b1fb:	68 40 df 12 f0       	push   $0xf012df40
f011b200:	e8 67 5d fe ff       	call   f0100f6c <cprintf>
f011b205:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b208:	e8 fc 27 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b20d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b210:	29 c2                	sub    %eax,%edx
f011b212:	89 d0                	mov    %edx,%eax
f011b214:	3d ff 00 00 00       	cmp    $0xff,%eax
f011b219:	77 17                	ja     f011b232 <test_kmalloc_firstfit1+0x745>
f011b21b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b222:	83 ec 0c             	sub    $0xc,%esp
f011b225:	68 a9 e1 12 f0       	push   $0xf012e1a9
f011b22a:	e8 3d 5d fe ff       	call   f0100f6c <cprintf>
f011b22f:	83 c4 10             	add    $0x10,%esp


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011b232:	e8 d2 27 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b237:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b23a:	e8 01 96 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b23f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011b242:	83 ec 0c             	sub    $0xc,%esp
f011b245:	68 00 fc 03 00       	push   $0x3fc00
f011b24a:	e8 67 d8 fe ff       	call   f0108ab6 <kmalloc>
f011b24f:	83 c4 10             	add    $0x10,%esp
f011b252:	89 45 c0             	mov    %eax,-0x40(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b255:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b258:	3d 00 10 18 f8       	cmp    $0xf8181000,%eax
f011b25d:	74 17                	je     f011b276 <test_kmalloc_firstfit1+0x789>
f011b25f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b266:	83 ec 0c             	sub    $0xc,%esp
f011b269:	68 78 e1 12 f0       	push   $0xf012e178
f011b26e:	e8 f9 5c fe ff       	call   f0100f6c <cprintf>
f011b273:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b276:	e8 c5 95 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b27b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b27e:	74 17                	je     f011b297 <test_kmalloc_firstfit1+0x7aa>
f011b280:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b287:	83 ec 0c             	sub    $0xc,%esp
f011b28a:	68 40 df 12 f0       	push   $0xf012df40
f011b28f:	e8 d8 5c fe ff       	call   f0100f6c <cprintf>
f011b294:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 64) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b297:	e8 6d 27 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b29c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b29f:	29 c2                	sub    %eax,%edx
f011b2a1:	89 d0                	mov    %edx,%eax
f011b2a3:	83 f8 3f             	cmp    $0x3f,%eax
f011b2a6:	77 17                	ja     f011b2bf <test_kmalloc_firstfit1+0x7d2>
f011b2a8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b2af:	83 ec 0c             	sub    $0xc,%esp
f011b2b2:	68 a9 e1 12 f0       	push   $0xf012e1a9
f011b2b7:	e8 b0 5c fe ff       	call   f0100f6c <cprintf>
f011b2bc:	83 c4 10             	add    $0x10,%esp

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011b2bf:	e8 45 27 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b2c4:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b2c7:	e8 74 95 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b2cc:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011b2cf:	83 ec 0c             	sub    $0xc,%esp
f011b2d2:	68 00 00 20 00       	push   $0x200000
f011b2d7:	e8 da d7 fe ff       	call   f0108ab6 <kmalloc>
f011b2dc:	83 c4 10             	add    $0x10,%esp
f011b2df:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b2e2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011b2e5:	3d 00 10 80 f8       	cmp    $0xf8801000,%eax
f011b2ea:	74 17                	je     f011b303 <test_kmalloc_firstfit1+0x816>
f011b2ec:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b2f3:	83 ec 0c             	sub    $0xc,%esp
f011b2f6:	68 78 e1 12 f0       	push   $0xf012e178
f011b2fb:	e8 6c 5c fe ff       	call   f0100f6c <cprintf>
f011b300:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b303:	e8 01 27 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b308:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b30b:	29 c2                	sub    %eax,%edx
f011b30d:	89 d0                	mov    %edx,%eax
f011b30f:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011b314:	77 17                	ja     f011b32d <test_kmalloc_firstfit1+0x840>
f011b316:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b31d:	83 ec 0c             	sub    $0xc,%esp
f011b320:	68 a9 e1 12 f0       	push   $0xf012e1a9
f011b325:	e8 42 5c fe ff       	call   f0100f6c <cprintf>
f011b32a:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b32d:	e8 0e 95 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b332:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b335:	74 17                	je     f011b34e <test_kmalloc_firstfit1+0x861>
f011b337:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b33e:	83 ec 0c             	sub    $0xc,%esp
f011b341:	68 40 df 12 f0       	push   $0xf012df40
f011b346:	e8 21 5c fe ff       	call   f0100f6c <cprintf>
f011b34b:	83 c4 10             	add    $0x10,%esp


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = (int)sys_calculate_free_frames() ;
f011b34e:	e8 b6 26 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b353:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b356:	e8 e5 94 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b35b:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011b35e:	83 ec 0c             	sub    $0xc,%esp
f011b361:	68 00 fc 3f 00       	push   $0x3ffc00
f011b366:	e8 4b d7 fe ff       	call   f0108ab6 <kmalloc>
f011b36b:	83 c4 10             	add    $0x10,%esp
f011b36e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b371:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b374:	3d 00 10 e0 f8       	cmp    $0xf8e01000,%eax
f011b379:	74 17                	je     f011b392 <test_kmalloc_firstfit1+0x8a5>
f011b37b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b382:	83 ec 0c             	sub    $0xc,%esp
f011b385:	68 78 e1 12 f0       	push   $0xf012e178
f011b38a:	e8 dd 5b fe ff       	call   f0100f6c <cprintf>
f011b38f:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b392:	e8 a9 94 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b397:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b39a:	74 17                	je     f011b3b3 <test_kmalloc_firstfit1+0x8c6>
f011b39c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b3a3:	83 ec 0c             	sub    $0xc,%esp
f011b3a6:	68 40 df 12 f0       	push   $0xf012df40
f011b3ab:	e8 bc 5b fe ff       	call   f0100f6c <cprintf>
f011b3b0:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 1024) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b3b3:	e8 51 26 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b3b8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b3bb:	29 c2                	sub    %eax,%edx
f011b3bd:	89 d0                	mov    %edx,%eax
f011b3bf:	3d ff 03 00 00       	cmp    $0x3ff,%eax
f011b3c4:	77 17                	ja     f011b3dd <test_kmalloc_firstfit1+0x8f0>
f011b3c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b3cd:	83 ec 0c             	sub    $0xc,%esp
f011b3d0:	68 a9 e1 12 f0       	push   $0xf012e1a9
f011b3d5:	e8 92 5b fe ff       	call   f0100f6c <cprintf>
f011b3da:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=40 ;
f011b3dd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011b3e1:	74 04                	je     f011b3e7 <test_kmalloc_firstfit1+0x8fa>
f011b3e3:	83 45 f4 28          	addl   $0x28,-0xc(%ebp)

	correct = 1 ;
f011b3e7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011b3ee:	e8 16 26 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b3f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b3f6:	e8 45 94 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b3fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[2]);
f011b3fe:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b401:	83 ec 0c             	sub    $0xc,%esp
f011b404:	50                   	push   %eax
f011b405:	e8 c6 d6 fe ff       	call   f0108ad0 <kfree>
f011b40a:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b40d:	e8 2e 94 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b412:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b415:	74 17                	je     f011b42e <test_kmalloc_firstfit1+0x941>
f011b417:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b41e:	83 ec 0c             	sub    $0xc,%esp
f011b421:	68 40 df 12 f0       	push   $0xf012df40
f011b426:	e8 41 5b fe ff       	call   f0100f6c <cprintf>
f011b42b:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 256) { correct = 0; cprintf("Wrong free: \n"); }
f011b42e:	e8 d6 25 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b433:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011b436:	3d ff 00 00 00       	cmp    $0xff,%eax
f011b43b:	77 17                	ja     f011b454 <test_kmalloc_firstfit1+0x967>
f011b43d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b444:	83 ec 0c             	sub    $0xc,%esp
f011b447:	68 bd e1 12 f0       	push   $0xf012e1bd
f011b44c:	e8 1b 5b fe ff       	call   f0100f6c <cprintf>
f011b451:	83 c4 10             	add    $0x10,%esp

		//Next 1 MB Hole appended also
		freeFrames = (int)sys_calculate_free_frames() ;
f011b454:	e8 b0 25 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b459:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b45c:	e8 df 93 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b461:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[3]);
f011b464:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b467:	83 ec 0c             	sub    $0xc,%esp
f011b46a:	50                   	push   %eax
f011b46b:	e8 60 d6 fe ff       	call   f0108ad0 <kfree>
f011b470:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b473:	e8 c8 93 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b478:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b47b:	74 17                	je     f011b494 <test_kmalloc_firstfit1+0x9a7>
f011b47d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b484:	83 ec 0c             	sub    $0xc,%esp
f011b487:	68 40 df 12 f0       	push   $0xf012df40
f011b48c:	e8 db 5a fe ff       	call   f0100f6c <cprintf>
f011b491:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 256) { correct = 0; cprintf("Wrong free: \n"); }
f011b494:	e8 70 25 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b499:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011b49c:	3d ff 00 00 00       	cmp    $0xff,%eax
f011b4a1:	77 17                	ja     f011b4ba <test_kmalloc_firstfit1+0x9cd>
f011b4a3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b4aa:	83 ec 0c             	sub    $0xc,%esp
f011b4ad:	68 bd e1 12 f0       	push   $0xf012e1bd
f011b4b2:	e8 b5 5a fe ff       	call   f0100f6c <cprintf>
f011b4b7:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011b4ba:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011b4be:	74 04                	je     f011b4c4 <test_kmalloc_firstfit1+0x9d7>
f011b4c0:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011b4c4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = (int)sys_calculate_free_frames() ;
f011b4cb:	e8 39 25 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b4d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b4d3:	e8 68 93 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b4d8:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011b4db:	83 ec 0c             	sub    $0xc,%esp
f011b4de:	68 00 00 10 00       	push   $0x100000
f011b4e3:	e8 ce d5 fe ff       	call   f0108ab6 <kmalloc>
f011b4e8:	83 c4 10             	add    $0x10,%esp
f011b4eb:	89 45 cc             	mov    %eax,-0x34(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b4ee:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011b4f1:	3d 00 10 1c f8       	cmp    $0xf81c1000,%eax
f011b4f6:	74 17                	je     f011b50f <test_kmalloc_firstfit1+0xa22>
f011b4f8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b4ff:	83 ec 0c             	sub    $0xc,%esp
f011b502:	68 78 e1 12 f0       	push   $0xf012e178
f011b507:	e8 60 5a fe ff       	call   f0100f6c <cprintf>
f011b50c:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b50f:	e8 2c 93 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b514:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b517:	74 17                	je     f011b530 <test_kmalloc_firstfit1+0xa43>
f011b519:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b520:	83 ec 0c             	sub    $0xc,%esp
f011b523:	68 40 df 12 f0       	push   $0xf012df40
f011b528:	e8 3f 5a fe ff       	call   f0100f6c <cprintf>
f011b52d:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b530:	e8 d4 24 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b535:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b538:	29 c2                	sub    %eax,%edx
f011b53a:	89 d0                	mov    %edx,%eax
f011b53c:	3d ff 00 00 00       	cmp    $0xff,%eax
f011b541:	77 17                	ja     f011b55a <test_kmalloc_firstfit1+0xa6d>
f011b543:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b54a:	83 ec 0c             	sub    $0xc,%esp
f011b54d:	68 a9 e1 12 f0       	push   $0xf012e1a9
f011b552:	e8 15 5a fe ff       	call   f0100f6c <cprintf>
f011b557:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=30 ;
f011b55a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011b55e:	74 04                	je     f011b564 <test_kmalloc_firstfit1+0xa77>
f011b560:	83 45 f4 1e          	addl   $0x1e,-0xc(%ebp)

	cprintf("test FIRST FIT allocation (1) completed. Eval = %d%\n", eval);
f011b564:	83 ec 08             	sub    $0x8,%esp
f011b567:	ff 75 f4             	pushl  -0xc(%ebp)
f011b56a:	68 cc e1 12 f0       	push   $0xf012e1cc
f011b56f:	e8 f8 59 fe ff       	call   f0100f6c <cprintf>
f011b574:	83 c4 10             	add    $0x10,%esp

	return 1;
f011b577:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011b57c:	8b 7d fc             	mov    -0x4(%ebp),%edi
f011b57f:	c9                   	leave  
f011b580:	c3                   	ret    

f011b581 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011b581:	55                   	push   %ebp
f011b582:	89 e5                	mov    %esp,%ebp
f011b584:	57                   	push   %edi
f011b585:	53                   	push   %ebx
f011b586:	83 ec 60             	sub    $0x60,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f011b589:	83 ec 0c             	sub    $0xc,%esp
f011b58c:	68 80 de 12 f0       	push   $0xf012de80
f011b591:	e8 d6 59 fe ff       	call   f0100f6c <cprintf>
f011b596:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011b599:	83 ec 0c             	sub    $0xc,%esp
f011b59c:	68 b0 de 12 f0       	push   $0xf012deb0
f011b5a1:	e8 c6 59 fe ff       	call   f0100f6c <cprintf>
f011b5a6:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011b5a9:	83 ec 0c             	sub    $0xc,%esp
f011b5ac:	68 80 de 12 f0       	push   $0xf012de80
f011b5b1:	e8 b6 59 fe ff       	call   f0100f6c <cprintf>
f011b5b6:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011b5b9:	8d 55 98             	lea    -0x68(%ebp),%edx
f011b5bc:	b9 14 00 00 00       	mov    $0x14,%ecx
f011b5c1:	b8 00 00 00 00       	mov    $0x0,%eax
f011b5c6:	89 d7                	mov    %edx,%edi
f011b5c8:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;
	int eval = 0;
f011b5ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool correct = 1 ;
f011b5d1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	correct = 1 ;
f011b5d8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011b5df:	83 ec 0c             	sub    $0xc,%esp
f011b5e2:	68 01 e0 ff 07       	push   $0x7ffe001
f011b5e7:	e8 ca d4 fe ff       	call   f0108ab6 <kmalloc>
f011b5ec:	83 c4 10             	add    $0x10,%esp
f011b5ef:	89 45 98             	mov    %eax,-0x68(%ebp)
		if (ptr_allocations[0] != NULL) { correct = 0; cprintf("kmalloc: Attempt to allocate more than heap size, should return NULL\n"); }
f011b5f2:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b5f5:	85 c0                	test   %eax,%eax
f011b5f7:	74 17                	je     f011b610 <test_kmalloc_firstfit2+0x8f>
f011b5f9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b600:	83 ec 0c             	sub    $0xc,%esp
f011b603:	68 04 e2 12 f0       	push   $0xf012e204
f011b608:	e8 5f 59 fe ff       	call   f0100f6c <cprintf>
f011b60d:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011b610:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011b614:	74 04                	je     f011b61a <test_kmalloc_firstfit2+0x99>
f011b616:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011b61a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011b621:	e8 e3 23 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b626:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b629:	e8 12 92 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b62e:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011b631:	83 ec 0c             	sub    $0xc,%esp
f011b634:	68 00 fc 1f 00       	push   $0x1ffc00
f011b639:	e8 78 d4 fe ff       	call   f0108ab6 <kmalloc>
f011b63e:	83 c4 10             	add    $0x10,%esp
f011b641:	89 45 98             	mov    %eax,-0x68(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b644:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b647:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011b64c:	74 17                	je     f011b665 <test_kmalloc_firstfit2+0xe4>
f011b64e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b655:	83 ec 0c             	sub    $0xc,%esp
f011b658:	68 78 e1 12 f0       	push   $0xf012e178
f011b65d:	e8 0a 59 fe ff       	call   f0100f6c <cprintf>
f011b662:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b665:	e8 d6 91 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b66a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b66d:	74 17                	je     f011b686 <test_kmalloc_firstfit2+0x105>
f011b66f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b676:	83 ec 0c             	sub    $0xc,%esp
f011b679:	68 40 df 12 f0       	push   $0xf012df40
f011b67e:	e8 e9 58 fe ff       	call   f0100f6c <cprintf>
f011b683:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b686:	e8 7e 23 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b68b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b68e:	29 c2                	sub    %eax,%edx
f011b690:	89 d0                	mov    %edx,%eax
f011b692:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011b697:	77 17                	ja     f011b6b0 <test_kmalloc_firstfit2+0x12f>
f011b699:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b6a0:	83 ec 0c             	sub    $0xc,%esp
f011b6a3:	68 a9 e1 12 f0       	push   $0xf012e1a9
f011b6a8:	e8 bf 58 fe ff       	call   f0100f6c <cprintf>
f011b6ad:	83 c4 10             	add    $0x10,%esp

		//2 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011b6b0:	e8 54 23 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b6b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b6b8:	e8 83 91 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b6bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011b6c0:	83 ec 0c             	sub    $0xc,%esp
f011b6c3:	68 00 fc 1f 00       	push   $0x1ffc00
f011b6c8:	e8 e9 d3 fe ff       	call   f0108ab6 <kmalloc>
f011b6cd:	83 c4 10             	add    $0x10,%esp
f011b6d0:	89 45 9c             	mov    %eax,-0x64(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b6d3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011b6d6:	3d 00 10 20 f8       	cmp    $0xf8201000,%eax
f011b6db:	74 17                	je     f011b6f4 <test_kmalloc_firstfit2+0x173>
f011b6dd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b6e4:	83 ec 0c             	sub    $0xc,%esp
f011b6e7:	68 78 e1 12 f0       	push   $0xf012e178
f011b6ec:	e8 7b 58 fe ff       	call   f0100f6c <cprintf>
f011b6f1:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b6f4:	e8 47 91 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b6f9:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b6fc:	74 17                	je     f011b715 <test_kmalloc_firstfit2+0x194>
f011b6fe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b705:	83 ec 0c             	sub    $0xc,%esp
f011b708:	68 40 df 12 f0       	push   $0xf012df40
f011b70d:	e8 5a 58 fe ff       	call   f0100f6c <cprintf>
f011b712:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b715:	e8 ef 22 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b71a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b71d:	29 c2                	sub    %eax,%edx
f011b71f:	89 d0                	mov    %edx,%eax
f011b721:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011b726:	77 17                	ja     f011b73f <test_kmalloc_firstfit2+0x1be>
f011b728:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b72f:	83 ec 0c             	sub    $0xc,%esp
f011b732:	68 a9 e1 12 f0       	push   $0xf012e1a9
f011b737:	e8 30 58 fe ff       	call   f0100f6c <cprintf>
f011b73c:	83 c4 10             	add    $0x10,%esp

		//1 KB (should be allocated by dynamic allocator not page allocator)
		freeFrames = (int)sys_calculate_free_frames() ;
f011b73f:	e8 c5 22 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b744:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b747:	e8 f4 90 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b74c:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[2] = kmalloc(1*kilo);
f011b74f:	83 ec 0c             	sub    $0xc,%esp
f011b752:	68 00 04 00 00       	push   $0x400
f011b757:	e8 5a d3 fe ff       	call   f0108ab6 <kmalloc>
f011b75c:	83 c4 10             	add    $0x10,%esp
f011b75f:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f011b762:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b765:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011b76a:	76 22                	jbe    f011b78e <test_kmalloc_firstfit2+0x20d>
f011b76c:	8b 5d a0             	mov    -0x60(%ebp),%ebx
f011b76f:	83 ec 0c             	sub    $0xc,%esp
f011b772:	6a 00                	push   $0x0
f011b774:	e8 33 d3 fe ff       	call   f0108aac <sbrk>
f011b779:	83 c4 10             	add    $0x10,%esp
f011b77c:	39 c3                	cmp    %eax,%ebx
f011b77e:	73 0e                	jae    f011b78e <test_kmalloc_firstfit2+0x20d>
f011b780:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b783:	89 c2                	mov    %eax,%edx
f011b785:	a1 d8 dd 17 f0       	mov    0xf017ddd8,%eax
f011b78a:	39 c2                	cmp    %eax,%edx
f011b78c:	72 17                	jb     f011b7a5 <test_kmalloc_firstfit2+0x224>
		{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011b78e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b795:	83 ec 0c             	sub    $0xc,%esp
f011b798:	68 40 e0 12 f0       	push   $0xf012e040
f011b79d:	e8 ca 57 fe ff       	call   f0100f6c <cprintf>
f011b7a2:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b7a5:	e8 96 90 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b7aa:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b7ad:	74 17                	je     f011b7c6 <test_kmalloc_firstfit2+0x245>
f011b7af:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b7b6:	83 ec 0c             	sub    $0xc,%esp
f011b7b9:	68 40 df 12 f0       	push   $0xf012df40
f011b7be:	e8 a9 57 fe ff       	call   f0100f6c <cprintf>
f011b7c3:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - (int)sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//2 KB (should be allocated by dynamic allocator not page allocator)
		freeFrames = (int)sys_calculate_free_frames() ;
f011b7c6:	e8 3e 22 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b7cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b7ce:	e8 6d 90 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b7d3:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011b7d6:	83 ec 0c             	sub    $0xc,%esp
f011b7d9:	68 00 08 00 00       	push   $0x800
f011b7de:	e8 d3 d2 fe ff       	call   f0108ab6 <kmalloc>
f011b7e3:	83 c4 10             	add    $0x10,%esp
f011b7e6:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f011b7e9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b7ec:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011b7f1:	76 22                	jbe    f011b815 <test_kmalloc_firstfit2+0x294>
f011b7f3:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f011b7f6:	83 ec 0c             	sub    $0xc,%esp
f011b7f9:	6a 00                	push   $0x0
f011b7fb:	e8 ac d2 fe ff       	call   f0108aac <sbrk>
f011b800:	83 c4 10             	add    $0x10,%esp
f011b803:	39 c3                	cmp    %eax,%ebx
f011b805:	73 0e                	jae    f011b815 <test_kmalloc_firstfit2+0x294>
f011b807:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011b80a:	89 c2                	mov    %eax,%edx
f011b80c:	a1 d8 dd 17 f0       	mov    0xf017ddd8,%eax
f011b811:	39 c2                	cmp    %eax,%edx
f011b813:	72 17                	jb     f011b82c <test_kmalloc_firstfit2+0x2ab>
		{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011b815:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b81c:	83 ec 0c             	sub    $0xc,%esp
f011b81f:	68 40 e0 12 f0       	push   $0xf012e040
f011b824:	e8 43 57 fe ff       	call   f0100f6c <cprintf>
f011b829:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b82c:	e8 0f 90 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b831:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b834:	74 17                	je     f011b84d <test_kmalloc_firstfit2+0x2cc>
f011b836:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b83d:	83 ec 0c             	sub    $0xc,%esp
f011b840:	68 40 df 12 f0       	push   $0xf012df40
f011b845:	e8 22 57 fe ff       	call   f0100f6c <cprintf>
f011b84a:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - (int)sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//1 KB (should be allocated by dynamic allocator not page allocator)
		freeFrames = (int)sys_calculate_free_frames() ;
f011b84d:	e8 b7 21 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b852:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b855:	e8 e6 8f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b85a:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[4] = kmalloc(1*kilo);
f011b85d:	83 ec 0c             	sub    $0xc,%esp
f011b860:	68 00 04 00 00       	push   $0x400
f011b865:	e8 4c d2 fe ff       	call   f0108ab6 <kmalloc>
f011b86a:	83 c4 10             	add    $0x10,%esp
f011b86d:	89 45 a8             	mov    %eax,-0x58(%ebp)
		if ((uint32) ptr_allocations[4] < KERNEL_HEAP_START || ptr_allocations[4] >= sbrk(0) || (uint32) ptr_allocations[4] >= da_limit)
f011b870:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b873:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011b878:	76 22                	jbe    f011b89c <test_kmalloc_firstfit2+0x31b>
f011b87a:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011b87d:	83 ec 0c             	sub    $0xc,%esp
f011b880:	6a 00                	push   $0x0
f011b882:	e8 25 d2 fe ff       	call   f0108aac <sbrk>
f011b887:	83 c4 10             	add    $0x10,%esp
f011b88a:	39 c3                	cmp    %eax,%ebx
f011b88c:	73 0e                	jae    f011b89c <test_kmalloc_firstfit2+0x31b>
f011b88e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011b891:	89 c2                	mov    %eax,%edx
f011b893:	a1 d8 dd 17 f0       	mov    0xf017ddd8,%eax
f011b898:	39 c2                	cmp    %eax,%edx
f011b89a:	72 17                	jb     f011b8b3 <test_kmalloc_firstfit2+0x332>
		{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011b89c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b8a3:	83 ec 0c             	sub    $0xc,%esp
f011b8a6:	68 40 e0 12 f0       	push   $0xf012e040
f011b8ab:	e8 bc 56 fe ff       	call   f0100f6c <cprintf>
f011b8b0:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b8b3:	e8 88 8f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b8b8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b8bb:	74 17                	je     f011b8d4 <test_kmalloc_firstfit2+0x353>
f011b8bd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b8c4:	83 ec 0c             	sub    $0xc,%esp
f011b8c7:	68 40 df 12 f0       	push   $0xf012df40
f011b8cc:	e8 9b 56 fe ff       	call   f0100f6c <cprintf>
f011b8d1:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - (int)sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//1 KB Hole in Dynamic Allocator Area
		freeFrames = (int)sys_calculate_free_frames() ;
f011b8d4:	e8 30 21 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b8d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b8dc:	e8 5f 8f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b8e1:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[2]);
f011b8e4:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011b8e7:	83 ec 0c             	sub    $0xc,%esp
f011b8ea:	50                   	push   %eax
f011b8eb:	e8 e0 d1 fe ff       	call   f0108ad0 <kfree>
f011b8f0:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b8f3:	e8 48 8f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b8f8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b8fb:	74 17                	je     f011b914 <test_kmalloc_firstfit2+0x393>
f011b8fd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b904:	83 ec 0c             	sub    $0xc,%esp
f011b907:	68 40 df 12 f0       	push   $0xf012df40
f011b90c:	e8 5b 56 fe ff       	call   f0100f6c <cprintf>
f011b911:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) != 0) { correct = 0; cprintf("Wrong free: freeing a block from the dynamic allocator should not affect the free frames\n"); }
f011b914:	e8 f0 20 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b919:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011b91c:	74 17                	je     f011b935 <test_kmalloc_firstfit2+0x3b4>
f011b91e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b925:	83 ec 0c             	sub    $0xc,%esp
f011b928:	68 4c e2 12 f0       	push   $0xf012e24c
f011b92d:	e8 3a 56 fe ff       	call   f0100f6c <cprintf>
f011b932:	83 c4 10             	add    $0x10,%esp

		//7 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011b935:	e8 cf 20 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b93a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b93d:	e8 fe 8e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b942:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[5] = kmalloc(7*kilo);
f011b945:	83 ec 0c             	sub    $0xc,%esp
f011b948:	68 00 1c 00 00       	push   $0x1c00
f011b94d:	e8 64 d1 fe ff       	call   f0108ab6 <kmalloc>
f011b952:	83 c4 10             	add    $0x10,%esp
f011b955:	89 45 ac             	mov    %eax,-0x54(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega /*+ 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011b958:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011b95b:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011b960:	74 17                	je     f011b979 <test_kmalloc_firstfit2+0x3f8>
f011b962:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b969:	83 ec 0c             	sub    $0xc,%esp
f011b96c:	68 78 e1 12 f0       	push   $0xf012e178
f011b971:	e8 f6 55 fe ff       	call   f0100f6c <cprintf>
f011b976:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b979:	e8 c2 8e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b97e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b981:	74 17                	je     f011b99a <test_kmalloc_firstfit2+0x419>
f011b983:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b98a:	83 ec 0c             	sub    $0xc,%esp
f011b98d:	68 40 df 12 f0       	push   $0xf012df40
f011b992:	e8 d5 55 fe ff       	call   f0100f6c <cprintf>
f011b997:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: \n"); }
f011b99a:	e8 6a 20 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b99f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011b9a2:	29 c2                	sub    %eax,%edx
f011b9a4:	89 d0                	mov    %edx,%eax
f011b9a6:	83 f8 01             	cmp    $0x1,%eax
f011b9a9:	77 17                	ja     f011b9c2 <test_kmalloc_firstfit2+0x441>
f011b9ab:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b9b2:	83 ec 0c             	sub    $0xc,%esp
f011b9b5:	68 a9 e1 12 f0       	push   $0xf012e1a9
f011b9ba:	e8 ad 55 fe ff       	call   f0100f6c <cprintf>
f011b9bf:	83 c4 10             	add    $0x10,%esp

		//2 MB Hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011b9c2:	e8 42 20 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b9c7:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011b9ca:	e8 71 8e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b9cf:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[0]);
f011b9d2:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b9d5:	83 ec 0c             	sub    $0xc,%esp
f011b9d8:	50                   	push   %eax
f011b9d9:	e8 f2 d0 fe ff       	call   f0108ad0 <kfree>
f011b9de:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b9e1:	e8 5a 8e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b9e6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011b9e9:	74 17                	je     f011ba02 <test_kmalloc_firstfit2+0x481>
f011b9eb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011b9f2:	83 ec 0c             	sub    $0xc,%esp
f011b9f5:	68 40 df 12 f0       	push   $0xf012df40
f011b9fa:	e8 6d 55 fe ff       	call   f0100f6c <cprintf>
f011b9ff:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong free: \n"); }
f011ba02:	e8 02 20 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ba07:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011ba0a:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011ba0f:	77 17                	ja     f011ba28 <test_kmalloc_firstfit2+0x4a7>
f011ba11:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ba18:	83 ec 0c             	sub    $0xc,%esp
f011ba1b:	68 bd e1 12 f0       	push   $0xf012e1bd
f011ba20:	e8 47 55 fe ff       	call   f0100f6c <cprintf>
f011ba25:	83 c4 10             	add    $0x10,%esp

		//3 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011ba28:	e8 dc 1f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ba2d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011ba30:	e8 0b 8e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ba35:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011ba38:	83 ec 0c             	sub    $0xc,%esp
f011ba3b:	68 00 fc 2f 00       	push   $0x2ffc00
f011ba40:	e8 71 d0 fe ff       	call   f0108ab6 <kmalloc>
f011ba45:	83 c4 10             	add    $0x10,%esp
f011ba48:	89 45 b0             	mov    %eax,-0x50(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 4*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011ba4b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ba4e:	3d 00 30 40 f8       	cmp    $0xf8403000,%eax
f011ba53:	74 17                	je     f011ba6c <test_kmalloc_firstfit2+0x4eb>
f011ba55:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ba5c:	83 ec 0c             	sub    $0xc,%esp
f011ba5f:	68 78 e1 12 f0       	push   $0xf012e178
f011ba64:	e8 03 55 fe ff       	call   f0100f6c <cprintf>
f011ba69:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ba6c:	e8 cf 8d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ba71:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011ba74:	74 17                	je     f011ba8d <test_kmalloc_firstfit2+0x50c>
f011ba76:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ba7d:	83 ec 0c             	sub    $0xc,%esp
f011ba80:	68 40 df 12 f0       	push   $0xf012df40
f011ba85:	e8 e2 54 fe ff       	call   f0100f6c <cprintf>
f011ba8a:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) <  3*Mega/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: \n"); }
f011ba8d:	e8 77 1f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ba92:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011ba95:	29 c2                	sub    %eax,%edx
f011ba97:	89 d0                	mov    %edx,%eax
f011ba99:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011ba9e:	77 17                	ja     f011bab7 <test_kmalloc_firstfit2+0x536>
f011baa0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011baa7:	83 ec 0c             	sub    $0xc,%esp
f011baaa:	68 a9 e1 12 f0       	push   $0xf012e1a9
f011baaf:	e8 b8 54 fe ff       	call   f0100f6c <cprintf>
f011bab4:	83 c4 10             	add    $0x10,%esp

		//2 MB + 6 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011bab7:	e8 4d 1f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011babc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011babf:	e8 7c 8d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bac4:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[7] = kmalloc(2*Mega + 6*kilo);
f011bac7:	83 ec 0c             	sub    $0xc,%esp
f011baca:	68 00 18 20 00       	push   $0x201800
f011bacf:	e8 e2 cf fe ff       	call   f0108ab6 <kmalloc>
f011bad4:	83 c4 10             	add    $0x10,%esp
f011bad7:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011bada:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011badd:	3d 00 30 70 f8       	cmp    $0xf8703000,%eax
f011bae2:	74 17                	je     f011bafb <test_kmalloc_firstfit2+0x57a>
f011bae4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011baeb:	83 ec 0c             	sub    $0xc,%esp
f011baee:	68 78 e1 12 f0       	push   $0xf012e178
f011baf3:	e8 74 54 fe ff       	call   f0100f6c <cprintf>
f011baf8:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bafb:	e8 40 8d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bb00:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bb03:	74 17                	je     f011bb1c <test_kmalloc_firstfit2+0x59b>
f011bb05:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bb0c:	83 ec 0c             	sub    $0xc,%esp
f011bb0f:	68 40 df 12 f0       	push   $0xf012df40
f011bb14:	e8 53 54 fe ff       	call   f0100f6c <cprintf>
f011bb19:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) <  514) { correct = 0; cprintf("Wrong allocation: \n"); }
f011bb1c:	e8 e8 1e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bb21:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011bb24:	29 c2                	sub    %eax,%edx
f011bb26:	89 d0                	mov    %edx,%eax
f011bb28:	3d 01 02 00 00       	cmp    $0x201,%eax
f011bb2d:	77 17                	ja     f011bb46 <test_kmalloc_firstfit2+0x5c5>
f011bb2f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bb36:	83 ec 0c             	sub    $0xc,%esp
f011bb39:	68 a9 e1 12 f0       	push   $0xf012e1a9
f011bb3e:	e8 29 54 fe ff       	call   f0100f6c <cprintf>
f011bb43:	83 c4 10             	add    $0x10,%esp

		//3 MB Hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011bb46:	e8 be 1e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bb4b:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bb4e:	e8 ed 8c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bb53:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[6]);
f011bb56:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bb59:	83 ec 0c             	sub    $0xc,%esp
f011bb5c:	50                   	push   %eax
f011bb5d:	e8 6e cf fe ff       	call   f0108ad0 <kfree>
f011bb62:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bb65:	e8 d6 8c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bb6a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bb6d:	74 17                	je     f011bb86 <test_kmalloc_firstfit2+0x605>
f011bb6f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bb76:	83 ec 0c             	sub    $0xc,%esp
f011bb79:	68 40 df 12 f0       	push   $0xf012df40
f011bb7e:	e8 e9 53 fe ff       	call   f0100f6c <cprintf>
f011bb83:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 768) { correct = 0; cprintf("Wrong free: \n"); }
f011bb86:	e8 7e 1e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bb8b:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011bb8e:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011bb93:	77 17                	ja     f011bbac <test_kmalloc_firstfit2+0x62b>
f011bb95:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bb9c:	83 ec 0c             	sub    $0xc,%esp
f011bb9f:	68 bd e1 12 f0       	push   $0xf012e1bd
f011bba4:	e8 c3 53 fe ff       	call   f0100f6c <cprintf>
f011bba9:	83 c4 10             	add    $0x10,%esp

		//2 KB Hole in Dynamic Allocator Area [Resulting Hole = 1 KB + 2 KB = 3 KB]
		freeFrames = (int)sys_calculate_free_frames() ;
f011bbac:	e8 58 1e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bbb1:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bbb4:	e8 87 8c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bbb9:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[3]);
f011bbbc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011bbbf:	83 ec 0c             	sub    $0xc,%esp
f011bbc2:	50                   	push   %eax
f011bbc3:	e8 08 cf fe ff       	call   f0108ad0 <kfree>
f011bbc8:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bbcb:	e8 70 8c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bbd0:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bbd3:	74 17                	je     f011bbec <test_kmalloc_firstfit2+0x66b>
f011bbd5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bbdc:	83 ec 0c             	sub    $0xc,%esp
f011bbdf:	68 40 df 12 f0       	push   $0xf012df40
f011bbe4:	e8 83 53 fe ff       	call   f0100f6c <cprintf>
f011bbe9:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) != 0) { correct = 0; cprintf("Wrong free: freeing a block from the dynamic allocator should not affect the free frames\n"); }
f011bbec:	e8 18 1e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bbf1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011bbf4:	74 17                	je     f011bc0d <test_kmalloc_firstfit2+0x68c>
f011bbf6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bbfd:	83 ec 0c             	sub    $0xc,%esp
f011bc00:	68 4c e2 12 f0       	push   $0xf012e24c
f011bc05:	e8 62 53 fe ff       	call   f0100f6c <cprintf>
f011bc0a:	83 c4 10             	add    $0x10,%esp

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB = 4 MB]
		freeFrames = (int)sys_calculate_free_frames() ;
f011bc0d:	e8 f7 1d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bc12:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bc15:	e8 26 8c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bc1a:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[1]);
f011bc1d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011bc20:	83 ec 0c             	sub    $0xc,%esp
f011bc23:	50                   	push   %eax
f011bc24:	e8 a7 ce fe ff       	call   f0108ad0 <kfree>
f011bc29:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong free: \n"); }
f011bc2c:	e8 d8 1d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bc31:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011bc34:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011bc39:	77 17                	ja     f011bc52 <test_kmalloc_firstfit2+0x6d1>
f011bc3b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bc42:	83 ec 0c             	sub    $0xc,%esp
f011bc45:	68 bd e1 12 f0       	push   $0xf012e1bd
f011bc4a:	e8 1d 53 fe ff       	call   f0100f6c <cprintf>
f011bc4f:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bc52:	e8 e9 8b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bc57:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bc5a:	74 17                	je     f011bc73 <test_kmalloc_firstfit2+0x6f2>
f011bc5c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bc63:	83 ec 0c             	sub    $0xc,%esp
f011bc66:	68 40 df 12 f0       	push   $0xf012df40
f011bc6b:	e8 fc 52 fe ff       	call   f0100f6c <cprintf>
f011bc70:	83 c4 10             	add    $0x10,%esp

		//5 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011bc73:	e8 91 1d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bc78:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bc7b:	e8 c0 8b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bc80:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[8] = kmalloc(5*Mega-kilo);
f011bc83:	83 ec 0c             	sub    $0xc,%esp
f011bc86:	68 00 fc 4f 00       	push   $0x4ffc00
f011bc8b:	e8 26 ce fe ff       	call   f0108ab6 <kmalloc>
f011bc90:	83 c4 10             	add    $0x10,%esp
f011bc93:	89 45 b8             	mov    %eax,-0x48(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 9*Mega + 16*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011bc96:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bc99:	3d 00 50 90 f8       	cmp    $0xf8905000,%eax
f011bc9e:	74 17                	je     f011bcb7 <test_kmalloc_firstfit2+0x736>
f011bca0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bca7:	83 ec 0c             	sub    $0xc,%esp
f011bcaa:	68 78 e1 12 f0       	push   $0xf012e178
f011bcaf:	e8 b8 52 fe ff       	call   f0100f6c <cprintf>
f011bcb4:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bcb7:	e8 84 8b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bcbc:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bcbf:	74 17                	je     f011bcd8 <test_kmalloc_firstfit2+0x757>
f011bcc1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bcc8:	83 ec 0c             	sub    $0xc,%esp
f011bccb:	68 40 df 12 f0       	push   $0xf012df40
f011bcd0:	e8 97 52 fe ff       	call   f0100f6c <cprintf>
f011bcd5:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) <   5*Mega/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: \n"); }
f011bcd8:	e8 2c 1d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bcdd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011bce0:	29 c2                	sub    %eax,%edx
f011bce2:	89 d0                	mov    %edx,%eax
f011bce4:	3d ff 04 00 00       	cmp    $0x4ff,%eax
f011bce9:	77 17                	ja     f011bd02 <test_kmalloc_firstfit2+0x781>
f011bceb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bcf2:	83 ec 0c             	sub    $0xc,%esp
f011bcf5:	68 a9 e1 12 f0       	push   $0xf012e1a9
f011bcfa:	e8 6d 52 fe ff       	call   f0100f6c <cprintf>
f011bcff:	83 c4 10             	add    $0x10,%esp

		//8 KB Hole [Resulting Hole = 2 MB + 2 MB + 8 KB + 3 MB = 7 MB + 8 KB]
		freeFrames = (int)sys_calculate_free_frames() ;
f011bd02:	e8 02 1d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bd07:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bd0a:	e8 31 8b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bd0f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[5]);
f011bd12:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011bd15:	83 ec 0c             	sub    $0xc,%esp
f011bd18:	50                   	push   %eax
f011bd19:	e8 b2 cd fe ff       	call   f0108ad0 <kfree>
f011bd1e:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bd21:	e8 1a 8b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bd26:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bd29:	74 17                	je     f011bd42 <test_kmalloc_firstfit2+0x7c1>
f011bd2b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bd32:	83 ec 0c             	sub    $0xc,%esp
f011bd35:	68 40 df 12 f0       	push   $0xf012df40
f011bd3a:	e8 2d 52 fe ff       	call   f0100f6c <cprintf>
f011bd3f:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 2) { correct = 0; cprintf("Wrong free: \n"); }
f011bd42:	e8 c2 1c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bd47:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011bd4a:	83 f8 01             	cmp    $0x1,%eax
f011bd4d:	77 17                	ja     f011bd66 <test_kmalloc_firstfit2+0x7e5>
f011bd4f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bd56:	83 ec 0c             	sub    $0xc,%esp
f011bd59:	68 bd e1 12 f0       	push   $0xf012e1bd
f011bd5e:	e8 09 52 fe ff       	call   f0100f6c <cprintf>
f011bd63:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011bd66:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011bd6a:	74 04                	je     f011bd70 <test_kmalloc_firstfit2+0x7ef>
f011bd6c:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011bd70:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		//[FIRST FIT Case#1] Should be allocated in the resulting hole inside Page Allocator Area
		//7 MB + 1 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011bd77:	e8 8d 1c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bd7c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bd7f:	e8 bc 8a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bd84:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[9] = kmalloc(7*Mega+kilo);
f011bd87:	83 ec 0c             	sub    $0xc,%esp
f011bd8a:	68 00 04 70 00       	push   $0x700400
f011bd8f:	e8 22 cd fe ff       	call   f0108ab6 <kmalloc>
f011bd94:	83 c4 10             	add    $0x10,%esp
f011bd97:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011bd9a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011bd9d:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011bda2:	74 17                	je     f011bdbb <test_kmalloc_firstfit2+0x83a>
f011bda4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bdab:	83 ec 0c             	sub    $0xc,%esp
f011bdae:	68 78 e1 12 f0       	push   $0xf012e178
f011bdb3:	e8 b4 51 fe ff       	call   f0100f6c <cprintf>
f011bdb8:	83 c4 10             	add    $0x10,%esp
		if((freeDiskFrames - (int)pf_calculate_free_frames()) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bdbb:	e8 80 8a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bdc0:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bdc3:	74 17                	je     f011bddc <test_kmalloc_firstfit2+0x85b>
f011bdc5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bdcc:	83 ec 0c             	sub    $0xc,%esp
f011bdcf:	68 40 df 12 f0       	push   $0xf012df40
f011bdd4:	e8 93 51 fe ff       	call   f0100f6c <cprintf>
f011bdd9:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) <  (7*Mega+4*kilo)/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: \n"); }
f011bddc:	e8 28 1c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bde1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011bde4:	29 c2                	sub    %eax,%edx
f011bde6:	89 d0                	mov    %edx,%eax
f011bde8:	3d 00 07 00 00       	cmp    $0x700,%eax
f011bded:	77 17                	ja     f011be06 <test_kmalloc_firstfit2+0x885>
f011bdef:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bdf6:	83 ec 0c             	sub    $0xc,%esp
f011bdf9:	68 a9 e1 12 f0       	push   $0xf012e1a9
f011bdfe:	e8 69 51 fe ff       	call   f0100f6c <cprintf>
f011be03:	83 c4 10             	add    $0x10,%esp

		//[FIRST FIT Case#2] Should be allocated in the remaining area of resulting hole inside Page Allocator Area
		//3 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011be06:	e8 fe 1b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011be0b:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011be0e:	e8 2d 8a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011be13:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[10] = kmalloc(3*kilo);
f011be16:	83 ec 0c             	sub    $0xc,%esp
f011be19:	68 00 0c 00 00       	push   $0xc00
f011be1e:	e8 93 cc fe ff       	call   f0108ab6 <kmalloc>
f011be23:	83 c4 10             	add    $0x10,%esp
f011be26:	89 45 c0             	mov    %eax,-0x40(%ebp)
		if ((uint32)ptr_allocations[10] != (ACTUAL_START + 7*Mega + 4*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011be29:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011be2c:	3d 00 20 70 f8       	cmp    $0xf8702000,%eax
f011be31:	74 17                	je     f011be4a <test_kmalloc_firstfit2+0x8c9>
f011be33:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011be3a:	83 ec 0c             	sub    $0xc,%esp
f011be3d:	68 78 e1 12 f0       	push   $0xf012e178
f011be42:	e8 25 51 fe ff       	call   f0100f6c <cprintf>
f011be47:	83 c4 10             	add    $0x10,%esp
		if((freeDiskFrames - (int)pf_calculate_free_frames()) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011be4a:	e8 f1 89 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011be4f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011be52:	74 17                	je     f011be6b <test_kmalloc_firstfit2+0x8ea>
f011be54:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011be5b:	83 ec 0c             	sub    $0xc,%esp
f011be5e:	68 40 df 12 f0       	push   $0xf012df40
f011be63:	e8 04 51 fe ff       	call   f0100f6c <cprintf>
f011be68:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 1) { correct = 0; cprintf("Wrong allocation: \n"); }
f011be6b:	e8 99 1b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011be70:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011be73:	75 17                	jne    f011be8c <test_kmalloc_firstfit2+0x90b>
f011be75:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011be7c:	83 ec 0c             	sub    $0xc,%esp
f011be7f:	68 a9 e1 12 f0       	push   $0xf012e1a9
f011be84:	e8 e3 50 fe ff       	call   f0100f6c <cprintf>
f011be89:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=35 ;
f011be8c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011be90:	74 04                	je     f011be96 <test_kmalloc_firstfit2+0x915>
f011be92:	83 45 f4 23          	addl   $0x23,-0xc(%ebp)

	correct = 1 ;
f011be96:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		//[FIRST FIT Case#3] Should be allocated in the resulting hole inside DYNAMIC Allocator Area
		//1 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011be9d:	e8 67 1b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bea2:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bea5:	e8 96 89 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011beaa:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[11] = kmalloc(1*kilo);
f011bead:	83 ec 0c             	sub    $0xc,%esp
f011beb0:	68 00 04 00 00       	push   $0x400
f011beb5:	e8 fc cb fe ff       	call   f0108ab6 <kmalloc>
f011beba:	83 c4 10             	add    $0x10,%esp
f011bebd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if ((ptr_allocations[11] < ptr_allocations[2]) || (ptr_allocations[11] > (ptr_allocations[2] + 1*kilo)))
f011bec0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011bec3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011bec6:	39 c2                	cmp    %eax,%edx
f011bec8:	72 10                	jb     f011beda <test_kmalloc_firstfit2+0x959>
f011beca:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011becd:	8b 55 a0             	mov    -0x60(%ebp),%edx
f011bed0:	81 c2 00 04 00 00    	add    $0x400,%edx
f011bed6:	39 d0                	cmp    %edx,%eax
f011bed8:	76 17                	jbe    f011bef1 <test_kmalloc_firstfit2+0x970>
		{ correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011beda:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bee1:	83 ec 0c             	sub    $0xc,%esp
f011bee4:	68 78 e1 12 f0       	push   $0xf012e178
f011bee9:	e8 7e 50 fe ff       	call   f0100f6c <cprintf>
f011beee:	83 c4 10             	add    $0x10,%esp
		if((freeDiskFrames - (int)pf_calculate_free_frames()) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bef1:	e8 4a 89 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bef6:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bef9:	74 17                	je     f011bf12 <test_kmalloc_firstfit2+0x991>
f011befb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bf02:	83 ec 0c             	sub    $0xc,%esp
f011bf05:	68 40 df 12 f0       	push   $0xf012df40
f011bf0a:	e8 5d 50 fe ff       	call   f0100f6c <cprintf>
f011bf0f:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: \n"); }
f011bf12:	e8 f2 1a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bf17:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011bf1a:	74 17                	je     f011bf33 <test_kmalloc_firstfit2+0x9b2>
f011bf1c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bf23:	83 ec 0c             	sub    $0xc,%esp
f011bf26:	68 a9 e1 12 f0       	push   $0xf012e1a9
f011bf2b:	e8 3c 50 fe ff       	call   f0100f6c <cprintf>
f011bf30:	83 c4 10             	add    $0x10,%esp

		//[FIRST FIT Case#4] Should be allocated in the remaining of resulting hole inside DYNAMIC Allocator Area
		//1 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011bf33:	e8 d1 1a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bf38:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011bf3b:	e8 00 89 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bf40:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[12] = kmalloc(1*kilo);
f011bf43:	83 ec 0c             	sub    $0xc,%esp
f011bf46:	68 00 04 00 00       	push   $0x400
f011bf4b:	e8 66 cb fe ff       	call   f0108ab6 <kmalloc>
f011bf50:	83 c4 10             	add    $0x10,%esp
f011bf53:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if ((ptr_allocations[12] < ptr_allocations[2] + 1*kilo) || (ptr_allocations[12] > (ptr_allocations[2] + 2*kilo)))
f011bf56:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bf59:	8b 55 a0             	mov    -0x60(%ebp),%edx
f011bf5c:	81 c2 00 04 00 00    	add    $0x400,%edx
f011bf62:	39 d0                	cmp    %edx,%eax
f011bf64:	72 10                	jb     f011bf76 <test_kmalloc_firstfit2+0x9f5>
f011bf66:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bf69:	8b 55 a0             	mov    -0x60(%ebp),%edx
f011bf6c:	81 c2 00 08 00 00    	add    $0x800,%edx
f011bf72:	39 d0                	cmp    %edx,%eax
f011bf74:	76 17                	jbe    f011bf8d <test_kmalloc_firstfit2+0xa0c>
		{ correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011bf76:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bf7d:	83 ec 0c             	sub    $0xc,%esp
f011bf80:	68 78 e1 12 f0       	push   $0xf012e178
f011bf85:	e8 e2 4f fe ff       	call   f0100f6c <cprintf>
f011bf8a:	83 c4 10             	add    $0x10,%esp
		if((freeDiskFrames - (int)pf_calculate_free_frames()) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bf8d:	e8 ae 88 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bf92:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011bf95:	74 17                	je     f011bfae <test_kmalloc_firstfit2+0xa2d>
f011bf97:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bf9e:	83 ec 0c             	sub    $0xc,%esp
f011bfa1:	68 40 df 12 f0       	push   $0xf012df40
f011bfa6:	e8 c1 4f fe ff       	call   f0100f6c <cprintf>
f011bfab:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: \n"); }
f011bfae:	e8 56 1a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bfb3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011bfb6:	74 17                	je     f011bfcf <test_kmalloc_firstfit2+0xa4e>
f011bfb8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011bfbf:	83 ec 0c             	sub    $0xc,%esp
f011bfc2:	68 a9 e1 12 f0       	push   $0xf012e1a9
f011bfc7:	e8 a0 4f fe ff       	call   f0100f6c <cprintf>
f011bfcc:	83 c4 10             	add    $0x10,%esp

	}
	if (correct)	eval+=35 ;
f011bfcf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011bfd3:	74 04                	je     f011bfd9 <test_kmalloc_firstfit2+0xa58>
f011bfd5:	83 45 f4 23          	addl   $0x23,-0xc(%ebp)

	correct = 1 ;
f011bfd9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[13] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011bfe0:	83 ec 0c             	sub    $0xc,%esp
f011bfe3:	68 00 e0 1f 07       	push   $0x71fe000
f011bfe8:	e8 c9 ca fe ff       	call   f0108ab6 <kmalloc>
f011bfed:	83 c4 10             	add    $0x10,%esp
f011bff0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		if (ptr_allocations[13] != NULL) { correct = 0; cprintf("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL\n"); }
f011bff3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011bff6:	85 c0                	test   %eax,%eax
f011bff8:	74 17                	je     f011c011 <test_kmalloc_firstfit2+0xa90>
f011bffa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011c001:	83 ec 0c             	sub    $0xc,%esp
f011c004:	68 a8 e2 12 f0       	push   $0xf012e2a8
f011c009:	e8 5e 4f fe ff       	call   f0100f6c <cprintf>
f011c00e:	83 c4 10             	add    $0x10,%esp

	}
	if (correct)	eval+=10 ;
f011c011:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011c015:	74 04                	je     f011c01b <test_kmalloc_firstfit2+0xa9a>
f011c017:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	cprintf("test FIRST FIT allocation (2) completed. Eval = %d%\n", eval);
f011c01b:	83 ec 08             	sub    $0x8,%esp
f011c01e:	ff 75 f4             	pushl  -0xc(%ebp)
f011c021:	68 0c e3 12 f0       	push   $0xf012e30c
f011c026:	e8 41 4f fe ff       	call   f0100f6c <cprintf>
f011c02b:	83 c4 10             	add    $0x10,%esp

	return 1;
f011c02e:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011c033:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011c036:	5b                   	pop    %ebx
f011c037:	5f                   	pop    %edi
f011c038:	5d                   	pop    %ebp
f011c039:	c3                   	ret    

f011c03a <test_kfree_bestfirstfit>:


int test_kfree_bestfirstfit()
{
f011c03a:	55                   	push   %ebp
f011c03b:	89 e5                	mov    %esp,%ebp
f011c03d:	57                   	push   %edi
f011c03e:	53                   	push   %ebx
f011c03f:	81 ec 40 01 00 00    	sub    $0x140,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f011c045:	83 ec 0c             	sub    $0xc,%esp
f011c048:	68 80 de 12 f0       	push   $0xf012de80
f011c04d:	e8 1a 4f fe ff       	call   f0100f6c <cprintf>
f011c052:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c055:	83 ec 0c             	sub    $0xc,%esp
f011c058:	68 b0 de 12 f0       	push   $0xf012deb0
f011c05d:	e8 0a 4f fe ff       	call   f0100f6c <cprintf>
f011c062:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c065:	83 ec 0c             	sub    $0xc,%esp
f011c068:	68 80 de 12 f0       	push   $0xf012de80
f011c06d:	e8 fa 4e fe ff       	call   f0100f6c <cprintf>
f011c072:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011c075:	c6 45 df 80          	movb   $0x80,-0x21(%ebp)
	char maxByte = 0x7F;
f011c079:	c6 45 de 7f          	movb   $0x7f,-0x22(%ebp)
	short minShort = 1<<15 ;
f011c07d:	66 c7 45 dc 00 80    	movw   $0x8000,-0x24(%ebp)
	short maxShort = 0x7FFF;
f011c083:	66 c7 45 da ff 7f    	movw   $0x7fff,-0x26(%ebp)
	int minInt = 1<<31 ;
f011c089:	c7 45 d4 00 00 00 80 	movl   $0x80000000,-0x2c(%ebp)
	int maxInt = 0x7FFFFFFF;
f011c090:	c7 45 d0 ff ff ff 7f 	movl   $0x7fffffff,-0x30(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011c097:	e8 6d 19 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c09c:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011c09f:	8d 95 68 ff ff ff    	lea    -0x98(%ebp),%edx
f011c0a5:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c0aa:	b8 00 00 00 00       	mov    $0x0,%eax
f011c0af:	89 d7                	mov    %edx,%edi
f011c0b1:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011c0b3:	8d 95 18 ff ff ff    	lea    -0xe8(%ebp),%edx
f011c0b9:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c0be:	b8 00 00 00 00       	mov    $0x0,%eax
f011c0c3:	89 d7                	mov    %edx,%edi
f011c0c5:	f3 ab                	rep stos %eax,%es:(%edi)

	int eval = 0;
f011c0c7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	bool correct = 1;
f011c0ce:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

	correct = 1;
f011c0d5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	void* ptr_allocations[20] = {0};
f011c0dc:	8d 95 c8 fe ff ff    	lea    -0x138(%ebp),%edx
f011c0e2:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c0e7:	b8 00 00 00 00       	mov    $0x0,%eax
f011c0ec:	89 d7                	mov    %edx,%edi
f011c0ee:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//[BLOCK ALLOCATOR]
		{
			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f011c0f0:	e8 14 19 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c0f5:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011c0f8:	e8 43 87 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c0fd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[2] = kmalloc(2*kilo);
f011c100:	83 ec 0c             	sub    $0xc,%esp
f011c103:	68 00 08 00 00       	push   $0x800
f011c108:	e8 a9 c9 fe ff       	call   f0108ab6 <kmalloc>
f011c10d:	83 c4 10             	add    $0x10,%esp
f011c110:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f011c116:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c11c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011c121:	76 28                	jbe    f011c14b <test_kfree_bestfirstfit+0x111>
f011c123:	8b 9d d0 fe ff ff    	mov    -0x130(%ebp),%ebx
f011c129:	83 ec 0c             	sub    $0xc,%esp
f011c12c:	6a 00                	push   $0x0
f011c12e:	e8 79 c9 fe ff       	call   f0108aac <sbrk>
f011c133:	83 c4 10             	add    $0x10,%esp
f011c136:	39 c3                	cmp    %eax,%ebx
f011c138:	73 11                	jae    f011c14b <test_kfree_bestfirstfit+0x111>
f011c13a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c140:	89 c2                	mov    %eax,%edx
f011c142:	a1 d8 dd 17 f0       	mov    0xf017ddd8,%eax
f011c147:	39 c2                	cmp    %eax,%edx
f011c149:	72 17                	jb     f011c162 <test_kfree_bestfirstfit+0x128>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011c14b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c152:	83 ec 0c             	sub    $0xc,%esp
f011c155:	68 40 e0 12 f0       	push   $0xf012e040
f011c15a:	e8 0d 4e fe ff       	call   f0100f6c <cprintf>
f011c15f:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c162:	e8 d9 86 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c167:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c16a:	74 17                	je     f011c183 <test_kfree_bestfirstfit+0x149>
f011c16c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c173:	83 ec 0c             	sub    $0xc,%esp
f011c176:	68 40 df 12 f0       	push   $0xf012df40
f011c17b:	e8 ec 4d fe ff       	call   f0100f6c <cprintf>
f011c180:	83 c4 10             	add    $0x10,%esp
			//		if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011c183:	c7 85 70 ff ff ff ff 	movl   $0x7ff,-0x90(%ebp)
f011c18a:	07 00 00 
			ptr = (char*)ptr_allocations[2];
f011c18d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c193:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[2]; ++i)
f011c196:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c19d:	eb 0e                	jmp    f011c1ad <test_kfree_bestfirstfit+0x173>
			{
				ptr[i] = 2 ;
f011c19f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c1a2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c1a5:	01 d0                	add    %edx,%eax
f011c1a7:	c6 00 02             	movb   $0x2,(%eax)
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			//		if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[2] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[2];
			for (i = 0; i < lastIndices[2]; ++i)
f011c1aa:	ff 45 f4             	incl   -0xc(%ebp)
f011c1ad:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c1b3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c1b6:	7f e7                	jg     f011c19f <test_kfree_bestfirstfit+0x165>
			{
				ptr[i] = 2 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f011c1b8:	e8 4c 18 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c1bd:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011c1c0:	e8 7b 86 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c1c5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[3] = kmalloc(2*kilo);
f011c1c8:	83 ec 0c             	sub    $0xc,%esp
f011c1cb:	68 00 08 00 00       	push   $0x800
f011c1d0:	e8 e1 c8 fe ff       	call   f0108ab6 <kmalloc>
f011c1d5:	83 c4 10             	add    $0x10,%esp
f011c1d8:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f011c1de:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c1e4:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011c1e9:	76 28                	jbe    f011c213 <test_kfree_bestfirstfit+0x1d9>
f011c1eb:	8b 9d d4 fe ff ff    	mov    -0x12c(%ebp),%ebx
f011c1f1:	83 ec 0c             	sub    $0xc,%esp
f011c1f4:	6a 00                	push   $0x0
f011c1f6:	e8 b1 c8 fe ff       	call   f0108aac <sbrk>
f011c1fb:	83 c4 10             	add    $0x10,%esp
f011c1fe:	39 c3                	cmp    %eax,%ebx
f011c200:	73 11                	jae    f011c213 <test_kfree_bestfirstfit+0x1d9>
f011c202:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c208:	89 c2                	mov    %eax,%edx
f011c20a:	a1 d8 dd 17 f0       	mov    0xf017ddd8,%eax
f011c20f:	39 c2                	cmp    %eax,%edx
f011c211:	72 17                	jb     f011c22a <test_kfree_bestfirstfit+0x1f0>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011c213:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c21a:	83 ec 0c             	sub    $0xc,%esp
f011c21d:	68 40 e0 12 f0       	push   $0xf012e040
f011c222:	e8 45 4d fe ff       	call   f0100f6c <cprintf>
f011c227:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c22a:	e8 11 86 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c22f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c232:	74 17                	je     f011c24b <test_kfree_bestfirstfit+0x211>
f011c234:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c23b:	83 ec 0c             	sub    $0xc,%esp
f011c23e:	68 40 df 12 f0       	push   $0xf012df40
f011c243:	e8 24 4d fe ff       	call   f0100f6c <cprintf>
f011c248:	83 c4 10             	add    $0x10,%esp
			//		if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011c24b:	c7 85 74 ff ff ff ff 	movl   $0x7ff,-0x8c(%ebp)
f011c252:	07 00 00 
			ptr = (char*)ptr_allocations[3];
f011c255:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c25b:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[3]; ++i)
f011c25e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c265:	eb 0e                	jmp    f011c275 <test_kfree_bestfirstfit+0x23b>
			{
				ptr[i] = 3 ;
f011c267:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c26a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c26d:	01 d0                	add    %edx,%eax
f011c26f:	c6 00 03             	movb   $0x3,(%eax)
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			//		if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[3] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[3];
			for (i = 0; i < lastIndices[3]; ++i)
f011c272:	ff 45 f4             	incl   -0xc(%ebp)
f011c275:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c27b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c27e:	7f e7                	jg     f011c267 <test_kfree_bestfirstfit+0x22d>
		}

		//[PAGE ALLOCATOR]
		{
			//2 MB
			freeFrames = sys_calculate_free_frames() ;
f011c280:	e8 84 17 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c285:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011c288:	e8 b3 85 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c28d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011c290:	83 ec 0c             	sub    $0xc,%esp
f011c293:	68 00 fc 1f 00       	push   $0x1ffc00
f011c298:	e8 19 c8 fe ff       	call   f0108ab6 <kmalloc>
f011c29d:	83 c4 10             	add    $0x10,%esp
f011c2a0:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
			if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011c2a6:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c2ac:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011c2b1:	74 17                	je     f011c2ca <test_kfree_bestfirstfit+0x290>
f011c2b3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c2ba:	83 ec 0c             	sub    $0xc,%esp
f011c2bd:	68 f0 df 12 f0       	push   $0xf012dff0
f011c2c2:	e8 a5 4c fe ff       	call   f0100f6c <cprintf>
f011c2c7:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c2ca:	e8 71 85 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c2cf:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c2d2:	74 17                	je     f011c2eb <test_kfree_bestfirstfit+0x2b1>
f011c2d4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c2db:	83 ec 0c             	sub    $0xc,%esp
f011c2de:	68 40 df 12 f0       	push   $0xf012df40
f011c2e3:	e8 84 4c fe ff       	call   f0100f6c <cprintf>
f011c2e8:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011c2eb:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011c2ee:	e8 16 17 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c2f3:	29 c3                	sub    %eax,%ebx
f011c2f5:	89 d8                	mov    %ebx,%eax
f011c2f7:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011c2fc:	77 17                	ja     f011c315 <test_kfree_bestfirstfit+0x2db>
f011c2fe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c305:	83 ec 0c             	sub    $0xc,%esp
f011c308:	68 ac df 12 f0       	push   $0xf012dfac
f011c30d:	e8 5a 4c fe ff       	call   f0100f6c <cprintf>
f011c312:	83 c4 10             	add    $0x10,%esp
			lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011c315:	c7 85 68 ff ff ff ff 	movl   $0x1ffbff,-0x98(%ebp)
f011c31c:	fb 1f 00 

			//2 MB
			freeFrames = sys_calculate_free_frames() ;
f011c31f:	e8 e5 16 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c324:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011c327:	e8 14 85 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c32c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011c32f:	83 ec 0c             	sub    $0xc,%esp
f011c332:	68 00 fc 1f 00       	push   $0x1ffc00
f011c337:	e8 7a c7 fe ff       	call   f0108ab6 <kmalloc>
f011c33c:	83 c4 10             	add    $0x10,%esp
f011c33f:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
			if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011c345:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011c34b:	3d 00 10 20 f8       	cmp    $0xf8201000,%eax
f011c350:	74 17                	je     f011c369 <test_kfree_bestfirstfit+0x32f>
f011c352:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c359:	83 ec 0c             	sub    $0xc,%esp
f011c35c:	68 f0 df 12 f0       	push   $0xf012dff0
f011c361:	e8 06 4c fe ff       	call   f0100f6c <cprintf>
f011c366:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c369:	e8 d2 84 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c36e:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c371:	74 17                	je     f011c38a <test_kfree_bestfirstfit+0x350>
f011c373:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c37a:	83 ec 0c             	sub    $0xc,%esp
f011c37d:	68 40 df 12 f0       	push   $0xf012df40
f011c382:	e8 e5 4b fe ff       	call   f0100f6c <cprintf>
f011c387:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011c38a:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011c38d:	e8 77 16 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c392:	29 c3                	sub    %eax,%ebx
f011c394:	89 d8                	mov    %ebx,%eax
f011c396:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011c39b:	77 17                	ja     f011c3b4 <test_kfree_bestfirstfit+0x37a>
f011c39d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c3a4:	83 ec 0c             	sub    $0xc,%esp
f011c3a7:	68 ac df 12 f0       	push   $0xf012dfac
f011c3ac:	e8 bb 4b fe ff       	call   f0100f6c <cprintf>
f011c3b1:	83 c4 10             	add    $0x10,%esp
			lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011c3b4:	c7 85 6c ff ff ff ff 	movl   $0x1ffbff,-0x94(%ebp)
f011c3bb:	fb 1f 00 


			//7 KB
			freeFrames = sys_calculate_free_frames() ;
f011c3be:	e8 46 16 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c3c3:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011c3c6:	e8 75 84 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c3cb:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[4] = kmalloc(7*kilo);
f011c3ce:	83 ec 0c             	sub    $0xc,%esp
f011c3d1:	68 00 1c 00 00       	push   $0x1c00
f011c3d6:	e8 db c6 fe ff       	call   f0108ab6 <kmalloc>
f011c3db:	83 c4 10             	add    $0x10,%esp
f011c3de:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
			if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega /* + 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011c3e4:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c3ea:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011c3ef:	74 17                	je     f011c408 <test_kfree_bestfirstfit+0x3ce>
f011c3f1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c3f8:	83 ec 0c             	sub    $0xc,%esp
f011c3fb:	68 f0 df 12 f0       	push   $0xf012dff0
f011c400:	e8 67 4b fe ff       	call   f0100f6c <cprintf>
f011c405:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c408:	e8 33 84 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c40d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c410:	74 17                	je     f011c429 <test_kfree_bestfirstfit+0x3ef>
f011c412:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c419:	83 ec 0c             	sub    $0xc,%esp
f011c41c:	68 40 df 12 f0       	push   $0xf012df40
f011c421:	e8 46 4b fe ff       	call   f0100f6c <cprintf>
f011c426:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011c429:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011c42c:	e8 d8 15 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c431:	29 c3                	sub    %eax,%ebx
f011c433:	89 d8                	mov    %ebx,%eax
f011c435:	83 f8 01             	cmp    $0x1,%eax
f011c438:	77 17                	ja     f011c451 <test_kfree_bestfirstfit+0x417>
f011c43a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c441:	83 ec 0c             	sub    $0xc,%esp
f011c444:	68 ac df 12 f0       	push   $0xf012dfac
f011c449:	e8 1e 4b fe ff       	call   f0100f6c <cprintf>
f011c44e:	83 c4 10             	add    $0x10,%esp
			lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011c451:	c7 85 78 ff ff ff ff 	movl   $0x1bff,-0x88(%ebp)
f011c458:	1b 00 00 
			ptr = (char*)ptr_allocations[4];
f011c45b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c461:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[4]; ++i)
f011c464:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c46b:	eb 0e                	jmp    f011c47b <test_kfree_bestfirstfit+0x441>
			{
				ptr[i] = 4 ;
f011c46d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c470:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c473:	01 d0                	add    %edx,%eax
f011c475:	c6 00 04             	movb   $0x4,(%eax)
			if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega /* + 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			if ((freeFrames - sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[4] = (7*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[4];
			for (i = 0; i < lastIndices[4]; ++i)
f011c478:	ff 45 f4             	incl   -0xc(%ebp)
f011c47b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c481:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c484:	7f e7                	jg     f011c46d <test_kfree_bestfirstfit+0x433>
			{
				ptr[i] = 4 ;
			}

			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f011c486:	e8 7e 15 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c48b:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011c48e:	e8 ad 83 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c493:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011c496:	83 ec 0c             	sub    $0xc,%esp
f011c499:	68 00 fc 2f 00       	push   $0x2ffc00
f011c49e:	e8 13 c6 fe ff       	call   f0108ab6 <kmalloc>
f011c4a3:	83 c4 10             	add    $0x10,%esp
f011c4a6:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
			if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011c4ac:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c4b2:	3d 00 30 40 f8       	cmp    $0xf8403000,%eax
f011c4b7:	74 17                	je     f011c4d0 <test_kfree_bestfirstfit+0x496>
f011c4b9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c4c0:	83 ec 0c             	sub    $0xc,%esp
f011c4c3:	68 f0 df 12 f0       	push   $0xf012dff0
f011c4c8:	e8 9f 4a fe ff       	call   f0100f6c <cprintf>
f011c4cd:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c4d0:	e8 6b 83 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c4d5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c4d8:	74 17                	je     f011c4f1 <test_kfree_bestfirstfit+0x4b7>
f011c4da:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c4e1:	83 ec 0c             	sub    $0xc,%esp
f011c4e4:	68 40 df 12 f0       	push   $0xf012df40
f011c4e9:	e8 7e 4a fe ff       	call   f0100f6c <cprintf>
f011c4ee:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011c4f1:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011c4f4:	e8 10 15 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c4f9:	29 c3                	sub    %eax,%ebx
f011c4fb:	89 d8                	mov    %ebx,%eax
f011c4fd:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011c502:	77 17                	ja     f011c51b <test_kfree_bestfirstfit+0x4e1>
f011c504:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c50b:	83 ec 0c             	sub    $0xc,%esp
f011c50e:	68 ac df 12 f0       	push   $0xf012dfac
f011c513:	e8 54 4a fe ff       	call   f0100f6c <cprintf>
f011c518:	83 c4 10             	add    $0x10,%esp
			lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011c51b:	c7 85 7c ff ff ff ff 	movl   $0x2ffbff,-0x84(%ebp)
f011c522:	fb 2f 00 
			ptr = (char*)ptr_allocations[5];
f011c525:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c52b:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[5]; ++i)
f011c52e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c535:	eb 0e                	jmp    f011c545 <test_kfree_bestfirstfit+0x50b>
			{
				ptr[i] = 5 ;
f011c537:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c53a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c53d:	01 d0                	add    %edx,%eax
f011c53f:	c6 00 05             	movb   $0x5,(%eax)
			if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[5];
			for (i = 0; i < lastIndices[5]; ++i)
f011c542:	ff 45 f4             	incl   -0xc(%ebp)
f011c545:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011c54b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c54e:	7f e7                	jg     f011c537 <test_kfree_bestfirstfit+0x4fd>
			{
				ptr[i] = 5 ;
			}

			//6 MB
			freeFrames = sys_calculate_free_frames() ;
f011c550:	e8 b4 14 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c555:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011c558:	e8 e3 82 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c55d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011c560:	83 ec 0c             	sub    $0xc,%esp
f011c563:	68 00 fc 5f 00       	push   $0x5ffc00
f011c568:	e8 49 c5 fe ff       	call   f0108ab6 <kmalloc>
f011c56d:	83 c4 10             	add    $0x10,%esp
f011c570:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011c576:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c57c:	3d 00 30 70 f8       	cmp    $0xf8703000,%eax
f011c581:	74 17                	je     f011c59a <test_kfree_bestfirstfit+0x560>
f011c583:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c58a:	83 ec 0c             	sub    $0xc,%esp
f011c58d:	68 f0 df 12 f0       	push   $0xf012dff0
f011c592:	e8 d5 49 fe ff       	call   f0100f6c <cprintf>
f011c597:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c59a:	e8 a1 82 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c59f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c5a2:	74 17                	je     f011c5bb <test_kfree_bestfirstfit+0x581>
f011c5a4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c5ab:	83 ec 0c             	sub    $0xc,%esp
f011c5ae:	68 40 df 12 f0       	push   $0xf012df40
f011c5b3:	e8 b4 49 fe ff       	call   f0100f6c <cprintf>
f011c5b8:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 1536) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011c5bb:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011c5be:	e8 46 14 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c5c3:	29 c3                	sub    %eax,%ebx
f011c5c5:	89 d8                	mov    %ebx,%eax
f011c5c7:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011c5cc:	77 17                	ja     f011c5e5 <test_kfree_bestfirstfit+0x5ab>
f011c5ce:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c5d5:	83 ec 0c             	sub    $0xc,%esp
f011c5d8:	68 ac df 12 f0       	push   $0xf012dfac
f011c5dd:	e8 8a 49 fe ff       	call   f0100f6c <cprintf>
f011c5e2:	83 c4 10             	add    $0x10,%esp
			lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f011c5e5:	c7 45 80 ff fb 5f 00 	movl   $0x5ffbff,-0x80(%ebp)

			//14 KB
			freeFrames = sys_calculate_free_frames() ;
f011c5ec:	e8 18 14 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c5f1:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011c5f4:	e8 47 82 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c5f9:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[7] = kmalloc(14*kilo);
f011c5fc:	83 ec 0c             	sub    $0xc,%esp
f011c5ff:	68 00 38 00 00       	push   $0x3800
f011c604:	e8 ad c4 fe ff       	call   f0108ab6 <kmalloc>
f011c609:	83 c4 10             	add    $0x10,%esp
f011c60c:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
			if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011c612:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c618:	3d 00 30 d0 f8       	cmp    $0xf8d03000,%eax
f011c61d:	74 17                	je     f011c636 <test_kfree_bestfirstfit+0x5fc>
f011c61f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c626:	83 ec 0c             	sub    $0xc,%esp
f011c629:	68 f0 df 12 f0       	push   $0xf012dff0
f011c62e:	e8 39 49 fe ff       	call   f0100f6c <cprintf>
f011c633:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c636:	e8 05 82 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c63b:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011c63e:	74 17                	je     f011c657 <test_kfree_bestfirstfit+0x61d>
f011c640:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c647:	83 ec 0c             	sub    $0xc,%esp
f011c64a:	68 40 df 12 f0       	push   $0xf012df40
f011c64f:	e8 18 49 fe ff       	call   f0100f6c <cprintf>
f011c654:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011c657:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011c65a:	e8 aa 13 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c65f:	29 c3                	sub    %eax,%ebx
f011c661:	89 d8                	mov    %ebx,%eax
f011c663:	83 f8 03             	cmp    $0x3,%eax
f011c666:	77 17                	ja     f011c67f <test_kfree_bestfirstfit+0x645>
f011c668:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c66f:	83 ec 0c             	sub    $0xc,%esp
f011c672:	68 ac df 12 f0       	push   $0xf012dfac
f011c677:	e8 f0 48 fe ff       	call   f0100f6c <cprintf>
f011c67c:	83 c4 10             	add    $0x10,%esp
			lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f011c67f:	c7 45 84 ff 37 00 00 	movl   $0x37ff,-0x7c(%ebp)
			ptr = (char*)ptr_allocations[7];
f011c686:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c68c:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[7]; ++i)
f011c68f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c696:	eb 0e                	jmp    f011c6a6 <test_kfree_bestfirstfit+0x66c>
			{
				ptr[i] = 7 ;
f011c698:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c69b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c69e:	01 d0                	add    %edx,%eax
f011c6a0:	c6 00 07             	movb   $0x7,(%eax)
			if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			if ((freeFrames - sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[7] = (14*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[7];
			for (i = 0; i < lastIndices[7]; ++i)
f011c6a3:	ff 45 f4             	incl   -0xc(%ebp)
f011c6a6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011c6a9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c6ac:	7f ea                	jg     f011c698 <test_kfree_bestfirstfit+0x65e>
	}

	//kfree some of the allocated spaces [10%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011c6ae:	e8 56 13 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c6b3:	89 45 bc             	mov    %eax,-0x44(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011c6b6:	e8 85 81 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c6bb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		kfree(ptr_allocations[0]);
f011c6be:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011c6c4:	83 ec 0c             	sub    $0xc,%esp
f011c6c7:	50                   	push   %eax
f011c6c8:	e8 03 c4 fe ff       	call   f0108ad0 <kfree>
f011c6cd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c6d0:	e8 6b 81 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c6d5:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011c6d8:	74 17                	je     f011c6f1 <test_kfree_bestfirstfit+0x6b7>
f011c6da:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c6e1:	83 ec 0c             	sub    $0xc,%esp
f011c6e4:	68 40 df 12 f0       	push   $0xf012df40
f011c6e9:	e8 7e 48 fe ff       	call   f0100f6c <cprintf>
f011c6ee:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512 ) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011c6f1:	e8 13 13 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c6f6:	89 c2                	mov    %eax,%edx
f011c6f8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c6fb:	29 c2                	sub    %eax,%edx
f011c6fd:	89 d0                	mov    %edx,%eax
f011c6ff:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011c704:	77 17                	ja     f011c71d <test_kfree_bestfirstfit+0x6e3>
f011c706:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c70d:	83 ec 0c             	sub    $0xc,%esp
f011c710:	68 44 e3 12 f0       	push   $0xf012e344
f011c715:	e8 52 48 fe ff       	call   f0100f6c <cprintf>
f011c71a:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011c71d:	e8 e7 12 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c722:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c725:	e8 16 81 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c72a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		kfree(ptr_allocations[2]);
f011c72d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c733:	83 ec 0c             	sub    $0xc,%esp
f011c736:	50                   	push   %eax
f011c737:	e8 94 c3 fe ff       	call   f0108ad0 <kfree>
f011c73c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c73f:	e8 fc 80 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c744:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011c747:	74 17                	je     f011c760 <test_kfree_bestfirstfit+0x726>
f011c749:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c750:	83 ec 0c             	sub    $0xc,%esp
f011c753:	68 40 df 12 f0       	push   $0xf012df40
f011c758:	e8 0f 48 fe ff       	call   f0100f6c <cprintf>
f011c75d:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0 ) { correct = 0; cprintf("Wrong free: freeing a block from the dynamic allocator should not affect the free frames\n"); }
f011c760:	e8 a4 12 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c765:	89 c2                	mov    %eax,%edx
f011c767:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c76a:	39 c2                	cmp    %eax,%edx
f011c76c:	74 17                	je     f011c785 <test_kfree_bestfirstfit+0x74b>
f011c76e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c775:	83 ec 0c             	sub    $0xc,%esp
f011c778:	68 4c e2 12 f0       	push   $0xf012e24c
f011c77d:	e8 ea 47 fe ff       	call   f0100f6c <cprintf>
f011c782:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c785:	e8 7f 12 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c78a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c78d:	e8 ae 80 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c792:	89 45 b8             	mov    %eax,-0x48(%ebp)
		kfree(ptr_allocations[1]);
f011c795:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011c79b:	83 ec 0c             	sub    $0xc,%esp
f011c79e:	50                   	push   %eax
f011c79f:	e8 2c c3 fe ff       	call   f0108ad0 <kfree>
f011c7a4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c7a7:	e8 94 80 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c7ac:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011c7af:	74 17                	je     f011c7c8 <test_kfree_bestfirstfit+0x78e>
f011c7b1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c7b8:	83 ec 0c             	sub    $0xc,%esp
f011c7bb:	68 40 df 12 f0       	push   $0xf012df40
f011c7c0:	e8 a7 47 fe ff       	call   f0100f6c <cprintf>
f011c7c5:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011c7c8:	e8 3c 12 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c7cd:	89 c2                	mov    %eax,%edx
f011c7cf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c7d2:	29 c2                	sub    %eax,%edx
f011c7d4:	89 d0                	mov    %edx,%eax
f011c7d6:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011c7db:	77 17                	ja     f011c7f4 <test_kfree_bestfirstfit+0x7ba>
f011c7dd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c7e4:	83 ec 0c             	sub    $0xc,%esp
f011c7e7:	68 44 e3 12 f0       	push   $0xf012e344
f011c7ec:	e8 7b 47 fe ff       	call   f0100f6c <cprintf>
f011c7f1:	83 c4 10             	add    $0x10,%esp

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011c7f4:	e8 10 12 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c7f9:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c7fc:	e8 3f 80 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c801:	89 45 b8             	mov    %eax,-0x48(%ebp)
		kfree(ptr_allocations[6]);
f011c804:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c80a:	83 ec 0c             	sub    $0xc,%esp
f011c80d:	50                   	push   %eax
f011c80e:	e8 bd c2 fe ff       	call   f0108ad0 <kfree>
f011c813:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c816:	e8 25 80 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c81b:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011c81e:	74 17                	je     f011c837 <test_kfree_bestfirstfit+0x7fd>
f011c820:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c827:	83 ec 0c             	sub    $0xc,%esp
f011c82a:	68 40 df 12 f0       	push   $0xf012df40
f011c82f:	e8 38 47 fe ff       	call   f0100f6c <cprintf>
f011c834:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 6*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011c837:	e8 cd 11 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c83c:	89 c2                	mov    %eax,%edx
f011c83e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011c841:	29 c2                	sub    %eax,%edx
f011c843:	89 d0                	mov    %edx,%eax
f011c845:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011c84a:	77 17                	ja     f011c863 <test_kfree_bestfirstfit+0x829>
f011c84c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c853:	83 ec 0c             	sub    $0xc,%esp
f011c856:	68 44 e3 12 f0       	push   $0xf012e344
f011c85b:	e8 0c 47 fe ff       	call   f0100f6c <cprintf>
f011c860:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011c863:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011c867:	74 04                	je     f011c86d <test_kfree_bestfirstfit+0x833>
f011c869:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)

	correct = 1 ;
f011c86d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//Check memory access after kfree [10%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f011c874:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c87a:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011c87d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c884:	eb 1e                	jmp    f011c8a4 <test_kfree_bestfirstfit+0x86a>
		{
			sums[3] += ptr[i] ;
f011c886:	8b 95 24 ff ff ff    	mov    -0xdc(%ebp),%edx
f011c88c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011c88f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c892:	01 c8                	add    %ecx,%eax
f011c894:	8a 00                	mov    (%eax),%al
f011c896:	0f be c0             	movsbl %al,%eax
f011c899:	01 d0                	add    %edx,%eax
f011c89b:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	correct = 1 ;
	//Check memory access after kfree [10%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011c8a1:	ff 45 f4             	incl   -0xc(%ebp)
f011c8a4:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c8aa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c8ad:	7f d7                	jg     f011c886 <test_kfree_bestfirstfit+0x84c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }
f011c8af:	8b 95 24 ff ff ff    	mov    -0xdc(%ebp),%edx
f011c8b5:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011c8bb:	89 c1                	mov    %eax,%ecx
f011c8bd:	01 c9                	add    %ecx,%ecx
f011c8bf:	01 c8                	add    %ecx,%eax
f011c8c1:	39 c2                	cmp    %eax,%edx
f011c8c3:	74 17                	je     f011c8dc <test_kfree_bestfirstfit+0x8a2>
f011c8c5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c8cc:	83 ec 0c             	sub    $0xc,%esp
f011c8cf:	68 7c e3 12 f0       	push   $0xf012e37c
f011c8d4:	e8 93 46 fe ff       	call   f0100f6c <cprintf>
f011c8d9:	83 c4 10             	add    $0x10,%esp

		//7 KB
		ptr = (char*)ptr_allocations[4];
f011c8dc:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c8e2:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011c8e5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c8ec:	eb 1e                	jmp    f011c90c <test_kfree_bestfirstfit+0x8d2>
		{
			sums[4] += ptr[i] ;
f011c8ee:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f011c8f4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011c8f7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c8fa:	01 c8                	add    %ecx,%eax
f011c8fc:	8a 00                	mov    (%eax),%al
f011c8fe:	0f be c0             	movsbl %al,%eax
f011c901:	01 d0                	add    %edx,%eax
f011c903:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011c909:	ff 45 f4             	incl   -0xc(%ebp)
f011c90c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011c912:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c915:	7f d7                	jg     f011c8ee <test_kfree_bestfirstfit+0x8b4>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }
f011c917:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c91d:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f011c923:	c1 e2 02             	shl    $0x2,%edx
f011c926:	39 d0                	cmp    %edx,%eax
f011c928:	74 17                	je     f011c941 <test_kfree_bestfirstfit+0x907>
f011c92a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c931:	83 ec 0c             	sub    $0xc,%esp
f011c934:	68 7c e3 12 f0       	push   $0xf012e37c
f011c939:	e8 2e 46 fe ff       	call   f0100f6c <cprintf>
f011c93e:	83 c4 10             	add    $0x10,%esp

		//3 MB
		ptr = (char*)ptr_allocations[5];
f011c941:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c947:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011c94a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c951:	eb 1e                	jmp    f011c971 <test_kfree_bestfirstfit+0x937>
		{
			sums[5] += ptr[i] ;
f011c953:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f011c959:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011c95c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c95f:	01 c8                	add    %ecx,%eax
f011c961:	8a 00                	mov    (%eax),%al
f011c963:	0f be c0             	movsbl %al,%eax
f011c966:	01 d0                	add    %edx,%eax
f011c968:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011c96e:	ff 45 f4             	incl   -0xc(%ebp)
f011c971:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011c977:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c97a:	7f d7                	jg     f011c953 <test_kfree_bestfirstfit+0x919>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }
f011c97c:	8b 8d 2c ff ff ff    	mov    -0xd4(%ebp),%ecx
f011c982:	8b 95 7c ff ff ff    	mov    -0x84(%ebp),%edx
f011c988:	89 d0                	mov    %edx,%eax
f011c98a:	c1 e0 02             	shl    $0x2,%eax
f011c98d:	01 d0                	add    %edx,%eax
f011c98f:	39 c1                	cmp    %eax,%ecx
f011c991:	74 17                	je     f011c9aa <test_kfree_bestfirstfit+0x970>
f011c993:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c99a:	83 ec 0c             	sub    $0xc,%esp
f011c99d:	68 7c e3 12 f0       	push   $0xf012e37c
f011c9a2:	e8 c5 45 fe ff       	call   f0100f6c <cprintf>
f011c9a7:	83 c4 10             	add    $0x10,%esp

		//14 KB
		ptr = (char*)ptr_allocations[7];
f011c9aa:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c9b0:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011c9b3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011c9ba:	eb 1e                	jmp    f011c9da <test_kfree_bestfirstfit+0x9a0>
		{
			sums[7] += ptr[i] ;
f011c9bc:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f011c9c2:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011c9c5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011c9c8:	01 c8                	add    %ecx,%eax
f011c9ca:	8a 00                	mov    (%eax),%al
f011c9cc:	0f be c0             	movsbl %al,%eax
f011c9cf:	01 d0                	add    %edx,%eax
f011c9d1:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011c9d7:	ff 45 f4             	incl   -0xc(%ebp)
f011c9da:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011c9dd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011c9e0:	7f da                	jg     f011c9bc <test_kfree_bestfirstfit+0x982>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }
f011c9e2:	8b 8d 34 ff ff ff    	mov    -0xcc(%ebp),%ecx
f011c9e8:	8b 55 84             	mov    -0x7c(%ebp),%edx
f011c9eb:	89 d0                	mov    %edx,%eax
f011c9ed:	01 c0                	add    %eax,%eax
f011c9ef:	01 d0                	add    %edx,%eax
f011c9f1:	01 c0                	add    %eax,%eax
f011c9f3:	01 d0                	add    %edx,%eax
f011c9f5:	39 c1                	cmp    %eax,%ecx
f011c9f7:	74 17                	je     f011ca10 <test_kfree_bestfirstfit+0x9d6>
f011c9f9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ca00:	83 ec 0c             	sub    $0xc,%esp
f011ca03:	68 7c e3 12 f0       	push   $0xf012e37c
f011ca08:	e8 5f 45 fe ff       	call   f0100f6c <cprintf>
f011ca0d:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011ca10:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011ca14:	74 04                	je     f011ca1a <test_kfree_bestfirstfit+0x9e0>
f011ca16:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)

	correct = 1 ;
f011ca1a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011ca21:	e8 e3 0f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ca26:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ca29:	e8 12 7e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ca2e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f011ca31:	83 ec 0c             	sub    $0xc,%esp
f011ca34:	68 00 00 30 00       	push   $0x300000
f011ca39:	e8 78 c0 fe ff       	call   f0108ab6 <kmalloc>
f011ca3e:	83 c4 10             	add    $0x10,%esp
f011ca41:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011ca47:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011ca4d:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011ca52:	74 17                	je     f011ca6b <test_kfree_bestfirstfit+0xa31>
f011ca54:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ca5b:	83 ec 0c             	sub    $0xc,%esp
f011ca5e:	68 f0 df 12 f0       	push   $0xf012dff0
f011ca63:	e8 04 45 fe ff       	call   f0100f6c <cprintf>
f011ca68:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ca6b:	e8 d0 7d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ca70:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011ca73:	74 17                	je     f011ca8c <test_kfree_bestfirstfit+0xa52>
f011ca75:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ca7c:	83 ec 0c             	sub    $0xc,%esp
f011ca7f:	68 40 df 12 f0       	push   $0xf012df40
f011ca84:	e8 e3 44 fe ff       	call   f0100f6c <cprintf>
f011ca89:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011ca8c:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011ca8f:	e8 75 0f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ca94:	29 c3                	sub    %eax,%ebx
f011ca96:	89 d8                	mov    %ebx,%eax
f011ca98:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011ca9d:	77 17                	ja     f011cab6 <test_kfree_bestfirstfit+0xa7c>
f011ca9f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011caa6:	83 ec 0c             	sub    $0xc,%esp
f011caa9:	68 ac df 12 f0       	push   $0xf012dfac
f011caae:	e8 b9 44 fe ff       	call   f0100f6c <cprintf>
f011cab3:	83 c4 10             	add    $0x10,%esp
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f011cab6:	c7 45 88 ff ff 2f 00 	movl   $0x2fffff,-0x78(%ebp)
		ptr = (char*)ptr_allocations[8];
f011cabd:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011cac3:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f011cac6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011cacd:	eb 0e                	jmp    f011cadd <test_kfree_bestfirstfit+0xaa3>
		{
			ptr[i] = 8 ;
f011cacf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cad2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cad5:	01 d0                	add    %edx,%eax
f011cad7:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f011cada:	ff 45 f4             	incl   -0xc(%ebp)
f011cadd:	8b 45 88             	mov    -0x78(%ebp),%eax
f011cae0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011cae3:	7f ea                	jg     f011cacf <test_kfree_bestfirstfit+0xa95>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f011cae5:	e8 1f 0f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011caea:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011caed:	e8 4e 7d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011caf2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f011caf5:	83 ec 0c             	sub    $0xc,%esp
f011caf8:	68 00 00 10 00       	push   $0x100000
f011cafd:	e8 b4 bf fe ff       	call   f0108ab6 <kmalloc>
f011cb02:	83 c4 10             	add    $0x10,%esp
f011cb05:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega /*+ 4*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011cb0b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011cb11:	3d 00 10 30 f8       	cmp    $0xf8301000,%eax
f011cb16:	74 17                	je     f011cb2f <test_kfree_bestfirstfit+0xaf5>
f011cb18:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cb1f:	83 ec 0c             	sub    $0xc,%esp
f011cb22:	68 f0 df 12 f0       	push   $0xf012dff0
f011cb27:	e8 40 44 fe ff       	call   f0100f6c <cprintf>
f011cb2c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cb2f:	e8 0c 7d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cb34:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011cb37:	74 17                	je     f011cb50 <test_kfree_bestfirstfit+0xb16>
f011cb39:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cb40:	83 ec 0c             	sub    $0xc,%esp
f011cb43:	68 40 df 12 f0       	push   $0xf012df40
f011cb48:	e8 1f 44 fe ff       	call   f0100f6c <cprintf>
f011cb4d:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011cb50:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011cb53:	e8 b1 0e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cb58:	29 c3                	sub    %eax,%ebx
f011cb5a:	89 d8                	mov    %ebx,%eax
f011cb5c:	3d ff 00 00 00       	cmp    $0xff,%eax
f011cb61:	77 17                	ja     f011cb7a <test_kfree_bestfirstfit+0xb40>
f011cb63:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cb6a:	83 ec 0c             	sub    $0xc,%esp
f011cb6d:	68 ac df 12 f0       	push   $0xf012dfac
f011cb72:	e8 f5 43 fe ff       	call   f0100f6c <cprintf>
f011cb77:	83 c4 10             	add    $0x10,%esp
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f011cb7a:	c7 45 90 ff ff 0f 00 	movl   $0xfffff,-0x70(%ebp)
		ptr = (char*)ptr_allocations[10];
f011cb81:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011cb87:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f011cb8a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011cb91:	eb 0e                	jmp    f011cba1 <test_kfree_bestfirstfit+0xb67>
		{
			ptr[i] = 10 ;
f011cb93:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cb96:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cb99:	01 d0                	add    %edx,%eax
f011cb9b:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega /*+ 4*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f011cb9e:	ff 45 f4             	incl   -0xc(%ebp)
f011cba1:	8b 45 90             	mov    -0x70(%ebp),%eax
f011cba4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011cba7:	7f ea                	jg     f011cb93 <test_kfree_bestfirstfit+0xb59>
		{
			ptr[i] = 10 ;
		}

		//1 KB [Should be allocated in 1st hole in the Dynamic Allocator]
		freeFrames = sys_calculate_free_frames() ;
f011cba9:	e8 5b 0e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cbae:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cbb1:	e8 8a 7c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cbb6:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[9] = kmalloc(1*kilo);
f011cbb9:	83 ec 0c             	sub    $0xc,%esp
f011cbbc:	68 00 04 00 00       	push   $0x400
f011cbc1:	e8 f0 be fe ff       	call   f0108ab6 <kmalloc>
f011cbc6:	83 c4 10             	add    $0x10,%esp
f011cbc9:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((ptr_allocations[9] < ptr_allocations[2]) || (ptr_allocations[9] > (ptr_allocations[2] + 1*kilo)))
f011cbcf:	8b 95 ec fe ff ff    	mov    -0x114(%ebp),%edx
f011cbd5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011cbdb:	39 c2                	cmp    %eax,%edx
f011cbdd:	72 16                	jb     f011cbf5 <test_kfree_bestfirstfit+0xbbb>
f011cbdf:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011cbe5:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011cbeb:	81 c2 00 04 00 00    	add    $0x400,%edx
f011cbf1:	39 d0                	cmp    %edx,%eax
f011cbf3:	76 17                	jbe    f011cc0c <test_kfree_bestfirstfit+0xbd2>
		{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011cbf5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cbfc:	83 ec 0c             	sub    $0xc,%esp
f011cbff:	68 f0 df 12 f0       	push   $0xf012dff0
f011cc04:	e8 63 43 fe ff       	call   f0100f6c <cprintf>
f011cc09:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cc0c:	e8 2f 7c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cc11:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011cc14:	74 17                	je     f011cc2d <test_kfree_bestfirstfit+0xbf3>
f011cc16:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cc1d:	83 ec 0c             	sub    $0xc,%esp
f011cc20:	68 40 df 12 f0       	push   $0xf012df40
f011cc25:	e8 42 43 fe ff       	call   f0100f6c <cprintf>
f011cc2a:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
f011cc2d:	e8 d7 0d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cc32:	89 c2                	mov    %eax,%edx
f011cc34:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cc37:	39 c2                	cmp    %eax,%edx
f011cc39:	74 17                	je     f011cc52 <test_kfree_bestfirstfit+0xc18>
f011cc3b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cc42:	83 ec 0c             	sub    $0xc,%esp
f011cc45:	68 b0 e3 12 f0       	push   $0xf012e3b0
f011cc4a:	e8 1d 43 fe ff       	call   f0100f6c <cprintf>
f011cc4f:	83 c4 10             	add    $0x10,%esp
		lastIndices[9] = (1*kilo)/sizeof(char) - 1;
f011cc52:	c7 45 8c ff 03 00 00 	movl   $0x3ff,-0x74(%ebp)
		ptr = (char*)ptr_allocations[9];
f011cc59:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011cc5f:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f011cc62:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011cc69:	eb 0e                	jmp    f011cc79 <test_kfree_bestfirstfit+0xc3f>
		{
			ptr[i] = 9 ;
f011cc6b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cc6e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cc71:	01 d0                	add    %edx,%eax
f011cc73:	c6 00 09             	movb   $0x9,(%eax)
		{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
		lastIndices[9] = (1*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f011cc76:	ff 45 f4             	incl   -0xc(%ebp)
f011cc79:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011cc7c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011cc7f:	7f ea                	jg     f011cc6b <test_kfree_bestfirstfit+0xc31>
		{
			ptr[i] = 9 ;
		}

	}
	if (correct)	eval+=15 ;
f011cc81:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cc85:	74 04                	je     f011cc8b <test_kfree_bestfirstfit+0xc51>
f011cc87:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)

	correct = 1 ;
f011cc8b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//kfree remaining allocated spaces [15%]
	{
		//kfree 3 MB [PAGE ALLOCATOR: Should be Merged with NEXT 6 MB hole - total = 9MB]
		freeFrames = sys_calculate_free_frames() ;
f011cc92:	e8 72 0d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cc97:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cc9a:	e8 a1 7b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cc9f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[5]);
f011cca2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011cca8:	83 ec 0c             	sub    $0xc,%esp
f011ccab:	50                   	push   %eax
f011ccac:	e8 1f be fe ff       	call   f0108ad0 <kfree>
f011ccb1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ccb4:	e8 87 7b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ccb9:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011ccbc:	74 17                	je     f011ccd5 <test_kfree_bestfirstfit+0xc9b>
f011ccbe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ccc5:	83 ec 0c             	sub    $0xc,%esp
f011ccc8:	68 40 df 12 f0       	push   $0xf012df40
f011cccd:	e8 9a 42 fe ff       	call   f0100f6c <cprintf>
f011ccd2:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 3*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011ccd5:	e8 2f 0d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ccda:	89 c2                	mov    %eax,%edx
f011ccdc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ccdf:	29 c2                	sub    %eax,%edx
f011cce1:	89 d0                	mov    %edx,%eax
f011cce3:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011cce8:	77 17                	ja     f011cd01 <test_kfree_bestfirstfit+0xcc7>
f011ccea:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ccf1:	83 ec 0c             	sub    $0xc,%esp
f011ccf4:	68 44 e3 12 f0       	push   $0xf012e344
f011ccf9:	e8 6e 42 fe ff       	call   f0100f6c <cprintf>
f011ccfe:	83 c4 10             	add    $0x10,%esp

		//kfree 7 KB [PAGE ALLOCATOR: Should be Merged with NEXT 9 MB hole - total = 9MB + 8KB]
		freeFrames = sys_calculate_free_frames() ;
f011cd01:	e8 03 0d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cd06:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cd09:	e8 32 7b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cd0e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[4]);
f011cd11:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011cd17:	83 ec 0c             	sub    $0xc,%esp
f011cd1a:	50                   	push   %eax
f011cd1b:	e8 b0 bd fe ff       	call   f0108ad0 <kfree>
f011cd20:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cd23:	e8 18 7b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cd28:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011cd2b:	74 17                	je     f011cd44 <test_kfree_bestfirstfit+0xd0a>
f011cd2d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cd34:	83 ec 0c             	sub    $0xc,%esp
f011cd37:	68 40 df 12 f0       	push   $0xf012df40
f011cd3c:	e8 2b 42 fe ff       	call   f0100f6c <cprintf>
f011cd41:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 2) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011cd44:	e8 c0 0c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cd49:	89 c2                	mov    %eax,%edx
f011cd4b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cd4e:	29 c2                	sub    %eax,%edx
f011cd50:	89 d0                	mov    %edx,%eax
f011cd52:	83 f8 01             	cmp    $0x1,%eax
f011cd55:	77 17                	ja     f011cd6e <test_kfree_bestfirstfit+0xd34>
f011cd57:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cd5e:	83 ec 0c             	sub    $0xc,%esp
f011cd61:	68 44 e3 12 f0       	push   $0xf012e344
f011cd66:	e8 01 42 fe ff       	call   f0100f6c <cprintf>
f011cd6b:	83 c4 10             	add    $0x10,%esp

		//kfree 1 KB [DYNAMIC ALLOCATOR]
		freeFrames = sys_calculate_free_frames() ;
f011cd6e:	e8 96 0c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cd73:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cd76:	e8 c5 7a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cd7b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[9]);
f011cd7e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011cd84:	83 ec 0c             	sub    $0xc,%esp
f011cd87:	50                   	push   %eax
f011cd88:	e8 43 bd fe ff       	call   f0108ad0 <kfree>
f011cd8d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cd90:	e8 ab 7a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cd95:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011cd98:	74 17                	je     f011cdb1 <test_kfree_bestfirstfit+0xd77>
f011cd9a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cda1:	83 ec 0c             	sub    $0xc,%esp
f011cda4:	68 40 df 12 f0       	push   $0xf012df40
f011cda9:	e8 be 41 fe ff       	call   f0100f6c <cprintf>
f011cdae:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011cdb1:	e8 53 0c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cdb6:	89 c2                	mov    %eax,%edx
f011cdb8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cdbb:	39 c2                	cmp    %eax,%edx
f011cdbd:	74 17                	je     f011cdd6 <test_kfree_bestfirstfit+0xd9c>
f011cdbf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cdc6:	83 ec 0c             	sub    $0xc,%esp
f011cdc9:	68 44 e3 12 f0       	push   $0xf012e344
f011cdce:	e8 99 41 fe ff       	call   f0100f6c <cprintf>
f011cdd3:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB [DYNAMIC ALLOCATOR: Should be Merged with PREV remaining area of 2KB & NEXT free space]
		freeFrames = sys_calculate_free_frames() ;
f011cdd6:	e8 2e 0c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cddb:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cdde:	e8 5d 7a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cde3:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[3]);
f011cde6:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011cdec:	83 ec 0c             	sub    $0xc,%esp
f011cdef:	50                   	push   %eax
f011cdf0:	e8 db bc fe ff       	call   f0108ad0 <kfree>
f011cdf5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cdf8:	e8 43 7a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cdfd:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011ce00:	74 17                	je     f011ce19 <test_kfree_bestfirstfit+0xddf>
f011ce02:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ce09:	83 ec 0c             	sub    $0xc,%esp
f011ce0c:	68 40 df 12 f0       	push   $0xf012df40
f011ce11:	e8 56 41 fe ff       	call   f0100f6c <cprintf>
f011ce16:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) { correct = 0; cprintf("Wrong free: freeing a block from the dynamic allocator should not affect the free frames\n"); }
f011ce19:	e8 eb 0b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ce1e:	89 c2                	mov    %eax,%edx
f011ce20:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ce23:	39 c2                	cmp    %eax,%edx
f011ce25:	74 17                	je     f011ce3e <test_kfree_bestfirstfit+0xe04>
f011ce27:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ce2e:	83 ec 0c             	sub    $0xc,%esp
f011ce31:	68 4c e2 12 f0       	push   $0xf012e24c
f011ce36:	e8 31 41 fe ff       	call   f0100f6c <cprintf>
f011ce3b:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB [PAGE ALLOCATOR: Should be Merged with PREV 9MB + 8KB hole - total = 9MB + 24KB]
		freeFrames = sys_calculate_free_frames() ;
f011ce3e:	e8 c6 0b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ce43:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce46:	e8 f5 79 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ce4b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[7]);
f011ce4e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ce54:	83 ec 0c             	sub    $0xc,%esp
f011ce57:	50                   	push   %eax
f011ce58:	e8 73 bc fe ff       	call   f0108ad0 <kfree>
f011ce5d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ce60:	e8 db 79 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ce65:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011ce68:	74 17                	je     f011ce81 <test_kfree_bestfirstfit+0xe47>
f011ce6a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ce71:	83 ec 0c             	sub    $0xc,%esp
f011ce74:	68 40 df 12 f0       	push   $0xf012df40
f011ce79:	e8 ee 40 fe ff       	call   f0100f6c <cprintf>
f011ce7e:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 4) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011ce81:	e8 83 0b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ce86:	89 c2                	mov    %eax,%edx
f011ce88:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011ce8b:	29 c2                	sub    %eax,%edx
f011ce8d:	89 d0                	mov    %edx,%eax
f011ce8f:	83 f8 03             	cmp    $0x3,%eax
f011ce92:	77 17                	ja     f011ceab <test_kfree_bestfirstfit+0xe71>
f011ce94:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ce9b:	83 ec 0c             	sub    $0xc,%esp
f011ce9e:	68 44 e3 12 f0       	push   $0xf012e344
f011cea3:	e8 c4 40 fe ff       	call   f0100f6c <cprintf>
f011cea8:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB [PAGE ALLOCATOR: Should be Merged with NEXT remaining hole ]
		freeFrames = sys_calculate_free_frames() ;
f011ceab:	e8 59 0b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ceb0:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ceb3:	e8 88 79 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ceb8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[10]);
f011cebb:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011cec1:	83 ec 0c             	sub    $0xc,%esp
f011cec4:	50                   	push   %eax
f011cec5:	e8 06 bc fe ff       	call   f0108ad0 <kfree>
f011ceca:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cecd:	e8 6e 79 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ced2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011ced5:	74 17                	je     f011ceee <test_kfree_bestfirstfit+0xeb4>
f011ced7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cede:	83 ec 0c             	sub    $0xc,%esp
f011cee1:	68 40 df 12 f0       	push   $0xf012df40
f011cee6:	e8 81 40 fe ff       	call   f0100f6c <cprintf>
f011ceeb:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 1*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011ceee:	e8 16 0b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cef3:	89 c2                	mov    %eax,%edx
f011cef5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cef8:	29 c2                	sub    %eax,%edx
f011cefa:	89 d0                	mov    %edx,%eax
f011cefc:	3d ff 00 00 00       	cmp    $0xff,%eax
f011cf01:	77 17                	ja     f011cf1a <test_kfree_bestfirstfit+0xee0>
f011cf03:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cf0a:	83 ec 0c             	sub    $0xc,%esp
f011cf0d:	68 44 e3 12 f0       	push   $0xf012e344
f011cf12:	e8 55 40 fe ff       	call   f0100f6c <cprintf>
f011cf17:	83 c4 10             	add    $0x10,%esp

		//kfree 3 MB [PAGE ALLOCATOR: Should be Merged with PREV 9MB + 24KB hole & NEXT remaining hole - total = ALL PAGE ALLOCATOR Space]
		freeFrames = sys_calculate_free_frames() ;
f011cf1a:	e8 ea 0a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cf1f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf22:	e8 19 79 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cf27:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[8]);
f011cf2a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011cf30:	83 ec 0c             	sub    $0xc,%esp
f011cf33:	50                   	push   %eax
f011cf34:	e8 97 bb fe ff       	call   f0108ad0 <kfree>
f011cf39:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cf3c:	e8 ff 78 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cf41:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011cf44:	74 17                	je     f011cf5d <test_kfree_bestfirstfit+0xf23>
f011cf46:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cf4d:	83 ec 0c             	sub    $0xc,%esp
f011cf50:	68 40 df 12 f0       	push   $0xf012df40
f011cf55:	e8 12 40 fe ff       	call   f0100f6c <cprintf>
f011cf5a:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 3*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011cf5d:	e8 a7 0a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cf62:	89 c2                	mov    %eax,%edx
f011cf64:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cf67:	29 c2                	sub    %eax,%edx
f011cf69:	89 d0                	mov    %edx,%eax
f011cf6b:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011cf70:	77 17                	ja     f011cf89 <test_kfree_bestfirstfit+0xf4f>
f011cf72:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cf79:	83 ec 0c             	sub    $0xc,%esp
f011cf7c:	68 44 e3 12 f0       	push   $0xf012e344
f011cf81:	e8 e6 3f fe ff       	call   f0100f6c <cprintf>
f011cf86:	83 c4 10             	add    $0x10,%esp

		//				if(start_freeFrames != (sys_calculate_free_frames())) {{ correct = 0; cprintf("Wrong kfree: not all pages removed correctly at end\n"); }}
	}
	if (correct)	eval+=15 ;
f011cf89:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cf8d:	74 04                	je     f011cf93 <test_kfree_bestfirstfit+0xf59>
f011cf8f:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)

	correct = 1 ;
f011cf93:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f011cf9a:	83 ec 0c             	sub    $0xc,%esp
f011cf9d:	6a 03                	push   $0x3
f011cf9f:	e8 7c 0e ff ff       	call   f010de20 <sys_bypassPageFault>
f011cfa4:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i <= 10; ++i)
f011cfa7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011cfae:	e9 af 00 00 00       	jmp    f011d062 <test_kfree_bestfirstfit+0x1028>
		{
			//SKIP CHECKING THOSE IN DYNAMIC ALLOCATOR AREA
			if (i == 2 || i == 3 || i == 9)
f011cfb3:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f011cfb7:	0f 84 a1 00 00 00    	je     f011d05e <test_kfree_bestfirstfit+0x1024>
f011cfbd:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f011cfc1:	0f 84 97 00 00 00    	je     f011d05e <test_kfree_bestfirstfit+0x1024>
f011cfc7:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f011cfcb:	0f 84 8d 00 00 00    	je     f011d05e <test_kfree_bestfirstfit+0x1024>
			{
				continue;
			}
			ptr = (char *) ptr_allocations[i];
f011cfd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011cfd4:	8b 84 85 c8 fe ff ff 	mov    -0x138(%ebp,%eax,4),%eax
f011cfdb:	89 45 c0             	mov    %eax,-0x40(%ebp)
			ptr[0] = 10;
f011cfde:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cfe1:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0]))
f011cfe4:	e8 25 0e ff ff       	call   f010de0e <sys_rcr2>
f011cfe9:	89 c2                	mov    %eax,%edx
f011cfeb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cfee:	39 c2                	cmp    %eax,%edx
f011cff0:	74 1d                	je     f011d00f <test_kfree_bestfirstfit+0xfd5>
				if (correct)
f011cff2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011cff6:	74 17                	je     f011d00f <test_kfree_bestfirstfit+0xfd5>
				{ correct = 0; cprintf("kfree: successful access to freed space!! it should not be succeeded\n"); }
f011cff8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011cfff:	83 ec 0c             	sub    $0xc,%esp
f011d002:	68 28 e4 12 f0       	push   $0xf012e428
f011d007:	e8 60 3f fe ff       	call   f0100f6c <cprintf>
f011d00c:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f011d00f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d012:	8b 84 85 68 ff ff ff 	mov    -0x98(%ebp,%eax,4),%eax
f011d019:	89 c2                	mov    %eax,%edx
f011d01b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d01e:	01 d0                	add    %edx,%eax
f011d020:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]]))
f011d023:	e8 e6 0d ff ff       	call   f010de0e <sys_rcr2>
f011d028:	89 c2                	mov    %eax,%edx
f011d02a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011d02d:	8b 84 85 68 ff ff ff 	mov    -0x98(%ebp,%eax,4),%eax
f011d034:	89 c1                	mov    %eax,%ecx
f011d036:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d039:	01 c8                	add    %ecx,%eax
f011d03b:	39 c2                	cmp    %eax,%edx
f011d03d:	74 20                	je     f011d05f <test_kfree_bestfirstfit+0x1025>
				if (correct)
f011d03f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d043:	74 1a                	je     f011d05f <test_kfree_bestfirstfit+0x1025>
				{ correct = 0; cprintf("kfree: successful access to freed space!! it should not be succeeded\n"); }
f011d045:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d04c:	83 ec 0c             	sub    $0xc,%esp
f011d04f:	68 28 e4 12 f0       	push   $0xf012e428
f011d054:	e8 13 3f fe ff       	call   f0100f6c <cprintf>
f011d059:	83 c4 10             	add    $0x10,%esp
f011d05c:	eb 01                	jmp    f011d05f <test_kfree_bestfirstfit+0x1025>
		for (i = 0; i <= 10; ++i)
		{
			//SKIP CHECKING THOSE IN DYNAMIC ALLOCATOR AREA
			if (i == 2 || i == 3 || i == 9)
			{
				continue;
f011d05e:	90                   	nop
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i <= 10; ++i)
f011d05f:	ff 45 f4             	incl   -0xc(%ebp)
f011d062:	83 7d f4 0a          	cmpl   $0xa,-0xc(%ebp)
f011d066:	0f 8e 47 ff ff ff    	jle    f011cfb3 <test_kfree_bestfirstfit+0xf79>
				if (correct)
				{ correct = 0; cprintf("kfree: successful access to freed space!! it should not be succeeded\n"); }
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f011d06c:	83 ec 0c             	sub    $0xc,%esp
f011d06f:	6a 00                	push   $0x0
f011d071:	e8 aa 0d ff ff       	call   f010de20 <sys_bypassPageFault>
f011d076:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=15 ;
f011d079:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d07d:	74 04                	je     f011d083 <test_kfree_bestfirstfit+0x1049>
f011d07f:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)

	correct = 1 ;
f011d083:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

	//Allocate after kfree ALL [30%]
	{
		//[DYNAMIC ALLOCATOR] Allocate in merged freed space
		//1 KB
		freeFrames = sys_calculate_free_frames() ;
f011d08a:	e8 7a 09 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d08f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d092:	e8 a9 77 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d097:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[11] = kmalloc(1*kilo);
f011d09a:	83 ec 0c             	sub    $0xc,%esp
f011d09d:	68 00 04 00 00       	push   $0x400
f011d0a2:	e8 0f ba fe ff       	call   f0108ab6 <kmalloc>
f011d0a7:	83 c4 10             	add    $0x10,%esp
f011d0aa:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((ptr_allocations[11] < ptr_allocations[2]) || (ptr_allocations[11] > (ptr_allocations[2] + 1*kilo)))
f011d0b0:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f011d0b6:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011d0bc:	39 c2                	cmp    %eax,%edx
f011d0be:	72 16                	jb     f011d0d6 <test_kfree_bestfirstfit+0x109c>
f011d0c0:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d0c6:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011d0cc:	81 c2 00 04 00 00    	add    $0x400,%edx
f011d0d2:	39 d0                	cmp    %edx,%eax
f011d0d4:	76 17                	jbe    f011d0ed <test_kfree_bestfirstfit+0x10b3>
		{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011d0d6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d0dd:	83 ec 0c             	sub    $0xc,%esp
f011d0e0:	68 f0 df 12 f0       	push   $0xf012dff0
f011d0e5:	e8 82 3e fe ff       	call   f0100f6c <cprintf>
f011d0ea:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d0ed:	e8 4e 77 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d0f2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011d0f5:	74 17                	je     f011d10e <test_kfree_bestfirstfit+0x10d4>
f011d0f7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d0fe:	83 ec 0c             	sub    $0xc,%esp
f011d101:	68 40 df 12 f0       	push   $0xf012df40
f011d106:	e8 61 3e fe ff       	call   f0100f6c <cprintf>
f011d10b:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
f011d10e:	e8 f6 08 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d113:	89 c2                	mov    %eax,%edx
f011d115:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d118:	39 c2                	cmp    %eax,%edx
f011d11a:	74 17                	je     f011d133 <test_kfree_bestfirstfit+0x10f9>
f011d11c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d123:	83 ec 0c             	sub    $0xc,%esp
f011d126:	68 b0 e3 12 f0       	push   $0xf012e3b0
f011d12b:	e8 3c 3e fe ff       	call   f0100f6c <cprintf>
f011d130:	83 c4 10             	add    $0x10,%esp
		lastIndices[11] = (1*kilo)/sizeof(char) - 1;
f011d133:	c7 45 94 ff 03 00 00 	movl   $0x3ff,-0x6c(%ebp)
		ptr = (char*)ptr_allocations[11];
f011d13a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d140:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f011d143:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d14a:	eb 0e                	jmp    f011d15a <test_kfree_bestfirstfit+0x1120>
		{
			ptr[i] = 11 ;
f011d14c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d14f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d152:	01 d0                	add    %edx,%eax
f011d154:	c6 00 0b             	movb   $0xb,(%eax)
		{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
		lastIndices[11] = (1*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f011d157:	ff 45 f4             	incl   -0xc(%ebp)
f011d15a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011d15d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d160:	7f ea                	jg     f011d14c <test_kfree_bestfirstfit+0x1112>
			ptr[i] = 11 ;
		}

		//[DYNAMIC ALLOCATOR] Allocate in merged freed space
		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d162:	e8 a2 08 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d167:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d16a:	e8 d1 76 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d16f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[12] = kmalloc(2*kilo);
f011d172:	83 ec 0c             	sub    $0xc,%esp
f011d175:	68 00 08 00 00       	push   $0x800
f011d17a:	e8 37 b9 fe ff       	call   f0108ab6 <kmalloc>
f011d17f:	83 c4 10             	add    $0x10,%esp
f011d182:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		//expected = ptr_allocations[2] + 1*kilo + sizeOfMetaData();
		//if (ptr_allocations[12] != expected)
		if ((ptr_allocations[12] < ptr_allocations[2] + 1*kilo) || (ptr_allocations[12] > (ptr_allocations[2] + 2*kilo)))
f011d188:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d18e:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011d194:	81 c2 00 04 00 00    	add    $0x400,%edx
f011d19a:	39 d0                	cmp    %edx,%eax
f011d19c:	72 16                	jb     f011d1b4 <test_kfree_bestfirstfit+0x117a>
f011d19e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d1a4:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011d1aa:	81 c2 00 08 00 00    	add    $0x800,%edx
f011d1b0:	39 d0                	cmp    %edx,%eax
f011d1b2:	76 35                	jbe    f011d1e9 <test_kfree_bestfirstfit+0x11af>
		{
			correct = 0;
f011d1b4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
			cprintf("Wrong start address for the allocated space... check return address of kmalloc. Expected [%x, %x], Actual %x\n", (ptr_allocations[2] + 1*kilo), (ptr_allocations[2] + 2*kilo), ptr_allocations[12]);
f011d1bb:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d1c1:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011d1c7:	8d 8a 00 08 00 00    	lea    0x800(%edx),%ecx
f011d1cd:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011d1d3:	81 c2 00 04 00 00    	add    $0x400,%edx
f011d1d9:	50                   	push   %eax
f011d1da:	51                   	push   %ecx
f011d1db:	52                   	push   %edx
f011d1dc:	68 70 e4 12 f0       	push   $0xf012e470
f011d1e1:	e8 86 3d fe ff       	call   f0100f6c <cprintf>
f011d1e6:	83 c4 10             	add    $0x10,%esp
		}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d1e9:	e8 52 76 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d1ee:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011d1f1:	74 17                	je     f011d20a <test_kfree_bestfirstfit+0x11d0>
f011d1f3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d1fa:	83 ec 0c             	sub    $0xc,%esp
f011d1fd:	68 40 df 12 f0       	push   $0xf012df40
f011d202:	e8 65 3d fe ff       	call   f0100f6c <cprintf>
f011d207:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
f011d20a:	e8 fa 07 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d20f:	89 c2                	mov    %eax,%edx
f011d211:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d214:	39 c2                	cmp    %eax,%edx
f011d216:	74 17                	je     f011d22f <test_kfree_bestfirstfit+0x11f5>
f011d218:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d21f:	83 ec 0c             	sub    $0xc,%esp
f011d222:	68 b0 e3 12 f0       	push   $0xf012e3b0
f011d227:	e8 40 3d fe ff       	call   f0100f6c <cprintf>
f011d22c:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f011d22f:	c7 45 98 ff 07 00 00 	movl   $0x7ff,-0x68(%ebp)
		ptr = (char*)ptr_allocations[12];
f011d236:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d23c:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f011d23f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d246:	eb 0e                	jmp    f011d256 <test_kfree_bestfirstfit+0x121c>
		{
			ptr[i] = 12 ;
f011d248:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d24b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d24e:	01 d0                	add    %edx,%eax
f011d250:	c6 00 0c             	movb   $0xc,(%eax)
		}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
		lastIndices[12] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f011d253:	ff 45 f4             	incl   -0xc(%ebp)
f011d256:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d259:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d25c:	7f ea                	jg     f011d248 <test_kfree_bestfirstfit+0x120e>
			ptr[i] = 12 ;
		}

		//[DYNAMIC ALLOCATOR] Allocate in merged freed space
		//1.5 KB
		freeFrames = sys_calculate_free_frames() ;
f011d25e:	e8 a6 07 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d263:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d266:	e8 d5 75 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d26b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[13] = kmalloc(3*kilo/2);
f011d26e:	83 ec 0c             	sub    $0xc,%esp
f011d271:	68 00 06 00 00       	push   $0x600
f011d276:	e8 3b b8 fe ff       	call   f0108ab6 <kmalloc>
f011d27b:	83 c4 10             	add    $0x10,%esp
f011d27e:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		//if (ptr_allocations[13] != ptr_allocations[12] + 2*kilo + sizeOfMetaData())
		if ((ptr_allocations[13] < ptr_allocations[2] + 3*kilo) || (ptr_allocations[13] > (ptr_allocations[2] + 4*kilo)))
f011d284:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d28a:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011d290:	81 c2 00 0c 00 00    	add    $0xc00,%edx
f011d296:	39 d0                	cmp    %edx,%eax
f011d298:	72 16                	jb     f011d2b0 <test_kfree_bestfirstfit+0x1276>
f011d29a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d2a0:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011d2a6:	81 c2 00 10 00 00    	add    $0x1000,%edx
f011d2ac:	39 d0                	cmp    %edx,%eax
f011d2ae:	76 17                	jbe    f011d2c7 <test_kfree_bestfirstfit+0x128d>
		{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011d2b0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d2b7:	83 ec 0c             	sub    $0xc,%esp
f011d2ba:	68 f0 df 12 f0       	push   $0xf012dff0
f011d2bf:	e8 a8 3c fe ff       	call   f0100f6c <cprintf>
f011d2c4:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d2c7:	e8 74 75 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d2cc:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011d2cf:	74 17                	je     f011d2e8 <test_kfree_bestfirstfit+0x12ae>
f011d2d1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d2d8:	83 ec 0c             	sub    $0xc,%esp
f011d2db:	68 40 df 12 f0       	push   $0xf012df40
f011d2e0:	e8 87 3c fe ff       	call   f0100f6c <cprintf>
f011d2e5:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
f011d2e8:	e8 1c 07 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d2ed:	89 c2                	mov    %eax,%edx
f011d2ef:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011d2f2:	39 c2                	cmp    %eax,%edx
f011d2f4:	74 17                	je     f011d30d <test_kfree_bestfirstfit+0x12d3>
f011d2f6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d2fd:	83 ec 0c             	sub    $0xc,%esp
f011d300:	68 b0 e3 12 f0       	push   $0xf012e3b0
f011d305:	e8 62 3c fe ff       	call   f0100f6c <cprintf>
f011d30a:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (3*kilo/2)/sizeof(char) - 1;
f011d30d:	c7 45 9c ff 05 00 00 	movl   $0x5ff,-0x64(%ebp)
		ptr = (char*)ptr_allocations[13];
f011d314:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d31a:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f011d31d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d324:	eb 0e                	jmp    f011d334 <test_kfree_bestfirstfit+0x12fa>
		{
			ptr[i] = 13 ;
f011d326:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d329:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d32c:	01 d0                	add    %edx,%eax
f011d32e:	c6 00 0d             	movb   $0xd,(%eax)
		{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
		lastIndices[13] = (3*kilo/2)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f011d331:	ff 45 f4             	incl   -0xc(%ebp)
f011d334:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011d337:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d33a:	7f ea                	jg     f011d326 <test_kfree_bestfirstfit+0x12ec>
			ptr[i] = 13 ;
		}

		//[PAGE ALLOCATOR] Allocate in merged freed space
		//30 MB
		freeFrames = sys_calculate_free_frames() ;
f011d33c:	e8 c8 06 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d341:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d344:	e8 f7 74 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d349:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[10] = kmalloc(30*Mega);
f011d34c:	83 ec 0c             	sub    $0xc,%esp
f011d34f:	68 00 00 e0 01       	push   $0x1e00000
f011d354:	e8 5d b7 fe ff       	call   f0108ab6 <kmalloc>
f011d359:	83 c4 10             	add    $0x10,%esp
f011d35c:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011d362:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d368:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011d36d:	74 17                	je     f011d386 <test_kfree_bestfirstfit+0x134c>
f011d36f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d376:	83 ec 0c             	sub    $0xc,%esp
f011d379:	68 f0 df 12 f0       	push   $0xf012dff0
f011d37e:	e8 e9 3b fe ff       	call   f0100f6c <cprintf>
f011d383:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d386:	e8 b5 74 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d38b:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011d38e:	74 17                	je     f011d3a7 <test_kfree_bestfirstfit+0x136d>
f011d390:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d397:	83 ec 0c             	sub    $0xc,%esp
f011d39a:	68 40 df 12 f0       	push   $0xf012df40
f011d39f:	e8 c8 3b fe ff       	call   f0100f6c <cprintf>
f011d3a4:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 30*Mega/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011d3a7:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011d3aa:	e8 5a 06 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d3af:	29 c3                	sub    %eax,%ebx
f011d3b1:	89 d8                	mov    %ebx,%eax
f011d3b3:	3d ff 1d 00 00       	cmp    $0x1dff,%eax
f011d3b8:	77 17                	ja     f011d3d1 <test_kfree_bestfirstfit+0x1397>
f011d3ba:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d3c1:	83 ec 0c             	sub    $0xc,%esp
f011d3c4:	68 ac df 12 f0       	push   $0xf012dfac
f011d3c9:	e8 9e 3b fe ff       	call   f0100f6c <cprintf>
f011d3ce:	83 c4 10             	add    $0x10,%esp
		lastIndices[10] = (30*Mega)/sizeof(char) - 1;
f011d3d1:	c7 45 90 ff ff df 01 	movl   $0x1dfffff,-0x70(%ebp)
		ptr = (char*)ptr_allocations[10];
f011d3d8:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d3de:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f011d3e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d3e8:	eb 0e                	jmp    f011d3f8 <test_kfree_bestfirstfit+0x13be>
		{
			ptr[i] = 10 ;
f011d3ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011d3ed:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d3f0:	01 d0                	add    %edx,%eax
f011d3f2:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) < 30*Mega/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
		lastIndices[10] = (30*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f011d3f5:	ff 45 f4             	incl   -0xc(%ebp)
f011d3f8:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d3fb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d3fe:	7f ea                	jg     f011d3ea <test_kfree_bestfirstfit+0x13b0>
			ptr[i] = 10 ;
		}


		//30 MB
		ptr = (char*)ptr_allocations[10];
f011d400:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011d406:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f011d409:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d410:	eb 1e                	jmp    f011d430 <test_kfree_bestfirstfit+0x13f6>
		{
			sums[10] += ptr[i] ;
f011d412:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f011d418:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011d41b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d41e:	01 c8                	add    %ecx,%eax
f011d420:	8a 00                	mov    (%eax),%al
f011d422:	0f be c0             	movsbl %al,%eax
f011d425:	01 d0                	add    %edx,%eax
f011d427:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		}


		//30 MB
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f011d42d:	ff 45 f4             	incl   -0xc(%ebp)
f011d430:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d433:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d436:	7f da                	jg     f011d412 <test_kfree_bestfirstfit+0x13d8>
		{
			sums[10] += ptr[i] ;
		}
		if (sums[10] != 10*lastIndices[10])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }
f011d438:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f011d43e:	8b 55 90             	mov    -0x70(%ebp),%edx
f011d441:	89 d0                	mov    %edx,%eax
f011d443:	c1 e0 02             	shl    $0x2,%eax
f011d446:	01 d0                	add    %edx,%eax
f011d448:	01 c0                	add    %eax,%eax
f011d44a:	39 c1                	cmp    %eax,%ecx
f011d44c:	74 17                	je     f011d465 <test_kfree_bestfirstfit+0x142b>
f011d44e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d455:	83 ec 0c             	sub    $0xc,%esp
f011d458:	68 e0 e4 12 f0       	push   $0xf012e4e0
f011d45d:	e8 0a 3b fe ff       	call   f0100f6c <cprintf>
f011d462:	83 c4 10             	add    $0x10,%esp

		//1 KB
		ptr = (char*)ptr_allocations[11];
f011d465:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011d46b:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f011d46e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d475:	eb 1e                	jmp    f011d495 <test_kfree_bestfirstfit+0x145b>
		{
			sums[11] += ptr[i] ;
f011d477:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f011d47d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011d480:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d483:	01 c8                	add    %ecx,%eax
f011d485:	8a 00                	mov    (%eax),%al
f011d487:	0f be c0             	movsbl %al,%eax
f011d48a:	01 d0                	add    %edx,%eax
f011d48c:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		}
		if (sums[10] != 10*lastIndices[10])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }

		//1 KB
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f011d492:	ff 45 f4             	incl   -0xc(%ebp)
f011d495:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011d498:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d49b:	7f da                	jg     f011d477 <test_kfree_bestfirstfit+0x143d>
		{
			sums[11] += ptr[i] ;
		}
		if (sums[11] != 11*lastIndices[11])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }
f011d49d:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f011d4a3:	8b 55 94             	mov    -0x6c(%ebp),%edx
f011d4a6:	89 d0                	mov    %edx,%eax
f011d4a8:	c1 e0 02             	shl    $0x2,%eax
f011d4ab:	01 d0                	add    %edx,%eax
f011d4ad:	01 c0                	add    %eax,%eax
f011d4af:	01 d0                	add    %edx,%eax
f011d4b1:	39 c1                	cmp    %eax,%ecx
f011d4b3:	74 17                	je     f011d4cc <test_kfree_bestfirstfit+0x1492>
f011d4b5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d4bc:	83 ec 0c             	sub    $0xc,%esp
f011d4bf:	68 e0 e4 12 f0       	push   $0xf012e4e0
f011d4c4:	e8 a3 3a fe ff       	call   f0100f6c <cprintf>
f011d4c9:	83 c4 10             	add    $0x10,%esp

		//2 KB
		ptr = (char*)ptr_allocations[12];
f011d4cc:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011d4d2:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f011d4d5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d4dc:	eb 1e                	jmp    f011d4fc <test_kfree_bestfirstfit+0x14c2>
		{
			sums[12] += ptr[i] ;
f011d4de:	8b 95 48 ff ff ff    	mov    -0xb8(%ebp),%edx
f011d4e4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011d4e7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d4ea:	01 c8                	add    %ecx,%eax
f011d4ec:	8a 00                	mov    (%eax),%al
f011d4ee:	0f be c0             	movsbl %al,%eax
f011d4f1:	01 d0                	add    %edx,%eax
f011d4f3:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		}
		if (sums[11] != 11*lastIndices[11])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }

		//2 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f011d4f9:	ff 45 f4             	incl   -0xc(%ebp)
f011d4fc:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d4ff:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d502:	7f da                	jg     f011d4de <test_kfree_bestfirstfit+0x14a4>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }
f011d504:	8b 8d 48 ff ff ff    	mov    -0xb8(%ebp),%ecx
f011d50a:	8b 55 98             	mov    -0x68(%ebp),%edx
f011d50d:	89 d0                	mov    %edx,%eax
f011d50f:	01 c0                	add    %eax,%eax
f011d511:	01 d0                	add    %edx,%eax
f011d513:	c1 e0 02             	shl    $0x2,%eax
f011d516:	39 c1                	cmp    %eax,%ecx
f011d518:	74 17                	je     f011d531 <test_kfree_bestfirstfit+0x14f7>
f011d51a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d521:	83 ec 0c             	sub    $0xc,%esp
f011d524:	68 e0 e4 12 f0       	push   $0xf012e4e0
f011d529:	e8 3e 3a fe ff       	call   f0100f6c <cprintf>
f011d52e:	83 c4 10             	add    $0x10,%esp

		//1.5 KB
		ptr = (char*)ptr_allocations[13];
f011d531:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011d537:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f011d53a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011d541:	eb 1e                	jmp    f011d561 <test_kfree_bestfirstfit+0x1527>
		{
			sums[13] += ptr[i] ;
f011d543:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f011d549:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011d54c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011d54f:	01 c8                	add    %ecx,%eax
f011d551:	8a 00                	mov    (%eax),%al
f011d553:	0f be c0             	movsbl %al,%eax
f011d556:	01 d0                	add    %edx,%eax
f011d558:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
		}
		if (sums[12] != 12*lastIndices[12])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }

		//1.5 KB
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f011d55e:	ff 45 f4             	incl   -0xc(%ebp)
f011d561:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011d564:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011d567:	7f da                	jg     f011d543 <test_kfree_bestfirstfit+0x1509>
		{
			sums[13] += ptr[i] ;
		}
		if (sums[13] != 13*lastIndices[13])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }
f011d569:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f011d56f:	8b 55 9c             	mov    -0x64(%ebp),%edx
f011d572:	89 d0                	mov    %edx,%eax
f011d574:	01 c0                	add    %eax,%eax
f011d576:	01 d0                	add    %edx,%eax
f011d578:	c1 e0 02             	shl    $0x2,%eax
f011d57b:	01 d0                	add    %edx,%eax
f011d57d:	39 c1                	cmp    %eax,%ecx
f011d57f:	74 17                	je     f011d598 <test_kfree_bestfirstfit+0x155e>
f011d581:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d588:	83 ec 0c             	sub    $0xc,%esp
f011d58b:	68 e0 e4 12 f0       	push   $0xf012e4e0
f011d590:	e8 d7 39 fe ff       	call   f0100f6c <cprintf>
f011d595:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=30 ;
f011d598:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d59c:	74 04                	je     f011d5a2 <test_kfree_bestfirstfit+0x1568>
f011d59e:	83 45 f0 1e          	addl   $0x1e,-0x10(%ebp)

	correct = 1 ;
f011d5a2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//check tables	[5%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f011d5a9:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f011d5b0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011d5b7:	eb 4e                	jmp    f011d607 <test_kfree_bestfirstfit+0x15cd>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f011d5b9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011d5bc:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f011d5c1:	83 ec 04             	sub    $0x4,%esp
f011d5c4:	8d 8d c4 fe ff ff    	lea    -0x13c(%ebp),%ecx
f011d5ca:	51                   	push   %ecx
f011d5cb:	52                   	push   %edx
f011d5cc:	50                   	push   %eax
f011d5cd:	e8 3b ae fe ff       	call   f010840d <get_page_table>
f011d5d2:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011d5d5:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011d5db:	85 c0                	test   %eax,%eax
f011d5dd:	75 1d                	jne    f011d5fc <test_kfree_bestfirstfit+0x15c2>
			{
				if (correct)
f011d5df:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d5e3:	74 17                	je     f011d5fc <test_kfree_bestfirstfit+0x15c2>
				{ correct = 0; cprintf("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree\n"); }
f011d5e5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d5ec:	83 ec 0c             	sub    $0xc,%esp
f011d5ef:	68 0c e5 12 f0       	push   $0xf012e50c
f011d5f4:	e8 73 39 fe ff       	call   f0100f6c <cprintf>
f011d5f9:	83 c4 10             	add    $0x10,%esp

	correct = 1 ;
	//check tables	[5%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f011d5fc:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f011d603:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f011d607:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011d60b:	78 ac                	js     f011d5b9 <test_kfree_bestfirstfit+0x157f>
f011d60d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011d611:	7f 09                	jg     f011d61c <test_kfree_bestfirstfit+0x15e2>
f011d613:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f011d61a:	76 9d                	jbe    f011d5b9 <test_kfree_bestfirstfit+0x157f>
				if (correct)
				{ correct = 0; cprintf("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree\n"); }
			}
		}
	}
	if (correct)	eval+=5 ;
f011d61c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011d620:	74 04                	je     f011d626 <test_kfree_bestfirstfit+0x15ec>
f011d622:	83 45 f0 05          	addl   $0x5,-0x10(%ebp)

	cprintf("\ntest kfree completed. Eval = %d%\n", eval);
f011d626:	83 ec 08             	sub    $0x8,%esp
f011d629:	ff 75 f0             	pushl  -0x10(%ebp)
f011d62c:	68 74 e5 12 f0       	push   $0xf012e574
f011d631:	e8 36 39 fe ff       	call   f0100f6c <cprintf>
f011d636:	83 c4 10             	add    $0x10,%esp

	return 1;
f011d639:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011d63e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011d641:	5b                   	pop    %ebx
f011d642:	5f                   	pop    %edi
f011d643:	5d                   	pop    %ebp
f011d644:	c3                   	ret    

f011d645 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f011d645:	55                   	push   %ebp
f011d646:	89 e5                	mov    %esp,%ebp
f011d648:	57                   	push   %edi
f011d649:	53                   	push   %ebx
f011d64a:	81 ec b0 35 00 00    	sub    $0x35b0,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f011d650:	83 ec 0c             	sub    $0xc,%esp
f011d653:	68 80 de 12 f0       	push   $0xf012de80
f011d658:	e8 0f 39 fe ff       	call   f0100f6c <cprintf>
f011d65d:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011d660:	83 ec 0c             	sub    $0xc,%esp
f011d663:	68 b0 de 12 f0       	push   $0xf012deb0
f011d668:	e8 ff 38 fe ff       	call   f0100f6c <cprintf>
f011d66d:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011d670:	83 ec 0c             	sub    $0xc,%esp
f011d673:	68 80 de 12 f0       	push   $0xf012de80
f011d678:	e8 ef 38 fe ff       	call   f0100f6c <cprintf>
f011d67d:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011d680:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f011d684:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f011d688:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f011d68e:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f011d694:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f011d69b:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011d6a2:	e8 62 03 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d6a7:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011d6aa:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f011d6b0:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d6b5:	b8 00 00 00 00       	mov    $0x0,%eax
f011d6ba:	89 d7                	mov    %edx,%edi
f011d6bc:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011d6be:	8d 95 c4 fe ff ff    	lea    -0x13c(%ebp),%edx
f011d6c4:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d6c9:	b8 00 00 00 00       	mov    $0x0,%eax
f011d6ce:	89 d7                	mov    %edx,%edi
f011d6d0:	f3 ab                	rep stos %eax,%es:(%edi)
	int eval = 0;
f011d6d2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	bool correct = 1;
f011d6d9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	void* ptr_allocations[20] = {0};
f011d6e0:	8d 95 74 fe ff ff    	lea    -0x18c(%ebp),%edx
f011d6e6:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d6eb:	b8 00 00 00 00       	mov    $0x0,%eax
f011d6f0:	89 d7                	mov    %edx,%edi
f011d6f2:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d6f4:	e8 10 03 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d6f9:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d6fc:	e8 3f 71 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d701:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011d704:	83 ec 0c             	sub    $0xc,%esp
f011d707:	68 00 fc 1f 00       	push   $0x1ffc00
f011d70c:	e8 a5 b3 fe ff       	call   f0108ab6 <kmalloc>
f011d711:	83 c4 10             	add    $0x10,%esp
f011d714:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011d71a:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011d720:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011d725:	74 17                	je     f011d73e <test_kheap_phys_addr+0xf9>
f011d727:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d72e:	83 ec 0c             	sub    $0xc,%esp
f011d731:	68 f0 df 12 f0       	push   $0xf012dff0
f011d736:	e8 31 38 fe ff       	call   f0100f6c <cprintf>
f011d73b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d73e:	e8 fd 70 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d743:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011d746:	74 17                	je     f011d75f <test_kheap_phys_addr+0x11a>
f011d748:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d74f:	83 ec 0c             	sub    $0xc,%esp
f011d752:	68 40 df 12 f0       	push   $0xf012df40
f011d757:	e8 10 38 fe ff       	call   f0100f6c <cprintf>
f011d75c:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011d75f:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011d762:	e8 a2 02 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d767:	29 c3                	sub    %eax,%ebx
f011d769:	89 d8                	mov    %ebx,%eax
f011d76b:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011d770:	77 17                	ja     f011d789 <test_kheap_phys_addr+0x144>
f011d772:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d779:	83 ec 0c             	sub    $0xc,%esp
f011d77c:	68 ac df 12 f0       	push   $0xf012dfac
f011d781:	e8 e6 37 fe ff       	call   f0100f6c <cprintf>
f011d786:	83 c4 10             	add    $0x10,%esp

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d789:	e8 7b 02 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d78e:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d791:	e8 aa 70 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d796:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011d799:	83 ec 0c             	sub    $0xc,%esp
f011d79c:	68 00 fc 1f 00       	push   $0x1ffc00
f011d7a1:	e8 10 b3 fe ff       	call   f0108ab6 <kmalloc>
f011d7a6:	83 c4 10             	add    $0x10,%esp
f011d7a9:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011d7af:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011d7b5:	3d 00 10 20 f8       	cmp    $0xf8201000,%eax
f011d7ba:	74 17                	je     f011d7d3 <test_kheap_phys_addr+0x18e>
f011d7bc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d7c3:	83 ec 0c             	sub    $0xc,%esp
f011d7c6:	68 f0 df 12 f0       	push   $0xf012dff0
f011d7cb:	e8 9c 37 fe ff       	call   f0100f6c <cprintf>
f011d7d0:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d7d3:	e8 68 70 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d7d8:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011d7db:	74 17                	je     f011d7f4 <test_kheap_phys_addr+0x1af>
f011d7dd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d7e4:	83 ec 0c             	sub    $0xc,%esp
f011d7e7:	68 40 df 12 f0       	push   $0xf012df40
f011d7ec:	e8 7b 37 fe ff       	call   f0100f6c <cprintf>
f011d7f1:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011d7f4:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011d7f7:	e8 0d 02 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d7fc:	29 c3                	sub    %eax,%ebx
f011d7fe:	89 d8                	mov    %ebx,%eax
f011d800:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011d805:	77 17                	ja     f011d81e <test_kheap_phys_addr+0x1d9>
f011d807:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d80e:	83 ec 0c             	sub    $0xc,%esp
f011d811:	68 ac df 12 f0       	push   $0xf012dfac
f011d816:	e8 51 37 fe ff       	call   f0100f6c <cprintf>
f011d81b:	83 c4 10             	add    $0x10,%esp

		//[DYNAMIC ALLOCATOR]
		{
			//1 KB
			freeFrames = sys_calculate_free_frames() ;
f011d81e:	e8 e6 01 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d823:	89 45 a8             	mov    %eax,-0x58(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011d826:	e8 15 70 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d82b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
			ptr_allocations[2] = kmalloc(1*kilo);
f011d82e:	83 ec 0c             	sub    $0xc,%esp
f011d831:	68 00 04 00 00       	push   $0x400
f011d836:	e8 7b b2 fe ff       	call   f0108ab6 <kmalloc>
f011d83b:	83 c4 10             	add    $0x10,%esp
f011d83e:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
			if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f011d844:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011d84a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011d84f:	76 28                	jbe    f011d879 <test_kheap_phys_addr+0x234>
f011d851:	8b 9d 7c fe ff ff    	mov    -0x184(%ebp),%ebx
f011d857:	83 ec 0c             	sub    $0xc,%esp
f011d85a:	6a 00                	push   $0x0
f011d85c:	e8 4b b2 fe ff       	call   f0108aac <sbrk>
f011d861:	83 c4 10             	add    $0x10,%esp
f011d864:	39 c3                	cmp    %eax,%ebx
f011d866:	73 11                	jae    f011d879 <test_kheap_phys_addr+0x234>
f011d868:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011d86e:	89 c2                	mov    %eax,%edx
f011d870:	a1 d8 dd 17 f0       	mov    0xf017ddd8,%eax
f011d875:	39 c2                	cmp    %eax,%edx
f011d877:	72 17                	jb     f011d890 <test_kheap_phys_addr+0x24b>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011d879:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d880:	83 ec 0c             	sub    $0xc,%esp
f011d883:	68 40 e0 12 f0       	push   $0xf012e040
f011d888:	e8 df 36 fe ff       	call   f0100f6c <cprintf>
f011d88d:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d890:	e8 ab 6f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d895:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011d898:	74 17                	je     f011d8b1 <test_kheap_phys_addr+0x26c>
f011d89a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d8a1:	83 ec 0c             	sub    $0xc,%esp
f011d8a4:	68 40 df 12 f0       	push   $0xf012df40
f011d8a9:	e8 be 36 fe ff       	call   f0100f6c <cprintf>
f011d8ae:	83 c4 10             	add    $0x10,%esp
			//if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f011d8b1:	e8 53 01 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d8b6:	89 45 a8             	mov    %eax,-0x58(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011d8b9:	e8 82 6f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d8be:	89 45 a4             	mov    %eax,-0x5c(%ebp)
			ptr_allocations[3] = kmalloc(2*kilo);
f011d8c1:	83 ec 0c             	sub    $0xc,%esp
f011d8c4:	68 00 08 00 00       	push   $0x800
f011d8c9:	e8 e8 b1 fe ff       	call   f0108ab6 <kmalloc>
f011d8ce:	83 c4 10             	add    $0x10,%esp
f011d8d1:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
			if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f011d8d7:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011d8dd:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011d8e2:	76 28                	jbe    f011d90c <test_kheap_phys_addr+0x2c7>
f011d8e4:	8b 9d 80 fe ff ff    	mov    -0x180(%ebp),%ebx
f011d8ea:	83 ec 0c             	sub    $0xc,%esp
f011d8ed:	6a 00                	push   $0x0
f011d8ef:	e8 b8 b1 fe ff       	call   f0108aac <sbrk>
f011d8f4:	83 c4 10             	add    $0x10,%esp
f011d8f7:	39 c3                	cmp    %eax,%ebx
f011d8f9:	73 11                	jae    f011d90c <test_kheap_phys_addr+0x2c7>
f011d8fb:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011d901:	89 c2                	mov    %eax,%edx
f011d903:	a1 d8 dd 17 f0       	mov    0xf017ddd8,%eax
f011d908:	39 c2                	cmp    %eax,%edx
f011d90a:	72 17                	jb     f011d923 <test_kheap_phys_addr+0x2de>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011d90c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d913:	83 ec 0c             	sub    $0xc,%esp
f011d916:	68 40 e0 12 f0       	push   $0xf012e040
f011d91b:	e8 4c 36 fe ff       	call   f0100f6c <cprintf>
f011d920:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d923:	e8 18 6f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d928:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011d92b:	74 17                	je     f011d944 <test_kheap_phys_addr+0x2ff>
f011d92d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d934:	83 ec 0c             	sub    $0xc,%esp
f011d937:	68 40 df 12 f0       	push   $0xf012df40
f011d93c:	e8 2b 36 fe ff       	call   f0100f6c <cprintf>
f011d941:	83 c4 10             	add    $0x10,%esp
			//if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

			//1.5 KB
			freeFrames = sys_calculate_free_frames() ;
f011d944:	e8 c0 00 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d949:	89 45 a8             	mov    %eax,-0x58(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011d94c:	e8 ef 6e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d951:	89 45 a4             	mov    %eax,-0x5c(%ebp)
			ptr_allocations[4] = kmalloc(3*kilo/2);
f011d954:	83 ec 0c             	sub    $0xc,%esp
f011d957:	68 00 06 00 00       	push   $0x600
f011d95c:	e8 55 b1 fe ff       	call   f0108ab6 <kmalloc>
f011d961:	83 c4 10             	add    $0x10,%esp
f011d964:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
			if ((uint32) ptr_allocations[4] < KERNEL_HEAP_START || ptr_allocations[4] >= sbrk(0) || (uint32) ptr_allocations[4] >= da_limit)
f011d96a:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011d970:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011d975:	76 28                	jbe    f011d99f <test_kheap_phys_addr+0x35a>
f011d977:	8b 9d 84 fe ff ff    	mov    -0x17c(%ebp),%ebx
f011d97d:	83 ec 0c             	sub    $0xc,%esp
f011d980:	6a 00                	push   $0x0
f011d982:	e8 25 b1 fe ff       	call   f0108aac <sbrk>
f011d987:	83 c4 10             	add    $0x10,%esp
f011d98a:	39 c3                	cmp    %eax,%ebx
f011d98c:	73 11                	jae    f011d99f <test_kheap_phys_addr+0x35a>
f011d98e:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011d994:	89 c2                	mov    %eax,%edx
f011d996:	a1 d8 dd 17 f0       	mov    0xf017ddd8,%eax
f011d99b:	39 c2                	cmp    %eax,%edx
f011d99d:	72 17                	jb     f011d9b6 <test_kheap_phys_addr+0x371>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011d99f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d9a6:	83 ec 0c             	sub    $0xc,%esp
f011d9a9:	68 40 e0 12 f0       	push   $0xf012e040
f011d9ae:	e8 b9 35 fe ff       	call   f0100f6c <cprintf>
f011d9b3:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d9b6:	e8 85 6e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d9bb:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011d9be:	74 17                	je     f011d9d7 <test_kheap_phys_addr+0x392>
f011d9c0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011d9c7:	83 ec 0c             	sub    $0xc,%esp
f011d9ca:	68 40 df 12 f0       	push   $0xf012df40
f011d9cf:	e8 98 35 fe ff       	call   f0100f6c <cprintf>
f011d9d4:	83 c4 10             	add    $0x10,%esp
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011d9d7:	e8 2d 00 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d9dc:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d9df:	e8 5c 6e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d9e4:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(7*kilo);
f011d9e7:	83 ec 0c             	sub    $0xc,%esp
f011d9ea:	68 00 1c 00 00       	push   $0x1c00
f011d9ef:	e8 c2 b0 fe ff       	call   f0108ab6 <kmalloc>
f011d9f4:	83 c4 10             	add    $0x10,%esp
f011d9f7:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega /*+ 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011d9fd:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011da03:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011da08:	74 17                	je     f011da21 <test_kheap_phys_addr+0x3dc>
f011da0a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011da11:	83 ec 0c             	sub    $0xc,%esp
f011da14:	68 f0 df 12 f0       	push   $0xf012dff0
f011da19:	e8 4e 35 fe ff       	call   f0100f6c <cprintf>
f011da1e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011da21:	e8 1a 6e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011da26:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011da29:	74 17                	je     f011da42 <test_kheap_phys_addr+0x3fd>
f011da2b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011da32:	83 ec 0c             	sub    $0xc,%esp
f011da35:	68 40 df 12 f0       	push   $0xf012df40
f011da3a:	e8 2d 35 fe ff       	call   f0100f6c <cprintf>
f011da3f:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011da42:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011da45:	e8 bf ff fe ff       	call   f010da09 <sys_calculate_free_frames>
f011da4a:	29 c3                	sub    %eax,%ebx
f011da4c:	89 d8                	mov    %ebx,%eax
f011da4e:	83 f8 01             	cmp    $0x1,%eax
f011da51:	77 17                	ja     f011da6a <test_kheap_phys_addr+0x425>
f011da53:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011da5a:	83 ec 0c             	sub    $0xc,%esp
f011da5d:	68 ac df 12 f0       	push   $0xf012dfac
f011da62:	e8 05 35 fe ff       	call   f0100f6c <cprintf>
f011da67:	83 c4 10             	add    $0x10,%esp

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011da6a:	e8 9a ff fe ff       	call   f010da09 <sys_calculate_free_frames>
f011da6f:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011da72:	e8 c9 6d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011da77:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011da7a:	83 ec 0c             	sub    $0xc,%esp
f011da7d:	68 00 fc 2f 00       	push   $0x2ffc00
f011da82:	e8 2f b0 fe ff       	call   f0108ab6 <kmalloc>
f011da87:	83 c4 10             	add    $0x10,%esp
f011da8a:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011da90:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011da96:	3d 00 30 40 f8       	cmp    $0xf8403000,%eax
f011da9b:	74 17                	je     f011dab4 <test_kheap_phys_addr+0x46f>
f011da9d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011daa4:	83 ec 0c             	sub    $0xc,%esp
f011daa7:	68 f0 df 12 f0       	push   $0xf012dff0
f011daac:	e8 bb 34 fe ff       	call   f0100f6c <cprintf>
f011dab1:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011dab4:	e8 87 6d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011dab9:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011dabc:	74 17                	je     f011dad5 <test_kheap_phys_addr+0x490>
f011dabe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dac5:	83 ec 0c             	sub    $0xc,%esp
f011dac8:	68 40 df 12 f0       	push   $0xf012df40
f011dacd:	e8 9a 34 fe ff       	call   f0100f6c <cprintf>
f011dad2:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011dad5:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011dad8:	e8 2c ff fe ff       	call   f010da09 <sys_calculate_free_frames>
f011dadd:	29 c3                	sub    %eax,%ebx
f011dadf:	89 d8                	mov    %ebx,%eax
f011dae1:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011dae6:	77 17                	ja     f011daff <test_kheap_phys_addr+0x4ba>
f011dae8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011daef:	83 ec 0c             	sub    $0xc,%esp
f011daf2:	68 ac df 12 f0       	push   $0xf012dfac
f011daf7:	e8 70 34 fe ff       	call   f0100f6c <cprintf>
f011dafc:	83 c4 10             	add    $0x10,%esp

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011daff:	e8 05 ff fe ff       	call   f010da09 <sys_calculate_free_frames>
f011db04:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011db07:	e8 34 6d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011db0c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(6*Mega-kilo);
f011db0f:	83 ec 0c             	sub    $0xc,%esp
f011db12:	68 00 fc 5f 00       	push   $0x5ffc00
f011db17:	e8 9a af fe ff       	call   f0108ab6 <kmalloc>
f011db1c:	83 c4 10             	add    $0x10,%esp
f011db1f:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011db25:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011db2b:	3d 00 30 70 f8       	cmp    $0xf8703000,%eax
f011db30:	74 17                	je     f011db49 <test_kheap_phys_addr+0x504>
f011db32:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011db39:	83 ec 0c             	sub    $0xc,%esp
f011db3c:	68 f0 df 12 f0       	push   $0xf012dff0
f011db41:	e8 26 34 fe ff       	call   f0100f6c <cprintf>
f011db46:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011db49:	e8 f2 6c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011db4e:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011db51:	74 17                	je     f011db6a <test_kheap_phys_addr+0x525>
f011db53:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011db5a:	83 ec 0c             	sub    $0xc,%esp
f011db5d:	68 40 df 12 f0       	push   $0xf012df40
f011db62:	e8 05 34 fe ff       	call   f0100f6c <cprintf>
f011db67:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 1536) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011db6a:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011db6d:	e8 97 fe fe ff       	call   f010da09 <sys_calculate_free_frames>
f011db72:	29 c3                	sub    %eax,%ebx
f011db74:	89 d8                	mov    %ebx,%eax
f011db76:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011db7b:	77 17                	ja     f011db94 <test_kheap_phys_addr+0x54f>
f011db7d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011db84:	83 ec 0c             	sub    $0xc,%esp
f011db87:	68 ac df 12 f0       	push   $0xf012dfac
f011db8c:	e8 db 33 fe ff       	call   f0100f6c <cprintf>
f011db91:	83 c4 10             	add    $0x10,%esp

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011db94:	e8 70 fe fe ff       	call   f010da09 <sys_calculate_free_frames>
f011db99:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011db9c:	e8 9f 6c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011dba1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[8] = kmalloc(14*kilo);
f011dba4:	83 ec 0c             	sub    $0xc,%esp
f011dba7:	68 00 38 00 00       	push   $0x3800
f011dbac:	e8 05 af fe ff       	call   f0108ab6 <kmalloc>
f011dbb1:	83 c4 10             	add    $0x10,%esp
f011dbb4:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011dbba:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011dbc0:	3d 00 30 d0 f8       	cmp    $0xf8d03000,%eax
f011dbc5:	74 17                	je     f011dbde <test_kheap_phys_addr+0x599>
f011dbc7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dbce:	83 ec 0c             	sub    $0xc,%esp
f011dbd1:	68 f0 df 12 f0       	push   $0xf012dff0
f011dbd6:	e8 91 33 fe ff       	call   f0100f6c <cprintf>
f011dbdb:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011dbde:	e8 5d 6c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011dbe3:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011dbe6:	74 17                	je     f011dbff <test_kheap_phys_addr+0x5ba>
f011dbe8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dbef:	83 ec 0c             	sub    $0xc,%esp
f011dbf2:	68 40 df 12 f0       	push   $0xf012df40
f011dbf7:	e8 70 33 fe ff       	call   f0100f6c <cprintf>
f011dbfc:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011dbff:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011dc02:	e8 02 fe fe ff       	call   f010da09 <sys_calculate_free_frames>
f011dc07:	29 c3                	sub    %eax,%ebx
f011dc09:	89 d8                	mov    %ebx,%eax
f011dc0b:	83 f8 03             	cmp    $0x3,%eax
f011dc0e:	77 17                	ja     f011dc27 <test_kheap_phys_addr+0x5e2>
f011dc10:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dc17:	83 ec 0c             	sub    $0xc,%esp
f011dc1a:	68 ac df 12 f0       	push   $0xf012dfac
f011dc1f:	e8 48 33 fe ff       	call   f0100f6c <cprintf>
f011dc24:	83 c4 10             	add    $0x10,%esp
	}

	//[PAGE ALLOCATOR] test kheap_physical_address after kmalloc only [30%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
f011dc27:	c7 45 a0 00 70 d0 f8 	movl   $0xf8d07000,-0x60(%ebp)
		uint32 allPAs[(13*Mega + 24*kilo + INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
f011dc2e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		uint32 offset = 1;
f011dc35:	c7 45 9c 01 00 00 00 	movl   $0x1,-0x64(%ebp)
		uint32 startVA = da_limit + PAGE_SIZE;
f011dc3c:	a1 d8 dd 17 f0       	mov    0xf017ddd8,%eax
f011dc41:	05 00 10 00 00       	add    $0x1000,%eax
f011dc46:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (va = startVA; va < endVA; va+=PAGE_SIZE+offset)
f011dc49:	8b 45 98             	mov    -0x68(%ebp),%eax
f011dc4c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011dc4f:	eb 2e                	jmp    f011dc7f <test_kheap_phys_addr+0x63a>
		{
			allPAs[i++] = kheap_physical_address(va);
f011dc51:	8b 5d f4             	mov    -0xc(%ebp),%ebx
f011dc54:	8d 43 01             	lea    0x1(%ebx),%eax
f011dc57:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011dc5a:	83 ec 0c             	sub    $0xc,%esp
f011dc5d:	ff 75 e8             	pushl  -0x18(%ebp)
f011dc60:	e8 9f ae fe ff       	call   f0108b04 <kheap_physical_address>
f011dc65:	83 c4 10             	add    $0x10,%esp
f011dc68:	89 84 9d 48 ca ff ff 	mov    %eax,-0x35b8(%ebp,%ebx,4)
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
		uint32 allPAs[(13*Mega + 24*kilo + INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		uint32 offset = 1;
		uint32 startVA = da_limit + PAGE_SIZE;
		for (va = startVA; va < endVA; va+=PAGE_SIZE+offset)
f011dc6f:	8b 55 9c             	mov    -0x64(%ebp),%edx
f011dc72:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011dc75:	01 d0                	add    %edx,%eax
f011dc77:	05 00 10 00 00       	add    $0x1000,%eax
f011dc7c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011dc7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011dc82:	3b 45 a0             	cmp    -0x60(%ebp),%eax
f011dc85:	72 ca                	jb     f011dc51 <test_kheap_phys_addr+0x60c>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f011dc87:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011dc8a:	89 45 94             	mov    %eax,-0x6c(%ebp)
		i = 0;
f011dc8d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		int j;
		for (va = startVA; va < endVA; )
f011dc94:	8b 45 98             	mov    -0x68(%ebp),%eax
f011dc97:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011dc9a:	e9 ce 00 00 00       	jmp    f011dd6d <test_kheap_phys_addr+0x728>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011dc9f:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f011dca4:	83 ec 04             	sub    $0x4,%esp
f011dca7:	8d 95 70 fe ff ff    	lea    -0x190(%ebp),%edx
f011dcad:	52                   	push   %edx
f011dcae:	ff 75 e8             	pushl  -0x18(%ebp)
f011dcb1:	50                   	push   %eax
f011dcb2:	e8 56 a7 fe ff       	call   f010840d <get_page_table>
f011dcb7:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011dcba:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011dcc0:	85 c0                	test   %eax,%eax
f011dcc2:	75 1e                	jne    f011dce2 <test_kheap_phys_addr+0x69d>
			{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011dcc4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dccb:	83 ec 04             	sub    $0x4,%esp
f011dcce:	68 98 e5 12 f0       	push   $0xf012e598
f011dcd3:	68 30 05 00 00       	push   $0x530
f011dcd8:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011dcdd:	e8 38 26 fe ff       	call   f010031a <_panic>

			for (j = PTX(va); i < ii && j < 1024 && va < endVA; ++j, ++i)
f011dce2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011dce5:	c1 e8 0c             	shr    $0xc,%eax
f011dce8:	25 ff 03 00 00       	and    $0x3ff,%eax
f011dced:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f011dcf0:	eb 62                	jmp    f011dd54 <test_kheap_phys_addr+0x70f>
			{
				if (((ptr_table[j] & 0xFFFFF000)+(va & 0x00000FFF))!= allPAs[i])
f011dcf2:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011dcf8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011dcfb:	c1 e2 02             	shl    $0x2,%edx
f011dcfe:	01 d0                	add    %edx,%eax
f011dd00:	8b 00                	mov    (%eax),%eax
f011dd02:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011dd07:	89 c2                	mov    %eax,%edx
f011dd09:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011dd0c:	25 ff 0f 00 00       	and    $0xfff,%eax
f011dd11:	01 c2                	add    %eax,%edx
f011dd13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011dd16:	8b 84 85 48 ca ff ff 	mov    -0x35b8(%ebp,%eax,4),%eax
f011dd1d:	39 c2                	cmp    %eax,%edx
f011dd1f:	74 1d                	je     f011dd3e <test_kheap_phys_addr+0x6f9>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					if (correct)
f011dd21:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011dd25:	74 17                	je     f011dd3e <test_kheap_phys_addr+0x6f9>
					{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f011dd27:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dd2e:	83 ec 0c             	sub    $0xc,%esp
f011dd31:	68 0a e6 12 f0       	push   $0xf012e60a
f011dd36:	e8 31 32 fe ff       	call   f0100f6c <cprintf>
f011dd3b:	83 c4 10             	add    $0x10,%esp
				}
				va+=PAGE_SIZE+offset;
f011dd3e:	8b 55 9c             	mov    -0x64(%ebp),%edx
f011dd41:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011dd44:	01 d0                	add    %edx,%eax
f011dd46:	05 00 10 00 00       	add    $0x1000,%eax
f011dd4b:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
			{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }

			for (j = PTX(va); i < ii && j < 1024 && va < endVA; ++j, ++i)
f011dd4e:	ff 45 e4             	incl   -0x1c(%ebp)
f011dd51:	ff 45 f4             	incl   -0xc(%ebp)
f011dd54:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011dd57:	3b 45 94             	cmp    -0x6c(%ebp),%eax
f011dd5a:	7d 11                	jge    f011dd6d <test_kheap_phys_addr+0x728>
f011dd5c:	81 7d e4 ff 03 00 00 	cmpl   $0x3ff,-0x1c(%ebp)
f011dd63:	7f 08                	jg     f011dd6d <test_kheap_phys_addr+0x728>
f011dd65:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011dd68:	3b 45 a0             	cmp    -0x60(%ebp),%eax
f011dd6b:	72 85                	jb     f011dcf2 <test_kheap_phys_addr+0x6ad>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = startVA; va < endVA; )
f011dd6d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011dd70:	3b 45 a0             	cmp    -0x60(%ebp),%eax
f011dd73:	0f 82 26 ff ff ff    	jb     f011dc9f <test_kheap_phys_addr+0x65a>
				}
				va+=PAGE_SIZE+offset;
			}
		}
	}
	if (correct)	eval+=30 ;
f011dd79:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011dd7d:	74 04                	je     f011dd83 <test_kheap_phys_addr+0x73e>
f011dd7f:	83 45 f0 1e          	addl   $0x1e,-0x10(%ebp)

	correct = 1 ;
f011dd83:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//[DYNAMIC ALLOCATOR] test kheap_physical_address after kmalloc only [10%]
	{
		int i;
		uint32 va, pa;
		for (i = 2; i <= 4; i++)
f011dd8a:	c7 45 e0 02 00 00 00 	movl   $0x2,-0x20(%ebp)
f011dd91:	e9 b0 00 00 00       	jmp    f011de46 <test_kheap_phys_addr+0x801>
		{
			va = (uint32)ptr_allocations[i];
f011dd96:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011dd99:	8b 84 85 74 fe ff ff 	mov    -0x18c(%ebp,%eax,4),%eax
f011dda0:	89 45 90             	mov    %eax,-0x70(%ebp)
			pa = kheap_physical_address(va);
f011dda3:	83 ec 0c             	sub    $0xc,%esp
f011dda6:	ff 75 90             	pushl  -0x70(%ebp)
f011dda9:	e8 56 ad fe ff       	call   f0108b04 <kheap_physical_address>
f011ddae:	83 c4 10             	add    $0x10,%esp
f011ddb1:	89 45 8c             	mov    %eax,-0x74(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011ddb4:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f011ddb9:	83 ec 04             	sub    $0x4,%esp
f011ddbc:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f011ddc2:	52                   	push   %edx
f011ddc3:	ff 75 90             	pushl  -0x70(%ebp)
f011ddc6:	50                   	push   %eax
f011ddc7:	e8 41 a6 fe ff       	call   f010840d <get_page_table>
f011ddcc:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011ddcf:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011ddd5:	85 c0                	test   %eax,%eax
f011ddd7:	75 1e                	jne    f011ddf7 <test_kheap_phys_addr+0x7b2>
			{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011ddd9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dde0:	83 ec 04             	sub    $0x4,%esp
f011dde3:	68 98 e5 12 f0       	push   $0xf012e598
f011dde8:	68 4c 05 00 00       	push   $0x54c
f011dded:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011ddf2:	e8 23 25 fe ff       	call   f010031a <_panic>

			if (((ptr_table[PTX(va)] & 0xFFFFF000)+(va & 0x00000FFF))!= pa)
f011ddf7:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011ddfd:	8b 55 90             	mov    -0x70(%ebp),%edx
f011de00:	c1 ea 0c             	shr    $0xc,%edx
f011de03:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011de09:	c1 e2 02             	shl    $0x2,%edx
f011de0c:	01 d0                	add    %edx,%eax
f011de0e:	8b 00                	mov    (%eax),%eax
f011de10:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011de15:	89 c2                	mov    %eax,%edx
f011de17:	8b 45 90             	mov    -0x70(%ebp),%eax
f011de1a:	25 ff 0f 00 00       	and    $0xfff,%eax
f011de1f:	01 d0                	add    %edx,%eax
f011de21:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f011de24:	74 1d                	je     f011de43 <test_kheap_phys_addr+0x7fe>
			{
				//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
				if (correct)
f011de26:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011de2a:	74 17                	je     f011de43 <test_kheap_phys_addr+0x7fe>
				{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f011de2c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011de33:	83 ec 0c             	sub    $0xc,%esp
f011de36:	68 0a e6 12 f0       	push   $0xf012e60a
f011de3b:	e8 2c 31 fe ff       	call   f0100f6c <cprintf>
f011de40:	83 c4 10             	add    $0x10,%esp
	correct = 1 ;
	//[DYNAMIC ALLOCATOR] test kheap_physical_address after kmalloc only [10%]
	{
		int i;
		uint32 va, pa;
		for (i = 2; i <= 4; i++)
f011de43:	ff 45 e0             	incl   -0x20(%ebp)
f011de46:	83 7d e0 04          	cmpl   $0x4,-0x20(%ebp)
f011de4a:	0f 8e 46 ff ff ff    	jle    f011dd96 <test_kheap_phys_addr+0x751>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
			}
		}
	}
	if (correct)	eval+=10 ;
f011de50:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011de54:	74 04                	je     f011de5a <test_kheap_phys_addr+0x815>
f011de56:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)

	correct = 1 ;
f011de5a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011de61:	e8 a3 fb fe ff       	call   f010da09 <sys_calculate_free_frames>
f011de66:	89 45 88             	mov    %eax,-0x78(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011de69:	e8 d2 69 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011de6e:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[0]);
f011de71:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011de77:	83 ec 0c             	sub    $0xc,%esp
f011de7a:	50                   	push   %eax
f011de7b:	e8 50 ac fe ff       	call   f0108ad0 <kfree>
f011de80:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011de83:	e8 b8 69 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011de88:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011de8b:	74 17                	je     f011dea4 <test_kheap_phys_addr+0x85f>
f011de8d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011de94:	83 ec 0c             	sub    $0xc,%esp
f011de97:	68 40 df 12 f0       	push   $0xf012df40
f011de9c:	e8 cb 30 fe ff       	call   f0100f6c <cprintf>
f011dea1:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512 ) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011dea4:	e8 60 fb fe ff       	call   f010da09 <sys_calculate_free_frames>
f011dea9:	89 c2                	mov    %eax,%edx
f011deab:	8b 45 88             	mov    -0x78(%ebp),%eax
f011deae:	29 c2                	sub    %eax,%edx
f011deb0:	89 d0                	mov    %edx,%eax
f011deb2:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011deb7:	77 17                	ja     f011ded0 <test_kheap_phys_addr+0x88b>
f011deb9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011dec0:	83 ec 0c             	sub    $0xc,%esp
f011dec3:	68 44 e3 12 f0       	push   $0xf012e344
f011dec8:	e8 9f 30 fe ff       	call   f0100f6c <cprintf>
f011decd:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ded0:	e8 34 fb fe ff       	call   f010da09 <sys_calculate_free_frames>
f011ded5:	89 45 88             	mov    %eax,-0x78(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ded8:	e8 63 69 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011dedd:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[1]);
f011dee0:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011dee6:	83 ec 0c             	sub    $0xc,%esp
f011dee9:	50                   	push   %eax
f011deea:	e8 e1 ab fe ff       	call   f0108ad0 <kfree>
f011deef:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011def2:	e8 49 69 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011def7:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011defa:	74 17                	je     f011df13 <test_kheap_phys_addr+0x8ce>
f011defc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011df03:	83 ec 0c             	sub    $0xc,%esp
f011df06:	68 40 df 12 f0       	push   $0xf012df40
f011df0b:	e8 5c 30 fe ff       	call   f0100f6c <cprintf>
f011df10:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011df13:	e8 f1 fa fe ff       	call   f010da09 <sys_calculate_free_frames>
f011df18:	89 c2                	mov    %eax,%edx
f011df1a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011df1d:	29 c2                	sub    %eax,%edx
f011df1f:	89 d0                	mov    %edx,%eax
f011df21:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011df26:	77 17                	ja     f011df3f <test_kheap_phys_addr+0x8fa>
f011df28:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011df2f:	83 ec 0c             	sub    $0xc,%esp
f011df32:	68 44 e3 12 f0       	push   $0xf012e344
f011df37:	e8 30 30 fe ff       	call   f0100f6c <cprintf>
f011df3c:	83 c4 10             	add    $0x10,%esp

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011df3f:	e8 c5 fa fe ff       	call   f010da09 <sys_calculate_free_frames>
f011df44:	89 45 88             	mov    %eax,-0x78(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011df47:	e8 f4 68 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011df4c:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[7]);
f011df4f:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011df55:	83 ec 0c             	sub    $0xc,%esp
f011df58:	50                   	push   %eax
f011df59:	e8 72 ab fe ff       	call   f0108ad0 <kfree>
f011df5e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011df61:	e8 da 68 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011df66:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011df69:	74 17                	je     f011df82 <test_kheap_phys_addr+0x93d>
f011df6b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011df72:	83 ec 0c             	sub    $0xc,%esp
f011df75:	68 40 df 12 f0       	push   $0xf012df40
f011df7a:	e8 ed 2f fe ff       	call   f0100f6c <cprintf>
f011df7f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 6*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011df82:	e8 82 fa fe ff       	call   f010da09 <sys_calculate_free_frames>
f011df87:	89 c2                	mov    %eax,%edx
f011df89:	8b 45 88             	mov    -0x78(%ebp),%eax
f011df8c:	29 c2                	sub    %eax,%edx
f011df8e:	89 d0                	mov    %edx,%eax
f011df90:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011df95:	77 17                	ja     f011dfae <test_kheap_phys_addr+0x969>
f011df97:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011df9e:	83 ec 0c             	sub    $0xc,%esp
f011dfa1:	68 44 e3 12 f0       	push   $0xf012e344
f011dfa6:	e8 c1 2f fe ff       	call   f0100f6c <cprintf>
f011dfab:	83 c4 10             	add    $0x10,%esp
	}

	//[PAGE ALLOCATOR] test kheap_physical_address after kmalloc and kfree [20%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
f011dfae:	c7 45 80 00 70 d0 f8 	movl   $0xf8d07000,-0x80(%ebp)
		uint32 allPAs[(13*Mega + 24*kilo + INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
f011dfb5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		uint32 startVA = da_limit + PAGE_SIZE;
f011dfbc:	a1 d8 dd 17 f0       	mov    0xf017ddd8,%eax
f011dfc1:	05 00 10 00 00       	add    $0x1000,%eax
f011dfc6:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)

		for (va = startVA; va < endVA; va+=PAGE_SIZE)
f011dfcc:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011dfd2:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011dfd5:	eb 25                	jmp    f011dffc <test_kheap_phys_addr+0x9b7>
		{
			allPAs[i++] = kheap_physical_address(va);
f011dfd7:	8b 5d f4             	mov    -0xc(%ebp),%ebx
f011dfda:	8d 43 01             	lea    0x1(%ebx),%eax
f011dfdd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011dfe0:	83 ec 0c             	sub    $0xc,%esp
f011dfe3:	ff 75 dc             	pushl  -0x24(%ebp)
f011dfe6:	e8 19 ab fe ff       	call   f0108b04 <kheap_physical_address>
f011dfeb:	83 c4 10             	add    $0x10,%esp
f011dfee:	89 84 9d 48 ca ff ff 	mov    %eax,-0x35b8(%ebp,%ebx,4)
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
		uint32 allPAs[(13*Mega + 24*kilo + INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		uint32 startVA = da_limit + PAGE_SIZE;

		for (va = startVA; va < endVA; va+=PAGE_SIZE)
f011dff5:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
f011dffc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011dfff:	3b 45 80             	cmp    -0x80(%ebp),%eax
f011e002:	72 d3                	jb     f011dfd7 <test_kheap_phys_addr+0x992>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f011e004:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e007:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
		i = 0;
f011e00d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		int j;
		for (va = startVA; va < endVA; )
f011e014:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011e01a:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011e01d:	e9 f1 00 00 00       	jmp    f011e113 <test_kheap_phys_addr+0xace>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011e022:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f011e027:	83 ec 04             	sub    $0x4,%esp
f011e02a:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011e030:	52                   	push   %edx
f011e031:	ff 75 dc             	pushl  -0x24(%ebp)
f011e034:	50                   	push   %eax
f011e035:	e8 d3 a3 fe ff       	call   f010840d <get_page_table>
f011e03a:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011e03d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011e043:	85 c0                	test   %eax,%eax
f011e045:	75 24                	jne    f011e06b <test_kheap_phys_addr+0xa26>
				if (correct)
f011e047:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e04b:	74 1e                	je     f011e06b <test_kheap_phys_addr+0xa26>
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011e04d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011e054:	83 ec 04             	sub    $0x4,%esp
f011e057:	68 98 e5 12 f0       	push   $0xf012e598
f011e05c:	68 86 05 00 00       	push   $0x586
f011e061:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011e066:	e8 af 22 fe ff       	call   f010031a <_panic>

			for (j = PTX(va); i < ii && j < 1024 && va < endVA; ++j, ++i)
f011e06b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e06e:	c1 e8 0c             	shr    $0xc,%eax
f011e071:	25 ff 03 00 00       	and    $0x3ff,%eax
f011e076:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011e079:	eb 78                	jmp    f011e0f3 <test_kheap_phys_addr+0xaae>
			{
				if (((ptr_table[j] & 0xFFFFF000)+((ptr_table[j] & PERM_PRESENT) == 0? 0 : va & 0x00000FFF)) != allPAs[i])
f011e07b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011e081:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011e084:	c1 e2 02             	shl    $0x2,%edx
f011e087:	01 d0                	add    %edx,%eax
f011e089:	8b 00                	mov    (%eax),%eax
f011e08b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011e090:	89 c1                	mov    %eax,%ecx
f011e092:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011e098:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011e09b:	c1 e2 02             	shl    $0x2,%edx
f011e09e:	01 d0                	add    %edx,%eax
f011e0a0:	8b 00                	mov    (%eax),%eax
f011e0a2:	83 e0 01             	and    $0x1,%eax
f011e0a5:	85 c0                	test   %eax,%eax
f011e0a7:	74 0a                	je     f011e0b3 <test_kheap_phys_addr+0xa6e>
f011e0a9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e0ac:	25 ff 0f 00 00       	and    $0xfff,%eax
f011e0b1:	eb 05                	jmp    f011e0b8 <test_kheap_phys_addr+0xa73>
f011e0b3:	b8 00 00 00 00       	mov    $0x0,%eax
f011e0b8:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f011e0bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e0be:	8b 84 85 48 ca ff ff 	mov    -0x35b8(%ebp,%eax,4),%eax
f011e0c5:	39 c2                	cmp    %eax,%edx
f011e0c7:	74 1d                	je     f011e0e6 <test_kheap_phys_addr+0xaa1>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					if (correct)
f011e0c9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e0cd:	74 17                	je     f011e0e6 <test_kheap_phys_addr+0xaa1>
					{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f011e0cf:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011e0d6:	83 ec 0c             	sub    $0xc,%esp
f011e0d9:	68 0a e6 12 f0       	push   $0xf012e60a
f011e0de:	e8 89 2e fe ff       	call   f0100f6c <cprintf>
f011e0e3:	83 c4 10             	add    $0x10,%esp
				}
				va += PAGE_SIZE;
f011e0e6:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				if (correct)
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }

			for (j = PTX(va); i < ii && j < 1024 && va < endVA; ++j, ++i)
f011e0ed:	ff 45 d8             	incl   -0x28(%ebp)
f011e0f0:	ff 45 f4             	incl   -0xc(%ebp)
f011e0f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e0f6:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f011e0fc:	7d 15                	jge    f011e113 <test_kheap_phys_addr+0xace>
f011e0fe:	81 7d d8 ff 03 00 00 	cmpl   $0x3ff,-0x28(%ebp)
f011e105:	7f 0c                	jg     f011e113 <test_kheap_phys_addr+0xace>
f011e107:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e10a:	3b 45 80             	cmp    -0x80(%ebp),%eax
f011e10d:	0f 82 68 ff ff ff    	jb     f011e07b <test_kheap_phys_addr+0xa36>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = startVA; va < endVA; )
f011e113:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e116:	3b 45 80             	cmp    -0x80(%ebp),%eax
f011e119:	0f 82 03 ff ff ff    	jb     f011e022 <test_kheap_phys_addr+0x9dd>
				}
				va += PAGE_SIZE;
			}
		}
	}
	if (correct)	eval+=20 ;
f011e11f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e123:	74 04                	je     f011e129 <test_kheap_phys_addr+0xae4>
f011e125:	83 45 f0 14          	addl   $0x14,-0x10(%ebp)

	correct = 1 ;
f011e129:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//[DYNAMIC ALLOCATOR] test kheap_physical_address on the entire allocated area [30%]
	{
		uint32 va, pa;
		for (va = KERNEL_HEAP_START; va < (uint32)sbrk(0); va++)
f011e130:	c7 45 d4 00 00 00 f6 	movl   $0xf6000000,-0x2c(%ebp)
f011e137:	e9 af 00 00 00       	jmp    f011e1eb <test_kheap_phys_addr+0xba6>
		{
			pa = kheap_physical_address(va);
f011e13c:	83 ec 0c             	sub    $0xc,%esp
f011e13f:	ff 75 d4             	pushl  -0x2c(%ebp)
f011e142:	e8 bd a9 fe ff       	call   f0108b04 <kheap_physical_address>
f011e147:	83 c4 10             	add    $0x10,%esp
f011e14a:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011e150:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f011e155:	83 ec 04             	sub    $0x4,%esp
f011e158:	8d 95 64 fe ff ff    	lea    -0x19c(%ebp),%edx
f011e15e:	52                   	push   %edx
f011e15f:	ff 75 d4             	pushl  -0x2c(%ebp)
f011e162:	50                   	push   %eax
f011e163:	e8 a5 a2 fe ff       	call   f010840d <get_page_table>
f011e168:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011e16b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011e171:	85 c0                	test   %eax,%eax
f011e173:	75 24                	jne    f011e199 <test_kheap_phys_addr+0xb54>
				if (correct)
f011e175:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e179:	74 1e                	je     f011e199 <test_kheap_phys_addr+0xb54>
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011e17b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011e182:	83 ec 04             	sub    $0x4,%esp
f011e185:	68 98 e5 12 f0       	push   $0xf012e598
f011e18a:	68 a1 05 00 00       	push   $0x5a1
f011e18f:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011e194:	e8 81 21 fe ff       	call   f010031a <_panic>

			if (((ptr_table[PTX(va)] & 0xFFFFF000)+(va & 0x00000FFF))!= pa)
f011e199:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011e19f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011e1a2:	c1 ea 0c             	shr    $0xc,%edx
f011e1a5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011e1ab:	c1 e2 02             	shl    $0x2,%edx
f011e1ae:	01 d0                	add    %edx,%eax
f011e1b0:	8b 00                	mov    (%eax),%eax
f011e1b2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011e1b7:	89 c2                	mov    %eax,%edx
f011e1b9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e1bc:	25 ff 0f 00 00       	and    $0xfff,%eax
f011e1c1:	01 d0                	add    %edx,%eax
f011e1c3:	3b 85 74 ff ff ff    	cmp    -0x8c(%ebp),%eax
f011e1c9:	74 1d                	je     f011e1e8 <test_kheap_phys_addr+0xba3>
			{
				//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
				if (correct)
f011e1cb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e1cf:	74 17                	je     f011e1e8 <test_kheap_phys_addr+0xba3>
				{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f011e1d1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011e1d8:	83 ec 0c             	sub    $0xc,%esp
f011e1db:	68 0a e6 12 f0       	push   $0xf012e60a
f011e1e0:	e8 87 2d fe ff       	call   f0100f6c <cprintf>
f011e1e5:	83 c4 10             	add    $0x10,%esp

	correct = 1 ;
	//[DYNAMIC ALLOCATOR] test kheap_physical_address on the entire allocated area [30%]
	{
		uint32 va, pa;
		for (va = KERNEL_HEAP_START; va < (uint32)sbrk(0); va++)
f011e1e8:	ff 45 d4             	incl   -0x2c(%ebp)
f011e1eb:	83 ec 0c             	sub    $0xc,%esp
f011e1ee:	6a 00                	push   $0x0
f011e1f0:	e8 b7 a8 fe ff       	call   f0108aac <sbrk>
f011e1f5:	83 c4 10             	add    $0x10,%esp
f011e1f8:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011e1fb:	0f 87 3b ff ff ff    	ja     f011e13c <test_kheap_phys_addr+0xaf7>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
			}
		}
	}
	if (correct)	eval+=30 ;
f011e201:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e205:	74 04                	je     f011e20b <test_kheap_phys_addr+0xbc6>
f011e207:	83 45 f0 1e          	addl   $0x1e,-0x10(%ebp)

	correct = 1 ;
f011e20b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//test kheap_physical_address on non-mapped area [10%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f011e212:	c7 85 70 ff ff ff 00 	movl   $0xf9001000,-0x90(%ebp)
f011e219:	10 00 f9 
		i = 0;
f011e21c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f011e223:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e229:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011e22c:	eb 0a                	jmp    f011e238 <test_kheap_phys_addr+0xbf3>
		{
			i++;
f011e22e:	ff 45 f4             	incl   -0xc(%ebp)
	//test kheap_physical_address on non-mapped area [10%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f011e231:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f011e238:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f011e23f:	76 ed                	jbe    f011e22e <test_kheap_phys_addr+0xbe9>
		{
			i++;
		}
		int ii = i ;
f011e241:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e244:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
		i = 0;
f011e24a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f011e251:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e257:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011e25a:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f011e261:	e9 13 01 00 00       	jmp    f011e379 <test_kheap_phys_addr+0xd34>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f011e266:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011e269:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f011e26e:	83 ec 04             	sub    $0x4,%esp
f011e271:	8d 8d 60 fe ff ff    	lea    -0x1a0(%ebp),%ecx
f011e277:	51                   	push   %ecx
f011e278:	52                   	push   %edx
f011e279:	50                   	push   %eax
f011e27a:	e8 8e a1 fe ff       	call   f010840d <get_page_table>
f011e27f:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011e282:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011e288:	85 c0                	test   %eax,%eax
f011e28a:	75 24                	jne    f011e2b0 <test_kheap_phys_addr+0xc6b>
			{
				if (correct)
f011e28c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e290:	74 1e                	je     f011e2b0 <test_kheap_phys_addr+0xc6b>
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011e292:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011e299:	83 ec 04             	sub    $0x4,%esp
f011e29c:	68 98 e5 12 f0       	push   $0xf012e598
f011e2a1:	68 c2 05 00 00       	push   $0x5c2
f011e2a6:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011e2ab:	e8 6a 20 fe ff       	call   f010031a <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f011e2b0:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f011e2b7:	e9 9a 00 00 00       	jmp    f011e356 <test_kheap_phys_addr+0xd11>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f011e2bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e2bf:	c1 e0 0c             	shl    $0xc,%eax
f011e2c2:	89 c2                	mov    %eax,%edx
f011e2c4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011e2ca:	01 d0                	add    %edx,%eax
f011e2cc:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f011e2d2:	83 ec 0c             	sub    $0xc,%esp
f011e2d5:	ff b5 68 ff ff ff    	pushl  -0x98(%ebp)
f011e2db:	e8 24 a8 fe ff       	call   f0108b04 <kheap_physical_address>
f011e2e0:	83 c4 10             	add    $0x10,%esp
f011e2e3:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
				if (((ptr_table[j] & 0xFFFFF000)+((ptr_table[j] & PERM_PRESENT) == 0? 0 : page_va & 0x00000FFF)) != supposed_kheap_phys_add)
f011e2e9:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011e2ef:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011e2f2:	c1 e2 02             	shl    $0x2,%edx
f011e2f5:	01 d0                	add    %edx,%eax
f011e2f7:	8b 00                	mov    (%eax),%eax
f011e2f9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011e2fe:	89 c1                	mov    %eax,%ecx
f011e300:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011e306:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011e309:	c1 e2 02             	shl    $0x2,%edx
f011e30c:	01 d0                	add    %edx,%eax
f011e30e:	8b 00                	mov    (%eax),%eax
f011e310:	83 e0 01             	and    $0x1,%eax
f011e313:	85 c0                	test   %eax,%eax
f011e315:	74 0d                	je     f011e324 <test_kheap_phys_addr+0xcdf>
f011e317:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011e31d:	25 ff 0f 00 00       	and    $0xfff,%eax
f011e322:	eb 05                	jmp    f011e329 <test_kheap_phys_addr+0xce4>
f011e324:	b8 00 00 00 00       	mov    $0x0,%eax
f011e329:	01 c8                	add    %ecx,%eax
f011e32b:	3b 85 64 ff ff ff    	cmp    -0x9c(%ebp),%eax
f011e331:	74 1d                	je     f011e350 <test_kheap_phys_addr+0xd0b>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					if (correct)
f011e333:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e337:	74 17                	je     f011e350 <test_kheap_phys_addr+0xd0b>
					{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f011e339:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011e340:	83 ec 0c             	sub    $0xc,%esp
f011e343:	68 0a e6 12 f0       	push   $0xf012e60a
f011e348:	e8 1f 2c fe ff       	call   f0100f6c <cprintf>
f011e34d:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
			{
				if (correct)
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f011e350:	ff 45 cc             	incl   -0x34(%ebp)
f011e353:	ff 45 f4             	incl   -0xc(%ebp)
f011e356:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011e359:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f011e35f:	7d 0d                	jge    f011e36e <test_kheap_phys_addr+0xd29>
f011e361:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f011e368:	0f 8e 4e ff ff ff    	jle    f011e2bc <test_kheap_phys_addr+0xc77>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f011e36e:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f011e375:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f011e379:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f011e37d:	0f 88 e3 fe ff ff    	js     f011e266 <test_kheap_phys_addr+0xc21>
f011e383:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f011e387:	7f 0d                	jg     f011e396 <test_kheap_phys_addr+0xd51>
f011e389:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f011e390:	0f 86 d0 fe ff ff    	jbe    f011e266 <test_kheap_phys_addr+0xc21>
					{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
				}
			}
		}
	}
	if (correct)	eval+=10 ;
f011e396:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e39a:	74 04                	je     f011e3a0 <test_kheap_phys_addr+0xd5b>
f011e39c:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)

	cprintf("\ntest kheap_physical_address completed. Eval = %d%\n", eval);
f011e3a0:	83 ec 08             	sub    $0x8,%esp
f011e3a3:	ff 75 f0             	pushl  -0x10(%ebp)
f011e3a6:	68 28 e6 12 f0       	push   $0xf012e628
f011e3ab:	e8 bc 2b fe ff       	call   f0100f6c <cprintf>
f011e3b0:	83 c4 10             	add    $0x10,%esp

	return 1;
f011e3b3:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011e3b8:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011e3bb:	5b                   	pop    %ebx
f011e3bc:	5f                   	pop    %edi
f011e3bd:	5d                   	pop    %ebp
f011e3be:	c3                   	ret    

f011e3bf <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f011e3bf:	55                   	push   %ebp
f011e3c0:	89 e5                	mov    %esp,%ebp
f011e3c2:	57                   	push   %edi
f011e3c3:	56                   	push   %esi
f011e3c4:	53                   	push   %ebx
f011e3c5:	81 ec 9c 01 00 00    	sub    $0x19c,%esp
f011e3cb:	89 e0                	mov    %esp,%eax
f011e3cd:	89 c6                	mov    %eax,%esi
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f011e3cf:	83 ec 0c             	sub    $0xc,%esp
f011e3d2:	68 80 de 12 f0       	push   $0xf012de80
f011e3d7:	e8 90 2b fe ff       	call   f0100f6c <cprintf>
f011e3dc:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011e3df:	83 ec 0c             	sub    $0xc,%esp
f011e3e2:	68 b0 de 12 f0       	push   $0xf012deb0
f011e3e7:	e8 80 2b fe ff       	call   f0100f6c <cprintf>
f011e3ec:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011e3ef:	83 ec 0c             	sub    $0xc,%esp
f011e3f2:	68 80 de 12 f0       	push   $0xf012de80
f011e3f7:	e8 70 2b fe ff       	call   f0100f6c <cprintf>
f011e3fc:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011e3ff:	c6 45 c7 80          	movb   $0x80,-0x39(%ebp)
	char maxByte = 0x7F;
f011e403:	c6 45 c6 7f          	movb   $0x7f,-0x3a(%ebp)
	short minShort = 1<<15 ;
f011e407:	66 c7 45 c4 00 80    	movw   $0x8000,-0x3c(%ebp)
	short maxShort = 0x7FFF;
f011e40d:	66 c7 45 c2 ff 7f    	movw   $0x7fff,-0x3e(%ebp)
	int minInt = 1<<31 ;
f011e413:	c7 45 bc 00 00 00 80 	movl   $0x80000000,-0x44(%ebp)
	int maxInt = 0x7FFFFFFF;
f011e41a:	c7 45 b8 ff ff ff 7f 	movl   $0x7fffffff,-0x48(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011e421:	e8 e3 f5 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e426:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011e429:	8d 95 0c ff ff ff    	lea    -0xf4(%ebp),%edx
f011e42f:	b9 14 00 00 00       	mov    $0x14,%ecx
f011e434:	b8 00 00 00 00       	mov    $0x0,%eax
f011e439:	89 d7                	mov    %edx,%edi
f011e43b:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011e43d:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f011e443:	b9 14 00 00 00       	mov    $0x14,%ecx
f011e448:	b8 00 00 00 00       	mov    $0x0,%eax
f011e44d:	89 d7                	mov    %edx,%edi
f011e44f:	f3 ab                	rep stos %eax,%es:(%edi)

	int eval = 0;
f011e451:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool correct = 1;
f011e458:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f011e45f:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f011e465:	b9 14 00 00 00       	mov    $0x14,%ecx
f011e46a:	b8 00 00 00 00       	mov    $0x0,%eax
f011e46f:	89 d7                	mov    %edx,%edi
f011e471:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011e473:	e8 91 f5 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e478:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e47b:	e8 c0 63 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e480:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011e483:	83 ec 0c             	sub    $0xc,%esp
f011e486:	68 00 fc 1f 00       	push   $0x1ffc00
f011e48b:	e8 26 a6 fe ff       	call   f0108ab6 <kmalloc>
f011e490:	83 c4 10             	add    $0x10,%esp
f011e493:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011e499:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011e49f:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011e4a4:	74 17                	je     f011e4bd <test_kheap_virt_addr+0xfe>
f011e4a6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e4ad:	83 ec 0c             	sub    $0xc,%esp
f011e4b0:	68 f0 df 12 f0       	push   $0xf012dff0
f011e4b5:	e8 b2 2a fe ff       	call   f0100f6c <cprintf>
f011e4ba:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e4bd:	e8 7e 63 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e4c2:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e4c5:	74 17                	je     f011e4de <test_kheap_virt_addr+0x11f>
f011e4c7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e4ce:	83 ec 0c             	sub    $0xc,%esp
f011e4d1:	68 40 df 12 f0       	push   $0xf012df40
f011e4d6:	e8 91 2a fe ff       	call   f0100f6c <cprintf>
f011e4db:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011e4de:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011e4e1:	e8 23 f5 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e4e6:	29 c3                	sub    %eax,%ebx
f011e4e8:	89 d8                	mov    %ebx,%eax
f011e4ea:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011e4ef:	77 17                	ja     f011e508 <test_kheap_virt_addr+0x149>
f011e4f1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e4f8:	83 ec 0c             	sub    $0xc,%esp
f011e4fb:	68 ac df 12 f0       	push   $0xf012dfac
f011e500:	e8 67 2a fe ff       	call   f0100f6c <cprintf>
f011e505:	83 c4 10             	add    $0x10,%esp

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011e508:	e8 fc f4 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e50d:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e510:	e8 2b 63 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e515:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011e518:	83 ec 0c             	sub    $0xc,%esp
f011e51b:	68 00 fc 1f 00       	push   $0x1ffc00
f011e520:	e8 91 a5 fe ff       	call   f0108ab6 <kmalloc>
f011e525:	83 c4 10             	add    $0x10,%esp
f011e528:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011e52e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011e534:	3d 00 10 20 f8       	cmp    $0xf8201000,%eax
f011e539:	74 17                	je     f011e552 <test_kheap_virt_addr+0x193>
f011e53b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e542:	83 ec 0c             	sub    $0xc,%esp
f011e545:	68 f0 df 12 f0       	push   $0xf012dff0
f011e54a:	e8 1d 2a fe ff       	call   f0100f6c <cprintf>
f011e54f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e552:	e8 e9 62 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e557:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e55a:	74 17                	je     f011e573 <test_kheap_virt_addr+0x1b4>
f011e55c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e563:	83 ec 0c             	sub    $0xc,%esp
f011e566:	68 40 df 12 f0       	push   $0xf012df40
f011e56b:	e8 fc 29 fe ff       	call   f0100f6c <cprintf>
f011e570:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011e573:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011e576:	e8 8e f4 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e57b:	29 c3                	sub    %eax,%ebx
f011e57d:	89 d8                	mov    %ebx,%eax
f011e57f:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011e584:	77 17                	ja     f011e59d <test_kheap_virt_addr+0x1de>
f011e586:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e58d:	83 ec 0c             	sub    $0xc,%esp
f011e590:	68 ac df 12 f0       	push   $0xf012dfac
f011e595:	e8 d2 29 fe ff       	call   f0100f6c <cprintf>
f011e59a:	83 c4 10             	add    $0x10,%esp

		//[DYNAMIC ALLOCATOR]
		{
			//1 KB
			freeFrames = sys_calculate_free_frames() ;
f011e59d:	e8 67 f4 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e5a2:	89 45 b0             	mov    %eax,-0x50(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011e5a5:	e8 96 62 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e5aa:	89 45 ac             	mov    %eax,-0x54(%ebp)
			ptr_allocations[2] = kmalloc(1*kilo);
f011e5ad:	83 ec 0c             	sub    $0xc,%esp
f011e5b0:	68 00 04 00 00       	push   $0x400
f011e5b5:	e8 fc a4 fe ff       	call   f0108ab6 <kmalloc>
f011e5ba:	83 c4 10             	add    $0x10,%esp
f011e5bd:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
			if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f011e5c3:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011e5c9:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011e5ce:	76 28                	jbe    f011e5f8 <test_kheap_virt_addr+0x239>
f011e5d0:	8b 9d 74 fe ff ff    	mov    -0x18c(%ebp),%ebx
f011e5d6:	83 ec 0c             	sub    $0xc,%esp
f011e5d9:	6a 00                	push   $0x0
f011e5db:	e8 cc a4 fe ff       	call   f0108aac <sbrk>
f011e5e0:	83 c4 10             	add    $0x10,%esp
f011e5e3:	39 c3                	cmp    %eax,%ebx
f011e5e5:	73 11                	jae    f011e5f8 <test_kheap_virt_addr+0x239>
f011e5e7:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011e5ed:	89 c2                	mov    %eax,%edx
f011e5ef:	a1 d8 dd 17 f0       	mov    0xf017ddd8,%eax
f011e5f4:	39 c2                	cmp    %eax,%edx
f011e5f6:	72 17                	jb     f011e60f <test_kheap_virt_addr+0x250>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011e5f8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e5ff:	83 ec 0c             	sub    $0xc,%esp
f011e602:	68 40 e0 12 f0       	push   $0xf012e040
f011e607:	e8 60 29 fe ff       	call   f0100f6c <cprintf>
f011e60c:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e60f:	e8 2c 62 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e614:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e617:	74 17                	je     f011e630 <test_kheap_virt_addr+0x271>
f011e619:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e620:	83 ec 0c             	sub    $0xc,%esp
f011e623:	68 40 df 12 f0       	push   $0xf012df40
f011e628:	e8 3f 29 fe ff       	call   f0100f6c <cprintf>
f011e62d:	83 c4 10             	add    $0x10,%esp
			//if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f011e630:	e8 d4 f3 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e635:	89 45 b0             	mov    %eax,-0x50(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011e638:	e8 03 62 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e63d:	89 45 ac             	mov    %eax,-0x54(%ebp)
			ptr_allocations[3] = kmalloc(2*kilo);
f011e640:	83 ec 0c             	sub    $0xc,%esp
f011e643:	68 00 08 00 00       	push   $0x800
f011e648:	e8 69 a4 fe ff       	call   f0108ab6 <kmalloc>
f011e64d:	83 c4 10             	add    $0x10,%esp
f011e650:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
			if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f011e656:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011e65c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011e661:	76 28                	jbe    f011e68b <test_kheap_virt_addr+0x2cc>
f011e663:	8b 9d 78 fe ff ff    	mov    -0x188(%ebp),%ebx
f011e669:	83 ec 0c             	sub    $0xc,%esp
f011e66c:	6a 00                	push   $0x0
f011e66e:	e8 39 a4 fe ff       	call   f0108aac <sbrk>
f011e673:	83 c4 10             	add    $0x10,%esp
f011e676:	39 c3                	cmp    %eax,%ebx
f011e678:	73 11                	jae    f011e68b <test_kheap_virt_addr+0x2cc>
f011e67a:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011e680:	89 c2                	mov    %eax,%edx
f011e682:	a1 d8 dd 17 f0       	mov    0xf017ddd8,%eax
f011e687:	39 c2                	cmp    %eax,%edx
f011e689:	72 17                	jb     f011e6a2 <test_kheap_virt_addr+0x2e3>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011e68b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e692:	83 ec 0c             	sub    $0xc,%esp
f011e695:	68 40 e0 12 f0       	push   $0xf012e040
f011e69a:	e8 cd 28 fe ff       	call   f0100f6c <cprintf>
f011e69f:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e6a2:	e8 99 61 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e6a7:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e6aa:	74 17                	je     f011e6c3 <test_kheap_virt_addr+0x304>
f011e6ac:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e6b3:	83 ec 0c             	sub    $0xc,%esp
f011e6b6:	68 40 df 12 f0       	push   $0xf012df40
f011e6bb:	e8 ac 28 fe ff       	call   f0100f6c <cprintf>
f011e6c0:	83 c4 10             	add    $0x10,%esp
			//if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

			//1.5 KB
			freeFrames = sys_calculate_free_frames() ;
f011e6c3:	e8 41 f3 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e6c8:	89 45 b0             	mov    %eax,-0x50(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011e6cb:	e8 70 61 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e6d0:	89 45 ac             	mov    %eax,-0x54(%ebp)
			ptr_allocations[4] = kmalloc(3*kilo/2);
f011e6d3:	83 ec 0c             	sub    $0xc,%esp
f011e6d6:	68 00 06 00 00       	push   $0x600
f011e6db:	e8 d6 a3 fe ff       	call   f0108ab6 <kmalloc>
f011e6e0:	83 c4 10             	add    $0x10,%esp
f011e6e3:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
			if ((uint32) ptr_allocations[4] < KERNEL_HEAP_START || ptr_allocations[4] >= sbrk(0) || (uint32) ptr_allocations[4] >= da_limit)
f011e6e9:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011e6ef:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011e6f4:	76 28                	jbe    f011e71e <test_kheap_virt_addr+0x35f>
f011e6f6:	8b 9d 7c fe ff ff    	mov    -0x184(%ebp),%ebx
f011e6fc:	83 ec 0c             	sub    $0xc,%esp
f011e6ff:	6a 00                	push   $0x0
f011e701:	e8 a6 a3 fe ff       	call   f0108aac <sbrk>
f011e706:	83 c4 10             	add    $0x10,%esp
f011e709:	39 c3                	cmp    %eax,%ebx
f011e70b:	73 11                	jae    f011e71e <test_kheap_virt_addr+0x35f>
f011e70d:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011e713:	89 c2                	mov    %eax,%edx
f011e715:	a1 d8 dd 17 f0       	mov    0xf017ddd8,%eax
f011e71a:	39 c2                	cmp    %eax,%edx
f011e71c:	72 17                	jb     f011e735 <test_kheap_virt_addr+0x376>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011e71e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e725:	83 ec 0c             	sub    $0xc,%esp
f011e728:	68 40 e0 12 f0       	push   $0xf012e040
f011e72d:	e8 3a 28 fe ff       	call   f0100f6c <cprintf>
f011e732:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e735:	e8 06 61 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e73a:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e73d:	74 17                	je     f011e756 <test_kheap_virt_addr+0x397>
f011e73f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e746:	83 ec 0c             	sub    $0xc,%esp
f011e749:	68 40 df 12 f0       	push   $0xf012df40
f011e74e:	e8 19 28 fe ff       	call   f0100f6c <cprintf>
f011e753:	83 c4 10             	add    $0x10,%esp
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011e756:	e8 ae f2 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e75b:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e75e:	e8 dd 60 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e763:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[5] = kmalloc(7*kilo);
f011e766:	83 ec 0c             	sub    $0xc,%esp
f011e769:	68 00 1c 00 00       	push   $0x1c00
f011e76e:	e8 43 a3 fe ff       	call   f0108ab6 <kmalloc>
f011e773:	83 c4 10             	add    $0x10,%esp
f011e776:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega /*+ 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011e77c:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011e782:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011e787:	74 17                	je     f011e7a0 <test_kheap_virt_addr+0x3e1>
f011e789:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e790:	83 ec 0c             	sub    $0xc,%esp
f011e793:	68 f0 df 12 f0       	push   $0xf012dff0
f011e798:	e8 cf 27 fe ff       	call   f0100f6c <cprintf>
f011e79d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e7a0:	e8 9b 60 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e7a5:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e7a8:	74 17                	je     f011e7c1 <test_kheap_virt_addr+0x402>
f011e7aa:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e7b1:	83 ec 0c             	sub    $0xc,%esp
f011e7b4:	68 40 df 12 f0       	push   $0xf012df40
f011e7b9:	e8 ae 27 fe ff       	call   f0100f6c <cprintf>
f011e7be:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011e7c1:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011e7c4:	e8 40 f2 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e7c9:	29 c3                	sub    %eax,%ebx
f011e7cb:	89 d8                	mov    %ebx,%eax
f011e7cd:	83 f8 01             	cmp    $0x1,%eax
f011e7d0:	77 17                	ja     f011e7e9 <test_kheap_virt_addr+0x42a>
f011e7d2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e7d9:	83 ec 0c             	sub    $0xc,%esp
f011e7dc:	68 ac df 12 f0       	push   $0xf012dfac
f011e7e1:	e8 86 27 fe ff       	call   f0100f6c <cprintf>
f011e7e6:	83 c4 10             	add    $0x10,%esp

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011e7e9:	e8 1b f2 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e7ee:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e7f1:	e8 4a 60 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e7f6:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011e7f9:	83 ec 0c             	sub    $0xc,%esp
f011e7fc:	68 00 fc 2f 00       	push   $0x2ffc00
f011e801:	e8 b0 a2 fe ff       	call   f0108ab6 <kmalloc>
f011e806:	83 c4 10             	add    $0x10,%esp
f011e809:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011e80f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011e815:	3d 00 30 40 f8       	cmp    $0xf8403000,%eax
f011e81a:	74 17                	je     f011e833 <test_kheap_virt_addr+0x474>
f011e81c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e823:	83 ec 0c             	sub    $0xc,%esp
f011e826:	68 f0 df 12 f0       	push   $0xf012dff0
f011e82b:	e8 3c 27 fe ff       	call   f0100f6c <cprintf>
f011e830:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e833:	e8 08 60 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e838:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e83b:	74 17                	je     f011e854 <test_kheap_virt_addr+0x495>
f011e83d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e844:	83 ec 0c             	sub    $0xc,%esp
f011e847:	68 40 df 12 f0       	push   $0xf012df40
f011e84c:	e8 1b 27 fe ff       	call   f0100f6c <cprintf>
f011e851:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011e854:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011e857:	e8 ad f1 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e85c:	29 c3                	sub    %eax,%ebx
f011e85e:	89 d8                	mov    %ebx,%eax
f011e860:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011e865:	77 17                	ja     f011e87e <test_kheap_virt_addr+0x4bf>
f011e867:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e86e:	83 ec 0c             	sub    $0xc,%esp
f011e871:	68 ac df 12 f0       	push   $0xf012dfac
f011e876:	e8 f1 26 fe ff       	call   f0100f6c <cprintf>
f011e87b:	83 c4 10             	add    $0x10,%esp

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011e87e:	e8 86 f1 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e883:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e886:	e8 b5 5f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e88b:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[7] = kmalloc(6*Mega-kilo);
f011e88e:	83 ec 0c             	sub    $0xc,%esp
f011e891:	68 00 fc 5f 00       	push   $0x5ffc00
f011e896:	e8 1b a2 fe ff       	call   f0108ab6 <kmalloc>
f011e89b:	83 c4 10             	add    $0x10,%esp
f011e89e:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011e8a4:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011e8aa:	3d 00 30 70 f8       	cmp    $0xf8703000,%eax
f011e8af:	74 17                	je     f011e8c8 <test_kheap_virt_addr+0x509>
f011e8b1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e8b8:	83 ec 0c             	sub    $0xc,%esp
f011e8bb:	68 f0 df 12 f0       	push   $0xf012dff0
f011e8c0:	e8 a7 26 fe ff       	call   f0100f6c <cprintf>
f011e8c5:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e8c8:	e8 73 5f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e8cd:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e8d0:	74 17                	je     f011e8e9 <test_kheap_virt_addr+0x52a>
f011e8d2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e8d9:	83 ec 0c             	sub    $0xc,%esp
f011e8dc:	68 40 df 12 f0       	push   $0xf012df40
f011e8e1:	e8 86 26 fe ff       	call   f0100f6c <cprintf>
f011e8e6:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 1536) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011e8e9:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011e8ec:	e8 18 f1 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e8f1:	29 c3                	sub    %eax,%ebx
f011e8f3:	89 d8                	mov    %ebx,%eax
f011e8f5:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011e8fa:	77 17                	ja     f011e913 <test_kheap_virt_addr+0x554>
f011e8fc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e903:	83 ec 0c             	sub    $0xc,%esp
f011e906:	68 ac df 12 f0       	push   $0xf012dfac
f011e90b:	e8 5c 26 fe ff       	call   f0100f6c <cprintf>
f011e910:	83 c4 10             	add    $0x10,%esp

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011e913:	e8 f1 f0 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e918:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011e91b:	e8 20 5f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e920:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[8] = kmalloc(14*kilo);
f011e923:	83 ec 0c             	sub    $0xc,%esp
f011e926:	68 00 38 00 00       	push   $0x3800
f011e92b:	e8 86 a1 fe ff       	call   f0108ab6 <kmalloc>
f011e930:	83 c4 10             	add    $0x10,%esp
f011e933:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011e939:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011e93f:	3d 00 30 d0 f8       	cmp    $0xf8d03000,%eax
f011e944:	74 17                	je     f011e95d <test_kheap_virt_addr+0x59e>
f011e946:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e94d:	83 ec 0c             	sub    $0xc,%esp
f011e950:	68 f0 df 12 f0       	push   $0xf012dff0
f011e955:	e8 12 26 fe ff       	call   f0100f6c <cprintf>
f011e95a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011e95d:	e8 de 5e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e962:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011e965:	74 17                	je     f011e97e <test_kheap_virt_addr+0x5bf>
f011e967:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e96e:	83 ec 0c             	sub    $0xc,%esp
f011e971:	68 40 df 12 f0       	push   $0xf012df40
f011e976:	e8 f1 25 fe ff       	call   f0100f6c <cprintf>
f011e97b:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011e97e:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011e981:	e8 83 f0 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e986:	29 c3                	sub    %eax,%ebx
f011e988:	89 d8                	mov    %ebx,%eax
f011e98a:	83 f8 03             	cmp    $0x3,%eax
f011e98d:	77 17                	ja     f011e9a6 <test_kheap_virt_addr+0x5e7>
f011e98f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011e996:	83 ec 0c             	sub    $0xc,%esp
f011e999:	68 ac df 12 f0       	push   $0xf012dfac
f011e99e:	e8 c9 25 fe ff       	call   f0100f6c <cprintf>
f011e9a3:	83 c4 10             	add    $0x10,%esp
	}

	uint32 allocatedSpace = (13*Mega + 24*kilo + (INITIAL_KHEAP_ALLOCATIONS));
f011e9a6:	c7 45 a8 00 60 d0 00 	movl   $0xd06000,-0x58(%ebp)
	uint32 allPAs[allocatedSpace/PAGE_SIZE] ;
f011e9ad:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e9b0:	c1 e8 0c             	shr    $0xc,%eax
f011e9b3:	89 c2                	mov    %eax,%edx
f011e9b5:	4a                   	dec    %edx
f011e9b6:	89 55 a4             	mov    %edx,-0x5c(%ebp)
f011e9b9:	c1 e0 02             	shl    $0x2,%eax
f011e9bc:	8d 50 03             	lea    0x3(%eax),%edx
f011e9bf:	b8 10 00 00 00       	mov    $0x10,%eax
f011e9c4:	48                   	dec    %eax
f011e9c5:	01 d0                	add    %edx,%eax
f011e9c7:	bf 10 00 00 00       	mov    $0x10,%edi
f011e9cc:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9d1:	f7 f7                	div    %edi
f011e9d3:	6b c0 10             	imul   $0x10,%eax,%eax
f011e9d6:	29 c4                	sub    %eax,%esp
f011e9d8:	89 e0                	mov    %esp,%eax
f011e9da:	83 c0 03             	add    $0x3,%eax
f011e9dd:	c1 e8 02             	shr    $0x2,%eax
f011e9e0:	c1 e0 02             	shl    $0x2,%eax
f011e9e3:	89 45 a0             	mov    %eax,-0x60(%ebp)
	int numOfFrames = allocatedSpace/PAGE_SIZE ;
f011e9e6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011e9e9:	c1 e8 0c             	shr    $0xc,%eax
f011e9ec:	89 45 9c             	mov    %eax,-0x64(%ebp)

	//test kheap_virtual_address after kmalloc only [20%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
f011e9ef:	c7 45 98 00 70 d0 f8 	movl   $0xf8d07000,-0x68(%ebp)
		uint32 startVA = da_limit + PAGE_SIZE;
f011e9f6:	a1 d8 dd 17 f0       	mov    0xf017ddd8,%eax
f011e9fb:	05 00 10 00 00       	add    $0x1000,%eax
f011ea00:	89 45 94             	mov    %eax,-0x6c(%ebp)
		int i = 0;
f011ea03:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		for (va = startVA; va < endVA; )
f011ea0a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ea0d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011ea10:	e9 2d 01 00 00       	jmp    f011eb42 <test_kheap_virt_addr+0x783>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011ea15:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f011ea1a:	83 ec 04             	sub    $0x4,%esp
f011ea1d:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011ea23:	52                   	push   %edx
f011ea24:	ff 75 dc             	pushl  -0x24(%ebp)
f011ea27:	50                   	push   %eax
f011ea28:	e8 e0 99 fe ff       	call   f010840d <get_page_table>
f011ea2d:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011ea30:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011ea36:	85 c0                	test   %eax,%eax
f011ea38:	75 1e                	jne    f011ea58 <test_kheap_virt_addr+0x699>
			{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011ea3a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ea41:	83 ec 04             	sub    $0x4,%esp
f011ea44:	68 98 e5 12 f0       	push   $0xf012e598
f011ea49:	68 5e 06 00 00       	push   $0x65e
f011ea4e:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011ea53:	e8 c2 18 fe ff       	call   f010031a <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024 && va < endVA; ++j, ++i)
f011ea58:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011ea5b:	c1 e8 0c             	shr    $0xc,%eax
f011ea5e:	25 ff 03 00 00       	and    $0x3ff,%eax
f011ea63:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f011ea66:	e9 ba 00 00 00       	jmp    f011eb25 <test_kheap_virt_addr+0x766>
			{
				uint32 offset = j;
f011ea6b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011ea6e:	89 45 90             	mov    %eax,-0x70(%ebp)
				allPAs[i] = (ptr_table[j] & 0xFFFFF000) + offset;
f011ea71:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011ea77:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011ea7a:	c1 e2 02             	shl    $0x2,%edx
f011ea7d:	01 d0                	add    %edx,%eax
f011ea7f:	8b 00                	mov    (%eax),%eax
f011ea81:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011ea86:	89 c2                	mov    %eax,%edx
f011ea88:	8b 45 90             	mov    -0x70(%ebp),%eax
f011ea8b:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
f011ea8e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ea91:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011ea94:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011ea97:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ea9a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011ea9d:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011eaa0:	83 ec 0c             	sub    $0xc,%esp
f011eaa3:	50                   	push   %eax
f011eaa4:	e8 41 a0 fe ff       	call   f0108aea <kheap_virtual_address>
f011eaa9:	83 c4 10             	add    $0x10,%esp
f011eaac:	89 45 8c             	mov    %eax,-0x74(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va+offset))
f011eaaf:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011eab2:	8b 45 90             	mov    -0x70(%ebp),%eax
f011eab5:	01 d0                	add    %edx,%eax
f011eab7:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f011eaba:	74 5c                	je     f011eb18 <test_kheap_virt_addr+0x759>
				{
					if (correct)
f011eabc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011eac0:	74 56                	je     f011eb18 <test_kheap_virt_addr+0x759>
					{
						cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + offset /*+ j*PAGE_SIZE*/, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f011eac2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011eac5:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011eac8:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011eacb:	8b 95 68 fe ff ff    	mov    -0x198(%ebp),%edx
f011ead1:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
f011ead4:	c1 e1 02             	shl    $0x2,%ecx
f011ead7:	01 ca                	add    %ecx,%edx
f011ead9:	8b 12                	mov    (%edx),%edx
f011eadb:	89 d1                	mov    %edx,%ecx
f011eadd:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f011eae3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011eae6:	8b 55 90             	mov    -0x70(%ebp),%edx
f011eae9:	01 da                	add    %ebx,%edx
f011eaeb:	83 ec 0c             	sub    $0xc,%esp
f011eaee:	50                   	push   %eax
f011eaef:	51                   	push   %ecx
f011eaf0:	52                   	push   %edx
f011eaf1:	ff 75 8c             	pushl  -0x74(%ebp)
f011eaf4:	68 5c e6 12 f0       	push   $0xf012e65c
f011eaf9:	e8 6e 24 fe ff       	call   f0100f6c <cprintf>
f011eafe:	83 c4 20             	add    $0x20,%esp
						correct = 0; cprintf("Wrong kheap_virtual_address\n");
f011eb01:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011eb08:	83 ec 0c             	sub    $0xc,%esp
f011eb0b:	68 9f e6 12 f0       	push   $0xf012e69f
f011eb10:	e8 57 24 fe ff       	call   f0100f6c <cprintf>
f011eb15:	83 c4 10             	add    $0x10,%esp
					}
				}
				va+=PAGE_SIZE;
f011eb18:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
			{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }

			for (j = PTX(va); i < numOfFrames && j < 1024 && va < endVA; ++j, ++i)
f011eb1f:	ff 45 d4             	incl   -0x2c(%ebp)
f011eb22:	ff 45 d8             	incl   -0x28(%ebp)
f011eb25:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011eb28:	3b 45 9c             	cmp    -0x64(%ebp),%eax
f011eb2b:	7d 15                	jge    f011eb42 <test_kheap_virt_addr+0x783>
f011eb2d:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f011eb34:	7f 0c                	jg     f011eb42 <test_kheap_virt_addr+0x783>
f011eb36:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011eb39:	3b 45 98             	cmp    -0x68(%ebp),%eax
f011eb3c:	0f 82 29 ff ff ff    	jb     f011ea6b <test_kheap_virt_addr+0x6ac>
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
		uint32 startVA = da_limit + PAGE_SIZE;
		int i = 0;
		int j;
		for (va = startVA; va < endVA; )
f011eb42:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011eb45:	3b 45 98             	cmp    -0x68(%ebp),%eax
f011eb48:	0f 82 c7 fe ff ff    	jb     f011ea15 <test_kheap_virt_addr+0x656>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	if (correct)	eval+=20 ;
f011eb4e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011eb52:	74 04                	je     f011eb58 <test_kheap_virt_addr+0x799>
f011eb54:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)

	correct = 1 ;
f011eb58:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011eb5f:	e8 a5 ee fe ff       	call   f010da09 <sys_calculate_free_frames>
f011eb64:	89 45 88             	mov    %eax,-0x78(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011eb67:	e8 d4 5c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011eb6c:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[0]);
f011eb6f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011eb75:	83 ec 0c             	sub    $0xc,%esp
f011eb78:	50                   	push   %eax
f011eb79:	e8 52 9f fe ff       	call   f0108ad0 <kfree>
f011eb7e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011eb81:	e8 ba 5c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011eb86:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011eb89:	74 17                	je     f011eba2 <test_kheap_virt_addr+0x7e3>
f011eb8b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011eb92:	83 ec 0c             	sub    $0xc,%esp
f011eb95:	68 40 df 12 f0       	push   $0xf012df40
f011eb9a:	e8 cd 23 fe ff       	call   f0100f6c <cprintf>
f011eb9f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512 ) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011eba2:	e8 62 ee fe ff       	call   f010da09 <sys_calculate_free_frames>
f011eba7:	89 c2                	mov    %eax,%edx
f011eba9:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ebac:	29 c2                	sub    %eax,%edx
f011ebae:	89 d0                	mov    %edx,%eax
f011ebb0:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011ebb5:	77 17                	ja     f011ebce <test_kheap_virt_addr+0x80f>
f011ebb7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ebbe:	83 ec 0c             	sub    $0xc,%esp
f011ebc1:	68 44 e3 12 f0       	push   $0xf012e344
f011ebc6:	e8 a1 23 fe ff       	call   f0100f6c <cprintf>
f011ebcb:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ebce:	e8 36 ee fe ff       	call   f010da09 <sys_calculate_free_frames>
f011ebd3:	89 45 88             	mov    %eax,-0x78(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ebd6:	e8 65 5c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ebdb:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[1]);
f011ebde:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011ebe4:	83 ec 0c             	sub    $0xc,%esp
f011ebe7:	50                   	push   %eax
f011ebe8:	e8 e3 9e fe ff       	call   f0108ad0 <kfree>
f011ebed:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ebf0:	e8 4b 5c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ebf5:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011ebf8:	74 17                	je     f011ec11 <test_kheap_virt_addr+0x852>
f011ebfa:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ec01:	83 ec 0c             	sub    $0xc,%esp
f011ec04:	68 40 df 12 f0       	push   $0xf012df40
f011ec09:	e8 5e 23 fe ff       	call   f0100f6c <cprintf>
f011ec0e:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011ec11:	e8 f3 ed fe ff       	call   f010da09 <sys_calculate_free_frames>
f011ec16:	89 c2                	mov    %eax,%edx
f011ec18:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ec1b:	29 c2                	sub    %eax,%edx
f011ec1d:	89 d0                	mov    %edx,%eax
f011ec1f:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011ec24:	77 17                	ja     f011ec3d <test_kheap_virt_addr+0x87e>
f011ec26:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ec2d:	83 ec 0c             	sub    $0xc,%esp
f011ec30:	68 44 e3 12 f0       	push   $0xf012e344
f011ec35:	e8 32 23 fe ff       	call   f0100f6c <cprintf>
f011ec3a:	83 c4 10             	add    $0x10,%esp

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011ec3d:	e8 c7 ed fe ff       	call   f010da09 <sys_calculate_free_frames>
f011ec42:	89 45 88             	mov    %eax,-0x78(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ec45:	e8 f6 5b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ec4a:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[7]);
f011ec4d:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011ec53:	83 ec 0c             	sub    $0xc,%esp
f011ec56:	50                   	push   %eax
f011ec57:	e8 74 9e fe ff       	call   f0108ad0 <kfree>
f011ec5c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ec5f:	e8 dc 5b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ec64:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011ec67:	74 17                	je     f011ec80 <test_kheap_virt_addr+0x8c1>
f011ec69:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ec70:	83 ec 0c             	sub    $0xc,%esp
f011ec73:	68 40 df 12 f0       	push   $0xf012df40
f011ec78:	e8 ef 22 fe ff       	call   f0100f6c <cprintf>
f011ec7d:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 6*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011ec80:	e8 84 ed fe ff       	call   f010da09 <sys_calculate_free_frames>
f011ec85:	89 c2                	mov    %eax,%edx
f011ec87:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ec8a:	29 c2                	sub    %eax,%edx
f011ec8c:	89 d0                	mov    %edx,%eax
f011ec8e:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011ec93:	77 17                	ja     f011ecac <test_kheap_virt_addr+0x8ed>
f011ec95:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ec9c:	83 ec 0c             	sub    $0xc,%esp
f011ec9f:	68 44 e3 12 f0       	push   $0xf012e344
f011eca4:	e8 c3 22 fe ff       	call   f0100f6c <cprintf>
f011eca9:	83 c4 10             	add    $0x10,%esp


	//test kheap_virtual_address after kmalloc and kfree [20%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
f011ecac:	c7 45 80 00 70 d0 f8 	movl   $0xf8d07000,-0x80(%ebp)
		uint32 startVA = da_limit + PAGE_SIZE;
f011ecb3:	a1 d8 dd 17 f0       	mov    0xf017ddd8,%eax
f011ecb8:	05 00 10 00 00       	add    $0x1000,%eax
f011ecbd:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		int i = 0;
f011ecc3:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS) / PAGE_SIZE;
f011ecca:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%ebp)
f011ecd1:	00 00 00 
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f011ecd4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ecda:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011ecdd:	eb 44                	jmp    f011ed23 <test_kheap_virt_addr+0x964>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011ecdf:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ece2:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011ece5:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011ece8:	83 ec 0c             	sub    $0xc,%esp
f011eceb:	50                   	push   %eax
f011ecec:	e8 f9 9d fe ff       	call   f0108aea <kheap_virtual_address>
f011ecf1:	83 c4 10             	add    $0x10,%esp
f011ecf4:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
			if (retrievedVA != 0)
f011ecfa:	83 bd 74 ff ff ff 00 	cmpl   $0x0,-0x8c(%ebp)
f011ed01:	74 1d                	je     f011ed20 <test_kheap_virt_addr+0x961>
			{
				if (correct)
f011ed03:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011ed07:	74 17                	je     f011ed20 <test_kheap_virt_addr+0x961>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
f011ed09:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ed10:	83 ec 0c             	sub    $0xc,%esp
f011ed13:	68 9f e6 12 f0       	push   $0xf012e69f
f011ed18:	e8 4f 22 fe ff       	call   f0100f6c <cprintf>
f011ed1d:	83 c4 10             	add    $0x10,%esp
		uint32 startVA = da_limit + PAGE_SIZE;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f011ed20:	ff 45 d0             	incl   -0x30(%ebp)
f011ed23:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ed29:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f011ed2f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ed32:	39 c2                	cmp    %eax,%edx
f011ed34:	77 a9                	ja     f011ecdf <test_kheap_virt_addr+0x920>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 8*kilo)/PAGE_SIZE; ++i)
f011ed36:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ed3c:	05 00 04 00 00       	add    $0x400,%eax
f011ed41:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011ed44:	eb 64                	jmp    f011edaa <test_kheap_virt_addr+0x9eb>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011ed46:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ed49:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011ed4c:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011ed4f:	83 ec 0c             	sub    $0xc,%esp
f011ed52:	50                   	push   %eax
f011ed53:	e8 92 9d fe ff       	call   f0108aea <kheap_virtual_address>
f011ed58:	83 c4 10             	add    $0x10,%esp
f011ed5b:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
			if (retrievedVA != ((startVA + i*PAGE_SIZE) + (allPAs[i] & 0xFFF)))
f011ed61:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ed64:	c1 e0 0c             	shl    $0xc,%eax
f011ed67:	89 c2                	mov    %eax,%edx
f011ed69:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ed6f:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
f011ed72:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ed75:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011ed78:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011ed7b:	25 ff 0f 00 00       	and    $0xfff,%eax
f011ed80:	01 c8                	add    %ecx,%eax
f011ed82:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f011ed88:	74 1d                	je     f011eda7 <test_kheap_virt_addr+0x9e8>
			{
				if (correct)
f011ed8a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011ed8e:	74 17                	je     f011eda7 <test_kheap_virt_addr+0x9e8>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
f011ed90:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ed97:	83 ec 0c             	sub    $0xc,%esp
f011ed9a:	68 9f e6 12 f0       	push   $0xf012e69f
f011ed9f:	e8 c8 21 fe ff       	call   f0100f6c <cprintf>
f011eda4:	83 c4 10             	add    $0x10,%esp
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 8*kilo)/PAGE_SIZE; ++i)
f011eda7:	ff 45 d0             	incl   -0x30(%ebp)
f011edaa:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011edb0:	8d 90 02 07 00 00    	lea    0x702(%eax),%edx
f011edb6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011edb9:	39 c2                	cmp    %eax,%edx
f011edbb:	77 89                	ja     f011ed46 <test_kheap_virt_addr+0x987>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 8*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 8*kilo)/PAGE_SIZE; ++i)
f011edbd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011edc3:	05 02 07 00 00       	add    $0x702,%eax
f011edc8:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011edcb:	eb 44                	jmp    f011ee11 <test_kheap_virt_addr+0xa52>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011edcd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011edd0:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011edd3:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011edd6:	83 ec 0c             	sub    $0xc,%esp
f011edd9:	50                   	push   %eax
f011edda:	e8 0b 9d fe ff       	call   f0108aea <kheap_virtual_address>
f011eddf:	83 c4 10             	add    $0x10,%esp
f011ede2:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
			if (retrievedVA != 0)
f011ede8:	83 bd 6c ff ff ff 00 	cmpl   $0x0,-0x94(%ebp)
f011edef:	74 1d                	je     f011ee0e <test_kheap_virt_addr+0xa4f>
			{
				if (correct)
f011edf1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011edf5:	74 17                	je     f011ee0e <test_kheap_virt_addr+0xa4f>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
f011edf7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011edfe:	83 ec 0c             	sub    $0xc,%esp
f011ee01:	68 9f e6 12 f0       	push   $0xf012e69f
f011ee06:	e8 61 21 fe ff       	call   f0100f6c <cprintf>
f011ee0b:	83 c4 10             	add    $0x10,%esp
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 8*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 8*kilo)/PAGE_SIZE; ++i)
f011ee0e:	ff 45 d0             	incl   -0x30(%ebp)
f011ee11:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ee17:	8d 90 02 0d 00 00    	lea    0xd02(%eax),%edx
f011ee1d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ee20:	39 c2                	cmp    %eax,%edx
f011ee22:	77 a9                	ja     f011edcd <test_kheap_virt_addr+0xa0e>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 8*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 24*kilo)/PAGE_SIZE; ++i)
f011ee24:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ee2a:	05 02 0d 00 00       	add    $0xd02,%eax
f011ee2f:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011ee32:	eb 64                	jmp    f011ee98 <test_kheap_virt_addr+0xad9>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011ee34:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ee37:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011ee3a:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011ee3d:	83 ec 0c             	sub    $0xc,%esp
f011ee40:	50                   	push   %eax
f011ee41:	e8 a4 9c fe ff       	call   f0108aea <kheap_virtual_address>
f011ee46:	83 c4 10             	add    $0x10,%esp
f011ee49:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
			if (retrievedVA != ((startVA + i*PAGE_SIZE) + (allPAs[i] & 0xFFF)))
f011ee4f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ee52:	c1 e0 0c             	shl    $0xc,%eax
f011ee55:	89 c2                	mov    %eax,%edx
f011ee57:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011ee5d:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
f011ee60:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011ee63:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011ee66:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011ee69:	25 ff 0f 00 00       	and    $0xfff,%eax
f011ee6e:	01 c8                	add    %ecx,%eax
f011ee70:	3b 85 68 ff ff ff    	cmp    -0x98(%ebp),%eax
f011ee76:	74 1d                	je     f011ee95 <test_kheap_virt_addr+0xad6>
			{
				if (correct)
f011ee78:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011ee7c:	74 17                	je     f011ee95 <test_kheap_virt_addr+0xad6>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
f011ee7e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ee85:	83 ec 0c             	sub    $0xc,%esp
f011ee88:	68 9f e6 12 f0       	push   $0xf012e69f
f011ee8d:	e8 da 20 fe ff       	call   f0100f6c <cprintf>
f011ee92:	83 c4 10             	add    $0x10,%esp
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 8*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 24*kilo)/PAGE_SIZE; ++i)
f011ee95:	ff 45 d0             	incl   -0x30(%ebp)
f011ee98:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011ee9e:	8d 90 06 0d 00 00    	lea    0xd06(%eax),%edx
f011eea4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011eea7:	39 c2                	cmp    %eax,%edx
f011eea9:	77 89                	ja     f011ee34 <test_kheap_virt_addr+0xa75>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
	}
	if (correct)	eval+=20 ;
f011eeab:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011eeaf:	74 04                	je     f011eeb5 <test_kheap_virt_addr+0xaf6>
f011eeb1:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)

	correct = 1 ;
f011eeb5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	//[DYNAMIC ALLOCATOR] test kheap_virtual_address each address [40%]
	{
		uint32 va, pa;
		for (va = KERNEL_HEAP_START; va < (uint32)sbrk(0); va++)
f011eebc:	c7 45 cc 00 00 00 f6 	movl   $0xf6000000,-0x34(%ebp)
f011eec3:	e9 d1 00 00 00       	jmp    f011ef99 <test_kheap_virt_addr+0xbda>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011eec8:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f011eecd:	83 ec 04             	sub    $0x4,%esp
f011eed0:	8d 95 64 fe ff ff    	lea    -0x19c(%ebp),%edx
f011eed6:	52                   	push   %edx
f011eed7:	ff 75 cc             	pushl  -0x34(%ebp)
f011eeda:	50                   	push   %eax
f011eedb:	e8 2d 95 fe ff       	call   f010840d <get_page_table>
f011eee0:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011eee3:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011eee9:	85 c0                	test   %eax,%eax
f011eeeb:	75 1e                	jne    f011ef0b <test_kheap_virt_addr+0xb4c>
			{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011eeed:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011eef4:	83 ec 04             	sub    $0x4,%esp
f011eef7:	68 98 e5 12 f0       	push   $0xf012e598
f011eefc:	68 cb 06 00 00       	push   $0x6cb
f011ef01:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011ef06:	e8 0f 14 fe ff       	call   f010031a <_panic>
			pa = (ptr_table[PTX(va)] & 0xFFFFF000) + (va & 0xFFF);
f011ef0b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011ef11:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011ef14:	c1 ea 0c             	shr    $0xc,%edx
f011ef17:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011ef1d:	c1 e2 02             	shl    $0x2,%edx
f011ef20:	01 d0                	add    %edx,%eax
f011ef22:	8b 00                	mov    (%eax),%eax
f011ef24:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011ef29:	89 c2                	mov    %eax,%edx
f011ef2b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011ef2e:	25 ff 0f 00 00       	and    $0xfff,%eax
f011ef33:	01 d0                	add    %edx,%eax
f011ef35:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
			uint32 retrievedVA = kheap_virtual_address(pa);
f011ef3b:	83 ec 0c             	sub    $0xc,%esp
f011ef3e:	ff b5 64 ff ff ff    	pushl  -0x9c(%ebp)
f011ef44:	e8 a1 9b fe ff       	call   f0108aea <kheap_virtual_address>
f011ef49:	83 c4 10             	add    $0x10,%esp
f011ef4c:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
			if (retrievedVA != va)
f011ef52:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ef58:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011ef5b:	74 39                	je     f011ef96 <test_kheap_virt_addr+0xbd7>
			{
				if (correct)
f011ef5d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011ef61:	74 33                	je     f011ef96 <test_kheap_virt_addr+0xbd7>
				{
					cprintf("\nPA = %x, retrievedVA = %x expectedVA = %x\n", pa, retrievedVA, va);
f011ef63:	ff 75 cc             	pushl  -0x34(%ebp)
f011ef66:	ff b5 60 ff ff ff    	pushl  -0xa0(%ebp)
f011ef6c:	ff b5 64 ff ff ff    	pushl  -0x9c(%ebp)
f011ef72:	68 bc e6 12 f0       	push   $0xf012e6bc
f011ef77:	e8 f0 1f fe ff       	call   f0100f6c <cprintf>
f011ef7c:	83 c4 10             	add    $0x10,%esp
					correct = 0; cprintf("Wrong kheap_virtual_address\n");
f011ef7f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ef86:	83 ec 0c             	sub    $0xc,%esp
f011ef89:	68 9f e6 12 f0       	push   $0xf012e69f
f011ef8e:	e8 d9 1f fe ff       	call   f0100f6c <cprintf>
f011ef93:	83 c4 10             	add    $0x10,%esp

	correct = 1 ;
	//[DYNAMIC ALLOCATOR] test kheap_virtual_address each address [40%]
	{
		uint32 va, pa;
		for (va = KERNEL_HEAP_START; va < (uint32)sbrk(0); va++)
f011ef96:	ff 45 cc             	incl   -0x34(%ebp)
f011ef99:	83 ec 0c             	sub    $0xc,%esp
f011ef9c:	6a 00                	push   $0x0
f011ef9e:	e8 09 9b fe ff       	call   f0108aac <sbrk>
f011efa3:	83 c4 10             	add    $0x10,%esp
f011efa6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011efa9:	0f 87 19 ff ff ff    	ja     f011eec8 <test_kheap_virt_addr+0xb09>
					correct = 0; cprintf("Wrong kheap_virtual_address\n");
				}
			}
		}
	}
	if (correct)	eval+=40 ;
f011efaf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011efb3:	74 04                	je     f011efb9 <test_kheap_virt_addr+0xbfa>
f011efb5:	83 45 e4 28          	addl   $0x28,-0x1c(%ebp)

	correct = 1 ;
f011efb9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f011efc0:	c7 45 c8 00 00 10 00 	movl   $0x100000,-0x38(%ebp)
f011efc7:	eb 5a                	jmp    f011f023 <test_kheap_virt_addr+0xc64>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f011efc9:	83 ec 0c             	sub    $0xc,%esp
f011efcc:	ff 75 c8             	pushl  -0x38(%ebp)
f011efcf:	e8 16 9b fe ff       	call   f0108aea <kheap_virtual_address>
f011efd4:	83 c4 10             	add    $0x10,%esp
f011efd7:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
			if (retrievedVA != 0)
f011efdd:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%ebp)
f011efe4:	74 36                	je     f011f01c <test_kheap_virt_addr+0xc5d>
			{
				if (correct)
f011efe6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011efea:	74 30                	je     f011f01c <test_kheap_virt_addr+0xc5d>
				{
					cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f011efec:	83 ec 04             	sub    $0x4,%esp
f011efef:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
f011eff5:	ff 75 c8             	pushl  -0x38(%ebp)
f011eff8:	68 e8 e6 12 f0       	push   $0xf012e6e8
f011effd:	e8 6a 1f fe ff       	call   f0100f6c <cprintf>
f011f002:	83 c4 10             	add    $0x10,%esp
					correct = 0; cprintf("Wrong kheap_virtual_address\n");
f011f005:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011f00c:	83 ec 0c             	sub    $0xc,%esp
f011f00f:	68 9f e6 12 f0       	push   $0xf012e69f
f011f014:	e8 53 1f fe ff       	call   f0100f6c <cprintf>
f011f019:	83 c4 10             	add    $0x10,%esp

	correct = 1 ;
	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f011f01c:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f011f023:	b8 30 44 5c 00       	mov    $0x5c4430,%eax
f011f028:	39 45 c8             	cmp    %eax,-0x38(%ebp)
f011f02b:	72 9c                	jb     f011efc9 <test_kheap_virt_addr+0xc0a>
					correct = 0; cprintf("Wrong kheap_virtual_address\n");
				}
			}
		}
	}
	if (correct)	eval+=20 ;
f011f02d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f031:	74 04                	je     f011f037 <test_kheap_virt_addr+0xc78>
f011f033:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)

	cprintf("\ntest kheap_virtual_address completed. Eval = %d%\n", eval);
f011f037:	83 ec 08             	sub    $0x8,%esp
f011f03a:	ff 75 e4             	pushl  -0x1c(%ebp)
f011f03d:	68 04 e7 12 f0       	push   $0xf012e704
f011f042:	e8 25 1f fe ff       	call   f0100f6c <cprintf>
f011f047:	83 c4 10             	add    $0x10,%esp

	return 1;
f011f04a:	b8 01 00 00 00       	mov    $0x1,%eax
f011f04f:	89 f4                	mov    %esi,%esp

}
f011f051:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011f054:	5b                   	pop    %ebx
f011f055:	5e                   	pop    %esi
f011f056:	5f                   	pop    %edi
f011f057:	5d                   	pop    %ebp
f011f058:	c3                   	ret    

f011f059 <test_ksbrk>:


// 2023
int test_ksbrk()
{
f011f059:	55                   	push   %ebp
f011f05a:	89 e5                	mov    %esp,%ebp
f011f05c:	57                   	push   %edi
f011f05d:	56                   	push   %esi
f011f05e:	53                   	push   %ebx
f011f05f:	81 ec 1c 01 00 00    	sub    $0x11c,%esp

	// malloc some spaces
	int i, freeFrames, freeDiskFrames;
	char *ptr;
	// int lastIndices[20] = {0};
	int sums[20] = {0};
f011f065:	8d 95 7c ff ff ff    	lea    -0x84(%ebp),%edx
f011f06b:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f070:	b8 00 00 00 00       	mov    $0x0,%eax
f011f075:	89 d7                	mov    %edx,%edi
f011f077:	f3 ab                	rep stos %eax,%es:(%edi)
	void *ptr_allocations[20] = {0};
f011f079:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f011f07f:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f084:	b8 00 00 00 00       	mov    $0x0,%eax
f011f089:	89 d7                	mov    %edx,%edi
f011f08b:	f3 ab                	rep stos %eax,%es:(%edi)

	// uint32 inputIncrementValues[] = {0, kilo, 2*kilo, -512, -2 * kilo, -2* kilo, 128, kilo};
	uint32 expectedVAs[] = {
f011f08d:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011f093:	bb a0 ec 12 f0       	mov    $0xf012eca0,%ebx
f011f098:	ba 0a 00 00 00       	mov    $0xa,%edx
f011f09d:	89 c7                	mov    %eax,%edi
f011f09f:	89 de                	mov    %ebx,%esi
f011f0a1:	89 d1                	mov    %edx,%ecx
f011f0a3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
			KERNEL_HEAP_START + 0x1E00, // 128
			KERNEL_HEAP_START + 0x2000, // kilo
			KERNEL_HEAP_START + 0x0C00, // -9*kilo
			KERNEL_HEAP_START + 0x0C00, // +6*kilo
	};
	uint32 expectedSbrks[] = {
f011f0a5:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f011f0ab:	bb e0 ec 12 f0       	mov    $0xf012ece0,%ebx
f011f0b0:	ba 0a 00 00 00       	mov    $0xa,%edx
f011f0b5:	89 c7                	mov    %eax,%edi
f011f0b7:	89 de                	mov    %ebx,%esi
f011f0b9:	89 d1                	mov    %edx,%ecx
f011f0bb:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
			KERNEL_HEAP_START + 0x3000, // kilo
			KERNEL_HEAP_START + 0x0C00, // -9*kilo
			KERNEL_HEAP_START + 0x4000, // +10*kilo
	};
	uint32 oldBrk, newBrk;
	int eval = 0;
f011f0bd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool correct = 1;
f011f0c4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	cprintf("STEP A: checking increment with ZERO\n");
f011f0cb:	83 ec 0c             	sub    $0xc,%esp
f011f0ce:	68 38 e7 12 f0       	push   $0xf012e738
f011f0d3:	e8 94 1e fe ff       	call   f0100f6c <cprintf>
f011f0d8:	83 c4 10             	add    $0x10,%esp
	{
		freeFrames = (int)sys_calculate_free_frames();
f011f0db:	e8 29 e9 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f0e0:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f0e3:	e8 58 57 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f0e8:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = sbrk(0);
f011f0eb:	83 ec 0c             	sub    $0xc,%esp
f011f0ee:	6a 00                	push   $0x0
f011f0f0:	e8 b7 99 fe ff       	call   f0108aac <sbrk>
f011f0f5:	83 c4 10             	add    $0x10,%esp
f011f0f8:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f0fe:	e8 3d 57 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f103:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f106:	74 17                	je     f011f11f <test_ksbrk+0xc6>
		{
			correct = 0;
f011f108:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f10f:	83 ec 0c             	sub    $0xc,%esp
f011f112:	68 60 e7 12 f0       	push   $0xf012e760
f011f117:	e8 50 1e fe ff       	call   f0100f6c <cprintf>
f011f11c:	83 c4 10             	add    $0x10,%esp
		}
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0)
f011f11f:	e8 e5 e8 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f124:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011f127:	74 17                	je     f011f140 <test_ksbrk+0xe7>
		{
			correct = 0;
f011f129:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011f130:	83 ec 0c             	sub    $0xc,%esp
f011f133:	68 c8 e7 12 f0       	push   $0xf012e7c8
f011f138:	e8 2f 1e fe ff       	call   f0100f6c <cprintf>
f011f13d:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[0] != expectedVAs[0])
f011f140:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011f146:	89 c2                	mov    %eax,%edx
f011f148:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f14e:	39 c2                	cmp    %eax,%edx
f011f150:	74 25                	je     f011f177 <test_ksbrk+0x11e>
		{
			correct = 0;
f011f152:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[0], ptr_allocations[0]);
f011f159:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f011f15f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011f165:	83 ec 04             	sub    $0x4,%esp
f011f168:	52                   	push   %edx
f011f169:	50                   	push   %eax
f011f16a:	68 08 e8 12 f0       	push   $0xf012e808
f011f16f:	e8 f8 1d fe ff       	call   f0100f6c <cprintf>
f011f174:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f177:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f17b:	74 04                	je     f011f181 <test_ksbrk+0x128>
			eval += 5;
f011f17d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	}
	cprintf("STEP B: checking increment with +ve value\n");
f011f181:	83 ec 0c             	sub    $0xc,%esp
f011f184:	68 38 e8 12 f0       	push   $0xf012e838
f011f189:	e8 de 1d fe ff       	call   f0100f6c <cprintf>
f011f18e:	83 c4 10             	add    $0x10,%esp
	{ // +1 KB
		freeFrames = (int)sys_calculate_free_frames();
f011f191:	e8 73 e8 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f196:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f199:	e8 a2 56 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f19e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011f1a1:	83 ec 0c             	sub    $0xc,%esp
f011f1a4:	6a 00                	push   $0x0
f011f1a6:	e8 01 99 fe ff       	call   f0108aac <sbrk>
f011f1ab:	83 c4 10             	add    $0x10,%esp
f011f1ae:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[1] = sbrk(kilo);
f011f1b1:	83 ec 0c             	sub    $0xc,%esp
f011f1b4:	68 00 04 00 00       	push   $0x400
f011f1b9:	e8 ee 98 fe ff       	call   f0108aac <sbrk>
f011f1be:	83 c4 10             	add    $0x10,%esp
f011f1c1:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		newBrk = (uint32)sbrk(0);
f011f1c7:	83 ec 0c             	sub    $0xc,%esp
f011f1ca:	6a 00                	push   $0x0
f011f1cc:	e8 db 98 fe ff       	call   f0108aac <sbrk>
f011f1d1:	83 c4 10             	add    $0x10,%esp
f011f1d4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011f1d7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f1de:	e8 5d 56 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f1e3:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f1e6:	74 17                	je     f011f1ff <test_ksbrk+0x1a6>
		{
			correct = 0;
f011f1e8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f1ef:	83 ec 0c             	sub    $0xc,%esp
f011f1f2:	68 60 e7 12 f0       	push   $0xf012e760
f011f1f7:	e8 70 1d fe ff       	call   f0100f6c <cprintf>
f011f1fc:	83 c4 10             	add    $0x10,%esp
		}
		// cprintf("####### %x - %x\n", freeFrames - (int)sys_calculate_free_frames(), -1 * ((ROUNDUP(oldBrk, PAGE_SIZE) - newBrk) / PAGE_SIZE));
		if ((freeFrames - (int)sys_calculate_free_frames()) != 1)
f011f1ff:	e8 05 e8 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f204:	89 c2                	mov    %eax,%edx
f011f206:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f209:	29 d0                	sub    %edx,%eax
f011f20b:	83 f8 01             	cmp    $0x1,%eax
f011f20e:	74 17                	je     f011f227 <test_ksbrk+0x1ce>
		{
			correct = 0;
f011f210:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011f217:	83 ec 0c             	sub    $0xc,%esp
f011f21a:	68 c8 e7 12 f0       	push   $0xf012e7c8
f011f21f:	e8 48 1d fe ff       	call   f0100f6c <cprintf>
f011f224:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[1] != expectedVAs[1])
f011f227:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011f22d:	89 c2                	mov    %eax,%edx
f011f22f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f235:	39 c2                	cmp    %eax,%edx
f011f237:	74 25                	je     f011f25e <test_ksbrk+0x205>
		{
			correct = 0;
f011f239:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[1], ptr_allocations[1]);
f011f240:	8b 95 30 ff ff ff    	mov    -0xd0(%ebp),%edx
f011f246:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011f24c:	83 ec 04             	sub    $0x4,%esp
f011f24f:	52                   	push   %edx
f011f250:	50                   	push   %eax
f011f251:	68 08 e8 12 f0       	push   $0xf012e808
f011f256:	e8 11 1d fe ff       	call   f0100f6c <cprintf>
f011f25b:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[1])
f011f25e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011f264:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011f267:	74 21                	je     f011f28a <test_ksbrk+0x231>
		{
			correct = 0;
f011f269:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[1]);
f011f270:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011f276:	83 ec 04             	sub    $0x4,%esp
f011f279:	50                   	push   %eax
f011f27a:	ff 75 d0             	pushl  -0x30(%ebp)
f011f27d:	68 64 e8 12 f0       	push   $0xf012e864
f011f282:	e8 e5 1c fe ff       	call   f0100f6c <cprintf>
f011f287:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f28a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f28e:	74 04                	je     f011f294 <test_ksbrk+0x23b>
			eval += 5;
f011f290:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	}
	{ // +2 KB
		freeFrames = (int)sys_calculate_free_frames();
f011f294:	e8 70 e7 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f299:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f29c:	e8 9f 55 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f2a1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011f2a4:	83 ec 0c             	sub    $0xc,%esp
f011f2a7:	6a 00                	push   $0x0
f011f2a9:	e8 fe 97 fe ff       	call   f0108aac <sbrk>
f011f2ae:	83 c4 10             	add    $0x10,%esp
f011f2b1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[2] = sbrk(2 * kilo);
f011f2b4:	83 ec 0c             	sub    $0xc,%esp
f011f2b7:	68 00 08 00 00       	push   $0x800
f011f2bc:	e8 eb 97 fe ff       	call   f0108aac <sbrk>
f011f2c1:	83 c4 10             	add    $0x10,%esp
f011f2c4:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
		newBrk = (uint32)sbrk(0);
f011f2ca:	83 ec 0c             	sub    $0xc,%esp
f011f2cd:	6a 00                	push   $0x0
f011f2cf:	e8 d8 97 fe ff       	call   f0108aac <sbrk>
f011f2d4:	83 c4 10             	add    $0x10,%esp
f011f2d7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011f2da:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f2e1:	e8 5a 55 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f2e6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f2e9:	74 17                	je     f011f302 <test_ksbrk+0x2a9>
		{
			correct = 0;
f011f2eb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f2f2:	83 ec 0c             	sub    $0xc,%esp
f011f2f5:	68 60 e7 12 f0       	push   $0xf012e760
f011f2fa:	e8 6d 1c fe ff       	call   f0100f6c <cprintf>
f011f2ff:	83 c4 10             	add    $0x10,%esp
		}
		int x = (freeFrames - (int)sys_calculate_free_frames());
f011f302:	e8 02 e7 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f307:	89 c2                	mov    %eax,%edx
f011f309:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f30c:	29 d0                	sub    %edx,%eax
f011f30e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		if ((freeFrames - (int)sys_calculate_free_frames()) != 1)
f011f311:	e8 f3 e6 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f316:	89 c2                	mov    %eax,%edx
f011f318:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f31b:	29 d0                	sub    %edx,%eax
f011f31d:	83 f8 01             	cmp    $0x1,%eax
f011f320:	74 17                	je     f011f339 <test_ksbrk+0x2e0>
		{
			correct = 0;
f011f322:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011f329:	83 ec 0c             	sub    $0xc,%esp
f011f32c:	68 c8 e7 12 f0       	push   $0xf012e7c8
f011f331:	e8 36 1c fe ff       	call   f0100f6c <cprintf>
f011f336:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[2] != expectedVAs[2])
f011f339:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011f33f:	89 c2                	mov    %eax,%edx
f011f341:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f347:	39 c2                	cmp    %eax,%edx
f011f349:	74 25                	je     f011f370 <test_ksbrk+0x317>
		{
			correct = 0;
f011f34b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[2], ptr_allocations[2]);
f011f352:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f011f358:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011f35e:	83 ec 04             	sub    $0x4,%esp
f011f361:	52                   	push   %edx
f011f362:	50                   	push   %eax
f011f363:	68 08 e8 12 f0       	push   $0xf012e808
f011f368:	e8 ff 1b fe ff       	call   f0100f6c <cprintf>
f011f36d:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[2])
f011f370:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f376:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011f379:	74 21                	je     f011f39c <test_ksbrk+0x343>
		{
			correct = 0;
f011f37b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[2]);
f011f382:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011f388:	83 ec 04             	sub    $0x4,%esp
f011f38b:	50                   	push   %eax
f011f38c:	ff 75 d0             	pushl  -0x30(%ebp)
f011f38f:	68 64 e8 12 f0       	push   $0xf012e864
f011f394:	e8 d3 1b fe ff       	call   f0100f6c <cprintf>
f011f399:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f39c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f3a0:	74 04                	je     f011f3a6 <test_ksbrk+0x34d>
			eval += 5;
f011f3a2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	}
	cprintf("STEP C: checking increment with -ve value [No Frames to be Deallocated]\n");
f011f3a6:	83 ec 0c             	sub    $0xc,%esp
f011f3a9:	68 90 e8 12 f0       	push   $0xf012e890
f011f3ae:	e8 b9 1b fe ff       	call   f0100f6c <cprintf>
f011f3b3:	83 c4 10             	add    $0x10,%esp
	{ // -512 Bytes
		freeFrames = (int)sys_calculate_free_frames();
f011f3b6:	e8 4e e6 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f3bb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f3be:	e8 7d 54 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f3c3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011f3c6:	83 ec 0c             	sub    $0xc,%esp
f011f3c9:	6a 00                	push   $0x0
f011f3cb:	e8 dc 96 fe ff       	call   f0108aac <sbrk>
f011f3d0:	83 c4 10             	add    $0x10,%esp
f011f3d3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[3] = sbrk(-512);
f011f3d6:	83 ec 0c             	sub    $0xc,%esp
f011f3d9:	68 00 fe ff ff       	push   $0xfffffe00
f011f3de:	e8 c9 96 fe ff       	call   f0108aac <sbrk>
f011f3e3:	83 c4 10             	add    $0x10,%esp
f011f3e6:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
		newBrk = (uint32)sbrk(0);
f011f3ec:	83 ec 0c             	sub    $0xc,%esp
f011f3ef:	6a 00                	push   $0x0
f011f3f1:	e8 b6 96 fe ff       	call   f0108aac <sbrk>
f011f3f6:	83 c4 10             	add    $0x10,%esp
f011f3f9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011f3fc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f403:	e8 38 54 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f408:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f40b:	74 17                	je     f011f424 <test_ksbrk+0x3cb>
		{
			correct = 0;
f011f40d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f414:	83 ec 0c             	sub    $0xc,%esp
f011f417:	68 60 e7 12 f0       	push   $0xf012e760
f011f41c:	e8 4b 1b fe ff       	call   f0100f6c <cprintf>
f011f421:	83 c4 10             	add    $0x10,%esp
		}
		// cprintf("####### %x - %x\n", freeFrames - (int)sys_calculate_free_frames(), -1 * ((ROUNDUP(oldBrk, PAGE_SIZE) - newBrk) / PAGE_SIZE));
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0)
f011f424:	e8 e0 e5 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f429:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011f42c:	74 17                	je     f011f445 <test_ksbrk+0x3ec>
		{
			correct = 0;
f011f42e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011f435:	83 ec 0c             	sub    $0xc,%esp
f011f438:	68 c8 e7 12 f0       	push   $0xf012e7c8
f011f43d:	e8 2a 1b fe ff       	call   f0100f6c <cprintf>
f011f442:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[3] != expectedVAs[3])
f011f445:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011f44b:	89 c2                	mov    %eax,%edx
f011f44d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f453:	39 c2                	cmp    %eax,%edx
f011f455:	74 25                	je     f011f47c <test_ksbrk+0x423>
		{
			correct = 0;
f011f457:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[3], ptr_allocations[3]);
f011f45e:	8b 95 38 ff ff ff    	mov    -0xc8(%ebp),%edx
f011f464:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011f46a:	83 ec 04             	sub    $0x4,%esp
f011f46d:	52                   	push   %edx
f011f46e:	50                   	push   %eax
f011f46f:	68 08 e8 12 f0       	push   $0xf012e808
f011f474:	e8 f3 1a fe ff       	call   f0100f6c <cprintf>
f011f479:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[3])
f011f47c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011f482:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011f485:	74 21                	je     f011f4a8 <test_ksbrk+0x44f>
		{
			correct = 0;
f011f487:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[3]);
f011f48e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011f494:	83 ec 04             	sub    $0x4,%esp
f011f497:	50                   	push   %eax
f011f498:	ff 75 d0             	pushl  -0x30(%ebp)
f011f49b:	68 64 e8 12 f0       	push   $0xf012e864
f011f4a0:	e8 c7 1a fe ff       	call   f0100f6c <cprintf>
f011f4a5:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f4a8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f4ac:	74 04                	je     f011f4b2 <test_ksbrk+0x459>
			eval += 10;
f011f4ae:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	{ // -2 KB
		freeFrames = (int)sys_calculate_free_frames();
f011f4b2:	e8 52 e5 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f4b7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f4ba:	e8 81 53 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f4bf:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011f4c2:	83 ec 0c             	sub    $0xc,%esp
f011f4c5:	6a 00                	push   $0x0
f011f4c7:	e8 e0 95 fe ff       	call   f0108aac <sbrk>
f011f4cc:	83 c4 10             	add    $0x10,%esp
f011f4cf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[4] = sbrk(-2 * kilo);
f011f4d2:	83 ec 0c             	sub    $0xc,%esp
f011f4d5:	68 00 f8 ff ff       	push   $0xfffff800
f011f4da:	e8 cd 95 fe ff       	call   f0108aac <sbrk>
f011f4df:	83 c4 10             	add    $0x10,%esp
f011f4e2:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
		newBrk = (uint32)sbrk(0);
f011f4e8:	83 ec 0c             	sub    $0xc,%esp
f011f4eb:	6a 00                	push   $0x0
f011f4ed:	e8 ba 95 fe ff       	call   f0108aac <sbrk>
f011f4f2:	83 c4 10             	add    $0x10,%esp
f011f4f5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011f4f8:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f4ff:	e8 3c 53 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f504:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f507:	74 17                	je     f011f520 <test_ksbrk+0x4c7>
		{
			correct = 0;
f011f509:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f510:	83 ec 0c             	sub    $0xc,%esp
f011f513:	68 60 e7 12 f0       	push   $0xf012e760
f011f518:	e8 4f 1a fe ff       	call   f0100f6c <cprintf>
f011f51d:	83 c4 10             	add    $0x10,%esp
		}
		// cprintf("####### %x - %x\n", freeFrames - (int)sys_calculate_free_frames(), -1 * ((ROUNDUP(oldBrk, PAGE_SIZE) - newBrk) / PAGE_SIZE));
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0)
f011f520:	e8 e4 e4 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f525:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011f528:	74 17                	je     f011f541 <test_ksbrk+0x4e8>
		{
			correct = 0;
f011f52a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011f531:	83 ec 0c             	sub    $0xc,%esp
f011f534:	68 c8 e7 12 f0       	push   $0xf012e7c8
f011f539:	e8 2e 1a fe ff       	call   f0100f6c <cprintf>
f011f53e:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[4] != expectedVAs[4])
f011f541:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011f547:	89 c2                	mov    %eax,%edx
f011f549:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f54f:	39 c2                	cmp    %eax,%edx
f011f551:	74 25                	je     f011f578 <test_ksbrk+0x51f>
		{
			correct = 0;
f011f553:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[4], ptr_allocations[4]);
f011f55a:	8b 95 3c ff ff ff    	mov    -0xc4(%ebp),%edx
f011f560:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011f566:	83 ec 04             	sub    $0x4,%esp
f011f569:	52                   	push   %edx
f011f56a:	50                   	push   %eax
f011f56b:	68 08 e8 12 f0       	push   $0xf012e808
f011f570:	e8 f7 19 fe ff       	call   f0100f6c <cprintf>
f011f575:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[4])
f011f578:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f57e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011f581:	74 21                	je     f011f5a4 <test_ksbrk+0x54b>
		{
			correct = 0;
f011f583:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[4]);
f011f58a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011f590:	83 ec 04             	sub    $0x4,%esp
f011f593:	50                   	push   %eax
f011f594:	ff 75 d0             	pushl  -0x30(%ebp)
f011f597:	68 64 e8 12 f0       	push   $0xf012e864
f011f59c:	e8 cb 19 fe ff       	call   f0100f6c <cprintf>
f011f5a1:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f5a4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f5a8:	74 04                	je     f011f5ae <test_ksbrk+0x555>
			eval += 10;
f011f5aa:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	cprintf("STEP D: checking increment with -ve value [ONE Frame should be Deallocated]\n");
f011f5ae:	83 ec 0c             	sub    $0xc,%esp
f011f5b1:	68 dc e8 12 f0       	push   $0xf012e8dc
f011f5b6:	e8 b1 19 fe ff       	call   f0100f6c <cprintf>
f011f5bb:	83 c4 10             	add    $0x10,%esp
	{ // -2 KB
		freeFrames = (int)sys_calculate_free_frames();
f011f5be:	e8 46 e4 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f5c3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f5c6:	e8 75 52 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f5cb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011f5ce:	83 ec 0c             	sub    $0xc,%esp
f011f5d1:	6a 00                	push   $0x0
f011f5d3:	e8 d4 94 fe ff       	call   f0108aac <sbrk>
f011f5d8:	83 c4 10             	add    $0x10,%esp
f011f5db:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[5] = sbrk(-2 * kilo);
f011f5de:	83 ec 0c             	sub    $0xc,%esp
f011f5e1:	68 00 f8 ff ff       	push   $0xfffff800
f011f5e6:	e8 c1 94 fe ff       	call   f0108aac <sbrk>
f011f5eb:	83 c4 10             	add    $0x10,%esp
f011f5ee:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		newBrk = (uint32)sbrk(0);
f011f5f4:	83 ec 0c             	sub    $0xc,%esp
f011f5f7:	6a 00                	push   $0x0
f011f5f9:	e8 ae 94 fe ff       	call   f0108aac <sbrk>
f011f5fe:	83 c4 10             	add    $0x10,%esp
f011f601:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011f604:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)(int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f60b:	e8 30 52 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f610:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f613:	74 17                	je     f011f62c <test_ksbrk+0x5d3>
		{
			correct = 0;
f011f615:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f61c:	83 ec 0c             	sub    $0xc,%esp
f011f61f:	68 60 e7 12 f0       	push   $0xf012e760
f011f624:	e8 43 19 fe ff       	call   f0100f6c <cprintf>
f011f629:	83 c4 10             	add    $0x10,%esp
		}
		// cprintf("####### %x - %x\n", freeFrames - (int)sys_calculate_free_frames(), -1 * ((ROUNDUP(oldBrk, PAGE_SIZE) - newBrk) / PAGE_SIZE));
		if (((int)(int)sys_calculate_free_frames() - freeFrames) != 1)
f011f62c:	e8 d8 e3 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f631:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011f634:	83 f8 01             	cmp    $0x1,%eax
f011f637:	74 17                	je     f011f650 <test_ksbrk+0x5f7>
		{
			correct = 0;
f011f639:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011f640:	83 ec 0c             	sub    $0xc,%esp
f011f643:	68 c8 e7 12 f0       	push   $0xf012e7c8
f011f648:	e8 1f 19 fe ff       	call   f0100f6c <cprintf>
f011f64d:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[5] != expectedVAs[5])
f011f650:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011f656:	89 c2                	mov    %eax,%edx
f011f658:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f65e:	39 c2                	cmp    %eax,%edx
f011f660:	74 25                	je     f011f687 <test_ksbrk+0x62e>
		{
			correct = 0;
f011f662:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[5], ptr_allocations[5]);
f011f669:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f011f66f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f675:	83 ec 04             	sub    $0x4,%esp
f011f678:	52                   	push   %edx
f011f679:	50                   	push   %eax
f011f67a:	68 08 e8 12 f0       	push   $0xf012e808
f011f67f:	e8 e8 18 fe ff       	call   f0100f6c <cprintf>
f011f684:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[5])
f011f687:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011f68d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011f690:	74 21                	je     f011f6b3 <test_ksbrk+0x65a>
		{
			correct = 0;
f011f692:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[5]);
f011f699:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011f69f:	83 ec 04             	sub    $0x4,%esp
f011f6a2:	50                   	push   %eax
f011f6a3:	ff 75 d0             	pushl  -0x30(%ebp)
f011f6a6:	68 64 e8 12 f0       	push   $0xf012e864
f011f6ab:	e8 bc 18 fe ff       	call   f0100f6c <cprintf>
f011f6b0:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f6b3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f6b7:	74 04                	je     f011f6bd <test_ksbrk+0x664>
			eval += 15;
f011f6b9:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	cprintf("STEP E: checking increment with +ve value [No Frames to be Allocated]\n");
f011f6bd:	83 ec 0c             	sub    $0xc,%esp
f011f6c0:	68 2c e9 12 f0       	push   $0xf012e92c
f011f6c5:	e8 a2 18 fe ff       	call   f0100f6c <cprintf>
f011f6ca:	83 c4 10             	add    $0x10,%esp
	{ // 128 Bytes
		freeFrames = (int)(int)sys_calculate_free_frames();
f011f6cd:	e8 37 e3 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f6d2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)(int)pf_calculate_free_frames();
f011f6d5:	e8 66 51 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f6da:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011f6dd:	83 ec 0c             	sub    $0xc,%esp
f011f6e0:	6a 00                	push   $0x0
f011f6e2:	e8 c5 93 fe ff       	call   f0108aac <sbrk>
f011f6e7:	83 c4 10             	add    $0x10,%esp
f011f6ea:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[6] = sbrk(128);
f011f6ed:	83 ec 0c             	sub    $0xc,%esp
f011f6f0:	68 80 00 00 00       	push   $0x80
f011f6f5:	e8 b2 93 fe ff       	call   f0108aac <sbrk>
f011f6fa:	83 c4 10             	add    $0x10,%esp
f011f6fd:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		newBrk = (uint32)sbrk(0);
f011f703:	83 ec 0c             	sub    $0xc,%esp
f011f706:	6a 00                	push   $0x0
f011f708:	e8 9f 93 fe ff       	call   f0108aac <sbrk>
f011f70d:	83 c4 10             	add    $0x10,%esp
f011f710:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011f713:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f71a:	e8 21 51 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f71f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f722:	74 17                	je     f011f73b <test_ksbrk+0x6e2>
		{
			correct = 0;
f011f724:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f72b:	83 ec 0c             	sub    $0xc,%esp
f011f72e:	68 60 e7 12 f0       	push   $0xf012e760
f011f733:	e8 34 18 fe ff       	call   f0100f6c <cprintf>
f011f738:	83 c4 10             	add    $0x10,%esp
		}
		if (((int)(int)sys_calculate_free_frames() - freeFrames) != 0)
f011f73b:	e8 c9 e2 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f740:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011f743:	74 17                	je     f011f75c <test_ksbrk+0x703>
		{
			correct = 0;
f011f745:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011f74c:	83 ec 0c             	sub    $0xc,%esp
f011f74f:	68 c8 e7 12 f0       	push   $0xf012e7c8
f011f754:	e8 13 18 fe ff       	call   f0100f6c <cprintf>
f011f759:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[6] != expectedVAs[6])
f011f75c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011f762:	89 c2                	mov    %eax,%edx
f011f764:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f76a:	39 c2                	cmp    %eax,%edx
f011f76c:	74 25                	je     f011f793 <test_ksbrk+0x73a>
		{
			correct = 0;
f011f76e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[6], ptr_allocations[6]);
f011f775:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f011f77b:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011f781:	83 ec 04             	sub    $0x4,%esp
f011f784:	52                   	push   %edx
f011f785:	50                   	push   %eax
f011f786:	68 08 e8 12 f0       	push   $0xf012e808
f011f78b:	e8 dc 17 fe ff       	call   f0100f6c <cprintf>
f011f790:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[6])
f011f793:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f799:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011f79c:	74 21                	je     f011f7bf <test_ksbrk+0x766>
		{
			correct = 0;
f011f79e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[6]);
f011f7a5:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011f7ab:	83 ec 04             	sub    $0x4,%esp
f011f7ae:	50                   	push   %eax
f011f7af:	ff 75 d0             	pushl  -0x30(%ebp)
f011f7b2:	68 64 e8 12 f0       	push   $0xf012e864
f011f7b7:	e8 b0 17 fe ff       	call   f0100f6c <cprintf>
f011f7bc:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f7bf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f7c3:	74 04                	je     f011f7c9 <test_ksbrk+0x770>
			eval += 15;
f011f7c5:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	cprintf("STEP F: checking increment with +ve value [ONE Frame should be Allocated]\n");
f011f7c9:	83 ec 0c             	sub    $0xc,%esp
f011f7cc:	68 74 e9 12 f0       	push   $0xf012e974
f011f7d1:	e8 96 17 fe ff       	call   f0100f6c <cprintf>
f011f7d6:	83 c4 10             	add    $0x10,%esp
	{ // 1 KB
		freeFrames = (int)(int)sys_calculate_free_frames();
f011f7d9:	e8 2b e2 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f7de:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f7e1:	e8 5a 50 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f7e6:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011f7e9:	83 ec 0c             	sub    $0xc,%esp
f011f7ec:	6a 00                	push   $0x0
f011f7ee:	e8 b9 92 fe ff       	call   f0108aac <sbrk>
f011f7f3:	83 c4 10             	add    $0x10,%esp
f011f7f6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[7] = sbrk(kilo);
f011f7f9:	83 ec 0c             	sub    $0xc,%esp
f011f7fc:	68 00 04 00 00       	push   $0x400
f011f801:	e8 a6 92 fe ff       	call   f0108aac <sbrk>
f011f806:	83 c4 10             	add    $0x10,%esp
f011f809:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		newBrk = (uint32)sbrk(0);
f011f80f:	83 ec 0c             	sub    $0xc,%esp
f011f812:	6a 00                	push   $0x0
f011f814:	e8 93 92 fe ff       	call   f0108aac <sbrk>
f011f819:	83 c4 10             	add    $0x10,%esp
f011f81c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011f81f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f826:	e8 15 50 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f82b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f82e:	74 17                	je     f011f847 <test_ksbrk+0x7ee>
		{
			correct = 0;
f011f830:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f837:	83 ec 0c             	sub    $0xc,%esp
f011f83a:	68 60 e7 12 f0       	push   $0xf012e760
f011f83f:	e8 28 17 fe ff       	call   f0100f6c <cprintf>
f011f844:	83 c4 10             	add    $0x10,%esp
		}
		//cprintf("((int)(int)sys_calculate_free_frames() - freeFrames) = %d\n", ((int)(int)sys_calculate_free_frames() - freeFrames));
		if ((freeFrames - (int)(int)sys_calculate_free_frames()) != 1)
f011f847:	e8 bd e1 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f84c:	89 c2                	mov    %eax,%edx
f011f84e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f851:	29 d0                	sub    %edx,%eax
f011f853:	83 f8 01             	cmp    $0x1,%eax
f011f856:	74 17                	je     f011f86f <test_ksbrk+0x816>
		{
			correct = 0;
f011f858:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("7 Wrong allocation: pages are not loaded successfully into memory");
f011f85f:	83 ec 0c             	sub    $0xc,%esp
f011f862:	68 c0 e9 12 f0       	push   $0xf012e9c0
f011f867:	e8 00 17 fe ff       	call   f0100f6c <cprintf>
f011f86c:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[7] != expectedVAs[7])
f011f86f:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f875:	89 c2                	mov    %eax,%edx
f011f877:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f87d:	39 c2                	cmp    %eax,%edx
f011f87f:	74 25                	je     f011f8a6 <test_ksbrk+0x84d>
		{
			correct = 0;
f011f881:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("7 Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[7], ptr_allocations[7]);
f011f888:	8b 95 48 ff ff ff    	mov    -0xb8(%ebp),%edx
f011f88e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011f894:	83 ec 04             	sub    $0x4,%esp
f011f897:	52                   	push   %edx
f011f898:	50                   	push   %eax
f011f899:	68 04 ea 12 f0       	push   $0xf012ea04
f011f89e:	e8 c9 16 fe ff       	call   f0100f6c <cprintf>
f011f8a3:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[7])
f011f8a6:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f8ac:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011f8af:	74 21                	je     f011f8d2 <test_ksbrk+0x879>
		{
			correct = 0;
f011f8b1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("7 Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[7]);
f011f8b8:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011f8be:	83 ec 04             	sub    $0x4,%esp
f011f8c1:	50                   	push   %eax
f011f8c2:	ff 75 d0             	pushl  -0x30(%ebp)
f011f8c5:	68 38 ea 12 f0       	push   $0xf012ea38
f011f8ca:	e8 9d 16 fe ff       	call   f0100f6c <cprintf>
f011f8cf:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f8d2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f8d6:	74 04                	je     f011f8dc <test_ksbrk+0x883>
			eval += 15;
f011f8d8:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	cprintf("STEP G: checking increment with -ve value [TWO Frames should be Deallocated]\n");
f011f8dc:	83 ec 0c             	sub    $0xc,%esp
f011f8df:	68 68 ea 12 f0       	push   $0xf012ea68
f011f8e4:	e8 83 16 fe ff       	call   f0100f6c <cprintf>
f011f8e9:	83 c4 10             	add    $0x10,%esp
	{ // -9 KB
		freeFrames = (int)sys_calculate_free_frames();
f011f8ec:	e8 18 e1 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f8f1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011f8f4:	e8 47 4f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f8f9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011f8fc:	83 ec 0c             	sub    $0xc,%esp
f011f8ff:	6a 00                	push   $0x0
f011f901:	e8 a6 91 fe ff       	call   f0108aac <sbrk>
f011f906:	83 c4 10             	add    $0x10,%esp
f011f909:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[8] = sbrk(-9 * kilo);
f011f90c:	83 ec 0c             	sub    $0xc,%esp
f011f90f:	68 00 dc ff ff       	push   $0xffffdc00
f011f914:	e8 93 91 fe ff       	call   f0108aac <sbrk>
f011f919:	83 c4 10             	add    $0x10,%esp
f011f91c:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
		newBrk = (uint32)sbrk(0);
f011f922:	83 ec 0c             	sub    $0xc,%esp
f011f925:	6a 00                	push   $0x0
f011f927:	e8 80 91 fe ff       	call   f0108aac <sbrk>
f011f92c:	83 c4 10             	add    $0x10,%esp
f011f92f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011f932:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)(int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011f939:	e8 02 4f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011f93e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011f941:	74 17                	je     f011f95a <test_ksbrk+0x901>
		{
			correct = 0;
f011f943:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f94a:	83 ec 0c             	sub    $0xc,%esp
f011f94d:	68 60 e7 12 f0       	push   $0xf012e760
f011f952:	e8 15 16 fe ff       	call   f0100f6c <cprintf>
f011f957:	83 c4 10             	add    $0x10,%esp
		}
		// cprintf("####### %x - %x\n", freeFrames - (int)sys_calculate_free_frames(), -1 * ((ROUNDUP(oldBrk, PAGE_SIZE) - newBrk) / PAGE_SIZE));
		if (((int)(int)sys_calculate_free_frames() - freeFrames) != 2)
f011f95a:	e8 aa e0 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011f95f:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011f962:	83 f8 02             	cmp    $0x2,%eax
f011f965:	74 17                	je     f011f97e <test_ksbrk+0x925>
		{
			correct = 0;
f011f967:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("8 Wrong allocation: pages are not loaded successfully into memory");
f011f96e:	83 ec 0c             	sub    $0xc,%esp
f011f971:	68 b8 ea 12 f0       	push   $0xf012eab8
f011f976:	e8 f1 15 fe ff       	call   f0100f6c <cprintf>
f011f97b:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[8] != expectedVAs[8])
f011f97e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011f984:	89 c2                	mov    %eax,%edx
f011f986:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f98c:	39 c2                	cmp    %eax,%edx
f011f98e:	74 25                	je     f011f9b5 <test_ksbrk+0x95c>
		{
			correct = 0;
f011f990:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("8 Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[5], ptr_allocations[5]);
f011f997:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f011f99d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011f9a3:	83 ec 04             	sub    $0x4,%esp
f011f9a6:	52                   	push   %edx
f011f9a7:	50                   	push   %eax
f011f9a8:	68 fc ea 12 f0       	push   $0xf012eafc
f011f9ad:	e8 ba 15 fe ff       	call   f0100f6c <cprintf>
f011f9b2:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[8])
f011f9b5:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011f9bb:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011f9be:	74 21                	je     f011f9e1 <test_ksbrk+0x988>
		{
			correct = 0;
f011f9c0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("8 Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[5]);
f011f9c7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011f9cd:	83 ec 04             	sub    $0x4,%esp
f011f9d0:	50                   	push   %eax
f011f9d1:	ff 75 d0             	pushl  -0x30(%ebp)
f011f9d4:	68 30 eb 12 f0       	push   $0xf012eb30
f011f9d9:	e8 8e 15 fe ff       	call   f0100f6c <cprintf>
f011f9de:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011f9e1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011f9e5:	74 04                	je     f011f9eb <test_ksbrk+0x992>
			eval += 10;
f011f9e7:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	cprintf("STEP H: checking increment with +ve value [THREE Frames should be Allocated]\n");
f011f9eb:	83 ec 0c             	sub    $0xc,%esp
f011f9ee:	68 60 eb 12 f0       	push   $0xf012eb60
f011f9f3:	e8 74 15 fe ff       	call   f0100f6c <cprintf>
f011f9f8:	83 c4 10             	add    $0x10,%esp
	{ // 10 KB
		freeFrames = (int)(int)sys_calculate_free_frames();
f011f9fb:	e8 09 e0 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011fa00:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011fa03:	e8 38 4e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011fa08:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011fa0b:	83 ec 0c             	sub    $0xc,%esp
f011fa0e:	6a 00                	push   $0x0
f011fa10:	e8 97 90 fe ff       	call   f0108aac <sbrk>
f011fa15:	83 c4 10             	add    $0x10,%esp
f011fa18:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[9] = sbrk(10*kilo);
f011fa1b:	83 ec 0c             	sub    $0xc,%esp
f011fa1e:	68 00 28 00 00       	push   $0x2800
f011fa23:	e8 84 90 fe ff       	call   f0108aac <sbrk>
f011fa28:	83 c4 10             	add    $0x10,%esp
f011fa2b:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
		newBrk = (uint32)sbrk(0);
f011fa31:	83 ec 0c             	sub    $0xc,%esp
f011fa34:	6a 00                	push   $0x0
f011fa36:	e8 71 90 fe ff       	call   f0108aac <sbrk>
f011fa3b:	83 c4 10             	add    $0x10,%esp
f011fa3e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011fa41:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011fa48:	e8 f3 4d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011fa4d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011fa50:	74 17                	je     f011fa69 <test_ksbrk+0xa10>
		{
			correct = 0;
f011fa52:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fa59:	83 ec 0c             	sub    $0xc,%esp
f011fa5c:	68 60 e7 12 f0       	push   $0xf012e760
f011fa61:	e8 06 15 fe ff       	call   f0100f6c <cprintf>
f011fa66:	83 c4 10             	add    $0x10,%esp
		}
		if ((freeFrames - (int)(int)sys_calculate_free_frames()) != 3)
f011fa69:	e8 9b df fe ff       	call   f010da09 <sys_calculate_free_frames>
f011fa6e:	89 c2                	mov    %eax,%edx
f011fa70:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011fa73:	29 d0                	sub    %edx,%eax
f011fa75:	83 f8 03             	cmp    $0x3,%eax
f011fa78:	74 17                	je     f011fa91 <test_ksbrk+0xa38>
		{
			correct = 0;
f011fa7a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("9 Wrong allocation: pages are not loaded successfully into memory");
f011fa81:	83 ec 0c             	sub    $0xc,%esp
f011fa84:	68 b0 eb 12 f0       	push   $0xf012ebb0
f011fa89:	e8 de 14 fe ff       	call   f0100f6c <cprintf>
f011fa8e:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[9] != expectedVAs[9])
f011fa91:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011fa97:	89 c2                	mov    %eax,%edx
f011fa99:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011fa9f:	39 c2                	cmp    %eax,%edx
f011faa1:	74 25                	je     f011fac8 <test_ksbrk+0xa6f>
		{
			correct = 0;
f011faa3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("9 Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[7], ptr_allocations[7]);
f011faaa:	8b 95 48 ff ff ff    	mov    -0xb8(%ebp),%edx
f011fab0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011fab6:	83 ec 04             	sub    $0x4,%esp
f011fab9:	52                   	push   %edx
f011faba:	50                   	push   %eax
f011fabb:	68 f4 eb 12 f0       	push   $0xf012ebf4
f011fac0:	e8 a7 14 fe ff       	call   f0100f6c <cprintf>
f011fac5:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[9])
f011fac8:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011face:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011fad1:	74 21                	je     f011faf4 <test_ksbrk+0xa9b>
		{
			correct = 0;
f011fad3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("9 Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[7]);
f011fada:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011fae0:	83 ec 04             	sub    $0x4,%esp
f011fae3:	50                   	push   %eax
f011fae4:	ff 75 d0             	pushl  -0x30(%ebp)
f011fae7:	68 28 ec 12 f0       	push   $0xf012ec28
f011faec:	e8 7b 14 fe ff       	call   f0100f6c <cprintf>
f011faf1:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011faf4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011faf8:	74 04                	je     f011fafe <test_ksbrk+0xaa5>
			eval += 10;
f011fafa:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}

	//cprintf("Test kheap sbrk completed. Evaluation = %d%%\n", eval);
	cprintf("[AUTO_GR@DING_PARTIAL]%d\n", eval);
f011fafe:	83 ec 08             	sub    $0x8,%esp
f011fb01:	ff 75 e4             	pushl  -0x1c(%ebp)
f011fb04:	68 55 ec 12 f0       	push   $0xf012ec55
f011fb09:	e8 5e 14 fe ff       	call   f0100f6c <cprintf>
f011fb0e:	83 c4 10             	add    $0x10,%esp

	cprintf("=================\n\n");
f011fb11:	83 ec 0c             	sub    $0xc,%esp
f011fb14:	68 6f ec 12 f0       	push   $0xf012ec6f
f011fb19:	e8 4e 14 fe ff       	call   f0100f6c <cprintf>
f011fb1e:	83 c4 10             	add    $0x10,%esp
	return 0;
f011fb21:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011fb26:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011fb29:	5b                   	pop    %ebx
f011fb2a:	5e                   	pop    %esi
f011fb2b:	5f                   	pop    %edi
f011fb2c:	5d                   	pop    %ebp
f011fb2d:	c3                   	ret    

f011fb2e <test_kmalloc_nextfit>:




int test_kmalloc_nextfit()
{
f011fb2e:	55                   	push   %ebp
f011fb2f:	89 e5                	mov    %esp,%ebp
f011fb31:	81 ec 88 02 00 00    	sub    $0x288,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f011fb37:	83 ec 04             	sub    $0x4,%esp
f011fb3a:	68 08 ed 12 f0       	push   $0xf012ed08
f011fb3f:	68 76 08 00 00       	push   $0x876
f011fb44:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011fb49:	e8 cc 07 fe ff       	call   f010031a <_panic>

f011fb4e <test_kmalloc_bestfit1>:
	return 1;

}

int test_kmalloc_bestfit1()
{
f011fb4e:	55                   	push   %ebp
f011fb4f:	89 e5                	mov    %esp,%ebp
f011fb51:	83 ec 58             	sub    $0x58,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f011fb54:	83 ec 04             	sub    $0x4,%esp
f011fb57:	68 08 ed 12 f0       	push   $0xf012ed08
f011fb5c:	68 1c 09 00 00       	push   $0x91c
f011fb61:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011fb66:	e8 af 07 fe ff       	call   f010031a <_panic>

f011fb6b <test_kmalloc_bestfit2>:
	return 1;

}

int test_kmalloc_bestfit2()
{
f011fb6b:	55                   	push   %ebp
f011fb6c:	89 e5                	mov    %esp,%ebp
f011fb6e:	83 ec 58             	sub    $0x58,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f011fb71:	83 ec 04             	sub    $0x4,%esp
f011fb74:	68 08 ed 12 f0       	push   $0xf012ed08
f011fb79:	68 c8 09 00 00       	push   $0x9c8
f011fb7e:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011fb83:	e8 92 07 fe ff       	call   f010031a <_panic>

f011fb88 <test_kmalloc_worstfit>:
	return 1;

}

int test_kmalloc_worstfit()
{
f011fb88:	55                   	push   %ebp
f011fb89:	89 e5                	mov    %esp,%ebp
f011fb8b:	81 ec 88 02 00 00    	sub    $0x288,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f011fb91:	83 ec 04             	sub    $0x4,%esp
f011fb94:	68 08 ed 12 f0       	push   $0xf012ed08
f011fb99:	68 6e 0a 00 00       	push   $0xa6e
f011fb9e:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011fba3:	e8 72 07 fe ff       	call   f010031a <_panic>

f011fba8 <test_kfree>:

	return 1;
}

int test_kfree()
{
f011fba8:	55                   	push   %ebp
f011fba9:	89 e5                	mov    %esp,%ebp
f011fbab:	81 ec 08 01 00 00    	sub    $0x108,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f011fbb1:	83 ec 04             	sub    $0x4,%esp
f011fbb4:	68 08 ed 12 f0       	push   $0xf012ed08
f011fbb9:	68 14 0b 00 00       	push   $0xb14
f011fbbe:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011fbc3:	e8 52 07 fe ff       	call   f010031a <_panic>

f011fbc8 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f011fbc8:	55                   	push   %ebp
f011fbc9:	89 e5                	mov    %esp,%ebp
f011fbcb:	57                   	push   %edi
f011fbcc:	56                   	push   %esi
f011fbcd:	53                   	push   %ebx
f011fbce:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
	if (firstCall)
f011fbd4:	a0 dc dd 17 f0       	mov    0xf017dddc,%al
f011fbd9:	84 c0                	test   %al,%al
f011fbdb:	74 56                	je     f011fc33 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f011fbdd:	c6 05 dc dd 17 f0 00 	movb   $0x0,0xf017dddc
		initFreeFrames = sys_calculate_free_frames() ;
f011fbe4:	e8 20 de fe ff       	call   f010da09 <sys_calculate_free_frames>
f011fbe9:	a3 68 42 5c f0       	mov    %eax,0xf05c4268
		initFreeDiskFrames = pf_calculate_free_frames() ;
f011fbee:	e8 4d 4c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011fbf3:	a3 64 42 5c f0       	mov    %eax,0xf05c4264
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f011fbf8:	8d 85 6c ff ff ff    	lea    -0x94(%ebp),%eax
f011fbfe:	bb 65 ee 12 f0       	mov    $0xf012ee65,%ebx
f011fc03:	ba 11 00 00 00       	mov    $0x11,%edx
f011fc08:	89 c7                	mov    %eax,%edi
f011fc0a:	89 de                	mov    %ebx,%esi
f011fc0c:	89 d1                	mov    %edx,%ecx
f011fc0e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011fc10:	8d 95 7d ff ff ff    	lea    -0x83(%ebp),%edx
f011fc16:	b9 53 00 00 00       	mov    $0x53,%ecx
f011fc1b:	b0 00                	mov    $0x0,%al
f011fc1d:	89 d7                	mov    %edx,%edi
f011fc1f:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f011fc21:	83 ec 0c             	sub    $0xc,%esp
f011fc24:	8d 85 6c ff ff ff    	lea    -0x94(%ebp),%eax
f011fc2a:	50                   	push   %eax
f011fc2b:	e8 ac 22 fe ff       	call   f0101edc <execute_command>
f011fc30:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f011fc33:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f011fc3a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f011fc41:	a1 80 ee 59 f0       	mov    0xf059ee80,%eax
f011fc46:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011fc49:	eb 2b                	jmp    f011fc76 <test_three_creation_functions+0xae>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f011fc4b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011fc4e:	83 c0 20             	add    $0x20,%eax
f011fc51:	83 ec 08             	sub    $0x8,%esp
f011fc54:	68 4d ed 12 f0       	push   $0xf012ed4d
f011fc59:	50                   	push   %eax
f011fc5a:	e8 e5 28 00 00       	call   f0122544 <strcmp>
f011fc5f:	83 c4 10             	add    $0x10,%esp
f011fc62:	85 c0                	test   %eax,%eax
f011fc64:	75 08                	jne    f011fc6e <test_three_creation_functions+0xa6>
			{
				e = ptr_env ;
f011fc66:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011fc69:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f011fc6c:	eb 2f                	jmp    f011fc9d <test_three_creation_functions+0xd5>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f011fc6e:	a1 88 ee 59 f0       	mov    0xf059ee88,%eax
f011fc73:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011fc76:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011fc7a:	74 08                	je     f011fc84 <test_three_creation_functions+0xbc>
f011fc7c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011fc7f:	8b 40 08             	mov    0x8(%eax),%eax
f011fc82:	eb 05                	jmp    f011fc89 <test_three_creation_functions+0xc1>
f011fc84:	b8 00 00 00 00       	mov    $0x0,%eax
f011fc89:	a3 88 ee 59 f0       	mov    %eax,0xf059ee88
f011fc8e:	a1 88 ee 59 f0       	mov    0xf059ee88,%eax
f011fc93:	85 c0                	test   %eax,%eax
f011fc95:	75 b4                	jne    f011fc4b <test_three_creation_functions+0x83>
f011fc97:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011fc9b:	75 ae                	jne    f011fc4b <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f011fc9d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011fca0:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f011fca6:	85 c0                	test   %eax,%eax
f011fca8:	74 17                	je     f011fcc1 <test_three_creation_functions+0xf9>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f011fcaa:	83 ec 04             	sub    $0x4,%esp
f011fcad:	68 58 ed 12 f0       	push   $0xf012ed58
f011fcb2:	68 f0 0c 00 00       	push   $0xcf0
f011fcb7:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011fcbc:	e8 59 06 fe ff       	call   f010031a <_panic>

#if USE_KHEAP
		int pagesInWS = LIST_SIZE(&(e->page_WS_list));
#else
		int pagesInWS = env_page_ws_get_size(e);
f011fcc1:	83 ec 0c             	sub    $0xc,%esp
f011fcc4:	ff 75 e4             	pushl  -0x1c(%ebp)
f011fcc7:	e8 92 90 fe ff       	call   f0108d5e <env_page_ws_get_size>
f011fccc:	83 c4 10             	add    $0x10,%esp
f011fccf:	89 45 dc             	mov    %eax,-0x24(%ebp)
#endif
		int curFreeFrames = sys_calculate_free_frames() ;
f011fcd2:	e8 32 dd fe ff       	call   f010da09 <sys_calculate_free_frames>
f011fcd7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f011fcda:	e8 61 4b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011fcdf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fce2:	a1 64 42 5c f0       	mov    0xf05c4264,%eax
f011fce7:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f011fcea:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011fced:	74 17                	je     f011fd06 <test_three_creation_functions+0x13e>
f011fcef:	83 ec 04             	sub    $0x4,%esp
f011fcf2:	68 60 e7 12 f0       	push   $0xf012e760
f011fcf7:	68 fa 0c 00 00       	push   $0xcfa
f011fcfc:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011fd01:	e8 14 06 fe ff       	call   f010031a <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fd06:	a1 68 42 5c f0       	mov    0xf05c4268,%eax
f011fd0b:	2b 45 d8             	sub    -0x28(%ebp),%eax
f011fd0e:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011fd11:	83 c2 15             	add    $0x15,%edx
f011fd14:	39 d0                	cmp    %edx,%eax
f011fd16:	74 17                	je     f011fd2f <test_three_creation_functions+0x167>
f011fd18:	83 ec 04             	sub    $0x4,%esp
f011fd1b:	68 c8 e7 12 f0       	push   $0xf012e7c8
f011fd20:	68 fc 0c 00 00       	push   $0xcfc
f011fd25:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011fd2a:	e8 eb 05 fe ff       	call   f010031a <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f011fd2f:	83 ec 0c             	sub    $0xc,%esp
f011fd32:	68 00 10 00 00       	push   $0x1000
f011fd37:	e8 7a 8d fe ff       	call   f0108ab6 <kmalloc>
f011fd3c:	83 c4 10             	add    $0x10,%esp
f011fd3f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f011fd42:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011fd45:	3d 00 60 01 f8       	cmp    $0xf8016000,%eax
f011fd4a:	74 17                	je     f011fd63 <test_three_creation_functions+0x19b>
f011fd4c:	83 ec 04             	sub    $0x4,%esp
f011fd4f:	68 a8 ed 12 f0       	push   $0xf012eda8
f011fd54:	68 00 0d 00 00       	push   $0xd00
f011fd59:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011fd5e:	e8 b7 05 fe ff       	call   f010031a <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f011fd63:	83 ec 0c             	sub    $0xc,%esp
f011fd66:	68 18 ee 12 f0       	push   $0xf012ee18
f011fd6b:	e8 fc 11 fe ff       	call   f0100f6c <cprintf>
f011fd70:	83 c4 10             	add    $0x10,%esp

	return 1;
f011fd73:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011fd78:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011fd7b:	5b                   	pop    %ebx
f011fd7c:	5e                   	pop    %esi
f011fd7d:	5f                   	pop    %edi
f011fd7e:	5d                   	pop    %ebp
f011fd7f:	c3                   	ret    

f011fd80 <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f011fd80:	55                   	push   %ebp
f011fd81:	89 e5                	mov    %esp,%ebp
f011fd83:	83 ec 08             	sub    $0x8,%esp
	panic("test not available yet");
f011fd86:	83 ec 04             	sub    $0x4,%esp
f011fd89:	68 c9 ee 12 f0       	push   $0xf012eec9
f011fd8e:	68 0e 0d 00 00       	push   $0xd0e
f011fd93:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011fd98:	e8 7d 05 fe ff       	call   f010031a <_panic>

f011fd9d <test_kexpand>:

	return 1;

}
int test_kexpand(){
f011fd9d:	55                   	push   %ebp
f011fd9e:	89 e5                	mov    %esp,%ebp
f011fda0:	83 ec 08             	sub    $0x8,%esp
	panic("test not available yet");
f011fda3:	83 ec 04             	sub    $0x4,%esp
f011fda6:	68 c9 ee 12 f0       	push   $0xf012eec9
f011fdab:	68 14 0d 00 00       	push   $0xd14
f011fdb0:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011fdb5:	e8 60 05 fe ff       	call   f010031a <_panic>

f011fdba <test_kshrink>:
	return 1;
}

int test_kshrink(){
f011fdba:	55                   	push   %ebp
f011fdbb:	89 e5                	mov    %esp,%ebp
f011fdbd:	83 ec 08             	sub    $0x8,%esp
	panic("test not available yet");
f011fdc0:	83 ec 04             	sub    $0x4,%esp
f011fdc3:	68 c9 ee 12 f0       	push   $0xf012eec9
f011fdc8:	68 19 0d 00 00       	push   $0xd19
f011fdcd:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011fdd2:	e8 43 05 fe ff       	call   f010031a <_panic>

f011fdd7 <test_kfreelast>:
	return 1;
}
int test_kfreelast(){
f011fdd7:	55                   	push   %ebp
f011fdd8:	89 e5                	mov    %esp,%ebp
f011fdda:	83 ec 08             	sub    $0x8,%esp
	panic("test not available yet");
f011fddd:	83 ec 04             	sub    $0x4,%esp
f011fde0:	68 c9 ee 12 f0       	push   $0xf012eec9
f011fde5:	68 1d 0d 00 00       	push   $0xd1d
f011fdea:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011fdef:	e8 26 05 fe ff       	call   f010031a <_panic>

f011fdf4 <test_krealloc>:
	return 1;
}

int test_krealloc() {
f011fdf4:	55                   	push   %ebp
f011fdf5:	89 e5                	mov    %esp,%ebp
f011fdf7:	83 ec 08             	sub    $0x8,%esp
	cprintf("==============================================\n");
f011fdfa:	83 ec 0c             	sub    $0xc,%esp
f011fdfd:	68 80 de 12 f0       	push   $0xf012de80
f011fe02:	e8 65 11 fe ff       	call   f0100f6c <cprintf>
f011fe07:	83 c4 10             	add    $0x10,%esp
	cprintf(
f011fe0a:	83 ec 0c             	sub    $0xc,%esp
f011fe0d:	68 b0 de 12 f0       	push   $0xf012deb0
f011fe12:	e8 55 11 fe ff       	call   f0100f6c <cprintf>
f011fe17:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f011fe1a:	83 ec 0c             	sub    $0xc,%esp
f011fe1d:	68 80 de 12 f0       	push   $0xf012de80
f011fe22:	e8 45 11 fe ff       	call   f0100f6c <cprintf>
f011fe27:	83 c4 10             	add    $0x10,%esp
	panic("test not available yet");
f011fe2a:	83 ec 04             	sub    $0x4,%esp
f011fe2d:	68 c9 ee 12 f0       	push   $0xf012eec9
f011fe32:	68 26 0d 00 00       	push   $0xd26
f011fe37:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011fe3c:	e8 d9 04 fe ff       	call   f010031a <_panic>

f011fe41 <test_krealloc_BF>:
	return 0;
}


int test_krealloc_BF() {
f011fe41:	55                   	push   %ebp
f011fe42:	89 e5                	mov    %esp,%ebp
f011fe44:	83 ec 08             	sub    $0x8,%esp
	cprintf("==============================================\n");
f011fe47:	83 ec 0c             	sub    $0xc,%esp
f011fe4a:	68 80 de 12 f0       	push   $0xf012de80
f011fe4f:	e8 18 11 fe ff       	call   f0100f6c <cprintf>
f011fe54:	83 c4 10             	add    $0x10,%esp
	cprintf(
f011fe57:	83 ec 0c             	sub    $0xc,%esp
f011fe5a:	68 b0 de 12 f0       	push   $0xf012deb0
f011fe5f:	e8 08 11 fe ff       	call   f0100f6c <cprintf>
f011fe64:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f011fe67:	83 ec 0c             	sub    $0xc,%esp
f011fe6a:	68 80 de 12 f0       	push   $0xf012de80
f011fe6f:	e8 f8 10 fe ff       	call   f0100f6c <cprintf>
f011fe74:	83 c4 10             	add    $0x10,%esp
	panic("test not available yet");
f011fe77:	83 ec 04             	sub    $0x4,%esp
f011fe7a:	68 c9 ee 12 f0       	push   $0xf012eec9
f011fe7f:	68 30 0d 00 00       	push   $0xd30
f011fe84:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011fe89:	e8 8c 04 fe ff       	call   f010031a <_panic>

f011fe8e <test_krealloc_FF1>:
	return 0;
}

int test_krealloc_FF1()
{
f011fe8e:	55                   	push   %ebp
f011fe8f:	89 e5                	mov    %esp,%ebp
f011fe91:	83 ec 08             	sub    $0x8,%esp
	cprintf("===================================================\n");
f011fe94:	83 ec 0c             	sub    $0xc,%esp
f011fe97:	68 e0 ee 12 f0       	push   $0xf012eee0
f011fe9c:	e8 cb 10 fe ff       	call   f0100f6c <cprintf>
f011fea1:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A COMPLETE TEST FOR KREALLOC [BLOCK ALLOCATOR]******\n") ;
f011fea4:	83 ec 0c             	sub    $0xc,%esp
f011fea7:	68 18 ef 12 f0       	push   $0xf012ef18
f011feac:	e8 bb 10 fe ff       	call   f0100f6c <cprintf>
f011feb1:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f011feb4:	83 ec 0c             	sub    $0xc,%esp
f011feb7:	68 e0 ee 12 f0       	push   $0xf012eee0
f011febc:	e8 ab 10 fe ff       	call   f0100f6c <cprintf>
f011fec1:	83 c4 10             	add    $0x10,%esp

	panic("test not available yet");
f011fec4:	83 ec 04             	sub    $0x4,%esp
f011fec7:	68 c9 ee 12 f0       	push   $0xf012eec9
f011fecc:	68 3a 0d 00 00       	push   $0xd3a
f011fed1:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011fed6:	e8 3f 04 fe ff       	call   f010031a <_panic>

f011fedb <test_krealloc_FF2>:
	return 0;

}
int test_krealloc_FF2()
{
f011fedb:	55                   	push   %ebp
f011fedc:	89 e5                	mov    %esp,%ebp
f011fede:	83 ec 08             	sub    $0x8,%esp
	cprintf("===================================================\n");
f011fee1:	83 ec 0c             	sub    $0xc,%esp
f011fee4:	68 e0 ee 12 f0       	push   $0xf012eee0
f011fee9:	e8 7e 10 fe ff       	call   f0100f6c <cprintf>
f011feee:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A COMPLETE TEST FOR KREALLOC [PAGE ALLOCATOR]******\n") ;
f011fef1:	83 ec 0c             	sub    $0xc,%esp
f011fef4:	68 64 ef 12 f0       	push   $0xf012ef64
f011fef9:	e8 6e 10 fe ff       	call   f0100f6c <cprintf>
f011fefe:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f011ff01:	83 ec 0c             	sub    $0xc,%esp
f011ff04:	68 e0 ee 12 f0       	push   $0xf012eee0
f011ff09:	e8 5e 10 fe ff       	call   f0100f6c <cprintf>
f011ff0e:	83 c4 10             	add    $0x10,%esp

	panic("test not available yet");
f011ff11:	83 ec 04             	sub    $0x4,%esp
f011ff14:	68 c9 ee 12 f0       	push   $0xf012eec9
f011ff19:	68 44 0d 00 00       	push   $0xd44
f011ff1e:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011ff23:	e8 f2 03 fe ff       	call   f010031a <_panic>

f011ff28 <test_krealloc_FF3>:
	return 0;
}

int test_krealloc_FF3()
{
f011ff28:	55                   	push   %ebp
f011ff29:	89 e5                	mov    %esp,%ebp
f011ff2b:	83 ec 08             	sub    $0x8,%esp
	cprintf("===================================================\n");
f011ff2e:	83 ec 0c             	sub    $0xc,%esp
f011ff31:	68 e0 ee 12 f0       	push   $0xf012eee0
f011ff36:	e8 31 10 fe ff       	call   f0100f6c <cprintf>
f011ff3b:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A COMPLETE TEST FOR KREALLOC [SWITCH FROM PAGE ALLOCATOR TO DYNAMIC ALLOCATOR AND VICE VERSA]******\n") ;
f011ff3e:	83 ec 0c             	sub    $0xc,%esp
f011ff41:	68 ac ef 12 f0       	push   $0xf012efac
f011ff46:	e8 21 10 fe ff       	call   f0100f6c <cprintf>
f011ff4b:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f011ff4e:	83 ec 0c             	sub    $0xc,%esp
f011ff51:	68 e0 ee 12 f0       	push   $0xf012eee0
f011ff56:	e8 11 10 fe ff       	call   f0100f6c <cprintf>
f011ff5b:	83 c4 10             	add    $0x10,%esp

	panic("test not available yet");
f011ff5e:	83 ec 04             	sub    $0x4,%esp
f011ff61:	68 c9 ee 12 f0       	push   $0xf012eec9
f011ff66:	68 4e 0d 00 00       	push   $0xd4e
f011ff6b:	68 f2 e5 12 f0       	push   $0xf012e5f2
f011ff70:	e8 a5 03 fe ff       	call   f010031a <_panic>

f011ff75 <print_order>:
uint8 firstTimeTestBSD = 1;
int prog_orders[TOTAL_NICE_VALUES][INSTANCES_NUMBER];
int nice_count[TOTAL_NICE_VALUES] = {0};

void print_order(int prog_orders[][INSTANCES_NUMBER])
{
f011ff75:	55                   	push   %ebp
f011ff76:	89 e5                	mov    %esp,%ebp
f011ff78:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < TOTAL_NICE_VALUES; i++)
f011ff7b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ff82:	e9 84 00 00 00       	jmp    f012000b <print_order+0x96>
	{
		cprintf("\t[%d]: ", i);
f011ff87:	83 ec 08             	sub    $0x8,%esp
f011ff8a:	ff 75 f4             	pushl  -0xc(%ebp)
f011ff8d:	68 24 f0 12 f0       	push   $0xf012f024
f011ff92:	e8 d5 0f fe ff       	call   f0100f6c <cprintf>
f011ff97:	83 c4 10             	add    $0x10,%esp
		for (int j = 0; j < INSTANCES_NUMBER; j++)
f011ff9a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011ffa1:	eb 4c                	jmp    f011ffef <print_order+0x7a>
		{
			if (prog_orders[i][j] == 0)
f011ffa3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ffa6:	89 d0                	mov    %edx,%eax
f011ffa8:	c1 e0 02             	shl    $0x2,%eax
f011ffab:	01 d0                	add    %edx,%eax
f011ffad:	c1 e0 03             	shl    $0x3,%eax
f011ffb0:	89 c2                	mov    %eax,%edx
f011ffb2:	8b 45 08             	mov    0x8(%ebp),%eax
f011ffb5:	01 c2                	add    %eax,%edx
f011ffb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ffba:	8b 04 82             	mov    (%edx,%eax,4),%eax
f011ffbd:	85 c0                	test   %eax,%eax
f011ffbf:	74 36                	je     f011fff7 <print_order+0x82>
				break;
			cprintf("%d, ", prog_orders[i][j]);
f011ffc1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ffc4:	89 d0                	mov    %edx,%eax
f011ffc6:	c1 e0 02             	shl    $0x2,%eax
f011ffc9:	01 d0                	add    %edx,%eax
f011ffcb:	c1 e0 03             	shl    $0x3,%eax
f011ffce:	89 c2                	mov    %eax,%edx
f011ffd0:	8b 45 08             	mov    0x8(%ebp),%eax
f011ffd3:	01 c2                	add    %eax,%edx
f011ffd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ffd8:	8b 04 82             	mov    (%edx,%eax,4),%eax
f011ffdb:	83 ec 08             	sub    $0x8,%esp
f011ffde:	50                   	push   %eax
f011ffdf:	68 2c f0 12 f0       	push   $0xf012f02c
f011ffe4:	e8 83 0f fe ff       	call   f0100f6c <cprintf>
f011ffe9:	83 c4 10             	add    $0x10,%esp
void print_order(int prog_orders[][INSTANCES_NUMBER])
{
	for (int i = 0; i < TOTAL_NICE_VALUES; i++)
	{
		cprintf("\t[%d]: ", i);
		for (int j = 0; j < INSTANCES_NUMBER; j++)
f011ffec:	ff 45 f0             	incl   -0x10(%ebp)
f011ffef:	83 7d f0 09          	cmpl   $0x9,-0x10(%ebp)
f011fff3:	7e ae                	jle    f011ffa3 <print_order+0x2e>
f011fff5:	eb 01                	jmp    f011fff8 <print_order+0x83>
		{
			if (prog_orders[i][j] == 0)
				break;
f011fff7:	90                   	nop
			cprintf("%d, ", prog_orders[i][j]);
		}
		cprintf("\n");
f011fff8:	83 ec 0c             	sub    $0xc,%esp
f011fffb:	68 31 f0 12 f0       	push   $0xf012f031
f0120000:	e8 67 0f fe ff       	call   f0100f6c <cprintf>
f0120005:	83 c4 10             	add    $0x10,%esp
int prog_orders[TOTAL_NICE_VALUES][INSTANCES_NUMBER];
int nice_count[TOTAL_NICE_VALUES] = {0};

void print_order(int prog_orders[][INSTANCES_NUMBER])
{
	for (int i = 0; i < TOTAL_NICE_VALUES; i++)
f0120008:	ff 45 f4             	incl   -0xc(%ebp)
f012000b:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
f012000f:	0f 8e 72 ff ff ff    	jle    f011ff87 <print_order+0x12>
				break;
			cprintf("%d, ", prog_orders[i][j]);
		}
		cprintf("\n");
	}
}
f0120015:	90                   	nop
f0120016:	c9                   	leave  
f0120017:	c3                   	ret    

f0120018 <find_in_range>:

int find_in_range(int env_id, int start, int count)
{
f0120018:	55                   	push   %ebp
f0120019:	89 e5                	mov    %esp,%ebp
f012001b:	83 ec 28             	sub    $0x28,%esp
	int ret = -1;
f012001e:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	acquire_spinlock(&ProcessQueues.qlock);
f0120025:	83 ec 0c             	sub    $0xc,%esp
f0120028:	68 00 ee 59 f0       	push   $0xf059ee00
f012002d:	e8 ef ea fe ff       	call   f010eb21 <acquire_spinlock>
f0120032:	83 c4 10             	add    $0x10,%esp
	{
		struct Env *env = NULL;
f0120035:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		int i = 0, end = start + count;
f012003c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0120043:	8b 55 0c             	mov    0xc(%ebp),%edx
f0120046:	8b 45 10             	mov    0x10(%ebp),%eax
f0120049:	01 d0                	add    %edx,%eax
f012004b:	89 45 e8             	mov    %eax,-0x18(%ebp)

		//REVERSE LOOP ON EXIT LIST (to be the same as the queue order)
		int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
f012004e:	a1 8c ee 59 f0       	mov    0xf059ee8c,%eax
f0120053:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		env = LIST_LAST(&ProcessQueues.env_exit_queue);
f0120056:	a1 84 ee 59 f0       	mov    0xf059ee84,%eax
f012005b:	89 45 f0             	mov    %eax,-0x10(%ebp)

		cprintf("searching for envID %d starting from %d till %d\n", env_id, start, end);
f012005e:	ff 75 e8             	pushl  -0x18(%ebp)
f0120061:	ff 75 0c             	pushl  0xc(%ebp)
f0120064:	ff 75 08             	pushl  0x8(%ebp)
f0120067:	68 34 f0 12 f0       	push   $0xf012f034
f012006c:	e8 fb 0e fe ff       	call   f0100f6c <cprintf>
f0120071:	83 c4 10             	add    $0x10,%esp
		for (; i < numOfExitEnvs; env = LIST_PREV(env))
f0120074:	eb 34                	jmp    f01200aa <find_in_range+0x92>
			//LIST_FOREACH_R(env, &env_exit_queue)
		{
			if (i < start)
f0120076:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0120079:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012007c:	7d 05                	jge    f0120083 <find_in_range+0x6b>
			{
				i++;
f012007e:	ff 45 ec             	incl   -0x14(%ebp)
				continue;
f0120081:	eb 1e                	jmp    f01200a1 <find_in_range+0x89>
			}
			if (i >= end)
f0120083:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0120086:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0120089:	7d 29                	jge    f01200b4 <find_in_range+0x9c>
				//return -1;
				break;

			if (env_id == env->env_id)
f012008b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012008e:	8b 40 10             	mov    0x10(%eax),%eax
f0120091:	3b 45 08             	cmp    0x8(%ebp),%eax
f0120094:	75 08                	jne    f012009e <find_in_range+0x86>
			{
				ret = i;
f0120096:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0120099:	89 45 f4             	mov    %eax,-0xc(%ebp)
				break;
f012009c:	eb 17                	jmp    f01200b5 <find_in_range+0x9d>
			}
			i++;
f012009e:	ff 45 ec             	incl   -0x14(%ebp)
		//REVERSE LOOP ON EXIT LIST (to be the same as the queue order)
		int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
		env = LIST_LAST(&ProcessQueues.env_exit_queue);

		cprintf("searching for envID %d starting from %d till %d\n", env_id, start, end);
		for (; i < numOfExitEnvs; env = LIST_PREV(env))
f01200a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01200a4:	8b 40 0c             	mov    0xc(%eax),%eax
f01200a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01200aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01200ad:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01200b0:	7c c4                	jl     f0120076 <find_in_range+0x5e>
f01200b2:	eb 01                	jmp    f01200b5 <find_in_range+0x9d>
				i++;
				continue;
			}
			if (i >= end)
				//return -1;
				break;
f01200b4:	90                   	nop
				break;
			}
			i++;
		}
	}
	release_spinlock(&ProcessQueues.qlock);
f01200b5:	83 ec 0c             	sub    $0xc,%esp
f01200b8:	68 00 ee 59 f0       	push   $0xf059ee00
f01200bd:	e8 e6 ea fe ff       	call   f010eba8 <release_spinlock>
f01200c2:	83 c4 10             	add    $0x10,%esp
	return ret;
f01200c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01200c8:	c9                   	leave  
f01200c9:	c3                   	ret    

f01200ca <test_bsd_nice_0>:


void test_bsd_nice_0()
{
f01200ca:	55                   	push   %ebp
f01200cb:	89 e5                	mov    %esp,%ebp
f01200cd:	57                   	push   %edi
f01200ce:	56                   	push   %esi
f01200cf:	53                   	push   %ebx
f01200d0:	83 ec 3c             	sub    $0x3c,%esp
	if (firstTimeTestBSD)
f01200d3:	a0 dd dd 17 f0       	mov    0xf017dddd,%al
f01200d8:	84 c0                	test   %al,%al
f01200da:	0f 84 9b 01 00 00    	je     f012027b <test_bsd_nice_0+0x1b1>
	{
		firstTimeTestBSD = 0;
f01200e0:	c6 05 dd dd 17 f0 00 	movb   $0x0,0xf017dddd
		int nice_values[] = {-10, -5, 0, 5, 10};
f01200e7:	8d 45 b8             	lea    -0x48(%ebp),%eax
f01200ea:	bb ac f1 12 f0       	mov    $0xf012f1ac,%ebx
f01200ef:	ba 05 00 00 00       	mov    $0x5,%edx
f01200f4:	89 c7                	mov    %eax,%edi
f01200f6:	89 de                	mov    %ebx,%esi
f01200f8:	89 d1                	mov    %edx,%ecx
f01200fa:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		for (int i = 0; i < INSTANCES_NUMBER/2; i++)
f01200fc:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0120103:	e9 44 01 00 00       	jmp    f012024c <test_bsd_nice_0+0x182>
		{
			struct Env *env = env_create("bsd_fib", 500, 0, 0);
f0120108:	6a 00                	push   $0x0
f012010a:	6a 00                	push   $0x0
f012010c:	68 f4 01 00 00       	push   $0x1f4
f0120111:	68 65 f0 12 f0       	push   $0xf012f065
f0120116:	e8 55 99 fe ff       	call   f0109a70 <env_create>
f012011b:	83 c4 10             	add    $0x10,%esp
f012011e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			int nice_index = i % TOTAL_NICE_VALUES;
f0120121:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0120124:	b9 05 00 00 00       	mov    $0x5,%ecx
f0120129:	99                   	cltd   
f012012a:	f7 f9                	idiv   %ecx
f012012c:	89 55 d0             	mov    %edx,-0x30(%ebp)
			env_set_nice(env, nice_values[nice_index]);
f012012f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120132:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f0120136:	83 ec 08             	sub    $0x8,%esp
f0120139:	50                   	push   %eax
f012013a:	ff 75 d4             	pushl  -0x2c(%ebp)
f012013d:	e8 65 65 fe ff       	call   f01066a7 <env_set_nice>
f0120142:	83 c4 10             	add    $0x10,%esp
			if (env == NULL)
f0120145:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0120149:	75 14                	jne    f012015f <test_bsd_nice_0+0x95>
				panic("Loading programs failed\n");
f012014b:	83 ec 04             	sub    $0x4,%esp
f012014e:	68 6d f0 12 f0       	push   $0xf012f06d
f0120153:	6a 53                	push   $0x53
f0120155:	68 86 f0 12 f0       	push   $0xf012f086
f012015a:	e8 bb 01 fe ff       	call   f010031a <_panic>
			if (env->page_WS_max_size != 500)
f012015f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0120162:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0120168:	3d f4 01 00 00       	cmp    $0x1f4,%eax
f012016d:	74 14                	je     f0120183 <test_bsd_nice_0+0xb9>
				panic("The program working set size is not correct\n");
f012016f:	83 ec 04             	sub    $0x4,%esp
f0120172:	68 a4 f0 12 f0       	push   $0xf012f0a4
f0120177:	6a 55                	push   $0x55
f0120179:	68 86 f0 12 f0       	push   $0xf012f086
f012017e:	e8 97 01 fe ff       	call   f010031a <_panic>

			switch (nice_values[nice_index])
f0120183:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120186:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f012018a:	83 c0 0a             	add    $0xa,%eax
f012018d:	83 f8 14             	cmp    $0x14,%eax
f0120190:	0f 87 a5 00 00 00    	ja     f012023b <test_bsd_nice_0+0x171>
f0120196:	8b 04 85 c0 f1 12 f0 	mov    -0xfed0e40(,%eax,4),%eax
f012019d:	ff e0                	jmp    *%eax
			{
			case -10:
				prog_orders[0][nice_count[0]++] = env->env_id;
f012019f:	a1 3c ec 59 f0       	mov    0xf059ec3c,%eax
f01201a4:	8d 50 01             	lea    0x1(%eax),%edx
f01201a7:	89 15 3c ec 59 f0    	mov    %edx,0xf059ec3c
f01201ad:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01201b0:	8b 52 10             	mov    0x10(%edx),%edx
f01201b3:	89 14 85 80 42 5c f0 	mov    %edx,-0xfa3bd80(,%eax,4)
				break;
f01201ba:	eb 7f                	jmp    f012023b <test_bsd_nice_0+0x171>
			case -5:
				prog_orders[1][nice_count[1]++] = env->env_id;
f01201bc:	a1 40 ec 59 f0       	mov    0xf059ec40,%eax
f01201c1:	8d 50 01             	lea    0x1(%eax),%edx
f01201c4:	89 15 40 ec 59 f0    	mov    %edx,0xf059ec40
f01201ca:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01201cd:	8b 52 10             	mov    0x10(%edx),%edx
f01201d0:	83 c0 0a             	add    $0xa,%eax
f01201d3:	89 14 85 80 42 5c f0 	mov    %edx,-0xfa3bd80(,%eax,4)
				break;
f01201da:	eb 5f                	jmp    f012023b <test_bsd_nice_0+0x171>
			case 0:
				prog_orders[2][nice_count[2]++] = env->env_id;
f01201dc:	a1 44 ec 59 f0       	mov    0xf059ec44,%eax
f01201e1:	8d 50 01             	lea    0x1(%eax),%edx
f01201e4:	89 15 44 ec 59 f0    	mov    %edx,0xf059ec44
f01201ea:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01201ed:	8b 52 10             	mov    0x10(%edx),%edx
f01201f0:	83 c0 14             	add    $0x14,%eax
f01201f3:	89 14 85 80 42 5c f0 	mov    %edx,-0xfa3bd80(,%eax,4)
				break;
f01201fa:	eb 3f                	jmp    f012023b <test_bsd_nice_0+0x171>
			case 5:
				prog_orders[3][nice_count[3]++] = env->env_id;
f01201fc:	a1 48 ec 59 f0       	mov    0xf059ec48,%eax
f0120201:	8d 50 01             	lea    0x1(%eax),%edx
f0120204:	89 15 48 ec 59 f0    	mov    %edx,0xf059ec48
f012020a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f012020d:	8b 52 10             	mov    0x10(%edx),%edx
f0120210:	83 c0 1e             	add    $0x1e,%eax
f0120213:	89 14 85 80 42 5c f0 	mov    %edx,-0xfa3bd80(,%eax,4)
				break;
f012021a:	eb 1f                	jmp    f012023b <test_bsd_nice_0+0x171>
			case 10:
				prog_orders[4][nice_count[4]++] = env->env_id;
f012021c:	a1 4c ec 59 f0       	mov    0xf059ec4c,%eax
f0120221:	8d 50 01             	lea    0x1(%eax),%edx
f0120224:	89 15 4c ec 59 f0    	mov    %edx,0xf059ec4c
f012022a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f012022d:	8b 52 10             	mov    0x10(%edx),%edx
f0120230:	83 c0 28             	add    $0x28,%eax
f0120233:	89 14 85 80 42 5c f0 	mov    %edx,-0xfa3bd80(,%eax,4)
				break;
f012023a:	90                   	nop
			}
			sched_new_env(env);
f012023b:	83 ec 0c             	sub    $0xc,%esp
f012023e:	ff 75 d4             	pushl  -0x2c(%ebp)
f0120241:	e8 5f 54 fe ff       	call   f01056a5 <sched_new_env>
f0120246:	83 c4 10             	add    $0x10,%esp
{
	if (firstTimeTestBSD)
	{
		firstTimeTestBSD = 0;
		int nice_values[] = {-10, -5, 0, 5, 10};
		for (int i = 0; i < INSTANCES_NUMBER/2; i++)
f0120249:	ff 45 e4             	incl   -0x1c(%ebp)
f012024c:	83 7d e4 04          	cmpl   $0x4,-0x1c(%ebp)
f0120250:	0f 8e b2 fe ff ff    	jle    f0120108 <test_bsd_nice_0+0x3e>
				break;
			}
			sched_new_env(env);
		}
		// print_order(prog_orders);
		cprintf("> Running... (After all running programs finish, Run the same command again.)\n");
f0120256:	83 ec 0c             	sub    $0xc,%esp
f0120259:	68 d4 f0 12 f0       	push   $0xf012f0d4
f012025e:	e8 09 0d fe ff       	call   f0100f6c <cprintf>
f0120263:	83 c4 10             	add    $0x10,%esp
		execute_command("runall");
f0120266:	83 ec 0c             	sub    $0xc,%esp
f0120269:	68 23 f1 12 f0       	push   $0xf012f123
f012026e:	e8 69 1c fe ff       	call   f0101edc <execute_command>
f0120273:	83 c4 10             	add    $0x10,%esp
f0120276:	e9 c0 00 00 00       	jmp    f012033b <test_bsd_nice_0+0x271>
	}
	else
	{
		cprintf("> Checking...\n");
f012027b:	83 ec 0c             	sub    $0xc,%esp
f012027e:	68 2a f1 12 f0       	push   $0xf012f12a
f0120283:	e8 e4 0c fe ff       	call   f0100f6c <cprintf>
f0120288:	83 c4 10             	add    $0x10,%esp
		sched_print_all();
f012028b:	e8 91 5b fe ff       	call   f0105e21 <sched_print_all>
		// print_order(prog_orders);
		int start_idx = 0;
f0120290:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		for (int i = 0; i < TOTAL_NICE_VALUES; i++)
f0120297:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012029e:	e9 87 00 00 00       	jmp    f012032a <test_bsd_nice_0+0x260>
		{
			for (int j = 0; prog_orders[i][j] != 0; j++)
f01202a3:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01202aa:	eb 52                	jmp    f01202fe <test_bsd_nice_0+0x234>
			{
				int exist = find_in_range(prog_orders[i][j], start_idx, nice_count[i]);
f01202ac:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01202af:	8b 14 85 3c ec 59 f0 	mov    -0xfa613c4(,%eax,4),%edx
f01202b6:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f01202b9:	89 c8                	mov    %ecx,%eax
f01202bb:	c1 e0 02             	shl    $0x2,%eax
f01202be:	01 c8                	add    %ecx,%eax
f01202c0:	01 c0                	add    %eax,%eax
f01202c2:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f01202c5:	01 c8                	add    %ecx,%eax
f01202c7:	8b 04 85 80 42 5c f0 	mov    -0xfa3bd80(,%eax,4),%eax
f01202ce:	83 ec 04             	sub    $0x4,%esp
f01202d1:	52                   	push   %edx
f01202d2:	ff 75 e0             	pushl  -0x20(%ebp)
f01202d5:	50                   	push   %eax
f01202d6:	e8 3d fd ff ff       	call   f0120018 <find_in_range>
f01202db:	83 c4 10             	add    $0x10,%esp
f01202de:	89 45 cc             	mov    %eax,-0x34(%ebp)
				if (exist == -1)
f01202e1:	83 7d cc ff          	cmpl   $0xffffffff,-0x34(%ebp)
f01202e5:	75 14                	jne    f01202fb <test_bsd_nice_0+0x231>
					panic("The programs' order of finishing is not correct\n");
f01202e7:	83 ec 04             	sub    $0x4,%esp
f01202ea:	68 3c f1 12 f0       	push   $0xf012f13c
f01202ef:	6a 7b                	push   $0x7b
f01202f1:	68 86 f0 12 f0       	push   $0xf012f086
f01202f6:	e8 1f 00 fe ff       	call   f010031a <_panic>
		sched_print_all();
		// print_order(prog_orders);
		int start_idx = 0;
		for (int i = 0; i < TOTAL_NICE_VALUES; i++)
		{
			for (int j = 0; prog_orders[i][j] != 0; j++)
f01202fb:	ff 45 d8             	incl   -0x28(%ebp)
f01202fe:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0120301:	89 d0                	mov    %edx,%eax
f0120303:	c1 e0 02             	shl    $0x2,%eax
f0120306:	01 d0                	add    %edx,%eax
f0120308:	01 c0                	add    %eax,%eax
f012030a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012030d:	01 d0                	add    %edx,%eax
f012030f:	8b 04 85 80 42 5c f0 	mov    -0xfa3bd80(,%eax,4),%eax
f0120316:	85 c0                	test   %eax,%eax
f0120318:	75 92                	jne    f01202ac <test_bsd_nice_0+0x1e2>
			{
				int exist = find_in_range(prog_orders[i][j], start_idx, nice_count[i]);
				if (exist == -1)
					panic("The programs' order of finishing is not correct\n");
			}
			start_idx += nice_count[i];
f012031a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012031d:	8b 04 85 3c ec 59 f0 	mov    -0xfa613c4(,%eax,4),%eax
f0120324:	01 45 e0             	add    %eax,-0x20(%ebp)
	{
		cprintf("> Checking...\n");
		sched_print_all();
		// print_order(prog_orders);
		int start_idx = 0;
		for (int i = 0; i < TOTAL_NICE_VALUES; i++)
f0120327:	ff 45 dc             	incl   -0x24(%ebp)
f012032a:	83 7d dc 04          	cmpl   $0x4,-0x24(%ebp)
f012032e:	0f 8e 6f ff ff ff    	jle    f01202a3 <test_bsd_nice_0+0x1d9>
				if (exist == -1)
					panic("The programs' order of finishing is not correct\n");
			}
			start_idx += nice_count[i];
		}
		firstTimeTestBSD = 0;
f0120334:	c6 05 dd dd 17 f0 00 	movb   $0x0,0xf017dddd
	}
	cprintf("\nCongratulations!! test_bsd_nice_0 completed successfully.\n");
f012033b:	83 ec 0c             	sub    $0xc,%esp
f012033e:	68 70 f1 12 f0       	push   $0xf012f170
f0120343:	e8 24 0c fe ff       	call   f0100f6c <cprintf>
f0120348:	83 c4 10             	add    $0x10,%esp
}
f012034b:	90                   	nop
f012034c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f012034f:	5b                   	pop    %ebx
f0120350:	5e                   	pop    %esi
f0120351:	5f                   	pop    %edi
f0120352:	5d                   	pop    %ebp
f0120353:	c3                   	ret    

f0120354 <test_bsd_nice_1>:


void test_bsd_nice_1()
{
f0120354:	55                   	push   %ebp
f0120355:	89 e5                	mov    %esp,%ebp
f0120357:	83 ec 28             	sub    $0x28,%esp
	if (firstTimeTestBSD)
f012035a:	a0 dd dd 17 f0       	mov    0xf017dddd,%al
f012035f:	84 c0                	test   %al,%al
f0120361:	0f 84 50 01 00 00    	je     f01204b7 <test_bsd_nice_1+0x163>
	{
		firstTimeTestBSD = 0;
f0120367:	c6 05 dd dd 17 f0 00 	movb   $0x0,0xf017dddd
		struct Env *fibEnv = env_create("bsd_fib", 500, 0, 0);
f012036e:	6a 00                	push   $0x0
f0120370:	6a 00                	push   $0x0
f0120372:	68 f4 01 00 00       	push   $0x1f4
f0120377:	68 65 f0 12 f0       	push   $0xf012f065
f012037c:	e8 ef 96 fe ff       	call   f0109a70 <env_create>
f0120381:	83 c4 10             	add    $0x10,%esp
f0120384:	89 45 ec             	mov    %eax,-0x14(%ebp)
		struct Env *fibposnEnv = env_create("bsd_fib_posn", 500, 0, 0);
f0120387:	6a 00                	push   $0x0
f0120389:	6a 00                	push   $0x0
f012038b:	68 f4 01 00 00       	push   $0x1f4
f0120390:	68 14 f2 12 f0       	push   $0xf012f214
f0120395:	e8 d6 96 fe ff       	call   f0109a70 <env_create>
f012039a:	83 c4 10             	add    $0x10,%esp
f012039d:	89 45 e8             	mov    %eax,-0x18(%ebp)
		struct Env *fibnegnEnv = env_create("bsd_fib_negn", 500, 0, 0);
f01203a0:	6a 00                	push   $0x0
f01203a2:	6a 00                	push   $0x0
f01203a4:	68 f4 01 00 00       	push   $0x1f4
f01203a9:	68 21 f2 12 f0       	push   $0xf012f221
f01203ae:	e8 bd 96 fe ff       	call   f0109a70 <env_create>
f01203b3:	83 c4 10             	add    $0x10,%esp
f01203b6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (fibEnv == NULL || fibposnEnv == NULL || fibnegnEnv == NULL)
f01203b9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01203bd:	74 0c                	je     f01203cb <test_bsd_nice_1+0x77>
f01203bf:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01203c3:	74 06                	je     f01203cb <test_bsd_nice_1+0x77>
f01203c5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01203c9:	75 17                	jne    f01203e2 <test_bsd_nice_1+0x8e>
			panic("Loading programs failed\n");
f01203cb:	83 ec 04             	sub    $0x4,%esp
f01203ce:	68 6d f0 12 f0       	push   $0xf012f06d
f01203d3:	68 8e 00 00 00       	push   $0x8e
f01203d8:	68 86 f0 12 f0       	push   $0xf012f086
f01203dd:	e8 38 ff fd ff       	call   f010031a <_panic>
		if (fibEnv->page_WS_max_size != 500 || fibposnEnv->page_WS_max_size != 500 || fibnegnEnv->page_WS_max_size != 500)
f01203e2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01203e5:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01203eb:	3d f4 01 00 00       	cmp    $0x1f4,%eax
f01203f0:	75 20                	jne    f0120412 <test_bsd_nice_1+0xbe>
f01203f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01203f5:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01203fb:	3d f4 01 00 00       	cmp    $0x1f4,%eax
f0120400:	75 10                	jne    f0120412 <test_bsd_nice_1+0xbe>
f0120402:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0120405:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f012040b:	3d f4 01 00 00       	cmp    $0x1f4,%eax
f0120410:	74 35                	je     f0120447 <test_bsd_nice_1+0xf3>
			panic("The programs should be initially loaded with the given working set size. fib: %d, fibposn: %d, fibnegn: %d\n", fibEnv->page_WS_max_size, fibposnEnv->page_WS_max_size, fibnegnEnv->page_WS_max_size);
f0120412:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0120415:	8b 88 84 00 00 00    	mov    0x84(%eax),%ecx
f012041b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012041e:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f0120424:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0120427:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f012042d:	83 ec 08             	sub    $0x8,%esp
f0120430:	51                   	push   %ecx
f0120431:	52                   	push   %edx
f0120432:	50                   	push   %eax
f0120433:	68 30 f2 12 f0       	push   $0xf012f230
f0120438:	68 90 00 00 00       	push   $0x90
f012043d:	68 86 f0 12 f0       	push   $0xf012f086
f0120442:	e8 d3 fe fd ff       	call   f010031a <_panic>
		sched_new_env(fibEnv);
f0120447:	83 ec 0c             	sub    $0xc,%esp
f012044a:	ff 75 ec             	pushl  -0x14(%ebp)
f012044d:	e8 53 52 fe ff       	call   f01056a5 <sched_new_env>
f0120452:	83 c4 10             	add    $0x10,%esp
		sched_new_env(fibposnEnv);
f0120455:	83 ec 0c             	sub    $0xc,%esp
f0120458:	ff 75 e8             	pushl  -0x18(%ebp)
f012045b:	e8 45 52 fe ff       	call   f01056a5 <sched_new_env>
f0120460:	83 c4 10             	add    $0x10,%esp
		sched_new_env(fibnegnEnv);
f0120463:	83 ec 0c             	sub    $0xc,%esp
f0120466:	ff 75 e4             	pushl  -0x1c(%ebp)
f0120469:	e8 37 52 fe ff       	call   f01056a5 <sched_new_env>
f012046e:	83 c4 10             	add    $0x10,%esp
		prog_orders[0][0] = fibnegnEnv->env_id;
f0120471:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0120474:	8b 40 10             	mov    0x10(%eax),%eax
f0120477:	a3 80 42 5c f0       	mov    %eax,0xf05c4280
		prog_orders[1][0] = fibEnv->env_id;
f012047c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012047f:	8b 40 10             	mov    0x10(%eax),%eax
f0120482:	a3 a8 42 5c f0       	mov    %eax,0xf05c42a8
		prog_orders[2][0] = fibposnEnv->env_id;
f0120487:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012048a:	8b 40 10             	mov    0x10(%eax),%eax
f012048d:	a3 d0 42 5c f0       	mov    %eax,0xf05c42d0
		cprintf("> Running... (After all running programs finish, Run the same command again.)\n");
f0120492:	83 ec 0c             	sub    $0xc,%esp
f0120495:	68 d4 f0 12 f0       	push   $0xf012f0d4
f012049a:	e8 cd 0a fe ff       	call   f0100f6c <cprintf>
f012049f:	83 c4 10             	add    $0x10,%esp
		execute_command("runall");
f01204a2:	83 ec 0c             	sub    $0xc,%esp
f01204a5:	68 23 f1 12 f0       	push   $0xf012f123
f01204aa:	e8 2d 1a fe ff       	call   f0101edc <execute_command>
f01204af:	83 c4 10             	add    $0x10,%esp
f01204b2:	e9 9e 00 00 00       	jmp    f0120555 <test_bsd_nice_1+0x201>
	}
	else
	{
		cprintf("> Checking...\n");
f01204b7:	83 ec 0c             	sub    $0xc,%esp
f01204ba:	68 2a f1 12 f0       	push   $0xf012f12a
f01204bf:	e8 a8 0a fe ff       	call   f0100f6c <cprintf>
f01204c4:	83 c4 10             	add    $0x10,%esp
		sched_print_all();
f01204c7:	e8 55 59 fe ff       	call   f0105e21 <sched_print_all>
		// print_order(prog_orders);
		int i = 0;
f01204cc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		struct Env *env = NULL;
f01204d3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		acquire_spinlock(&ProcessQueues.qlock);
f01204da:	83 ec 0c             	sub    $0xc,%esp
f01204dd:	68 00 ee 59 f0       	push   $0xf059ee00
f01204e2:	e8 3a e6 fe ff       	call   f010eb21 <acquire_spinlock>
f01204e7:	83 c4 10             	add    $0x10,%esp
		{
			//REVERSE LOOP ON EXIT LIST (to be the same as the queue order)
			int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
f01204ea:	a1 8c ee 59 f0       	mov    0xf059ee8c,%eax
f01204ef:	89 45 e0             	mov    %eax,-0x20(%ebp)
			env = LIST_LAST(&ProcessQueues.env_exit_queue);
f01204f2:	a1 84 ee 59 f0       	mov    0xf059ee84,%eax
f01204f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
			for (; i < numOfExitEnvs; env = LIST_PREV(env))
f01204fa:	eb 41                	jmp    f012053d <test_bsd_nice_1+0x1e9>
				//LIST_FOREACH_R(env, &env_exit_queue)
			{
				//cprintf("%s - id=%d, priority=%d, nice=%d\n", env->prog_name, env->env_id, env->priority, env->nice);
				if (prog_orders[i][0] != env->env_id)
f01204fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01204ff:	89 d0                	mov    %edx,%eax
f0120501:	c1 e0 02             	shl    $0x2,%eax
f0120504:	01 d0                	add    %edx,%eax
f0120506:	c1 e0 03             	shl    $0x3,%eax
f0120509:	05 80 42 5c f0       	add    $0xf05c4280,%eax
f012050e:	8b 10                	mov    (%eax),%edx
f0120510:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0120513:	8b 40 10             	mov    0x10(%eax),%eax
f0120516:	39 c2                	cmp    %eax,%edx
f0120518:	74 17                	je     f0120531 <test_bsd_nice_1+0x1dd>
					panic("The programs' order of finishing is not correct\n");
f012051a:	83 ec 04             	sub    $0x4,%esp
f012051d:	68 3c f1 12 f0       	push   $0xf012f13c
f0120522:	68 ab 00 00 00       	push   $0xab
f0120527:	68 86 f0 12 f0       	push   $0xf012f086
f012052c:	e8 e9 fd fd ff       	call   f010031a <_panic>
				i++;
f0120531:	ff 45 f4             	incl   -0xc(%ebp)
		acquire_spinlock(&ProcessQueues.qlock);
		{
			//REVERSE LOOP ON EXIT LIST (to be the same as the queue order)
			int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
			env = LIST_LAST(&ProcessQueues.env_exit_queue);
			for (; i < numOfExitEnvs; env = LIST_PREV(env))
f0120534:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0120537:	8b 40 0c             	mov    0xc(%eax),%eax
f012053a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012053d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120540:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0120543:	7c b7                	jl     f01204fc <test_bsd_nice_1+0x1a8>
				if (prog_orders[i][0] != env->env_id)
					panic("The programs' order of finishing is not correct\n");
				i++;
			}
		}
		release_spinlock(&ProcessQueues.qlock);
f0120545:	83 ec 0c             	sub    $0xc,%esp
f0120548:	68 00 ee 59 f0       	push   $0xf059ee00
f012054d:	e8 56 e6 fe ff       	call   f010eba8 <release_spinlock>
f0120552:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\nCongratulations!! test_bsd_nice_1 completed successfully.\n");
f0120555:	83 ec 0c             	sub    $0xc,%esp
f0120558:	68 9c f2 12 f0       	push   $0xf012f29c
f012055d:	e8 0a 0a fe ff       	call   f0100f6c <cprintf>
f0120562:	83 c4 10             	add    $0x10,%esp
}
f0120565:	90                   	nop
f0120566:	c9                   	leave  
f0120567:	c3                   	ret    

f0120568 <test_bsd_nice_2>:

void test_bsd_nice_2()
{
f0120568:	55                   	push   %ebp
f0120569:	89 e5                	mov    %esp,%ebp
f012056b:	57                   	push   %edi
f012056c:	56                   	push   %esi
f012056d:	53                   	push   %ebx
f012056e:	83 ec 3c             	sub    $0x3c,%esp
	if (firstTimeTestBSD)
f0120571:	a0 dd dd 17 f0       	mov    0xf017dddd,%al
f0120576:	84 c0                	test   %al,%al
f0120578:	0f 84 ae 01 00 00    	je     f012072c <test_bsd_nice_2+0x1c4>
	{
		chksch(1);
f012057e:	83 ec 0c             	sub    $0xc,%esp
f0120581:	6a 01                	push   $0x1
f0120583:	e8 0d 10 00 00       	call   f0121595 <chksch>
f0120588:	83 c4 10             	add    $0x10,%esp
		firstTimeTestBSD = 0;
f012058b:	c6 05 dd dd 17 f0 00 	movb   $0x0,0xf017dddd
		int nice_values[] = {15, 5, 0, -5, -15};
f0120592:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0120595:	bb 20 f3 12 f0       	mov    $0xf012f320,%ebx
f012059a:	ba 05 00 00 00       	mov    $0x5,%edx
f012059f:	89 c7                	mov    %eax,%edi
f01205a1:	89 de                	mov    %ebx,%esi
f01205a3:	89 d1                	mov    %edx,%ecx
f01205a5:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		for (int i = 0; i < INSTANCES_NUMBER; i++)
f01205a7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01205ae:	e9 4a 01 00 00       	jmp    f01206fd <test_bsd_nice_2+0x195>
		{
			struct Env *env = env_create("bsd_matops", 10000, 0, 0);
f01205b3:	6a 00                	push   $0x0
f01205b5:	6a 00                	push   $0x0
f01205b7:	68 10 27 00 00       	push   $0x2710
f01205bc:	68 d8 f2 12 f0       	push   $0xf012f2d8
f01205c1:	e8 aa 94 fe ff       	call   f0109a70 <env_create>
f01205c6:	83 c4 10             	add    $0x10,%esp
f01205c9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			int nice_index = i % TOTAL_NICE_VALUES;
f01205cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01205cf:	b9 05 00 00 00       	mov    $0x5,%ecx
f01205d4:	99                   	cltd   
f01205d5:	f7 f9                	idiv   %ecx
f01205d7:	89 55 d0             	mov    %edx,-0x30(%ebp)
			env_set_nice(env, nice_values[nice_index]);
f01205da:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01205dd:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f01205e1:	83 ec 08             	sub    $0x8,%esp
f01205e4:	50                   	push   %eax
f01205e5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01205e8:	e8 ba 60 fe ff       	call   f01066a7 <env_set_nice>
f01205ed:	83 c4 10             	add    $0x10,%esp
			if (env == NULL)
f01205f0:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01205f4:	75 17                	jne    f012060d <test_bsd_nice_2+0xa5>
				panic("Loading programs failed\n");
f01205f6:	83 ec 04             	sub    $0x4,%esp
f01205f9:	68 6d f0 12 f0       	push   $0xf012f06d
f01205fe:	68 c1 00 00 00       	push   $0xc1
f0120603:	68 86 f0 12 f0       	push   $0xf012f086
f0120608:	e8 0d fd fd ff       	call   f010031a <_panic>
			if (env->page_WS_max_size != 10000)
f012060d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0120610:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0120616:	3d 10 27 00 00       	cmp    $0x2710,%eax
f012061b:	74 17                	je     f0120634 <test_bsd_nice_2+0xcc>
				panic("The program working set size is not correct\n");
f012061d:	83 ec 04             	sub    $0x4,%esp
f0120620:	68 a4 f0 12 f0       	push   $0xf012f0a4
f0120625:	68 c3 00 00 00       	push   $0xc3
f012062a:	68 86 f0 12 f0       	push   $0xf012f086
f012062f:	e8 e6 fc fd ff       	call   f010031a <_panic>

			switch (nice_values[nice_index])
f0120634:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120637:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f012063b:	83 c0 0f             	add    $0xf,%eax
f012063e:	83 f8 1e             	cmp    $0x1e,%eax
f0120641:	0f 87 a5 00 00 00    	ja     f01206ec <test_bsd_nice_2+0x184>
f0120647:	8b 04 85 34 f3 12 f0 	mov    -0xfed0ccc(,%eax,4),%eax
f012064e:	ff e0                	jmp    *%eax
			{
			case -15:
				prog_orders[0][nice_count[0]++] = env->env_id;
f0120650:	a1 3c ec 59 f0       	mov    0xf059ec3c,%eax
f0120655:	8d 50 01             	lea    0x1(%eax),%edx
f0120658:	89 15 3c ec 59 f0    	mov    %edx,0xf059ec3c
f012065e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0120661:	8b 52 10             	mov    0x10(%edx),%edx
f0120664:	89 14 85 80 42 5c f0 	mov    %edx,-0xfa3bd80(,%eax,4)
				break;
f012066b:	eb 7f                	jmp    f01206ec <test_bsd_nice_2+0x184>
			case -5:
				prog_orders[1][nice_count[1]++] = env->env_id;
f012066d:	a1 40 ec 59 f0       	mov    0xf059ec40,%eax
f0120672:	8d 50 01             	lea    0x1(%eax),%edx
f0120675:	89 15 40 ec 59 f0    	mov    %edx,0xf059ec40
f012067b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f012067e:	8b 52 10             	mov    0x10(%edx),%edx
f0120681:	83 c0 0a             	add    $0xa,%eax
f0120684:	89 14 85 80 42 5c f0 	mov    %edx,-0xfa3bd80(,%eax,4)
				break;
f012068b:	eb 5f                	jmp    f01206ec <test_bsd_nice_2+0x184>
			case 0:
				prog_orders[2][nice_count[2]++] = env->env_id;
f012068d:	a1 44 ec 59 f0       	mov    0xf059ec44,%eax
f0120692:	8d 50 01             	lea    0x1(%eax),%edx
f0120695:	89 15 44 ec 59 f0    	mov    %edx,0xf059ec44
f012069b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f012069e:	8b 52 10             	mov    0x10(%edx),%edx
f01206a1:	83 c0 14             	add    $0x14,%eax
f01206a4:	89 14 85 80 42 5c f0 	mov    %edx,-0xfa3bd80(,%eax,4)
				break;
f01206ab:	eb 3f                	jmp    f01206ec <test_bsd_nice_2+0x184>
			case 5:
				prog_orders[3][nice_count[3]++] = env->env_id;
f01206ad:	a1 48 ec 59 f0       	mov    0xf059ec48,%eax
f01206b2:	8d 50 01             	lea    0x1(%eax),%edx
f01206b5:	89 15 48 ec 59 f0    	mov    %edx,0xf059ec48
f01206bb:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01206be:	8b 52 10             	mov    0x10(%edx),%edx
f01206c1:	83 c0 1e             	add    $0x1e,%eax
f01206c4:	89 14 85 80 42 5c f0 	mov    %edx,-0xfa3bd80(,%eax,4)
				break;
f01206cb:	eb 1f                	jmp    f01206ec <test_bsd_nice_2+0x184>
			case 15:
				prog_orders[4][nice_count[4]++] = env->env_id;
f01206cd:	a1 4c ec 59 f0       	mov    0xf059ec4c,%eax
f01206d2:	8d 50 01             	lea    0x1(%eax),%edx
f01206d5:	89 15 4c ec 59 f0    	mov    %edx,0xf059ec4c
f01206db:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01206de:	8b 52 10             	mov    0x10(%edx),%edx
f01206e1:	83 c0 28             	add    $0x28,%eax
f01206e4:	89 14 85 80 42 5c f0 	mov    %edx,-0xfa3bd80(,%eax,4)
				break;
f01206eb:	90                   	nop
			}
			sched_new_env(env);
f01206ec:	83 ec 0c             	sub    $0xc,%esp
f01206ef:	ff 75 d4             	pushl  -0x2c(%ebp)
f01206f2:	e8 ae 4f fe ff       	call   f01056a5 <sched_new_env>
f01206f7:	83 c4 10             	add    $0x10,%esp
	if (firstTimeTestBSD)
	{
		chksch(1);
		firstTimeTestBSD = 0;
		int nice_values[] = {15, 5, 0, -5, -15};
		for (int i = 0; i < INSTANCES_NUMBER; i++)
f01206fa:	ff 45 e4             	incl   -0x1c(%ebp)
f01206fd:	83 7d e4 09          	cmpl   $0x9,-0x1c(%ebp)
f0120701:	0f 8e ac fe ff ff    	jle    f01205b3 <test_bsd_nice_2+0x4b>
				break;
			}
			sched_new_env(env);
		}
		// print_order(prog_orders);
		cprintf("> Running... (After all running programs finish, Run the same command again.)\n");
f0120707:	83 ec 0c             	sub    $0xc,%esp
f012070a:	68 d4 f0 12 f0       	push   $0xf012f0d4
f012070f:	e8 58 08 fe ff       	call   f0100f6c <cprintf>
f0120714:	83 c4 10             	add    $0x10,%esp
		execute_command("runall");
f0120717:	83 ec 0c             	sub    $0xc,%esp
f012071a:	68 23 f1 12 f0       	push   $0xf012f123
f012071f:	e8 b8 17 fe ff       	call   f0101edc <execute_command>
f0120724:	83 c4 10             	add    $0x10,%esp
f0120727:	e9 d0 00 00 00       	jmp    f01207fc <test_bsd_nice_2+0x294>
	}
	else
	{
		chksch(0);
f012072c:	83 ec 0c             	sub    $0xc,%esp
f012072f:	6a 00                	push   $0x0
f0120731:	e8 5f 0e 00 00       	call   f0121595 <chksch>
f0120736:	83 c4 10             	add    $0x10,%esp
		cprintf("> Checking...\n");
f0120739:	83 ec 0c             	sub    $0xc,%esp
f012073c:	68 2a f1 12 f0       	push   $0xf012f12a
f0120741:	e8 26 08 fe ff       	call   f0100f6c <cprintf>
f0120746:	83 c4 10             	add    $0x10,%esp
		sched_print_all();
f0120749:	e8 d3 56 fe ff       	call   f0105e21 <sched_print_all>
		// print_order(prog_orders);
		int start_idx = 0;
f012074e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		for (int i = 0; i < TOTAL_NICE_VALUES; i++)
f0120755:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012075c:	e9 8a 00 00 00       	jmp    f01207eb <test_bsd_nice_2+0x283>
		{
			for (int j = 0; prog_orders[i][j] != 0; j++)
f0120761:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0120768:	eb 55                	jmp    f01207bf <test_bsd_nice_2+0x257>
			{
				int exist = find_in_range(prog_orders[i][j], start_idx, nice_count[i]);
f012076a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012076d:	8b 14 85 3c ec 59 f0 	mov    -0xfa613c4(,%eax,4),%edx
f0120774:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f0120777:	89 c8                	mov    %ecx,%eax
f0120779:	c1 e0 02             	shl    $0x2,%eax
f012077c:	01 c8                	add    %ecx,%eax
f012077e:	01 c0                	add    %eax,%eax
f0120780:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f0120783:	01 c8                	add    %ecx,%eax
f0120785:	8b 04 85 80 42 5c f0 	mov    -0xfa3bd80(,%eax,4),%eax
f012078c:	83 ec 04             	sub    $0x4,%esp
f012078f:	52                   	push   %edx
f0120790:	ff 75 e0             	pushl  -0x20(%ebp)
f0120793:	50                   	push   %eax
f0120794:	e8 7f f8 ff ff       	call   f0120018 <find_in_range>
f0120799:	83 c4 10             	add    $0x10,%esp
f012079c:	89 45 cc             	mov    %eax,-0x34(%ebp)
				if (exist == -1)
f012079f:	83 7d cc ff          	cmpl   $0xffffffff,-0x34(%ebp)
f01207a3:	75 17                	jne    f01207bc <test_bsd_nice_2+0x254>
					panic("The programs' order of finishing is not correct\n");
f01207a5:	83 ec 04             	sub    $0x4,%esp
f01207a8:	68 3c f1 12 f0       	push   $0xf012f13c
f01207ad:	68 ea 00 00 00       	push   $0xea
f01207b2:	68 86 f0 12 f0       	push   $0xf012f086
f01207b7:	e8 5e fb fd ff       	call   f010031a <_panic>
		sched_print_all();
		// print_order(prog_orders);
		int start_idx = 0;
		for (int i = 0; i < TOTAL_NICE_VALUES; i++)
		{
			for (int j = 0; prog_orders[i][j] != 0; j++)
f01207bc:	ff 45 d8             	incl   -0x28(%ebp)
f01207bf:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01207c2:	89 d0                	mov    %edx,%eax
f01207c4:	c1 e0 02             	shl    $0x2,%eax
f01207c7:	01 d0                	add    %edx,%eax
f01207c9:	01 c0                	add    %eax,%eax
f01207cb:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01207ce:	01 d0                	add    %edx,%eax
f01207d0:	8b 04 85 80 42 5c f0 	mov    -0xfa3bd80(,%eax,4),%eax
f01207d7:	85 c0                	test   %eax,%eax
f01207d9:	75 8f                	jne    f012076a <test_bsd_nice_2+0x202>
			{
				int exist = find_in_range(prog_orders[i][j], start_idx, nice_count[i]);
				if (exist == -1)
					panic("The programs' order of finishing is not correct\n");
			}
			start_idx += nice_count[i];
f01207db:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01207de:	8b 04 85 3c ec 59 f0 	mov    -0xfa613c4(,%eax,4),%eax
f01207e5:	01 45 e0             	add    %eax,-0x20(%ebp)
		chksch(0);
		cprintf("> Checking...\n");
		sched_print_all();
		// print_order(prog_orders);
		int start_idx = 0;
		for (int i = 0; i < TOTAL_NICE_VALUES; i++)
f01207e8:	ff 45 dc             	incl   -0x24(%ebp)
f01207eb:	83 7d dc 04          	cmpl   $0x4,-0x24(%ebp)
f01207ef:	0f 8e 6c ff ff ff    	jle    f0120761 <test_bsd_nice_2+0x1f9>
				if (exist == -1)
					panic("The programs' order of finishing is not correct\n");
			}
			start_idx += nice_count[i];
		}
		firstTimeTestBSD = 0;
f01207f5:	c6 05 dd dd 17 f0 00 	movb   $0x0,0xf017dddd
	}
	cprintf("\nCongratulations!! test_bsd_nice_2 completed successfully.\n");
f01207fc:	83 ec 0c             	sub    $0xc,%esp
f01207ff:	68 e4 f2 12 f0       	push   $0xf012f2e4
f0120804:	e8 63 07 fe ff       	call   f0100f6c <cprintf>
f0120809:	83 c4 10             	add    $0x10,%esp
}
f012080c:	90                   	nop
f012080d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0120810:	5b                   	pop    %ebx
f0120811:	5e                   	pop    %esi
f0120812:	5f                   	pop    %edi
f0120813:	5d                   	pop    %ebp
f0120814:	c3                   	ret    

f0120815 <__mk_fix>:
fixed_point_t;

/* Returns a fixed-point number with F as its internal value. */
static inline fixed_point_t
__mk_fix (int f)
{
f0120815:	55                   	push   %ebp
f0120816:	89 e5                	mov    %esp,%ebp
f0120818:	83 ec 10             	sub    $0x10,%esp
  fixed_point_t x;
  x.f = f;
f012081b:	8b 45 0c             	mov    0xc(%ebp),%eax
f012081e:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return x;
f0120821:	8b 45 08             	mov    0x8(%ebp),%eax
f0120824:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0120827:	89 10                	mov    %edx,(%eax)
}
f0120829:	8b 45 08             	mov    0x8(%ebp),%eax
f012082c:	c9                   	leave  
f012082d:	c2 04 00             	ret    $0x4

f0120830 <fix_round>:
}

/* Returns X rounded to the nearest integer. */
static inline int
fix_round (fixed_point_t x)
{
f0120830:	55                   	push   %ebp
f0120831:	89 e5                	mov    %esp,%ebp
	if (x.f >= 0)
f0120833:	8b 45 08             	mov    0x8(%ebp),%eax
f0120836:	85 c0                	test   %eax,%eax
f0120838:	78 16                	js     f0120850 <fix_round+0x20>
		return (x.f + FIX_F / 2) / FIX_F;
f012083a:	8b 45 08             	mov    0x8(%ebp),%eax
f012083d:	05 00 20 00 00       	add    $0x2000,%eax
f0120842:	85 c0                	test   %eax,%eax
f0120844:	79 05                	jns    f012084b <fix_round+0x1b>
f0120846:	05 ff 3f 00 00       	add    $0x3fff,%eax
f012084b:	c1 f8 0e             	sar    $0xe,%eax
f012084e:	eb 14                	jmp    f0120864 <fix_round+0x34>
	else
		return (x.f - FIX_F / 2) / FIX_F;
f0120850:	8b 45 08             	mov    0x8(%ebp),%eax
f0120853:	2d 00 20 00 00       	sub    $0x2000,%eax
f0120858:	85 c0                	test   %eax,%eax
f012085a:	79 05                	jns    f0120861 <fix_round+0x31>
f012085c:	05 ff 3f 00 00       	add    $0x3fff,%eax
f0120861:	c1 f8 0e             	sar    $0xe,%eax
}
f0120864:	5d                   	pop    %ebp
f0120865:	c3                   	ret    

f0120866 <fix_scale>:
}

/* Returns X * N. */
static inline fixed_point_t
fix_scale (fixed_point_t x, int n)
{
f0120866:	55                   	push   %ebp
f0120867:	89 e5                	mov    %esp,%ebp
f0120869:	83 ec 08             	sub    $0x8,%esp
	assert (n >= 0);
f012086c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0120870:	79 16                	jns    f0120888 <fix_scale+0x22>
f0120872:	68 b0 f3 12 f0       	push   $0xf012f3b0
f0120877:	68 b7 f3 12 f0       	push   $0xf012f3b7
f012087c:	6a 5a                	push   $0x5a
f012087e:	68 cc f3 12 f0       	push   $0xf012f3cc
f0120883:	e8 92 fa fd ff       	call   f010031a <_panic>
  return __mk_fix (x.f * n);
f0120888:	8b 45 0c             	mov    0xc(%ebp),%eax
f012088b:	0f af 45 10          	imul   0x10(%ebp),%eax
f012088f:	89 c2                	mov    %eax,%edx
f0120891:	8b 45 08             	mov    0x8(%ebp),%eax
f0120894:	83 ec 08             	sub    $0x8,%esp
f0120897:	52                   	push   %edx
f0120898:	50                   	push   %eax
f0120899:	e8 77 ff ff ff       	call   f0120815 <__mk_fix>
f012089e:	83 c4 0c             	add    $0xc,%esp
}
f01208a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01208a4:	c9                   	leave  
f01208a5:	c2 04 00             	ret    $0x4

f01208a8 <rsttst>:
#include "../cons/console.h"

#include <kern/trap/fault_handler.h>

void rsttst()
{
f01208a8:	55                   	push   %ebp
f01208a9:	89 e5                	mov    %esp,%ebp
f01208ab:	83 ec 08             	sub    $0x8,%esp
	init_spinlock(&tstcntlock, "tstcnt lock");
f01208ae:	83 ec 08             	sub    $0x8,%esp
f01208b1:	68 e0 f3 12 f0       	push   $0xf012f3e0
f01208b6:	68 a0 1b 5a f0       	push   $0xf05a1ba0
f01208bb:	e8 30 e2 fe ff       	call   f010eaf0 <init_spinlock>
f01208c0:	83 c4 10             	add    $0x10,%esp
	acquire_spinlock(&tstcntlock);
f01208c3:	83 ec 0c             	sub    $0xc,%esp
f01208c6:	68 a0 1b 5a f0       	push   $0xf05a1ba0
f01208cb:	e8 51 e2 fe ff       	call   f010eb21 <acquire_spinlock>
f01208d0:	83 c4 10             	add    $0x10,%esp
	{
		tstcnt = 0;
f01208d3:	c7 05 88 ed 59 f0 00 	movl   $0x0,0xf059ed88
f01208da:	00 00 00 
	}
	release_spinlock(&tstcntlock);
f01208dd:	83 ec 0c             	sub    $0xc,%esp
f01208e0:	68 a0 1b 5a f0       	push   $0xf05a1ba0
f01208e5:	e8 be e2 fe ff       	call   f010eba8 <release_spinlock>
f01208ea:	83 c4 10             	add    $0x10,%esp
}
f01208ed:	90                   	nop
f01208ee:	c9                   	leave  
f01208ef:	c3                   	ret    

f01208f0 <inctst>:
void inctst()
{
f01208f0:	55                   	push   %ebp
f01208f1:	89 e5                	mov    %esp,%ebp
f01208f3:	83 ec 08             	sub    $0x8,%esp
	acquire_spinlock(&tstcntlock);
f01208f6:	83 ec 0c             	sub    $0xc,%esp
f01208f9:	68 a0 1b 5a f0       	push   $0xf05a1ba0
f01208fe:	e8 1e e2 fe ff       	call   f010eb21 <acquire_spinlock>
f0120903:	83 c4 10             	add    $0x10,%esp
	{
		tstcnt++;
f0120906:	a1 88 ed 59 f0       	mov    0xf059ed88,%eax
f012090b:	40                   	inc    %eax
f012090c:	a3 88 ed 59 f0       	mov    %eax,0xf059ed88
	}
	release_spinlock(&tstcntlock);
f0120911:	83 ec 0c             	sub    $0xc,%esp
f0120914:	68 a0 1b 5a f0       	push   $0xf05a1ba0
f0120919:	e8 8a e2 fe ff       	call   f010eba8 <release_spinlock>
f012091e:	83 c4 10             	add    $0x10,%esp
}
f0120921:	90                   	nop
f0120922:	c9                   	leave  
f0120923:	c3                   	ret    

f0120924 <gettst>:
uint32 gettst()
{
f0120924:	55                   	push   %ebp
f0120925:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f0120927:	a1 88 ed 59 f0       	mov    0xf059ed88,%eax
}
f012092c:	5d                   	pop    %ebp
f012092d:	c3                   	ret    

f012092e <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f012092e:	55                   	push   %ebp
f012092f:	89 e5                	mov    %esp,%ebp
f0120931:	83 ec 28             	sub    $0x28,%esp
f0120934:	8b 45 14             	mov    0x14(%ebp),%eax
f0120937:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f012093a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f0120941:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f0120945:	83 f8 65             	cmp    $0x65,%eax
f0120948:	74 5d                	je     f01209a7 <tst+0x79>
f012094a:	83 f8 65             	cmp    $0x65,%eax
f012094d:	7f 0a                	jg     f0120959 <tst+0x2b>
f012094f:	83 f8 62             	cmp    $0x62,%eax
f0120952:	74 73                	je     f01209c7 <tst+0x99>
f0120954:	e9 91 00 00 00       	jmp    f01209ea <tst+0xbc>
f0120959:	83 f8 67             	cmp    $0x67,%eax
f012095c:	74 29                	je     f0120987 <tst+0x59>
f012095e:	83 f8 6c             	cmp    $0x6c,%eax
f0120961:	0f 85 83 00 00 00    	jne    f01209ea <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f0120967:	8b 45 08             	mov    0x8(%ebp),%eax
f012096a:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012096d:	73 09                	jae    f0120978 <tst+0x4a>
			chk = 1;
f012096f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f0120976:	eb 68                	jmp    f01209e0 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f0120978:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012097c:	74 62                	je     f01209e0 <tst+0xb2>
			chk = 1;
f012097e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f0120985:	eb 59                	jmp    f01209e0 <tst+0xb2>
	case 'g':
		if (n > v1)
f0120987:	8b 45 08             	mov    0x8(%ebp),%eax
f012098a:	3b 45 0c             	cmp    0xc(%ebp),%eax
f012098d:	76 09                	jbe    f0120998 <tst+0x6a>
			chk = 1;
f012098f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f0120996:	eb 4b                	jmp    f01209e3 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f0120998:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f012099c:	74 45                	je     f01209e3 <tst+0xb5>
			chk = 1;
f012099e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f01209a5:	eb 3c                	jmp    f01209e3 <tst+0xb5>
	case 'e':
		if (n == v1)
f01209a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01209aa:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01209ad:	75 09                	jne    f01209b8 <tst+0x8a>
			chk = 1;
f01209af:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f01209b6:	eb 2e                	jmp    f01209e6 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f01209b8:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f01209bc:	74 28                	je     f01209e6 <tst+0xb8>
			chk = 1;
f01209be:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f01209c5:	eb 1f                	jmp    f01209e6 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v2)
f01209c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01209ca:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01209cd:	72 1a                	jb     f01209e9 <tst+0xbb>
f01209cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01209d2:	3b 45 10             	cmp    0x10(%ebp),%eax
f01209d5:	77 12                	ja     f01209e9 <tst+0xbb>
			chk = 1;
f01209d7:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f01209de:	eb 09                	jmp    f01209e9 <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f01209e0:	90                   	nop
f01209e1:	eb 07                	jmp    f01209ea <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f01209e3:	90                   	nop
f01209e4:	eb 04                	jmp    f01209ea <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f01209e6:	90                   	nop
f01209e7:	eb 01                	jmp    f01209ea <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v2)
			chk = 1;
		break;
f01209e9:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f01209ea:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01209ee:	75 14                	jne    f0120a04 <tst+0xd6>
f01209f0:	83 ec 04             	sub    $0x4,%esp
f01209f3:	68 ec f3 12 f0       	push   $0xf012f3ec
f01209f8:	6a 48                	push   $0x48
f01209fa:	68 ff f3 12 f0       	push   $0xf012f3ff
f01209ff:	e8 16 f9 fd ff       	call   f010031a <_panic>

	acquire_spinlock(&tstcntlock);
f0120a04:	83 ec 0c             	sub    $0xc,%esp
f0120a07:	68 a0 1b 5a f0       	push   $0xf05a1ba0
f0120a0c:	e8 10 e1 fe ff       	call   f010eb21 <acquire_spinlock>
f0120a11:	83 c4 10             	add    $0x10,%esp
	{
		tstcnt++ ;
f0120a14:	a1 88 ed 59 f0       	mov    0xf059ed88,%eax
f0120a19:	40                   	inc    %eax
f0120a1a:	a3 88 ed 59 f0       	mov    %eax,0xf059ed88
	}
	release_spinlock(&tstcntlock);
f0120a1f:	83 ec 0c             	sub    $0xc,%esp
f0120a22:	68 a0 1b 5a f0       	push   $0xf05a1ba0
f0120a27:	e8 7c e1 fe ff       	call   f010eba8 <release_spinlock>
f0120a2c:	83 c4 10             	add    $0x10,%esp

	return;
f0120a2f:	90                   	nop
}
f0120a30:	c9                   	leave  
f0120a31:	c3                   	ret    

f0120a32 <chktst>:

void chktst(uint32 n)
{
f0120a32:	55                   	push   %ebp
f0120a33:	89 e5                	mov    %esp,%ebp
f0120a35:	83 ec 18             	sub    $0x18,%esp
	int __tstcnt;
	acquire_spinlock(&tstcntlock);
f0120a38:	83 ec 0c             	sub    $0xc,%esp
f0120a3b:	68 a0 1b 5a f0       	push   $0xf05a1ba0
f0120a40:	e8 dc e0 fe ff       	call   f010eb21 <acquire_spinlock>
f0120a45:	83 c4 10             	add    $0x10,%esp
	{
		__tstcnt = tstcnt;
f0120a48:	a1 88 ed 59 f0       	mov    0xf059ed88,%eax
f0120a4d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}
	release_spinlock(&tstcntlock);
f0120a50:	83 ec 0c             	sub    $0xc,%esp
f0120a53:	68 a0 1b 5a f0       	push   $0xf05a1ba0
f0120a58:	e8 4b e1 fe ff       	call   f010eba8 <release_spinlock>
f0120a5d:	83 c4 10             	add    $0x10,%esp
	if (__tstcnt == n)
f0120a60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120a63:	3b 45 08             	cmp    0x8(%ebp),%eax
f0120a66:	75 12                	jne    f0120a7a <chktst+0x48>
		cprintf("\nCongratulations... test runs successfully\n");
f0120a68:	83 ec 0c             	sub    $0xc,%esp
f0120a6b:	68 18 f4 12 f0       	push   $0xf012f418
f0120a70:	e8 f7 04 fe ff       	call   f0100f6c <cprintf>
f0120a75:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f0120a78:	eb 14                	jmp    f0120a8e <chktst+0x5c>
	}
	release_spinlock(&tstcntlock);
	if (__tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f0120a7a:	83 ec 04             	sub    $0x4,%esp
f0120a7d:	68 44 f4 12 f0       	push   $0xf012f444
f0120a82:	6a 5e                	push   $0x5e
f0120a84:	68 ff f3 12 f0       	push   $0xf012f3ff
f0120a89:	e8 8c f8 fd ff       	call   f010031a <_panic>
}
f0120a8e:	c9                   	leave  
f0120a8f:	c3                   	ret    

f0120a90 <nearest_pow2_ceil>:

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f0120a90:	55                   	push   %ebp
f0120a91:	89 e5                	mov    %esp,%ebp
f0120a93:	83 ec 10             	sub    $0x10,%esp
	if (x <= 1) return 1;
f0120a96:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0120a9a:	77 07                	ja     f0120aa3 <nearest_pow2_ceil+0x13>
f0120a9c:	b8 01 00 00 00       	mov    $0x1,%eax
f0120aa1:	eb 20                	jmp    f0120ac3 <nearest_pow2_ceil+0x33>
	int power = 2;
f0120aa3:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
	x--;
f0120aaa:	ff 4d 08             	decl   0x8(%ebp)
	while (x >>= 1) {
f0120aad:	eb 08                	jmp    f0120ab7 <nearest_pow2_ceil+0x27>
		power <<= 1;
f0120aaf:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0120ab2:	01 c0                	add    %eax,%eax
f0120ab4:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
	if (x <= 1) return 1;
	int power = 2;
	x--;
	while (x >>= 1) {
f0120ab7:	d1 6d 08             	shrl   0x8(%ebp)
f0120aba:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0120abe:	75 ef                	jne    f0120aaf <nearest_pow2_ceil+0x1f>
		power <<= 1;
	}
	return power;
f0120ac0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0120ac3:	c9                   	leave  
f0120ac4:	c3                   	ret    

f0120ac5 <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f0120ac5:	55                   	push   %ebp
f0120ac6:	89 e5                	mov    %esp,%ebp
f0120ac8:	83 ec 10             	sub    $0x10,%esp
	if (x <= 1) return 1;
f0120acb:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0120acf:	77 07                	ja     f0120ad8 <log2_ceil+0x13>
f0120ad1:	b8 01 00 00 00       	mov    $0x1,%eax
f0120ad6:	eb 1b                	jmp    f0120af3 <log2_ceil+0x2e>
	//int power = 2;
	int bits_cnt = 2 ;
f0120ad8:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
	x--;
f0120adf:	ff 4d 08             	decl   0x8(%ebp)
	while (x >>= 1) {
f0120ae2:	eb 03                	jmp    f0120ae7 <log2_ceil+0x22>
		//power <<= 1;
		bits_cnt++ ;
f0120ae4:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
	if (x <= 1) return 1;
	//int power = 2;
	int bits_cnt = 2 ;
	x--;
	while (x >>= 1) {
f0120ae7:	d1 6d 08             	shrl   0x8(%ebp)
f0120aea:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0120aee:	75 f4                	jne    f0120ae4 <log2_ceil+0x1f>
		//power <<= 1;
		bits_cnt++ ;
	}
	return bits_cnt;
f0120af0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0120af3:	c9                   	leave  
f0120af4:	c3                   	ret    

f0120af5 <fixedPt2Str>:

/*2023*/
void fixedPt2Str(fixed_point_t f, int num_dec_digits, char* output)
{
f0120af5:	55                   	push   %ebp
f0120af6:	89 e5                	mov    %esp,%ebp
f0120af8:	83 ec 78             	sub    $0x78,%esp
	int mulFactor = 1;
f0120afb:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	for (int i = 0; i < num_dec_digits; ++i) {
f0120b02:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0120b09:	eb 12                	jmp    f0120b1d <fixedPt2Str+0x28>
		mulFactor *= 10;
f0120b0b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120b0e:	89 d0                	mov    %edx,%eax
f0120b10:	c1 e0 02             	shl    $0x2,%eax
f0120b13:	01 d0                	add    %edx,%eax
f0120b15:	01 c0                	add    %eax,%eax
f0120b17:	89 45 f4             	mov    %eax,-0xc(%ebp)

/*2023*/
void fixedPt2Str(fixed_point_t f, int num_dec_digits, char* output)
{
	int mulFactor = 1;
	for (int i = 0; i < num_dec_digits; ++i) {
f0120b1a:	ff 45 f0             	incl   -0x10(%ebp)
f0120b1d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0120b20:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0120b23:	7c e6                	jl     f0120b0b <fixedPt2Str+0x16>
		mulFactor *= 10;
	}
	int scaledVal = fix_round(fix_scale(f, mulFactor)) ;
f0120b25:	8d 45 dc             	lea    -0x24(%ebp),%eax
f0120b28:	83 ec 04             	sub    $0x4,%esp
f0120b2b:	ff 75 f4             	pushl  -0xc(%ebp)
f0120b2e:	ff 75 08             	pushl  0x8(%ebp)
f0120b31:	50                   	push   %eax
f0120b32:	e8 2f fd ff ff       	call   f0120866 <fix_scale>
f0120b37:	83 c4 0c             	add    $0xc,%esp
f0120b3a:	83 ec 0c             	sub    $0xc,%esp
f0120b3d:	ff 75 dc             	pushl  -0x24(%ebp)
f0120b40:	e8 eb fc ff ff       	call   f0120830 <fix_round>
f0120b45:	83 c4 10             	add    $0x10,%esp
f0120b48:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int integer = scaledVal/mulFactor;
f0120b4b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0120b4e:	99                   	cltd   
f0120b4f:	f7 7d f4             	idivl  -0xc(%ebp)
f0120b52:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	int fraction = scaledVal%mulFactor;
f0120b55:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0120b58:	99                   	cltd   
f0120b59:	f7 7d f4             	idivl  -0xc(%ebp)
f0120b5c:	89 55 e0             	mov    %edx,-0x20(%ebp)
	char intPart[20] ; ltostr(integer, intPart);
f0120b5f:	83 ec 08             	sub    $0x8,%esp
f0120b62:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0120b65:	50                   	push   %eax
f0120b66:	ff 75 e4             	pushl  -0x1c(%ebp)
f0120b69:	e8 70 1d 00 00       	call   f01228de <ltostr>
f0120b6e:	83 c4 10             	add    $0x10,%esp
	char fractPart[20] ; ltostr(fraction, fractPart);
f0120b71:	83 ec 08             	sub    $0x8,%esp
f0120b74:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0120b77:	50                   	push   %eax
f0120b78:	ff 75 e0             	pushl  -0x20(%ebp)
f0120b7b:	e8 5e 1d 00 00       	call   f01228de <ltostr>
f0120b80:	83 c4 10             	add    $0x10,%esp
	int tmp = mulFactor / 10;
f0120b83:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120b86:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0120b8b:	f7 e9                	imul   %ecx
f0120b8d:	c1 fa 02             	sar    $0x2,%edx
f0120b90:	89 c8                	mov    %ecx,%eax
f0120b92:	c1 f8 1f             	sar    $0x1f,%eax
f0120b95:	29 c2                	sub    %eax,%edx
f0120b97:	89 d0                	mov    %edx,%eax
f0120b99:	89 45 ec             	mov    %eax,-0x14(%ebp)

	char zeros[10] = "";
f0120b9c:	c7 45 aa 00 00 00 00 	movl   $0x0,-0x56(%ebp)
f0120ba3:	c7 45 ae 00 00 00 00 	movl   $0x0,-0x52(%ebp)
f0120baa:	66 c7 45 b2 00 00    	movw   $0x0,-0x4e(%ebp)
	while (fraction < tmp)
f0120bb0:	eb 31                	jmp    f0120be3 <fixedPt2Str+0xee>
	{
		strcconcat("0", zeros, zeros);
f0120bb2:	83 ec 04             	sub    $0x4,%esp
f0120bb5:	8d 45 aa             	lea    -0x56(%ebp),%eax
f0120bb8:	50                   	push   %eax
f0120bb9:	8d 45 aa             	lea    -0x56(%ebp),%eax
f0120bbc:	50                   	push   %eax
f0120bbd:	68 60 f4 12 f0       	push   $0xf012f460
f0120bc2:	e8 f0 1d 00 00       	call   f01229b7 <strcconcat>
f0120bc7:	83 c4 10             	add    $0x10,%esp
		tmp /= 10;
f0120bca:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0120bcd:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0120bd2:	f7 e9                	imul   %ecx
f0120bd4:	c1 fa 02             	sar    $0x2,%edx
f0120bd7:	89 c8                	mov    %ecx,%eax
f0120bd9:	c1 f8 1f             	sar    $0x1f,%eax
f0120bdc:	29 c2                	sub    %eax,%edx
f0120bde:	89 d0                	mov    %edx,%eax
f0120be0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	char intPart[20] ; ltostr(integer, intPart);
	char fractPart[20] ; ltostr(fraction, fractPart);
	int tmp = mulFactor / 10;

	char zeros[10] = "";
	while (fraction < tmp)
f0120be3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0120be6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0120be9:	7c c7                	jl     f0120bb2 <fixedPt2Str+0xbd>
	{
		strcconcat("0", zeros, zeros);
		tmp /= 10;
	}
	char fractPart2[20];
	strcconcat(zeros, fractPart, fractPart2);
f0120beb:	83 ec 04             	sub    $0x4,%esp
f0120bee:	8d 45 96             	lea    -0x6a(%ebp),%eax
f0120bf1:	50                   	push   %eax
f0120bf2:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0120bf5:	50                   	push   %eax
f0120bf6:	8d 45 aa             	lea    -0x56(%ebp),%eax
f0120bf9:	50                   	push   %eax
f0120bfa:	e8 b8 1d 00 00       	call   f01229b7 <strcconcat>
f0120bff:	83 c4 10             	add    $0x10,%esp

	//cprintf("integer = %d, intPart = %s - fraction = %d, fractPart = %s\n", integer, intPart, fraction , fractPart2);
	strcconcat(intPart, ".", intPart);
f0120c02:	83 ec 04             	sub    $0x4,%esp
f0120c05:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0120c08:	50                   	push   %eax
f0120c09:	68 62 f4 12 f0       	push   $0xf012f462
f0120c0e:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0120c11:	50                   	push   %eax
f0120c12:	e8 a0 1d 00 00       	call   f01229b7 <strcconcat>
f0120c17:	83 c4 10             	add    $0x10,%esp
	strcconcat(intPart, fractPart2, output);
f0120c1a:	83 ec 04             	sub    $0x4,%esp
f0120c1d:	ff 75 10             	pushl  0x10(%ebp)
f0120c20:	8d 45 96             	lea    -0x6a(%ebp),%eax
f0120c23:	50                   	push   %eax
f0120c24:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0120c27:	50                   	push   %eax
f0120c28:	e8 8a 1d 00 00       	call   f01229b7 <strcconcat>
f0120c2d:	83 c4 10             	add    $0x10,%esp

}
f0120c30:	90                   	nop
f0120c31:	c9                   	leave  
f0120c32:	c3                   	ret    

f0120c33 <sys_utilities>:

int __firstTimeSleep = 1;
struct Channel __tstchan__ ;
struct spinlock __tstchan_lk__;
void sys_utilities(char* utilityName, int value)
{
f0120c33:	55                   	push   %ebp
f0120c34:	89 e5                	mov    %esp,%ebp
f0120c36:	81 ec 88 00 00 00    	sub    $0x88,%esp
	if (strncmp(utilityName, "__BSDSetNice@", strlen("__BSDSetNice@")) == 0)
f0120c3c:	83 ec 0c             	sub    $0xc,%esp
f0120c3f:	68 64 f4 12 f0       	push   $0xf012f464
f0120c44:	e8 ef 17 00 00       	call   f0122438 <strlen>
f0120c49:	83 c4 10             	add    $0x10,%esp
f0120c4c:	83 ec 04             	sub    $0x4,%esp
f0120c4f:	50                   	push   %eax
f0120c50:	68 64 f4 12 f0       	push   $0xf012f464
f0120c55:	ff 75 08             	pushl  0x8(%ebp)
f0120c58:	e8 1f 19 00 00       	call   f012257c <strncmp>
f0120c5d:	83 c4 10             	add    $0x10,%esp
f0120c60:	85 c0                	test   %eax,%eax
f0120c62:	0f 85 84 00 00 00    	jne    f0120cec <sys_utilities+0xb9>
	{
		int number_of_tokens;
		//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
		char *tokens[MAX_ARGUMENTS];
		strsplit(utilityName, "@", tokens, &number_of_tokens) ;
f0120c68:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0120c6b:	50                   	push   %eax
f0120c6c:	8d 45 80             	lea    -0x80(%ebp),%eax
f0120c6f:	50                   	push   %eax
f0120c70:	68 72 f4 12 f0       	push   $0xf012f472
f0120c75:	ff 75 08             	pushl  0x8(%ebp)
f0120c78:	e8 d0 1d 00 00       	call   f0122a4d <strsplit>
f0120c7d:	83 c4 10             	add    $0x10,%esp
		int envID = strtol(tokens[1], NULL, 10);
f0120c80:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0120c83:	83 ec 04             	sub    $0x4,%esp
f0120c86:	6a 0a                	push   $0xa
f0120c88:	6a 00                	push   $0x0
f0120c8a:	50                   	push   %eax
f0120c8b:	e8 08 1b 00 00       	call   f0122798 <strtol>
f0120c90:	83 c4 10             	add    $0x10,%esp
f0120c93:	89 45 e0             	mov    %eax,-0x20(%ebp)
		struct Env* env = NULL ;
f0120c96:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		envid2env(envID, &env, 0);
f0120c9d:	83 ec 04             	sub    $0x4,%esp
f0120ca0:	6a 00                	push   $0x0
f0120ca2:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f0120ca5:	50                   	push   %eax
f0120ca6:	ff 75 e0             	pushl  -0x20(%ebp)
f0120ca9:	e8 12 9b fe ff       	call   f010a7c0 <envid2env>
f0120cae:	83 c4 10             	add    $0x10,%esp
		assert(env->env_id == envID) ;
f0120cb1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0120cb4:	8b 40 10             	mov    0x10(%eax),%eax
f0120cb7:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0120cba:	74 19                	je     f0120cd5 <sys_utilities+0xa2>
f0120cbc:	68 74 f4 12 f0       	push   $0xf012f474
f0120cc1:	68 b7 f3 12 f0       	push   $0xf012f3b7
f0120cc6:	68 a1 00 00 00       	push   $0xa1
f0120ccb:	68 ff f3 12 f0       	push   $0xf012f3ff
f0120cd0:	e8 45 f6 fd ff       	call   f010031a <_panic>
		env_set_nice(env, value);
f0120cd5:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0120cd8:	83 ec 08             	sub    $0x8,%esp
f0120cdb:	ff 75 0c             	pushl  0xc(%ebp)
f0120cde:	50                   	push   %eax
f0120cdf:	e8 c3 59 fe ff       	call   f01066a7 <env_set_nice>
f0120ce4:	83 c4 10             	add    $0x10,%esp
f0120ce7:	e9 00 03 00 00       	jmp    f0120fec <sys_utilities+0x3b9>
	}
	else if (strncmp(utilityName, "__CheckExitOrder@", strlen("__CheckExitOrder@")) == 0)
f0120cec:	83 ec 0c             	sub    $0xc,%esp
f0120cef:	68 89 f4 12 f0       	push   $0xf012f489
f0120cf4:	e8 3f 17 00 00       	call   f0122438 <strlen>
f0120cf9:	83 c4 10             	add    $0x10,%esp
f0120cfc:	83 ec 04             	sub    $0x4,%esp
f0120cff:	50                   	push   %eax
f0120d00:	68 89 f4 12 f0       	push   $0xf012f489
f0120d05:	ff 75 08             	pushl  0x8(%ebp)
f0120d08:	e8 6f 18 00 00       	call   f012257c <strncmp>
f0120d0d:	83 c4 10             	add    $0x10,%esp
f0120d10:	85 c0                	test   %eax,%eax
f0120d12:	0f 85 a0 01 00 00    	jne    f0120eb8 <sys_utilities+0x285>
	{
		int* numOfInstances = (int*) value ;
f0120d18:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120d1b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int number_of_tokens;
		//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
		char *tokens[MAX_ARGUMENTS];
		strsplit(utilityName, "@", tokens, &number_of_tokens) ;
f0120d1e:	8d 45 c0             	lea    -0x40(%ebp),%eax
f0120d21:	50                   	push   %eax
f0120d22:	8d 45 80             	lea    -0x80(%ebp),%eax
f0120d25:	50                   	push   %eax
f0120d26:	68 72 f4 12 f0       	push   $0xf012f472
f0120d2b:	ff 75 08             	pushl  0x8(%ebp)
f0120d2e:	e8 1a 1d 00 00       	call   f0122a4d <strsplit>
f0120d33:	83 c4 10             	add    $0x10,%esp
		char *progName = tokens[1];
f0120d36:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0120d39:	89 45 d8             	mov    %eax,-0x28(%ebp)
		struct Env* env = NULL ;
f0120d3c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		bool chkAscending = 1;
f0120d43:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		int prevEnvID = -1 ;
f0120d4a:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)

		if (*numOfInstances < 0)
f0120d51:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120d54:	8b 00                	mov    (%eax),%eax
f0120d56:	85 c0                	test   %eax,%eax
f0120d58:	79 1c                	jns    f0120d76 <sys_utilities+0x143>
		{
			chkAscending = 0;
f0120d5a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			*numOfInstances *= -1;
f0120d61:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120d64:	8b 00                	mov    (%eax),%eax
f0120d66:	f7 d8                	neg    %eax
f0120d68:	89 c2                	mov    %eax,%edx
f0120d6a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120d6d:	89 10                	mov    %edx,(%eax)
			prevEnvID = 1<<30 ;
f0120d6f:	c7 45 ec 00 00 00 40 	movl   $0x40000000,-0x14(%ebp)
		}
		bool success = 1;
f0120d76:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)

		acquire_spinlock(&ProcessQueues.qlock);
f0120d7d:	83 ec 0c             	sub    $0xc,%esp
f0120d80:	68 00 ee 59 f0       	push   $0xf059ee00
f0120d85:	e8 97 dd fe ff       	call   f010eb21 <acquire_spinlock>
f0120d8a:	83 c4 10             	add    $0x10,%esp
		{
			//REVERSE LOOP ON EXIT LIST (to be the same as the queue order)
			int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
f0120d8d:	a1 8c ee 59 f0       	mov    0xf059ee8c,%eax
f0120d92:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			env = LIST_LAST(&ProcessQueues.env_exit_queue);
f0120d95:	a1 84 ee 59 f0       	mov    0xf059ee84,%eax
f0120d9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
			for (int i = numOfExitEnvs; i > 0; --i, env = LIST_PREV(env))
f0120d9d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0120da0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0120da3:	eb 6c                	jmp    f0120e11 <sys_utilities+0x1de>
			{
				if (strcmp(env->prog_name, progName) != 0)
f0120da5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120da8:	83 c0 20             	add    $0x20,%eax
f0120dab:	83 ec 08             	sub    $0x8,%esp
f0120dae:	ff 75 d8             	pushl  -0x28(%ebp)
f0120db1:	50                   	push   %eax
f0120db2:	e8 8d 17 00 00       	call   f0122544 <strcmp>
f0120db7:	83 c4 10             	add    $0x10,%esp
f0120dba:	85 c0                	test   %eax,%eax
f0120dbc:	75 46                	jne    f0120e04 <sys_utilities+0x1d1>
					continue;
				(*numOfInstances)-- ;
f0120dbe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120dc1:	8b 00                	mov    (%eax),%eax
f0120dc3:	8d 50 ff             	lea    -0x1(%eax),%edx
f0120dc6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120dc9:	89 10                	mov    %edx,(%eax)

				//cprintf("%s: prevID = %d, nextID = %d\n", progName, prevEnvID, env->env_id);
				if (chkAscending)
f0120dcb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0120dcf:	74 14                	je     f0120de5 <sys_utilities+0x1b2>
				{
					if (prevEnvID > env->env_id)
f0120dd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120dd4:	8b 40 10             	mov    0x10(%eax),%eax
f0120dd7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0120dda:	7d 1d                	jge    f0120df9 <sys_utilities+0x1c6>
					{
						success = 0;
f0120ddc:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
						break;
f0120de3:	eb 32                	jmp    f0120e17 <sys_utilities+0x1e4>
					}
				}
				else
				{
					if (prevEnvID < env->env_id)
f0120de5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120de8:	8b 40 10             	mov    0x10(%eax),%eax
f0120deb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0120dee:	7e 09                	jle    f0120df9 <sys_utilities+0x1c6>
					{
						success = 0;
f0120df0:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
						break;
f0120df7:	eb 1e                	jmp    f0120e17 <sys_utilities+0x1e4>
					}
				}
				prevEnvID = env->env_id;
f0120df9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120dfc:	8b 40 10             	mov    0x10(%eax),%eax
f0120dff:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0120e02:	eb 01                	jmp    f0120e05 <sys_utilities+0x1d2>
			int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
			env = LIST_LAST(&ProcessQueues.env_exit_queue);
			for (int i = numOfExitEnvs; i > 0; --i, env = LIST_PREV(env))
			{
				if (strcmp(env->prog_name, progName) != 0)
					continue;
f0120e04:	90                   	nop
		acquire_spinlock(&ProcessQueues.qlock);
		{
			//REVERSE LOOP ON EXIT LIST (to be the same as the queue order)
			int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
			env = LIST_LAST(&ProcessQueues.env_exit_queue);
			for (int i = numOfExitEnvs; i > 0; --i, env = LIST_PREV(env))
f0120e05:	ff 4d e4             	decl   -0x1c(%ebp)
f0120e08:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120e0b:	8b 40 0c             	mov    0xc(%eax),%eax
f0120e0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0120e11:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0120e15:	7f 8e                	jg     f0120da5 <sys_utilities+0x172>
					}
				}
				prevEnvID = env->env_id;
			}
		}
		release_spinlock(&ProcessQueues.qlock);
f0120e17:	83 ec 0c             	sub    $0xc,%esp
f0120e1a:	68 00 ee 59 f0       	push   $0xf059ee00
f0120e1f:	e8 84 dd fe ff       	call   f010eba8 <release_spinlock>
f0120e24:	83 c4 10             	add    $0x10,%esp
		if (*numOfInstances != 0 || success == 0)
f0120e27:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120e2a:	8b 00                	mov    (%eax),%eax
f0120e2c:	85 c0                	test   %eax,%eax
f0120e2e:	75 06                	jne    f0120e36 <sys_utilities+0x203>
f0120e30:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0120e34:	75 41                	jne    f0120e77 <sys_utilities+0x244>
		{
			cprintf("###########################################\n");
f0120e36:	83 ec 0c             	sub    $0xc,%esp
f0120e39:	68 9c f4 12 f0       	push   $0xf012f49c
f0120e3e:	e8 29 01 fe ff       	call   f0100f6c <cprintf>
f0120e43:	83 c4 10             	add    $0x10,%esp
			cprintf("%s: check exit order is FAILED\n", progName);
f0120e46:	83 ec 08             	sub    $0x8,%esp
f0120e49:	ff 75 d8             	pushl  -0x28(%ebp)
f0120e4c:	68 cc f4 12 f0       	push   $0xf012f4cc
f0120e51:	e8 16 01 fe ff       	call   f0100f6c <cprintf>
f0120e56:	83 c4 10             	add    $0x10,%esp
			cprintf("###########################################\n");
f0120e59:	83 ec 0c             	sub    $0xc,%esp
f0120e5c:	68 9c f4 12 f0       	push   $0xf012f49c
f0120e61:	e8 06 01 fe ff       	call   f0100f6c <cprintf>
f0120e66:	83 c4 10             	add    $0x10,%esp
			*numOfInstances = 0; //to indicate the failure of test
f0120e69:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120e6c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0120e72:	e9 75 01 00 00       	jmp    f0120fec <sys_utilities+0x3b9>
		}
		else
		{
			cprintf("####################################################\n");
f0120e77:	83 ec 0c             	sub    $0xc,%esp
f0120e7a:	68 ec f4 12 f0       	push   $0xf012f4ec
f0120e7f:	e8 e8 00 fe ff       	call   f0100f6c <cprintf>
f0120e84:	83 c4 10             	add    $0x10,%esp
			cprintf("%s: check exit order is SUCCEEDED\n", progName);
f0120e87:	83 ec 08             	sub    $0x8,%esp
f0120e8a:	ff 75 d8             	pushl  -0x28(%ebp)
f0120e8d:	68 24 f5 12 f0       	push   $0xf012f524
f0120e92:	e8 d5 00 fe ff       	call   f0100f6c <cprintf>
f0120e97:	83 c4 10             	add    $0x10,%esp
			cprintf("####################################################\n");
f0120e9a:	83 ec 0c             	sub    $0xc,%esp
f0120e9d:	68 ec f4 12 f0       	push   $0xf012f4ec
f0120ea2:	e8 c5 00 fe ff       	call   f0100f6c <cprintf>
f0120ea7:	83 c4 10             	add    $0x10,%esp
			*numOfInstances = 1; //to indicate the success of test
f0120eaa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0120ead:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
f0120eb3:	e9 34 01 00 00       	jmp    f0120fec <sys_utilities+0x3b9>
		}
	}
	else if (strcmp(utilityName, "__Sleep__") == 0)
f0120eb8:	83 ec 08             	sub    $0x8,%esp
f0120ebb:	68 47 f5 12 f0       	push   $0xf012f547
f0120ec0:	ff 75 08             	pushl  0x8(%ebp)
f0120ec3:	e8 7c 16 00 00       	call   f0122544 <strcmp>
f0120ec8:	83 c4 10             	add    $0x10,%esp
f0120ecb:	85 c0                	test   %eax,%eax
f0120ecd:	75 77                	jne    f0120f46 <sys_utilities+0x313>
	{
		if (__firstTimeSleep)
f0120ecf:	a1 e0 dd 17 f0       	mov    0xf017dde0,%eax
f0120ed4:	85 c0                	test   %eax,%eax
f0120ed6:	74 34                	je     f0120f0c <sys_utilities+0x2d9>
		{
			__firstTimeSleep = 0;
f0120ed8:	c7 05 e0 dd 17 f0 00 	movl   $0x0,0xf017dde0
f0120edf:	00 00 00 
			init_channel(&__tstchan__, "Test Channel");
f0120ee2:	83 ec 08             	sub    $0x8,%esp
f0120ee5:	68 51 f5 12 f0       	push   $0xf012f551
f0120eea:	68 60 43 5c f0       	push   $0xf05c4360
f0120eef:	e8 7f df fe ff       	call   f010ee73 <init_channel>
f0120ef4:	83 c4 10             	add    $0x10,%esp
			init_spinlock(&__tstchan_lk__, "Test Channel Lock");
f0120ef7:	83 ec 08             	sub    $0x8,%esp
f0120efa:	68 5e f5 12 f0       	push   $0xf012f55e
f0120eff:	68 c0 43 5c f0       	push   $0xf05c43c0
f0120f04:	e8 e7 db fe ff       	call   f010eaf0 <init_spinlock>
f0120f09:	83 c4 10             	add    $0x10,%esp
		}
		acquire_spinlock(&__tstchan_lk__);
f0120f0c:	83 ec 0c             	sub    $0xc,%esp
f0120f0f:	68 c0 43 5c f0       	push   $0xf05c43c0
f0120f14:	e8 08 dc fe ff       	call   f010eb21 <acquire_spinlock>
f0120f19:	83 c4 10             	add    $0x10,%esp
		sleep(&__tstchan__, &__tstchan_lk__);
f0120f1c:	83 ec 08             	sub    $0x8,%esp
f0120f1f:	68 c0 43 5c f0       	push   $0xf05c43c0
f0120f24:	68 60 43 5c f0       	push   $0xf05c4360
f0120f29:	e8 72 df fe ff       	call   f010eea0 <sleep>
f0120f2e:	83 c4 10             	add    $0x10,%esp
		release_spinlock(&__tstchan_lk__);
f0120f31:	83 ec 0c             	sub    $0xc,%esp
f0120f34:	68 c0 43 5c f0       	push   $0xf05c43c0
f0120f39:	e8 6a dc fe ff       	call   f010eba8 <release_spinlock>
f0120f3e:	83 c4 10             	add    $0x10,%esp
f0120f41:	e9 a6 00 00 00       	jmp    f0120fec <sys_utilities+0x3b9>
	}
	else if (strcmp(utilityName, "__WakeupOne__") == 0)
f0120f46:	83 ec 08             	sub    $0x8,%esp
f0120f49:	68 70 f5 12 f0       	push   $0xf012f570
f0120f4e:	ff 75 08             	pushl  0x8(%ebp)
f0120f51:	e8 ee 15 00 00       	call   f0122544 <strcmp>
f0120f56:	83 c4 10             	add    $0x10,%esp
f0120f59:	85 c0                	test   %eax,%eax
f0120f5b:	75 12                	jne    f0120f6f <sys_utilities+0x33c>
	{
		wakeup_one(&__tstchan__);
f0120f5d:	83 ec 0c             	sub    $0xc,%esp
f0120f60:	68 60 43 5c f0       	push   $0xf05c4360
f0120f65:	e8 50 df fe ff       	call   f010eeba <wakeup_one>
f0120f6a:	83 c4 10             	add    $0x10,%esp
f0120f6d:	eb 7d                	jmp    f0120fec <sys_utilities+0x3b9>
	}
	else if (strcmp(utilityName, "__WakeupAll__") == 0)
f0120f6f:	83 ec 08             	sub    $0x8,%esp
f0120f72:	68 7e f5 12 f0       	push   $0xf012f57e
f0120f77:	ff 75 08             	pushl  0x8(%ebp)
f0120f7a:	e8 c5 15 00 00       	call   f0122544 <strcmp>
f0120f7f:	83 c4 10             	add    $0x10,%esp
f0120f82:	85 c0                	test   %eax,%eax
f0120f84:	75 12                	jne    f0120f98 <sys_utilities+0x365>
	{
		wakeup_all(&__tstchan__);
f0120f86:	83 ec 0c             	sub    $0xc,%esp
f0120f89:	68 60 43 5c f0       	push   $0xf05c4360
f0120f8e:	e8 41 df fe ff       	call   f010eed4 <wakeup_all>
f0120f93:	83 c4 10             	add    $0x10,%esp
f0120f96:	eb 54                	jmp    f0120fec <sys_utilities+0x3b9>
	}
	else if (strcmp(utilityName, "__GetChanQueueSize__") == 0)
f0120f98:	83 ec 08             	sub    $0x8,%esp
f0120f9b:	68 8c f5 12 f0       	push   $0xf012f58c
f0120fa0:	ff 75 08             	pushl  0x8(%ebp)
f0120fa3:	e8 9c 15 00 00       	call   f0122544 <strcmp>
f0120fa8:	83 c4 10             	add    $0x10,%esp
f0120fab:	85 c0                	test   %eax,%eax
f0120fad:	75 14                	jne    f0120fc3 <sys_utilities+0x390>
	{
		int* numOfProcesses = (int*) value ;
f0120faf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120fb2:	89 45 d0             	mov    %eax,-0x30(%ebp)
		*numOfProcesses = LIST_SIZE(&__tstchan__.queue);
f0120fb5:	a1 6c 43 5c f0       	mov    0xf05c436c,%eax
f0120fba:	89 c2                	mov    %eax,%edx
f0120fbc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120fbf:	89 10                	mov    %edx,(%eax)
f0120fc1:	eb 29                	jmp    f0120fec <sys_utilities+0x3b9>
	}
	else if (strcmp(utilityName, "__GetReadyQueueSize__") == 0)
f0120fc3:	83 ec 08             	sub    $0x8,%esp
f0120fc6:	68 a1 f5 12 f0       	push   $0xf012f5a1
f0120fcb:	ff 75 08             	pushl  0x8(%ebp)
f0120fce:	e8 71 15 00 00       	call   f0122544 <strcmp>
f0120fd3:	83 c4 10             	add    $0x10,%esp
f0120fd6:	85 c0                	test   %eax,%eax
f0120fd8:	75 12                	jne    f0120fec <sys_utilities+0x3b9>
	{
		int* numOfProcesses = (int*) value ;
f0120fda:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120fdd:	89 45 cc             	mov    %eax,-0x34(%ebp)
		*numOfProcesses = LIST_SIZE(&ProcessQueues.env_ready_queues[0]);
f0120fe0:	a1 9c ee 59 f0       	mov    0xf059ee9c,%eax
f0120fe5:	89 c2                	mov    %eax,%edx
f0120fe7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0120fea:	89 10                	mov    %edx,(%eax)
	}

	if ((int)value < 0)
f0120fec:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0120ff0:	79 5b                	jns    f012104d <sys_utilities+0x41a>
	{
		if (strcmp(utilityName, "__ReplStrat__") == 0)
f0120ff2:	83 ec 08             	sub    $0x8,%esp
f0120ff5:	68 b7 f5 12 f0       	push   $0xf012f5b7
f0120ffa:	ff 75 08             	pushl  0x8(%ebp)
f0120ffd:	e8 42 15 00 00       	call   f0122544 <strcmp>
f0121002:	83 c4 10             	add    $0x10,%esp
f0121005:	85 c0                	test   %eax,%eax
f0121007:	75 44                	jne    f012104d <sys_utilities+0x41a>
		{
			switch (value)
f0121009:	8b 45 0c             	mov    0xc(%ebp),%eax
f012100c:	83 f8 fc             	cmp    $0xfffffffc,%eax
f012100f:	74 07                	je     f0121018 <sys_utilities+0x3e5>
f0121011:	83 f8 fe             	cmp    $0xfffffffe,%eax
f0121014:	74 19                	je     f012102f <sys_utilities+0x3fc>
			case -PG_REP_LRU_LISTS_APPROX:
				cprintf("\n*************************************\nPAGE REPLACEMENT IS SET TO LRU LISTS.\n*************************************\n");
				setPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX);
				break;
			default:
				break;
f0121016:	eb 35                	jmp    f012104d <sys_utilities+0x41a>
		if (strcmp(utilityName, "__ReplStrat__") == 0)
		{
			switch (value)
			{
			case -PG_REP_FIFO:
				cprintf("\n*************************************\nPAGE REPLACEMENT IS SET TO FIFO.\n*************************************\n");
f0121018:	83 ec 0c             	sub    $0xc,%esp
f012101b:	68 c8 f5 12 f0       	push   $0xf012f5c8
f0121020:	e8 47 ff fd ff       	call   f0100f6c <cprintf>
f0121025:	83 c4 10             	add    $0x10,%esp
				setPageReplacmentAlgorithmFIFO();
f0121028:	e8 9b d6 fe ff       	call   f010e6c8 <setPageReplacmentAlgorithmFIFO>
				break;
f012102d:	eb 1e                	jmp    f012104d <sys_utilities+0x41a>
			case -PG_REP_LRU_LISTS_APPROX:
				cprintf("\n*************************************\nPAGE REPLACEMENT IS SET TO LRU LISTS.\n*************************************\n");
f012102f:	83 ec 0c             	sub    $0xc,%esp
f0121032:	68 38 f6 12 f0       	push   $0xf012f638
f0121037:	e8 30 ff fd ff       	call   f0100f6c <cprintf>
f012103c:	83 c4 10             	add    $0x10,%esp
				setPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX);
f012103f:	83 ec 0c             	sub    $0xc,%esp
f0121042:	6a 02                	push   $0x2
f0121044:	e8 3c d6 fe ff       	call   f010e685 <setPageReplacmentAlgorithmLRU>
f0121049:	83 c4 10             	add    $0x10,%esp
				break;
f012104c:	90                   	nop
			}
		}
	}
	/*****************************************************************************************/

}
f012104d:	90                   	nop
f012104e:	c9                   	leave  
f012104f:	c3                   	ret    

f0121050 <detect_loop_in_FrameInfo_list>:
/*=======================================*/
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f0121050:	55                   	push   %ebp
f0121051:	89 e5                	mov    %esp,%ebp
f0121053:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f0121056:	8b 45 08             	mov    0x8(%ebp),%eax
f0121059:	8b 00                	mov    (%eax),%eax
f012105b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f012105e:	8b 45 08             	mov    0x8(%ebp),%eax
f0121061:	8b 00                	mov    (%eax),%eax
f0121063:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f0121066:	eb 52                	jmp    f01210ba <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f0121068:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012106b:	8b 00                	mov    (%eax),%eax
f012106d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f0121070:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121073:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121076:	75 12                	jne    f012108a <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f0121078:	83 ec 0c             	sub    $0xc,%esp
f012107b:	68 ac f6 12 f0       	push   $0xf012f6ac
f0121080:	e8 e7 fe fd ff       	call   f0100f6c <cprintf>
f0121085:	83 c4 10             	add    $0x10,%esp
			break;
f0121088:	eb 3f                	jmp    f01210c9 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f012108a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012108e:	74 38                	je     f01210c8 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f0121090:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121093:	8b 00                	mov    (%eax),%eax
f0121095:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f0121098:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012109b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012109e:	75 12                	jne    f01210b2 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f01210a0:	83 ec 0c             	sub    $0xc,%esp
f01210a3:	68 c8 f6 12 f0       	push   $0xf012f6c8
f01210a8:	e8 bf fe fd ff       	call   f0100f6c <cprintf>
f01210ad:	83 c4 10             	add    $0x10,%esp
			break;
f01210b0:	eb 17                	jmp    f01210c9 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f01210b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01210b5:	8b 00                	mov    (%eax),%eax
f01210b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f01210ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01210be:	74 09                	je     f01210c9 <detect_loop_in_FrameInfo_list+0x79>
f01210c0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01210c4:	75 a2                	jne    f0121068 <detect_loop_in_FrameInfo_list+0x18>
f01210c6:	eb 01                	jmp    f01210c9 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f01210c8:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f01210c9:	83 ec 0c             	sub    $0xc,%esp
f01210cc:	68 df f6 12 f0       	push   $0xf012f6df
f01210d1:	e8 96 fe fd ff       	call   f0100f6c <cprintf>
f01210d6:	83 c4 10             	add    $0x10,%esp
}
f01210d9:	90                   	nop
f01210da:	c9                   	leave  
f01210db:	c3                   	ret    

f01210dc <scarce_memory>:

void scarce_memory()
{
f01210dc:	55                   	push   %ebp
f01210dd:	89 e5                	mov    %esp,%ebp
f01210df:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f01210e2:	a1 80 15 5a f0       	mov    0xf05a1580,%eax
f01210e7:	ba 64 00 00 00       	mov    $0x64,%edx
f01210ec:	29 c2                	sub    %eax,%edx
f01210ee:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f01210f3:	0f af c2             	imul   %edx,%eax
f01210f6:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f01210fb:	f7 e2                	mul    %edx
f01210fd:	89 d0                	mov    %edx,%eax
f01210ff:	c1 e8 05             	shr    $0x5,%eax
f0121102:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f0121105:	a1 80 15 5a f0       	mov    0xf05a1580,%eax
f012110a:	ba 64 00 00 00       	mov    $0x64,%edx
f012110f:	29 c2                	sub    %eax,%edx
f0121111:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f0121116:	89 d1                	mov    %edx,%ecx
f0121118:	0f af c8             	imul   %eax,%ecx
f012111b:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0121120:	f7 e1                	mul    %ecx
f0121122:	c1 ea 05             	shr    $0x5,%edx
f0121125:	89 d0                	mov    %edx,%eax
f0121127:	c1 e0 02             	shl    $0x2,%eax
f012112a:	01 d0                	add    %edx,%eax
f012112c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0121133:	01 d0                	add    %edx,%eax
f0121135:	c1 e0 02             	shl    $0x2,%eax
f0121138:	29 c1                	sub    %eax,%ecx
f012113a:	89 ca                	mov    %ecx,%edx
f012113c:	85 d2                	test   %edx,%edx
f012113e:	74 03                	je     f0121143 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f0121140:	ff 45 f4             	incl   -0xc(%ebp)

	int fflSize = 0;
f0121143:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	acquire_spinlock(&MemFrameLists.mfllock);
f012114a:	83 ec 0c             	sub    $0xc,%esp
f012114d:	68 e0 ee 59 f0       	push   $0xf059eee0
f0121152:	e8 ca d9 fe ff       	call   f010eb21 <acquire_spinlock>
f0121157:	83 c4 10             	add    $0x10,%esp
	{
		fflSize = LIST_SIZE(&MemFrameLists.free_frame_list);
f012115a:	a1 cc ee 59 f0       	mov    0xf059eecc,%eax
f012115f:	89 45 ec             	mov    %eax,-0x14(%ebp)

		uint32 size_of_already_allocated = number_of_frames - fflSize ;
f0121162:	8b 15 58 16 5a f0    	mov    0xf05a1658,%edx
f0121168:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012116b:	29 c2                	sub    %eax,%edx
f012116d:	89 d0                	mov    %edx,%eax
f012116f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f0121172:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121175:	2b 45 e8             	sub    -0x18(%ebp),%eax
f0121178:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
		//	cprintf("size to be allocated %d\n", size_tobe_allocated);
		int i = 0 ;
f012117b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		struct FrameInfo* ptr_tmp_FI ;
		for (; i <= size_tobe_allocated ; i++)
f0121182:	eb 12                	jmp    f0121196 <scarce_memory+0xba>
		{
			allocate_frame(&ptr_tmp_FI) ;
f0121184:	83 ec 0c             	sub    $0xc,%esp
f0121187:	8d 45 e0             	lea    -0x20(%ebp),%eax
f012118a:	50                   	push   %eax
f012118b:	e8 40 70 fe ff       	call   f01081d0 <allocate_frame>
f0121190:	83 c4 10             	add    $0x10,%esp
		uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
		//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
		//	cprintf("size to be allocated %d\n", size_tobe_allocated);
		int i = 0 ;
		struct FrameInfo* ptr_tmp_FI ;
		for (; i <= size_tobe_allocated ; i++)
f0121193:	ff 45 f0             	incl   -0x10(%ebp)
f0121196:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121199:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f012119c:	76 e6                	jbe    f0121184 <scarce_memory+0xa8>
		{
			allocate_frame(&ptr_tmp_FI) ;
		}
	}
	release_spinlock(&MemFrameLists.mfllock);
f012119e:	83 ec 0c             	sub    $0xc,%esp
f01211a1:	68 e0 ee 59 f0       	push   $0xf059eee0
f01211a6:	e8 fd d9 fe ff       	call   f010eba8 <release_spinlock>
f01211ab:	83 c4 10             	add    $0x10,%esp

}
f01211ae:	90                   	nop
f01211af:	c9                   	leave  
f01211b0:	c3                   	ret    

f01211b1 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f01211b1:	55                   	push   %ebp
f01211b2:	89 e5                	mov    %esp,%ebp
f01211b4:	83 ec 48             	sub    $0x48,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f01211b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f01211be:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f01211c5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct Env* cur_env = get_cpu_proc();
f01211cc:	e8 9f 95 fe ff       	call   f010a770 <get_cpu_proc>
f01211d1:	89 45 d0             	mov    %eax,-0x30(%ebp)
	assert(cur_env != NULL);
f01211d4:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
f01211d8:	75 19                	jne    f01211f3 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x42>
f01211da:	68 f9 f6 12 f0       	push   $0xf012f6f9
f01211df:	68 b7 f3 12 f0       	push   $0xf012f3b7
f01211e4:	68 5b 01 00 00       	push   $0x15b
f01211e9:	68 ff f3 12 f0       	push   $0xf012f3ff
f01211ee:	e8 27 f1 fd ff       	call   f010031a <_panic>
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f01211f3:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f01211f7:	0f 85 f7 01 00 00    	jne    f01213f4 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x243>
	{
		acquire_spinlock(&ProcessQueues.qlock);
f01211fd:	83 ec 0c             	sub    $0xc,%esp
f0121200:	68 00 ee 59 f0       	push   $0xf059ee00
f0121205:	e8 17 d9 fe ff       	call   f010eb21 <acquire_spinlock>
f012120a:	83 c4 10             	add    $0x10,%esp
		{
			for(int i = 0; i < num_of_ready_queues; i++)
f012120d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0121214:	e9 e9 00 00 00       	jmp    f0121302 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x151>
			{
				struct Env * ptr_ready_env = NULL;
f0121219:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
				LIST_FOREACH(ptr_ready_env, &(ProcessQueues.env_ready_queues[i]))
f0121220:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0121223:	83 c0 09             	add    $0x9,%eax
f0121226:	c1 e0 04             	shl    $0x4,%eax
f0121229:	05 00 ee 59 f0       	add    $0xf059ee00,%eax
f012122e:	8b 00                	mov    (%eax),%eax
f0121230:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0121233:	e9 81 00 00 00       	jmp    f01212b9 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x108>
				{
#if USE_KHEAP
					int num_of_pages_in_WS = LIST_SIZE(&(ptr_ready_env->page_WS_list));
#else
					int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f0121238:	83 ec 0c             	sub    $0xc,%esp
f012123b:	ff 75 e4             	pushl  -0x1c(%ebp)
f012123e:	e8 1b 7b fe ff       	call   f0108d5e <env_page_ws_get_size>
f0121243:	83 c4 10             	add    $0x10,%esp
f0121246:	89 45 cc             	mov    %eax,-0x34(%ebp)
#endif
					int num_of_pages_to_be_removed = cur_env->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f0121249:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012124c:	8b 90 3c da 01 00    	mov    0x1da3c(%eax),%edx
f0121252:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0121255:	0f af c2             	imul   %edx,%eax
f0121258:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012125d:	f7 e2                	mul    %edx
f012125f:	89 d0                	mov    %edx,%eax
f0121261:	c1 e8 05             	shr    $0x5,%eax
f0121264:	89 45 e0             	mov    %eax,-0x20(%ebp)
					if ((cur_env->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0121267:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012126a:	8b 90 3c da 01 00    	mov    0x1da3c(%eax),%edx
f0121270:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0121273:	89 d1                	mov    %edx,%ecx
f0121275:	0f af c8             	imul   %eax,%ecx
f0121278:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012127d:	f7 e1                	mul    %ecx
f012127f:	c1 ea 05             	shr    $0x5,%edx
f0121282:	89 d0                	mov    %edx,%eax
f0121284:	c1 e0 02             	shl    $0x2,%eax
f0121287:	01 d0                	add    %edx,%eax
f0121289:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0121290:	01 d0                	add    %edx,%eax
f0121292:	c1 e0 02             	shl    $0x2,%eax
f0121295:	29 c1                	sub    %eax,%ecx
f0121297:	89 ca                	mov    %ecx,%edx
f0121299:	85 d2                	test   %edx,%edx
f012129b:	74 03                	je     f01212a0 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xef>
						num_of_pages_to_be_removed++;
f012129d:	ff 45 e0             	incl   -0x20(%ebp)
					no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f01212a0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01212a3:	01 45 f4             	add    %eax,-0xc(%ebp)
		acquire_spinlock(&ProcessQueues.qlock);
		{
			for(int i = 0; i < num_of_ready_queues; i++)
			{
				struct Env * ptr_ready_env = NULL;
				LIST_FOREACH(ptr_ready_env, &(ProcessQueues.env_ready_queues[i]))
f01212a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01212a9:	83 c0 09             	add    $0x9,%eax
f01212ac:	c1 e0 04             	shl    $0x4,%eax
f01212af:	05 08 ee 59 f0       	add    $0xf059ee08,%eax
f01212b4:	8b 00                	mov    (%eax),%eax
f01212b6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01212b9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01212bd:	74 08                	je     f01212c7 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x116>
f01212bf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01212c2:	8b 40 08             	mov    0x8(%eax),%eax
f01212c5:	eb 05                	jmp    f01212cc <calc_no_pages_tobe_removed_from_ready_exit_queues+0x11b>
f01212c7:	b8 00 00 00 00       	mov    $0x0,%eax
f01212cc:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01212cf:	83 c2 09             	add    $0x9,%edx
f01212d2:	c1 e2 04             	shl    $0x4,%edx
f01212d5:	81 c2 08 ee 59 f0    	add    $0xf059ee08,%edx
f01212db:	89 02                	mov    %eax,(%edx)
f01212dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01212e0:	83 c0 09             	add    $0x9,%eax
f01212e3:	c1 e0 04             	shl    $0x4,%eax
f01212e6:	05 08 ee 59 f0       	add    $0xf059ee08,%eax
f01212eb:	8b 00                	mov    (%eax),%eax
f01212ed:	85 c0                	test   %eax,%eax
f01212ef:	0f 85 43 ff ff ff    	jne    f0121238 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x87>
f01212f5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01212f9:	0f 85 39 ff ff ff    	jne    f0121238 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x87>
	assert(cur_env != NULL);
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		acquire_spinlock(&ProcessQueues.qlock);
		{
			for(int i = 0; i < num_of_ready_queues; i++)
f01212ff:	ff 45 e8             	incl   -0x18(%ebp)
f0121302:	a0 00 1b 5a f0       	mov    0xf05a1b00,%al
f0121307:	0f b6 c0             	movzbl %al,%eax
f012130a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012130d:	0f 8f 06 ff ff ff    	jg     f0121219 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x68>
						num_of_pages_to_be_removed++;
					no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
				}
			}

			struct Env * ptr_exit_env = NULL;
f0121313:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			LIST_FOREACH(ptr_exit_env, &ProcessQueues.env_exit_queue)
f012131a:	a1 80 ee 59 f0       	mov    0xf059ee80,%eax
f012131f:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0121322:	eb 1f                	jmp    f0121343 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x192>
			{
#if USE_KHEAP
				int num_of_pages_in_WS = LIST_SIZE(&(ptr_exit_env->page_WS_list));
#else
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_exit_env);
f0121324:	83 ec 0c             	sub    $0xc,%esp
f0121327:	ff 75 dc             	pushl  -0x24(%ebp)
f012132a:	e8 2f 7a fe ff       	call   f0108d5e <env_page_ws_get_size>
f012132f:	83 c4 10             	add    $0x10,%esp
f0121332:	89 45 c8             	mov    %eax,-0x38(%ebp)
#endif
				no_of_pages_tobe_removed_from_exit += num_of_pages_in_WS;
f0121335:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0121338:	01 45 f0             	add    %eax,-0x10(%ebp)
					no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
				}
			}

			struct Env * ptr_exit_env = NULL;
			LIST_FOREACH(ptr_exit_env, &ProcessQueues.env_exit_queue)
f012133b:	a1 88 ee 59 f0       	mov    0xf059ee88,%eax
f0121340:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0121343:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0121347:	74 08                	je     f0121351 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1a0>
f0121349:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012134c:	8b 40 08             	mov    0x8(%eax),%eax
f012134f:	eb 05                	jmp    f0121356 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1a5>
f0121351:	b8 00 00 00 00       	mov    $0x0,%eax
f0121356:	a3 88 ee 59 f0       	mov    %eax,0xf059ee88
f012135b:	a1 88 ee 59 f0       	mov    0xf059ee88,%eax
f0121360:	85 c0                	test   %eax,%eax
f0121362:	75 c0                	jne    f0121324 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x173>
f0121364:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0121368:	75 ba                	jne    f0121324 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x173>
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_exit_env);
#endif
				no_of_pages_tobe_removed_from_exit += num_of_pages_in_WS;
			}
		}
		release_spinlock(&ProcessQueues.qlock);
f012136a:	83 ec 0c             	sub    $0xc,%esp
f012136d:	68 00 ee 59 f0       	push   $0xf059ee00
f0121372:	e8 31 d8 fe ff       	call   f010eba8 <release_spinlock>
f0121377:	83 c4 10             	add    $0x10,%esp
		if(cur_env != NULL)
f012137a:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
f012137e:	0f 84 de 00 00 00    	je     f0121462 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x2b1>
		{
#if USE_KHEAP
			int num_of_pages_in_WS = LIST_SIZE(&(cur_env->page_WS_list));
#else
			int num_of_pages_in_WS = env_page_ws_get_size(cur_env);
f0121384:	83 ec 0c             	sub    $0xc,%esp
f0121387:	ff 75 d0             	pushl  -0x30(%ebp)
f012138a:	e8 cf 79 fe ff       	call   f0108d5e <env_page_ws_get_size>
f012138f:	83 c4 10             	add    $0x10,%esp
f0121392:	89 45 c4             	mov    %eax,-0x3c(%ebp)
#endif
			int num_of_pages_to_be_removed = cur_env->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f0121395:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121398:	8b 90 3c da 01 00    	mov    0x1da3c(%eax),%edx
f012139e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01213a1:	0f af c2             	imul   %edx,%eax
f01213a4:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f01213a9:	f7 e2                	mul    %edx
f01213ab:	89 d0                	mov    %edx,%eax
f01213ad:	c1 e8 05             	shr    $0x5,%eax
f01213b0:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((cur_env->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f01213b3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01213b6:	8b 90 3c da 01 00    	mov    0x1da3c(%eax),%edx
f01213bc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01213bf:	89 d1                	mov    %edx,%ecx
f01213c1:	0f af c8             	imul   %eax,%ecx
f01213c4:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01213c9:	f7 e1                	mul    %ecx
f01213cb:	c1 ea 05             	shr    $0x5,%edx
f01213ce:	89 d0                	mov    %edx,%eax
f01213d0:	c1 e0 02             	shl    $0x2,%eax
f01213d3:	01 d0                	add    %edx,%eax
f01213d5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01213dc:	01 d0                	add    %edx,%eax
f01213de:	c1 e0 02             	shl    $0x2,%eax
f01213e1:	29 c1                	sub    %eax,%ecx
f01213e3:	89 ca                	mov    %ecx,%edx
f01213e5:	85 d2                	test   %edx,%edx
f01213e7:	74 03                	je     f01213ec <calc_no_pages_tobe_removed_from_ready_exit_queues+0x23b>
				num_of_pages_to_be_removed++;
f01213e9:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f01213ec:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01213ef:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01213f2:	eb 6e                	jmp    f0121462 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x2b1>
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
#if USE_KHEAP
		int num_of_pages_in_WS = LIST_SIZE(&(cur_env->page_WS_list));
#else
		int num_of_pages_in_WS = env_page_ws_get_size(cur_env);
f01213f4:	83 ec 0c             	sub    $0xc,%esp
f01213f7:	ff 75 d0             	pushl  -0x30(%ebp)
f01213fa:	e8 5f 79 fe ff       	call   f0108d5e <env_page_ws_get_size>
f01213ff:	83 c4 10             	add    $0x10,%esp
f0121402:	89 45 c0             	mov    %eax,-0x40(%ebp)
#endif
		int num_of_pages_to_be_removed = cur_env->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f0121405:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121408:	8b 90 3c da 01 00    	mov    0x1da3c(%eax),%edx
f012140e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0121411:	0f af c2             	imul   %edx,%eax
f0121414:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f0121419:	f7 e2                	mul    %edx
f012141b:	89 d0                	mov    %edx,%eax
f012141d:	c1 e8 05             	shr    $0x5,%eax
f0121420:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((cur_env->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f0121423:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121426:	8b 90 3c da 01 00    	mov    0x1da3c(%eax),%edx
f012142c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012142f:	89 d1                	mov    %edx,%ecx
f0121431:	0f af c8             	imul   %eax,%ecx
f0121434:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f0121439:	f7 e1                	mul    %ecx
f012143b:	c1 ea 05             	shr    $0x5,%edx
f012143e:	89 d0                	mov    %edx,%eax
f0121440:	c1 e0 02             	shl    $0x2,%eax
f0121443:	01 d0                	add    %edx,%eax
f0121445:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012144c:	01 d0                	add    %edx,%eax
f012144e:	c1 e0 02             	shl    $0x2,%eax
f0121451:	29 c1                	sub    %eax,%ecx
f0121453:	89 ca                	mov    %ecx,%edx
f0121455:	85 d2                	test   %edx,%edx
f0121457:	74 03                	je     f012145c <calc_no_pages_tobe_removed_from_ready_exit_queues+0x2ab>
			num_of_pages_to_be_removed++;
f0121459:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012145c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012145f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f0121462:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0121465:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121468:	01 c2                	add    %eax,%edx
f012146a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012146d:	01 d0                	add    %edx,%eax
}
f012146f:	c9                   	leave  
f0121470:	c3                   	ret    

f0121471 <schenv>:


void schenv()
{
f0121471:	55                   	push   %ebp
f0121472:	89 e5                	mov    %esp,%ebp
f0121474:	83 ec 18             	sub    $0x18,%esp

	__nl = 0;
f0121477:	c6 05 80 1b 5a f0 00 	movb   $0x0,0xf05a1b80
	__ne = NULL;
f012147e:	c7 05 ac 18 5a f0 00 	movl   $0x0,0xf05a18ac
f0121485:	00 00 00 
	acquire_spinlock(&ProcessQueues.qlock);
f0121488:	83 ec 0c             	sub    $0xc,%esp
f012148b:	68 00 ee 59 f0       	push   $0xf059ee00
f0121490:	e8 8c d6 fe ff       	call   f010eb21 <acquire_spinlock>
f0121495:	83 c4 10             	add    $0x10,%esp
	{
		for (int i = 0; i < num_of_ready_queues; ++i)
f0121498:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012149f:	eb 40                	jmp    f01214e1 <schenv+0x70>
		{
			if (queue_size(&(ProcessQueues.env_ready_queues[i])))
f01214a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01214a4:	83 c0 09             	add    $0x9,%eax
f01214a7:	c1 e0 04             	shl    $0x4,%eax
f01214aa:	05 00 ee 59 f0       	add    $0xf059ee00,%eax
f01214af:	83 ec 0c             	sub    $0xc,%esp
f01214b2:	50                   	push   %eax
f01214b3:	e8 a8 3a fe ff       	call   f0104f60 <queue_size>
f01214b8:	83 c4 10             	add    $0x10,%esp
f01214bb:	85 c0                	test   %eax,%eax
f01214bd:	74 1f                	je     f01214de <schenv+0x6d>
			{
				__ne = LIST_LAST(&(ProcessQueues.env_ready_queues[i]));
f01214bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01214c2:	83 c0 09             	add    $0x9,%eax
f01214c5:	c1 e0 04             	shl    $0x4,%eax
f01214c8:	05 04 ee 59 f0       	add    $0xf059ee04,%eax
f01214cd:	8b 00                	mov    (%eax),%eax
f01214cf:	a3 ac 18 5a f0       	mov    %eax,0xf05a18ac
				__nl = i;
f01214d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01214d7:	a2 80 1b 5a f0       	mov    %al,0xf05a1b80
				break;
f01214dc:	eb 10                	jmp    f01214ee <schenv+0x7d>

	__nl = 0;
	__ne = NULL;
	acquire_spinlock(&ProcessQueues.qlock);
	{
		for (int i = 0; i < num_of_ready_queues; ++i)
f01214de:	ff 45 f4             	incl   -0xc(%ebp)
f01214e1:	a0 00 1b 5a f0       	mov    0xf05a1b00,%al
f01214e6:	0f b6 c0             	movzbl %al,%eax
f01214e9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01214ec:	7f b3                	jg     f01214a1 <schenv+0x30>
				__nl = i;
				break;
			}
		}
	}
	release_spinlock(&ProcessQueues.qlock);
f01214ee:	83 ec 0c             	sub    $0xc,%esp
f01214f1:	68 00 ee 59 f0       	push   $0xf059ee00
f01214f6:	e8 ad d6 fe ff       	call   f010eba8 <release_spinlock>
f01214fb:	83 c4 10             	add    $0x10,%esp
	struct Env* cur_env = get_cpu_proc();
f01214fe:	e8 6d 92 fe ff       	call   f010a770 <get_cpu_proc>
f0121503:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (cur_env != NULL)
f0121506:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012150a:	0f 84 82 00 00 00    	je     f0121592 <schenv+0x121>
	{
		if (__ne != NULL)
f0121510:	a1 ac 18 5a f0       	mov    0xf05a18ac,%eax
f0121515:	85 c0                	test   %eax,%eax
f0121517:	74 49                	je     f0121562 <schenv+0xf1>
		{
			if ((__pl + 1) < __nl)
f0121519:	a0 f1 ed 59 f0       	mov    0xf059edf1,%al
f012151e:	0f b6 c0             	movzbl %al,%eax
f0121521:	8d 50 01             	lea    0x1(%eax),%edx
f0121524:	a0 80 1b 5a f0       	mov    0xf05a1b80,%al
f0121529:	0f b6 c0             	movzbl %al,%eax
f012152c:	39 c2                	cmp    %eax,%edx
f012152e:	7d 62                	jge    f0121592 <schenv+0x121>
			{
				__ne = cur_env;
f0121530:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121533:	a3 ac 18 5a f0       	mov    %eax,0xf05a18ac
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f0121538:	a0 f1 ed 59 f0       	mov    0xf059edf1,%al
f012153d:	0f b6 c0             	movzbl %al,%eax
f0121540:	8a 15 00 1b 5a f0    	mov    0xf05a1b00,%dl
f0121546:	0f b6 d2             	movzbl %dl,%edx
f0121549:	4a                   	dec    %edx
f012154a:	39 d0                	cmp    %edx,%eax
f012154c:	7d 08                	jge    f0121556 <schenv+0xe5>
f012154e:	a0 f1 ed 59 f0       	mov    0xf059edf1,%al
f0121553:	40                   	inc    %eax
f0121554:	eb 05                	jmp    f012155b <schenv+0xea>
f0121556:	a0 f1 ed 59 f0       	mov    0xf059edf1,%al
f012155b:	a2 80 1b 5a f0       	mov    %al,0xf05a1b80
		{
			__ne = cur_env;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f0121560:	eb 30                	jmp    f0121592 <schenv+0x121>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = cur_env;
f0121562:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121565:	a3 ac 18 5a f0       	mov    %eax,0xf05a18ac
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012156a:	a0 f1 ed 59 f0       	mov    0xf059edf1,%al
f012156f:	0f b6 c0             	movzbl %al,%eax
f0121572:	8a 15 00 1b 5a f0    	mov    0xf05a1b00,%dl
f0121578:	0f b6 d2             	movzbl %dl,%edx
f012157b:	4a                   	dec    %edx
f012157c:	39 d0                	cmp    %edx,%eax
f012157e:	7d 08                	jge    f0121588 <schenv+0x117>
f0121580:	a0 f1 ed 59 f0       	mov    0xf059edf1,%al
f0121585:	40                   	inc    %eax
f0121586:	eb 05                	jmp    f012158d <schenv+0x11c>
f0121588:	a0 f1 ed 59 f0       	mov    0xf059edf1,%al
f012158d:	a2 80 1b 5a f0       	mov    %al,0xf05a1b80
		}
	}
}
f0121592:	90                   	nop
f0121593:	c9                   	leave  
f0121594:	c3                   	ret    

f0121595 <chksch>:

void chksch(uint8 onoff)
{
f0121595:	55                   	push   %ebp
f0121596:	89 e5                	mov    %esp,%ebp
f0121598:	83 ec 18             	sub    $0x18,%esp
f012159b:	8b 45 08             	mov    0x8(%ebp),%eax
f012159e:	88 45 f4             	mov    %al,-0xc(%ebp)
	//		__pl = 0 ;
	//		__nl = 0 ;
	//	}

	/*TEST BSD*/
	if (isSchedMethodBSD())
f01215a1:	e8 8d 51 fe ff       	call   f0106733 <isSchedMethodBSD>
f01215a6:	85 c0                	test   %eax,%eax
f01215a8:	74 48                	je     f01215f2 <chksch+0x5d>
	{
		__histla = __pla = get_load_average();
f01215aa:	e8 32 51 fe ff       	call   f01066e1 <get_load_average>
f01215af:	a3 1c 1b 5a f0       	mov    %eax,0xf05a1b1c
f01215b4:	a1 1c 1b 5a f0       	mov    0xf05a1b1c,%eax
f01215b9:	a3 5c 16 5a f0       	mov    %eax,0xf05a165c
		acquire_spinlock(&ProcessQueues.qlock);
f01215be:	83 ec 0c             	sub    $0xc,%esp
f01215c1:	68 00 ee 59 f0       	push   $0xf059ee00
f01215c6:	e8 56 d5 fe ff       	call   f010eb21 <acquire_spinlock>
f01215cb:	83 c4 10             	add    $0x10,%esp
		{
			__pnexit = LIST_SIZE(&ProcessQueues.env_exit_queue) ;
f01215ce:	a1 8c ee 59 f0       	mov    0xf059ee8c,%eax
f01215d3:	a3 60 ef 59 f0       	mov    %eax,0xf059ef60
		}
		release_spinlock(&ProcessQueues.qlock);
f01215d8:	83 ec 0c             	sub    $0xc,%esp
f01215db:	68 00 ee 59 f0       	push   $0xf059ee00
f01215e0:	e8 c3 d5 fe ff       	call   f010eba8 <release_spinlock>
f01215e5:	83 c4 10             	add    $0x10,%esp
		__firsttime = 1;
f01215e8:	c7 05 bc 18 5a f0 01 	movl   $0x1,0xf05a18bc
f01215ef:	00 00 00 
	}
	__chkstatus = onoff;
f01215f2:	8a 45 f4             	mov    -0xc(%ebp),%al
f01215f5:	a2 a8 18 5a f0       	mov    %al,0xf05a18a8
}
f01215fa:	90                   	nop
f01215fb:	c9                   	leave  
f01215fc:	c3                   	ret    

f01215fd <chk1>:
void chk1()
{
f01215fd:	55                   	push   %ebp
f01215fe:	89 e5                	mov    %esp,%ebp
	//			__pl = 0;
	//		}
	//		//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	//		schenv();
	//	}
}
f0121600:	90                   	nop
f0121601:	5d                   	pop    %ebp
f0121602:	c3                   	ret    

f0121603 <chk2>:
void chk2(struct Env* __se)
{
f0121603:	55                   	push   %ebp
f0121604:	89 e5                	mov    %esp,%ebp
f0121606:	83 ec 28             	sub    $0x28,%esp
	if (__chkstatus == 0)
f0121609:	a0 a8 18 5a f0       	mov    0xf05a18a8,%al
f012160e:	84 c0                	test   %al,%al
f0121610:	0f 84 59 03 00 00    	je     f012196f <chk2+0x36c>
		return ;

	/*TEST BSD*/
	if (isSchedMethodBSD())
f0121616:	e8 18 51 fe ff       	call   f0106733 <isSchedMethodBSD>
f012161b:	85 c0                	test   %eax,%eax
f012161d:	0f 84 4d 03 00 00    	je     f0121970 <chk2+0x36d>
	{
		__nla = get_load_average();
f0121623:	e8 b9 50 fe ff       	call   f01066e1 <get_load_average>
f0121628:	a3 84 15 5a f0       	mov    %eax,0xf05a1584
		acquire_spinlock(&ProcessQueues.qlock);
f012162d:	83 ec 0c             	sub    $0xc,%esp
f0121630:	68 00 ee 59 f0       	push   $0xf059ee00
f0121635:	e8 e7 d4 fe ff       	call   f010eb21 <acquire_spinlock>
f012163a:	83 c4 10             	add    $0x10,%esp
		{
			__nnexit = LIST_SIZE(&ProcessQueues.env_exit_queue);
f012163d:	a1 8c ee 59 f0       	mov    0xf059ee8c,%eax
f0121642:	a3 b0 18 5a f0       	mov    %eax,0xf05a18b0
		}
		release_spinlock(&ProcessQueues.qlock);
f0121647:	83 ec 0c             	sub    $0xc,%esp
f012164a:	68 00 ee 59 f0       	push   $0xf059ee00
f012164f:	e8 54 d5 fe ff       	call   f010eba8 <release_spinlock>
f0121654:	83 c4 10             	add    $0x10,%esp

		if (__firsttime)
f0121657:	a1 bc 18 5a f0       	mov    0xf05a18bc,%eax
f012165c:	85 c0                	test   %eax,%eax
f012165e:	74 72                	je     f01216d2 <chk2+0xcf>
		{
			acquire_spinlock(&ProcessQueues.qlock);
f0121660:	83 ec 0c             	sub    $0xc,%esp
f0121663:	68 00 ee 59 f0       	push   $0xf059ee00
f0121668:	e8 b4 d4 fe ff       	call   f010eb21 <acquire_spinlock>
f012166d:	83 c4 10             	add    $0x10,%esp
			{
				//Cnt #Processes
				__nproc = __se != NULL? 1 : 0;
f0121670:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0121674:	0f 95 c0             	setne  %al
f0121677:	0f b6 c0             	movzbl %al,%eax
f012167a:	a3 74 1a 5a f0       	mov    %eax,0xf05a1a74
				for (int l = num_of_ready_queues-1; l >= 0; --l)
f012167f:	a0 00 1b 5a f0       	mov    0xf05a1b00,%al
f0121684:	0f b6 c0             	movzbl %al,%eax
f0121687:	48                   	dec    %eax
f0121688:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012168b:	eb 20                	jmp    f01216ad <chk2+0xaa>
				{
					__nproc += LIST_SIZE(&(ProcessQueues.env_ready_queues[l]));
f012168d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121690:	83 c0 09             	add    $0x9,%eax
f0121693:	c1 e0 04             	shl    $0x4,%eax
f0121696:	05 0c ee 59 f0       	add    $0xf059ee0c,%eax
f012169b:	8b 00                	mov    (%eax),%eax
f012169d:	8b 15 74 1a 5a f0    	mov    0xf05a1a74,%edx
f01216a3:	01 d0                	add    %edx,%eax
f01216a5:	a3 74 1a 5a f0       	mov    %eax,0xf05a1a74
		{
			acquire_spinlock(&ProcessQueues.qlock);
			{
				//Cnt #Processes
				__nproc = __se != NULL? 1 : 0;
				for (int l = num_of_ready_queues-1; l >= 0; --l)
f01216aa:	ff 4d f4             	decl   -0xc(%ebp)
f01216ad:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01216b1:	79 da                	jns    f012168d <chk2+0x8a>
				{
					__nproc += LIST_SIZE(&(ProcessQueues.env_ready_queues[l]));
				}
				__firsttime = 0;
f01216b3:	c7 05 bc 18 5a f0 00 	movl   $0x0,0xf05a18bc
f01216ba:	00 00 00 
			}
			release_spinlock(&ProcessQueues.qlock);
f01216bd:	83 ec 0c             	sub    $0xc,%esp
f01216c0:	68 00 ee 59 f0       	push   $0xf059ee00
f01216c5:	e8 de d4 fe ff       	call   f010eba8 <release_spinlock>
f01216ca:	83 c4 10             	add    $0x10,%esp
f01216cd:	e9 91 02 00 00       	jmp    f0121963 <chk2+0x360>
		}
		else
		{
			if (__pnexit != __nnexit)
f01216d2:	8b 15 60 ef 59 f0    	mov    0xf059ef60,%edx
f01216d8:	a1 b0 18 5a f0       	mov    0xf05a18b0,%eax
f01216dd:	39 c2                	cmp    %eax,%edx
f01216df:	74 63                	je     f0121744 <chk2+0x141>
			{
				acquire_spinlock(&ProcessQueues.qlock);
f01216e1:	83 ec 0c             	sub    $0xc,%esp
f01216e4:	68 00 ee 59 f0       	push   $0xf059ee00
f01216e9:	e8 33 d4 fe ff       	call   f010eb21 <acquire_spinlock>
f01216ee:	83 c4 10             	add    $0x10,%esp
				{
					//Cnt #Processes
					__nproc = __se != NULL? 1 : 0;
f01216f1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01216f5:	0f 95 c0             	setne  %al
f01216f8:	0f b6 c0             	movzbl %al,%eax
f01216fb:	a3 74 1a 5a f0       	mov    %eax,0xf05a1a74
					for (int l = num_of_ready_queues-1; l >= 0; --l)
f0121700:	a0 00 1b 5a f0       	mov    0xf05a1b00,%al
f0121705:	0f b6 c0             	movzbl %al,%eax
f0121708:	48                   	dec    %eax
f0121709:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012170c:	eb 20                	jmp    f012172e <chk2+0x12b>
					{
						__nproc += LIST_SIZE(&(ProcessQueues.env_ready_queues[l]));
f012170e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121711:	83 c0 09             	add    $0x9,%eax
f0121714:	c1 e0 04             	shl    $0x4,%eax
f0121717:	05 0c ee 59 f0       	add    $0xf059ee0c,%eax
f012171c:	8b 00                	mov    (%eax),%eax
f012171e:	8b 15 74 1a 5a f0    	mov    0xf05a1a74,%edx
f0121724:	01 d0                	add    %edx,%eax
f0121726:	a3 74 1a 5a f0       	mov    %eax,0xf05a1a74
			{
				acquire_spinlock(&ProcessQueues.qlock);
				{
					//Cnt #Processes
					__nproc = __se != NULL? 1 : 0;
					for (int l = num_of_ready_queues-1; l >= 0; --l)
f012172b:	ff 4d f0             	decl   -0x10(%ebp)
f012172e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0121732:	79 da                	jns    f012170e <chk2+0x10b>
					{
						__nproc += LIST_SIZE(&(ProcessQueues.env_ready_queues[l]));
					}
				}
				release_spinlock(&ProcessQueues.qlock);
f0121734:	83 ec 0c             	sub    $0xc,%esp
f0121737:	68 00 ee 59 f0       	push   $0xf059ee00
f012173c:	e8 67 d4 fe ff       	call   f010eba8 <release_spinlock>
f0121741:	83 c4 10             	add    $0x10,%esp
			}

			//Make sure that the la is changed over long period of time
			if (timer_ticks() % 1000 == 0)
f0121744:	e8 31 4f fe ff       	call   f010667a <timer_ticks>
f0121749:	6a 00                	push   $0x0
f012174b:	68 e8 03 00 00       	push   $0x3e8
f0121750:	52                   	push   %edx
f0121751:	50                   	push   %eax
f0121752:	e8 9d 1c 00 00       	call   f01233f4 <__moddi3>
f0121757:	83 c4 10             	add    $0x10,%esp
f012175a:	09 d0                	or     %edx,%eax
f012175c:	85 c0                	test   %eax,%eax
f012175e:	75 32                	jne    f0121792 <chk2+0x18f>
			{
				assert_endall(__histla != __nla) ;
f0121760:	8b 15 5c 16 5a f0    	mov    0xf05a165c,%edx
f0121766:	a1 84 15 5a f0       	mov    0xf05a1584,%eax
f012176b:	39 c2                	cmp    %eax,%edx
f012176d:	75 19                	jne    f0121788 <chk2+0x185>
f012176f:	68 09 f7 12 f0       	push   $0xf012f709
f0121774:	68 b7 f3 12 f0       	push   $0xf012f3b7
f0121779:	68 17 02 00 00       	push   $0x217
f012177e:	68 ff f3 12 f0       	push   $0xf012f3ff
f0121783:	e8 22 ec fd ff       	call   f01003aa <_panic_all>
				__histla = __nla;
f0121788:	a1 84 15 5a f0       	mov    0xf05a1584,%eax
f012178d:	a3 5c 16 5a f0       	mov    %eax,0xf05a165c
			}

			//check every 1 sec, assuming quantum >= 10
			if (timer_ticks() % 100 == 0)
f0121792:	e8 e3 4e fe ff       	call   f010667a <timer_ticks>
f0121797:	6a 00                	push   $0x0
f0121799:	6a 64                	push   $0x64
f012179b:	52                   	push   %edx
f012179c:	50                   	push   %eax
f012179d:	e8 52 1c 00 00       	call   f01233f4 <__moddi3>
f01217a2:	83 c4 10             	add    $0x10,%esp
f01217a5:	09 d0                	or     %edx,%eax
f01217a7:	85 c0                	test   %eax,%eax
f01217a9:	0f 85 b4 01 00 00    	jne    f0121963 <chk2+0x360>
			{
				int plaint = __pla / 100 ;
f01217af:	8b 0d 1c 1b 5a f0    	mov    0xf05a1b1c,%ecx
f01217b5:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01217ba:	f7 e9                	imul   %ecx
f01217bc:	c1 fa 05             	sar    $0x5,%edx
f01217bf:	89 c8                	mov    %ecx,%eax
f01217c1:	c1 f8 1f             	sar    $0x1f,%eax
f01217c4:	29 c2                	sub    %eax,%edx
f01217c6:	89 d0                	mov    %edx,%eax
f01217c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
				int plafrc = __pla % 100 ;
f01217cb:	8b 0d 1c 1b 5a f0    	mov    0xf05a1b1c,%ecx
f01217d1:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f01217d6:	f7 e9                	imul   %ecx
f01217d8:	c1 fa 05             	sar    $0x5,%edx
f01217db:	89 c8                	mov    %ecx,%eax
f01217dd:	c1 f8 1f             	sar    $0x1f,%eax
f01217e0:	29 c2                	sub    %eax,%edx
f01217e2:	89 d0                	mov    %edx,%eax
f01217e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01217e7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01217ea:	89 d0                	mov    %edx,%eax
f01217ec:	c1 e0 02             	shl    $0x2,%eax
f01217ef:	01 d0                	add    %edx,%eax
f01217f1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01217f8:	01 d0                	add    %edx,%eax
f01217fa:	c1 e0 02             	shl    $0x2,%eax
f01217fd:	29 c1                	sub    %eax,%ecx
f01217ff:	89 c8                	mov    %ecx,%eax
f0121801:	89 45 e8             	mov    %eax,-0x18(%ebp)

				int nlaint = __nla / 100 ;
f0121804:	8b 0d 84 15 5a f0    	mov    0xf05a1584,%ecx
f012180a:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012180f:	f7 e9                	imul   %ecx
f0121811:	c1 fa 05             	sar    $0x5,%edx
f0121814:	89 c8                	mov    %ecx,%eax
f0121816:	c1 f8 1f             	sar    $0x1f,%eax
f0121819:	29 c2                	sub    %eax,%edx
f012181b:	89 d0                	mov    %edx,%eax
f012181d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				int nlafrc = __nla % 100 ;
f0121820:	8b 0d 84 15 5a f0    	mov    0xf05a1584,%ecx
f0121826:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012182b:	f7 e9                	imul   %ecx
f012182d:	c1 fa 05             	sar    $0x5,%edx
f0121830:	89 c8                	mov    %ecx,%eax
f0121832:	c1 f8 1f             	sar    $0x1f,%eax
f0121835:	29 c2                	sub    %eax,%edx
f0121837:	89 d0                	mov    %edx,%eax
f0121839:	89 45 e0             	mov    %eax,-0x20(%ebp)
f012183c:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012183f:	89 d0                	mov    %edx,%eax
f0121841:	c1 e0 02             	shl    $0x2,%eax
f0121844:	01 d0                	add    %edx,%eax
f0121846:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012184d:	01 d0                	add    %edx,%eax
f012184f:	c1 e0 02             	shl    $0x2,%eax
f0121852:	29 c1                	sub    %eax,%ecx
f0121854:	89 c8                	mov    %ecx,%eax
f0121856:	89 45 e0             	mov    %eax,-0x20(%ebp)

				//Check at steady state of nproc (include equality)
				if (__nnexit == __pnexit)
f0121859:	8b 15 b0 18 5a f0    	mov    0xf05a18b0,%edx
f012185f:	a1 60 ef 59 f0       	mov    0xf059ef60,%eax
f0121864:	39 c2                	cmp    %eax,%edx
f0121866:	0f 85 ed 00 00 00    	jne    f0121959 <chk2+0x356>
				{
					//cprintf("++++++++++++++++++# processes = %d, prev la = %d.%d, next la = %d.%d\n", __nproc, plaint, plafrc, nlaint, nlafrc);
					if (__nproc > plaint)
f012186c:	a1 74 1a 5a f0       	mov    0xf05a1a74,%eax
f0121871:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0121874:	7e 5b                	jle    f01218d1 <chk2+0x2ce>
					{
						cprintf("++++++++++++++++++# processes = %d, prev la = %d.%d, next la = %d.%d\n", __nproc, plaint, plafrc, nlaint, nlafrc);
f0121876:	a1 74 1a 5a f0       	mov    0xf05a1a74,%eax
f012187b:	83 ec 08             	sub    $0x8,%esp
f012187e:	ff 75 e0             	pushl  -0x20(%ebp)
f0121881:	ff 75 e4             	pushl  -0x1c(%ebp)
f0121884:	ff 75 e8             	pushl  -0x18(%ebp)
f0121887:	ff 75 ec             	pushl  -0x14(%ebp)
f012188a:	50                   	push   %eax
f012188b:	68 1c f7 12 f0       	push   $0xf012f71c
f0121890:	e8 d7 f6 fd ff       	call   f0100f6c <cprintf>
f0121895:	83 c4 20             	add    $0x20,%esp
						//assert_endall(__nla > __pla);
						assert_endall((nlaint > plaint) || ((nlaint == plaint) && (nlafrc >= plafrc)));
f0121898:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012189b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012189e:	0f 8f b5 00 00 00    	jg     f0121959 <chk2+0x356>
f01218a4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01218a7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01218aa:	75 0c                	jne    f01218b8 <chk2+0x2b5>
f01218ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01218af:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01218b2:	0f 8d a1 00 00 00    	jge    f0121959 <chk2+0x356>
f01218b8:	68 64 f7 12 f0       	push   $0xf012f764
f01218bd:	68 b7 f3 12 f0       	push   $0xf012f3b7
f01218c2:	68 2c 02 00 00       	push   $0x22c
f01218c7:	68 ff f3 12 f0       	push   $0xf012f3ff
f01218cc:	e8 d9 ea fd ff       	call   f01003aa <_panic_all>
					}
					else if (__nproc < plaint)
f01218d1:	a1 74 1a 5a f0       	mov    0xf05a1a74,%eax
f01218d6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01218d9:	7d 53                	jge    f012192e <chk2+0x32b>
					{
						cprintf("------------------# processes = %d, prev la = %d.%d, next la = %d.%d\n", __nproc, plaint, plafrc, nlaint, nlafrc);
f01218db:	a1 74 1a 5a f0       	mov    0xf05a1a74,%eax
f01218e0:	83 ec 08             	sub    $0x8,%esp
f01218e3:	ff 75 e0             	pushl  -0x20(%ebp)
f01218e6:	ff 75 e4             	pushl  -0x1c(%ebp)
f01218e9:	ff 75 e8             	pushl  -0x18(%ebp)
f01218ec:	ff 75 ec             	pushl  -0x14(%ebp)
f01218ef:	50                   	push   %eax
f01218f0:	68 a4 f7 12 f0       	push   $0xf012f7a4
f01218f5:	e8 72 f6 fd ff       	call   f0100f6c <cprintf>
f01218fa:	83 c4 20             	add    $0x20,%esp
						//assert_endall(__nla < __pla);
						assert_endall((nlaint < plaint) || ((nlaint == plaint) && (nlafrc <= plafrc)));
f01218fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0121900:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0121903:	7c 54                	jl     f0121959 <chk2+0x356>
f0121905:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0121908:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012190b:	75 08                	jne    f0121915 <chk2+0x312>
f012190d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0121910:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0121913:	7e 44                	jle    f0121959 <chk2+0x356>
f0121915:	68 ec f7 12 f0       	push   $0xf012f7ec
f012191a:	68 b7 f3 12 f0       	push   $0xf012f3b7
f012191f:	68 32 02 00 00       	push   $0x232
f0121924:	68 ff f3 12 f0       	push   $0xf012f3ff
f0121929:	e8 7c ea fd ff       	call   f01003aa <_panic_all>
					}
					else if (__nproc == plaint)
f012192e:	a1 74 1a 5a f0       	mov    0xf05a1a74,%eax
f0121933:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0121936:	75 21                	jne    f0121959 <chk2+0x356>
					{
						assert_endall((nlaint == plaint));
f0121938:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012193b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012193e:	74 19                	je     f0121959 <chk2+0x356>
f0121940:	68 2c f8 12 f0       	push   $0xf012f82c
f0121945:	68 b7 f3 12 f0       	push   $0xf012f3b7
f012194a:	68 36 02 00 00       	push   $0x236
f012194f:	68 ff f3 12 f0       	push   $0xf012f3ff
f0121954:	e8 51 ea fd ff       	call   f01003aa <_panic_all>
					}
				}
				__pla = __nla;
f0121959:	a1 84 15 5a f0       	mov    0xf05a1584,%eax
f012195e:	a3 1c 1b 5a f0       	mov    %eax,0xf05a1b1c
			}
		}
		__pnexit = __nnexit;
f0121963:	a1 b0 18 5a f0       	mov    0xf05a18b0,%eax
f0121968:	a3 60 ef 59 f0       	mov    %eax,0xf059ef60
f012196d:	eb 01                	jmp    f0121970 <chk2+0x36d>
	//	}
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f012196f:	90                   	nop
	//				if (i == __tl) continue;
	//				assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
	//			}
	//		}
	//	}
}
f0121970:	c9                   	leave  
f0121971:	c3                   	ret    

f0121972 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f0121972:	55                   	push   %ebp
f0121973:	89 e5                	mov    %esp,%ebp
f0121975:	83 ec 18             	sub    $0x18,%esp
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f0121978:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012197f:	eb 40                	jmp    f01219c1 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f0121981:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121984:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f012198a:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f012198f:	83 ec 08             	sub    $0x8,%esp
f0121992:	52                   	push   %edx
f0121993:	50                   	push   %eax
f0121994:	e8 a6 01 00 00       	call   f0121b3f <check_va2pa>
f0121999:	83 c4 10             	add    $0x10,%esp
f012199c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012199f:	74 19                	je     f01219ba <check_boot_pgdir+0x48>
f01219a1:	68 40 f8 12 f0       	push   $0xf012f840
f01219a6:	68 b7 f3 12 f0       	push   $0xf012f3b7
f01219ab:	68 82 02 00 00       	push   $0x282
f01219b0:	68 ff f3 12 f0       	push   $0xf012f3ff
f01219b5:	e8 60 e9 fd ff       	call   f010031a <_panic>
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f01219ba:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f01219c1:	81 7d f4 00 00 00 10 	cmpl   $0x10000000,-0xc(%ebp)
f01219c8:	75 b7                	jne    f0121981 <check_boot_pgdir+0xf>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
#endif
	// check scheduler kernel stack
	for (i = 0; i < NCPUS*KERNEL_STACK_SIZE; i += PAGE_SIZE)
f01219ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01219d1:	e9 81 00 00 00       	jmp    f0121a57 <check_boot_pgdir+0xe5>
	{
		//skip GUARD page of each CPU Stack
		if (i%KERNEL_STACK_SIZE == 0)
f01219d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01219d9:	25 ff 7f 00 00       	and    $0x7fff,%eax
f01219de:	85 c0                	test   %eax,%eax
f01219e0:	74 6d                	je     f0121a4f <check_boot_pgdir+0xdd>
			continue;
		assert(check_va2pa(ptr_page_directory, KERN_STACK_TOP - NCPUS*KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f01219e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01219e5:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f01219eb:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f01219f0:	83 ec 08             	sub    $0x8,%esp
f01219f3:	52                   	push   %edx
f01219f4:	50                   	push   %eax
f01219f5:	e8 45 01 00 00       	call   f0121b3f <check_va2pa>
f01219fa:	83 c4 10             	add    $0x10,%esp
f01219fd:	c7 45 f0 00 50 17 f0 	movl   $0xf0175000,-0x10(%ebp)
f0121a04:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f0121a0b:	77 17                	ja     f0121a24 <check_boot_pgdir+0xb2>
f0121a0d:	ff 75 f0             	pushl  -0x10(%ebp)
f0121a10:	68 78 f8 12 f0       	push   $0xf012f878
f0121a15:	68 8b 02 00 00       	push   $0x28b
f0121a1a:	68 ff f3 12 f0       	push   $0xf012f3ff
f0121a1f:	e8 f6 e8 fd ff       	call   f010031a <_panic>
f0121a24:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0121a27:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f0121a2d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121a30:	01 ca                	add    %ecx,%edx
f0121a32:	39 d0                	cmp    %edx,%eax
f0121a34:	74 1a                	je     f0121a50 <check_boot_pgdir+0xde>
f0121a36:	68 ac f8 12 f0       	push   $0xf012f8ac
f0121a3b:	68 b7 f3 12 f0       	push   $0xf012f3b7
f0121a40:	68 8b 02 00 00       	push   $0x28b
f0121a45:	68 ff f3 12 f0       	push   $0xf012f3ff
f0121a4a:	e8 cb e8 fd ff       	call   f010031a <_panic>
	// check scheduler kernel stack
	for (i = 0; i < NCPUS*KERNEL_STACK_SIZE; i += PAGE_SIZE)
	{
		//skip GUARD page of each CPU Stack
		if (i%KERNEL_STACK_SIZE == 0)
			continue;
f0121a4f:	90                   	nop
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
#endif
	// check scheduler kernel stack
	for (i = 0; i < NCPUS*KERNEL_STACK_SIZE; i += PAGE_SIZE)
f0121a50:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0121a57:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f0121a5e:	0f 86 72 ff ff ff    	jbe    f01219d6 <check_boot_pgdir+0x64>
		if (i%KERNEL_STACK_SIZE == 0)
			continue;
		assert(check_va2pa(ptr_page_directory, KERN_STACK_TOP - NCPUS*KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
	}
	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0121a64:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121a6b:	e9 af 00 00 00       	jmp    f0121b1f <check_boot_pgdir+0x1ad>
		switch (i) {
f0121a70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121a73:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0121a78:	74 11                	je     f0121a8b <check_boot_pgdir+0x119>
f0121a7a:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f0121a7f:	72 36                	jb     f0121ab7 <check_boot_pgdir+0x145>
f0121a81:	2d bd 03 00 00       	sub    $0x3bd,%eax
f0121a86:	83 f8 02             	cmp    $0x2,%eax
f0121a89:	77 2c                	ja     f0121ab7 <check_boot_pgdir+0x145>
		case PDX(UVPT):
		case PDX(KERN_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f0121a8b:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0121a90:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121a93:	c1 e2 02             	shl    $0x2,%edx
f0121a96:	01 d0                	add    %edx,%eax
f0121a98:	8b 00                	mov    (%eax),%eax
f0121a9a:	85 c0                	test   %eax,%eax
f0121a9c:	75 7a                	jne    f0121b18 <check_boot_pgdir+0x1a6>
f0121a9e:	68 32 f9 12 f0       	push   $0xf012f932
f0121aa3:	68 b7 f3 12 f0       	push   $0xf012f3b7
f0121aa8:	68 96 02 00 00       	push   $0x296
f0121aad:	68 ff f3 12 f0       	push   $0xf012f3ff
f0121ab2:	e8 63 e8 fd ff       	call   f010031a <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f0121ab7:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f0121abe:	76 2c                	jbe    f0121aec <check_boot_pgdir+0x17a>
				assert(ptr_page_directory[i]);
f0121ac0:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0121ac5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121ac8:	c1 e2 02             	shl    $0x2,%edx
f0121acb:	01 d0                	add    %edx,%eax
f0121acd:	8b 00                	mov    (%eax),%eax
f0121acf:	85 c0                	test   %eax,%eax
f0121ad1:	75 48                	jne    f0121b1b <check_boot_pgdir+0x1a9>
f0121ad3:	68 32 f9 12 f0       	push   $0xf012f932
f0121ad8:	68 b7 f3 12 f0       	push   $0xf012f3b7
f0121add:	68 9a 02 00 00       	push   $0x29a
f0121ae2:	68 ff f3 12 f0       	push   $0xf012f3ff
f0121ae7:	e8 2e e8 fd ff       	call   f010031a <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f0121aec:	a1 7c 1a 5a f0       	mov    0xf05a1a7c,%eax
f0121af1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121af4:	c1 e2 02             	shl    $0x2,%edx
f0121af7:	01 d0                	add    %edx,%eax
f0121af9:	8b 00                	mov    (%eax),%eax
f0121afb:	85 c0                	test   %eax,%eax
f0121afd:	74 1c                	je     f0121b1b <check_boot_pgdir+0x1a9>
f0121aff:	68 48 f9 12 f0       	push   $0xf012f948
f0121b04:	68 b7 f3 12 f0       	push   $0xf012f3b7
f0121b09:	68 9c 02 00 00       	push   $0x29c
f0121b0e:	68 ff f3 12 f0       	push   $0xf012f3ff
f0121b13:	e8 02 e8 fd ff       	call   f010031a <_panic>
		case PDX(KERN_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f0121b18:	90                   	nop
f0121b19:	eb 01                	jmp    f0121b1c <check_boot_pgdir+0x1aa>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f0121b1b:	90                   	nop
		if (i%KERNEL_STACK_SIZE == 0)
			continue;
		assert(check_va2pa(ptr_page_directory, KERN_STACK_TOP - NCPUS*KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
	}
	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f0121b1c:	ff 45 f4             	incl   -0xc(%ebp)
f0121b1f:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0121b26:	0f 86 44 ff ff ff    	jbe    f0121a70 <check_boot_pgdir+0xfe>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("*	check_boot_pgdir() succeeded!\n");
f0121b2c:	83 ec 0c             	sub    $0xc,%esp
f0121b2f:	68 64 f9 12 f0       	push   $0xf012f964
f0121b34:	e8 33 f4 fd ff       	call   f0100f6c <cprintf>
f0121b39:	83 c4 10             	add    $0x10,%esp
}
f0121b3c:	90                   	nop
f0121b3d:	c9                   	leave  
f0121b3e:	c3                   	ret    

f0121b3f <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f0121b3f:	55                   	push   %ebp
f0121b40:	89 e5                	mov    %esp,%ebp
f0121b42:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f0121b45:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121b48:	c1 e8 16             	shr    $0x16,%eax
f0121b4b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0121b52:	8b 45 08             	mov    0x8(%ebp),%eax
f0121b55:	01 d0                	add    %edx,%eax
f0121b57:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f0121b5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121b5d:	8b 00                	mov    (%eax),%eax
f0121b5f:	83 e0 01             	and    $0x1,%eax
f0121b62:	85 c0                	test   %eax,%eax
f0121b64:	75 0a                	jne    f0121b70 <check_va2pa+0x31>
		return ~0;
f0121b66:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0121b6b:	e9 87 00 00 00       	jmp    f0121bf7 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f0121b70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121b73:	8b 00                	mov    (%eax),%eax
f0121b75:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0121b7a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0121b7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121b80:	c1 e8 0c             	shr    $0xc,%eax
f0121b83:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0121b86:	a1 58 16 5a f0       	mov    0xf05a1658,%eax
f0121b8b:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0121b8e:	72 17                	jb     f0121ba7 <check_va2pa+0x68>
f0121b90:	ff 75 f0             	pushl  -0x10(%ebp)
f0121b93:	68 88 f9 12 f0       	push   $0xf012f988
f0121b98:	68 b2 02 00 00       	push   $0x2b2
f0121b9d:	68 ff f3 12 f0       	push   $0xf012f3ff
f0121ba2:	e8 73 e7 fd ff       	call   f010031a <_panic>
f0121ba7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121baa:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0121baf:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f0121bb2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121bb5:	c1 e8 0c             	shr    $0xc,%eax
f0121bb8:	25 ff 03 00 00       	and    $0x3ff,%eax
f0121bbd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0121bc4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0121bc7:	01 d0                	add    %edx,%eax
f0121bc9:	8b 00                	mov    (%eax),%eax
f0121bcb:	83 e0 01             	and    $0x1,%eax
f0121bce:	85 c0                	test   %eax,%eax
f0121bd0:	75 07                	jne    f0121bd9 <check_va2pa+0x9a>
		return ~0;
f0121bd2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0121bd7:	eb 1e                	jmp    f0121bf7 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f0121bd9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121bdc:	c1 e8 0c             	shr    $0xc,%eax
f0121bdf:	25 ff 03 00 00       	and    $0x3ff,%eax
f0121be4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0121beb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0121bee:	01 d0                	add    %edx,%eax
f0121bf0:	8b 00                	mov    (%eax),%eax
f0121bf2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0121bf7:	c9                   	leave  
f0121bf8:	c3                   	ret    

f0121bf9 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f0121bf9:	55                   	push   %ebp
f0121bfa:	89 e5                	mov    %esp,%ebp
f0121bfc:	53                   	push   %ebx
f0121bfd:	83 ec 14             	sub    $0x14,%esp
f0121c00:	8b 45 10             	mov    0x10(%ebp),%eax
f0121c03:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0121c06:	8b 45 14             	mov    0x14(%ebp),%eax
f0121c09:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f0121c0c:	8b 45 18             	mov    0x18(%ebp),%eax
f0121c0f:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c14:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0121c17:	77 55                	ja     f0121c6e <printnum+0x75>
f0121c19:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0121c1c:	72 05                	jb     f0121c23 <printnum+0x2a>
f0121c1e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0121c21:	77 4b                	ja     f0121c6e <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f0121c23:	8b 45 1c             	mov    0x1c(%ebp),%eax
f0121c26:	8d 58 ff             	lea    -0x1(%eax),%ebx
f0121c29:	8b 45 18             	mov    0x18(%ebp),%eax
f0121c2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0121c31:	52                   	push   %edx
f0121c32:	50                   	push   %eax
f0121c33:	ff 75 f4             	pushl  -0xc(%ebp)
f0121c36:	ff 75 f0             	pushl  -0x10(%ebp)
f0121c39:	e8 4e 19 00 00       	call   f012358c <__udivdi3>
f0121c3e:	83 c4 10             	add    $0x10,%esp
f0121c41:	83 ec 04             	sub    $0x4,%esp
f0121c44:	ff 75 20             	pushl  0x20(%ebp)
f0121c47:	53                   	push   %ebx
f0121c48:	ff 75 18             	pushl  0x18(%ebp)
f0121c4b:	52                   	push   %edx
f0121c4c:	50                   	push   %eax
f0121c4d:	ff 75 0c             	pushl  0xc(%ebp)
f0121c50:	ff 75 08             	pushl  0x8(%ebp)
f0121c53:	e8 a1 ff ff ff       	call   f0121bf9 <printnum>
f0121c58:	83 c4 20             	add    $0x20,%esp
f0121c5b:	eb 1a                	jmp    f0121c77 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f0121c5d:	83 ec 08             	sub    $0x8,%esp
f0121c60:	ff 75 0c             	pushl  0xc(%ebp)
f0121c63:	ff 75 20             	pushl  0x20(%ebp)
f0121c66:	8b 45 08             	mov    0x8(%ebp),%eax
f0121c69:	ff d0                	call   *%eax
f0121c6b:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f0121c6e:	ff 4d 1c             	decl   0x1c(%ebp)
f0121c71:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f0121c75:	7f e6                	jg     f0121c5d <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f0121c77:	8b 4d 18             	mov    0x18(%ebp),%ecx
f0121c7a:	bb 00 00 00 00       	mov    $0x0,%ebx
f0121c7f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121c82:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121c85:	53                   	push   %ebx
f0121c86:	51                   	push   %ecx
f0121c87:	52                   	push   %edx
f0121c88:	50                   	push   %eax
f0121c89:	e8 0e 1a 00 00       	call   f012369c <__umoddi3>
f0121c8e:	83 c4 10             	add    $0x10,%esp
f0121c91:	05 d4 fb 12 f0       	add    $0xf012fbd4,%eax
f0121c96:	8a 00                	mov    (%eax),%al
f0121c98:	0f be c0             	movsbl %al,%eax
f0121c9b:	83 ec 08             	sub    $0x8,%esp
f0121c9e:	ff 75 0c             	pushl  0xc(%ebp)
f0121ca1:	50                   	push   %eax
f0121ca2:	8b 45 08             	mov    0x8(%ebp),%eax
f0121ca5:	ff d0                	call   *%eax
f0121ca7:	83 c4 10             	add    $0x10,%esp
}
f0121caa:	90                   	nop
f0121cab:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0121cae:	c9                   	leave  
f0121caf:	c3                   	ret    

f0121cb0 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f0121cb0:	55                   	push   %ebp
f0121cb1:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0121cb3:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0121cb7:	7e 1c                	jle    f0121cd5 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f0121cb9:	8b 45 08             	mov    0x8(%ebp),%eax
f0121cbc:	8b 00                	mov    (%eax),%eax
f0121cbe:	8d 50 08             	lea    0x8(%eax),%edx
f0121cc1:	8b 45 08             	mov    0x8(%ebp),%eax
f0121cc4:	89 10                	mov    %edx,(%eax)
f0121cc6:	8b 45 08             	mov    0x8(%ebp),%eax
f0121cc9:	8b 00                	mov    (%eax),%eax
f0121ccb:	83 e8 08             	sub    $0x8,%eax
f0121cce:	8b 50 04             	mov    0x4(%eax),%edx
f0121cd1:	8b 00                	mov    (%eax),%eax
f0121cd3:	eb 40                	jmp    f0121d15 <getuint+0x65>
	else if (lflag)
f0121cd5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0121cd9:	74 1e                	je     f0121cf9 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f0121cdb:	8b 45 08             	mov    0x8(%ebp),%eax
f0121cde:	8b 00                	mov    (%eax),%eax
f0121ce0:	8d 50 04             	lea    0x4(%eax),%edx
f0121ce3:	8b 45 08             	mov    0x8(%ebp),%eax
f0121ce6:	89 10                	mov    %edx,(%eax)
f0121ce8:	8b 45 08             	mov    0x8(%ebp),%eax
f0121ceb:	8b 00                	mov    (%eax),%eax
f0121ced:	83 e8 04             	sub    $0x4,%eax
f0121cf0:	8b 00                	mov    (%eax),%eax
f0121cf2:	ba 00 00 00 00       	mov    $0x0,%edx
f0121cf7:	eb 1c                	jmp    f0121d15 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f0121cf9:	8b 45 08             	mov    0x8(%ebp),%eax
f0121cfc:	8b 00                	mov    (%eax),%eax
f0121cfe:	8d 50 04             	lea    0x4(%eax),%edx
f0121d01:	8b 45 08             	mov    0x8(%ebp),%eax
f0121d04:	89 10                	mov    %edx,(%eax)
f0121d06:	8b 45 08             	mov    0x8(%ebp),%eax
f0121d09:	8b 00                	mov    (%eax),%eax
f0121d0b:	83 e8 04             	sub    $0x4,%eax
f0121d0e:	8b 00                	mov    (%eax),%eax
f0121d10:	ba 00 00 00 00       	mov    $0x0,%edx
}
f0121d15:	5d                   	pop    %ebp
f0121d16:	c3                   	ret    

f0121d17 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f0121d17:	55                   	push   %ebp
f0121d18:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0121d1a:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0121d1e:	7e 1c                	jle    f0121d3c <getint+0x25>
		return va_arg(*ap, long long);
f0121d20:	8b 45 08             	mov    0x8(%ebp),%eax
f0121d23:	8b 00                	mov    (%eax),%eax
f0121d25:	8d 50 08             	lea    0x8(%eax),%edx
f0121d28:	8b 45 08             	mov    0x8(%ebp),%eax
f0121d2b:	89 10                	mov    %edx,(%eax)
f0121d2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0121d30:	8b 00                	mov    (%eax),%eax
f0121d32:	83 e8 08             	sub    $0x8,%eax
f0121d35:	8b 50 04             	mov    0x4(%eax),%edx
f0121d38:	8b 00                	mov    (%eax),%eax
f0121d3a:	eb 38                	jmp    f0121d74 <getint+0x5d>
	else if (lflag)
f0121d3c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0121d40:	74 1a                	je     f0121d5c <getint+0x45>
		return va_arg(*ap, long);
f0121d42:	8b 45 08             	mov    0x8(%ebp),%eax
f0121d45:	8b 00                	mov    (%eax),%eax
f0121d47:	8d 50 04             	lea    0x4(%eax),%edx
f0121d4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0121d4d:	89 10                	mov    %edx,(%eax)
f0121d4f:	8b 45 08             	mov    0x8(%ebp),%eax
f0121d52:	8b 00                	mov    (%eax),%eax
f0121d54:	83 e8 04             	sub    $0x4,%eax
f0121d57:	8b 00                	mov    (%eax),%eax
f0121d59:	99                   	cltd   
f0121d5a:	eb 18                	jmp    f0121d74 <getint+0x5d>
	else
		return va_arg(*ap, int);
f0121d5c:	8b 45 08             	mov    0x8(%ebp),%eax
f0121d5f:	8b 00                	mov    (%eax),%eax
f0121d61:	8d 50 04             	lea    0x4(%eax),%edx
f0121d64:	8b 45 08             	mov    0x8(%ebp),%eax
f0121d67:	89 10                	mov    %edx,(%eax)
f0121d69:	8b 45 08             	mov    0x8(%ebp),%eax
f0121d6c:	8b 00                	mov    (%eax),%eax
f0121d6e:	83 e8 04             	sub    $0x4,%eax
f0121d71:	8b 00                	mov    (%eax),%eax
f0121d73:	99                   	cltd   
}
f0121d74:	5d                   	pop    %ebp
f0121d75:	c3                   	ret    

f0121d76 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f0121d76:	55                   	push   %ebp
f0121d77:	89 e5                	mov    %esp,%ebp
f0121d79:	56                   	push   %esi
f0121d7a:	53                   	push   %ebx
f0121d7b:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0121d7e:	eb 17                	jmp    f0121d97 <vprintfmt+0x21>
			if (ch == '\0')
f0121d80:	85 db                	test   %ebx,%ebx
f0121d82:	0f 84 c1 03 00 00    	je     f0122149 <vprintfmt+0x3d3>
				return;
			putch(ch, putdat);
f0121d88:	83 ec 08             	sub    $0x8,%esp
f0121d8b:	ff 75 0c             	pushl  0xc(%ebp)
f0121d8e:	53                   	push   %ebx
f0121d8f:	8b 45 08             	mov    0x8(%ebp),%eax
f0121d92:	ff d0                	call   *%eax
f0121d94:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f0121d97:	8b 45 10             	mov    0x10(%ebp),%eax
f0121d9a:	8d 50 01             	lea    0x1(%eax),%edx
f0121d9d:	89 55 10             	mov    %edx,0x10(%ebp)
f0121da0:	8a 00                	mov    (%eax),%al
f0121da2:	0f b6 d8             	movzbl %al,%ebx
f0121da5:	83 fb 25             	cmp    $0x25,%ebx
f0121da8:	75 d6                	jne    f0121d80 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f0121daa:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f0121dae:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f0121db5:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f0121dbc:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f0121dc3:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f0121dca:	8b 45 10             	mov    0x10(%ebp),%eax
f0121dcd:	8d 50 01             	lea    0x1(%eax),%edx
f0121dd0:	89 55 10             	mov    %edx,0x10(%ebp)
f0121dd3:	8a 00                	mov    (%eax),%al
f0121dd5:	0f b6 d8             	movzbl %al,%ebx
f0121dd8:	8d 43 dd             	lea    -0x23(%ebx),%eax
f0121ddb:	83 f8 5b             	cmp    $0x5b,%eax
f0121dde:	0f 87 3d 03 00 00    	ja     f0122121 <vprintfmt+0x3ab>
f0121de4:	8b 04 85 f8 fb 12 f0 	mov    -0xfed0408(,%eax,4),%eax
f0121deb:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f0121ded:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f0121df1:	eb d7                	jmp    f0121dca <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f0121df3:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f0121df7:	eb d1                	jmp    f0121dca <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0121df9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f0121e00:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0121e03:	89 d0                	mov    %edx,%eax
f0121e05:	c1 e0 02             	shl    $0x2,%eax
f0121e08:	01 d0                	add    %edx,%eax
f0121e0a:	01 c0                	add    %eax,%eax
f0121e0c:	01 d8                	add    %ebx,%eax
f0121e0e:	83 e8 30             	sub    $0x30,%eax
f0121e11:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f0121e14:	8b 45 10             	mov    0x10(%ebp),%eax
f0121e17:	8a 00                	mov    (%eax),%al
f0121e19:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f0121e1c:	83 fb 2f             	cmp    $0x2f,%ebx
f0121e1f:	7e 3e                	jle    f0121e5f <vprintfmt+0xe9>
f0121e21:	83 fb 39             	cmp    $0x39,%ebx
f0121e24:	7f 39                	jg     f0121e5f <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0121e26:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f0121e29:	eb d5                	jmp    f0121e00 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f0121e2b:	8b 45 14             	mov    0x14(%ebp),%eax
f0121e2e:	83 c0 04             	add    $0x4,%eax
f0121e31:	89 45 14             	mov    %eax,0x14(%ebp)
f0121e34:	8b 45 14             	mov    0x14(%ebp),%eax
f0121e37:	83 e8 04             	sub    $0x4,%eax
f0121e3a:	8b 00                	mov    (%eax),%eax
f0121e3c:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f0121e3f:	eb 1f                	jmp    f0121e60 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f0121e41:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0121e45:	79 83                	jns    f0121dca <vprintfmt+0x54>
				width = 0;
f0121e47:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f0121e4e:	e9 77 ff ff ff       	jmp    f0121dca <vprintfmt+0x54>

		case '#':
			altflag = 1;
f0121e53:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f0121e5a:	e9 6b ff ff ff       	jmp    f0121dca <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f0121e5f:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f0121e60:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0121e64:	0f 89 60 ff ff ff    	jns    f0121dca <vprintfmt+0x54>
				width = precision, precision = -1;
f0121e6a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0121e6d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0121e70:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f0121e77:	e9 4e ff ff ff       	jmp    f0121dca <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f0121e7c:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f0121e7f:	e9 46 ff ff ff       	jmp    f0121dca <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f0121e84:	8b 45 14             	mov    0x14(%ebp),%eax
f0121e87:	83 c0 04             	add    $0x4,%eax
f0121e8a:	89 45 14             	mov    %eax,0x14(%ebp)
f0121e8d:	8b 45 14             	mov    0x14(%ebp),%eax
f0121e90:	83 e8 04             	sub    $0x4,%eax
f0121e93:	8b 00                	mov    (%eax),%eax
f0121e95:	83 ec 08             	sub    $0x8,%esp
f0121e98:	ff 75 0c             	pushl  0xc(%ebp)
f0121e9b:	50                   	push   %eax
f0121e9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0121e9f:	ff d0                	call   *%eax
f0121ea1:	83 c4 10             	add    $0x10,%esp
			break;
f0121ea4:	e9 9b 02 00 00       	jmp    f0122144 <vprintfmt+0x3ce>

		// error message
		case 'e':
			err = va_arg(ap, int);
f0121ea9:	8b 45 14             	mov    0x14(%ebp),%eax
f0121eac:	83 c0 04             	add    $0x4,%eax
f0121eaf:	89 45 14             	mov    %eax,0x14(%ebp)
f0121eb2:	8b 45 14             	mov    0x14(%ebp),%eax
f0121eb5:	83 e8 04             	sub    $0x4,%eax
f0121eb8:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f0121eba:	85 db                	test   %ebx,%ebx
f0121ebc:	79 02                	jns    f0121ec0 <vprintfmt+0x14a>
				err = -err;
f0121ebe:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f0121ec0:	83 fb 64             	cmp    $0x64,%ebx
f0121ec3:	7f 0b                	jg     f0121ed0 <vprintfmt+0x15a>
f0121ec5:	8b 34 9d 40 fa 12 f0 	mov    -0xfed05c0(,%ebx,4),%esi
f0121ecc:	85 f6                	test   %esi,%esi
f0121ece:	75 19                	jne    f0121ee9 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f0121ed0:	53                   	push   %ebx
f0121ed1:	68 e5 fb 12 f0       	push   $0xf012fbe5
f0121ed6:	ff 75 0c             	pushl  0xc(%ebp)
f0121ed9:	ff 75 08             	pushl  0x8(%ebp)
f0121edc:	e8 70 02 00 00       	call   f0122151 <printfmt>
f0121ee1:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f0121ee4:	e9 5b 02 00 00       	jmp    f0122144 <vprintfmt+0x3ce>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f0121ee9:	56                   	push   %esi
f0121eea:	68 ee fb 12 f0       	push   $0xf012fbee
f0121eef:	ff 75 0c             	pushl  0xc(%ebp)
f0121ef2:	ff 75 08             	pushl  0x8(%ebp)
f0121ef5:	e8 57 02 00 00       	call   f0122151 <printfmt>
f0121efa:	83 c4 10             	add    $0x10,%esp
			break;
f0121efd:	e9 42 02 00 00       	jmp    f0122144 <vprintfmt+0x3ce>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f0121f02:	8b 45 14             	mov    0x14(%ebp),%eax
f0121f05:	83 c0 04             	add    $0x4,%eax
f0121f08:	89 45 14             	mov    %eax,0x14(%ebp)
f0121f0b:	8b 45 14             	mov    0x14(%ebp),%eax
f0121f0e:	83 e8 04             	sub    $0x4,%eax
f0121f11:	8b 30                	mov    (%eax),%esi
f0121f13:	85 f6                	test   %esi,%esi
f0121f15:	75 05                	jne    f0121f1c <vprintfmt+0x1a6>
				p = "(null)";
f0121f17:	be f1 fb 12 f0       	mov    $0xf012fbf1,%esi
			if (width > 0 && padc != '-')
f0121f1c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0121f20:	7e 6d                	jle    f0121f8f <vprintfmt+0x219>
f0121f22:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f0121f26:	74 67                	je     f0121f8f <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f0121f28:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0121f2b:	83 ec 08             	sub    $0x8,%esp
f0121f2e:	50                   	push   %eax
f0121f2f:	56                   	push   %esi
f0121f30:	e8 26 05 00 00       	call   f012245b <strnlen>
f0121f35:	83 c4 10             	add    $0x10,%esp
f0121f38:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f0121f3b:	eb 16                	jmp    f0121f53 <vprintfmt+0x1dd>
					putch(padc, putdat);
f0121f3d:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f0121f41:	83 ec 08             	sub    $0x8,%esp
f0121f44:	ff 75 0c             	pushl  0xc(%ebp)
f0121f47:	50                   	push   %eax
f0121f48:	8b 45 08             	mov    0x8(%ebp),%eax
f0121f4b:	ff d0                	call   *%eax
f0121f4d:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f0121f50:	ff 4d e4             	decl   -0x1c(%ebp)
f0121f53:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0121f57:	7f e4                	jg     f0121f3d <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0121f59:	eb 34                	jmp    f0121f8f <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f0121f5b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0121f5f:	74 1c                	je     f0121f7d <vprintfmt+0x207>
f0121f61:	83 fb 1f             	cmp    $0x1f,%ebx
f0121f64:	7e 05                	jle    f0121f6b <vprintfmt+0x1f5>
f0121f66:	83 fb 7e             	cmp    $0x7e,%ebx
f0121f69:	7e 12                	jle    f0121f7d <vprintfmt+0x207>
					putch('?', putdat);
f0121f6b:	83 ec 08             	sub    $0x8,%esp
f0121f6e:	ff 75 0c             	pushl  0xc(%ebp)
f0121f71:	6a 3f                	push   $0x3f
f0121f73:	8b 45 08             	mov    0x8(%ebp),%eax
f0121f76:	ff d0                	call   *%eax
f0121f78:	83 c4 10             	add    $0x10,%esp
f0121f7b:	eb 0f                	jmp    f0121f8c <vprintfmt+0x216>
				else
					putch(ch, putdat);
f0121f7d:	83 ec 08             	sub    $0x8,%esp
f0121f80:	ff 75 0c             	pushl  0xc(%ebp)
f0121f83:	53                   	push   %ebx
f0121f84:	8b 45 08             	mov    0x8(%ebp),%eax
f0121f87:	ff d0                	call   *%eax
f0121f89:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f0121f8c:	ff 4d e4             	decl   -0x1c(%ebp)
f0121f8f:	89 f0                	mov    %esi,%eax
f0121f91:	8d 70 01             	lea    0x1(%eax),%esi
f0121f94:	8a 00                	mov    (%eax),%al
f0121f96:	0f be d8             	movsbl %al,%ebx
f0121f99:	85 db                	test   %ebx,%ebx
f0121f9b:	74 24                	je     f0121fc1 <vprintfmt+0x24b>
f0121f9d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0121fa1:	78 b8                	js     f0121f5b <vprintfmt+0x1e5>
f0121fa3:	ff 4d e0             	decl   -0x20(%ebp)
f0121fa6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0121faa:	79 af                	jns    f0121f5b <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0121fac:	eb 13                	jmp    f0121fc1 <vprintfmt+0x24b>
				putch(' ', putdat);
f0121fae:	83 ec 08             	sub    $0x8,%esp
f0121fb1:	ff 75 0c             	pushl  0xc(%ebp)
f0121fb4:	6a 20                	push   $0x20
f0121fb6:	8b 45 08             	mov    0x8(%ebp),%eax
f0121fb9:	ff d0                	call   *%eax
f0121fbb:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0121fbe:	ff 4d e4             	decl   -0x1c(%ebp)
f0121fc1:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0121fc5:	7f e7                	jg     f0121fae <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f0121fc7:	e9 78 01 00 00       	jmp    f0122144 <vprintfmt+0x3ce>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f0121fcc:	83 ec 08             	sub    $0x8,%esp
f0121fcf:	ff 75 e8             	pushl  -0x18(%ebp)
f0121fd2:	8d 45 14             	lea    0x14(%ebp),%eax
f0121fd5:	50                   	push   %eax
f0121fd6:	e8 3c fd ff ff       	call   f0121d17 <getint>
f0121fdb:	83 c4 10             	add    $0x10,%esp
f0121fde:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0121fe1:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f0121fe4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121fe7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121fea:	85 d2                	test   %edx,%edx
f0121fec:	79 23                	jns    f0122011 <vprintfmt+0x29b>
				putch('-', putdat);
f0121fee:	83 ec 08             	sub    $0x8,%esp
f0121ff1:	ff 75 0c             	pushl  0xc(%ebp)
f0121ff4:	6a 2d                	push   $0x2d
f0121ff6:	8b 45 08             	mov    0x8(%ebp),%eax
f0121ff9:	ff d0                	call   *%eax
f0121ffb:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f0121ffe:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0122001:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122004:	f7 d8                	neg    %eax
f0122006:	83 d2 00             	adc    $0x0,%edx
f0122009:	f7 da                	neg    %edx
f012200b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012200e:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f0122011:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0122018:	e9 bc 00 00 00       	jmp    f01220d9 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f012201d:	83 ec 08             	sub    $0x8,%esp
f0122020:	ff 75 e8             	pushl  -0x18(%ebp)
f0122023:	8d 45 14             	lea    0x14(%ebp),%eax
f0122026:	50                   	push   %eax
f0122027:	e8 84 fc ff ff       	call   f0121cb0 <getuint>
f012202c:	83 c4 10             	add    $0x10,%esp
f012202f:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0122032:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f0122035:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012203c:	e9 98 00 00 00       	jmp    f01220d9 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f0122041:	83 ec 08             	sub    $0x8,%esp
f0122044:	ff 75 0c             	pushl  0xc(%ebp)
f0122047:	6a 58                	push   $0x58
f0122049:	8b 45 08             	mov    0x8(%ebp),%eax
f012204c:	ff d0                	call   *%eax
f012204e:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0122051:	83 ec 08             	sub    $0x8,%esp
f0122054:	ff 75 0c             	pushl  0xc(%ebp)
f0122057:	6a 58                	push   $0x58
f0122059:	8b 45 08             	mov    0x8(%ebp),%eax
f012205c:	ff d0                	call   *%eax
f012205e:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f0122061:	83 ec 08             	sub    $0x8,%esp
f0122064:	ff 75 0c             	pushl  0xc(%ebp)
f0122067:	6a 58                	push   $0x58
f0122069:	8b 45 08             	mov    0x8(%ebp),%eax
f012206c:	ff d0                	call   *%eax
f012206e:	83 c4 10             	add    $0x10,%esp
			break;
f0122071:	e9 ce 00 00 00       	jmp    f0122144 <vprintfmt+0x3ce>

		// pointer
		case 'p':
			putch('0', putdat);
f0122076:	83 ec 08             	sub    $0x8,%esp
f0122079:	ff 75 0c             	pushl  0xc(%ebp)
f012207c:	6a 30                	push   $0x30
f012207e:	8b 45 08             	mov    0x8(%ebp),%eax
f0122081:	ff d0                	call   *%eax
f0122083:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f0122086:	83 ec 08             	sub    $0x8,%esp
f0122089:	ff 75 0c             	pushl  0xc(%ebp)
f012208c:	6a 78                	push   $0x78
f012208e:	8b 45 08             	mov    0x8(%ebp),%eax
f0122091:	ff d0                	call   *%eax
f0122093:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f0122096:	8b 45 14             	mov    0x14(%ebp),%eax
f0122099:	83 c0 04             	add    $0x4,%eax
f012209c:	89 45 14             	mov    %eax,0x14(%ebp)
f012209f:	8b 45 14             	mov    0x14(%ebp),%eax
f01220a2:	83 e8 04             	sub    $0x4,%eax
f01220a5:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f01220a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01220aa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f01220b1:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f01220b8:	eb 1f                	jmp    f01220d9 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f01220ba:	83 ec 08             	sub    $0x8,%esp
f01220bd:	ff 75 e8             	pushl  -0x18(%ebp)
f01220c0:	8d 45 14             	lea    0x14(%ebp),%eax
f01220c3:	50                   	push   %eax
f01220c4:	e8 e7 fb ff ff       	call   f0121cb0 <getuint>
f01220c9:	83 c4 10             	add    $0x10,%esp
f01220cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01220cf:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f01220d2:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f01220d9:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f01220dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01220e0:	83 ec 04             	sub    $0x4,%esp
f01220e3:	52                   	push   %edx
f01220e4:	ff 75 e4             	pushl  -0x1c(%ebp)
f01220e7:	50                   	push   %eax
f01220e8:	ff 75 f4             	pushl  -0xc(%ebp)
f01220eb:	ff 75 f0             	pushl  -0x10(%ebp)
f01220ee:	ff 75 0c             	pushl  0xc(%ebp)
f01220f1:	ff 75 08             	pushl  0x8(%ebp)
f01220f4:	e8 00 fb ff ff       	call   f0121bf9 <printnum>
f01220f9:	83 c4 20             	add    $0x20,%esp
			break;
f01220fc:	eb 46                	jmp    f0122144 <vprintfmt+0x3ce>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f01220fe:	83 ec 08             	sub    $0x8,%esp
f0122101:	ff 75 0c             	pushl  0xc(%ebp)
f0122104:	53                   	push   %ebx
f0122105:	8b 45 08             	mov    0x8(%ebp),%eax
f0122108:	ff d0                	call   *%eax
f012210a:	83 c4 10             	add    $0x10,%esp
			break;
f012210d:	eb 35                	jmp    f0122144 <vprintfmt+0x3ce>

		/**********************************/
		/*2023*/
		// DON'T Print Program Name & UD
		case '~':
			printProgName = 0;
f012210f:	c6 05 f0 ed 59 f0 00 	movb   $0x0,0xf059edf0
			break;
f0122116:	eb 2c                	jmp    f0122144 <vprintfmt+0x3ce>
		// Print Program Name & UD
		case '@':
			printProgName = 1;
f0122118:	c6 05 f0 ed 59 f0 01 	movb   $0x1,0xf059edf0
			break;
f012211f:	eb 23                	jmp    f0122144 <vprintfmt+0x3ce>
		/**********************************/

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f0122121:	83 ec 08             	sub    $0x8,%esp
f0122124:	ff 75 0c             	pushl  0xc(%ebp)
f0122127:	6a 25                	push   $0x25
f0122129:	8b 45 08             	mov    0x8(%ebp),%eax
f012212c:	ff d0                	call   *%eax
f012212e:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f0122131:	ff 4d 10             	decl   0x10(%ebp)
f0122134:	eb 03                	jmp    f0122139 <vprintfmt+0x3c3>
f0122136:	ff 4d 10             	decl   0x10(%ebp)
f0122139:	8b 45 10             	mov    0x10(%ebp),%eax
f012213c:	48                   	dec    %eax
f012213d:	8a 00                	mov    (%eax),%al
f012213f:	3c 25                	cmp    $0x25,%al
f0122141:	75 f3                	jne    f0122136 <vprintfmt+0x3c0>
				/* do nothing */;
			break;
f0122143:	90                   	nop
		}
	}
f0122144:	e9 35 fc ff ff       	jmp    f0121d7e <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f0122149:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f012214a:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012214d:	5b                   	pop    %ebx
f012214e:	5e                   	pop    %esi
f012214f:	5d                   	pop    %ebp
f0122150:	c3                   	ret    

f0122151 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f0122151:	55                   	push   %ebp
f0122152:	89 e5                	mov    %esp,%ebp
f0122154:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0122157:	8d 45 10             	lea    0x10(%ebp),%eax
f012215a:	83 c0 04             	add    $0x4,%eax
f012215d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f0122160:	8b 45 10             	mov    0x10(%ebp),%eax
f0122163:	ff 75 f4             	pushl  -0xc(%ebp)
f0122166:	50                   	push   %eax
f0122167:	ff 75 0c             	pushl  0xc(%ebp)
f012216a:	ff 75 08             	pushl  0x8(%ebp)
f012216d:	e8 04 fc ff ff       	call   f0121d76 <vprintfmt>
f0122172:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0122175:	90                   	nop
f0122176:	c9                   	leave  
f0122177:	c3                   	ret    

f0122178 <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f0122178:	55                   	push   %ebp
f0122179:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f012217b:	8b 45 0c             	mov    0xc(%ebp),%eax
f012217e:	8b 40 08             	mov    0x8(%eax),%eax
f0122181:	8d 50 01             	lea    0x1(%eax),%edx
f0122184:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122187:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f012218a:	8b 45 0c             	mov    0xc(%ebp),%eax
f012218d:	8b 10                	mov    (%eax),%edx
f012218f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122192:	8b 40 04             	mov    0x4(%eax),%eax
f0122195:	39 c2                	cmp    %eax,%edx
f0122197:	73 12                	jae    f01221ab <sprintputch+0x33>
		*b->buf++ = ch;
f0122199:	8b 45 0c             	mov    0xc(%ebp),%eax
f012219c:	8b 00                	mov    (%eax),%eax
f012219e:	8d 48 01             	lea    0x1(%eax),%ecx
f01221a1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01221a4:	89 0a                	mov    %ecx,(%edx)
f01221a6:	8b 55 08             	mov    0x8(%ebp),%edx
f01221a9:	88 10                	mov    %dl,(%eax)
}
f01221ab:	90                   	nop
f01221ac:	5d                   	pop    %ebp
f01221ad:	c3                   	ret    

f01221ae <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f01221ae:	55                   	push   %ebp
f01221af:	89 e5                	mov    %esp,%ebp
f01221b1:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f01221b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01221b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01221ba:	8b 45 0c             	mov    0xc(%ebp),%eax
f01221bd:	8d 50 ff             	lea    -0x1(%eax),%edx
f01221c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01221c3:	01 d0                	add    %edx,%eax
f01221c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01221c8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f01221cf:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01221d3:	74 06                	je     f01221db <vsnprintf+0x2d>
f01221d5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01221d9:	7f 07                	jg     f01221e2 <vsnprintf+0x34>
		return -E_INVAL;
f01221db:	b8 03 00 00 00       	mov    $0x3,%eax
f01221e0:	eb 20                	jmp    f0122202 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f01221e2:	ff 75 14             	pushl  0x14(%ebp)
f01221e5:	ff 75 10             	pushl  0x10(%ebp)
f01221e8:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01221eb:	50                   	push   %eax
f01221ec:	68 78 21 12 f0       	push   $0xf0122178
f01221f1:	e8 80 fb ff ff       	call   f0121d76 <vprintfmt>
f01221f6:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f01221f9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01221fc:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f01221ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0122202:	c9                   	leave  
f0122203:	c3                   	ret    

f0122204 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f0122204:	55                   	push   %ebp
f0122205:	89 e5                	mov    %esp,%ebp
f0122207:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f012220a:	8d 45 10             	lea    0x10(%ebp),%eax
f012220d:	83 c0 04             	add    $0x4,%eax
f0122210:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f0122213:	8b 45 10             	mov    0x10(%ebp),%eax
f0122216:	ff 75 f4             	pushl  -0xc(%ebp)
f0122219:	50                   	push   %eax
f012221a:	ff 75 0c             	pushl  0xc(%ebp)
f012221d:	ff 75 08             	pushl  0x8(%ebp)
f0122220:	e8 89 ff ff ff       	call   f01221ae <vsnprintf>
f0122225:	83 c4 10             	add    $0x10,%esp
f0122228:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f012222b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f012222e:	c9                   	leave  
f012222f:	c3                   	ret    

f0122230 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f0122230:	55                   	push   %ebp
f0122231:	89 e5                	mov    %esp,%ebp
f0122233:	83 ec 18             	sub    $0x18,%esp
	int i, c, echoing;

	if (prompt != NULL)
f0122236:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012223a:	74 13                	je     f012224f <readline+0x1f>
		cprintf("%s", prompt);
f012223c:	83 ec 08             	sub    $0x8,%esp
f012223f:	ff 75 08             	pushl  0x8(%ebp)
f0122242:	68 68 fd 12 f0       	push   $0xf012fd68
f0122247:	e8 20 ed fd ff       	call   f0100f6c <cprintf>
f012224c:	83 c4 10             	add    $0x10,%esp

	i = 0;
f012224f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0122256:	83 ec 0c             	sub    $0xc,%esp
f0122259:	6a 00                	push   $0x0
f012225b:	e8 19 ec fd ff       	call   f0100e79 <iscons>
f0122260:	83 c4 10             	add    $0x10,%esp
f0122263:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0122266:	e8 f5 eb fd ff       	call   f0100e60 <getchar>
f012226b:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f012226e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122272:	79 22                	jns    f0122296 <readline+0x66>
			if (c != -E_EOF)
f0122274:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0122278:	0f 84 ad 00 00 00    	je     f012232b <readline+0xfb>
				cprintf("read error: %e\n", c);
f012227e:	83 ec 08             	sub    $0x8,%esp
f0122281:	ff 75 ec             	pushl  -0x14(%ebp)
f0122284:	68 6b fd 12 f0       	push   $0xf012fd6b
f0122289:	e8 de ec fd ff       	call   f0100f6c <cprintf>
f012228e:	83 c4 10             	add    $0x10,%esp
			break;
f0122291:	e9 95 00 00 00       	jmp    f012232b <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f0122296:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012229a:	7e 34                	jle    f01222d0 <readline+0xa0>
f012229c:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f01222a3:	7f 2b                	jg     f01222d0 <readline+0xa0>
			if (echoing)
f01222a5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01222a9:	74 0e                	je     f01222b9 <readline+0x89>
				cputchar(c);
f01222ab:	83 ec 0c             	sub    $0xc,%esp
f01222ae:	ff 75 ec             	pushl  -0x14(%ebp)
f01222b1:	e8 93 eb fd ff       	call   f0100e49 <cputchar>
f01222b6:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01222b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01222bc:	8d 50 01             	lea    0x1(%eax),%edx
f01222bf:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01222c2:	89 c2                	mov    %eax,%edx
f01222c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01222c7:	01 d0                	add    %edx,%eax
f01222c9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01222cc:	88 10                	mov    %dl,(%eax)
f01222ce:	eb 56                	jmp    f0122326 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f01222d0:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f01222d4:	75 1f                	jne    f01222f5 <readline+0xc5>
f01222d6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01222da:	7e 19                	jle    f01222f5 <readline+0xc5>
			if (echoing)
f01222dc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01222e0:	74 0e                	je     f01222f0 <readline+0xc0>
				cputchar(c);
f01222e2:	83 ec 0c             	sub    $0xc,%esp
f01222e5:	ff 75 ec             	pushl  -0x14(%ebp)
f01222e8:	e8 5c eb fd ff       	call   f0100e49 <cputchar>
f01222ed:	83 c4 10             	add    $0x10,%esp

			i--;
f01222f0:	ff 4d f4             	decl   -0xc(%ebp)
f01222f3:	eb 31                	jmp    f0122326 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f01222f5:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f01222f9:	74 0a                	je     f0122305 <readline+0xd5>
f01222fb:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f01222ff:	0f 85 61 ff ff ff    	jne    f0122266 <readline+0x36>
			if (echoing)
f0122305:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0122309:	74 0e                	je     f0122319 <readline+0xe9>
				cputchar(c);
f012230b:	83 ec 0c             	sub    $0xc,%esp
f012230e:	ff 75 ec             	pushl  -0x14(%ebp)
f0122311:	e8 33 eb fd ff       	call   f0100e49 <cputchar>
f0122316:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f0122319:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012231c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012231f:	01 d0                	add    %edx,%eax
f0122321:	c6 00 00             	movb   $0x0,(%eax)
			break;
f0122324:	eb 06                	jmp    f012232c <readline+0xfc>
		}
	}
f0122326:	e9 3b ff ff ff       	jmp    f0122266 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			break;
f012232b:	90                   	nop

			buf[i] = 0;
			break;
		}
	}
}
f012232c:	90                   	nop
f012232d:	c9                   	leave  
f012232e:	c3                   	ret    

f012232f <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f012232f:	55                   	push   %ebp
f0122330:	89 e5                	mov    %esp,%ebp
f0122332:	83 ec 18             	sub    $0x18,%esp
	sys_lock_cons();
f0122335:	e8 57 b5 fe ff       	call   f010d891 <sys_lock_cons>
	{
		int i, c, echoing;

		if (prompt != NULL)
f012233a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012233e:	74 13                	je     f0122353 <atomic_readline+0x24>
			cprintf("%s", prompt);
f0122340:	83 ec 08             	sub    $0x8,%esp
f0122343:	ff 75 08             	pushl  0x8(%ebp)
f0122346:	68 68 fd 12 f0       	push   $0xf012fd68
f012234b:	e8 1c ec fd ff       	call   f0100f6c <cprintf>
f0122350:	83 c4 10             	add    $0x10,%esp

		i = 0;
f0122353:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		echoing = iscons(0);
f012235a:	83 ec 0c             	sub    $0xc,%esp
f012235d:	6a 00                	push   $0x0
f012235f:	e8 15 eb fd ff       	call   f0100e79 <iscons>
f0122364:	83 c4 10             	add    $0x10,%esp
f0122367:	89 45 f0             	mov    %eax,-0x10(%ebp)
		while (1) {
			c = getchar();
f012236a:	e8 f1 ea fd ff       	call   f0100e60 <getchar>
f012236f:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (c < 0) {
f0122372:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122376:	79 22                	jns    f012239a <atomic_readline+0x6b>
				if (c != -E_EOF)
f0122378:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f012237c:	0f 84 ad 00 00 00    	je     f012242f <atomic_readline+0x100>
					cprintf("read error: %e\n", c);
f0122382:	83 ec 08             	sub    $0x8,%esp
f0122385:	ff 75 ec             	pushl  -0x14(%ebp)
f0122388:	68 6b fd 12 f0       	push   $0xf012fd6b
f012238d:	e8 da eb fd ff       	call   f0100f6c <cprintf>
f0122392:	83 c4 10             	add    $0x10,%esp
				break;
f0122395:	e9 95 00 00 00       	jmp    f012242f <atomic_readline+0x100>
			} else if (c >= ' ' && i < BUFLEN-1) {
f012239a:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f012239e:	7e 34                	jle    f01223d4 <atomic_readline+0xa5>
f01223a0:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f01223a7:	7f 2b                	jg     f01223d4 <atomic_readline+0xa5>
				if (echoing)
f01223a9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01223ad:	74 0e                	je     f01223bd <atomic_readline+0x8e>
					cputchar(c);
f01223af:	83 ec 0c             	sub    $0xc,%esp
f01223b2:	ff 75 ec             	pushl  -0x14(%ebp)
f01223b5:	e8 8f ea fd ff       	call   f0100e49 <cputchar>
f01223ba:	83 c4 10             	add    $0x10,%esp
				buf[i++] = c;
f01223bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01223c0:	8d 50 01             	lea    0x1(%eax),%edx
f01223c3:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01223c6:	89 c2                	mov    %eax,%edx
f01223c8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01223cb:	01 d0                	add    %edx,%eax
f01223cd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01223d0:	88 10                	mov    %dl,(%eax)
f01223d2:	eb 56                	jmp    f012242a <atomic_readline+0xfb>
			} else if (c == '\b' && i > 0) {
f01223d4:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f01223d8:	75 1f                	jne    f01223f9 <atomic_readline+0xca>
f01223da:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01223de:	7e 19                	jle    f01223f9 <atomic_readline+0xca>
				if (echoing)
f01223e0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01223e4:	74 0e                	je     f01223f4 <atomic_readline+0xc5>
					cputchar(c);
f01223e6:	83 ec 0c             	sub    $0xc,%esp
f01223e9:	ff 75 ec             	pushl  -0x14(%ebp)
f01223ec:	e8 58 ea fd ff       	call   f0100e49 <cputchar>
f01223f1:	83 c4 10             	add    $0x10,%esp
				i--;
f01223f4:	ff 4d f4             	decl   -0xc(%ebp)
f01223f7:	eb 31                	jmp    f012242a <atomic_readline+0xfb>
			} else if (c == '\n' || c == '\r') {
f01223f9:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f01223fd:	74 0a                	je     f0122409 <atomic_readline+0xda>
f01223ff:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0122403:	0f 85 61 ff ff ff    	jne    f012236a <atomic_readline+0x3b>
				if (echoing)
f0122409:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012240d:	74 0e                	je     f012241d <atomic_readline+0xee>
					cputchar(c);
f012240f:	83 ec 0c             	sub    $0xc,%esp
f0122412:	ff 75 ec             	pushl  -0x14(%ebp)
f0122415:	e8 2f ea fd ff       	call   f0100e49 <cputchar>
f012241a:	83 c4 10             	add    $0x10,%esp
				buf[i] = 0;
f012241d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122420:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122423:	01 d0                	add    %edx,%eax
f0122425:	c6 00 00             	movb   $0x0,(%eax)
				break;
f0122428:	eb 06                	jmp    f0122430 <atomic_readline+0x101>
			}
		}
f012242a:	e9 3b ff ff ff       	jmp    f012236a <atomic_readline+0x3b>
		while (1) {
			c = getchar();
			if (c < 0) {
				if (c != -E_EOF)
					cprintf("read error: %e\n", c);
				break;
f012242f:	90                   	nop
				buf[i] = 0;
				break;
			}
		}
	}
	sys_unlock_cons();
f0122430:	e8 6a b4 fe ff       	call   f010d89f <sys_unlock_cons>
}
f0122435:	90                   	nop
f0122436:	c9                   	leave  
f0122437:	c3                   	ret    

f0122438 <strlen>:
#include <inc/string.h>
#include <inc/assert.h>

int
strlen(const char *s)
{
f0122438:	55                   	push   %ebp
f0122439:	89 e5                	mov    %esp,%ebp
f012243b:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f012243e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0122445:	eb 06                	jmp    f012244d <strlen+0x15>
		n++;
f0122447:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f012244a:	ff 45 08             	incl   0x8(%ebp)
f012244d:	8b 45 08             	mov    0x8(%ebp),%eax
f0122450:	8a 00                	mov    (%eax),%al
f0122452:	84 c0                	test   %al,%al
f0122454:	75 f1                	jne    f0122447 <strlen+0xf>
		n++;
	return n;
f0122456:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0122459:	c9                   	leave  
f012245a:	c3                   	ret    

f012245b <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f012245b:	55                   	push   %ebp
f012245c:	89 e5                	mov    %esp,%ebp
f012245e:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0122461:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0122468:	eb 09                	jmp    f0122473 <strnlen+0x18>
		n++;
f012246a:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f012246d:	ff 45 08             	incl   0x8(%ebp)
f0122470:	ff 4d 0c             	decl   0xc(%ebp)
f0122473:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0122477:	74 09                	je     f0122482 <strnlen+0x27>
f0122479:	8b 45 08             	mov    0x8(%ebp),%eax
f012247c:	8a 00                	mov    (%eax),%al
f012247e:	84 c0                	test   %al,%al
f0122480:	75 e8                	jne    f012246a <strnlen+0xf>
		n++;
	return n;
f0122482:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0122485:	c9                   	leave  
f0122486:	c3                   	ret    

f0122487 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f0122487:	55                   	push   %ebp
f0122488:	89 e5                	mov    %esp,%ebp
f012248a:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f012248d:	8b 45 08             	mov    0x8(%ebp),%eax
f0122490:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f0122493:	90                   	nop
f0122494:	8b 45 08             	mov    0x8(%ebp),%eax
f0122497:	8d 50 01             	lea    0x1(%eax),%edx
f012249a:	89 55 08             	mov    %edx,0x8(%ebp)
f012249d:	8b 55 0c             	mov    0xc(%ebp),%edx
f01224a0:	8d 4a 01             	lea    0x1(%edx),%ecx
f01224a3:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f01224a6:	8a 12                	mov    (%edx),%dl
f01224a8:	88 10                	mov    %dl,(%eax)
f01224aa:	8a 00                	mov    (%eax),%al
f01224ac:	84 c0                	test   %al,%al
f01224ae:	75 e4                	jne    f0122494 <strcpy+0xd>
		/* do nothing */;
	return ret;
f01224b0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01224b3:	c9                   	leave  
f01224b4:	c3                   	ret    

f01224b5 <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f01224b5:	55                   	push   %ebp
f01224b6:	89 e5                	mov    %esp,%ebp
f01224b8:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f01224bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01224be:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f01224c1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01224c8:	eb 1f                	jmp    f01224e9 <strncpy+0x34>
		*dst++ = *src;
f01224ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01224cd:	8d 50 01             	lea    0x1(%eax),%edx
f01224d0:	89 55 08             	mov    %edx,0x8(%ebp)
f01224d3:	8b 55 0c             	mov    0xc(%ebp),%edx
f01224d6:	8a 12                	mov    (%edx),%dl
f01224d8:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f01224da:	8b 45 0c             	mov    0xc(%ebp),%eax
f01224dd:	8a 00                	mov    (%eax),%al
f01224df:	84 c0                	test   %al,%al
f01224e1:	74 03                	je     f01224e6 <strncpy+0x31>
			src++;
f01224e3:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f01224e6:	ff 45 fc             	incl   -0x4(%ebp)
f01224e9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01224ec:	3b 45 10             	cmp    0x10(%ebp),%eax
f01224ef:	72 d9                	jb     f01224ca <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f01224f1:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01224f4:	c9                   	leave  
f01224f5:	c3                   	ret    

f01224f6 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f01224f6:	55                   	push   %ebp
f01224f7:	89 e5                	mov    %esp,%ebp
f01224f9:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f01224fc:	8b 45 08             	mov    0x8(%ebp),%eax
f01224ff:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f0122502:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0122506:	74 30                	je     f0122538 <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f0122508:	eb 16                	jmp    f0122520 <strlcpy+0x2a>
			*dst++ = *src++;
f012250a:	8b 45 08             	mov    0x8(%ebp),%eax
f012250d:	8d 50 01             	lea    0x1(%eax),%edx
f0122510:	89 55 08             	mov    %edx,0x8(%ebp)
f0122513:	8b 55 0c             	mov    0xc(%ebp),%edx
f0122516:	8d 4a 01             	lea    0x1(%edx),%ecx
f0122519:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f012251c:	8a 12                	mov    (%edx),%dl
f012251e:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0122520:	ff 4d 10             	decl   0x10(%ebp)
f0122523:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0122527:	74 09                	je     f0122532 <strlcpy+0x3c>
f0122529:	8b 45 0c             	mov    0xc(%ebp),%eax
f012252c:	8a 00                	mov    (%eax),%al
f012252e:	84 c0                	test   %al,%al
f0122530:	75 d8                	jne    f012250a <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f0122532:	8b 45 08             	mov    0x8(%ebp),%eax
f0122535:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f0122538:	8b 55 08             	mov    0x8(%ebp),%edx
f012253b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012253e:	29 c2                	sub    %eax,%edx
f0122540:	89 d0                	mov    %edx,%eax
}
f0122542:	c9                   	leave  
f0122543:	c3                   	ret    

f0122544 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f0122544:	55                   	push   %ebp
f0122545:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f0122547:	eb 06                	jmp    f012254f <strcmp+0xb>
		p++, q++;
f0122549:	ff 45 08             	incl   0x8(%ebp)
f012254c:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f012254f:	8b 45 08             	mov    0x8(%ebp),%eax
f0122552:	8a 00                	mov    (%eax),%al
f0122554:	84 c0                	test   %al,%al
f0122556:	74 0e                	je     f0122566 <strcmp+0x22>
f0122558:	8b 45 08             	mov    0x8(%ebp),%eax
f012255b:	8a 10                	mov    (%eax),%dl
f012255d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122560:	8a 00                	mov    (%eax),%al
f0122562:	38 c2                	cmp    %al,%dl
f0122564:	74 e3                	je     f0122549 <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f0122566:	8b 45 08             	mov    0x8(%ebp),%eax
f0122569:	8a 00                	mov    (%eax),%al
f012256b:	0f b6 d0             	movzbl %al,%edx
f012256e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122571:	8a 00                	mov    (%eax),%al
f0122573:	0f b6 c0             	movzbl %al,%eax
f0122576:	29 c2                	sub    %eax,%edx
f0122578:	89 d0                	mov    %edx,%eax
}
f012257a:	5d                   	pop    %ebp
f012257b:	c3                   	ret    

f012257c <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f012257c:	55                   	push   %ebp
f012257d:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f012257f:	eb 09                	jmp    f012258a <strncmp+0xe>
		n--, p++, q++;
f0122581:	ff 4d 10             	decl   0x10(%ebp)
f0122584:	ff 45 08             	incl   0x8(%ebp)
f0122587:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f012258a:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012258e:	74 17                	je     f01225a7 <strncmp+0x2b>
f0122590:	8b 45 08             	mov    0x8(%ebp),%eax
f0122593:	8a 00                	mov    (%eax),%al
f0122595:	84 c0                	test   %al,%al
f0122597:	74 0e                	je     f01225a7 <strncmp+0x2b>
f0122599:	8b 45 08             	mov    0x8(%ebp),%eax
f012259c:	8a 10                	mov    (%eax),%dl
f012259e:	8b 45 0c             	mov    0xc(%ebp),%eax
f01225a1:	8a 00                	mov    (%eax),%al
f01225a3:	38 c2                	cmp    %al,%dl
f01225a5:	74 da                	je     f0122581 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f01225a7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01225ab:	75 07                	jne    f01225b4 <strncmp+0x38>
		return 0;
f01225ad:	b8 00 00 00 00       	mov    $0x0,%eax
f01225b2:	eb 14                	jmp    f01225c8 <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f01225b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01225b7:	8a 00                	mov    (%eax),%al
f01225b9:	0f b6 d0             	movzbl %al,%edx
f01225bc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01225bf:	8a 00                	mov    (%eax),%al
f01225c1:	0f b6 c0             	movzbl %al,%eax
f01225c4:	29 c2                	sub    %eax,%edx
f01225c6:	89 d0                	mov    %edx,%eax
}
f01225c8:	5d                   	pop    %ebp
f01225c9:	c3                   	ret    

f01225ca <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f01225ca:	55                   	push   %ebp
f01225cb:	89 e5                	mov    %esp,%ebp
f01225cd:	83 ec 04             	sub    $0x4,%esp
f01225d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01225d3:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f01225d6:	eb 12                	jmp    f01225ea <strchr+0x20>
		if (*s == c)
f01225d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01225db:	8a 00                	mov    (%eax),%al
f01225dd:	3a 45 fc             	cmp    -0x4(%ebp),%al
f01225e0:	75 05                	jne    f01225e7 <strchr+0x1d>
			return (char *) s;
f01225e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01225e5:	eb 11                	jmp    f01225f8 <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f01225e7:	ff 45 08             	incl   0x8(%ebp)
f01225ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01225ed:	8a 00                	mov    (%eax),%al
f01225ef:	84 c0                	test   %al,%al
f01225f1:	75 e5                	jne    f01225d8 <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f01225f3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01225f8:	c9                   	leave  
f01225f9:	c3                   	ret    

f01225fa <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f01225fa:	55                   	push   %ebp
f01225fb:	89 e5                	mov    %esp,%ebp
f01225fd:	83 ec 04             	sub    $0x4,%esp
f0122600:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122603:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0122606:	eb 0d                	jmp    f0122615 <strfind+0x1b>
		if (*s == c)
f0122608:	8b 45 08             	mov    0x8(%ebp),%eax
f012260b:	8a 00                	mov    (%eax),%al
f012260d:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0122610:	74 0e                	je     f0122620 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0122612:	ff 45 08             	incl   0x8(%ebp)
f0122615:	8b 45 08             	mov    0x8(%ebp),%eax
f0122618:	8a 00                	mov    (%eax),%al
f012261a:	84 c0                	test   %al,%al
f012261c:	75 ea                	jne    f0122608 <strfind+0xe>
f012261e:	eb 01                	jmp    f0122621 <strfind+0x27>
		if (*s == c)
			break;
f0122620:	90                   	nop
	return (char *) s;
f0122621:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0122624:	c9                   	leave  
f0122625:	c3                   	ret    

f0122626 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f0122626:	55                   	push   %ebp
f0122627:	89 e5                	mov    %esp,%ebp
f0122629:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f012262c:	8b 45 08             	mov    0x8(%ebp),%eax
f012262f:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0122632:	8b 45 10             	mov    0x10(%ebp),%eax
f0122635:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f0122638:	eb 0e                	jmp    f0122648 <memset+0x22>
		*p++ = c;
f012263a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012263d:	8d 50 01             	lea    0x1(%eax),%edx
f0122640:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0122643:	8b 55 0c             	mov    0xc(%ebp),%edx
f0122646:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f0122648:	ff 4d f8             	decl   -0x8(%ebp)
f012264b:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f012264f:	79 e9                	jns    f012263a <memset+0x14>
		*p++ = c;

	return v;
f0122651:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0122654:	c9                   	leave  
f0122655:	c3                   	ret    

f0122656 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f0122656:	55                   	push   %ebp
f0122657:	89 e5                	mov    %esp,%ebp
f0122659:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f012265c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012265f:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0122662:	8b 45 08             	mov    0x8(%ebp),%eax
f0122665:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f0122668:	eb 16                	jmp    f0122680 <memcpy+0x2a>
		*d++ = *s++;
f012266a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012266d:	8d 50 01             	lea    0x1(%eax),%edx
f0122670:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0122673:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0122676:	8d 4a 01             	lea    0x1(%edx),%ecx
f0122679:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f012267c:	8a 12                	mov    (%edx),%dl
f012267e:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f0122680:	8b 45 10             	mov    0x10(%ebp),%eax
f0122683:	8d 50 ff             	lea    -0x1(%eax),%edx
f0122686:	89 55 10             	mov    %edx,0x10(%ebp)
f0122689:	85 c0                	test   %eax,%eax
f012268b:	75 dd                	jne    f012266a <memcpy+0x14>
		*d++ = *s++;

	return dst;
f012268d:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0122690:	c9                   	leave  
f0122691:	c3                   	ret    

f0122692 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0122692:	55                   	push   %ebp
f0122693:	89 e5                	mov    %esp,%ebp
f0122695:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0122698:	8b 45 0c             	mov    0xc(%ebp),%eax
f012269b:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f012269e:	8b 45 08             	mov    0x8(%ebp),%eax
f01226a1:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f01226a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01226a7:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f01226aa:	73 50                	jae    f01226fc <memmove+0x6a>
f01226ac:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01226af:	8b 45 10             	mov    0x10(%ebp),%eax
f01226b2:	01 d0                	add    %edx,%eax
f01226b4:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f01226b7:	76 43                	jbe    f01226fc <memmove+0x6a>
		s += n;
f01226b9:	8b 45 10             	mov    0x10(%ebp),%eax
f01226bc:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f01226bf:	8b 45 10             	mov    0x10(%ebp),%eax
f01226c2:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f01226c5:	eb 10                	jmp    f01226d7 <memmove+0x45>
			*--d = *--s;
f01226c7:	ff 4d f8             	decl   -0x8(%ebp)
f01226ca:	ff 4d fc             	decl   -0x4(%ebp)
f01226cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01226d0:	8a 10                	mov    (%eax),%dl
f01226d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01226d5:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f01226d7:	8b 45 10             	mov    0x10(%ebp),%eax
f01226da:	8d 50 ff             	lea    -0x1(%eax),%edx
f01226dd:	89 55 10             	mov    %edx,0x10(%ebp)
f01226e0:	85 c0                	test   %eax,%eax
f01226e2:	75 e3                	jne    f01226c7 <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f01226e4:	eb 23                	jmp    f0122709 <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f01226e6:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01226e9:	8d 50 01             	lea    0x1(%eax),%edx
f01226ec:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01226ef:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01226f2:	8d 4a 01             	lea    0x1(%edx),%ecx
f01226f5:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f01226f8:	8a 12                	mov    (%edx),%dl
f01226fa:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f01226fc:	8b 45 10             	mov    0x10(%ebp),%eax
f01226ff:	8d 50 ff             	lea    -0x1(%eax),%edx
f0122702:	89 55 10             	mov    %edx,0x10(%ebp)
f0122705:	85 c0                	test   %eax,%eax
f0122707:	75 dd                	jne    f01226e6 <memmove+0x54>
			*d++ = *s++;

	return dst;
f0122709:	8b 45 08             	mov    0x8(%ebp),%eax
}
f012270c:	c9                   	leave  
f012270d:	c3                   	ret    

f012270e <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f012270e:	55                   	push   %ebp
f012270f:	89 e5                	mov    %esp,%ebp
f0122711:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f0122714:	8b 45 08             	mov    0x8(%ebp),%eax
f0122717:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f012271a:	8b 45 0c             	mov    0xc(%ebp),%eax
f012271d:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0122720:	eb 2a                	jmp    f012274c <memcmp+0x3e>
		if (*s1 != *s2)
f0122722:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0122725:	8a 10                	mov    (%eax),%dl
f0122727:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012272a:	8a 00                	mov    (%eax),%al
f012272c:	38 c2                	cmp    %al,%dl
f012272e:	74 16                	je     f0122746 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0122730:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0122733:	8a 00                	mov    (%eax),%al
f0122735:	0f b6 d0             	movzbl %al,%edx
f0122738:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012273b:	8a 00                	mov    (%eax),%al
f012273d:	0f b6 c0             	movzbl %al,%eax
f0122740:	29 c2                	sub    %eax,%edx
f0122742:	89 d0                	mov    %edx,%eax
f0122744:	eb 18                	jmp    f012275e <memcmp+0x50>
		s1++, s2++;
f0122746:	ff 45 fc             	incl   -0x4(%ebp)
f0122749:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f012274c:	8b 45 10             	mov    0x10(%ebp),%eax
f012274f:	8d 50 ff             	lea    -0x1(%eax),%edx
f0122752:	89 55 10             	mov    %edx,0x10(%ebp)
f0122755:	85 c0                	test   %eax,%eax
f0122757:	75 c9                	jne    f0122722 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f0122759:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012275e:	c9                   	leave  
f012275f:	c3                   	ret    

f0122760 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f0122760:	55                   	push   %ebp
f0122761:	89 e5                	mov    %esp,%ebp
f0122763:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f0122766:	8b 55 08             	mov    0x8(%ebp),%edx
f0122769:	8b 45 10             	mov    0x10(%ebp),%eax
f012276c:	01 d0                	add    %edx,%eax
f012276e:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f0122771:	eb 15                	jmp    f0122788 <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f0122773:	8b 45 08             	mov    0x8(%ebp),%eax
f0122776:	8a 00                	mov    (%eax),%al
f0122778:	0f b6 d0             	movzbl %al,%edx
f012277b:	8b 45 0c             	mov    0xc(%ebp),%eax
f012277e:	0f b6 c0             	movzbl %al,%eax
f0122781:	39 c2                	cmp    %eax,%edx
f0122783:	74 0d                	je     f0122792 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f0122785:	ff 45 08             	incl   0x8(%ebp)
f0122788:	8b 45 08             	mov    0x8(%ebp),%eax
f012278b:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f012278e:	72 e3                	jb     f0122773 <memfind+0x13>
f0122790:	eb 01                	jmp    f0122793 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0122792:	90                   	nop
	return (void *) s;
f0122793:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0122796:	c9                   	leave  
f0122797:	c3                   	ret    

f0122798 <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f0122798:	55                   	push   %ebp
f0122799:	89 e5                	mov    %esp,%ebp
f012279b:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f012279e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f01227a5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f01227ac:	eb 03                	jmp    f01227b1 <strtol+0x19>
		s++;
f01227ae:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f01227b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01227b4:	8a 00                	mov    (%eax),%al
f01227b6:	3c 20                	cmp    $0x20,%al
f01227b8:	74 f4                	je     f01227ae <strtol+0x16>
f01227ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01227bd:	8a 00                	mov    (%eax),%al
f01227bf:	3c 09                	cmp    $0x9,%al
f01227c1:	74 eb                	je     f01227ae <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f01227c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01227c6:	8a 00                	mov    (%eax),%al
f01227c8:	3c 2b                	cmp    $0x2b,%al
f01227ca:	75 05                	jne    f01227d1 <strtol+0x39>
		s++;
f01227cc:	ff 45 08             	incl   0x8(%ebp)
f01227cf:	eb 13                	jmp    f01227e4 <strtol+0x4c>
	else if (*s == '-')
f01227d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01227d4:	8a 00                	mov    (%eax),%al
f01227d6:	3c 2d                	cmp    $0x2d,%al
f01227d8:	75 0a                	jne    f01227e4 <strtol+0x4c>
		s++, neg = 1;
f01227da:	ff 45 08             	incl   0x8(%ebp)
f01227dd:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f01227e4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01227e8:	74 06                	je     f01227f0 <strtol+0x58>
f01227ea:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f01227ee:	75 20                	jne    f0122810 <strtol+0x78>
f01227f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01227f3:	8a 00                	mov    (%eax),%al
f01227f5:	3c 30                	cmp    $0x30,%al
f01227f7:	75 17                	jne    f0122810 <strtol+0x78>
f01227f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01227fc:	40                   	inc    %eax
f01227fd:	8a 00                	mov    (%eax),%al
f01227ff:	3c 78                	cmp    $0x78,%al
f0122801:	75 0d                	jne    f0122810 <strtol+0x78>
		s += 2, base = 16;
f0122803:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f0122807:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f012280e:	eb 28                	jmp    f0122838 <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f0122810:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0122814:	75 15                	jne    f012282b <strtol+0x93>
f0122816:	8b 45 08             	mov    0x8(%ebp),%eax
f0122819:	8a 00                	mov    (%eax),%al
f012281b:	3c 30                	cmp    $0x30,%al
f012281d:	75 0c                	jne    f012282b <strtol+0x93>
		s++, base = 8;
f012281f:	ff 45 08             	incl   0x8(%ebp)
f0122822:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f0122829:	eb 0d                	jmp    f0122838 <strtol+0xa0>
	else if (base == 0)
f012282b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f012282f:	75 07                	jne    f0122838 <strtol+0xa0>
		base = 10;
f0122831:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f0122838:	8b 45 08             	mov    0x8(%ebp),%eax
f012283b:	8a 00                	mov    (%eax),%al
f012283d:	3c 2f                	cmp    $0x2f,%al
f012283f:	7e 19                	jle    f012285a <strtol+0xc2>
f0122841:	8b 45 08             	mov    0x8(%ebp),%eax
f0122844:	8a 00                	mov    (%eax),%al
f0122846:	3c 39                	cmp    $0x39,%al
f0122848:	7f 10                	jg     f012285a <strtol+0xc2>
			dig = *s - '0';
f012284a:	8b 45 08             	mov    0x8(%ebp),%eax
f012284d:	8a 00                	mov    (%eax),%al
f012284f:	0f be c0             	movsbl %al,%eax
f0122852:	83 e8 30             	sub    $0x30,%eax
f0122855:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0122858:	eb 42                	jmp    f012289c <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f012285a:	8b 45 08             	mov    0x8(%ebp),%eax
f012285d:	8a 00                	mov    (%eax),%al
f012285f:	3c 60                	cmp    $0x60,%al
f0122861:	7e 19                	jle    f012287c <strtol+0xe4>
f0122863:	8b 45 08             	mov    0x8(%ebp),%eax
f0122866:	8a 00                	mov    (%eax),%al
f0122868:	3c 7a                	cmp    $0x7a,%al
f012286a:	7f 10                	jg     f012287c <strtol+0xe4>
			dig = *s - 'a' + 10;
f012286c:	8b 45 08             	mov    0x8(%ebp),%eax
f012286f:	8a 00                	mov    (%eax),%al
f0122871:	0f be c0             	movsbl %al,%eax
f0122874:	83 e8 57             	sub    $0x57,%eax
f0122877:	89 45 f4             	mov    %eax,-0xc(%ebp)
f012287a:	eb 20                	jmp    f012289c <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f012287c:	8b 45 08             	mov    0x8(%ebp),%eax
f012287f:	8a 00                	mov    (%eax),%al
f0122881:	3c 40                	cmp    $0x40,%al
f0122883:	7e 39                	jle    f01228be <strtol+0x126>
f0122885:	8b 45 08             	mov    0x8(%ebp),%eax
f0122888:	8a 00                	mov    (%eax),%al
f012288a:	3c 5a                	cmp    $0x5a,%al
f012288c:	7f 30                	jg     f01228be <strtol+0x126>
			dig = *s - 'A' + 10;
f012288e:	8b 45 08             	mov    0x8(%ebp),%eax
f0122891:	8a 00                	mov    (%eax),%al
f0122893:	0f be c0             	movsbl %al,%eax
f0122896:	83 e8 37             	sub    $0x37,%eax
f0122899:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f012289c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012289f:	3b 45 10             	cmp    0x10(%ebp),%eax
f01228a2:	7d 19                	jge    f01228bd <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f01228a4:	ff 45 08             	incl   0x8(%ebp)
f01228a7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01228aa:	0f af 45 10          	imul   0x10(%ebp),%eax
f01228ae:	89 c2                	mov    %eax,%edx
f01228b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01228b3:	01 d0                	add    %edx,%eax
f01228b5:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f01228b8:	e9 7b ff ff ff       	jmp    f0122838 <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f01228bd:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f01228be:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01228c2:	74 08                	je     f01228cc <strtol+0x134>
		*endptr = (char *) s;
f01228c4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01228c7:	8b 55 08             	mov    0x8(%ebp),%edx
f01228ca:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f01228cc:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01228d0:	74 07                	je     f01228d9 <strtol+0x141>
f01228d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01228d5:	f7 d8                	neg    %eax
f01228d7:	eb 03                	jmp    f01228dc <strtol+0x144>
f01228d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01228dc:	c9                   	leave  
f01228dd:	c3                   	ret    

f01228de <ltostr>:

void
ltostr(long value, char *str)
{
f01228de:	55                   	push   %ebp
f01228df:	89 e5                	mov    %esp,%ebp
f01228e1:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f01228e4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f01228eb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f01228f2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01228f6:	79 13                	jns    f012290b <ltostr+0x2d>
	{
		neg = 1;
f01228f8:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f01228ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122902:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f0122905:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f0122908:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f012290b:	8b 45 08             	mov    0x8(%ebp),%eax
f012290e:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0122913:	99                   	cltd   
f0122914:	f7 f9                	idiv   %ecx
f0122916:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f0122919:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012291c:	8d 50 01             	lea    0x1(%eax),%edx
f012291f:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0122922:	89 c2                	mov    %eax,%edx
f0122924:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122927:	01 d0                	add    %edx,%eax
f0122929:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012292c:	83 c2 30             	add    $0x30,%edx
f012292f:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0122931:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0122934:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0122939:	f7 e9                	imul   %ecx
f012293b:	c1 fa 02             	sar    $0x2,%edx
f012293e:	89 c8                	mov    %ecx,%eax
f0122940:	c1 f8 1f             	sar    $0x1f,%eax
f0122943:	29 c2                	sub    %eax,%edx
f0122945:	89 d0                	mov    %edx,%eax
f0122947:	89 45 08             	mov    %eax,0x8(%ebp)
	/*2023 FIX el7 :)*/
	//} while (value % 10 != 0);
	} while (value != 0);
f012294a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012294e:	75 bb                	jne    f012290b <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f0122950:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f0122957:	8b 45 f8             	mov    -0x8(%ebp),%eax
f012295a:	48                   	dec    %eax
f012295b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f012295e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0122962:	74 3d                	je     f01229a1 <ltostr+0xc3>
		start = 1 ;
f0122964:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f012296b:	eb 34                	jmp    f01229a1 <ltostr+0xc3>
	{
		char tmp = str[start] ;
f012296d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122970:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122973:	01 d0                	add    %edx,%eax
f0122975:	8a 00                	mov    (%eax),%al
f0122977:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f012297a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012297d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122980:	01 c2                	add    %eax,%edx
f0122982:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0122985:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122988:	01 c8                	add    %ecx,%eax
f012298a:	8a 00                	mov    (%eax),%al
f012298c:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f012298e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0122991:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122994:	01 c2                	add    %eax,%edx
f0122996:	8a 45 eb             	mov    -0x15(%ebp),%al
f0122999:	88 02                	mov    %al,(%edx)
		start++ ;
f012299b:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f012299e:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f01229a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01229a4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01229a7:	7c c4                	jl     f012296d <ltostr+0x8f>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f01229a9:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01229ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f01229af:	01 d0                	add    %edx,%eax
f01229b1:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f01229b4:	90                   	nop
f01229b5:	c9                   	leave  
f01229b6:	c3                   	ret    

f01229b7 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f01229b7:	55                   	push   %ebp
f01229b8:	89 e5                	mov    %esp,%ebp
f01229ba:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f01229bd:	ff 75 08             	pushl  0x8(%ebp)
f01229c0:	e8 73 fa ff ff       	call   f0122438 <strlen>
f01229c5:	83 c4 04             	add    $0x4,%esp
f01229c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f01229cb:	ff 75 0c             	pushl  0xc(%ebp)
f01229ce:	e8 65 fa ff ff       	call   f0122438 <strlen>
f01229d3:	83 c4 04             	add    $0x4,%esp
f01229d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f01229d9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f01229e0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01229e7:	eb 17                	jmp    f0122a00 <strcconcat+0x49>
		final[s] = str1[s] ;
f01229e9:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01229ec:	8b 45 10             	mov    0x10(%ebp),%eax
f01229ef:	01 c2                	add    %eax,%edx
f01229f1:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f01229f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01229f7:	01 c8                	add    %ecx,%eax
f01229f9:	8a 00                	mov    (%eax),%al
f01229fb:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f01229fd:	ff 45 fc             	incl   -0x4(%ebp)
f0122a00:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0122a03:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122a06:	7c e1                	jl     f01229e9 <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0122a08:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f0122a0f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0122a16:	eb 1f                	jmp    f0122a37 <strcconcat+0x80>
		final[s++] = str2[i] ;
f0122a18:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0122a1b:	8d 50 01             	lea    0x1(%eax),%edx
f0122a1e:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0122a21:	89 c2                	mov    %eax,%edx
f0122a23:	8b 45 10             	mov    0x10(%ebp),%eax
f0122a26:	01 c2                	add    %eax,%edx
f0122a28:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0122a2b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122a2e:	01 c8                	add    %ecx,%eax
f0122a30:	8a 00                	mov    (%eax),%al
f0122a32:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f0122a34:	ff 45 f8             	incl   -0x8(%ebp)
f0122a37:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0122a3a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0122a3d:	7c d9                	jl     f0122a18 <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f0122a3f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0122a42:	8b 45 10             	mov    0x10(%ebp),%eax
f0122a45:	01 d0                	add    %edx,%eax
f0122a47:	c6 00 00             	movb   $0x0,(%eax)
}
f0122a4a:	90                   	nop
f0122a4b:	c9                   	leave  
f0122a4c:	c3                   	ret    

f0122a4d <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0122a4d:	55                   	push   %ebp
f0122a4e:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f0122a50:	8b 45 14             	mov    0x14(%ebp),%eax
f0122a53:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f0122a59:	8b 45 14             	mov    0x14(%ebp),%eax
f0122a5c:	8b 00                	mov    (%eax),%eax
f0122a5e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0122a65:	8b 45 10             	mov    0x10(%ebp),%eax
f0122a68:	01 d0                	add    %edx,%eax
f0122a6a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0122a70:	eb 0c                	jmp    f0122a7e <strsplit+0x31>
			*string++ = 0;
f0122a72:	8b 45 08             	mov    0x8(%ebp),%eax
f0122a75:	8d 50 01             	lea    0x1(%eax),%edx
f0122a78:	89 55 08             	mov    %edx,0x8(%ebp)
f0122a7b:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0122a7e:	8b 45 08             	mov    0x8(%ebp),%eax
f0122a81:	8a 00                	mov    (%eax),%al
f0122a83:	84 c0                	test   %al,%al
f0122a85:	74 18                	je     f0122a9f <strsplit+0x52>
f0122a87:	8b 45 08             	mov    0x8(%ebp),%eax
f0122a8a:	8a 00                	mov    (%eax),%al
f0122a8c:	0f be c0             	movsbl %al,%eax
f0122a8f:	50                   	push   %eax
f0122a90:	ff 75 0c             	pushl  0xc(%ebp)
f0122a93:	e8 32 fb ff ff       	call   f01225ca <strchr>
f0122a98:	83 c4 08             	add    $0x8,%esp
f0122a9b:	85 c0                	test   %eax,%eax
f0122a9d:	75 d3                	jne    f0122a72 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f0122a9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0122aa2:	8a 00                	mov    (%eax),%al
f0122aa4:	84 c0                	test   %al,%al
f0122aa6:	74 5a                	je     f0122b02 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f0122aa8:	8b 45 14             	mov    0x14(%ebp),%eax
f0122aab:	8b 00                	mov    (%eax),%eax
f0122aad:	83 f8 0f             	cmp    $0xf,%eax
f0122ab0:	75 07                	jne    f0122ab9 <strsplit+0x6c>
		{
			return 0;
f0122ab2:	b8 00 00 00 00       	mov    $0x0,%eax
f0122ab7:	eb 66                	jmp    f0122b1f <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0122ab9:	8b 45 14             	mov    0x14(%ebp),%eax
f0122abc:	8b 00                	mov    (%eax),%eax
f0122abe:	8d 48 01             	lea    0x1(%eax),%ecx
f0122ac1:	8b 55 14             	mov    0x14(%ebp),%edx
f0122ac4:	89 0a                	mov    %ecx,(%edx)
f0122ac6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0122acd:	8b 45 10             	mov    0x10(%ebp),%eax
f0122ad0:	01 c2                	add    %eax,%edx
f0122ad2:	8b 45 08             	mov    0x8(%ebp),%eax
f0122ad5:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f0122ad7:	eb 03                	jmp    f0122adc <strsplit+0x8f>
			string++;
f0122ad9:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f0122adc:	8b 45 08             	mov    0x8(%ebp),%eax
f0122adf:	8a 00                	mov    (%eax),%al
f0122ae1:	84 c0                	test   %al,%al
f0122ae3:	74 8b                	je     f0122a70 <strsplit+0x23>
f0122ae5:	8b 45 08             	mov    0x8(%ebp),%eax
f0122ae8:	8a 00                	mov    (%eax),%al
f0122aea:	0f be c0             	movsbl %al,%eax
f0122aed:	50                   	push   %eax
f0122aee:	ff 75 0c             	pushl  0xc(%ebp)
f0122af1:	e8 d4 fa ff ff       	call   f01225ca <strchr>
f0122af6:	83 c4 08             	add    $0x8,%esp
f0122af9:	85 c0                	test   %eax,%eax
f0122afb:	74 dc                	je     f0122ad9 <strsplit+0x8c>
			string++;
	}
f0122afd:	e9 6e ff ff ff       	jmp    f0122a70 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f0122b02:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f0122b03:	8b 45 14             	mov    0x14(%ebp),%eax
f0122b06:	8b 00                	mov    (%eax),%eax
f0122b08:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0122b0f:	8b 45 10             	mov    0x10(%ebp),%eax
f0122b12:	01 d0                	add    %edx,%eax
f0122b14:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f0122b1a:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0122b1f:	c9                   	leave  
f0122b20:	c3                   	ret    

f0122b21 <str2lower>:


char* str2lower(char *dst, const char *src)
{
f0122b21:	55                   	push   %ebp
f0122b22:	89 e5                	mov    %esp,%ebp
f0122b24:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT]
	panic("str2lower is not implemented yet!");
f0122b27:	83 ec 04             	sub    $0x4,%esp
f0122b2a:	68 7c fd 12 f0       	push   $0xf012fd7c
f0122b2f:	68 3f 01 00 00       	push   $0x13f
f0122b34:	68 9e fd 12 f0       	push   $0xf012fd9e
f0122b39:	e8 dc d7 fd ff       	call   f010031a <_panic>

f0122b3e <disk_interrupt_handler>:
#define IDE_ERR		0x01

static int diskno = 0;

void disk_interrupt_handler(struct Trapframe *tf)
{
f0122b3e:	55                   	push   %ebp
f0122b3f:	89 e5                	mov    %esp,%ebp
f0122b41:	83 ec 18             	sub    $0x18,%esp
f0122b44:	c7 45 f0 f7 01 00 00 	movl   $0x1f7,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0122b4b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0122b4e:	89 c2                	mov    %eax,%edx
f0122b50:	ec                   	in     (%dx),%al
f0122b51:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0122b54:	8a 45 ef             	mov    -0x11(%ebp),%al
	int r;
	//cprintf("\n>>>>>>>> DISK INTERRUPT <<<<<<<<<\n");
	if (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0122b57:	0f b6 c0             	movzbl %al,%eax
f0122b5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0122b5d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122b60:	25 c0 00 00 00       	and    $0xc0,%eax
f0122b65:	83 f8 40             	cmp    $0x40,%eax
f0122b68:	75 10                	jne    f0122b7a <disk_interrupt_handler+0x3c>
	{
		//cprintf("NOT READY\n");
	}
	else
	{
		wakeup_one(&DISKchannel);
f0122b6a:	83 ec 0c             	sub    $0xc,%esp
f0122b6d:	68 a0 ed 59 f0       	push   $0xf059eda0
f0122b72:	e8 43 c3 fe ff       	call   f010eeba <wakeup_one>
f0122b77:	83 c4 10             	add    $0x10,%esp
	}

}
f0122b7a:	90                   	nop
f0122b7b:	c9                   	leave  
f0122b7c:	c3                   	ret    

f0122b7d <ide_init>:

void ide_init()
{
f0122b7d:	55                   	push   %ebp
f0122b7e:	89 e5                	mov    %esp,%ebp
f0122b80:	83 ec 08             	sub    $0x8,%esp
	irq_install_handler(14, &disk_interrupt_handler);
f0122b83:	83 ec 08             	sub    $0x8,%esp
f0122b86:	68 3e 2b 12 f0       	push   $0xf0122b3e
f0122b8b:	6a 0e                	push   $0xe
f0122b8d:	e8 06 a8 fe ff       	call   f010d398 <irq_install_handler>
f0122b92:	83 c4 10             	add    $0x10,%esp
	//irq_install_handler(15, &disk_interrupt_handler);
	if (DISK_INT_BLK_METHOD == LCK_SLEEP)
	{
		init_channel(&DISKchannel, "DISK channel");
f0122b95:	83 ec 08             	sub    $0x8,%esp
f0122b98:	68 ac fd 12 f0       	push   $0xf012fdac
f0122b9d:	68 a0 ed 59 f0       	push   $0xf059eda0
f0122ba2:	e8 cc c2 fe ff       	call   f010ee73 <init_channel>
f0122ba7:	83 c4 10             	add    $0x10,%esp
		init_spinlock(&DISKlock, "DISK channel lock");
f0122baa:	83 ec 08             	sub    $0x8,%esp
f0122bad:	68 b9 fd 12 f0       	push   $0xf012fdb9
f0122bb2:	68 e0 18 5a f0       	push   $0xf05a18e0
f0122bb7:	e8 34 bf fe ff       	call   f010eaf0 <init_spinlock>
f0122bbc:	83 c4 10             	add    $0x10,%esp
	}
	else if (DISK_INT_BLK_METHOD == LCK_SEMAPHORE)
	{
		init_ksemaphore(&DISKsem, 0, "DISK semaphore");
	}
}
f0122bbf:	90                   	nop
f0122bc0:	c9                   	leave  
f0122bc1:	c3                   	ret    

f0122bc2 <ide_wait_ready>:
//	}
//	return 0;
//}

static int ide_wait_ready(bool check_error)
{
f0122bc2:	55                   	push   %ebp
f0122bc3:	89 e5                	mov    %esp,%ebp
f0122bc5:	83 ec 18             	sub    $0x18,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0122bc8:	90                   	nop
f0122bc9:	c7 45 f0 f7 01 00 00 	movl   $0x1f7,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0122bd0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0122bd3:	89 c2                	mov    %eax,%edx
f0122bd5:	ec                   	in     (%dx),%al
f0122bd6:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0122bd9:	8a 45 ef             	mov    -0x11(%ebp),%al
f0122bdc:	0f b6 c0             	movzbl %al,%eax
f0122bdf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0122be2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122be5:	25 c0 00 00 00       	and    $0xc0,%eax
f0122bea:	83 f8 40             	cmp    $0x40,%eax
f0122bed:	75 da                	jne    f0122bc9 <ide_wait_ready+0x7>
	/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f0122bef:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0122bf3:	74 24                	je     f0122c19 <ide_wait_ready+0x57>
f0122bf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122bf8:	83 e0 21             	and    $0x21,%eax
f0122bfb:	85 c0                	test   %eax,%eax
f0122bfd:	74 1a                	je     f0122c19 <ide_wait_ready+0x57>
	{
		panic("ERROR @ ide_wait_ready() = %x(%d)\n",r,r);
f0122bff:	83 ec 0c             	sub    $0xc,%esp
f0122c02:	ff 75 f4             	pushl  -0xc(%ebp)
f0122c05:	ff 75 f4             	pushl  -0xc(%ebp)
f0122c08:	68 cc fd 12 f0       	push   $0xf012fdcc
f0122c0d:	6a 5d                	push   $0x5d
f0122c0f:	68 ef fd 12 f0       	push   $0xf012fdef
f0122c14:	e8 01 d7 fd ff       	call   f010031a <_panic>
		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
	}
	return 0;
f0122c19:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0122c1e:	c9                   	leave  
f0122c1f:	c3                   	ret    

f0122c20 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f0122c20:	55                   	push   %ebp
f0122c21:	89 e5                	mov    %esp,%ebp
f0122c23:	57                   	push   %edi
f0122c24:	53                   	push   %ebx
f0122c25:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f0122c28:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0122c2f:	76 16                	jbe    f0122c47 <ide_read+0x27>
f0122c31:	68 fa fd 12 f0       	push   $0xf012fdfa
f0122c36:	68 07 fe 12 f0       	push   $0xf012fe07
f0122c3b:	6a 68                	push   $0x68
f0122c3d:	68 ef fd 12 f0       	push   $0xf012fdef
f0122c42:	e8 d3 d6 fd ff       	call   f010031a <_panic>

	//FUTURE NOTE: This BUSY-WAIT should be replaced by Interrupt to allow the OS to schedule another process till the device become ready [el7 :)]
	ide_wait_ready(0);
f0122c47:	83 ec 0c             	sub    $0xc,%esp
f0122c4a:	6a 00                	push   $0x0
f0122c4c:	e8 71 ff ff ff       	call   f0122bc2 <ide_wait_ready>
f0122c51:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f0122c54:	8b 45 10             	mov    0x10(%ebp),%eax
f0122c57:	0f b6 c0             	movzbl %al,%eax
f0122c5a:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0122c61:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0122c64:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0122c67:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0122c6a:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0122c6b:	8b 45 08             	mov    0x8(%ebp),%eax
f0122c6e:	0f b6 c0             	movzbl %al,%eax
f0122c71:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0122c78:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0122c7b:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0122c7e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0122c81:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0122c82:	8b 45 08             	mov    0x8(%ebp),%eax
f0122c85:	c1 e8 08             	shr    $0x8,%eax
f0122c88:	0f b6 c0             	movzbl %al,%eax
f0122c8b:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0122c92:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0122c95:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0122c98:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0122c9b:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0122c9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0122c9f:	c1 e8 10             	shr    $0x10,%eax
f0122ca2:	0f b6 c0             	movzbl %al,%eax
f0122ca5:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0122cac:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0122caf:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0122cb2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0122cb5:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0122cb6:	a1 50 ec 59 f0       	mov    0xf059ec50,%eax
f0122cbb:	83 e0 01             	and    $0x1,%eax
f0122cbe:	c1 e0 04             	shl    $0x4,%eax
f0122cc1:	88 c2                	mov    %al,%dl
f0122cc3:	8b 45 08             	mov    0x8(%ebp),%eax
f0122cc6:	c1 e8 18             	shr    $0x18,%eax
f0122cc9:	83 e0 0f             	and    $0xf,%eax
f0122ccc:	09 d0                	or     %edx,%eax
f0122cce:	83 c8 e0             	or     $0xffffffe0,%eax
f0122cd1:	0f b6 c0             	movzbl %al,%eax
f0122cd4:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0122cdb:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0122cde:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0122ce1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0122ce4:	ee                   	out    %al,(%dx)
f0122ce5:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0122cec:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f0122cf0:	8a 45 d7             	mov    -0x29(%ebp),%al
f0122cf3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0122cf6:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0122cf7:	eb 55                	jmp    f0122d4e <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0122cf9:	83 ec 0c             	sub    $0xc,%esp
f0122cfc:	6a 01                	push   $0x1
f0122cfe:	e8 bf fe ff ff       	call   f0122bc2 <ide_wait_ready>
f0122d03:	83 c4 10             	add    $0x10,%esp
f0122d06:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0122d09:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0122d0d:	79 05                	jns    f0122d14 <ide_read+0xf4>
			return r;
f0122d0f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0122d12:	eb 45                	jmp    f0122d59 <ide_read+0x139>
f0122d14:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0122d1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122d1e:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0122d21:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f0122d28:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122d2b:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0122d2e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0122d31:	89 cb                	mov    %ecx,%ebx
f0122d33:	89 df                	mov    %ebx,%edi
f0122d35:	89 c1                	mov    %eax,%ecx
f0122d37:	fc                   	cld    
f0122d38:	f2 6d                	repnz insl (%dx),%es:(%edi)
f0122d3a:	89 c8                	mov    %ecx,%eax
f0122d3c:	89 fb                	mov    %edi,%ebx
f0122d3e:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0122d41:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0122d44:	ff 4d 10             	decl   0x10(%ebp)
f0122d47:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0122d4e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0122d52:	75 a5                	jne    f0122cf9 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f0122d54:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0122d59:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0122d5c:	5b                   	pop    %ebx
f0122d5d:	5f                   	pop    %edi
f0122d5e:	5d                   	pop    %ebp
f0122d5f:	c3                   	ret    

f0122d60 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f0122d60:	55                   	push   %ebp
f0122d61:	89 e5                	mov    %esp,%ebp
f0122d63:	56                   	push   %esi
f0122d64:	53                   	push   %ebx
f0122d65:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0122d68:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0122d6f:	76 19                	jbe    f0122d8a <ide_write+0x2a>
f0122d71:	68 fa fd 12 f0       	push   $0xf012fdfa
f0122d76:	68 07 fe 12 f0       	push   $0xf012fe07
f0122d7b:	68 82 00 00 00       	push   $0x82
f0122d80:	68 ef fd 12 f0       	push   $0xf012fdef
f0122d85:	e8 90 d5 fd ff       	call   f010031a <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f0122d8a:	83 ec 0c             	sub    $0xc,%esp
f0122d8d:	6a 00                	push   $0x0
f0122d8f:	e8 2e fe ff ff       	call   f0122bc2 <ide_wait_ready>
f0122d94:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f0122d97:	8b 45 10             	mov    0x10(%ebp),%eax
f0122d9a:	0f b6 c0             	movzbl %al,%eax
f0122d9d:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0122da4:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0122da7:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0122daa:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0122dad:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0122dae:	8b 45 08             	mov    0x8(%ebp),%eax
f0122db1:	0f b6 c0             	movzbl %al,%eax
f0122db4:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0122dbb:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0122dbe:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0122dc1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0122dc4:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0122dc5:	8b 45 08             	mov    0x8(%ebp),%eax
f0122dc8:	c1 e8 08             	shr    $0x8,%eax
f0122dcb:	0f b6 c0             	movzbl %al,%eax
f0122dce:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0122dd5:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0122dd8:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0122ddb:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0122dde:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0122ddf:	8b 45 08             	mov    0x8(%ebp),%eax
f0122de2:	c1 e8 10             	shr    $0x10,%eax
f0122de5:	0f b6 c0             	movzbl %al,%eax
f0122de8:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0122def:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0122df2:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0122df5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0122df8:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0122df9:	a1 50 ec 59 f0       	mov    0xf059ec50,%eax
f0122dfe:	83 e0 01             	and    $0x1,%eax
f0122e01:	c1 e0 04             	shl    $0x4,%eax
f0122e04:	88 c2                	mov    %al,%dl
f0122e06:	8b 45 08             	mov    0x8(%ebp),%eax
f0122e09:	c1 e8 18             	shr    $0x18,%eax
f0122e0c:	83 e0 0f             	and    $0xf,%eax
f0122e0f:	09 d0                	or     %edx,%eax
f0122e11:	83 c8 e0             	or     $0xffffffe0,%eax
f0122e14:	0f b6 c0             	movzbl %al,%eax
f0122e17:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0122e1e:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0122e21:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0122e24:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0122e27:	ee                   	out    %al,(%dx)
f0122e28:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0122e2f:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f0122e33:	8a 45 d7             	mov    -0x29(%ebp),%al
f0122e36:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0122e39:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0122e3a:	eb 55                	jmp    f0122e91 <ide_write+0x131>
		if ((r = ide_wait_ready(1)) < 0)
f0122e3c:	83 ec 0c             	sub    $0xc,%esp
f0122e3f:	6a 01                	push   $0x1
f0122e41:	e8 7c fd ff ff       	call   f0122bc2 <ide_wait_ready>
f0122e46:	83 c4 10             	add    $0x10,%esp
f0122e49:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0122e4c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0122e50:	79 05                	jns    f0122e57 <ide_write+0xf7>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f0122e52:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0122e55:	eb 45                	jmp    f0122e9c <ide_write+0x13c>
f0122e57:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0122e5e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122e61:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0122e64:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0122e6b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122e6e:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0122e71:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0122e74:	89 cb                	mov    %ecx,%ebx
f0122e76:	89 de                	mov    %ebx,%esi
f0122e78:	89 c1                	mov    %eax,%ecx
f0122e7a:	fc                   	cld    
f0122e7b:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f0122e7d:	89 c8                	mov    %ecx,%eax
f0122e7f:	89 f3                	mov    %esi,%ebx
f0122e81:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0122e84:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0122e87:	ff 4d 10             	decl   0x10(%ebp)
f0122e8a:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0122e91:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0122e95:	75 a5                	jne    f0122e3c <ide_write+0xdc>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f0122e97:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0122e9c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0122e9f:	5b                   	pop    %ebx
f0122ea0:	5e                   	pop    %esi
f0122ea1:	5d                   	pop    %ebp
f0122ea2:	c3                   	ret    

f0122ea3 <get_block_size>:

//=====================================================
// 1) GET BLOCK SIZE (including size of its meta data):
//=====================================================
__inline__ uint32 get_block_size(void* va)
{
f0122ea3:	55                   	push   %ebp
f0122ea4:	89 e5                	mov    %esp,%ebp
f0122ea6:	83 ec 10             	sub    $0x10,%esp
	uint32 *curBlkMetaData = ((uint32 *)va - 1) ;
f0122ea9:	8b 45 08             	mov    0x8(%ebp),%eax
f0122eac:	83 e8 04             	sub    $0x4,%eax
f0122eaf:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return (*curBlkMetaData) & ~(0x1);
f0122eb2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0122eb5:	8b 00                	mov    (%eax),%eax
f0122eb7:	83 e0 fe             	and    $0xfffffffe,%eax
}
f0122eba:	c9                   	leave  
f0122ebb:	c3                   	ret    

f0122ebc <is_free_block>:

//===========================
// 2) GET BLOCK STATUS:
//===========================
__inline__ int8 is_free_block(void* va)
{
f0122ebc:	55                   	push   %ebp
f0122ebd:	89 e5                	mov    %esp,%ebp
f0122ebf:	83 ec 10             	sub    $0x10,%esp
	uint32 *curBlkMetaData = ((uint32 *)va - 1) ;
f0122ec2:	8b 45 08             	mov    0x8(%ebp),%eax
f0122ec5:	83 e8 04             	sub    $0x4,%eax
f0122ec8:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return (~(*curBlkMetaData) & 0x1) ;
f0122ecb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0122ece:	8b 00                	mov    (%eax),%eax
f0122ed0:	83 e0 01             	and    $0x1,%eax
f0122ed3:	85 c0                	test   %eax,%eax
f0122ed5:	0f 94 c0             	sete   %al
}
f0122ed8:	c9                   	leave  
f0122ed9:	c3                   	ret    

f0122eda <alloc_block>:
//===========================
// 3) ALLOCATE BLOCK:
//===========================

void *alloc_block(uint32 size, int ALLOC_STRATEGY)
{
f0122eda:	55                   	push   %ebp
f0122edb:	89 e5                	mov    %esp,%ebp
f0122edd:	83 ec 18             	sub    $0x18,%esp
	void *va = NULL;
f0122ee0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (ALLOC_STRATEGY)
f0122ee7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0122eea:	83 f8 02             	cmp    $0x2,%eax
f0122eed:	74 2b                	je     f0122f1a <alloc_block+0x40>
f0122eef:	83 f8 02             	cmp    $0x2,%eax
f0122ef2:	7f 07                	jg     f0122efb <alloc_block+0x21>
f0122ef4:	83 f8 01             	cmp    $0x1,%eax
f0122ef7:	74 0e                	je     f0122f07 <alloc_block+0x2d>
f0122ef9:	eb 58                	jmp    f0122f53 <alloc_block+0x79>
f0122efb:	83 f8 03             	cmp    $0x3,%eax
f0122efe:	74 2d                	je     f0122f2d <alloc_block+0x53>
f0122f00:	83 f8 04             	cmp    $0x4,%eax
f0122f03:	74 3b                	je     f0122f40 <alloc_block+0x66>
f0122f05:	eb 4c                	jmp    f0122f53 <alloc_block+0x79>
	{
	case DA_FF:
		va = alloc_block_FF(size);
f0122f07:	83 ec 0c             	sub    $0xc,%esp
f0122f0a:	ff 75 08             	pushl  0x8(%ebp)
f0122f0d:	e8 32 02 00 00       	call   f0123144 <alloc_block_FF>
f0122f12:	83 c4 10             	add    $0x10,%esp
f0122f15:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f0122f18:	eb 4a                	jmp    f0122f64 <alloc_block+0x8a>
	case DA_NF:
		va = alloc_block_NF(size);
f0122f1a:	83 ec 0c             	sub    $0xc,%esp
f0122f1d:	ff 75 08             	pushl  0x8(%ebp)
f0122f20:	e8 af 04 00 00       	call   f01233d4 <alloc_block_NF>
f0122f25:	83 c4 10             	add    $0x10,%esp
f0122f28:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f0122f2b:	eb 37                	jmp    f0122f64 <alloc_block+0x8a>
	case DA_BF:
		va = alloc_block_BF(size);
f0122f2d:	83 ec 0c             	sub    $0xc,%esp
f0122f30:	ff 75 08             	pushl  0x8(%ebp)
f0122f33:	e8 28 04 00 00       	call   f0123360 <alloc_block_BF>
f0122f38:	83 c4 10             	add    $0x10,%esp
f0122f3b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f0122f3e:	eb 24                	jmp    f0122f64 <alloc_block+0x8a>
	case DA_WF:
		va = alloc_block_WF(size);
f0122f40:	83 ec 0c             	sub    $0xc,%esp
f0122f43:	ff 75 08             	pushl  0x8(%ebp)
f0122f46:	e8 6c 04 00 00       	call   f01233b7 <alloc_block_WF>
f0122f4b:	83 c4 10             	add    $0x10,%esp
f0122f4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f0122f51:	eb 11                	jmp    f0122f64 <alloc_block+0x8a>
	default:
		cprintf("Invalid allocation strategy\n");
f0122f53:	83 ec 0c             	sub    $0xc,%esp
f0122f56:	68 1c fe 12 f0       	push   $0xf012fe1c
f0122f5b:	e8 0c e0 fd ff       	call   f0100f6c <cprintf>
f0122f60:	83 c4 10             	add    $0x10,%esp
		break;
f0122f63:	90                   	nop
	}
	return va;
f0122f64:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0122f67:	c9                   	leave  
f0122f68:	c3                   	ret    

f0122f69 <print_blocks_list>:
//===========================
// 4) PRINT BLOCKS LIST:
//===========================

void print_blocks_list(struct MemBlock_LIST list)
{
f0122f69:	55                   	push   %ebp
f0122f6a:	89 e5                	mov    %esp,%ebp
f0122f6c:	53                   	push   %ebx
f0122f6d:	83 ec 14             	sub    $0x14,%esp
	cprintf("=========================================\n");
f0122f70:	83 ec 0c             	sub    $0xc,%esp
f0122f73:	68 3c fe 12 f0       	push   $0xf012fe3c
f0122f78:	e8 ef df fd ff       	call   f0100f6c <cprintf>
f0122f7d:	83 c4 10             	add    $0x10,%esp
	struct BlockElement* blk ;
	cprintf("\nDynAlloc Blocks List:\n");
f0122f80:	83 ec 0c             	sub    $0xc,%esp
f0122f83:	68 67 fe 12 f0       	push   $0xf012fe67
f0122f88:	e8 df df fd ff       	call   f0100f6c <cprintf>
f0122f8d:	83 c4 10             	add    $0x10,%esp
	LIST_FOREACH(blk, &list)
f0122f90:	8b 45 08             	mov    0x8(%ebp),%eax
f0122f93:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0122f96:	eb 37                	jmp    f0122fcf <print_blocks_list+0x66>
	{
		cprintf("(size: %d, isFree: %d)\n", get_block_size(blk), is_free_block(blk)) ;
f0122f98:	83 ec 0c             	sub    $0xc,%esp
f0122f9b:	ff 75 f4             	pushl  -0xc(%ebp)
f0122f9e:	e8 19 ff ff ff       	call   f0122ebc <is_free_block>
f0122fa3:	83 c4 10             	add    $0x10,%esp
f0122fa6:	0f be d8             	movsbl %al,%ebx
f0122fa9:	83 ec 0c             	sub    $0xc,%esp
f0122fac:	ff 75 f4             	pushl  -0xc(%ebp)
f0122faf:	e8 ef fe ff ff       	call   f0122ea3 <get_block_size>
f0122fb4:	83 c4 10             	add    $0x10,%esp
f0122fb7:	83 ec 04             	sub    $0x4,%esp
f0122fba:	53                   	push   %ebx
f0122fbb:	50                   	push   %eax
f0122fbc:	68 7f fe 12 f0       	push   $0xf012fe7f
f0122fc1:	e8 a6 df fd ff       	call   f0100f6c <cprintf>
f0122fc6:	83 c4 10             	add    $0x10,%esp
void print_blocks_list(struct MemBlock_LIST list)
{
	cprintf("=========================================\n");
	struct BlockElement* blk ;
	cprintf("\nDynAlloc Blocks List:\n");
	LIST_FOREACH(blk, &list)
f0122fc9:	8b 45 10             	mov    0x10(%ebp),%eax
f0122fcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0122fcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0122fd3:	74 07                	je     f0122fdc <print_blocks_list+0x73>
f0122fd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122fd8:	8b 00                	mov    (%eax),%eax
f0122fda:	eb 05                	jmp    f0122fe1 <print_blocks_list+0x78>
f0122fdc:	b8 00 00 00 00       	mov    $0x0,%eax
f0122fe1:	89 45 10             	mov    %eax,0x10(%ebp)
f0122fe4:	8b 45 10             	mov    0x10(%ebp),%eax
f0122fe7:	85 c0                	test   %eax,%eax
f0122fe9:	75 ad                	jne    f0122f98 <print_blocks_list+0x2f>
f0122feb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0122fef:	75 a7                	jne    f0122f98 <print_blocks_list+0x2f>
	{
		cprintf("(size: %d, isFree: %d)\n", get_block_size(blk), is_free_block(blk)) ;
	}
	cprintf("=========================================\n");
f0122ff1:	83 ec 0c             	sub    $0xc,%esp
f0122ff4:	68 3c fe 12 f0       	push   $0xf012fe3c
f0122ff9:	e8 6e df fd ff       	call   f0100f6c <cprintf>
f0122ffe:	83 c4 10             	add    $0x10,%esp

}
f0123001:	90                   	nop
f0123002:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0123005:	c9                   	leave  
f0123006:	c3                   	ret    

f0123007 <initialize_dynamic_allocator>:
// [1] INITIALIZE DYNAMIC ALLOCATOR:
//==================================

// Youssef Mohsen
void initialize_dynamic_allocator(uint32 daStart, uint32 initSizeOfAllocatedSpace)
{
f0123007:	55                   	push   %ebp
f0123008:	89 e5                	mov    %esp,%ebp
f012300a:	83 ec 18             	sub    $0x18,%esp
        //==================================================================================
        //DON'T CHANGE THESE LINES==========================================================
        //==================================================================================
        {
            if (initSizeOfAllocatedSpace % 2 != 0) initSizeOfAllocatedSpace++; //ensure it's multiple of 2
f012300d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0123010:	83 e0 01             	and    $0x1,%eax
f0123013:	85 c0                	test   %eax,%eax
f0123015:	74 03                	je     f012301a <initialize_dynamic_allocator+0x13>
f0123017:	ff 45 0c             	incl   0xc(%ebp)
            if (initSizeOfAllocatedSpace == 0)
f012301a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012301e:	0f 84 f2 00 00 00    	je     f0123116 <initialize_dynamic_allocator+0x10f>
                return ;
            is_initialized = 1;
f0123024:	c7 05 54 ec 59 f0 01 	movl   $0x1,0xf059ec54
f012302b:	00 00 00 
        //TODO: [PROJECT'24.MS1 - #04] [3] DYNAMIC ALLOCATOR - initialize_dynamic_allocator
        //COMMENT THE FOLLOWING LINE BEFORE START CODING
        //panic("initialize_dynamic_allocator is not implemented yet");

    // Check for bounds
    if ((daStart + initSizeOfAllocatedSpace) > KERNEL_HEAP_MAX)
f012302e:	8b 55 08             	mov    0x8(%ebp),%edx
f0123031:	8b 45 0c             	mov    0xc(%ebp),%eax
f0123034:	01 d0                	add    %edx,%eax
f0123036:	3d 00 f0 ff ff       	cmp    $0xfffff000,%eax
f012303b:	0f 87 d8 00 00 00    	ja     f0123119 <initialize_dynamic_allocator+0x112>
        return;
    if(daStart < KERNEL_HEAP_START)
f0123041:	81 7d 08 ff ff ff f5 	cmpl   $0xf5ffffff,0x8(%ebp)
f0123048:	0f 86 ce 00 00 00    	jbe    f012311c <initialize_dynamic_allocator+0x115>
        return;


    // Create the BEG Block
    struct Block_Start_End* beg_block = (struct Block_Start_End*) daStart;
f012304e:	8b 45 08             	mov    0x8(%ebp),%eax
f0123051:	89 45 f4             	mov    %eax,-0xc(%ebp)
    beg_block->info = 1;
f0123054:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123057:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    // Create the END Block
    struct Block_Start_End* end_block = (struct Block_Start_End*) (daStart + initSizeOfAllocatedSpace - sizeof(struct Block_Start_End));
f012305d:	8b 55 08             	mov    0x8(%ebp),%edx
f0123060:	8b 45 0c             	mov    0xc(%ebp),%eax
f0123063:	01 d0                	add    %edx,%eax
f0123065:	83 e8 04             	sub    $0x4,%eax
f0123068:	89 45 f0             	mov    %eax,-0x10(%ebp)
    end_block->info = 1;
f012306b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012306e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

    // Create the first free block
    struct BlockElement* first_free_block = (struct BlockElement*)(daStart + 2*sizeof(struct Block_Start_End));
f0123074:	8b 45 08             	mov    0x8(%ebp),%eax
f0123077:	83 c0 08             	add    $0x8,%eax
f012307a:	89 45 ec             	mov    %eax,-0x14(%ebp)


    //Assigning the Heap's Header/Footer values
    *(uint32*)((char*)daStart + 4 /*4 Byte*/) = initSizeOfAllocatedSpace - 2 * sizeof(struct Block_Start_End) /*Heap's header/footer*/;
f012307d:	8b 45 08             	mov    0x8(%ebp),%eax
f0123080:	83 c0 04             	add    $0x4,%eax
f0123083:	8b 55 0c             	mov    0xc(%ebp),%edx
f0123086:	83 ea 08             	sub    $0x8,%edx
f0123089:	89 10                	mov    %edx,(%eax)
    *(uint32*)((char*)daStart + initSizeOfAllocatedSpace - 8) = initSizeOfAllocatedSpace - 2 * sizeof(struct Block_Start_End) /*Heap's header/footer*/;
f012308b:	8b 55 0c             	mov    0xc(%ebp),%edx
f012308e:	8b 45 08             	mov    0x8(%ebp),%eax
f0123091:	01 d0                	add    %edx,%eax
f0123093:	83 e8 08             	sub    $0x8,%eax
f0123096:	8b 55 0c             	mov    0xc(%ebp),%edx
f0123099:	83 ea 08             	sub    $0x8,%edx
f012309c:	89 10                	mov    %edx,(%eax)

    // Initialize links to the END block
   first_free_block->prev_next_info.le_next = NULL; // Link to the END block
f012309e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01230a1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   first_free_block->prev_next_info.le_prev = NULL;
f01230a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01230aa:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    // Link the first free block into the free block list
    LIST_INSERT_HEAD(&freeBlocksList , first_free_block);
f01230b1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01230b5:	75 17                	jne    f01230ce <initialize_dynamic_allocator+0xc7>
f01230b7:	83 ec 04             	sub    $0x4,%esp
f01230ba:	68 98 fe 12 f0       	push   $0xf012fe98
f01230bf:	68 8d 00 00 00       	push   $0x8d
f01230c4:	68 bb fe 12 f0       	push   $0xf012febb
f01230c9:	e8 4c d2 fd ff       	call   f010031a <_panic>
f01230ce:	8b 15 50 ef 59 f0    	mov    0xf059ef50,%edx
f01230d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01230d7:	89 10                	mov    %edx,(%eax)
f01230d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01230dc:	8b 00                	mov    (%eax),%eax
f01230de:	85 c0                	test   %eax,%eax
f01230e0:	74 0d                	je     f01230ef <initialize_dynamic_allocator+0xe8>
f01230e2:	a1 50 ef 59 f0       	mov    0xf059ef50,%eax
f01230e7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01230ea:	89 50 04             	mov    %edx,0x4(%eax)
f01230ed:	eb 08                	jmp    f01230f7 <initialize_dynamic_allocator+0xf0>
f01230ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01230f2:	a3 54 ef 59 f0       	mov    %eax,0xf059ef54
f01230f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01230fa:	a3 50 ef 59 f0       	mov    %eax,0xf059ef50
f01230ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0123102:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0123109:	a1 5c ef 59 f0       	mov    0xf059ef5c,%eax
f012310e:	40                   	inc    %eax
f012310f:	a3 5c ef 59 f0       	mov    %eax,0xf059ef5c
f0123114:	eb 07                	jmp    f012311d <initialize_dynamic_allocator+0x116>
        //DON'T CHANGE THESE LINES==========================================================
        //==================================================================================
        {
            if (initSizeOfAllocatedSpace % 2 != 0) initSizeOfAllocatedSpace++; //ensure it's multiple of 2
            if (initSizeOfAllocatedSpace == 0)
                return ;
f0123116:	90                   	nop
f0123117:	eb 04                	jmp    f012311d <initialize_dynamic_allocator+0x116>
        //COMMENT THE FOLLOWING LINE BEFORE START CODING
        //panic("initialize_dynamic_allocator is not implemented yet");

    // Check for bounds
    if ((daStart + initSizeOfAllocatedSpace) > KERNEL_HEAP_MAX)
        return;
f0123119:	90                   	nop
f012311a:	eb 01                	jmp    f012311d <initialize_dynamic_allocator+0x116>
    if(daStart < KERNEL_HEAP_START)
        return;
f012311c:	90                   	nop
   first_free_block->prev_next_info.le_next = NULL; // Link to the END block
   first_free_block->prev_next_info.le_prev = NULL;

    // Link the first free block into the free block list
    LIST_INSERT_HEAD(&freeBlocksList , first_free_block);
}
f012311d:	c9                   	leave  
f012311e:	c3                   	ret    

f012311f <set_block_data>:
int counter=0;
//==================================
// [2] SET BLOCK HEADER & FOOTER:
//==================================
void set_block_data(void* va, uint32 totalSize, bool isAllocated)
{
f012311f:	55                   	push   %ebp
f0123120:	89 e5                	mov    %esp,%ebp


   /*struct BlockElement *block = (struct BlockElement *)(va);
   block->header = (struct Block_Start_End *)(va - sizeof(struct Block_Start_End));
   block->footer = (struct Block_Start_End *)(va + totalSize - 2*sizeof(struct Block_Start_End));*/
   if(isAllocated)
f0123122:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)

   }

   //Assigning size to Header/Footer
   sayed:
   *HEADER(va) = totalSize;
f0123126:	8b 45 08             	mov    0x8(%ebp),%eax
f0123129:	8d 50 fc             	lea    -0x4(%eax),%edx
f012312c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012312f:	89 02                	mov    %eax,(%edx)
   *FOOTER(va, totalSize) = totalSize;
f0123131:	8b 45 0c             	mov    0xc(%ebp),%eax
f0123134:	8d 50 f8             	lea    -0x8(%eax),%edx
f0123137:	8b 45 08             	mov    0x8(%ebp),%eax
f012313a:	01 c2                	add    %eax,%edx
f012313c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012313f:	89 02                	mov    %eax,(%edx)

}
f0123141:	90                   	nop
f0123142:	5d                   	pop    %ebp
f0123143:	c3                   	ret    

f0123144 <alloc_block_FF>:

//=========================================
// [3] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *alloc_block_FF(uint32 size)
{
f0123144:	55                   	push   %ebp
f0123145:	89 e5                	mov    %esp,%ebp
f0123147:	83 ec 48             	sub    $0x48,%esp
	//==================================================================================
	//DON'T CHANGE THESE LINES==========================================================
	//==================================================================================
	{
		if (size % 2 != 0) size++;	//ensure that the size is even (to use LSB as allocation flag)
f012314a:	8b 45 08             	mov    0x8(%ebp),%eax
f012314d:	83 e0 01             	and    $0x1,%eax
f0123150:	85 c0                	test   %eax,%eax
f0123152:	74 03                	je     f0123157 <alloc_block_FF+0x13>
f0123154:	ff 45 08             	incl   0x8(%ebp)
		if (size < DYN_ALLOC_MIN_BLOCK_SIZE)
f0123157:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
f012315b:	77 07                	ja     f0123164 <alloc_block_FF+0x20>
			size = DYN_ALLOC_MIN_BLOCK_SIZE ;
f012315d:	c7 45 08 08 00 00 00 	movl   $0x8,0x8(%ebp)
		if (!is_initialized)
f0123164:	a1 54 ec 59 f0       	mov    0xf059ec54,%eax
f0123169:	85 c0                	test   %eax,%eax
f012316b:	75 73                	jne    f01231e0 <alloc_block_FF+0x9c>
		{
			uint32 required_size = size + 2*sizeof(int) /*header & footer*/ + 2*sizeof(int) /*da begin & end*/ ;
f012316d:	8b 45 08             	mov    0x8(%ebp),%eax
f0123170:	83 c0 10             	add    $0x10,%eax
f0123173:	89 45 f0             	mov    %eax,-0x10(%ebp)
			uint32 da_start = (uint32)sbrk(ROUNDUP(required_size, PAGE_SIZE)/PAGE_SIZE);
f0123176:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f012317d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0123180:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0123183:	01 d0                	add    %edx,%eax
f0123185:	48                   	dec    %eax
f0123186:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0123189:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012318c:	ba 00 00 00 00       	mov    $0x0,%edx
f0123191:	f7 75 ec             	divl   -0x14(%ebp)
f0123194:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0123197:	29 d0                	sub    %edx,%eax
f0123199:	c1 e8 0c             	shr    $0xc,%eax
f012319c:	83 ec 0c             	sub    $0xc,%esp
f012319f:	50                   	push   %eax
f01231a0:	e8 07 59 fe ff       	call   f0108aac <sbrk>
f01231a5:	83 c4 10             	add    $0x10,%esp
f01231a8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			uint32 da_break = (uint32)sbrk(0);
f01231ab:	83 ec 0c             	sub    $0xc,%esp
f01231ae:	6a 00                	push   $0x0
f01231b0:	e8 f7 58 fe ff       	call   f0108aac <sbrk>
f01231b5:	83 c4 10             	add    $0x10,%esp
f01231b8:	89 45 e0             	mov    %eax,-0x20(%ebp)
			initialize_dynamic_allocator(da_start, da_break - da_start);
f01231bb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01231be:	2b 45 e4             	sub    -0x1c(%ebp),%eax
f01231c1:	83 ec 08             	sub    $0x8,%esp
f01231c4:	50                   	push   %eax
f01231c5:	ff 75 e4             	pushl  -0x1c(%ebp)
f01231c8:	e8 3a fe ff ff       	call   f0123007 <initialize_dynamic_allocator>
f01231cd:	83 c4 10             	add    $0x10,%esp
			cprintf("Initialized \n");
f01231d0:	83 ec 0c             	sub    $0xc,%esp
f01231d3:	68 d3 fe 12 f0       	push   $0xf012fed3
f01231d8:	e8 8f dd fd ff       	call   f0100f6c <cprintf>
f01231dd:	83 c4 10             	add    $0x10,%esp

	//TODO: [PROJECT'24.MS1 - #06] [3] DYNAMIC ALLOCATOR - alloc_block_FF
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
//	panic("alloc_block_FF is not implemented yet");
	//Your Code is Here...
	 if (size == 0) {
f01231e0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01231e4:	75 0a                	jne    f01231f0 <alloc_block_FF+0xac>
	        return NULL;
f01231e6:	b8 00 00 00 00       	mov    $0x0,%eax
f01231eb:	e9 6e 01 00 00       	jmp    f012335e <alloc_block_FF+0x21a>
	    }

	    struct BlockElement *blk = NULL;
f01231f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	    LIST_FOREACH(blk, &freeBlocksList) {
f01231f7:	a1 50 ef 59 f0       	mov    0xf059ef50,%eax
f01231fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01231ff:	e9 cb 00 00 00       	jmp    f01232cf <alloc_block_FF+0x18b>
	        void *va = (void *)blk;
f0123204:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123207:	89 45 cc             	mov    %eax,-0x34(%ebp)
	        uint32 blk_size = get_block_size(va);
f012320a:	83 ec 0c             	sub    $0xc,%esp
f012320d:	ff 75 cc             	pushl  -0x34(%ebp)
f0123210:	e8 8e fc ff ff       	call   f0122ea3 <get_block_size>
f0123215:	83 c4 10             	add    $0x10,%esp
f0123218:	89 45 c8             	mov    %eax,-0x38(%ebp)
	        if(size == 20)
	        {
	        	//cprintf("Block Size : %d ,Size : %d \n",blk_size,size);
	        }
	        if (blk_size >= size + 2 * sizeof(uint32)) {
f012321b:	8b 45 08             	mov    0x8(%ebp),%eax
f012321e:	83 c0 08             	add    $0x8,%eax
f0123221:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0123224:	0f 87 9d 00 00 00    	ja     f01232c7 <alloc_block_FF+0x183>
	        	//cprintf("error4040 \n");
	            if (blk_size >= size + DYN_ALLOC_MIN_BLOCK_SIZE + 4 * sizeof(uint32)) {
f012322a:	8b 45 08             	mov    0x8(%ebp),%eax
f012322d:	83 c0 18             	add    $0x18,%eax
f0123230:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0123233:	77 5c                	ja     f0123291 <alloc_block_FF+0x14d>
	            	//cprintf("error4041 \n");
	                uint32 remaining_size = blk_size - size - 2 * sizeof(uint32);
f0123235:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0123238:	2b 45 08             	sub    0x8(%ebp),%eax
f012323b:	83 e8 08             	sub    $0x8,%eax
f012323e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	                void *new_block_va = (void *)((char *)va + size + 2 * sizeof(uint32)); // casting to char because its 1 byte size
f0123241:	8b 45 08             	mov    0x8(%ebp),%eax
f0123244:	8d 50 08             	lea    0x8(%eax),%edx
f0123247:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012324a:	01 d0                	add    %edx,%eax
f012324c:	89 45 c0             	mov    %eax,-0x40(%ebp)

	                // Refactoring the next block's previous pointer
	                LIST_PREV(LIST_NEXT(blk)) = (struct BlockElement *)new_block_va;
f012324f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123252:	8b 00                	mov    (%eax),%eax
f0123254:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0123257:	89 50 04             	mov    %edx,0x4(%eax)

	                // Refactoring the previous block's next pointer
	                LIST_NEXT(LIST_PREV(blk)) = (struct BlockElement *)new_block_va;
f012325a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012325d:	8b 40 04             	mov    0x4(%eax),%eax
f0123260:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0123263:	89 10                	mov    %edx,(%eax)

	                //((struct BlockElement *) va)->prev_next_info->le_next
	                //if(size == 20) cprintf("1\n");
	                set_block_data(va, size + 2 * sizeof(uint32), 1);
f0123265:	8b 45 08             	mov    0x8(%ebp),%eax
f0123268:	83 c0 08             	add    $0x8,%eax
f012326b:	83 ec 04             	sub    $0x4,%esp
f012326e:	6a 01                	push   $0x1
f0123270:	50                   	push   %eax
f0123271:	ff 75 cc             	pushl  -0x34(%ebp)
f0123274:	e8 a6 fe ff ff       	call   f012311f <set_block_data>
f0123279:	83 c4 10             	add    $0x10,%esp

	               // cprintf("Allocated Block\n");
	                set_block_data(new_block_va, remaining_size, 0);
f012327c:	83 ec 04             	sub    $0x4,%esp
f012327f:	6a 00                	push   $0x0
f0123281:	ff 75 c4             	pushl  -0x3c(%ebp)
f0123284:	ff 75 c0             	pushl  -0x40(%ebp)
f0123287:	e8 93 fe ff ff       	call   f012311f <set_block_data>
f012328c:	83 c4 10             	add    $0x10,%esp
f012328f:	eb 2e                	jmp    f01232bf <alloc_block_FF+0x17b>
	                //cprintf("NotAllocated Block \n");
	            } else {
	            	//cprintf("error4042 \n");
	            	// Refactoring the next block's previous pointer
	            	LIST_PREV(LIST_NEXT(blk)) = LIST_PREV(blk);
f0123291:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0123294:	8b 00                	mov    (%eax),%eax
f0123296:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0123299:	8b 52 04             	mov    0x4(%edx),%edx
f012329c:	89 50 04             	mov    %edx,0x4(%eax)

	            	// Refactoring the previous block's next pointer
	            	LIST_NEXT(LIST_PREV(blk)) = LIST_NEXT(blk);
f012329f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01232a2:	8b 40 04             	mov    0x4(%eax),%eax
f01232a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01232a8:	8b 12                	mov    (%edx),%edx
f01232aa:	89 10                	mov    %edx,(%eax)

	                set_block_data(va, blk_size, 1);
f01232ac:	83 ec 04             	sub    $0x4,%esp
f01232af:	6a 01                	push   $0x1
f01232b1:	ff 75 c8             	pushl  -0x38(%ebp)
f01232b4:	ff 75 cc             	pushl  -0x34(%ebp)
f01232b7:	e8 63 fe ff ff       	call   f012311f <set_block_data>
f01232bc:	83 c4 10             	add    $0x10,%esp
	                //cprintf("suii1 \n");
	            }
	            //cprintf("suii2 \n");
	            //cprintf("failed1 \n");
	            return va;
f01232bf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01232c2:	e9 97 00 00 00       	jmp    f012335e <alloc_block_FF+0x21a>
	 if (size == 0) {
	        return NULL;
	    }

	    struct BlockElement *blk = NULL;
	    LIST_FOREACH(blk, &freeBlocksList) {
f01232c7:	a1 58 ef 59 f0       	mov    0xf059ef58,%eax
f01232cc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01232cf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01232d3:	74 07                	je     f01232dc <alloc_block_FF+0x198>
f01232d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01232d8:	8b 00                	mov    (%eax),%eax
f01232da:	eb 05                	jmp    f01232e1 <alloc_block_FF+0x19d>
f01232dc:	b8 00 00 00 00       	mov    $0x0,%eax
f01232e1:	a3 58 ef 59 f0       	mov    %eax,0xf059ef58
f01232e6:	a1 58 ef 59 f0       	mov    0xf059ef58,%eax
f01232eb:	85 c0                	test   %eax,%eax
f01232ed:	0f 85 11 ff ff ff    	jne    f0123204 <alloc_block_FF+0xc0>
f01232f3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01232f7:	0f 85 07 ff ff ff    	jne    f0123204 <alloc_block_FF+0xc0>
	            return va;

	        }
	    }

	    uint32 required_size = size + 2 * sizeof(uint32);
f01232fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0123300:	83 c0 08             	add    $0x8,%eax
f0123303:	89 45 dc             	mov    %eax,-0x24(%ebp)
	    void *new_mem = sbrk(ROUNDUP(required_size, PAGE_SIZE) / PAGE_SIZE);
f0123306:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f012330d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0123310:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123313:	01 d0                	add    %edx,%eax
f0123315:	48                   	dec    %eax
f0123316:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0123319:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012331c:	ba 00 00 00 00       	mov    $0x0,%edx
f0123321:	f7 75 d8             	divl   -0x28(%ebp)
f0123324:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0123327:	29 d0                	sub    %edx,%eax
f0123329:	c1 e8 0c             	shr    $0xc,%eax
f012332c:	83 ec 0c             	sub    $0xc,%esp
f012332f:	50                   	push   %eax
f0123330:	e8 77 57 fe ff       	call   f0108aac <sbrk>
f0123335:	83 c4 10             	add    $0x10,%esp
f0123338:	89 45 d0             	mov    %eax,-0x30(%ebp)
	    if (new_mem == (void *)-1) {
f012333b:	83 7d d0 ff          	cmpl   $0xffffffff,-0x30(%ebp)
f012333f:	75 07                	jne    f0123348 <alloc_block_FF+0x204>
	        return NULL;
f0123341:	b8 00 00 00 00       	mov    $0x0,%eax
f0123346:	eb 16                	jmp    f012335e <alloc_block_FF+0x21a>
	    }
	    //cprintf("New Mem: %x \n",new_mem);
	    //cprintf("failed2 \n");
	    set_block_data(new_mem, required_size, 1);
f0123348:	83 ec 04             	sub    $0x4,%esp
f012334b:	6a 01                	push   $0x1
f012334d:	ff 75 dc             	pushl  -0x24(%ebp)
f0123350:	ff 75 d0             	pushl  -0x30(%ebp)
f0123353:	e8 c7 fd ff ff       	call   f012311f <set_block_data>
f0123358:	83 c4 10             	add    $0x10,%esp
	    //cprintf("success1 \n");
	    return new_mem;
f012335b:	8b 45 d0             	mov    -0x30(%ebp),%eax



}
f012335e:	c9                   	leave  
f012335f:	c3                   	ret    

f0123360 <alloc_block_BF>:
//=========================================
// [4] ALLOCATE BLOCK BY BEST FIT:
//=========================================
void *alloc_block_BF(uint32 size)
{
f0123360:	55                   	push   %ebp
f0123361:	89 e5                	mov    %esp,%ebp
f0123363:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - BONUS] [3] DYNAMIC ALLOCATOR - alloc_block_BF
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("alloc_block_BF is not implemented yet");
f0123366:	83 ec 04             	sub    $0x4,%esp
f0123369:	68 e4 fe 12 f0       	push   $0xf012fee4
f012336e:	68 17 01 00 00       	push   $0x117
f0123373:	68 bb fe 12 f0       	push   $0xf012febb
f0123378:	e8 9d cf fd ff       	call   f010031a <_panic>

f012337d <free_block>:

//===================================================
// [5] FREE BLOCK WITH COALESCING:
//===================================================
void free_block(void *va)
{
f012337d:	55                   	push   %ebp
f012337e:	89 e5                	mov    %esp,%ebp
f0123380:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #07] [3] DYNAMIC ALLOCATOR - free_block
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("free_block is not implemented yet");
f0123383:	83 ec 04             	sub    $0x4,%esp
f0123386:	68 0c ff 12 f0       	push   $0xf012ff0c
f012338b:	68 23 01 00 00       	push   $0x123
f0123390:	68 bb fe 12 f0       	push   $0xf012febb
f0123395:	e8 80 cf fd ff       	call   f010031a <_panic>

f012339a <realloc_block_FF>:

//=========================================
// [6] REALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *realloc_block_FF(void* va, uint32 new_size)
{
f012339a:	55                   	push   %ebp
f012339b:	89 e5                	mov    %esp,%ebp
f012339d:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #08] [3] DYNAMIC ALLOCATOR - realloc_block_FF
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("realloc_block_FF is not implemented yet");
f01233a0:	83 ec 04             	sub    $0x4,%esp
f01233a3:	68 30 ff 12 f0       	push   $0xf012ff30
f01233a8:	68 2e 01 00 00       	push   $0x12e
f01233ad:	68 bb fe 12 f0       	push   $0xf012febb
f01233b2:	e8 63 cf fd ff       	call   f010031a <_panic>

f01233b7 <alloc_block_WF>:
/*********************************************************************************************/
//=========================================
// [7] ALLOCATE BLOCK BY WORST FIT:
//=========================================
void *alloc_block_WF(uint32 size)
{
f01233b7:	55                   	push   %ebp
f01233b8:	89 e5                	mov    %esp,%ebp
f01233ba:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_WF is not implemented yet");
f01233bd:	83 ec 04             	sub    $0x4,%esp
f01233c0:	68 58 ff 12 f0       	push   $0xf012ff58
f01233c5:	68 3a 01 00 00       	push   $0x13a
f01233ca:	68 bb fe 12 f0       	push   $0xf012febb
f01233cf:	e8 46 cf fd ff       	call   f010031a <_panic>

f01233d4 <alloc_block_NF>:

//=========================================
// [8] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
void *alloc_block_NF(uint32 size)
{
f01233d4:	55                   	push   %ebp
f01233d5:	89 e5                	mov    %esp,%ebp
f01233d7:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_NF is not implemented yet");
f01233da:	83 ec 04             	sub    $0x4,%esp
f01233dd:	68 80 ff 12 f0       	push   $0xf012ff80
f01233e2:	68 43 01 00 00       	push   $0x143
f01233e7:	68 bb fe 12 f0       	push   $0xf012febb
f01233ec:	e8 29 cf fd ff       	call   f010031a <_panic>
f01233f1:	66 90                	xchg   %ax,%ax
f01233f3:	90                   	nop

f01233f4 <__moddi3>:
f01233f4:	55                   	push   %ebp
f01233f5:	57                   	push   %edi
f01233f6:	56                   	push   %esi
f01233f7:	53                   	push   %ebx
f01233f8:	83 ec 2c             	sub    $0x2c,%esp
f01233fb:	8b 74 24 40          	mov    0x40(%esp),%esi
f01233ff:	8b 7c 24 44          	mov    0x44(%esp),%edi
f0123403:	8b 4c 24 48          	mov    0x48(%esp),%ecx
f0123407:	8b 5c 24 4c          	mov    0x4c(%esp),%ebx
f012340b:	89 d8                	mov    %ebx,%eax
f012340d:	85 ff                	test   %edi,%edi
f012340f:	0f 88 d3 00 00 00    	js     f01234e8 <__moddi3+0xf4>
f0123415:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
f012341c:	00 
f012341d:	85 c0                	test   %eax,%eax
f012341f:	0f 88 ab 00 00 00    	js     f01234d0 <__moddi3+0xdc>
f0123425:	89 0c 24             	mov    %ecx,(%esp)
f0123428:	89 5c 24 04          	mov    %ebx,0x4(%esp)
f012342c:	89 74 24 10          	mov    %esi,0x10(%esp)
f0123430:	89 fb                	mov    %edi,%ebx
f0123432:	8b 14 24             	mov    (%esp),%edx
f0123435:	8b 4c 24 04          	mov    0x4(%esp),%ecx
f0123439:	89 d0                	mov    %edx,%eax
f012343b:	89 54 24 18          	mov    %edx,0x18(%esp)
f012343f:	89 ca                	mov    %ecx,%edx
f0123441:	8b 0c 24             	mov    (%esp),%ecx
f0123444:	89 34 24             	mov    %esi,(%esp)
f0123447:	89 7c 24 14          	mov    %edi,0x14(%esp)
f012344b:	85 d2                	test   %edx,%edx
f012344d:	75 15                	jne    f0123464 <__moddi3+0x70>
f012344f:	89 c7                	mov    %eax,%edi
f0123451:	39 d8                	cmp    %ebx,%eax
f0123453:	76 5b                	jbe    f01234b0 <__moddi3+0xbc>
f0123455:	89 f0                	mov    %esi,%eax
f0123457:	89 da                	mov    %ebx,%edx
f0123459:	f7 f7                	div    %edi
f012345b:	89 d3                	mov    %edx,%ebx
f012345d:	89 d8                	mov    %ebx,%eax
f012345f:	31 d2                	xor    %edx,%edx
f0123461:	eb 09                	jmp    f012346c <__moddi3+0x78>
f0123463:	90                   	nop
f0123464:	39 fa                	cmp    %edi,%edx
f0123466:	76 1c                	jbe    f0123484 <__moddi3+0x90>
f0123468:	89 f0                	mov    %esi,%eax
f012346a:	89 fa                	mov    %edi,%edx
f012346c:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
f0123470:	85 c9                	test   %ecx,%ecx
f0123472:	74 07                	je     f012347b <__moddi3+0x87>
f0123474:	f7 d8                	neg    %eax
f0123476:	83 d2 00             	adc    $0x0,%edx
f0123479:	f7 da                	neg    %edx
f012347b:	83 c4 2c             	add    $0x2c,%esp
f012347e:	5b                   	pop    %ebx
f012347f:	5e                   	pop    %esi
f0123480:	5f                   	pop    %edi
f0123481:	5d                   	pop    %ebp
f0123482:	c3                   	ret    
f0123483:	90                   	nop
f0123484:	0f bd c2             	bsr    %edx,%eax
f0123487:	83 f0 1f             	xor    $0x1f,%eax
f012348a:	89 44 24 1c          	mov    %eax,0x1c(%esp)
f012348e:	75 6c                	jne    f01234fc <__moddi3+0x108>
f0123490:	39 fa                	cmp    %edi,%edx
f0123492:	72 05                	jb     f0123499 <__moddi3+0xa5>
f0123494:	3b 0c 24             	cmp    (%esp),%ecx
f0123497:	77 0e                	ja     f01234a7 <__moddi3+0xb3>
f0123499:	8b 34 24             	mov    (%esp),%esi
f012349c:	29 ce                	sub    %ecx,%esi
f012349e:	19 d3                	sbb    %edx,%ebx
f01234a0:	89 5c 24 14          	mov    %ebx,0x14(%esp)
f01234a4:	89 34 24             	mov    %esi,(%esp)
f01234a7:	8b 04 24             	mov    (%esp),%eax
f01234aa:	8b 54 24 14          	mov    0x14(%esp),%edx
f01234ae:	eb bc                	jmp    f012346c <__moddi3+0x78>
f01234b0:	85 c9                	test   %ecx,%ecx
f01234b2:	75 0b                	jne    f01234bf <__moddi3+0xcb>
f01234b4:	b8 01 00 00 00       	mov    $0x1,%eax
f01234b9:	31 d2                	xor    %edx,%edx
f01234bb:	f7 f1                	div    %ecx
f01234bd:	89 c1                	mov    %eax,%ecx
f01234bf:	89 d8                	mov    %ebx,%eax
f01234c1:	31 d2                	xor    %edx,%edx
f01234c3:	f7 f1                	div    %ecx
f01234c5:	8b 04 24             	mov    (%esp),%eax
f01234c8:	f7 f1                	div    %ecx
f01234ca:	89 d3                	mov    %edx,%ebx
f01234cc:	eb 8f                	jmp    f012345d <__moddi3+0x69>
f01234ce:	66 90                	xchg   %ax,%ax
f01234d0:	89 c8                	mov    %ecx,%eax
f01234d2:	89 da                	mov    %ebx,%edx
f01234d4:	f7 d8                	neg    %eax
f01234d6:	83 d2 00             	adc    $0x0,%edx
f01234d9:	f7 da                	neg    %edx
f01234db:	89 04 24             	mov    %eax,(%esp)
f01234de:	89 54 24 04          	mov    %edx,0x4(%esp)
f01234e2:	e9 45 ff ff ff       	jmp    f012342c <__moddi3+0x38>
f01234e7:	90                   	nop
f01234e8:	f7 de                	neg    %esi
f01234ea:	83 d7 00             	adc    $0x0,%edi
f01234ed:	f7 df                	neg    %edi
f01234ef:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%esp)
f01234f6:	ff 
f01234f7:	e9 21 ff ff ff       	jmp    f012341d <__moddi3+0x29>
f01234fc:	b8 20 00 00 00       	mov    $0x20,%eax
f0123501:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
f0123505:	29 f8                	sub    %edi,%eax
f0123507:	89 c6                	mov    %eax,%esi
f0123509:	89 44 24 14          	mov    %eax,0x14(%esp)
f012350d:	89 f9                	mov    %edi,%ecx
f012350f:	d3 e2                	shl    %cl,%edx
f0123511:	8b 6c 24 18          	mov    0x18(%esp),%ebp
f0123515:	89 e8                	mov    %ebp,%eax
f0123517:	89 f1                	mov    %esi,%ecx
f0123519:	d3 e8                	shr    %cl,%eax
f012351b:	09 d0                	or     %edx,%eax
f012351d:	89 04 24             	mov    %eax,(%esp)
f0123520:	89 ea                	mov    %ebp,%edx
f0123522:	89 f9                	mov    %edi,%ecx
f0123524:	d3 e2                	shl    %cl,%edx
f0123526:	89 d7                	mov    %edx,%edi
f0123528:	89 da                	mov    %ebx,%edx
f012352a:	d3 e2                	shl    %cl,%edx
f012352c:	8b 6c 24 10          	mov    0x10(%esp),%ebp
f0123530:	d3 e5                	shl    %cl,%ebp
f0123532:	8b 44 24 10          	mov    0x10(%esp),%eax
f0123536:	89 f1                	mov    %esi,%ecx
f0123538:	d3 e8                	shr    %cl,%eax
f012353a:	09 d0                	or     %edx,%eax
f012353c:	d3 eb                	shr    %cl,%ebx
f012353e:	89 da                	mov    %ebx,%edx
f0123540:	f7 34 24             	divl   (%esp)
f0123543:	89 d3                	mov    %edx,%ebx
f0123545:	f7 e7                	mul    %edi
f0123547:	89 c6                	mov    %eax,%esi
f0123549:	89 d1                	mov    %edx,%ecx
f012354b:	39 d3                	cmp    %edx,%ebx
f012354d:	72 29                	jb     f0123578 <__moddi3+0x184>
f012354f:	74 33                	je     f0123584 <__moddi3+0x190>
f0123551:	89 e8                	mov    %ebp,%eax
f0123553:	29 f0                	sub    %esi,%eax
f0123555:	19 cb                	sbb    %ecx,%ebx
f0123557:	89 de                	mov    %ebx,%esi
f0123559:	8a 4c 24 14          	mov    0x14(%esp),%cl
f012355d:	d3 e6                	shl    %cl,%esi
f012355f:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
f0123563:	89 f9                	mov    %edi,%ecx
f0123565:	d3 e8                	shr    %cl,%eax
f0123567:	09 c6                	or     %eax,%esi
f0123569:	89 f0                	mov    %esi,%eax
f012356b:	89 f9                	mov    %edi,%ecx
f012356d:	d3 eb                	shr    %cl,%ebx
f012356f:	89 da                	mov    %ebx,%edx
f0123571:	e9 f6 fe ff ff       	jmp    f012346c <__moddi3+0x78>
f0123576:	66 90                	xchg   %ax,%ax
f0123578:	29 f8                	sub    %edi,%eax
f012357a:	1b 14 24             	sbb    (%esp),%edx
f012357d:	89 d1                	mov    %edx,%ecx
f012357f:	89 c6                	mov    %eax,%esi
f0123581:	eb ce                	jmp    f0123551 <__moddi3+0x15d>
f0123583:	90                   	nop
f0123584:	39 c5                	cmp    %eax,%ebp
f0123586:	72 f0                	jb     f0123578 <__moddi3+0x184>
f0123588:	89 d9                	mov    %ebx,%ecx
f012358a:	eb c5                	jmp    f0123551 <__moddi3+0x15d>

f012358c <__udivdi3>:
f012358c:	55                   	push   %ebp
f012358d:	57                   	push   %edi
f012358e:	56                   	push   %esi
f012358f:	53                   	push   %ebx
f0123590:	83 ec 1c             	sub    $0x1c,%esp
f0123593:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f0123597:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f012359b:	8b 7c 24 38          	mov    0x38(%esp),%edi
f012359f:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f01235a3:	89 ca                	mov    %ecx,%edx
f01235a5:	89 f8                	mov    %edi,%eax
f01235a7:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f01235ab:	85 f6                	test   %esi,%esi
f01235ad:	75 2d                	jne    f01235dc <__udivdi3+0x50>
f01235af:	39 cf                	cmp    %ecx,%edi
f01235b1:	77 65                	ja     f0123618 <__udivdi3+0x8c>
f01235b3:	89 fd                	mov    %edi,%ebp
f01235b5:	85 ff                	test   %edi,%edi
f01235b7:	75 0b                	jne    f01235c4 <__udivdi3+0x38>
f01235b9:	b8 01 00 00 00       	mov    $0x1,%eax
f01235be:	31 d2                	xor    %edx,%edx
f01235c0:	f7 f7                	div    %edi
f01235c2:	89 c5                	mov    %eax,%ebp
f01235c4:	31 d2                	xor    %edx,%edx
f01235c6:	89 c8                	mov    %ecx,%eax
f01235c8:	f7 f5                	div    %ebp
f01235ca:	89 c1                	mov    %eax,%ecx
f01235cc:	89 d8                	mov    %ebx,%eax
f01235ce:	f7 f5                	div    %ebp
f01235d0:	89 cf                	mov    %ecx,%edi
f01235d2:	89 fa                	mov    %edi,%edx
f01235d4:	83 c4 1c             	add    $0x1c,%esp
f01235d7:	5b                   	pop    %ebx
f01235d8:	5e                   	pop    %esi
f01235d9:	5f                   	pop    %edi
f01235da:	5d                   	pop    %ebp
f01235db:	c3                   	ret    
f01235dc:	39 ce                	cmp    %ecx,%esi
f01235de:	77 28                	ja     f0123608 <__udivdi3+0x7c>
f01235e0:	0f bd fe             	bsr    %esi,%edi
f01235e3:	83 f7 1f             	xor    $0x1f,%edi
f01235e6:	75 40                	jne    f0123628 <__udivdi3+0x9c>
f01235e8:	39 ce                	cmp    %ecx,%esi
f01235ea:	72 0a                	jb     f01235f6 <__udivdi3+0x6a>
f01235ec:	3b 44 24 08          	cmp    0x8(%esp),%eax
f01235f0:	0f 87 9e 00 00 00    	ja     f0123694 <__udivdi3+0x108>
f01235f6:	b8 01 00 00 00       	mov    $0x1,%eax
f01235fb:	89 fa                	mov    %edi,%edx
f01235fd:	83 c4 1c             	add    $0x1c,%esp
f0123600:	5b                   	pop    %ebx
f0123601:	5e                   	pop    %esi
f0123602:	5f                   	pop    %edi
f0123603:	5d                   	pop    %ebp
f0123604:	c3                   	ret    
f0123605:	8d 76 00             	lea    0x0(%esi),%esi
f0123608:	31 ff                	xor    %edi,%edi
f012360a:	31 c0                	xor    %eax,%eax
f012360c:	89 fa                	mov    %edi,%edx
f012360e:	83 c4 1c             	add    $0x1c,%esp
f0123611:	5b                   	pop    %ebx
f0123612:	5e                   	pop    %esi
f0123613:	5f                   	pop    %edi
f0123614:	5d                   	pop    %ebp
f0123615:	c3                   	ret    
f0123616:	66 90                	xchg   %ax,%ax
f0123618:	89 d8                	mov    %ebx,%eax
f012361a:	f7 f7                	div    %edi
f012361c:	31 ff                	xor    %edi,%edi
f012361e:	89 fa                	mov    %edi,%edx
f0123620:	83 c4 1c             	add    $0x1c,%esp
f0123623:	5b                   	pop    %ebx
f0123624:	5e                   	pop    %esi
f0123625:	5f                   	pop    %edi
f0123626:	5d                   	pop    %ebp
f0123627:	c3                   	ret    
f0123628:	bd 20 00 00 00       	mov    $0x20,%ebp
f012362d:	89 eb                	mov    %ebp,%ebx
f012362f:	29 fb                	sub    %edi,%ebx
f0123631:	89 f9                	mov    %edi,%ecx
f0123633:	d3 e6                	shl    %cl,%esi
f0123635:	89 c5                	mov    %eax,%ebp
f0123637:	88 d9                	mov    %bl,%cl
f0123639:	d3 ed                	shr    %cl,%ebp
f012363b:	89 e9                	mov    %ebp,%ecx
f012363d:	09 f1                	or     %esi,%ecx
f012363f:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f0123643:	89 f9                	mov    %edi,%ecx
f0123645:	d3 e0                	shl    %cl,%eax
f0123647:	89 c5                	mov    %eax,%ebp
f0123649:	89 d6                	mov    %edx,%esi
f012364b:	88 d9                	mov    %bl,%cl
f012364d:	d3 ee                	shr    %cl,%esi
f012364f:	89 f9                	mov    %edi,%ecx
f0123651:	d3 e2                	shl    %cl,%edx
f0123653:	8b 44 24 08          	mov    0x8(%esp),%eax
f0123657:	88 d9                	mov    %bl,%cl
f0123659:	d3 e8                	shr    %cl,%eax
f012365b:	09 c2                	or     %eax,%edx
f012365d:	89 d0                	mov    %edx,%eax
f012365f:	89 f2                	mov    %esi,%edx
f0123661:	f7 74 24 0c          	divl   0xc(%esp)
f0123665:	89 d6                	mov    %edx,%esi
f0123667:	89 c3                	mov    %eax,%ebx
f0123669:	f7 e5                	mul    %ebp
f012366b:	39 d6                	cmp    %edx,%esi
f012366d:	72 19                	jb     f0123688 <__udivdi3+0xfc>
f012366f:	74 0b                	je     f012367c <__udivdi3+0xf0>
f0123671:	89 d8                	mov    %ebx,%eax
f0123673:	31 ff                	xor    %edi,%edi
f0123675:	e9 58 ff ff ff       	jmp    f01235d2 <__udivdi3+0x46>
f012367a:	66 90                	xchg   %ax,%ax
f012367c:	8b 54 24 08          	mov    0x8(%esp),%edx
f0123680:	89 f9                	mov    %edi,%ecx
f0123682:	d3 e2                	shl    %cl,%edx
f0123684:	39 c2                	cmp    %eax,%edx
f0123686:	73 e9                	jae    f0123671 <__udivdi3+0xe5>
f0123688:	8d 43 ff             	lea    -0x1(%ebx),%eax
f012368b:	31 ff                	xor    %edi,%edi
f012368d:	e9 40 ff ff ff       	jmp    f01235d2 <__udivdi3+0x46>
f0123692:	66 90                	xchg   %ax,%ax
f0123694:	31 c0                	xor    %eax,%eax
f0123696:	e9 37 ff ff ff       	jmp    f01235d2 <__udivdi3+0x46>
f012369b:	90                   	nop

f012369c <__umoddi3>:
f012369c:	55                   	push   %ebp
f012369d:	57                   	push   %edi
f012369e:	56                   	push   %esi
f012369f:	53                   	push   %ebx
f01236a0:	83 ec 1c             	sub    $0x1c,%esp
f01236a3:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f01236a7:	8b 74 24 34          	mov    0x34(%esp),%esi
f01236ab:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01236af:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f01236b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
f01236b7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f01236bb:	89 f3                	mov    %esi,%ebx
f01236bd:	89 fa                	mov    %edi,%edx
f01236bf:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f01236c3:	89 34 24             	mov    %esi,(%esp)
f01236c6:	85 c0                	test   %eax,%eax
f01236c8:	75 1a                	jne    f01236e4 <__umoddi3+0x48>
f01236ca:	39 f7                	cmp    %esi,%edi
f01236cc:	0f 86 a2 00 00 00    	jbe    f0123774 <__umoddi3+0xd8>
f01236d2:	89 c8                	mov    %ecx,%eax
f01236d4:	89 f2                	mov    %esi,%edx
f01236d6:	f7 f7                	div    %edi
f01236d8:	89 d0                	mov    %edx,%eax
f01236da:	31 d2                	xor    %edx,%edx
f01236dc:	83 c4 1c             	add    $0x1c,%esp
f01236df:	5b                   	pop    %ebx
f01236e0:	5e                   	pop    %esi
f01236e1:	5f                   	pop    %edi
f01236e2:	5d                   	pop    %ebp
f01236e3:	c3                   	ret    
f01236e4:	39 f0                	cmp    %esi,%eax
f01236e6:	0f 87 ac 00 00 00    	ja     f0123798 <__umoddi3+0xfc>
f01236ec:	0f bd e8             	bsr    %eax,%ebp
f01236ef:	83 f5 1f             	xor    $0x1f,%ebp
f01236f2:	0f 84 ac 00 00 00    	je     f01237a4 <__umoddi3+0x108>
f01236f8:	bf 20 00 00 00       	mov    $0x20,%edi
f01236fd:	29 ef                	sub    %ebp,%edi
f01236ff:	89 fe                	mov    %edi,%esi
f0123701:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0123705:	89 e9                	mov    %ebp,%ecx
f0123707:	d3 e0                	shl    %cl,%eax
f0123709:	89 d7                	mov    %edx,%edi
f012370b:	89 f1                	mov    %esi,%ecx
f012370d:	d3 ef                	shr    %cl,%edi
f012370f:	09 c7                	or     %eax,%edi
f0123711:	89 e9                	mov    %ebp,%ecx
f0123713:	d3 e2                	shl    %cl,%edx
f0123715:	89 14 24             	mov    %edx,(%esp)
f0123718:	89 d8                	mov    %ebx,%eax
f012371a:	d3 e0                	shl    %cl,%eax
f012371c:	89 c2                	mov    %eax,%edx
f012371e:	8b 44 24 08          	mov    0x8(%esp),%eax
f0123722:	d3 e0                	shl    %cl,%eax
f0123724:	89 44 24 04          	mov    %eax,0x4(%esp)
f0123728:	8b 44 24 08          	mov    0x8(%esp),%eax
f012372c:	89 f1                	mov    %esi,%ecx
f012372e:	d3 e8                	shr    %cl,%eax
f0123730:	09 d0                	or     %edx,%eax
f0123732:	d3 eb                	shr    %cl,%ebx
f0123734:	89 da                	mov    %ebx,%edx
f0123736:	f7 f7                	div    %edi
f0123738:	89 d3                	mov    %edx,%ebx
f012373a:	f7 24 24             	mull   (%esp)
f012373d:	89 c6                	mov    %eax,%esi
f012373f:	89 d1                	mov    %edx,%ecx
f0123741:	39 d3                	cmp    %edx,%ebx
f0123743:	0f 82 87 00 00 00    	jb     f01237d0 <__umoddi3+0x134>
f0123749:	0f 84 91 00 00 00    	je     f01237e0 <__umoddi3+0x144>
f012374f:	8b 54 24 04          	mov    0x4(%esp),%edx
f0123753:	29 f2                	sub    %esi,%edx
f0123755:	19 cb                	sbb    %ecx,%ebx
f0123757:	89 d8                	mov    %ebx,%eax
f0123759:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f012375d:	d3 e0                	shl    %cl,%eax
f012375f:	89 e9                	mov    %ebp,%ecx
f0123761:	d3 ea                	shr    %cl,%edx
f0123763:	09 d0                	or     %edx,%eax
f0123765:	89 e9                	mov    %ebp,%ecx
f0123767:	d3 eb                	shr    %cl,%ebx
f0123769:	89 da                	mov    %ebx,%edx
f012376b:	83 c4 1c             	add    $0x1c,%esp
f012376e:	5b                   	pop    %ebx
f012376f:	5e                   	pop    %esi
f0123770:	5f                   	pop    %edi
f0123771:	5d                   	pop    %ebp
f0123772:	c3                   	ret    
f0123773:	90                   	nop
f0123774:	89 fd                	mov    %edi,%ebp
f0123776:	85 ff                	test   %edi,%edi
f0123778:	75 0b                	jne    f0123785 <__umoddi3+0xe9>
f012377a:	b8 01 00 00 00       	mov    $0x1,%eax
f012377f:	31 d2                	xor    %edx,%edx
f0123781:	f7 f7                	div    %edi
f0123783:	89 c5                	mov    %eax,%ebp
f0123785:	89 f0                	mov    %esi,%eax
f0123787:	31 d2                	xor    %edx,%edx
f0123789:	f7 f5                	div    %ebp
f012378b:	89 c8                	mov    %ecx,%eax
f012378d:	f7 f5                	div    %ebp
f012378f:	89 d0                	mov    %edx,%eax
f0123791:	e9 44 ff ff ff       	jmp    f01236da <__umoddi3+0x3e>
f0123796:	66 90                	xchg   %ax,%ax
f0123798:	89 c8                	mov    %ecx,%eax
f012379a:	89 f2                	mov    %esi,%edx
f012379c:	83 c4 1c             	add    $0x1c,%esp
f012379f:	5b                   	pop    %ebx
f01237a0:	5e                   	pop    %esi
f01237a1:	5f                   	pop    %edi
f01237a2:	5d                   	pop    %ebp
f01237a3:	c3                   	ret    
f01237a4:	3b 04 24             	cmp    (%esp),%eax
f01237a7:	72 06                	jb     f01237af <__umoddi3+0x113>
f01237a9:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f01237ad:	77 0f                	ja     f01237be <__umoddi3+0x122>
f01237af:	89 f2                	mov    %esi,%edx
f01237b1:	29 f9                	sub    %edi,%ecx
f01237b3:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f01237b7:	89 14 24             	mov    %edx,(%esp)
f01237ba:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f01237be:	8b 44 24 04          	mov    0x4(%esp),%eax
f01237c2:	8b 14 24             	mov    (%esp),%edx
f01237c5:	83 c4 1c             	add    $0x1c,%esp
f01237c8:	5b                   	pop    %ebx
f01237c9:	5e                   	pop    %esi
f01237ca:	5f                   	pop    %edi
f01237cb:	5d                   	pop    %ebp
f01237cc:	c3                   	ret    
f01237cd:	8d 76 00             	lea    0x0(%esi),%esi
f01237d0:	2b 04 24             	sub    (%esp),%eax
f01237d3:	19 fa                	sbb    %edi,%edx
f01237d5:	89 d1                	mov    %edx,%ecx
f01237d7:	89 c6                	mov    %eax,%esi
f01237d9:	e9 71 ff ff ff       	jmp    f012374f <__umoddi3+0xb3>
f01237de:	66 90                	xchg   %ax,%ax
f01237e0:	39 44 24 04          	cmp    %eax,0x4(%esp)
f01237e4:	72 ea                	jb     f01237d0 <__umoddi3+0x134>
f01237e6:	89 d9                	mov    %ebx,%ecx
f01237e8:	e9 62 ff ff ff       	jmp    f012374f <__umoddi3+0xb3>
