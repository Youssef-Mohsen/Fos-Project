
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 90 17 00 	lgdtl  0x179018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

    # Leave a few words on the stack for the user trap frame
	#2024: this line is changed since the trapframe is move to the user kernel stack of each process
	#movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
	movl	$(ptr_stack_top),%esp
f0100033:	bc 00 90 17 f0       	mov    $0xf0179000,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 b0 4f 55 f0 01 	movl   $0x1,0xf0554fb0
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 04 4f 55 f0 01 	movl   $0x1,0xf0554f04
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
//=======================================

//First ever function called in FOS kernel
bool autograde ;
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 28             	sub    $0x28,%esp
	//cprintf("*	1) Global data (BSS) section...");
	{
		// Before doing anything else,
		// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
		// This ensures that all static/global variables start with zero value.
		memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba a8 79 57 f0       	mov    $0xf05779a8,%edx
f010006a:	b8 b2 17 55 f0       	mov    $0xf05517b2,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 b2 17 55 f0       	push   $0xf05517b2
f010007e:	e8 f5 09 02 00       	call   f0120a78 <memset>
f0100083:	83 c4 10             	add    $0x10,%esp
	//cprintf("[DONE]\n");

	{
		// Initialize the console.
		// Can't call cprintf until after we do this!
		cons_init();
f0100086:	e8 8d 0d 00 00       	call   f0100e18 <cons_init>
		//print welcome message
		print_welcome_message();
f010008b:	e8 11 02 00 00       	call   f01002a1 <print_welcome_message>
	}

	cprintf("\n********************************************************************\n");
f0100090:	83 ec 0c             	sub    $0xc,%esp
f0100093:	68 e0 19 12 f0       	push   $0xf01219e0
f0100098:	e8 cf 0e 00 00       	call   f0100f6c <cprintf>
f010009d:	83 c4 10             	add    $0x10,%esp
	cprintf("* INITIALIZATIONS:\n");
f01000a0:	83 ec 0c             	sub    $0xc,%esp
f01000a3:	68 27 1a 12 f0       	push   $0xf0121a27
f01000a8:	e8 bf 0e 00 00       	call   f0100f6c <cprintf>
f01000ad:	83 c4 10             	add    $0x10,%esp
	cprintf("*=================\n");
f01000b0:	83 ec 0c             	sub    $0xc,%esp
f01000b3:	68 3b 1a 12 f0       	push   $0xf0121a3b
f01000b8:	e8 af 0e 00 00       	call   f0100f6c <cprintf>
f01000bd:	83 c4 10             	add    $0x10,%esp

	cprintf("* 1) CPU...");
f01000c0:	83 ec 0c             	sub    $0xc,%esp
f01000c3:	68 4f 1a 12 f0       	push   $0xf0121a4f
f01000c8:	e8 9f 0e 00 00       	call   f0100f6c <cprintf>
f01000cd:	83 c4 10             	add    $0x10,%esp
	{
		//Initialize the Main CPU
		cpu_init(0);
f01000d0:	83 ec 0c             	sub    $0xc,%esp
f01000d3:	6a 00                	push   $0x0
f01000d5:	e8 2d 70 00 00       	call   f0107107 <cpu_init>
f01000da:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("[DONE]\n");
f01000dd:	83 ec 0c             	sub    $0xc,%esp
f01000e0:	68 5b 1a 12 f0       	push   $0xf0121a5b
f01000e5:	e8 82 0e 00 00       	call   f0100f6c <cprintf>
f01000ea:	83 c4 10             	add    $0x10,%esp

	cprintf("* 2) MEMORY:\n");
f01000ed:	83 ec 0c             	sub    $0xc,%esp
f01000f0:	68 63 1a 12 f0       	push   $0xf0121a63
f01000f5:	e8 72 0e 00 00       	call   f0100f6c <cprintf>
f01000fa:	83 c4 10             	add    $0x10,%esp
	{
		// Lab 2 memory management initialization functions
		detect_memory();
f01000fd:	e8 65 79 00 00       	call   f0107a67 <detect_memory>
		initialize_kernel_VM();
f0100102:	e8 13 75 00 00       	call   f010761a <initialize_kernel_VM>
		initialize_paging();
f0100107:	e8 e0 7c 00 00       	call   f0107dec <initialize_paging>
		initialize_kheap_dynamic_allocator(KERNEL_HEAP_START, PAGE_SIZE, KERNEL_HEAP_START + DYN_ALLOC_MAX_SIZE);
#endif
		//	page_check();
		//setPageReplacmentAlgorithmNchanceCLOCK();
		//setPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX);
		setPageReplacmentAlgorithmFIFO();
f010010c:	e8 6d e5 00 00       	call   f010e67e <setPageReplacmentAlgorithmFIFO>
		//setPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX);

		setUHeapPlacementStrategyFIRSTFIT();
f0100111:	e8 39 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
		setKHeapPlacementStrategyFIRSTFIT();
f0100116:	e8 24 ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>

		enableBuffering(0);
f010011b:	83 ec 0c             	sub    $0xc,%esp
f010011e:	6a 00                	push   $0x0
f0100120:	e8 56 e6 00 00       	call   f010e77b <enableBuffering>
f0100125:	83 c4 10             	add    $0x10,%esp
		//enableModifiedBuffer(1) ;
		enableModifiedBuffer(0) ;
f0100128:	83 ec 0c             	sub    $0xc,%esp
f010012b:	6a 00                	push   $0x0
f010012d:	e8 31 e6 00 00       	call   f010e763 <enableModifiedBuffer>
f0100132:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(1000);
f0100135:	83 ec 0c             	sub    $0xc,%esp
f0100138:	68 e8 03 00 00       	push   $0x3e8
f010013d:	e8 51 e6 00 00       	call   f010e793 <setModifiedBufferLength>
f0100142:	83 c4 10             	add    $0x10,%esp

		ide_init();
f0100145:	e8 85 0e 02 00       	call   f0120fcf <ide_init>
	}
	//cprintf("* [DONE]\n");

	cprintf("* 3) USER ENVs...");
f010014a:	83 ec 0c             	sub    $0xc,%esp
f010014d:	68 71 1a 12 f0       	push   $0xf0121a71
f0100152:	e8 15 0e 00 00       	call   f0100f6c <cprintf>
f0100157:	83 c4 10             	add    $0x10,%esp
	{
		// Lab 3 user environment initialization functions
		env_init();
f010015a:	e8 c3 96 00 00       	call   f0109822 <env_init>
		ts_init();
f010015f:	e8 30 bf 00 00       	call   f010c094 <ts_init>
		//2024: removed. called inside cpuinit()
		//idt_init();
	}
	cprintf("[DONE]\n");
f0100164:	83 ec 0c             	sub    $0xc,%esp
f0100167:	68 5b 1a 12 f0       	push   $0xf0121a5b
f010016c:	e8 fb 0d 00 00       	call   f0100f6c <cprintf>
f0100171:	83 c4 10             	add    $0x10,%esp

	cprintf("* 4) PROGRAMMABLE INTERRUPT CONTROLLER:\n");
f0100174:	83 ec 0c             	sub    $0xc,%esp
f0100177:	68 84 1a 12 f0       	push   $0xf0121a84
f010017c:	e8 eb 0d 00 00       	call   f0100f6c <cprintf>
f0100181:	83 c4 10             	add    $0x10,%esp
	{
		pic_init();
f0100184:	e8 6a 6c 00 00       	call   f0106df3 <pic_init>
		cprintf("*	PIC is initialized\n");
f0100189:	83 ec 0c             	sub    $0xc,%esp
f010018c:	68 ad 1a 12 f0       	push   $0xf0121aad
f0100191:	e8 d6 0d 00 00       	call   f0100f6c <cprintf>
f0100196:	83 c4 10             	add    $0x10,%esp
		//Enable Clock Interrupt
		irq_clear_mask(0);
f0100199:	83 ec 0c             	sub    $0xc,%esp
f010019c:	6a 00                	push   $0x0
f010019e:	e8 42 6e 00 00       	call   f0106fe5 <irq_clear_mask>
f01001a3:	83 c4 10             	add    $0x10,%esp
		cprintf("*	IRQ0 (Clock): is Enabled\n");
f01001a6:	83 ec 0c             	sub    $0xc,%esp
f01001a9:	68 c3 1a 12 f0       	push   $0xf0121ac3
f01001ae:	e8 b9 0d 00 00       	call   f0100f6c <cprintf>
f01001b3:	83 c4 10             	add    $0x10,%esp
		//Enable KB Interrupt
		irq_clear_mask(1);
f01001b6:	83 ec 0c             	sub    $0xc,%esp
f01001b9:	6a 01                	push   $0x1
f01001bb:	e8 25 6e 00 00       	call   f0106fe5 <irq_clear_mask>
f01001c0:	83 c4 10             	add    $0x10,%esp
		cprintf("*	IRQ1 (Keyboard): is Enabled\n");
f01001c3:	83 ec 0c             	sub    $0xc,%esp
f01001c6:	68 e0 1a 12 f0       	push   $0xf0121ae0
f01001cb:	e8 9c 0d 00 00       	call   f0100f6c <cprintf>
f01001d0:	83 c4 10             	add    $0x10,%esp
		//Enable COM1 Interrupt
		irq_clear_mask(4);
f01001d3:	83 ec 0c             	sub    $0xc,%esp
f01001d6:	6a 04                	push   $0x4
f01001d8:	e8 08 6e 00 00       	call   f0106fe5 <irq_clear_mask>
f01001dd:	83 c4 10             	add    $0x10,%esp
		cprintf("*	IRQ4 (COM1): is Enabled\n");
f01001e0:	83 ec 0c             	sub    $0xc,%esp
f01001e3:	68 ff 1a 12 f0       	push   $0xf0121aff
f01001e8:	e8 7f 0d 00 00       	call   f0100f6c <cprintf>
f01001ed:	83 c4 10             	add    $0x10,%esp
		//Enable Primary ATA Hard Disk Interrupt
//		irq_clear_mask(14);
//		cprintf("*	IRQ14 (Primary ATA Hard Disk): is Enabled\n");
	}
	cprintf("* 5) SCHEDULER & MULTI-TASKING:\n");
f01001f0:	83 ec 0c             	sub    $0xc,%esp
f01001f3:	68 1c 1b 12 f0       	push   $0xf0121b1c
f01001f8:	e8 6f 0d 00 00       	call   f0100f6c <cprintf>
f01001fd:	83 c4 10             	add    $0x10,%esp
	{
		// Lab 4 multitasking initialization functions
		kclock_init();
f0100200:	e8 c1 49 00 00       	call   f0104bc6 <kclock_init>
		sched_init() ;
f0100205:	e8 44 65 00 00       	call   f010674e <sched_init>
	}
	//cprintf("* [DONE]\n");

	cprintf("* 6) ESP to SCHED KERN STACK:\n");
f010020a:	83 ec 0c             	sub    $0xc,%esp
f010020d:	68 40 1b 12 f0       	push   $0xf0121b40
f0100212:	e8 55 0d 00 00       	call   f0100f6c <cprintf>
f0100217:	83 c4 10             	add    $0x10,%esp

static __inline uint32
read_esp(void)
{
        uint32 esp;
        __asm __volatile("movl %%esp,%0" : "=r" (esp));
f010021a:	89 e0                	mov    %esp,%eax
f010021c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        return esp;
f010021f:	8b 45 e8             	mov    -0x18(%ebp),%eax
	{
		//Relocate SP to its corresponding location in the specific stack area below KERN_BASE (SCHD_KERN_STACK_TOP)
		uint32 old_sp = read_esp();
f0100222:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32 sp_offset = (uint32)ptr_stack_top - old_sp ;
f0100225:	b8 00 90 17 f0       	mov    $0xf0179000,%eax
f010022a:	2b 45 f4             	sub    -0xc(%ebp),%eax
f010022d:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 new_sp = KERN_STACK_TOP - sp_offset;
f0100230:	b8 00 00 c0 ef       	mov    $0xefc00000,%eax
f0100235:	2b 45 f0             	sub    -0x10(%ebp),%eax
f0100238:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010023b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010023e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
}

static __inline void
write_esp(uint32 esp)
{
	__asm __volatile("movl %0,%%esp" : : "r" (esp) );
f0100241:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100244:	89 c4                	mov    %eax,%esp

static __inline uint32
read_esp(void)
{
        uint32 esp;
        __asm __volatile("movl %%esp,%0" : "=r" (esp));
f0100246:	89 e0                	mov    %esp,%eax
f0100248:	89 45 e0             	mov    %eax,-0x20(%ebp)
        return esp;
f010024b:	8b 45 e0             	mov    -0x20(%ebp),%eax
		write_esp(new_sp);
		cprintf("*	old SP = %x - updated SP = %x\n", old_sp, read_esp());
f010024e:	83 ec 04             	sub    $0x4,%esp
f0100251:	50                   	push   %eax
f0100252:	ff 75 f4             	pushl  -0xc(%ebp)
f0100255:	68 60 1b 12 f0       	push   $0xf0121b60
f010025a:	e8 0d 0d 00 00       	call   f0100f6c <cprintf>
f010025f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("********************************************************************\n");
f0100262:	83 ec 0c             	sub    $0xc,%esp
f0100265:	68 84 1b 12 f0       	push   $0xf0121b84
f010026a:	e8 fd 0c 00 00       	call   f0100f6c <cprintf>
f010026f:	83 c4 10             	add    $0x10,%esp

	// start the kernel command prompt.
	autograde = 0;
f0100272:	c7 05 dc 51 55 f0 00 	movl   $0x0,0xf05551dc
f0100279:	00 00 00 
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f010027c:	83 ec 0c             	sub    $0xc,%esp
f010027f:	68 cc 1b 12 f0       	push   $0xf0121bcc
f0100284:	e8 e3 0c 00 00       	call   f0100f6c <cprintf>
f0100289:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f010028c:	83 ec 0c             	sub    $0xc,%esp
f010028f:	68 f8 1b 12 f0       	push   $0xf0121bf8
f0100294:	e8 d3 0c 00 00       	call   f0100f6c <cprintf>
f0100299:	83 c4 10             	add    $0x10,%esp
		get_into_prompt();
f010029c:	e8 02 1b 00 00       	call   f0101da3 <get_into_prompt>

f01002a1 <print_welcome_message>:
	}
}


void print_welcome_message()
{
f01002a1:	55                   	push   %ebp
f01002a2:	89 e5                	mov    %esp,%ebp
f01002a4:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f01002a7:	83 ec 0c             	sub    $0xc,%esp
f01002aa:	68 1d 1c 12 f0       	push   $0xf0121c1d
f01002af:	e8 b8 0c 00 00       	call   f0100f6c <cprintf>
f01002b4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01002b7:	83 ec 0c             	sub    $0xc,%esp
f01002ba:	68 24 1c 12 f0       	push   $0xf0121c24
f01002bf:	e8 a8 0c 00 00       	call   f0100f6c <cprintf>
f01002c4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01002c7:	83 ec 0c             	sub    $0xc,%esp
f01002ca:	68 6c 1c 12 f0       	push   $0xf0121c6c
f01002cf:	e8 98 0c 00 00       	call   f0100f6c <cprintf>
f01002d4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f01002d7:	83 ec 0c             	sub    $0xc,%esp
f01002da:	68 b4 1c 12 f0       	push   $0xf0121cb4
f01002df:	e8 88 0c 00 00       	call   f0100f6c <cprintf>
f01002e4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f01002e7:	83 ec 0c             	sub    $0xc,%esp
f01002ea:	68 6c 1c 12 f0       	push   $0xf0121c6c
f01002ef:	e8 78 0c 00 00       	call   f0100f6c <cprintf>
f01002f4:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f01002f7:	83 ec 0c             	sub    $0xc,%esp
f01002fa:	68 24 1c 12 f0       	push   $0xf0121c24
f01002ff:	e8 68 0c 00 00       	call   f0100f6c <cprintf>
f0100304:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f0100307:	83 ec 0c             	sub    $0xc,%esp
f010030a:	68 f9 1c 12 f0       	push   $0xf0121cf9
f010030f:	e8 58 0c 00 00       	call   f0100f6c <cprintf>
f0100314:	83 c4 10             	add    $0x10,%esp
}
f0100317:	90                   	nop
f0100318:	c9                   	leave  
f0100319:	c3                   	ret    

f010031a <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f010031a:	55                   	push   %ebp
f010031b:	89 e5                	mov    %esp,%ebp
f010031d:	83 ec 18             	sub    $0x18,%esp
	struct Env* cur_env = get_cpu_proc();
f0100320:	e8 4b a4 00 00       	call   f010a770 <get_cpu_proc>
f0100325:	89 45 f4             	mov    %eax,-0xc(%ebp)

	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100328:	8b 45 10             	mov    0x10(%ebp),%eax
f010032b:	a3 c0 17 55 f0       	mov    %eax,0xf05517c0

	va_start(ap, fmt);
f0100330:	8d 45 10             	lea    0x10(%ebp),%eax
f0100333:	83 c0 04             	add    $0x4,%eax
f0100336:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\nkernel [EVAL_FINAL]panic at %s:%d: ", file, line);
f0100339:	83 ec 04             	sub    $0x4,%esp
f010033c:	ff 75 0c             	pushl  0xc(%ebp)
f010033f:	ff 75 08             	pushl  0x8(%ebp)
f0100342:	68 00 1d 12 f0       	push   $0xf0121d00
f0100347:	e8 20 0c 00 00       	call   f0100f6c <cprintf>
f010034c:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f010034f:	8b 45 10             	mov    0x10(%ebp),%eax
f0100352:	83 ec 08             	sub    $0x8,%esp
f0100355:	ff 75 f0             	pushl  -0x10(%ebp)
f0100358:	50                   	push   %eax
f0100359:	e8 e5 0b 00 00       	call   f0100f43 <vcprintf>
f010035e:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100361:	83 ec 0c             	sub    $0xc,%esp
f0100364:	68 25 1d 12 f0       	push   $0xf0121d25
f0100369:	e8 fe 0b 00 00       	call   f0100f6c <cprintf>
f010036e:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (cur_env != NULL && cur_env->env_status == ENV_RUNNING)
f0100371:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100375:	74 10                	je     f0100387 <_panic+0x6d>
f0100377:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010037a:	8b 40 18             	mov    0x18(%eax),%eax
f010037d:	83 f8 02             	cmp    $0x2,%eax
f0100380:	75 05                	jne    f0100387 <_panic+0x6d>
	{
		//cprintf("\n>>>>>>>>>>> exiting the cur env<<<<<<<<<<<<\n");
		//Place the running env into the exit queue then switch to the scheduler
		env_exit(); //env_exit --> sched_exit_env --> sched --> context_switch into fos_scheduler
f0100382:	e8 a7 a3 00 00       	call   f010a72e <env_exit>

static __inline uint32
read_esp(void)
{
        uint32 esp;
        __asm __volatile("movl %%esp,%0" : "=r" (esp));
f0100387:	89 e0                	mov    %esp,%eax
f0100389:	89 45 e8             	mov    %eax,-0x18(%ebp)
        return esp;
f010038c:	8b 45 e8             	mov    -0x18(%ebp),%eax
	}
	//else //2024: panic from Kernel and no current running env
	{
		char* esp = (char*)read_esp();
f010038f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		cprintf("esp = %x\n", esp);
f0100392:	83 ec 08             	sub    $0x8,%esp
f0100395:	ff 75 ec             	pushl  -0x14(%ebp)
f0100398:	68 27 1d 12 f0       	push   $0xf0121d27
f010039d:	e8 ca 0b 00 00       	call   f0100f6c <cprintf>
f01003a2:	83 c4 10             	add    $0x10,%esp
		get_into_prompt();
f01003a5:	e8 f9 19 00 00       	call   f0101da3 <get_into_prompt>

f01003aa <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f01003aa:	55                   	push   %ebp
f01003ab:	89 e5                	mov    %esp,%ebp
f01003ad:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01003b0:	8b 45 10             	mov    0x10(%ebp),%eax
f01003b3:	a3 c0 17 55 f0       	mov    %eax,0xf05517c0

	va_start(ap, fmt);
f01003b8:	8d 45 10             	lea    0x10(%ebp),%eax
f01003bb:	83 c0 04             	add    $0x4,%eax
f01003be:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01003c1:	83 ec 04             	sub    $0x4,%esp
f01003c4:	ff 75 0c             	pushl  0xc(%ebp)
f01003c7:	ff 75 08             	pushl  0x8(%ebp)
f01003ca:	68 31 1d 12 f0       	push   $0xf0121d31
f01003cf:	e8 98 0b 00 00       	call   f0100f6c <cprintf>
f01003d4:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01003d7:	8b 45 10             	mov    0x10(%ebp),%eax
f01003da:	83 ec 08             	sub    $0x8,%esp
f01003dd:	ff 75 f4             	pushl  -0xc(%ebp)
f01003e0:	50                   	push   %eax
f01003e1:	e8 5d 0b 00 00       	call   f0100f43 <vcprintf>
f01003e6:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01003e9:	83 ec 0c             	sub    $0xc,%esp
f01003ec:	68 25 1d 12 f0       	push   $0xf0121d25
f01003f1:	e8 76 0b 00 00       	call   f0100f6c <cprintf>
f01003f6:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the command prompt */
	pushcli();
f01003f9:	e8 c2 6d 00 00       	call   f01071c0 <pushcli>
	struct cpu *c = mycpu();
f01003fe:	e8 fa 6c 00 00       	call   f01070fd <mycpu>
f0100403:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int sched_stat = c->scheduler_status;
f0100406:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100409:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
f010040f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	popcli();
f0100412:	e8 fb 6d 00 00       	call   f0107212 <popcli>
	/*2022*///Check if the scheduler is successfully initialized or not
	if (sched_stat != SCH_UNINITIALIZED)
f0100417:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
f010041b:	74 23                	je     f0100440 <_panic_all+0x96>
	{
		//exit all ready env's
		sched_exit_all_ready_envs();
f010041d:	e8 b2 60 00 00       	call   f01064d4 <sched_exit_all_ready_envs>
		struct Env* cur_env = get_cpu_proc();
f0100422:	e8 49 a3 00 00       	call   f010a770 <get_cpu_proc>
f0100427:	89 45 e8             	mov    %eax,-0x18(%ebp)
		if (cur_env != NULL && cur_env->env_status == ENV_RUNNING)
f010042a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010042e:	74 10                	je     f0100440 <_panic_all+0x96>
f0100430:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100433:	8b 40 18             	mov    0x18(%eax),%eax
f0100436:	83 f8 02             	cmp    $0x2,%eax
f0100439:	75 05                	jne    f0100440 <_panic_all+0x96>
		{
			//cprintf("exit curenv...........\n");
			//Place the running env into the exit queue then switch to the scheduler
			env_exit(); //env_exit --> sched_exit_env --> sched --> context_switch into fos_scheduler
f010043b:	e8 ee a2 00 00       	call   f010a72e <env_exit>
		}
	}
	//else //2024: panic from Kernel and no current running env
	{
		get_into_prompt();
f0100440:	e8 5e 19 00 00       	call   f0101da3 <get_into_prompt>

f0100445 <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f0100445:	55                   	push   %ebp
f0100446:	89 e5                	mov    %esp,%ebp
f0100448:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010044b:	8b 45 10             	mov    0x10(%ebp),%eax
f010044e:	a3 c0 17 55 f0       	mov    %eax,0xf05517c0

	va_start(ap, fmt);
f0100453:	8d 45 10             	lea    0x10(%ebp),%eax
f0100456:	83 c0 04             	add    $0x4,%eax
f0100459:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010045c:	83 ec 04             	sub    $0x4,%esp
f010045f:	ff 75 0c             	pushl  0xc(%ebp)
f0100462:	ff 75 08             	pushl  0x8(%ebp)
f0100465:	68 31 1d 12 f0       	push   $0xf0121d31
f010046a:	e8 fd 0a 00 00       	call   f0100f6c <cprintf>
f010046f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100472:	8b 45 10             	mov    0x10(%ebp),%eax
f0100475:	83 ec 08             	sub    $0x8,%esp
f0100478:	ff 75 f4             	pushl  -0xc(%ebp)
f010047b:	50                   	push   %eax
f010047c:	e8 c2 0a 00 00       	call   f0100f43 <vcprintf>
f0100481:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100484:	83 ec 0c             	sub    $0xc,%esp
f0100487:	68 25 1d 12 f0       	push   $0xf0121d25
f010048c:	e8 db 0a 00 00       	call   f0100f6c <cprintf>
f0100491:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

//	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	struct Env* cur_env = get_cpu_proc();
f0100494:	e8 d7 a2 00 00       	call   f010a770 <get_cpu_proc>
f0100499:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (cur_env != NULL && cur_env->env_status == ENV_RUNNING)
f010049c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01004a0:	74 10                	je     f01004b2 <_panic_into_prompt+0x6d>
f01004a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01004a5:	8b 40 18             	mov    0x18(%eax),%eax
f01004a8:	83 f8 02             	cmp    $0x2,%eax
f01004ab:	75 05                	jne    f01004b2 <_panic_into_prompt+0x6d>
	{
		//Place the running env into the exit queue then switch to the scheduler
		env_exit(); //env_exit --> sched_exit_env --> sched --> context_switch into fos_scheduler
f01004ad:	e8 7c a2 00 00       	call   f010a72e <env_exit>
	}

	get_into_prompt();
f01004b2:	e8 ec 18 00 00       	call   f0101da3 <get_into_prompt>

f01004b7 <_warn>:
}


/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f01004b7:	55                   	push   %ebp
f01004b8:	89 e5                	mov    %esp,%ebp
f01004ba:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f01004bd:	8d 45 10             	lea    0x10(%ebp),%eax
f01004c0:	83 c0 04             	add    $0x4,%eax
f01004c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f01004c6:	83 ec 04             	sub    $0x4,%esp
f01004c9:	ff 75 0c             	pushl  0xc(%ebp)
f01004cc:	ff 75 08             	pushl  0x8(%ebp)
f01004cf:	68 4a 1d 12 f0       	push   $0xf0121d4a
f01004d4:	e8 93 0a 00 00       	call   f0100f6c <cprintf>
f01004d9:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01004dc:	8b 45 10             	mov    0x10(%ebp),%eax
f01004df:	83 ec 08             	sub    $0x8,%esp
f01004e2:	ff 75 f4             	pushl  -0xc(%ebp)
f01004e5:	50                   	push   %eax
f01004e6:	e8 58 0a 00 00       	call   f0100f43 <vcprintf>
f01004eb:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01004ee:	83 ec 0c             	sub    $0xc,%esp
f01004f1:	68 25 1d 12 f0       	push   $0xf0121d25
f01004f6:	e8 71 0a 00 00       	call   f0100f6c <cprintf>
f01004fb:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f01004fe:	90                   	nop
f01004ff:	c9                   	leave  
f0100500:	c3                   	ret    

f0100501 <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f0100501:	55                   	push   %ebp
f0100502:	89 e5                	mov    %esp,%ebp
f0100504:	83 ec 10             	sub    $0x10,%esp
f0100507:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010050e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0100511:	89 c2                	mov    %eax,%edx
f0100513:	ec                   	in     (%dx),%al
f0100514:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100517:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f010051a:	0f b6 c0             	movzbl %al,%eax
f010051d:	83 e0 01             	and    $0x1,%eax
f0100520:	85 c0                	test   %eax,%eax
f0100522:	75 07                	jne    f010052b <serial_proc_data+0x2a>
		return -1;
f0100524:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100529:	eb 16                	jmp    f0100541 <serial_proc_data+0x40>
f010052b:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100532:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100535:	89 c2                	mov    %eax,%edx
f0100537:	ec                   	in     (%dx),%al
f0100538:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f010053b:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f010053e:	0f b6 c0             	movzbl %al,%eax
}
f0100541:	c9                   	leave  
f0100542:	c3                   	ret    

f0100543 <serial_intr>:

void
serial_intr(void)
{
f0100543:	55                   	push   %ebp
f0100544:	89 e5                	mov    %esp,%ebp
f0100546:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f0100549:	a1 e4 17 55 f0       	mov    0xf05517e4,%eax
f010054e:	85 c0                	test   %eax,%eax
f0100550:	74 10                	je     f0100562 <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f0100552:	83 ec 0c             	sub    $0xc,%esp
f0100555:	68 01 05 10 f0       	push   $0xf0100501
f010055a:	e8 9d 07 00 00       	call   f0100cfc <cons_intr>
f010055f:	83 c4 10             	add    $0x10,%esp
}
f0100562:	90                   	nop
f0100563:	c9                   	leave  
f0100564:	c3                   	ret    

f0100565 <serial_interrupt_handler>:

void serial_interrupt_handler(struct Trapframe* tf)
{
f0100565:	55                   	push   %ebp
f0100566:	89 e5                	mov    %esp,%ebp
f0100568:	83 ec 08             	sub    $0x8,%esp
	cprintf("\nserial interrupt\n");
f010056b:	83 ec 0c             	sub    $0xc,%esp
f010056e:	68 68 1d 12 f0       	push   $0xf0121d68
f0100573:	e8 f4 09 00 00       	call   f0100f6c <cprintf>
f0100578:	83 c4 10             	add    $0x10,%esp
	serial_intr();
f010057b:	e8 c3 ff ff ff       	call   f0100543 <serial_intr>
}
f0100580:	90                   	nop
f0100581:	c9                   	leave  
f0100582:	c3                   	ret    

f0100583 <serial_init>:

void
serial_init(void)
{
f0100583:	55                   	push   %ebp
f0100584:	89 e5                	mov    %esp,%ebp
f0100586:	83 ec 48             	sub    $0x48,%esp
f0100589:	c7 45 f4 fa 03 00 00 	movl   $0x3fa,-0xc(%ebp)
f0100590:	c6 45 c6 00          	movb   $0x0,-0x3a(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100594:	8a 45 c6             	mov    -0x3a(%ebp),%al
f0100597:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010059a:	ee                   	out    %al,(%dx)
f010059b:	c7 45 f0 fb 03 00 00 	movl   $0x3fb,-0x10(%ebp)
f01005a2:	c6 45 c7 80          	movb   $0x80,-0x39(%ebp)
f01005a6:	8a 45 c7             	mov    -0x39(%ebp),%al
f01005a9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01005ac:	ee                   	out    %al,(%dx)
f01005ad:	c7 45 ec f8 03 00 00 	movl   $0x3f8,-0x14(%ebp)
f01005b4:	c6 45 c8 0c          	movb   $0xc,-0x38(%ebp)
f01005b8:	8a 45 c8             	mov    -0x38(%ebp),%al
f01005bb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01005be:	ee                   	out    %al,(%dx)
f01005bf:	c7 45 e8 f9 03 00 00 	movl   $0x3f9,-0x18(%ebp)
f01005c6:	c6 45 c9 00          	movb   $0x0,-0x37(%ebp)
f01005ca:	8a 45 c9             	mov    -0x37(%ebp),%al
f01005cd:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01005d0:	ee                   	out    %al,(%dx)
f01005d1:	c7 45 e4 fb 03 00 00 	movl   $0x3fb,-0x1c(%ebp)
f01005d8:	c6 45 ca 03          	movb   $0x3,-0x36(%ebp)
f01005dc:	8a 45 ca             	mov    -0x36(%ebp),%al
f01005df:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01005e2:	ee                   	out    %al,(%dx)
f01005e3:	c7 45 e0 fc 03 00 00 	movl   $0x3fc,-0x20(%ebp)
f01005ea:	c6 45 cb 00          	movb   $0x0,-0x35(%ebp)
f01005ee:	8a 45 cb             	mov    -0x35(%ebp),%al
f01005f1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01005f4:	ee                   	out    %al,(%dx)
f01005f5:	c7 45 dc f9 03 00 00 	movl   $0x3f9,-0x24(%ebp)
f01005fc:	c6 45 cc 01          	movb   $0x1,-0x34(%ebp)
f0100600:	8a 45 cc             	mov    -0x34(%ebp),%al
f0100603:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0100606:	ee                   	out    %al,(%dx)
f0100607:	c7 45 d8 fd 03 00 00 	movl   $0x3fd,-0x28(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010060e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0100611:	89 c2                	mov    %eax,%edx
f0100613:	ec                   	in     (%dx),%al
f0100614:	88 45 cd             	mov    %al,-0x33(%ebp)
	return data;
f0100617:	8a 45 cd             	mov    -0x33(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f010061a:	3c ff                	cmp    $0xff,%al
f010061c:	0f 95 c0             	setne  %al
f010061f:	0f b6 c0             	movzbl %al,%eax
f0100622:	a3 e4 17 55 f0       	mov    %eax,0xf05517e4
f0100627:	c7 45 d4 fa 03 00 00 	movl   $0x3fa,-0x2c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010062e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0100631:	89 c2                	mov    %eax,%edx
f0100633:	ec                   	in     (%dx),%al
f0100634:	88 45 ce             	mov    %al,-0x32(%ebp)
f0100637:	c7 45 d0 f8 03 00 00 	movl   $0x3f8,-0x30(%ebp)
f010063e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0100641:	89 c2                	mov    %eax,%edx
f0100643:	ec                   	in     (%dx),%al
f0100644:	88 45 cf             	mov    %al,-0x31(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

	irq_install_handler(4, &serial_interrupt_handler);
f0100647:	83 ec 08             	sub    $0x8,%esp
f010064a:	68 65 05 10 f0       	push   $0xf0100565
f010064f:	6a 04                	push   $0x4
f0100651:	e8 42 cd 00 00       	call   f010d398 <irq_install_handler>
f0100656:	83 c4 10             	add    $0x10,%esp

}
f0100659:	90                   	nop
f010065a:	c9                   	leave  
f010065b:	c3                   	ret    

f010065c <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f010065c:	55                   	push   %ebp
f010065d:	89 e5                	mov    %esp,%ebp
f010065f:	83 ec 20             	sub    $0x20,%esp
f0100662:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f0100669:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010066c:	89 c2                	mov    %eax,%edx
f010066e:	ec                   	in     (%dx),%al
f010066f:	88 45 ec             	mov    %al,-0x14(%ebp)
f0100672:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f0100679:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010067c:	89 c2                	mov    %eax,%edx
f010067e:	ec                   	in     (%dx),%al
f010067f:	88 45 ed             	mov    %al,-0x13(%ebp)
f0100682:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f0100689:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010068c:	89 c2                	mov    %eax,%edx
f010068e:	ec                   	in     (%dx),%al
f010068f:	88 45 ee             	mov    %al,-0x12(%ebp)
f0100692:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f0100699:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010069c:	89 c2                	mov    %eax,%edx
f010069e:	ec                   	in     (%dx),%al
f010069f:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01006a2:	90                   	nop
f01006a3:	c9                   	leave  
f01006a4:	c3                   	ret    

f01006a5 <lpt_putc>:

static void
lpt_putc(int c)
{
f01006a5:	55                   	push   %ebp
f01006a6:	89 e5                	mov    %esp,%ebp
f01006a8:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01006ab:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01006b2:	eb 08                	jmp    f01006bc <lpt_putc+0x17>
		delay();
f01006b4:	e8 a3 ff ff ff       	call   f010065c <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01006b9:	ff 45 fc             	incl   -0x4(%ebp)
f01006bc:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f01006c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01006c6:	89 c2                	mov    %eax,%edx
f01006c8:	ec                   	in     (%dx),%al
f01006c9:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f01006cc:	8a 45 eb             	mov    -0x15(%ebp),%al
f01006cf:	84 c0                	test   %al,%al
f01006d1:	78 09                	js     f01006dc <lpt_putc+0x37>
f01006d3:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f01006da:	7e d8                	jle    f01006b4 <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f01006dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01006df:	0f b6 c0             	movzbl %al,%eax
f01006e2:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f01006e9:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01006ec:	8a 45 e8             	mov    -0x18(%ebp),%al
f01006ef:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01006f2:	ee                   	out    %al,(%dx)
f01006f3:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f01006fa:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f01006fe:	8a 45 e9             	mov    -0x17(%ebp),%al
f0100701:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100704:	ee                   	out    %al,(%dx)
f0100705:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f010070c:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f0100710:	8a 45 ea             	mov    -0x16(%ebp),%al
f0100713:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100716:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100717:	90                   	nop
f0100718:	c9                   	leave  
f0100719:	c3                   	ret    

f010071a <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f010071a:	55                   	push   %ebp
f010071b:	89 e5                	mov    %esp,%ebp
f010071d:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f0100720:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100727:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010072a:	66 8b 00             	mov    (%eax),%ax
f010072d:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f0100731:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100734:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100739:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010073c:	66 8b 00             	mov    (%eax),%ax
f010073f:	66 3d 5a a5          	cmp    $0xa55a,%ax
f0100743:	74 13                	je     f0100758 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100745:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f010074c:	c7 05 e8 17 55 f0 b4 	movl   $0x3b4,0xf05517e8
f0100753:	03 00 00 
f0100756:	eb 14                	jmp    f010076c <cga_init+0x52>
	} else {
		*cp = was;
f0100758:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010075b:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f010075f:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f0100762:	c7 05 e8 17 55 f0 d4 	movl   $0x3d4,0xf05517e8
f0100769:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f010076c:	a1 e8 17 55 f0       	mov    0xf05517e8,%eax
f0100771:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100774:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f0100778:	8a 45 e0             	mov    -0x20(%ebp),%al
f010077b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010077e:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f010077f:	a1 e8 17 55 f0       	mov    0xf05517e8,%eax
f0100784:	40                   	inc    %eax
f0100785:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100788:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010078b:	89 c2                	mov    %eax,%edx
f010078d:	ec                   	in     (%dx),%al
f010078e:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f0100791:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100794:	0f b6 c0             	movzbl %al,%eax
f0100797:	c1 e0 08             	shl    $0x8,%eax
f010079a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f010079d:	a1 e8 17 55 f0       	mov    0xf05517e8,%eax
f01007a2:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01007a5:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01007a9:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01007ac:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01007af:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01007b0:	a1 e8 17 55 f0       	mov    0xf05517e8,%eax
f01007b5:	40                   	inc    %eax
f01007b6:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01007b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01007bc:	89 c2                	mov    %eax,%edx
f01007be:	ec                   	in     (%dx),%al
f01007bf:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f01007c2:	8a 45 e3             	mov    -0x1d(%ebp),%al
f01007c5:	0f b6 c0             	movzbl %al,%eax
f01007c8:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f01007cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01007ce:	a3 ec 17 55 f0       	mov    %eax,0xf05517ec
	crt_pos = pos;
f01007d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01007d6:	66 a3 f0 17 55 f0    	mov    %ax,0xf05517f0
}
f01007dc:	90                   	nop
f01007dd:	c9                   	leave  
f01007de:	c3                   	ret    

f01007df <cga_putc>:
//2016: Preliminary backward and forward cursor movement was added to FOS
// 		Thanks to student Abdullah Mohammad Ma3en, 3rd year, and TA Ghada Hamed.

void
cga_putc(int c)
{
f01007df:	55                   	push   %ebp
f01007e0:	89 e5                	mov    %esp,%ebp
f01007e2:	53                   	push   %ebx
f01007e3:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f01007e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01007e9:	b0 00                	mov    $0x0,%al
f01007eb:	85 c0                	test   %eax,%eax
f01007ed:	75 07                	jne    f01007f6 <cga_putc+0x17>
		c |= 0x0700;
f01007ef:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f01007f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01007f9:	0f b6 c0             	movzbl %al,%eax
f01007fc:	83 f8 0a             	cmp    $0xa,%eax
f01007ff:	74 77                	je     f0100878 <cga_putc+0x99>
f0100801:	83 f8 0a             	cmp    $0xa,%eax
f0100804:	7f 13                	jg     f0100819 <cga_putc+0x3a>
f0100806:	83 f8 08             	cmp    $0x8,%eax
f0100809:	74 2e                	je     f0100839 <cga_putc+0x5a>
f010080b:	83 f8 09             	cmp    $0x9,%eax
f010080e:	0f 84 a8 00 00 00    	je     f01008bc <cga_putc+0xdd>
f0100814:	e9 22 01 00 00       	jmp    f010093b <cga_putc+0x15c>
f0100819:	3d e4 00 00 00       	cmp    $0xe4,%eax
f010081e:	0f 84 de 00 00 00    	je     f0100902 <cga_putc+0x123>
f0100824:	3d e5 00 00 00       	cmp    $0xe5,%eax
f0100829:	0f 84 f1 00 00 00    	je     f0100920 <cga_putc+0x141>
f010082f:	83 f8 0d             	cmp    $0xd,%eax
f0100832:	74 5d                	je     f0100891 <cga_putc+0xb2>
f0100834:	e9 02 01 00 00       	jmp    f010093b <cga_putc+0x15c>
	case '\b':
		if (crt_pos > 0) {
f0100839:	66 a1 f0 17 55 f0    	mov    0xf05517f0,%ax
f010083f:	66 85 c0             	test   %ax,%ax
f0100842:	0f 84 4f 01 00 00    	je     f0100997 <cga_putc+0x1b8>
			crt_pos--;
f0100848:	66 a1 f0 17 55 f0    	mov    0xf05517f0,%ax
f010084e:	48                   	dec    %eax
f010084f:	66 a3 f0 17 55 f0    	mov    %ax,0xf05517f0
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f0100855:	8b 15 ec 17 55 f0    	mov    0xf05517ec,%edx
f010085b:	66 a1 f0 17 55 f0    	mov    0xf05517f0,%ax
f0100861:	0f b7 c0             	movzwl %ax,%eax
f0100864:	01 c0                	add    %eax,%eax
f0100866:	01 c2                	add    %eax,%edx
f0100868:	8b 45 08             	mov    0x8(%ebp),%eax
f010086b:	b0 00                	mov    $0x0,%al
f010086d:	83 c8 20             	or     $0x20,%eax
f0100870:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f0100873:	e9 1f 01 00 00       	jmp    f0100997 <cga_putc+0x1b8>
	case '\n':
		crt_pos += CRT_COLS;
f0100878:	66 a1 f0 17 55 f0    	mov    0xf05517f0,%ax
f010087e:	83 c0 50             	add    $0x50,%eax
f0100881:	66 a3 f0 17 55 f0    	mov    %ax,0xf05517f0
		text_length = 0;
f0100887:	c7 05 e0 17 55 f0 00 	movl   $0x0,0xf05517e0
f010088e:	00 00 00 
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f0100891:	66 8b 0d f0 17 55 f0 	mov    0xf05517f0,%cx
f0100898:	66 a1 f0 17 55 f0    	mov    0xf05517f0,%ax
f010089e:	bb 50 00 00 00       	mov    $0x50,%ebx
f01008a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01008a8:	66 f7 f3             	div    %bx
f01008ab:	89 d0                	mov    %edx,%eax
f01008ad:	29 c1                	sub    %eax,%ecx
f01008af:	89 c8                	mov    %ecx,%eax
f01008b1:	66 a3 f0 17 55 f0    	mov    %ax,0xf05517f0
		break;
f01008b7:	e9 e5 00 00 00       	jmp    f01009a1 <cga_putc+0x1c2>
	case '\t':
		cons_putc(' ');
f01008bc:	83 ec 0c             	sub    $0xc,%esp
f01008bf:	6a 20                	push   $0x20
f01008c1:	e8 30 05 00 00       	call   f0100df6 <cons_putc>
f01008c6:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01008c9:	83 ec 0c             	sub    $0xc,%esp
f01008cc:	6a 20                	push   $0x20
f01008ce:	e8 23 05 00 00       	call   f0100df6 <cons_putc>
f01008d3:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01008d6:	83 ec 0c             	sub    $0xc,%esp
f01008d9:	6a 20                	push   $0x20
f01008db:	e8 16 05 00 00       	call   f0100df6 <cons_putc>
f01008e0:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01008e3:	83 ec 0c             	sub    $0xc,%esp
f01008e6:	6a 20                	push   $0x20
f01008e8:	e8 09 05 00 00       	call   f0100df6 <cons_putc>
f01008ed:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01008f0:	83 ec 0c             	sub    $0xc,%esp
f01008f3:	6a 20                	push   $0x20
f01008f5:	e8 fc 04 00 00       	call   f0100df6 <cons_putc>
f01008fa:	83 c4 10             	add    $0x10,%esp
		break;
f01008fd:	e9 9f 00 00 00       	jmp    f01009a1 <cga_putc+0x1c2>
	case 228:
		if(crt_pos>0)
f0100902:	66 a1 f0 17 55 f0    	mov    0xf05517f0,%ax
f0100908:	66 85 c0             	test   %ax,%ax
f010090b:	0f 84 89 00 00 00    	je     f010099a <cga_putc+0x1bb>
			crt_pos--;
f0100911:	66 a1 f0 17 55 f0    	mov    0xf05517f0,%ax
f0100917:	48                   	dec    %eax
f0100918:	66 a3 f0 17 55 f0    	mov    %ax,0xf05517f0
		break;
f010091e:	eb 7a                	jmp    f010099a <cga_putc+0x1bb>
	case 229:
		if (crt_pos < CRT_SIZE)
f0100920:	66 a1 f0 17 55 f0    	mov    0xf05517f0,%ax
f0100926:	66 3d cf 07          	cmp    $0x7cf,%ax
f010092a:	77 71                	ja     f010099d <cga_putc+0x1be>
			crt_pos++;
f010092c:	66 a1 f0 17 55 f0    	mov    0xf05517f0,%ax
f0100932:	40                   	inc    %eax
f0100933:	66 a3 f0 17 55 f0    	mov    %ax,0xf05517f0
		break;
f0100939:	eb 62                	jmp    f010099d <cga_putc+0x1be>
	default: {
		if (c != KEY_LF && c != KEY_RT) {
f010093b:	81 7d 08 e4 00 00 00 	cmpl   $0xe4,0x8(%ebp)
f0100942:	74 5c                	je     f01009a0 <cga_putc+0x1c1>
f0100944:	81 7d 08 e5 00 00 00 	cmpl   $0xe5,0x8(%ebp)
f010094b:	74 53                	je     f01009a0 <cga_putc+0x1c1>
			crt_buf[crt_pos++] = c;		/* write the character */
f010094d:	8b 0d ec 17 55 f0    	mov    0xf05517ec,%ecx
f0100953:	66 a1 f0 17 55 f0    	mov    0xf05517f0,%ax
f0100959:	8d 50 01             	lea    0x1(%eax),%edx
f010095c:	66 89 15 f0 17 55 f0 	mov    %dx,0xf05517f0
f0100963:	0f b7 c0             	movzwl %ax,%eax
f0100966:	01 c0                	add    %eax,%eax
f0100968:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f010096b:	8b 45 08             	mov    0x8(%ebp),%eax
f010096e:	66 89 02             	mov    %ax,(%edx)
			if (crt_pos > 1920 + text_length)
f0100971:	66 a1 f0 17 55 f0    	mov    0xf05517f0,%ax
f0100977:	0f b7 c0             	movzwl %ax,%eax
f010097a:	8b 15 e0 17 55 f0    	mov    0xf05517e0,%edx
f0100980:	81 c2 80 07 00 00    	add    $0x780,%edx
f0100986:	39 d0                	cmp    %edx,%eax
f0100988:	7e 16                	jle    f01009a0 <cga_putc+0x1c1>
				text_length++;
f010098a:	a1 e0 17 55 f0       	mov    0xf05517e0,%eax
f010098f:	40                   	inc    %eax
f0100990:	a3 e0 17 55 f0       	mov    %eax,0xf05517e0
		}
		break;
f0100995:	eb 09                	jmp    f01009a0 <cga_putc+0x1c1>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f0100997:	90                   	nop
f0100998:	eb 07                	jmp    f01009a1 <cga_putc+0x1c2>
		cons_putc(' ');
		break;
	case 228:
		if(crt_pos>0)
			crt_pos--;
		break;
f010099a:	90                   	nop
f010099b:	eb 04                	jmp    f01009a1 <cga_putc+0x1c2>
	case 229:
		if (crt_pos < CRT_SIZE)
			crt_pos++;
		break;
f010099d:	90                   	nop
f010099e:	eb 01                	jmp    f01009a1 <cga_putc+0x1c2>
		if (c != KEY_LF && c != KEY_RT) {
			crt_buf[crt_pos++] = c;		/* write the character */
			if (crt_pos > 1920 + text_length)
				text_length++;
		}
		break;
f01009a0:	90                   	nop
	}
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f01009a1:	66 a1 f0 17 55 f0    	mov    0xf05517f0,%ax
f01009a7:	66 3d cf 07          	cmp    $0x7cf,%ax
f01009ab:	76 58                	jbe    f0100a05 <cga_putc+0x226>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f01009ad:	a1 ec 17 55 f0       	mov    0xf05517ec,%eax
f01009b2:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f01009b8:	a1 ec 17 55 f0       	mov    0xf05517ec,%eax
f01009bd:	83 ec 04             	sub    $0x4,%esp
f01009c0:	68 00 0f 00 00       	push   $0xf00
f01009c5:	52                   	push   %edx
f01009c6:	50                   	push   %eax
f01009c7:	e8 dc 00 02 00       	call   f0120aa8 <memcpy>
f01009cc:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01009cf:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f01009d6:	eb 15                	jmp    f01009ed <cga_putc+0x20e>
			crt_buf[i] = 0x0700 | ' ';
f01009d8:	8b 15 ec 17 55 f0    	mov    0xf05517ec,%edx
f01009de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01009e1:	01 c0                	add    %eax,%eax
f01009e3:	01 d0                	add    %edx,%eax
f01009e5:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f01009ea:	ff 45 f4             	incl   -0xc(%ebp)
f01009ed:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f01009f4:	7e e2                	jle    f01009d8 <cga_putc+0x1f9>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f01009f6:	66 a1 f0 17 55 f0    	mov    0xf05517f0,%ax
f01009fc:	83 e8 50             	sub    $0x50,%eax
f01009ff:	66 a3 f0 17 55 f0    	mov    %ax,0xf05517f0
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f0100a05:	a1 e8 17 55 f0       	mov    0xf05517e8,%eax
f0100a0a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100a0d:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100a11:	8a 45 e0             	mov    -0x20(%ebp),%al
f0100a14:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100a17:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f0100a18:	66 a1 f0 17 55 f0    	mov    0xf05517f0,%ax
f0100a1e:	66 c1 e8 08          	shr    $0x8,%ax
f0100a22:	0f b6 c0             	movzbl %al,%eax
f0100a25:	8b 15 e8 17 55 f0    	mov    0xf05517e8,%edx
f0100a2b:	42                   	inc    %edx
f0100a2c:	89 55 ec             	mov    %edx,-0x14(%ebp)
f0100a2f:	88 45 e1             	mov    %al,-0x1f(%ebp)
f0100a32:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100a35:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0100a38:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f0100a39:	a1 e8 17 55 f0       	mov    0xf05517e8,%eax
f0100a3e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100a41:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f0100a45:	8a 45 e2             	mov    -0x1e(%ebp),%al
f0100a48:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100a4b:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f0100a4c:	66 a1 f0 17 55 f0    	mov    0xf05517f0,%ax
f0100a52:	0f b6 c0             	movzbl %al,%eax
f0100a55:	8b 15 e8 17 55 f0    	mov    0xf05517e8,%edx
f0100a5b:	42                   	inc    %edx
f0100a5c:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f0100a5f:	88 45 e3             	mov    %al,-0x1d(%ebp)
f0100a62:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100a65:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100a68:	ee                   	out    %al,(%dx)
}
f0100a69:	90                   	nop
f0100a6a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0100a6d:	c9                   	leave  
f0100a6e:	c3                   	ret    

f0100a6f <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f0100a6f:	55                   	push   %ebp
f0100a70:	89 e5                	mov    %esp,%ebp
f0100a72:	83 ec 28             	sub    $0x28,%esp
f0100a75:	c7 45 dc 64 00 00 00 	movl   $0x64,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100a7c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0100a7f:	89 c2                	mov    %eax,%edx
f0100a81:	ec                   	in     (%dx),%al
f0100a82:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0100a85:	8a 45 db             	mov    -0x25(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100a88:	0f b6 c0             	movzbl %al,%eax
f0100a8b:	83 e0 01             	and    $0x1,%eax
f0100a8e:	85 c0                	test   %eax,%eax
f0100a90:	75 0a                	jne    f0100a9c <kbd_proc_data+0x2d>
		return -1;
f0100a92:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100a97:	e9 2a 02 00 00       	jmp    f0100cc6 <kbd_proc_data+0x257>
f0100a9c:	c7 45 e4 60 00 00 00 	movl   $0x60,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100aa3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100aa6:	89 c2                	mov    %eax,%edx
f0100aa8:	ec                   	in     (%dx),%al
f0100aa9:	88 45 da             	mov    %al,-0x26(%ebp)
	return data;
f0100aac:	8a 45 da             	mov    -0x26(%ebp),%al

	data = inb(KBDATAP);
f0100aaf:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f0100ab2:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100ab6:	75 17                	jne    f0100acf <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100ab8:	a1 08 1a 55 f0       	mov    0xf0551a08,%eax
f0100abd:	83 c8 40             	or     $0x40,%eax
f0100ac0:	a3 08 1a 55 f0       	mov    %eax,0xf0551a08
		return 0;
f0100ac5:	b8 00 00 00 00       	mov    $0x0,%eax
f0100aca:	e9 f7 01 00 00       	jmp    f0100cc6 <kbd_proc_data+0x257>
	} else if (data & 0x80) {
f0100acf:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100ad2:	84 c0                	test   %al,%al
f0100ad4:	79 44                	jns    f0100b1a <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100ad6:	a1 08 1a 55 f0       	mov    0xf0551a08,%eax
f0100adb:	83 e0 40             	and    $0x40,%eax
f0100ade:	85 c0                	test   %eax,%eax
f0100ae0:	75 08                	jne    f0100aea <kbd_proc_data+0x7b>
f0100ae2:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100ae5:	83 e0 7f             	and    $0x7f,%eax
f0100ae8:	eb 03                	jmp    f0100aed <kbd_proc_data+0x7e>
f0100aea:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100aed:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f0100af0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100af4:	8a 80 20 90 17 f0    	mov    -0xfe86fe0(%eax),%al
f0100afa:	83 c8 40             	or     $0x40,%eax
f0100afd:	0f b6 c0             	movzbl %al,%eax
f0100b00:	f7 d0                	not    %eax
f0100b02:	89 c2                	mov    %eax,%edx
f0100b04:	a1 08 1a 55 f0       	mov    0xf0551a08,%eax
f0100b09:	21 d0                	and    %edx,%eax
f0100b0b:	a3 08 1a 55 f0       	mov    %eax,0xf0551a08
		return 0;
f0100b10:	b8 00 00 00 00       	mov    $0x0,%eax
f0100b15:	e9 ac 01 00 00       	jmp    f0100cc6 <kbd_proc_data+0x257>
	} else if (shift & E0ESC) {
f0100b1a:	a1 08 1a 55 f0       	mov    0xf0551a08,%eax
f0100b1f:	83 e0 40             	and    $0x40,%eax
f0100b22:	85 c0                	test   %eax,%eax
f0100b24:	74 11                	je     f0100b37 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f0100b26:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f0100b2a:	a1 08 1a 55 f0       	mov    0xf0551a08,%eax
f0100b2f:	83 e0 bf             	and    $0xffffffbf,%eax
f0100b32:	a3 08 1a 55 f0       	mov    %eax,0xf0551a08
	}

	shift |= shiftcode[data];
f0100b37:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100b3b:	8a 80 20 90 17 f0    	mov    -0xfe86fe0(%eax),%al
f0100b41:	0f b6 d0             	movzbl %al,%edx
f0100b44:	a1 08 1a 55 f0       	mov    0xf0551a08,%eax
f0100b49:	09 d0                	or     %edx,%eax
f0100b4b:	a3 08 1a 55 f0       	mov    %eax,0xf0551a08
	shift ^= togglecode[data];
f0100b50:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100b54:	8a 80 20 91 17 f0    	mov    -0xfe86ee0(%eax),%al
f0100b5a:	0f b6 d0             	movzbl %al,%edx
f0100b5d:	a1 08 1a 55 f0       	mov    0xf0551a08,%eax
f0100b62:	31 d0                	xor    %edx,%eax
f0100b64:	a3 08 1a 55 f0       	mov    %eax,0xf0551a08

	c = charcode[shift & (CTL | SHIFT)][data];
f0100b69:	a1 08 1a 55 f0       	mov    0xf0551a08,%eax
f0100b6e:	83 e0 03             	and    $0x3,%eax
f0100b71:	8b 14 85 20 95 17 f0 	mov    -0xfe86ae0(,%eax,4),%edx
f0100b78:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100b7c:	01 d0                	add    %edx,%eax
f0100b7e:	8a 00                	mov    (%eax),%al
f0100b80:	0f b6 c0             	movzbl %al,%eax
f0100b83:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (c == KEY_DEL) {
f0100b86:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100b8d:	0f 85 9c 00 00 00    	jne    f0100c2f <kbd_proc_data+0x1c0>
		if (text_length > 0) {
f0100b93:	a1 e0 17 55 f0       	mov    0xf05517e0,%eax
f0100b98:	85 c0                	test   %eax,%eax
f0100b9a:	0f 8e 85 00 00 00    	jle    f0100c25 <kbd_proc_data+0x1b6>
			if (crt_pos == 1920 + text_length)
f0100ba0:	66 a1 f0 17 55 f0    	mov    0xf05517f0,%ax
f0100ba6:	0f b7 c0             	movzwl %ax,%eax
f0100ba9:	8b 15 e0 17 55 f0    	mov    0xf05517e0,%edx
f0100baf:	81 c2 80 07 00 00    	add    $0x780,%edx
f0100bb5:	39 d0                	cmp    %edx,%eax
f0100bb7:	75 0a                	jne    f0100bc3 <kbd_proc_data+0x154>
				return 0;
f0100bb9:	b8 00 00 00 00       	mov    $0x0,%eax
f0100bbe:	e9 03 01 00 00       	jmp    f0100cc6 <kbd_proc_data+0x257>
			else {
				text_length--;
f0100bc3:	a1 e0 17 55 f0       	mov    0xf05517e0,%eax
f0100bc8:	48                   	dec    %eax
f0100bc9:	a3 e0 17 55 f0       	mov    %eax,0xf05517e0
				int crt_pos_Length = crt_pos - 1925;
f0100bce:	66 a1 f0 17 55 f0    	mov    0xf05517f0,%ax
f0100bd4:	0f b7 c0             	movzwl %ax,%eax
f0100bd7:	2d 85 07 00 00       	sub    $0x785,%eax
f0100bdc:	89 45 ec             	mov    %eax,-0x14(%ebp)
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100bdf:	66 a1 f0 17 55 f0    	mov    0xf05517f0,%ax
f0100be5:	0f b7 c0             	movzwl %ax,%eax
f0100be8:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0100beb:	eb 26                	jmp    f0100c13 <kbd_proc_data+0x1a4>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
f0100bed:	8b 15 ec 17 55 f0    	mov    0xf05517ec,%edx
f0100bf3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0100bf6:	01 c0                	add    %eax,%eax
f0100bf8:	01 c2                	add    %eax,%edx
f0100bfa:	a1 ec 17 55 f0       	mov    0xf05517ec,%eax
f0100bff:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f0100c02:	41                   	inc    %ecx
f0100c03:	01 c9                	add    %ecx,%ecx
f0100c05:	01 c8                	add    %ecx,%eax
f0100c07:	66 8b 00             	mov    (%eax),%ax
f0100c0a:	66 89 02             	mov    %ax,(%edx)
				return 0;
			else {
				text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
						++i, crt_pos_Length++) {
f0100c0d:	ff 45 e8             	incl   -0x18(%ebp)
f0100c10:	ff 45 ec             	incl   -0x14(%ebp)
			if (crt_pos == 1920 + text_length)
				return 0;
			else {
				text_length--;
				int crt_pos_Length = crt_pos - 1925;
				for (int i = crt_pos; crt_pos_Length <= text_length;
f0100c13:	a1 e0 17 55 f0       	mov    0xf05517e0,%eax
f0100c18:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0100c1b:	7e d0                	jle    f0100bed <kbd_proc_data+0x17e>
						++i, crt_pos_Length++) {
					crt_buf[i] = crt_buf[i + 1];
				}
				return c;
f0100c1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100c20:	e9 a1 00 00 00       	jmp    f0100cc6 <kbd_proc_data+0x257>
			}
		}
		return 0;
f0100c25:	b8 00 00 00 00       	mov    $0x0,%eax
f0100c2a:	e9 97 00 00 00       	jmp    f0100cc6 <kbd_proc_data+0x257>
	}
	if (shift & CAPSLOCK) {
f0100c2f:	a1 08 1a 55 f0       	mov    0xf0551a08,%eax
f0100c34:	83 e0 08             	and    $0x8,%eax
f0100c37:	85 c0                	test   %eax,%eax
f0100c39:	74 22                	je     f0100c5d <kbd_proc_data+0x1ee>
		if ('a' <= c && c <= 'z')
f0100c3b:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100c3f:	7e 0c                	jle    f0100c4d <kbd_proc_data+0x1de>
f0100c41:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100c45:	7f 06                	jg     f0100c4d <kbd_proc_data+0x1de>
			c += 'A' - 'a';
f0100c47:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f0100c4b:	eb 10                	jmp    f0100c5d <kbd_proc_data+0x1ee>
		else if ('A' <= c && c <= 'Z')
f0100c4d:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100c51:	7e 0a                	jle    f0100c5d <kbd_proc_data+0x1ee>
f0100c53:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f0100c57:	7f 04                	jg     f0100c5d <kbd_proc_data+0x1ee>
			c += 'a' - 'A';
f0100c59:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	if ((int) shift == NUMLOCK && c >= '0' && c <= '9')
f0100c5d:	a1 08 1a 55 f0       	mov    0xf0551a08,%eax
f0100c62:	83 f8 10             	cmp    $0x10,%eax
f0100c65:	75 13                	jne    f0100c7a <kbd_proc_data+0x20b>
f0100c67:	83 7d f4 2f          	cmpl   $0x2f,-0xc(%ebp)
f0100c6b:	7e 0d                	jle    f0100c7a <kbd_proc_data+0x20b>
f0100c6d:	83 7d f4 39          	cmpl   $0x39,-0xc(%ebp)
f0100c71:	7f 07                	jg     f0100c7a <kbd_proc_data+0x20b>
		return 0;
f0100c73:	b8 00 00 00 00       	mov    $0x0,%eax
f0100c78:	eb 4c                	jmp    f0100cc6 <kbd_proc_data+0x257>
	if (c == 255)
f0100c7a:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f0100c81:	75 07                	jne    f0100c8a <kbd_proc_data+0x21b>
		return 0;
f0100c83:	b8 00 00 00 00       	mov    $0x0,%eax
f0100c88:	eb 3c                	jmp    f0100cc6 <kbd_proc_data+0x257>
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100c8a:	a1 08 1a 55 f0       	mov    0xf0551a08,%eax
f0100c8f:	f7 d0                	not    %eax
f0100c91:	83 e0 06             	and    $0x6,%eax
f0100c94:	85 c0                	test   %eax,%eax
f0100c96:	75 2b                	jne    f0100cc3 <kbd_proc_data+0x254>
f0100c98:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100c9f:	75 22                	jne    f0100cc3 <kbd_proc_data+0x254>
		cprintf("Rebooting!\n");
f0100ca1:	83 ec 0c             	sub    $0xc,%esp
f0100ca4:	68 7b 1d 12 f0       	push   $0xf0121d7b
f0100ca9:	e8 be 02 00 00       	call   f0100f6c <cprintf>
f0100cae:	83 c4 10             	add    $0x10,%esp
f0100cb1:	c7 45 e0 92 00 00 00 	movl   $0x92,-0x20(%ebp)
f0100cb8:	c6 45 d9 03          	movb   $0x3,-0x27(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100cbc:	8a 45 d9             	mov    -0x27(%ebp),%al
f0100cbf:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0100cc2:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f0100cc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100cc6:	c9                   	leave  
f0100cc7:	c3                   	ret    

f0100cc8 <kbd_intr>:

void
kbd_intr(void)
{
f0100cc8:	55                   	push   %ebp
f0100cc9:	89 e5                	mov    %esp,%ebp
f0100ccb:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f0100cce:	83 ec 0c             	sub    $0xc,%esp
f0100cd1:	68 6f 0a 10 f0       	push   $0xf0100a6f
f0100cd6:	e8 21 00 00 00       	call   f0100cfc <cons_intr>
f0100cdb:	83 c4 10             	add    $0x10,%esp
}
f0100cde:	90                   	nop
f0100cdf:	c9                   	leave  
f0100ce0:	c3                   	ret    

f0100ce1 <kbd_init>:

void
kbd_init(void)
{
f0100ce1:	55                   	push   %ebp
f0100ce2:	89 e5                	mov    %esp,%ebp
f0100ce4:	83 ec 08             	sub    $0x8,%esp
	irq_install_handler(1, &keyboard_interrupt_handler);
f0100ce7:	83 ec 08             	sub    $0x8,%esp
f0100cea:	68 83 0e 10 f0       	push   $0xf0100e83
f0100cef:	6a 01                	push   $0x1
f0100cf1:	e8 a2 c6 00 00       	call   f010d398 <irq_install_handler>
f0100cf6:	83 c4 10             	add    $0x10,%esp
	}
	else if (KBD_INT_BLK_METHOD == LCK_SEMAPHORE)
	{
		init_ksemaphore(&KBDsem, 0, "keyboard semaphore");
	}
}
f0100cf9:	90                   	nop
f0100cfa:	c9                   	leave  
f0100cfb:	c3                   	ret    

f0100cfc <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f0100cfc:	55                   	push   %ebp
f0100cfd:	89 e5                	mov    %esp,%ebp
f0100cff:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f0100d02:	eb 35                	jmp    f0100d39 <cons_intr+0x3d>
		if (c == 0)
f0100d04:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100d08:	75 02                	jne    f0100d0c <cons_intr+0x10>
			continue;
f0100d0a:	eb 2d                	jmp    f0100d39 <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f0100d0c:	a1 04 1a 55 f0       	mov    0xf0551a04,%eax
f0100d11:	8d 50 01             	lea    0x1(%eax),%edx
f0100d14:	89 15 04 1a 55 f0    	mov    %edx,0xf0551a04
f0100d1a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100d1d:	88 90 00 18 55 f0    	mov    %dl,-0xfaae800(%eax)
		if (cons.wpos == CONSBUFSIZE)
f0100d23:	a1 04 1a 55 f0       	mov    0xf0551a04,%eax
f0100d28:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100d2d:	75 0a                	jne    f0100d39 <cons_intr+0x3d>
			cons.wpos = 0;
f0100d2f:	c7 05 04 1a 55 f0 00 	movl   $0x0,0xf0551a04
f0100d36:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f0100d39:	8b 45 08             	mov    0x8(%ebp),%eax
f0100d3c:	ff d0                	call   *%eax
f0100d3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100d41:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100d45:	75 bd                	jne    f0100d04 <cons_intr+0x8>
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;

		//cprintf("\nCHAR %d is written into cons.buf\n", c);
	}
}
f0100d47:	90                   	nop
f0100d48:	c9                   	leave  
f0100d49:	c3                   	ret    

f0100d4a <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100d4a:	55                   	push   %ebp
f0100d4b:	89 e5                	mov    %esp,%ebp
f0100d4d:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100d50:	e8 ee f7 ff ff       	call   f0100543 <serial_intr>
	kbd_intr();
f0100d55:	e8 6e ff ff ff       	call   f0100cc8 <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100d5a:	8b 15 00 1a 55 f0    	mov    0xf0551a00,%edx
f0100d60:	a1 04 1a 55 f0       	mov    0xf0551a04,%eax
f0100d65:	39 c2                	cmp    %eax,%edx
f0100d67:	74 35                	je     f0100d9e <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100d69:	a1 00 1a 55 f0       	mov    0xf0551a00,%eax
f0100d6e:	8d 50 01             	lea    0x1(%eax),%edx
f0100d71:	89 15 00 1a 55 f0    	mov    %edx,0xf0551a00
f0100d77:	8a 80 00 18 55 f0    	mov    -0xfaae800(%eax),%al
f0100d7d:	0f b6 c0             	movzbl %al,%eax
f0100d80:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100d83:	a1 00 1a 55 f0       	mov    0xf0551a00,%eax
f0100d88:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100d8d:	75 0a                	jne    f0100d99 <cons_getc+0x4f>
			cons.rpos = 0;
f0100d8f:	c7 05 00 1a 55 f0 00 	movl   $0x0,0xf0551a00
f0100d96:	00 00 00 
		return c;
f0100d99:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100d9c:	eb 05                	jmp    f0100da3 <cons_getc+0x59>
	}
	return 0;
f0100d9e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100da3:	c9                   	leave  
f0100da4:	c3                   	ret    

f0100da5 <cons_getc2>:

//// return the next input character from the console buffer, or 0 if none
int
cons_getc2(void)
{
f0100da5:	55                   	push   %ebp
f0100da6:	89 e5                	mov    %esp,%ebp
f0100da8:	83 ec 10             	sub    $0x10,%esp
	int c;
	// grab the next character from the input buffer (if any).
	if (cons.rpos != cons.wpos) {
f0100dab:	8b 15 00 1a 55 f0    	mov    0xf0551a00,%edx
f0100db1:	a1 04 1a 55 f0       	mov    0xf0551a04,%eax
f0100db6:	39 c2                	cmp    %eax,%edx
f0100db8:	74 35                	je     f0100def <cons_getc2+0x4a>
		c = cons.buf[cons.rpos++];
f0100dba:	a1 00 1a 55 f0       	mov    0xf0551a00,%eax
f0100dbf:	8d 50 01             	lea    0x1(%eax),%edx
f0100dc2:	89 15 00 1a 55 f0    	mov    %edx,0xf0551a00
f0100dc8:	8a 80 00 18 55 f0    	mov    -0xfaae800(%eax),%al
f0100dce:	0f b6 c0             	movzbl %al,%eax
f0100dd1:	89 45 fc             	mov    %eax,-0x4(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100dd4:	a1 00 1a 55 f0       	mov    0xf0551a00,%eax
f0100dd9:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100dde:	75 0a                	jne    f0100dea <cons_getc2+0x45>
			cons.rpos = 0;
f0100de0:	c7 05 00 1a 55 f0 00 	movl   $0x0,0xf0551a00
f0100de7:	00 00 00 
		return c;
f0100dea:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100ded:	eb 05                	jmp    f0100df4 <cons_getc2+0x4f>
	}
	return 0;
f0100def:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100df4:	c9                   	leave  
f0100df5:	c3                   	ret    

f0100df6 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100df6:	55                   	push   %ebp
f0100df7:	89 e5                	mov    %esp,%ebp
f0100df9:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100dfc:	ff 75 08             	pushl  0x8(%ebp)
f0100dff:	e8 a1 f8 ff ff       	call   f01006a5 <lpt_putc>
f0100e04:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100e07:	83 ec 0c             	sub    $0xc,%esp
f0100e0a:	ff 75 08             	pushl  0x8(%ebp)
f0100e0d:	e8 cd f9 ff ff       	call   f01007df <cga_putc>
f0100e12:	83 c4 10             	add    $0x10,%esp
}
f0100e15:	90                   	nop
f0100e16:	c9                   	leave  
f0100e17:	c3                   	ret    

f0100e18 <cons_init>:

// initialize the console devices
void
cons_init(void)
{
f0100e18:	55                   	push   %ebp
f0100e19:	89 e5                	mov    %esp,%ebp
f0100e1b:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100e1e:	e8 f7 f8 ff ff       	call   f010071a <cga_init>
	kbd_init();
f0100e23:	e8 b9 fe ff ff       	call   f0100ce1 <kbd_init>
	serial_init();
f0100e28:	e8 56 f7 ff ff       	call   f0100583 <serial_init>

	if (!serial_exists)
f0100e2d:	a1 e4 17 55 f0       	mov    0xf05517e4,%eax
f0100e32:	85 c0                	test   %eax,%eax
f0100e34:	75 10                	jne    f0100e46 <cons_init+0x2e>
		cprintf("Serial port does not exist!\n");
f0100e36:	83 ec 0c             	sub    $0xc,%esp
f0100e39:	68 87 1d 12 f0       	push   $0xf0121d87
f0100e3e:	e8 29 01 00 00       	call   f0100f6c <cprintf>
f0100e43:	83 c4 10             	add    $0x10,%esp
	}
	else if (CONS_LCK_METHOD == LCK_SEMAPHORE)
	{
		init_ksemaphore(&conssem, 1, "console semaphore");
	}
}
f0100e46:	90                   	nop
f0100e47:	c9                   	leave  
f0100e48:	c3                   	ret    

f0100e49 <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf from KERNEL side

void
cputchar(int c)
{
f0100e49:	55                   	push   %ebp
f0100e4a:	89 e5                	mov    %esp,%ebp
f0100e4c:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100e4f:	83 ec 0c             	sub    $0xc,%esp
f0100e52:	ff 75 08             	pushl  0x8(%ebp)
f0100e55:	e8 9c ff ff ff       	call   f0100df6 <cons_putc>
f0100e5a:	83 c4 10             	add    $0x10,%esp
}
f0100e5d:	90                   	nop
f0100e5e:	c9                   	leave  
f0100e5f:	c3                   	ret    

f0100e60 <getchar>:

int
getchar(void)
{
f0100e60:	55                   	push   %ebp
f0100e61:	89 e5                	mov    %esp,%ebp
f0100e63:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100e66:	e8 df fe ff ff       	call   f0100d4a <cons_getc>
f0100e6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100e6e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100e72:	74 f2                	je     f0100e66 <getchar+0x6>
		/* do nothing */;
	return c;
f0100e74:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100e77:	c9                   	leave  
f0100e78:	c3                   	ret    

f0100e79 <iscons>:

int
iscons(int fdnum)
{
f0100e79:	55                   	push   %ebp
f0100e7a:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100e7c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100e81:	5d                   	pop    %ebp
f0100e82:	c3                   	ret    

f0100e83 <keyboard_interrupt_handler>:

/*Keyboard Interrupt Service Routine */
void keyboard_interrupt_handler()
{
f0100e83:	55                   	push   %ebp
f0100e84:	89 e5                	mov    %esp,%ebp
f0100e86:	83 ec 08             	sub    $0x8,%esp
	//	char scanCode = inb(0x60) & 0x7F; //What key is pressed
	//	char press = inb(0x60) & 0x80; //Press down, or released
	//
	//	cprintf("Scan code: %d, Press: %d\n", scanCode, press);
	//cprintf("char is pressed\n");
	kbd_intr();
f0100e89:	e8 3a fe ff ff       	call   f0100cc8 <kbd_intr>
		else if (KBD_INT_BLK_METHOD == LCK_SEMAPHORE)
		{
			signal_ksemaphore(&KBDsem);
		}
	}
}
f0100e8e:	90                   	nop
f0100e8f:	c9                   	leave  
f0100e90:	c3                   	ret    

f0100e91 <cons_lock>:

void cons_lock(void)
{
f0100e91:	55                   	push   %ebp
f0100e92:	89 e5                	mov    %esp,%ebp
f0100e94:	83 ec 18             	sub    $0x18,%esp
	if (CONS_LCK_METHOD == LCK_INT)
	{
		kclock_stop();
f0100e97:	e8 ec 3d 00 00       	call   f0104c88 <kclock_stop>
 */
//clear interrupt flag
static __inline void
cli(void)
{
	__asm __volatile("cli");
f0100e9c:	fa                   	cli    
		cli();
		struct Env * p = get_cpu_proc();
f0100e9d:	e8 ce 98 00 00       	call   f010a770 <get_cpu_proc>
f0100ea2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (p == NULL)
f0100ea5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100ea9:	75 17                	jne    f0100ec2 <cons_lock+0x31>
		{
			panic("cons_lock: no running process to block");
f0100eab:	83 ec 04             	sub    $0x4,%esp
f0100eae:	68 a4 1d 12 f0       	push   $0xf0121da4
f0100eb3:	68 2d 02 00 00       	push   $0x22d
f0100eb8:	68 cb 1d 12 f0       	push   $0xf0121dcb
f0100ebd:	e8 58 f4 ff ff       	call   f010031a <_panic>
		}
		p->env_tf->tf_eflags &= ~FL_IF ;
f0100ec2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100ec5:	8b 00                	mov    (%eax),%eax
f0100ec7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100eca:	8b 12                	mov    (%edx),%edx
f0100ecc:	8b 52 38             	mov    0x38(%edx),%edx
f0100ecf:	80 e6 fd             	and    $0xfd,%dh
f0100ed2:	89 50 38             	mov    %edx,0x38(%eax)
	else if (CONS_LCK_METHOD == LCK_SEMAPHORE)
	{
		wait_ksemaphore(&conssem);
	}

}
f0100ed5:	90                   	nop
f0100ed6:	c9                   	leave  
f0100ed7:	c3                   	ret    

f0100ed8 <cons_unlock>:

void cons_unlock(void)
{
f0100ed8:	55                   	push   %ebp
f0100ed9:	89 e5                	mov    %esp,%ebp
f0100edb:	83 ec 18             	sub    $0x18,%esp
	if (CONS_LCK_METHOD == LCK_INT)
	{
		kclock_stop();
f0100ede:	e8 a5 3d 00 00       	call   f0104c88 <kclock_stop>
f0100ee3:	fa                   	cli    
		cli();
		struct Env * p = get_cpu_proc();
f0100ee4:	e8 87 98 00 00       	call   f010a770 <get_cpu_proc>
f0100ee9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (p == NULL)
f0100eec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100ef0:	75 17                	jne    f0100f09 <cons_unlock+0x31>
		{
			panic("cons_unlock: no running process to block");
f0100ef2:	83 ec 04             	sub    $0x4,%esp
f0100ef5:	68 e0 1d 12 f0       	push   $0xf0121de0
f0100efa:	68 46 02 00 00       	push   $0x246
f0100eff:	68 cb 1d 12 f0       	push   $0xf0121dcb
f0100f04:	e8 11 f4 ff ff       	call   f010031a <_panic>
		}
		p->env_tf->tf_eflags |= FL_IF ;
f0100f09:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100f0c:	8b 00                	mov    (%eax),%eax
f0100f0e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100f11:	8b 12                	mov    (%edx),%edx
f0100f13:	8b 52 38             	mov    0x38(%edx),%edx
f0100f16:	80 ce 02             	or     $0x2,%dh
f0100f19:	89 50 38             	mov    %edx,0x38(%eax)
	else if (CONS_LCK_METHOD == LCK_SEMAPHORE)
	{
		signal_ksemaphore(&conssem);
	}

}
f0100f1c:	90                   	nop
f0100f1d:	c9                   	leave  
f0100f1e:	c3                   	ret    

f0100f1f <putch>:
#include <kern/cpu/cpu.h>


static void
putch(int ch, int *cnt)
{
f0100f1f:	55                   	push   %ebp
f0100f20:	89 e5                	mov    %esp,%ebp
f0100f22:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100f25:	83 ec 0c             	sub    $0xc,%esp
f0100f28:	ff 75 08             	pushl  0x8(%ebp)
f0100f2b:	e8 19 ff ff ff       	call   f0100e49 <cputchar>
f0100f30:	83 c4 10             	add    $0x10,%esp
	(*cnt)++;
f0100f33:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100f36:	8b 00                	mov    (%eax),%eax
f0100f38:	8d 50 01             	lea    0x1(%eax),%edx
f0100f3b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100f3e:	89 10                	mov    %edx,(%eax)
}
f0100f40:	90                   	nop
f0100f41:	c9                   	leave  
f0100f42:	c3                   	ret    

f0100f43 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100f43:	55                   	push   %ebp
f0100f44:	89 e5                	mov    %esp,%ebp
f0100f46:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100f49:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100f50:	ff 75 0c             	pushl  0xc(%ebp)
f0100f53:	ff 75 08             	pushl  0x8(%ebp)
f0100f56:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100f59:	50                   	push   %eax
f0100f5a:	68 1f 0f 10 f0       	push   $0xf0100f1f
f0100f5f:	e8 64 f2 01 00       	call   f01201c8 <vprintfmt>
f0100f64:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100f67:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100f6a:	c9                   	leave  
f0100f6b:	c3                   	ret    

f0100f6c <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100f6c:	55                   	push   %ebp
f0100f6d:	89 e5                	mov    %esp,%ebp
f0100f6f:	83 ec 18             	sub    $0x18,%esp
	//2024 - better to use locks instead (to support multiprocessors)
	int cnt;
	pushcli();	//disable interrupts
f0100f72:	e8 49 62 00 00       	call   f01071c0 <pushcli>
	{
		va_list ap;

		va_start(ap, fmt);
f0100f77:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100f7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		cnt = vcprintf(fmt, ap);
f0100f7d:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f80:	83 ec 08             	sub    $0x8,%esp
f0100f83:	ff 75 f4             	pushl  -0xc(%ebp)
f0100f86:	50                   	push   %eax
f0100f87:	e8 b7 ff ff ff       	call   f0100f43 <vcprintf>
f0100f8c:	83 c4 10             	add    $0x10,%esp
f0100f8f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		va_end(ap);
	}
	popcli();	//enable interrupts
f0100f92:	e8 7b 62 00 00       	call   f0107212 <popcli>

	return cnt;
f0100f97:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100f9a:	c9                   	leave  
f0100f9b:	c3                   	ret    

f0100f9c <clearandwritecommand>:
#define HISTORY_MAX 19
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
f0100f9c:	55                   	push   %ebp
f0100f9d:	89 e5                	mov    %esp,%ebp
f0100f9f:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < *i; j++) {
f0100fa2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100fa9:	eb 10                	jmp    f0100fbb <clearandwritecommand+0x1f>
		cputchar('\b');
f0100fab:	83 ec 0c             	sub    $0xc,%esp
f0100fae:	6a 08                	push   $0x8
f0100fb0:	e8 94 fe ff ff       	call   f0100e49 <cputchar>
f0100fb5:	83 c4 10             	add    $0x10,%esp
int last_command_idx = -1;
char command_history[HISTORY_MAX+1][BUFLEN];
char empty[BUFLEN];

void clearandwritecommand(int* i, int commandidx, char* buf, int *last_index) {
	for (int j = 0; j < *i; j++) {
f0100fb8:	ff 45 f4             	incl   -0xc(%ebp)
f0100fbb:	8b 45 08             	mov    0x8(%ebp),%eax
f0100fbe:	8b 00                	mov    (%eax),%eax
f0100fc0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0100fc3:	7f e6                	jg     f0100fab <clearandwritecommand+0xf>
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
f0100fc5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100fc8:	c1 e0 0a             	shl    $0xa,%eax
f0100fcb:	05 a0 e2 56 f0       	add    $0xf056e2a0,%eax
f0100fd0:	83 ec 0c             	sub    $0xc,%esp
f0100fd3:	50                   	push   %eax
f0100fd4:	e8 b1 f8 01 00       	call   f012088a <strlen>
f0100fd9:	83 c4 10             	add    $0x10,%esp
f0100fdc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f0100fdf:	83 ec 04             	sub    $0x4,%esp
f0100fe2:	68 00 04 00 00       	push   $0x400
f0100fe7:	68 c0 32 57 f0       	push   $0xf05732c0
f0100fec:	ff 75 10             	pushl  0x10(%ebp)
f0100fef:	e8 b4 fa 01 00       	call   f0120aa8 <memcpy>
f0100ff4:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f0100ff7:	8b 45 08             	mov    0x8(%ebp),%eax
f0100ffa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0101000:	eb 52                	jmp    f0101054 <clearandwritecommand+0xb8>
		cputchar(command_history[commandidx][*i]);
f0101002:	8b 45 08             	mov    0x8(%ebp),%eax
f0101005:	8b 00                	mov    (%eax),%eax
f0101007:	8b 55 0c             	mov    0xc(%ebp),%edx
f010100a:	c1 e2 0a             	shl    $0xa,%edx
f010100d:	01 d0                	add    %edx,%eax
f010100f:	05 a0 e2 56 f0       	add    $0xf056e2a0,%eax
f0101014:	8a 00                	mov    (%eax),%al
f0101016:	0f be c0             	movsbl %al,%eax
f0101019:	83 ec 0c             	sub    $0xc,%esp
f010101c:	50                   	push   %eax
f010101d:	e8 27 fe ff ff       	call   f0100e49 <cputchar>
f0101022:	83 c4 10             	add    $0x10,%esp
		buf[*i] = command_history[commandidx][*i];
f0101025:	8b 45 08             	mov    0x8(%ebp),%eax
f0101028:	8b 00                	mov    (%eax),%eax
f010102a:	89 c2                	mov    %eax,%edx
f010102c:	8b 45 10             	mov    0x10(%ebp),%eax
f010102f:	01 c2                	add    %eax,%edx
f0101031:	8b 45 08             	mov    0x8(%ebp),%eax
f0101034:	8b 00                	mov    (%eax),%eax
f0101036:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0101039:	c1 e1 0a             	shl    $0xa,%ecx
f010103c:	01 c8                	add    %ecx,%eax
f010103e:	05 a0 e2 56 f0       	add    $0xf056e2a0,%eax
f0101043:	8a 00                	mov    (%eax),%al
f0101045:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < *i; j++) {
		cputchar('\b');
	}
	int len = strlen(command_history[commandidx]);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f0101047:	8b 45 08             	mov    0x8(%ebp),%eax
f010104a:	8b 00                	mov    (%eax),%eax
f010104c:	8d 50 01             	lea    0x1(%eax),%edx
f010104f:	8b 45 08             	mov    0x8(%ebp),%eax
f0101052:	89 10                	mov    %edx,(%eax)
f0101054:	8b 45 08             	mov    0x8(%ebp),%eax
f0101057:	8b 00                	mov    (%eax),%eax
f0101059:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010105c:	7c a4                	jl     f0101002 <clearandwritecommand+0x66>
		cputchar(command_history[commandidx][*i]);
		buf[*i] = command_history[commandidx][*i];
	}
	*last_index = len;
f010105e:	8b 45 14             	mov    0x14(%ebp),%eax
f0101061:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101064:	89 10                	mov    %edx,(%eax)
}
f0101066:	90                   	nop
f0101067:	c9                   	leave  
f0101068:	c3                   	ret    

f0101069 <RoundAutoCompleteCommandWithTheSamePrefix>:

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
f0101069:	55                   	push   %ebp
f010106a:	89 e5                	mov    %esp,%ebp
f010106c:	83 ec 18             	sub    $0x18,%esp
	for (int j = 0; j < old_buf_len; j++) {
f010106f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101076:	eb 10                	jmp    f0101088 <RoundAutoCompleteCommandWithTheSamePrefix+0x1f>
		cputchar('\b');
f0101078:	83 ec 0c             	sub    $0xc,%esp
f010107b:	6a 08                	push   $0x8
f010107d:	e8 c7 fd ff ff       	call   f0100e49 <cputchar>
f0101082:	83 c4 10             	add    $0x10,%esp
	*last_index = len;
}

void RoundAutoCompleteCommandWithTheSamePrefix(int old_buf_len, char* prefix_element,
		char* buf, int* i, int *last_index) {
	for (int j = 0; j < old_buf_len; j++) {
f0101085:	ff 45 f4             	incl   -0xc(%ebp)
f0101088:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010108b:	3b 45 08             	cmp    0x8(%ebp),%eax
f010108e:	7c e8                	jl     f0101078 <RoundAutoCompleteCommandWithTheSamePrefix+0xf>
		cputchar('\b');
	}
	int len = strlen(prefix_element);
f0101090:	83 ec 0c             	sub    $0xc,%esp
f0101093:	ff 75 0c             	pushl  0xc(%ebp)
f0101096:	e8 ef f7 01 00       	call   f012088a <strlen>
f010109b:	83 c4 10             	add    $0x10,%esp
f010109e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	memcpy(buf, empty, BUFLEN);
f01010a1:	83 ec 04             	sub    $0x4,%esp
f01010a4:	68 00 04 00 00       	push   $0x400
f01010a9:	68 c0 32 57 f0       	push   $0xf05732c0
f01010ae:	ff 75 10             	pushl  0x10(%ebp)
f01010b1:	e8 f2 f9 01 00       	call   f0120aa8 <memcpy>
f01010b6:	83 c4 10             	add    $0x10,%esp
	for (*i = 0; *i < len; (*i)++) {
f01010b9:	8b 45 14             	mov    0x14(%ebp),%eax
f01010bc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01010c2:	eb 46                	jmp    f010110a <RoundAutoCompleteCommandWithTheSamePrefix+0xa1>
		cputchar(prefix_element[*i]);
f01010c4:	8b 45 14             	mov    0x14(%ebp),%eax
f01010c7:	8b 00                	mov    (%eax),%eax
f01010c9:	89 c2                	mov    %eax,%edx
f01010cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01010ce:	01 d0                	add    %edx,%eax
f01010d0:	8a 00                	mov    (%eax),%al
f01010d2:	0f be c0             	movsbl %al,%eax
f01010d5:	83 ec 0c             	sub    $0xc,%esp
f01010d8:	50                   	push   %eax
f01010d9:	e8 6b fd ff ff       	call   f0100e49 <cputchar>
f01010de:	83 c4 10             	add    $0x10,%esp
		buf[*i] = prefix_element[*i];
f01010e1:	8b 45 14             	mov    0x14(%ebp),%eax
f01010e4:	8b 00                	mov    (%eax),%eax
f01010e6:	89 c2                	mov    %eax,%edx
f01010e8:	8b 45 10             	mov    0x10(%ebp),%eax
f01010eb:	01 c2                	add    %eax,%edx
f01010ed:	8b 45 14             	mov    0x14(%ebp),%eax
f01010f0:	8b 00                	mov    (%eax),%eax
f01010f2:	89 c1                	mov    %eax,%ecx
f01010f4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01010f7:	01 c8                	add    %ecx,%eax
f01010f9:	8a 00                	mov    (%eax),%al
f01010fb:	88 02                	mov    %al,(%edx)
	for (int j = 0; j < old_buf_len; j++) {
		cputchar('\b');
	}
	int len = strlen(prefix_element);
	memcpy(buf, empty, BUFLEN);
	for (*i = 0; *i < len; (*i)++) {
f01010fd:	8b 45 14             	mov    0x14(%ebp),%eax
f0101100:	8b 00                	mov    (%eax),%eax
f0101102:	8d 50 01             	lea    0x1(%eax),%edx
f0101105:	8b 45 14             	mov    0x14(%ebp),%eax
f0101108:	89 10                	mov    %edx,(%eax)
f010110a:	8b 45 14             	mov    0x14(%ebp),%eax
f010110d:	8b 00                	mov    (%eax),%eax
f010110f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101112:	7c b0                	jl     f01010c4 <RoundAutoCompleteCommandWithTheSamePrefix+0x5b>
		cputchar(prefix_element[*i]);
		buf[*i] = prefix_element[*i];
	}
	*last_index = len;
f0101114:	8b 45 18             	mov    0x18(%ebp),%eax
f0101117:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010111a:	89 10                	mov    %edx,(%eax)
}
f010111c:	90                   	nop
f010111d:	c9                   	leave  
f010111e:	c3                   	ret    

f010111f <clear_prefix_list>:

char PrefixList[100][1024];
void clear_prefix_list()
{
f010111f:	55                   	push   %ebp
f0101120:	89 e5                	mov    %esp,%ebp
f0101122:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < 100; ++i) {
f0101125:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010112c:	eb 21                	jmp    f010114f <clear_prefix_list+0x30>
		memset(PrefixList[i], 0, 1024);}
f010112e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101131:	c1 e0 0a             	shl    $0xa,%eax
f0101134:	05 a0 52 55 f0       	add    $0xf05552a0,%eax
f0101139:	83 ec 04             	sub    $0x4,%esp
f010113c:	68 00 04 00 00       	push   $0x400
f0101141:	6a 00                	push   $0x0
f0101143:	50                   	push   %eax
f0101144:	e8 2f f9 01 00       	call   f0120a78 <memset>
f0101149:	83 c4 10             	add    $0x10,%esp
}

char PrefixList[100][1024];
void clear_prefix_list()
{
	for (int i = 0; i < 100; ++i) {
f010114c:	ff 45 f4             	incl   -0xc(%ebp)
f010114f:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0101153:	7e d9                	jle    f010112e <clear_prefix_list+0xf>
		memset(PrefixList[i], 0, 1024);}
}
f0101155:	90                   	nop
f0101156:	c9                   	leave  
f0101157:	c3                   	ret    

f0101158 <command_prompt_readline>:

void command_prompt_readline(const char *prompt, char* buf) {
f0101158:	55                   	push   %ebp
f0101159:	89 e5                	mov    %esp,%ebp
f010115b:	57                   	push   %edi
f010115c:	53                   	push   %ebx
f010115d:	81 ec d0 08 00 00    	sub    $0x8d0,%esp
	int i, c, echoing, lastIndex;
	if (prompt != NULL)
f0101163:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0101167:	74 13                	je     f010117c <command_prompt_readline+0x24>
		cprintf("%s", prompt);
f0101169:	83 ec 08             	sub    $0x8,%esp
f010116c:	ff 75 08             	pushl  0x8(%ebp)
f010116f:	68 0c 1e 12 f0       	push   $0xf0121e0c
f0101174:	e8 f3 fd ff ff       	call   f0100f6c <cprintf>
f0101179:	83 c4 10             	add    $0x10,%esp

	int commandidx = last_command_idx + 1;
f010117c:	a1 30 95 17 f0       	mov    0xf0179530,%eax
f0101181:	40                   	inc    %eax
f0101182:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int prefix_list_idx = lastIndex = i = 0;
f0101185:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%ebp)
f010118c:	00 00 00 
f010118f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101195:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f010119b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01011a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int prefix_list_size, last_c;
	echoing = iscons(0);
f01011a4:	83 ec 0c             	sub    $0xc,%esp
f01011a7:	6a 00                	push   $0x0
f01011a9:	e8 cb fc ff ff       	call   f0100e79 <iscons>
f01011ae:	83 c4 10             	add    $0x10,%esp
f01011b1:	89 45 98             	mov    %eax,-0x68(%ebp)
	bool is_run_cmd = 0;
f01011b4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_tst_cmd = 0;
f01011bb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)

	while (1) {
		c = getchar();
f01011c2:	e8 99 fc ff ff       	call   f0100e60 <getchar>
f01011c7:	89 45 94             	mov    %eax,-0x6c(%ebp)
		if (i > lastIndex)
f01011ca:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f01011d0:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01011d6:	39 c2                	cmp    %eax,%edx
f01011d8:	7e 0c                	jle    f01011e6 <command_prompt_readline+0x8e>
			lastIndex = i;
f01011da:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01011e0:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
		if (c < 0) {
f01011e6:	83 7d 94 00          	cmpl   $0x0,-0x6c(%ebp)
f01011ea:	79 22                	jns    f010120e <command_prompt_readline+0xb6>

			if (c != -E_EOF)
f01011ec:	83 7d 94 07          	cmpl   $0x7,-0x6c(%ebp)
f01011f0:	0f 84 94 0a 00 00    	je     f0101c8a <command_prompt_readline+0xb32>
				cprintf("read error: %e\n", c);
f01011f6:	83 ec 08             	sub    $0x8,%esp
f01011f9:	ff 75 94             	pushl  -0x6c(%ebp)
f01011fc:	68 0f 1e 12 f0       	push   $0xf0121e0f
f0101201:	e8 66 fd ff ff       	call   f0100f6c <cprintf>
f0101206:	83 c4 10             	add    $0x10,%esp
			return;
f0101209:	e9 7c 0a 00 00       	jmp    f0101c8a <command_prompt_readline+0xb32>
		} else if (c == 226) { // Up arrow
f010120e:	81 7d 94 e2 00 00 00 	cmpl   $0xe2,-0x6c(%ebp)
f0101215:	75 2a                	jne    f0101241 <command_prompt_readline+0xe9>
			if (commandidx)
f0101217:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010121b:	74 03                	je     f0101220 <command_prompt_readline+0xc8>
				commandidx--;
f010121d:	ff 4d f4             	decl   -0xc(%ebp)
			clearandwritecommand(&i, commandidx, buf, &lastIndex);
f0101220:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0101226:	50                   	push   %eax
f0101227:	ff 75 0c             	pushl  0xc(%ebp)
f010122a:	ff 75 f4             	pushl  -0xc(%ebp)
f010122d:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f0101233:	50                   	push   %eax
f0101234:	e8 63 fd ff ff       	call   f0100f9c <clearandwritecommand>
f0101239:	83 c4 10             	add    $0x10,%esp
f010123c:	e9 32 0a 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
		} else if (c == 227) { // Down arrow
f0101241:	81 7d 94 e3 00 00 00 	cmpl   $0xe3,-0x6c(%ebp)
f0101248:	75 3b                	jne    f0101285 <command_prompt_readline+0x12d>
			if (commandidx < last_command_idx)
f010124a:	a1 30 95 17 f0       	mov    0xf0179530,%eax
f010124f:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f0101252:	7d 03                	jge    f0101257 <command_prompt_readline+0xff>
				commandidx++;
f0101254:	ff 45 f4             	incl   -0xc(%ebp)
			if (last_command_idx >= 0)
f0101257:	a1 30 95 17 f0       	mov    0xf0179530,%eax
f010125c:	85 c0                	test   %eax,%eax
f010125e:	0f 88 0f 0a 00 00    	js     f0101c73 <command_prompt_readline+0xb1b>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
f0101264:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f010126a:	50                   	push   %eax
f010126b:	ff 75 0c             	pushl  0xc(%ebp)
f010126e:	ff 75 f4             	pushl  -0xc(%ebp)
f0101271:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f0101277:	50                   	push   %eax
f0101278:	e8 1f fd ff ff       	call   f0100f9c <clearandwritecommand>
f010127d:	83 c4 10             	add    $0x10,%esp
f0101280:	e9 ee 09 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
		} else if (c == 9) { // Tab button
f0101285:	83 7d 94 09          	cmpl   $0x9,-0x6c(%ebp)
f0101289:	0f 85 6d 07 00 00    	jne    f01019fc <command_prompt_readline+0x8a4>
			if (last_c != 9) {
f010128f:	83 7d e8 09          	cmpl   $0x9,-0x18(%ebp)
f0101293:	0f 84 fc 06 00 00    	je     f0101995 <command_prompt_readline+0x83d>
				clear_prefix_list(PrefixList, 100);
f0101299:	83 ec 08             	sub    $0x8,%esp
f010129c:	6a 64                	push   $0x64
f010129e:	68 a0 52 55 f0       	push   $0xf05552a0
f01012a3:	e8 77 fe ff ff       	call   f010111f <clear_prefix_list>
f01012a8:	83 c4 10             	add    $0x10,%esp
				if (strlen(buf) == 0 || last_c == 255)
f01012ab:	83 ec 0c             	sub    $0xc,%esp
f01012ae:	ff 75 0c             	pushl  0xc(%ebp)
f01012b1:	e8 d4 f5 01 00       	call   f012088a <strlen>
f01012b6:	83 c4 10             	add    $0x10,%esp
f01012b9:	85 c0                	test   %eax,%eax
f01012bb:	0f 84 bd 09 00 00    	je     f0101c7e <command_prompt_readline+0xb26>
f01012c1:	81 7d e8 ff 00 00 00 	cmpl   $0xff,-0x18(%ebp)
f01012c8:	0f 84 b0 09 00 00    	je     f0101c7e <command_prompt_readline+0xb26>
					continue;
				char *arguments[MAX_ARGUMENTS];
				int number_of_arguments = prefix_list_size = 0;
f01012ce:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01012d5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01012d8:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
				char temp_buf[1024];
				strcpy(temp_buf, buf);
f01012de:	83 ec 08             	sub    $0x8,%esp
f01012e1:	ff 75 0c             	pushl  0xc(%ebp)
f01012e4:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01012ea:	50                   	push   %eax
f01012eb:	e8 e9 f5 01 00       	call   f01208d9 <strcpy>
f01012f0:	83 c4 10             	add    $0x10,%esp
				int bufLength = strlen(buf);
f01012f3:	83 ec 0c             	sub    $0xc,%esp
f01012f6:	ff 75 0c             	pushl  0xc(%ebp)
f01012f9:	e8 8c f5 01 00       	call   f012088a <strlen>
f01012fe:	83 c4 10             	add    $0x10,%esp
f0101301:	89 45 90             	mov    %eax,-0x70(%ebp)
				if (buf[bufLength - 1] == ' ')
f0101304:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101307:	8d 50 ff             	lea    -0x1(%eax),%edx
f010130a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010130d:	01 d0                	add    %edx,%eax
f010130f:	8a 00                	mov    (%eax),%al
f0101311:	3c 20                	cmp    $0x20,%al
f0101313:	0f 84 6b 09 00 00    	je     f0101c84 <command_prompt_readline+0xb2c>
					continue;
				strsplit(temp_buf, WHITESPACE, arguments, &number_of_arguments);
f0101319:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010131f:	50                   	push   %eax
f0101320:	8d 85 30 f7 ff ff    	lea    -0x8d0(%ebp),%eax
f0101326:	50                   	push   %eax
f0101327:	68 1f 1e 12 f0       	push   $0xf0121e1f
f010132c:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101332:	50                   	push   %eax
f0101333:	e8 67 fb 01 00       	call   f0120e9f <strsplit>
f0101338:	83 c4 10             	add    $0x10,%esp
				int it_str = 0;
f010133b:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
				if (number_of_arguments > 1) {
f0101342:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101348:	83 f8 01             	cmp    $0x1,%eax
f010134b:	0f 8e 28 01 00 00    	jle    f0101479 <command_prompt_readline+0x321>
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
f0101351:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101357:	83 ec 08             	sub    $0x8,%esp
f010135a:	68 24 1e 12 f0       	push   $0xf0121e24
f010135f:	50                   	push   %eax
f0101360:	e8 31 f6 01 00       	call   f0120996 <strcmp>
f0101365:	83 c4 10             	add    $0x10,%esp
f0101368:	85 c0                	test   %eax,%eax
f010136a:	74 3c                	je     f01013a8 <command_prompt_readline+0x250>
f010136c:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f0101372:	83 ec 08             	sub    $0x8,%esp
f0101375:	68 28 1e 12 f0       	push   $0xf0121e28
f010137a:	50                   	push   %eax
f010137b:	e8 16 f6 01 00       	call   f0120996 <strcmp>
f0101380:	83 c4 10             	add    $0x10,%esp
f0101383:	85 c0                	test   %eax,%eax
f0101385:	74 21                	je     f01013a8 <command_prompt_readline+0x250>
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
f0101387:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f010138d:	83 ec 08             	sub    $0x8,%esp
f0101390:	68 2d 1e 12 f0       	push   $0xf0121e2d
f0101395:	50                   	push   %eax
f0101396:	e8 fb f5 01 00       	call   f0120996 <strcmp>
f010139b:	83 c4 10             	add    $0x10,%esp
f010139e:	85 c0                	test   %eax,%eax
f01013a0:	74 06                	je     f01013a8 <command_prompt_readline+0x250>
						continue;
f01013a2:	90                   	nop
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f01013a3:	e9 d6 08 00 00       	jmp    f0101c7e <command_prompt_readline+0xb26>
				int it_str = 0;
				if (number_of_arguments > 1) {
					if((strcmp(arguments[0], "run") != 0) && (strcmp(arguments[0], "load") != 0)
							&& (strcmp(arguments[0], "tst") != 0)) // to autocomplete only in case that the command take arguments and defined arguments (run & load & tst) only
						continue;
					if ((strcmp(arguments[0], "tst") == 0))
f01013a8:	8b 85 30 f7 ff ff    	mov    -0x8d0(%ebp),%eax
f01013ae:	83 ec 08             	sub    $0x8,%esp
f01013b1:	68 2d 1e 12 f0       	push   $0xf0121e2d
f01013b6:	50                   	push   %eax
f01013b7:	e8 da f5 01 00       	call   f0120996 <strcmp>
f01013bc:	83 c4 10             	add    $0x10,%esp
f01013bf:	85 c0                	test   %eax,%eax
f01013c1:	75 09                	jne    f01013cc <command_prompt_readline+0x274>
					{
						is_tst_cmd = 1;
f01013c3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
f01013ca:	eb 07                	jmp    f01013d3 <command_prompt_readline+0x27b>
					}
					else
					{
						is_run_cmd = 1;
f01013cc:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
					}
					char temp[1024] = "";
f01013d3:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01013da:	00 00 00 
f01013dd:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01013e3:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01013e8:	b8 00 00 00 00       	mov    $0x0,%eax
f01013ed:	89 d7                	mov    %edx,%edi
f01013ef:	f3 ab                	rep stos %eax,%es:(%edi)
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
f01013f1:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01013f7:	48                   	dec    %eax
f01013f8:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f01013ff:	83 ec 0c             	sub    $0xc,%esp
f0101402:	50                   	push   %eax
f0101403:	e8 82 f4 01 00       	call   f012088a <strlen>
f0101408:	83 c4 10             	add    $0x10,%esp
f010140b:	8b 55 90             	mov    -0x70(%ebp),%edx
f010140e:	29 c2                	sub    %eax,%edx
f0101410:	89 d0                	mov    %edx,%eax
f0101412:	89 45 8c             	mov    %eax,-0x74(%ebp)
					for (int var = 0; var < TotalLen; ++var) {
f0101415:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010141c:	eb 1d                	jmp    f010143b <command_prompt_readline+0x2e3>
						temp[it_str++] = buf[var];
f010141e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101421:	8d 50 01             	lea    0x1(%eax),%edx
f0101424:	89 55 dc             	mov    %edx,-0x24(%ebp)
f0101427:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f010142a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010142d:	01 ca                	add    %ecx,%edx
f010142f:	8a 12                	mov    (%edx),%dl
f0101431:	88 94 05 70 fb ff ff 	mov    %dl,-0x490(%ebp,%eax,1)
					{
						is_run_cmd = 1;
					}
					char temp[1024] = "";
					int TotalLen = bufLength - strlen(arguments[number_of_arguments - 1]);
					for (int var = 0; var < TotalLen; ++var) {
f0101438:	ff 45 d8             	incl   -0x28(%ebp)
f010143b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010143e:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f0101441:	7c db                	jl     f010141e <command_prompt_readline+0x2c6>
						temp[it_str++] = buf[var];
					}
					strcpy(buf, temp);   //buf contains all arguments except the last one
f0101443:	83 ec 08             	sub    $0x8,%esp
f0101446:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f010144c:	50                   	push   %eax
f010144d:	ff 75 0c             	pushl  0xc(%ebp)
f0101450:	e8 84 f4 01 00       	call   f01208d9 <strcpy>
f0101455:	83 c4 10             	add    $0x10,%esp
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
f0101458:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010145e:	48                   	dec    %eax
f010145f:	8b 84 85 30 f7 ff ff 	mov    -0x8d0(%ebp,%eax,4),%eax
f0101466:	83 ec 08             	sub    $0x8,%esp
f0101469:	50                   	push   %eax
f010146a:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101470:	50                   	push   %eax
f0101471:	e8 63 f4 01 00       	call   f01208d9 <strcpy>
f0101476:	83 c4 10             	add    $0x10,%esp
				}
				int it_prefix_list = 0;
f0101479:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
				if(number_of_arguments == 1)
f0101480:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0101486:	83 f8 01             	cmp    $0x1,%eax
f0101489:	0f 85 30 01 00 00    	jne    f01015bf <command_prompt_readline+0x467>
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f010148f:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0101496:	e9 0f 01 00 00       	jmp    f01015aa <command_prompt_readline+0x452>
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
f010149b:	83 ec 0c             	sub    $0xc,%esp
f010149e:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01014a4:	50                   	push   %eax
f01014a5:	e8 e0 f3 01 00       	call   f012088a <strlen>
f01014aa:	83 c4 10             	add    $0x10,%esp
f01014ad:	89 c1                	mov    %eax,%ecx
f01014af:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01014b2:	89 d0                	mov    %edx,%eax
f01014b4:	01 c0                	add    %eax,%eax
f01014b6:	01 d0                	add    %edx,%eax
f01014b8:	c1 e0 03             	shl    $0x3,%eax
f01014bb:	05 40 95 17 f0       	add    $0xf0179540,%eax
f01014c0:	8b 00                	mov    (%eax),%eax
f01014c2:	83 ec 04             	sub    $0x4,%esp
f01014c5:	51                   	push   %ecx
f01014c6:	50                   	push   %eax
f01014c7:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01014cd:	50                   	push   %eax
f01014ce:	e8 fb f4 01 00       	call   f01209ce <strncmp>
f01014d3:	83 c4 10             	add    $0x10,%esp
f01014d6:	89 45 88             	mov    %eax,-0x78(%ebp)
						if (x == 0) {
f01014d9:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
f01014dd:	0f 85 c4 00 00 00    	jne    f01015a7 <command_prompt_readline+0x44f>
							it_str = -1;
f01014e3:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
							char string[1024] = "";
f01014ea:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01014f1:	00 00 00 
f01014f4:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01014fa:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01014ff:	b8 00 00 00 00       	mov    $0x0,%eax
f0101504:	89 d7                	mov    %edx,%edi
f0101506:	f3 ab                	rep stos %eax,%es:(%edi)
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f0101508:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f010150f:	eb 2d                	jmp    f010153e <command_prompt_readline+0x3e6>
								string[++it_str] = commands[var].name[var3];
f0101511:	ff 45 dc             	incl   -0x24(%ebp)
f0101514:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101517:	89 d0                	mov    %edx,%eax
f0101519:	01 c0                	add    %eax,%eax
f010151b:	01 d0                	add    %edx,%eax
f010151d:	c1 e0 03             	shl    $0x3,%eax
f0101520:	05 40 95 17 f0       	add    $0xf0179540,%eax
f0101525:	8b 10                	mov    (%eax),%edx
f0101527:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010152a:	01 d0                	add    %edx,%eax
f010152c:	8a 00                	mov    (%eax),%al
f010152e:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101534:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0101537:	01 ca                	add    %ecx,%edx
f0101539:	88 02                	mov    %al,(%edx)
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
						int x = strncmp(temp_buf, commands[var].name, strlen(temp_buf));
						if (x == 0) {
							it_str = -1;
							char string[1024] = "";
							for (int var3 = 0; var3 < strlen(commands[var].name); ++var3) {
f010153b:	ff 45 cc             	incl   -0x34(%ebp)
f010153e:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0101541:	89 d0                	mov    %edx,%eax
f0101543:	01 c0                	add    %eax,%eax
f0101545:	01 d0                	add    %edx,%eax
f0101547:	c1 e0 03             	shl    $0x3,%eax
f010154a:	05 40 95 17 f0       	add    $0xf0179540,%eax
f010154f:	8b 00                	mov    (%eax),%eax
f0101551:	83 ec 0c             	sub    $0xc,%esp
f0101554:	50                   	push   %eax
f0101555:	e8 30 f3 01 00       	call   f012088a <strlen>
f010155a:	83 c4 10             	add    $0x10,%esp
f010155d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0101560:	7f af                	jg     f0101511 <command_prompt_readline+0x3b9>
								string[++it_str] = commands[var].name[var3];
							}
							memset(PrefixList[it_prefix_list], 0, 1024);
f0101562:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101565:	c1 e0 0a             	shl    $0xa,%eax
f0101568:	05 a0 52 55 f0       	add    $0xf05552a0,%eax
f010156d:	83 ec 04             	sub    $0x4,%esp
f0101570:	68 00 04 00 00       	push   $0x400
f0101575:	6a 00                	push   $0x0
f0101577:	50                   	push   %eax
f0101578:	e8 fb f4 01 00       	call   f0120a78 <memset>
f010157d:	83 c4 10             	add    $0x10,%esp
							strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f0101580:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101583:	40                   	inc    %eax
f0101584:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0101587:	c1 e2 0a             	shl    $0xa,%edx
f010158a:	81 c2 a0 52 55 f0    	add    $0xf05552a0,%edx
f0101590:	83 ec 04             	sub    $0x4,%esp
f0101593:	50                   	push   %eax
f0101594:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f010159a:	50                   	push   %eax
f010159b:	52                   	push   %edx
f010159c:	e8 66 f3 01 00       	call   f0120907 <strncpy>
f01015a1:	83 c4 10             	add    $0x10,%esp
							it_prefix_list++;
f01015a4:	ff 45 d4             	incl   -0x2c(%ebp)
					strcpy(temp_buf, arguments[number_of_arguments - 1]);   //temp_buf contains the last argument
				}
				int it_prefix_list = 0;
				if(number_of_arguments == 1)
				{
					for (int var = 0; var < NUM_OF_COMMANDS; ++var) {
f01015a7:	ff 45 d0             	incl   -0x30(%ebp)
f01015aa:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01015ad:	a1 48 99 17 f0       	mov    0xf0179948,%eax
f01015b2:	39 c2                	cmp    %eax,%edx
f01015b4:	0f 82 e1 fe ff ff    	jb     f010149b <command_prompt_readline+0x343>
f01015ba:	e9 fe 02 00 00       	jmp    f01018bd <command_prompt_readline+0x765>
						}
					}
				}
				else
				{
					if(is_run_cmd)
f01015bf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01015c3:	0f 84 7b 01 00 00    	je     f0101744 <command_prompt_readline+0x5ec>
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f01015c9:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f01015d0:	e9 5c 01 00 00       	jmp    f0101731 <command_prompt_readline+0x5d9>
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
f01015d5:	83 ec 0c             	sub    $0xc,%esp
f01015d8:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f01015de:	50                   	push   %eax
f01015df:	e8 a6 f2 01 00       	call   f012088a <strlen>
f01015e4:	83 c4 10             	add    $0x10,%esp
f01015e7:	89 c1                	mov    %eax,%ecx
f01015e9:	8b 1d a4 9c 17 f0    	mov    0xf0179ca4,%ebx
f01015ef:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01015f2:	89 d0                	mov    %edx,%eax
f01015f4:	01 c0                	add    %eax,%eax
f01015f6:	01 d0                	add    %edx,%eax
f01015f8:	c1 e0 02             	shl    $0x2,%eax
f01015fb:	01 d8                	add    %ebx,%eax
f01015fd:	8b 00                	mov    (%eax),%eax
f01015ff:	83 ec 04             	sub    $0x4,%esp
f0101602:	51                   	push   %ecx
f0101603:	50                   	push   %eax
f0101604:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010160a:	50                   	push   %eax
f010160b:	e8 be f3 01 00       	call   f01209ce <strncmp>
f0101610:	83 c4 10             	add    $0x10,%esp
f0101613:	89 45 84             	mov    %eax,-0x7c(%ebp)
							if (x == 0) {
f0101616:	83 7d 84 00          	cmpl   $0x0,-0x7c(%ebp)
f010161a:	0f 85 0e 01 00 00    	jne    f010172e <command_prompt_readline+0x5d6>
								it_str = -1;
f0101620:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f0101627:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f010162e:	00 00 00 
f0101631:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f0101637:	b9 ff 00 00 00       	mov    $0xff,%ecx
f010163c:	b8 00 00 00 00       	mov    $0x0,%eax
f0101641:	89 d7                	mov    %edx,%edi
f0101643:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f0101645:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f010164b:	83 f8 01             	cmp    $0x1,%eax
f010164e:	7e 39                	jle    f0101689 <command_prompt_readline+0x531>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f0101650:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0101657:	eb 1d                	jmp    f0101676 <command_prompt_readline+0x51e>
										string[++it_str] = buf[var2];
f0101659:	ff 45 dc             	incl   -0x24(%ebp)
f010165c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010165f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101662:	01 d0                	add    %edx,%eax
f0101664:	8a 00                	mov    (%eax),%al
f0101666:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f010166c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010166f:	01 ca                	add    %ecx,%edx
f0101671:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, ptr_UserPrograms[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f0101673:	ff 45 c4             	incl   -0x3c(%ebp)
f0101676:	83 ec 0c             	sub    $0xc,%esp
f0101679:	ff 75 0c             	pushl  0xc(%ebp)
f010167c:	e8 09 f2 01 00       	call   f012088a <strlen>
f0101681:	83 c4 10             	add    $0x10,%esp
f0101684:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0101687:	7f d0                	jg     f0101659 <command_prompt_readline+0x501>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f0101689:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0101690:	eb 30                	jmp    f01016c2 <command_prompt_readline+0x56a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
f0101692:	ff 45 dc             	incl   -0x24(%ebp)
f0101695:	8b 0d a4 9c 17 f0    	mov    0xf0179ca4,%ecx
f010169b:	8b 55 c8             	mov    -0x38(%ebp),%edx
f010169e:	89 d0                	mov    %edx,%eax
f01016a0:	01 c0                	add    %eax,%eax
f01016a2:	01 d0                	add    %edx,%eax
f01016a4:	c1 e0 02             	shl    $0x2,%eax
f01016a7:	01 c8                	add    %ecx,%eax
f01016a9:	8b 10                	mov    (%eax),%edx
f01016ab:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01016ae:	01 d0                	add    %edx,%eax
f01016b0:	8a 00                	mov    (%eax),%al
f01016b2:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01016b8:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01016bb:	01 ca                	add    %ecx,%edx
f01016bd:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(ptr_UserPrograms[var].name) ; ++var3) {
f01016bf:	ff 45 c0             	incl   -0x40(%ebp)
f01016c2:	8b 0d a4 9c 17 f0    	mov    0xf0179ca4,%ecx
f01016c8:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01016cb:	89 d0                	mov    %edx,%eax
f01016cd:	01 c0                	add    %eax,%eax
f01016cf:	01 d0                	add    %edx,%eax
f01016d1:	c1 e0 02             	shl    $0x2,%eax
f01016d4:	01 c8                	add    %ecx,%eax
f01016d6:	8b 00                	mov    (%eax),%eax
f01016d8:	83 ec 0c             	sub    $0xc,%esp
f01016db:	50                   	push   %eax
f01016dc:	e8 a9 f1 01 00       	call   f012088a <strlen>
f01016e1:	83 c4 10             	add    $0x10,%esp
f01016e4:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01016e7:	7f a9                	jg     f0101692 <command_prompt_readline+0x53a>
									string[++it_str] = ptr_UserPrograms[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f01016e9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01016ec:	c1 e0 0a             	shl    $0xa,%eax
f01016ef:	05 a0 52 55 f0       	add    $0xf05552a0,%eax
f01016f4:	83 ec 04             	sub    $0x4,%esp
f01016f7:	68 00 04 00 00       	push   $0x400
f01016fc:	6a 00                	push   $0x0
f01016fe:	50                   	push   %eax
f01016ff:	e8 74 f3 01 00       	call   f0120a78 <memset>
f0101704:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f0101707:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010170a:	40                   	inc    %eax
f010170b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010170e:	c1 e2 0a             	shl    $0xa,%edx
f0101711:	81 c2 a0 52 55 f0    	add    $0xf05552a0,%edx
f0101717:	83 ec 04             	sub    $0x4,%esp
f010171a:	50                   	push   %eax
f010171b:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f0101721:	50                   	push   %eax
f0101722:	52                   	push   %edx
f0101723:	e8 df f1 01 00       	call   f0120907 <strncpy>
f0101728:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f010172b:	ff 45 d4             	incl   -0x2c(%ebp)
				}
				else
				{
					if(is_run_cmd)
					{
						for (int var = 0; var < NUM_USER_PROGS; ++var) {
f010172e:	ff 45 c8             	incl   -0x38(%ebp)
f0101731:	a1 a8 9c 17 f0       	mov    0xf0179ca8,%eax
f0101736:	39 45 c8             	cmp    %eax,-0x38(%ebp)
f0101739:	0f 8c 96 fe ff ff    	jl     f01015d5 <command_prompt_readline+0x47d>
f010173f:	e9 79 01 00 00       	jmp    f01018bd <command_prompt_readline+0x765>
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
								it_prefix_list++;
							}
						}
					}
					else if(is_tst_cmd)
f0101744:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0101748:	0f 84 6f 01 00 00    	je     f01018bd <command_prompt_readline+0x765>
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f010174e:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0101755:	e9 53 01 00 00       	jmp    f01018ad <command_prompt_readline+0x755>
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
f010175a:	83 ec 0c             	sub    $0xc,%esp
f010175d:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f0101763:	50                   	push   %eax
f0101764:	e8 21 f1 01 00       	call   f012088a <strlen>
f0101769:	83 c4 10             	add    $0x10,%esp
f010176c:	89 c1                	mov    %eax,%ecx
f010176e:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0101771:	89 d0                	mov    %edx,%eax
f0101773:	01 c0                	add    %eax,%eax
f0101775:	01 d0                	add    %edx,%eax
f0101777:	c1 e0 02             	shl    $0x2,%eax
f010177a:	05 c0 9c 17 f0       	add    $0xf0179cc0,%eax
f010177f:	8b 00                	mov    (%eax),%eax
f0101781:	83 ec 04             	sub    $0x4,%esp
f0101784:	51                   	push   %ecx
f0101785:	50                   	push   %eax
f0101786:	8d 85 70 f7 ff ff    	lea    -0x890(%ebp),%eax
f010178c:	50                   	push   %eax
f010178d:	e8 3c f2 01 00       	call   f01209ce <strncmp>
f0101792:	83 c4 10             	add    $0x10,%esp
f0101795:	89 45 80             	mov    %eax,-0x80(%ebp)
							if (x == 0) {
f0101798:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f010179c:	0f 85 08 01 00 00    	jne    f01018aa <command_prompt_readline+0x752>
								it_str = -1;
f01017a2:	c7 45 dc ff ff ff ff 	movl   $0xffffffff,-0x24(%ebp)
								char string[1024] = "";
f01017a9:	c7 85 70 fb ff ff 00 	movl   $0x0,-0x490(%ebp)
f01017b0:	00 00 00 
f01017b3:	8d 95 74 fb ff ff    	lea    -0x48c(%ebp),%edx
f01017b9:	b9 ff 00 00 00       	mov    $0xff,%ecx
f01017be:	b8 00 00 00 00       	mov    $0x0,%eax
f01017c3:	89 d7                	mov    %edx,%edi
f01017c5:	f3 ab                	rep stos %eax,%es:(%edi)
								if (number_of_arguments > 1) {
f01017c7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01017cd:	83 f8 01             	cmp    $0x1,%eax
f01017d0:	7e 39                	jle    f010180b <command_prompt_readline+0x6b3>
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01017d2:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f01017d9:	eb 1d                	jmp    f01017f8 <command_prompt_readline+0x6a0>
										string[++it_str] = buf[var2];
f01017db:	ff 45 dc             	incl   -0x24(%ebp)
f01017de:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01017e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01017e4:	01 d0                	add    %edx,%eax
f01017e6:	8a 00                	mov    (%eax),%al
f01017e8:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f01017ee:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01017f1:	01 ca                	add    %ecx,%edx
f01017f3:	88 02                	mov    %al,(%edx)
							int x = strncmp(temp_buf, tests[var].name, strlen(temp_buf));
							if (x == 0) {
								it_str = -1;
								char string[1024] = "";
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
f01017f5:	ff 45 b8             	incl   -0x48(%ebp)
f01017f8:	83 ec 0c             	sub    $0xc,%esp
f01017fb:	ff 75 0c             	pushl  0xc(%ebp)
f01017fe:	e8 87 f0 01 00       	call   f012088a <strlen>
f0101803:	83 c4 10             	add    $0x10,%esp
f0101806:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0101809:	7f d0                	jg     f01017db <command_prompt_readline+0x683>
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f010180b:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
f0101812:	eb 2d                	jmp    f0101841 <command_prompt_readline+0x6e9>
									string[++it_str] = tests[var].name[var3];
f0101814:	ff 45 dc             	incl   -0x24(%ebp)
f0101817:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010181a:	89 d0                	mov    %edx,%eax
f010181c:	01 c0                	add    %eax,%eax
f010181e:	01 d0                	add    %edx,%eax
f0101820:	c1 e0 02             	shl    $0x2,%eax
f0101823:	05 c0 9c 17 f0       	add    $0xf0179cc0,%eax
f0101828:	8b 10                	mov    (%eax),%edx
f010182a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010182d:	01 d0                	add    %edx,%eax
f010182f:	8a 00                	mov    (%eax),%al
f0101831:	8d 8d 70 fb ff ff    	lea    -0x490(%ebp),%ecx
f0101837:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010183a:	01 ca                	add    %ecx,%edx
f010183c:	88 02                	mov    %al,(%edx)
								if (number_of_arguments > 1) {
									for (int var2 = 0; var2 < strlen(buf); ++var2) {
										string[++it_str] = buf[var2];
									}
								}
								for (int var3 = 0; var3 < strlen(tests[var].name) ; ++var3) {
f010183e:	ff 45 b4             	incl   -0x4c(%ebp)
f0101841:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0101844:	89 d0                	mov    %edx,%eax
f0101846:	01 c0                	add    %eax,%eax
f0101848:	01 d0                	add    %edx,%eax
f010184a:	c1 e0 02             	shl    $0x2,%eax
f010184d:	05 c0 9c 17 f0       	add    $0xf0179cc0,%eax
f0101852:	8b 00                	mov    (%eax),%eax
f0101854:	83 ec 0c             	sub    $0xc,%esp
f0101857:	50                   	push   %eax
f0101858:	e8 2d f0 01 00       	call   f012088a <strlen>
f010185d:	83 c4 10             	add    $0x10,%esp
f0101860:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0101863:	7f af                	jg     f0101814 <command_prompt_readline+0x6bc>
									string[++it_str] = tests[var].name[var3];
								}
								memset(PrefixList[it_prefix_list], 0, 1024);
f0101865:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101868:	c1 e0 0a             	shl    $0xa,%eax
f010186b:	05 a0 52 55 f0       	add    $0xf05552a0,%eax
f0101870:	83 ec 04             	sub    $0x4,%esp
f0101873:	68 00 04 00 00       	push   $0x400
f0101878:	6a 00                	push   $0x0
f010187a:	50                   	push   %eax
f010187b:	e8 f8 f1 01 00       	call   f0120a78 <memset>
f0101880:	83 c4 10             	add    $0x10,%esp
								strncpy(PrefixList[it_prefix_list], string, it_str + 1);
f0101883:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101886:	40                   	inc    %eax
f0101887:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f010188a:	c1 e2 0a             	shl    $0xa,%edx
f010188d:	81 c2 a0 52 55 f0    	add    $0xf05552a0,%edx
f0101893:	83 ec 04             	sub    $0x4,%esp
f0101896:	50                   	push   %eax
f0101897:	8d 85 70 fb ff ff    	lea    -0x490(%ebp),%eax
f010189d:	50                   	push   %eax
f010189e:	52                   	push   %edx
f010189f:	e8 63 f0 01 00       	call   f0120907 <strncpy>
f01018a4:	83 c4 10             	add    $0x10,%esp
								it_prefix_list++;
f01018a7:	ff 45 d4             	incl   -0x2c(%ebp)
							}
						}
					}
					else if(is_tst_cmd)
					{
						for (int var = 0; var < NUM_OF_TESTS; ++var) {
f01018aa:	ff 45 bc             	incl   -0x44(%ebp)
f01018ad:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01018b0:	a1 74 9d 17 f0       	mov    0xf0179d74,%eax
f01018b5:	39 c2                	cmp    %eax,%edx
f01018b7:	0f 82 9d fe ff ff    	jb     f010175a <command_prompt_readline+0x602>
								it_prefix_list++;
							}
						}
					}
				}
				prefix_list_size = it_prefix_list;
f01018bd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01018c0:	89 45 ec             	mov    %eax,-0x14(%ebp)
				if (it_prefix_list) {
f01018c3:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01018c7:	0f 84 a6 03 00 00    	je     f0101c73 <command_prompt_readline+0xb1b>
					prefix_list_idx = it_str = 0;
f01018cd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01018d4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01018d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01018da:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
f01018e1:	eb 1f                	jmp    f0101902 <command_prompt_readline+0x7aa>
						buf[it_str++] = PrefixList[0][var2];}
f01018e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01018e6:	8d 50 01             	lea    0x1(%eax),%edx
f01018e9:	89 55 dc             	mov    %edx,-0x24(%ebp)
f01018ec:	89 c2                	mov    %eax,%edx
f01018ee:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018f1:	01 c2                	add    %eax,%edx
f01018f3:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01018f6:	05 a0 52 55 f0       	add    $0xf05552a0,%eax
f01018fb:	8a 00                	mov    (%eax),%al
f01018fd:	88 02                	mov    %al,(%edx)
					}
				}
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
f01018ff:	ff 45 b0             	incl   -0x50(%ebp)
f0101902:	83 ec 0c             	sub    $0xc,%esp
f0101905:	68 a0 52 55 f0       	push   $0xf05552a0
f010190a:	e8 7b ef 01 00       	call   f012088a <strlen>
f010190f:	83 c4 10             	add    $0x10,%esp
f0101912:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0101915:	7f cc                	jg     f01018e3 <command_prompt_readline+0x78b>
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f0101917:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
f010191e:	eb 10                	jmp    f0101930 <command_prompt_readline+0x7d8>
						cputchar('\b');}
f0101920:	83 ec 0c             	sub    $0xc,%esp
f0101923:	6a 08                	push   $0x8
f0101925:	e8 1f f5 ff ff       	call   f0100e49 <cputchar>
f010192a:	83 c4 10             	add    $0x10,%esp
				prefix_list_size = it_prefix_list;
				if (it_prefix_list) {
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
f010192d:	ff 45 ac             	incl   -0x54(%ebp)
f0101930:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0101933:	3b 45 90             	cmp    -0x70(%ebp),%eax
f0101936:	7c e8                	jl     f0101920 <command_prompt_readline+0x7c8>
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f0101938:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
f010193f:	eb 1c                	jmp    f010195d <command_prompt_readline+0x805>
						cputchar(buf[j]);}
f0101941:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0101944:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101947:	01 d0                	add    %edx,%eax
f0101949:	8a 00                	mov    (%eax),%al
f010194b:	0f be c0             	movsbl %al,%eax
f010194e:	83 ec 0c             	sub    $0xc,%esp
f0101951:	50                   	push   %eax
f0101952:	e8 f2 f4 ff ff       	call   f0100e49 <cputchar>
f0101957:	83 c4 10             	add    $0x10,%esp
					prefix_list_idx = it_str = 0;
					for (int var2 = 0; var2 < strlen(PrefixList[0]); ++var2) {
						buf[it_str++] = PrefixList[0][var2];}
					for (int var = 0; var < bufLength; ++var) {
						cputchar('\b');}
					for (int j = 0; j < strlen(buf); ++j) {
f010195a:	ff 45 a8             	incl   -0x58(%ebp)
f010195d:	83 ec 0c             	sub    $0xc,%esp
f0101960:	ff 75 0c             	pushl  0xc(%ebp)
f0101963:	e8 22 ef 01 00       	call   f012088a <strlen>
f0101968:	83 c4 10             	add    $0x10,%esp
f010196b:	3b 45 a8             	cmp    -0x58(%ebp),%eax
f010196e:	7f d1                	jg     f0101941 <command_prompt_readline+0x7e9>
						cputchar(buf[j]);}
					i = lastIndex = strlen(buf);
f0101970:	83 ec 0c             	sub    $0xc,%esp
f0101973:	ff 75 0c             	pushl  0xc(%ebp)
f0101976:	e8 0f ef 01 00       	call   f012088a <strlen>
f010197b:	83 c4 10             	add    $0x10,%esp
f010197e:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0101984:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f010198a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0101990:	e9 de 02 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
				}
			}
			else {
				if (prefix_list_size > 0) {	int prev = prefix_list_idx;
f0101995:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0101999:	0f 8e d4 02 00 00    	jle    f0101c73 <command_prompt_readline+0xb1b>
f010199f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01019a2:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
				prefix_list_idx = (prefix_list_idx + 1) % prefix_list_size;
f01019a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01019ab:	40                   	inc    %eax
f01019ac:	99                   	cltd   
f01019ad:	f7 7d ec             	idivl  -0x14(%ebp)
f01019b0:	89 55 f0             	mov    %edx,-0x10(%ebp)
				RoundAutoCompleteCommandWithTheSamePrefix(strlen(PrefixList[prev]), PrefixList[prefix_list_idx], buf, &i, &lastIndex);
f01019b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01019b6:	c1 e0 0a             	shl    $0xa,%eax
f01019b9:	8d 98 a0 52 55 f0    	lea    -0xfaaad60(%eax),%ebx
f01019bf:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01019c5:	c1 e0 0a             	shl    $0xa,%eax
f01019c8:	05 a0 52 55 f0       	add    $0xf05552a0,%eax
f01019cd:	83 ec 0c             	sub    $0xc,%esp
f01019d0:	50                   	push   %eax
f01019d1:	e8 b4 ee 01 00       	call   f012088a <strlen>
f01019d6:	83 c4 10             	add    $0x10,%esp
f01019d9:	83 ec 0c             	sub    $0xc,%esp
f01019dc:	8d 95 74 ff ff ff    	lea    -0x8c(%ebp),%edx
f01019e2:	52                   	push   %edx
f01019e3:	8d 95 78 ff ff ff    	lea    -0x88(%ebp),%edx
f01019e9:	52                   	push   %edx
f01019ea:	ff 75 0c             	pushl  0xc(%ebp)
f01019ed:	53                   	push   %ebx
f01019ee:	50                   	push   %eax
f01019ef:	e8 75 f6 ff ff       	call   f0101069 <RoundAutoCompleteCommandWithTheSamePrefix>
f01019f4:	83 c4 20             	add    $0x20,%esp
f01019f7:	e9 77 02 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
				}
			}
		}

		else if (c == 228) { // left arrow
f01019fc:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f0101a03:	75 2e                	jne    f0101a33 <command_prompt_readline+0x8db>
			if (i > 0) {
f0101a05:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a0b:	85 c0                	test   %eax,%eax
f0101a0d:	0f 8e 60 02 00 00    	jle    f0101c73 <command_prompt_readline+0xb1b>
				i--;
f0101a13:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a19:	48                   	dec    %eax
f0101a1a:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f0101a20:	83 ec 0c             	sub    $0xc,%esp
f0101a23:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a26:	e8 1e f4 ff ff       	call   f0100e49 <cputchar>
f0101a2b:	83 c4 10             	add    $0x10,%esp
f0101a2e:	e9 40 02 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
			}
		} else if (c == 229) { // right arrow
f0101a33:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f0101a3a:	75 34                	jne    f0101a70 <command_prompt_readline+0x918>
			if (i < lastIndex) {
f0101a3c:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f0101a42:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101a48:	39 c2                	cmp    %eax,%edx
f0101a4a:	0f 8d 23 02 00 00    	jge    f0101c73 <command_prompt_readline+0xb1b>
				i++;
f0101a50:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a56:	40                   	inc    %eax
f0101a57:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
				cputchar(c);
f0101a5d:	83 ec 0c             	sub    $0xc,%esp
f0101a60:	ff 75 94             	pushl  -0x6c(%ebp)
f0101a63:	e8 e1 f3 ff ff       	call   f0100e49 <cputchar>
f0101a68:	83 c4 10             	add    $0x10,%esp
f0101a6b:	e9 03 02 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
f0101a70:	81 7d 94 e9 00 00 00 	cmpl   $0xe9,-0x6c(%ebp)
f0101a77:	75 4c                	jne    f0101ac5 <command_prompt_readline+0x96d>
f0101a79:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a7f:	85 c0                	test   %eax,%eax
f0101a81:	7e 42                	jle    f0101ac5 <command_prompt_readline+0x96d>
			for (int var = i; var <= lastIndex; ++var) {
f0101a83:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101a89:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0101a8c:	eb 1a                	jmp    f0101aa8 <command_prompt_readline+0x950>
				buf[var] = buf[var + 1];
f0101a8e:	8b 55 a4             	mov    -0x5c(%ebp),%edx
f0101a91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a94:	01 c2                	add    %eax,%edx
f0101a96:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0101a99:	8d 48 01             	lea    0x1(%eax),%ecx
f0101a9c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a9f:	01 c8                	add    %ecx,%eax
f0101aa1:	8a 00                	mov    (%eax),%al
f0101aa3:	88 02                	mov    %al,(%edx)
				i++;
				cputchar(c);
			}
		}
		else if (c == 0xE9 && i > 0) {		 // KEY_DEL
			for (int var = i; var <= lastIndex; ++var) {
f0101aa5:	ff 45 a4             	incl   -0x5c(%ebp)
f0101aa8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101aae:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
f0101ab1:	7e db                	jle    f0101a8e <command_prompt_readline+0x936>
				buf[var] = buf[var + 1];
			}
			lastIndex--;
f0101ab3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101ab9:	48                   	dec    %eax
f0101aba:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0101ac0:	e9 ae 01 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
		}
		else if (c >= ' ' && i < BUFLEN - 1 && c != 229 && c != 228) {
f0101ac5:	83 7d 94 1f          	cmpl   $0x1f,-0x6c(%ebp)
f0101ac9:	7e 60                	jle    f0101b2b <command_prompt_readline+0x9d3>
f0101acb:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101ad1:	3d fe 03 00 00       	cmp    $0x3fe,%eax
f0101ad6:	7f 53                	jg     f0101b2b <command_prompt_readline+0x9d3>
f0101ad8:	81 7d 94 e5 00 00 00 	cmpl   $0xe5,-0x6c(%ebp)
f0101adf:	74 4a                	je     f0101b2b <command_prompt_readline+0x9d3>
f0101ae1:	81 7d 94 e4 00 00 00 	cmpl   $0xe4,-0x6c(%ebp)
f0101ae8:	74 41                	je     f0101b2b <command_prompt_readline+0x9d3>
			if (echoing)
f0101aea:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101aee:	74 0e                	je     f0101afe <command_prompt_readline+0x9a6>
				cputchar(c);
f0101af0:	83 ec 0c             	sub    $0xc,%esp
f0101af3:	ff 75 94             	pushl  -0x6c(%ebp)
f0101af6:	e8 4e f3 ff ff       	call   f0100e49 <cputchar>
f0101afb:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f0101afe:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101b04:	8d 50 01             	lea    0x1(%eax),%edx
f0101b07:	89 95 78 ff ff ff    	mov    %edx,-0x88(%ebp)
f0101b0d:	89 c2                	mov    %eax,%edx
f0101b0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b12:	01 d0                	add    %edx,%eax
f0101b14:	8b 55 94             	mov    -0x6c(%ebp),%edx
f0101b17:	88 10                	mov    %dl,(%eax)
			lastIndex++;
f0101b19:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101b1f:	40                   	inc    %eax
f0101b20:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0101b26:	e9 48 01 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
		} else if (c == '\b' && i > 0) {
f0101b2b:	83 7d 94 08          	cmpl   $0x8,-0x6c(%ebp)
f0101b2f:	75 60                	jne    f0101b91 <command_prompt_readline+0xa39>
f0101b31:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101b37:	85 c0                	test   %eax,%eax
f0101b39:	7e 56                	jle    f0101b91 <command_prompt_readline+0xa39>

			if (echoing)
f0101b3b:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101b3f:	74 0e                	je     f0101b4f <command_prompt_readline+0x9f7>
				cputchar(c);
f0101b41:	83 ec 0c             	sub    $0xc,%esp
f0101b44:	ff 75 94             	pushl  -0x6c(%ebp)
f0101b47:	e8 fd f2 ff ff       	call   f0100e49 <cputchar>
f0101b4c:	83 c4 10             	add    $0x10,%esp
			for (int var = i; var <= i; ++var) {
f0101b4f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101b55:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0101b58:	eb 1a                	jmp    f0101b74 <command_prompt_readline+0xa1c>
				buf[var - 1] = buf[var];
f0101b5a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0101b5d:	8d 50 ff             	lea    -0x1(%eax),%edx
f0101b60:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b63:	01 c2                	add    %eax,%edx
f0101b65:	8b 4d a0             	mov    -0x60(%ebp),%ecx
f0101b68:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101b6b:	01 c8                	add    %ecx,%eax
f0101b6d:	8a 00                	mov    (%eax),%al
f0101b6f:	88 02                	mov    %al,(%edx)
			lastIndex++;
		} else if (c == '\b' && i > 0) {

			if (echoing)
				cputchar(c);
			for (int var = i; var <= i; ++var) {
f0101b71:	ff 45 a0             	incl   -0x60(%ebp)
f0101b74:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101b7a:	39 45 a0             	cmp    %eax,-0x60(%ebp)
f0101b7d:	7e db                	jle    f0101b5a <command_prompt_readline+0xa02>
				buf[var - 1] = buf[var];
			}
			i--;
f0101b7f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0101b85:	48                   	dec    %eax
f0101b86:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0101b8c:	e9 e2 00 00 00       	jmp    f0101c73 <command_prompt_readline+0xb1b>
		} else if (c == '\n' || c == '\r') {
f0101b91:	83 7d 94 0a          	cmpl   $0xa,-0x6c(%ebp)
f0101b95:	74 0a                	je     f0101ba1 <command_prompt_readline+0xa49>
f0101b97:	83 7d 94 0d          	cmpl   $0xd,-0x6c(%ebp)
f0101b9b:	0f 85 d2 00 00 00    	jne    f0101c73 <command_prompt_readline+0xb1b>

			if (echoing)
f0101ba1:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0101ba5:	74 0e                	je     f0101bb5 <command_prompt_readline+0xa5d>
				cputchar(c);
f0101ba7:	83 ec 0c             	sub    $0xc,%esp
f0101baa:	ff 75 94             	pushl  -0x6c(%ebp)
f0101bad:	e8 97 f2 ff ff       	call   f0100e49 <cputchar>
f0101bb2:	83 c4 10             	add    $0x10,%esp

			buf[lastIndex] = 0;
f0101bb5:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0101bbb:	89 c2                	mov    %eax,%edx
f0101bbd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bc0:	01 d0                	add    %edx,%eax
f0101bc2:	c6 00 00             	movb   $0x0,(%eax)
			if (last_command_idx == HISTORY_MAX) {
f0101bc5:	a1 30 95 17 f0       	mov    0xf0179530,%eax
f0101bca:	83 f8 13             	cmp    $0x13,%eax
f0101bcd:	75 56                	jne    f0101c25 <command_prompt_readline+0xacd>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101bcf:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
f0101bd6:	eb 2d                	jmp    f0101c05 <command_prompt_readline+0xaad>
					memcpy(command_history[idx], command_history[idx + 1],
f0101bd8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101bdb:	40                   	inc    %eax
f0101bdc:	c1 e0 0a             	shl    $0xa,%eax
f0101bdf:	8d 90 a0 e2 56 f0    	lea    -0xfa91d60(%eax),%edx
f0101be5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0101be8:	c1 e0 0a             	shl    $0xa,%eax
f0101beb:	05 a0 e2 56 f0       	add    $0xf056e2a0,%eax
f0101bf0:	83 ec 04             	sub    $0x4,%esp
f0101bf3:	68 00 04 00 00       	push   $0x400
f0101bf8:	52                   	push   %edx
f0101bf9:	50                   	push   %eax
f0101bfa:	e8 a9 ee 01 00       	call   f0120aa8 <memcpy>
f0101bff:	83 c4 10             	add    $0x10,%esp
			if (echoing)
				cputchar(c);

			buf[lastIndex] = 0;
			if (last_command_idx == HISTORY_MAX) {
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
f0101c02:	ff 45 9c             	incl   -0x64(%ebp)
f0101c05:	83 7d 9c 12          	cmpl   $0x12,-0x64(%ebp)
f0101c09:	7e cd                	jle    f0101bd8 <command_prompt_readline+0xa80>
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
f0101c0b:	83 ec 04             	sub    $0x4,%esp
f0101c0e:	68 00 04 00 00       	push   $0x400
f0101c13:	ff 75 0c             	pushl  0xc(%ebp)
f0101c16:	68 a0 2e 57 f0       	push   $0xf0572ea0
f0101c1b:	e8 88 ee 01 00       	call   f0120aa8 <memcpy>
f0101c20:	83 c4 10             	add    $0x10,%esp
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101c23:	eb 68                	jmp    f0101c8d <command_prompt_readline+0xb35>
				for (int idx = 0; idx < HISTORY_MAX; idx++) {
					memcpy(command_history[idx], command_history[idx + 1],
							BUFLEN);
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
f0101c25:	a1 30 95 17 f0       	mov    0xf0179530,%eax
f0101c2a:	c1 e0 0a             	shl    $0xa,%eax
f0101c2d:	05 a0 e2 56 f0       	add    $0xf056e2a0,%eax
f0101c32:	83 ec 08             	sub    $0x8,%esp
f0101c35:	ff 75 0c             	pushl  0xc(%ebp)
f0101c38:	50                   	push   %eax
f0101c39:	e8 58 ed 01 00       	call   f0120996 <strcmp>
f0101c3e:	83 c4 10             	add    $0x10,%esp
f0101c41:	85 c0                	test   %eax,%eax
f0101c43:	74 48                	je     f0101c8d <command_prompt_readline+0xb35>
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
f0101c45:	a1 30 95 17 f0       	mov    0xf0179530,%eax
f0101c4a:	40                   	inc    %eax
f0101c4b:	a3 30 95 17 f0       	mov    %eax,0xf0179530
f0101c50:	a1 30 95 17 f0       	mov    0xf0179530,%eax
f0101c55:	c1 e0 0a             	shl    $0xa,%eax
f0101c58:	05 a0 e2 56 f0       	add    $0xf056e2a0,%eax
f0101c5d:	83 ec 04             	sub    $0x4,%esp
f0101c60:	68 00 04 00 00       	push   $0x400
f0101c65:	ff 75 0c             	pushl  0xc(%ebp)
f0101c68:	50                   	push   %eax
f0101c69:	e8 3a ee 01 00       	call   f0120aa8 <memcpy>
f0101c6e:	83 c4 10             	add    $0x10,%esp
			}
			return;
f0101c71:	eb 1a                	jmp    f0101c8d <command_prompt_readline+0xb35>

		}
		last_c = c;
f0101c73:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0101c76:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0101c79:	e9 44 f5 ff ff       	jmp    f01011c2 <command_prompt_readline+0x6a>
				clearandwritecommand(&i, commandidx, buf, &lastIndex);
		} else if (c == 9) { // Tab button
			if (last_c != 9) {
				clear_prefix_list(PrefixList, 100);
				if (strlen(buf) == 0 || last_c == 255)
					continue;
f0101c7e:	90                   	nop
f0101c7f:	e9 3e f5 ff ff       	jmp    f01011c2 <command_prompt_readline+0x6a>
				int number_of_arguments = prefix_list_size = 0;
				char temp_buf[1024];
				strcpy(temp_buf, buf);
				int bufLength = strlen(buf);
				if (buf[bufLength - 1] == ' ')
					continue;
f0101c84:	90                   	nop
			}
			return;

		}
		last_c = c;
	}
f0101c85:	e9 38 f5 ff ff       	jmp    f01011c2 <command_prompt_readline+0x6a>
			lastIndex = i;
		if (c < 0) {

			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0101c8a:	90                   	nop
f0101c8b:	eb 01                	jmp    f0101c8e <command_prompt_readline+0xb36>
				}
				memcpy(command_history[HISTORY_MAX], buf, BUFLEN);
			} else if (strcmp(command_history[last_command_idx], buf) != 0) {
				memcpy(command_history[++last_command_idx], buf, BUFLEN);
			}
			return;
f0101c8d:	90                   	nop

		}
		last_c = c;
	}
}
f0101c8e:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0101c91:	5b                   	pop    %ebx
f0101c92:	5f                   	pop    %edi
f0101c93:	5d                   	pop    %ebp
f0101c94:	c3                   	ret    

f0101c95 <run_command_prompt>:
// ******************************************************************
// ******************************************************************

extern bool autograde ;
void run_command_prompt()
{
f0101c95:	55                   	push   %ebp
f0101c96:	89 e5                	mov    %esp,%ebp
f0101c98:	57                   	push   %edi
f0101c99:	56                   	push   %esi
f0101c9a:	53                   	push   %ebx
f0101c9b:	81 ec 0c 10 00 00    	sub    $0x100c,%esp
	if (autograde)
f0101ca1:	a1 dc 51 55 f0       	mov    0xf05551dc,%eax
f0101ca6:	85 c0                	test   %eax,%eax
f0101ca8:	0f 84 85 00 00 00    	je     f0101d33 <run_command_prompt+0x9e>
	{
		char cmd1_2[BUFLEN] = "tst bsd_nice 0";
f0101cae:	8d 85 e8 ef ff ff    	lea    -0x1018(%ebp),%eax
f0101cb4:	bb 37 1e 12 f0       	mov    $0xf0121e37,%ebx
f0101cb9:	ba 0f 00 00 00       	mov    $0xf,%edx
f0101cbe:	89 c7                	mov    %eax,%edi
f0101cc0:	89 de                	mov    %ebx,%esi
f0101cc2:	89 d1                	mov    %edx,%ecx
f0101cc4:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0101cc6:	8d 95 f7 ef ff ff    	lea    -0x1009(%ebp),%edx
f0101ccc:	b9 f1 03 00 00       	mov    $0x3f1,%ecx
f0101cd1:	b0 00                	mov    $0x0,%al
f0101cd3:	89 d7                	mov    %edx,%edi
f0101cd5:	f3 aa                	rep stos %al,%es:(%edi)
		char cmd2_2[BUFLEN] = "tst bsd_nice 1";
f0101cd7:	8d 85 e8 f3 ff ff    	lea    -0xc18(%ebp),%eax
f0101cdd:	bb 37 22 12 f0       	mov    $0xf0122237,%ebx
f0101ce2:	ba 0f 00 00 00       	mov    $0xf,%edx
f0101ce7:	89 c7                	mov    %eax,%edi
f0101ce9:	89 de                	mov    %ebx,%esi
f0101ceb:	89 d1                	mov    %edx,%ecx
f0101ced:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0101cef:	8d 95 f7 f3 ff ff    	lea    -0xc09(%ebp),%edx
f0101cf5:	b9 f1 03 00 00       	mov    $0x3f1,%ecx
f0101cfa:	b0 00                	mov    $0x0,%al
f0101cfc:	89 d7                	mov    %edx,%edi
f0101cfe:	f3 aa                	rep stos %al,%es:(%edi)
		char cmd3_2[BUFLEN] = "tst bsd_nice 2";
f0101d00:	8d 85 e8 f7 ff ff    	lea    -0x818(%ebp),%eax
f0101d06:	bb 37 26 12 f0       	mov    $0xf0122637,%ebx
f0101d0b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0101d10:	89 c7                	mov    %eax,%edi
f0101d12:	89 de                	mov    %ebx,%esi
f0101d14:	89 d1                	mov    %edx,%ecx
f0101d16:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0101d18:	8d 95 f7 f7 ff ff    	lea    -0x809(%ebp),%edx
f0101d1e:	b9 f1 03 00 00       	mov    $0x3f1,%ecx
f0101d23:	b0 00                	mov    $0x0,%al
f0101d25:	89 d7                	mov    %edx,%edi
f0101d27:	f3 aa                	rep stos %al,%es:(%edi)
		//execute_command(cmd3_2);
		autograde = 0;
f0101d29:	c7 05 dc 51 55 f0 00 	movl   $0x0,0xf05551dc
f0101d30:	00 00 00 
	}
	/*2024*/
	LIST_INIT(&foundCommands);
f0101d33:	c7 05 6c 51 55 f0 00 	movl   $0x0,0xf055516c
f0101d3a:	00 00 00 
f0101d3d:	c7 05 70 51 55 f0 00 	movl   $0x0,0xf0555170
f0101d44:	00 00 00 
f0101d47:	c7 05 78 51 55 f0 00 	movl   $0x0,0xf0555178
f0101d4e:	00 00 00 
		//readline("FOS> ", command_line);

		// ********** This DosKey supported readline function is a combined implementation from **********
		// ********** 		Mohamed Raafat & Mohamed Yousry, 3rd year students, FCIS, 2017		**********
		// ********** 				Combined, edited and modified by TA\Ghada Hamed				**********
		memset(command_line, 0, sizeof(command_line));
f0101d51:	83 ec 04             	sub    $0x4,%esp
f0101d54:	68 00 04 00 00       	push   $0x400
f0101d59:	6a 00                	push   $0x0
f0101d5b:	8d 85 e8 fb ff ff    	lea    -0x418(%ebp),%eax
f0101d61:	50                   	push   %eax
f0101d62:	e8 11 ed 01 00       	call   f0120a78 <memset>
f0101d67:	83 c4 10             	add    $0x10,%esp
		command_prompt_readline("FOS> ", command_line);
f0101d6a:	83 ec 08             	sub    $0x8,%esp
f0101d6d:	8d 85 e8 fb ff ff    	lea    -0x418(%ebp),%eax
f0101d73:	50                   	push   %eax
f0101d74:	68 31 1e 12 f0       	push   $0xf0121e31
f0101d79:	e8 da f3 ff ff       	call   f0101158 <command_prompt_readline>
f0101d7e:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0101d81:	83 ec 0c             	sub    $0xc,%esp
f0101d84:	8d 85 e8 fb ff ff    	lea    -0x418(%ebp),%eax
f0101d8a:	50                   	push   %eax
f0101d8b:	e8 4c 01 00 00       	call   f0101edc <execute_command>
f0101d90:	83 c4 10             	add    $0x10,%esp
f0101d93:	85 c0                	test   %eax,%eax
f0101d95:	78 02                	js     f0101d99 <run_command_prompt+0x104>
				break;
	}
f0101d97:	eb b8                	jmp    f0101d51 <run_command_prompt+0xbc>
		command_prompt_readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0101d99:	90                   	nop
	}
}
f0101d9a:	90                   	nop
f0101d9b:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0101d9e:	5b                   	pop    %ebx
f0101d9f:	5e                   	pop    %esi
f0101da0:	5f                   	pop    %edi
f0101da1:	5d                   	pop    %ebp
f0101da2:	c3                   	ret    

f0101da3 <get_into_prompt>:
 * They're placed globally (instead of locally) to avoid clearing them while they're in use [el7 :)]
 */
int m;
char *p ;
void get_into_prompt()
{
f0101da3:	55                   	push   %ebp
f0101da4:	89 e5                	mov    %esp,%ebp
f0101da6:	83 ec 28             	sub    $0x28,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f0101da9:	9c                   	pushf  
f0101daa:	58                   	pop    %eax
f0101dab:	89 45 d8             	mov    %eax,-0x28(%ebp)
        return eflags;
f0101dae:	8b 45 d8             	mov    -0x28(%ebp),%eax
	while (1)
	{
		//disable interrupt if it's already enabled
		if (read_eflags() & FL_IF)
f0101db1:	25 00 02 00 00       	and    $0x200,%eax
f0101db6:	85 c0                	test   %eax,%eax
f0101db8:	74 01                	je     f0101dbb <get_into_prompt+0x18>
 */
//clear interrupt flag
static __inline void
cli(void)
{
	__asm __volatile("cli");
f0101dba:	fa                   	cli    
			cli();

		//Switch to the kernel virtual memory
		switchkvm();
f0101dbb:	e8 49 8c 00 00       	call   f010aa09 <switchkvm>

		//Reset current CPU
		struct cpu *c = mycpu();
f0101dc0:	e8 38 53 00 00       	call   f01070fd <mycpu>
f0101dc5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		c->ncli = 0;
f0101dc8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dcb:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f0101dd2:	00 00 00 
		c->intena = 0;
f0101dd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dd8:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
f0101ddf:	00 00 00 
		c->scheduler = NULL;
f0101de2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101de5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
		c->scheduler_status = SCH_STOPPED ;
f0101dec:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101def:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f0101df6:	00 00 00 
		c->proc = NULL;
f0101df9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dfc:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f0101e03:	00 00 00 

static __inline uint32
read_esp(void)
{
        uint32 esp;
        __asm __volatile("movl %%esp,%0" : "=r" (esp));
f0101e06:	89 e0                	mov    %esp,%eax
f0101e08:	89 45 dc             	mov    %eax,-0x24(%ebp)
        return esp;
f0101e0b:	8b 45 dc             	mov    -0x24(%ebp),%eax

		//Read current ESP
		uint32 cur_esp = read_esp();
f0101e0e:	89 45 e8             	mov    %eax,-0x18(%ebp)

//		//Make sure it's in the correct stack (i.e. KERN STACK below KERN_BASE)
//		assert(cur_esp < SCHD_KERN_STACK_TOP && cur_esp >= SCHD_KERN_STACK_TOP - KERNEL_STACK_SIZE);

		//Reset ESP to the beginning of the SCHED KERNEL STACK of this CPU before getting into the cmd prmpt
		uint32 cpuStackTop = (uint32)c->stack + KERNEL_STACK_SIZE;
f0101e11:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e14:	8b 40 08             	mov    0x8(%eax),%eax
f0101e17:	05 00 80 00 00       	add    $0x8000,%eax
f0101e1c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		uint32 cpuStackBottom = (uint32)c->stack + PAGE_SIZE/*GUARD Page*/;
f0101e1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101e22:	8b 40 08             	mov    0x8(%eax),%eax
f0101e25:	05 00 10 00 00       	add    $0x1000,%eax
f0101e2a:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0101e2d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101e30:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static __inline void
write_esp(uint32 esp)
{
	__asm __volatile("movl %0,%%esp" : : "r" (esp) );
f0101e33:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101e36:	89 c4                	mov    %eax,%esp
		write_esp(cpuStackTop);

		//cprintf("AFTER RESIT = %x ***\n", read_esp());

		//Clear the stack content to avoid any garbage data on it when getting back into prompt
		if (cur_esp < cpuStackTop && cur_esp >= cpuStackBottom)
f0101e38:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101e3b:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101e3e:	73 44                	jae    f0101e84 <get_into_prompt+0xe1>
f0101e40:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101e43:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0101e46:	72 3c                	jb     f0101e84 <get_into_prompt+0xe1>
		{
			//memset((char*)cur_esp, 0, SCHD_KERN_STACK_TOP - cur_esp);
			p = (char*)cur_esp;
f0101e48:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101e4b:	a3 80 52 55 f0       	mov    %eax,0xf0555280
			m = cpuStackTop - cur_esp;
f0101e50:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101e53:	2b 45 e8             	sub    -0x18(%ebp),%eax
f0101e56:	a3 a0 32 57 f0       	mov    %eax,0xf05732a0
			while (--m >= 0)
f0101e5b:	eb 11                	jmp    f0101e6e <get_into_prompt+0xcb>
				*p++ = 0;
f0101e5d:	a1 80 52 55 f0       	mov    0xf0555280,%eax
f0101e62:	8d 50 01             	lea    0x1(%eax),%edx
f0101e65:	89 15 80 52 55 f0    	mov    %edx,0xf0555280
f0101e6b:	c6 00 00             	movb   $0x0,(%eax)
		if (cur_esp < cpuStackTop && cur_esp >= cpuStackBottom)
		{
			//memset((char*)cur_esp, 0, SCHD_KERN_STACK_TOP - cur_esp);
			p = (char*)cur_esp;
			m = cpuStackTop - cur_esp;
			while (--m >= 0)
f0101e6e:	a1 a0 32 57 f0       	mov    0xf05732a0,%eax
f0101e73:	48                   	dec    %eax
f0101e74:	a3 a0 32 57 f0       	mov    %eax,0xf05732a0
f0101e79:	a1 a0 32 57 f0       	mov    0xf05732a0,%eax
f0101e7e:	85 c0                	test   %eax,%eax
f0101e80:	79 db                	jns    f0101e5d <get_into_prompt+0xba>
		write_esp(cpuStackTop);

		//cprintf("AFTER RESIT = %x ***\n", read_esp());

		//Clear the stack content to avoid any garbage data on it when getting back into prompt
		if (cur_esp < cpuStackTop && cur_esp >= cpuStackBottom)
f0101e82:	eb 3a                	jmp    f0101ebe <get_into_prompt+0x11b>
				*p++ = 0;
		}
		else	//clear the ENTIRE SCHED KERN STACK
		{
			//memset((char*)schd_kern_stack_bottom, 0, SCHD_KERN_STACK_TOP - schd_kern_stack_bottom);
			p = (char*)cpuStackBottom;
f0101e84:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101e87:	a3 80 52 55 f0       	mov    %eax,0xf0555280
			m = cpuStackTop - cpuStackBottom;
f0101e8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101e8f:	2b 45 e0             	sub    -0x20(%ebp),%eax
f0101e92:	a3 a0 32 57 f0       	mov    %eax,0xf05732a0
			while (--m >= 0)
f0101e97:	eb 11                	jmp    f0101eaa <get_into_prompt+0x107>
				*p++ = 0;
f0101e99:	a1 80 52 55 f0       	mov    0xf0555280,%eax
f0101e9e:	8d 50 01             	lea    0x1(%eax),%edx
f0101ea1:	89 15 80 52 55 f0    	mov    %edx,0xf0555280
f0101ea7:	c6 00 00             	movb   $0x0,(%eax)
		else	//clear the ENTIRE SCHED KERN STACK
		{
			//memset((char*)schd_kern_stack_bottom, 0, SCHD_KERN_STACK_TOP - schd_kern_stack_bottom);
			p = (char*)cpuStackBottom;
			m = cpuStackTop - cpuStackBottom;
			while (--m >= 0)
f0101eaa:	a1 a0 32 57 f0       	mov    0xf05732a0,%eax
f0101eaf:	48                   	dec    %eax
f0101eb0:	a3 a0 32 57 f0       	mov    %eax,0xf05732a0
f0101eb5:	a1 a0 32 57 f0       	mov    0xf05732a0,%eax
f0101eba:	85 c0                	test   %eax,%eax
f0101ebc:	79 db                	jns    f0101e99 <get_into_prompt+0xf6>
f0101ebe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
}

static __inline void
write_ebp(uint32 ebp)
{
	__asm __volatile("movl %0,%%ebp" : : "r" (ebp) );
f0101ec5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101ec8:	89 c5                	mov    %eax,%ebp

		//Reset EBP to ZERO so that when calling the run_command_prompt() it pushes ZERO into the stack
		write_ebp(0);

		//Get into the prompt (should NOT return)
		run_command_prompt(NULL);
f0101eca:	83 ec 0c             	sub    $0xc,%esp
f0101ecd:	6a 00                	push   $0x0
f0101ecf:	e8 c1 fd ff ff       	call   f0101c95 <run_command_prompt>
f0101ed4:	83 c4 10             	add    $0x10,%esp
	}
f0101ed7:	e9 cd fe ff ff       	jmp    f0101da9 <get_into_prompt+0x6>

f0101edc <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0101edc:	55                   	push   %ebp
f0101edd:	89 e5                	mov    %esp,%ebp
f0101edf:	83 ec 78             	sub    $0x78,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments) ;
f0101ee2:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101ee5:	50                   	push   %eax
f0101ee6:	8d 45 90             	lea    -0x70(%ebp),%eax
f0101ee9:	50                   	push   %eax
f0101eea:	68 1f 1e 12 f0       	push   $0xf0121e1f
f0101eef:	ff 75 08             	pushl  0x8(%ebp)
f0101ef2:	e8 a8 ef 01 00       	call   f0120e9f <strsplit>
f0101ef7:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0101efa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101efd:	85 c0                	test   %eax,%eax
f0101eff:	75 0a                	jne    f0101f0b <execute_command+0x2f>
		return 0;
f0101f01:	b8 00 00 00 00       	mov    $0x0,%eax
f0101f06:	e9 a4 02 00 00       	jmp    f01021af <execute_command+0x2d3>

	int ret = process_command(number_of_arguments, arguments);
f0101f0b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101f0e:	83 ec 08             	sub    $0x8,%esp
f0101f11:	8d 55 90             	lea    -0x70(%ebp),%edx
f0101f14:	52                   	push   %edx
f0101f15:	50                   	push   %eax
f0101f16:	e8 96 02 00 00       	call   f01021b1 <process_command>
f0101f1b:	83 c4 10             	add    $0x10,%esp
f0101f1e:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//cprintf("cmd %s, num of args %d, return %d\n", arguments[0], number_of_arguments, ret);

	if (ret == CMD_INVALID)
f0101f21:	83 7d e0 fd          	cmpl   $0xfffffffd,-0x20(%ebp)
f0101f25:	75 19                	jne    f0101f40 <execute_command+0x64>
	{
		cprintf("Unknown command '%s'\n", arguments[0]);
f0101f27:	8b 45 90             	mov    -0x70(%ebp),%eax
f0101f2a:	83 ec 08             	sub    $0x8,%esp
f0101f2d:	50                   	push   %eax
f0101f2e:	68 37 2a 12 f0       	push   $0xf0122a37
f0101f33:	e8 34 f0 ff ff       	call   f0100f6c <cprintf>
f0101f38:	83 c4 10             	add    $0x10,%esp
f0101f3b:	e9 6a 02 00 00       	jmp    f01021aa <execute_command+0x2ce>
	}
	else if (ret == CMD_INV_NUM_ARGS)
f0101f40:	83 7d e0 fe          	cmpl   $0xfffffffe,-0x20(%ebp)
f0101f44:	75 4f                	jne    f0101f95 <execute_command+0xb9>
	{
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101f46:	a1 78 51 55 f0       	mov    0xf0555178,%eax
f0101f4b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		if (numOfFoundCmds != 1)
f0101f4e:	83 7d d8 01          	cmpl   $0x1,-0x28(%ebp)
f0101f52:	74 17                	je     f0101f6b <execute_command+0x8f>
		{
			panic("command is found but the list is either empty or contains more than one command!");
f0101f54:	83 ec 04             	sub    $0x4,%esp
f0101f57:	68 50 2a 12 f0       	push   $0xf0122a50
f0101f5c:	68 8b 01 00 00       	push   $0x18b
f0101f61:	68 a1 2a 12 f0       	push   $0xf0122aa1
f0101f66:	e8 af e3 ff ff       	call   f010031a <_panic>
		}
		struct Command * cmd = LIST_FIRST(&foundCommands);
f0101f6b:	a1 6c 51 55 f0       	mov    0xf055516c,%eax
f0101f70:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		cprintf("%s: invalid number of args.\nDescription: %s\n", cmd->name, cmd->description);
f0101f73:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101f76:	8b 50 04             	mov    0x4(%eax),%edx
f0101f79:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101f7c:	8b 00                	mov    (%eax),%eax
f0101f7e:	83 ec 04             	sub    $0x4,%esp
f0101f81:	52                   	push   %edx
f0101f82:	50                   	push   %eax
f0101f83:	68 bc 2a 12 f0       	push   $0xf0122abc
f0101f88:	e8 df ef ff ff       	call   f0100f6c <cprintf>
f0101f8d:	83 c4 10             	add    $0x10,%esp
f0101f90:	e9 15 02 00 00       	jmp    f01021aa <execute_command+0x2ce>
	}
	else if (ret == CMD_MATCHED)
f0101f95:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f0101f99:	0f 85 e6 01 00 00    	jne    f0102185 <execute_command+0x2a9>
	{
		int i = 1;
f0101f9f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		int numOfFoundCmds = LIST_SIZE(&foundCommands);
f0101fa6:	a1 78 51 55 f0       	mov    0xf0555178,%eax
f0101fab:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if (numOfFoundCmds == 0)
f0101fae:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0101fb2:	75 17                	jne    f0101fcb <execute_command+0xef>
		{
			panic("command is matched but the list is empty!");
f0101fb4:	83 ec 04             	sub    $0x4,%esp
f0101fb7:	68 ec 2a 12 f0       	push   $0xf0122aec
f0101fbc:	68 96 01 00 00       	push   $0x196
f0101fc1:	68 a1 2a 12 f0       	push   $0xf0122aa1
f0101fc6:	e8 4f e3 ff ff       	call   f010031a <_panic>
		}
		struct Command * cmd = NULL;
f0101fcb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(cmd, &foundCommands)
f0101fd2:	a1 6c 51 55 f0       	mov    0xf055516c,%eax
f0101fd7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0101fda:	eb 28                	jmp    f0102004 <execute_command+0x128>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
f0101fdc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101fdf:	8b 10                	mov    (%eax),%edx
f0101fe1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101fe4:	8d 48 01             	lea    0x1(%eax),%ecx
f0101fe7:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0101fea:	83 ec 04             	sub    $0x4,%esp
f0101fed:	52                   	push   %edx
f0101fee:	50                   	push   %eax
f0101fef:	68 16 2b 12 f0       	push   $0xf0122b16
f0101ff4:	e8 73 ef ff ff       	call   f0100f6c <cprintf>
f0101ff9:	83 c4 10             	add    $0x10,%esp
		if (numOfFoundCmds == 0)
		{
			panic("command is matched but the list is empty!");
		}
		struct Command * cmd = NULL;
		LIST_FOREACH(cmd, &foundCommands)
f0101ffc:	a1 74 51 55 f0       	mov    0xf0555174,%eax
f0102001:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0102004:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102008:	74 08                	je     f0102012 <execute_command+0x136>
f010200a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010200d:	8b 40 10             	mov    0x10(%eax),%eax
f0102010:	eb 05                	jmp    f0102017 <execute_command+0x13b>
f0102012:	b8 00 00 00 00       	mov    $0x0,%eax
f0102017:	a3 74 51 55 f0       	mov    %eax,0xf0555174
f010201c:	a1 74 51 55 f0       	mov    0xf0555174,%eax
f0102021:	85 c0                	test   %eax,%eax
f0102023:	75 b7                	jne    f0101fdc <execute_command+0x100>
f0102025:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102029:	75 b1                	jne    f0101fdc <execute_command+0x100>
		{
			cprintf("[%d] %s\n", i++, cmd->name);
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
f010202b:	83 ec 08             	sub    $0x8,%esp
f010202e:	ff 75 dc             	pushl  -0x24(%ebp)
f0102031:	68 20 2b 12 f0       	push   $0xf0122b20
f0102036:	e8 31 ef ff ff       	call   f0100f6c <cprintf>
f010203b:	83 c4 10             	add    $0x10,%esp
		char Chose = getchar();
f010203e:	e8 1d ee ff ff       	call   f0100e60 <getchar>
f0102043:	88 45 ef             	mov    %al,-0x11(%ebp)
		cputchar(Chose);
f0102046:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f010204a:	83 ec 0c             	sub    $0xc,%esp
f010204d:	50                   	push   %eax
f010204e:	e8 f6 ed ff ff       	call   f0100e49 <cputchar>
f0102053:	83 c4 10             	add    $0x10,%esp
		int selection = 0;
f0102056:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		while (Chose >= '0' && Chose <= '9')
f010205d:	eb 40                	jmp    f010209f <execute_command+0x1c3>
		{
			selection = selection*10 + (Chose - '0') ;
f010205f:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0102062:	89 d0                	mov    %edx,%eax
f0102064:	c1 e0 02             	shl    $0x2,%eax
f0102067:	01 d0                	add    %edx,%eax
f0102069:	01 c0                	add    %eax,%eax
f010206b:	89 c2                	mov    %eax,%edx
f010206d:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0102071:	83 e8 30             	sub    $0x30,%eax
f0102074:	01 d0                	add    %edx,%eax
f0102076:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (selection < 1 || selection > numOfFoundCmds)
f0102079:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010207d:	7e 2c                	jle    f01020ab <execute_command+0x1cf>
f010207f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102082:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0102085:	7f 24                	jg     f01020ab <execute_command+0x1cf>
				break;

			Chose = getchar();
f0102087:	e8 d4 ed ff ff       	call   f0100e60 <getchar>
f010208c:	88 45 ef             	mov    %al,-0x11(%ebp)
			cputchar(Chose);
f010208f:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
f0102093:	83 ec 0c             	sub    $0xc,%esp
f0102096:	50                   	push   %eax
f0102097:	e8 ad ed ff ff       	call   f0100e49 <cputchar>
f010209c:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("Please select the required command [1] to [%d] and press enter? or press any other key to cancel: ", numOfFoundCmds);
		char Chose = getchar();
		cputchar(Chose);
		int selection = 0;
		while (Chose >= '0' && Chose <= '9')
f010209f:	80 7d ef 2f          	cmpb   $0x2f,-0x11(%ebp)
f01020a3:	7e 06                	jle    f01020ab <execute_command+0x1cf>
f01020a5:	80 7d ef 39          	cmpb   $0x39,-0x11(%ebp)
f01020a9:	7e b4                	jle    f010205f <execute_command+0x183>
				break;

			Chose = getchar();
			cputchar(Chose);
		}
		cputchar('\n');
f01020ab:	83 ec 0c             	sub    $0xc,%esp
f01020ae:	6a 0a                	push   $0xa
f01020b0:	e8 94 ed ff ff       	call   f0100e49 <cputchar>
f01020b5:	83 c4 10             	add    $0x10,%esp
		if (selection >= 1 && selection <= numOfFoundCmds)
f01020b8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01020bc:	0f 8e e8 00 00 00    	jle    f01021aa <execute_command+0x2ce>
f01020c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01020c5:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f01020c8:	0f 8f dc 00 00 00    	jg     f01021aa <execute_command+0x2ce>
		{
			int c = 1;
f01020ce:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
			LIST_FOREACH(cmd, &foundCommands)
f01020d5:	a1 6c 51 55 f0       	mov    0xf055516c,%eax
f01020da:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01020dd:	eb 75                	jmp    f0102154 <execute_command+0x278>
			{
				if (c++ == selection)
f01020df:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01020e2:	8d 50 01             	lea    0x1(%eax),%edx
f01020e5:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f01020e8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01020eb:	75 5f                	jne    f010214c <execute_command+0x270>
				{
					if (cmd->num_of_args == 0)
f01020ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01020f0:	8b 40 0c             	mov    0xc(%eax),%eax
f01020f3:	85 c0                	test   %eax,%eax
f01020f5:	75 31                	jne    f0102128 <execute_command+0x24c>
					{
						cprintf("FOS> %s\n", cmd->name);
f01020f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01020fa:	8b 00                	mov    (%eax),%eax
f01020fc:	83 ec 08             	sub    $0x8,%esp
f01020ff:	50                   	push   %eax
f0102100:	68 83 2b 12 f0       	push   $0xf0122b83
f0102105:	e8 62 ee ff ff       	call   f0100f6c <cprintf>
f010210a:	83 c4 10             	add    $0x10,%esp
						return cmd->function_to_execute(number_of_arguments, arguments);
f010210d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102110:	8b 40 08             	mov    0x8(%eax),%eax
f0102113:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0102116:	83 ec 08             	sub    $0x8,%esp
f0102119:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f010211c:	51                   	push   %ecx
f010211d:	52                   	push   %edx
f010211e:	ff d0                	call   *%eax
f0102120:	83 c4 10             	add    $0x10,%esp
f0102123:	e9 87 00 00 00       	jmp    f01021af <execute_command+0x2d3>
					}
					else
					{
						cprintf("%s: %s\n", cmd->name, cmd->description);
f0102128:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010212b:	8b 50 04             	mov    0x4(%eax),%edx
f010212e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102131:	8b 00                	mov    (%eax),%eax
f0102133:	83 ec 04             	sub    $0x4,%esp
f0102136:	52                   	push   %edx
f0102137:	50                   	push   %eax
f0102138:	68 8c 2b 12 f0       	push   $0xf0122b8c
f010213d:	e8 2a ee ff ff       	call   f0100f6c <cprintf>
f0102142:	83 c4 10             	add    $0x10,%esp
						return 0;
f0102145:	b8 00 00 00 00       	mov    $0x0,%eax
f010214a:	eb 63                	jmp    f01021af <execute_command+0x2d3>
		}
		cputchar('\n');
		if (selection >= 1 && selection <= numOfFoundCmds)
		{
			int c = 1;
			LIST_FOREACH(cmd, &foundCommands)
f010214c:	a1 74 51 55 f0       	mov    0xf0555174,%eax
f0102151:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0102154:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102158:	74 08                	je     f0102162 <execute_command+0x286>
f010215a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010215d:	8b 40 10             	mov    0x10(%eax),%eax
f0102160:	eb 05                	jmp    f0102167 <execute_command+0x28b>
f0102162:	b8 00 00 00 00       	mov    $0x0,%eax
f0102167:	a3 74 51 55 f0       	mov    %eax,0xf0555174
f010216c:	a1 74 51 55 f0       	mov    0xf0555174,%eax
f0102171:	85 c0                	test   %eax,%eax
f0102173:	0f 85 66 ff ff ff    	jne    f01020df <execute_command+0x203>
f0102179:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010217d:	0f 85 5c ff ff ff    	jne    f01020df <execute_command+0x203>
f0102183:	eb 25                	jmp    f01021aa <execute_command+0x2ce>
			}
		}
	}
	else
	{
		return commands[ret].function_to_execute(number_of_arguments, arguments);
f0102185:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102188:	89 d0                	mov    %edx,%eax
f010218a:	01 c0                	add    %eax,%eax
f010218c:	01 d0                	add    %edx,%eax
f010218e:	c1 e0 03             	shl    $0x3,%eax
f0102191:	05 48 95 17 f0       	add    $0xf0179548,%eax
f0102196:	8b 00                	mov    (%eax),%eax
f0102198:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010219b:	83 ec 08             	sub    $0x8,%esp
f010219e:	8d 4d 90             	lea    -0x70(%ebp),%ecx
f01021a1:	51                   	push   %ecx
f01021a2:	52                   	push   %edx
f01021a3:	ff d0                	call   *%eax
f01021a5:	83 c4 10             	add    $0x10,%esp
f01021a8:	eb 05                	jmp    f01021af <execute_command+0x2d3>
	}
	return 0;
f01021aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01021af:	c9                   	leave  
f01021b0:	c3                   	ret    

f01021b1 <process_command>:


int process_command(int number_of_arguments, char** arguments)
{
f01021b1:	55                   	push   %ebp
f01021b2:	89 e5                	mov    %esp,%ebp
f01021b4:	83 ec 28             	sub    $0x28,%esp
    struct Command * element = NULL;
f01021b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    LIST_FOREACH(element, &foundCommands)
f01021be:	a1 6c 51 55 f0       	mov    0xf055516c,%eax
f01021c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01021c6:	e9 90 00 00 00       	jmp    f010225b <process_command+0xaa>
    {
        LIST_REMOVE(&foundCommands,element);
f01021cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01021cf:	75 17                	jne    f01021e8 <process_command+0x37>
f01021d1:	83 ec 04             	sub    $0x4,%esp
f01021d4:	68 94 2b 12 f0       	push   $0xf0122b94
f01021d9:	68 cd 01 00 00       	push   $0x1cd
f01021de:	68 a1 2a 12 f0       	push   $0xf0122aa1
f01021e3:	e8 32 e1 ff ff       	call   f010031a <_panic>
f01021e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01021eb:	8b 40 10             	mov    0x10(%eax),%eax
f01021ee:	85 c0                	test   %eax,%eax
f01021f0:	74 11                	je     f0102203 <process_command+0x52>
f01021f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01021f5:	8b 40 10             	mov    0x10(%eax),%eax
f01021f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01021fb:	8b 52 14             	mov    0x14(%edx),%edx
f01021fe:	89 50 14             	mov    %edx,0x14(%eax)
f0102201:	eb 0b                	jmp    f010220e <process_command+0x5d>
f0102203:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102206:	8b 40 14             	mov    0x14(%eax),%eax
f0102209:	a3 70 51 55 f0       	mov    %eax,0xf0555170
f010220e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102211:	8b 40 14             	mov    0x14(%eax),%eax
f0102214:	85 c0                	test   %eax,%eax
f0102216:	74 11                	je     f0102229 <process_command+0x78>
f0102218:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010221b:	8b 40 14             	mov    0x14(%eax),%eax
f010221e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102221:	8b 52 10             	mov    0x10(%edx),%edx
f0102224:	89 50 10             	mov    %edx,0x10(%eax)
f0102227:	eb 0b                	jmp    f0102234 <process_command+0x83>
f0102229:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010222c:	8b 40 10             	mov    0x10(%eax),%eax
f010222f:	a3 6c 51 55 f0       	mov    %eax,0xf055516c
f0102234:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102237:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
f010223e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102241:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f0102248:	a1 78 51 55 f0       	mov    0xf0555178,%eax
f010224d:	48                   	dec    %eax
f010224e:	a3 78 51 55 f0       	mov    %eax,0xf0555178


int process_command(int number_of_arguments, char** arguments)
{
    struct Command * element = NULL;
    LIST_FOREACH(element, &foundCommands)
f0102253:	a1 74 51 55 f0       	mov    0xf0555174,%eax
f0102258:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010225b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010225f:	74 08                	je     f0102269 <process_command+0xb8>
f0102261:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102264:	8b 40 10             	mov    0x10(%eax),%eax
f0102267:	eb 05                	jmp    f010226e <process_command+0xbd>
f0102269:	b8 00 00 00 00       	mov    $0x0,%eax
f010226e:	a3 74 51 55 f0       	mov    %eax,0xf0555174
f0102273:	a1 74 51 55 f0       	mov    0xf0555174,%eax
f0102278:	85 c0                	test   %eax,%eax
f010227a:	0f 85 4b ff ff ff    	jne    f01021cb <process_command+0x1a>
f0102280:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102284:	0f 85 41 ff ff ff    	jne    f01021cb <process_command+0x1a>
    {
        LIST_REMOVE(&foundCommands,element);
    }
    int x=0;
f010228a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (int i = 0; i < NUM_OF_COMMANDS; i++)
f0102291:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0102298:	e9 42 02 00 00       	jmp    f01024df <process_command+0x32e>
    {
        if (strcmp(arguments[0], commands[i].name) == 0)
f010229d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01022a0:	89 d0                	mov    %edx,%eax
f01022a2:	01 c0                	add    %eax,%eax
f01022a4:	01 d0                	add    %edx,%eax
f01022a6:	c1 e0 03             	shl    $0x3,%eax
f01022a9:	05 40 95 17 f0       	add    $0xf0179540,%eax
f01022ae:	8b 10                	mov    (%eax),%edx
f01022b0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01022b3:	8b 00                	mov    (%eax),%eax
f01022b5:	83 ec 08             	sub    $0x8,%esp
f01022b8:	52                   	push   %edx
f01022b9:	50                   	push   %eax
f01022ba:	e8 d7 e6 01 00       	call   f0120996 <strcmp>
f01022bf:	83 c4 10             	add    $0x10,%esp
f01022c2:	85 c0                	test   %eax,%eax
f01022c4:	0f 85 1e 01 00 00    	jne    f01023e8 <process_command+0x237>
        {
            cprintf("%d %d \n",commands[i].num_of_args,number_of_arguments-1);
f01022ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01022cd:	8d 48 ff             	lea    -0x1(%eax),%ecx
f01022d0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01022d3:	89 d0                	mov    %edx,%eax
f01022d5:	01 c0                	add    %eax,%eax
f01022d7:	01 d0                	add    %edx,%eax
f01022d9:	c1 e0 03             	shl    $0x3,%eax
f01022dc:	05 4c 95 17 f0       	add    $0xf017954c,%eax
f01022e1:	8b 00                	mov    (%eax),%eax
f01022e3:	83 ec 04             	sub    $0x4,%esp
f01022e6:	51                   	push   %ecx
f01022e7:	50                   	push   %eax
f01022e8:	68 b2 2b 12 f0       	push   $0xf0122bb2
f01022ed:	e8 7a ec ff ff       	call   f0100f6c <cprintf>
f01022f2:	83 c4 10             	add    $0x10,%esp
            if(commands[i].num_of_args != number_of_arguments-1)
f01022f5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01022f8:	89 d0                	mov    %edx,%eax
f01022fa:	01 c0                	add    %eax,%eax
f01022fc:	01 d0                	add    %edx,%eax
f01022fe:	c1 e0 03             	shl    $0x3,%eax
f0102301:	05 4c 95 17 f0       	add    $0xf017954c,%eax
f0102306:	8b 00                	mov    (%eax),%eax
f0102308:	8b 55 08             	mov    0x8(%ebp),%edx
f010230b:	4a                   	dec    %edx
f010230c:	39 d0                	cmp    %edx,%eax
f010230e:	0f 84 cc 00 00 00    	je     f01023e0 <process_command+0x22f>
            {
                if (commands[i].num_of_args == -1 && number_of_arguments-1 > 0)
f0102314:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0102317:	89 d0                	mov    %edx,%eax
f0102319:	01 c0                	add    %eax,%eax
f010231b:	01 d0                	add    %edx,%eax
f010231d:	c1 e0 03             	shl    $0x3,%eax
f0102320:	05 4c 95 17 f0       	add    $0xf017954c,%eax
f0102325:	8b 00                	mov    (%eax),%eax
f0102327:	83 f8 ff             	cmp    $0xffffffff,%eax
f010232a:	75 10                	jne    f010233c <process_command+0x18b>
f010232c:	8b 45 08             	mov    0x8(%ebp),%eax
f010232f:	48                   	dec    %eax
f0102330:	85 c0                	test   %eax,%eax
f0102332:	7e 08                	jle    f010233c <process_command+0x18b>
                {
                    return i;
f0102334:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102337:	e9 c5 01 00 00       	jmp    f0102501 <process_command+0x350>
                }
                else
                {
                LIST_INSERT_HEAD(&foundCommands , &commands[i]);
f010233c:	8b 15 6c 51 55 f0    	mov    0xf055516c,%edx
f0102342:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0102345:	89 c8                	mov    %ecx,%eax
f0102347:	01 c0                	add    %eax,%eax
f0102349:	01 c8                	add    %ecx,%eax
f010234b:	c1 e0 03             	shl    $0x3,%eax
f010234e:	05 50 95 17 f0       	add    $0xf0179550,%eax
f0102353:	89 10                	mov    %edx,(%eax)
f0102355:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0102358:	89 d0                	mov    %edx,%eax
f010235a:	01 c0                	add    %eax,%eax
f010235c:	01 d0                	add    %edx,%eax
f010235e:	c1 e0 03             	shl    $0x3,%eax
f0102361:	05 50 95 17 f0       	add    $0xf0179550,%eax
f0102366:	8b 00                	mov    (%eax),%eax
f0102368:	85 c0                	test   %eax,%eax
f010236a:	74 1c                	je     f0102388 <process_command+0x1d7>
f010236c:	8b 15 6c 51 55 f0    	mov    0xf055516c,%edx
f0102372:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0102375:	89 c8                	mov    %ecx,%eax
f0102377:	01 c0                	add    %eax,%eax
f0102379:	01 c8                	add    %ecx,%eax
f010237b:	c1 e0 03             	shl    $0x3,%eax
f010237e:	05 40 95 17 f0       	add    $0xf0179540,%eax
f0102383:	89 42 14             	mov    %eax,0x14(%edx)
f0102386:	eb 16                	jmp    f010239e <process_command+0x1ed>
f0102388:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010238b:	89 d0                	mov    %edx,%eax
f010238d:	01 c0                	add    %eax,%eax
f010238f:	01 d0                	add    %edx,%eax
f0102391:	c1 e0 03             	shl    $0x3,%eax
f0102394:	05 40 95 17 f0       	add    $0xf0179540,%eax
f0102399:	a3 70 51 55 f0       	mov    %eax,0xf0555170
f010239e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01023a1:	89 d0                	mov    %edx,%eax
f01023a3:	01 c0                	add    %eax,%eax
f01023a5:	01 d0                	add    %edx,%eax
f01023a7:	c1 e0 03             	shl    $0x3,%eax
f01023aa:	05 40 95 17 f0       	add    $0xf0179540,%eax
f01023af:	a3 6c 51 55 f0       	mov    %eax,0xf055516c
f01023b4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01023b7:	89 d0                	mov    %edx,%eax
f01023b9:	01 c0                	add    %eax,%eax
f01023bb:	01 d0                	add    %edx,%eax
f01023bd:	c1 e0 03             	shl    $0x3,%eax
f01023c0:	05 54 95 17 f0       	add    $0xf0179554,%eax
f01023c5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01023cb:	a1 78 51 55 f0       	mov    0xf0555178,%eax
f01023d0:	40                   	inc    %eax
f01023d1:	a3 78 51 55 f0       	mov    %eax,0xf0555178
                return CMD_INV_NUM_ARGS;
f01023d6:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f01023db:	e9 21 01 00 00       	jmp    f0102501 <process_command+0x350>
                }
            }
            else
            {
            return i;
f01023e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01023e3:	e9 19 01 00 00       	jmp    f0102501 <process_command+0x350>
            }
        }
        else
        {
            const char* ptr1 = arguments[0];
f01023e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01023eb:	8b 00                	mov    (%eax),%eax
f01023ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
            const char* ptr2 = commands[i].name;
f01023f0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01023f3:	89 d0                	mov    %edx,%eax
f01023f5:	01 c0                	add    %eax,%eax
f01023f7:	01 d0                	add    %edx,%eax
f01023f9:	c1 e0 03             	shl    $0x3,%eax
f01023fc:	05 40 95 17 f0       	add    $0xf0179540,%eax
f0102401:	8b 00                	mov    (%eax),%eax
f0102403:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            while (*ptr1 != '\0' && *ptr2 != '\0')
f0102406:	eb 14                	jmp    f010241c <process_command+0x26b>
            {
                if (*ptr1 == *ptr2)
f0102408:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010240b:	8a 10                	mov    (%eax),%dl
f010240d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102410:	8a 00                	mov    (%eax),%al
f0102412:	38 c2                	cmp    %al,%dl
f0102414:	75 03                	jne    f0102419 <process_command+0x268>
                {
                    ptr1++;
f0102416:	ff 45 e8             	incl   -0x18(%ebp)
                }
                ptr2++;
f0102419:	ff 45 e4             	incl   -0x1c(%ebp)
        }
        else
        {
            const char* ptr1 = arguments[0];
            const char* ptr2 = commands[i].name;
            while (*ptr1 != '\0' && *ptr2 != '\0')
f010241c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010241f:	8a 00                	mov    (%eax),%al
f0102421:	84 c0                	test   %al,%al
f0102423:	74 09                	je     f010242e <process_command+0x27d>
f0102425:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102428:	8a 00                	mov    (%eax),%al
f010242a:	84 c0                	test   %al,%al
f010242c:	75 da                	jne    f0102408 <process_command+0x257>
                {
                    ptr1++;
                }
                ptr2++;
            }
            if (*ptr1 == '\0')
f010242e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102431:	8a 00                	mov    (%eax),%al
f0102433:	84 c0                	test   %al,%al
f0102435:	0f 85 a1 00 00 00    	jne    f01024dc <process_command+0x32b>
            {
                LIST_INSERT_HEAD(&foundCommands , &commands[i]);
f010243b:	8b 15 6c 51 55 f0    	mov    0xf055516c,%edx
f0102441:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0102444:	89 c8                	mov    %ecx,%eax
f0102446:	01 c0                	add    %eax,%eax
f0102448:	01 c8                	add    %ecx,%eax
f010244a:	c1 e0 03             	shl    $0x3,%eax
f010244d:	05 50 95 17 f0       	add    $0xf0179550,%eax
f0102452:	89 10                	mov    %edx,(%eax)
f0102454:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0102457:	89 d0                	mov    %edx,%eax
f0102459:	01 c0                	add    %eax,%eax
f010245b:	01 d0                	add    %edx,%eax
f010245d:	c1 e0 03             	shl    $0x3,%eax
f0102460:	05 50 95 17 f0       	add    $0xf0179550,%eax
f0102465:	8b 00                	mov    (%eax),%eax
f0102467:	85 c0                	test   %eax,%eax
f0102469:	74 1c                	je     f0102487 <process_command+0x2d6>
f010246b:	8b 15 6c 51 55 f0    	mov    0xf055516c,%edx
f0102471:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0102474:	89 c8                	mov    %ecx,%eax
f0102476:	01 c0                	add    %eax,%eax
f0102478:	01 c8                	add    %ecx,%eax
f010247a:	c1 e0 03             	shl    $0x3,%eax
f010247d:	05 40 95 17 f0       	add    $0xf0179540,%eax
f0102482:	89 42 14             	mov    %eax,0x14(%edx)
f0102485:	eb 16                	jmp    f010249d <process_command+0x2ec>
f0102487:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010248a:	89 d0                	mov    %edx,%eax
f010248c:	01 c0                	add    %eax,%eax
f010248e:	01 d0                	add    %edx,%eax
f0102490:	c1 e0 03             	shl    $0x3,%eax
f0102493:	05 40 95 17 f0       	add    $0xf0179540,%eax
f0102498:	a3 70 51 55 f0       	mov    %eax,0xf0555170
f010249d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01024a0:	89 d0                	mov    %edx,%eax
f01024a2:	01 c0                	add    %eax,%eax
f01024a4:	01 d0                	add    %edx,%eax
f01024a6:	c1 e0 03             	shl    $0x3,%eax
f01024a9:	05 40 95 17 f0       	add    $0xf0179540,%eax
f01024ae:	a3 6c 51 55 f0       	mov    %eax,0xf055516c
f01024b3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01024b6:	89 d0                	mov    %edx,%eax
f01024b8:	01 c0                	add    %eax,%eax
f01024ba:	01 d0                	add    %edx,%eax
f01024bc:	c1 e0 03             	shl    $0x3,%eax
f01024bf:	05 54 95 17 f0       	add    $0xf0179554,%eax
f01024c4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01024ca:	a1 78 51 55 f0       	mov    0xf0555178,%eax
f01024cf:	40                   	inc    %eax
f01024d0:	a3 78 51 55 f0       	mov    %eax,0xf0555178
                x=1;
f01024d5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
    LIST_FOREACH(element, &foundCommands)
    {
        LIST_REMOVE(&foundCommands,element);
    }
    int x=0;
    for (int i = 0; i < NUM_OF_COMMANDS; i++)
f01024dc:	ff 45 ec             	incl   -0x14(%ebp)
f01024df:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01024e2:	a1 48 99 17 f0       	mov    0xf0179948,%eax
f01024e7:	39 c2                	cmp    %eax,%edx
f01024e9:	0f 82 ae fd ff ff    	jb     f010229d <process_command+0xec>
                LIST_INSERT_HEAD(&foundCommands , &commands[i]);
                x=1;
            }
        }
    }
    if (x==1)
f01024ef:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01024f3:	75 07                	jne    f01024fc <process_command+0x34b>
    {
        return CMD_MATCHED;
f01024f5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01024fa:	eb 05                	jmp    f0102501 <process_command+0x350>
    }
    return CMD_INVALID;
f01024fc:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
f0102501:	c9                   	leave  
f0102502:	c3                   	ret    

f0102503 <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0102503:	55                   	push   %ebp
f0102504:	89 e5                	mov    %esp,%ebp
f0102506:	c7 05 b0 4f 55 f0 00 	movl   $0x0,0xf0554fb0
f010250d:	00 00 00 
f0102510:	90                   	nop
f0102511:	5d                   	pop    %ebp
f0102512:	c3                   	ret    

f0102513 <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0102513:	55                   	push   %ebp
f0102514:	89 e5                	mov    %esp,%ebp
f0102516:	c7 05 b0 4f 55 f0 01 	movl   $0x1,0xf0554fb0
f010251d:	00 00 00 
f0102520:	90                   	nop
f0102521:	5d                   	pop    %ebp
f0102522:	c3                   	ret    

f0102523 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0102523:	55                   	push   %ebp
f0102524:	89 e5                	mov    %esp,%ebp
f0102526:	c7 05 b0 4f 55 f0 02 	movl   $0x2,0xf0554fb0
f010252d:	00 00 00 
f0102530:	90                   	nop
f0102531:	5d                   	pop    %ebp
f0102532:	c3                   	ret    

f0102533 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0102533:	55                   	push   %ebp
f0102534:	89 e5                	mov    %esp,%ebp
f0102536:	c7 05 b0 4f 55 f0 03 	movl   $0x3,0xf0554fb0
f010253d:	00 00 00 
f0102540:	90                   	nop
f0102541:	5d                   	pop    %ebp
f0102542:	c3                   	ret    

f0102543 <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0102543:	55                   	push   %ebp
f0102544:	89 e5                	mov    %esp,%ebp
f0102546:	c7 05 b0 4f 55 f0 04 	movl   $0x4,0xf0554fb0
f010254d:	00 00 00 
f0102550:	90                   	nop
f0102551:	5d                   	pop    %ebp
f0102552:	c3                   	ret    

f0102553 <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0102553:	55                   	push   %ebp
f0102554:	89 e5                	mov    %esp,%ebp
f0102556:	a1 b0 4f 55 f0       	mov    0xf0554fb0,%eax
f010255b:	85 c0                	test   %eax,%eax
f010255d:	75 04                	jne    f0102563 <isKHeapPlacementStrategyCONTALLOC+0x10>
f010255f:	b0 01                	mov    $0x1,%al
f0102561:	eb 02                	jmp    f0102565 <isKHeapPlacementStrategyCONTALLOC+0x12>
f0102563:	b0 00                	mov    $0x0,%al
f0102565:	5d                   	pop    %ebp
f0102566:	c3                   	ret    

f0102567 <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0102567:	55                   	push   %ebp
f0102568:	89 e5                	mov    %esp,%ebp
f010256a:	a1 b0 4f 55 f0       	mov    0xf0554fb0,%eax
f010256f:	83 f8 01             	cmp    $0x1,%eax
f0102572:	75 04                	jne    f0102578 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0102574:	b0 01                	mov    $0x1,%al
f0102576:	eb 02                	jmp    f010257a <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0102578:	b0 00                	mov    $0x0,%al
f010257a:	5d                   	pop    %ebp
f010257b:	c3                   	ret    

f010257c <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010257c:	55                   	push   %ebp
f010257d:	89 e5                	mov    %esp,%ebp
f010257f:	a1 b0 4f 55 f0       	mov    0xf0554fb0,%eax
f0102584:	83 f8 02             	cmp    $0x2,%eax
f0102587:	75 04                	jne    f010258d <isKHeapPlacementStrategyBESTFIT+0x11>
f0102589:	b0 01                	mov    $0x1,%al
f010258b:	eb 02                	jmp    f010258f <isKHeapPlacementStrategyBESTFIT+0x13>
f010258d:	b0 00                	mov    $0x0,%al
f010258f:	5d                   	pop    %ebp
f0102590:	c3                   	ret    

f0102591 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0102591:	55                   	push   %ebp
f0102592:	89 e5                	mov    %esp,%ebp
f0102594:	a1 b0 4f 55 f0       	mov    0xf0554fb0,%eax
f0102599:	83 f8 03             	cmp    $0x3,%eax
f010259c:	75 04                	jne    f01025a2 <isKHeapPlacementStrategyNEXTFIT+0x11>
f010259e:	b0 01                	mov    $0x1,%al
f01025a0:	eb 02                	jmp    f01025a4 <isKHeapPlacementStrategyNEXTFIT+0x13>
f01025a2:	b0 00                	mov    $0x0,%al
f01025a4:	5d                   	pop    %ebp
f01025a5:	c3                   	ret    

f01025a6 <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f01025a6:	55                   	push   %ebp
f01025a7:	89 e5                	mov    %esp,%ebp
f01025a9:	a1 b0 4f 55 f0       	mov    0xf0554fb0,%eax
f01025ae:	83 f8 04             	cmp    $0x4,%eax
f01025b1:	75 04                	jne    f01025b7 <isKHeapPlacementStrategyWORSTFIT+0x11>
f01025b3:	b0 01                	mov    $0x1,%al
f01025b5:	eb 02                	jmp    f01025b9 <isKHeapPlacementStrategyWORSTFIT+0x13>
f01025b7:	b0 00                	mov    $0x0,%al
f01025b9:	5d                   	pop    %ebp
f01025ba:	c3                   	ret    

f01025bb <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f01025bb:	55                   	push   %ebp
f01025bc:	89 e5                	mov    %esp,%ebp
f01025be:	c7 05 04 4f 55 f0 01 	movl   $0x1,0xf0554f04
f01025c5:	00 00 00 
f01025c8:	90                   	nop
f01025c9:	5d                   	pop    %ebp
f01025ca:	c3                   	ret    

f01025cb <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f01025cb:	55                   	push   %ebp
f01025cc:	89 e5                	mov    %esp,%ebp
f01025ce:	c7 05 04 4f 55 f0 02 	movl   $0x2,0xf0554f04
f01025d5:	00 00 00 
f01025d8:	90                   	nop
f01025d9:	5d                   	pop    %ebp
f01025da:	c3                   	ret    

f01025db <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f01025db:	55                   	push   %ebp
f01025dc:	89 e5                	mov    %esp,%ebp
f01025de:	c7 05 04 4f 55 f0 03 	movl   $0x3,0xf0554f04
f01025e5:	00 00 00 
f01025e8:	90                   	nop
f01025e9:	5d                   	pop    %ebp
f01025ea:	c3                   	ret    

f01025eb <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f01025eb:	55                   	push   %ebp
f01025ec:	89 e5                	mov    %esp,%ebp
f01025ee:	c7 05 04 4f 55 f0 04 	movl   $0x4,0xf0554f04
f01025f5:	00 00 00 
f01025f8:	90                   	nop
f01025f9:	5d                   	pop    %ebp
f01025fa:	c3                   	ret    

f01025fb <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f01025fb:	55                   	push   %ebp
f01025fc:	89 e5                	mov    %esp,%ebp
f01025fe:	a1 04 4f 55 f0       	mov    0xf0554f04,%eax
f0102603:	83 f8 01             	cmp    $0x1,%eax
f0102606:	75 04                	jne    f010260c <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0102608:	b0 01                	mov    $0x1,%al
f010260a:	eb 02                	jmp    f010260e <isUHeapPlacementStrategyFIRSTFIT+0x13>
f010260c:	b0 00                	mov    $0x0,%al
f010260e:	5d                   	pop    %ebp
f010260f:	c3                   	ret    

f0102610 <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0102610:	55                   	push   %ebp
f0102611:	89 e5                	mov    %esp,%ebp
f0102613:	a1 04 4f 55 f0       	mov    0xf0554f04,%eax
f0102618:	83 f8 02             	cmp    $0x2,%eax
f010261b:	75 04                	jne    f0102621 <isUHeapPlacementStrategyBESTFIT+0x11>
f010261d:	b0 01                	mov    $0x1,%al
f010261f:	eb 02                	jmp    f0102623 <isUHeapPlacementStrategyBESTFIT+0x13>
f0102621:	b0 00                	mov    $0x0,%al
f0102623:	5d                   	pop    %ebp
f0102624:	c3                   	ret    

f0102625 <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0102625:	55                   	push   %ebp
f0102626:	89 e5                	mov    %esp,%ebp
f0102628:	a1 04 4f 55 f0       	mov    0xf0554f04,%eax
f010262d:	83 f8 03             	cmp    $0x3,%eax
f0102630:	75 04                	jne    f0102636 <isUHeapPlacementStrategyNEXTFIT+0x11>
f0102632:	b0 01                	mov    $0x1,%al
f0102634:	eb 02                	jmp    f0102638 <isUHeapPlacementStrategyNEXTFIT+0x13>
f0102636:	b0 00                	mov    $0x0,%al
f0102638:	5d                   	pop    %ebp
f0102639:	c3                   	ret    

f010263a <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f010263a:	55                   	push   %ebp
f010263b:	89 e5                	mov    %esp,%ebp
f010263d:	a1 04 4f 55 f0       	mov    0xf0554f04,%eax
f0102642:	83 f8 04             	cmp    $0x4,%eax
f0102645:	75 04                	jne    f010264b <isUHeapPlacementStrategyWORSTFIT+0x11>
f0102647:	b0 01                	mov    $0x1,%al
f0102649:	eb 02                	jmp    f010264d <isUHeapPlacementStrategyWORSTFIT+0x13>
f010264b:	b0 00                	mov    $0x0,%al
f010264d:	5d                   	pop    %ebp
f010264e:	c3                   	ret    

f010264f <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f010264f:	55                   	push   %ebp
f0102650:	89 e5                	mov    %esp,%ebp
f0102652:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0102655:	8b 45 08             	mov    0x8(%ebp),%eax
f0102658:	c1 e8 0c             	shr    $0xc,%eax
f010265b:	89 c2                	mov    %eax,%edx
f010265d:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f0102662:	39 c2                	cmp    %eax,%edx
f0102664:	72 14                	jb     f010267a <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0102666:	83 ec 04             	sub    $0x4,%esp
f0102669:	68 bc 2b 12 f0       	push   $0xf0122bbc
f010266e:	6a 55                	push   $0x55
f0102670:	68 e4 2b 12 f0       	push   $0xf0122be4
f0102675:	e8 a0 dc ff ff       	call   f010031a <_panic>
	return &frames_info[PPN(physical_address)];
f010267a:	8b 15 20 4f 55 f0    	mov    0xf0554f20,%edx
f0102680:	8b 45 08             	mov    0x8(%ebp),%eax
f0102683:	c1 e8 0c             	shr    $0xc,%eax
f0102686:	89 c1                	mov    %eax,%ecx
f0102688:	89 c8                	mov    %ecx,%eax
f010268a:	01 c0                	add    %eax,%eax
f010268c:	01 c8                	add    %ecx,%eax
f010268e:	c1 e0 03             	shl    $0x3,%eax
f0102691:	01 d0                	add    %edx,%eax
}
f0102693:	c9                   	leave  
f0102694:	c3                   	ret    

f0102695 <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f0102695:	55                   	push   %ebp
f0102696:	89 e5                	mov    %esp,%ebp
f0102698:	53                   	push   %ebx
f0102699:	83 ec 14             	sub    $0x14,%esp

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f010269c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01026a3:	eb 3b                	jmp    f01026e0 <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f01026a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01026a8:	89 d0                	mov    %edx,%eax
f01026aa:	01 c0                	add    %eax,%eax
f01026ac:	01 d0                	add    %edx,%eax
f01026ae:	c1 e0 03             	shl    $0x3,%eax
f01026b1:	05 44 95 17 f0       	add    $0xf0179544,%eax
f01026b6:	8b 10                	mov    (%eax),%edx
f01026b8:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01026bb:	89 c8                	mov    %ecx,%eax
f01026bd:	01 c0                	add    %eax,%eax
f01026bf:	01 c8                	add    %ecx,%eax
f01026c1:	c1 e0 03             	shl    $0x3,%eax
f01026c4:	05 40 95 17 f0       	add    $0xf0179540,%eax
f01026c9:	8b 00                	mov    (%eax),%eax
f01026cb:	83 ec 04             	sub    $0x4,%esp
f01026ce:	52                   	push   %edx
f01026cf:	50                   	push   %eax
f01026d0:	68 67 34 12 f0       	push   $0xf0123467
f01026d5:	e8 92 e8 ff ff       	call   f0100f6c <cprintf>
f01026da:	83 c4 10             	add    $0x10,%esp
//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{

	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01026dd:	ff 45 f4             	incl   -0xc(%ebp)
f01026e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01026e3:	a1 48 99 17 f0       	mov    0xf0179948,%eax
f01026e8:	39 c2                	cmp    %eax,%edx
f01026ea:	72 b9                	jb     f01026a5 <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f01026ec:	83 ec 0c             	sub    $0xc,%esp
f01026ef:	68 70 34 12 f0       	push   $0xf0123470
f01026f4:	e8 73 e8 ff ff       	call   f0100f6c <cprintf>
f01026f9:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f01026fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102703:	eb 42                	jmp    f0102747 <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f0102705:	8b 0d a4 9c 17 f0    	mov    0xf0179ca4,%ecx
f010270b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010270e:	89 d0                	mov    %edx,%eax
f0102710:	01 c0                	add    %eax,%eax
f0102712:	01 d0                	add    %edx,%eax
f0102714:	c1 e0 02             	shl    $0x2,%eax
f0102717:	01 c8                	add    %ecx,%eax
f0102719:	8b 50 04             	mov    0x4(%eax),%edx
f010271c:	8b 1d a4 9c 17 f0    	mov    0xf0179ca4,%ebx
f0102722:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102725:	89 c8                	mov    %ecx,%eax
f0102727:	01 c0                	add    %eax,%eax
f0102729:	01 c8                	add    %ecx,%eax
f010272b:	c1 e0 02             	shl    $0x2,%eax
f010272e:	01 d8                	add    %ebx,%eax
f0102730:	8b 00                	mov    (%eax),%eax
f0102732:	83 ec 04             	sub    $0x4,%esp
f0102735:	52                   	push   %edx
f0102736:	50                   	push   %eax
f0102737:	68 85 34 12 f0       	push   $0xf0123485
f010273c:	e8 2b e8 ff ff       	call   f0100f6c <cprintf>
f0102741:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f0102744:	ff 45 f4             	incl   -0xc(%ebp)
f0102747:	a1 a8 9c 17 f0       	mov    0xf0179ca8,%eax
f010274c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010274f:	7c b4                	jl     f0102705 <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0102751:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102756:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0102759:	c9                   	leave  
f010275a:	c3                   	ret    

f010275b <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f010275b:	55                   	push   %ebp
f010275c:	89 e5                	mov    %esp,%ebp
f010275e:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0102761:	83 ec 0c             	sub    $0xc,%esp
f0102764:	68 a1 34 12 f0       	push   $0xf01234a1
f0102769:	e8 fe e7 ff ff       	call   f0100f6c <cprintf>
f010276e:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0102771:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f0102776:	83 ec 04             	sub    $0x4,%esp
f0102779:	50                   	push   %eax
f010277a:	68 0c 00 10 f0       	push   $0xf010000c
f010277f:	68 bc 34 12 f0       	push   $0xf01234bc
f0102784:	e8 e3 e7 ff ff       	call   f0100f6c <cprintf>
f0102789:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f010278c:	b8 dd 19 12 00       	mov    $0x1219dd,%eax
f0102791:	83 ec 04             	sub    $0x4,%esp
f0102794:	50                   	push   %eax
f0102795:	68 dd 19 12 f0       	push   $0xf01219dd
f010279a:	68 f8 34 12 f0       	push   $0xf01234f8
f010279f:	e8 c8 e7 ff ff       	call   f0100f6c <cprintf>
f01027a4:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f01027a7:	b8 b2 17 55 00       	mov    $0x5517b2,%eax
f01027ac:	83 ec 04             	sub    $0x4,%esp
f01027af:	50                   	push   %eax
f01027b0:	68 b2 17 55 f0       	push   $0xf05517b2
f01027b5:	68 34 35 12 f0       	push   $0xf0123534
f01027ba:	e8 ad e7 ff ff       	call   f0100f6c <cprintf>
f01027bf:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f01027c2:	b8 a8 79 57 00       	mov    $0x5779a8,%eax
f01027c7:	83 ec 04             	sub    $0x4,%esp
f01027ca:	50                   	push   %eax
f01027cb:	68 a8 79 57 f0       	push   $0xf05779a8
f01027d0:	68 7c 35 12 f0       	push   $0xf012357c
f01027d5:	e8 92 e7 ff ff       	call   f0100f6c <cprintf>
f01027da:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f01027dd:	b8 a8 79 57 f0       	mov    $0xf05779a8,%eax
f01027e2:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f01027e8:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01027ed:	29 c2                	sub    %eax,%edx
f01027ef:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01027f1:	85 c0                	test   %eax,%eax
f01027f3:	79 05                	jns    f01027fa <command_kernel_info+0x9f>
f01027f5:	05 ff 03 00 00       	add    $0x3ff,%eax
f01027fa:	c1 f8 0a             	sar    $0xa,%eax
f01027fd:	83 ec 08             	sub    $0x8,%esp
f0102800:	50                   	push   %eax
f0102801:	68 b8 35 12 f0       	push   $0xf01235b8
f0102806:	e8 61 e7 ff ff       	call   f0100f6c <cprintf>
f010280b:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f010280e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102813:	c9                   	leave  
f0102814:	c3                   	ret    

f0102815 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f0102815:	55                   	push   %ebp
f0102816:	89 e5                	mov    %esp,%ebp
f0102818:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f010281b:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010281f:	75 37                	jne    f0102858 <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0102821:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102824:	83 c0 04             	add    $0x4,%eax
f0102827:	8b 00                	mov    (%eax),%eax
f0102829:	83 ec 04             	sub    $0x4,%esp
f010282c:	6a 10                	push   $0x10
f010282e:	6a 00                	push   $0x0
f0102830:	50                   	push   %eax
f0102831:	e8 b4 e3 01 00       	call   f0120bea <strtol>
f0102836:	83 c4 10             	add    $0x10,%esp
f0102839:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f010283c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010283f:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f0102842:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102845:	83 c0 08             	add    $0x8,%eax
f0102848:	8b 00                	mov    (%eax),%eax
f010284a:	8a 00                	mov    (%eax),%al
f010284c:	88 c2                	mov    %al,%dl
f010284e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102851:	88 10                	mov    %dl,(%eax)
f0102853:	e9 b9 00 00 00       	jmp    f0102911 <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f0102858:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010285c:	0f 85 9f 00 00 00    	jne    f0102901 <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f0102862:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102865:	83 c0 04             	add    $0x4,%eax
f0102868:	8b 00                	mov    (%eax),%eax
f010286a:	83 ec 04             	sub    $0x4,%esp
f010286d:	6a 0a                	push   $0xa
f010286f:	6a 00                	push   $0x0
f0102871:	50                   	push   %eax
f0102872:	e8 73 e3 01 00       	call   f0120bea <strtol>
f0102877:	83 c4 10             	add    $0x10,%esp
f010287a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f010287d:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0102884:	83 ec 04             	sub    $0x4,%esp
f0102887:	6a 00                	push   $0x0
f0102889:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010288c:	50                   	push   %eax
f010288d:	ff 75 f4             	pushl  -0xc(%ebp)
f0102890:	e8 2b 7f 00 00       	call   f010a7c0 <envid2env>
f0102895:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0102898:	8b 45 0c             	mov    0xc(%ebp),%eax
f010289b:	83 c0 08             	add    $0x8,%eax
f010289e:	8b 00                	mov    (%eax),%eax
f01028a0:	83 ec 04             	sub    $0x4,%esp
f01028a3:	6a 10                	push   $0x10
f01028a5:	6a 00                	push   $0x0
f01028a7:	50                   	push   %eax
f01028a8:	e8 3d e3 01 00       	call   f0120bea <strtol>
f01028ad:	83 c4 10             	add    $0x10,%esp
f01028b0:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f01028b3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01028b6:	85 c0                	test   %eax,%eax
f01028b8:	75 07                	jne    f01028c1 <command_writeusermem+0xac>
f01028ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01028bf:	eb 55                	jmp    f0102916 <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f01028c1:	0f 20 d8             	mov    %cr3,%eax
f01028c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f01028c7:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f01028ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f01028cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01028d0:	8b 40 68             	mov    0x68(%eax),%eax
f01028d3:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01028d6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01028d9:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f01028dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01028df:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f01028e2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028e5:	83 c0 0c             	add    $0xc,%eax
f01028e8:	8b 00                	mov    (%eax),%eax
f01028ea:	8a 00                	mov    (%eax),%al
f01028ec:	88 c2                	mov    %al,%dl
f01028ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01028f1:	88 10                	mov    %dl,(%eax)
f01028f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01028f6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01028f9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01028fc:	0f 22 d8             	mov    %eax,%cr3
f01028ff:	eb 10                	jmp    f0102911 <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f0102901:	83 ec 0c             	sub    $0xc,%esp
f0102904:	68 e4 35 12 f0       	push   $0xf01235e4
f0102909:	e8 5e e6 ff ff       	call   f0100f6c <cprintf>
f010290e:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102911:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102916:	c9                   	leave  
f0102917:	c3                   	ret    

f0102918 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f0102918:	55                   	push   %ebp
f0102919:	89 e5                	mov    %esp,%ebp
f010291b:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f010291e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102921:	83 c0 04             	add    $0x4,%eax
f0102924:	8b 00                	mov    (%eax),%eax
f0102926:	83 ec 04             	sub    $0x4,%esp
f0102929:	6a 10                	push   $0x10
f010292b:	6a 00                	push   $0x0
f010292d:	50                   	push   %eax
f010292e:	e8 b7 e2 01 00       	call   f0120bea <strtol>
f0102933:	83 c4 10             	add    $0x10,%esp
f0102936:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010293b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int c, i=0;
f010293e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int stringLen = strlen(arguments[2]);
f0102945:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102948:	83 c0 08             	add    $0x8,%eax
f010294b:	8b 00                	mov    (%eax),%eax
f010294d:	83 ec 0c             	sub    $0xc,%esp
f0102950:	50                   	push   %eax
f0102951:	e8 34 df 01 00       	call   f012088a <strlen>
f0102956:	83 c4 10             	add    $0x10,%esp
f0102959:	89 45 ec             	mov    %eax,-0x14(%ebp)

	for(i=0;i < stringLen; i++)
f010295c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102963:	eb 1c                	jmp    f0102981 <command_writemem_k+0x69>
	{
		*address = arguments[2][i];
f0102965:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102968:	83 c0 08             	add    $0x8,%eax
f010296b:	8b 10                	mov    (%eax),%edx
f010296d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102970:	01 d0                	add    %edx,%eax
f0102972:	8a 00                	mov    (%eax),%al
f0102974:	88 c2                	mov    %al,%dl
f0102976:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102979:	88 10                	mov    %dl,(%eax)
		address++;
f010297b:	ff 45 f4             	incl   -0xc(%ebp)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int c, i=0;
	int stringLen = strlen(arguments[2]);

	for(i=0;i < stringLen; i++)
f010297e:	ff 45 f0             	incl   -0x10(%ebp)
f0102981:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102984:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0102987:	7c dc                	jl     f0102965 <command_writemem_k+0x4d>
	{
		*address = arguments[2][i];
		address++;
	}

	return 0;
f0102989:	b8 00 00 00 00       	mov    $0x0,%eax


}
f010298e:	c9                   	leave  
f010298f:	c3                   	ret    

f0102990 <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f0102990:	55                   	push   %ebp
f0102991:	89 e5                	mov    %esp,%ebp
f0102993:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0102996:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010299a:	75 42                	jne    f01029de <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f010299c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010299f:	83 c0 04             	add    $0x4,%eax
f01029a2:	8b 00                	mov    (%eax),%eax
f01029a4:	83 ec 04             	sub    $0x4,%esp
f01029a7:	6a 10                	push   $0x10
f01029a9:	6a 00                	push   $0x0
f01029ab:	50                   	push   %eax
f01029ac:	e8 39 e2 01 00       	call   f0120bea <strtol>
f01029b1:	83 c4 10             	add    $0x10,%esp
f01029b4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f01029b7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01029ba:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f01029bd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01029c0:	8a 00                	mov    (%eax),%al
f01029c2:	0f b6 c0             	movzbl %al,%eax
f01029c5:	83 ec 04             	sub    $0x4,%esp
f01029c8:	50                   	push   %eax
f01029c9:	ff 75 d8             	pushl  -0x28(%ebp)
f01029cc:	68 0e 36 12 f0       	push   $0xf012360e
f01029d1:	e8 96 e5 ff ff       	call   f0100f6c <cprintf>
f01029d6:	83 c4 10             	add    $0x10,%esp
f01029d9:	e9 c4 00 00 00       	jmp    f0102aa2 <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f01029de:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01029e2:	0f 85 aa 00 00 00    	jne    f0102a92 <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01029e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029eb:	83 c0 04             	add    $0x4,%eax
f01029ee:	8b 00                	mov    (%eax),%eax
f01029f0:	83 ec 04             	sub    $0x4,%esp
f01029f3:	6a 0a                	push   $0xa
f01029f5:	6a 00                	push   $0x0
f01029f7:	50                   	push   %eax
f01029f8:	e8 ed e1 01 00       	call   f0120bea <strtol>
f01029fd:	83 c4 10             	add    $0x10,%esp
f0102a00:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0102a03:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f0102a0a:	83 ec 04             	sub    $0x4,%esp
f0102a0d:	6a 00                	push   $0x0
f0102a0f:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0102a12:	50                   	push   %eax
f0102a13:	ff 75 f4             	pushl  -0xc(%ebp)
f0102a16:	e8 a5 7d 00 00       	call   f010a7c0 <envid2env>
f0102a1b:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0102a1e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a21:	83 c0 08             	add    $0x8,%eax
f0102a24:	8b 00                	mov    (%eax),%eax
f0102a26:	83 ec 04             	sub    $0x4,%esp
f0102a29:	6a 10                	push   $0x10
f0102a2b:	6a 00                	push   $0x0
f0102a2d:	50                   	push   %eax
f0102a2e:	e8 b7 e1 01 00       	call   f0120bea <strtol>
f0102a33:	83 c4 10             	add    $0x10,%esp
f0102a36:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0102a39:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102a3c:	85 c0                	test   %eax,%eax
f0102a3e:	75 07                	jne    f0102a47 <command_readusermem+0xb7>
f0102a40:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a45:	eb 60                	jmp    f0102aa7 <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0102a47:	0f 20 d8             	mov    %cr3,%eax
f0102a4a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0102a4d:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0102a50:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f0102a53:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102a56:	8b 40 68             	mov    0x68(%eax),%eax
f0102a59:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102a5c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102a5f:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0102a62:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102a65:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f0102a68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102a6b:	8a 00                	mov    (%eax),%al
f0102a6d:	0f b6 c0             	movzbl %al,%eax
f0102a70:	83 ec 04             	sub    $0x4,%esp
f0102a73:	50                   	push   %eax
f0102a74:	ff 75 f0             	pushl  -0x10(%ebp)
f0102a77:	68 0e 36 12 f0       	push   $0xf012360e
f0102a7c:	e8 eb e4 ff ff       	call   f0100f6c <cprintf>
f0102a81:	83 c4 10             	add    $0x10,%esp
f0102a84:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102a87:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0102a8a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102a8d:	0f 22 d8             	mov    %eax,%cr3
f0102a90:	eb 10                	jmp    f0102aa2 <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f0102a92:	83 ec 0c             	sub    $0xc,%esp
f0102a95:	68 28 36 12 f0       	push   $0xf0123628
f0102a9a:	e8 cd e4 ff ff       	call   f0100f6c <cprintf>
f0102a9f:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102aa2:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0102aa7:	c9                   	leave  
f0102aa8:	c3                   	ret    

f0102aa9 <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f0102aa9:	55                   	push   %ebp
f0102aaa:	89 e5                	mov    %esp,%ebp
f0102aac:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0102aaf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102ab2:	83 c0 04             	add    $0x4,%eax
f0102ab5:	8b 00                	mov    (%eax),%eax
f0102ab7:	83 ec 04             	sub    $0x4,%esp
f0102aba:	6a 10                	push   $0x10
f0102abc:	6a 00                	push   $0x0
f0102abe:	50                   	push   %eax
f0102abf:	e8 26 e1 01 00       	call   f0120bea <strtol>
f0102ac4:	83 c4 10             	add    $0x10,%esp
f0102ac7:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0102acc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int i=0;
f0102acf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("%c",*address);
f0102ad6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102ad9:	8a 00                	mov    (%eax),%al
f0102adb:	0f b6 c0             	movzbl %al,%eax
f0102ade:	83 ec 08             	sub    $0x8,%esp
f0102ae1:	50                   	push   %eax
f0102ae2:	68 52 36 12 f0       	push   $0xf0123652
f0102ae7:	e8 80 e4 ff ff       	call   f0100f6c <cprintf>
f0102aec:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0102aef:	83 ec 0c             	sub    $0xc,%esp
f0102af2:	68 55 36 12 f0       	push   $0xf0123655
f0102af7:	e8 70 e4 ff ff       	call   f0100f6c <cprintf>
f0102afc:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102aff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b04:	c9                   	leave  
f0102b05:	c3                   	ret    

f0102b06 <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f0102b06:	55                   	push   %ebp
f0102b07:	89 e5                	mov    %esp,%ebp
f0102b09:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0102b0c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b0f:	83 c0 04             	add    $0x4,%eax
f0102b12:	8b 00                	mov    (%eax),%eax
f0102b14:	83 ec 04             	sub    $0x4,%esp
f0102b17:	6a 0a                	push   $0xa
f0102b19:	6a 00                	push   $0x0
f0102b1b:	50                   	push   %eax
f0102b1c:	e8 c9 e0 01 00       	call   f0120bea <strtol>
f0102b21:	83 c4 10             	add    $0x10,%esp
f0102b24:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f0102b27:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f0102b2e:	83 ec 04             	sub    $0x4,%esp
f0102b31:	6a 00                	push   $0x0
f0102b33:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0102b36:	50                   	push   %eax
f0102b37:	ff 75 ec             	pushl  -0x14(%ebp)
f0102b3a:	e8 81 7c 00 00       	call   f010a7c0 <envid2env>
f0102b3f:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f0102b42:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b45:	83 c0 08             	add    $0x8,%eax
f0102b48:	8b 00                	mov    (%eax),%eax
f0102b4a:	83 ec 04             	sub    $0x4,%esp
f0102b4d:	6a 10                	push   $0x10
f0102b4f:	6a 00                	push   $0x0
f0102b51:	50                   	push   %eax
f0102b52:	e8 93 e0 01 00       	call   f0120bea <strtol>
f0102b57:	83 c4 10             	add    $0x10,%esp
f0102b5a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f0102b5d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b60:	83 c0 0c             	add    $0xc,%eax
f0102b63:	8b 00                	mov    (%eax),%eax
f0102b65:	83 ec 04             	sub    $0x4,%esp
f0102b68:	6a 0a                	push   $0xa
f0102b6a:	6a 00                	push   $0x0
f0102b6c:	50                   	push   %eax
f0102b6d:	e8 78 e0 01 00       	call   f0120bea <strtol>
f0102b72:	83 c4 10             	add    $0x10,%esp
f0102b75:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0102b78:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0102b7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f0102b7e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102b81:	85 c0                	test   %eax,%eax
f0102b83:	75 07                	jne    f0102b8c <command_readuserblock+0x86>
f0102b85:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b8a:	eb 65                	jmp    f0102bf1 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0102b8c:	0f 20 d8             	mov    %cr3,%eax
f0102b8f:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0102b92:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f0102b95:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0102b98:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0102b9b:	8b 40 68             	mov    0x68(%eax),%eax
f0102b9e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0102ba1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0102ba4:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f0102ba7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0102bae:	eb 28                	jmp    f0102bd8 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f0102bb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102bb3:	8a 00                	mov    (%eax),%al
f0102bb5:	0f b6 d0             	movzbl %al,%edx
f0102bb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102bbb:	8a 00                	mov    (%eax),%al
f0102bbd:	0f b6 c0             	movzbl %al,%eax
f0102bc0:	52                   	push   %edx
f0102bc1:	50                   	push   %eax
f0102bc2:	ff 75 f4             	pushl  -0xc(%ebp)
f0102bc5:	68 57 36 12 f0       	push   $0xf0123657
f0102bca:	e8 9d e3 ff ff       	call   f0100f6c <cprintf>
f0102bcf:	83 c4 10             	add    $0x10,%esp
		ptr++;
f0102bd2:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f0102bd5:	ff 45 f0             	incl   -0x10(%ebp)
f0102bd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102bdb:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0102bde:	7c d0                	jl     f0102bb0 <command_readuserblock+0xaa>
f0102be0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102be3:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0102be6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0102be9:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f0102bec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102bf1:	c9                   	leave  
f0102bf2:	c3                   	ret    

f0102bf3 <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f0102bf3:	55                   	push   %ebp
f0102bf4:	89 e5                	mov    %esp,%ebp
f0102bf6:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0102bf9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bfc:	83 c0 04             	add    $0x4,%eax
f0102bff:	8b 00                	mov    (%eax),%eax
f0102c01:	83 ec 04             	sub    $0x4,%esp
f0102c04:	6a 0a                	push   $0xa
f0102c06:	6a 00                	push   $0x0
f0102c08:	50                   	push   %eax
f0102c09:	e8 dc df 01 00       	call   f0120bea <strtol>
f0102c0e:	83 c4 10             	add    $0x10,%esp
f0102c11:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f0102c14:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0102c1b:	83 ec 04             	sub    $0x4,%esp
f0102c1e:	6a 00                	push   $0x0
f0102c20:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0102c23:	50                   	push   %eax
f0102c24:	ff 75 f4             	pushl  -0xc(%ebp)
f0102c27:	e8 94 7b 00 00       	call   f010a7c0 <envid2env>
f0102c2c:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0102c2f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102c32:	85 c0                	test   %eax,%eax
f0102c34:	75 0a                	jne    f0102c40 <command_remove_table+0x4d>
f0102c36:	b8 00 00 00 00       	mov    $0x0,%eax
f0102c3b:	e9 a1 00 00 00       	jmp    f0102ce1 <command_remove_table+0xee>

	uint32 address = strtol(arguments[2], NULL, 16);
f0102c40:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c43:	83 c0 08             	add    $0x8,%eax
f0102c46:	8b 00                	mov    (%eax),%eax
f0102c48:	83 ec 04             	sub    $0x4,%esp
f0102c4b:	6a 10                	push   $0x10
f0102c4d:	6a 00                	push   $0x0
f0102c4f:	50                   	push   %eax
f0102c50:	e8 95 df 01 00       	call   f0120bea <strtol>
f0102c55:	83 c4 10             	add    $0x10,%esp
f0102c58:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0102c5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0102c5e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0102c61:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102c64:	8b 40 64             	mov    0x64(%eax),%eax
f0102c67:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102c6a:	c1 ea 16             	shr    $0x16,%edx
f0102c6d:	c1 e2 02             	shl    $0x2,%edx
f0102c70:	01 d0                	add    %edx,%eax
f0102c72:	8b 00                	mov    (%eax),%eax
f0102c74:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0102c79:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree((void*)kheap_virtual_address(table_pa));
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f0102c7c:	83 ec 0c             	sub    $0xc,%esp
f0102c7f:	ff 75 e8             	pushl  -0x18(%ebp)
f0102c82:	e8 c8 f9 ff ff       	call   f010264f <to_frame_info>
f0102c87:	83 c4 10             	add    $0x10,%esp
f0102c8a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0102c8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102c90:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f0102c96:	83 ec 0c             	sub    $0xc,%esp
f0102c99:	ff 75 e4             	pushl  -0x1c(%ebp)
f0102c9c:	e8 83 56 00 00       	call   f0108324 <free_frame>
f0102ca1:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f0102ca4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102ca7:	c1 e8 16             	shr    $0x16,%eax
f0102caa:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f0102cad:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102cb0:	8b 40 64             	mov    0x64(%eax),%eax
f0102cb3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102cb6:	c1 e2 02             	shl    $0x2,%edx
f0102cb9:	01 c2                	add    %eax,%edx
f0102cbb:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0102cbe:	8b 40 64             	mov    0x64(%eax),%eax
f0102cc1:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f0102cc4:	c1 e1 02             	shl    $0x2,%ecx
f0102cc7:	01 c8                	add    %ecx,%eax
f0102cc9:	8b 00                	mov    (%eax),%eax
f0102ccb:	83 e0 fe             	and    $0xfffffffe,%eax
f0102cce:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0102cd0:	0f 20 d8             	mov    %cr3,%eax
f0102cd3:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0102cd6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0102cd9:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f0102cdc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102ce1:	c9                   	leave  
f0102ce2:	c3                   	ret    

f0102ce3 <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f0102ce3:	55                   	push   %ebp
f0102ce4:	89 e5                	mov    %esp,%ebp
f0102ce6:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f0102ce9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102ced:	7e 06                	jle    f0102cf5 <command_allocuserpage+0x12>
f0102cef:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102cf3:	7e 1a                	jle    f0102d0f <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f0102cf5:	83 ec 0c             	sub    $0xc,%esp
f0102cf8:	68 68 36 12 f0       	push   $0xf0123668
f0102cfd:	e8 6a e2 ff ff       	call   f0100f6c <cprintf>
f0102d02:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102d05:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d0a:	e9 46 01 00 00       	jmp    f0102e55 <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0102d0f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d12:	83 c0 04             	add    $0x4,%eax
f0102d15:	8b 00                	mov    (%eax),%eax
f0102d17:	83 ec 04             	sub    $0x4,%esp
f0102d1a:	6a 0a                	push   $0xa
f0102d1c:	6a 00                	push   $0x0
f0102d1e:	50                   	push   %eax
f0102d1f:	e8 c6 de 01 00       	call   f0120bea <strtol>
f0102d24:	83 c4 10             	add    $0x10,%esp
f0102d27:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0102d2a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0102d31:	83 ec 04             	sub    $0x4,%esp
f0102d34:	6a 00                	push   $0x0
f0102d36:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0102d39:	50                   	push   %eax
f0102d3a:	ff 75 f0             	pushl  -0x10(%ebp)
f0102d3d:	e8 7e 7a 00 00       	call   f010a7c0 <envid2env>
f0102d42:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0102d45:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102d48:	85 c0                	test   %eax,%eax
f0102d4a:	75 0a                	jne    f0102d56 <command_allocuserpage+0x73>
f0102d4c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d51:	e9 ff 00 00 00       	jmp    f0102e55 <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f0102d56:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102d59:	83 c0 08             	add    $0x8,%eax
f0102d5c:	8b 00                	mov    (%eax),%eax
f0102d5e:	83 ec 04             	sub    $0x4,%esp
f0102d61:	6a 10                	push   $0x10
f0102d63:	6a 00                	push   $0x0
f0102d65:	50                   	push   %eax
f0102d66:	e8 7f de 01 00       	call   f0120bea <strtol>
f0102d6b:	83 c4 10             	add    $0x10,%esp
f0102d6e:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0102d71:	83 ec 0c             	sub    $0xc,%esp
f0102d74:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0102d77:	50                   	push   %eax
f0102d78:	e8 53 54 00 00       	call   f01081d0 <allocate_frame>
f0102d7d:	83 c4 10             	add    $0x10,%esp
f0102d80:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f0102d83:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f0102d87:	75 1a                	jne    f0102da3 <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0102d89:	83 ec 0c             	sub    $0xc,%esp
f0102d8c:	68 92 36 12 f0       	push   $0xf0123692
f0102d91:	e8 d6 e1 ff ff       	call   f0100f6c <cprintf>
f0102d96:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102d99:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d9e:	e9 b2 00 00 00       	jmp    f0102e55 <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f0102da3:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102da7:	75 1d                	jne    f0102dc6 <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f0102da9:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102dac:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102daf:	8b 40 64             	mov    0x64(%eax),%eax
f0102db2:	6a 06                	push   $0x6
f0102db4:	ff 75 ec             	pushl  -0x14(%ebp)
f0102db7:	52                   	push   %edx
f0102db8:	50                   	push   %eax
f0102db9:	e8 28 58 00 00       	call   f01085e6 <map_frame>
f0102dbe:	83 c4 10             	add    $0x10,%esp
f0102dc1:	e9 8a 00 00 00       	jmp    f0102e50 <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f0102dc6:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102dca:	0f 85 80 00 00 00    	jne    f0102e50 <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f0102dd0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102dd3:	83 c0 0c             	add    $0xc,%eax
f0102dd6:	8b 00                	mov    (%eax),%eax
f0102dd8:	8a 00                	mov    (%eax),%al
f0102dda:	3c 72                	cmp    $0x72,%al
f0102ddc:	74 0e                	je     f0102dec <command_allocuserpage+0x109>
f0102dde:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102de1:	83 c0 0c             	add    $0xc,%eax
f0102de4:	8b 00                	mov    (%eax),%eax
f0102de6:	8a 00                	mov    (%eax),%al
f0102de8:	3c 52                	cmp    $0x52,%al
f0102dea:	75 09                	jne    f0102df5 <command_allocuserpage+0x112>
			rw = 0 ;
f0102dec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0102df3:	eb 3c                	jmp    f0102e31 <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f0102df5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102df8:	83 c0 0c             	add    $0xc,%eax
f0102dfb:	8b 00                	mov    (%eax),%eax
f0102dfd:	8a 00                	mov    (%eax),%al
f0102dff:	3c 77                	cmp    $0x77,%al
f0102e01:	74 0e                	je     f0102e11 <command_allocuserpage+0x12e>
f0102e03:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e06:	83 c0 0c             	add    $0xc,%eax
f0102e09:	8b 00                	mov    (%eax),%eax
f0102e0b:	8a 00                	mov    (%eax),%al
f0102e0d:	3c 57                	cmp    $0x57,%al
f0102e0f:	75 09                	jne    f0102e1a <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f0102e11:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0102e18:	eb 17                	jmp    f0102e31 <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0102e1a:	83 ec 0c             	sub    $0xc,%esp
f0102e1d:	68 ac 36 12 f0       	push   $0xf01236ac
f0102e22:	e8 45 e1 ff ff       	call   f0100f6c <cprintf>
f0102e27:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0102e2a:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0102e31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102e34:	83 c8 04             	or     $0x4,%eax
f0102e37:	89 c1                	mov    %eax,%ecx
f0102e39:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0102e3c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0102e3f:	8b 40 64             	mov    0x64(%eax),%eax
f0102e42:	51                   	push   %ecx
f0102e43:	ff 75 ec             	pushl  -0x14(%ebp)
f0102e46:	52                   	push   %edx
f0102e47:	50                   	push   %eax
f0102e48:	e8 99 57 00 00       	call   f01085e6 <map_frame>
f0102e4d:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0102e50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102e55:	c9                   	leave  
f0102e56:	c3                   	ret    

f0102e57 <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f0102e57:	55                   	push   %ebp
f0102e58:	89 e5                	mov    %esp,%ebp
f0102e5a:	56                   	push   %esi
f0102e5b:	53                   	push   %ebx
f0102e5c:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0102e5f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0102e62:	83 ec 0c             	sub    $0xc,%esp
f0102e65:	50                   	push   %eax
f0102e66:	e8 33 5a 00 00       	call   f010889e <calculate_available_frames>
f0102e6b:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102e6e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0102e71:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0102e74:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f0102e77:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0102e7a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0102e7d:	01 de                	add    %ebx,%esi
f0102e7f:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0102e82:	01 f3                	add    %esi,%ebx
f0102e84:	83 ec 0c             	sub    $0xc,%esp
f0102e87:	51                   	push   %ecx
f0102e88:	52                   	push   %edx
f0102e89:	50                   	push   %eax
f0102e8a:	53                   	push   %ebx
f0102e8b:	68 f0 36 12 f0       	push   $0xf01236f0
f0102e90:	e8 d7 e0 ff ff       	call   f0100f6c <cprintf>
f0102e95:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0102e98:	a1 d0 50 55 f0       	mov    0xf05550d0,%eax
f0102e9d:	83 ec 08             	sub    $0x8,%esp
f0102ea0:	50                   	push   %eax
f0102ea1:	68 48 37 12 f0       	push   $0xf0123748
f0102ea6:	e8 c1 e0 ff ff       	call   f0100f6c <cprintf>
f0102eab:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102eae:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102eb3:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0102eb6:	5b                   	pop    %ebx
f0102eb7:	5e                   	pop    %esi
f0102eb8:	5d                   	pop    %ebp
f0102eb9:	c3                   	ret    

f0102eba <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f0102eba:	55                   	push   %ebp
f0102ebb:	89 e5                	mov    %esp,%ebp
f0102ebd:	83 ec 28             	sub    $0x28,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f0102ec0:	c7 45 ec 88 13 00 00 	movl   $0x1388,-0x14(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f0102ec7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f0102ece:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int BSDSchedNiceVal = -100;				//arg#5 default
f0102ed5:	c7 45 e8 9c ff ff ff 	movl   $0xffffff9c,-0x18(%ebp)
//			assert(BSDSchedNiceVal >= -20 && BSDSchedNiceVal <= 20);
//		}
	}
#else
	{
		switch (number_of_arguments)
f0102edc:	8b 45 08             	mov    0x8(%ebp),%eax
f0102edf:	83 f8 02             	cmp    $0x2,%eax
f0102ee2:	74 3c                	je     f0102f20 <CreateEnv+0x66>
f0102ee4:	83 f8 03             	cmp    $0x3,%eax
f0102ee7:	75 1d                	jne    f0102f06 <CreateEnv+0x4c>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
f0102ee9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102eec:	83 c0 08             	add    $0x8,%eax
f0102eef:	8b 00                	mov    (%eax),%eax
f0102ef1:	83 ec 04             	sub    $0x4,%esp
f0102ef4:	6a 0a                	push   $0xa
f0102ef6:	6a 00                	push   $0x0
f0102ef8:	50                   	push   %eax
f0102ef9:	e8 ec dc 01 00       	call   f0120bea <strtol>
f0102efe:	83 c4 10             	add    $0x10,%esp
f0102f01:	89 45 f0             	mov    %eax,-0x10(%ebp)
			break;
f0102f04:	eb 1b                	jmp    f0102f21 <CreateEnv+0x67>
		case 2:
			break;
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f0102f06:	83 ec 0c             	sub    $0xc,%esp
f0102f09:	68 84 37 12 f0       	push   $0xf0123784
f0102f0e:	e8 59 e0 ff ff       	call   f0100f6c <cprintf>
f0102f13:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0102f16:	b8 00 00 00 00       	mov    $0x0,%eax
f0102f1b:	e9 a7 00 00 00       	jmp    f0102fc7 <CreateEnv+0x10d>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
			break;
		case 2:
			break;
f0102f20:	90                   	nop
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
			return NULL;

			break;
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0102f21:	83 ec 0c             	sub    $0xc,%esp
f0102f24:	6a 02                	push   $0x2
f0102f26:	e8 9b b7 00 00       	call   f010e6c6 <isPageReplacmentAlgorithmLRU>
f0102f2b:	83 c4 10             	add    $0x10,%esp
f0102f2e:	85 c0                	test   %eax,%eax
f0102f30:	74 07                	je     f0102f39 <CreateEnv+0x7f>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
f0102f32:	c7 45 f4 f4 01 00 00 	movl   $0x1f4,-0xc(%ebp)
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0102f39:	83 7d f0 64          	cmpl   $0x64,-0x10(%ebp)
f0102f3d:	76 19                	jbe    f0102f58 <CreateEnv+0x9e>
f0102f3f:	68 f4 37 12 f0       	push   $0xf01237f4
f0102f44:	68 39 38 12 f0       	push   $0xf0123839
f0102f49:	68 c0 01 00 00       	push   $0x1c0
f0102f4e:	68 4e 38 12 f0       	push   $0xf012384e
f0102f53:	e8 c2 d3 ff ff       	call   f010031a <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0102f58:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102f5b:	83 c0 04             	add    $0x4,%eax
f0102f5e:	8b 00                	mov    (%eax),%eax
f0102f60:	ff 75 f0             	pushl  -0x10(%ebp)
f0102f63:	ff 75 f4             	pushl  -0xc(%ebp)
f0102f66:	ff 75 ec             	pushl  -0x14(%ebp)
f0102f69:	50                   	push   %eax
f0102f6a:	e8 01 6b 00 00       	call   f0109a70 <env_create>
f0102f6f:	83 c4 10             	add    $0x10,%esp
f0102f72:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (BSDSchedNiceVal != -100)
f0102f75:	83 7d e8 9c          	cmpl   $0xffffff9c,-0x18(%ebp)
f0102f79:	74 49                	je     f0102fc4 <CreateEnv+0x10a>
	{
		cprintf("nice value = %d\n", BSDSchedNiceVal);
f0102f7b:	83 ec 08             	sub    $0x8,%esp
f0102f7e:	ff 75 e8             	pushl  -0x18(%ebp)
f0102f81:	68 62 38 12 f0       	push   $0xf0123862
f0102f86:	e8 e1 df ff ff       	call   f0100f6c <cprintf>
f0102f8b:	83 c4 10             	add    $0x10,%esp
		assert(BSDSchedNiceVal >= -20 && BSDSchedNiceVal <= 20);
f0102f8e:	83 7d e8 ec          	cmpl   $0xffffffec,-0x18(%ebp)
f0102f92:	7c 06                	jl     f0102f9a <CreateEnv+0xe0>
f0102f94:	83 7d e8 14          	cmpl   $0x14,-0x18(%ebp)
f0102f98:	7e 19                	jle    f0102fb3 <CreateEnv+0xf9>
f0102f9a:	68 74 38 12 f0       	push   $0xf0123874
f0102f9f:	68 39 38 12 f0       	push   $0xf0123839
f0102fa4:	68 c5 01 00 00       	push   $0x1c5
f0102fa9:	68 4e 38 12 f0       	push   $0xf012384e
f0102fae:	e8 67 d3 ff ff       	call   f010031a <_panic>
		env_set_nice(env, BSDSchedNiceVal);
f0102fb3:	83 ec 08             	sub    $0x8,%esp
f0102fb6:	ff 75 e8             	pushl  -0x18(%ebp)
f0102fb9:	ff 75 e4             	pushl  -0x1c(%ebp)
f0102fbc:	e8 e6 36 00 00       	call   f01066a7 <env_set_nice>
f0102fc1:	83 c4 10             	add    $0x10,%esp
	}
	return env;
f0102fc4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f0102fc7:	c9                   	leave  
f0102fc8:	c3                   	ret    

f0102fc9 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0102fc9:	55                   	push   %ebp
f0102fca:	89 e5                	mov    %esp,%ebp
f0102fcc:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0102fcf:	83 ec 08             	sub    $0x8,%esp
f0102fd2:	ff 75 0c             	pushl  0xc(%ebp)
f0102fd5:	ff 75 08             	pushl  0x8(%ebp)
f0102fd8:	e8 dd fe ff ff       	call   f0102eba <CreateEnv>
f0102fdd:	83 c4 10             	add    $0x10,%esp
f0102fe0:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0102fe3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102fe7:	75 07                	jne    f0102ff0 <command_run_program+0x27>
f0102fe9:	b8 00 00 00 00       	mov    $0x0,%eax
f0102fee:	eb 46                	jmp    f0103036 <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0102ff0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102ff3:	8b 40 10             	mov    0x10(%eax),%eax
f0102ff6:	83 ec 08             	sub    $0x8,%esp
f0102ff9:	50                   	push   %eax
f0102ffa:	68 a4 38 12 f0       	push   $0xf01238a4
f0102fff:	e8 68 df ff ff       	call   f0100f6c <cprintf>
f0103004:	83 c4 10             	add    $0x10,%esp

	//[2] Place it in the NEW queue
	sched_new_env(env);
f0103007:	83 ec 0c             	sub    $0xc,%esp
f010300a:	ff 75 f4             	pushl  -0xc(%ebp)
f010300d:	e8 93 26 00 00       	call   f01056a5 <sched_new_env>
f0103012:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0103015:	c7 05 d0 50 55 f0 00 	movl   $0x0,0xf05550d0
f010301c:	00 00 00 

	//[3] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_run_env(env->env_id);
f010301f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103022:	8b 40 10             	mov    0x10(%eax),%eax
f0103025:	83 ec 0c             	sub    $0xc,%esp
f0103028:	50                   	push   %eax
f0103029:	e8 cd 26 00 00       	call   f01056fb <sched_run_env>
f010302e:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103031:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103036:	c9                   	leave  
f0103037:	c3                   	ret    

f0103038 <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0103038:	55                   	push   %ebp
f0103039:	89 e5                	mov    %esp,%ebp
f010303b:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f010303e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103041:	83 c0 04             	add    $0x4,%eax
f0103044:	8b 00                	mov    (%eax),%eax
f0103046:	83 ec 04             	sub    $0x4,%esp
f0103049:	6a 0a                	push   $0xa
f010304b:	6a 00                	push   $0x0
f010304d:	50                   	push   %eax
f010304e:	e8 97 db 01 00       	call   f0120bea <strtol>
f0103053:	83 c4 10             	add    $0x10,%esp
f0103056:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0103059:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010305c:	83 ec 0c             	sub    $0xc,%esp
f010305f:	50                   	push   %eax
f0103060:	e8 fe 29 00 00       	call   f0105a63 <sched_kill_env>
f0103065:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103068:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010306d:	c9                   	leave  
f010306e:	c3                   	ret    

f010306f <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f010306f:	55                   	push   %ebp
f0103070:	89 e5                	mov    %esp,%ebp
f0103072:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0103075:	83 ec 08             	sub    $0x8,%esp
f0103078:	ff 75 0c             	pushl  0xc(%ebp)
f010307b:	ff 75 08             	pushl  0x8(%ebp)
f010307e:	e8 37 fe ff ff       	call   f0102eba <CreateEnv>
f0103083:	83 c4 10             	add    $0x10,%esp
f0103086:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0103089:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010308d:	75 07                	jne    f0103096 <commnad_load_env+0x27>
		return 0 ;
f010308f:	b8 00 00 00 00       	mov    $0x0,%eax
f0103094:	eb 2a                	jmp    f01030c0 <commnad_load_env+0x51>

	sched_new_env(env) ;
f0103096:	83 ec 0c             	sub    $0xc,%esp
f0103099:	ff 75 f4             	pushl  -0xc(%ebp)
f010309c:	e8 04 26 00 00       	call   f01056a5 <sched_new_env>
f01030a1:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f01030a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01030a7:	8b 40 10             	mov    0x10(%eax),%eax
f01030aa:	83 ec 08             	sub    $0x8,%esp
f01030ad:	50                   	push   %eax
f01030ae:	68 a4 38 12 f0       	push   $0xf01238a4
f01030b3:	e8 b4 de ff ff       	call   f0100f6c <cprintf>
f01030b8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01030bb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030c0:	c9                   	leave  
f01030c1:	c3                   	ret    

f01030c2 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f01030c2:	55                   	push   %ebp
f01030c3:	89 e5                	mov    %esp,%ebp
f01030c5:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f01030c8:	c7 05 d0 50 55 f0 00 	movl   $0x0,0xf05550d0
f01030cf:	00 00 00 
	sched_run_all();
f01030d2:	e8 7b 2f 00 00       	call   f0106052 <sched_run_all>

	return 0 ;
f01030d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030dc:	c9                   	leave  
f01030dd:	c3                   	ret    

f01030de <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f01030de:	55                   	push   %ebp
f01030df:	89 e5                	mov    %esp,%ebp
f01030e1:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f01030e4:	e8 38 2d 00 00       	call   f0105e21 <sched_print_all>

	return 0 ;
f01030e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01030ee:	c9                   	leave  
f01030ef:	c3                   	ret    

f01030f0 <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f01030f0:	55                   	push   %ebp
f01030f1:	89 e5                	mov    %esp,%ebp
f01030f3:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f01030f6:	e8 ec 2f 00 00       	call   f01060e7 <sched_kill_all>

	return 0 ;
f01030fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103100:	c9                   	leave  
f0103101:	c3                   	ret    

f0103102 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0103102:	55                   	push   %ebp
f0103103:	89 e5                	mov    %esp,%ebp
f0103105:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0103108:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010310c:	7f 1a                	jg     f0103128 <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f010310e:	83 ec 0c             	sub    $0xc,%esp
f0103111:	68 bc 38 12 f0       	push   $0xf01238bc
f0103116:	e8 51 de ff ff       	call   f0100f6c <cprintf>
f010311b:	83 c4 10             	add    $0x10,%esp
		return 0;
f010311e:	b8 00 00 00 00       	mov    $0x0,%eax
f0103123:	e9 83 00 00 00       	jmp    f01031ab <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0103128:	8b 45 0c             	mov    0xc(%ebp),%eax
f010312b:	83 c0 04             	add    $0x4,%eax
f010312e:	8b 00                	mov    (%eax),%eax
f0103130:	83 ec 04             	sub    $0x4,%esp
f0103133:	6a 0a                	push   $0xa
f0103135:	6a 00                	push   $0x0
f0103137:	50                   	push   %eax
f0103138:	e8 ad da 01 00       	call   f0120bea <strtol>
f010313d:	83 c4 10             	add    $0x10,%esp
f0103140:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0103143:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103147:	75 20                	jne    f0103169 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0103149:	83 ec 0c             	sub    $0xc,%esp
f010314c:	ff 75 f4             	pushl  -0xc(%ebp)
f010314f:	e8 e7 b4 00 00       	call   f010e63b <setPageReplacmentAlgorithmLRU>
f0103154:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0103157:	83 ec 0c             	sub    $0xc,%esp
f010315a:	68 1c 39 12 f0       	push   $0xf012391c
f010315f:	e8 08 de ff ff       	call   f0100f6c <cprintf>
f0103164:	83 c4 10             	add    $0x10,%esp
f0103167:	eb 3d                	jmp    f01031a6 <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0103169:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010316d:	75 20                	jne    f010318f <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f010316f:	83 ec 0c             	sub    $0xc,%esp
f0103172:	ff 75 f4             	pushl  -0xc(%ebp)
f0103175:	e8 c1 b4 00 00       	call   f010e63b <setPageReplacmentAlgorithmLRU>
f010317a:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f010317d:	83 ec 0c             	sub    $0xc,%esp
f0103180:	68 60 39 12 f0       	push   $0xf0123960
f0103185:	e8 e2 dd ff ff       	call   f0100f6c <cprintf>
f010318a:	83 c4 10             	add    $0x10,%esp
f010318d:	eb 17                	jmp    f01031a6 <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f010318f:	83 ec 0c             	sub    $0xc,%esp
f0103192:	68 a0 39 12 f0       	push   $0xf01239a0
f0103197:	e8 d0 dd ff ff       	call   f0100f6c <cprintf>
f010319c:	83 c4 10             	add    $0x10,%esp
		return 0;
f010319f:	b8 00 00 00 00       	mov    $0x0,%eax
f01031a4:	eb 05                	jmp    f01031ab <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f01031a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01031ab:	c9                   	leave  
f01031ac:	c3                   	ret    

f01031ad <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f01031ad:	55                   	push   %ebp
f01031ae:	89 e5                	mov    %esp,%ebp
f01031b0:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f01031b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01031b6:	83 c0 04             	add    $0x4,%eax
f01031b9:	8b 00                	mov    (%eax),%eax
f01031bb:	83 ec 04             	sub    $0x4,%esp
f01031be:	6a 0a                	push   $0xa
f01031c0:	6a 00                	push   $0x0
f01031c2:	50                   	push   %eax
f01031c3:	e8 22 da 01 00       	call   f0120bea <strtol>
f01031c8:	83 c4 10             	add    $0x10,%esp
f01031cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f01031ce:	83 ec 0c             	sub    $0xc,%esp
f01031d1:	ff 75 f4             	pushl  -0xc(%ebp)
f01031d4:	e8 d5 b4 00 00       	call   f010e6ae <setPageReplacmentAlgorithmNchanceCLOCK>
f01031d9:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f01031dc:	83 ec 0c             	sub    $0xc,%esp
f01031df:	68 f4 39 12 f0       	push   $0xf01239f4
f01031e4:	e8 83 dd ff ff       	call   f0100f6c <cprintf>
f01031e9:	83 c4 10             	add    $0x10,%esp
	return 0;
f01031ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01031f1:	c9                   	leave  
f01031f2:	c3                   	ret    

f01031f3 <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f01031f3:	55                   	push   %ebp
f01031f4:	89 e5                	mov    %esp,%ebp
f01031f6:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f01031f9:	e8 70 b4 00 00       	call   f010e66e <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f01031fe:	83 ec 0c             	sub    $0xc,%esp
f0103201:	68 28 3a 12 f0       	push   $0xf0123a28
f0103206:	e8 61 dd ff ff       	call   f0100f6c <cprintf>
f010320b:	83 c4 10             	add    $0x10,%esp
	return 0;
f010320e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103213:	c9                   	leave  
f0103214:	c3                   	ret    

f0103215 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0103215:	55                   	push   %ebp
f0103216:	89 e5                	mov    %esp,%ebp
f0103218:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f010321b:	e8 5e b4 00 00       	call   f010e67e <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0103220:	83 ec 0c             	sub    $0xc,%esp
f0103223:	68 54 3a 12 f0       	push   $0xf0123a54
f0103228:	e8 3f dd ff ff       	call   f0100f6c <cprintf>
f010322d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103230:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103235:	c9                   	leave  
f0103236:	c3                   	ret    

f0103237 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0103237:	55                   	push   %ebp
f0103238:	89 e5                	mov    %esp,%ebp
f010323a:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f010323d:	e8 4c b4 00 00       	call   f010e68e <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0103242:	83 ec 0c             	sub    $0xc,%esp
f0103245:	68 7c 3a 12 f0       	push   $0xf0123a7c
f010324a:	e8 1d dd ff ff       	call   f0100f6c <cprintf>
f010324f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103252:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103257:	c9                   	leave  
f0103258:	c3                   	ret    

f0103259 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0103259:	55                   	push   %ebp
f010325a:	89 e5                	mov    %esp,%ebp
f010325c:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f010325f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103262:	83 c0 04             	add    $0x4,%eax
f0103265:	8b 00                	mov    (%eax),%eax
f0103267:	83 ec 04             	sub    $0x4,%esp
f010326a:	6a 0a                	push   $0xa
f010326c:	6a 00                	push   $0x0
f010326e:	50                   	push   %eax
f010326f:	e8 76 d9 01 00       	call   f0120bea <strtol>
f0103274:	83 c4 10             	add    $0x10,%esp
f0103277:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f010327a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f010327e:	83 ec 0c             	sub    $0xc,%esp
f0103281:	50                   	push   %eax
f0103282:	e8 4e 37 00 00       	call   f01069d5 <sched_init_RR>
f0103287:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f010328a:	a0 e4 4d 55 f0       	mov    0xf0554de4,%al
f010328f:	0f b6 c0             	movzbl %al,%eax
f0103292:	83 ec 08             	sub    $0x8,%esp
f0103295:	50                   	push   %eax
f0103296:	68 b0 3a 12 f0       	push   $0xf0123ab0
f010329b:	e8 cc dc ff ff       	call   f0100f6c <cprintf>
f01032a0:	83 c4 10             	add    $0x10,%esp
	return 0;
f01032a3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01032a8:	c9                   	leave  
f01032a9:	c3                   	ret    

f01032aa <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f01032aa:	55                   	push   %ebp
f01032ab:	89 e5                	mov    %esp,%ebp
f01032ad:	53                   	push   %ebx
f01032ae:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f01032b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01032b4:	83 c0 04             	add    $0x4,%eax
f01032b7:	8b 00                	mov    (%eax),%eax
f01032b9:	83 ec 04             	sub    $0x4,%esp
f01032bc:	6a 0a                	push   $0xa
f01032be:	6a 00                	push   $0x0
f01032c0:	50                   	push   %eax
f01032c1:	e8 24 d9 01 00       	call   f0120bea <strtol>
f01032c6:	83 c4 10             	add    $0x10,%esp
f01032c9:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f01032cc:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f01032d3:	eb 2e                	jmp    f0103303 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f01032d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032d8:	8d 58 fe             	lea    -0x2(%eax),%ebx
f01032db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032de:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01032e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01032e8:	01 d0                	add    %edx,%eax
f01032ea:	8b 00                	mov    (%eax),%eax
f01032ec:	83 ec 04             	sub    $0x4,%esp
f01032ef:	6a 0a                	push   $0xa
f01032f1:	6a 00                	push   $0x0
f01032f3:	50                   	push   %eax
f01032f4:	e8 f1 d8 01 00       	call   f0120bea <strtol>
f01032f9:	83 c4 10             	add    $0x10,%esp
f01032fc:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0103300:	ff 45 f4             	incl   -0xc(%ebp)
f0103303:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103306:	3b 45 08             	cmp    0x8(%ebp),%eax
f0103309:	7c ca                	jl     f01032d5 <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f010330b:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f010330f:	83 ec 08             	sub    $0x8,%esp
f0103312:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0103315:	52                   	push   %edx
f0103316:	50                   	push   %eax
f0103317:	e8 32 37 00 00       	call   f0106a4e <sched_init_MLFQ>
f010331c:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f010331f:	83 ec 0c             	sub    $0xc,%esp
f0103322:	68 e8 3a 12 f0       	push   $0xf0123ae8
f0103327:	e8 40 dc ff ff       	call   f0100f6c <cprintf>
f010332c:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f010332f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0103336:	eb 21                	jmp    f0103359 <command_sch_MLFQ+0xaf>
	{
		cprintf("%d   ", quantums[i]) ;
f0103338:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010333b:	05 e4 4d 55 f0       	add    $0xf0554de4,%eax
f0103340:	8a 00                	mov    (%eax),%al
f0103342:	0f b6 c0             	movzbl %al,%eax
f0103345:	83 ec 08             	sub    $0x8,%esp
f0103348:	50                   	push   %eax
f0103349:	68 15 3b 12 f0       	push   $0xf0123b15
f010334e:	e8 19 dc ff ff       	call   f0100f6c <cprintf>
f0103353:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0103356:	ff 45 f0             	incl   -0x10(%ebp)
f0103359:	a0 60 51 55 f0       	mov    0xf0555160,%al
f010335e:	0f b6 c0             	movzbl %al,%eax
f0103361:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0103364:	7f d2                	jg     f0103338 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f0103366:	83 ec 0c             	sub    $0xc,%esp
f0103369:	68 55 36 12 f0       	push   $0xf0123655
f010336e:	e8 f9 db ff ff       	call   f0100f6c <cprintf>
f0103373:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103376:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010337b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010337e:	c9                   	leave  
f010337f:	c3                   	ret    

f0103380 <command_sch_BSD>:
int command_sch_BSD(int number_of_arguments, char **arguments)
{
f0103380:	55                   	push   %ebp
f0103381:	89 e5                	mov    %esp,%ebp
f0103383:	83 ec 18             	sub    $0x18,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0103386:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103389:	83 c0 04             	add    $0x4,%eax
f010338c:	8b 00                	mov    (%eax),%eax
f010338e:	83 ec 04             	sub    $0x4,%esp
f0103391:	6a 0a                	push   $0xa
f0103393:	6a 00                	push   $0x0
f0103395:	50                   	push   %eax
f0103396:	e8 4f d8 01 00       	call   f0120bea <strtol>
f010339b:	83 c4 10             	add    $0x10,%esp
f010339e:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint8 quantum = strtol(arguments[2], NULL, 10);
f01033a1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01033a4:	83 c0 08             	add    $0x8,%eax
f01033a7:	8b 00                	mov    (%eax),%eax
f01033a9:	83 ec 04             	sub    $0x4,%esp
f01033ac:	6a 0a                	push   $0xa
f01033ae:	6a 00                	push   $0x0
f01033b0:	50                   	push   %eax
f01033b1:	e8 34 d8 01 00       	call   f0120bea <strtol>
f01033b6:	83 c4 10             	add    $0x10,%esp
f01033b9:	88 45 f6             	mov    %al,-0xa(%ebp)

	sched_init_BSD(numOfLevels, quantum);
f01033bc:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f01033c0:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01033c4:	83 ec 08             	sub    $0x8,%esp
f01033c7:	52                   	push   %edx
f01033c8:	50                   	push   %eax
f01033c9:	e8 a8 36 00 00       	call   f0106a76 <sched_init_BSD>
f01033ce:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", numOfLevels, quantum);
f01033d1:	0f b6 55 f6          	movzbl -0xa(%ebp),%edx
f01033d5:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01033d9:	83 ec 04             	sub    $0x4,%esp
f01033dc:	52                   	push   %edx
f01033dd:	50                   	push   %eax
f01033de:	68 1c 3b 12 f0       	push   $0xf0123b1c
f01033e3:	e8 84 db ff ff       	call   f0100f6c <cprintf>
f01033e8:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01033eb:	83 ec 0c             	sub    $0xc,%esp
f01033ee:	68 55 36 12 f0       	push   $0xf0123655
f01033f3:	e8 74 db ff ff       	call   f0100f6c <cprintf>
f01033f8:	83 c4 10             	add    $0x10,%esp
	return 0;
f01033fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103400:	c9                   	leave  
f0103401:	c3                   	ret    

f0103402 <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f0103402:	55                   	push   %ebp
f0103403:	89 e5                	mov    %esp,%ebp
f0103405:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0103408:	e8 0b 33 00 00       	call   f0106718 <isSchedMethodMLFQ>
f010340d:	85 c0                	test   %eax,%eax
f010340f:	74 59                	je     f010346a <command_print_sch_method+0x68>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f0103411:	83 ec 0c             	sub    $0xc,%esp
f0103414:	68 58 3b 12 f0       	push   $0xf0123b58
f0103419:	e8 4e db ff ff       	call   f0100f6c <cprintf>
f010341e:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0103421:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103428:	eb 21                	jmp    f010344b <command_print_sch_method+0x49>
		{
			cprintf("%d   ", quantums[i]) ;
f010342a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010342d:	05 e4 4d 55 f0       	add    $0xf0554de4,%eax
f0103432:	8a 00                	mov    (%eax),%al
f0103434:	0f b6 c0             	movzbl %al,%eax
f0103437:	83 ec 08             	sub    $0x8,%esp
f010343a:	50                   	push   %eax
f010343b:	68 15 3b 12 f0       	push   $0xf0123b15
f0103440:	e8 27 db ff ff       	call   f0100f6c <cprintf>
f0103445:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0103448:	ff 45 f4             	incl   -0xc(%ebp)
f010344b:	a0 60 51 55 f0       	mov    0xf0555160,%al
f0103450:	0f b6 c0             	movzbl %al,%eax
f0103453:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0103456:	7f d2                	jg     f010342a <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0103458:	83 ec 0c             	sub    $0xc,%esp
f010345b:	68 55 36 12 f0       	push   $0xf0123655
f0103460:	e8 07 db ff ff       	call   f0100f6c <cprintf>
f0103465:	83 c4 10             	add    $0x10,%esp
f0103468:	eb 61                	jmp    f01034cb <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodRR())
f010346a:	e8 8f 32 00 00       	call   f01066fe <isSchedMethodRR>
f010346f:	85 c0                	test   %eax,%eax
f0103471:	74 1b                	je     f010348e <command_print_sch_method+0x8c>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0103473:	a0 e4 4d 55 f0       	mov    0xf0554de4,%al
f0103478:	0f b6 c0             	movzbl %al,%eax
f010347b:	83 ec 08             	sub    $0x8,%esp
f010347e:	50                   	push   %eax
f010347f:	68 8c 3b 12 f0       	push   $0xf0123b8c
f0103484:	e8 e3 da ff ff       	call   f0100f6c <cprintf>
f0103489:	83 c4 10             	add    $0x10,%esp
f010348c:	eb 3d                	jmp    f01034cb <command_print_sch_method+0xc9>
	}
	else if (isSchedMethodBSD())
f010348e:	e8 a0 32 00 00       	call   f0106733 <isSchedMethodBSD>
f0103493:	85 c0                	test   %eax,%eax
f0103495:	74 24                	je     f01034bb <command_print_sch_method+0xb9>
	{
		cprintf("Scheduler is now set to BSD with %d levels & quantum = %d\n", num_of_ready_queues, quantums[0]);
f0103497:	a0 e4 4d 55 f0       	mov    0xf0554de4,%al
f010349c:	0f b6 d0             	movzbl %al,%edx
f010349f:	a0 60 51 55 f0       	mov    0xf0555160,%al
f01034a4:	0f b6 c0             	movzbl %al,%eax
f01034a7:	83 ec 04             	sub    $0x4,%esp
f01034aa:	52                   	push   %edx
f01034ab:	50                   	push   %eax
f01034ac:	68 1c 3b 12 f0       	push   $0xf0123b1c
f01034b1:	e8 b6 da ff ff       	call   f0100f6c <cprintf>
f01034b6:	83 c4 10             	add    $0x10,%esp
f01034b9:	eb 10                	jmp    f01034cb <command_print_sch_method+0xc9>
	}
	else
		cprintf("Current scheduler method is UNDEFINED\n");
f01034bb:	83 ec 0c             	sub    $0xc,%esp
f01034be:	68 c8 3b 12 f0       	push   $0xf0123bc8
f01034c3:	e8 a4 da ff ff       	call   f0100f6c <cprintf>
f01034c8:	83 c4 10             	add    $0x10,%esp

	return 0;
f01034cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01034d0:	c9                   	leave  
f01034d1:	c3                   	ret    

f01034d2 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f01034d2:	55                   	push   %ebp
f01034d3:	89 e5                	mov    %esp,%ebp
f01034d5:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f01034d8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01034db:	83 c0 04             	add    $0x4,%eax
f01034de:	8b 00                	mov    (%eax),%eax
f01034e0:	83 ec 04             	sub    $0x4,%esp
f01034e3:	6a 0a                	push   $0xa
f01034e5:	6a 00                	push   $0x0
f01034e7:	50                   	push   %eax
f01034e8:	e8 fd d6 01 00       	call   f0120bea <strtol>
f01034ed:	83 c4 10             	add    $0x10,%esp
f01034f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f01034f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01034f6:	0f b6 c0             	movzbl %al,%eax
f01034f9:	83 ec 0c             	sub    $0xc,%esp
f01034fc:	50                   	push   %eax
f01034fd:	e8 e5 c4 01 00       	call   f011f9e7 <chksch>
f0103502:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0103505:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103509:	75 12                	jne    f010351d <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f010350b:	83 ec 0c             	sub    $0xc,%esp
f010350e:	68 f0 3b 12 f0       	push   $0xf0123bf0
f0103513:	e8 54 da ff ff       	call   f0100f6c <cprintf>
f0103518:	83 c4 10             	add    $0x10,%esp
f010351b:	eb 16                	jmp    f0103533 <command_sch_test+0x61>
	else if (status == 1)
f010351d:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0103521:	75 10                	jne    f0103533 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f0103523:	83 ec 0c             	sub    $0xc,%esp
f0103526:	68 18 3c 12 f0       	push   $0xf0123c18
f010352b:	e8 3c da ff ff       	call   f0100f6c <cprintf>
f0103530:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103533:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103538:	c9                   	leave  
f0103539:	c3                   	ret    

f010353a <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f010353a:	55                   	push   %ebp
f010353b:	89 e5                	mov    %esp,%ebp
f010353d:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0103540:	e8 97 b1 00 00       	call   f010e6dc <isPageReplacmentAlgorithmCLOCK>
f0103545:	85 c0                	test   %eax,%eax
f0103547:	74 15                	je     f010355e <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f0103549:	83 ec 0c             	sub    $0xc,%esp
f010354c:	68 3c 3c 12 f0       	push   $0xf0123c3c
f0103551:	e8 16 da ff ff       	call   f0100f6c <cprintf>
f0103556:	83 c4 10             	add    $0x10,%esp
f0103559:	e9 8c 00 00 00       	jmp    f01035ea <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010355e:	83 ec 0c             	sub    $0xc,%esp
f0103561:	6a 01                	push   $0x1
f0103563:	e8 5e b1 00 00       	call   f010e6c6 <isPageReplacmentAlgorithmLRU>
f0103568:	83 c4 10             	add    $0x10,%esp
f010356b:	85 c0                	test   %eax,%eax
f010356d:	74 12                	je     f0103581 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f010356f:	83 ec 0c             	sub    $0xc,%esp
f0103572:	68 64 3c 12 f0       	push   $0xf0123c64
f0103577:	e8 f0 d9 ff ff       	call   f0100f6c <cprintf>
f010357c:	83 c4 10             	add    $0x10,%esp
f010357f:	eb 69                	jmp    f01035ea <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0103581:	83 ec 0c             	sub    $0xc,%esp
f0103584:	6a 02                	push   $0x2
f0103586:	e8 3b b1 00 00       	call   f010e6c6 <isPageReplacmentAlgorithmLRU>
f010358b:	83 c4 10             	add    $0x10,%esp
f010358e:	85 c0                	test   %eax,%eax
f0103590:	74 12                	je     f01035a4 <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0103592:	83 ec 0c             	sub    $0xc,%esp
f0103595:	68 a4 3c 12 f0       	push   $0xf0123ca4
f010359a:	e8 cd d9 ff ff       	call   f0100f6c <cprintf>
f010359f:	83 c4 10             	add    $0x10,%esp
f01035a2:	eb 46                	jmp    f01035ea <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f01035a4:	e8 4e b1 00 00       	call   f010e6f7 <isPageReplacmentAlgorithmFIFO>
f01035a9:	85 c0                	test   %eax,%eax
f01035ab:	74 12                	je     f01035bf <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f01035ad:	83 ec 0c             	sub    $0xc,%esp
f01035b0:	68 e0 3c 12 f0       	push   $0xf0123ce0
f01035b5:	e8 b2 d9 ff ff       	call   f0100f6c <cprintf>
f01035ba:	83 c4 10             	add    $0x10,%esp
f01035bd:	eb 2b                	jmp    f01035ea <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f01035bf:	e8 4e b1 00 00       	call   f010e712 <isPageReplacmentAlgorithmModifiedCLOCK>
f01035c4:	85 c0                	test   %eax,%eax
f01035c6:	74 12                	je     f01035da <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f01035c8:	83 ec 0c             	sub    $0xc,%esp
f01035cb:	68 04 3d 12 f0       	push   $0xf0123d04
f01035d0:	e8 97 d9 ff ff       	call   f0100f6c <cprintf>
f01035d5:	83 c4 10             	add    $0x10,%esp
f01035d8:	eb 10                	jmp    f01035ea <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f01035da:	83 ec 0c             	sub    $0xc,%esp
f01035dd:	68 34 3d 12 f0       	push   $0xf0123d34
f01035e2:	e8 85 d9 ff ff       	call   f0100f6c <cprintf>
f01035e7:	83 c4 10             	add    $0x10,%esp

	return 0;
f01035ea:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01035ef:	c9                   	leave  
f01035f0:	c3                   	ret    

f01035f1 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f01035f1:	55                   	push   %ebp
f01035f2:	89 e5                	mov    %esp,%ebp
f01035f4:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f01035f7:	e8 bf ef ff ff       	call   f01025bb <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f01035fc:	83 ec 0c             	sub    $0xc,%esp
f01035ff:	68 60 3d 12 f0       	push   $0xf0123d60
f0103604:	e8 63 d9 ff ff       	call   f0100f6c <cprintf>
f0103609:	83 c4 10             	add    $0x10,%esp
	return 0;
f010360c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103611:	c9                   	leave  
f0103612:	c3                   	ret    

f0103613 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0103613:	55                   	push   %ebp
f0103614:	89 e5                	mov    %esp,%ebp
f0103616:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0103619:	e8 ad ef ff ff       	call   f01025cb <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f010361e:	83 ec 0c             	sub    $0xc,%esp
f0103621:	68 90 3d 12 f0       	push   $0xf0123d90
f0103626:	e8 41 d9 ff ff       	call   f0100f6c <cprintf>
f010362b:	83 c4 10             	add    $0x10,%esp
	return 0;
f010362e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103633:	c9                   	leave  
f0103634:	c3                   	ret    

f0103635 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0103635:	55                   	push   %ebp
f0103636:	89 e5                	mov    %esp,%ebp
f0103638:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f010363b:	e8 9b ef ff ff       	call   f01025db <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f0103640:	83 ec 0c             	sub    $0xc,%esp
f0103643:	68 c0 3d 12 f0       	push   $0xf0123dc0
f0103648:	e8 1f d9 ff ff       	call   f0100f6c <cprintf>
f010364d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103650:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103655:	c9                   	leave  
f0103656:	c3                   	ret    

f0103657 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0103657:	55                   	push   %ebp
f0103658:	89 e5                	mov    %esp,%ebp
f010365a:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f010365d:	e8 89 ef ff ff       	call   f01025eb <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f0103662:	83 ec 0c             	sub    $0xc,%esp
f0103665:	68 f0 3d 12 f0       	push   $0xf0123df0
f010366a:	e8 fd d8 ff ff       	call   f0100f6c <cprintf>
f010366f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103672:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103677:	c9                   	leave  
f0103678:	c3                   	ret    

f0103679 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f0103679:	55                   	push   %ebp
f010367a:	89 e5                	mov    %esp,%ebp
f010367c:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f010367f:	e8 77 ef ff ff       	call   f01025fb <isUHeapPlacementStrategyFIRSTFIT>
f0103684:	84 c0                	test   %al,%al
f0103686:	74 12                	je     f010369a <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0103688:	83 ec 0c             	sub    $0xc,%esp
f010368b:	68 20 3e 12 f0       	push   $0xf0123e20
f0103690:	e8 d7 d8 ff ff       	call   f0100f6c <cprintf>
f0103695:	83 c4 10             	add    $0x10,%esp
f0103698:	eb 61                	jmp    f01036fb <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f010369a:	e8 71 ef ff ff       	call   f0102610 <isUHeapPlacementStrategyBESTFIT>
f010369f:	84 c0                	test   %al,%al
f01036a1:	74 12                	je     f01036b5 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f01036a3:	83 ec 0c             	sub    $0xc,%esp
f01036a6:	68 4c 3e 12 f0       	push   $0xf0123e4c
f01036ab:	e8 bc d8 ff ff       	call   f0100f6c <cprintf>
f01036b0:	83 c4 10             	add    $0x10,%esp
f01036b3:	eb 46                	jmp    f01036fb <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f01036b5:	e8 6b ef ff ff       	call   f0102625 <isUHeapPlacementStrategyNEXTFIT>
f01036ba:	84 c0                	test   %al,%al
f01036bc:	74 12                	je     f01036d0 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f01036be:	83 ec 0c             	sub    $0xc,%esp
f01036c1:	68 78 3e 12 f0       	push   $0xf0123e78
f01036c6:	e8 a1 d8 ff ff       	call   f0100f6c <cprintf>
f01036cb:	83 c4 10             	add    $0x10,%esp
f01036ce:	eb 2b                	jmp    f01036fb <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f01036d0:	e8 65 ef ff ff       	call   f010263a <isUHeapPlacementStrategyWORSTFIT>
f01036d5:	84 c0                	test   %al,%al
f01036d7:	74 12                	je     f01036eb <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f01036d9:	83 ec 0c             	sub    $0xc,%esp
f01036dc:	68 a4 3e 12 f0       	push   $0xf0123ea4
f01036e1:	e8 86 d8 ff ff       	call   f0100f6c <cprintf>
f01036e6:	83 c4 10             	add    $0x10,%esp
f01036e9:	eb 10                	jmp    f01036fb <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f01036eb:	83 ec 0c             	sub    $0xc,%esp
f01036ee:	68 d0 3e 12 f0       	push   $0xf0123ed0
f01036f3:	e8 74 d8 ff ff       	call   f0100f6c <cprintf>
f01036f8:	83 c4 10             	add    $0x10,%esp

	return 0;
f01036fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103700:	c9                   	leave  
f0103701:	c3                   	ret    

f0103702 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f0103702:	55                   	push   %ebp
f0103703:	89 e5                	mov    %esp,%ebp
f0103705:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f0103708:	e8 f6 ed ff ff       	call   f0102503 <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010370d:	83 ec 0c             	sub    $0xc,%esp
f0103710:	68 fc 3e 12 f0       	push   $0xf0123efc
f0103715:	e8 52 d8 ff ff       	call   f0100f6c <cprintf>
f010371a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010371d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103722:	c9                   	leave  
f0103723:	c3                   	ret    

f0103724 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0103724:	55                   	push   %ebp
f0103725:	89 e5                	mov    %esp,%ebp
f0103727:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f010372a:	e8 e4 ed ff ff       	call   f0102513 <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010372f:	83 ec 0c             	sub    $0xc,%esp
f0103732:	68 fc 3e 12 f0       	push   $0xf0123efc
f0103737:	e8 30 d8 ff ff       	call   f0100f6c <cprintf>
f010373c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010373f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103744:	c9                   	leave  
f0103745:	c3                   	ret    

f0103746 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0103746:	55                   	push   %ebp
f0103747:	89 e5                	mov    %esp,%ebp
f0103749:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f010374c:	e8 d2 ed ff ff       	call   f0102523 <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f0103751:	83 ec 0c             	sub    $0xc,%esp
f0103754:	68 30 3f 12 f0       	push   $0xf0123f30
f0103759:	e8 0e d8 ff ff       	call   f0100f6c <cprintf>
f010375e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103761:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103766:	c9                   	leave  
f0103767:	c3                   	ret    

f0103768 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0103768:	55                   	push   %ebp
f0103769:	89 e5                	mov    %esp,%ebp
f010376b:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f010376e:	e8 c0 ed ff ff       	call   f0102533 <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f0103773:	83 ec 0c             	sub    $0xc,%esp
f0103776:	68 60 3f 12 f0       	push   $0xf0123f60
f010377b:	e8 ec d7 ff ff       	call   f0100f6c <cprintf>
f0103780:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103783:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103788:	c9                   	leave  
f0103789:	c3                   	ret    

f010378a <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f010378a:	55                   	push   %ebp
f010378b:	89 e5                	mov    %esp,%ebp
f010378d:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f0103790:	e8 ae ed ff ff       	call   f0102543 <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0103795:	83 ec 0c             	sub    $0xc,%esp
f0103798:	68 90 3f 12 f0       	push   $0xf0123f90
f010379d:	e8 ca d7 ff ff       	call   f0100f6c <cprintf>
f01037a2:	83 c4 10             	add    $0x10,%esp
	return 0;
f01037a5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01037aa:	c9                   	leave  
f01037ab:	c3                   	ret    

f01037ac <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f01037ac:	55                   	push   %ebp
f01037ad:	89 e5                	mov    %esp,%ebp
f01037af:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f01037b2:	e8 9c ed ff ff       	call   f0102553 <isKHeapPlacementStrategyCONTALLOC>
f01037b7:	84 c0                	test   %al,%al
f01037b9:	74 12                	je     f01037cd <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f01037bb:	83 ec 0c             	sub    $0xc,%esp
f01037be:	68 c4 3f 12 f0       	push   $0xf0123fc4
f01037c3:	e8 a4 d7 ff ff       	call   f0100f6c <cprintf>
f01037c8:	83 c4 10             	add    $0x10,%esp
f01037cb:	eb 7c                	jmp    f0103849 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01037cd:	e8 95 ed ff ff       	call   f0102567 <isKHeapPlacementStrategyFIRSTFIT>
f01037d2:	84 c0                	test   %al,%al
f01037d4:	74 12                	je     f01037e8 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f01037d6:	83 ec 0c             	sub    $0xc,%esp
f01037d9:	68 00 40 12 f0       	push   $0xf0124000
f01037de:	e8 89 d7 ff ff       	call   f0100f6c <cprintf>
f01037e3:	83 c4 10             	add    $0x10,%esp
f01037e6:	eb 61                	jmp    f0103849 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f01037e8:	e8 8f ed ff ff       	call   f010257c <isKHeapPlacementStrategyBESTFIT>
f01037ed:	84 c0                	test   %al,%al
f01037ef:	74 12                	je     f0103803 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f01037f1:	83 ec 0c             	sub    $0xc,%esp
f01037f4:	68 30 40 12 f0       	push   $0xf0124030
f01037f9:	e8 6e d7 ff ff       	call   f0100f6c <cprintf>
f01037fe:	83 c4 10             	add    $0x10,%esp
f0103801:	eb 46                	jmp    f0103849 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f0103803:	e8 89 ed ff ff       	call   f0102591 <isKHeapPlacementStrategyNEXTFIT>
f0103808:	84 c0                	test   %al,%al
f010380a:	74 12                	je     f010381e <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010380c:	83 ec 0c             	sub    $0xc,%esp
f010380f:	68 5c 40 12 f0       	push   $0xf012405c
f0103814:	e8 53 d7 ff ff       	call   f0100f6c <cprintf>
f0103819:	83 c4 10             	add    $0x10,%esp
f010381c:	eb 2b                	jmp    f0103849 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f010381e:	e8 83 ed ff ff       	call   f01025a6 <isKHeapPlacementStrategyWORSTFIT>
f0103823:	84 c0                	test   %al,%al
f0103825:	74 12                	je     f0103839 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f0103827:	83 ec 0c             	sub    $0xc,%esp
f010382a:	68 88 40 12 f0       	push   $0xf0124088
f010382f:	e8 38 d7 ff ff       	call   f0100f6c <cprintf>
f0103834:	83 c4 10             	add    $0x10,%esp
f0103837:	eb 10                	jmp    f0103849 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f0103839:	83 ec 0c             	sub    $0xc,%esp
f010383c:	68 b8 40 12 f0       	push   $0xf01240b8
f0103841:	e8 26 d7 ff ff       	call   f0100f6c <cprintf>
f0103846:	83 c4 10             	add    $0x10,%esp

	return 0;
f0103849:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010384e:	c9                   	leave  
f010384f:	c3                   	ret    

f0103850 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f0103850:	55                   	push   %ebp
f0103851:	89 e5                	mov    %esp,%ebp
f0103853:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0103856:	e8 2e af 00 00       	call   f010e789 <isBufferingEnabled>
f010385b:	84 c0                	test   %al,%al
f010385d:	75 12                	jne    f0103871 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f010385f:	83 ec 0c             	sub    $0xc,%esp
f0103862:	68 e8 40 12 f0       	push   $0xf01240e8
f0103867:	e8 00 d7 ff ff       	call   f0100f6c <cprintf>
f010386c:	83 c4 10             	add    $0x10,%esp
f010386f:	eb 1d                	jmp    f010388e <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f0103871:	83 ec 0c             	sub    $0xc,%esp
f0103874:	6a 00                	push   $0x0
f0103876:	e8 e8 ae 00 00       	call   f010e763 <enableModifiedBuffer>
f010387b:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f010387e:	83 ec 0c             	sub    $0xc,%esp
f0103881:	68 24 41 12 f0       	push   $0xf0124124
f0103886:	e8 e1 d6 ff ff       	call   f0100f6c <cprintf>
f010388b:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010388e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103893:	c9                   	leave  
f0103894:	c3                   	ret    

f0103895 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0103895:	55                   	push   %ebp
f0103896:	89 e5                	mov    %esp,%ebp
f0103898:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010389b:	e8 e9 ae 00 00       	call   f010e789 <isBufferingEnabled>
f01038a0:	84 c0                	test   %al,%al
f01038a2:	75 12                	jne    f01038b6 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f01038a4:	83 ec 0c             	sub    $0xc,%esp
f01038a7:	68 e8 40 12 f0       	push   $0xf01240e8
f01038ac:	e8 bb d6 ff ff       	call   f0100f6c <cprintf>
f01038b1:	83 c4 10             	add    $0x10,%esp
f01038b4:	eb 1d                	jmp    f01038d3 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f01038b6:	83 ec 0c             	sub    $0xc,%esp
f01038b9:	6a 01                	push   $0x1
f01038bb:	e8 a3 ae 00 00       	call   f010e763 <enableModifiedBuffer>
f01038c0:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f01038c3:	83 ec 0c             	sub    $0xc,%esp
f01038c6:	68 48 41 12 f0       	push   $0xf0124148
f01038cb:	e8 9c d6 ff ff       	call   f0100f6c <cprintf>
f01038d0:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01038d3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01038d8:	c9                   	leave  
f01038d9:	c3                   	ret    

f01038da <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f01038da:	55                   	push   %ebp
f01038db:	89 e5                	mov    %esp,%ebp
f01038dd:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f01038e0:	83 ec 0c             	sub    $0xc,%esp
f01038e3:	6a 00                	push   $0x0
f01038e5:	e8 91 ae 00 00       	call   f010e77b <enableBuffering>
f01038ea:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f01038ed:	83 ec 0c             	sub    $0xc,%esp
f01038f0:	6a 00                	push   $0x0
f01038f2:	e8 6c ae 00 00       	call   f010e763 <enableModifiedBuffer>
f01038f7:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f01038fa:	83 ec 0c             	sub    $0xc,%esp
f01038fd:	68 68 41 12 f0       	push   $0xf0124168
f0103902:	e8 65 d6 ff ff       	call   f0100f6c <cprintf>
f0103907:	83 c4 10             	add    $0x10,%esp
	return 0;
f010390a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010390f:	c9                   	leave  
f0103910:	c3                   	ret    

f0103911 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f0103911:	55                   	push   %ebp
f0103912:	89 e5                	mov    %esp,%ebp
f0103914:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0103917:	83 ec 0c             	sub    $0xc,%esp
f010391a:	6a 01                	push   $0x1
f010391c:	e8 5a ae 00 00       	call   f010e77b <enableBuffering>
f0103921:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f0103924:	83 ec 0c             	sub    $0xc,%esp
f0103927:	6a 01                	push   $0x1
f0103929:	e8 35 ae 00 00       	call   f010e763 <enableModifiedBuffer>
f010392e:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f0103931:	e8 6b ae 00 00       	call   f010e7a1 <getModifiedBufferLength>
f0103936:	85 c0                	test   %eax,%eax
f0103938:	75 59                	jne    f0103993 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f010393a:	83 ec 0c             	sub    $0xc,%esp
f010393d:	68 84 41 12 f0       	push   $0xf0124184
f0103942:	e8 25 d6 ff ff       	call   f0100f6c <cprintf>
f0103947:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f010394a:	83 ec 08             	sub    $0x8,%esp
f010394d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0103950:	50                   	push   %eax
f0103951:	68 b4 41 12 f0       	push   $0xf01241b4
f0103956:	e8 27 cd 01 00       	call   f0120682 <readline>
f010395b:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f010395e:	83 ec 04             	sub    $0x4,%esp
f0103961:	6a 0a                	push   $0xa
f0103963:	6a 00                	push   $0x0
f0103965:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0103968:	50                   	push   %eax
f0103969:	e8 7c d2 01 00       	call   f0120bea <strtol>
f010396e:	83 c4 10             	add    $0x10,%esp
f0103971:	83 ec 0c             	sub    $0xc,%esp
f0103974:	50                   	push   %eax
f0103975:	e8 19 ae 00 00       	call   f010e793 <setModifiedBufferLength>
f010397a:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f010397d:	e8 1f ae 00 00       	call   f010e7a1 <getModifiedBufferLength>
f0103982:	83 ec 08             	sub    $0x8,%esp
f0103985:	50                   	push   %eax
f0103986:	68 e0 41 12 f0       	push   $0xf01241e0
f010398b:	e8 dc d5 ff ff       	call   f0100f6c <cprintf>
f0103990:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0103993:	83 ec 0c             	sub    $0xc,%esp
f0103996:	68 05 42 12 f0       	push   $0xf0124205
f010399b:	e8 cc d5 ff ff       	call   f0100f6c <cprintf>
f01039a0:	83 c4 10             	add    $0x10,%esp
	return 0;
f01039a3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01039a8:	c9                   	leave  
f01039a9:	c3                   	ret    

f01039aa <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f01039aa:	55                   	push   %ebp
f01039ab:	89 e5                	mov    %esp,%ebp
f01039ad:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01039b0:	e8 d4 ad 00 00       	call   f010e789 <isBufferingEnabled>
f01039b5:	84 c0                	test   %al,%al
f01039b7:	75 12                	jne    f01039cb <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01039b9:	83 ec 0c             	sub    $0xc,%esp
f01039bc:	68 20 42 12 f0       	push   $0xf0124220
f01039c1:	e8 a6 d5 ff ff       	call   f0100f6c <cprintf>
f01039c6:	83 c4 10             	add    $0x10,%esp
f01039c9:	eb 19                	jmp    f01039e4 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01039cb:	e8 a1 ad 00 00       	call   f010e771 <isModifiedBufferEnabled>
f01039d0:	84 c0                	test   %al,%al
f01039d2:	75 10                	jne    f01039e4 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01039d4:	83 ec 0c             	sub    $0xc,%esp
f01039d7:	68 70 42 12 f0       	push   $0xf0124270
f01039dc:	e8 8b d5 ff ff       	call   f0100f6c <cprintf>
f01039e1:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f01039e4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01039e7:	83 c0 04             	add    $0x4,%eax
f01039ea:	8b 00                	mov    (%eax),%eax
f01039ec:	83 ec 04             	sub    $0x4,%esp
f01039ef:	6a 0a                	push   $0xa
f01039f1:	6a 00                	push   $0x0
f01039f3:	50                   	push   %eax
f01039f4:	e8 f1 d1 01 00       	call   f0120bea <strtol>
f01039f9:	83 c4 10             	add    $0x10,%esp
f01039fc:	83 ec 0c             	sub    $0xc,%esp
f01039ff:	50                   	push   %eax
f0103a00:	e8 8e ad 00 00       	call   f010e793 <setModifiedBufferLength>
f0103a05:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f0103a08:	e8 94 ad 00 00       	call   f010e7a1 <getModifiedBufferLength>
f0103a0d:	83 ec 08             	sub    $0x8,%esp
f0103a10:	50                   	push   %eax
f0103a11:	68 e0 41 12 f0       	push   $0xf01241e0
f0103a16:	e8 51 d5 ff ff       	call   f0100f6c <cprintf>
f0103a1b:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103a1e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103a23:	c9                   	leave  
f0103a24:	c3                   	ret    

f0103a25 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0103a25:	55                   	push   %ebp
f0103a26:	89 e5                	mov    %esp,%ebp
f0103a28:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0103a2b:	e8 59 ad 00 00       	call   f010e789 <isBufferingEnabled>
f0103a30:	84 c0                	test   %al,%al
f0103a32:	75 12                	jne    f0103a46 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0103a34:	83 ec 0c             	sub    $0xc,%esp
f0103a37:	68 20 42 12 f0       	push   $0xf0124220
f0103a3c:	e8 2b d5 ff ff       	call   f0100f6c <cprintf>
f0103a41:	83 c4 10             	add    $0x10,%esp
f0103a44:	eb 19                	jmp    f0103a5f <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0103a46:	e8 26 ad 00 00       	call   f010e771 <isModifiedBufferEnabled>
f0103a4b:	84 c0                	test   %al,%al
f0103a4d:	75 10                	jne    f0103a5f <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f0103a4f:	83 ec 0c             	sub    $0xc,%esp
f0103a52:	68 70 42 12 f0       	push   $0xf0124270
f0103a57:	e8 10 d5 ff ff       	call   f0100f6c <cprintf>
f0103a5c:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f0103a5f:	e8 3d ad 00 00       	call   f010e7a1 <getModifiedBufferLength>
f0103a64:	83 ec 08             	sub    $0x8,%esp
f0103a67:	50                   	push   %eax
f0103a68:	68 b6 42 12 f0       	push   $0xf01242b6
f0103a6d:	e8 fa d4 ff ff       	call   f0100f6c <cprintf>
f0103a72:	83 c4 10             	add    $0x10,%esp
	return 0;
f0103a75:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103a7a:	c9                   	leave  
f0103a7b:	c3                   	ret    

f0103a7c <command_tst>:

int command_tst(int number_of_arguments, char **arguments)
{
f0103a7c:	55                   	push   %ebp
f0103a7d:	89 e5                	mov    %esp,%ebp
f0103a7f:	83 ec 08             	sub    $0x8,%esp
	return tst_handler(number_of_arguments, arguments);
f0103a82:	83 ec 08             	sub    $0x8,%esp
f0103a85:	ff 75 0c             	pushl  0xc(%ebp)
f0103a88:	ff 75 08             	pushl  0x8(%ebp)
f0103a8b:	e8 d1 b4 00 00       	call   f010ef61 <tst_handler>
f0103a90:	83 c4 10             	add    $0x10,%esp
}
f0103a93:	c9                   	leave  
f0103a94:	c3                   	ret    

f0103a95 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0103a95:	55                   	push   %ebp
f0103a96:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0103a98:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a9b:	8b 15 20 4f 55 f0    	mov    0xf0554f20,%edx
f0103aa1:	29 d0                	sub    %edx,%eax
f0103aa3:	c1 f8 03             	sar    $0x3,%eax
f0103aa6:	89 c2                	mov    %eax,%edx
f0103aa8:	89 d0                	mov    %edx,%eax
f0103aaa:	c1 e0 02             	shl    $0x2,%eax
f0103aad:	01 d0                	add    %edx,%eax
f0103aaf:	c1 e0 02             	shl    $0x2,%eax
f0103ab2:	01 d0                	add    %edx,%eax
f0103ab4:	c1 e0 02             	shl    $0x2,%eax
f0103ab7:	01 d0                	add    %edx,%eax
f0103ab9:	89 c1                	mov    %eax,%ecx
f0103abb:	c1 e1 08             	shl    $0x8,%ecx
f0103abe:	01 c8                	add    %ecx,%eax
f0103ac0:	89 c1                	mov    %eax,%ecx
f0103ac2:	c1 e1 10             	shl    $0x10,%ecx
f0103ac5:	01 c8                	add    %ecx,%eax
f0103ac7:	01 c0                	add    %eax,%eax
f0103ac9:	01 d0                	add    %edx,%eax
}
f0103acb:	5d                   	pop    %ebp
f0103acc:	c3                   	ret    

f0103acd <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0103acd:	55                   	push   %ebp
f0103ace:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0103ad0:	ff 75 08             	pushl  0x8(%ebp)
f0103ad3:	e8 bd ff ff ff       	call   f0103a95 <to_frame_number>
f0103ad8:	83 c4 04             	add    $0x4,%esp
f0103adb:	c1 e0 0c             	shl    $0xc,%eax
}
f0103ade:	c9                   	leave  
f0103adf:	c3                   	ret    

f0103ae0 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0103ae0:	55                   	push   %ebp
f0103ae1:	89 e5                	mov    %esp,%ebp
f0103ae3:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0103ae6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ae9:	c1 e8 0c             	shr    $0xc,%eax
f0103aec:	89 c2                	mov    %eax,%edx
f0103aee:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f0103af3:	39 c2                	cmp    %eax,%edx
f0103af5:	72 14                	jb     f0103b0b <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0103af7:	83 ec 04             	sub    $0x4,%esp
f0103afa:	68 d4 42 12 f0       	push   $0xf01242d4
f0103aff:	6a 55                	push   $0x55
f0103b01:	68 fc 42 12 f0       	push   $0xf01242fc
f0103b06:	e8 0f c8 ff ff       	call   f010031a <_panic>
	return &frames_info[PPN(physical_address)];
f0103b0b:	8b 15 20 4f 55 f0    	mov    0xf0554f20,%edx
f0103b11:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b14:	c1 e8 0c             	shr    $0xc,%eax
f0103b17:	89 c1                	mov    %eax,%ecx
f0103b19:	89 c8                	mov    %ecx,%eax
f0103b1b:	01 c0                	add    %eax,%eax
f0103b1d:	01 c8                	add    %ecx,%eax
f0103b1f:	c1 e0 03             	shl    $0x3,%eax
f0103b22:	01 d0                	add    %edx,%eax
}
f0103b24:	c9                   	leave  
f0103b25:	c3                   	ret    

f0103b26 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f0103b26:	55                   	push   %ebp
f0103b27:	89 e5                	mov    %esp,%ebp
f0103b29:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103b2c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b2f:	05 00 14 00 00       	add    $0x1400,%eax
f0103b34:	c1 e0 03             	shl    $0x3,%eax
f0103b37:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103b3a:	83 ec 04             	sub    $0x4,%esp
f0103b3d:	6a 08                	push   $0x8
f0103b3f:	ff 75 0c             	pushl  0xc(%ebp)
f0103b42:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b45:	e8 28 d5 01 00       	call   f0121072 <ide_read>
f0103b4a:	83 c4 10             	add    $0x10,%esp
f0103b4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f0103b50:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103b53:	c9                   	leave  
f0103b54:	c3                   	ret    

f0103b55 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f0103b55:	55                   	push   %ebp
f0103b56:	89 e5                	mov    %esp,%ebp
f0103b58:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0103b5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103b5e:	05 00 14 00 00       	add    $0x1400,%eax
f0103b63:	c1 e0 03             	shl    $0x3,%eax
f0103b66:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0103b69:	83 ec 04             	sub    $0x4,%esp
f0103b6c:	6a 08                	push   $0x8
f0103b6e:	ff 75 0c             	pushl  0xc(%ebp)
f0103b71:	ff 75 f4             	pushl  -0xc(%ebp)
f0103b74:	e8 39 d6 01 00       	call   f01211b2 <ide_write>
f0103b79:	83 c4 10             	add    $0x10,%esp
f0103b7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f0103b7f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103b83:	74 14                	je     f0103b99 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f0103b85:	83 ec 04             	sub    $0x4,%esp
f0103b88:	68 1e 43 12 f0       	push   $0xf012431e
f0103b8d:	6a 2f                	push   $0x2f
f0103b8f:	68 35 43 12 f0       	push   $0xf0124335
f0103b94:	e8 81 c7 ff ff       	call   f010031a <_panic>
	return success;
f0103b99:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103b9c:	c9                   	leave  
f0103b9d:	c3                   	ret    

f0103b9e <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f0103b9e:	55                   	push   %ebp
f0103b9f:	89 e5                	mov    %esp,%ebp
f0103ba1:	53                   	push   %ebx
f0103ba2:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&DiskFrameLists.disk_free_frame_list);
f0103ba5:	c7 05 e0 50 55 f0 00 	movl   $0x0,0xf05550e0
f0103bac:	00 00 00 
f0103baf:	c7 05 e4 50 55 f0 00 	movl   $0x0,0xf05550e4
f0103bb6:	00 00 00 
f0103bb9:	c7 05 ec 50 55 f0 00 	movl   $0x0,0xf05550ec
f0103bc0:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103bc3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f0103bca:	e9 e8 00 00 00       	jmp    f0103cb7 <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f0103bcf:	8b 0d c0 22 55 f0    	mov    0xf05522c0,%ecx
f0103bd5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bd8:	89 d0                	mov    %edx,%eax
f0103bda:	01 c0                	add    %eax,%eax
f0103bdc:	01 d0                	add    %edx,%eax
f0103bde:	c1 e0 03             	shl    $0x3,%eax
f0103be1:	01 c8                	add    %ecx,%eax
f0103be3:	83 ec 0c             	sub    $0xc,%esp
f0103be6:	50                   	push   %eax
f0103be7:	e8 c9 45 00 00       	call   f01081b5 <initialize_frame_info>
f0103bec:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&DiskFrameLists.disk_free_frame_list, &disk_frames_info[i]);
f0103bef:	8b 0d c0 22 55 f0    	mov    0xf05522c0,%ecx
f0103bf5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103bf8:	89 d0                	mov    %edx,%eax
f0103bfa:	01 c0                	add    %eax,%eax
f0103bfc:	01 d0                	add    %edx,%eax
f0103bfe:	c1 e0 03             	shl    $0x3,%eax
f0103c01:	01 c8                	add    %ecx,%eax
f0103c03:	85 c0                	test   %eax,%eax
f0103c05:	75 14                	jne    f0103c1b <initialize_disk_page_file+0x7d>
f0103c07:	83 ec 04             	sub    $0x4,%esp
f0103c0a:	68 54 43 12 f0       	push   $0xf0124354
f0103c0f:	6a 56                	push   $0x56
f0103c11:	68 35 43 12 f0       	push   $0xf0124335
f0103c16:	e8 ff c6 ff ff       	call   f010031a <_panic>
f0103c1b:	8b 0d c0 22 55 f0    	mov    0xf05522c0,%ecx
f0103c21:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c24:	89 d0                	mov    %edx,%eax
f0103c26:	01 c0                	add    %eax,%eax
f0103c28:	01 d0                	add    %edx,%eax
f0103c2a:	c1 e0 03             	shl    $0x3,%eax
f0103c2d:	01 c8                	add    %ecx,%eax
f0103c2f:	8b 15 e0 50 55 f0    	mov    0xf05550e0,%edx
f0103c35:	89 10                	mov    %edx,(%eax)
f0103c37:	8b 00                	mov    (%eax),%eax
f0103c39:	85 c0                	test   %eax,%eax
f0103c3b:	74 1f                	je     f0103c5c <initialize_disk_page_file+0xbe>
f0103c3d:	8b 15 e0 50 55 f0    	mov    0xf05550e0,%edx
f0103c43:	8b 1d c0 22 55 f0    	mov    0xf05522c0,%ebx
f0103c49:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0103c4c:	89 c8                	mov    %ecx,%eax
f0103c4e:	01 c0                	add    %eax,%eax
f0103c50:	01 c8                	add    %ecx,%eax
f0103c52:	c1 e0 03             	shl    $0x3,%eax
f0103c55:	01 d8                	add    %ebx,%eax
f0103c57:	89 42 04             	mov    %eax,0x4(%edx)
f0103c5a:	eb 19                	jmp    f0103c75 <initialize_disk_page_file+0xd7>
f0103c5c:	8b 0d c0 22 55 f0    	mov    0xf05522c0,%ecx
f0103c62:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c65:	89 d0                	mov    %edx,%eax
f0103c67:	01 c0                	add    %eax,%eax
f0103c69:	01 d0                	add    %edx,%eax
f0103c6b:	c1 e0 03             	shl    $0x3,%eax
f0103c6e:	01 c8                	add    %ecx,%eax
f0103c70:	a3 e4 50 55 f0       	mov    %eax,0xf05550e4
f0103c75:	8b 0d c0 22 55 f0    	mov    0xf05522c0,%ecx
f0103c7b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c7e:	89 d0                	mov    %edx,%eax
f0103c80:	01 c0                	add    %eax,%eax
f0103c82:	01 d0                	add    %edx,%eax
f0103c84:	c1 e0 03             	shl    $0x3,%eax
f0103c87:	01 c8                	add    %ecx,%eax
f0103c89:	a3 e0 50 55 f0       	mov    %eax,0xf05550e0
f0103c8e:	8b 0d c0 22 55 f0    	mov    0xf05522c0,%ecx
f0103c94:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c97:	89 d0                	mov    %edx,%eax
f0103c99:	01 c0                	add    %eax,%eax
f0103c9b:	01 d0                	add    %edx,%eax
f0103c9d:	c1 e0 03             	shl    $0x3,%eax
f0103ca0:	01 c8                	add    %ecx,%eax
f0103ca2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103ca9:	a1 ec 50 55 f0       	mov    0xf05550ec,%eax
f0103cae:	40                   	inc    %eax
f0103caf:	a3 ec 50 55 f0       	mov    %eax,0xf05550ec
{
	int i;
	LIST_INIT(&DiskFrameLists.disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0103cb4:	ff 45 f4             	incl   -0xc(%ebp)
f0103cb7:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f0103cbe:	0f 8e 0b ff ff ff    	jle    f0103bcf <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&DiskFrameLists.disk_free_frame_list, &disk_frames_info[i]);
	}
}
f0103cc4:	90                   	nop
f0103cc5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103cc8:	c9                   	leave  
f0103cc9:	c3                   	ret    

f0103cca <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f0103cca:	55                   	push   %ebp
f0103ccb:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f0103ccd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cd0:	8b 15 c0 22 55 f0    	mov    0xf05522c0,%edx
f0103cd6:	29 d0                	sub    %edx,%eax
f0103cd8:	c1 f8 03             	sar    $0x3,%eax
f0103cdb:	89 c2                	mov    %eax,%edx
f0103cdd:	89 d0                	mov    %edx,%eax
f0103cdf:	c1 e0 02             	shl    $0x2,%eax
f0103ce2:	01 d0                	add    %edx,%eax
f0103ce4:	c1 e0 02             	shl    $0x2,%eax
f0103ce7:	01 d0                	add    %edx,%eax
f0103ce9:	c1 e0 02             	shl    $0x2,%eax
f0103cec:	01 d0                	add    %edx,%eax
f0103cee:	89 c1                	mov    %eax,%ecx
f0103cf0:	c1 e1 08             	shl    $0x8,%ecx
f0103cf3:	01 c8                	add    %ecx,%eax
f0103cf5:	89 c1                	mov    %eax,%ecx
f0103cf7:	c1 e1 10             	shl    $0x10,%ecx
f0103cfa:	01 c8                	add    %ecx,%eax
f0103cfc:	01 c0                	add    %eax,%eax
f0103cfe:	01 d0                	add    %edx,%eax
}
f0103d00:	5d                   	pop    %ebp
f0103d01:	c3                   	ret    

f0103d02 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103d02:	55                   	push   %ebp
f0103d03:	89 e5                	mov    %esp,%ebp
f0103d05:	83 ec 18             	sub    $0x18,%esp
	int ret = 0;
f0103d08:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	acquire_spinlock(&DiskFrameLists.dfllock);
f0103d0f:	83 ec 0c             	sub    $0xc,%esp
f0103d12:	68 f0 50 55 f0       	push   $0xf05550f0
f0103d17:	e8 bb ad 00 00       	call   f010ead7 <acquire_spinlock>
f0103d1c:	83 c4 10             	add    $0x10,%esp
	{
		// Fill this function in
		struct FrameInfo *ptr_frame_info = LIST_FIRST(&DiskFrameLists.disk_free_frame_list);
f0103d1f:	a1 e0 50 55 f0       	mov    0xf05550e0,%eax
f0103d24:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if(ptr_frame_info == NULL)
f0103d27:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103d2b:	75 0c                	jne    f0103d39 <allocate_disk_frame+0x37>
		{
			ret = E_NO_PAGE_FILE_SPACE;
f0103d2d:	c7 45 f4 f8 ff ff ff 	movl   $0xfffffff8,-0xc(%ebp)
f0103d34:	e9 a2 00 00 00       	jmp    f0103ddb <allocate_disk_frame+0xd9>
		}
		else
		{
			LIST_REMOVE(&DiskFrameLists.disk_free_frame_list, ptr_frame_info);
f0103d39:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0103d3d:	75 14                	jne    f0103d53 <allocate_disk_frame+0x51>
f0103d3f:	83 ec 04             	sub    $0x4,%esp
f0103d42:	68 77 43 12 f0       	push   $0xf0124377
f0103d47:	6a 7b                	push   $0x7b
f0103d49:	68 35 43 12 f0       	push   $0xf0124335
f0103d4e:	e8 c7 c5 ff ff       	call   f010031a <_panic>
f0103d53:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d56:	8b 00                	mov    (%eax),%eax
f0103d58:	85 c0                	test   %eax,%eax
f0103d5a:	74 10                	je     f0103d6c <allocate_disk_frame+0x6a>
f0103d5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d5f:	8b 00                	mov    (%eax),%eax
f0103d61:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0103d64:	8b 52 04             	mov    0x4(%edx),%edx
f0103d67:	89 50 04             	mov    %edx,0x4(%eax)
f0103d6a:	eb 0b                	jmp    f0103d77 <allocate_disk_frame+0x75>
f0103d6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d6f:	8b 40 04             	mov    0x4(%eax),%eax
f0103d72:	a3 e4 50 55 f0       	mov    %eax,0xf05550e4
f0103d77:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d7a:	8b 40 04             	mov    0x4(%eax),%eax
f0103d7d:	85 c0                	test   %eax,%eax
f0103d7f:	74 0f                	je     f0103d90 <allocate_disk_frame+0x8e>
f0103d81:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d84:	8b 40 04             	mov    0x4(%eax),%eax
f0103d87:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0103d8a:	8b 12                	mov    (%edx),%edx
f0103d8c:	89 10                	mov    %edx,(%eax)
f0103d8e:	eb 0a                	jmp    f0103d9a <allocate_disk_frame+0x98>
f0103d90:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d93:	8b 00                	mov    (%eax),%eax
f0103d95:	a3 e0 50 55 f0       	mov    %eax,0xf05550e0
f0103d9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d9d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0103da3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103da6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103dad:	a1 ec 50 55 f0       	mov    0xf05550ec,%eax
f0103db2:	48                   	dec    %eax
f0103db3:	a3 ec 50 55 f0       	mov    %eax,0xf05550ec
			initialize_frame_info(ptr_frame_info);
f0103db8:	83 ec 0c             	sub    $0xc,%esp
f0103dbb:	ff 75 f0             	pushl  -0x10(%ebp)
f0103dbe:	e8 f2 43 00 00       	call   f01081b5 <initialize_frame_info>
f0103dc3:	83 c4 10             	add    $0x10,%esp
			*dfn = to_disk_frame_number(ptr_frame_info);
f0103dc6:	83 ec 0c             	sub    $0xc,%esp
f0103dc9:	ff 75 f0             	pushl  -0x10(%ebp)
f0103dcc:	e8 f9 fe ff ff       	call   f0103cca <to_disk_frame_number>
f0103dd1:	83 c4 10             	add    $0x10,%esp
f0103dd4:	89 c2                	mov    %eax,%edx
f0103dd6:	8b 45 08             	mov    0x8(%ebp),%eax
f0103dd9:	89 10                	mov    %edx,(%eax)
		}
	}
	release_spinlock(&DiskFrameLists.dfllock);
f0103ddb:	83 ec 0c             	sub    $0xc,%esp
f0103dde:	68 f0 50 55 f0       	push   $0xf05550f0
f0103de3:	e8 76 ad 00 00       	call   f010eb5e <release_spinlock>
f0103de8:	83 c4 10             	add    $0x10,%esp

	return ret;
f0103deb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103dee:	c9                   	leave  
f0103def:	c3                   	ret    

f0103df0 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f0103df0:	55                   	push   %ebp
f0103df1:	89 e5                	mov    %esp,%ebp
f0103df3:	53                   	push   %ebx
f0103df4:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f0103df7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0103dfb:	0f 84 ea 00 00 00    	je     f0103eeb <free_disk_frame+0xfb>
	acquire_spinlock(&DiskFrameLists.dfllock);
f0103e01:	83 ec 0c             	sub    $0xc,%esp
f0103e04:	68 f0 50 55 f0       	push   $0xf05550f0
f0103e09:	e8 c9 ac 00 00       	call   f010ead7 <acquire_spinlock>
f0103e0e:	83 c4 10             	add    $0x10,%esp
	{
		LIST_INSERT_HEAD(&DiskFrameLists.disk_free_frame_list, &disk_frames_info[dfn]);
f0103e11:	8b 0d c0 22 55 f0    	mov    0xf05522c0,%ecx
f0103e17:	8b 55 08             	mov    0x8(%ebp),%edx
f0103e1a:	89 d0                	mov    %edx,%eax
f0103e1c:	01 c0                	add    %eax,%eax
f0103e1e:	01 d0                	add    %edx,%eax
f0103e20:	c1 e0 03             	shl    $0x3,%eax
f0103e23:	01 c8                	add    %ecx,%eax
f0103e25:	85 c0                	test   %eax,%eax
f0103e27:	75 17                	jne    f0103e40 <free_disk_frame+0x50>
f0103e29:	83 ec 04             	sub    $0x4,%esp
f0103e2c:	68 54 43 12 f0       	push   $0xf0124354
f0103e31:	68 8e 00 00 00       	push   $0x8e
f0103e36:	68 35 43 12 f0       	push   $0xf0124335
f0103e3b:	e8 da c4 ff ff       	call   f010031a <_panic>
f0103e40:	8b 0d c0 22 55 f0    	mov    0xf05522c0,%ecx
f0103e46:	8b 55 08             	mov    0x8(%ebp),%edx
f0103e49:	89 d0                	mov    %edx,%eax
f0103e4b:	01 c0                	add    %eax,%eax
f0103e4d:	01 d0                	add    %edx,%eax
f0103e4f:	c1 e0 03             	shl    $0x3,%eax
f0103e52:	01 c8                	add    %ecx,%eax
f0103e54:	8b 15 e0 50 55 f0    	mov    0xf05550e0,%edx
f0103e5a:	89 10                	mov    %edx,(%eax)
f0103e5c:	8b 00                	mov    (%eax),%eax
f0103e5e:	85 c0                	test   %eax,%eax
f0103e60:	74 1f                	je     f0103e81 <free_disk_frame+0x91>
f0103e62:	8b 15 e0 50 55 f0    	mov    0xf05550e0,%edx
f0103e68:	8b 1d c0 22 55 f0    	mov    0xf05522c0,%ebx
f0103e6e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0103e71:	89 c8                	mov    %ecx,%eax
f0103e73:	01 c0                	add    %eax,%eax
f0103e75:	01 c8                	add    %ecx,%eax
f0103e77:	c1 e0 03             	shl    $0x3,%eax
f0103e7a:	01 d8                	add    %ebx,%eax
f0103e7c:	89 42 04             	mov    %eax,0x4(%edx)
f0103e7f:	eb 19                	jmp    f0103e9a <free_disk_frame+0xaa>
f0103e81:	8b 0d c0 22 55 f0    	mov    0xf05522c0,%ecx
f0103e87:	8b 55 08             	mov    0x8(%ebp),%edx
f0103e8a:	89 d0                	mov    %edx,%eax
f0103e8c:	01 c0                	add    %eax,%eax
f0103e8e:	01 d0                	add    %edx,%eax
f0103e90:	c1 e0 03             	shl    $0x3,%eax
f0103e93:	01 c8                	add    %ecx,%eax
f0103e95:	a3 e4 50 55 f0       	mov    %eax,0xf05550e4
f0103e9a:	8b 0d c0 22 55 f0    	mov    0xf05522c0,%ecx
f0103ea0:	8b 55 08             	mov    0x8(%ebp),%edx
f0103ea3:	89 d0                	mov    %edx,%eax
f0103ea5:	01 c0                	add    %eax,%eax
f0103ea7:	01 d0                	add    %edx,%eax
f0103ea9:	c1 e0 03             	shl    $0x3,%eax
f0103eac:	01 c8                	add    %ecx,%eax
f0103eae:	a3 e0 50 55 f0       	mov    %eax,0xf05550e0
f0103eb3:	8b 0d c0 22 55 f0    	mov    0xf05522c0,%ecx
f0103eb9:	8b 55 08             	mov    0x8(%ebp),%edx
f0103ebc:	89 d0                	mov    %edx,%eax
f0103ebe:	01 c0                	add    %eax,%eax
f0103ec0:	01 d0                	add    %edx,%eax
f0103ec2:	c1 e0 03             	shl    $0x3,%eax
f0103ec5:	01 c8                	add    %ecx,%eax
f0103ec7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0103ece:	a1 ec 50 55 f0       	mov    0xf05550ec,%eax
f0103ed3:	40                   	inc    %eax
f0103ed4:	a3 ec 50 55 f0       	mov    %eax,0xf05550ec
	}
	release_spinlock(&DiskFrameLists.dfllock);
f0103ed9:	83 ec 0c             	sub    $0xc,%esp
f0103edc:	68 f0 50 55 f0       	push   $0xf05550f0
f0103ee1:	e8 78 ac 00 00       	call   f010eb5e <release_spinlock>
f0103ee6:	83 c4 10             	add    $0x10,%esp
f0103ee9:	eb 01                	jmp    f0103eec <free_disk_frame+0xfc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f0103eeb:	90                   	nop
	acquire_spinlock(&DiskFrameLists.dfllock);
	{
		LIST_INSERT_HEAD(&DiskFrameLists.disk_free_frame_list, &disk_frames_info[dfn]);
	}
	release_spinlock(&DiskFrameLists.dfllock);
}
f0103eec:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0103eef:	c9                   	leave  
f0103ef0:	c3                   	ret    

f0103ef1 <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f0103ef1:	55                   	push   %ebp
f0103ef2:	89 e5                	mov    %esp,%ebp
f0103ef4:	83 ec 28             	sub    $0x28,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f0103ef7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103efa:	c1 e8 16             	shr    $0x16,%eax
f0103efd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103f04:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f07:	01 d0                	add    %edx,%eax
f0103f09:	8b 00                	mov    (%eax),%eax
f0103f0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f0103f0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103f11:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103f16:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103f19:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f1c:	c1 e8 0c             	shr    $0xc,%eax
f0103f1f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103f22:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f0103f27:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103f2a:	72 17                	jb     f0103f43 <get_disk_page_table+0x52>
f0103f2c:	ff 75 f0             	pushl  -0x10(%ebp)
f0103f2f:	68 98 43 12 f0       	push   $0xf0124398
f0103f34:	68 9d 00 00 00       	push   $0x9d
f0103f39:	68 35 43 12 f0       	push   $0xf0124335
f0103f3e:	e8 d7 c3 ff ff       	call   f010031a <_panic>
f0103f43:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103f46:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103f4b:	89 c2                	mov    %eax,%edx
f0103f4d:	8b 45 14             	mov    0x14(%ebp),%eax
f0103f50:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f0103f52:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103f56:	0f 85 b7 00 00 00    	jne    f0104013 <get_disk_page_table+0x122>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f0103f5c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0103f60:	0f 84 9d 00 00 00    	je     f0104003 <get_disk_page_table+0x112>
						,PERM_PRESENT);
			}
#else
			{
				struct FrameInfo* ptr_frame_info;
				allocate_frame(&ptr_frame_info) ;
f0103f66:	83 ec 0c             	sub    $0xc,%esp
f0103f69:	8d 45 dc             	lea    -0x24(%ebp),%eax
f0103f6c:	50                   	push   %eax
f0103f6d:	e8 5e 42 00 00       	call   f01081d0 <allocate_frame>
f0103f72:	83 c4 10             	add    $0x10,%esp

				//LOG_STATMENT(cprintf("created table"));
				uint32 phys_page_table = to_physical_address(ptr_frame_info);
f0103f75:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103f78:	83 ec 0c             	sub    $0xc,%esp
f0103f7b:	50                   	push   %eax
f0103f7c:	e8 4c fb ff ff       	call   f0103acd <to_physical_address>
f0103f81:	83 c4 10             	add    $0x10,%esp
f0103f84:	89 45 e8             	mov    %eax,-0x18(%ebp)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0103f87:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103f8a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103f8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103f90:	c1 e8 0c             	shr    $0xc,%eax
f0103f93:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103f96:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f0103f9b:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0103f9e:	72 17                	jb     f0103fb7 <get_disk_page_table+0xc6>
f0103fa0:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103fa3:	68 98 43 12 f0       	push   $0xf0124398
f0103fa8:	68 b9 00 00 00       	push   $0xb9
f0103fad:	68 35 43 12 f0       	push   $0xf0124335
f0103fb2:	e8 63 c3 ff ff       	call   f010031a <_panic>
f0103fb7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103fba:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103fbf:	89 c2                	mov    %eax,%edx
f0103fc1:	8b 45 14             	mov    0x14(%ebp),%eax
f0103fc4:	89 10                	mov    %edx,(%eax)
				ptr_frame_info->references = 1;
f0103fc6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103fc9:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
f0103fcf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103fd2:	c1 e8 16             	shr    $0x16,%eax
f0103fd5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103fdc:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fdf:	01 d0                	add    %edx,%eax
f0103fe1:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0103fe4:	83 ca 01             	or     $0x1,%edx
f0103fe7:	89 10                	mov    %edx,(%eax)
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f0103fe9:	8b 45 14             	mov    0x14(%ebp),%eax
f0103fec:	8b 00                	mov    (%eax),%eax
f0103fee:	83 ec 04             	sub    $0x4,%esp
f0103ff1:	68 00 10 00 00       	push   $0x1000
f0103ff6:	6a 00                	push   $0x0
f0103ff8:	50                   	push   %eax
f0103ff9:	e8 7a ca 01 00       	call   f0120a78 <memset>
f0103ffe:	83 c4 10             	add    $0x10,%esp
f0104001:	eb 10                	jmp    f0104013 <get_disk_page_table+0x122>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f0104003:	8b 45 14             	mov    0x14(%ebp),%eax
f0104006:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f010400c:	b8 00 00 00 00       	mov    $0x0,%eax
f0104011:	eb 05                	jmp    f0104018 <get_disk_page_table+0x127>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f0104013:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104018:	c9                   	leave  
f0104019:	c3                   	ret    

f010401a <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f010401a:	55                   	push   %ebp
f010401b:	89 e5                	mov    %esp,%ebp
f010401d:	83 ec 28             	sub    $0x28,%esp
f0104020:	8b 45 10             	mov    0x10(%ebp),%eax
f0104023:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f0104026:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f010402a:	74 72                	je     f010409e <pf_add_empty_env_page+0x84>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f010402c:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f0104033:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104036:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f010403b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010403e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104041:	ba 00 00 00 00       	mov    $0x0,%edx
f0104046:	f7 75 f4             	divl   -0xc(%ebp)
f0104049:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010404c:	29 d0                	sub    %edx,%eax
f010404e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104051:	73 2f                	jae    f0104082 <pf_add_empty_env_page+0x68>
f0104053:	8b 45 08             	mov    0x8(%ebp),%eax
f0104056:	8b 50 6c             	mov    0x6c(%eax),%edx
f0104059:	b8 00 00 00 00       	mov    $0x0,%eax
f010405e:	29 d0                	sub    %edx,%eax
f0104060:	c1 e0 0c             	shl    $0xc,%eax
f0104063:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0104068:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010406b:	76 15                	jbe    f0104082 <pf_add_empty_env_page+0x68>
			ptr_env->nNewPageAdded++ ;
f010406d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104070:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f0104076:	8d 50 01             	lea    0x1(%eax),%edx
f0104079:	8b 45 08             	mov    0x8(%ebp),%eax
f010407c:	89 90 64 da 01 00    	mov    %edx,0x1da64(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f0104082:	a1 b4 4f 55 f0       	mov    0xf0554fb4,%eax
f0104087:	83 ec 04             	sub    $0x4,%esp
f010408a:	50                   	push   %eax
f010408b:	ff 75 0c             	pushl  0xc(%ebp)
f010408e:	ff 75 08             	pushl  0x8(%ebp)
f0104091:	e8 b2 00 00 00       	call   f0104148 <pf_add_env_page>
f0104096:	83 c4 10             	add    $0x10,%esp
f0104099:	e9 a8 00 00 00       	jmp    f0104146 <pf_add_empty_env_page+0x12c>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010409e:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01040a5:	76 19                	jbe    f01040c0 <pf_add_empty_env_page+0xa6>
f01040a7:	68 c8 43 12 f0       	push   $0xf01243c8
f01040ac:	68 ee 43 12 f0       	push   $0xf01243ee
f01040b1:	68 dc 00 00 00       	push   $0xdc
f01040b6:	68 35 43 12 f0       	push   $0xf0124335
f01040bb:	e8 5a c2 ff ff       	call   f010031a <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f01040c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01040c3:	83 c0 74             	add    $0x74,%eax
f01040c6:	83 ec 08             	sub    $0x8,%esp
f01040c9:	50                   	push   %eax
f01040ca:	ff 75 08             	pushl  0x8(%ebp)
f01040cd:	e8 ce 05 00 00       	call   f01046a0 <get_disk_page_directory>
f01040d2:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01040d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01040d8:	8b 40 74             	mov    0x74(%eax),%eax
f01040db:	8d 55 ec             	lea    -0x14(%ebp),%edx
f01040de:	52                   	push   %edx
f01040df:	6a 01                	push   $0x1
f01040e1:	ff 75 0c             	pushl  0xc(%ebp)
f01040e4:	50                   	push   %eax
f01040e5:	e8 07 fe ff ff       	call   f0103ef1 <get_disk_page_table>
f01040ea:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01040ed:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01040f0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01040f3:	c1 ea 0c             	shr    $0xc,%edx
f01040f6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01040fc:	c1 e2 02             	shl    $0x2,%edx
f01040ff:	01 d0                	add    %edx,%eax
f0104101:	8b 00                	mov    (%eax),%eax
f0104103:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f0104106:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104109:	85 c0                	test   %eax,%eax
f010410b:	75 34                	jne    f0104141 <pf_add_empty_env_page+0x127>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010410d:	83 ec 0c             	sub    $0xc,%esp
f0104110:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0104113:	50                   	push   %eax
f0104114:	e8 e9 fb ff ff       	call   f0103d02 <allocate_disk_frame>
f0104119:	83 c4 10             	add    $0x10,%esp
f010411c:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010411f:	75 07                	jne    f0104128 <pf_add_empty_env_page+0x10e>
f0104121:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0104126:	eb 1e                	jmp    f0104146 <pf_add_empty_env_page+0x12c>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0104128:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010412b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010412e:	c1 ea 0c             	shr    $0xc,%edx
f0104131:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104137:	c1 e2 02             	shl    $0x2,%edx
f010413a:	01 c2                	add    %eax,%edx
f010413c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010413f:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f0104141:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0104146:	c9                   	leave  
f0104147:	c3                   	ret    

f0104148 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0104148:	55                   	push   %ebp
f0104149:	89 e5                	mov    %esp,%ebp
f010414b:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010414e:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0104155:	76 19                	jbe    f0104170 <pf_add_env_page+0x28>
f0104157:	68 c8 43 12 f0       	push   $0xf01243c8
f010415c:	68 ee 43 12 f0       	push   $0xf01243ee
f0104161:	68 f1 00 00 00       	push   $0xf1
f0104166:	68 35 43 12 f0       	push   $0xf0124335
f010416b:	e8 aa c1 ff ff       	call   f010031a <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0104170:	8b 45 08             	mov    0x8(%ebp),%eax
f0104173:	83 c0 74             	add    $0x74,%eax
f0104176:	83 ec 08             	sub    $0x8,%esp
f0104179:	50                   	push   %eax
f010417a:	ff 75 08             	pushl  0x8(%ebp)
f010417d:	e8 1e 05 00 00       	call   f01046a0 <get_disk_page_directory>
f0104182:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0104185:	8b 45 08             	mov    0x8(%ebp),%eax
f0104188:	8b 40 74             	mov    0x74(%eax),%eax
f010418b:	8d 55 f0             	lea    -0x10(%ebp),%edx
f010418e:	52                   	push   %edx
f010418f:	6a 01                	push   $0x1
f0104191:	ff 75 0c             	pushl  0xc(%ebp)
f0104194:	50                   	push   %eax
f0104195:	e8 57 fd ff ff       	call   f0103ef1 <get_disk_page_table>
f010419a:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010419d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01041a0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01041a3:	c1 ea 0c             	shr    $0xc,%edx
f01041a6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01041ac:	c1 e2 02             	shl    $0x2,%edx
f01041af:	01 d0                	add    %edx,%eax
f01041b1:	8b 00                	mov    (%eax),%eax
f01041b3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f01041b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01041b9:	85 c0                	test   %eax,%eax
f01041bb:	75 34                	jne    f01041f1 <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01041bd:	83 ec 0c             	sub    $0xc,%esp
f01041c0:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01041c3:	50                   	push   %eax
f01041c4:	e8 39 fb ff ff       	call   f0103d02 <allocate_disk_frame>
f01041c9:	83 c4 10             	add    $0x10,%esp
f01041cc:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01041cf:	75 07                	jne    f01041d8 <pf_add_env_page+0x90>
f01041d1:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01041d6:	eb 31                	jmp    f0104209 <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01041d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01041db:	8b 55 0c             	mov    0xc(%ebp),%edx
f01041de:	c1 ea 0c             	shr    $0xc,%edx
f01041e1:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01041e7:	c1 e2 02             	shl    $0x2,%edx
f01041ea:	01 c2                	add    %eax,%edx
f01041ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01041ef:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f01041f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01041f4:	83 ec 08             	sub    $0x8,%esp
f01041f7:	ff 75 10             	pushl  0x10(%ebp)
f01041fa:	50                   	push   %eax
f01041fb:	e8 55 f9 ff ff       	call   f0103b55 <write_disk_page>
f0104200:	83 c4 10             	add    $0x10,%esp
f0104203:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f0104206:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0104209:	c9                   	leave  
f010420a:	c3                   	ret    

f010420b <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f010420b:	55                   	push   %ebp
f010420c:	89 e5                	mov    %esp,%ebp
f010420e:	83 ec 28             	sub    $0x28,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f0104211:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0104218:	76 19                	jbe    f0104233 <pf_update_env_page+0x28>
f010421a:	68 c8 43 12 f0       	push   $0xf01243c8
f010421f:	68 ee 43 12 f0       	push   $0xf01243ee
f0104224:	68 13 01 00 00       	push   $0x113
f0104229:	68 35 43 12 f0       	push   $0xf0124335
f010422e:	e8 e7 c0 ff ff       	call   f010031a <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f0104233:	8b 45 08             	mov    0x8(%ebp),%eax
f0104236:	83 c0 74             	add    $0x74,%eax
f0104239:	83 ec 08             	sub    $0x8,%esp
f010423c:	50                   	push   %eax
f010423d:	ff 75 08             	pushl  0x8(%ebp)
f0104240:	e8 5b 04 00 00       	call   f01046a0 <get_disk_page_directory>
f0104245:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0104248:	8b 45 08             	mov    0x8(%ebp),%eax
f010424b:	8b 40 74             	mov    0x74(%eax),%eax
f010424e:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0104251:	52                   	push   %edx
f0104252:	6a 00                	push   $0x0
f0104254:	ff 75 0c             	pushl  0xc(%ebp)
f0104257:	50                   	push   %eax
f0104258:	e8 94 fc ff ff       	call   f0103ef1 <get_disk_page_table>
f010425d:	83 c4 10             	add    $0x10,%esp

	//2022
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f0104260:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0104263:	85 c0                	test   %eax,%eax
f0104265:	74 29                	je     f0104290 <pf_update_env_page+0x85>
f0104267:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010426a:	85 c0                	test   %eax,%eax
f010426c:	0f 84 c5 00 00 00    	je     f0104337 <pf_update_env_page+0x12c>
f0104272:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0104275:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104278:	c1 ea 0c             	shr    $0xc,%edx
f010427b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104281:	c1 e2 02             	shl    $0x2,%edx
f0104284:	01 d0                	add    %edx,%eax
f0104286:	8b 00                	mov    (%eax),%eax
f0104288:	85 c0                	test   %eax,%eax
f010428a:	0f 85 a7 00 00 00    	jne    f0104337 <pf_update_env_page+0x12c>
	{

		uint32 VA = (uint32)virtual_address ;
f0104290:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104293:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0104296:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104299:	85 c0                	test   %eax,%eax
f010429b:	79 09                	jns    f01042a6 <pf_update_env_page+0x9b>
f010429d:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f01042a4:	76 30                	jbe    f01042d6 <pf_update_env_page+0xcb>
f01042a6:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01042ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01042b0:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f01042b5:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01042b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01042bb:	ba 00 00 00 00       	mov    $0x0,%edx
f01042c0:	f7 75 f0             	divl   -0x10(%ebp)
f01042c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01042c6:	29 d0                	sub    %edx,%eax
f01042c8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01042cb:	77 53                	ja     f0104320 <pf_update_env_page+0x115>
f01042cd:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f01042d4:	77 4a                	ja     f0104320 <pf_update_env_page+0x115>
			//				return ret ;
			//			}
			//			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			//			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f01042d6:	83 ec 04             	sub    $0x4,%esp
f01042d9:	6a 00                	push   $0x0
f01042db:	ff 75 f4             	pushl  -0xc(%ebp)
f01042de:	ff 75 08             	pushl  0x8(%ebp)
f01042e1:	e8 34 fd ff ff       	call   f010401a <pf_add_empty_env_page>
f01042e6:	83 c4 10             	add    $0x10,%esp
f01042e9:	89 45 e8             	mov    %eax,-0x18(%ebp)

				if (ret == E_NO_PAGE_FILE_SPACE)
f01042ec:	83 7d e8 f8          	cmpl   $0xfffffff8,-0x18(%ebp)
f01042f0:	75 17                	jne    f0104309 <pf_update_env_page+0xfe>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f01042f2:	83 ec 04             	sub    $0x4,%esp
f01042f5:	68 04 44 12 f0       	push   $0xf0124404
f01042fa:	68 43 01 00 00       	push   $0x143
f01042ff:	68 35 43 12 f0       	push   $0xf0124335
f0104304:	e8 11 c0 ff ff       	call   f010031a <_panic>
				}
				//cprintf("[%s] adding EMPTY page with content\n",ptr_env->prog_name);

				ptr_env->nNewPageAdded++ ;
f0104309:	8b 45 08             	mov    0x8(%ebp),%eax
f010430c:	8b 80 64 da 01 00    	mov    0x1da64(%eax),%eax
f0104312:	8d 50 01             	lea    0x1(%eax),%edx
f0104315:	8b 45 08             	mov    0x8(%ebp),%eax
f0104318:	89 90 64 da 01 00    	mov    %edx,0x1da64(%eax)
f010431e:	eb 17                	jmp    f0104337 <pf_update_env_page+0x12c>
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f0104320:	83 ec 04             	sub    $0x4,%esp
f0104323:	68 50 44 12 f0       	push   $0xf0124450
f0104328:	68 4c 01 00 00       	push   $0x14c
f010432d:	68 35 43 12 f0       	push   $0xf0124335
f0104332:	e8 e3 bf ff ff       	call   f010031a <_panic>
		}
	}
	//2022 END========================================


	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0104337:	8b 45 08             	mov    0x8(%ebp),%eax
f010433a:	8b 40 74             	mov    0x74(%eax),%eax
f010433d:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0104340:	52                   	push   %edx
f0104341:	6a 00                	push   $0x0
f0104343:	ff 75 0c             	pushl  0xc(%ebp)
f0104346:	50                   	push   %eax
f0104347:	e8 a5 fb ff ff       	call   f0103ef1 <get_disk_page_table>
f010434c:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010434f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0104352:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104355:	c1 ea 0c             	shr    $0xc,%edx
f0104358:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010435e:	c1 e2 02             	shl    $0x2,%edx
f0104361:	01 d0                	add    %edx,%eax
f0104363:	8b 00                	mov    (%eax),%eax
f0104365:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//cprintf("[%s] updating page\n",ptr_env->prog_name);
	}
#else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
f0104368:	83 ec 0c             	sub    $0xc,%esp
f010436b:	ff 75 10             	pushl  0x10(%ebp)
f010436e:	e8 5a f7 ff ff       	call   f0103acd <to_physical_address>
f0104373:	83 c4 10             	add    $0x10,%esp
f0104376:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0104379:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010437c:	c1 e8 0c             	shr    $0xc,%eax
f010437f:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0104382:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f0104387:	39 45 dc             	cmp    %eax,-0x24(%ebp)
f010438a:	72 17                	jb     f01043a3 <pf_update_env_page+0x198>
f010438c:	ff 75 e0             	pushl  -0x20(%ebp)
f010438f:	68 98 43 12 f0       	push   $0xf0124398
f0104394:	68 68 01 00 00       	push   $0x168
f0104399:	68 35 43 12 f0       	push   $0xf0124335
f010439e:	e8 77 bf ff ff       	call   f010031a <_panic>
f01043a3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01043a6:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01043ab:	83 ec 08             	sub    $0x8,%esp
f01043ae:	50                   	push   %eax
f01043af:	ff 75 e4             	pushl  -0x1c(%ebp)
f01043b2:	e8 9e f7 ff ff       	call   f0103b55 <write_disk_page>
f01043b7:	83 c4 10             	add    $0x10,%esp
f01043ba:	89 45 e8             	mov    %eax,-0x18(%ebp)
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f01043bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01043c0:	8b 80 60 da 01 00    	mov    0x1da60(%eax),%eax
f01043c6:	8d 50 01             	lea    0x1(%eax),%edx
f01043c9:	8b 45 08             	mov    0x8(%ebp),%eax
f01043cc:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)
	//======================

	return ret;
f01043d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f01043d5:	c9                   	leave  
f01043d6:	c3                   	ret    

f01043d7 <pf_read_env_page>:

	return write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(page_modified_frame_info)));
}
 */
int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f01043d7:	55                   	push   %ebp
f01043d8:	89 e5                	mov    %esp,%ebp
f01043da:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f01043dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01043e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01043e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01043e6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01043eb:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f01043ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01043f1:	8b 40 74             	mov    0x74(%eax),%eax
f01043f4:	85 c0                	test   %eax,%eax
f01043f6:	75 0a                	jne    f0104402 <pf_read_env_page+0x2b>
f01043f8:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f01043fd:	e9 90 00 00 00       	jmp    f0104492 <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f0104402:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104405:	8b 45 08             	mov    0x8(%ebp),%eax
f0104408:	8b 40 74             	mov    0x74(%eax),%eax
f010440b:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f010440e:	51                   	push   %ecx
f010440f:	6a 00                	push   $0x0
f0104411:	52                   	push   %edx
f0104412:	50                   	push   %eax
f0104413:	e8 d9 fa ff ff       	call   f0103ef1 <get_disk_page_table>
f0104418:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010441b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010441e:	85 c0                	test   %eax,%eax
f0104420:	75 07                	jne    f0104429 <pf_read_env_page+0x52>
f0104422:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0104427:	eb 69                	jmp    f0104492 <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0104429:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010442c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010442f:	c1 ea 0c             	shr    $0xc,%edx
f0104432:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0104438:	c1 e2 02             	shl    $0x2,%edx
f010443b:	01 d0                	add    %edx,%eax
f010443d:	8b 00                	mov    (%eax),%eax
f010443f:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0104442:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104446:	75 07                	jne    f010444f <pf_read_env_page+0x78>
f0104448:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f010444d:	eb 43                	jmp    f0104492 <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f010444f:	83 ec 08             	sub    $0x8,%esp
f0104452:	ff 75 0c             	pushl  0xc(%ebp)
f0104455:	ff 75 f0             	pushl  -0x10(%ebp)
f0104458:	e8 c9 f6 ff ff       	call   f0103b26 <read_disk_page>
f010445d:	83 c4 10             	add    $0x10,%esp
f0104460:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f0104463:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104466:	8b 45 08             	mov    0x8(%ebp),%eax
f0104469:	8b 40 64             	mov    0x64(%eax),%eax
f010446c:	6a 40                	push   $0x40
f010446e:	6a 00                	push   $0x0
f0104470:	52                   	push   %edx
f0104471:	50                   	push   %eax
f0104472:	e8 b1 46 00 00       	call   f0108b28 <pt_set_page_permissions>
f0104477:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f010447a:	8b 45 08             	mov    0x8(%ebp),%eax
f010447d:	8b 80 5c da 01 00    	mov    0x1da5c(%eax),%eax
f0104483:	8d 50 01             	lea    0x1(%eax),%edx
f0104486:	8b 45 08             	mov    0x8(%ebp),%eax
f0104489:	89 90 5c da 01 00    	mov    %edx,0x1da5c(%eax)
	//======================

	return disk_read_error;
f010448f:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0104492:	c9                   	leave  
f0104493:	c3                   	ret    

f0104494 <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f0104494:	55                   	push   %ebp
f0104495:	89 e5                	mov    %esp,%ebp
f0104497:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f010449a:	8b 45 08             	mov    0x8(%ebp),%eax
f010449d:	8b 40 74             	mov    0x74(%eax),%eax
f01044a0:	85 c0                	test   %eax,%eax
f01044a2:	74 62                	je     f0104506 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01044a4:	8b 45 08             	mov    0x8(%ebp),%eax
f01044a7:	8b 40 74             	mov    0x74(%eax),%eax
f01044aa:	8d 55 f0             	lea    -0x10(%ebp),%edx
f01044ad:	52                   	push   %edx
f01044ae:	6a 00                	push   $0x0
f01044b0:	ff 75 0c             	pushl  0xc(%ebp)
f01044b3:	50                   	push   %eax
f01044b4:	e8 38 fa ff ff       	call   f0103ef1 <get_disk_page_table>
f01044b9:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f01044bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01044bf:	85 c0                	test   %eax,%eax
f01044c1:	74 46                	je     f0104509 <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01044c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01044c6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044c9:	c1 ea 0c             	shr    $0xc,%edx
f01044cc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01044d2:	c1 e2 02             	shl    $0x2,%edx
f01044d5:	01 d0                	add    %edx,%eax
f01044d7:	8b 00                	mov    (%eax),%eax
f01044d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f01044dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01044df:	8b 55 0c             	mov    0xc(%ebp),%edx
f01044e2:	c1 ea 0c             	shr    $0xc,%edx
f01044e5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01044eb:	c1 e2 02             	shl    $0x2,%edx
f01044ee:	01 d0                	add    %edx,%eax
f01044f0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f01044f6:	83 ec 0c             	sub    $0xc,%esp
f01044f9:	ff 75 f4             	pushl  -0xc(%ebp)
f01044fc:	e8 ef f8 ff ff       	call   f0103df0 <free_disk_frame>
f0104501:	83 c4 10             	add    $0x10,%esp
f0104504:	eb 04                	jmp    f010450a <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0104506:	90                   	nop
f0104507:	eb 01                	jmp    f010450a <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0104509:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f010450a:	c9                   	leave  
f010450b:	c3                   	ret    

f010450c <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f010450c:	55                   	push   %ebp
f010450d:	89 e5                	mov    %esp,%ebp
f010450f:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104512:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104519:	e9 ee 00 00 00       	jmp    f010460c <pf_free_env+0x100>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f010451e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104521:	8b 40 74             	mov    0x74(%eax),%eax
f0104524:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104527:	c1 e2 02             	shl    $0x2,%edx
f010452a:	01 d0                	add    %edx,%eax
f010452c:	8b 00                	mov    (%eax),%eax
f010452e:	83 e0 01             	and    $0x1,%eax
f0104531:	85 c0                	test   %eax,%eax
f0104533:	0f 84 cf 00 00 00    	je     f0104608 <pf_free_env+0xfc>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0104539:	8b 45 08             	mov    0x8(%ebp),%eax
f010453c:	8b 40 74             	mov    0x74(%eax),%eax
f010453f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104542:	c1 e2 02             	shl    $0x2,%edx
f0104545:	01 d0                	add    %edx,%eax
f0104547:	8b 00                	mov    (%eax),%eax
f0104549:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010454e:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f0104551:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104554:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0104557:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010455a:	c1 e8 0c             	shr    $0xc,%eax
f010455d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0104560:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f0104565:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0104568:	72 17                	jb     f0104581 <pf_free_env+0x75>
f010456a:	ff 75 e8             	pushl  -0x18(%ebp)
f010456d:	68 98 43 12 f0       	push   $0xf0124398
f0104572:	68 c8 01 00 00       	push   $0x1c8
f0104577:	68 35 43 12 f0       	push   $0xf0124335
f010457c:	e8 99 bd ff ff       	call   f010031a <_panic>
f0104581:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104584:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104589:	89 45 e0             	mov    %eax,-0x20(%ebp)
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f010458c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104593:	eb 3a                	jmp    f01045cf <pf_free_env+0xc3>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f0104595:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104598:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010459f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01045a2:	01 d0                	add    %edx,%eax
f01045a4:	8b 00                	mov    (%eax),%eax
f01045a6:	89 45 dc             	mov    %eax,-0x24(%ebp)
			pt[pteno] = 0;
f01045a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01045ac:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01045b3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01045b6:	01 d0                	add    %edx,%eax
f01045b8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f01045be:	83 ec 0c             	sub    $0xc,%esp
f01045c1:	ff 75 dc             	pushl  -0x24(%ebp)
f01045c4:	e8 27 f8 ff ff       	call   f0103df0 <free_disk_frame>
f01045c9:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f01045cc:	ff 45 f0             	incl   -0x10(%ebp)
f01045cf:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f01045d6:	76 bd                	jbe    f0104595 <pf_free_env+0x89>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f01045d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01045db:	8b 40 74             	mov    0x74(%eax),%eax
f01045de:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01045e1:	c1 e2 02             	shl    $0x2,%edx
f01045e4:	01 d0                	add    %edx,%eax
f01045e6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		{
			kfree(pt);
		}
#else
		{
			decrement_references(to_frame_info(pa));
f01045ec:	83 ec 0c             	sub    $0xc,%esp
f01045ef:	ff 75 ec             	pushl  -0x14(%ebp)
f01045f2:	e8 e9 f4 ff ff       	call   f0103ae0 <to_frame_info>
f01045f7:	83 c4 10             	add    $0x10,%esp
f01045fa:	83 ec 0c             	sub    $0xc,%esp
f01045fd:	50                   	push   %eax
f01045fe:	e8 da 3d 00 00       	call   f01083dd <decrement_references>
f0104603:	83 c4 10             	add    $0x10,%esp
f0104606:	eb 01                	jmp    f0104609 <pf_free_env+0xfd>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0104608:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104609:	ff 45 f4             	incl   -0xc(%ebp)
f010460c:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0104613:	0f 86 05 ff ff ff    	jbe    f010451e <pf_free_env+0x12>
	{
		kfree(ptr_env->disk_env_pgdir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
f0104619:	8b 45 08             	mov    0x8(%ebp),%eax
f010461c:	8b 40 78             	mov    0x78(%eax),%eax
f010461f:	83 ec 0c             	sub    $0xc,%esp
f0104622:	50                   	push   %eax
f0104623:	e8 b8 f4 ff ff       	call   f0103ae0 <to_frame_info>
f0104628:	83 c4 10             	add    $0x10,%esp
f010462b:	83 ec 0c             	sub    $0xc,%esp
f010462e:	50                   	push   %eax
f010462f:	e8 a9 3d 00 00       	call   f01083dd <decrement_references>
f0104634:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0104637:	8b 45 08             	mov    0x8(%ebp),%eax
f010463a:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0104641:	8b 45 08             	mov    0x8(%ebp),%eax
f0104644:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f010464b:	8b 45 08             	mov    0x8(%ebp),%eax
f010464e:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104651:	85 c0                	test   %eax,%eax
f0104653:	74 48                	je     f010469d <pf_free_env+0x191>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0104655:	83 ec 0c             	sub    $0xc,%esp
f0104658:	ff 75 08             	pushl  0x8(%ebp)
f010465b:	e8 dd 03 00 00       	call   f0104a3d <__pf_remove_env_all_tables>
f0104660:	83 c4 10             	add    $0x10,%esp
	{
		kfree(ptr_env->disk_env_tabledir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
f0104663:	8b 45 08             	mov    0x8(%ebp),%eax
f0104666:	8b 80 80 00 00 00    	mov    0x80(%eax),%eax
f010466c:	83 ec 0c             	sub    $0xc,%esp
f010466f:	50                   	push   %eax
f0104670:	e8 6b f4 ff ff       	call   f0103ae0 <to_frame_info>
f0104675:	83 c4 10             	add    $0x10,%esp
f0104678:	83 ec 0c             	sub    $0xc,%esp
f010467b:	50                   	push   %eax
f010467c:	e8 5c 3d 00 00       	call   f01083dd <decrement_references>
f0104681:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0104684:	8b 45 08             	mov    0x8(%ebp),%eax
f0104687:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f010468e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104691:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
f0104698:	00 00 00 
f010469b:	eb 01                	jmp    f010469e <pf_free_env+0x192>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f010469d:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f010469e:	c9                   	leave  
f010469f:	c3                   	ret    

f01046a0 <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f01046a0:	55                   	push   %ebp
f01046a1:	89 e5                	mov    %esp,%ebp
f01046a3:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f01046a6:	8b 45 08             	mov    0x8(%ebp),%eax
f01046a9:	8b 50 74             	mov    0x74(%eax),%edx
f01046ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f01046af:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f01046b1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01046b4:	8b 00                	mov    (%eax),%eax
f01046b6:	85 c0                	test   %eax,%eax
f01046b8:	0f 85 aa 00 00 00    	jne    f0104768 <get_disk_page_directory+0xc8>
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f01046be:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f01046c5:	83 ec 0c             	sub    $0xc,%esp
f01046c8:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01046cb:	50                   	push   %eax
f01046cc:	e8 ff 3a 00 00       	call   f01081d0 <allocate_frame>
f01046d1:	83 c4 10             	add    $0x10,%esp
f01046d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01046d7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01046db:	79 08                	jns    f01046e5 <get_disk_page_directory+0x45>
				return r;
f01046dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01046e0:	e9 88 00 00 00       	jmp    f010476d <get_disk_page_directory+0xcd>
			p->references = 1;
f01046e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01046e8:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f01046ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01046f1:	83 ec 0c             	sub    $0xc,%esp
f01046f4:	50                   	push   %eax
f01046f5:	e8 d3 f3 ff ff       	call   f0103acd <to_physical_address>
f01046fa:	83 c4 10             	add    $0x10,%esp
f01046fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0104700:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104703:	c1 e8 0c             	shr    $0xc,%eax
f0104706:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0104709:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f010470e:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0104711:	72 17                	jb     f010472a <get_disk_page_directory+0x8a>
f0104713:	ff 75 f0             	pushl  -0x10(%ebp)
f0104716:	68 98 43 12 f0       	push   $0xf0124398
f010471b:	68 20 02 00 00       	push   $0x220
f0104720:	68 35 43 12 f0       	push   $0xf0124335
f0104725:	e8 f0 bb ff ff       	call   f010031a <_panic>
f010472a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010472d:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104732:	89 c2                	mov    %eax,%edx
f0104734:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104737:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
f0104739:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010473c:	83 ec 0c             	sub    $0xc,%esp
f010473f:	50                   	push   %eax
f0104740:	e8 88 f3 ff ff       	call   f0103acd <to_physical_address>
f0104745:	83 c4 10             	add    $0x10,%esp
f0104748:	89 c2                	mov    %eax,%edx
f010474a:	8b 45 08             	mov    0x8(%ebp),%eax
f010474d:	89 50 78             	mov    %edx,0x78(%eax)
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0104750:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104753:	8b 00                	mov    (%eax),%eax
f0104755:	83 ec 04             	sub    $0x4,%esp
f0104758:	68 00 10 00 00       	push   $0x1000
f010475d:	6a 00                	push   $0x0
f010475f:	50                   	push   %eax
f0104760:	e8 13 c3 01 00       	call   f0120a78 <memset>
f0104765:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0104768:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010476d:	c9                   	leave  
f010476e:	c3                   	ret    

f010476f <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f010476f:	55                   	push   %ebp
f0104770:	89 e5                	mov    %esp,%ebp
f0104772:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0104775:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010477c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104783:	e9 a6 00 00 00       	jmp    f010482e <pf_calculate_allocated_pages+0xbf>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0104788:	8b 45 08             	mov    0x8(%ebp),%eax
f010478b:	8b 40 74             	mov    0x74(%eax),%eax
f010478e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104791:	c1 e2 02             	shl    $0x2,%edx
f0104794:	01 d0                	add    %edx,%eax
f0104796:	8b 00                	mov    (%eax),%eax
f0104798:	83 e0 01             	and    $0x1,%eax
f010479b:	85 c0                	test   %eax,%eax
f010479d:	0f 84 87 00 00 00    	je     f010482a <pf_calculate_allocated_pages+0xbb>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f01047a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01047a6:	8b 40 74             	mov    0x74(%eax),%eax
f01047a9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01047ac:	c1 e2 02             	shl    $0x2,%edx
f01047af:	01 d0                	add    %edx,%eax
f01047b1:	8b 00                	mov    (%eax),%eax
f01047b3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01047b8:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f01047bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01047be:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01047c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01047c4:	c1 e8 0c             	shr    $0xc,%eax
f01047c7:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01047ca:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f01047cf:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f01047d2:	72 17                	jb     f01047eb <pf_calculate_allocated_pages+0x7c>
f01047d4:	ff 75 e4             	pushl  -0x1c(%ebp)
f01047d7:	68 98 43 12 f0       	push   $0xf0124398
f01047dc:	68 40 02 00 00       	push   $0x240
f01047e1:	68 35 43 12 f0       	push   $0xf0124335
f01047e6:	e8 2f bb ff ff       	call   f010031a <_panic>
f01047eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01047ee:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01047f3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f01047f6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01047fd:	eb 20                	jmp    f010481f <pf_calculate_allocated_pages+0xb0>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f01047ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104802:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0104809:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010480c:	01 d0                	add    %edx,%eax
f010480e:	8b 00                	mov    (%eax),%eax
f0104810:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if(dfn != 0)
f0104813:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0104817:	74 03                	je     f010481c <pf_calculate_allocated_pages+0xad>
				counter ++;
f0104819:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f010481c:	ff 45 ec             	incl   -0x14(%ebp)
f010481f:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0104826:	76 d7                	jbe    f01047ff <pf_calculate_allocated_pages+0x90>
f0104828:	eb 01                	jmp    f010482b <pf_calculate_allocated_pages+0xbc>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f010482a:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f010482b:	ff 45 f4             	incl   -0xc(%ebp)
f010482e:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0104835:	0f 86 4d ff ff ff    	jbe    f0104788 <pf_calculate_allocated_pages+0x19>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f010483b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010483e:	c9                   	leave  
f010483f:	c3                   	ret    

f0104840 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0104840:	55                   	push   %ebp
f0104841:	89 e5                	mov    %esp,%ebp
f0104843:	83 ec 18             	sub    $0x18,%esp
	uint32 totalFreeDiskFrames ;
	acquire_spinlock(&DiskFrameLists.dfllock);
f0104846:	83 ec 0c             	sub    $0xc,%esp
f0104849:	68 f0 50 55 f0       	push   $0xf05550f0
f010484e:	e8 84 a2 00 00       	call   f010ead7 <acquire_spinlock>
f0104853:	83 c4 10             	add    $0x10,%esp
	{
		/*2023: UPDATE beased on suggestion from T112 2023.Term1*/
		totalFreeDiskFrames = LIST_SIZE(&DiskFrameLists.disk_free_frame_list);
f0104856:	a1 ec 50 55 f0       	mov    0xf05550ec,%eax
f010485b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		//	LIST_FOREACH(ptr, &disk_free_frame_list)
		//	{
		//		totalFreeDiskFrames++ ;
		//	}
	}
	release_spinlock(&DiskFrameLists.dfllock);
f010485e:	83 ec 0c             	sub    $0xc,%esp
f0104861:	68 f0 50 55 f0       	push   $0xf05550f0
f0104866:	e8 f3 a2 00 00       	call   f010eb5e <release_spinlock>
f010486b:	83 c4 10             	add    $0x10,%esp
	return totalFreeDiskFrames;
f010486e:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f0104871:	c9                   	leave  
f0104872:	c3                   	ret    

f0104873 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0104873:	55                   	push   %ebp
f0104874:	89 e5                	mov    %esp,%ebp
f0104876:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0104879:	8b 45 08             	mov    0x8(%ebp),%eax
f010487c:	8b 50 7c             	mov    0x7c(%eax),%edx
f010487f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104882:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0104884:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104887:	8b 00                	mov    (%eax),%eax
f0104889:	85 c0                	test   %eax,%eax
f010488b:	0f 85 ad 00 00 00    	jne    f010493e <get_disk_table_directory+0xcb>
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f0104891:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0104898:	83 ec 0c             	sub    $0xc,%esp
f010489b:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010489e:	50                   	push   %eax
f010489f:	e8 2c 39 00 00       	call   f01081d0 <allocate_frame>
f01048a4:	83 c4 10             	add    $0x10,%esp
f01048a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01048aa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01048ae:	79 08                	jns    f01048b8 <get_disk_table_directory+0x45>
				return r;
f01048b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01048b3:	e9 8b 00 00 00       	jmp    f0104943 <get_disk_table_directory+0xd0>
			p->references = 1;
f01048b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01048bb:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f01048c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01048c4:	83 ec 0c             	sub    $0xc,%esp
f01048c7:	50                   	push   %eax
f01048c8:	e8 00 f2 ff ff       	call   f0103acd <to_physical_address>
f01048cd:	83 c4 10             	add    $0x10,%esp
f01048d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01048d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01048d6:	c1 e8 0c             	shr    $0xc,%eax
f01048d9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01048dc:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f01048e1:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01048e4:	72 17                	jb     f01048fd <get_disk_table_directory+0x8a>
f01048e6:	ff 75 f0             	pushl  -0x10(%ebp)
f01048e9:	68 98 43 12 f0       	push   $0xf0124398
f01048ee:	68 83 02 00 00       	push   $0x283
f01048f3:	68 35 43 12 f0       	push   $0xf0124335
f01048f8:	e8 1d ba ff ff       	call   f010031a <_panic>
f01048fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104900:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0104905:	89 c2                	mov    %eax,%edx
f0104907:	8b 45 0c             	mov    0xc(%ebp),%eax
f010490a:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
f010490c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010490f:	83 ec 0c             	sub    $0xc,%esp
f0104912:	50                   	push   %eax
f0104913:	e8 b5 f1 ff ff       	call   f0103acd <to_physical_address>
f0104918:	83 c4 10             	add    $0x10,%esp
f010491b:	89 c2                	mov    %eax,%edx
f010491d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104920:	89 90 80 00 00 00    	mov    %edx,0x80(%eax)
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0104926:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104929:	8b 00                	mov    (%eax),%eax
f010492b:	83 ec 04             	sub    $0x4,%esp
f010492e:	68 00 10 00 00       	push   $0x1000
f0104933:	6a 00                	push   $0x0
f0104935:	50                   	push   %eax
f0104936:	e8 3d c1 01 00       	call   f0120a78 <memset>
f010493b:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f010493e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0104943:	c9                   	leave  
f0104944:	c3                   	ret    

f0104945 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0104945:	55                   	push   %ebp
f0104946:	89 e5                	mov    %esp,%ebp
f0104948:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f010494b:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0104952:	76 19                	jbe    f010496d <__pf_write_env_table+0x28>
f0104954:	68 c8 43 12 f0       	push   $0xf01243c8
f0104959:	68 ee 43 12 f0       	push   $0xf01243ee
f010495e:	68 91 02 00 00       	push   $0x291
f0104963:	68 35 43 12 f0       	push   $0xf0124335
f0104968:	e8 ad b9 ff ff       	call   f010031a <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f010496d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104970:	83 c0 7c             	add    $0x7c,%eax
f0104973:	83 ec 08             	sub    $0x8,%esp
f0104976:	50                   	push   %eax
f0104977:	ff 75 08             	pushl  0x8(%ebp)
f010497a:	e8 f4 fe ff ff       	call   f0104873 <get_disk_table_directory>
f010497f:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0104982:	8b 45 08             	mov    0x8(%ebp),%eax
f0104985:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104988:	8b 55 0c             	mov    0xc(%ebp),%edx
f010498b:	c1 ea 16             	shr    $0x16,%edx
f010498e:	c1 e2 02             	shl    $0x2,%edx
f0104991:	01 d0                	add    %edx,%eax
f0104993:	8b 00                	mov    (%eax),%eax
f0104995:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0104998:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010499b:	85 c0                	test   %eax,%eax
f010499d:	75 31                	jne    f01049d0 <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f010499f:	83 ec 0c             	sub    $0xc,%esp
f01049a2:	8d 45 f0             	lea    -0x10(%ebp),%eax
f01049a5:	50                   	push   %eax
f01049a6:	e8 57 f3 ff ff       	call   f0103d02 <allocate_disk_frame>
f01049ab:	83 c4 10             	add    $0x10,%esp
f01049ae:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01049b1:	75 07                	jne    f01049ba <__pf_write_env_table+0x75>
f01049b3:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01049b8:	eb 2e                	jmp    f01049e8 <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f01049ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01049bd:	8b 40 7c             	mov    0x7c(%eax),%eax
f01049c0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01049c3:	c1 ea 16             	shr    $0x16,%edx
f01049c6:	c1 e2 02             	shl    $0x2,%edx
f01049c9:	01 c2                	add    %eax,%edx
f01049cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01049ce:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f01049d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01049d3:	83 ec 08             	sub    $0x8,%esp
f01049d6:	ff 75 10             	pushl  0x10(%ebp)
f01049d9:	50                   	push   %eax
f01049da:	e8 76 f1 ff ff       	call   f0103b55 <write_disk_page>
f01049df:	83 c4 10             	add    $0x10,%esp
f01049e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f01049e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01049e8:	c9                   	leave  
f01049e9:	c3                   	ret    

f01049ea <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f01049ea:	55                   	push   %ebp
f01049eb:	89 e5                	mov    %esp,%ebp
f01049ed:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f01049f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01049f3:	8b 40 7c             	mov    0x7c(%eax),%eax
f01049f6:	85 c0                	test   %eax,%eax
f01049f8:	75 07                	jne    f0104a01 <__pf_read_env_table+0x17>
f01049fa:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f01049ff:	eb 3a                	jmp    f0104a3b <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0104a01:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a04:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104a07:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104a0a:	c1 ea 16             	shr    $0x16,%edx
f0104a0d:	c1 e2 02             	shl    $0x2,%edx
f0104a10:	01 d0                	add    %edx,%eax
f0104a12:	8b 00                	mov    (%eax),%eax
f0104a14:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0104a17:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104a1b:	75 07                	jne    f0104a24 <__pf_read_env_table+0x3a>
f0104a1d:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0104a22:	eb 17                	jmp    f0104a3b <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0104a24:	83 ec 08             	sub    $0x8,%esp
f0104a27:	ff 75 10             	pushl  0x10(%ebp)
f0104a2a:	ff 75 f4             	pushl  -0xc(%ebp)
f0104a2d:	e8 f4 f0 ff ff       	call   f0103b26 <read_disk_page>
f0104a32:	83 c4 10             	add    $0x10,%esp
f0104a35:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0104a38:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0104a3b:	c9                   	leave  
f0104a3c:	c3                   	ret    

f0104a3d <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0104a3d:	55                   	push   %ebp
f0104a3e:	89 e5                	mov    %esp,%ebp
f0104a40:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0104a43:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a46:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104a49:	85 c0                	test   %eax,%eax
f0104a4b:	74 4c                	je     f0104a99 <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104a4d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0104a54:	eb 38                	jmp    f0104a8e <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0104a56:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a59:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104a5c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a5f:	c1 e2 02             	shl    $0x2,%edx
f0104a62:	01 d0                	add    %edx,%eax
f0104a64:	8b 00                	mov    (%eax),%eax
f0104a66:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0104a69:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a6c:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104a6f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104a72:	c1 e2 02             	shl    $0x2,%edx
f0104a75:	01 d0                	add    %edx,%eax
f0104a77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0104a7d:	83 ec 0c             	sub    $0xc,%esp
f0104a80:	ff 75 f0             	pushl  -0x10(%ebp)
f0104a83:	e8 68 f3 ff ff       	call   f0103df0 <free_disk_frame>
f0104a88:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0104a8b:	ff 45 f4             	incl   -0xc(%ebp)
f0104a8e:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0104a95:	76 bf                	jbe    f0104a56 <__pf_remove_env_all_tables+0x19>
f0104a97:	eb 01                	jmp    f0104a9a <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0104a99:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0104a9a:	c9                   	leave  
f0104a9b:	c3                   	ret    

f0104a9c <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0104a9c:	55                   	push   %ebp
f0104a9d:	89 e5                	mov    %esp,%ebp
f0104a9f:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0104aa2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104aa6:	75 10                	jne    f0104ab8 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0104aa8:	83 ec 0c             	sub    $0xc,%esp
f0104aab:	68 cc 44 12 f0       	push   $0xf01244cc
f0104ab0:	e8 b7 c4 ff ff       	call   f0100f6c <cprintf>
f0104ab5:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0104ab8:	8b 45 08             	mov    0x8(%ebp),%eax
f0104abb:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104abe:	85 c0                	test   %eax,%eax
f0104ac0:	74 3d                	je     f0104aff <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0104ac2:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ac5:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104ac8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104acb:	c1 ea 16             	shr    $0x16,%edx
f0104ace:	c1 e2 02             	shl    $0x2,%edx
f0104ad1:	01 d0                	add    %edx,%eax
f0104ad3:	8b 00                	mov    (%eax),%eax
f0104ad5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0104ad8:	8b 45 08             	mov    0x8(%ebp),%eax
f0104adb:	8b 40 7c             	mov    0x7c(%eax),%eax
f0104ade:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104ae1:	c1 ea 16             	shr    $0x16,%edx
f0104ae4:	c1 e2 02             	shl    $0x2,%edx
f0104ae7:	01 d0                	add    %edx,%eax
f0104ae9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0104aef:	83 ec 0c             	sub    $0xc,%esp
f0104af2:	ff 75 f4             	pushl  -0xc(%ebp)
f0104af5:	e8 f6 f2 ff ff       	call   f0103df0 <free_disk_frame>
f0104afa:	83 c4 10             	add    $0x10,%esp
f0104afd:	eb 01                	jmp    f0104b00 <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0104aff:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0104b00:	c9                   	leave  
f0104b01:	c3                   	ret    

f0104b02 <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0104b02:	55                   	push   %ebp
f0104b03:	89 e5                	mov    %esp,%ebp
f0104b05:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0104b08:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0104b0f:	eb 1f                	jmp    f0104b30 <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0104b11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b14:	83 ec 04             	sub    $0x4,%esp
f0104b17:	6a 08                	push   $0x8
f0104b19:	ff 75 08             	pushl  0x8(%ebp)
f0104b1c:	50                   	push   %eax
f0104b1d:	e8 90 c6 01 00       	call   f01211b2 <ide_write>
f0104b22:	83 c4 10             	add    $0x10,%esp
f0104b25:	85 c0                	test   %eax,%eax
f0104b27:	75 12                	jne    f0104b3b <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0104b29:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0104b30:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0104b37:	7e d8                	jle    f0104b11 <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104b39:	eb 01                	jmp    f0104b3c <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0104b3b:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0104b3c:	90                   	nop
f0104b3d:	c9                   	leave  
f0104b3e:	c3                   	ret    

f0104b3f <context_switch>:
# Switch stacks to new and pop previously-saved registers.

.globl context_switch
context_switch:
  # Save old callee-saved registers
  pushl %ebp
f0104b3f:	55                   	push   %ebp
  pushl %eax
f0104b40:	50                   	push   %eax
  pushl %ebx
f0104b41:	53                   	push   %ebx
  pushl %ecx
f0104b42:	51                   	push   %ecx
  pushl %edx
f0104b43:	52                   	push   %edx
  pushl %esi
f0104b44:	56                   	push   %esi
  pushl %edi
f0104b45:	57                   	push   %edi

  # Switch stacks
  movl 32(%esp), %eax
f0104b46:	8b 44 24 20          	mov    0x20(%esp),%eax
  movl 36(%esp), %edx
f0104b4a:	8b 54 24 24          	mov    0x24(%esp),%edx
  movl %esp, (%eax)
f0104b4e:	89 20                	mov    %esp,(%eax)
  movl %edx, %esp
f0104b50:	89 d4                	mov    %edx,%esp

  # Load new callee-saved registers
  popl %edi
f0104b52:	5f                   	pop    %edi
  popl %esi
f0104b53:	5e                   	pop    %esi
  popl %edx
f0104b54:	5a                   	pop    %edx
  popl %ecx
f0104b55:	59                   	pop    %ecx
  popl %ebx
f0104b56:	5b                   	pop    %ebx
  popl %eax
f0104b57:	58                   	pop    %eax
  popl %ebp
f0104b58:	5d                   	pop    %ebp
  ret
f0104b59:	c3                   	ret    

f0104b5a <mc146818_read>:
#include <kern/trap/trap.h>


unsigned
mc146818_read(unsigned reg)
{
f0104b5a:	55                   	push   %ebp
f0104b5b:	89 e5                	mov    %esp,%ebp
f0104b5d:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0104b60:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b63:	0f b6 c0             	movzbl %al,%eax
f0104b66:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0104b6d:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104b70:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104b73:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104b76:	ee                   	out    %al,(%dx)
f0104b77:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104b7e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104b81:	89 c2                	mov    %eax,%edx
f0104b83:	ec                   	in     (%dx),%al
f0104b84:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0104b87:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f0104b8a:	0f b6 c0             	movzbl %al,%eax
}
f0104b8d:	c9                   	leave  
f0104b8e:	c3                   	ret    

f0104b8f <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f0104b8f:	55                   	push   %ebp
f0104b90:	89 e5                	mov    %esp,%ebp
f0104b92:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0104b95:	8b 45 08             	mov    0x8(%ebp),%eax
f0104b98:	0f b6 c0             	movzbl %al,%eax
f0104b9b:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0104ba2:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104ba5:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104ba8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104bab:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0104bac:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104baf:	0f b6 c0             	movzbl %al,%eax
f0104bb2:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0104bb9:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104bbc:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104bbf:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104bc2:	ee                   	out    %al,(%dx)
}
f0104bc3:	90                   	nop
f0104bc4:	c9                   	leave  
f0104bc5:	c3                   	ret    

f0104bc6 <kclock_init>:
 * PIT channel is reset, and the output immediately goes to its initial state
 * (which depends on the mode).
 */

void kclock_init()
{
f0104bc6:	55                   	push   %ebp
f0104bc7:	89 e5                	mov    %esp,%ebp
f0104bc9:	83 ec 08             	sub    $0x8,%esp
	ticks = 0;
f0104bcc:	c7 05 c8 50 55 f0 00 	movl   $0x0,0xf05550c8
f0104bd3:	00 00 00 
f0104bd6:	c7 05 cc 50 55 f0 00 	movl   $0x0,0xf05550cc
f0104bdd:	00 00 00 
	irq_install_handler(0, &clock_interrupt_handler);
f0104be0:	83 ec 08             	sub    $0x8,%esp
f0104be3:	68 b4 6b 10 f0       	push   $0xf0106bb4
f0104be8:	6a 00                	push   $0x0
f0104bea:	e8 a9 87 00 00       	call   f010d398 <irq_install_handler>
f0104bef:	83 c4 10             	add    $0x10,%esp
}
f0104bf2:	90                   	nop
f0104bf3:	c9                   	leave  
f0104bf4:	c3                   	ret    

f0104bf5 <kclock_start>:
void
kclock_start(uint8 quantum_in_ms)
{
f0104bf5:	55                   	push   %ebp
f0104bf6:	89 e5                	mov    %esp,%ebp
f0104bf8:	53                   	push   %ebx
f0104bf9:	83 ec 24             	sub    $0x24,%esp
f0104bfc:	8b 45 08             	mov    0x8(%ebp),%eax
f0104bff:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104c02:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104c09:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104c0d:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104c10:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104c13:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104c14:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104c18:	77 48                	ja     f0104c62 <kclock_start+0x6d>
f0104c1a:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104c21:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104c25:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104c28:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104c2b:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f0104c2c:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104c30:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104c35:	99                   	cltd   
f0104c36:	f7 fb                	idiv   %ebx
f0104c38:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104c3e:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104c42:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104c47:	99                   	cltd   
f0104c48:	f7 fb                	idiv   %ebx
f0104c4a:	89 c3                	mov    %eax,%ebx
f0104c4c:	89 c8                	mov    %ecx,%eax
f0104c4e:	99                   	cltd   
f0104c4f:	f7 fb                	idiv   %ebx
f0104c51:	0f b7 c0             	movzwl %ax,%eax
f0104c54:	83 ec 0c             	sub    $0xc,%esp
f0104c57:	50                   	push   %eax
f0104c58:	e8 b3 01 00 00       	call   f0104e10 <kclock_write_cnt0_LSB_first>
f0104c5d:	83 c4 10             	add    $0x10,%esp
f0104c60:	eb 13                	jmp    f0104c75 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104c62:	6a 35                	push   $0x35
f0104c64:	68 f0 44 12 f0       	push   $0xf01244f0
f0104c69:	6a 41                	push   $0x41
f0104c6b:	68 4c 45 12 f0       	push   $0xf012454c
f0104c70:	e8 a5 b6 ff ff       	call   f010031a <_panic>
//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup IRQ0 (timer interrupts) via 8259A\n");

	//irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
	irq_clear_mask(0);
f0104c75:	83 ec 0c             	sub    $0xc,%esp
f0104c78:	6a 00                	push   $0x0
f0104c7a:	e8 66 23 00 00       	call   f0106fe5 <irq_clear_mask>
f0104c7f:	83 c4 10             	add    $0x10,%esp

	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f0104c82:	90                   	nop
f0104c83:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104c86:	c9                   	leave  
f0104c87:	c3                   	ret    

f0104c88 <kclock_stop>:

void
kclock_stop(void)
{
f0104c88:	55                   	push   %ebp
f0104c89:	89 e5                	mov    %esp,%ebp
f0104c8b:	83 ec 18             	sub    $0x18,%esp
f0104c8e:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104c95:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104c99:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104c9c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104c9f:	ee                   	out    %al,(%dx)
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}

	/*Mask the IRQ0 (Timer Interrupt)*/
	//irq_setmask_8259A(0xFFFF);
	irq_set_mask(0);
f0104ca0:	83 ec 0c             	sub    $0xc,%esp
f0104ca3:	6a 00                	push   $0x0
f0104ca5:	e8 c6 22 00 00       	call   f0106f70 <irq_set_mask>
f0104caa:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f0104cad:	90                   	nop
f0104cae:	c9                   	leave  
f0104caf:	c3                   	ret    

f0104cb0 <kclock_resume>:

void
kclock_resume(void)
{
f0104cb0:	55                   	push   %ebp
f0104cb1:	89 e5                	mov    %esp,%ebp
f0104cb3:	83 ec 18             	sub    $0x18,%esp
	/*2024: changed to latch
	 * the current count is copied into an internal "latch register" which can then be read via the data port corresponding to the selected channel (I/O ports 0x40 to 0x42). The value kept in the latch register remains the same until it has been fully read, or until a new mode/command register is written.
	 * The main benefit of the latch command is that it allows both bytes of the current count to be read without inconsistencies. For example, if you didn't use the latch command, then the current count may decrease from 0x0200 to 0x01FF after you've read the low byte but before you've read the high byte, so that your software thinks the counter was 0x0100 instead of 0x0200 (or 0x01FF).
	 */
	//uint16 cnt0 = kclock_read_cnt0() ;
	uint16 cnt0 = kclock_read_cnt0_latch() ;
f0104cb6:	e8 f5 01 00 00       	call   f0104eb0 <kclock_read_cnt0_latch>
f0104cbb:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//cprintf("CLOCK RESUMED: Counter0 Value = %d\n", cnt0 );
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f0104cbf:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f0104cc4:	77 06                	ja     f0104ccc <kclock_resume+0x1c>
	{
		cnt0 = 20;
f0104cc6:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f0104ccc:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104cd0:	83 e0 01             	and    $0x1,%eax
f0104cd3:	66 85 c0             	test   %ax,%ax
f0104cd6:	74 09                	je     f0104ce1 <kclock_resume+0x31>
		cnt0++;
f0104cd8:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104cdc:	40                   	inc    %eax
f0104cdd:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f0104ce1:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104ce8:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104cec:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104cef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104cf2:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104cf3:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104cf7:	83 ec 0c             	sub    $0xc,%esp
f0104cfa:	50                   	push   %eax
f0104cfb:	e8 10 01 00 00       	call   f0104e10 <kclock_write_cnt0_LSB_first>
f0104d00:	83 c4 10             	add    $0x10,%esp
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup IRQ0: timer interrupts via 8259A\n");
	//irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
	irq_clear_mask(0);
f0104d03:	83 ec 0c             	sub    $0xc,%esp
f0104d06:	6a 00                	push   $0x0
f0104d08:	e8 d8 22 00 00       	call   f0106fe5 <irq_clear_mask>
f0104d0d:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f0104d10:	90                   	nop
f0104d11:	c9                   	leave  
f0104d12:	c3                   	ret    

f0104d13 <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f0104d13:	55                   	push   %ebp
f0104d14:	89 e5                	mov    %esp,%ebp
f0104d16:	83 ec 28             	sub    $0x28,%esp
f0104d19:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d1c:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104d1f:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104d26:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104d2a:	8a 45 f3             	mov    -0xd(%ebp),%al
f0104d2d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104d30:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104d31:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0104d35:	83 ec 0c             	sub    $0xc,%esp
f0104d38:	50                   	push   %eax
f0104d39:	e8 d2 00 00 00       	call   f0104e10 <kclock_write_cnt0_LSB_first>
f0104d3e:	83 c4 10             	add    $0x10,%esp
	//irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
	irq_clear_mask(0);
f0104d41:	83 ec 0c             	sub    $0xc,%esp
f0104d44:	6a 00                	push   $0x0
f0104d46:	e8 9a 22 00 00       	call   f0106fe5 <irq_clear_mask>
f0104d4b:	83 c4 10             	add    $0x10,%esp
}
f0104d4e:	90                   	nop
f0104d4f:	c9                   	leave  
f0104d50:	c3                   	ret    

f0104d51 <kclock_set_quantum>:

//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f0104d51:	55                   	push   %ebp
f0104d52:	89 e5                	mov    %esp,%ebp
f0104d54:	56                   	push   %esi
f0104d55:	53                   	push   %ebx
f0104d56:	83 ec 20             	sub    $0x20,%esp
f0104d59:	8b 45 08             	mov    0x8(%ebp),%eax
f0104d5c:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104d5f:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104d63:	0f 87 8a 00 00 00    	ja     f0104df3 <kclock_set_quantum+0xa2>
	{
		/*2023*/
//		int cnt = TIMER_DIV((1000/quantum_in_ms));
//		if (cnt%2 == 1)
//			cnt++;
		int cnt = NUM_CLKS_PER_QUANTUM(quantum_in_ms);
f0104d69:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104d6d:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104d72:	99                   	cltd   
f0104d73:	f7 fe                	idiv   %esi
f0104d75:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104d7b:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104d7f:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104d84:	99                   	cltd   
f0104d85:	f7 fb                	idiv   %ebx
f0104d87:	89 c6                	mov    %eax,%esi
f0104d89:	89 c8                	mov    %ecx,%eax
f0104d8b:	99                   	cltd   
f0104d8c:	f7 fe                	idiv   %esi
f0104d8e:	89 c3                	mov    %eax,%ebx
f0104d90:	0f b6 4d e4          	movzbl -0x1c(%ebp),%ecx
f0104d94:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104d99:	99                   	cltd   
f0104d9a:	f7 f9                	idiv   %ecx
f0104d9c:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f0104da2:	0f b6 75 e4          	movzbl -0x1c(%ebp),%esi
f0104da6:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104dab:	99                   	cltd   
f0104dac:	f7 fe                	idiv   %esi
f0104dae:	89 c6                	mov    %eax,%esi
f0104db0:	89 c8                	mov    %ecx,%eax
f0104db2:	99                   	cltd   
f0104db3:	f7 fe                	idiv   %esi
f0104db5:	25 01 00 00 80       	and    $0x80000001,%eax
f0104dba:	85 c0                	test   %eax,%eax
f0104dbc:	79 05                	jns    f0104dc3 <kclock_set_quantum+0x72>
f0104dbe:	48                   	dec    %eax
f0104dbf:	83 c8 fe             	or     $0xfffffffe,%eax
f0104dc2:	40                   	inc    %eax
f0104dc3:	01 d8                	add    %ebx,%eax
f0104dc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104dc8:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104dcf:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f0104dd3:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104dd6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104dd9:	ee                   	out    %al,(%dx)


		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f0104dda:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ddd:	0f b7 c0             	movzwl %ax,%eax
f0104de0:	83 ec 0c             	sub    $0xc,%esp
f0104de3:	50                   	push   %eax
f0104de4:	e8 27 00 00 00       	call   f0104e10 <kclock_write_cnt0_LSB_first>
f0104de9:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f0104dec:	e8 97 fe ff ff       	call   f0104c88 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0104df1:	eb 16                	jmp    f0104e09 <kclock_set_quantum+0xb8>
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
		//cprintf("\nkclock_set_quantum: clock after stop = %d\n",cnt0);
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104df3:	6a 35                	push   $0x35
f0104df5:	68 f0 44 12 f0       	push   $0xf01244f0
f0104dfa:	68 ea 00 00 00       	push   $0xea
f0104dff:	68 4c 45 12 f0       	push   $0xf012454c
f0104e04:	e8 11 b5 ff ff       	call   f010031a <_panic>
	}
}
f0104e09:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0104e0c:	5b                   	pop    %ebx
f0104e0d:	5e                   	pop    %esi
f0104e0e:	5d                   	pop    %ebp
f0104e0f:	c3                   	ret    

f0104e10 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104e10:	55                   	push   %ebp
f0104e11:	89 e5                	mov    %esp,%ebp
f0104e13:	83 ec 28             	sub    $0x28,%esp
f0104e16:	8b 45 08             	mov    0x8(%ebp),%eax
f0104e19:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
	/*You must prevent other code from setting the PIT channel's reload value or reading
	 * its current count once you've sent the lowest 8 bits. Disabling interrupts works
	 * for single CPU computers
	 * */
	pushcli();	//disable interrupt
f0104e1d:	e8 9e 23 00 00       	call   f01071c0 <pushcli>
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104e22:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104e25:	0f b6 c0             	movzbl %al,%eax
f0104e28:	c7 45 f4 40 00 00 00 	movl   $0x40,-0xc(%ebp)
f0104e2f:	88 45 ee             	mov    %al,-0x12(%ebp)
f0104e32:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104e35:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104e38:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f0104e39:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104e3c:	66 c1 e8 08          	shr    $0x8,%ax
f0104e40:	0f b6 c0             	movzbl %al,%eax
f0104e43:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)
f0104e4a:	88 45 ef             	mov    %al,-0x11(%ebp)
f0104e4d:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104e50:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104e53:	ee                   	out    %al,(%dx)
	popcli();	//enable interrupt
f0104e54:	e8 b9 23 00 00       	call   f0107212 <popcli>

}
f0104e59:	90                   	nop
f0104e5a:	c9                   	leave  
f0104e5b:	c3                   	ret    

f0104e5c <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104e5c:	55                   	push   %ebp
f0104e5d:	89 e5                	mov    %esp,%ebp
f0104e5f:	83 ec 28             	sub    $0x28,%esp
	pushcli();	//disable interrupt
f0104e62:	e8 59 23 00 00       	call   f01071c0 <pushcli>
f0104e67:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104e6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104e71:	89 c2                	mov    %eax,%edx
f0104e73:	ec                   	in     (%dx),%al
f0104e74:	88 45 e6             	mov    %al,-0x1a(%ebp)
	return data;
f0104e77:	8a 45 e6             	mov    -0x1a(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104e7a:	88 45 f7             	mov    %al,-0x9(%ebp)
f0104e7d:	c7 45 e8 40 00 00 00 	movl   $0x40,-0x18(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104e84:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0104e87:	89 c2                	mov    %eax,%edx
f0104e89:	ec                   	in     (%dx),%al
f0104e8a:	88 45 e7             	mov    %al,-0x19(%ebp)
	return data;
f0104e8d:	8a 45 e7             	mov    -0x19(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104e90:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104e93:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0104e97:	c1 e0 08             	shl    $0x8,%eax
f0104e9a:	89 c2                	mov    %eax,%edx
f0104e9c:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0104ea0:	09 d0                	or     %edx,%eax
f0104ea2:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	popcli();	//enable interrupt
f0104ea6:	e8 67 23 00 00       	call   f0107212 <popcli>
	return cnt0 ;
f0104eab:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f0104eae:	c9                   	leave  
f0104eaf:	c3                   	ret    

f0104eb0 <kclock_read_cnt0_latch>:
 * instead of 0x0200 (or 0x01FF).
 * REF: OSDev Wiki
 */
uint16
kclock_read_cnt0_latch(void)
{
f0104eb0:	55                   	push   %ebp
f0104eb1:	89 e5                	mov    %esp,%ebp
f0104eb3:	83 ec 30             	sub    $0x30,%esp
f0104eb6:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104ebd:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104ec0:	89 c2                	mov    %eax,%edx
f0104ec2:	ec                   	in     (%dx),%al
f0104ec3:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f0104ec6:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f0104ec9:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104ecc:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104ed3:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104ed7:	8a 45 dc             	mov    -0x24(%ebp),%al
f0104eda:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104edd:	ee                   	out    %al,(%dx)
f0104ede:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104ee5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104ee8:	89 c2                	mov    %eax,%edx
f0104eea:	ec                   	in     (%dx),%al
f0104eeb:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f0104eee:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104ef1:	88 45 f3             	mov    %al,-0xd(%ebp)
f0104ef4:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104efb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104efe:	89 c2                	mov    %eax,%edx
f0104f00:	ec                   	in     (%dx),%al
f0104f01:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0104f04:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104f07:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f0104f0a:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0104f0e:	c1 e0 08             	shl    $0x8,%eax
f0104f11:	89 c2                	mov    %eax,%edx
f0104f13:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104f17:	09 d0                	or     %edx,%eax
f0104f19:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f0104f1d:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104f21:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f0104f28:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0104f2b:	8a 45 df             	mov    -0x21(%ebp),%al
f0104f2e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104f31:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104f32:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104f35:	c9                   	leave  
f0104f36:	c3                   	ret    

f0104f37 <init_queue>:

//================================
// [1] Initialize the given queue:
//================================
void init_queue(struct Env_Queue* queue)
{
f0104f37:	55                   	push   %ebp
f0104f38:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104f3a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104f3e:	74 1d                	je     f0104f5d <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104f40:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f43:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104f49:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f4c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0104f53:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f56:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f0104f5d:	90                   	nop
f0104f5e:	5d                   	pop    %ebp
f0104f5f:	c3                   	ret    

f0104f60 <queue_size>:

//================================
// [2] Get queue size:
//================================
int queue_size(struct Env_Queue* queue)
{
f0104f60:	55                   	push   %ebp
f0104f61:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104f63:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104f67:	74 08                	je     f0104f71 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f0104f69:	8b 45 08             	mov    0x8(%ebp),%eax
f0104f6c:	8b 40 0c             	mov    0xc(%eax),%eax
f0104f6f:	eb 05                	jmp    f0104f76 <queue_size+0x16>
	}
	else
	{
		return 0;
f0104f71:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f0104f76:	5d                   	pop    %ebp
f0104f77:	c3                   	ret    

f0104f78 <enqueue>:

//====================================
// [3] Enqueue env in the given queue:
//====================================
void enqueue(struct Env_Queue* queue, struct Env* env)
{
f0104f78:	55                   	push   %ebp
f0104f79:	89 e5                	mov    %esp,%ebp
f0104f7b:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f0104f7e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104f82:	75 16                	jne    f0104f9a <enqueue+0x22>
f0104f84:	68 60 45 12 f0       	push   $0xf0124560
f0104f89:	68 6e 45 12 f0       	push   $0xf012456e
f0104f8e:	6a 34                	push   $0x34
f0104f90:	68 83 45 12 f0       	push   $0xf0124583
f0104f95:	e8 80 b3 ff ff       	call   f010031a <_panic>
	if(env != NULL)
f0104f9a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104f9e:	74 66                	je     f0105006 <enqueue+0x8e>
	{
		LIST_INSERT_HEAD(queue, env);
f0104fa0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0104fa4:	75 14                	jne    f0104fba <enqueue+0x42>
f0104fa6:	83 ec 04             	sub    $0x4,%esp
f0104fa9:	68 9c 45 12 f0       	push   $0xf012459c
f0104fae:	6a 37                	push   $0x37
f0104fb0:	68 83 45 12 f0       	push   $0xf0124583
f0104fb5:	e8 60 b3 ff ff       	call   f010031a <_panic>
f0104fba:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fbd:	8b 10                	mov    (%eax),%edx
f0104fbf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fc2:	89 50 08             	mov    %edx,0x8(%eax)
f0104fc5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104fc8:	8b 40 08             	mov    0x8(%eax),%eax
f0104fcb:	85 c0                	test   %eax,%eax
f0104fcd:	74 0d                	je     f0104fdc <enqueue+0x64>
f0104fcf:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fd2:	8b 00                	mov    (%eax),%eax
f0104fd4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104fd7:	89 50 0c             	mov    %edx,0xc(%eax)
f0104fda:	eb 09                	jmp    f0104fe5 <enqueue+0x6d>
f0104fdc:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fdf:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104fe2:	89 50 04             	mov    %edx,0x4(%eax)
f0104fe5:	8b 45 08             	mov    0x8(%ebp),%eax
f0104fe8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104feb:	89 10                	mov    %edx,(%eax)
f0104fed:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104ff0:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0104ff7:	8b 45 08             	mov    0x8(%ebp),%eax
f0104ffa:	8b 40 0c             	mov    0xc(%eax),%eax
f0104ffd:	8d 50 01             	lea    0x1(%eax),%edx
f0105000:	8b 45 08             	mov    0x8(%ebp),%eax
f0105003:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0105006:	90                   	nop
f0105007:	c9                   	leave  
f0105008:	c3                   	ret    

f0105009 <dequeue>:

//======================================
// [4] Dequeue env from the given queue:
//======================================
struct Env* dequeue(struct Env_Queue* queue)
{
f0105009:	55                   	push   %ebp
f010500a:	89 e5                	mov    %esp,%ebp
f010500c:	83 ec 18             	sub    $0x18,%esp
	if (queue == NULL) return NULL;
f010500f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105013:	75 0a                	jne    f010501f <dequeue+0x16>
f0105015:	b8 00 00 00 00       	mov    $0x0,%eax
f010501a:	e9 a0 00 00 00       	jmp    f01050bf <dequeue+0xb6>
	struct Env* envItem = LIST_LAST(queue);
f010501f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105022:	8b 40 04             	mov    0x4(%eax),%eax
f0105025:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f0105028:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010502c:	0f 84 8a 00 00 00    	je     f01050bc <dequeue+0xb3>
	{
		LIST_REMOVE(queue, envItem);
f0105032:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105036:	75 14                	jne    f010504c <dequeue+0x43>
f0105038:	83 ec 04             	sub    $0x4,%esp
f010503b:	68 bf 45 12 f0       	push   $0xf01245bf
f0105040:	6a 44                	push   $0x44
f0105042:	68 83 45 12 f0       	push   $0xf0124583
f0105047:	e8 ce b2 ff ff       	call   f010031a <_panic>
f010504c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010504f:	8b 40 08             	mov    0x8(%eax),%eax
f0105052:	85 c0                	test   %eax,%eax
f0105054:	74 11                	je     f0105067 <dequeue+0x5e>
f0105056:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105059:	8b 40 08             	mov    0x8(%eax),%eax
f010505c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010505f:	8b 52 0c             	mov    0xc(%edx),%edx
f0105062:	89 50 0c             	mov    %edx,0xc(%eax)
f0105065:	eb 0c                	jmp    f0105073 <dequeue+0x6a>
f0105067:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010506a:	8b 50 0c             	mov    0xc(%eax),%edx
f010506d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105070:	89 50 04             	mov    %edx,0x4(%eax)
f0105073:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105076:	8b 40 0c             	mov    0xc(%eax),%eax
f0105079:	85 c0                	test   %eax,%eax
f010507b:	74 11                	je     f010508e <dequeue+0x85>
f010507d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105080:	8b 40 0c             	mov    0xc(%eax),%eax
f0105083:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105086:	8b 52 08             	mov    0x8(%edx),%edx
f0105089:	89 50 08             	mov    %edx,0x8(%eax)
f010508c:	eb 0b                	jmp    f0105099 <dequeue+0x90>
f010508e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105091:	8b 50 08             	mov    0x8(%eax),%edx
f0105094:	8b 45 08             	mov    0x8(%ebp),%eax
f0105097:	89 10                	mov    %edx,(%eax)
f0105099:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010509c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f01050a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050a6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f01050ad:	8b 45 08             	mov    0x8(%ebp),%eax
f01050b0:	8b 40 0c             	mov    0xc(%eax),%eax
f01050b3:	8d 50 ff             	lea    -0x1(%eax),%edx
f01050b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01050b9:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f01050bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01050bf:	c9                   	leave  
f01050c0:	c3                   	ret    

f01050c1 <remove_from_queue>:

//====================================
// [5] Remove env from the given queue:
//====================================
void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f01050c1:	55                   	push   %ebp
f01050c2:	89 e5                	mov    %esp,%ebp
f01050c4:	83 ec 08             	sub    $0x8,%esp
	assert(queue != NULL)	;
f01050c7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01050cb:	75 16                	jne    f01050e3 <remove_from_queue+0x22>
f01050cd:	68 60 45 12 f0       	push   $0xf0124560
f01050d2:	68 6e 45 12 f0       	push   $0xf012456e
f01050d7:	6a 4e                	push   $0x4e
f01050d9:	68 83 45 12 f0       	push   $0xf0124583
f01050de:	e8 37 b2 ff ff       	call   f010031a <_panic>

	if (e != NULL)
f01050e3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01050e7:	0f 84 8a 00 00 00    	je     f0105177 <remove_from_queue+0xb6>
	{
		LIST_REMOVE(queue, e);
f01050ed:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01050f1:	75 14                	jne    f0105107 <remove_from_queue+0x46>
f01050f3:	83 ec 04             	sub    $0x4,%esp
f01050f6:	68 bf 45 12 f0       	push   $0xf01245bf
f01050fb:	6a 52                	push   $0x52
f01050fd:	68 83 45 12 f0       	push   $0xf0124583
f0105102:	e8 13 b2 ff ff       	call   f010031a <_panic>
f0105107:	8b 45 0c             	mov    0xc(%ebp),%eax
f010510a:	8b 40 08             	mov    0x8(%eax),%eax
f010510d:	85 c0                	test   %eax,%eax
f010510f:	74 11                	je     f0105122 <remove_from_queue+0x61>
f0105111:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105114:	8b 40 08             	mov    0x8(%eax),%eax
f0105117:	8b 55 0c             	mov    0xc(%ebp),%edx
f010511a:	8b 52 0c             	mov    0xc(%edx),%edx
f010511d:	89 50 0c             	mov    %edx,0xc(%eax)
f0105120:	eb 0c                	jmp    f010512e <remove_from_queue+0x6d>
f0105122:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105125:	8b 50 0c             	mov    0xc(%eax),%edx
f0105128:	8b 45 08             	mov    0x8(%ebp),%eax
f010512b:	89 50 04             	mov    %edx,0x4(%eax)
f010512e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105131:	8b 40 0c             	mov    0xc(%eax),%eax
f0105134:	85 c0                	test   %eax,%eax
f0105136:	74 11                	je     f0105149 <remove_from_queue+0x88>
f0105138:	8b 45 0c             	mov    0xc(%ebp),%eax
f010513b:	8b 40 0c             	mov    0xc(%eax),%eax
f010513e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0105141:	8b 52 08             	mov    0x8(%edx),%edx
f0105144:	89 50 08             	mov    %edx,0x8(%eax)
f0105147:	eb 0b                	jmp    f0105154 <remove_from_queue+0x93>
f0105149:	8b 45 0c             	mov    0xc(%ebp),%eax
f010514c:	8b 50 08             	mov    0x8(%eax),%edx
f010514f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105152:	89 10                	mov    %edx,(%eax)
f0105154:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105157:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f010515e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105161:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0105168:	8b 45 08             	mov    0x8(%ebp),%eax
f010516b:	8b 40 0c             	mov    0xc(%eax),%eax
f010516e:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105171:	8b 45 08             	mov    0x8(%ebp),%eax
f0105174:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0105177:	90                   	nop
f0105178:	c9                   	leave  
f0105179:	c3                   	ret    

f010517a <find_env_in_queue>:

//========================================
// [6] Search by envID in the given queue:
//========================================
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f010517a:	55                   	push   %ebp
f010517b:	89 e5                	mov    %esp,%ebp
f010517d:	83 ec 10             	sub    $0x10,%esp
	if (queue == NULL) return NULL;
f0105180:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105184:	75 07                	jne    f010518d <find_env_in_queue+0x13>
f0105186:	b8 00 00 00 00       	mov    $0x0,%eax
f010518b:	eb 58                	jmp    f01051e5 <find_env_in_queue+0x6b>

	struct Env * ptr_env=NULL;
f010518d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f0105194:	8b 45 08             	mov    0x8(%ebp),%eax
f0105197:	8b 00                	mov    (%eax),%eax
f0105199:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010519c:	eb 19                	jmp    f01051b7 <find_env_in_queue+0x3d>
	{
		if(ptr_env->env_id == envID)
f010519e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01051a1:	8b 40 10             	mov    0x10(%eax),%eax
f01051a4:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01051a7:	75 05                	jne    f01051ae <find_env_in_queue+0x34>
		{
			return ptr_env;
f01051a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01051ac:	eb 37                	jmp    f01051e5 <find_env_in_queue+0x6b>
struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	if (queue == NULL) return NULL;

	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f01051ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01051b1:	8b 40 08             	mov    0x8(%eax),%eax
f01051b4:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01051b7:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01051bb:	74 08                	je     f01051c5 <find_env_in_queue+0x4b>
f01051bd:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01051c0:	8b 40 08             	mov    0x8(%eax),%eax
f01051c3:	eb 05                	jmp    f01051ca <find_env_in_queue+0x50>
f01051c5:	b8 00 00 00 00       	mov    $0x0,%eax
f01051ca:	8b 55 08             	mov    0x8(%ebp),%edx
f01051cd:	89 42 08             	mov    %eax,0x8(%edx)
f01051d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01051d3:	8b 40 08             	mov    0x8(%eax),%eax
f01051d6:	85 c0                	test   %eax,%eax
f01051d8:	75 c4                	jne    f010519e <find_env_in_queue+0x24>
f01051da:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01051de:	75 be                	jne    f010519e <find_env_in_queue+0x24>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f01051e0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01051e5:	c9                   	leave  
f01051e6:	c3                   	ret    

f01051e7 <sched_delete_ready_queues>:

//========================================
// [1] Delete all ready queues:
//========================================
void sched_delete_ready_queues()
{
f01051e7:	55                   	push   %ebp
f01051e8:	89 e5                	mov    %esp,%ebp
			kfree(quantums);
	}
	release_spinlock(&ProcessQueues.qlock);

#endif
}
f01051ea:	90                   	nop
f01051eb:	5d                   	pop    %ebp
f01051ec:	c3                   	ret    

f01051ed <sched_insert_ready0>:

//=================================================
// [2] Insert the given Env in the 1st Ready Queue:
//=================================================
void sched_insert_ready0(struct Env* env)
{
f01051ed:	55                   	push   %ebp
f01051ee:	89 e5                	mov    %esp,%ebp
f01051f0:	83 ec 08             	sub    $0x8,%esp
	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f01051f3:	83 ec 0c             	sub    $0xc,%esp
f01051f6:	68 60 24 55 f0       	push   $0xf0552460
f01051fb:	e8 f0 9a 00 00       	call   f010ecf0 <holding_spinlock>
f0105200:	83 c4 10             	add    $0x10,%esp
f0105203:	85 c0                	test   %eax,%eax
f0105205:	75 17                	jne    f010521e <sched_insert_ready0+0x31>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
f0105207:	83 ec 04             	sub    $0x4,%esp
f010520a:	68 e0 45 12 f0       	push   $0xf01245e0
f010520f:	68 85 00 00 00       	push   $0x85
f0105214:	68 83 45 12 f0       	push   $0xf0124583
f0105219:	e8 fc b0 ff ff       	call   f010031a <_panic>
	/*********************************************************************/

	assert(env != NULL);
f010521e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105222:	75 19                	jne    f010523d <sched_insert_ready0+0x50>
f0105224:	68 21 46 12 f0       	push   $0xf0124621
f0105229:	68 6e 45 12 f0       	push   $0xf012456e
f010522e:	68 88 00 00 00       	push   $0x88
f0105233:	68 83 45 12 f0       	push   $0xf0124583
f0105238:	e8 dd b0 ff ff       	call   f010031a <_panic>
	{
		//cprintf("\nInserting %d into ready queue 0\n", env->env_id);
		env->env_status = ENV_READY ;
f010523d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105240:	c7 40 18 01 00 00 00 	movl   $0x1,0x18(%eax)
		enqueue(&(ProcessQueues.env_ready_queues[0]), env);
f0105247:	83 ec 08             	sub    $0x8,%esp
f010524a:	ff 75 08             	pushl  0x8(%ebp)
f010524d:	68 f0 24 55 f0       	push   $0xf05524f0
f0105252:	e8 21 fd ff ff       	call   f0104f78 <enqueue>
f0105257:	83 c4 10             	add    $0x10,%esp
	}
}
f010525a:	90                   	nop
f010525b:	c9                   	leave  
f010525c:	c3                   	ret    

f010525d <sched_remove_ready>:

//=================================================
// [3] Remove the given Env from the Ready Queue(s):
//=================================================
void sched_remove_ready(struct Env* env)
{
f010525d:	55                   	push   %ebp
f010525e:	89 e5                	mov    %esp,%ebp
f0105260:	83 ec 18             	sub    $0x18,%esp
	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f0105263:	83 ec 0c             	sub    $0xc,%esp
f0105266:	68 60 24 55 f0       	push   $0xf0552460
f010526b:	e8 80 9a 00 00       	call   f010ecf0 <holding_spinlock>
f0105270:	83 c4 10             	add    $0x10,%esp
f0105273:	85 c0                	test   %eax,%eax
f0105275:	75 17                	jne    f010528e <sched_remove_ready+0x31>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
f0105277:	83 ec 04             	sub    $0x4,%esp
f010527a:	68 e0 45 12 f0       	push   $0xf01245e0
f010527f:	68 97 00 00 00       	push   $0x97
f0105284:	68 83 45 12 f0       	push   $0xf0124583
f0105289:	e8 8c b0 ff ff       	call   f010031a <_panic>
	/*********************************************************************/

	assert(env != NULL && env->env_status == ENV_READY);
f010528e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105292:	74 0b                	je     f010529f <sched_remove_ready+0x42>
f0105294:	8b 45 08             	mov    0x8(%ebp),%eax
f0105297:	8b 40 18             	mov    0x18(%eax),%eax
f010529a:	83 f8 01             	cmp    $0x1,%eax
f010529d:	74 19                	je     f01052b8 <sched_remove_ready+0x5b>
f010529f:	68 30 46 12 f0       	push   $0xf0124630
f01052a4:	68 6e 45 12 f0       	push   $0xf012456e
f01052a9:	68 9a 00 00 00       	push   $0x9a
f01052ae:	68 83 45 12 f0       	push   $0xf0124583
f01052b3:	e8 62 b0 ff ff       	call   f010031a <_panic>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01052b8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01052bf:	e9 f7 00 00 00       	jmp    f01053bb <sched_remove_ready+0x15e>
		{
			struct Env * ptr_env = find_env_in_queue(&(ProcessQueues.env_ready_queues[i]), env->env_id);
f01052c4:	8b 45 08             	mov    0x8(%ebp),%eax
f01052c7:	8b 40 10             	mov    0x10(%eax),%eax
f01052ca:	89 c2                	mov    %eax,%edx
f01052cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052cf:	83 c0 09             	add    $0x9,%eax
f01052d2:	c1 e0 04             	shl    $0x4,%eax
f01052d5:	05 60 24 55 f0       	add    $0xf0552460,%eax
f01052da:	83 ec 08             	sub    $0x8,%esp
f01052dd:	52                   	push   %edx
f01052de:	50                   	push   %eax
f01052df:	e8 96 fe ff ff       	call   f010517a <find_env_in_queue>
f01052e4:	83 c4 10             	add    $0x10,%esp
f01052e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f01052ea:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01052ee:	0f 84 c4 00 00 00    	je     f01053b8 <sched_remove_ready+0x15b>
			{
				LIST_REMOVE(&(ProcessQueues.env_ready_queues[i]), env);
f01052f4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01052f8:	75 17                	jne    f0105311 <sched_remove_ready+0xb4>
f01052fa:	83 ec 04             	sub    $0x4,%esp
f01052fd:	68 bf 45 12 f0       	push   $0xf01245bf
f0105302:	68 a1 00 00 00       	push   $0xa1
f0105307:	68 83 45 12 f0       	push   $0xf0124583
f010530c:	e8 09 b0 ff ff       	call   f010031a <_panic>
f0105311:	8b 45 08             	mov    0x8(%ebp),%eax
f0105314:	8b 40 08             	mov    0x8(%eax),%eax
f0105317:	85 c0                	test   %eax,%eax
f0105319:	74 11                	je     f010532c <sched_remove_ready+0xcf>
f010531b:	8b 45 08             	mov    0x8(%ebp),%eax
f010531e:	8b 40 08             	mov    0x8(%eax),%eax
f0105321:	8b 55 08             	mov    0x8(%ebp),%edx
f0105324:	8b 52 0c             	mov    0xc(%edx),%edx
f0105327:	89 50 0c             	mov    %edx,0xc(%eax)
f010532a:	eb 17                	jmp    f0105343 <sched_remove_ready+0xe6>
f010532c:	8b 45 08             	mov    0x8(%ebp),%eax
f010532f:	8b 40 0c             	mov    0xc(%eax),%eax
f0105332:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105335:	83 c2 09             	add    $0x9,%edx
f0105338:	c1 e2 04             	shl    $0x4,%edx
f010533b:	81 c2 64 24 55 f0    	add    $0xf0552464,%edx
f0105341:	89 02                	mov    %eax,(%edx)
f0105343:	8b 45 08             	mov    0x8(%ebp),%eax
f0105346:	8b 40 0c             	mov    0xc(%eax),%eax
f0105349:	85 c0                	test   %eax,%eax
f010534b:	74 11                	je     f010535e <sched_remove_ready+0x101>
f010534d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105350:	8b 40 0c             	mov    0xc(%eax),%eax
f0105353:	8b 55 08             	mov    0x8(%ebp),%edx
f0105356:	8b 52 08             	mov    0x8(%edx),%edx
f0105359:	89 50 08             	mov    %edx,0x8(%eax)
f010535c:	eb 17                	jmp    f0105375 <sched_remove_ready+0x118>
f010535e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105361:	8b 40 08             	mov    0x8(%eax),%eax
f0105364:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105367:	83 c2 09             	add    $0x9,%edx
f010536a:	c1 e2 04             	shl    $0x4,%edx
f010536d:	81 c2 60 24 55 f0    	add    $0xf0552460,%edx
f0105373:	89 02                	mov    %eax,(%edx)
f0105375:	8b 45 08             	mov    0x8(%ebp),%eax
f0105378:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f010537f:	8b 45 08             	mov    0x8(%ebp),%eax
f0105382:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0105389:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010538c:	83 c0 09             	add    $0x9,%eax
f010538f:	c1 e0 04             	shl    $0x4,%eax
f0105392:	05 6c 24 55 f0       	add    $0xf055246c,%eax
f0105397:	8b 00                	mov    (%eax),%eax
f0105399:	8d 50 ff             	lea    -0x1(%eax),%edx
f010539c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010539f:	83 c0 09             	add    $0x9,%eax
f01053a2:	c1 e0 04             	shl    $0x4,%eax
f01053a5:	05 6c 24 55 f0       	add    $0xf055246c,%eax
f01053aa:	89 10                	mov    %edx,(%eax)
				env->env_status = ENV_UNKNOWN;
f01053ac:	8b 45 08             	mov    0x8(%ebp),%eax
f01053af:	c7 40 18 06 00 00 00 	movl   $0x6,0x18(%eax)
				return ;
f01053b6:	eb 14                	jmp    f01053cc <sched_remove_ready+0x16f>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
	/*********************************************************************/

	assert(env != NULL && env->env_status == ENV_READY);
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01053b8:	ff 45 f4             	incl   -0xc(%ebp)
f01053bb:	a0 60 51 55 f0       	mov    0xf0555160,%al
f01053c0:	0f b6 c0             	movzbl %al,%eax
f01053c3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01053c6:	0f 8f f8 fe ff ff    	jg     f01052c4 <sched_remove_ready+0x67>
				env->env_status = ENV_UNKNOWN;
				return ;
			}
		}
	}
}
f01053cc:	c9                   	leave  
f01053cd:	c3                   	ret    

f01053ce <sched_insert_new>:

//=================================================
// [4] Insert the given Env in NEW Queue:
//=================================================
void sched_insert_new(struct Env* env)
{
f01053ce:	55                   	push   %ebp
f01053cf:	89 e5                	mov    %esp,%ebp
f01053d1:	83 ec 08             	sub    $0x8,%esp
	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f01053d4:	83 ec 0c             	sub    $0xc,%esp
f01053d7:	68 60 24 55 f0       	push   $0xf0552460
f01053dc:	e8 0f 99 00 00       	call   f010ecf0 <holding_spinlock>
f01053e1:	83 c4 10             	add    $0x10,%esp
f01053e4:	85 c0                	test   %eax,%eax
f01053e6:	75 17                	jne    f01053ff <sched_insert_new+0x31>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
f01053e8:	83 ec 04             	sub    $0x4,%esp
f01053eb:	68 e0 45 12 f0       	push   $0xf01245e0
f01053f0:	68 b0 00 00 00       	push   $0xb0
f01053f5:	68 83 45 12 f0       	push   $0xf0124583
f01053fa:	e8 1b af ff ff       	call   f010031a <_panic>
	/*********************************************************************/

	assert(env != NULL);
f01053ff:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105403:	75 19                	jne    f010541e <sched_insert_new+0x50>
f0105405:	68 21 46 12 f0       	push   $0xf0124621
f010540a:	68 6e 45 12 f0       	push   $0xf012456e
f010540f:	68 b3 00 00 00       	push   $0xb3
f0105414:	68 83 45 12 f0       	push   $0xf0124583
f0105419:	e8 fc ae ff ff       	call   f010031a <_panic>
	{
		env->env_status = ENV_NEW ;
f010541e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105421:	c7 40 18 04 00 00 00 	movl   $0x4,0x18(%eax)
		enqueue(&ProcessQueues.env_new_queue, env);
f0105428:	83 ec 08             	sub    $0x8,%esp
f010542b:	ff 75 08             	pushl  0x8(%ebp)
f010542e:	68 d0 24 55 f0       	push   $0xf05524d0
f0105433:	e8 40 fb ff ff       	call   f0104f78 <enqueue>
f0105438:	83 c4 10             	add    $0x10,%esp
	}
}
f010543b:	90                   	nop
f010543c:	c9                   	leave  
f010543d:	c3                   	ret    

f010543e <sched_remove_new>:

//=================================================
// [5] Remove the given Env from NEW Queue:
//=================================================
void sched_remove_new(struct Env* env)
{
f010543e:	55                   	push   %ebp
f010543f:	89 e5                	mov    %esp,%ebp
f0105441:	83 ec 08             	sub    $0x8,%esp
	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f0105444:	83 ec 0c             	sub    $0xc,%esp
f0105447:	68 60 24 55 f0       	push   $0xf0552460
f010544c:	e8 9f 98 00 00       	call   f010ecf0 <holding_spinlock>
f0105451:	83 c4 10             	add    $0x10,%esp
f0105454:	85 c0                	test   %eax,%eax
f0105456:	75 17                	jne    f010546f <sched_remove_new+0x31>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
f0105458:	83 ec 04             	sub    $0x4,%esp
f010545b:	68 e0 45 12 f0       	push   $0xf01245e0
f0105460:	68 c1 00 00 00       	push   $0xc1
f0105465:	68 83 45 12 f0       	push   $0xf0124583
f010546a:	e8 ab ae ff ff       	call   f010031a <_panic>
	/*********************************************************************/

	assert(env != NULL && env->env_status == ENV_NEW);
f010546f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105473:	74 0b                	je     f0105480 <sched_remove_new+0x42>
f0105475:	8b 45 08             	mov    0x8(%ebp),%eax
f0105478:	8b 40 18             	mov    0x18(%eax),%eax
f010547b:	83 f8 04             	cmp    $0x4,%eax
f010547e:	74 19                	je     f0105499 <sched_remove_new+0x5b>
f0105480:	68 5c 46 12 f0       	push   $0xf012465c
f0105485:	68 6e 45 12 f0       	push   $0xf012456e
f010548a:	68 c4 00 00 00       	push   $0xc4
f010548f:	68 83 45 12 f0       	push   $0xf0124583
f0105494:	e8 81 ae ff ff       	call   f010031a <_panic>
	{
		LIST_REMOVE(&ProcessQueues.env_new_queue, env) ;
f0105499:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010549d:	75 17                	jne    f01054b6 <sched_remove_new+0x78>
f010549f:	83 ec 04             	sub    $0x4,%esp
f01054a2:	68 bf 45 12 f0       	push   $0xf01245bf
f01054a7:	68 c6 00 00 00       	push   $0xc6
f01054ac:	68 83 45 12 f0       	push   $0xf0124583
f01054b1:	e8 64 ae ff ff       	call   f010031a <_panic>
f01054b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01054b9:	8b 40 08             	mov    0x8(%eax),%eax
f01054bc:	85 c0                	test   %eax,%eax
f01054be:	74 11                	je     f01054d1 <sched_remove_new+0x93>
f01054c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01054c3:	8b 40 08             	mov    0x8(%eax),%eax
f01054c6:	8b 55 08             	mov    0x8(%ebp),%edx
f01054c9:	8b 52 0c             	mov    0xc(%edx),%edx
f01054cc:	89 50 0c             	mov    %edx,0xc(%eax)
f01054cf:	eb 0b                	jmp    f01054dc <sched_remove_new+0x9e>
f01054d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01054d4:	8b 40 0c             	mov    0xc(%eax),%eax
f01054d7:	a3 d4 24 55 f0       	mov    %eax,0xf05524d4
f01054dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01054df:	8b 40 0c             	mov    0xc(%eax),%eax
f01054e2:	85 c0                	test   %eax,%eax
f01054e4:	74 11                	je     f01054f7 <sched_remove_new+0xb9>
f01054e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01054e9:	8b 40 0c             	mov    0xc(%eax),%eax
f01054ec:	8b 55 08             	mov    0x8(%ebp),%edx
f01054ef:	8b 52 08             	mov    0x8(%edx),%edx
f01054f2:	89 50 08             	mov    %edx,0x8(%eax)
f01054f5:	eb 0b                	jmp    f0105502 <sched_remove_new+0xc4>
f01054f7:	8b 45 08             	mov    0x8(%ebp),%eax
f01054fa:	8b 40 08             	mov    0x8(%eax),%eax
f01054fd:	a3 d0 24 55 f0       	mov    %eax,0xf05524d0
f0105502:	8b 45 08             	mov    0x8(%ebp),%eax
f0105505:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f010550c:	8b 45 08             	mov    0x8(%ebp),%eax
f010550f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0105516:	a1 dc 24 55 f0       	mov    0xf05524dc,%eax
f010551b:	48                   	dec    %eax
f010551c:	a3 dc 24 55 f0       	mov    %eax,0xf05524dc
		env->env_status = ENV_UNKNOWN;
f0105521:	8b 45 08             	mov    0x8(%ebp),%eax
f0105524:	c7 40 18 06 00 00 00 	movl   $0x6,0x18(%eax)
	}
}
f010552b:	90                   	nop
f010552c:	c9                   	leave  
f010552d:	c3                   	ret    

f010552e <sched_insert_exit>:

//=================================================
// [6] Insert the given Env in EXIT Queue:
//=================================================
void sched_insert_exit(struct Env* env)
{
f010552e:	55                   	push   %ebp
f010552f:	89 e5                	mov    %esp,%ebp
f0105531:	83 ec 08             	sub    $0x8,%esp
	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f0105534:	83 ec 0c             	sub    $0xc,%esp
f0105537:	68 60 24 55 f0       	push   $0xf0552460
f010553c:	e8 af 97 00 00       	call   f010ecf0 <holding_spinlock>
f0105541:	83 c4 10             	add    $0x10,%esp
f0105544:	85 c0                	test   %eax,%eax
f0105546:	75 17                	jne    f010555f <sched_insert_exit+0x31>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
f0105548:	83 ec 04             	sub    $0x4,%esp
f010554b:	68 e0 45 12 f0       	push   $0xf01245e0
f0105550:	68 d2 00 00 00       	push   $0xd2
f0105555:	68 83 45 12 f0       	push   $0xf0124583
f010555a:	e8 bb ad ff ff       	call   f010031a <_panic>
	/*********************************************************************/

	assert(env != NULL);
f010555f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105563:	75 19                	jne    f010557e <sched_insert_exit+0x50>
f0105565:	68 21 46 12 f0       	push   $0xf0124621
f010556a:	68 6e 45 12 f0       	push   $0xf012456e
f010556f:	68 d5 00 00 00       	push   $0xd5
f0105574:	68 83 45 12 f0       	push   $0xf0124583
f0105579:	e8 9c ad ff ff       	call   f010031a <_panic>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f010557e:	e8 06 92 00 00       	call   f010e789 <isBufferingEnabled>
f0105583:	84 c0                	test   %al,%al
f0105585:	74 0e                	je     f0105595 <sched_insert_exit+0x67>
f0105587:	83 ec 0c             	sub    $0xc,%esp
f010558a:	ff 75 08             	pushl  0x8(%ebp)
f010558d:	e8 ef 67 00 00       	call   f010bd81 <cleanup_buffers>
f0105592:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f0105595:	8b 45 08             	mov    0x8(%ebp),%eax
f0105598:	c7 40 18 05 00 00 00 	movl   $0x5,0x18(%eax)
		enqueue(&ProcessQueues.env_exit_queue, env);
f010559f:	83 ec 08             	sub    $0x8,%esp
f01055a2:	ff 75 08             	pushl  0x8(%ebp)
f01055a5:	68 e0 24 55 f0       	push   $0xf05524e0
f01055aa:	e8 c9 f9 ff ff       	call   f0104f78 <enqueue>
f01055af:	83 c4 10             	add    $0x10,%esp
	}
}
f01055b2:	90                   	nop
f01055b3:	c9                   	leave  
f01055b4:	c3                   	ret    

f01055b5 <sched_remove_exit>:
//=================================================
// [7] Remove the given Env from EXIT Queue:
//=================================================
void sched_remove_exit(struct Env* env)
{
f01055b5:	55                   	push   %ebp
f01055b6:	89 e5                	mov    %esp,%ebp
f01055b8:	83 ec 08             	sub    $0x8,%esp
	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f01055bb:	83 ec 0c             	sub    $0xc,%esp
f01055be:	68 60 24 55 f0       	push   $0xf0552460
f01055c3:	e8 28 97 00 00       	call   f010ecf0 <holding_spinlock>
f01055c8:	83 c4 10             	add    $0x10,%esp
f01055cb:	85 c0                	test   %eax,%eax
f01055cd:	75 17                	jne    f01055e6 <sched_remove_exit+0x31>
		panic("sched: q.lock is not held by this CPU while it's expected to be.");
f01055cf:	83 ec 04             	sub    $0x4,%esp
f01055d2:	68 e0 45 12 f0       	push   $0xf01245e0
f01055d7:	68 e3 00 00 00       	push   $0xe3
f01055dc:	68 83 45 12 f0       	push   $0xf0124583
f01055e1:	e8 34 ad ff ff       	call   f010031a <_panic>
	/*********************************************************************/

	assert(env != NULL && env->env_status == ENV_EXIT);
f01055e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01055ea:	74 0b                	je     f01055f7 <sched_remove_exit+0x42>
f01055ec:	8b 45 08             	mov    0x8(%ebp),%eax
f01055ef:	8b 40 18             	mov    0x18(%eax),%eax
f01055f2:	83 f8 05             	cmp    $0x5,%eax
f01055f5:	74 19                	je     f0105610 <sched_remove_exit+0x5b>
f01055f7:	68 88 46 12 f0       	push   $0xf0124688
f01055fc:	68 6e 45 12 f0       	push   $0xf012456e
f0105601:	68 e6 00 00 00       	push   $0xe6
f0105606:	68 83 45 12 f0       	push   $0xf0124583
f010560b:	e8 0a ad ff ff       	call   f010031a <_panic>
	{
		LIST_REMOVE(&ProcessQueues.env_exit_queue, env) ;
f0105610:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105614:	75 17                	jne    f010562d <sched_remove_exit+0x78>
f0105616:	83 ec 04             	sub    $0x4,%esp
f0105619:	68 bf 45 12 f0       	push   $0xf01245bf
f010561e:	68 e8 00 00 00       	push   $0xe8
f0105623:	68 83 45 12 f0       	push   $0xf0124583
f0105628:	e8 ed ac ff ff       	call   f010031a <_panic>
f010562d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105630:	8b 40 08             	mov    0x8(%eax),%eax
f0105633:	85 c0                	test   %eax,%eax
f0105635:	74 11                	je     f0105648 <sched_remove_exit+0x93>
f0105637:	8b 45 08             	mov    0x8(%ebp),%eax
f010563a:	8b 40 08             	mov    0x8(%eax),%eax
f010563d:	8b 55 08             	mov    0x8(%ebp),%edx
f0105640:	8b 52 0c             	mov    0xc(%edx),%edx
f0105643:	89 50 0c             	mov    %edx,0xc(%eax)
f0105646:	eb 0b                	jmp    f0105653 <sched_remove_exit+0x9e>
f0105648:	8b 45 08             	mov    0x8(%ebp),%eax
f010564b:	8b 40 0c             	mov    0xc(%eax),%eax
f010564e:	a3 e4 24 55 f0       	mov    %eax,0xf05524e4
f0105653:	8b 45 08             	mov    0x8(%ebp),%eax
f0105656:	8b 40 0c             	mov    0xc(%eax),%eax
f0105659:	85 c0                	test   %eax,%eax
f010565b:	74 11                	je     f010566e <sched_remove_exit+0xb9>
f010565d:	8b 45 08             	mov    0x8(%ebp),%eax
f0105660:	8b 40 0c             	mov    0xc(%eax),%eax
f0105663:	8b 55 08             	mov    0x8(%ebp),%edx
f0105666:	8b 52 08             	mov    0x8(%edx),%edx
f0105669:	89 50 08             	mov    %edx,0x8(%eax)
f010566c:	eb 0b                	jmp    f0105679 <sched_remove_exit+0xc4>
f010566e:	8b 45 08             	mov    0x8(%ebp),%eax
f0105671:	8b 40 08             	mov    0x8(%eax),%eax
f0105674:	a3 e0 24 55 f0       	mov    %eax,0xf05524e0
f0105679:	8b 45 08             	mov    0x8(%ebp),%eax
f010567c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f0105683:	8b 45 08             	mov    0x8(%ebp),%eax
f0105686:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f010568d:	a1 ec 24 55 f0       	mov    0xf05524ec,%eax
f0105692:	48                   	dec    %eax
f0105693:	a3 ec 24 55 f0       	mov    %eax,0xf05524ec
		env->env_status = ENV_UNKNOWN;
f0105698:	8b 45 08             	mov    0x8(%ebp),%eax
f010569b:	c7 40 18 06 00 00 00 	movl   $0x6,0x18(%eax)
	}
}
f01056a2:	90                   	nop
f01056a3:	c9                   	leave  
f01056a4:	c3                   	ret    

f01056a5 <sched_new_env>:

//=================================================
// [8] Sched the given Env in NEW Queue:
//=================================================
void sched_new_env(struct Env* e)
{
f01056a5:	55                   	push   %ebp
f01056a6:	89 e5                	mov    %esp,%ebp
f01056a8:	83 ec 08             	sub    $0x8,%esp
	  //cprintf("\n[SCHED_NEW_ENV] acquire: lock status before acquire = %d\n", qlock.locked);
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f01056ab:	83 ec 0c             	sub    $0xc,%esp
f01056ae:	68 60 24 55 f0       	push   $0xf0552460
f01056b3:	e8 1f 94 00 00       	call   f010ead7 <acquire_spinlock>
f01056b8:	83 c4 10             	add    $0x10,%esp

	//add the given env to the scheduler NEW queue
	assert (e!=NULL);
f01056bb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01056bf:	75 19                	jne    f01056da <sched_new_env+0x35>
f01056c1:	68 b3 46 12 f0       	push   $0xf01246b3
f01056c6:	68 6e 45 12 f0       	push   $0xf012456e
f01056cb:	68 f6 00 00 00       	push   $0xf6
f01056d0:	68 83 45 12 f0       	push   $0xf0124583
f01056d5:	e8 40 ac ff ff       	call   f010031a <_panic>
	{
		sched_insert_new(e);
f01056da:	83 ec 0c             	sub    $0xc,%esp
f01056dd:	ff 75 08             	pushl  0x8(%ebp)
f01056e0:	e8 e9 fc ff ff       	call   f01053ce <sched_insert_new>
f01056e5:	83 c4 10             	add    $0x10,%esp
	}

	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f01056e8:	83 ec 0c             	sub    $0xc,%esp
f01056eb:	68 60 24 55 f0       	push   $0xf0552460
f01056f0:	e8 69 94 00 00       	call   f010eb5e <release_spinlock>
f01056f5:	83 c4 10             	add    $0x10,%esp
	  //cprintf("\n[SCHED_NEW_ENV] release: lock status after = %d\n", qlock.locked);
}
f01056f8:	90                   	nop
f01056f9:	c9                   	leave  
f01056fa:	c3                   	ret    

f01056fb <sched_run_env>:

//=================================================
// [9] Run the given EnvID:
//=================================================
void sched_run_env(uint32 envId)
{
f01056fb:	55                   	push   %ebp
f01056fc:	89 e5                	mov    %esp,%ebp
f01056fe:	83 ec 18             	sub    $0x18,%esp
	  //cprintf("\n[SCHED_RUN_ENV] acquire: lock status before acquire = %d\n", qlock.locked);
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0105701:	83 ec 0c             	sub    $0xc,%esp
f0105704:	68 60 24 55 f0       	push   $0xf0552460
f0105709:	e8 c9 93 00 00       	call   f010ead7 <acquire_spinlock>
f010570e:	83 c4 10             	add    $0x10,%esp
	struct Env* ptr_env=NULL;
f0105711:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f0105718:	a1 d0 24 55 f0       	mov    0xf05524d0,%eax
f010571d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105720:	eb 53                	jmp    f0105775 <sched_run_env+0x7a>
	{
		if(ptr_env->env_id == envId)
f0105722:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105725:	8b 40 10             	mov    0x10(%eax),%eax
f0105728:	3b 45 08             	cmp    0x8(%ebp),%eax
f010572b:	75 40                	jne    f010576d <sched_run_env+0x72>
		{
			sched_remove_new(ptr_env);
f010572d:	83 ec 0c             	sub    $0xc,%esp
f0105730:	ff 75 f4             	pushl  -0xc(%ebp)
f0105733:	e8 06 fd ff ff       	call   f010543e <sched_remove_new>
f0105738:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready0(ptr_env);
f010573b:	83 ec 0c             	sub    $0xc,%esp
f010573e:	ff 75 f4             	pushl  -0xc(%ebp)
f0105741:	e8 a7 fa ff ff       	call   f01051ed <sched_insert_ready0>
f0105746:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (mycpu()->scheduler_status == SCH_STOPPED)
f0105749:	e8 af 19 00 00       	call   f01070fd <mycpu>
f010574e:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
f0105754:	85 c0                	test   %eax,%eax
f0105756:	75 46                	jne    f010579e <sched_run_env+0xa3>
			{
				release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0105758:	83 ec 0c             	sub    $0xc,%esp
f010575b:	68 60 24 55 f0       	push   $0xf0552460
f0105760:	e8 f9 93 00 00       	call   f010eb5e <release_spinlock>
f0105765:	83 c4 10             	add    $0x10,%esp
				  //cprintf("\n[SCHED_RUN_ENV] release#1: lock status after = %d\n", qlock.locked);
				fos_scheduler();
f0105768:	e8 45 10 00 00       	call   f01067b2 <fos_scheduler>
void sched_run_env(uint32 envId)
{
	  //cprintf("\n[SCHED_RUN_ENV] acquire: lock status before acquire = %d\n", qlock.locked);
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f010576d:	a1 d8 24 55 f0       	mov    0xf05524d8,%eax
f0105772:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105775:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105779:	74 08                	je     f0105783 <sched_run_env+0x88>
f010577b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010577e:	8b 40 08             	mov    0x8(%eax),%eax
f0105781:	eb 05                	jmp    f0105788 <sched_run_env+0x8d>
f0105783:	b8 00 00 00 00       	mov    $0x0,%eax
f0105788:	a3 d8 24 55 f0       	mov    %eax,0xf05524d8
f010578d:	a1 d8 24 55 f0       	mov    0xf05524d8,%eax
f0105792:	85 c0                	test   %eax,%eax
f0105794:	75 8c                	jne    f0105722 <sched_run_env+0x27>
f0105796:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010579a:	75 86                	jne    f0105722 <sched_run_env+0x27>
f010579c:	eb 01                	jmp    f010579f <sched_run_env+0xa4>
			}
			else
			{
				//can be invoked from a running environment via sys_run_env(), so just release the lock and resume
			}
			break;
f010579e:	90                   	nop
		}
	}
	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f010579f:	83 ec 0c             	sub    $0xc,%esp
f01057a2:	68 60 24 55 f0       	push   $0xf0552460
f01057a7:	e8 b2 93 00 00       	call   f010eb5e <release_spinlock>
f01057ac:	83 c4 10             	add    $0x10,%esp
	  //cprintf("\n[SCHED_RUN_ENV] release#2: lock status after = %d\n", qlock.locked);
}
f01057af:	90                   	nop
f01057b0:	c9                   	leave  
f01057b1:	c3                   	ret    

f01057b2 <sched_exit_env>:

//=================================================
// [10] Exit the given EnvID:
//=================================================
void sched_exit_env(uint32 envId)
{
f01057b2:	55                   	push   %ebp
f01057b3:	89 e5                	mov    %esp,%ebp
f01057b5:	83 ec 28             	sub    $0x28,%esp
	bool lock_already_held = holding_spinlock(&ProcessQueues.qlock);
f01057b8:	83 ec 0c             	sub    $0xc,%esp
f01057bb:	68 60 24 55 f0       	push   $0xf0552460
f01057c0:	e8 2b 95 00 00       	call   f010ecf0 <holding_spinlock>
f01057c5:	83 c4 10             	add    $0x10,%esp
f01057c8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	  //cprintf("\n[SCHED_EXIT_ENV] acquire: lock status before acquire = %d\n", qlock.locked);
	if (!lock_already_held)
f01057cb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f01057cf:	75 10                	jne    f01057e1 <sched_exit_env+0x2f>
	{
		acquire_spinlock(&ProcessQueues.qlock);
f01057d1:	83 ec 0c             	sub    $0xc,%esp
f01057d4:	68 60 24 55 f0       	push   $0xf0552460
f01057d9:	e8 f9 92 00 00       	call   f010ead7 <acquire_spinlock>
f01057de:	83 c4 10             	add    $0x10,%esp
	}
	struct Env* ptr_env=NULL;
f01057e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01057e8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01057ef:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01057f3:	75 59                	jne    f010584e <sched_exit_env+0x9c>
	{
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f01057f5:	a1 d0 24 55 f0       	mov    0xf05524d0,%eax
f01057fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01057fd:	eb 28                	jmp    f0105827 <sched_exit_env+0x75>
		{
			if(ptr_env->env_id == envId)
f01057ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105802:	8b 40 10             	mov    0x10(%eax),%eax
f0105805:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105808:	75 15                	jne    f010581f <sched_exit_env+0x6d>
			{
				sched_remove_new(ptr_env);
f010580a:	83 ec 0c             	sub    $0xc,%esp
f010580d:	ff 75 f4             	pushl  -0xc(%ebp)
f0105810:	e8 29 fc ff ff       	call   f010543e <sched_remove_new>
f0105815:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105818:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	}
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f010581f:	a1 d8 24 55 f0       	mov    0xf05524d8,%eax
f0105824:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105827:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010582b:	74 08                	je     f0105835 <sched_exit_env+0x83>
f010582d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105830:	8b 40 08             	mov    0x8(%eax),%eax
f0105833:	eb 05                	jmp    f010583a <sched_exit_env+0x88>
f0105835:	b8 00 00 00 00       	mov    $0x0,%eax
f010583a:	a3 d8 24 55 f0       	mov    %eax,0xf05524d8
f010583f:	a1 d8 24 55 f0       	mov    0xf05524d8,%eax
f0105844:	85 c0                	test   %eax,%eax
f0105846:	75 b7                	jne    f01057ff <sched_exit_env+0x4d>
f0105848:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010584c:	75 b1                	jne    f01057ff <sched_exit_env+0x4d>
				found = 1;
				//			return;
			}
		}
	}
	if (!found)
f010584e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105852:	0f 85 89 01 00 00    	jne    f01059e1 <sched_exit_env+0x22f>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105858:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010585f:	e9 69 01 00 00       	jmp    f01059cd <sched_exit_env+0x21b>
		{
			if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
f0105864:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105867:	83 c0 09             	add    $0x9,%eax
f010586a:	c1 e0 04             	shl    $0x4,%eax
f010586d:	05 60 24 55 f0       	add    $0xf0552460,%eax
f0105872:	8b 00                	mov    (%eax),%eax
f0105874:	85 c0                	test   %eax,%eax
f0105876:	0f 84 48 01 00 00    	je     f01059c4 <sched_exit_env+0x212>
			{
				ptr_env=NULL;
f010587c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f0105883:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105886:	83 c0 09             	add    $0x9,%eax
f0105889:	c1 e0 04             	shl    $0x4,%eax
f010588c:	05 60 24 55 f0       	add    $0xf0552460,%eax
f0105891:	8b 00                	mov    (%eax),%eax
f0105893:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105896:	e9 e3 00 00 00       	jmp    f010597e <sched_exit_env+0x1cc>
				{
					if(ptr_env->env_id == envId)
f010589b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010589e:	8b 40 10             	mov    0x10(%eax),%eax
f01058a1:	3b 45 08             	cmp    0x8(%ebp),%eax
f01058a4:	0f 85 c1 00 00 00    	jne    f010596b <sched_exit_env+0x1b9>
					{
						LIST_REMOVE(&(ProcessQueues.env_ready_queues[i]), ptr_env);
f01058aa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01058ae:	75 17                	jne    f01058c7 <sched_exit_env+0x115>
f01058b0:	83 ec 04             	sub    $0x4,%esp
f01058b3:	68 bf 45 12 f0       	push   $0xf01245bf
f01058b8:	68 44 01 00 00       	push   $0x144
f01058bd:	68 83 45 12 f0       	push   $0xf0124583
f01058c2:	e8 53 aa ff ff       	call   f010031a <_panic>
f01058c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058ca:	8b 40 08             	mov    0x8(%eax),%eax
f01058cd:	85 c0                	test   %eax,%eax
f01058cf:	74 11                	je     f01058e2 <sched_exit_env+0x130>
f01058d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058d4:	8b 40 08             	mov    0x8(%eax),%eax
f01058d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01058da:	8b 52 0c             	mov    0xc(%edx),%edx
f01058dd:	89 50 0c             	mov    %edx,0xc(%eax)
f01058e0:	eb 17                	jmp    f01058f9 <sched_exit_env+0x147>
f01058e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058e5:	8b 40 0c             	mov    0xc(%eax),%eax
f01058e8:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01058eb:	83 c2 09             	add    $0x9,%edx
f01058ee:	c1 e2 04             	shl    $0x4,%edx
f01058f1:	81 c2 64 24 55 f0    	add    $0xf0552464,%edx
f01058f7:	89 02                	mov    %eax,(%edx)
f01058f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01058fc:	8b 40 0c             	mov    0xc(%eax),%eax
f01058ff:	85 c0                	test   %eax,%eax
f0105901:	74 11                	je     f0105914 <sched_exit_env+0x162>
f0105903:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105906:	8b 40 0c             	mov    0xc(%eax),%eax
f0105909:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010590c:	8b 52 08             	mov    0x8(%edx),%edx
f010590f:	89 50 08             	mov    %edx,0x8(%eax)
f0105912:	eb 17                	jmp    f010592b <sched_exit_env+0x179>
f0105914:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105917:	8b 40 08             	mov    0x8(%eax),%eax
f010591a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010591d:	83 c2 09             	add    $0x9,%edx
f0105920:	c1 e2 04             	shl    $0x4,%edx
f0105923:	81 c2 60 24 55 f0    	add    $0xf0552460,%edx
f0105929:	89 02                	mov    %eax,(%edx)
f010592b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010592e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f0105935:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105938:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f010593f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105942:	83 c0 09             	add    $0x9,%eax
f0105945:	c1 e0 04             	shl    $0x4,%eax
f0105948:	05 6c 24 55 f0       	add    $0xf055246c,%eax
f010594d:	8b 00                	mov    (%eax),%eax
f010594f:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105952:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105955:	83 c0 09             	add    $0x9,%eax
f0105958:	c1 e0 04             	shl    $0x4,%eax
f010595b:	05 6c 24 55 f0       	add    $0xf055246c,%eax
f0105960:	89 10                	mov    %edx,(%eax)
						found = 1;
f0105962:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105969:	eb 59                	jmp    f01059c4 <sched_exit_env+0x212>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f010596b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010596e:	83 c0 09             	add    $0x9,%eax
f0105971:	c1 e0 04             	shl    $0x4,%eax
f0105974:	05 68 24 55 f0       	add    $0xf0552468,%eax
f0105979:	8b 00                	mov    (%eax),%eax
f010597b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010597e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105982:	74 08                	je     f010598c <sched_exit_env+0x1da>
f0105984:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105987:	8b 40 08             	mov    0x8(%eax),%eax
f010598a:	eb 05                	jmp    f0105991 <sched_exit_env+0x1df>
f010598c:	b8 00 00 00 00       	mov    $0x0,%eax
f0105991:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105994:	83 c2 09             	add    $0x9,%edx
f0105997:	c1 e2 04             	shl    $0x4,%edx
f010599a:	81 c2 68 24 55 f0    	add    $0xf0552468,%edx
f01059a0:	89 02                	mov    %eax,(%edx)
f01059a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059a5:	83 c0 09             	add    $0x9,%eax
f01059a8:	c1 e0 04             	shl    $0x4,%eax
f01059ab:	05 68 24 55 f0       	add    $0xf0552468,%eax
f01059b0:	8b 00                	mov    (%eax),%eax
f01059b2:	85 c0                	test   %eax,%eax
f01059b4:	0f 85 e1 fe ff ff    	jne    f010589b <sched_exit_env+0xe9>
f01059ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01059be:	0f 85 d7 fe ff ff    	jne    f010589b <sched_exit_env+0xe9>
						found = 1;
						break;
					}
				}
			}
			if (found) break;
f01059c4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01059c8:	75 16                	jne    f01059e0 <sched_exit_env+0x22e>
			}
		}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01059ca:	ff 45 ec             	incl   -0x14(%ebp)
f01059cd:	a0 60 51 55 f0       	mov    0xf0555160,%al
f01059d2:	0f b6 c0             	movzbl %al,%eax
f01059d5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01059d8:	0f 8f 86 fe ff ff    	jg     f0105864 <sched_exit_env+0xb2>
f01059de:	eb 01                	jmp    f01059e1 <sched_exit_env+0x22f>
						found = 1;
						break;
					}
				}
			}
			if (found) break;
f01059e0:	90                   	nop
		}
	}
	struct Env* cur_env = get_cpu_proc();
f01059e1:	e8 8a 4d 00 00       	call   f010a770 <get_cpu_proc>
f01059e6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	assert(cur_env != NULL);
f01059e9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01059ed:	75 19                	jne    f0105a08 <sched_exit_env+0x256>
f01059ef:	68 bb 46 12 f0       	push   $0xf01246bb
f01059f4:	68 6e 45 12 f0       	push   $0xf012456e
f01059f9:	68 4e 01 00 00       	push   $0x14e
f01059fe:	68 83 45 12 f0       	push   $0xf0124583
f0105a03:	e8 12 a9 ff ff       	call   f010031a <_panic>
	if (!found)
f0105a08:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105a0c:	75 18                	jne    f0105a26 <sched_exit_env+0x274>
	{
		if (cur_env->env_id == envId)
f0105a0e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105a11:	8b 40 10             	mov    0x10(%eax),%eax
f0105a14:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105a17:	75 0d                	jne    f0105a26 <sched_exit_env+0x274>
		{
			ptr_env = cur_env;
f0105a19:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105a1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f0105a1f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f0105a26:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105a2a:	74 1e                	je     f0105a4a <sched_exit_env+0x298>
	{
		sched_insert_exit(ptr_env);
f0105a2c:	83 ec 0c             	sub    $0xc,%esp
f0105a2f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105a32:	e8 f7 fa ff ff       	call   f010552e <sched_insert_exit>
f0105a37:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back
		//to an exited env. Status already set to EXIT in the sched_insert_exit()
		//It's the fos_scheduler task to release the lock on the Qs after context_switch to it from
		//this process
		if (cur_env->env_id == envId)
f0105a3a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105a3d:	8b 40 10             	mov    0x10(%eax),%eax
f0105a40:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105a43:	75 05                	jne    f0105a4a <sched_exit_env+0x298>
		{
			//2024: Replaced by sched() which call context switch
			//fos_scheduler();
			sched();
f0105a45:	e8 b3 4e 00 00       	call   f010a8fd <sched>
		}
	}
	if (!lock_already_held)
f0105a4a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0105a4e:	75 10                	jne    f0105a60 <sched_exit_env+0x2ae>
	{
		release_spinlock(&ProcessQueues.qlock);
f0105a50:	83 ec 0c             	sub    $0xc,%esp
f0105a53:	68 60 24 55 f0       	push   $0xf0552460
f0105a58:	e8 01 91 00 00       	call   f010eb5e <release_spinlock>
f0105a5d:	83 c4 10             	add    $0x10,%esp
	}
	//cprintf("\n[SCHED_EXIT_ENV] release: lock status after = %d\n", qlock.locked);
}
f0105a60:	90                   	nop
f0105a61:	c9                   	leave  
f0105a62:	c3                   	ret    

f0105a63 <sched_kill_env>:
/*2015*/
//=================================================
// [11] KILL the given EnvID:
//=================================================
void sched_kill_env(uint32 envId)
{
f0105a63:	55                   	push   %ebp
f0105a64:	89 e5                	mov    %esp,%ebp
f0105a66:	83 ec 18             	sub    $0x18,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0105a69:	83 ec 0c             	sub    $0xc,%esp
f0105a6c:	68 60 24 55 f0       	push   $0xf0552460
f0105a71:	e8 61 90 00 00       	call   f010ead7 <acquire_spinlock>
f0105a76:	83 c4 10             	add    $0x10,%esp
	struct Env* ptr_env=NULL;
f0105a79:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f0105a80:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105a87:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105a8b:	75 79                	jne    f0105b06 <sched_kill_env+0xa3>
	{
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f0105a8d:	a1 d0 24 55 f0       	mov    0xf05524d0,%eax
f0105a92:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105a95:	eb 48                	jmp    f0105adf <sched_kill_env+0x7c>
		{
			if(ptr_env->env_id == envId)
f0105a97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105a9a:	8b 40 10             	mov    0x10(%eax),%eax
f0105a9d:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105aa0:	75 35                	jne    f0105ad7 <sched_kill_env+0x74>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f0105aa2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105aa5:	8d 50 20             	lea    0x20(%eax),%edx
f0105aa8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105aab:	8b 40 10             	mov    0x10(%eax),%eax
f0105aae:	83 ec 04             	sub    $0x4,%esp
f0105ab1:	52                   	push   %edx
f0105ab2:	50                   	push   %eax
f0105ab3:	68 cc 46 12 f0       	push   $0xf01246cc
f0105ab8:	e8 af b4 ff ff       	call   f0100f6c <cprintf>
f0105abd:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f0105ac0:	83 ec 0c             	sub    $0xc,%esp
f0105ac3:	ff 75 f4             	pushl  -0xc(%ebp)
f0105ac6:	e8 73 f9 ff ff       	call   f010543e <sched_remove_new>
f0105acb:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105ace:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
				break;
f0105ad5:	eb 2f                	jmp    f0105b06 <sched_kill_env+0xa3>
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f0105ad7:	a1 d8 24 55 f0       	mov    0xf05524d8,%eax
f0105adc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105adf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ae3:	74 08                	je     f0105aed <sched_kill_env+0x8a>
f0105ae5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ae8:	8b 40 08             	mov    0x8(%eax),%eax
f0105aeb:	eb 05                	jmp    f0105af2 <sched_kill_env+0x8f>
f0105aed:	b8 00 00 00 00       	mov    $0x0,%eax
f0105af2:	a3 d8 24 55 f0       	mov    %eax,0xf05524d8
f0105af7:	a1 d8 24 55 f0       	mov    0xf05524d8,%eax
f0105afc:	85 c0                	test   %eax,%eax
f0105afe:	75 97                	jne    f0105a97 <sched_kill_env+0x34>
f0105b00:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105b04:	75 91                	jne    f0105a97 <sched_kill_env+0x34>
				found = 1;
				break;
			}
		}
	}
	if (!found)
f0105b06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105b0a:	0f 85 a7 01 00 00    	jne    f0105cb7 <sched_kill_env+0x254>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105b10:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105b17:	e9 87 01 00 00       	jmp    f0105ca3 <sched_kill_env+0x240>
		{
			if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
f0105b1c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b1f:	83 c0 09             	add    $0x9,%eax
f0105b22:	c1 e0 04             	shl    $0x4,%eax
f0105b25:	05 60 24 55 f0       	add    $0xf0552460,%eax
f0105b2a:	8b 00                	mov    (%eax),%eax
f0105b2c:	85 c0                	test   %eax,%eax
f0105b2e:	0f 84 66 01 00 00    	je     f0105c9a <sched_kill_env+0x237>
			{
				ptr_env=NULL;
f0105b34:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f0105b3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105b3e:	83 c0 09             	add    $0x9,%eax
f0105b41:	c1 e0 04             	shl    $0x4,%eax
f0105b44:	05 60 24 55 f0       	add    $0xf0552460,%eax
f0105b49:	8b 00                	mov    (%eax),%eax
f0105b4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105b4e:	e9 01 01 00 00       	jmp    f0105c54 <sched_kill_env+0x1f1>
				{
					if(ptr_env->env_id == envId)
f0105b53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b56:	8b 40 10             	mov    0x10(%eax),%eax
f0105b59:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105b5c:	0f 85 df 00 00 00    	jne    f0105c41 <sched_kill_env+0x1de>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f0105b62:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b65:	8d 50 20             	lea    0x20(%eax),%edx
f0105b68:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105b6b:	8b 40 10             	mov    0x10(%eax),%eax
f0105b6e:	ff 75 ec             	pushl  -0x14(%ebp)
f0105b71:	52                   	push   %edx
f0105b72:	50                   	push   %eax
f0105b73:	68 f4 46 12 f0       	push   $0xf01246f4
f0105b78:	e8 ef b3 ff ff       	call   f0100f6c <cprintf>
f0105b7d:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(ProcessQueues.env_ready_queues[i]), ptr_env);
f0105b80:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105b84:	75 17                	jne    f0105b9d <sched_kill_env+0x13a>
f0105b86:	83 ec 04             	sub    $0x4,%esp
f0105b89:	68 bf 45 12 f0       	push   $0xf01245bf
f0105b8e:	68 91 01 00 00       	push   $0x191
f0105b93:	68 83 45 12 f0       	push   $0xf0124583
f0105b98:	e8 7d a7 ff ff       	call   f010031a <_panic>
f0105b9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ba0:	8b 40 08             	mov    0x8(%eax),%eax
f0105ba3:	85 c0                	test   %eax,%eax
f0105ba5:	74 11                	je     f0105bb8 <sched_kill_env+0x155>
f0105ba7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105baa:	8b 40 08             	mov    0x8(%eax),%eax
f0105bad:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105bb0:	8b 52 0c             	mov    0xc(%edx),%edx
f0105bb3:	89 50 0c             	mov    %edx,0xc(%eax)
f0105bb6:	eb 17                	jmp    f0105bcf <sched_kill_env+0x16c>
f0105bb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105bbb:	8b 40 0c             	mov    0xc(%eax),%eax
f0105bbe:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105bc1:	83 c2 09             	add    $0x9,%edx
f0105bc4:	c1 e2 04             	shl    $0x4,%edx
f0105bc7:	81 c2 64 24 55 f0    	add    $0xf0552464,%edx
f0105bcd:	89 02                	mov    %eax,(%edx)
f0105bcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105bd2:	8b 40 0c             	mov    0xc(%eax),%eax
f0105bd5:	85 c0                	test   %eax,%eax
f0105bd7:	74 11                	je     f0105bea <sched_kill_env+0x187>
f0105bd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105bdc:	8b 40 0c             	mov    0xc(%eax),%eax
f0105bdf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105be2:	8b 52 08             	mov    0x8(%edx),%edx
f0105be5:	89 50 08             	mov    %edx,0x8(%eax)
f0105be8:	eb 17                	jmp    f0105c01 <sched_kill_env+0x19e>
f0105bea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105bed:	8b 40 08             	mov    0x8(%eax),%eax
f0105bf0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105bf3:	83 c2 09             	add    $0x9,%edx
f0105bf6:	c1 e2 04             	shl    $0x4,%edx
f0105bf9:	81 c2 60 24 55 f0    	add    $0xf0552460,%edx
f0105bff:	89 02                	mov    %eax,(%edx)
f0105c01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c04:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f0105c0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c0e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0105c15:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c18:	83 c0 09             	add    $0x9,%eax
f0105c1b:	c1 e0 04             	shl    $0x4,%eax
f0105c1e:	05 6c 24 55 f0       	add    $0xf055246c,%eax
f0105c23:	8b 00                	mov    (%eax),%eax
f0105c25:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105c28:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c2b:	83 c0 09             	add    $0x9,%eax
f0105c2e:	c1 e0 04             	shl    $0x4,%eax
f0105c31:	05 6c 24 55 f0       	add    $0xf055246c,%eax
f0105c36:	89 10                	mov    %edx,(%eax)
						found = 1;
f0105c38:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105c3f:	eb 59                	jmp    f0105c9a <sched_kill_env+0x237>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f0105c41:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c44:	83 c0 09             	add    $0x9,%eax
f0105c47:	c1 e0 04             	shl    $0x4,%eax
f0105c4a:	05 68 24 55 f0       	add    $0xf0552468,%eax
f0105c4f:	8b 00                	mov    (%eax),%eax
f0105c51:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105c54:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c58:	74 08                	je     f0105c62 <sched_kill_env+0x1ff>
f0105c5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105c5d:	8b 40 08             	mov    0x8(%eax),%eax
f0105c60:	eb 05                	jmp    f0105c67 <sched_kill_env+0x204>
f0105c62:	b8 00 00 00 00       	mov    $0x0,%eax
f0105c67:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105c6a:	83 c2 09             	add    $0x9,%edx
f0105c6d:	c1 e2 04             	shl    $0x4,%edx
f0105c70:	81 c2 68 24 55 f0    	add    $0xf0552468,%edx
f0105c76:	89 02                	mov    %eax,(%edx)
f0105c78:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c7b:	83 c0 09             	add    $0x9,%eax
f0105c7e:	c1 e0 04             	shl    $0x4,%eax
f0105c81:	05 68 24 55 f0       	add    $0xf0552468,%eax
f0105c86:	8b 00                	mov    (%eax),%eax
f0105c88:	85 c0                	test   %eax,%eax
f0105c8a:	0f 85 c3 fe ff ff    	jne    f0105b53 <sched_kill_env+0xf0>
f0105c90:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105c94:	0f 85 b9 fe ff ff    	jne    f0105b53 <sched_kill_env+0xf0>
						found = 1;
						break;
					}
				}
			}
			if (found)
f0105c9a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105c9e:	75 16                	jne    f0105cb6 <sched_kill_env+0x253>
			}
		}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105ca0:	ff 45 ec             	incl   -0x14(%ebp)
f0105ca3:	a0 60 51 55 f0       	mov    0xf0555160,%al
f0105ca8:	0f b6 c0             	movzbl %al,%eax
f0105cab:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0105cae:	0f 8f 68 fe ff ff    	jg     f0105b1c <sched_kill_env+0xb9>
f0105cb4:	eb 01                	jmp    f0105cb7 <sched_kill_env+0x254>
						break;
					}
				}
			}
			if (found)
				break;
f0105cb6:	90                   	nop
		}
	}
	if (!found)
f0105cb7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105cbb:	0f 85 80 00 00 00    	jne    f0105d41 <sched_kill_env+0x2de>
	{
		ptr_env=NULL;
f0105cc1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f0105cc8:	a1 e0 24 55 f0       	mov    0xf05524e0,%eax
f0105ccd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105cd0:	eb 48                	jmp    f0105d1a <sched_kill_env+0x2b7>
		{
			if(ptr_env->env_id == envId)
f0105cd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105cd5:	8b 40 10             	mov    0x10(%eax),%eax
f0105cd8:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105cdb:	75 35                	jne    f0105d12 <sched_kill_env+0x2af>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f0105cdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ce0:	8d 50 20             	lea    0x20(%eax),%edx
f0105ce3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ce6:	8b 40 10             	mov    0x10(%eax),%eax
f0105ce9:	83 ec 04             	sub    $0x4,%esp
f0105cec:	52                   	push   %edx
f0105ced:	50                   	push   %eax
f0105cee:	68 20 47 12 f0       	push   $0xf0124720
f0105cf3:	e8 74 b2 ff ff       	call   f0100f6c <cprintf>
f0105cf8:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f0105cfb:	83 ec 0c             	sub    $0xc,%esp
f0105cfe:	ff 75 f4             	pushl  -0xc(%ebp)
f0105d01:	e8 af f8 ff ff       	call   f01055b5 <sched_remove_exit>
f0105d06:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105d09:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
				break;
f0105d10:	eb 2f                	jmp    f0105d41 <sched_kill_env+0x2de>
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f0105d12:	a1 e8 24 55 f0       	mov    0xf05524e8,%eax
f0105d17:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105d1a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d1e:	74 08                	je     f0105d28 <sched_kill_env+0x2c5>
f0105d20:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105d23:	8b 40 08             	mov    0x8(%eax),%eax
f0105d26:	eb 05                	jmp    f0105d2d <sched_kill_env+0x2ca>
f0105d28:	b8 00 00 00 00       	mov    $0x0,%eax
f0105d2d:	a3 e8 24 55 f0       	mov    %eax,0xf05524e8
f0105d32:	a1 e8 24 55 f0       	mov    0xf05524e8,%eax
f0105d37:	85 c0                	test   %eax,%eax
f0105d39:	75 97                	jne    f0105cd2 <sched_kill_env+0x26f>
f0105d3b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d3f:	75 91                	jne    f0105cd2 <sched_kill_env+0x26f>
				found = 1;
				break;
			}
		}
	}
	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0105d41:	83 ec 0c             	sub    $0xc,%esp
f0105d44:	68 60 24 55 f0       	push   $0xf0552460
f0105d49:	e8 10 8e 00 00       	call   f010eb5e <release_spinlock>
f0105d4e:	83 c4 10             	add    $0x10,%esp

	if (found)
f0105d51:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105d55:	74 23                	je     f0105d7a <sched_kill_env+0x317>
	{
		env_free(ptr_env);
f0105d57:	83 ec 0c             	sub    $0xc,%esp
f0105d5a:	ff 75 f4             	pushl  -0xc(%ebp)
f0105d5d:	e8 c6 49 00 00       	call   f010a728 <env_free>
f0105d62:	83 c4 10             	add    $0x10,%esp
		cprintf("DONE\n");
f0105d65:	83 ec 0c             	sub    $0xc,%esp
f0105d68:	68 46 47 12 f0       	push   $0xf0124746
f0105d6d:	e8 fa b1 ff ff       	call   f0100f6c <cprintf>
f0105d72:	83 c4 10             	add    $0x10,%esp
			//fos_scheduler();
			sched();
		}
	}

}
f0105d75:	e9 a4 00 00 00       	jmp    f0105e1e <sched_kill_env+0x3bb>
		env_free(ptr_env);
		cprintf("DONE\n");
	}
	else
	{
		struct Env* cur_env = get_cpu_proc();
f0105d7a:	e8 f1 49 00 00       	call   f010a770 <get_cpu_proc>
f0105d7f:	89 45 e8             	mov    %eax,-0x18(%ebp)
		assert(cur_env != NULL);
f0105d82:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0105d86:	75 19                	jne    f0105da1 <sched_kill_env+0x33e>
f0105d88:	68 bb 46 12 f0       	push   $0xf01246bb
f0105d8d:	68 6e 45 12 f0       	push   $0xf012456e
f0105d92:	68 b3 01 00 00       	push   $0x1b3
f0105d97:	68 83 45 12 f0       	push   $0xf0124583
f0105d9c:	e8 79 a5 ff ff       	call   f010031a <_panic>

		if (cur_env->env_id == envId)
f0105da1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105da4:	8b 40 10             	mov    0x10(%eax),%eax
f0105da7:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105daa:	75 72                	jne    f0105e1e <sched_kill_env+0x3bb>
		{
			ptr_env = cur_env;
f0105dac:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105daf:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_status == ENV_RUNNING);
f0105db2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105db5:	8b 40 18             	mov    0x18(%eax),%eax
f0105db8:	83 f8 02             	cmp    $0x2,%eax
f0105dbb:	74 19                	je     f0105dd6 <sched_kill_env+0x373>
f0105dbd:	68 4c 47 12 f0       	push   $0xf012474c
f0105dc2:	68 6e 45 12 f0       	push   $0xf012456e
f0105dc7:	68 b8 01 00 00       	push   $0x1b8
f0105dcc:	68 83 45 12 f0       	push   $0xf0124583
f0105dd1:	e8 44 a5 ff ff       	call   f010031a <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105dd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105dd9:	8d 50 20             	lea    0x20(%eax),%edx
f0105ddc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105ddf:	8b 40 10             	mov    0x10(%eax),%eax
f0105de2:	83 ec 04             	sub    $0x4,%esp
f0105de5:	52                   	push   %edx
f0105de6:	50                   	push   %eax
f0105de7:	68 70 47 12 f0       	push   $0xf0124770
f0105dec:	e8 7b b1 ff ff       	call   f0100f6c <cprintf>
f0105df1:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105df4:	83 ec 0c             	sub    $0xc,%esp
f0105df7:	ff 75 f4             	pushl  -0xc(%ebp)
f0105dfa:	e8 29 49 00 00       	call   f010a728 <env_free>
f0105dff:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105e02:	83 ec 0c             	sub    $0xc,%esp
f0105e05:	68 46 47 12 f0       	push   $0xf0124746
f0105e0a:	e8 5d b1 ff ff       	call   f0100f6c <cprintf>
f0105e0f:	83 c4 10             	add    $0x10,%esp
			found = 1;
f0105e12:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//this process
			/*2024: replaced by sched() to apply context_switch*/
			//lcr3(phys_page_directory);
			//switchkvm();
			//fos_scheduler();
			sched();
f0105e19:	e8 df 4a 00 00       	call   f010a8fd <sched>
		}
	}

}
f0105e1e:	90                   	nop
f0105e1f:	c9                   	leave  
f0105e20:	c3                   	ret    

f0105e21 <sched_print_all>:

//=================================================
// [12] PRINT ALL Envs from all queues:
//=================================================
void sched_print_all()
{
f0105e21:	55                   	push   %ebp
f0105e22:	89 e5                	mov    %esp,%ebp
f0105e24:	83 ec 18             	sub    $0x18,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0105e27:	83 ec 0c             	sub    $0xc,%esp
f0105e2a:	68 60 24 55 f0       	push   $0xf0552460
f0105e2f:	e8 a3 8c 00 00       	call   f010ead7 <acquire_spinlock>
f0105e34:	83 c4 10             	add    $0x10,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&ProcessQueues.env_new_queue))
f0105e37:	a1 d0 24 55 f0       	mov    0xf05524d0,%eax
f0105e3c:	85 c0                	test   %eax,%eax
f0105e3e:	74 69                	je     f0105ea9 <sched_print_all+0x88>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0105e40:	83 ec 0c             	sub    $0xc,%esp
f0105e43:	68 9c 47 12 f0       	push   $0xf012479c
f0105e48:	e8 1f b1 ff ff       	call   f0100f6c <cprintf>
f0105e4d:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f0105e50:	a1 d0 24 55 f0       	mov    0xf05524d0,%eax
f0105e55:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105e58:	eb 26                	jmp    f0105e80 <sched_print_all+0x5f>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105e5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e5d:	8d 50 20             	lea    0x20(%eax),%edx
f0105e60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e63:	8b 40 10             	mov    0x10(%eax),%eax
f0105e66:	83 ec 04             	sub    $0x4,%esp
f0105e69:	52                   	push   %edx
f0105e6a:	50                   	push   %eax
f0105e6b:	68 be 47 12 f0       	push   $0xf01247be
f0105e70:	e8 f7 b0 ff ff       	call   f0100f6c <cprintf>
f0105e75:	83 c4 10             	add    $0x10,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&ProcessQueues.env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f0105e78:	a1 d8 24 55 f0       	mov    0xf05524d8,%eax
f0105e7d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105e80:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105e84:	74 08                	je     f0105e8e <sched_print_all+0x6d>
f0105e86:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105e89:	8b 40 08             	mov    0x8(%eax),%eax
f0105e8c:	eb 05                	jmp    f0105e93 <sched_print_all+0x72>
f0105e8e:	b8 00 00 00 00       	mov    $0x0,%eax
f0105e93:	a3 d8 24 55 f0       	mov    %eax,0xf05524d8
f0105e98:	a1 d8 24 55 f0       	mov    0xf05524d8,%eax
f0105e9d:	85 c0                	test   %eax,%eax
f0105e9f:	75 b9                	jne    f0105e5a <sched_print_all+0x39>
f0105ea1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105ea5:	75 b3                	jne    f0105e5a <sched_print_all+0x39>
f0105ea7:	eb 10                	jmp    f0105eb9 <sched_print_all+0x98>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0105ea9:	83 ec 0c             	sub    $0xc,%esp
f0105eac:	68 c8 47 12 f0       	push   $0xf01247c8
f0105eb1:	e8 b6 b0 ff ff       	call   f0100f6c <cprintf>
f0105eb6:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0105eb9:	83 ec 0c             	sub    $0xc,%esp
f0105ebc:	68 e4 47 12 f0       	push   $0xf01247e4
f0105ec1:	e8 a6 b0 ff ff       	call   f0100f6c <cprintf>
f0105ec6:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105ec9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105ed0:	e9 d7 00 00 00       	jmp    f0105fac <sched_print_all+0x18b>
	{
		if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
f0105ed5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105ed8:	83 c0 09             	add    $0x9,%eax
f0105edb:	c1 e0 04             	shl    $0x4,%eax
f0105ede:	05 60 24 55 f0       	add    $0xf0552460,%eax
f0105ee3:	8b 00                	mov    (%eax),%eax
f0105ee5:	85 c0                	test   %eax,%eax
f0105ee7:	0f 84 99 00 00 00    	je     f0105f86 <sched_print_all+0x165>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0105eed:	83 ec 08             	sub    $0x8,%esp
f0105ef0:	ff 75 f0             	pushl  -0x10(%ebp)
f0105ef3:	68 18 48 12 f0       	push   $0xf0124818
f0105ef8:	e8 6f b0 ff ff       	call   f0100f6c <cprintf>
f0105efd:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f0105f00:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f03:	83 c0 09             	add    $0x9,%eax
f0105f06:	c1 e0 04             	shl    $0x4,%eax
f0105f09:	05 60 24 55 f0       	add    $0xf0552460,%eax
f0105f0e:	8b 00                	mov    (%eax),%eax
f0105f10:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105f13:	eb 31                	jmp    f0105f46 <sched_print_all+0x125>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105f15:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f18:	8d 50 20             	lea    0x20(%eax),%edx
f0105f1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f1e:	8b 40 10             	mov    0x10(%eax),%eax
f0105f21:	83 ec 04             	sub    $0x4,%esp
f0105f24:	52                   	push   %edx
f0105f25:	50                   	push   %eax
f0105f26:	68 be 47 12 f0       	push   $0xf01247be
f0105f2b:	e8 3c b0 ff ff       	call   f0100f6c <cprintf>
f0105f30:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f0105f33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f36:	83 c0 09             	add    $0x9,%eax
f0105f39:	c1 e0 04             	shl    $0x4,%eax
f0105f3c:	05 68 24 55 f0       	add    $0xf0552468,%eax
f0105f41:	8b 00                	mov    (%eax),%eax
f0105f43:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105f46:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f4a:	74 08                	je     f0105f54 <sched_print_all+0x133>
f0105f4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f4f:	8b 40 08             	mov    0x8(%eax),%eax
f0105f52:	eb 05                	jmp    f0105f59 <sched_print_all+0x138>
f0105f54:	b8 00 00 00 00       	mov    $0x0,%eax
f0105f59:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105f5c:	83 c2 09             	add    $0x9,%edx
f0105f5f:	c1 e2 04             	shl    $0x4,%edx
f0105f62:	81 c2 68 24 55 f0    	add    $0xf0552468,%edx
f0105f68:	89 02                	mov    %eax,(%edx)
f0105f6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f6d:	83 c0 09             	add    $0x9,%eax
f0105f70:	c1 e0 04             	shl    $0x4,%eax
f0105f73:	05 68 24 55 f0       	add    $0xf0552468,%eax
f0105f78:	8b 00                	mov    (%eax),%eax
f0105f7a:	85 c0                	test   %eax,%eax
f0105f7c:	75 97                	jne    f0105f15 <sched_print_all+0xf4>
f0105f7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105f82:	75 91                	jne    f0105f15 <sched_print_all+0xf4>
f0105f84:	eb 13                	jmp    f0105f99 <sched_print_all+0x178>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0105f86:	83 ec 08             	sub    $0x8,%esp
f0105f89:	ff 75 f0             	pushl  -0x10(%ebp)
f0105f8c:	68 40 48 12 f0       	push   $0xf0124840
f0105f91:	e8 d6 af ff ff       	call   f0100f6c <cprintf>
f0105f96:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0105f99:	83 ec 0c             	sub    $0xc,%esp
f0105f9c:	68 e4 47 12 f0       	push   $0xf01247e4
f0105fa1:	e8 c6 af ff ff       	call   f0100f6c <cprintf>
f0105fa6:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105fa9:	ff 45 f0             	incl   -0x10(%ebp)
f0105fac:	a0 60 51 55 f0       	mov    0xf0555160,%al
f0105fb1:	0f b6 c0             	movzbl %al,%eax
f0105fb4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0105fb7:	0f 8f 18 ff ff ff    	jg     f0105ed5 <sched_print_all+0xb4>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&ProcessQueues.env_exit_queue))
f0105fbd:	a1 e0 24 55 f0       	mov    0xf05524e0,%eax
f0105fc2:	85 c0                	test   %eax,%eax
f0105fc4:	74 69                	je     f010602f <sched_print_all+0x20e>
	{
		cprintf("The processes in EXIT queue are:\n");
f0105fc6:	83 ec 0c             	sub    $0xc,%esp
f0105fc9:	68 64 48 12 f0       	push   $0xf0124864
f0105fce:	e8 99 af ff ff       	call   f0100f6c <cprintf>
f0105fd3:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f0105fd6:	a1 e0 24 55 f0       	mov    0xf05524e0,%eax
f0105fdb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105fde:	eb 26                	jmp    f0106006 <sched_print_all+0x1e5>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0105fe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105fe3:	8d 50 20             	lea    0x20(%eax),%edx
f0105fe6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105fe9:	8b 40 10             	mov    0x10(%eax),%eax
f0105fec:	83 ec 04             	sub    $0x4,%esp
f0105fef:	52                   	push   %edx
f0105ff0:	50                   	push   %eax
f0105ff1:	68 be 47 12 f0       	push   $0xf01247be
f0105ff6:	e8 71 af ff ff       	call   f0100f6c <cprintf>
f0105ffb:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&ProcessQueues.env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f0105ffe:	a1 e8 24 55 f0       	mov    0xf05524e8,%eax
f0106003:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106006:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010600a:	74 08                	je     f0106014 <sched_print_all+0x1f3>
f010600c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010600f:	8b 40 08             	mov    0x8(%eax),%eax
f0106012:	eb 05                	jmp    f0106019 <sched_print_all+0x1f8>
f0106014:	b8 00 00 00 00       	mov    $0x0,%eax
f0106019:	a3 e8 24 55 f0       	mov    %eax,0xf05524e8
f010601e:	a1 e8 24 55 f0       	mov    0xf05524e8,%eax
f0106023:	85 c0                	test   %eax,%eax
f0106025:	75 b9                	jne    f0105fe0 <sched_print_all+0x1bf>
f0106027:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010602b:	75 b3                	jne    f0105fe0 <sched_print_all+0x1bf>
f010602d:	eb 10                	jmp    f010603f <sched_print_all+0x21e>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f010602f:	83 ec 0c             	sub    $0xc,%esp
f0106032:	68 86 48 12 f0       	push   $0xf0124886
f0106037:	e8 30 af ff ff       	call   f0100f6c <cprintf>
f010603c:	83 c4 10             	add    $0x10,%esp
	}
	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f010603f:	83 ec 0c             	sub    $0xc,%esp
f0106042:	68 60 24 55 f0       	push   $0xf0552460
f0106047:	e8 12 8b 00 00       	call   f010eb5e <release_spinlock>
f010604c:	83 c4 10             	add    $0x10,%esp
}
f010604f:	90                   	nop
f0106050:	c9                   	leave  
f0106051:	c3                   	ret    

f0106052 <sched_run_all>:

//=================================================
// [13] MOVE ALL NEW Envs into READY Q:
//=================================================
void sched_run_all()
{
f0106052:	55                   	push   %ebp
f0106053:	89 e5                	mov    %esp,%ebp
f0106055:	83 ec 18             	sub    $0x18,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0106058:	83 ec 0c             	sub    $0xc,%esp
f010605b:	68 60 24 55 f0       	push   $0xf0552460
f0106060:	e8 72 8a 00 00       	call   f010ead7 <acquire_spinlock>
f0106065:	83 c4 10             	add    $0x10,%esp
	struct Env* ptr_env=NULL;
f0106068:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*2023: Changed from LIST_FOREACH into DEQUEUE (based on suggestion from T52 & T73 2023.Term1)
	 * to move the processes in FIFO order instead of LIFO in case of LIST_FOREACH
	 * */
	int q_size = LIST_SIZE(&ProcessQueues.env_new_queue);
f010606f:	a1 dc 24 55 f0       	mov    0xf05524dc,%eax
f0106074:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (int i = 0; i < q_size; ++i)
f0106077:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010607e:	eb 24                	jmp    f01060a4 <sched_run_all+0x52>
	{
		ptr_env = dequeue(&ProcessQueues.env_new_queue);
f0106080:	83 ec 0c             	sub    $0xc,%esp
f0106083:	68 d0 24 55 f0       	push   $0xf05524d0
f0106088:	e8 7c ef ff ff       	call   f0105009 <dequeue>
f010608d:	83 c4 10             	add    $0x10,%esp
f0106090:	89 45 f0             	mov    %eax,-0x10(%ebp)
		sched_insert_ready0(ptr_env);
f0106093:	83 ec 0c             	sub    $0xc,%esp
f0106096:	ff 75 f0             	pushl  -0x10(%ebp)
f0106099:	e8 4f f1 ff ff       	call   f01051ed <sched_insert_ready0>
f010609e:	83 c4 10             	add    $0x10,%esp

	/*2023: Changed from LIST_FOREACH into DEQUEUE (based on suggestion from T52 & T73 2023.Term1)
	 * to move the processes in FIFO order instead of LIFO in case of LIST_FOREACH
	 * */
	int q_size = LIST_SIZE(&ProcessQueues.env_new_queue);
	for (int i = 0; i < q_size; ++i)
f01060a1:	ff 45 f4             	incl   -0xc(%ebp)
f01060a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01060a7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01060aa:	7c d4                	jl     f0106080 <sched_run_all+0x2e>
	{
		ptr_env = dequeue(&ProcessQueues.env_new_queue);
		sched_insert_ready0(ptr_env);
	}

	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f01060ac:	83 ec 0c             	sub    $0xc,%esp
f01060af:	68 60 24 55 f0       	push   $0xf0552460
f01060b4:	e8 a5 8a 00 00       	call   f010eb5e <release_spinlock>
f01060b9:	83 c4 10             	add    $0x10,%esp
	/*2015*///if scheduler not run yet, then invoke it!
	if (mycpu()->scheduler_status == SCH_STOPPED)
f01060bc:	e8 3c 10 00 00       	call   f01070fd <mycpu>
f01060c1:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
f01060c7:	85 c0                	test   %eax,%eax
f01060c9:	75 05                	jne    f01060d0 <sched_run_all+0x7e>
		fos_scheduler();
f01060cb:	e8 e2 06 00 00       	call   f01067b2 <fos_scheduler>
	else
		panic("scheduler status is NOT STOPPED while it's expected to be!!");
f01060d0:	83 ec 04             	sub    $0x4,%esp
f01060d3:	68 a4 48 12 f0       	push   $0xf01248a4
f01060d8:	68 15 02 00 00       	push   $0x215
f01060dd:	68 83 45 12 f0       	push   $0xf0124583
f01060e2:	e8 33 a2 ff ff       	call   f010031a <_panic>

f01060e7 <sched_kill_all>:

//=================================================
// [14] KILL ALL Envs in the System:
//=================================================
void sched_kill_all()
{
f01060e7:	55                   	push   %ebp
f01060e8:	89 e5                	mov    %esp,%ebp
f01060ea:	83 ec 18             	sub    $0x18,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f01060ed:	83 ec 0c             	sub    $0xc,%esp
f01060f0:	68 60 24 55 f0       	push   $0xf0552460
f01060f5:	e8 dd 89 00 00       	call   f010ead7 <acquire_spinlock>
f01060fa:	83 c4 10             	add    $0x10,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&ProcessQueues.env_new_queue))
f01060fd:	a1 d0 24 55 f0       	mov    0xf05524d0,%eax
f0106102:	85 c0                	test   %eax,%eax
f0106104:	0f 84 95 00 00 00    	je     f010619f <sched_kill_all+0xb8>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f010610a:	83 ec 0c             	sub    $0xc,%esp
f010610d:	68 e0 48 12 f0       	push   $0xf01248e0
f0106112:	e8 55 ae ff ff       	call   f0100f6c <cprintf>
f0106117:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f010611a:	a1 d0 24 55 f0       	mov    0xf05524d0,%eax
f010611f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106122:	eb 52                	jmp    f0106176 <sched_kill_all+0x8f>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0106124:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106127:	8d 50 20             	lea    0x20(%eax),%edx
f010612a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010612d:	8b 40 10             	mov    0x10(%eax),%eax
f0106130:	83 ec 04             	sub    $0x4,%esp
f0106133:	52                   	push   %edx
f0106134:	50                   	push   %eax
f0106135:	68 0c 49 12 f0       	push   $0xf012490c
f010613a:	e8 2d ae ff ff       	call   f0100f6c <cprintf>
f010613f:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0106142:	83 ec 0c             	sub    $0xc,%esp
f0106145:	ff 75 f4             	pushl  -0xc(%ebp)
f0106148:	e8 f1 f2 ff ff       	call   f010543e <sched_remove_new>
f010614d:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0106150:	83 ec 0c             	sub    $0xc,%esp
f0106153:	ff 75 f4             	pushl  -0xc(%ebp)
f0106156:	e8 cd 45 00 00       	call   f010a728 <env_free>
f010615b:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f010615e:	83 ec 0c             	sub    $0xc,%esp
f0106161:	68 46 47 12 f0       	push   $0xf0124746
f0106166:	e8 01 ae ff ff       	call   f0100f6c <cprintf>
f010616b:	83 c4 10             	add    $0x10,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&ProcessQueues.env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &ProcessQueues.env_new_queue)
f010616e:	a1 d8 24 55 f0       	mov    0xf05524d8,%eax
f0106173:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106176:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010617a:	74 08                	je     f0106184 <sched_kill_all+0x9d>
f010617c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010617f:	8b 40 08             	mov    0x8(%eax),%eax
f0106182:	eb 05                	jmp    f0106189 <sched_kill_all+0xa2>
f0106184:	b8 00 00 00 00       	mov    $0x0,%eax
f0106189:	a3 d8 24 55 f0       	mov    %eax,0xf05524d8
f010618e:	a1 d8 24 55 f0       	mov    0xf05524d8,%eax
f0106193:	85 c0                	test   %eax,%eax
f0106195:	75 8d                	jne    f0106124 <sched_kill_all+0x3d>
f0106197:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010619b:	75 87                	jne    f0106124 <sched_kill_all+0x3d>
f010619d:	eb 10                	jmp    f01061af <sched_kill_all+0xc8>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f010619f:	83 ec 0c             	sub    $0xc,%esp
f01061a2:	68 1f 49 12 f0       	push   $0xf012491f
f01061a7:	e8 c0 ad ff ff       	call   f0100f6c <cprintf>
f01061ac:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f01061af:	83 ec 0c             	sub    $0xc,%esp
f01061b2:	68 e4 47 12 f0       	push   $0xf01247e4
f01061b7:	e8 b0 ad ff ff       	call   f0100f6c <cprintf>
f01061bc:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01061bf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01061c6:	e9 b8 01 00 00       	jmp    f0106383 <sched_kill_all+0x29c>
	{
		if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
f01061cb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01061ce:	83 c0 09             	add    $0x9,%eax
f01061d1:	c1 e0 04             	shl    $0x4,%eax
f01061d4:	05 60 24 55 f0       	add    $0xf0552460,%eax
f01061d9:	8b 00                	mov    (%eax),%eax
f01061db:	85 c0                	test   %eax,%eax
f01061dd:	0f 84 7a 01 00 00    	je     f010635d <sched_kill_all+0x276>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f01061e3:	83 ec 08             	sub    $0x8,%esp
f01061e6:	ff 75 f0             	pushl  -0x10(%ebp)
f01061e9:	68 3c 49 12 f0       	push   $0xf012493c
f01061ee:	e8 79 ad ff ff       	call   f0100f6c <cprintf>
f01061f3:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f01061f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01061f9:	83 c0 09             	add    $0x9,%eax
f01061fc:	c1 e0 04             	shl    $0x4,%eax
f01061ff:	05 60 24 55 f0       	add    $0xf0552460,%eax
f0106204:	8b 00                	mov    (%eax),%eax
f0106206:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106209:	e9 07 01 00 00       	jmp    f0106315 <sched_kill_all+0x22e>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f010620e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106211:	8d 50 20             	lea    0x20(%eax),%edx
f0106214:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106217:	8b 40 10             	mov    0x10(%eax),%eax
f010621a:	83 ec 04             	sub    $0x4,%esp
f010621d:	52                   	push   %edx
f010621e:	50                   	push   %eax
f010621f:	68 0c 49 12 f0       	push   $0xf012490c
f0106224:	e8 43 ad ff ff       	call   f0100f6c <cprintf>
f0106229:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(ProcessQueues.env_ready_queues[i]), ptr_env);
f010622c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106230:	75 17                	jne    f0106249 <sched_kill_all+0x162>
f0106232:	83 ec 04             	sub    $0x4,%esp
f0106235:	68 bf 45 12 f0       	push   $0xf01245bf
f010623a:	68 37 02 00 00       	push   $0x237
f010623f:	68 83 45 12 f0       	push   $0xf0124583
f0106244:	e8 d1 a0 ff ff       	call   f010031a <_panic>
f0106249:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010624c:	8b 40 08             	mov    0x8(%eax),%eax
f010624f:	85 c0                	test   %eax,%eax
f0106251:	74 11                	je     f0106264 <sched_kill_all+0x17d>
f0106253:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106256:	8b 40 08             	mov    0x8(%eax),%eax
f0106259:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010625c:	8b 52 0c             	mov    0xc(%edx),%edx
f010625f:	89 50 0c             	mov    %edx,0xc(%eax)
f0106262:	eb 17                	jmp    f010627b <sched_kill_all+0x194>
f0106264:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106267:	8b 40 0c             	mov    0xc(%eax),%eax
f010626a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010626d:	83 c2 09             	add    $0x9,%edx
f0106270:	c1 e2 04             	shl    $0x4,%edx
f0106273:	81 c2 64 24 55 f0    	add    $0xf0552464,%edx
f0106279:	89 02                	mov    %eax,(%edx)
f010627b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010627e:	8b 40 0c             	mov    0xc(%eax),%eax
f0106281:	85 c0                	test   %eax,%eax
f0106283:	74 11                	je     f0106296 <sched_kill_all+0x1af>
f0106285:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106288:	8b 40 0c             	mov    0xc(%eax),%eax
f010628b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010628e:	8b 52 08             	mov    0x8(%edx),%edx
f0106291:	89 50 08             	mov    %edx,0x8(%eax)
f0106294:	eb 17                	jmp    f01062ad <sched_kill_all+0x1c6>
f0106296:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106299:	8b 40 08             	mov    0x8(%eax),%eax
f010629c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010629f:	83 c2 09             	add    $0x9,%edx
f01062a2:	c1 e2 04             	shl    $0x4,%edx
f01062a5:	81 c2 60 24 55 f0    	add    $0xf0552460,%edx
f01062ab:	89 02                	mov    %eax,(%edx)
f01062ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062b0:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f01062b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062ba:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f01062c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062c4:	83 c0 09             	add    $0x9,%eax
f01062c7:	c1 e0 04             	shl    $0x4,%eax
f01062ca:	05 6c 24 55 f0       	add    $0xf055246c,%eax
f01062cf:	8b 00                	mov    (%eax),%eax
f01062d1:	8d 50 ff             	lea    -0x1(%eax),%edx
f01062d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01062d7:	83 c0 09             	add    $0x9,%eax
f01062da:	c1 e0 04             	shl    $0x4,%eax
f01062dd:	05 6c 24 55 f0       	add    $0xf055246c,%eax
f01062e2:	89 10                	mov    %edx,(%eax)
				env_free(ptr_env);
f01062e4:	83 ec 0c             	sub    $0xc,%esp
f01062e7:	ff 75 f4             	pushl  -0xc(%ebp)
f01062ea:	e8 39 44 00 00       	call   f010a728 <env_free>
f01062ef:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01062f2:	83 ec 0c             	sub    $0xc,%esp
f01062f5:	68 46 47 12 f0       	push   $0xf0124746
f01062fa:	e8 6d ac ff ff       	call   f0100f6c <cprintf>
f01062ff:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f0106302:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106305:	83 c0 09             	add    $0x9,%eax
f0106308:	c1 e0 04             	shl    $0x4,%eax
f010630b:	05 68 24 55 f0       	add    $0xf0552468,%eax
f0106310:	8b 00                	mov    (%eax),%eax
f0106312:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106315:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106319:	74 08                	je     f0106323 <sched_kill_all+0x23c>
f010631b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010631e:	8b 40 08             	mov    0x8(%eax),%eax
f0106321:	eb 05                	jmp    f0106328 <sched_kill_all+0x241>
f0106323:	b8 00 00 00 00       	mov    $0x0,%eax
f0106328:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010632b:	83 c2 09             	add    $0x9,%edx
f010632e:	c1 e2 04             	shl    $0x4,%edx
f0106331:	81 c2 68 24 55 f0    	add    $0xf0552468,%edx
f0106337:	89 02                	mov    %eax,(%edx)
f0106339:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010633c:	83 c0 09             	add    $0x9,%eax
f010633f:	c1 e0 04             	shl    $0x4,%eax
f0106342:	05 68 24 55 f0       	add    $0xf0552468,%eax
f0106347:	8b 00                	mov    (%eax),%eax
f0106349:	85 c0                	test   %eax,%eax
f010634b:	0f 85 bd fe ff ff    	jne    f010620e <sched_kill_all+0x127>
f0106351:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106355:	0f 85 b3 fe ff ff    	jne    f010620e <sched_kill_all+0x127>
f010635b:	eb 13                	jmp    f0106370 <sched_kill_all+0x289>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f010635d:	83 ec 08             	sub    $0x8,%esp
f0106360:	ff 75 f0             	pushl  -0x10(%ebp)
f0106363:	68 40 48 12 f0       	push   $0xf0124840
f0106368:	e8 ff ab ff ff       	call   f0100f6c <cprintf>
f010636d:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0106370:	83 ec 0c             	sub    $0xc,%esp
f0106373:	68 e4 47 12 f0       	push   $0xf01247e4
f0106378:	e8 ef ab ff ff       	call   f0100f6c <cprintf>
f010637d:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0106380:	ff 45 f0             	incl   -0x10(%ebp)
f0106383:	a0 60 51 55 f0       	mov    0xf0555160,%al
f0106388:	0f b6 c0             	movzbl %al,%eax
f010638b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010638e:	0f 8f 37 fe ff ff    	jg     f01061cb <sched_kill_all+0xe4>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&ProcessQueues.env_exit_queue))
f0106394:	a1 e0 24 55 f0       	mov    0xf05524e0,%eax
f0106399:	85 c0                	test   %eax,%eax
f010639b:	0f 84 95 00 00 00    	je     f0106436 <sched_kill_all+0x34f>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f01063a1:	83 ec 0c             	sub    $0xc,%esp
f01063a4:	68 70 49 12 f0       	push   $0xf0124970
f01063a9:	e8 be ab ff ff       	call   f0100f6c <cprintf>
f01063ae:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f01063b1:	a1 e0 24 55 f0       	mov    0xf05524e0,%eax
f01063b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01063b9:	eb 52                	jmp    f010640d <sched_kill_all+0x326>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f01063bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01063be:	8d 50 20             	lea    0x20(%eax),%edx
f01063c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01063c4:	8b 40 10             	mov    0x10(%eax),%eax
f01063c7:	83 ec 04             	sub    $0x4,%esp
f01063ca:	52                   	push   %edx
f01063cb:	50                   	push   %eax
f01063cc:	68 0c 49 12 f0       	push   $0xf012490c
f01063d1:	e8 96 ab ff ff       	call   f0100f6c <cprintf>
f01063d6:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f01063d9:	83 ec 0c             	sub    $0xc,%esp
f01063dc:	ff 75 f4             	pushl  -0xc(%ebp)
f01063df:	e8 d1 f1 ff ff       	call   f01055b5 <sched_remove_exit>
f01063e4:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f01063e7:	83 ec 0c             	sub    $0xc,%esp
f01063ea:	ff 75 f4             	pushl  -0xc(%ebp)
f01063ed:	e8 36 43 00 00       	call   f010a728 <env_free>
f01063f2:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f01063f5:	83 ec 0c             	sub    $0xc,%esp
f01063f8:	68 46 47 12 f0       	push   $0xf0124746
f01063fd:	e8 6a ab ff ff       	call   f0100f6c <cprintf>
f0106402:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&ProcessQueues.env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f0106405:	a1 e8 24 55 f0       	mov    0xf05524e8,%eax
f010640a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010640d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106411:	74 08                	je     f010641b <sched_kill_all+0x334>
f0106413:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106416:	8b 40 08             	mov    0x8(%eax),%eax
f0106419:	eb 05                	jmp    f0106420 <sched_kill_all+0x339>
f010641b:	b8 00 00 00 00       	mov    $0x0,%eax
f0106420:	a3 e8 24 55 f0       	mov    %eax,0xf05524e8
f0106425:	a1 e8 24 55 f0       	mov    0xf05524e8,%eax
f010642a:	85 c0                	test   %eax,%eax
f010642c:	75 8d                	jne    f01063bb <sched_kill_all+0x2d4>
f010642e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106432:	75 87                	jne    f01063bb <sched_kill_all+0x2d4>
f0106434:	eb 10                	jmp    f0106446 <sched_kill_all+0x35f>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0106436:	83 ec 0c             	sub    $0xc,%esp
f0106439:	68 86 48 12 f0       	push   $0xf0124886
f010643e:	e8 29 ab ff ff       	call   f0100f6c <cprintf>
f0106443:	83 c4 10             	add    $0x10,%esp
	}

	struct Env* cur_env = get_cpu_proc();
f0106446:	e8 25 43 00 00       	call   f010a770 <get_cpu_proc>
f010644b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if (cur_env)
f010644e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106452:	74 6b                	je     f01064bf <sched_kill_all+0x3d8>
	{
		ptr_env = cur_env;
f0106454:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106457:	89 45 f4             	mov    %eax,-0xc(%ebp)
		assert(ptr_env->env_status == ENV_RUNNING);
f010645a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010645d:	8b 40 18             	mov    0x18(%eax),%eax
f0106460:	83 f8 02             	cmp    $0x2,%eax
f0106463:	74 19                	je     f010647e <sched_kill_all+0x397>
f0106465:	68 4c 47 12 f0       	push   $0xf012474c
f010646a:	68 6e 45 12 f0       	push   $0xf012456e
f010646f:	68 57 02 00 00       	push   $0x257
f0106474:	68 83 45 12 f0       	push   $0xf0124583
f0106479:	e8 9c 9e ff ff       	call   f010031a <_panic>
		cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f010647e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106481:	8d 50 20             	lea    0x20(%eax),%edx
f0106484:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106487:	8b 40 10             	mov    0x10(%eax),%eax
f010648a:	83 ec 04             	sub    $0x4,%esp
f010648d:	52                   	push   %edx
f010648e:	50                   	push   %eax
f010648f:	68 70 47 12 f0       	push   $0xf0124770
f0106494:	e8 d3 aa ff ff       	call   f0100f6c <cprintf>
f0106499:	83 c4 10             	add    $0x10,%esp
		env_free(ptr_env);
f010649c:	83 ec 0c             	sub    $0xc,%esp
f010649f:	ff 75 f4             	pushl  -0xc(%ebp)
f01064a2:	e8 81 42 00 00       	call   f010a728 <env_free>
f01064a7:	83 c4 10             	add    $0x10,%esp
		cprintf("DONE\n");
f01064aa:	83 ec 0c             	sub    $0xc,%esp
f01064ad:	68 46 47 12 f0       	push   $0xf0124746
f01064b2:	e8 b5 aa ff ff       	call   f0100f6c <cprintf>
f01064b7:	83 c4 10             	add    $0x10,%esp
		//return back to a killed env. Status already set to EXIT in the env_free()
		//It's the fos_scheduler task to release the lock on the Qs after context_switch to it from
		//this process
		//reinvoke the scheduler since there're no env to return back to it
		/*2024: replaced by sched() to apply context_switch*/
		sched();
f01064ba:	e8 3e 44 00 00       	call   f010a8fd <sched>
	}
	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f01064bf:	83 ec 0c             	sub    $0xc,%esp
f01064c2:	68 60 24 55 f0       	push   $0xf0552460
f01064c7:	e8 92 86 00 00       	call   f010eb5e <release_spinlock>
f01064cc:	83 c4 10             	add    $0x10,%esp
	//get into the command prompt since there're no env to return back to it
	//fos_scheduler(); //2024: commented
	get_into_prompt();
f01064cf:	e8 cf b8 ff ff       	call   f0101da3 <get_into_prompt>

f01064d4 <sched_exit_all_ready_envs>:
/*2018*/
//=================================================
// [14] EXIT ALL Ready Envs:
//=================================================
void sched_exit_all_ready_envs()
{
f01064d4:	55                   	push   %ebp
f01064d5:	89 e5                	mov    %esp,%ebp
f01064d7:	83 ec 18             	sub    $0x18,%esp
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f01064da:	83 ec 0c             	sub    $0xc,%esp
f01064dd:	68 60 24 55 f0       	push   $0xf0552460
f01064e2:	e8 f0 85 00 00       	call   f010ead7 <acquire_spinlock>
f01064e7:	83 c4 10             	add    $0x10,%esp
	struct Env* ptr_env=NULL;
f01064ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01064f1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01064f8:	e9 59 01 00 00       	jmp    f0106656 <sched_exit_all_ready_envs+0x182>
	{
		if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
f01064fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106500:	83 c0 09             	add    $0x9,%eax
f0106503:	c1 e0 04             	shl    $0x4,%eax
f0106506:	05 60 24 55 f0       	add    $0xf0552460,%eax
f010650b:	8b 00                	mov    (%eax),%eax
f010650d:	85 c0                	test   %eax,%eax
f010650f:	0f 84 3e 01 00 00    	je     f0106653 <sched_exit_all_ready_envs+0x17f>
		{
			ptr_env=NULL;
f0106515:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f010651c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010651f:	83 c0 09             	add    $0x9,%eax
f0106522:	c1 e0 04             	shl    $0x4,%eax
f0106525:	05 60 24 55 f0       	add    $0xf0552460,%eax
f010652a:	8b 00                	mov    (%eax),%eax
f010652c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010652f:	e9 d9 00 00 00       	jmp    f010660d <sched_exit_all_ready_envs+0x139>
			{
				LIST_REMOVE(&(ProcessQueues.env_ready_queues[i]), ptr_env);
f0106534:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106538:	75 17                	jne    f0106551 <sched_exit_all_ready_envs+0x7d>
f010653a:	83 ec 04             	sub    $0x4,%esp
f010653d:	68 bf 45 12 f0       	push   $0xf01245bf
f0106542:	68 79 02 00 00       	push   $0x279
f0106547:	68 83 45 12 f0       	push   $0xf0124583
f010654c:	e8 c9 9d ff ff       	call   f010031a <_panic>
f0106551:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106554:	8b 40 08             	mov    0x8(%eax),%eax
f0106557:	85 c0                	test   %eax,%eax
f0106559:	74 11                	je     f010656c <sched_exit_all_ready_envs+0x98>
f010655b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010655e:	8b 40 08             	mov    0x8(%eax),%eax
f0106561:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106564:	8b 52 0c             	mov    0xc(%edx),%edx
f0106567:	89 50 0c             	mov    %edx,0xc(%eax)
f010656a:	eb 17                	jmp    f0106583 <sched_exit_all_ready_envs+0xaf>
f010656c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010656f:	8b 40 0c             	mov    0xc(%eax),%eax
f0106572:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106575:	83 c2 09             	add    $0x9,%edx
f0106578:	c1 e2 04             	shl    $0x4,%edx
f010657b:	81 c2 64 24 55 f0    	add    $0xf0552464,%edx
f0106581:	89 02                	mov    %eax,(%edx)
f0106583:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106586:	8b 40 0c             	mov    0xc(%eax),%eax
f0106589:	85 c0                	test   %eax,%eax
f010658b:	74 11                	je     f010659e <sched_exit_all_ready_envs+0xca>
f010658d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106590:	8b 40 0c             	mov    0xc(%eax),%eax
f0106593:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106596:	8b 52 08             	mov    0x8(%edx),%edx
f0106599:	89 50 08             	mov    %edx,0x8(%eax)
f010659c:	eb 17                	jmp    f01065b5 <sched_exit_all_ready_envs+0xe1>
f010659e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065a1:	8b 40 08             	mov    0x8(%eax),%eax
f01065a4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01065a7:	83 c2 09             	add    $0x9,%edx
f01065aa:	c1 e2 04             	shl    $0x4,%edx
f01065ad:	81 c2 60 24 55 f0    	add    $0xf0552460,%edx
f01065b3:	89 02                	mov    %eax,(%edx)
f01065b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065b8:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f01065bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01065c2:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f01065c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065cc:	83 c0 09             	add    $0x9,%eax
f01065cf:	c1 e0 04             	shl    $0x4,%eax
f01065d2:	05 6c 24 55 f0       	add    $0xf055246c,%eax
f01065d7:	8b 00                	mov    (%eax),%eax
f01065d9:	8d 50 ff             	lea    -0x1(%eax),%edx
f01065dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065df:	83 c0 09             	add    $0x9,%eax
f01065e2:	c1 e0 04             	shl    $0x4,%eax
f01065e5:	05 6c 24 55 f0       	add    $0xf055246c,%eax
f01065ea:	89 10                	mov    %edx,(%eax)
				sched_insert_exit(ptr_env);
f01065ec:	83 ec 0c             	sub    $0xc,%esp
f01065ef:	ff 75 f4             	pushl  -0xc(%ebp)
f01065f2:	e8 37 ef ff ff       	call   f010552e <sched_insert_exit>
f01065f7:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(ProcessQueues.env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(ProcessQueues.env_ready_queues[i]))
f01065fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01065fd:	83 c0 09             	add    $0x9,%eax
f0106600:	c1 e0 04             	shl    $0x4,%eax
f0106603:	05 68 24 55 f0       	add    $0xf0552468,%eax
f0106608:	8b 00                	mov    (%eax),%eax
f010660a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010660d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106611:	74 08                	je     f010661b <sched_exit_all_ready_envs+0x147>
f0106613:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106616:	8b 40 08             	mov    0x8(%eax),%eax
f0106619:	eb 05                	jmp    f0106620 <sched_exit_all_ready_envs+0x14c>
f010661b:	b8 00 00 00 00       	mov    $0x0,%eax
f0106620:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106623:	83 c2 09             	add    $0x9,%edx
f0106626:	c1 e2 04             	shl    $0x4,%edx
f0106629:	81 c2 68 24 55 f0    	add    $0xf0552468,%edx
f010662f:	89 02                	mov    %eax,(%edx)
f0106631:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106634:	83 c0 09             	add    $0x9,%eax
f0106637:	c1 e0 04             	shl    $0x4,%eax
f010663a:	05 68 24 55 f0       	add    $0xf0552468,%eax
f010663f:	8b 00                	mov    (%eax),%eax
f0106641:	85 c0                	test   %eax,%eax
f0106643:	0f 85 eb fe ff ff    	jne    f0106534 <sched_exit_all_ready_envs+0x60>
f0106649:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010664d:	0f 85 e1 fe ff ff    	jne    f0106534 <sched_exit_all_ready_envs+0x60>
//=================================================
void sched_exit_all_ready_envs()
{
	acquire_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0106653:	ff 45 f0             	incl   -0x10(%ebp)
f0106656:	a0 60 51 55 f0       	mov    0xf0555160,%al
f010665b:	0f b6 c0             	movzbl %al,%eax
f010665e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0106661:	0f 8f 96 fe ff ff    	jg     f01064fd <sched_exit_all_ready_envs+0x29>
				LIST_REMOVE(&(ProcessQueues.env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
	release_spinlock(&(ProcessQueues.qlock)); 	//CS on Qs
f0106667:	83 ec 0c             	sub    $0xc,%esp
f010666a:	68 60 24 55 f0       	push   $0xf0552460
f010666f:	e8 ea 84 00 00       	call   f010eb5e <release_spinlock>
f0106674:	83 c4 10             	add    $0x10,%esp
}
f0106677:	90                   	nop
f0106678:	c9                   	leave  
f0106679:	c3                   	ret    

f010667a <timer_ticks>:

/*2023*/
/********* for BSD Priority Scheduler *************/
int64 timer_ticks()
{
f010667a:	55                   	push   %ebp
f010667b:	89 e5                	mov    %esp,%ebp
	return ticks;
f010667d:	a1 c8 50 55 f0       	mov    0xf05550c8,%eax
f0106682:	8b 15 cc 50 55 f0    	mov    0xf05550cc,%edx
}
f0106688:	5d                   	pop    %ebp
f0106689:	c3                   	ret    

f010668a <env_get_nice>:
int env_get_nice(struct Env* e)
{
f010668a:	55                   	push   %ebp
f010668b:	89 e5                	mov    %esp,%ebp
f010668d:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] BSD Scheduler - env_get_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106690:	83 ec 04             	sub    $0x4,%esp
f0106693:	68 9c 49 12 f0       	push   $0xf012499c
f0106698:	68 8c 02 00 00       	push   $0x28c
f010669d:	68 83 45 12 f0       	push   $0xf0124583
f01066a2:	e8 73 9c ff ff       	call   f010031a <_panic>

f01066a7 <env_set_nice>:
}

void env_set_nice(struct Env* e, int nice_value)
{
f01066a7:	55                   	push   %ebp
f01066a8:	89 e5                	mov    %esp,%ebp
f01066aa:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] BSD Scheduler - env_set_nice
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f01066ad:	83 ec 04             	sub    $0x4,%esp
f01066b0:	68 9c 49 12 f0       	push   $0xf012499c
f01066b5:	68 94 02 00 00       	push   $0x294
f01066ba:	68 83 45 12 f0       	push   $0xf0124583
f01066bf:	e8 56 9c ff ff       	call   f010031a <_panic>

f01066c4 <env_get_recent_cpu>:
}

int env_get_recent_cpu(struct Env* e)
{
f01066c4:	55                   	push   %ebp
f01066c5:	89 e5                	mov    %esp,%ebp
f01066c7:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] BSD Scheduler - env_get_recent_cpu
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f01066ca:	83 ec 04             	sub    $0x4,%esp
f01066cd:	68 9c 49 12 f0       	push   $0xf012499c
f01066d2:	68 9c 02 00 00       	push   $0x29c
f01066d7:	68 83 45 12 f0       	push   $0xf0124583
f01066dc:	e8 39 9c ff ff       	call   f010031a <_panic>

f01066e1 <get_load_average>:
}
int get_load_average()
{
f01066e1:	55                   	push   %ebp
f01066e2:	89 e5                	mov    %esp,%ebp
f01066e4:	83 ec 08             	sub    $0x8,%esp
	//return 1;
	//[PROJECT] BSD Scheduler - get_load_average
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f01066e7:	83 ec 04             	sub    $0x4,%esp
f01066ea:	68 9c 49 12 f0       	push   $0xf012499c
f01066ef:	68 a4 02 00 00       	push   $0x2a4
f01066f4:	68 83 45 12 f0       	push   $0xf0124583
f01066f9:	e8 1c 9c ff ff       	call   f010031a <_panic>

f01066fe <isSchedMethodRR>:
#include <kern/cmd/command_prompt.h>
#include <kern/cpu/cpu.h>
#include <kern/cpu/picirq.h>


uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f01066fe:	55                   	push   %ebp
f01066ff:	89 e5                	mov    %esp,%ebp
f0106701:	a1 14 4f 55 f0       	mov    0xf0554f14,%eax
f0106706:	85 c0                	test   %eax,%eax
f0106708:	75 07                	jne    f0106711 <isSchedMethodRR+0x13>
f010670a:	b8 01 00 00 00       	mov    $0x1,%eax
f010670f:	eb 05                	jmp    f0106716 <isSchedMethodRR+0x18>
f0106711:	b8 00 00 00 00       	mov    $0x0,%eax
f0106716:	5d                   	pop    %ebp
f0106717:	c3                   	ret    

f0106718 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0106718:	55                   	push   %ebp
f0106719:	89 e5                	mov    %esp,%ebp
f010671b:	a1 14 4f 55 f0       	mov    0xf0554f14,%eax
f0106720:	83 f8 01             	cmp    $0x1,%eax
f0106723:	75 07                	jne    f010672c <isSchedMethodMLFQ+0x14>
f0106725:	b8 01 00 00 00       	mov    $0x1,%eax
f010672a:	eb 05                	jmp    f0106731 <isSchedMethodMLFQ+0x19>
f010672c:	b8 00 00 00 00       	mov    $0x0,%eax
f0106731:	5d                   	pop    %ebp
f0106732:	c3                   	ret    

f0106733 <isSchedMethodBSD>:
uint32 isSchedMethodBSD(){if(scheduler_method == SCH_BSD) return 1; return 0;}
f0106733:	55                   	push   %ebp
f0106734:	89 e5                	mov    %esp,%ebp
f0106736:	a1 14 4f 55 f0       	mov    0xf0554f14,%eax
f010673b:	83 f8 02             	cmp    $0x2,%eax
f010673e:	75 07                	jne    f0106747 <isSchedMethodBSD+0x14>
f0106740:	b8 01 00 00 00       	mov    $0x1,%eax
f0106745:	eb 05                	jmp    f010674c <isSchedMethodBSD+0x19>
f0106747:	b8 00 00 00 00       	mov    $0x0,%eax
f010674c:	5d                   	pop    %ebp
f010674d:	c3                   	ret    

f010674e <sched_init>:

//===================================
// [1] Default Scheduler Initializer:
//===================================
void sched_init()
{
f010674e:	55                   	push   %ebp
f010674f:	89 e5                	mov    %esp,%ebp
f0106751:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f0106754:	c7 05 e8 4b 55 f0 00 	movl   $0x0,0xf0554be8
f010675b:	00 00 00 

	sched_init_RR(INIT_QUANTUM_IN_MS);
f010675e:	83 ec 0c             	sub    $0xc,%esp
f0106761:	6a 0a                	push   $0xa
f0106763:	e8 6d 02 00 00       	call   f01069d5 <sched_init_RR>
f0106768:	83 c4 10             	add    $0x10,%esp

	init_queue(&ProcessQueues.env_new_queue);
f010676b:	83 ec 0c             	sub    $0xc,%esp
f010676e:	68 d0 24 55 f0       	push   $0xf05524d0
f0106773:	e8 bf e7 ff ff       	call   f0104f37 <init_queue>
f0106778:	83 c4 10             	add    $0x10,%esp
	init_queue(&ProcessQueues.env_exit_queue);
f010677b:	83 ec 0c             	sub    $0xc,%esp
f010677e:	68 e0 24 55 f0       	push   $0xf05524e0
f0106783:	e8 af e7 ff ff       	call   f0104f37 <init_queue>
f0106788:	83 c4 10             	add    $0x10,%esp

	mycpu()->scheduler_status = SCH_STOPPED;
f010678b:	e8 6d 09 00 00       	call   f01070fd <mycpu>
f0106790:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f0106797:	00 00 00 

	/*2024: initialize lock to protect these Qs in MULTI-CORE case only*/
	init_spinlock(&ProcessQueues.qlock, "process queues lock");
f010679a:	83 ec 08             	sub    $0x8,%esp
f010679d:	68 b0 49 12 f0       	push   $0xf01249b0
f01067a2:	68 60 24 55 f0       	push   $0xf0552460
f01067a7:	e8 fa 82 00 00       	call   f010eaa6 <init_spinlock>
f01067ac:	83 c4 10             	add    $0x10,%esp
}
f01067af:	90                   	nop
f01067b0:	c9                   	leave  
f01067b1:	c3                   	ret    

f01067b2 <fos_scheduler>:
// [2] Main FOS Scheduler:
//=========================

void
fos_scheduler(void)
{
f01067b2:	55                   	push   %ebp
f01067b3:	89 e5                	mov    %esp,%ebp
f01067b5:	53                   	push   %ebx
f01067b6:	83 ec 24             	sub    $0x24,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f01067b9:	9c                   	pushf  
f01067ba:	58                   	pop    %eax
f01067bb:	89 45 d8             	mov    %eax,-0x28(%ebp)
        return eflags;
f01067be:	8b 45 d8             	mov    -0x28(%ebp),%eax
	//ensure that the scheduler is invoked while interrupt is disabled
	if (read_eflags() & FL_IF)
f01067c1:	25 00 02 00 00       	and    $0x200,%eax
f01067c6:	85 c0                	test   %eax,%eax
f01067c8:	74 14                	je     f01067de <fos_scheduler+0x2c>
		panic("fos_scheduler: called while the interrupt is enabled!");
f01067ca:	83 ec 04             	sub    $0x4,%esp
f01067cd:	68 c4 49 12 f0       	push   $0xf01249c4
f01067d2:	6a 37                	push   $0x37
f01067d4:	68 fa 49 12 f0       	push   $0xf01249fa
f01067d9:	e8 3c 9b ff ff       	call   f010031a <_panic>

	//cprintf("inside scheduler - timer cnt = %d\n", kclock_read_cnt0());
	struct Env *p;
	struct cpu *c = mycpu();
f01067de:	e8 1a 09 00 00       	call   f01070fd <mycpu>
f01067e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	c->proc = 0;
f01067e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01067e9:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f01067f0:	00 00 00 

	chk1();
f01067f3:	e8 57 92 01 00       	call   f011fa4f <chk1>
	c->scheduler_status = SCH_STARTED;
f01067f8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01067fb:	c7 80 b4 00 00 00 01 	movl   $0x1,0xb4(%eax)
f0106802:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f0106805:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

	//2024: should be outer loop as long as there's any BLOCKED processes.
	//Ref: xv6-x86 OS
	int is_any_blocked = 0;
f010680c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

//set interrupt flag
static __inline void
sti(void)
{
	__asm __volatile("sti");
f0106813:	fb                   	sti    
		// to avoid a deadlock if all processes are waiting.
		sti();

		// Check ready queue(s) looking for process to run.
		//cprintf("\n[FOS_SCHEDULER] acquire: lock status before acquire = %d\n", qlock.locked);
		acquire_spinlock(&(ProcessQueues.qlock));  //lock: to protect ready & blocked Qs in multi-CPU
f0106814:	83 ec 0c             	sub    $0xc,%esp
f0106817:	68 60 24 55 f0       	push   $0xf0552460
f010681c:	e8 b6 82 00 00       	call   f010ead7 <acquire_spinlock>
f0106821:	83 c4 10             	add    $0x10,%esp
		//cprintf("ACQUIRED\n");
		do
		{
			//Get next env according to the current scheduler
			next_env = sched_next[scheduler_method]() ;
f0106824:	a1 14 4f 55 f0       	mov    0xf0554f14,%eax
f0106829:	8b 04 85 4c 99 17 f0 	mov    -0xfe866b4(,%eax,4),%eax
f0106830:	ff d0                	call   *%eax
f0106832:	89 45 e8             	mov    %eax,-0x18(%ebp)

			//temporarily set the curenv by the next env JUST for checking the scheduler
			//Then: reset it again
			struct Env* old_curenv = get_cpu_proc();
f0106835:	e8 36 3f 00 00       	call   f010a770 <get_cpu_proc>
f010683a:	89 45 e0             	mov    %eax,-0x20(%ebp)
			set_cpu_proc(next_env) ;
f010683d:	83 ec 0c             	sub    $0xc,%esp
f0106840:	ff 75 e8             	pushl  -0x18(%ebp)
f0106843:	e8 51 3f 00 00       	call   f010a799 <set_cpu_proc>
f0106848:	83 c4 10             	add    $0x10,%esp
			chk2(next_env) ;
f010684b:	83 ec 0c             	sub    $0xc,%esp
f010684e:	ff 75 e8             	pushl  -0x18(%ebp)
f0106851:	e8 ff 91 01 00       	call   f011fa55 <chk2>
f0106856:	83 c4 10             	add    $0x10,%esp
			set_cpu_proc(old_curenv) ;
f0106859:	83 ec 0c             	sub    $0xc,%esp
f010685c:	ff 75 e0             	pushl  -0x20(%ebp)
f010685f:	e8 35 3f 00 00       	call   f010a799 <set_cpu_proc>
f0106864:	83 c4 10             	add    $0x10,%esp

			//sched_print_all();

			if(next_env != NULL)
f0106867:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010686b:	0f 84 d6 00 00 00    	je     f0106947 <fos_scheduler+0x195>
				/*2024: Replaced by context_switch()*/
				//env_run(next_env);

				// Switch to chosen process. It is the process's job to release qlock
				// and then reacquire it before jumping back to us.
				set_cpu_proc(next_env);
f0106871:	83 ec 0c             	sub    $0xc,%esp
f0106874:	ff 75 e8             	pushl  -0x18(%ebp)
f0106877:	e8 1d 3f 00 00       	call   f010a799 <set_cpu_proc>
f010687c:	83 c4 10             	add    $0x10,%esp
				switchuvm(next_env);
f010687f:	83 ec 0c             	sub    $0xc,%esp
f0106882:	ff 75 e8             	pushl  -0x18(%ebp)
f0106885:	e8 96 41 00 00       	call   f010aa20 <switchuvm>
f010688a:	83 c4 10             	add    $0x10,%esp

				//Change its status to RUNNING
				next_env->env_status = ENV_RUNNING;
f010688d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106890:	c7 40 18 02 00 00 00 	movl   $0x2,0x18(%eax)

				//Context switch to it
				context_switch(&(c->scheduler), next_env->context);
f0106897:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010689a:	8b 40 04             	mov    0x4(%eax),%eax
f010689d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01068a0:	83 c2 04             	add    $0x4,%edx
f01068a3:	83 ec 08             	sub    $0x8,%esp
f01068a6:	50                   	push   %eax
f01068a7:	52                   	push   %edx
f01068a8:	e8 92 e2 ff ff       	call   f0104b3f <context_switch>
f01068ad:	83 c4 10             	add    $0x10,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f01068b0:	9c                   	pushf  
f01068b1:	58                   	pop    %eax
f01068b2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        return eflags;
f01068b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax

				//ensure that the scheduler is invoked while interrupt is disabled
				if (read_eflags() & FL_IF)
f01068b8:	25 00 02 00 00       	and    $0x200,%eax
f01068bd:	85 c0                	test   %eax,%eax
f01068bf:	74 14                	je     f01068d5 <fos_scheduler+0x123>
					panic("fos_scheduler: invoked while the interrupt is enabled!");
f01068c1:	83 ec 04             	sub    $0x4,%esp
f01068c4:	68 0c 4a 12 f0       	push   $0xf0124a0c
f01068c9:	6a 74                	push   $0x74
f01068cb:	68 fa 49 12 f0       	push   $0xf01249fa
f01068d0:	e8 45 9a ff ff       	call   f010031a <_panic>

				//Stop the clock now till finding a next proc (if any).
				//This is to avoid clock interrupt inside the scheduler after sti() of the outer loop
				kclock_stop();
f01068d5:	e8 ae e3 ff ff       	call   f0104c88 <kclock_stop>
				//cprintf("\n[IEN = %d] clock is stopped! returned to scheduler after context_switch. curenv = %d\n", (read_eflags() & FL_IF) == 0? 0:1, curenv == NULL? 0 : curenv->env_id);

				// Process is done running for now. It should have changed its p->status before coming back.
				//If no process on CPU, switch to the kernel
				assert(get_cpu_proc() == c->proc);
f01068da:	e8 91 3e 00 00       	call   f010a770 <get_cpu_proc>
f01068df:	89 c2                	mov    %eax,%edx
f01068e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01068e4:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f01068ea:	39 c2                	cmp    %eax,%edx
f01068ec:	74 16                	je     f0106904 <fos_scheduler+0x152>
f01068ee:	68 43 4a 12 f0       	push   $0xf0124a43
f01068f3:	68 5d 4a 12 f0       	push   $0xf0124a5d
f01068f8:	6a 7d                	push   $0x7d
f01068fa:	68 fa 49 12 f0       	push   $0xf01249fa
f01068ff:	e8 16 9a ff ff       	call   f010031a <_panic>
				int status = c->proc->env_status ;
f0106904:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106907:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010690d:	8b 40 18             	mov    0x18(%eax),%eax
f0106910:	89 45 dc             	mov    %eax,-0x24(%ebp)
				assert(status != ENV_RUNNING);
f0106913:	83 7d dc 02          	cmpl   $0x2,-0x24(%ebp)
f0106917:	75 16                	jne    f010692f <fos_scheduler+0x17d>
f0106919:	68 72 4a 12 f0       	push   $0xf0124a72
f010691e:	68 5d 4a 12 f0       	push   $0xf0124a5d
f0106923:	6a 7f                	push   $0x7f
f0106925:	68 fa 49 12 f0       	push   $0xf01249fa
f010692a:	e8 eb 99 ff ff       	call   f010031a <_panic>
				if (status == ENV_READY)
f010692f:	83 7d dc 01          	cmpl   $0x1,-0x24(%ebp)
f0106933:	74 12                	je     f0106947 <fos_scheduler+0x195>
					//OK... will be placed to the correct ready Q in the next iteration
				}
				else
				{
					//					cprintf("scheduler: process %d is BLOCKED/EXITED\n", c->proc->env_id);
					switchkvm();
f0106935:	e8 cf 40 00 00       	call   f010aa09 <switchkvm>
					set_cpu_proc(NULL);
f010693a:	83 ec 0c             	sub    $0xc,%esp
f010693d:	6a 00                	push   $0x0
f010693f:	e8 55 3e 00 00       	call   f010a799 <set_cpu_proc>
f0106944:	83 c4 10             	add    $0x10,%esp
				}
			}
		} while(next_env);
f0106947:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010694b:	0f 85 d3 fe ff ff    	jne    f0106824 <fos_scheduler+0x72>

		//2024 - check if there's any blocked process?
		is_any_blocked = 0;
f0106951:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		for (int i = 0; i < NENV; ++i)
f0106958:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010695f:	eb 4d                	jmp    f01069ae <fos_scheduler+0x1fc>
		{
			if (envs[i].env_status == ENV_BLOCKED)
f0106961:	8b 0d 10 1a 55 f0    	mov    0xf0551a10,%ecx
f0106967:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010696a:	89 d0                	mov    %edx,%eax
f010696c:	c1 e0 06             	shl    $0x6,%eax
f010696f:	29 d0                	sub    %edx,%eax
f0106971:	c1 e0 02             	shl    $0x2,%eax
f0106974:	01 d0                	add    %edx,%eax
f0106976:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f010697d:	01 d8                	add    %ebx,%eax
f010697f:	c1 e0 03             	shl    $0x3,%eax
f0106982:	01 d0                	add    %edx,%eax
f0106984:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010698b:	29 c2                	sub    %eax,%edx
f010698d:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f0106994:	89 c2                	mov    %eax,%edx
f0106996:	89 d0                	mov    %edx,%eax
f0106998:	01 c8                	add    %ecx,%eax
f010699a:	8b 40 18             	mov    0x18(%eax),%eax
f010699d:	83 f8 03             	cmp    $0x3,%eax
f01069a0:	75 09                	jne    f01069ab <fos_scheduler+0x1f9>
			{
				is_any_blocked = 1;
f01069a2:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
				break;
f01069a9:	eb 0b                	jmp    f01069b6 <fos_scheduler+0x204>
			}
		} while(next_env);

		//2024 - check if there's any blocked process?
		is_any_blocked = 0;
		for (int i = 0; i < NENV; ++i)
f01069ab:	ff 45 f0             	incl   -0x10(%ebp)
f01069ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01069b1:	83 f8 07             	cmp    $0x7,%eax
f01069b4:	76 ab                	jbe    f0106961 <fos_scheduler+0x1af>
			{
				is_any_blocked = 1;
				break;
			}
		}
		release_spinlock(&ProcessQueues.qlock);  //release lock: to protect ready & blocked Qs in multi-CPU
f01069b6:	83 ec 0c             	sub    $0xc,%esp
f01069b9:	68 60 24 55 f0       	push   $0xf0552460
f01069be:	e8 9b 81 00 00       	call   f010eb5e <release_spinlock>
f01069c3:	83 c4 10             	add    $0x10,%esp
		//cprintf("\n[FOS_SCHEDULER] release: lock status after = %d\n", qlock.locked);

	} while (is_any_blocked > 0);
f01069c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01069ca:	0f 8f 43 fe ff ff    	jg     f0106813 <fos_scheduler+0x61>

	/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
	{
		//cprintf("[sched] no envs - nothing more to do!\n");
		get_into_prompt();
f01069d0:	e8 ce b3 ff ff       	call   f0101da3 <get_into_prompt>

f01069d5 <sched_init_RR>:

//=============================
// [3] Initialize RR Scheduler:
//=============================
void sched_init_RR(uint8 quantum)
{
f01069d5:	55                   	push   %ebp
f01069d6:	89 e5                	mov    %esp,%ebp
f01069d8:	83 ec 28             	sub    $0x28,%esp
f01069db:	8b 45 08             	mov    0x8(%ebp),%eax
f01069de:	88 45 e4             	mov    %al,-0x1c(%ebp)

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f01069e1:	c6 05 60 51 55 f0 01 	movb   $0x1,0xf0555160
	//cprintf("sizeof(struct Env_Queue) = %x\n", sizeof(struct Env_Queue));
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
	//cprintf("num_of_ready_queues * sizeof(uint8) = %x\n", num_of_ready_queues * sizeof(uint8));

#endif
	quantums[0] = quantum;
f01069e8:	8a 45 e4             	mov    -0x1c(%ebp),%al
f01069eb:	a2 e4 4d 55 f0       	mov    %al,0xf0554de4
	kclock_set_quantum(quantums[0]);
f01069f0:	a0 e4 4d 55 f0       	mov    0xf0554de4,%al
f01069f5:	0f b6 c0             	movzbl %al,%eax
f01069f8:	83 ec 0c             	sub    $0xc,%esp
f01069fb:	50                   	push   %eax
f01069fc:	e8 50 e3 ff ff       	call   f0104d51 <kclock_set_quantum>
f0106a01:	83 c4 10             	add    $0x10,%esp
	init_queue(&(ProcessQueues.env_ready_queues[0]));
f0106a04:	83 ec 0c             	sub    $0xc,%esp
f0106a07:	68 f0 24 55 f0       	push   $0xf05524f0
f0106a0c:	e8 26 e5 ff ff       	call   f0104f37 <init_queue>
f0106a11:	83 c4 10             	add    $0x10,%esp
	//=========================================
	//DON'T CHANGE THESE LINES=================
	uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
f0106a14:	e8 97 e4 ff ff       	call   f0104eb0 <kclock_read_cnt0_latch>
f0106a19:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	cprintf("*	RR scheduler with initial clock = %d\n", cnt0);
f0106a1d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0106a21:	83 ec 08             	sub    $0x8,%esp
f0106a24:	50                   	push   %eax
f0106a25:	68 88 4a 12 f0       	push   $0xf0124a88
f0106a2a:	e8 3d a5 ff ff       	call   f0100f6c <cprintf>
f0106a2f:	83 c4 10             	add    $0x10,%esp
	mycpu()->scheduler_status = SCH_STOPPED;
f0106a32:	e8 c6 06 00 00       	call   f01070fd <mycpu>
f0106a37:	c7 80 b4 00 00 00 00 	movl   $0x0,0xb4(%eax)
f0106a3e:	00 00 00 
	scheduler_method = SCH_RR;
f0106a41:	c7 05 14 4f 55 f0 00 	movl   $0x0,0xf0554f14
f0106a48:	00 00 00 
	//=========================================
	//=========================================
}
f0106a4b:	90                   	nop
f0106a4c:	c9                   	leave  
f0106a4d:	c3                   	ret    

f0106a4e <sched_init_MLFQ>:

//===============================
// [4] Initialize MLFQ Scheduler:
//===============================
void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f0106a4e:	55                   	push   %ebp
f0106a4f:	89 e5                	mov    %esp,%ebp
f0106a51:	83 ec 18             	sub    $0x18,%esp
f0106a54:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a57:	88 45 f4             	mov    %al,-0xc(%ebp)
	//=========================================
	//DON'T CHANGE THESE LINES=================
	sched_delete_ready_queues();
f0106a5a:	e8 88 e7 ff ff       	call   f01051e7 <sched_delete_ready_queues>
	//=========================================
	//=========================================
	//[PROJECT] MLFQ Scheduler - sched_init_MLFQ
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106a5f:	83 ec 04             	sub    $0x4,%esp
f0106a62:	68 b0 4a 12 f0       	push   $0xf0124ab0
f0106a67:	68 ce 00 00 00       	push   $0xce
f0106a6c:	68 fa 49 12 f0       	push   $0xf01249fa
f0106a71:	e8 a4 98 ff ff       	call   f010031a <_panic>

f0106a76 <sched_init_BSD>:

//===============================
// [5] Initialize BSD Scheduler:
//===============================
void sched_init_BSD(uint8 numOfLevels, uint8 quantum)
{
f0106a76:	55                   	push   %ebp
f0106a77:	89 e5                	mov    %esp,%ebp
f0106a79:	83 ec 18             	sub    $0x18,%esp
f0106a7c:	8b 55 08             	mov    0x8(%ebp),%edx
f0106a7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a82:	88 55 f4             	mov    %dl,-0xc(%ebp)
f0106a85:	88 45 f0             	mov    %al,-0x10(%ebp)
	//[PROJECT] BSD Scheduler - sched_init_BSD
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106a88:	83 ec 04             	sub    $0x4,%esp
f0106a8b:	68 b0 4a 12 f0       	push   $0xf0124ab0
f0106a90:	68 e4 00 00 00       	push   $0xe4
f0106a95:	68 fa 49 12 f0       	push   $0xf01249fa
f0106a9a:	e8 7b 98 ff ff       	call   f010031a <_panic>

f0106a9f <fos_scheduler_RR>:

//=========================
// [6] RR Scheduler:
//=========================
struct Env* fos_scheduler_RR()
{
f0106a9f:	55                   	push   %ebp
f0106aa0:	89 e5                	mov    %esp,%ebp
f0106aa2:	83 ec 18             	sub    $0x18,%esp
	// Pick next environment from the ready queue,
	// and switch to such environment if found.
	// It's OK to choose the previously running env if no other env
	// is runnable.
	/*To protect process Qs (or info of current process) in multi-CPU************************/
	if(!holding_spinlock(&ProcessQueues.qlock))
f0106aa5:	83 ec 0c             	sub    $0xc,%esp
f0106aa8:	68 60 24 55 f0       	push   $0xf0552460
f0106aad:	e8 3e 82 00 00       	call   f010ecf0 <holding_spinlock>
f0106ab2:	83 c4 10             	add    $0x10,%esp
f0106ab5:	85 c0                	test   %eax,%eax
f0106ab7:	75 17                	jne    f0106ad0 <fos_scheduler_RR+0x31>
		panic("fos_scheduler_RR: q.lock is not held by this CPU while it's expected to be.");
f0106ab9:	83 ec 04             	sub    $0x4,%esp
f0106abc:	68 c4 4a 12 f0       	push   $0xf0124ac4
f0106ac1:	68 fe 00 00 00       	push   $0xfe
f0106ac6:	68 fa 49 12 f0       	push   $0xf01249fa
f0106acb:	e8 4a 98 ff ff       	call   f010031a <_panic>
	/****************************************************************************************/
	struct Env *next_env = NULL;
f0106ad0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct Env *cur_env = get_cpu_proc();
f0106ad7:	e8 94 3c 00 00       	call   f010a770 <get_cpu_proc>
f0106adc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//If the curenv is still exist, then insert it again in the ready queue
	if (cur_env != NULL)
f0106adf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106ae3:	74 13                	je     f0106af8 <fos_scheduler_RR+0x59>
	{
		enqueue(&(ProcessQueues.env_ready_queues[0]), cur_env);
f0106ae5:	83 ec 08             	sub    $0x8,%esp
f0106ae8:	ff 75 f0             	pushl  -0x10(%ebp)
f0106aeb:	68 f0 24 55 f0       	push   $0xf05524f0
f0106af0:	e8 83 e4 ff ff       	call   f0104f78 <enqueue>
f0106af5:	83 c4 10             	add    $0x10,%esp
	}

	//Pick the next environment from the ready queue
	next_env = dequeue(&(ProcessQueues.env_ready_queues[0]));
f0106af8:	83 ec 0c             	sub    $0xc,%esp
f0106afb:	68 f0 24 55 f0       	push   $0xf05524f0
f0106b00:	e8 04 e5 ff ff       	call   f0105009 <dequeue>
f0106b05:	83 c4 10             	add    $0x10,%esp
f0106b08:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//Reset the quantum
	//2017: Reset the value of CNT0 for the next clock interval
	kclock_set_quantum(quantums[0]);
f0106b0b:	a0 e4 4d 55 f0       	mov    0xf0554de4,%al
f0106b10:	0f b6 c0             	movzbl %al,%eax
f0106b13:	83 ec 0c             	sub    $0xc,%esp
f0106b16:	50                   	push   %eax
f0106b17:	e8 35 e2 ff ff       	call   f0104d51 <kclock_set_quantum>
f0106b1c:	83 c4 10             	add    $0x10,%esp
	//uint16 cnt0 = kclock_read_cnt0_latch() ;
	//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	return next_env;
f0106b1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106b22:	c9                   	leave  
f0106b23:	c3                   	ret    

f0106b24 <fos_scheduler_MLFQ>:

//=========================
// [6] MLFQ Scheduler:
//=========================
struct Env* fos_scheduler_MLFQ()
{
f0106b24:	55                   	push   %ebp
f0106b25:	89 e5                	mov    %esp,%ebp
f0106b27:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	/*To protect process Qs (or info of current process) in multi-CPU************************/
	if(!holding_spinlock(&ProcessQueues.qlock))
f0106b2a:	83 ec 0c             	sub    $0xc,%esp
f0106b2d:	68 60 24 55 f0       	push   $0xf0552460
f0106b32:	e8 b9 81 00 00       	call   f010ecf0 <holding_spinlock>
f0106b37:	83 c4 10             	add    $0x10,%esp
f0106b3a:	85 c0                	test   %eax,%eax
f0106b3c:	75 17                	jne    f0106b55 <fos_scheduler_MLFQ+0x31>
		panic("fos_scheduler_MLFQ: q.lock is not held by this CPU while it's expected to be.");
f0106b3e:	83 ec 04             	sub    $0x4,%esp
f0106b41:	68 10 4b 12 f0       	push   $0xf0124b10
f0106b46:	68 1d 01 00 00       	push   $0x11d
f0106b4b:	68 fa 49 12 f0       	push   $0xf01249fa
f0106b50:	e8 c5 97 ff ff       	call   f010031a <_panic>
	/****************************************************************************************/

	//[PROJECT] MLFQ Scheduler - fos_scheduler_MLFQ
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106b55:	83 ec 04             	sub    $0x4,%esp
f0106b58:	68 b0 4a 12 f0       	push   $0xf0124ab0
f0106b5d:	68 23 01 00 00       	push   $0x123
f0106b62:	68 fa 49 12 f0       	push   $0xf01249fa
f0106b67:	e8 ae 97 ff ff       	call   f010031a <_panic>

f0106b6c <fos_scheduler_BSD>:

//=========================
// [7] BSD Scheduler:
//=========================
struct Env* fos_scheduler_BSD()
{
f0106b6c:	55                   	push   %ebp
f0106b6d:	89 e5                	mov    %esp,%ebp
f0106b6f:	83 ec 08             	sub    $0x8,%esp
	/*To protect process Qs (or info of current process) in multi-CPU************************/
	if(!holding_spinlock(&ProcessQueues.qlock))
f0106b72:	83 ec 0c             	sub    $0xc,%esp
f0106b75:	68 60 24 55 f0       	push   $0xf0552460
f0106b7a:	e8 71 81 00 00       	call   f010ecf0 <holding_spinlock>
f0106b7f:	83 c4 10             	add    $0x10,%esp
f0106b82:	85 c0                	test   %eax,%eax
f0106b84:	75 17                	jne    f0106b9d <fos_scheduler_BSD+0x31>
		panic("fos_scheduler_BSD: q.lock is not held by this CPU while it's expected to be.");
f0106b86:	83 ec 04             	sub    $0x4,%esp
f0106b89:	68 60 4b 12 f0       	push   $0xf0124b60
f0106b8e:	68 2e 01 00 00       	push   $0x12e
f0106b93:	68 fa 49 12 f0       	push   $0xf01249fa
f0106b98:	e8 7d 97 ff ff       	call   f010031a <_panic>
	/****************************************************************************************/

	//[PROJECT] BSD Scheduler - fos_scheduler_BSD
	//Your code is here
	//Comment the following line
	panic("Not implemented yet");
f0106b9d:	83 ec 04             	sub    $0x4,%esp
f0106ba0:	68 b0 4a 12 f0       	push   $0xf0124ab0
f0106ba5:	68 34 01 00 00       	push   $0x134
f0106baa:	68 fa 49 12 f0       	push   $0xf01249fa
f0106baf:	e8 66 97 ff ff       	call   f010031a <_panic>

f0106bb4 <clock_interrupt_handler>:
//========================================
// [8] Clock Interrupt Handler
//	  (Automatically Called Every Quantum)
//========================================
void clock_interrupt_handler(struct Trapframe* tf)
{
f0106bb4:	55                   	push   %ebp
f0106bb5:	89 e5                	mov    %esp,%ebp
f0106bb7:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodBSD())
f0106bba:	e8 74 fb ff ff       	call   f0106733 <isSchedMethodBSD>
f0106bbf:	85 c0                	test   %eax,%eax
f0106bc1:	74 17                	je     f0106bda <clock_interrupt_handler+0x26>
	{
		//[PROJECT] BSD Scheduler - clock_interrupt_handler
		//Your code is here
		//Comment the following line
		panic("Not implemented yet");
f0106bc3:	83 ec 04             	sub    $0x4,%esp
f0106bc6:	68 b0 4a 12 f0       	push   $0xf0124ab0
f0106bcb:	68 43 01 00 00       	push   $0x143
f0106bd0:	68 fa 49 12 f0       	push   $0xf01249fa
f0106bd5:	e8 40 97 ff ff       	call   f010031a <_panic>
	}



	/********DON'T CHANGE THESE LINES***********/
	ticks++ ;
f0106bda:	a1 c8 50 55 f0       	mov    0xf05550c8,%eax
f0106bdf:	8b 15 cc 50 55 f0    	mov    0xf05550cc,%edx
f0106be5:	83 c0 01             	add    $0x1,%eax
f0106be8:	83 d2 00             	adc    $0x0,%edx
f0106beb:	a3 c8 50 55 f0       	mov    %eax,0xf05550c8
f0106bf0:	89 15 cc 50 55 f0    	mov    %edx,0xf05550cc
	struct Env* p = get_cpu_proc();
f0106bf6:	e8 75 3b 00 00       	call   f010a770 <get_cpu_proc>
f0106bfb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (p == NULL)
f0106bfe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c02:	74 30                	je     f0106c34 <clock_interrupt_handler+0x80>
	{
	}
	else
	{
		p->nClocks++ ;
f0106c04:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c07:	8b 80 68 da 01 00    	mov    0x1da68(%eax),%eax
f0106c0d:	8d 50 01             	lea    0x1(%eax),%edx
f0106c10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106c13:	89 90 68 da 01 00    	mov    %edx,0x1da68(%eax)
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0106c19:	83 ec 0c             	sub    $0xc,%esp
f0106c1c:	6a 01                	push   $0x1
f0106c1e:	e8 a3 7a 00 00       	call   f010e6c6 <isPageReplacmentAlgorithmLRU>
f0106c23:	83 c4 10             	add    $0x10,%esp
f0106c26:	85 c0                	test   %eax,%eax
f0106c28:	74 05                	je     f0106c2f <clock_interrupt_handler+0x7b>
		{
			update_WS_time_stamps();
f0106c2a:	e8 08 00 00 00       	call   f0106c37 <update_WS_time_stamps>
		}
		//cprintf("\n***************\nClock Handler\n***************\n") ;
		//fos_scheduler();
		yield();
f0106c2f:	e8 6a 3c 00 00       	call   f010a89e <yield>
	}
	/*****************************************/
}
f0106c34:	90                   	nop
f0106c35:	c9                   	leave  
f0106c36:	c3                   	ret    

f0106c37 <update_WS_time_stamps>:
//===================================================================
// [9] Update LRU Timestamp of WS Elements
//	  (Automatically Called Every Quantum in case of LRU Time Approx)
//===================================================================
void update_WS_time_stamps()
{
f0106c37:	55                   	push   %ebp
f0106c38:	89 e5                	mov    %esp,%ebp
f0106c3a:	53                   	push   %ebx
f0106c3b:	83 ec 34             	sub    $0x34,%esp
	struct Env *curr_env_ptr = get_cpu_proc();
f0106c3e:	e8 2d 3b 00 00       	call   f010a770 <get_cpu_proc>
f0106c43:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f0106c46:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106c4a:	0f 84 9d 01 00 00    	je     f0106ded <update_WS_time_stamps+0x1b6>
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
				for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0106c50:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106c57:	e9 99 00 00 00       	jmp    f0106cf5 <update_WS_time_stamps+0xbe>
				{
					wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
f0106c5c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106c5f:	89 d0                	mov    %edx,%eax
f0106c61:	01 c0                	add    %eax,%eax
f0106c63:	01 d0                	add    %edx,%eax
f0106c65:	c1 e0 03             	shl    $0x3,%eax
f0106c68:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f0106c6e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c71:	01 d0                	add    %edx,%eax
f0106c73:	83 c0 08             	add    $0x8,%eax
f0106c76:	89 45 e8             	mov    %eax,-0x18(%ebp)
					if( wse->empty == 1)
f0106c79:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106c7c:	8a 40 04             	mov    0x4(%eax),%al
f0106c7f:	3c 01                	cmp    $0x1,%al
f0106c81:	74 6e                	je     f0106cf1 <update_WS_time_stamps+0xba>
						continue;
#endif
					//update the time if the page was referenced
					uint32 page_va = wse->virtual_address ;
f0106c83:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106c86:	8b 00                	mov    (%eax),%eax
f0106c88:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0106c8b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c8e:	8b 40 64             	mov    0x64(%eax),%eax
f0106c91:	83 ec 08             	sub    $0x8,%esp
f0106c94:	ff 75 e4             	pushl  -0x1c(%ebp)
f0106c97:	50                   	push   %eax
f0106c98:	e8 4f 1f 00 00       	call   f0108bec <pt_get_page_permissions>
f0106c9d:	83 c4 10             	add    $0x10,%esp
f0106ca0:	89 45 e0             	mov    %eax,-0x20(%ebp)
					uint32 oldTimeStamp = wse->time_stamp;
f0106ca3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106ca6:	8b 40 08             	mov    0x8(%eax),%eax
f0106ca9:	89 45 dc             	mov    %eax,-0x24(%ebp)

					if (perm & PERM_USED)
f0106cac:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106caf:	83 e0 20             	and    $0x20,%eax
f0106cb2:	85 c0                	test   %eax,%eax
f0106cb4:	74 2b                	je     f0106ce1 <update_WS_time_stamps+0xaa>
					{
						wse->time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0106cb6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106cb9:	c1 e8 02             	shr    $0x2,%eax
f0106cbc:	0d 00 00 00 80       	or     $0x80000000,%eax
f0106cc1:	89 c2                	mov    %eax,%edx
f0106cc3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106cc6:	89 50 08             	mov    %edx,0x8(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0106cc9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106ccc:	8b 40 64             	mov    0x64(%eax),%eax
f0106ccf:	6a 20                	push   $0x20
f0106cd1:	6a 00                	push   $0x0
f0106cd3:	ff 75 e4             	pushl  -0x1c(%ebp)
f0106cd6:	50                   	push   %eax
f0106cd7:	e8 4c 1e 00 00       	call   f0108b28 <pt_set_page_permissions>
f0106cdc:	83 c4 10             	add    $0x10,%esp
f0106cdf:	eb 11                	jmp    f0106cf2 <update_WS_time_stamps+0xbb>
					}
					else
					{
						wse->time_stamp = (oldTimeStamp>>2);
f0106ce1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106ce4:	c1 e8 02             	shr    $0x2,%eax
f0106ce7:	89 c2                	mov    %eax,%edx
f0106ce9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106cec:	89 50 08             	mov    %edx,0x8(%eax)
f0106cef:	eb 01                	jmp    f0106cf2 <update_WS_time_stamps+0xbb>
#else
				for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
				{
					wse = &(curr_env_ptr->ptr_pageWorkingSet[i]);
					if( wse->empty == 1)
						continue;
f0106cf1:	90                   	nop
			int i ;
#if USE_KHEAP
			LIST_FOREACH(wse, &(curr_env_ptr->page_WS_list))
			{
#else
				for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f0106cf2:	ff 45 f4             	incl   -0xc(%ebp)
f0106cf5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106cf8:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f0106cfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106d01:	39 c2                	cmp    %eax,%edx
f0106d03:	0f 87 53 ff ff ff    	ja     f0106c5c <update_WS_time_stamps+0x25>
				}
			}

			{
				int t ;
				for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0106d09:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0106d10:	e9 ce 00 00 00       	jmp    f0106de3 <update_WS_time_stamps+0x1ac>
				{
					if( curr_env_ptr->__ptr_tws[t].empty != 1)
f0106d15:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0106d18:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d1b:	89 d0                	mov    %edx,%eax
f0106d1d:	01 c0                	add    %eax,%eax
f0106d1f:	01 d0                	add    %edx,%eax
f0106d21:	c1 e0 03             	shl    $0x3,%eax
f0106d24:	01 c8                	add    %ecx,%eax
f0106d26:	05 60 d5 01 00       	add    $0x1d560,%eax
f0106d2b:	8a 00                	mov    (%eax),%al
f0106d2d:	3c 01                	cmp    $0x1,%al
f0106d2f:	0f 84 ab 00 00 00    	je     f0106de0 <update_WS_time_stamps+0x1a9>
					{
						//update the time if the page was referenced
						uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f0106d35:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0106d38:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d3b:	89 d0                	mov    %edx,%eax
f0106d3d:	01 c0                	add    %eax,%eax
f0106d3f:	01 d0                	add    %edx,%eax
f0106d41:	c1 e0 03             	shl    $0x3,%eax
f0106d44:	01 c8                	add    %ecx,%eax
f0106d46:	05 5c d5 01 00       	add    $0x1d55c,%eax
f0106d4b:	8b 00                	mov    (%eax),%eax
f0106d4d:	89 45 d8             	mov    %eax,-0x28(%ebp)
						uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0106d50:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0106d53:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d56:	89 d0                	mov    %edx,%eax
f0106d58:	01 c0                	add    %eax,%eax
f0106d5a:	01 d0                	add    %edx,%eax
f0106d5c:	c1 e0 03             	shl    $0x3,%eax
f0106d5f:	01 c8                	add    %ecx,%eax
f0106d61:	05 64 d5 01 00       	add    $0x1d564,%eax
f0106d66:	8b 00                	mov    (%eax),%eax
f0106d68:	89 45 d4             	mov    %eax,-0x2c(%ebp)

						if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0106d6b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d6e:	8b 40 64             	mov    0x64(%eax),%eax
f0106d71:	83 ec 08             	sub    $0x8,%esp
f0106d74:	ff 75 d8             	pushl  -0x28(%ebp)
f0106d77:	50                   	push   %eax
f0106d78:	e8 4b 1f 00 00       	call   f0108cc8 <pd_is_table_used>
f0106d7d:	83 c4 10             	add    $0x10,%esp
f0106d80:	85 c0                	test   %eax,%eax
f0106d82:	74 3c                	je     f0106dc0 <update_WS_time_stamps+0x189>
						{
							curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0106d84:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0106d87:	c1 e8 02             	shr    $0x2,%eax
f0106d8a:	0d 00 00 00 80       	or     $0x80000000,%eax
f0106d8f:	89 c1                	mov    %eax,%ecx
f0106d91:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0106d94:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106d97:	89 d0                	mov    %edx,%eax
f0106d99:	01 c0                	add    %eax,%eax
f0106d9b:	01 d0                	add    %edx,%eax
f0106d9d:	c1 e0 03             	shl    $0x3,%eax
f0106da0:	01 d8                	add    %ebx,%eax
f0106da2:	05 64 d5 01 00       	add    $0x1d564,%eax
f0106da7:	89 08                	mov    %ecx,(%eax)
							pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0106da9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106dac:	8b 40 64             	mov    0x64(%eax),%eax
f0106daf:	83 ec 08             	sub    $0x8,%esp
f0106db2:	ff 75 d8             	pushl  -0x28(%ebp)
f0106db5:	50                   	push   %eax
f0106db6:	e8 31 1f 00 00       	call   f0108cec <pd_set_table_unused>
f0106dbb:	83 c4 10             	add    $0x10,%esp
f0106dbe:	eb 20                	jmp    f0106de0 <update_WS_time_stamps+0x1a9>
						}
						else
						{
							curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0106dc0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0106dc3:	c1 e8 02             	shr    $0x2,%eax
f0106dc6:	89 c1                	mov    %eax,%ecx
f0106dc8:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0106dcb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106dce:	89 d0                	mov    %edx,%eax
f0106dd0:	01 c0                	add    %eax,%eax
f0106dd2:	01 d0                	add    %edx,%eax
f0106dd4:	c1 e0 03             	shl    $0x3,%eax
f0106dd7:	01 d8                	add    %ebx,%eax
f0106dd9:	05 64 d5 01 00       	add    $0x1d564,%eax
f0106dde:	89 08                	mov    %ecx,(%eax)
				}
			}

			{
				int t ;
				for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0106de0:	ff 45 f0             	incl   -0x10(%ebp)
f0106de3:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0106de7:	0f 8e 28 ff ff ff    	jle    f0106d15 <update_WS_time_stamps+0xde>
						}
					}
				}
			}
		}
	}
f0106ded:	90                   	nop
f0106dee:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106df1:	c9                   	leave  
f0106df2:	c3                   	ret    

f0106df3 <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0106df3:	55                   	push   %ebp
f0106df4:	89 e5                	mov    %esp,%ebp
f0106df6:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0106df9:	c7 05 0c 1a 55 f0 01 	movl   $0x1,0xf0551a0c
f0106e00:	00 00 00 
f0106e03:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0106e0a:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0106e0e:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0106e11:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106e14:	ee                   	out    %al,(%dx)
f0106e15:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0106e1c:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0106e20:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0106e23:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106e26:	ee                   	out    %al,(%dx)
f0106e27:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0106e2e:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0106e32:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0106e35:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0106e38:	ee                   	out    %al,(%dx)
f0106e39:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0106e40:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0106e44:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0106e47:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0106e4a:	ee                   	out    %al,(%dx)
f0106e4b:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0106e52:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0106e56:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0106e59:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0106e5c:	ee                   	out    %al,(%dx)
f0106e5d:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0106e64:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0106e68:	8a 45 b7             	mov    -0x49(%ebp),%al
f0106e6b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0106e6e:	ee                   	out    %al,(%dx)
f0106e6f:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0106e76:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0106e7a:	8a 45 b8             	mov    -0x48(%ebp),%al
f0106e7d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0106e80:	ee                   	out    %al,(%dx)
f0106e81:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0106e88:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0106e8c:	8a 45 b9             	mov    -0x47(%ebp),%al
f0106e8f:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0106e92:	ee                   	out    %al,(%dx)
f0106e93:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0106e9a:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0106e9e:	8a 45 ba             	mov    -0x46(%ebp),%al
f0106ea1:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0106ea4:	ee                   	out    %al,(%dx)
f0106ea5:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0106eac:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0106eb0:	8a 45 bb             	mov    -0x45(%ebp),%al
f0106eb3:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0106eb6:	ee                   	out    %al,(%dx)
f0106eb7:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0106ebe:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0106ec2:	8a 45 bc             	mov    -0x44(%ebp),%al
f0106ec5:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0106ec8:	ee                   	out    %al,(%dx)
f0106ec9:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0106ed0:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0106ed4:	8a 45 bd             	mov    -0x43(%ebp),%al
f0106ed7:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0106eda:	ee                   	out    %al,(%dx)
f0106edb:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0106ee2:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0106ee6:	8a 45 be             	mov    -0x42(%ebp),%al
f0106ee9:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0106eec:	ee                   	out    %al,(%dx)
f0106eed:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0106ef4:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0106ef8:	8a 45 bf             	mov    -0x41(%ebp),%al
f0106efb:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0106efe:	ee                   	out    %al,(%dx)
	outb(PIC1_CMD, 0x0a);             /* read IRR by default */

	outb(PIC2_CMD, 0x68);               /* OCW3 */
	outb(PIC2_CMD, 0x0a);               /* OCW3 */

	if (irq_init_mask_8259A != 0xFFFF)
f0106eff:	66 a1 58 99 17 f0    	mov    0xf0179958,%ax
f0106f05:	66 83 f8 ff          	cmp    $0xffff,%ax
f0106f09:	74 15                	je     f0106f20 <pic_init+0x12d>
		irq_setmask_8259A(irq_init_mask_8259A);
f0106f0b:	66 a1 58 99 17 f0    	mov    0xf0179958,%ax
f0106f11:	0f b7 c0             	movzwl %ax,%eax
f0106f14:	83 ec 0c             	sub    $0xc,%esp
f0106f17:	50                   	push   %eax
f0106f18:	e8 06 00 00 00       	call   f0106f23 <irq_setmask_8259A>
f0106f1d:	83 c4 10             	add    $0x10,%esp
}
f0106f20:	90                   	nop
f0106f21:	c9                   	leave  
f0106f22:	c3                   	ret    

f0106f23 <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0106f23:	55                   	push   %ebp
f0106f24:	89 e5                	mov    %esp,%ebp
f0106f26:	83 ec 14             	sub    $0x14,%esp
f0106f29:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f2c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	 * We then use the new functions irq_set_mask() and irq_clear_mask()
	 * to manipulate a specific IRQ mask
	 */
	//irq_init_mask_8259A = mask;

	if (!didinit)
f0106f30:	a1 0c 1a 55 f0       	mov    0xf0551a0c,%eax
f0106f35:	85 c0                	test   %eax,%eax
f0106f37:	74 34                	je     f0106f6d <irq_setmask_8259A+0x4a>
		return;

	outb(PIC1_DATA, (char)mask);
f0106f39:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f3c:	0f b6 c0             	movzbl %al,%eax
f0106f3f:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0106f46:	88 45 f6             	mov    %al,-0xa(%ebp)
f0106f49:	8a 45 f6             	mov    -0xa(%ebp),%al
f0106f4c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0106f4f:	ee                   	out    %al,(%dx)
	outb(PIC2_DATA, (char)(mask >> 8));
f0106f50:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106f53:	66 c1 e8 08          	shr    $0x8,%ax
f0106f57:	0f b6 c0             	movzbl %al,%eax
f0106f5a:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0106f61:	88 45 f7             	mov    %al,-0x9(%ebp)
f0106f64:	8a 45 f7             	mov    -0x9(%ebp),%al
f0106f67:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0106f6a:	ee                   	out    %al,(%dx)
f0106f6b:	eb 01                	jmp    f0106f6e <irq_setmask_8259A+0x4b>
	 * to manipulate a specific IRQ mask
	 */
	//irq_init_mask_8259A = mask;

	if (!didinit)
		return;
f0106f6d:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (int i = 0; i < 16; i++)
	//if (~mask & (1<<i))
	//cprintf(" %d", i);
	//cprintf("\n");
}
f0106f6e:	c9                   	leave  
f0106f6f:	c3                   	ret    

f0106f70 <irq_set_mask>:

/*Ref: OSDev Wiki*/
void irq_set_mask(uint8 IRQline)
{
f0106f70:	55                   	push   %ebp
f0106f71:	89 e5                	mov    %esp,%ebp
f0106f73:	53                   	push   %ebx
f0106f74:	83 ec 14             	sub    $0x14,%esp
f0106f77:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f7a:	88 45 e8             	mov    %al,-0x18(%ebp)
	if (!didinit)
f0106f7d:	a1 0c 1a 55 f0       	mov    0xf0551a0c,%eax
f0106f82:	85 c0                	test   %eax,%eax
f0106f84:	74 58                	je     f0106fde <irq_set_mask+0x6e>
		return;

	uint16 port;
	uint8 value;

	if(IRQline < 8) {
f0106f86:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
f0106f8a:	77 08                	ja     f0106f94 <irq_set_mask+0x24>
		port = PIC1_DATA;
f0106f8c:	66 c7 45 fa 21 00    	movw   $0x21,-0x6(%ebp)
f0106f92:	eb 0a                	jmp    f0106f9e <irq_set_mask+0x2e>
	} else {
		port = PIC2_DATA;
f0106f94:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
		IRQline -= 8;
f0106f9a:	80 6d e8 08          	subb   $0x8,-0x18(%ebp)
	}
	value = inb(port) | (1 << IRQline);
f0106f9e:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
f0106fa2:	89 45 f4             	mov    %eax,-0xc(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0106fa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106fa8:	89 c2                	mov    %eax,%edx
f0106faa:	ec                   	in     (%dx),%al
f0106fab:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0106fae:	8a 45 ee             	mov    -0x12(%ebp),%al
f0106fb1:	88 c2                	mov    %al,%dl
f0106fb3:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
f0106fb7:	bb 01 00 00 00       	mov    $0x1,%ebx
f0106fbc:	88 c1                	mov    %al,%cl
f0106fbe:	d3 e3                	shl    %cl,%ebx
f0106fc0:	89 d8                	mov    %ebx,%eax
f0106fc2:	09 d0                	or     %edx,%eax
f0106fc4:	88 45 f9             	mov    %al,-0x7(%ebp)
	outb(port, value);
f0106fc7:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
f0106fcb:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
f0106fcf:	89 55 f0             	mov    %edx,-0x10(%ebp)
f0106fd2:	88 45 ef             	mov    %al,-0x11(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0106fd5:	8a 45 ef             	mov    -0x11(%ebp),%al
f0106fd8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106fdb:	ee                   	out    %al,(%dx)
f0106fdc:	eb 01                	jmp    f0106fdf <irq_set_mask+0x6f>

/*Ref: OSDev Wiki*/
void irq_set_mask(uint8 IRQline)
{
	if (!didinit)
		return;
f0106fde:	90                   	nop
		port = PIC2_DATA;
		IRQline -= 8;
	}
	value = inb(port) | (1 << IRQline);
	outb(port, value);
}
f0106fdf:	83 c4 14             	add    $0x14,%esp
f0106fe2:	5b                   	pop    %ebx
f0106fe3:	5d                   	pop    %ebp
f0106fe4:	c3                   	ret    

f0106fe5 <irq_clear_mask>:

/*Ref: OSDev Wiki*/
void irq_clear_mask(uint8 IRQline)
{
f0106fe5:	55                   	push   %ebp
f0106fe6:	89 e5                	mov    %esp,%ebp
f0106fe8:	53                   	push   %ebx
f0106fe9:	83 ec 14             	sub    $0x14,%esp
f0106fec:	8b 45 08             	mov    0x8(%ebp),%eax
f0106fef:	88 45 e8             	mov    %al,-0x18(%ebp)
	if (!didinit)
f0106ff2:	a1 0c 1a 55 f0       	mov    0xf0551a0c,%eax
f0106ff7:	85 c0                	test   %eax,%eax
f0106ff9:	74 5a                	je     f0107055 <irq_clear_mask+0x70>
		return;

	uint16 port;
	uint8 value;

	if(IRQline < 8) {
f0106ffb:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
f0106fff:	77 08                	ja     f0107009 <irq_clear_mask+0x24>
		port = PIC1_DATA;
f0107001:	66 c7 45 fa 21 00    	movw   $0x21,-0x6(%ebp)
f0107007:	eb 0a                	jmp    f0107013 <irq_clear_mask+0x2e>
	} else {
		port = PIC2_DATA;
f0107009:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
		IRQline -= 8;
f010700f:	80 6d e8 08          	subb   $0x8,-0x18(%ebp)
	}
	value = inb(port) & ~(1 << IRQline);
f0107013:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
f0107017:	89 45 f4             	mov    %eax,-0xc(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010701a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010701d:	89 c2                	mov    %eax,%edx
f010701f:	ec                   	in     (%dx),%al
f0107020:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f0107023:	8a 45 ee             	mov    -0x12(%ebp),%al
f0107026:	88 c2                	mov    %al,%dl
f0107028:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
f010702c:	bb 01 00 00 00       	mov    $0x1,%ebx
f0107031:	88 c1                	mov    %al,%cl
f0107033:	d3 e3                	shl    %cl,%ebx
f0107035:	89 d8                	mov    %ebx,%eax
f0107037:	f7 d0                	not    %eax
f0107039:	21 d0                	and    %edx,%eax
f010703b:	88 45 f9             	mov    %al,-0x7(%ebp)
	outb(port, value);
f010703e:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
f0107042:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
f0107046:	89 55 f0             	mov    %edx,-0x10(%ebp)
f0107049:	88 45 ef             	mov    %al,-0x11(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010704c:	8a 45 ef             	mov    -0x11(%ebp),%al
f010704f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107052:	ee                   	out    %al,(%dx)
f0107053:	eb 01                	jmp    f0107056 <irq_clear_mask+0x71>

/*Ref: OSDev Wiki*/
void irq_clear_mask(uint8 IRQline)
{
	if (!didinit)
		return;
f0107055:	90                   	nop
		port = PIC2_DATA;
		IRQline -= 8;
	}
	value = inb(port) & ~(1 << IRQline);
	outb(port, value);
}
f0107056:	83 c4 14             	add    $0x14,%esp
f0107059:	5b                   	pop    %ebx
f010705a:	5d                   	pop    %ebp
f010705b:	c3                   	ret    

f010705c <irq_get_mask>:


int irq_get_mask(uint8 IRQline)
{
f010705c:	55                   	push   %ebp
f010705d:	89 e5                	mov    %esp,%ebp
f010705f:	53                   	push   %ebx
f0107060:	83 ec 14             	sub    $0x14,%esp
f0107063:	8b 45 08             	mov    0x8(%ebp),%eax
f0107066:	88 45 e8             	mov    %al,-0x18(%ebp)
	if (!didinit)
f0107069:	a1 0c 1a 55 f0       	mov    0xf0551a0c,%eax
f010706e:	85 c0                	test   %eax,%eax
f0107070:	75 07                	jne    f0107079 <irq_get_mask+0x1d>
		return -1;
f0107072:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0107077:	eb 45                	jmp    f01070be <irq_get_mask+0x62>

	uint16 port;
	uint8 value;

	if(IRQline < 8) {
f0107079:	80 7d e8 07          	cmpb   $0x7,-0x18(%ebp)
f010707d:	77 08                	ja     f0107087 <irq_get_mask+0x2b>
		port = PIC1_DATA;
f010707f:	66 c7 45 fa 21 00    	movw   $0x21,-0x6(%ebp)
f0107085:	eb 0a                	jmp    f0107091 <irq_get_mask+0x35>
	} else {
		port = PIC2_DATA;
f0107087:	66 c7 45 fa a1 00    	movw   $0xa1,-0x6(%ebp)
		IRQline -= 8;
f010708d:	80 6d e8 08          	subb   $0x8,-0x18(%ebp)
	}
	value = inb(port) & (1 << IRQline);
f0107091:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
f0107095:	89 45 f4             	mov    %eax,-0xc(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0107098:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010709b:	89 c2                	mov    %eax,%edx
f010709d:	ec                   	in     (%dx),%al
f010709e:	88 45 f3             	mov    %al,-0xd(%ebp)
	return data;
f01070a1:	8a 45 f3             	mov    -0xd(%ebp),%al
f01070a4:	88 c2                	mov    %al,%dl
f01070a6:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
f01070aa:	bb 01 00 00 00       	mov    $0x1,%ebx
f01070af:	88 c1                	mov    %al,%cl
f01070b1:	d3 e3                	shl    %cl,%ebx
f01070b3:	89 d8                	mov    %ebx,%eax
f01070b5:	21 d0                	and    %edx,%eax
f01070b7:	88 45 f9             	mov    %al,-0x7(%ebp)
	return value;
f01070ba:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
}
f01070be:	83 c4 14             	add    $0x14,%esp
f01070c1:	5b                   	pop    %ebx
f01070c2:	5d                   	pop    %ebp
f01070c3:	c3                   	ret    

f01070c4 <pic_sendEOI>:
 * If the IRQ came from the Master PIC, it is sufficient to issue this command only to the
 * Master PIC; however if the IRQ came from the Slave PIC, it is necessary to issue the command
 * to both PIC chips.
 */
void pic_sendEOI(uint8 irq)
{
f01070c4:	55                   	push   %ebp
f01070c5:	89 e5                	mov    %esp,%ebp
f01070c7:	83 ec 14             	sub    $0x14,%esp
f01070ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01070cd:	88 45 ec             	mov    %al,-0x14(%ebp)
	if(irq >= 8)
f01070d0:	80 7d ec 07          	cmpb   $0x7,-0x14(%ebp)
f01070d4:	76 12                	jbe    f01070e8 <pic_sendEOI+0x24>
f01070d6:	c7 45 f8 a0 00 00 00 	movl   $0xa0,-0x8(%ebp)
f01070dd:	c6 45 f7 20          	movb   $0x20,-0x9(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01070e1:	8a 45 f7             	mov    -0x9(%ebp),%al
f01070e4:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01070e7:	ee                   	out    %al,(%dx)
f01070e8:	c7 45 fc 20 00 00 00 	movl   $0x20,-0x4(%ebp)
f01070ef:	c6 45 f6 20          	movb   $0x20,-0xa(%ebp)
f01070f3:	8a 45 f6             	mov    -0xa(%ebp),%al
f01070f6:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01070f9:	ee                   	out    %al,(%dx)
		outb(PIC2_CMD,PIC_EOI);

	outb(PIC1_CMD,PIC_EOI);
}
f01070fa:	90                   	nop
f01070fb:	c9                   	leave  
f01070fc:	c3                   	ret    

f01070fd <mycpu>:
extern void idt_init(void);

// Must be called with interrupts disabled to avoid the caller being
// rescheduled between reading lapicid and running through the loop.
struct cpu* mycpu()
{
f01070fd:	55                   	push   %ebp
f01070fe:	89 e5                	mov    %esp,%ebp
	return &CPUS[0]; //main CPU
f0107100:	b8 00 4c 55 f0       	mov    $0xf0554c00,%eax
//  for (i = 0; i < ncpu; ++i) {
//    if (cpus[i].apicid == apicid)
//      return &cpus[i];
//  }
//  panic("unknown apicid\n");
}
f0107105:	5d                   	pop    %ebp
f0107106:	c3                   	ret    

f0107107 <cpu_init>:

// Common CPU setup code.
void cpu_init(int cpuIndx)
{
f0107107:	55                   	push   %ebp
f0107108:	89 e5                	mov    %esp,%ebp
f010710a:	83 ec 28             	sub    $0x28,%esp
  struct cpu* c = mycpu();
f010710d:	e8 eb ff ff ff       	call   f01070fd <mycpu>
f0107112:	89 45 f4             	mov    %eax,-0xc(%ebp)
  c->proc = NULL;
f0107115:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107118:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
f010711f:	00 00 00 
  c->ncli = 0;
f0107122:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107125:	c7 80 a8 00 00 00 00 	movl   $0x0,0xa8(%eax)
f010712c:	00 00 00 

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f010712f:	9c                   	pushf  
f0107130:	58                   	pop    %eax
f0107131:	89 45 f0             	mov    %eax,-0x10(%ebp)
        return eflags;
f0107134:	8b 45 f0             	mov    -0x10(%ebp),%eax
  c->intena = read_eflags() & FL_IF ? 1 : 0;
f0107137:	25 00 02 00 00       	and    $0x200,%eax
f010713c:	85 c0                	test   %eax,%eax
f010713e:	0f 95 c0             	setne  %al
f0107141:	0f b6 d0             	movzbl %al,%edx
f0107144:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107147:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
  //c->apicid = ?? ;

  //Initialize the CPU Context to NULL.
  //to be set later to the correct position on the stack during the
  //first switch from scheduler to the first process
  c->scheduler = NULL ;
f010714d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107150:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
  c->scheduler_status = SCH_UNINITIALIZED;
f0107157:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010715a:	c7 80 b4 00 00 00 ff 	movl   $0xffffffff,0xb4(%eax)
f0107161:	ff ff ff 

  //Initialize its sched stack
  c->stack = (char*)(KERN_STACK_TOP - (cpuIndx+1)*KERNEL_STACK_SIZE);
f0107164:	8b 45 08             	mov    0x8(%ebp),%eax
f0107167:	40                   	inc    %eax
f0107168:	c1 e0 0f             	shl    $0xf,%eax
f010716b:	ba 00 00 c0 ef       	mov    $0xefc00000,%edx
f0107170:	29 c2                	sub    %eax,%edx
f0107172:	89 d0                	mov    %edx,%eax
f0107174:	89 c2                	mov    %eax,%edx
f0107176:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107179:	89 50 08             	mov    %edx,0x8(%eax)

  //initialize GDT & set it to this CPU
  seg_init();
f010717c:	e8 18 01 00 00       	call   f0107299 <seg_init>

  //initialize IDT
  idt_init();       // load idt register
f0107181:	e8 49 50 00 00       	call   f010c1cf <idt_init>

  //Initialize the TaskState to ZERO.
  //to be initialized later in init.c
  memset(&(c->ts), 0, sizeof(c->ts)) ;
f0107186:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107189:	83 c0 0c             	add    $0xc,%eax
f010718c:	83 ec 04             	sub    $0x4,%esp
f010718f:	6a 68                	push   $0x68
f0107191:	6a 00                	push   $0x0
f0107193:	50                   	push   %eax
f0107194:	e8 df 98 01 00       	call   f0120a78 <memset>
f0107199:	83 c4 10             	add    $0x10,%esp

  //Indicate it's started
  xchg(&(c->started), 1); // tell startothers() we're up
f010719c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010719f:	05 a4 00 00 00       	add    $0xa4,%eax
f01071a4:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01071a7:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
xchg(volatile uint32 *addr, uint32 newval)
{
  uint32 result;

  // The + in "+m" denotes a read-modify-write operand.
  __asm __volatile("lock; xchgl %0, %1" :
f01071ae:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01071b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01071b4:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01071b7:	f0 87 02             	lock xchg %eax,(%edx)
f01071ba:	89 45 e4             	mov    %eax,-0x1c(%ebp)

  //scheduler();     // start running processes
}
f01071bd:	90                   	nop
f01071be:	c9                   	leave  
f01071bf:	c3                   	ret    

f01071c0 <pushcli>:
// Pushcli/popcli are like cli/sti except that they are matched:
// it takes two popcli to undo two pushcli.  Also, if interrupts
// are off, then pushcli, popcli leaves them off.

void pushcli(void)
{
f01071c0:	55                   	push   %ebp
f01071c1:	89 e5                	mov    %esp,%ebp
f01071c3:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f01071c6:	9c                   	pushf  
f01071c7:	58                   	pop    %eax
f01071c8:	89 45 f8             	mov    %eax,-0x8(%ebp)
        return eflags;
f01071cb:	8b 45 f8             	mov    -0x8(%ebp),%eax
  int eflags = read_eflags();
f01071ce:	89 45 fc             	mov    %eax,-0x4(%ebp)
 */
//clear interrupt flag
static __inline void
cli(void)
{
	__asm __volatile("cli");
f01071d1:	fa                   	cli    
  cli();
  struct cpu* c = mycpu();
f01071d2:	e8 26 ff ff ff       	call   f01070fd <mycpu>
f01071d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(c->ncli == 0)
f01071da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01071dd:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f01071e3:	85 c0                	test   %eax,%eax
f01071e5:	75 13                	jne    f01071fa <pushcli+0x3a>
    c->intena = eflags & FL_IF;
f01071e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01071ea:	25 00 02 00 00       	and    $0x200,%eax
f01071ef:	89 c2                	mov    %eax,%edx
f01071f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01071f4:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
  c->ncli += 1;
f01071fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01071fd:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0107203:	8d 50 01             	lea    0x1(%eax),%edx
f0107206:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107209:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
}
f010720f:	90                   	nop
f0107210:	c9                   	leave  
f0107211:	c3                   	ret    

f0107212 <popcli>:

void popcli(void)
{
f0107212:	55                   	push   %ebp
f0107213:	89 e5                	mov    %esp,%ebp
f0107215:	83 ec 18             	sub    $0x18,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f0107218:	9c                   	pushf  
f0107219:	58                   	pop    %eax
f010721a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        return eflags;
f010721d:	8b 45 f0             	mov    -0x10(%ebp),%eax
  if(read_eflags()&FL_IF)
f0107220:	25 00 02 00 00       	and    $0x200,%eax
f0107225:	85 c0                	test   %eax,%eax
f0107227:	74 14                	je     f010723d <popcli+0x2b>
    panic("popcli - interruptible");
f0107229:	83 ec 04             	sub    $0x4,%esp
f010722c:	68 ad 4b 12 f0       	push   $0xf0124bad
f0107231:	6a 5e                	push   $0x5e
f0107233:	68 c4 4b 12 f0       	push   $0xf0124bc4
f0107238:	e8 dd 90 ff ff       	call   f010031a <_panic>
  struct cpu* c = mycpu();
f010723d:	e8 bb fe ff ff       	call   f01070fd <mycpu>
f0107242:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(--c->ncli < 0)
f0107245:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107248:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f010724e:	8d 50 ff             	lea    -0x1(%eax),%edx
f0107251:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107254:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
f010725a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010725d:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0107263:	85 c0                	test   %eax,%eax
f0107265:	79 14                	jns    f010727b <popcli+0x69>
    panic("popcli");
f0107267:	83 ec 04             	sub    $0x4,%esp
f010726a:	68 d3 4b 12 f0       	push   $0xf0124bd3
f010726f:	6a 61                	push   $0x61
f0107271:	68 c4 4b 12 f0       	push   $0xf0124bc4
f0107276:	e8 9f 90 ff ff       	call   f010031a <_panic>
  if(c->ncli == 0 && c->intena)
f010727b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010727e:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f0107284:	85 c0                	test   %eax,%eax
f0107286:	75 0e                	jne    f0107296 <popcli+0x84>
f0107288:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010728b:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
f0107291:	85 c0                	test   %eax,%eax
f0107293:	74 01                	je     f0107296 <popcli+0x84>

//set interrupt flag
static __inline void
sti(void)
{
	__asm __volatile("sti");
f0107295:	fb                   	sti    
    sti();
}
f0107296:	90                   	nop
f0107297:	c9                   	leave  
f0107298:	c3                   	ret    

f0107299 <seg_init>:

// Set up CPU's kernel segment descriptors.
// Run once on entry on each CPU.
void
seg_init(void)
{
f0107299:	55                   	push   %ebp
f010729a:	89 e5                	mov    %esp,%ebp
f010729c:	83 ec 18             	sub    $0x18,%esp
	// The kernel and user segments are identical(except for the DPL).
	// To load the SS register, the CPL must equal the DPL.  Thus,
	// we must duplicate the segments for the user and the kernel.
	//

	pushcli();	//disable interrupt
f010729f:	e8 1c ff ff ff       	call   f01071c0 <pushcli>

	c = mycpu();
f01072a4:	e8 54 fe ff ff       	call   f01070fd <mycpu>
f01072a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// 0x0 - unused (always faults -- for trapping NULL far pointers)
	c->gdt[0] = SEG_NULL;
f01072ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072af:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
f01072b6:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%eax)

	// 0x8 - kernel code segment
	c->gdt[GD_KT >> 3] = SEG(STA_X | STA_R, 0x0, 0xffffffff, 0);
f01072bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072c0:	66 c7 40 7c ff ff    	movw   $0xffff,0x7c(%eax)
f01072c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072c9:	66 c7 40 7e 00 00    	movw   $0x0,0x7e(%eax)
f01072cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072d2:	c6 80 80 00 00 00 00 	movb   $0x0,0x80(%eax)
f01072d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072dc:	8a 90 81 00 00 00    	mov    0x81(%eax),%dl
f01072e2:	83 e2 f0             	and    $0xfffffff0,%edx
f01072e5:	83 ca 0a             	or     $0xa,%edx
f01072e8:	88 90 81 00 00 00    	mov    %dl,0x81(%eax)
f01072ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072f1:	8a 90 81 00 00 00    	mov    0x81(%eax),%dl
f01072f7:	83 ca 10             	or     $0x10,%edx
f01072fa:	88 90 81 00 00 00    	mov    %dl,0x81(%eax)
f0107300:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107303:	8a 90 81 00 00 00    	mov    0x81(%eax),%dl
f0107309:	83 e2 9f             	and    $0xffffff9f,%edx
f010730c:	88 90 81 00 00 00    	mov    %dl,0x81(%eax)
f0107312:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107315:	8a 90 81 00 00 00    	mov    0x81(%eax),%dl
f010731b:	83 ca 80             	or     $0xffffff80,%edx
f010731e:	88 90 81 00 00 00    	mov    %dl,0x81(%eax)
f0107324:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107327:	8a 90 82 00 00 00    	mov    0x82(%eax),%dl
f010732d:	83 ca 0f             	or     $0xf,%edx
f0107330:	88 90 82 00 00 00    	mov    %dl,0x82(%eax)
f0107336:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107339:	8a 90 82 00 00 00    	mov    0x82(%eax),%dl
f010733f:	83 e2 ef             	and    $0xffffffef,%edx
f0107342:	88 90 82 00 00 00    	mov    %dl,0x82(%eax)
f0107348:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010734b:	8a 90 82 00 00 00    	mov    0x82(%eax),%dl
f0107351:	83 e2 df             	and    $0xffffffdf,%edx
f0107354:	88 90 82 00 00 00    	mov    %dl,0x82(%eax)
f010735a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010735d:	8a 90 82 00 00 00    	mov    0x82(%eax),%dl
f0107363:	83 ca 40             	or     $0x40,%edx
f0107366:	88 90 82 00 00 00    	mov    %dl,0x82(%eax)
f010736c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010736f:	8a 90 82 00 00 00    	mov    0x82(%eax),%dl
f0107375:	83 ca 80             	or     $0xffffff80,%edx
f0107378:	88 90 82 00 00 00    	mov    %dl,0x82(%eax)
f010737e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107381:	c6 80 83 00 00 00 00 	movb   $0x0,0x83(%eax)

	// 0x10 - kernel data segment
	c->gdt[GD_KD >> 3] = SEG(STA_W, 0x0, 0xffffffff, 0);
f0107388:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010738b:	66 c7 80 84 00 00 00 	movw   $0xffff,0x84(%eax)
f0107392:	ff ff 
f0107394:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107397:	66 c7 80 86 00 00 00 	movw   $0x0,0x86(%eax)
f010739e:	00 00 
f01073a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01073a3:	c6 80 88 00 00 00 00 	movb   $0x0,0x88(%eax)
f01073aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01073ad:	8a 90 89 00 00 00    	mov    0x89(%eax),%dl
f01073b3:	83 e2 f0             	and    $0xfffffff0,%edx
f01073b6:	83 ca 02             	or     $0x2,%edx
f01073b9:	88 90 89 00 00 00    	mov    %dl,0x89(%eax)
f01073bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01073c2:	8a 90 89 00 00 00    	mov    0x89(%eax),%dl
f01073c8:	83 ca 10             	or     $0x10,%edx
f01073cb:	88 90 89 00 00 00    	mov    %dl,0x89(%eax)
f01073d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01073d4:	8a 90 89 00 00 00    	mov    0x89(%eax),%dl
f01073da:	83 e2 9f             	and    $0xffffff9f,%edx
f01073dd:	88 90 89 00 00 00    	mov    %dl,0x89(%eax)
f01073e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01073e6:	8a 90 89 00 00 00    	mov    0x89(%eax),%dl
f01073ec:	83 ca 80             	or     $0xffffff80,%edx
f01073ef:	88 90 89 00 00 00    	mov    %dl,0x89(%eax)
f01073f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01073f8:	8a 90 8a 00 00 00    	mov    0x8a(%eax),%dl
f01073fe:	83 ca 0f             	or     $0xf,%edx
f0107401:	88 90 8a 00 00 00    	mov    %dl,0x8a(%eax)
f0107407:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010740a:	8a 90 8a 00 00 00    	mov    0x8a(%eax),%dl
f0107410:	83 e2 ef             	and    $0xffffffef,%edx
f0107413:	88 90 8a 00 00 00    	mov    %dl,0x8a(%eax)
f0107419:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010741c:	8a 90 8a 00 00 00    	mov    0x8a(%eax),%dl
f0107422:	83 e2 df             	and    $0xffffffdf,%edx
f0107425:	88 90 8a 00 00 00    	mov    %dl,0x8a(%eax)
f010742b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010742e:	8a 90 8a 00 00 00    	mov    0x8a(%eax),%dl
f0107434:	83 ca 40             	or     $0x40,%edx
f0107437:	88 90 8a 00 00 00    	mov    %dl,0x8a(%eax)
f010743d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107440:	8a 90 8a 00 00 00    	mov    0x8a(%eax),%dl
f0107446:	83 ca 80             	or     $0xffffff80,%edx
f0107449:	88 90 8a 00 00 00    	mov    %dl,0x8a(%eax)
f010744f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107452:	c6 80 8b 00 00 00 00 	movb   $0x0,0x8b(%eax)

	// 0x18 - user code segment
	c->gdt[GD_UT >> 3] = SEG(STA_X | STA_R, 0x0, 0xffffffff, 3);
f0107459:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010745c:	66 c7 80 8c 00 00 00 	movw   $0xffff,0x8c(%eax)
f0107463:	ff ff 
f0107465:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107468:	66 c7 80 8e 00 00 00 	movw   $0x0,0x8e(%eax)
f010746f:	00 00 
f0107471:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107474:	c6 80 90 00 00 00 00 	movb   $0x0,0x90(%eax)
f010747b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010747e:	8a 90 91 00 00 00    	mov    0x91(%eax),%dl
f0107484:	83 e2 f0             	and    $0xfffffff0,%edx
f0107487:	83 ca 0a             	or     $0xa,%edx
f010748a:	88 90 91 00 00 00    	mov    %dl,0x91(%eax)
f0107490:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107493:	8a 90 91 00 00 00    	mov    0x91(%eax),%dl
f0107499:	83 ca 10             	or     $0x10,%edx
f010749c:	88 90 91 00 00 00    	mov    %dl,0x91(%eax)
f01074a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074a5:	8a 90 91 00 00 00    	mov    0x91(%eax),%dl
f01074ab:	83 ca 60             	or     $0x60,%edx
f01074ae:	88 90 91 00 00 00    	mov    %dl,0x91(%eax)
f01074b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074b7:	8a 90 91 00 00 00    	mov    0x91(%eax),%dl
f01074bd:	83 ca 80             	or     $0xffffff80,%edx
f01074c0:	88 90 91 00 00 00    	mov    %dl,0x91(%eax)
f01074c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074c9:	8a 90 92 00 00 00    	mov    0x92(%eax),%dl
f01074cf:	83 ca 0f             	or     $0xf,%edx
f01074d2:	88 90 92 00 00 00    	mov    %dl,0x92(%eax)
f01074d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074db:	8a 90 92 00 00 00    	mov    0x92(%eax),%dl
f01074e1:	83 e2 ef             	and    $0xffffffef,%edx
f01074e4:	88 90 92 00 00 00    	mov    %dl,0x92(%eax)
f01074ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074ed:	8a 90 92 00 00 00    	mov    0x92(%eax),%dl
f01074f3:	83 e2 df             	and    $0xffffffdf,%edx
f01074f6:	88 90 92 00 00 00    	mov    %dl,0x92(%eax)
f01074fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074ff:	8a 90 92 00 00 00    	mov    0x92(%eax),%dl
f0107505:	83 ca 40             	or     $0x40,%edx
f0107508:	88 90 92 00 00 00    	mov    %dl,0x92(%eax)
f010750e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107511:	8a 90 92 00 00 00    	mov    0x92(%eax),%dl
f0107517:	83 ca 80             	or     $0xffffff80,%edx
f010751a:	88 90 92 00 00 00    	mov    %dl,0x92(%eax)
f0107520:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107523:	c6 80 93 00 00 00 00 	movb   $0x0,0x93(%eax)

	// 0x20 - user data segment
	c->gdt[GD_UD >> 3] = SEG(STA_W, 0x0, 0xffffffff, 3);
f010752a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010752d:	66 c7 80 94 00 00 00 	movw   $0xffff,0x94(%eax)
f0107534:	ff ff 
f0107536:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107539:	66 c7 80 96 00 00 00 	movw   $0x0,0x96(%eax)
f0107540:	00 00 
f0107542:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107545:	c6 80 98 00 00 00 00 	movb   $0x0,0x98(%eax)
f010754c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010754f:	8a 90 99 00 00 00    	mov    0x99(%eax),%dl
f0107555:	83 e2 f0             	and    $0xfffffff0,%edx
f0107558:	83 ca 02             	or     $0x2,%edx
f010755b:	88 90 99 00 00 00    	mov    %dl,0x99(%eax)
f0107561:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107564:	8a 90 99 00 00 00    	mov    0x99(%eax),%dl
f010756a:	83 ca 10             	or     $0x10,%edx
f010756d:	88 90 99 00 00 00    	mov    %dl,0x99(%eax)
f0107573:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107576:	8a 90 99 00 00 00    	mov    0x99(%eax),%dl
f010757c:	83 ca 60             	or     $0x60,%edx
f010757f:	88 90 99 00 00 00    	mov    %dl,0x99(%eax)
f0107585:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107588:	8a 90 99 00 00 00    	mov    0x99(%eax),%dl
f010758e:	83 ca 80             	or     $0xffffff80,%edx
f0107591:	88 90 99 00 00 00    	mov    %dl,0x99(%eax)
f0107597:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010759a:	8a 90 9a 00 00 00    	mov    0x9a(%eax),%dl
f01075a0:	83 ca 0f             	or     $0xf,%edx
f01075a3:	88 90 9a 00 00 00    	mov    %dl,0x9a(%eax)
f01075a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075ac:	8a 90 9a 00 00 00    	mov    0x9a(%eax),%dl
f01075b2:	83 e2 ef             	and    $0xffffffef,%edx
f01075b5:	88 90 9a 00 00 00    	mov    %dl,0x9a(%eax)
f01075bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075be:	8a 90 9a 00 00 00    	mov    0x9a(%eax),%dl
f01075c4:	83 e2 df             	and    $0xffffffdf,%edx
f01075c7:	88 90 9a 00 00 00    	mov    %dl,0x9a(%eax)
f01075cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075d0:	8a 90 9a 00 00 00    	mov    0x9a(%eax),%dl
f01075d6:	83 ca 40             	or     $0x40,%edx
f01075d9:	88 90 9a 00 00 00    	mov    %dl,0x9a(%eax)
f01075df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075e2:	8a 90 9a 00 00 00    	mov    0x9a(%eax),%dl
f01075e8:	83 ca 80             	or     $0xffffff80,%edx
f01075eb:	88 90 9a 00 00 00    	mov    %dl,0x9a(%eax)
f01075f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075f4:	c6 80 9b 00 00 00 00 	movb   $0x0,0x9b(%eax)

	// 0x28 - tss, initialized in idt_init()
	c->gdt[GD_TSS >> 3] = SEG_NULL;
f01075fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075fe:	c7 80 9c 00 00 00 00 	movl   $0x0,0x9c(%eax)
f0107605:	00 00 00 
f0107608:	c7 80 a0 00 00 00 00 	movl   $0x0,0xa0(%eax)
f010760f:	00 00 00 

	popcli();	//enable interrupt
f0107612:	e8 fb fb ff ff       	call   f0107212 <popcli>


}
f0107617:	90                   	nop
f0107618:	c9                   	leave  
f0107619:	c3                   	ret    

f010761a <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f010761a:	55                   	push   %ebp
f010761b:	89 e5                	mov    %esp,%ebp
f010761d:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0107620:	83 ec 08             	sub    $0x8,%esp
f0107623:	68 00 10 00 00       	push   $0x1000
f0107628:	68 00 10 00 00       	push   $0x1000
f010762d:	e8 35 02 00 00       	call   f0107867 <boot_allocate_space>
f0107632:	83 c4 10             	add    $0x10,%esp
f0107635:	a3 dc 50 55 f0       	mov    %eax,0xf05550dc
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(ptr_page_directory, 0, PAGE_SIZE);
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f010763a:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f010763f:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107642:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0107649:	77 14                	ja     f010765f <initialize_kernel_VM+0x45>
f010764b:	ff 75 e0             	pushl  -0x20(%ebp)
f010764e:	68 dc 4b 12 f0       	push   $0xf0124bdc
f0107653:	6a 57                	push   $0x57
f0107655:	68 10 4c 12 f0       	push   $0xf0124c10
f010765a:	e8 bb 8c ff ff       	call   f010031a <_panic>
f010765f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107662:	05 00 00 00 10       	add    $0x10000000,%eax
f0107667:	a3 e4 51 55 f0       	mov    %eax,0xf05551e4
	// Your code goes here:

	//Ensure that the total size of SCHED Kernel Stack for ALL CPUs is less than PTSIZE (specified area for them)
	assert(NCPUS*KERNEL_STACK_SIZE < PTSIZE);

	boot_map_range(ptr_page_directory, KERN_STACK_TOP - NCPUS*KERNEL_STACK_SIZE, NCPUS*KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f010766c:	c7 45 dc 00 10 17 f0 	movl   $0xf0171000,-0x24(%ebp)
f0107673:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f010767a:	77 14                	ja     f0107690 <initialize_kernel_VM+0x76>
f010767c:	ff 75 dc             	pushl  -0x24(%ebp)
f010767f:	68 dc 4b 12 f0       	push   $0xf0124bdc
f0107684:	6a 63                	push   $0x63
f0107686:	68 10 4c 12 f0       	push   $0xf0124c10
f010768b:	e8 8a 8c ff ff       	call   f010031a <_panic>
f0107690:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107693:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0107699:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f010769e:	83 ec 0c             	sub    $0xc,%esp
f01076a1:	6a 02                	push   $0x2
f01076a3:	52                   	push   %edx
f01076a4:	68 00 80 00 00       	push   $0x8000
f01076a9:	68 00 80 bf ef       	push   $0xefbf8000
f01076ae:	50                   	push   %eax
f01076af:	e8 27 02 00 00       	call   f01078db <boot_map_range>
f01076b4:	83 c4 20             	add    $0x20,%esp
	//set bottom page of each stack as a GUARD page
	for (int c = 0; c < NCPUS; ++c)
f01076b7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01076be:	eb 24                	jmp    f01076e4 <initialize_kernel_VM+0xca>
	{
		pt_set_page_permissions(ptr_page_directory, KERN_STACK_TOP - ((c+1)*KERNEL_STACK_SIZE), 0, PERM_PRESENT);
f01076c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01076c3:	40                   	inc    %eax
f01076c4:	c1 e0 0f             	shl    $0xf,%eax
f01076c7:	ba 00 00 c0 ef       	mov    $0xefc00000,%edx
f01076cc:	29 c2                	sub    %eax,%edx
f01076ce:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f01076d3:	6a 01                	push   $0x1
f01076d5:	6a 00                	push   $0x0
f01076d7:	52                   	push   %edx
f01076d8:	50                   	push   %eax
f01076d9:	e8 4a 14 00 00       	call   f0108b28 <pt_set_page_permissions>
f01076de:	83 c4 10             	add    $0x10,%esp
	//Ensure that the total size of SCHED Kernel Stack for ALL CPUs is less than PTSIZE (specified area for them)
	assert(NCPUS*KERNEL_STACK_SIZE < PTSIZE);

	boot_map_range(ptr_page_directory, KERN_STACK_TOP - NCPUS*KERNEL_STACK_SIZE, NCPUS*KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
	//set bottom page of each stack as a GUARD page
	for (int c = 0; c < NCPUS; ++c)
f01076e1:	ff 45 f4             	incl   -0xc(%ebp)
f01076e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01076e8:	7e d6                	jle    f01076c0 <initialize_kernel_VM+0xa6>
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f01076ea:	c7 45 e8 00 00 00 f0 	movl   $0xf0000000,-0x18(%ebp)
f01076f1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	unsigned int nTables=0;
f01076f8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f01076ff:	eb 25                	jmp    f0107726 <initialize_kernel_VM+0x10c>
	{
		++nTables;
f0107701:	ff 45 e4             	incl   -0x1c(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0107704:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107707:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f010770c:	83 ec 04             	sub    $0x4,%esp
f010770f:	6a 01                	push   $0x1
f0107711:	52                   	push   %edx
f0107712:	50                   	push   %eax
f0107713:	e8 37 02 00 00       	call   f010794f <boot_get_page_table>
f0107718:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f010771b:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0107722:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0107726:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010772a:	72 d5                	jb     f0107701 <initialize_kernel_VM+0xe7>
f010772c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0107730:	77 06                	ja     f0107738 <initialize_kernel_VM+0x11e>
f0107732:	83 7d e8 fe          	cmpl   $0xfffffffe,-0x18(%ebp)
f0107736:	76 c9                	jbe    f0107701 <initialize_kernel_VM+0xe7>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0107738:	8b 15 b8 4c 55 f0    	mov    0xf0554cb8,%edx
f010773e:	89 d0                	mov    %edx,%eax
f0107740:	01 c0                	add    %eax,%eax
f0107742:	01 d0                	add    %edx,%eax
f0107744:	c1 e0 03             	shl    $0x3,%eax
f0107747:	89 45 d8             	mov    %eax,-0x28(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f010774a:	83 ec 08             	sub    $0x8,%esp
f010774d:	68 00 10 00 00       	push   $0x1000
f0107752:	ff 75 d8             	pushl  -0x28(%ebp)
f0107755:	e8 0d 01 00 00       	call   f0107867 <boot_allocate_space>
f010775a:	83 c4 10             	add    $0x10,%esp
f010775d:	a3 20 4f 55 f0       	mov    %eax,0xf0554f20
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0107762:	c7 45 d4 00 c0 30 00 	movl   $0x30c000,-0x2c(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0107769:	83 ec 08             	sub    $0x8,%esp
f010776c:	68 00 10 00 00       	push   $0x1000
f0107771:	ff 75 d4             	pushl  -0x2c(%ebp)
f0107774:	e8 ee 00 00 00       	call   f0107867 <boot_allocate_space>
f0107779:	83 c4 10             	add    $0x10,%esp
f010777c:	a3 c0 22 55 f0       	mov    %eax,0xf05522c0
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(disk_frames_info , 0, disk_array_size);

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0107781:	e8 32 05 00 00       	call   f0107cb8 <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("*	Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0107786:	83 ec 0c             	sub    $0xc,%esp
f0107789:	6a 08                	push   $0x8
f010778b:	e8 91 78 01 00       	call   f011f021 <nearest_pow2_ceil>
f0107790:	83 c4 10             	add    $0x10,%esp
f0107793:	83 ec 04             	sub    $0x4,%esp
f0107796:	50                   	push   %eax
f0107797:	6a 08                	push   $0x8
f0107799:	68 30 4c 12 f0       	push   $0xf0124c30
f010779e:	e8 c9 97 ff ff       	call   f0100f6c <cprintf>
f01077a3:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f01077a6:	c7 45 d0 60 d3 0e 00 	movl   $0xed360,-0x30(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f01077ad:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01077b0:	83 ec 08             	sub    $0x8,%esp
f01077b3:	68 00 10 00 00       	push   $0x1000
f01077b8:	50                   	push   %eax
f01077b9:	e8 a9 00 00 00       	call   f0107867 <boot_allocate_space>
f01077be:	83 c4 10             	add    $0x10,%esp
f01077c1:	a3 10 1a 55 f0       	mov    %eax,0xf0551a10
	/*2023: this line is moved to the boot_allocate_space()*/ //memset(envs , 0, envs_size);

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f01077c6:	a1 10 1a 55 f0       	mov    0xf0551a10,%eax
f01077cb:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01077ce:	81 7d cc ff ff ff ef 	cmpl   $0xefffffff,-0x34(%ebp)
f01077d5:	77 17                	ja     f01077ee <initialize_kernel_VM+0x1d4>
f01077d7:	ff 75 cc             	pushl  -0x34(%ebp)
f01077da:	68 dc 4b 12 f0       	push   $0xf0124bdc
f01077df:	68 b1 00 00 00       	push   $0xb1
f01077e4:	68 10 4c 12 f0       	push   $0xf0124c10
f01077e9:	e8 2c 8b ff ff       	call   f010031a <_panic>
f01077ee:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01077f1:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f01077f7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01077fa:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f01077ff:	83 ec 0c             	sub    $0xc,%esp
f0107802:	6a 04                	push   $0x4
f0107804:	51                   	push   %ecx
f0107805:	52                   	push   %edx
f0107806:	68 00 00 c0 ee       	push   $0xeec00000
f010780b:	50                   	push   %eax
f010780c:	e8 ca 00 00 00       	call   f01078db <boot_map_range>
f0107811:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0107814:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f0107819:	05 ec 0e 00 00       	add    $0xeec,%eax
f010781e:	8b 15 dc 50 55 f0    	mov    0xf05550dc,%edx
f0107824:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f010782a:	8b 12                	mov    (%edx),%edx
f010782c:	83 ca 05             	or     $0x5,%edx
f010782f:	89 10                	mov    %edx,(%eax)
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#else
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0107831:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f0107836:	83 ec 0c             	sub    $0xc,%esp
f0107839:	6a 02                	push   $0x2
f010783b:	6a 00                	push   $0x0
f010783d:	68 ff ff ff 0f       	push   $0xfffffff
f0107842:	68 00 00 00 f0       	push   $0xf0000000
f0107847:	50                   	push   %eax
f0107848:	e8 8e 00 00 00       	call   f01078db <boot_map_range>
f010784d:	83 c4 20             	add    $0x20,%esp
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0107850:	e8 6f 85 01 00       	call   f011fdc4 <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0107855:	c7 05 e0 4b 55 f0 19 	movl   $0x19,0xf0554be0
f010785c:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f010785f:	e8 20 03 00 00       	call   f0107b84 <turn_on_paging>
}
f0107864:	90                   	nop
f0107865:	c9                   	leave  
f0107866:	c3                   	ret    

f0107867 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0107867:	55                   	push   %ebp
f0107868:	89 e5                	mov    %esp,%ebp
f010786a:	83 ec 18             	sub    $0x18,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f010786d:	a1 d8 50 55 f0       	mov    0xf05550d8,%eax
f0107872:	85 c0                	test   %eax,%eax
f0107874:	75 0a                	jne    f0107880 <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0107876:	c7 05 d8 50 55 f0 a8 	movl   $0xf05779a8,0xf05550d8
f010787d:	79 57 f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0107880:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107883:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107886:	a1 d8 50 55 f0       	mov    0xf05550d8,%eax
f010788b:	89 c2                	mov    %eax,%edx
f010788d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107890:	01 d0                	add    %edx,%eax
f0107892:	48                   	dec    %eax
f0107893:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107896:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107899:	ba 00 00 00 00       	mov    $0x0,%edx
f010789e:	f7 75 f4             	divl   -0xc(%ebp)
f01078a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01078a4:	29 d0                	sub    %edx,%eax
f01078a6:	a3 d8 50 55 f0       	mov    %eax,0xf05550d8

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f01078ab:	a1 d8 50 55 f0       	mov    0xf05550d8,%eax
f01078b0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f01078b3:	8b 15 d8 50 55 f0    	mov    0xf05550d8,%edx
f01078b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01078bc:	01 d0                	add    %edx,%eax
f01078be:	a3 d8 50 55 f0       	mov    %eax,0xf05550d8

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	/*2023*/ /*THIS LINE IS UNCOMMENTED To Ensure that any boot allocations ARE SET TO ZERO
	 * This is mainly to ensure that any restart will be fresh and no grabage data will be exist
	 */
	memset(ptr_allocated_mem, 0, size);
f01078c3:	83 ec 04             	sub    $0x4,%esp
f01078c6:	ff 75 08             	pushl  0x8(%ebp)
f01078c9:	6a 00                	push   $0x0
f01078cb:	ff 75 ec             	pushl  -0x14(%ebp)
f01078ce:	e8 a5 91 01 00       	call   f0120a78 <memset>
f01078d3:	83 c4 10             	add    $0x10,%esp

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f01078d6:	8b 45 ec             	mov    -0x14(%ebp),%eax

}
f01078d9:	c9                   	leave  
f01078da:	c3                   	ret    

f01078db <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f01078db:	55                   	push   %ebp
f01078dc:	89 e5                	mov    %esp,%ebp
f01078de:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f01078e1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f01078e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01078ef:	eb 53                	jmp    f0107944 <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f01078f1:	83 ec 04             	sub    $0x4,%esp
f01078f4:	6a 01                	push   $0x1
f01078f6:	ff 75 0c             	pushl  0xc(%ebp)
f01078f9:	ff 75 08             	pushl  0x8(%ebp)
f01078fc:	e8 4e 00 00 00       	call   f010794f <boot_get_page_table>
f0107901:	83 c4 10             	add    $0x10,%esp
f0107904:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0107907:	8b 45 0c             	mov    0xc(%ebp),%eax
f010790a:	c1 e8 0c             	shr    $0xc,%eax
f010790d:	25 ff 03 00 00       	and    $0x3ff,%eax
f0107912:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0107915:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107918:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010791f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107922:	01 c2                	add    %eax,%edx
f0107924:	8b 45 18             	mov    0x18(%ebp),%eax
f0107927:	0b 45 14             	or     0x14(%ebp),%eax
f010792a:	83 c8 01             	or     $0x1,%eax
f010792d:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f010792f:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0107936:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f010793d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0107944:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107947:	3b 45 10             	cmp    0x10(%ebp),%eax
f010794a:	72 a5                	jb     f01078f1 <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f010794c:	90                   	nop
f010794d:	c9                   	leave  
f010794e:	c3                   	ret    

f010794f <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f010794f:	55                   	push   %ebp
f0107950:	89 e5                	mov    %esp,%ebp
f0107952:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0107955:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107958:	c1 e8 16             	shr    $0x16,%eax
f010795b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f010795e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107961:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107968:	8b 45 08             	mov    0x8(%ebp),%eax
f010796b:	01 d0                	add    %edx,%eax
f010796d:	8b 00                	mov    (%eax),%eax
f010796f:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0107972:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107975:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010797a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f010797d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107980:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0107983:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107986:	c1 e8 0c             	shr    $0xc,%eax
f0107989:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010798c:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f0107991:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0107994:	72 17                	jb     f01079ad <boot_get_page_table+0x5e>
f0107996:	ff 75 e8             	pushl  -0x18(%ebp)
f0107999:	68 58 4c 12 f0       	push   $0xf0124c58
f010799e:	68 33 01 00 00       	push   $0x133
f01079a3:	68 10 4c 12 f0       	push   $0xf0124c10
f01079a8:	e8 6d 89 ff ff       	call   f010031a <_panic>
f01079ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01079b0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01079b5:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f01079b8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01079bc:	75 72                	jne    f0107a30 <boot_get_page_table+0xe1>
	{
		if (create)
f01079be:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01079c2:	74 65                	je     f0107a29 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f01079c4:	83 ec 08             	sub    $0x8,%esp
f01079c7:	68 00 10 00 00       	push   $0x1000
f01079cc:	68 00 10 00 00       	push   $0x1000
f01079d1:	e8 91 fe ff ff       	call   f0107867 <boot_allocate_space>
f01079d6:	83 c4 10             	add    $0x10,%esp
f01079d9:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f01079dc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01079df:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01079e2:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f01079e9:	77 17                	ja     f0107a02 <boot_get_page_table+0xb3>
f01079eb:	ff 75 dc             	pushl  -0x24(%ebp)
f01079ee:	68 dc 4b 12 f0       	push   $0xf0124bdc
f01079f3:	68 39 01 00 00       	push   $0x139
f01079f8:	68 10 4c 12 f0       	push   $0xf0124c10
f01079fd:	e8 18 89 ff ff       	call   f010031a <_panic>
f0107a02:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107a05:	05 00 00 00 10       	add    $0x10000000,%eax
f0107a0a:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f0107a0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a10:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107a17:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a1a:	01 d0                	add    %edx,%eax
f0107a1c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107a1f:	83 ca 03             	or     $0x3,%edx
f0107a22:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f0107a24:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107a27:	eb 0a                	jmp    f0107a33 <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f0107a29:	b8 00 00 00 00       	mov    $0x0,%eax
f0107a2e:	eb 03                	jmp    f0107a33 <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f0107a30:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f0107a33:	c9                   	leave  
f0107a34:	c3                   	ret    

f0107a35 <nvram_read>:


int nvram_read(int r)
{
f0107a35:	55                   	push   %ebp
f0107a36:	89 e5                	mov    %esp,%ebp
f0107a38:	53                   	push   %ebx
f0107a39:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f0107a3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a3f:	83 ec 0c             	sub    $0xc,%esp
f0107a42:	50                   	push   %eax
f0107a43:	e8 12 d1 ff ff       	call   f0104b5a <mc146818_read>
f0107a48:	83 c4 10             	add    $0x10,%esp
f0107a4b:	89 c3                	mov    %eax,%ebx
f0107a4d:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a50:	40                   	inc    %eax
f0107a51:	83 ec 0c             	sub    $0xc,%esp
f0107a54:	50                   	push   %eax
f0107a55:	e8 00 d1 ff ff       	call   f0104b5a <mc146818_read>
f0107a5a:	83 c4 10             	add    $0x10,%esp
f0107a5d:	c1 e0 08             	shl    $0x8,%eax
f0107a60:	09 d8                	or     %ebx,%eax
}
f0107a62:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107a65:	c9                   	leave  
f0107a66:	c3                   	ret    

f0107a67 <detect_memory>:

void detect_memory()
{
f0107a67:	55                   	push   %ebp
f0107a68:	89 e5                	mov    %esp,%ebp
f0107a6a:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0107a6d:	83 ec 0c             	sub    $0xc,%esp
f0107a70:	6a 15                	push   $0x15
f0107a72:	e8 be ff ff ff       	call   f0107a35 <nvram_read>
f0107a77:	83 c4 10             	add    $0x10,%esp
f0107a7a:	c1 e0 0a             	shl    $0xa,%eax
f0107a7d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107a80:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107a83:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107a88:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f0107a8b:	83 ec 0c             	sub    $0xc,%esp
f0107a8e:	6a 17                	push   $0x17
f0107a90:	e8 a0 ff ff ff       	call   f0107a35 <nvram_read>
f0107a95:	83 c4 10             	add    $0x10,%esp
f0107a98:	c1 e0 0a             	shl    $0xa,%eax
f0107a9b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0107a9e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107aa1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107aa6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f0107aa9:	83 ec 0c             	sub    $0xc,%esp
f0107aac:	6a 34                	push   $0x34
f0107aae:	e8 82 ff ff ff       	call   f0107a35 <nvram_read>
f0107ab3:	83 c4 10             	add    $0x10,%esp
f0107ab6:	c1 e0 10             	shl    $0x10,%eax
f0107ab9:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0107abc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107abf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0107ac4:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f0107ac7:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0107acb:	74 18                	je     f0107ae5 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f0107acd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107ad0:	05 00 00 00 01       	add    $0x1000000,%eax
f0107ad5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f0107ad8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107adb:	2d 00 00 10 00       	sub    $0x100000,%eax
f0107ae0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107ae3:	eb 19                	jmp    f0107afe <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0107ae5:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107ae9:	74 0d                	je     f0107af8 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0107aeb:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107aee:	05 00 00 10 00       	add    $0x100000,%eax
f0107af3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107af6:	eb 06                	jmp    f0107afe <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f0107af8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107afb:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0107afe:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	if(USE_KHEAP == 0 && maxpa > kernel_virtual_area)
f0107b05:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b08:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0107b0b:	76 32                	jbe    f0107b3f <detect_memory+0xd8>
	{
		cprintf("*	Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
f0107b0d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0107b10:	c1 e8 0a             	shr    $0xa,%eax
f0107b13:	89 c2                	mov    %eax,%edx
f0107b15:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b18:	c1 e8 0a             	shr    $0xa,%eax
f0107b1b:	83 ec 04             	sub    $0x4,%esp
f0107b1e:	52                   	push   %edx
f0107b1f:	50                   	push   %eax
f0107b20:	68 88 4c 12 f0       	push   $0xf0124c88
f0107b25:	e8 42 94 ff ff       	call   f0100f6c <cprintf>
f0107b2a:	83 c4 10             	add    $0x10,%esp
		cprintf("*	Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
f0107b2d:	83 ec 0c             	sub    $0xc,%esp
f0107b30:	68 d0 4c 12 f0       	push   $0xf0124cd0
f0107b35:	e8 32 94 ff ff       	call   f0100f6c <cprintf>
f0107b3a:	83 c4 10             	add    $0x10,%esp
		while(1);
f0107b3d:	eb fe                	jmp    f0107b3d <detect_memory+0xd6>
	}
	number_of_frames = maxpa / PAGE_SIZE;
f0107b3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b42:	c1 e8 0c             	shr    $0xc,%eax
f0107b45:	a3 b8 4c 55 f0       	mov    %eax,0xf0554cb8

	cprintf("*	Physical memory: %dK available, ", (int)(maxpa/1024));
f0107b4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107b4d:	c1 e8 0a             	shr    $0xa,%eax
f0107b50:	83 ec 08             	sub    $0x8,%esp
f0107b53:	50                   	push   %eax
f0107b54:	68 68 4d 12 f0       	push   $0xf0124d68
f0107b59:	e8 0e 94 ff ff       	call   f0100f6c <cprintf>
f0107b5e:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f0107b61:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107b64:	c1 e8 0a             	shr    $0xa,%eax
f0107b67:	89 c2                	mov    %eax,%edx
f0107b69:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107b6c:	c1 e8 0a             	shr    $0xa,%eax
f0107b6f:	83 ec 04             	sub    $0x4,%esp
f0107b72:	52                   	push   %edx
f0107b73:	50                   	push   %eax
f0107b74:	68 8b 4d 12 f0       	push   $0xf0124d8b
f0107b79:	e8 ee 93 ff ff       	call   f0100f6c <cprintf>
f0107b7e:	83 c4 10             	add    $0x10,%esp
}
f0107b81:	90                   	nop
f0107b82:	c9                   	leave  
f0107b83:	c3                   	ret    

f0107b84 <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f0107b84:	55                   	push   %ebp
f0107b85:	89 e5                	mov    %esp,%ebp
f0107b87:	83 ec 48             	sub    $0x48,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f0107b8a:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f0107b91:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0107b98:	eb 24                	jmp    f0107bbe <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f0107b9a:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f0107b9f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107ba2:	c1 e2 02             	shl    $0x2,%edx
f0107ba5:	01 c2                	add    %eax,%edx
f0107ba7:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f0107bac:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0107baf:	c1 e1 02             	shl    $0x2,%ecx
f0107bb2:	01 c8                	add    %ecx,%eax
f0107bb4:	8b 00                	mov    (%eax),%eax
f0107bb6:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0107bb8:	ff 45 f4             	incl   -0xc(%ebp)
f0107bbb:	ff 45 f0             	incl   -0x10(%ebp)
f0107bbe:	a1 d8 50 55 f0       	mov    0xf05550d8,%eax
f0107bc3:	c1 e8 16             	shr    $0x16,%eax
f0107bc6:	89 c2                	mov    %eax,%edx
f0107bc8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107bcb:	39 c2                	cmp    %eax,%edx
f0107bcd:	77 cb                	ja     f0107b9a <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f0107bcf:	a1 e4 51 55 f0       	mov    0xf05551e4,%eax
f0107bd4:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0107bd7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107bda:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0107bdd:	0f 20 c0             	mov    %cr0,%eax
f0107be0:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f0107be3:	8b 45 d8             	mov    -0x28(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0107be6:	89 45 dc             	mov    %eax,-0x24(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0107be9:	81 4d dc 2f 00 05 80 	orl    $0x8005002f,-0x24(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f0107bf0:	83 65 dc f3          	andl   $0xfffffff3,-0x24(%ebp)
f0107bf4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0107bf7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0107bfa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0107bfd:	0f 22 c0             	mov    %eax,%cr0
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	//2024: replaced by lgdt()
	//asm volatile("lgdt gdt_pd");
	pushcli();	//disable interrupt
f0107c00:	e8 bb f5 ff ff       	call   f01071c0 <pushcli>
	lgdt(mycpu()->gdt, sizeof(mycpu()->gdt));
f0107c05:	e8 f3 f4 ff ff       	call   f01070fd <mycpu>
f0107c0a:	83 c0 74             	add    $0x74,%eax
f0107c0d:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0107c10:	c7 45 cc 30 00 00 00 	movl   $0x30,-0x34(%ebp)
static __inline void
lgdt(struct Segdesc *p, int size)
{
  volatile unsigned short pd[3];

  pd[0] = size-1;
f0107c17:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0107c1a:	48                   	dec    %eax
f0107c1b:	66 89 45 c6          	mov    %ax,-0x3a(%ebp)
  pd[1] = (uint32)p;
f0107c1f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0107c22:	66 89 45 c8          	mov    %ax,-0x38(%ebp)
  pd[2] = (uint32)p >> 16;
f0107c26:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0107c29:	c1 e8 10             	shr    $0x10,%eax
f0107c2c:	66 89 45 ca          	mov    %ax,-0x36(%ebp)

  __asm __volatile("lgdt (%0)" : : "r" (pd));
f0107c30:	8d 45 c6             	lea    -0x3a(%ebp),%eax
f0107c33:	0f 01 10             	lgdtl  (%eax)
	popcli();	//enable interrupt
f0107c36:	e8 d7 f5 ff ff       	call   f0107212 <popcli>
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0107c3b:	b8 23 00 00 00       	mov    $0x23,%eax
f0107c40:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0107c42:	b8 23 00 00 00       	mov    $0x23,%eax
f0107c47:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0107c49:	b8 10 00 00 00       	mov    $0x10,%eax
f0107c4e:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0107c50:	b8 10 00 00 00       	mov    $0x10,%eax
f0107c55:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f0107c57:	b8 10 00 00 00       	mov    $0x10,%eax
f0107c5c:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0107c5e:	ea 65 7c 10 f0 08 00 	ljmp   $0x8,$0xf0107c65
	asm volatile("lldt %%ax" :: "a" (0));
f0107c65:	b8 00 00 00 00       	mov    $0x0,%eax
f0107c6a:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f0107c6d:	c7 45 ec c0 03 00 00 	movl   $0x3c0,-0x14(%ebp)
		int j = 0;
f0107c74:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0107c7b:	eb 19                	jmp    f0107c96 <turn_on_paging+0x112>
		{
			ptr_page_directory[j] = 0;
f0107c7d:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f0107c82:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0107c85:	c1 e2 02             	shl    $0x2,%edx
f0107c88:	01 d0                	add    %edx,%eax
f0107c8a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0107c90:	ff 45 ec             	incl   -0x14(%ebp)
f0107c93:	ff 45 e8             	incl   -0x18(%ebp)
f0107c96:	a1 d8 50 55 f0       	mov    0xf05550d8,%eax
f0107c9b:	c1 e8 16             	shr    $0x16,%eax
f0107c9e:	89 c2                	mov    %eax,%edx
f0107ca0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107ca3:	39 c2                	cmp    %eax,%edx
f0107ca5:	77 d6                	ja     f0107c7d <turn_on_paging+0xf9>
			ptr_page_directory[j] = 0;
		}
	}

	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f0107ca7:	a1 e4 51 55 f0       	mov    0xf05551e4,%eax
f0107cac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0107caf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0107cb2:	0f 22 d8             	mov    %eax,%cr3

}
f0107cb5:	90                   	nop
f0107cb6:	c9                   	leave  
f0107cb7:	c3                   	ret    

f0107cb8 <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f0107cb8:	55                   	push   %ebp
f0107cb9:	89 e5                	mov    %esp,%ebp
f0107cbb:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0107cbe:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f0107cc3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107cc6:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f0107ccd:	77 17                	ja     f0107ce6 <setup_listing_to_all_page_tables_entries+0x2e>
f0107ccf:	ff 75 f4             	pushl  -0xc(%ebp)
f0107cd2:	68 dc 4b 12 f0       	push   $0xf0124bdc
f0107cd7:	68 cf 01 00 00       	push   $0x1cf
f0107cdc:	68 10 4c 12 f0       	push   $0xf0124c10
f0107ce1:	e8 34 86 ff ff       	call   f010031a <_panic>
f0107ce6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107ce9:	05 00 00 00 10       	add    $0x10000000,%eax
f0107cee:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f0107cf1:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f0107cf6:	05 fc 0e 00 00       	add    $0xefc,%eax
f0107cfb:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0107cfe:	83 ca 03             	or     $0x3,%edx
f0107d01:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f0107d03:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f0107d08:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0107d0e:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f0107d13:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107d16:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0107d1d:	77 17                	ja     f0107d36 <setup_listing_to_all_page_tables_entries+0x7e>
f0107d1f:	ff 75 ec             	pushl  -0x14(%ebp)
f0107d22:	68 dc 4b 12 f0       	push   $0xf0124bdc
f0107d27:	68 d4 01 00 00       	push   $0x1d4
f0107d2c:	68 10 4c 12 f0       	push   $0xf0124c10
f0107d31:	e8 e4 85 ff ff       	call   f010031a <_panic>
f0107d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107d39:	05 00 00 00 10       	add    $0x10000000,%eax
f0107d3e:	83 c8 05             	or     $0x5,%eax
f0107d41:	89 02                	mov    %eax,(%edx)

}
f0107d43:	90                   	nop
f0107d44:	c9                   	leave  
f0107d45:	c3                   	ret    

f0107d46 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0107d46:	55                   	push   %ebp
f0107d47:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0107d49:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d4c:	8b 15 20 4f 55 f0    	mov    0xf0554f20,%edx
f0107d52:	29 d0                	sub    %edx,%eax
f0107d54:	c1 f8 03             	sar    $0x3,%eax
f0107d57:	89 c2                	mov    %eax,%edx
f0107d59:	89 d0                	mov    %edx,%eax
f0107d5b:	c1 e0 02             	shl    $0x2,%eax
f0107d5e:	01 d0                	add    %edx,%eax
f0107d60:	c1 e0 02             	shl    $0x2,%eax
f0107d63:	01 d0                	add    %edx,%eax
f0107d65:	c1 e0 02             	shl    $0x2,%eax
f0107d68:	01 d0                	add    %edx,%eax
f0107d6a:	89 c1                	mov    %eax,%ecx
f0107d6c:	c1 e1 08             	shl    $0x8,%ecx
f0107d6f:	01 c8                	add    %ecx,%eax
f0107d71:	89 c1                	mov    %eax,%ecx
f0107d73:	c1 e1 10             	shl    $0x10,%ecx
f0107d76:	01 c8                	add    %ecx,%eax
f0107d78:	01 c0                	add    %eax,%eax
f0107d7a:	01 d0                	add    %edx,%eax
}
f0107d7c:	5d                   	pop    %ebp
f0107d7d:	c3                   	ret    

f0107d7e <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0107d7e:	55                   	push   %ebp
f0107d7f:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0107d81:	ff 75 08             	pushl  0x8(%ebp)
f0107d84:	e8 bd ff ff ff       	call   f0107d46 <to_frame_number>
f0107d89:	83 c4 04             	add    $0x4,%esp
f0107d8c:	c1 e0 0c             	shl    $0xc,%eax
}
f0107d8f:	c9                   	leave  
f0107d90:	c3                   	ret    

f0107d91 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0107d91:	55                   	push   %ebp
f0107d92:	89 e5                	mov    %esp,%ebp
f0107d94:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0107d97:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d9a:	c1 e8 0c             	shr    $0xc,%eax
f0107d9d:	89 c2                	mov    %eax,%edx
f0107d9f:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f0107da4:	39 c2                	cmp    %eax,%edx
f0107da6:	72 14                	jb     f0107dbc <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0107da8:	83 ec 04             	sub    $0x4,%esp
f0107dab:	68 a8 4d 12 f0       	push   $0xf0124da8
f0107db0:	6a 55                	push   $0x55
f0107db2:	68 cd 4d 12 f0       	push   $0xf0124dcd
f0107db7:	e8 5e 85 ff ff       	call   f010031a <_panic>
	return &frames_info[PPN(physical_address)];
f0107dbc:	8b 15 20 4f 55 f0    	mov    0xf0554f20,%edx
f0107dc2:	8b 45 08             	mov    0x8(%ebp),%eax
f0107dc5:	c1 e8 0c             	shr    $0xc,%eax
f0107dc8:	89 c1                	mov    %eax,%ecx
f0107dca:	89 c8                	mov    %ecx,%eax
f0107dcc:	01 c0                	add    %eax,%eax
f0107dce:	01 c8                	add    %ecx,%eax
f0107dd0:	c1 e0 03             	shl    $0x3,%eax
f0107dd3:	01 d0                	add    %edx,%eax
}
f0107dd5:	c9                   	leave  
f0107dd6:	c3                   	ret    

f0107dd7 <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f0107dd7:	55                   	push   %ebp
f0107dd8:	89 e5                	mov    %esp,%ebp
f0107dda:	83 ec 10             	sub    $0x10,%esp
f0107ddd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107de0:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void
invlpg(void *addr)
{
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f0107de3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107de6:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f0107de9:	90                   	nop
f0107dea:	c9                   	leave  
f0107deb:	c3                   	ret    

f0107dec <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f0107dec:	55                   	push   %ebp
f0107ded:	89 e5                	mov    %esp,%ebp
f0107def:	53                   	push   %ebx
f0107df0:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&MemFrameLists.free_frame_list);
f0107df3:	c7 05 20 25 55 f0 00 	movl   $0x0,0xf0552520
f0107dfa:	00 00 00 
f0107dfd:	c7 05 24 25 55 f0 00 	movl   $0x0,0xf0552524
f0107e04:	00 00 00 
f0107e07:	c7 05 2c 25 55 f0 00 	movl   $0x0,0xf055252c
f0107e0e:	00 00 00 
	LIST_INIT(&MemFrameLists.modified_frame_list);
f0107e11:	c7 05 30 25 55 f0 00 	movl   $0x0,0xf0552530
f0107e18:	00 00 00 
f0107e1b:	c7 05 34 25 55 f0 00 	movl   $0x0,0xf0552534
f0107e22:	00 00 00 
f0107e25:	c7 05 3c 25 55 f0 00 	movl   $0x0,0xf055253c
f0107e2c:	00 00 00 

	//Initialize the corresponding lock
	init_spinlock(&MemFrameLists.mfllock, "Frame Info Lock");
f0107e2f:	83 ec 08             	sub    $0x8,%esp
f0107e32:	68 e7 4d 12 f0       	push   $0xf0124de7
f0107e37:	68 40 25 55 f0       	push   $0xf0552540
f0107e3c:	e8 65 6c 00 00       	call   f010eaa6 <init_spinlock>
f0107e41:	83 c4 10             	add    $0x10,%esp

	frames_info[0].references = 1;
f0107e44:	a1 20 4f 55 f0       	mov    0xf0554f20,%eax
f0107e49:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0107e4f:	a1 20 4f 55 f0       	mov    0xf0554f20,%eax
f0107e54:	83 c0 18             	add    $0x18,%eax
f0107e57:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f0107e5d:	a1 20 4f 55 f0       	mov    0xf0554f20,%eax
f0107e62:	83 c0 30             	add    $0x30,%eax
f0107e65:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f0107e6b:	c7 05 b4 4f 55 f0 00 	movl   $0xf0001000,0xf0554fb4
f0107e72:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0107e75:	c7 05 64 51 55 f0 00 	movl   $0xf0002000,0xf0555164
f0107e7c:	20 00 f0 
	i =0;
f0107e7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f0107e86:	eb 1f                	jmp    f0107ea7 <initialize_paging+0xbb>
	{
		ptr_zero_page[i]=0;
f0107e88:	8b 15 b4 4f 55 f0    	mov    0xf0554fb4,%edx
f0107e8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e91:	01 d0                	add    %edx,%eax
f0107e93:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f0107e96:	8b 15 64 51 55 f0    	mov    0xf0555164,%edx
f0107e9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e9f:	01 d0                	add    %edx,%eax
f0107ea1:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f0107ea4:	ff 45 f4             	incl   -0xc(%ebp)
f0107ea7:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107eae:	7e d8                	jle    f0107e88 <initialize_paging+0x9c>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f0107eb0:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0107eb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107eba:	05 ff ff 09 00       	add    $0x9ffff,%eax
f0107ebf:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107ec2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107ec5:	ba 00 00 00 00       	mov    $0x0,%edx
f0107eca:	f7 75 f0             	divl   -0x10(%ebp)
f0107ecd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107ed0:	29 d0                	sub    %edx,%eax
f0107ed2:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0107ed5:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f0107edc:	e9 e8 00 00 00       	jmp    f0107fc9 <initialize_paging+0x1dd>
	{

		initialize_frame_info(&(frames_info[i]));
f0107ee1:	8b 0d 20 4f 55 f0    	mov    0xf0554f20,%ecx
f0107ee7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107eea:	89 d0                	mov    %edx,%eax
f0107eec:	01 c0                	add    %eax,%eax
f0107eee:	01 d0                	add    %edx,%eax
f0107ef0:	c1 e0 03             	shl    $0x3,%eax
f0107ef3:	01 c8                	add    %ecx,%eax
f0107ef5:	83 ec 0c             	sub    $0xc,%esp
f0107ef8:	50                   	push   %eax
f0107ef9:	e8 b7 02 00 00       	call   f01081b5 <initialize_frame_info>
f0107efe:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&MemFrameLists.free_frame_list, &frames_info[i]);
f0107f01:	8b 0d 20 4f 55 f0    	mov    0xf0554f20,%ecx
f0107f07:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f0a:	89 d0                	mov    %edx,%eax
f0107f0c:	01 c0                	add    %eax,%eax
f0107f0e:	01 d0                	add    %edx,%eax
f0107f10:	c1 e0 03             	shl    $0x3,%eax
f0107f13:	01 c8                	add    %ecx,%eax
f0107f15:	85 c0                	test   %eax,%eax
f0107f17:	75 14                	jne    f0107f2d <initialize_paging+0x141>
f0107f19:	83 ec 04             	sub    $0x4,%esp
f0107f1c:	68 f8 4d 12 f0       	push   $0xf0124df8
f0107f21:	6a 60                	push   $0x60
f0107f23:	68 1b 4e 12 f0       	push   $0xf0124e1b
f0107f28:	e8 ed 83 ff ff       	call   f010031a <_panic>
f0107f2d:	8b 0d 20 4f 55 f0    	mov    0xf0554f20,%ecx
f0107f33:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f36:	89 d0                	mov    %edx,%eax
f0107f38:	01 c0                	add    %eax,%eax
f0107f3a:	01 d0                	add    %edx,%eax
f0107f3c:	c1 e0 03             	shl    $0x3,%eax
f0107f3f:	01 c8                	add    %ecx,%eax
f0107f41:	8b 15 20 25 55 f0    	mov    0xf0552520,%edx
f0107f47:	89 10                	mov    %edx,(%eax)
f0107f49:	8b 00                	mov    (%eax),%eax
f0107f4b:	85 c0                	test   %eax,%eax
f0107f4d:	74 1f                	je     f0107f6e <initialize_paging+0x182>
f0107f4f:	8b 15 20 25 55 f0    	mov    0xf0552520,%edx
f0107f55:	8b 1d 20 4f 55 f0    	mov    0xf0554f20,%ebx
f0107f5b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0107f5e:	89 c8                	mov    %ecx,%eax
f0107f60:	01 c0                	add    %eax,%eax
f0107f62:	01 c8                	add    %ecx,%eax
f0107f64:	c1 e0 03             	shl    $0x3,%eax
f0107f67:	01 d8                	add    %ebx,%eax
f0107f69:	89 42 04             	mov    %eax,0x4(%edx)
f0107f6c:	eb 19                	jmp    f0107f87 <initialize_paging+0x19b>
f0107f6e:	8b 0d 20 4f 55 f0    	mov    0xf0554f20,%ecx
f0107f74:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f77:	89 d0                	mov    %edx,%eax
f0107f79:	01 c0                	add    %eax,%eax
f0107f7b:	01 d0                	add    %edx,%eax
f0107f7d:	c1 e0 03             	shl    $0x3,%eax
f0107f80:	01 c8                	add    %ecx,%eax
f0107f82:	a3 24 25 55 f0       	mov    %eax,0xf0552524
f0107f87:	8b 0d 20 4f 55 f0    	mov    0xf0554f20,%ecx
f0107f8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107f90:	89 d0                	mov    %edx,%eax
f0107f92:	01 c0                	add    %eax,%eax
f0107f94:	01 d0                	add    %edx,%eax
f0107f96:	c1 e0 03             	shl    $0x3,%eax
f0107f99:	01 c8                	add    %ecx,%eax
f0107f9b:	a3 20 25 55 f0       	mov    %eax,0xf0552520
f0107fa0:	8b 0d 20 4f 55 f0    	mov    0xf0554f20,%ecx
f0107fa6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107fa9:	89 d0                	mov    %edx,%eax
f0107fab:	01 c0                	add    %eax,%eax
f0107fad:	01 d0                	add    %edx,%eax
f0107faf:	c1 e0 03             	shl    $0x3,%eax
f0107fb2:	01 c8                	add    %ecx,%eax
f0107fb4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0107fbb:	a1 2c 25 55 f0       	mov    0xf055252c,%eax
f0107fc0:	40                   	inc    %eax
f0107fc1:	a3 2c 25 55 f0       	mov    %eax,0xf055252c
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f0107fc6:	ff 45 f4             	incl   -0xc(%ebp)
f0107fc9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0107fcc:	85 c0                	test   %eax,%eax
f0107fce:	79 05                	jns    f0107fd5 <initialize_paging+0x1e9>
f0107fd0:	05 ff 0f 00 00       	add    $0xfff,%eax
f0107fd5:	c1 f8 0c             	sar    $0xc,%eax
f0107fd8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107fdb:	0f 8f 00 ff ff ff    	jg     f0107ee1 <initialize_paging+0xf5>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&MemFrameLists.free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0107fe1:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f0107fe8:	eb 1d                	jmp    f0108007 <initialize_paging+0x21b>
	{
		frames_info[i].references = 1;
f0107fea:	8b 0d 20 4f 55 f0    	mov    0xf0554f20,%ecx
f0107ff0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107ff3:	89 d0                	mov    %edx,%eax
f0107ff5:	01 c0                	add    %eax,%eax
f0107ff7:	01 d0                	add    %edx,%eax
f0107ff9:	c1 e0 03             	shl    $0x3,%eax
f0107ffc:	01 c8                	add    %ecx,%eax
f0107ffe:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&MemFrameLists.free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f0108004:	ff 45 f4             	incl   -0xc(%ebp)
f0108007:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f010800e:	7e da                	jle    f0107fea <initialize_paging+0x1fe>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f0108010:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0108017:	a1 d8 50 55 f0       	mov    0xf05550d8,%eax
f010801c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010801f:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0108026:	77 14                	ja     f010803c <initialize_paging+0x250>
f0108028:	ff 75 e0             	pushl  -0x20(%ebp)
f010802b:	68 38 4e 12 f0       	push   $0xf0124e38
f0108030:	6a 68                	push   $0x68
f0108032:	68 1b 4e 12 f0       	push   $0xf0124e1b
f0108037:	e8 de 82 ff ff       	call   f010031a <_panic>
f010803c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010803f:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0108045:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108048:	01 d0                	add    %edx,%eax
f010804a:	48                   	dec    %eax
f010804b:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010804e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108051:	ba 00 00 00 00       	mov    $0x0,%edx
f0108056:	f7 75 e4             	divl   -0x1c(%ebp)
f0108059:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010805c:	29 d0                	sub    %edx,%eax
f010805e:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0108061:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f0108068:	eb 1d                	jmp    f0108087 <initialize_paging+0x29b>
	{
		frames_info[i].references = 1;
f010806a:	8b 0d 20 4f 55 f0    	mov    0xf0554f20,%ecx
f0108070:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108073:	89 d0                	mov    %edx,%eax
f0108075:	01 c0                	add    %eax,%eax
f0108077:	01 d0                	add    %edx,%eax
f0108079:	c1 e0 03             	shl    $0x3,%eax
f010807c:	01 c8                	add    %ecx,%eax
f010807e:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0108084:	ff 45 f4             	incl   -0xc(%ebp)
f0108087:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010808a:	85 c0                	test   %eax,%eax
f010808c:	79 05                	jns    f0108093 <initialize_paging+0x2a7>
f010808e:	05 ff 0f 00 00       	add    $0xfff,%eax
f0108093:	c1 f8 0c             	sar    $0xc,%eax
f0108096:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108099:	7f cf                	jg     f010806a <initialize_paging+0x27e>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f010809b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010809e:	85 c0                	test   %eax,%eax
f01080a0:	79 05                	jns    f01080a7 <initialize_paging+0x2bb>
f01080a2:	05 ff 0f 00 00       	add    $0xfff,%eax
f01080a7:	c1 f8 0c             	sar    $0xc,%eax
f01080aa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01080ad:	e9 e8 00 00 00       	jmp    f010819a <initialize_paging+0x3ae>
	{
		initialize_frame_info(&(frames_info[i]));
f01080b2:	8b 0d 20 4f 55 f0    	mov    0xf0554f20,%ecx
f01080b8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01080bb:	89 d0                	mov    %edx,%eax
f01080bd:	01 c0                	add    %eax,%eax
f01080bf:	01 d0                	add    %edx,%eax
f01080c1:	c1 e0 03             	shl    $0x3,%eax
f01080c4:	01 c8                	add    %ecx,%eax
f01080c6:	83 ec 0c             	sub    $0xc,%esp
f01080c9:	50                   	push   %eax
f01080ca:	e8 e6 00 00 00       	call   f01081b5 <initialize_frame_info>
f01080cf:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&MemFrameLists.free_frame_list, &frames_info[i]);
f01080d2:	8b 0d 20 4f 55 f0    	mov    0xf0554f20,%ecx
f01080d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01080db:	89 d0                	mov    %edx,%eax
f01080dd:	01 c0                	add    %eax,%eax
f01080df:	01 d0                	add    %edx,%eax
f01080e1:	c1 e0 03             	shl    $0x3,%eax
f01080e4:	01 c8                	add    %ecx,%eax
f01080e6:	85 c0                	test   %eax,%eax
f01080e8:	75 14                	jne    f01080fe <initialize_paging+0x312>
f01080ea:	83 ec 04             	sub    $0x4,%esp
f01080ed:	68 f8 4d 12 f0       	push   $0xf0124df8
f01080f2:	6a 74                	push   $0x74
f01080f4:	68 1b 4e 12 f0       	push   $0xf0124e1b
f01080f9:	e8 1c 82 ff ff       	call   f010031a <_panic>
f01080fe:	8b 0d 20 4f 55 f0    	mov    0xf0554f20,%ecx
f0108104:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108107:	89 d0                	mov    %edx,%eax
f0108109:	01 c0                	add    %eax,%eax
f010810b:	01 d0                	add    %edx,%eax
f010810d:	c1 e0 03             	shl    $0x3,%eax
f0108110:	01 c8                	add    %ecx,%eax
f0108112:	8b 15 20 25 55 f0    	mov    0xf0552520,%edx
f0108118:	89 10                	mov    %edx,(%eax)
f010811a:	8b 00                	mov    (%eax),%eax
f010811c:	85 c0                	test   %eax,%eax
f010811e:	74 1f                	je     f010813f <initialize_paging+0x353>
f0108120:	8b 15 20 25 55 f0    	mov    0xf0552520,%edx
f0108126:	8b 1d 20 4f 55 f0    	mov    0xf0554f20,%ebx
f010812c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010812f:	89 c8                	mov    %ecx,%eax
f0108131:	01 c0                	add    %eax,%eax
f0108133:	01 c8                	add    %ecx,%eax
f0108135:	c1 e0 03             	shl    $0x3,%eax
f0108138:	01 d8                	add    %ebx,%eax
f010813a:	89 42 04             	mov    %eax,0x4(%edx)
f010813d:	eb 19                	jmp    f0108158 <initialize_paging+0x36c>
f010813f:	8b 0d 20 4f 55 f0    	mov    0xf0554f20,%ecx
f0108145:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108148:	89 d0                	mov    %edx,%eax
f010814a:	01 c0                	add    %eax,%eax
f010814c:	01 d0                	add    %edx,%eax
f010814e:	c1 e0 03             	shl    $0x3,%eax
f0108151:	01 c8                	add    %ecx,%eax
f0108153:	a3 24 25 55 f0       	mov    %eax,0xf0552524
f0108158:	8b 0d 20 4f 55 f0    	mov    0xf0554f20,%ecx
f010815e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108161:	89 d0                	mov    %edx,%eax
f0108163:	01 c0                	add    %eax,%eax
f0108165:	01 d0                	add    %edx,%eax
f0108167:	c1 e0 03             	shl    $0x3,%eax
f010816a:	01 c8                	add    %ecx,%eax
f010816c:	a3 20 25 55 f0       	mov    %eax,0xf0552520
f0108171:	8b 0d 20 4f 55 f0    	mov    0xf0554f20,%ecx
f0108177:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010817a:	89 d0                	mov    %edx,%eax
f010817c:	01 c0                	add    %eax,%eax
f010817e:	01 d0                	add    %edx,%eax
f0108180:	c1 e0 03             	shl    $0x3,%eax
f0108183:	01 c8                	add    %ecx,%eax
f0108185:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010818c:	a1 2c 25 55 f0       	mov    0xf055252c,%eax
f0108191:	40                   	inc    %eax
f0108192:	a3 2c 25 55 f0       	mov    %eax,0xf055252c
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0108197:	ff 45 f4             	incl   -0xc(%ebp)
f010819a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010819d:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f01081a2:	39 c2                	cmp    %eax,%edx
f01081a4:	0f 82 08 ff ff ff    	jb     f01080b2 <initialize_paging+0x2c6>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&MemFrameLists.free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f01081aa:	e8 ef b9 ff ff       	call   f0103b9e <initialize_disk_page_file>
}
f01081af:	90                   	nop
f01081b0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01081b3:	c9                   	leave  
f01081b4:	c3                   	ret    

f01081b5 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f01081b5:	55                   	push   %ebp
f01081b6:	89 e5                	mov    %esp,%ebp
f01081b8:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f01081bb:	83 ec 04             	sub    $0x4,%esp
f01081be:	6a 18                	push   $0x18
f01081c0:	6a 00                	push   $0x0
f01081c2:	ff 75 08             	pushl  0x8(%ebp)
f01081c5:	e8 ae 88 01 00       	call   f0120a78 <memset>
f01081ca:	83 c4 10             	add    $0x10,%esp
}
f01081cd:	90                   	nop
f01081ce:	c9                   	leave  
f01081cf:	c3                   	ret    

f01081d0 <allocate_frame>:
//   If failed, it panic.
//
// Hint: use LIST_FIRST, LIST_REMOVE, and initialize_frame_info
// Hint: references should not be incremented
int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f01081d0:	55                   	push   %ebp
f01081d1:	89 e5                	mov    %esp,%ebp
f01081d3:	83 ec 18             	sub    $0x18,%esp
	//cprintf("allocate_frame...\n");

	bool lock_already_held = holding_spinlock(&MemFrameLists.mfllock);
f01081d6:	83 ec 0c             	sub    $0xc,%esp
f01081d9:	68 40 25 55 f0       	push   $0xf0552540
f01081de:	e8 0d 6b 00 00       	call   f010ecf0 <holding_spinlock>
f01081e3:	83 c4 10             	add    $0x10,%esp
f01081e6:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (!lock_already_held)
f01081e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01081ed:	75 10                	jne    f01081ff <allocate_frame+0x2f>
	{
		acquire_spinlock(&MemFrameLists.mfllock);
f01081ef:	83 ec 0c             	sub    $0xc,%esp
f01081f2:	68 40 25 55 f0       	push   $0xf0552540
f01081f7:	e8 db 68 00 00       	call   f010ead7 <acquire_spinlock>
f01081fc:	83 c4 10             	add    $0x10,%esp
	}

	*ptr_frame_info = LIST_FIRST(&MemFrameLists.free_frame_list);
f01081ff:	8b 15 20 25 55 f0    	mov    0xf0552520,%edx
f0108205:	8b 45 08             	mov    0x8(%ebp),%eax
f0108208:	89 10                	mov    %edx,(%eax)
	int c = 0;
f010820a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (*ptr_frame_info == NULL)
f0108211:	8b 45 08             	mov    0x8(%ebp),%eax
f0108214:	8b 00                	mov    (%eax),%eax
f0108216:	85 c0                	test   %eax,%eax
f0108218:	75 17                	jne    f0108231 <allocate_frame+0x61>
	{
		//[PROJECT] Free RAM when it's FULL
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f010821a:	83 ec 04             	sub    $0x4,%esp
f010821d:	68 6c 4e 12 f0       	push   $0xf0124e6c
f0108222:	68 a2 00 00 00       	push   $0xa2
f0108227:	68 1b 4e 12 f0       	push   $0xf0124e1b
f010822c:	e8 e9 80 ff ff       	call   f010031a <_panic>
		// When allocating new frame, if there's no free frame, then you should:
		//	1-	If any process has exited (those with status ENV_EXIT), then remove one or more of these exited processes from the main memory
		//	2-	otherwise, free at least 1 frame from the user working set by applying the FIFO algorithm
	}

	LIST_REMOVE(&MemFrameLists.free_frame_list,*ptr_frame_info);
f0108231:	8b 45 08             	mov    0x8(%ebp),%eax
f0108234:	8b 00                	mov    (%eax),%eax
f0108236:	85 c0                	test   %eax,%eax
f0108238:	75 17                	jne    f0108251 <allocate_frame+0x81>
f010823a:	83 ec 04             	sub    $0x4,%esp
f010823d:	68 b9 4e 12 f0       	push   $0xf0124eb9
f0108242:	68 a8 00 00 00       	push   $0xa8
f0108247:	68 1b 4e 12 f0       	push   $0xf0124e1b
f010824c:	e8 c9 80 ff ff       	call   f010031a <_panic>
f0108251:	8b 45 08             	mov    0x8(%ebp),%eax
f0108254:	8b 00                	mov    (%eax),%eax
f0108256:	8b 00                	mov    (%eax),%eax
f0108258:	85 c0                	test   %eax,%eax
f010825a:	74 14                	je     f0108270 <allocate_frame+0xa0>
f010825c:	8b 45 08             	mov    0x8(%ebp),%eax
f010825f:	8b 00                	mov    (%eax),%eax
f0108261:	8b 00                	mov    (%eax),%eax
f0108263:	8b 55 08             	mov    0x8(%ebp),%edx
f0108266:	8b 12                	mov    (%edx),%edx
f0108268:	8b 52 04             	mov    0x4(%edx),%edx
f010826b:	89 50 04             	mov    %edx,0x4(%eax)
f010826e:	eb 0d                	jmp    f010827d <allocate_frame+0xad>
f0108270:	8b 45 08             	mov    0x8(%ebp),%eax
f0108273:	8b 00                	mov    (%eax),%eax
f0108275:	8b 40 04             	mov    0x4(%eax),%eax
f0108278:	a3 24 25 55 f0       	mov    %eax,0xf0552524
f010827d:	8b 45 08             	mov    0x8(%ebp),%eax
f0108280:	8b 00                	mov    (%eax),%eax
f0108282:	8b 40 04             	mov    0x4(%eax),%eax
f0108285:	85 c0                	test   %eax,%eax
f0108287:	74 13                	je     f010829c <allocate_frame+0xcc>
f0108289:	8b 45 08             	mov    0x8(%ebp),%eax
f010828c:	8b 00                	mov    (%eax),%eax
f010828e:	8b 40 04             	mov    0x4(%eax),%eax
f0108291:	8b 55 08             	mov    0x8(%ebp),%edx
f0108294:	8b 12                	mov    (%edx),%edx
f0108296:	8b 12                	mov    (%edx),%edx
f0108298:	89 10                	mov    %edx,(%eax)
f010829a:	eb 0c                	jmp    f01082a8 <allocate_frame+0xd8>
f010829c:	8b 45 08             	mov    0x8(%ebp),%eax
f010829f:	8b 00                	mov    (%eax),%eax
f01082a1:	8b 00                	mov    (%eax),%eax
f01082a3:	a3 20 25 55 f0       	mov    %eax,0xf0552520
f01082a8:	8b 45 08             	mov    0x8(%ebp),%eax
f01082ab:	8b 00                	mov    (%eax),%eax
f01082ad:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01082b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01082b6:	8b 00                	mov    (%eax),%eax
f01082b8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01082bf:	a1 2c 25 55 f0       	mov    0xf055252c,%eax
f01082c4:	48                   	dec    %eax
f01082c5:	a3 2c 25 55 f0       	mov    %eax,0xf055252c

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/
	if((*ptr_frame_info)->isBuffered)
f01082ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01082cd:	8b 00                	mov    (%eax),%eax
f01082cf:	8a 40 14             	mov    0x14(%eax),%al
f01082d2:	84 c0                	test   %al,%al
f01082d4:	74 20                	je     f01082f6 <allocate_frame+0x126>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->proc->env_page_directory,(*ptr_frame_info)->bufferedVA);
f01082d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01082d9:	8b 00                	mov    (%eax),%eax
f01082db:	8b 50 10             	mov    0x10(%eax),%edx
f01082de:	8b 45 08             	mov    0x8(%ebp),%eax
f01082e1:	8b 00                	mov    (%eax),%eax
f01082e3:	8b 40 0c             	mov    0xc(%eax),%eax
f01082e6:	8b 40 64             	mov    0x64(%eax),%eax
f01082e9:	83 ec 08             	sub    $0x8,%esp
f01082ec:	52                   	push   %edx
f01082ed:	50                   	push   %eax
f01082ee:	e8 42 09 00 00       	call   f0108c35 <pt_clear_page_table_entry>
f01082f3:	83 c4 10             	add    $0x10,%esp
		//pt_set_page_permissions((*ptr_frame_info)->environment->env_pgdir, (*ptr_frame_info)->va, 0, PERM_BUFFERED);
	}
	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f01082f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01082f9:	8b 00                	mov    (%eax),%eax
f01082fb:	83 ec 0c             	sub    $0xc,%esp
f01082fe:	50                   	push   %eax
f01082ff:	e8 b1 fe ff ff       	call   f01081b5 <initialize_frame_info>
f0108304:	83 c4 10             	add    $0x10,%esp

	if (!lock_already_held)
f0108307:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010830b:	75 10                	jne    f010831d <allocate_frame+0x14d>
	{
		release_spinlock(&MemFrameLists.mfllock);
f010830d:	83 ec 0c             	sub    $0xc,%esp
f0108310:	68 40 25 55 f0       	push   $0xf0552540
f0108315:	e8 44 68 00 00       	call   f010eb5e <release_spinlock>
f010831a:	83 c4 10             	add    $0x10,%esp
	}

	return 0;
f010831d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0108322:	c9                   	leave  
f0108323:	c3                   	ret    

f0108324 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f0108324:	55                   	push   %ebp
f0108325:	89 e5                	mov    %esp,%ebp
f0108327:	83 ec 18             	sub    $0x18,%esp
	bool lock_already_held = holding_spinlock(&MemFrameLists.mfllock);
f010832a:	83 ec 0c             	sub    $0xc,%esp
f010832d:	68 40 25 55 f0       	push   $0xf0552540
f0108332:	e8 b9 69 00 00       	call   f010ecf0 <holding_spinlock>
f0108337:	83 c4 10             	add    $0x10,%esp
f010833a:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (!lock_already_held)
f010833d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108341:	75 10                	jne    f0108353 <free_frame+0x2f>
	{
		acquire_spinlock(&MemFrameLists.mfllock);
f0108343:	83 ec 0c             	sub    $0xc,%esp
f0108346:	68 40 25 55 f0       	push   $0xf0552540
f010834b:	e8 87 67 00 00       	call   f010ead7 <acquire_spinlock>
f0108350:	83 c4 10             	add    $0x10,%esp
	}
	{
		/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
		initialize_frame_info(ptr_frame_info);
f0108353:	83 ec 0c             	sub    $0xc,%esp
f0108356:	ff 75 08             	pushl  0x8(%ebp)
f0108359:	e8 57 fe ff ff       	call   f01081b5 <initialize_frame_info>
f010835e:	83 c4 10             	add    $0x10,%esp
		/*=============================================================================*/
		// Fill this function in
		LIST_INSERT_HEAD(&MemFrameLists.free_frame_list, ptr_frame_info);
f0108361:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0108365:	75 17                	jne    f010837e <free_frame+0x5a>
f0108367:	83 ec 04             	sub    $0x4,%esp
f010836a:	68 f8 4d 12 f0       	push   $0xf0124df8
f010836f:	68 cf 00 00 00       	push   $0xcf
f0108374:	68 1b 4e 12 f0       	push   $0xf0124e1b
f0108379:	e8 9c 7f ff ff       	call   f010031a <_panic>
f010837e:	8b 15 20 25 55 f0    	mov    0xf0552520,%edx
f0108384:	8b 45 08             	mov    0x8(%ebp),%eax
f0108387:	89 10                	mov    %edx,(%eax)
f0108389:	8b 45 08             	mov    0x8(%ebp),%eax
f010838c:	8b 00                	mov    (%eax),%eax
f010838e:	85 c0                	test   %eax,%eax
f0108390:	74 0d                	je     f010839f <free_frame+0x7b>
f0108392:	a1 20 25 55 f0       	mov    0xf0552520,%eax
f0108397:	8b 55 08             	mov    0x8(%ebp),%edx
f010839a:	89 50 04             	mov    %edx,0x4(%eax)
f010839d:	eb 08                	jmp    f01083a7 <free_frame+0x83>
f010839f:	8b 45 08             	mov    0x8(%ebp),%eax
f01083a2:	a3 24 25 55 f0       	mov    %eax,0xf0552524
f01083a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01083aa:	a3 20 25 55 f0       	mov    %eax,0xf0552520
f01083af:	8b 45 08             	mov    0x8(%ebp),%eax
f01083b2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01083b9:	a1 2c 25 55 f0       	mov    0xf055252c,%eax
f01083be:	40                   	inc    %eax
f01083bf:	a3 2c 25 55 f0       	mov    %eax,0xf055252c
		//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));
	}
	if (!lock_already_held)
f01083c4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01083c8:	75 10                	jne    f01083da <free_frame+0xb6>
	{
		release_spinlock(&MemFrameLists.mfllock);
f01083ca:	83 ec 0c             	sub    $0xc,%esp
f01083cd:	68 40 25 55 f0       	push   $0xf0552540
f01083d2:	e8 87 67 00 00       	call   f010eb5e <release_spinlock>
f01083d7:	83 c4 10             	add    $0x10,%esp
	}
}
f01083da:	90                   	nop
f01083db:	c9                   	leave  
f01083dc:	c3                   	ret    

f01083dd <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f01083dd:	55                   	push   %ebp
f01083de:	89 e5                	mov    %esp,%ebp
f01083e0:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f01083e3:	8b 45 08             	mov    0x8(%ebp),%eax
f01083e6:	8b 40 08             	mov    0x8(%eax),%eax
f01083e9:	48                   	dec    %eax
f01083ea:	8b 55 08             	mov    0x8(%ebp),%edx
f01083ed:	66 89 42 08          	mov    %ax,0x8(%edx)
f01083f1:	8b 45 08             	mov    0x8(%ebp),%eax
f01083f4:	8b 40 08             	mov    0x8(%eax),%eax
f01083f7:	66 85 c0             	test   %ax,%ax
f01083fa:	75 0e                	jne    f010840a <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f01083fc:	83 ec 0c             	sub    $0xc,%esp
f01083ff:	ff 75 08             	pushl  0x8(%ebp)
f0108402:	e8 1d ff ff ff       	call   f0108324 <free_frame>
f0108407:	83 c4 10             	add    $0x10,%esp
}
f010840a:	90                   	nop
f010840b:	c9                   	leave  
f010840c:	c3                   	ret    

f010840d <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f010840d:	55                   	push   %ebp
f010840e:	89 e5                	mov    %esp,%ebp
f0108410:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0108413:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108416:	c1 e8 16             	shr    $0x16,%eax
f0108419:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108420:	8b 45 08             	mov    0x8(%ebp),%eax
f0108423:	01 d0                	add    %edx,%eax
f0108425:	8b 00                	mov    (%eax),%eax
f0108427:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f010842a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010842d:	83 e0 01             	and    $0x1,%eax
f0108430:	85 c0                	test   %eax,%eax
f0108432:	74 4e                	je     f0108482 <get_page_table+0x75>
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0108434:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108437:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010843c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010843f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108442:	c1 e8 0c             	shr    $0xc,%eax
f0108445:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108448:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f010844d:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0108450:	72 17                	jb     f0108469 <get_page_table+0x5c>
f0108452:	ff 75 f0             	pushl  -0x10(%ebp)
f0108455:	68 d8 4e 12 f0       	push   $0xf0124ed8
f010845a:	68 fb 00 00 00       	push   $0xfb
f010845f:	68 1b 4e 12 f0       	push   $0xf0124e1b
f0108464:	e8 b1 7e ff ff       	call   f010031a <_panic>
f0108469:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010846c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0108471:	89 c2                	mov    %eax,%edx
f0108473:	8b 45 10             	mov    0x10(%ebp),%eax
f0108476:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f0108478:	b8 00 00 00 00       	mov    $0x0,%eax
f010847d:	e9 8f 00 00 00       	jmp    f0108511 <get_page_table+0x104>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f0108482:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108486:	74 7b                	je     f0108503 <get_page_table+0xf6>
f0108488:	8b 45 0c             	mov    0xc(%ebp),%eax
f010848b:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f010848e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108491:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f0108494:	83 ec 0c             	sub    $0xc,%esp
f0108497:	6a 00                	push   $0x0
f0108499:	e8 0d 63 00 00       	call   f010e7ab <fault_handler>
f010849e:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01084a1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01084a4:	c1 e8 16             	shr    $0x16,%eax
f01084a7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01084ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01084b1:	01 d0                	add    %edx,%eax
f01084b3:	8b 00                	mov    (%eax),%eax
f01084b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f01084b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01084bb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01084c0:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01084c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01084c6:	c1 e8 0c             	shr    $0xc,%eax
f01084c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01084cc:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f01084d1:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f01084d4:	72 17                	jb     f01084ed <get_page_table+0xe0>
f01084d6:	ff 75 e8             	pushl  -0x18(%ebp)
f01084d9:	68 d8 4e 12 f0       	push   $0xf0124ed8
f01084de:	68 13 01 00 00       	push   $0x113
f01084e3:	68 1b 4e 12 f0       	push   $0xf0124e1b
f01084e8:	e8 2d 7e ff ff       	call   f010031a <_panic>
f01084ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01084f0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01084f5:	89 c2                	mov    %eax,%edx
f01084f7:	8b 45 10             	mov    0x10(%ebp),%eax
f01084fa:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f01084fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0108501:	eb 0e                	jmp    f0108511 <get_page_table+0x104>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0108503:	8b 45 10             	mov    0x10(%ebp),%eax
f0108506:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f010850c:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0108511:	c9                   	leave  
f0108512:	c3                   	ret    

f0108513 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0108513:	55                   	push   %ebp
f0108514:	89 e5                	mov    %esp,%ebp
f0108516:	83 ec 18             	sub    $0x18,%esp
	memset(ptr_page_table , 0, PAGE_SIZE);
	tlbflush();

#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
f0108519:	83 ec 04             	sub    $0x4,%esp
f010851c:	8d 45 f4             	lea    -0xc(%ebp),%eax
f010851f:	50                   	push   %eax
f0108520:	ff 75 0c             	pushl  0xc(%ebp)
f0108523:	ff 75 08             	pushl  0x8(%ebp)
f0108526:	e8 08 00 00 00       	call   f0108533 <__static_cpt>
f010852b:	83 c4 10             	add    $0x10,%esp
#endif

	//cprintf("KERNEL: NEW TABLE for va %x \n", virtual_address);

	return ptr_page_table;
f010852e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0108531:	c9                   	leave  
f0108532:	c3                   	ret    

f0108533 <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0108533:	55                   	push   %ebp
f0108534:	89 e5                	mov    %esp,%ebp
f0108536:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0108539:	83 ec 0c             	sub    $0xc,%esp
f010853c:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010853f:	50                   	push   %eax
f0108540:	e8 8b fc ff ff       	call   f01081d0 <allocate_frame>
f0108545:	83 c4 10             	add    $0x10,%esp
f0108548:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f010854b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010854e:	83 ec 0c             	sub    $0xc,%esp
f0108551:	50                   	push   %eax
f0108552:	e8 27 f8 ff ff       	call   f0107d7e <to_physical_address>
f0108557:	83 c4 10             	add    $0x10,%esp
f010855a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f010855d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108560:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108563:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108566:	c1 e8 0c             	shr    $0xc,%eax
f0108569:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010856c:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f0108571:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0108574:	72 17                	jb     f010858d <__static_cpt+0x5a>
f0108576:	ff 75 ec             	pushl  -0x14(%ebp)
f0108579:	68 d8 4e 12 f0       	push   $0xf0124ed8
f010857e:	68 4e 01 00 00       	push   $0x14e
f0108583:	68 1b 4e 12 f0       	push   $0xf0124e1b
f0108588:	e8 8d 7d ff ff       	call   f010031a <_panic>
f010858d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108590:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0108595:	89 c2                	mov    %eax,%edx
f0108597:	8b 45 10             	mov    0x10(%ebp),%eax
f010859a:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f010859c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010859f:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f01085a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01085a8:	c1 e8 16             	shr    $0x16,%eax
f01085ab:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01085b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01085b5:	01 d0                	add    %edx,%eax
f01085b7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01085ba:	83 ca 07             	or     $0x7,%edx
f01085bd:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f01085bf:	8b 45 10             	mov    0x10(%ebp),%eax
f01085c2:	8b 00                	mov    (%eax),%eax
f01085c4:	83 ec 04             	sub    $0x4,%esp
f01085c7:	68 00 10 00 00       	push   $0x1000
f01085cc:	6a 00                	push   $0x0
f01085ce:	50                   	push   %eax
f01085cf:	e8 a4 84 01 00       	call   f0120a78 <memset>
f01085d4:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01085d7:	0f 20 d8             	mov    %cr3,%eax
f01085da:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01085dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01085e0:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f01085e3:	90                   	nop
f01085e4:	c9                   	leave  
f01085e5:	c3                   	ret    

f01085e6 <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f01085e6:	55                   	push   %ebp
f01085e7:	89 e5                	mov    %esp,%ebp
f01085e9:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f01085ec:	ff 75 0c             	pushl  0xc(%ebp)
f01085ef:	e8 8a f7 ff ff       	call   f0107d7e <to_physical_address>
f01085f4:	83 c4 04             	add    $0x4,%esp
f01085f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f01085fa:	83 ec 04             	sub    $0x4,%esp
f01085fd:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0108600:	50                   	push   %eax
f0108601:	ff 75 10             	pushl  0x10(%ebp)
f0108604:	ff 75 08             	pushl  0x8(%ebp)
f0108607:	e8 01 fe ff ff       	call   f010840d <get_page_table>
f010860c:	83 c4 10             	add    $0x10,%esp
f010860f:	83 f8 01             	cmp    $0x1,%eax
f0108612:	75 15                	jne    f0108629 <map_frame+0x43>
			uint32* ptr_page_table2 =NULL;
			//cprintf("======> After the table created at %x\n\n", get_page_table(ptr_page_directory, virtual_address,&ptr_page_table2));
		}
#else
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
f0108614:	83 ec 04             	sub    $0x4,%esp
f0108617:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010861a:	50                   	push   %eax
f010861b:	ff 75 10             	pushl  0x10(%ebp)
f010861e:	ff 75 08             	pushl  0x8(%ebp)
f0108621:	e8 0d ff ff ff       	call   f0108533 <__static_cpt>
f0108626:	83 c4 10             	add    $0x10,%esp
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0108629:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010862c:	8b 55 10             	mov    0x10(%ebp),%edx
f010862f:	c1 ea 0c             	shr    $0xc,%edx
f0108632:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108638:	c1 e2 02             	shl    $0x2,%edx
f010863b:	01 d0                	add    %edx,%eax
f010863d:	8b 00                	mov    (%eax),%eax
f010863f:	89 45 f0             	mov    %eax,-0x10(%ebp)

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0108642:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108645:	83 e0 01             	and    $0x1,%eax
f0108648:	85 c0                	test   %eax,%eax
f010864a:	74 25                	je     f0108671 <map_frame+0x8b>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f010864c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010864f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108654:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0108657:	75 07                	jne    f0108660 <map_frame+0x7a>
			return 0;
f0108659:	b8 00 00 00 00       	mov    $0x0,%eax
f010865e:	eb 68                	jmp    f01086c8 <map_frame+0xe2>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0108660:	83 ec 08             	sub    $0x8,%esp
f0108663:	ff 75 10             	pushl  0x10(%ebp)
f0108666:	ff 75 08             	pushl  0x8(%ebp)
f0108669:	e8 d2 00 00 00       	call   f0108740 <unmap_frame>
f010866e:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0108671:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108674:	8b 40 08             	mov    0x8(%eax),%eax
f0108677:	40                   	inc    %eax
f0108678:	8b 55 0c             	mov    0xc(%ebp),%edx
f010867b:	66 89 42 08          	mov    %ax,0x8(%edx)

	/*********************************************************************************/
	/*NEW'23 el7:)
	 * [DONE] map_frame(): KEEP THE VALUES OF THE AVAILABLE BITS*/
	uint32 pte_available_bits = ptr_page_table[PTX(virtual_address)] & PERM_AVAILABLE;
f010867f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108682:	8b 55 10             	mov    0x10(%ebp),%edx
f0108685:	c1 ea 0c             	shr    $0xc,%edx
f0108688:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010868e:	c1 e2 02             	shl    $0x2,%edx
f0108691:	01 d0                	add    %edx,%eax
f0108693:	8b 00                	mov    (%eax),%eax
f0108695:	25 00 0e 00 00       	and    $0xe00,%eax
f010869a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , pte_available_bits | perm | PERM_PRESENT);
f010869d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01086a0:	8b 55 10             	mov    0x10(%ebp),%edx
f01086a3:	c1 ea 0c             	shr    $0xc,%edx
f01086a6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01086ac:	c1 e2 02             	shl    $0x2,%edx
f01086af:	01 c2                	add    %eax,%edx
f01086b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01086b4:	0b 45 ec             	or     -0x14(%ebp),%eax
f01086b7:	89 c1                	mov    %eax,%ecx
f01086b9:	8b 45 14             	mov    0x14(%ebp),%eax
f01086bc:	09 c8                	or     %ecx,%eax
f01086be:	83 c8 01             	or     $0x1,%eax
f01086c1:	89 02                	mov    %eax,(%edx)
	/*********************************************************************************/

	return 0;
f01086c3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01086c8:	c9                   	leave  
f01086c9:	c3                   	ret    

f01086ca <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f01086ca:	55                   	push   %ebp
f01086cb:	89 e5                	mov    %esp,%ebp
f01086cd:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f01086d0:	83 ec 04             	sub    $0x4,%esp
f01086d3:	ff 75 10             	pushl  0x10(%ebp)
f01086d6:	ff 75 0c             	pushl  0xc(%ebp)
f01086d9:	ff 75 08             	pushl  0x8(%ebp)
f01086dc:	e8 2c fd ff ff       	call   f010840d <get_page_table>
f01086e1:	83 c4 10             	add    $0x10,%esp
f01086e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f01086e7:	8b 45 10             	mov    0x10(%ebp),%eax
f01086ea:	8b 00                	mov    (%eax),%eax
f01086ec:	85 c0                	test   %eax,%eax
f01086ee:	74 49                	je     f0108739 <get_frame_info+0x6f>
	{
		uint32 index_page_table = PTX(virtual_address);
f01086f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01086f3:	c1 e8 0c             	shr    $0xc,%eax
f01086f6:	25 ff 03 00 00       	and    $0x3ff,%eax
f01086fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f01086fe:	8b 45 10             	mov    0x10(%ebp),%eax
f0108701:	8b 00                	mov    (%eax),%eax
f0108703:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108706:	c1 e2 02             	shl    $0x2,%edx
f0108709:	01 d0                	add    %edx,%eax
f010870b:	8b 00                	mov    (%eax),%eax
f010870d:	89 45 ec             	mov    %eax,-0x14(%ebp)

		/*2023 el7:)*///Make sure it has a frame number other than 0 (not just a marked page from the page allocator)
		//if( page_table_entry != 0)
		if( (page_table_entry & ~0xFFF) != 0)
f0108710:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108713:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108718:	85 c0                	test   %eax,%eax
f010871a:	74 16                	je     f0108732 <get_frame_info+0x68>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f010871c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010871f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108724:	83 ec 0c             	sub    $0xc,%esp
f0108727:	50                   	push   %eax
f0108728:	e8 64 f6 ff ff       	call   f0107d91 <to_frame_info>
f010872d:	83 c4 10             	add    $0x10,%esp
f0108730:	eb 0c                	jmp    f010873e <get_frame_info+0x74>
		}
		return 0;
f0108732:	b8 00 00 00 00       	mov    $0x0,%eax
f0108737:	eb 05                	jmp    f010873e <get_frame_info+0x74>
	}
	return 0;
f0108739:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010873e:	c9                   	leave  
f010873f:	c3                   	ret    

f0108740 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0108740:	55                   	push   %ebp
f0108741:	89 e5                	mov    %esp,%ebp
f0108743:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0108746:	83 ec 04             	sub    $0x4,%esp
f0108749:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010874c:	50                   	push   %eax
f010874d:	ff 75 0c             	pushl  0xc(%ebp)
f0108750:	ff 75 08             	pushl  0x8(%ebp)
f0108753:	e8 72 ff ff ff       	call   f01086ca <get_frame_info>
f0108758:	83 c4 10             	add    $0x10,%esp
f010875b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f010875e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108762:	74 7d                	je     f01087e1 <unmap_frame+0xa1>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0108764:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108767:	8a 40 14             	mov    0x14(%eax),%al
f010876a:	84 c0                	test   %al,%al
f010876c:	74 1c                	je     f010878a <unmap_frame+0x4a>
f010876e:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0108775:	77 13                	ja     f010878a <unmap_frame+0x4a>
			cprintf("WARNING: Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0108777:	83 ec 08             	sub    $0x8,%esp
f010877a:	ff 75 0c             	pushl  0xc(%ebp)
f010877d:	68 08 4f 12 f0       	push   $0xf0124f08
f0108782:	e8 e5 87 ff ff       	call   f0100f6c <cprintf>
f0108787:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f010878a:	83 ec 0c             	sub    $0xc,%esp
f010878d:	ff 75 f4             	pushl  -0xc(%ebp)
f0108790:	e8 48 fc ff ff       	call   f01083dd <decrement_references>
f0108795:	83 c4 10             	add    $0x10,%esp

		/*********************************************************************************/
		/*NEW'23 el7:)
		 * [DONE] unmap_frame(): KEEP THE VALUES OF THE AVAILABLE BITS*/
		uint32 pte_available_bits = ptr_page_table[PTX(virtual_address)] & PERM_AVAILABLE;
f0108798:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010879b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010879e:	c1 ea 0c             	shr    $0xc,%edx
f01087a1:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01087a7:	c1 e2 02             	shl    $0x2,%edx
f01087aa:	01 d0                	add    %edx,%eax
f01087ac:	8b 00                	mov    (%eax),%eax
f01087ae:	25 00 0e 00 00       	and    $0xe00,%eax
f01087b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_page_table[PTX(virtual_address)] = pte_available_bits;
f01087b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01087b9:	8b 55 0c             	mov    0xc(%ebp),%edx
f01087bc:	c1 ea 0c             	shr    $0xc,%edx
f01087bf:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01087c5:	c1 e2 02             	shl    $0x2,%edx
f01087c8:	01 c2                	add    %eax,%edx
f01087ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01087cd:	89 02                	mov    %eax,(%edx)
		/*********************************************************************************/

		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f01087cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01087d2:	83 ec 08             	sub    $0x8,%esp
f01087d5:	50                   	push   %eax
f01087d6:	ff 75 08             	pushl  0x8(%ebp)
f01087d9:	e8 f9 f5 ff ff       	call   f0107dd7 <tlb_invalidate>
f01087de:	83 c4 10             	add    $0x10,%esp
	}
}
f01087e1:	90                   	nop
f01087e2:	c9                   	leave  
f01087e3:	c3                   	ret    

f01087e4 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f01087e4:	55                   	push   %ebp
f01087e5:	89 e5                	mov    %esp,%ebp
f01087e7:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f01087ea:	ff 75 0c             	pushl  0xc(%ebp)
f01087ed:	e8 8c f5 ff ff       	call   f0107d7e <to_physical_address>
f01087f2:	83 c4 04             	add    $0x4,%esp
f01087f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f01087f8:	8b 45 10             	mov    0x10(%ebp),%eax
f01087fb:	c1 e8 16             	shr    $0x16,%eax
f01087fe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108805:	8b 45 08             	mov    0x8(%ebp),%eax
f0108808:	01 d0                	add    %edx,%eax
f010880a:	8b 00                	mov    (%eax),%eax
f010880c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f010880f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108812:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108817:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010881a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010881d:	c1 e8 0c             	shr    $0xc,%eax
f0108820:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0108823:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f0108828:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f010882b:	72 17                	jb     f0108844 <loadtime_map_frame+0x60>
f010882d:	ff 75 ec             	pushl  -0x14(%ebp)
f0108830:	68 d8 4e 12 f0       	push   $0xf0124ed8
f0108835:	68 f9 01 00 00       	push   $0x1f9
f010883a:	68 1b 4e 12 f0       	push   $0xf0124e1b
f010883f:	e8 d6 7a ff ff       	call   f010031a <_panic>
f0108844:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108847:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010884c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f010884f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0108853:	75 15                	jne    f010886a <loadtime_map_frame+0x86>
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
		}
#else
		{
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
f0108855:	83 ec 04             	sub    $0x4,%esp
f0108858:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f010885b:	50                   	push   %eax
f010885c:	ff 75 10             	pushl  0x10(%ebp)
f010885f:	ff 75 08             	pushl  0x8(%ebp)
f0108862:	e8 cc fc ff ff       	call   f0108533 <__static_cpt>
f0108867:	83 c4 10             	add    $0x10,%esp
		}
#endif
	}

	ptr_frame_info->references++;
f010886a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010886d:	8b 40 08             	mov    0x8(%eax),%eax
f0108870:	40                   	inc    %eax
f0108871:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108874:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0108878:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010887b:	8b 55 10             	mov    0x10(%ebp),%edx
f010887e:	c1 ea 0c             	shr    $0xc,%edx
f0108881:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108887:	c1 e2 02             	shl    $0x2,%edx
f010888a:	01 c2                	add    %eax,%edx
f010888c:	8b 45 14             	mov    0x14(%ebp),%eax
f010888f:	0b 45 f4             	or     -0xc(%ebp),%eax
f0108892:	83 c8 01             	or     $0x1,%eax
f0108895:	89 02                	mov    %eax,(%edx)

	return 0;
f0108897:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010889c:	c9                   	leave  
f010889d:	c3                   	ret    

f010889e <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f010889e:	55                   	push   %ebp
f010889f:	89 e5                	mov    %esp,%ebp
f01088a1:	57                   	push   %edi
f01088a2:	56                   	push   %esi
f01088a3:	53                   	push   %ebx
f01088a4:	83 ec 2c             	sub    $0x2c,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f01088a7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 totalFreeBuffered = 0 ;
f01088ae:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	uint32 totalModified = 0 ;
f01088b5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	bool lock_is_held = holding_spinlock(&MemFrameLists.mfllock);
f01088bc:	83 ec 0c             	sub    $0xc,%esp
f01088bf:	68 40 25 55 f0       	push   $0xf0552540
f01088c4:	e8 27 64 00 00       	call   f010ecf0 <holding_spinlock>
f01088c9:	83 c4 10             	add    $0x10,%esp
f01088cc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if (!lock_is_held)
f01088cf:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01088d3:	75 10                	jne    f01088e5 <calculate_available_frames+0x47>
	{
		acquire_spinlock(&MemFrameLists.mfllock);
f01088d5:	83 ec 0c             	sub    $0xc,%esp
f01088d8:	68 40 25 55 f0       	push   $0xf0552540
f01088dd:	e8 f5 61 00 00       	call   f010ead7 <acquire_spinlock>
f01088e2:	83 c4 10             	add    $0x10,%esp
	}
	{
		//calculate the free frames from the free frame list

		LIST_FOREACH(ptr, &MemFrameLists.free_frame_list)
f01088e5:	a1 20 25 55 f0       	mov    0xf0552520,%eax
f01088ea:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01088ed:	eb 1a                	jmp    f0108909 <calculate_available_frames+0x6b>
		{
			if (ptr->isBuffered)
f01088ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01088f2:	8a 40 14             	mov    0x14(%eax),%al
f01088f5:	84 c0                	test   %al,%al
f01088f7:	74 05                	je     f01088fe <calculate_available_frames+0x60>
				totalFreeBuffered++ ;
f01088f9:	ff 45 dc             	incl   -0x24(%ebp)
f01088fc:	eb 03                	jmp    f0108901 <calculate_available_frames+0x63>
			else
				totalFreeUnBuffered++ ;
f01088fe:	ff 45 e0             	incl   -0x20(%ebp)
		acquire_spinlock(&MemFrameLists.mfllock);
	}
	{
		//calculate the free frames from the free frame list

		LIST_FOREACH(ptr, &MemFrameLists.free_frame_list)
f0108901:	a1 28 25 55 f0       	mov    0xf0552528,%eax
f0108906:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108909:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010890d:	74 07                	je     f0108916 <calculate_available_frames+0x78>
f010890f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108912:	8b 00                	mov    (%eax),%eax
f0108914:	eb 05                	jmp    f010891b <calculate_available_frames+0x7d>
f0108916:	b8 00 00 00 00       	mov    $0x0,%eax
f010891b:	a3 28 25 55 f0       	mov    %eax,0xf0552528
f0108920:	a1 28 25 55 f0       	mov    0xf0552528,%eax
f0108925:	85 c0                	test   %eax,%eax
f0108927:	75 c6                	jne    f01088ef <calculate_available_frames+0x51>
f0108929:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010892d:	75 c0                	jne    f01088ef <calculate_available_frames+0x51>
			else
				totalFreeUnBuffered++ ;
		}

		/*2023: UPDATE based on suggestion from T112 2023.Term1*/
		totalModified= LIST_SIZE(&MemFrameLists.modified_frame_list);
f010892f:	a1 3c 25 55 f0       	mov    0xf055253c,%eax
f0108934:	89 45 d8             	mov    %eax,-0x28(%ebp)
		//	LIST_FOREACH(ptr, &modified_frame_list)
		//	{
		//		totalModified++ ;
		//	}
	}
	if (!lock_is_held)
f0108937:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f010893b:	75 10                	jne    f010894d <calculate_available_frames+0xaf>
	{
		release_spinlock(&MemFrameLists.mfllock);
f010893d:	83 ec 0c             	sub    $0xc,%esp
f0108940:	68 40 25 55 f0       	push   $0xf0552540
f0108945:	e8 14 62 00 00       	call   f010eb5e <release_spinlock>
f010894a:	83 c4 10             	add    $0x10,%esp
	}
	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f010894d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0108950:	89 45 c8             	mov    %eax,-0x38(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0108953:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0108956:	89 45 cc             	mov    %eax,-0x34(%ebp)
	counters.modified = totalModified;
f0108959:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010895c:	89 45 d0             	mov    %eax,-0x30(%ebp)
	return counters;
f010895f:	8b 45 08             	mov    0x8(%ebp),%eax
f0108962:	89 c3                	mov    %eax,%ebx
f0108964:	8d 45 c8             	lea    -0x38(%ebp),%eax
f0108967:	ba 03 00 00 00       	mov    $0x3,%edx
f010896c:	89 df                	mov    %ebx,%edi
f010896e:	89 c6                	mov    %eax,%esi
f0108970:	89 d1                	mov    %edx,%ecx
f0108972:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f0108974:	8b 45 08             	mov    0x8(%ebp),%eax
f0108977:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010897a:	5b                   	pop    %ebx
f010897b:	5e                   	pop    %esi
f010897c:	5f                   	pop    %edi
f010897d:	5d                   	pop    %ebp
f010897e:	c2 04 00             	ret    $0x4

f0108981 <sharing_init>:
//===========================
// [1] INITIALIZE SHARES:
//===========================
//Initialize the list and the corresponding lock
void sharing_init(uint32 numOfElements)
{
f0108981:	55                   	push   %ebp
f0108982:	89 e5                	mov    %esp,%ebp
f0108984:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	LIST_INIT(&AllShares.shares_list) ;
	init_spinlock(&AllShares.shareslock, "shares lock");
#else
	panic("not handled when KERN HEAP is disabled");
f0108987:	83 ec 04             	sub    $0x4,%esp
f010898a:	68 38 4f 12 f0       	push   $0xf0124f38
f010898f:	6a 1e                	push   $0x1e
f0108991:	68 60 4f 12 f0       	push   $0xf0124f60
f0108996:	e8 7f 79 ff ff       	call   f010031a <_panic>

f010899b <create_share>:
//=====================================
//Allocates a new shared object and initialize its member
//It dynamically creates the "framesStorage"
//Return: allocatedObject (pointer to struct Share) passed by reference
struct Share* create_share(int32 ownerID, char* shareName, uint32 size, uint8 isWritable)
{
f010899b:	55                   	push   %ebp
f010899c:	89 e5                	mov    %esp,%ebp
f010899e:	83 ec 18             	sub    $0x18,%esp
f01089a1:	8b 45 14             	mov    0x14(%ebp),%eax
f01089a4:	88 45 f4             	mov    %al,-0xc(%ebp)
	//[PROJECT'24.MS2]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("create_share is not implemented yet");
f01089a7:	83 ec 04             	sub    $0x4,%esp
f01089aa:	68 84 4f 12 f0       	push   $0xf0124f84
f01089af:	6a 32                	push   $0x32
f01089b1:	68 60 4f 12 f0       	push   $0xf0124f60
f01089b6:	e8 5f 79 ff ff       	call   f010031a <_panic>

f01089bb <get_share>:
//Search for the given shared object in the "shares_list"
//Return:
//	a) if found: ptr to Share object
//	b) else: NULL
struct Share* get_share(int32 ownerID, char* name)
{
f01089bb:	55                   	push   %ebp
f01089bc:	89 e5                	mov    %esp,%ebp
f01089be:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("get_share is not implemented yet");
f01089c1:	83 ec 04             	sub    $0x4,%esp
f01089c4:	68 a8 4f 12 f0       	push   $0xf0124fa8
f01089c9:	6a 42                	push   $0x42
f01089cb:	68 60 4f 12 f0       	push   $0xf0124f60
f01089d0:	e8 45 79 ff ff       	call   f010031a <_panic>

f01089d5 <free_share>:
// [3] Delete Share Object:
//=========================
//delete the given shared object from the "shares_list"
//it should free its framesStorage and the share object itself
void free_share(struct Share* ptrShare)
{
f01089d5:	55                   	push   %ebp
f01089d6:	89 e5                	mov    %esp,%ebp
f01089d8:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] BONUS
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("free_share is not implemented yet");
f01089db:	83 ec 04             	sub    $0x4,%esp
f01089de:	68 cc 4f 12 f0       	push   $0xf0124fcc
f01089e3:	6a 50                	push   $0x50
f01089e5:	68 60 4f 12 f0       	push   $0xf0124f60
f01089ea:	e8 2b 79 ff ff       	call   f010031a <_panic>

f01089ef <create_frames_storage>:
//===========================
// [4] Create frames_storage:
//===========================
// Create the frames_storage and initialize it by 0
inline struct FrameInfo** create_frames_storage(int numOfFrames)
{
f01089ef:	55                   	push   %ebp
f01089f0:	89 e5                	mov    %esp,%ebp
f01089f2:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("create_frames_storage is not implemented yet");
f01089f5:	83 ec 04             	sub    $0x4,%esp
f01089f8:	68 f0 4f 12 f0       	push   $0xf0124ff0
f01089fd:	6a 5c                	push   $0x5c
f01089ff:	68 60 4f 12 f0       	push   $0xf0124f60
f0108a04:	e8 11 79 ff ff       	call   f010031a <_panic>

f0108a09 <createSharedObject>:

//=========================
// [5] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0108a09:	55                   	push   %ebp
f0108a0a:	89 e5                	mov    %esp,%ebp
f0108a0c:	83 ec 18             	sub    $0x18,%esp
f0108a0f:	8b 45 14             	mov    0x14(%ebp),%eax
f0108a12:	88 45 f4             	mov    %al,-0xc(%ebp)
	//[PROJECT'24.MS2]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("createSharedObject is not implemented yet");
f0108a15:	83 ec 04             	sub    $0x4,%esp
f0108a18:	68 20 50 12 f0       	push   $0xf0125020
f0108a1d:	6a 68                	push   $0x68
f0108a1f:	68 60 4f 12 f0       	push   $0xf0124f60
f0108a24:	e8 f1 78 ff ff       	call   f010031a <_panic>

f0108a29 <getSizeOfSharedObject>:

//==============================
// [6] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f0108a29:	55                   	push   %ebp
f0108a2a:	89 e5                	mov    %esp,%ebp
f0108a2c:	83 ec 18             	sub    $0x18,%esp
	// This function should return the size of the given shared object
	// RETURN:
	//	a) If found, return size of shared object
	//	b) Else, return E_SHARED_MEM_NOT_EXISTS
	//
	struct Share* ptr_share = get_share(ownerID, shareName);
f0108a2f:	83 ec 08             	sub    $0x8,%esp
f0108a32:	ff 75 0c             	pushl  0xc(%ebp)
f0108a35:	ff 75 08             	pushl  0x8(%ebp)
f0108a38:	e8 7e ff ff ff       	call   f01089bb <get_share>
f0108a3d:	83 c4 10             	add    $0x10,%esp
f0108a40:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (ptr_share == NULL)
f0108a43:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0108a47:	75 07                	jne    f0108a50 <getSizeOfSharedObject+0x27>
		return E_SHARED_MEM_NOT_EXISTS;
f0108a49:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0108a4e:	eb 06                	jmp    f0108a56 <getSizeOfSharedObject+0x2d>
	else
		return ptr_share->size;
f0108a50:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108a53:	8b 40 48             	mov    0x48(%eax),%eax

	return 0;
}
f0108a56:	c9                   	leave  
f0108a57:	c3                   	ret    

f0108a58 <getSharedObject>:

//======================
// [7] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0108a58:	55                   	push   %ebp
f0108a59:	89 e5                	mov    %esp,%ebp
f0108a5b:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("getSharedObject is not implemented yet");
f0108a5e:	83 ec 04             	sub    $0x4,%esp
f0108a61:	68 4c 50 12 f0       	push   $0xf012504c
f0108a66:	68 89 00 00 00       	push   $0x89
f0108a6b:	68 60 4f 12 f0       	push   $0xf0124f60
f0108a70:	e8 a5 78 ff ff       	call   f010031a <_panic>

f0108a75 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f0108a75:	55                   	push   %ebp
f0108a76:	89 e5                	mov    %esp,%ebp
f0108a78:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] BONUS
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("freeSharedObject is not implemented yet");
f0108a7b:	83 ec 04             	sub    $0x4,%esp
f0108a7e:	68 74 50 12 f0       	push   $0xf0125074
f0108a83:	68 9a 00 00 00       	push   $0x9a
f0108a88:	68 60 4f 12 f0       	push   $0xf0124f60
f0108a8d:	e8 88 78 ff ff       	call   f010031a <_panic>

f0108a92 <initialize_kheap_dynamic_allocator>:
//Remember: call the initialize_dynamic_allocator(..) to complete the initialization
//Return:
//	On success: 0
//	Otherwise (if no memory OR initial size exceed the given limit): E_NO_MEM
int initialize_kheap_dynamic_allocator(uint32 daStart, uint32 initSizeToAllocate, uint32 daLimit)
{
f0108a92:	55                   	push   %ebp
f0108a93:	89 e5                	mov    %esp,%ebp
f0108a95:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] [USER HEAP - KERNEL SIDE] initialize_kheap_dynamic_allocator
	// Write your code here, remove the panic and write your code
	panic("initialize_kheap_dynamic_allocator() is not implemented yet...!!");
f0108a98:	83 ec 04             	sub    $0x4,%esp
f0108a9b:	68 9c 50 12 f0       	push   $0xf012509c
f0108aa0:	6a 11                	push   $0x11
f0108aa2:	68 dd 50 12 f0       	push   $0xf01250dd
f0108aa7:	e8 6e 78 ff ff       	call   f010031a <_panic>

f0108aac <sbrk>:
}

void* sbrk(int numOfPages)
{
f0108aac:	55                   	push   %ebp
f0108aad:	89 e5                	mov    %esp,%ebp
	 * 	1) Allocating additional pages for a kernel dynamic allocator will fail if the free frames are exhausted
	 * 		or the break exceed the limit of the dynamic allocator. If sbrk fails, kernel should panic(...)
	 */

	//MS2: COMMENT THIS LINE BEFORE START CODING====
	return (void*)-1 ;
f0108aaf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	//====================================================

	//[PROJECT'24.MS2] Implement this function
	// Write your code here, remove the panic and write your code
	panic("sbrk() is not implemented yet...!!");
}
f0108ab4:	5d                   	pop    %ebp
f0108ab5:	c3                   	ret    

f0108ab6 <kmalloc>:


void* kmalloc(unsigned int size)
{
f0108ab6:	55                   	push   %ebp
f0108ab7:	89 e5                	mov    %esp,%ebp
f0108ab9:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] Implement this function
	// Write your code here, remove the panic and write your code
	kpanic_into_prompt("kmalloc() is not implemented yet...!!");
f0108abc:	83 ec 04             	sub    $0x4,%esp
f0108abf:	68 f0 50 12 f0       	push   $0xf01250f0
f0108ac4:	6a 2e                	push   $0x2e
f0108ac6:	68 dd 50 12 f0       	push   $0xf01250dd
f0108acb:	e8 75 79 ff ff       	call   f0100445 <_panic_into_prompt>

f0108ad0 <kfree>:
	// use "isKHeapPlacementStrategyFIRSTFIT() ..." functions to check the current strategy

}

void kfree(void* virtual_address)
{
f0108ad0:	55                   	push   %ebp
f0108ad1:	89 e5                	mov    %esp,%ebp
f0108ad3:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] Implement this function
	// Write your code here, remove the panic and write your code
	panic("kfree() is not implemented yet...!!");
f0108ad6:	83 ec 04             	sub    $0x4,%esp
f0108ad9:	68 18 51 12 f0       	push   $0xf0125118
f0108ade:	6a 38                	push   $0x38
f0108ae0:	68 dd 50 12 f0       	push   $0xf01250dd
f0108ae5:	e8 30 78 ff ff       	call   f010031a <_panic>

f0108aea <kheap_virtual_address>:
	//refer to the project presentation and documentation for details

}

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0108aea:	55                   	push   %ebp
f0108aeb:	89 e5                	mov    %esp,%ebp
f0108aed:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
	panic("kheap_virtual_address() is not implemented yet...!!");
f0108af0:	83 ec 04             	sub    $0x4,%esp
f0108af3:	68 3c 51 12 f0       	push   $0xf012513c
f0108af8:	6a 43                	push   $0x43
f0108afa:	68 dd 50 12 f0       	push   $0xf01250dd
f0108aff:	e8 16 78 ff ff       	call   f010031a <_panic>

f0108b04 <kheap_physical_address>:

	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0108b04:	55                   	push   %ebp
f0108b05:	89 e5                	mov    %esp,%ebp
f0108b07:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	panic("kheap_physical_address() is not implemented yet...!!");
f0108b0a:	83 ec 04             	sub    $0x4,%esp
f0108b0d:	68 70 51 12 f0       	push   $0xf0125170
f0108b12:	6a 4f                	push   $0x4f
f0108b14:	68 dd 50 12 f0       	push   $0xf01250dd
f0108b19:	e8 fc 77 ff ff       	call   f010031a <_panic>

f0108b1e <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f0108b1e:	55                   	push   %ebp
f0108b1f:	89 e5                	mov    %esp,%ebp
	//[PROJECT'24.MS2 BONUS2] Kernel Heap Realloc
	// Write your code here, remove the panic and write your code
	return NULL;
f0108b21:	b8 00 00 00 00       	mov    $0x0,%eax
	panic("krealloc() is not implemented yet...!!");
}
f0108b26:	5d                   	pop    %ebp
f0108b27:	c3                   	ret    

f0108b28 <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f0108b28:	55                   	push   %ebp
f0108b29:	89 e5                	mov    %esp,%ebp
f0108b2b:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108b2e:	83 ec 04             	sub    $0x4,%esp
f0108b31:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108b34:	50                   	push   %eax
f0108b35:	ff 75 0c             	pushl  0xc(%ebp)
f0108b38:	ff 75 08             	pushl  0x8(%ebp)
f0108b3b:	e8 cd f8 ff ff       	call   f010840d <get_page_table>
f0108b40:	83 c4 10             	add    $0x10,%esp
f0108b43:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f0108b46:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b49:	85 c0                	test   %eax,%eax
f0108b4b:	74 64                	je     f0108bb1 <pt_set_page_permissions+0x89>
	{
		ptr_page_table[PTX(virtual_address)] |= (permissions_to_set);
f0108b4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b50:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b53:	c1 ea 0c             	shr    $0xc,%edx
f0108b56:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108b5c:	c1 e2 02             	shl    $0x2,%edx
f0108b5f:	01 c2                	add    %eax,%edx
f0108b61:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b64:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0108b67:	c1 e9 0c             	shr    $0xc,%ecx
f0108b6a:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108b70:	c1 e1 02             	shl    $0x2,%ecx
f0108b73:	01 c8                	add    %ecx,%eax
f0108b75:	8b 00                	mov    (%eax),%eax
f0108b77:	0b 45 10             	or     0x10(%ebp),%eax
f0108b7a:	89 02                	mov    %eax,(%edx)
		ptr_page_table[PTX(virtual_address)] &= (~permissions_to_clear);
f0108b7c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108b7f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108b82:	c1 ea 0c             	shr    $0xc,%edx
f0108b85:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108b8b:	c1 e2 02             	shl    $0x2,%edx
f0108b8e:	01 d0                	add    %edx,%eax
f0108b90:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0108b93:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0108b96:	c1 e9 0c             	shr    $0xc,%ecx
f0108b99:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0108b9f:	c1 e1 02             	shl    $0x2,%ecx
f0108ba2:	01 ca                	add    %ecx,%edx
f0108ba4:	8b 12                	mov    (%edx),%edx
f0108ba6:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0108ba9:	f7 d1                	not    %ecx
f0108bab:	21 ca                	and    %ecx,%edx
f0108bad:	89 10                	mov    %edx,(%eax)
f0108baf:	eb 27                	jmp    f0108bd8 <pt_set_page_permissions+0xb0>

	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		cprintf("va=%x not exist and has no page table\n", virtual_address);
f0108bb1:	83 ec 08             	sub    $0x8,%esp
f0108bb4:	ff 75 0c             	pushl  0xc(%ebp)
f0108bb7:	68 a8 51 12 f0       	push   $0xf01251a8
f0108bbc:	e8 ab 83 ff ff       	call   f0100f6c <cprintf>
f0108bc1:	83 c4 10             	add    $0x10,%esp
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_set_page_permissions() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0108bc4:	83 ec 04             	sub    $0x4,%esp
f0108bc7:	68 d0 51 12 f0       	push   $0xf01251d0
f0108bcc:	6a 1c                	push   $0x1c
f0108bce:	68 44 52 12 f0       	push   $0xf0125244
f0108bd3:	e8 42 77 ff ff       	call   f010031a <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108bd8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108bdb:	83 ec 08             	sub    $0x8,%esp
f0108bde:	50                   	push   %eax
f0108bdf:	6a 00                	push   $0x0
f0108be1:	e8 f1 f1 ff ff       	call   f0107dd7 <tlb_invalidate>
f0108be6:	83 c4 10             	add    $0x10,%esp
}
f0108be9:	90                   	nop
f0108bea:	c9                   	leave  
f0108beb:	c3                   	ret    

f0108bec <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0108bec:	55                   	push   %ebp
f0108bed:	89 e5                	mov    %esp,%ebp
f0108bef:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108bf2:	83 ec 04             	sub    $0x4,%esp
f0108bf5:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108bf8:	50                   	push   %eax
f0108bf9:	ff 75 0c             	pushl  0xc(%ebp)
f0108bfc:	ff 75 08             	pushl  0x8(%ebp)
f0108bff:	e8 09 f8 ff ff       	call   f010840d <get_page_table>
f0108c04:	83 c4 10             	add    $0x10,%esp
f0108c07:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, return the permissions
	if (ptr_page_table != NULL)
f0108c0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c0d:	85 c0                	test   %eax,%eax
f0108c0f:	74 1d                	je     f0108c2e <pt_get_page_permissions+0x42>
	{
		//cprintf("va=%x perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
		return (ptr_page_table[PTX(virtual_address)] & 0x00000FFF);
f0108c11:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c14:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108c17:	c1 ea 0c             	shr    $0xc,%edx
f0108c1a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108c20:	c1 e2 02             	shl    $0x2,%edx
f0108c23:	01 d0                	add    %edx,%eax
f0108c25:	8b 00                	mov    (%eax),%eax
f0108c27:	25 ff 0f 00 00       	and    $0xfff,%eax
f0108c2c:	eb 05                	jmp    f0108c33 <pt_get_page_permissions+0x47>
	}
	//[3] Else, return -1
	else
	{
		//cprintf("va=%x not exist and has no page table\n", virtual_address);
		return -1;
f0108c2e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f0108c33:	c9                   	leave  
f0108c34:	c3                   	ret    

f0108c35 <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f0108c35:	55                   	push   %ebp
f0108c36:	89 e5                	mov    %esp,%ebp
f0108c38:	83 ec 18             	sub    $0x18,%esp
	//[1] Get the table
	uint32* ptr_page_table ;
	int ret = get_page_table(page_directory, virtual_address, &ptr_page_table);
f0108c3b:	83 ec 04             	sub    $0x4,%esp
f0108c3e:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0108c41:	50                   	push   %eax
f0108c42:	ff 75 0c             	pushl  0xc(%ebp)
f0108c45:	ff 75 08             	pushl  0x8(%ebp)
f0108c48:	e8 c0 f7 ff ff       	call   f010840d <get_page_table>
f0108c4d:	83 c4 10             	add    $0x10,%esp
f0108c50:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//[2] If exists, update permissions
	if (ptr_page_table != NULL)
f0108c53:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c56:	85 c0                	test   %eax,%eax
f0108c58:	74 46                	je     f0108ca0 <pt_clear_page_table_entry+0x6b>
	{
		cprintf("va=%x before clearing has perm = %x\n", virtual_address, ptr_page_table[PTX(virtual_address)]);
f0108c5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c5d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108c60:	c1 ea 0c             	shr    $0xc,%edx
f0108c63:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108c69:	c1 e2 02             	shl    $0x2,%edx
f0108c6c:	01 d0                	add    %edx,%eax
f0108c6e:	8b 00                	mov    (%eax),%eax
f0108c70:	83 ec 04             	sub    $0x4,%esp
f0108c73:	50                   	push   %eax
f0108c74:	ff 75 0c             	pushl  0xc(%ebp)
f0108c77:	68 60 52 12 f0       	push   $0xf0125260
f0108c7c:	e8 eb 82 ff ff       	call   f0100f6c <cprintf>
f0108c81:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0108c84:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108c87:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108c8a:	c1 ea 0c             	shr    $0xc,%edx
f0108c8d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0108c93:	c1 e2 02             	shl    $0x2,%edx
f0108c96:	01 d0                	add    %edx,%eax
f0108c98:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108c9e:	eb 14                	jmp    f0108cb4 <pt_clear_page_table_entry+0x7f>
	}
	//[3] Else, should "panic" since the table should be exist
	else
	{
		//cprintf("[%s] va = %x\n", ptr_env->prog_name, virtual_address) ;
		panic("function pt_clear_page_table_entry() called with invalid virtual address. The corresponding page table doesn't exist\n") ;
f0108ca0:	83 ec 04             	sub    $0x4,%esp
f0108ca3:	68 88 52 12 f0       	push   $0xf0125288
f0108ca8:	6a 47                	push   $0x47
f0108caa:	68 44 52 12 f0       	push   $0xf0125244
f0108caf:	e8 66 76 ff ff       	call   f010031a <_panic>
	}

	//[4] Invalidate the cache memory (TLB) [call tlb_invalidate(..)]
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108cb4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108cb7:	83 ec 08             	sub    $0x8,%esp
f0108cba:	50                   	push   %eax
f0108cbb:	6a 00                	push   $0x0
f0108cbd:	e8 15 f1 ff ff       	call   f0107dd7 <tlb_invalidate>
f0108cc2:	83 c4 10             	add    $0x10,%esp
}
f0108cc5:	90                   	nop
f0108cc6:	c9                   	leave  
f0108cc7:	c3                   	ret    

f0108cc8 <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f0108cc8:	55                   	push   %ebp
f0108cc9:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0108ccb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108cce:	c1 e8 16             	shr    $0x16,%eax
f0108cd1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108cd8:	8b 45 08             	mov    0x8(%ebp),%eax
f0108cdb:	01 d0                	add    %edx,%eax
f0108cdd:	8b 00                	mov    (%eax),%eax
f0108cdf:	83 e0 20             	and    $0x20,%eax
f0108ce2:	85 c0                	test   %eax,%eax
f0108ce4:	0f 95 c0             	setne  %al
f0108ce7:	0f b6 c0             	movzbl %al,%eax
}
f0108cea:	5d                   	pop    %ebp
f0108ceb:	c3                   	ret    

f0108cec <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f0108cec:	55                   	push   %ebp
f0108ced:	89 e5                	mov    %esp,%ebp
f0108cef:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f0108cf2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108cf5:	c1 e8 16             	shr    $0x16,%eax
f0108cf8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108cff:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d02:	01 d0                	add    %edx,%eax
f0108d04:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108d07:	c1 ea 16             	shr    $0x16,%edx
f0108d0a:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0108d11:	8b 55 08             	mov    0x8(%ebp),%edx
f0108d14:	01 ca                	add    %ecx,%edx
f0108d16:	8b 12                	mov    (%edx),%edx
f0108d18:	83 e2 df             	and    $0xffffffdf,%edx
f0108d1b:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0108d1d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108d20:	83 ec 08             	sub    $0x8,%esp
f0108d23:	50                   	push   %eax
f0108d24:	6a 00                	push   $0x0
f0108d26:	e8 ac f0 ff ff       	call   f0107dd7 <tlb_invalidate>
f0108d2b:	83 c4 10             	add    $0x10,%esp
}
f0108d2e:	90                   	nop
f0108d2f:	c9                   	leave  
f0108d30:	c3                   	ret    

f0108d31 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f0108d31:	55                   	push   %ebp
f0108d32:	89 e5                	mov    %esp,%ebp
f0108d34:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f0108d37:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108d3a:	c1 e8 16             	shr    $0x16,%eax
f0108d3d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0108d44:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d47:	01 d0                	add    %edx,%eax
f0108d49:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0108d4f:	0f 20 d8             	mov    %cr3,%eax
f0108d52:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0108d55:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108d58:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0108d5b:	90                   	nop
f0108d5c:	c9                   	leave  
f0108d5d:	c3                   	ret    

f0108d5e <env_page_ws_get_size>:
		}
	}
}
#else
inline uint32 env_page_ws_get_size(struct Env *e)
{
f0108d5e:	55                   	push   %ebp
f0108d5f:	89 e5                	mov    %esp,%ebp
f0108d61:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0108d64:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0108d6b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0108d72:	eb 22                	jmp    f0108d96 <env_page_ws_get_size+0x38>
f0108d74:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108d77:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0108d7a:	89 d0                	mov    %edx,%eax
f0108d7c:	01 c0                	add    %eax,%eax
f0108d7e:	01 d0                	add    %edx,%eax
f0108d80:	c1 e0 03             	shl    $0x3,%eax
f0108d83:	01 c8                	add    %ecx,%eax
f0108d85:	05 8c 00 00 00       	add    $0x8c,%eax
f0108d8a:	8a 00                	mov    (%eax),%al
f0108d8c:	84 c0                	test   %al,%al
f0108d8e:	75 03                	jne    f0108d93 <env_page_ws_get_size+0x35>
f0108d90:	ff 45 f8             	incl   -0x8(%ebp)
f0108d93:	ff 45 fc             	incl   -0x4(%ebp)
f0108d96:	8b 45 08             	mov    0x8(%ebp),%eax
f0108d99:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f0108d9f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0108da2:	39 c2                	cmp    %eax,%edx
f0108da4:	77 ce                	ja     f0108d74 <env_page_ws_get_size+0x16>
	return counter;
f0108da6:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0108da9:	c9                   	leave  
f0108daa:	c3                   	ret    

f0108dab <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0108dab:	55                   	push   %ebp
f0108dac:	89 e5                	mov    %esp,%ebp
f0108dae:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0108db1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0108db8:	eb 4e                	jmp    f0108e08 <env_page_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f0108dba:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108dbd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0108dc0:	89 d0                	mov    %edx,%eax
f0108dc2:	01 c0                	add    %eax,%eax
f0108dc4:	01 d0                	add    %edx,%eax
f0108dc6:	c1 e0 03             	shl    $0x3,%eax
f0108dc9:	01 c8                	add    %ecx,%eax
f0108dcb:	05 88 00 00 00       	add    $0x88,%eax
f0108dd0:	8b 00                	mov    (%eax),%eax
f0108dd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0108dd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0108dd8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108ddd:	89 c2                	mov    %eax,%edx
f0108ddf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108de2:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108de5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0108de8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108ded:	39 c2                	cmp    %eax,%edx
f0108def:	75 14                	jne    f0108e05 <env_page_ws_invalidate+0x5a>
		{
			env_page_ws_clear_entry(e, i);
f0108df1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108df4:	83 ec 08             	sub    $0x8,%esp
f0108df7:	50                   	push   %eax
f0108df8:	ff 75 08             	pushl  0x8(%ebp)
f0108dfb:	e8 ce 00 00 00       	call   f0108ece <env_page_ws_clear_entry>
f0108e00:	83 c4 10             	add    $0x10,%esp
			break;
f0108e03:	eb 13                	jmp    f0108e18 <env_page_ws_invalidate+0x6d>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f0108e05:	ff 45 f4             	incl   -0xc(%ebp)
f0108e08:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e0b:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f0108e11:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108e14:	39 c2                	cmp    %eax,%edx
f0108e16:	77 a2                	ja     f0108dba <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f0108e18:	90                   	nop
f0108e19:	c9                   	leave  
f0108e1a:	c3                   	ret    

f0108e1b <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0108e1b:	55                   	push   %ebp
f0108e1c:	89 e5                	mov    %esp,%ebp
f0108e1e:	53                   	push   %ebx
f0108e1f:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f0108e22:	8b 45 08             	mov    0x8(%ebp),%eax
f0108e25:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0108e2b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108e2e:	77 19                	ja     f0108e49 <env_page_ws_set_entry+0x2e>
f0108e30:	68 00 53 12 f0       	push   $0xf0125300
f0108e35:	68 36 53 12 f0       	push   $0xf0125336
f0108e3a:	68 a7 00 00 00       	push   $0xa7
f0108e3f:	68 4c 53 12 f0       	push   $0xf012534c
f0108e44:	e8 d1 74 ff ff       	call   f010031a <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0108e49:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0108e50:	76 19                	jbe    f0108e6b <env_page_ws_set_entry+0x50>
f0108e52:	68 6c 53 12 f0       	push   $0xf012536c
f0108e57:	68 36 53 12 f0       	push   $0xf0125336
f0108e5c:	68 a8 00 00 00       	push   $0xa8
f0108e61:	68 4c 53 12 f0       	push   $0xf012534c
f0108e66:	e8 af 74 ff ff       	call   f010031a <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f0108e6b:	8b 45 10             	mov    0x10(%ebp),%eax
f0108e6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108e71:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108e74:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108e79:	89 c1                	mov    %eax,%ecx
f0108e7b:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0108e7e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108e81:	89 d0                	mov    %edx,%eax
f0108e83:	01 c0                	add    %eax,%eax
f0108e85:	01 d0                	add    %edx,%eax
f0108e87:	c1 e0 03             	shl    $0x3,%eax
f0108e8a:	01 d8                	add    %ebx,%eax
f0108e8c:	05 88 00 00 00       	add    $0x88,%eax
f0108e91:	89 08                	mov    %ecx,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0108e93:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108e96:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108e99:	89 d0                	mov    %edx,%eax
f0108e9b:	01 c0                	add    %eax,%eax
f0108e9d:	01 d0                	add    %edx,%eax
f0108e9f:	c1 e0 03             	shl    $0x3,%eax
f0108ea2:	01 c8                	add    %ecx,%eax
f0108ea4:	05 8c 00 00 00       	add    $0x8c,%eax
f0108ea9:	c6 00 00             	movb   $0x0,(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f0108eac:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108eaf:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108eb2:	89 d0                	mov    %edx,%eax
f0108eb4:	01 c0                	add    %eax,%eax
f0108eb6:	01 d0                	add    %edx,%eax
f0108eb8:	c1 e0 03             	shl    $0x3,%eax
f0108ebb:	01 c8                	add    %ecx,%eax
f0108ebd:	05 90 00 00 00       	add    $0x90,%eax
f0108ec2:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0108ec8:	90                   	nop
}
f0108ec9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0108ecc:	c9                   	leave  
f0108ecd:	c3                   	ret    

f0108ece <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0108ece:	55                   	push   %ebp
f0108ecf:	89 e5                	mov    %esp,%ebp
f0108ed1:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108ed4:	8b 45 08             	mov    0x8(%ebp),%eax
f0108ed7:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0108edd:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108ee0:	77 19                	ja     f0108efb <env_page_ws_clear_entry+0x2d>
f0108ee2:	68 a0 53 12 f0       	push   $0xf01253a0
f0108ee7:	68 36 53 12 f0       	push   $0xf0125336
f0108eec:	68 b3 00 00 00       	push   $0xb3
f0108ef1:	68 4c 53 12 f0       	push   $0xf012534c
f0108ef6:	e8 1f 74 ff ff       	call   f010031a <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f0108efb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108efe:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f01:	89 d0                	mov    %edx,%eax
f0108f03:	01 c0                	add    %eax,%eax
f0108f05:	01 d0                	add    %edx,%eax
f0108f07:	c1 e0 03             	shl    $0x3,%eax
f0108f0a:	01 c8                	add    %ecx,%eax
f0108f0c:	05 88 00 00 00       	add    $0x88,%eax
f0108f11:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f0108f17:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108f1a:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f1d:	89 d0                	mov    %edx,%eax
f0108f1f:	01 c0                	add    %eax,%eax
f0108f21:	01 d0                	add    %edx,%eax
f0108f23:	c1 e0 03             	shl    $0x3,%eax
f0108f26:	01 c8                	add    %ecx,%eax
f0108f28:	05 8c 00 00 00       	add    $0x8c,%eax
f0108f2d:	c6 00 01             	movb   $0x1,(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f0108f30:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108f33:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f36:	89 d0                	mov    %edx,%eax
f0108f38:	01 c0                	add    %eax,%eax
f0108f3a:	01 d0                	add    %edx,%eax
f0108f3c:	c1 e0 03             	shl    $0x3,%eax
f0108f3f:	01 c8                	add    %ecx,%eax
f0108f41:	05 90 00 00 00       	add    $0x90,%eax
f0108f46:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0108f4c:	90                   	nop
f0108f4d:	c9                   	leave  
f0108f4e:	c3                   	ret    

f0108f4f <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0108f4f:	55                   	push   %ebp
f0108f50:	89 e5                	mov    %esp,%ebp
f0108f52:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108f55:	8b 45 08             	mov    0x8(%ebp),%eax
f0108f58:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0108f5e:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108f61:	77 19                	ja     f0108f7c <env_page_ws_get_virtual_address+0x2d>
f0108f63:	68 a0 53 12 f0       	push   $0xf01253a0
f0108f68:	68 36 53 12 f0       	push   $0xf0125336
f0108f6d:	68 bb 00 00 00       	push   $0xbb
f0108f72:	68 4c 53 12 f0       	push   $0xf012534c
f0108f77:	e8 9e 73 ff ff       	call   f010031a <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f0108f7c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108f7f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108f82:	89 d0                	mov    %edx,%eax
f0108f84:	01 c0                	add    %eax,%eax
f0108f86:	01 d0                	add    %edx,%eax
f0108f88:	c1 e0 03             	shl    $0x3,%eax
f0108f8b:	01 c8                	add    %ecx,%eax
f0108f8d:	05 88 00 00 00       	add    $0x88,%eax
f0108f92:	8b 00                	mov    (%eax),%eax
f0108f94:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0108f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108f9a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0108f9f:	c9                   	leave  
f0108fa0:	c3                   	ret    

f0108fa1 <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0108fa1:	55                   	push   %ebp
f0108fa2:	89 e5                	mov    %esp,%ebp
f0108fa4:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0108fa7:	8b 45 08             	mov    0x8(%ebp),%eax
f0108faa:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0108fb0:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0108fb3:	77 19                	ja     f0108fce <env_page_ws_get_time_stamp+0x2d>
f0108fb5:	68 a0 53 12 f0       	push   $0xf01253a0
f0108fba:	68 36 53 12 f0       	push   $0xf0125336
f0108fbf:	68 c1 00 00 00       	push   $0xc1
f0108fc4:	68 4c 53 12 f0       	push   $0xf012534c
f0108fc9:	e8 4c 73 ff ff       	call   f010031a <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0108fce:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108fd1:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108fd4:	89 d0                	mov    %edx,%eax
f0108fd6:	01 c0                	add    %eax,%eax
f0108fd8:	01 d0                	add    %edx,%eax
f0108fda:	c1 e0 03             	shl    $0x3,%eax
f0108fdd:	01 c8                	add    %ecx,%eax
f0108fdf:	05 90 00 00 00       	add    $0x90,%eax
f0108fe4:	8b 00                	mov    (%eax),%eax
}
f0108fe6:	c9                   	leave  
f0108fe7:	c3                   	ret    

f0108fe8 <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0108fe8:	55                   	push   %ebp
f0108fe9:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f0108feb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108fee:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108ff1:	89 d0                	mov    %edx,%eax
f0108ff3:	01 c0                	add    %eax,%eax
f0108ff5:	01 d0                	add    %edx,%eax
f0108ff7:	c1 e0 03             	shl    $0x3,%eax
f0108ffa:	01 c8                	add    %ecx,%eax
f0108ffc:	05 8c 00 00 00       	add    $0x8c,%eax
f0109001:	8a 00                	mov    (%eax),%al
f0109003:	0f b6 c0             	movzbl %al,%eax
}
f0109006:	5d                   	pop    %ebp
f0109007:	c3                   	ret    

f0109008 <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f0109008:	55                   	push   %ebp
f0109009:	89 e5                	mov    %esp,%ebp
f010900b:	53                   	push   %ebx
f010900c:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010900f:	83 ec 0c             	sub    $0xc,%esp
f0109012:	6a 02                	push   $0x2
f0109014:	e8 ad 56 00 00       	call   f010e6c6 <isPageReplacmentAlgorithmLRU>
f0109019:	83 c4 10             	add    $0x10,%esp
f010901c:	85 c0                	test   %eax,%eax
f010901e:	0f 84 fe 00 00 00    	je     f0109122 <env_page_ws_print+0x11a>
	{
		int i = 0;
f0109024:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f010902b:	83 ec 0c             	sub    $0xc,%esp
f010902e:	68 d8 53 12 f0       	push   $0xf01253d8
f0109033:	e8 34 7f ff ff       	call   f0100f6c <cprintf>
f0109038:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f010903b:	8b 45 08             	mov    0x8(%ebp),%eax
f010903e:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f0109044:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0109047:	eb 2c                	jmp    f0109075 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0109049:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010904c:	8b 10                	mov    (%eax),%edx
f010904e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109051:	8d 48 01             	lea    0x1(%eax),%ecx
f0109054:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0109057:	83 ec 04             	sub    $0x4,%esp
f010905a:	52                   	push   %edx
f010905b:	50                   	push   %eax
f010905c:	68 f2 53 12 f0       	push   $0xf01253f2
f0109061:	e8 06 7f ff ff       	call   f0100f6c <cprintf>
f0109066:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f0109069:	8b 45 08             	mov    0x8(%ebp),%eax
f010906c:	8b 80 18 da 01 00    	mov    0x1da18(%eax),%eax
f0109072:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0109075:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0109079:	74 08                	je     f0109083 <env_page_ws_print+0x7b>
f010907b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010907e:	8b 40 10             	mov    0x10(%eax),%eax
f0109081:	eb 05                	jmp    f0109088 <env_page_ws_print+0x80>
f0109083:	b8 00 00 00 00       	mov    $0x0,%eax
f0109088:	8b 55 08             	mov    0x8(%ebp),%edx
f010908b:	89 82 18 da 01 00    	mov    %eax,0x1da18(%edx)
f0109091:	8b 45 08             	mov    0x8(%ebp),%eax
f0109094:	8b 80 18 da 01 00    	mov    0x1da18(%eax),%eax
f010909a:	85 c0                	test   %eax,%eax
f010909c:	75 ab                	jne    f0109049 <env_page_ws_print+0x41>
f010909e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01090a2:	75 a5                	jne    f0109049 <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f01090a4:	83 ec 0c             	sub    $0xc,%esp
f01090a7:	68 fa 53 12 f0       	push   $0xf01253fa
f01090ac:	e8 bb 7e ff ff       	call   f0100f6c <cprintf>
f01090b1:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01090b4:	8b 45 08             	mov    0x8(%ebp),%eax
f01090b7:	8b 80 20 da 01 00    	mov    0x1da20(%eax),%eax
f01090bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01090c0:	eb 2c                	jmp    f01090ee <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01090c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01090c5:	8b 10                	mov    (%eax),%edx
f01090c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01090ca:	8d 48 01             	lea    0x1(%eax),%ecx
f01090cd:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01090d0:	83 ec 04             	sub    $0x4,%esp
f01090d3:	52                   	push   %edx
f01090d4:	50                   	push   %eax
f01090d5:	68 f2 53 12 f0       	push   $0xf01253f2
f01090da:	e8 8d 7e ff ff       	call   f0100f6c <cprintf>
f01090df:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f01090e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01090e5:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f01090eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01090ee:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01090f2:	74 08                	je     f01090fc <env_page_ws_print+0xf4>
f01090f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01090f7:	8b 40 10             	mov    0x10(%eax),%eax
f01090fa:	eb 05                	jmp    f0109101 <env_page_ws_print+0xf9>
f01090fc:	b8 00 00 00 00       	mov    $0x0,%eax
f0109101:	8b 55 08             	mov    0x8(%ebp),%edx
f0109104:	89 82 28 da 01 00    	mov    %eax,0x1da28(%edx)
f010910a:	8b 45 08             	mov    0x8(%ebp),%eax
f010910d:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f0109113:	85 c0                	test   %eax,%eax
f0109115:	75 ab                	jne    f01090c2 <env_page_ws_print+0xba>
f0109117:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010911b:	75 a5                	jne    f01090c2 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f010911d:	e9 9f 01 00 00       	jmp    f01092c1 <env_page_ws_print+0x2b9>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f0109122:	83 ec 0c             	sub    $0xc,%esp
f0109125:	68 15 54 12 f0       	push   $0xf0125415
f010912a:	e8 3d 7e ff ff       	call   f0100f6c <cprintf>
f010912f:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0109132:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0109139:	e9 71 01 00 00       	jmp    f01092af <env_page_ws_print+0x2a7>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f010913e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109141:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109144:	89 d0                	mov    %edx,%eax
f0109146:	01 c0                	add    %eax,%eax
f0109148:	01 d0                	add    %edx,%eax
f010914a:	c1 e0 03             	shl    $0x3,%eax
f010914d:	01 c8                	add    %ecx,%eax
f010914f:	05 8c 00 00 00       	add    $0x8c,%eax
f0109154:	8a 00                	mov    (%eax),%al
f0109156:	84 c0                	test   %al,%al
f0109158:	74 43                	je     f010919d <env_page_ws_print+0x195>
			{
				cprintf("EMPTY LOCATION");
f010915a:	83 ec 0c             	sub    $0xc,%esp
f010915d:	68 1f 54 12 f0       	push   $0xf012541f
f0109162:	e8 05 7e ff ff       	call   f0100f6c <cprintf>
f0109167:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f010916a:	8b 45 08             	mov    0x8(%ebp),%eax
f010916d:	8b 80 58 d5 01 00    	mov    0x1d558(%eax),%eax
f0109173:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0109176:	75 10                	jne    f0109188 <env_page_ws_print+0x180>
				{
					cprintf("		<--");
f0109178:	83 ec 0c             	sub    $0xc,%esp
f010917b:	68 2e 54 12 f0       	push   $0xf012542e
f0109180:	e8 e7 7d ff ff       	call   f0100f6c <cprintf>
f0109185:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f0109188:	83 ec 0c             	sub    $0xc,%esp
f010918b:	68 34 54 12 f0       	push   $0xf0125434
f0109190:	e8 d7 7d ff ff       	call   f0100f6c <cprintf>
f0109195:	83 c4 10             	add    $0x10,%esp
				continue;
f0109198:	e9 0f 01 00 00       	jmp    f01092ac <env_page_ws_print+0x2a4>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010919d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01091a0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01091a3:	89 d0                	mov    %edx,%eax
f01091a5:	01 c0                	add    %eax,%eax
f01091a7:	01 d0                	add    %edx,%eax
f01091a9:	c1 e0 03             	shl    $0x3,%eax
f01091ac:	01 c8                	add    %ecx,%eax
f01091ae:	05 88 00 00 00       	add    $0x88,%eax
f01091b3:	8b 00                	mov    (%eax),%eax
f01091b5:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f01091b8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01091bb:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01091be:	89 d0                	mov    %edx,%eax
f01091c0:	01 c0                	add    %eax,%eax
f01091c2:	01 d0                	add    %edx,%eax
f01091c4:	c1 e0 03             	shl    $0x3,%eax
f01091c7:	01 c8                	add    %ecx,%eax
f01091c9:	05 90 00 00 00       	add    $0x90,%eax
f01091ce:	8b 00                	mov    (%eax),%eax
f01091d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f01091d3:	8b 45 08             	mov    0x8(%ebp),%eax
f01091d6:	8b 40 64             	mov    0x64(%eax),%eax
f01091d9:	83 ec 08             	sub    $0x8,%esp
f01091dc:	ff 75 e8             	pushl  -0x18(%ebp)
f01091df:	50                   	push   %eax
f01091e0:	e8 07 fa ff ff       	call   f0108bec <pt_get_page_permissions>
f01091e5:	83 c4 10             	add    $0x10,%esp
f01091e8:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f01091eb:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01091ee:	83 e0 40             	and    $0x40,%eax
f01091f1:	85 c0                	test   %eax,%eax
f01091f3:	0f 95 c0             	setne  %al
f01091f6:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f01091f9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01091fc:	83 e0 20             	and    $0x20,%eax
f01091ff:	85 c0                	test   %eax,%eax
f0109201:	0f 95 c0             	setne  %al
f0109204:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f0109207:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010920a:	25 00 02 00 00       	and    $0x200,%eax
f010920f:	85 c0                	test   %eax,%eax
f0109211:	0f 95 c0             	setne  %al
f0109214:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f0109217:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010921a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010921d:	89 d0                	mov    %edx,%eax
f010921f:	01 c0                	add    %eax,%eax
f0109221:	01 d0                	add    %edx,%eax
f0109223:	c1 e0 03             	shl    $0x3,%eax
f0109226:	01 c8                	add    %ecx,%eax
f0109228:	05 88 00 00 00       	add    $0x88,%eax
f010922d:	8b 00                	mov    (%eax),%eax
f010922f:	83 ec 04             	sub    $0x4,%esp
f0109232:	50                   	push   %eax
f0109233:	ff 75 ec             	pushl  -0x14(%ebp)
f0109236:	68 36 54 12 f0       	push   $0xf0125436
f010923b:	e8 2c 7d ff ff       	call   f0100f6c <cprintf>
f0109240:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f0109243:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109246:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109249:	89 d0                	mov    %edx,%eax
f010924b:	01 c0                	add    %eax,%eax
f010924d:	01 d0                	add    %edx,%eax
f010924f:	c1 e0 03             	shl    $0x3,%eax
f0109252:	01 c8                	add    %ecx,%eax
f0109254:	05 94 00 00 00       	add    $0x94,%eax
f0109259:	8b 18                	mov    (%eax),%ebx
f010925b:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f010925f:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f0109263:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f0109267:	83 ec 08             	sub    $0x8,%esp
f010926a:	53                   	push   %ebx
f010926b:	ff 75 e4             	pushl  -0x1c(%ebp)
f010926e:	51                   	push   %ecx
f010926f:	52                   	push   %edx
f0109270:	50                   	push   %eax
f0109271:	68 48 54 12 f0       	push   $0xf0125448
f0109276:	e8 f1 7c ff ff       	call   f0100f6c <cprintf>
f010927b:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f010927e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109281:	8b 80 58 d5 01 00    	mov    0x1d558(%eax),%eax
f0109287:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010928a:	75 10                	jne    f010929c <env_page_ws_print+0x294>
			{
				cprintf(" <--");
f010928c:	83 ec 0c             	sub    $0xc,%esp
f010928f:	68 8f 54 12 f0       	push   $0xf012548f
f0109294:	e8 d3 7c ff ff       	call   f0100f6c <cprintf>
f0109299:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f010929c:	83 ec 0c             	sub    $0xc,%esp
f010929f:	68 34 54 12 f0       	push   $0xf0125434
f01092a4:	e8 c3 7c ff ff       	call   f0100f6c <cprintf>
f01092a9:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f01092ac:	ff 45 ec             	incl   -0x14(%ebp)
f01092af:	8b 45 08             	mov    0x8(%ebp),%eax
f01092b2:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01092b8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01092bb:	0f 87 7d fe ff ff    	ja     f010913e <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f01092c1:	90                   	nop
f01092c2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01092c5:	c9                   	leave  
f01092c6:	c3                   	ret    

f01092c7 <env_table_ws_print>:
#endif
// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f01092c7:	55                   	push   %ebp
f01092c8:	89 e5                	mov    %esp,%ebp
f01092ca:	53                   	push   %ebx
f01092cb:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f01092ce:	83 ec 0c             	sub    $0xc,%esp
f01092d1:	68 94 54 12 f0       	push   $0xf0125494
f01092d6:	e8 91 7c ff ff       	call   f0100f6c <cprintf>
f01092db:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f01092de:	83 ec 0c             	sub    $0xc,%esp
f01092e1:	68 c9 54 12 f0       	push   $0xf01254c9
f01092e6:	e8 81 7c ff ff       	call   f0100f6c <cprintf>
f01092eb:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f01092ee:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01092f5:	e9 16 01 00 00       	jmp    f0109410 <env_table_ws_print+0x149>
	{
		if (e->__ptr_tws[i].empty)
f01092fa:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01092fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109300:	89 d0                	mov    %edx,%eax
f0109302:	01 c0                	add    %eax,%eax
f0109304:	01 d0                	add    %edx,%eax
f0109306:	c1 e0 03             	shl    $0x3,%eax
f0109309:	01 c8                	add    %ecx,%eax
f010930b:	05 60 d5 01 00       	add    $0x1d560,%eax
f0109310:	8a 00                	mov    (%eax),%al
f0109312:	84 c0                	test   %al,%al
f0109314:	74 43                	je     f0109359 <env_table_ws_print+0x92>
		{
			cprintf("EMPTY LOCATION");
f0109316:	83 ec 0c             	sub    $0xc,%esp
f0109319:	68 1f 54 12 f0       	push   $0xf012541f
f010931e:	e8 49 7c ff ff       	call   f0100f6c <cprintf>
f0109323:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f0109326:	8b 45 08             	mov    0x8(%ebp),%eax
f0109329:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f010932f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0109332:	75 10                	jne    f0109344 <env_table_ws_print+0x7d>
			{
				cprintf("		<--");
f0109334:	83 ec 0c             	sub    $0xc,%esp
f0109337:	68 2e 54 12 f0       	push   $0xf012542e
f010933c:	e8 2b 7c ff ff       	call   f0100f6c <cprintf>
f0109341:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0109344:	83 ec 0c             	sub    $0xc,%esp
f0109347:	68 34 54 12 f0       	push   $0xf0125434
f010934c:	e8 1b 7c ff ff       	call   f0100f6c <cprintf>
f0109351:	83 c4 10             	add    $0x10,%esp
			continue;
f0109354:	e9 b4 00 00 00       	jmp    f010940d <env_table_ws_print+0x146>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f0109359:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010935c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010935f:	89 d0                	mov    %edx,%eax
f0109361:	01 c0                	add    %eax,%eax
f0109363:	01 d0                	add    %edx,%eax
f0109365:	c1 e0 03             	shl    $0x3,%eax
f0109368:	01 c8                	add    %ecx,%eax
f010936a:	05 5c d5 01 00       	add    $0x1d55c,%eax
f010936f:	8b 00                	mov    (%eax),%eax
f0109371:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f0109374:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109377:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010937a:	89 d0                	mov    %edx,%eax
f010937c:	01 c0                	add    %eax,%eax
f010937e:	01 d0                	add    %edx,%eax
f0109380:	c1 e0 03             	shl    $0x3,%eax
f0109383:	01 c8                	add    %ecx,%eax
f0109385:	05 5c d5 01 00       	add    $0x1d55c,%eax
f010938a:	8b 00                	mov    (%eax),%eax
f010938c:	83 ec 04             	sub    $0x4,%esp
f010938f:	50                   	push   %eax
f0109390:	ff 75 f4             	pushl  -0xc(%ebp)
f0109393:	68 d4 54 12 f0       	push   $0xf01254d4
f0109398:	e8 cf 7b ff ff       	call   f0100f6c <cprintf>
f010939d:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f01093a0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01093a3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01093a6:	89 d0                	mov    %edx,%eax
f01093a8:	01 c0                	add    %eax,%eax
f01093aa:	01 d0                	add    %edx,%eax
f01093ac:	c1 e0 03             	shl    $0x3,%eax
f01093af:	01 c8                	add    %ecx,%eax
f01093b1:	05 64 d5 01 00       	add    $0x1d564,%eax
f01093b6:	8b 18                	mov    (%eax),%ebx
f01093b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01093bb:	8b 40 64             	mov    0x64(%eax),%eax
f01093be:	83 ec 08             	sub    $0x8,%esp
f01093c1:	ff 75 f0             	pushl  -0x10(%ebp)
f01093c4:	50                   	push   %eax
f01093c5:	e8 fe f8 ff ff       	call   f0108cc8 <pd_is_table_used>
f01093ca:	83 c4 10             	add    $0x10,%esp
f01093cd:	83 ec 04             	sub    $0x4,%esp
f01093d0:	53                   	push   %ebx
f01093d1:	50                   	push   %eax
f01093d2:	68 ec 54 12 f0       	push   $0xf01254ec
f01093d7:	e8 90 7b ff ff       	call   f0100f6c <cprintf>
f01093dc:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f01093df:	8b 45 08             	mov    0x8(%ebp),%eax
f01093e2:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f01093e8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01093eb:	75 10                	jne    f01093fd <env_table_ws_print+0x136>
		{
			cprintf(" <--");
f01093ed:	83 ec 0c             	sub    $0xc,%esp
f01093f0:	68 8f 54 12 f0       	push   $0xf012548f
f01093f5:	e8 72 7b ff ff       	call   f0100f6c <cprintf>
f01093fa:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f01093fd:	83 ec 0c             	sub    $0xc,%esp
f0109400:	68 34 54 12 f0       	push   $0xf0125434
f0109405:	e8 62 7b ff ff       	call   f0100f6c <cprintf>
f010940a:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f010940d:	ff 45 f4             	incl   -0xc(%ebp)
f0109410:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0109414:	0f 86 e0 fe ff ff    	jbe    f01092fa <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f010941a:	90                   	nop
f010941b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010941e:	c9                   	leave  
f010941f:	c3                   	ret    

f0109420 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0109420:	55                   	push   %ebp
f0109421:	89 e5                	mov    %esp,%ebp
f0109423:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0109426:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f010942d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f0109434:	eb 22                	jmp    f0109458 <env_table_ws_get_size+0x38>
f0109436:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109439:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010943c:	89 d0                	mov    %edx,%eax
f010943e:	01 c0                	add    %eax,%eax
f0109440:	01 d0                	add    %edx,%eax
f0109442:	c1 e0 03             	shl    $0x3,%eax
f0109445:	01 c8                	add    %ecx,%eax
f0109447:	05 60 d5 01 00       	add    $0x1d560,%eax
f010944c:	8a 00                	mov    (%eax),%al
f010944e:	84 c0                	test   %al,%al
f0109450:	75 03                	jne    f0109455 <env_table_ws_get_size+0x35>
f0109452:	ff 45 f8             	incl   -0x8(%ebp)
f0109455:	ff 45 fc             	incl   -0x4(%ebp)
f0109458:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f010945c:	7e d8                	jle    f0109436 <env_table_ws_get_size+0x16>
	return counter;
f010945e:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0109461:	c9                   	leave  
f0109462:	c3                   	ret    

f0109463 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0109463:	55                   	push   %ebp
f0109464:	89 e5                	mov    %esp,%ebp
f0109466:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0109469:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f0109470:	eb 4e                	jmp    f01094c0 <env_table_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f0109472:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109475:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109478:	89 d0                	mov    %edx,%eax
f010947a:	01 c0                	add    %eax,%eax
f010947c:	01 d0                	add    %edx,%eax
f010947e:	c1 e0 03             	shl    $0x3,%eax
f0109481:	01 c8                	add    %ecx,%eax
f0109483:	05 5c d5 01 00       	add    $0x1d55c,%eax
f0109488:	8b 00                	mov    (%eax),%eax
f010948a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010948d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109490:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0109495:	89 c2                	mov    %eax,%edx
f0109497:	8b 45 0c             	mov    0xc(%ebp),%eax
f010949a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010949d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01094a0:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f01094a5:	39 c2                	cmp    %eax,%edx
f01094a7:	75 14                	jne    f01094bd <env_table_ws_invalidate+0x5a>
		{
			env_table_ws_clear_entry(e, i);
f01094a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01094ac:	83 ec 08             	sub    $0x8,%esp
f01094af:	50                   	push   %eax
f01094b0:	ff 75 08             	pushl  0x8(%ebp)
f01094b3:	e8 bc 00 00 00       	call   f0109574 <env_table_ws_clear_entry>
f01094b8:	83 c4 10             	add    $0x10,%esp
			break;
f01094bb:	eb 09                	jmp    f01094c6 <env_table_ws_invalidate+0x63>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f01094bd:	ff 45 f4             	incl   -0xc(%ebp)
f01094c0:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f01094c4:	7e ac                	jle    f0109472 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f01094c6:	90                   	nop
f01094c7:	c9                   	leave  
f01094c8:	c3                   	ret    

f01094c9 <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01094c9:	55                   	push   %ebp
f01094ca:	89 e5                	mov    %esp,%ebp
f01094cc:	53                   	push   %ebx
f01094cd:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01094d0:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01094d4:	76 19                	jbe    f01094ef <env_table_ws_set_entry+0x26>
f01094d6:	68 10 55 12 f0       	push   $0xf0125510
f01094db:	68 36 53 12 f0       	push   $0xf0125336
f01094e0:	68 37 01 00 00       	push   $0x137
f01094e5:	68 4c 53 12 f0       	push   $0xf012534c
f01094ea:	e8 2b 6e ff ff       	call   f010031a <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01094ef:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f01094f6:	76 19                	jbe    f0109511 <env_table_ws_set_entry+0x48>
f01094f8:	68 6c 53 12 f0       	push   $0xf012536c
f01094fd:	68 36 53 12 f0       	push   $0xf0125336
f0109502:	68 38 01 00 00       	push   $0x138
f0109507:	68 4c 53 12 f0       	push   $0xf012534c
f010950c:	e8 09 6e ff ff       	call   f010031a <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0109511:	8b 45 10             	mov    0x10(%ebp),%eax
f0109514:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0109517:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010951a:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010951f:	89 c1                	mov    %eax,%ecx
f0109521:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109524:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109527:	89 d0                	mov    %edx,%eax
f0109529:	01 c0                	add    %eax,%eax
f010952b:	01 d0                	add    %edx,%eax
f010952d:	c1 e0 03             	shl    $0x3,%eax
f0109530:	01 d8                	add    %ebx,%eax
f0109532:	05 5c d5 01 00       	add    $0x1d55c,%eax
f0109537:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0109539:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010953c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010953f:	89 d0                	mov    %edx,%eax
f0109541:	01 c0                	add    %eax,%eax
f0109543:	01 d0                	add    %edx,%eax
f0109545:	c1 e0 03             	shl    $0x3,%eax
f0109548:	01 c8                	add    %ecx,%eax
f010954a:	05 60 d5 01 00       	add    $0x1d560,%eax
f010954f:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f0109552:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109555:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109558:	89 d0                	mov    %edx,%eax
f010955a:	01 c0                	add    %eax,%eax
f010955c:	01 d0                	add    %edx,%eax
f010955e:	c1 e0 03             	shl    $0x3,%eax
f0109561:	01 c8                	add    %ecx,%eax
f0109563:	05 64 d5 01 00       	add    $0x1d564,%eax
f0109568:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f010956e:	90                   	nop
}
f010956f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109572:	c9                   	leave  
f0109573:	c3                   	ret    

f0109574 <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0109574:	55                   	push   %ebp
f0109575:	89 e5                	mov    %esp,%ebp
f0109577:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010957a:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f010957e:	76 19                	jbe    f0109599 <env_table_ws_clear_entry+0x25>
f0109580:	68 10 55 12 f0       	push   $0xf0125510
f0109585:	68 36 53 12 f0       	push   $0xf0125336
f010958a:	68 43 01 00 00       	push   $0x143
f010958f:	68 4c 53 12 f0       	push   $0xf012534c
f0109594:	e8 81 6d ff ff       	call   f010031a <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0109599:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010959c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010959f:	89 d0                	mov    %edx,%eax
f01095a1:	01 c0                	add    %eax,%eax
f01095a3:	01 d0                	add    %edx,%eax
f01095a5:	c1 e0 03             	shl    $0x3,%eax
f01095a8:	01 c8                	add    %ecx,%eax
f01095aa:	05 5c d5 01 00       	add    $0x1d55c,%eax
f01095af:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f01095b5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01095b8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01095bb:	89 d0                	mov    %edx,%eax
f01095bd:	01 c0                	add    %eax,%eax
f01095bf:	01 d0                	add    %edx,%eax
f01095c1:	c1 e0 03             	shl    $0x3,%eax
f01095c4:	01 c8                	add    %ecx,%eax
f01095c6:	05 60 d5 01 00       	add    $0x1d560,%eax
f01095cb:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f01095ce:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01095d1:	8b 55 0c             	mov    0xc(%ebp),%edx
f01095d4:	89 d0                	mov    %edx,%eax
f01095d6:	01 c0                	add    %eax,%eax
f01095d8:	01 d0                	add    %edx,%eax
f01095da:	c1 e0 03             	shl    $0x3,%eax
f01095dd:	01 c8                	add    %ecx,%eax
f01095df:	05 64 d5 01 00       	add    $0x1d564,%eax
f01095e4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f01095ea:	90                   	nop
f01095eb:	c9                   	leave  
f01095ec:	c3                   	ret    

f01095ed <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01095ed:	55                   	push   %ebp
f01095ee:	89 e5                	mov    %esp,%ebp
f01095f0:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f01095f3:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f01095f7:	76 19                	jbe    f0109612 <env_table_ws_get_virtual_address+0x25>
f01095f9:	68 10 55 12 f0       	push   $0xf0125510
f01095fe:	68 36 53 12 f0       	push   $0xf0125336
f0109603:	68 4b 01 00 00       	push   $0x14b
f0109608:	68 4c 53 12 f0       	push   $0xf012534c
f010960d:	e8 08 6d ff ff       	call   f010031a <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0109612:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109615:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109618:	89 d0                	mov    %edx,%eax
f010961a:	01 c0                	add    %eax,%eax
f010961c:	01 d0                	add    %edx,%eax
f010961e:	c1 e0 03             	shl    $0x3,%eax
f0109621:	01 c8                	add    %ecx,%eax
f0109623:	05 5c d5 01 00       	add    $0x1d55c,%eax
f0109628:	8b 00                	mov    (%eax),%eax
f010962a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010962d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109630:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0109635:	c9                   	leave  
f0109636:	c3                   	ret    

f0109637 <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0109637:	55                   	push   %ebp
f0109638:	89 e5                	mov    %esp,%ebp
f010963a:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f010963d:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0109641:	76 19                	jbe    f010965c <env_table_ws_get_time_stamp+0x25>
f0109643:	68 10 55 12 f0       	push   $0xf0125510
f0109648:	68 36 53 12 f0       	push   $0xf0125336
f010964d:	68 52 01 00 00       	push   $0x152
f0109652:	68 4c 53 12 f0       	push   $0xf012534c
f0109657:	e8 be 6c ff ff       	call   f010031a <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f010965c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010965f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109662:	89 d0                	mov    %edx,%eax
f0109664:	01 c0                	add    %eax,%eax
f0109666:	01 d0                	add    %edx,%eax
f0109668:	c1 e0 03             	shl    $0x3,%eax
f010966b:	01 c8                	add    %ecx,%eax
f010966d:	05 64 d5 01 00       	add    $0x1d564,%eax
f0109672:	8b 00                	mov    (%eax),%eax
}
f0109674:	c9                   	leave  
f0109675:	c3                   	ret    

f0109676 <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0109676:	55                   	push   %ebp
f0109677:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f0109679:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010967c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010967f:	89 d0                	mov    %edx,%eax
f0109681:	01 c0                	add    %eax,%eax
f0109683:	01 d0                	add    %edx,%eax
f0109685:	c1 e0 03             	shl    $0x3,%eax
f0109688:	01 c8                	add    %ecx,%eax
f010968a:	05 60 d5 01 00       	add    $0x1d560,%eax
f010968f:	8a 00                	mov    (%eax),%al
f0109691:	0f b6 c0             	movzbl %al,%eax
}
f0109694:	5d                   	pop    %ebp
f0109695:	c3                   	ret    

f0109696 <double_WS_Size>:
///=================================================================================================
///=================================================================================================
///=================================================================================================

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f0109696:	55                   	push   %ebp
f0109697:	89 e5                	mov    %esp,%ebp
f0109699:	83 ec 08             	sub    $0x8,%esp
	panic("not handled yet");
f010969c:	83 ec 04             	sub    $0x4,%esp
f010969f:	68 41 55 12 f0       	push   $0xf0125541
f01096a4:	68 62 01 00 00       	push   $0x162
f01096a9:	68 4c 53 12 f0       	push   $0xf012534c
f01096ae:	e8 67 6c ff ff       	call   f010031a <_panic>

f01096b3 <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f01096b3:	55                   	push   %ebp
f01096b4:	89 e5                	mov    %esp,%ebp
f01096b6:	83 ec 08             	sub    $0x8,%esp
	panic("not handled yet");
f01096b9:	83 ec 04             	sub    $0x4,%esp
f01096bc:	68 41 55 12 f0       	push   $0xf0125541
f01096c1:	68 67 01 00 00       	push   $0x167
f01096c6:	68 4c 53 12 f0       	push   $0xf012534c
f01096cb:	e8 4a 6c ff ff       	call   f010031a <_panic>

f01096d0 <cut_paste_pages>:
//	If the page table at any destination page in the range is not exist, it should create it
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, cut-paste the number of pages and return 0
//	ALL 12 permission bits of the destination should be TYPICAL to those of the source
//	The given addresses may be not aligned on 4 KB
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f01096d0:	55                   	push   %ebp
f01096d1:	89 e5                	mov    %esp,%ebp
f01096d3:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the panic and write your code
	panic("cut_paste_pages() is not implemented yet...!!");
f01096d6:	83 ec 04             	sub    $0x4,%esp
f01096d9:	68 54 55 12 f0       	push   $0xf0125554
f01096de:	6a 21                	push   $0x21
f01096e0:	68 82 55 12 f0       	push   $0xf0125582
f01096e5:	e8 30 6c ff ff       	call   f010031a <_panic>

f01096ea <copy_paste_chunk>:
//	Otherwise, just copy!
//		1. WRITABLE permission
//		2. USER/SUPERVISOR permission must be SAME as the one of the source
//	The given range(s) may be not aligned on 4 KB
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f01096ea:	55                   	push   %ebp
f01096eb:	89 e5                	mov    %esp,%ebp
f01096ed:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the //panic and write your code
	panic("copy_paste_chunk() is not implemented yet...!!");
f01096f0:	83 ec 04             	sub    $0x4,%esp
f01096f3:	68 a0 55 12 f0       	push   $0xf01255a0
f01096f8:	6a 34                	push   $0x34
f01096fa:	68 82 55 12 f0       	push   $0xf0125582
f01096ff:	e8 16 6c ff ff       	call   f010031a <_panic>

f0109704 <share_chunk>:
//	It should set the permissions of the second range by the given perms
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, share the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	The given range(s) may be not aligned on 4 KB
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0109704:	55                   	push   %ebp
f0109705:	89 e5                	mov    %esp,%ebp
f0109707:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the //panic and write your code
	panic("share_chunk() is not implemented yet...!!");
f010970a:	83 ec 04             	sub    $0x4,%esp
f010970d:	68 d0 55 12 f0       	push   $0xf01255d0
f0109712:	6a 44                	push   $0x44
f0109714:	68 82 55 12 f0       	push   $0xf0125582
f0109719:	e8 fc 6b ff ff       	call   f010031a <_panic>

f010971e <allocate_chunk>:
//This function should allocate the given virtual range [<va>, <va> + <size>) in the given address space  <page_directory> with the given permissions <perms>.
//	If ANY of the destination pages exists, deny the entire process and return -1. Otherwise, allocate the required range and return 0
//	If the page table at any destination page in the range is not exist, it should create it
//	Allocation should be aligned on page boundary. However, the given range may be not aligned.
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f010971e:	55                   	push   %ebp
f010971f:	89 e5                	mov    %esp,%ebp
f0109721:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the //panic and write your code
	panic("allocate_chunk() is not implemented yet...!!");
f0109724:	83 ec 04             	sub    $0x4,%esp
f0109727:	68 fc 55 12 f0       	push   $0xf01255fc
f010972c:	6a 52                	push   $0x52
f010972e:	68 82 55 12 f0       	push   $0xf0125582
f0109733:	e8 e2 6b ff ff       	call   f010031a <_panic>

f0109738 <calculate_allocated_space>:

//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f0109738:	55                   	push   %ebp
f0109739:	89 e5                	mov    %esp,%ebp
f010973b:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	panic("calculate_allocated_space() is not implemented yet...!!");
f010973e:	83 ec 04             	sub    $0x4,%esp
f0109741:	68 2c 56 12 f0       	push   $0xf012562c
f0109746:	6a 5c                	push   $0x5c
f0109748:	68 82 55 12 f0       	push   $0xf0125582
f010974d:	e8 c8 6b ff ff       	call   f010031a <_panic>

f0109752 <calculate_required_frames>:
//=====================================
//This function should calculate the required number of pages for allocating and mapping the given range [start va, start va + size) (either for the pages themselves or for the page tables required for mapping)
//	Pages and/or page tables that are already exist in the range SHOULD NOT be counted.
//	The given range(s) may be not aligned on 4 KB
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f0109752:	55                   	push   %ebp
f0109753:	89 e5                	mov    %esp,%ebp
f0109755:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	panic("calculate_required_frames() is not implemented yet...!!");
f0109758:	83 ec 04             	sub    $0x4,%esp
f010975b:	68 64 56 12 f0       	push   $0xf0125664
f0109760:	6a 69                	push   $0x69
f0109762:	68 82 55 12 f0       	push   $0xf0125582
f0109767:	e8 ae 6b ff ff       	call   f010031a <_panic>

f010976c <sys_sbrk>:

//=====================================
/* DYNAMIC ALLOCATOR SYSTEM CALLS */
//=====================================
void* sys_sbrk(int numOfPages)
{
f010976c:	55                   	push   %ebp
f010976d:	89 e5                	mov    %esp,%ebp
f010976f:	83 ec 18             	sub    $0x18,%esp
	 * 		or the break exceed the limit of the dynamic allocator. If sys_sbrk fails, the net effect should
	 * 		be that sys_sbrk returns (void*) -1 and that the segment break and the process heap are unaffected.
	 * 		You might have to undo any operations you have done so far in this case.
	 */

	struct Env* env = get_cpu_proc(); //the current running Environment to adjust its break limit
f0109772:	e8 f9 0f 00 00       	call   f010a770 <get_cpu_proc>
f0109777:	89 45 f4             	mov    %eax,-0xc(%ebp)

	/*====================================*/
	/*Remove this line before start coding*/
	return (void*)-1 ;
f010977a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	/*====================================*/

	//[PROJECT'24.MS2] Implement this function

}
f010977f:	c9                   	leave  
f0109780:	c3                   	ret    

f0109781 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f0109781:	55                   	push   %ebp
f0109782:	89 e5                	mov    %esp,%ebp
f0109784:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f0109787:	e8 f5 56 01 00       	call   f011ee81 <inctst>
	return;
f010978c:	90                   	nop
	/*====================================*/

	//[PROJECT'24.MS2] [USER HEAP - KERNEL SIDE] allocate_user_mem
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
}
f010978d:	c9                   	leave  
f010978e:	c3                   	ret    

f010978f <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f010978f:	55                   	push   %ebp
f0109790:	89 e5                	mov    %esp,%ebp
f0109792:	83 ec 08             	sub    $0x8,%esp
	/*====================================*/
	/*Remove this line before start coding*/
	inctst();
f0109795:	e8 e7 56 01 00       	call   f011ee81 <inctst>
	return;
f010979a:	90                   	nop
	/*====================================*/

	//[PROJECT'24.MS2] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
}
f010979b:	c9                   	leave  
f010979c:	c3                   	ret    

f010979d <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f010979d:	55                   	push   %ebp
f010979e:	89 e5                	mov    %esp,%ebp
f01097a0:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f01097a3:	83 ec 04             	sub    $0x4,%esp
f01097a6:	68 9c 56 12 f0       	push   $0xf012569c
f01097ab:	68 bc 00 00 00       	push   $0xbc
f01097b0:	68 82 55 12 f0       	push   $0xf0125582
f01097b5:	e8 60 6b ff ff       	call   f010031a <_panic>

f01097ba <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f01097ba:	55                   	push   %ebp
f01097bb:	89 e5                	mov    %esp,%ebp
f01097bd:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f01097c0:	83 ec 04             	sub    $0x4,%esp
f01097c3:	68 dc 56 12 f0       	push   $0xf01256dc
f01097c8:	68 c6 00 00 00       	push   $0xc6
f01097cd:	68 82 55 12 f0       	push   $0xf0125582
f01097d2:	e8 43 6b ff ff       	call   f010031a <_panic>

f01097d7 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f01097d7:	55                   	push   %ebp
f01097d8:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f01097da:	8b 45 08             	mov    0x8(%ebp),%eax
f01097dd:	8b 15 20 4f 55 f0    	mov    0xf0554f20,%edx
f01097e3:	29 d0                	sub    %edx,%eax
f01097e5:	c1 f8 03             	sar    $0x3,%eax
f01097e8:	89 c2                	mov    %eax,%edx
f01097ea:	89 d0                	mov    %edx,%eax
f01097ec:	c1 e0 02             	shl    $0x2,%eax
f01097ef:	01 d0                	add    %edx,%eax
f01097f1:	c1 e0 02             	shl    $0x2,%eax
f01097f4:	01 d0                	add    %edx,%eax
f01097f6:	c1 e0 02             	shl    $0x2,%eax
f01097f9:	01 d0                	add    %edx,%eax
f01097fb:	89 c1                	mov    %eax,%ecx
f01097fd:	c1 e1 08             	shl    $0x8,%ecx
f0109800:	01 c8                	add    %ecx,%eax
f0109802:	89 c1                	mov    %eax,%ecx
f0109804:	c1 e1 10             	shl    $0x10,%ecx
f0109807:	01 c8                	add    %ecx,%eax
f0109809:	01 c0                	add    %eax,%eax
f010980b:	01 d0                	add    %edx,%eax
}
f010980d:	5d                   	pop    %ebp
f010980e:	c3                   	ret    

f010980f <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010980f:	55                   	push   %ebp
f0109810:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0109812:	ff 75 08             	pushl  0x8(%ebp)
f0109815:	e8 bd ff ff ff       	call   f01097d7 <to_frame_number>
f010981a:	83 c4 04             	add    $0x4,%esp
f010981d:	c1 e0 0c             	shl    $0xc,%eax
}
f0109820:	c9                   	leave  
f0109821:	c3                   	ret    

f0109822 <env_init>:
// and insert them into the env_free_list.
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//
void env_init(void)
{
f0109822:	55                   	push   %ebp
f0109823:	89 e5                	mov    %esp,%ebp
f0109825:	56                   	push   %esi
f0109826:	53                   	push   %ebx
f0109827:	83 ec 10             	sub    $0x10,%esp
	int iEnv = NENV-1;
f010982a:	c7 45 f4 07 00 00 00 	movl   $0x7,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f0109831:	e9 28 02 00 00       	jmp    f0109a5e <env_init+0x23c>
	{
		envs[iEnv].env_status = ENV_FREE;
f0109836:	8b 0d 10 1a 55 f0    	mov    0xf0551a10,%ecx
f010983c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010983f:	89 d0                	mov    %edx,%eax
f0109841:	c1 e0 06             	shl    $0x6,%eax
f0109844:	29 d0                	sub    %edx,%eax
f0109846:	c1 e0 02             	shl    $0x2,%eax
f0109849:	01 d0                	add    %edx,%eax
f010984b:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f0109852:	01 d8                	add    %ebx,%eax
f0109854:	c1 e0 03             	shl    $0x3,%eax
f0109857:	01 d0                	add    %edx,%eax
f0109859:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109860:	29 c2                	sub    %eax,%edx
f0109862:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f0109869:	89 c2                	mov    %eax,%edx
f010986b:	89 d0                	mov    %edx,%eax
f010986d:	01 c8                	add    %ecx,%eax
f010986f:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
		envs[iEnv].env_id = 0;
f0109876:	8b 0d 10 1a 55 f0    	mov    0xf0551a10,%ecx
f010987c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010987f:	89 d0                	mov    %edx,%eax
f0109881:	c1 e0 06             	shl    $0x6,%eax
f0109884:	29 d0                	sub    %edx,%eax
f0109886:	c1 e0 02             	shl    $0x2,%eax
f0109889:	01 d0                	add    %edx,%eax
f010988b:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f0109892:	01 d8                	add    %ebx,%eax
f0109894:	c1 e0 03             	shl    $0x3,%eax
f0109897:	01 d0                	add    %edx,%eax
f0109899:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01098a0:	29 c2                	sub    %eax,%edx
f01098a2:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f01098a9:	89 c2                	mov    %eax,%edx
f01098ab:	89 d0                	mov    %edx,%eax
f01098ad:	01 c8                	add    %ecx,%eax
f01098af:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f01098b6:	8b 0d 10 1a 55 f0    	mov    0xf0551a10,%ecx
f01098bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01098bf:	89 d0                	mov    %edx,%eax
f01098c1:	c1 e0 06             	shl    $0x6,%eax
f01098c4:	29 d0                	sub    %edx,%eax
f01098c6:	c1 e0 02             	shl    $0x2,%eax
f01098c9:	01 d0                	add    %edx,%eax
f01098cb:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f01098d2:	01 d8                	add    %ebx,%eax
f01098d4:	c1 e0 03             	shl    $0x3,%eax
f01098d7:	01 d0                	add    %edx,%eax
f01098d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01098e0:	29 c2                	sub    %eax,%edx
f01098e2:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f01098e9:	89 c2                	mov    %eax,%edx
f01098eb:	89 d0                	mov    %edx,%eax
f01098ed:	01 c8                	add    %ecx,%eax
f01098ef:	85 c0                	test   %eax,%eax
f01098f1:	75 14                	jne    f0109907 <env_init+0xe5>
f01098f3:	83 ec 04             	sub    $0x4,%esp
f01098f6:	68 08 57 12 f0       	push   $0xf0125708
f01098fb:	6a 64                	push   $0x64
f01098fd:	68 2b 57 12 f0       	push   $0xf012572b
f0109902:	e8 13 6a ff ff       	call   f010031a <_panic>
f0109907:	8b 0d 10 1a 55 f0    	mov    0xf0551a10,%ecx
f010990d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109910:	89 d0                	mov    %edx,%eax
f0109912:	c1 e0 06             	shl    $0x6,%eax
f0109915:	29 d0                	sub    %edx,%eax
f0109917:	c1 e0 02             	shl    $0x2,%eax
f010991a:	01 d0                	add    %edx,%eax
f010991c:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f0109923:	01 d8                	add    %ebx,%eax
f0109925:	c1 e0 03             	shl    $0x3,%eax
f0109928:	01 d0                	add    %edx,%eax
f010992a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109931:	29 c2                	sub    %eax,%edx
f0109933:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f010993a:	89 c2                	mov    %eax,%edx
f010993c:	89 d0                	mov    %edx,%eax
f010993e:	01 c8                	add    %ecx,%eax
f0109940:	8b 15 14 1a 55 f0    	mov    0xf0551a14,%edx
f0109946:	89 50 08             	mov    %edx,0x8(%eax)
f0109949:	8b 40 08             	mov    0x8(%eax),%eax
f010994c:	85 c0                	test   %eax,%eax
f010994e:	74 44                	je     f0109994 <env_init+0x172>
f0109950:	8b 0d 14 1a 55 f0    	mov    0xf0551a14,%ecx
f0109956:	8b 1d 10 1a 55 f0    	mov    0xf0551a10,%ebx
f010995c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010995f:	89 d0                	mov    %edx,%eax
f0109961:	c1 e0 06             	shl    $0x6,%eax
f0109964:	29 d0                	sub    %edx,%eax
f0109966:	c1 e0 02             	shl    $0x2,%eax
f0109969:	01 d0                	add    %edx,%eax
f010996b:	8d 34 85 00 00 00 00 	lea    0x0(,%eax,4),%esi
f0109972:	01 f0                	add    %esi,%eax
f0109974:	c1 e0 03             	shl    $0x3,%eax
f0109977:	01 d0                	add    %edx,%eax
f0109979:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109980:	29 c2                	sub    %eax,%edx
f0109982:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f0109989:	89 c2                	mov    %eax,%edx
f010998b:	89 d0                	mov    %edx,%eax
f010998d:	01 d8                	add    %ebx,%eax
f010998f:	89 41 0c             	mov    %eax,0xc(%ecx)
f0109992:	eb 3e                	jmp    f01099d2 <env_init+0x1b0>
f0109994:	8b 0d 10 1a 55 f0    	mov    0xf0551a10,%ecx
f010999a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010999d:	89 d0                	mov    %edx,%eax
f010999f:	c1 e0 06             	shl    $0x6,%eax
f01099a2:	29 d0                	sub    %edx,%eax
f01099a4:	c1 e0 02             	shl    $0x2,%eax
f01099a7:	01 d0                	add    %edx,%eax
f01099a9:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f01099b0:	01 d8                	add    %ebx,%eax
f01099b2:	c1 e0 03             	shl    $0x3,%eax
f01099b5:	01 d0                	add    %edx,%eax
f01099b7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01099be:	29 c2                	sub    %eax,%edx
f01099c0:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f01099c7:	89 c2                	mov    %eax,%edx
f01099c9:	89 d0                	mov    %edx,%eax
f01099cb:	01 c8                	add    %ecx,%eax
f01099cd:	a3 18 1a 55 f0       	mov    %eax,0xf0551a18
f01099d2:	8b 0d 10 1a 55 f0    	mov    0xf0551a10,%ecx
f01099d8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01099db:	89 d0                	mov    %edx,%eax
f01099dd:	c1 e0 06             	shl    $0x6,%eax
f01099e0:	29 d0                	sub    %edx,%eax
f01099e2:	c1 e0 02             	shl    $0x2,%eax
f01099e5:	01 d0                	add    %edx,%eax
f01099e7:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f01099ee:	01 d8                	add    %ebx,%eax
f01099f0:	c1 e0 03             	shl    $0x3,%eax
f01099f3:	01 d0                	add    %edx,%eax
f01099f5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01099fc:	29 c2                	sub    %eax,%edx
f01099fe:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f0109a05:	89 c2                	mov    %eax,%edx
f0109a07:	89 d0                	mov    %edx,%eax
f0109a09:	01 c8                	add    %ecx,%eax
f0109a0b:	a3 14 1a 55 f0       	mov    %eax,0xf0551a14
f0109a10:	8b 0d 10 1a 55 f0    	mov    0xf0551a10,%ecx
f0109a16:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109a19:	89 d0                	mov    %edx,%eax
f0109a1b:	c1 e0 06             	shl    $0x6,%eax
f0109a1e:	29 d0                	sub    %edx,%eax
f0109a20:	c1 e0 02             	shl    $0x2,%eax
f0109a23:	01 d0                	add    %edx,%eax
f0109a25:	8d 1c 85 00 00 00 00 	lea    0x0(,%eax,4),%ebx
f0109a2c:	01 d8                	add    %ebx,%eax
f0109a2e:	c1 e0 03             	shl    $0x3,%eax
f0109a31:	01 d0                	add    %edx,%eax
f0109a33:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0109a3a:	29 c2                	sub    %eax,%edx
f0109a3c:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f0109a43:	89 c2                	mov    %eax,%edx
f0109a45:	89 d0                	mov    %edx,%eax
f0109a47:	01 c8                	add    %ecx,%eax
f0109a49:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f0109a50:	a1 20 1a 55 f0       	mov    0xf0551a20,%eax
f0109a55:	40                   	inc    %eax
f0109a56:	a3 20 1a 55 f0       	mov    %eax,0xf0551a20
// returns envs[0].
//
void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f0109a5b:	ff 4d f4             	decl   -0xc(%ebp)
f0109a5e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0109a62:	0f 89 ce fd ff ff    	jns    f0109836 <env_init+0x14>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f0109a68:	90                   	nop
f0109a69:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0109a6c:	5b                   	pop    %ebx
f0109a6d:	5e                   	pop    %esi
f0109a6e:	5d                   	pop    %ebp
f0109a6f:	c3                   	ret    

f0109a70 <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0109a70:	55                   	push   %ebp
f0109a71:	89 e5                	mov    %esp,%ebp
f0109a73:	57                   	push   %edi
f0109a74:	56                   	push   %esi
f0109a75:	53                   	push   %ebx
f0109a76:	81 ec fc 00 00 00    	sub    $0xfc,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0109a7c:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0109a83:	83 ec 0c             	sub    $0xc,%esp
f0109a86:	ff 75 08             	pushl  0x8(%ebp)
f0109a89:	e8 c8 24 00 00       	call   f010bf56 <get_user_program_info>
f0109a8e:	83 c4 10             	add    $0x10,%esp
f0109a91:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0)
f0109a94:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0109a98:	75 0a                	jne    f0109aa4 <env_create+0x34>
	{
		return NULL;
f0109a9a:	b8 00 00 00 00       	mov    $0x0,%eax
f0109a9f:	e9 2a 0c 00 00       	jmp    f010a6ce <env_create+0xc5e>
	}
	ptr_program_start = ptr_user_program_info->ptr_start ;
f0109aa4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109aa7:	8b 40 08             	mov    0x8(%eax),%eax
f0109aaa:	89 45 b8             	mov    %eax,-0x48(%ebp)

	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f0109aad:	c7 85 40 ff ff ff 00 	movl   $0x0,-0xc0(%ebp)
f0109ab4:	00 00 00 
	if(allocate_environment(&e) < 0)
f0109ab7:	83 ec 0c             	sub    $0xc,%esp
f0109aba:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0109ac0:	50                   	push   %eax
f0109ac1:	e8 23 11 00 00       	call   f010abe9 <allocate_environment>
f0109ac6:	83 c4 10             	add    $0x10,%esp
f0109ac9:	85 c0                	test   %eax,%eax
f0109acb:	79 0a                	jns    f0109ad7 <env_create+0x67>
	{
		return NULL;
f0109acd:	b8 00 00 00 00       	mov    $0x0,%eax
f0109ad2:	e9 f7 0b 00 00       	jmp    f010a6ce <env_create+0xc5e>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f0109ad7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109ada:	8b 00                	mov    (%eax),%eax
f0109adc:	83 ec 0c             	sub    $0xc,%esp
f0109adf:	50                   	push   %eax
f0109ae0:	e8 a5 6d 01 00       	call   f012088a <strlen>
f0109ae5:	83 c4 10             	add    $0x10,%esp
f0109ae8:	83 f8 3f             	cmp    $0x3f,%eax
f0109aeb:	7f 1d                	jg     f0109b0a <env_create+0x9a>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0109aed:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109af0:	8b 00                	mov    (%eax),%eax
f0109af2:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109af8:	83 c2 20             	add    $0x20,%edx
f0109afb:	83 ec 08             	sub    $0x8,%esp
f0109afe:	50                   	push   %eax
f0109aff:	52                   	push   %edx
f0109b00:	e8 d4 6d 01 00       	call   f01208d9 <strcpy>
f0109b05:	83 c4 10             	add    $0x10,%esp
f0109b08:	eb 1d                	jmp    f0109b27 <env_create+0xb7>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0109b0a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0109b0d:	8b 00                	mov    (%eax),%eax
f0109b0f:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f0109b15:	83 c2 20             	add    $0x20,%edx
f0109b18:	83 ec 04             	sub    $0x4,%esp
f0109b1b:	6a 3f                	push   $0x3f
f0109b1d:	50                   	push   %eax
f0109b1e:	52                   	push   %edx
f0109b1f:	e8 e3 6d 01 00       	call   f0120907 <strncpy>
f0109b24:	83 c4 10             	add    $0x10,%esp
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
	}
#else
	{
		int r;
		struct FrameInfo *p = NULL;
f0109b27:	c7 85 3c ff ff ff 00 	movl   $0x0,-0xc4(%ebp)
f0109b2e:	00 00 00 

		allocate_frame(&p) ;
f0109b31:	83 ec 0c             	sub    $0xc,%esp
f0109b34:	8d 85 3c ff ff ff    	lea    -0xc4(%ebp),%eax
f0109b3a:	50                   	push   %eax
f0109b3b:	e8 90 e6 ff ff       	call   f01081d0 <allocate_frame>
f0109b40:	83 c4 10             	add    $0x10,%esp
		p->references = 1;
f0109b43:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0109b49:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

		ptr_user_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0109b4f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0109b55:	83 ec 0c             	sub    $0xc,%esp
f0109b58:	50                   	push   %eax
f0109b59:	e8 b1 fc ff ff       	call   f010980f <to_physical_address>
f0109b5e:	83 c4 10             	add    $0x10,%esp
f0109b61:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0109b64:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0109b67:	c1 e8 0c             	shr    $0xc,%eax
f0109b6a:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0109b6d:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f0109b72:	39 45 ac             	cmp    %eax,-0x54(%ebp)
f0109b75:	72 17                	jb     f0109b8e <env_create+0x11e>
f0109b77:	ff 75 b0             	pushl  -0x50(%ebp)
f0109b7a:	68 48 57 12 f0       	push   $0xf0125748
f0109b7f:	68 9c 00 00 00       	push   $0x9c
f0109b84:	68 2b 57 12 f0       	push   $0xf012572b
f0109b89:	e8 8c 67 ff ff       	call   f010031a <_panic>
f0109b8e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0109b91:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0109b96:	89 45 a8             	mov    %eax,-0x58(%ebp)
		phys_user_page_directory = to_physical_address(p);
f0109b99:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0109b9f:	83 ec 0c             	sub    $0xc,%esp
f0109ba2:	50                   	push   %eax
f0109ba3:	e8 67 fc ff ff       	call   f010980f <to_physical_address>
f0109ba8:	83 c4 10             	add    $0x10,%esp
f0109bab:	89 45 a4             	mov    %eax,-0x5c(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f0109bae:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109bb4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109bb7:	89 90 84 00 00 00    	mov    %edx,0x84(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109bbd:	83 ec 0c             	sub    $0xc,%esp
f0109bc0:	6a 02                	push   $0x2
f0109bc2:	e8 ff 4a 00 00       	call   f010e6c6 <isPageReplacmentAlgorithmLRU>
f0109bc7:	83 c4 10             	add    $0x10,%esp
f0109bca:	85 c0                	test   %eax,%eax
f0109bcc:	74 21                	je     f0109bef <env_create+0x17f>
	{
		e->SecondListSize = LRU_second_list_size;
f0109bce:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109bd4:	8b 55 10             	mov    0x10(%ebp),%edx
f0109bd7:	89 90 34 da 01 00    	mov    %edx,0x1da34(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f0109bdd:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109be3:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109be6:	2b 55 10             	sub    0x10(%ebp),%edx
f0109be9:	89 90 30 da 01 00    	mov    %edx,0x1da30(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0109bef:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f0109bf3:	75 12                	jne    f0109c07 <env_create+0x197>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f0109bf5:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109bfb:	c7 80 3c da 01 00 0a 	movl   $0xa,0x1da3c(%eax)
f0109c02:	00 00 00 
f0109c05:	eb 0f                	jmp    f0109c16 <env_create+0x1a6>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f0109c07:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109c0d:	8b 55 14             	mov    0x14(%ebp),%edx
f0109c10:	89 90 3c da 01 00    	mov    %edx,0x1da3c(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f0109c16:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109c1c:	83 ec 04             	sub    $0x4,%esp
f0109c1f:	ff 75 a4             	pushl  -0x5c(%ebp)
f0109c22:	ff 75 a8             	pushl  -0x58(%ebp)
f0109c25:	50                   	push   %eax
f0109c26:	e8 76 18 00 00       	call   f010b4a1 <initialize_environment>
f0109c2b:	83 c4 10             	add    $0x10,%esp
	//	3- uint32 size_in_memory: actual size required by this segment in memory
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[5] 2024: Disable the interrupt before switching the directories
	pushcli();
f0109c2e:	e8 8d d5 ff ff       	call   f01071c0 <pushcli>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0109c33:	0f 20 d8             	mov    %cr3,%eax
f0109c36:	89 45 98             	mov    %eax,-0x68(%ebp)
	return val;
f0109c39:	8b 45 98             	mov    -0x68(%ebp),%eax
	{
		//[6] switch to user page directory
		uint32 cur_phys_pgdir = rcr3() ;
f0109c3c:	89 45 9c             	mov    %eax,-0x64(%ebp)
		lcr3(e->env_cr3) ;
f0109c3f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109c45:	8b 40 68             	mov    0x68(%eax),%eax
f0109c48:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0109c4e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0109c54:	0f 22 d8             	mov    %eax,%cr3

		//[7] load each program segment into user virtual space
		struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0109c57:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int segment_counter=0;
f0109c5e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0109c65:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109c6b:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0109c71:	48                   	dec    %eax
f0109c72:	89 45 dc             	mov    %eax,-0x24(%ebp)
		uint32 lastTableNumber=0xffffffff;
f0109c75:	c7 85 38 ff ff ff ff 	movl   $0xffffffff,-0xc8(%ebp)
f0109c7c:	ff ff ff 

		PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109c7f:	8d 85 f8 fe ff ff    	lea    -0x108(%ebp),%eax
f0109c85:	83 ec 08             	sub    $0x8,%esp
f0109c88:	ff 75 b8             	pushl  -0x48(%ebp)
f0109c8b:	50                   	push   %eax
f0109c8c:	e8 d7 1f 00 00       	call   f010bc68 <PROGRAM_SEGMENT_FIRST>
f0109c91:	83 c4 0c             	add    $0xc,%esp
f0109c94:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0109c9a:	8d 95 f8 fe ff ff    	lea    -0x108(%ebp),%edx
f0109ca0:	b9 05 00 00 00       	mov    $0x5,%ecx
f0109ca5:	89 c7                	mov    %eax,%edi
f0109ca7:	89 d6                	mov    %edx,%esi
f0109ca9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0109cab:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0109cb1:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109cb4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109cb7:	8b 40 10             	mov    0x10(%eax),%eax
f0109cba:	83 f8 ff             	cmp    $0xffffffff,%eax
f0109cbd:	75 07                	jne    f0109cc6 <env_create+0x256>
f0109cbf:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0109cc6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109cc9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109ccc:	e9 24 03 00 00       	jmp    f0109ff5 <env_create+0x585>
		{
			segment_counter++;
f0109cd1:	ff 45 e0             	incl   -0x20(%ebp)
			LOG_STRING("===============================================================================");
			LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
					seg->size_in_memory, seg->virtual_address));
			LOG_STRING("===============================================================================");

			uint32 allocated_pages=0;
f0109cd4:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0109cdb:	00 00 00 
			program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f0109cde:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109ce4:	83 ec 0c             	sub    $0xc,%esp
f0109ce7:	8d 95 38 ff ff ff    	lea    -0xc8(%ebp),%edx
f0109ced:	52                   	push   %edx
f0109cee:	ff 75 dc             	pushl  -0x24(%ebp)
f0109cf1:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0109cf7:	52                   	push   %edx
f0109cf8:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109cfb:	50                   	push   %eax
f0109cfc:	e8 a6 0f 00 00       	call   f010aca7 <program_segment_alloc_map_copy_workingset>
f0109d01:	83 c4 20             	add    $0x20,%esp

			remaining_ws_pages -= allocated_pages;
f0109d04:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0109d0a:	29 45 dc             	sub    %eax,-0x24(%ebp)
			LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
			LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


			/// 7.2) temporary initialize 1st page in memory then writing it on page file
			uint32 dataSrc_va = (uint32) seg->ptr_start;
f0109d0d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109d10:	8b 00                	mov    (%eax),%eax
f0109d12:	89 45 94             	mov    %eax,-0x6c(%ebp)
			uint32 seg_va = (uint32) seg->virtual_address ;
f0109d15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109d18:	8b 40 0c             	mov    0xc(%eax),%eax
f0109d1b:	89 45 90             	mov    %eax,-0x70(%ebp)

			uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f0109d1e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109d21:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0109d24:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0109d27:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109d2c:	89 45 88             	mov    %eax,-0x78(%ebp)
			uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f0109d2f:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0109d36:	8b 55 90             	mov    -0x70(%ebp),%edx
f0109d39:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0109d3c:	01 d0                	add    %edx,%eax
f0109d3e:	48                   	dec    %eax
f0109d3f:	89 45 80             	mov    %eax,-0x80(%ebp)
f0109d42:	8b 45 80             	mov    -0x80(%ebp),%eax
f0109d45:	ba 00 00 00 00       	mov    $0x0,%edx
f0109d4a:	f7 75 84             	divl   -0x7c(%ebp)
f0109d4d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0109d50:	29 d0                	sub    %edx,%eax
f0109d52:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
			uint32 offset_first_page = seg_va  - start_first_page ;
f0109d58:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109d5b:	2b 45 88             	sub    -0x78(%ebp),%eax
f0109d5e:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

			memset(ptr_temp_page , 0, PAGE_SIZE);
f0109d64:	a1 64 51 55 f0       	mov    0xf0555164,%eax
f0109d69:	83 ec 04             	sub    $0x4,%esp
f0109d6c:	68 00 10 00 00       	push   $0x1000
f0109d71:	6a 00                	push   $0x0
f0109d73:	50                   	push   %eax
f0109d74:	e8 ff 6c 01 00       	call   f0120a78 <memset>
f0109d79:	83 c4 10             	add    $0x10,%esp
			uint8 *src_ptr =  (uint8*) dataSrc_va;
f0109d7c:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0109d7f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0109d82:	8b 15 64 51 55 f0    	mov    0xf0555164,%edx
f0109d88:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0109d8e:	01 d0                	add    %edx,%eax
f0109d90:	89 45 d0             	mov    %eax,-0x30(%ebp)
			int i;
			for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109d93:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109d96:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109d99:	eb 13                	jmp    f0109dae <env_create+0x33e>
			{
				*dst_ptr = *src_ptr ;
f0109d9b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109d9e:	8a 10                	mov    (%eax),%dl
f0109da0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109da3:	88 10                	mov    %dl,(%eax)

			memset(ptr_temp_page , 0, PAGE_SIZE);
			uint8 *src_ptr =  (uint8*) dataSrc_va;
			uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
			int i;
			for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f0109da5:	ff 45 cc             	incl   -0x34(%ebp)
f0109da8:	ff 45 d4             	incl   -0x2c(%ebp)
f0109dab:	ff 45 d0             	incl   -0x30(%ebp)
f0109dae:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109db1:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f0109db7:	72 e2                	jb     f0109d9b <env_create+0x32b>
			{
				*dst_ptr = *src_ptr ;
			}

			if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109db9:	8b 15 64 51 55 f0    	mov    0xf0555164,%edx
f0109dbf:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109dc5:	83 ec 04             	sub    $0x4,%esp
f0109dc8:	52                   	push   %edx
f0109dc9:	ff 75 88             	pushl  -0x78(%ebp)
f0109dcc:	50                   	push   %eax
f0109dcd:	e8 76 a3 ff ff       	call   f0104148 <pf_add_env_page>
f0109dd2:	83 c4 10             	add    $0x10,%esp
f0109dd5:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109dd8:	75 17                	jne    f0109df1 <env_create+0x381>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109dda:	83 ec 04             	sub    $0x4,%esp
f0109ddd:	68 78 57 12 f0       	push   $0xf0125778
f0109de2:	68 f2 00 00 00       	push   $0xf2
f0109de7:	68 2b 57 12 f0       	push   $0xf012572b
f0109dec:	e8 29 65 ff ff       	call   f010031a <_panic>
			//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


			/// 7.3) Start writing the segment ,from 2nd page until before last page, to page file ...

			uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0109df1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109df4:	8b 50 04             	mov    0x4(%eax),%edx
f0109df7:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109dfa:	01 d0                	add    %edx,%eax
f0109dfc:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0109e02:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0109e08:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109e0d:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
			uint32 end_last_page = seg_va  + seg->size_in_file;
f0109e13:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109e16:	8b 50 04             	mov    0x4(%eax),%edx
f0109e19:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109e1c:	01 d0                	add    %edx,%eax
f0109e1e:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

			for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109e24:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0109e2a:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109e2d:	eb 43                	jmp    f0109e72 <env_create+0x402>
			{
				if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f0109e2f:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0109e32:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109e38:	83 ec 04             	sub    $0x4,%esp
f0109e3b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0109e3e:	52                   	push   %edx
f0109e3f:	50                   	push   %eax
f0109e40:	e8 03 a3 ff ff       	call   f0104148 <pf_add_env_page>
f0109e45:	83 c4 10             	add    $0x10,%esp
f0109e48:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109e4b:	75 17                	jne    f0109e64 <env_create+0x3f4>
					panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109e4d:	83 ec 04             	sub    $0x4,%esp
f0109e50:	68 78 57 12 f0       	push   $0xf0125778
f0109e55:	68 ff 00 00 00       	push   $0xff
f0109e5a:	68 2b 57 12 f0       	push   $0xf012572b
f0109e5f:	e8 b6 64 ff ff       	call   f010031a <_panic>
			/// 7.3) Start writing the segment ,from 2nd page until before last page, to page file ...

			uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
			uint32 end_last_page = seg_va  + seg->size_in_file;

			for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0109e64:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0109e6b:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0109e72:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109e75:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f0109e7b:	72 b2                	jb     f0109e2f <env_create+0x3bf>
			}
			//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

			/// 7.4) temporary initialize last page in memory then writing it on page file

			dst_ptr =  (uint8*) ptr_temp_page;
f0109e7d:	a1 64 51 55 f0       	mov    0xf0555164,%eax
f0109e82:	89 45 d0             	mov    %eax,-0x30(%ebp)
			memset(dst_ptr, 0, PAGE_SIZE);
f0109e85:	83 ec 04             	sub    $0x4,%esp
f0109e88:	68 00 10 00 00       	push   $0x1000
f0109e8d:	6a 00                	push   $0x0
f0109e8f:	ff 75 d0             	pushl  -0x30(%ebp)
f0109e92:	e8 e1 6b 01 00       	call   f0120a78 <memset>
f0109e97:	83 c4 10             	add    $0x10,%esp

			for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109e9a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0109ea0:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109ea3:	eb 13                	jmp    f0109eb8 <env_create+0x448>
			{
				*dst_ptr = *src_ptr;
f0109ea5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0109ea8:	8a 10                	mov    (%eax),%dl
f0109eaa:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109ead:	88 10                	mov    %dl,(%eax)
			/// 7.4) temporary initialize last page in memory then writing it on page file

			dst_ptr =  (uint8*) ptr_temp_page;
			memset(dst_ptr, 0, PAGE_SIZE);

			for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f0109eaf:	ff 45 cc             	incl   -0x34(%ebp)
f0109eb2:	ff 45 d4             	incl   -0x2c(%ebp)
f0109eb5:	ff 45 d0             	incl   -0x30(%ebp)
f0109eb8:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109ebb:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f0109ec1:	72 e2                	jb     f0109ea5 <env_create+0x435>
			{
				*dst_ptr = *src_ptr;
			}
			if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f0109ec3:	8b 15 64 51 55 f0    	mov    0xf0555164,%edx
f0109ec9:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109ecf:	83 ec 04             	sub    $0x4,%esp
f0109ed2:	52                   	push   %edx
f0109ed3:	ff b5 70 ff ff ff    	pushl  -0x90(%ebp)
f0109ed9:	50                   	push   %eax
f0109eda:	e8 69 a2 ff ff       	call   f0104148 <pf_add_env_page>
f0109edf:	83 c4 10             	add    $0x10,%esp
f0109ee2:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109ee5:	75 17                	jne    f0109efe <env_create+0x48e>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109ee7:	83 ec 04             	sub    $0x4,%esp
f0109eea:	68 78 57 12 f0       	push   $0xf0125778
f0109eef:	68 0e 01 00 00       	push   $0x10e
f0109ef4:	68 2b 57 12 f0       	push   $0xf012572b
f0109ef9:	e8 1c 64 ff ff       	call   f010031a <_panic>

			//LOG_STRING(" -------------------- PAGE FILE: last page is written");

			/// 7.5) writing the remaining seg->size_in_memory pages to disk

			uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f0109efe:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0109f05:	10 00 00 
f0109f08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109f0b:	8b 50 04             	mov    0x4(%eax),%edx
f0109f0e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109f11:	01 c2                	add    %eax,%edx
f0109f13:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0109f19:	01 d0                	add    %edx,%eax
f0109f1b:	48                   	dec    %eax
f0109f1c:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0109f22:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109f28:	ba 00 00 00 00       	mov    $0x0,%edx
f0109f2d:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0109f33:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0109f39:	29 d0                	sub    %edx,%eax
f0109f3b:	89 45 c8             	mov    %eax,-0x38(%ebp)
			uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f0109f3e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109f41:	8b 50 08             	mov    0x8(%eax),%edx
f0109f44:	8b 45 90             	mov    -0x70(%ebp),%eax
f0109f47:	01 d0                	add    %edx,%eax
f0109f49:	2b 45 c8             	sub    -0x38(%ebp),%eax
f0109f4c:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

			for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109f52:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0109f59:	eb 41                	jmp    f0109f9c <env_create+0x52c>
			{
				if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f0109f5b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0109f61:	83 ec 04             	sub    $0x4,%esp
f0109f64:	6a 01                	push   $0x1
f0109f66:	ff 75 c8             	pushl  -0x38(%ebp)
f0109f69:	50                   	push   %eax
f0109f6a:	e8 ab a0 ff ff       	call   f010401a <pf_add_empty_env_page>
f0109f6f:	83 c4 10             	add    $0x10,%esp
f0109f72:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0109f75:	75 17                	jne    f0109f8e <env_create+0x51e>
					panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0109f77:	83 ec 04             	sub    $0x4,%esp
f0109f7a:	68 78 57 12 f0       	push   $0xf0125778
f0109f7f:	68 1b 01 00 00       	push   $0x11b
f0109f84:	68 2b 57 12 f0       	push   $0xf012572b
f0109f89:	e8 8c 63 ff ff       	call   f010031a <_panic>
			/// 7.5) writing the remaining seg->size_in_memory pages to disk

			uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
			uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

			for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0109f8e:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f0109f95:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f0109f9c:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0109fa3:	10 00 00 
f0109fa6:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f0109fac:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0109fb2:	01 d0                	add    %edx,%eax
f0109fb4:	48                   	dec    %eax
f0109fb5:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0109fbb:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0109fc1:	ba 00 00 00 00       	mov    $0x0,%edx
f0109fc6:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0109fcc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0109fd2:	29 d0                	sub    %edx,%eax
f0109fd4:	89 c2                	mov    %eax,%edx
f0109fd6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109fd9:	39 c2                	cmp    %eax,%edx
f0109fdb:	0f 87 7a ff ff ff    	ja     f0109f5b <env_create+0x4eb>
		struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
		int segment_counter=0;
		uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
		uint32 lastTableNumber=0xffffffff;

		PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f0109fe1:	83 ec 08             	sub    $0x8,%esp
f0109fe4:	ff 75 b8             	pushl  -0x48(%ebp)
f0109fe7:	ff 75 e4             	pushl  -0x1c(%ebp)
f0109fea:	e8 6e 1b 00 00       	call   f010bb5d <PROGRAM_SEGMENT_NEXT>
f0109fef:	83 c4 10             	add    $0x10,%esp
f0109ff2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0109ff5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0109ff9:	0f 85 d2 fc ff ff    	jne    f0109cd1 <env_create+0x261>
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
		}
#else
		int i=0;
f0109fff:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		for(;i<(e->page_WS_max_size); i++)
f010a006:	e9 a0 00 00 00       	jmp    f010a0ab <env_create+0x63b>
		{
			if(e->ptr_pageWorkingSet[i].empty == 0)
f010a00b:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a011:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010a014:	89 d0                	mov    %edx,%eax
f010a016:	01 c0                	add    %eax,%eax
f010a018:	01 d0                	add    %edx,%eax
f010a01a:	c1 e0 03             	shl    $0x3,%eax
f010a01d:	01 c8                	add    %ecx,%eax
f010a01f:	05 8c 00 00 00       	add    $0x8c,%eax
f010a024:	8a 00                	mov    (%eax),%al
f010a026:	84 c0                	test   %al,%al
f010a028:	75 7e                	jne    f010a0a8 <env_create+0x638>
			{
				uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f010a02a:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a030:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f010a033:	89 d0                	mov    %edx,%eax
f010a035:	01 c0                	add    %eax,%eax
f010a037:	01 d0                	add    %edx,%eax
f010a039:	c1 e0 03             	shl    $0x3,%eax
f010a03c:	01 c8                	add    %ecx,%eax
f010a03e:	05 88 00 00 00       	add    $0x88,%eax
f010a043:	8b 00                	mov    (%eax),%eax
f010a045:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
				uint32* ptr_page_table;

				//Here, page tables of all working set pages should be exist in memory
				//So, get_page_table should return the existing table
				get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f010a04b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a051:	8b 40 64             	mov    0x64(%eax),%eax
f010a054:	83 ec 04             	sub    $0x4,%esp
f010a057:	8d 95 1c ff ff ff    	lea    -0xe4(%ebp),%edx
f010a05d:	52                   	push   %edx
f010a05e:	ff b5 54 ff ff ff    	pushl  -0xac(%ebp)
f010a064:	50                   	push   %eax
f010a065:	e8 a3 e3 ff ff       	call   f010840d <get_page_table>
f010a06a:	83 c4 10             	add    $0x10,%esp
				ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f010a06d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f010a073:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f010a079:	c1 ea 0c             	shr    $0xc,%edx
f010a07c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010a082:	c1 e2 02             	shl    $0x2,%edx
f010a085:	01 d0                	add    %edx,%eax
f010a087:	8b 95 1c ff ff ff    	mov    -0xe4(%ebp),%edx
f010a08d:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
f010a093:	c1 e9 0c             	shr    $0xc,%ecx
f010a096:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f010a09c:	c1 e1 02             	shl    $0x2,%ecx
f010a09f:	01 ca                	add    %ecx,%edx
f010a0a1:	8b 12                	mov    (%edx),%edx
f010a0a3:	83 e2 bf             	and    $0xffffffbf,%edx
f010a0a6:	89 10                	mov    %edx,(%eax)
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
		}
#else
		int i=0;
		for(;i<(e->page_WS_max_size); i++)
f010a0a8:	ff 45 c4             	incl   -0x3c(%ebp)
f010a0ab:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a0b1:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f010a0b7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010a0ba:	39 c2                	cmp    %eax,%edx
f010a0bc:	0f 87 49 ff ff ff    	ja     f010a00b <env_create+0x59b>
			}
		}
#endif

		//[9] now set the entry point of the environment
		set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f010a0c2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f010a0c5:	8b 50 08             	mov    0x8(%eax),%edx
f010a0c8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a0ce:	83 ec 08             	sub    $0x8,%esp
f010a0d1:	52                   	push   %edx
f010a0d2:	50                   	push   %eax
f010a0d3:	e8 45 1a 00 00       	call   f010bb1d <set_environment_entry_point>
f010a0d8:	83 c4 10             	add    $0x10,%esp

		//[10] Allocate and map ONE page for the program's initial stack
		// at virtual address USTACKTOP - PAGE_SIZE.
		// we assume that the stack is counted in the environment working set

		e->initNumStackPages = 1;
f010a0db:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a0e1:	c7 40 6c 01 00 00 00 	movl   $0x1,0x6c(%eax)

		//cprintf("\nwill allocate stack pages\n");
		uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f010a0e8:	c7 85 50 ff ff ff 00 	movl   $0xeebfd000,-0xb0(%ebp)
f010a0ef:	d0 bf ee 

		uint32 stackVa = USTACKTOP - PAGE_SIZE;
f010a0f2:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
		for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f010a0f9:	e9 27 05 00 00       	jmp    f010a625 <env_create+0xbb5>
		{
			//allocate and map
			struct FrameInfo *pp = NULL;
f010a0fe:	c7 85 18 ff ff ff 00 	movl   $0x0,-0xe8(%ebp)
f010a105:	00 00 00 
			allocate_frame(&pp);
f010a108:	83 ec 0c             	sub    $0xc,%esp
f010a10b:	8d 85 18 ff ff ff    	lea    -0xe8(%ebp),%eax
f010a111:	50                   	push   %eax
f010a112:	e8 b9 e0 ff ff       	call   f01081d0 <allocate_frame>
f010a117:	83 c4 10             	add    $0x10,%esp
			loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f010a11a:	8b 95 18 ff ff ff    	mov    -0xe8(%ebp),%edx
f010a120:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a126:	8b 40 64             	mov    0x64(%eax),%eax
f010a129:	6a 06                	push   $0x6
f010a12b:	ff 75 c0             	pushl  -0x40(%ebp)
f010a12e:	52                   	push   %edx
f010a12f:	50                   	push   %eax
f010a130:	e8 af e6 ff ff       	call   f01087e4 <loadtime_map_frame>
f010a135:	83 c4 10             	add    $0x10,%esp

			//initialize new page by 0's
			memset((void*)stackVa, 0, PAGE_SIZE);
f010a138:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010a13b:	83 ec 04             	sub    $0x4,%esp
f010a13e:	68 00 10 00 00       	push   $0x1000
f010a143:	6a 00                	push   $0x0
f010a145:	50                   	push   %eax
f010a146:	e8 2d 69 01 00       	call   f0120a78 <memset>
f010a14b:	83 c4 10             	add    $0x10,%esp
					{
						LIST_INSERT_HEAD(&(e->SecondList), wse);
					}
				}
#else
				env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f010a14e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a154:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010a15a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a160:	83 ec 04             	sub    $0x4,%esp
f010a163:	ff 75 c0             	pushl  -0x40(%ebp)
f010a166:	52                   	push   %edx
f010a167:	50                   	push   %eax
f010a168:	e8 ae ec ff ff       	call   f0108e1b <env_page_ws_set_entry>
f010a16d:	83 c4 10             	add    $0x10,%esp
				uint32 lastWSIndex = e->page_last_WS_index ++;
f010a170:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a176:	8b 82 58 d5 01 00    	mov    0x1d558(%edx),%eax
f010a17c:	8d 48 01             	lea    0x1(%eax),%ecx
f010a17f:	89 8a 58 d5 01 00    	mov    %ecx,0x1d558(%edx)
f010a185:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
				e->page_last_WS_index %= (e->page_WS_max_size);
f010a18b:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a191:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a197:	8b 80 58 d5 01 00    	mov    0x1d558(%eax),%eax
f010a19d:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a1a3:	8b 9a 84 00 00 00    	mov    0x84(%edx),%ebx
f010a1a9:	ba 00 00 00 00       	mov    $0x0,%edx
f010a1ae:	f7 f3                	div    %ebx
f010a1b0:	89 d0                	mov    %edx,%eax
f010a1b2:	89 81 58 d5 01 00    	mov    %eax,0x1d558(%ecx)

				if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a1b8:	83 ec 0c             	sub    $0xc,%esp
f010a1bb:	6a 02                	push   $0x2
f010a1bd:	e8 04 45 00 00       	call   f010e6c6 <isPageReplacmentAlgorithmLRU>
f010a1c2:	83 c4 10             	add    $0x10,%esp
f010a1c5:	85 c0                	test   %eax,%eax
f010a1c7:	0f 84 34 04 00 00    	je     f010a601 <env_create+0xb91>
				{
					LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f010a1cd:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a1d3:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a1d9:	89 d0                	mov    %edx,%eax
f010a1db:	01 c0                	add    %eax,%eax
f010a1dd:	01 d0                	add    %edx,%eax
f010a1df:	c1 e0 03             	shl    $0x3,%eax
f010a1e2:	83 e8 80             	sub    $0xffffff80,%eax
f010a1e5:	01 c8                	add    %ecx,%eax
f010a1e7:	83 c0 08             	add    $0x8,%eax
f010a1ea:	85 c0                	test   %eax,%eax
f010a1ec:	75 17                	jne    f010a205 <env_create+0x795>
f010a1ee:	83 ec 04             	sub    $0x4,%esp
f010a1f1:	68 bd 57 12 f0       	push   $0xf01257bd
f010a1f6:	68 7a 01 00 00       	push   $0x17a
f010a1fb:	68 2b 57 12 f0       	push   $0xf012572b
f010a200:	e8 15 61 ff ff       	call   f010031a <_panic>
f010a205:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a20b:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a211:	89 d0                	mov    %edx,%eax
f010a213:	01 c0                	add    %eax,%eax
f010a215:	01 d0                	add    %edx,%eax
f010a217:	c1 e0 03             	shl    $0x3,%eax
f010a21a:	01 c8                	add    %ecx,%eax
f010a21c:	05 98 00 00 00       	add    $0x98,%eax
f010a221:	8b 00                	mov    (%eax),%eax
f010a223:	85 c0                	test   %eax,%eax
f010a225:	74 41                	je     f010a268 <env_create+0x7f8>
f010a227:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a22d:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a233:	89 d0                	mov    %edx,%eax
f010a235:	01 c0                	add    %eax,%eax
f010a237:	01 d0                	add    %edx,%eax
f010a239:	c1 e0 03             	shl    $0x3,%eax
f010a23c:	01 c8                	add    %ecx,%eax
f010a23e:	05 98 00 00 00       	add    $0x98,%eax
f010a243:	8b 10                	mov    (%eax),%edx
f010a245:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a24b:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a251:	89 c8                	mov    %ecx,%eax
f010a253:	01 c0                	add    %eax,%eax
f010a255:	01 c8                	add    %ecx,%eax
f010a257:	c1 e0 03             	shl    $0x3,%eax
f010a25a:	01 d8                	add    %ebx,%eax
f010a25c:	05 9c 00 00 00       	add    $0x9c,%eax
f010a261:	8b 00                	mov    (%eax),%eax
f010a263:	89 42 14             	mov    %eax,0x14(%edx)
f010a266:	eb 2a                	jmp    f010a292 <env_create+0x822>
f010a268:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a26e:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a274:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a27a:	89 c8                	mov    %ecx,%eax
f010a27c:	01 c0                	add    %eax,%eax
f010a27e:	01 c8                	add    %ecx,%eax
f010a280:	c1 e0 03             	shl    $0x3,%eax
f010a283:	01 d8                	add    %ebx,%eax
f010a285:	05 9c 00 00 00       	add    $0x9c,%eax
f010a28a:	8b 00                	mov    (%eax),%eax
f010a28c:	89 82 4c d5 01 00    	mov    %eax,0x1d54c(%edx)
f010a292:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a298:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a29e:	89 d0                	mov    %edx,%eax
f010a2a0:	01 c0                	add    %eax,%eax
f010a2a2:	01 d0                	add    %edx,%eax
f010a2a4:	c1 e0 03             	shl    $0x3,%eax
f010a2a7:	01 c8                	add    %ecx,%eax
f010a2a9:	05 9c 00 00 00       	add    $0x9c,%eax
f010a2ae:	8b 00                	mov    (%eax),%eax
f010a2b0:	85 c0                	test   %eax,%eax
f010a2b2:	74 41                	je     f010a2f5 <env_create+0x885>
f010a2b4:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a2ba:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a2c0:	89 d0                	mov    %edx,%eax
f010a2c2:	01 c0                	add    %eax,%eax
f010a2c4:	01 d0                	add    %edx,%eax
f010a2c6:	c1 e0 03             	shl    $0x3,%eax
f010a2c9:	01 c8                	add    %ecx,%eax
f010a2cb:	05 9c 00 00 00       	add    $0x9c,%eax
f010a2d0:	8b 10                	mov    (%eax),%edx
f010a2d2:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a2d8:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a2de:	89 c8                	mov    %ecx,%eax
f010a2e0:	01 c0                	add    %eax,%eax
f010a2e2:	01 c8                	add    %ecx,%eax
f010a2e4:	c1 e0 03             	shl    $0x3,%eax
f010a2e7:	01 d8                	add    %ebx,%eax
f010a2e9:	05 98 00 00 00       	add    $0x98,%eax
f010a2ee:	8b 00                	mov    (%eax),%eax
f010a2f0:	89 42 10             	mov    %eax,0x10(%edx)
f010a2f3:	eb 2a                	jmp    f010a31f <env_create+0x8af>
f010a2f5:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a2fb:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a301:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a307:	89 c8                	mov    %ecx,%eax
f010a309:	01 c0                	add    %eax,%eax
f010a30b:	01 c8                	add    %ecx,%eax
f010a30d:	c1 e0 03             	shl    $0x3,%eax
f010a310:	01 d8                	add    %ebx,%eax
f010a312:	05 98 00 00 00       	add    $0x98,%eax
f010a317:	8b 00                	mov    (%eax),%eax
f010a319:	89 82 48 d5 01 00    	mov    %eax,0x1d548(%edx)
f010a31f:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a325:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a32b:	89 d0                	mov    %edx,%eax
f010a32d:	01 c0                	add    %eax,%eax
f010a32f:	01 d0                	add    %edx,%eax
f010a331:	c1 e0 03             	shl    $0x3,%eax
f010a334:	01 c8                	add    %ecx,%eax
f010a336:	05 98 00 00 00       	add    $0x98,%eax
f010a33b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a341:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a347:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a34d:	89 d0                	mov    %edx,%eax
f010a34f:	01 c0                	add    %eax,%eax
f010a351:	01 d0                	add    %edx,%eax
f010a353:	c1 e0 03             	shl    $0x3,%eax
f010a356:	01 c8                	add    %ecx,%eax
f010a358:	05 9c 00 00 00       	add    $0x9c,%eax
f010a35d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a363:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a369:	8b 90 54 d5 01 00    	mov    0x1d554(%eax),%edx
f010a36f:	4a                   	dec    %edx
f010a370:	89 90 54 d5 01 00    	mov    %edx,0x1d554(%eax)
					//Now: we are sure that at least the top page in the stack will be added to Active list
					//Since we left 1 empty location in the Active list when we loaded the program segments
					if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f010a376:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a37c:	8b 90 1c da 01 00    	mov    0x1da1c(%eax),%edx
f010a382:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a388:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010a38e:	39 c2                	cmp    %eax,%edx
f010a390:	0f 83 38 01 00 00    	jae    f010a4ce <env_create+0xa5e>
					{
						LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f010a396:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a39c:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a3a2:	89 d0                	mov    %edx,%eax
f010a3a4:	01 c0                	add    %eax,%eax
f010a3a6:	01 d0                	add    %edx,%eax
f010a3a8:	c1 e0 03             	shl    $0x3,%eax
f010a3ab:	83 e8 80             	sub    $0xffffff80,%eax
f010a3ae:	01 c8                	add    %ecx,%eax
f010a3b0:	83 c0 08             	add    $0x8,%eax
f010a3b3:	85 c0                	test   %eax,%eax
f010a3b5:	75 17                	jne    f010a3ce <env_create+0x95e>
f010a3b7:	83 ec 04             	sub    $0x4,%esp
f010a3ba:	68 08 57 12 f0       	push   $0xf0125708
f010a3bf:	68 7f 01 00 00       	push   $0x17f
f010a3c4:	68 2b 57 12 f0       	push   $0xf012572b
f010a3c9:	e8 4c 5f ff ff       	call   f010031a <_panic>
f010a3ce:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a3d4:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a3da:	8b 88 10 da 01 00    	mov    0x1da10(%eax),%ecx
f010a3e0:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f010a3e6:	89 d8                	mov    %ebx,%eax
f010a3e8:	01 c0                	add    %eax,%eax
f010a3ea:	01 d8                	add    %ebx,%eax
f010a3ec:	c1 e0 03             	shl    $0x3,%eax
f010a3ef:	01 d0                	add    %edx,%eax
f010a3f1:	05 98 00 00 00       	add    $0x98,%eax
f010a3f6:	89 08                	mov    %ecx,(%eax)
f010a3f8:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a3fe:	89 c8                	mov    %ecx,%eax
f010a400:	01 c0                	add    %eax,%eax
f010a402:	01 c8                	add    %ecx,%eax
f010a404:	c1 e0 03             	shl    $0x3,%eax
f010a407:	01 d0                	add    %edx,%eax
f010a409:	05 98 00 00 00       	add    $0x98,%eax
f010a40e:	8b 00                	mov    (%eax),%eax
f010a410:	85 c0                	test   %eax,%eax
f010a412:	74 2e                	je     f010a442 <env_create+0x9d2>
f010a414:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a41a:	8b 90 10 da 01 00    	mov    0x1da10(%eax),%edx
f010a420:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a426:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a42c:	89 c8                	mov    %ecx,%eax
f010a42e:	01 c0                	add    %eax,%eax
f010a430:	01 c8                	add    %ecx,%eax
f010a432:	c1 e0 03             	shl    $0x3,%eax
f010a435:	83 e8 80             	sub    $0xffffff80,%eax
f010a438:	01 d8                	add    %ebx,%eax
f010a43a:	83 c0 08             	add    $0x8,%eax
f010a43d:	89 42 14             	mov    %eax,0x14(%edx)
f010a440:	eb 29                	jmp    f010a46b <env_create+0x9fb>
f010a442:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a448:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a44e:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a454:	89 c8                	mov    %ecx,%eax
f010a456:	01 c0                	add    %eax,%eax
f010a458:	01 c8                	add    %ecx,%eax
f010a45a:	c1 e0 03             	shl    $0x3,%eax
f010a45d:	83 e8 80             	sub    $0xffffff80,%eax
f010a460:	01 d8                	add    %ebx,%eax
f010a462:	83 c0 08             	add    $0x8,%eax
f010a465:	89 82 14 da 01 00    	mov    %eax,0x1da14(%edx)
f010a46b:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a471:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a477:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a47d:	89 c8                	mov    %ecx,%eax
f010a47f:	01 c0                	add    %eax,%eax
f010a481:	01 c8                	add    %ecx,%eax
f010a483:	c1 e0 03             	shl    $0x3,%eax
f010a486:	83 e8 80             	sub    $0xffffff80,%eax
f010a489:	01 d8                	add    %ebx,%eax
f010a48b:	83 c0 08             	add    $0x8,%eax
f010a48e:	89 82 10 da 01 00    	mov    %eax,0x1da10(%edx)
f010a494:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a49a:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a4a0:	89 d0                	mov    %edx,%eax
f010a4a2:	01 c0                	add    %eax,%eax
f010a4a4:	01 d0                	add    %edx,%eax
f010a4a6:	c1 e0 03             	shl    $0x3,%eax
f010a4a9:	01 c8                	add    %ecx,%eax
f010a4ab:	05 9c 00 00 00       	add    $0x9c,%eax
f010a4b0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a4b6:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a4bc:	8b 90 1c da 01 00    	mov    0x1da1c(%eax),%edx
f010a4c2:	42                   	inc    %edx
f010a4c3:	89 90 1c da 01 00    	mov    %edx,0x1da1c(%eax)
f010a4c9:	e9 33 01 00 00       	jmp    f010a601 <env_create+0xb91>
					}
					else
					{
						LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[lastWSIndex]));
f010a4ce:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a4d4:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a4da:	89 d0                	mov    %edx,%eax
f010a4dc:	01 c0                	add    %eax,%eax
f010a4de:	01 d0                	add    %edx,%eax
f010a4e0:	c1 e0 03             	shl    $0x3,%eax
f010a4e3:	83 e8 80             	sub    $0xffffff80,%eax
f010a4e6:	01 c8                	add    %ecx,%eax
f010a4e8:	83 c0 08             	add    $0x8,%eax
f010a4eb:	85 c0                	test   %eax,%eax
f010a4ed:	75 17                	jne    f010a506 <env_create+0xa96>
f010a4ef:	83 ec 04             	sub    $0x4,%esp
f010a4f2:	68 08 57 12 f0       	push   $0xf0125708
f010a4f7:	68 83 01 00 00       	push   $0x183
f010a4fc:	68 2b 57 12 f0       	push   $0xf012572b
f010a501:	e8 14 5e ff ff       	call   f010031a <_panic>
f010a506:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a50c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a512:	8b 88 20 da 01 00    	mov    0x1da20(%eax),%ecx
f010a518:	8b 9d 4c ff ff ff    	mov    -0xb4(%ebp),%ebx
f010a51e:	89 d8                	mov    %ebx,%eax
f010a520:	01 c0                	add    %eax,%eax
f010a522:	01 d8                	add    %ebx,%eax
f010a524:	c1 e0 03             	shl    $0x3,%eax
f010a527:	01 d0                	add    %edx,%eax
f010a529:	05 98 00 00 00       	add    $0x98,%eax
f010a52e:	89 08                	mov    %ecx,(%eax)
f010a530:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a536:	89 c8                	mov    %ecx,%eax
f010a538:	01 c0                	add    %eax,%eax
f010a53a:	01 c8                	add    %ecx,%eax
f010a53c:	c1 e0 03             	shl    $0x3,%eax
f010a53f:	01 d0                	add    %edx,%eax
f010a541:	05 98 00 00 00       	add    $0x98,%eax
f010a546:	8b 00                	mov    (%eax),%eax
f010a548:	85 c0                	test   %eax,%eax
f010a54a:	74 2e                	je     f010a57a <env_create+0xb0a>
f010a54c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a552:	8b 90 20 da 01 00    	mov    0x1da20(%eax),%edx
f010a558:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a55e:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a564:	89 c8                	mov    %ecx,%eax
f010a566:	01 c0                	add    %eax,%eax
f010a568:	01 c8                	add    %ecx,%eax
f010a56a:	c1 e0 03             	shl    $0x3,%eax
f010a56d:	83 e8 80             	sub    $0xffffff80,%eax
f010a570:	01 d8                	add    %ebx,%eax
f010a572:	83 c0 08             	add    $0x8,%eax
f010a575:	89 42 14             	mov    %eax,0x14(%edx)
f010a578:	eb 29                	jmp    f010a5a3 <env_create+0xb33>
f010a57a:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a580:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a586:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a58c:	89 c8                	mov    %ecx,%eax
f010a58e:	01 c0                	add    %eax,%eax
f010a590:	01 c8                	add    %ecx,%eax
f010a592:	c1 e0 03             	shl    $0x3,%eax
f010a595:	83 e8 80             	sub    $0xffffff80,%eax
f010a598:	01 d8                	add    %ebx,%eax
f010a59a:	83 c0 08             	add    $0x8,%eax
f010a59d:	89 82 24 da 01 00    	mov    %eax,0x1da24(%edx)
f010a5a3:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f010a5a9:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f010a5af:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f010a5b5:	89 c8                	mov    %ecx,%eax
f010a5b7:	01 c0                	add    %eax,%eax
f010a5b9:	01 c8                	add    %ecx,%eax
f010a5bb:	c1 e0 03             	shl    $0x3,%eax
f010a5be:	83 e8 80             	sub    $0xffffff80,%eax
f010a5c1:	01 d8                	add    %ebx,%eax
f010a5c3:	83 c0 08             	add    $0x8,%eax
f010a5c6:	89 82 20 da 01 00    	mov    %eax,0x1da20(%edx)
f010a5cc:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f010a5d2:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f010a5d8:	89 d0                	mov    %edx,%eax
f010a5da:	01 c0                	add    %eax,%eax
f010a5dc:	01 d0                	add    %edx,%eax
f010a5de:	c1 e0 03             	shl    $0x3,%eax
f010a5e1:	01 c8                	add    %ecx,%eax
f010a5e3:	05 9c 00 00 00       	add    $0x9c,%eax
f010a5e8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a5ee:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a5f4:	8b 90 2c da 01 00    	mov    0x1da2c(%eax),%edx
f010a5fa:	42                   	inc    %edx
f010a5fb:	89 90 2c da 01 00    	mov    %edx,0x1da2c(%eax)

				//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));
			}

			//add this page to the page file
			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f010a601:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a607:	83 ec 04             	sub    $0x4,%esp
f010a60a:	6a 01                	push   $0x1
f010a60c:	ff 75 c0             	pushl  -0x40(%ebp)
f010a60f:	50                   	push   %eax
f010a610:	e8 05 9a ff ff       	call   f010401a <pf_add_empty_env_page>
f010a615:	83 c4 10             	add    $0x10,%esp
f010a618:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)

		//cprintf("\nwill allocate stack pages\n");
		uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

		uint32 stackVa = USTACKTOP - PAGE_SIZE;
		for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f010a61e:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f010a625:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010a628:	3b 85 50 ff ff ff    	cmp    -0xb0(%ebp),%eax
f010a62e:	0f 83 ca fa ff ff    	jae    f010a0fe <env_create+0x68e>
			//if(success == 0) LOG_STATMENT(cprintf("STACK Page added to page file successfully\n"));
		}

		//2020
		//LRU Lists: Reset PRESENT bit of all pages in Second List
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010a634:	83 ec 0c             	sub    $0xc,%esp
f010a637:	6a 02                	push   $0x2
f010a639:	e8 88 40 00 00       	call   f010e6c6 <isPageReplacmentAlgorithmLRU>
f010a63e:	83 c4 10             	add    $0x10,%esp
f010a641:	85 c0                	test   %eax,%eax
f010a643:	74 72                	je     f010a6b7 <env_create+0xc47>
		{
			struct WorkingSetElement * elm = NULL;
f010a645:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
			LIST_FOREACH(elm, &(e->SecondList))
f010a64c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a652:	8b 80 20 da 01 00    	mov    0x1da20(%eax),%eax
f010a658:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010a65b:	eb 2b                	jmp    f010a688 <env_create+0xc18>
			{
				//set it's PRESENT bit to 0
				pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f010a65d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f010a660:	8b 10                	mov    (%eax),%edx
f010a662:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a668:	8b 40 64             	mov    0x64(%eax),%eax
f010a66b:	6a 01                	push   $0x1
f010a66d:	6a 00                	push   $0x0
f010a66f:	52                   	push   %edx
f010a670:	50                   	push   %eax
f010a671:	e8 b2 e4 ff ff       	call   f0108b28 <pt_set_page_permissions>
f010a676:	83 c4 10             	add    $0x10,%esp
		//2020
		//LRU Lists: Reset PRESENT bit of all pages in Second List
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
		{
			struct WorkingSetElement * elm = NULL;
			LIST_FOREACH(elm, &(e->SecondList))
f010a679:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a67f:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f010a685:	89 45 bc             	mov    %eax,-0x44(%ebp)
f010a688:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f010a68e:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f010a692:	74 08                	je     f010a69c <env_create+0xc2c>
f010a694:	8b 55 bc             	mov    -0x44(%ebp),%edx
f010a697:	8b 52 10             	mov    0x10(%edx),%edx
f010a69a:	eb 05                	jmp    f010a6a1 <env_create+0xc31>
f010a69c:	ba 00 00 00 00       	mov    $0x0,%edx
f010a6a1:	89 90 28 da 01 00    	mov    %edx,0x1da28(%eax)
f010a6a7:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f010a6ad:	85 c0                	test   %eax,%eax
f010a6af:	75 ac                	jne    f010a65d <env_create+0xbed>
f010a6b1:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f010a6b5:	75 a6                	jne    f010a65d <env_create+0xbed>
f010a6b7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f010a6ba:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010a6bd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010a6c0:	0f 22 d8             	mov    %eax,%cr3

		///[11] switch back to the page directory exists before segment loading
		lcr3(cur_phys_pgdir) ;
	}
	//[12] Re-enable the interrupt (if it was too)
	popcli();
f010a6c3:	e8 4a cb ff ff       	call   f0107212 <popcli>
//		env_page_ws_print(e);

		//	cprintf("Table working set after loading the program...\n");
		//	env_table_ws_print(e);
	}
	return e;
f010a6c8:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
}
f010a6ce:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010a6d1:	5b                   	pop    %ebx
f010a6d2:	5e                   	pop    %esi
f010a6d3:	5f                   	pop    %edi
f010a6d4:	5d                   	pop    %ebp
f010a6d5:	c3                   	ret    

f010a6d6 <env_start>:
// 2) START EXECUTING THE PROCESS:
//===============================
// called only at the very first scheduling by scheduler()
// will context_switch() here.  "Return" to user space.
void env_start(void)
{
f010a6d6:	55                   	push   %ebp
f010a6d7:	89 e5                	mov    %esp,%ebp
f010a6d9:	83 ec 18             	sub    $0x18,%esp
	static int first = 1;
	// Still holding q.lock from scheduler.
	release_spinlock(&ProcessQueues.qlock);
f010a6dc:	83 ec 0c             	sub    $0xc,%esp
f010a6df:	68 60 24 55 f0       	push   $0xf0552460
f010a6e4:	e8 75 44 00 00       	call   f010eb5e <release_spinlock>
f010a6e9:	83 c4 10             	add    $0x10,%esp

	if (first)
f010a6ec:	a1 60 99 17 f0       	mov    0xf0179960,%eax
f010a6f1:	85 c0                	test   %eax,%eax
f010a6f3:	74 30                	je     f010a725 <env_start+0x4f>
	{
		struct Env* p = get_cpu_proc();
f010a6f5:	e8 76 00 00 00       	call   f010a770 <get_cpu_proc>
f010a6fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
		cprintf("\n[ENV_START] %s - %d\n", p->prog_name, p->env_id);
f010a6fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a700:	8b 40 10             	mov    0x10(%eax),%eax
f010a703:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a706:	83 c2 20             	add    $0x20,%edx
f010a709:	83 ec 04             	sub    $0x4,%esp
f010a70c:	50                   	push   %eax
f010a70d:	52                   	push   %edx
f010a70e:	68 db 57 12 f0       	push   $0xf01257db
f010a713:	e8 54 68 ff ff       	call   f0100f6c <cprintf>
f010a718:	83 c4 10             	add    $0x10,%esp

		// Some initialization functions must be run in the context
		// of a regular process (e.g., they call sleep), and thus cannot
		// be run from main().
		first = 0;
f010a71b:	c7 05 60 99 17 f0 00 	movl   $0x0,0xf0179960
f010a722:	00 00 00 
	}

	// Return to "caller", actually trapret (see initialize_environment()).
}
f010a725:	90                   	nop
f010a726:	c9                   	leave  
f010a727:	c3                   	ret    

f010a728 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f010a728:	55                   	push   %ebp
f010a729:	89 e5                	mov    %esp,%ebp
	/*REMOVE THIS LINE BEFORE START CODING*/
	return;
f010a72b:	90                   	nop

	// [10] free the environment (return it back to the free environment list)
	/*(ALREADY DONE for you)*/
	free_environment(e); /*(ALREADY DONE for you)*/ // (frees the environment (returns it back to the free environment list))
	/*========================*/
}
f010a72c:	5d                   	pop    %ebp
f010a72d:	c3                   	ret    

f010a72e <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
//Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit(void)
{
f010a72e:	55                   	push   %ebp
f010a72f:	89 e5                	mov    %esp,%ebp
f010a731:	83 ec 18             	sub    $0x18,%esp
	struct Env* cur_env = get_cpu_proc();
f010a734:	e8 37 00 00 00       	call   f010a770 <get_cpu_proc>
f010a739:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(cur_env != NULL);
f010a73c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a740:	75 19                	jne    f010a75b <env_exit+0x2d>
f010a742:	68 f1 57 12 f0       	push   $0xf01257f1
f010a747:	68 01 58 12 f0       	push   $0xf0125801
f010a74c:	68 ea 01 00 00       	push   $0x1ea
f010a751:	68 2b 57 12 f0       	push   $0xf012572b
f010a756:	e8 bf 5b ff ff       	call   f010031a <_panic>
	sched_exit_env(cur_env->env_id);
f010a75b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a75e:	8b 40 10             	mov    0x10(%eax),%eax
f010a761:	83 ec 0c             	sub    $0xc,%esp
f010a764:	50                   	push   %eax
f010a765:	e8 48 b0 ff ff       	call   f01057b2 <sched_exit_env>
f010a76a:	83 c4 10             	add    $0x10,%esp
	//2024: Replaced by context switch
	//fos_scheduler();
	//context_switch(&(curenv->context), mycpu()->scheduler);
}
f010a76d:	90                   	nop
f010a76e:	c9                   	leave  
f010a76f:	c3                   	ret    

f010a770 <get_cpu_proc>:
//===================================
// Disable interrupts so that we are not rescheduled
// while reading proc from the cpu structure
// Ref: xv6-x86 OS
struct Env* get_cpu_proc(void)
{
f010a770:	55                   	push   %ebp
f010a771:	89 e5                	mov    %esp,%ebp
f010a773:	83 ec 18             	sub    $0x18,%esp
	struct cpu *c;
	struct Env *p;
	pushcli();
f010a776:	e8 45 ca ff ff       	call   f01071c0 <pushcli>
	c = mycpu();
f010a77b:	e8 7d c9 ff ff       	call   f01070fd <mycpu>
f010a780:	89 45 f4             	mov    %eax,-0xc(%ebp)
	p = c->proc;
f010a783:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a786:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010a78c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	popcli();
f010a78f:	e8 7e ca ff ff       	call   f0107212 <popcli>
	return p;
f010a794:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f010a797:	c9                   	leave  
f010a798:	c3                   	ret    

f010a799 <set_cpu_proc>:
//===================================
// Disable interrupts so that we are not rescheduled
// while setting proc into the cpu structure
// Ref: xv6-x86 OS
void set_cpu_proc(struct Env* p)
{
f010a799:	55                   	push   %ebp
f010a79a:	89 e5                	mov    %esp,%ebp
f010a79c:	83 ec 18             	sub    $0x18,%esp
	struct cpu *c;
	pushcli();
f010a79f:	e8 1c ca ff ff       	call   f01071c0 <pushcli>
	c = mycpu();
f010a7a4:	e8 54 c9 ff ff       	call   f01070fd <mycpu>
f010a7a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	c->proc = p;
f010a7ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a7af:	8b 55 08             	mov    0x8(%ebp),%edx
f010a7b2:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
	popcli();
f010a7b8:	e8 55 ca ff ff       	call   f0107212 <popcli>
}
f010a7bd:	90                   	nop
f010a7be:	c9                   	leave  
f010a7bf:	c3                   	ret    

f010a7c0 <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f010a7c0:	55                   	push   %ebp
f010a7c1:	89 e5                	mov    %esp,%ebp
f010a7c3:	53                   	push   %ebx
f010a7c4:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f010a7c7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a7cb:	75 16                	jne    f010a7e3 <envid2env+0x23>
		*env_store = get_cpu_proc();
f010a7cd:	e8 9e ff ff ff       	call   f010a770 <get_cpu_proc>
f010a7d2:	89 c2                	mov    %eax,%edx
f010a7d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a7d7:	89 10                	mov    %edx,(%eax)
		return 0;
f010a7d9:	b8 00 00 00 00       	mov    $0x0,%eax
f010a7de:	e9 b6 00 00 00       	jmp    f010a899 <envid2env+0xd9>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f010a7e3:	8b 1d 10 1a 55 f0    	mov    0xf0551a10,%ebx
f010a7e9:	83 ec 0c             	sub    $0xc,%esp
f010a7ec:	6a 08                	push   $0x8
f010a7ee:	e8 2e 48 01 00       	call   f011f021 <nearest_pow2_ceil>
f010a7f3:	83 c4 10             	add    $0x10,%esp
f010a7f6:	8d 50 ff             	lea    -0x1(%eax),%edx
f010a7f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a7fc:	21 c2                	and    %eax,%edx
f010a7fe:	89 d0                	mov    %edx,%eax
f010a800:	c1 e0 06             	shl    $0x6,%eax
f010a803:	29 d0                	sub    %edx,%eax
f010a805:	c1 e0 02             	shl    $0x2,%eax
f010a808:	01 d0                	add    %edx,%eax
f010a80a:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010a811:	01 c8                	add    %ecx,%eax
f010a813:	c1 e0 03             	shl    $0x3,%eax
f010a816:	01 d0                	add    %edx,%eax
f010a818:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010a81f:	29 c2                	sub    %eax,%edx
f010a821:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f010a828:	89 c2                	mov    %eax,%edx
f010a82a:	89 d0                	mov    %edx,%eax
f010a82c:	01 d8                	add    %ebx,%eax
f010a82e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f010a831:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a834:	8b 40 18             	mov    0x18(%eax),%eax
f010a837:	85 c0                	test   %eax,%eax
f010a839:	74 0b                	je     f010a846 <envid2env+0x86>
f010a83b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a83e:	8b 40 10             	mov    0x10(%eax),%eax
f010a841:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a844:	74 10                	je     f010a856 <envid2env+0x96>
		*env_store = 0;
f010a846:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a849:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010a84f:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010a854:	eb 43                	jmp    f010a899 <envid2env+0xd9>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	struct Env* cur_env = get_cpu_proc();
f010a856:	e8 15 ff ff ff       	call   f010a770 <get_cpu_proc>
f010a85b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (checkperm && e != cur_env && e->env_parent_id != cur_env->env_id) {
f010a85e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f010a862:	74 28                	je     f010a88c <envid2env+0xcc>
f010a864:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a867:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010a86a:	74 20                	je     f010a88c <envid2env+0xcc>
f010a86c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a86f:	8b 50 14             	mov    0x14(%eax),%edx
f010a872:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a875:	8b 40 10             	mov    0x10(%eax),%eax
f010a878:	39 c2                	cmp    %eax,%edx
f010a87a:	74 10                	je     f010a88c <envid2env+0xcc>
		*env_store = 0;
f010a87c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a87f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010a885:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010a88a:	eb 0d                	jmp    f010a899 <envid2env+0xd9>
	}

	*env_store = e;
f010a88c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a88f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a892:	89 10                	mov    %edx,(%eax)
	return 0;
f010a894:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a899:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a89c:	c9                   	leave  
f010a89d:	c3                   	ret    

f010a89e <yield>:
// 8) GIVE-UP CPU TO THE SCHEDULER:
//=================================
// Give up the CPU for one scheduling round.
// Ref: xv6-x86 OS
void yield(void)
{
f010a89e:	55                   	push   %ebp
f010a89f:	89 e5                	mov    %esp,%ebp
f010a8a1:	83 ec 18             	sub    $0x18,%esp
	//cprintf("\n[YIELD] acquire: lock status before acquire = %d\n", qlock.locked);
	acquire_spinlock(&ProcessQueues.qlock);  //lock: to protect process Qs in multi-CPU
f010a8a4:	83 ec 0c             	sub    $0xc,%esp
f010a8a7:	68 60 24 55 f0       	push   $0xf0552460
f010a8ac:	e8 26 42 00 00       	call   f010ead7 <acquire_spinlock>
f010a8b1:	83 c4 10             	add    $0x10,%esp
	{
		struct Env* p = get_cpu_proc();
f010a8b4:	e8 b7 fe ff ff       	call   f010a770 <get_cpu_proc>
f010a8b9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		assert(p != NULL);
f010a8bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a8c0:	75 19                	jne    f010a8db <yield+0x3d>
f010a8c2:	68 16 58 12 f0       	push   $0xf0125816
f010a8c7:	68 01 58 12 f0       	push   $0xf0125801
f010a8cc:	68 49 02 00 00       	push   $0x249
f010a8d1:	68 2b 57 12 f0       	push   $0xf012572b
f010a8d6:	e8 3f 5a ff ff       	call   f010031a <_panic>
		p->env_status = ENV_READY;
f010a8db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a8de:	c7 40 18 01 00 00 00 	movl   $0x1,0x18(%eax)
		sched();
f010a8e5:	e8 13 00 00 00       	call   f010a8fd <sched>
	}
	release_spinlock(&ProcessQueues.qlock); ////release lock
f010a8ea:	83 ec 0c             	sub    $0xc,%esp
f010a8ed:	68 60 24 55 f0       	push   $0xf0552460
f010a8f2:	e8 67 42 00 00       	call   f010eb5e <release_spinlock>
f010a8f7:	83 c4 10             	add    $0x10,%esp
	//cprintf("\n[YIELD] release: lock status after release = %d\n", qlock.locked);
}
f010a8fa:	90                   	nop
f010a8fb:	c9                   	leave  
f010a8fc:	c3                   	ret    

f010a8fd <sched>:
// Saves and restores intena because intena is a property of this kernel thread, not this CPU.
// It should be proc->intena and proc->ncli, but that would break in the few places
// where a lock is held but there's no process.
// Ref: xv6-x86 OS
void sched(void)
{
f010a8fd:	55                   	push   %ebp
f010a8fe:	89 e5                	mov    %esp,%ebp
f010a900:	83 ec 18             	sub    $0x18,%esp
	int intena;
	struct Env *p = get_cpu_proc();
f010a903:	e8 68 fe ff ff       	call   f010a770 <get_cpu_proc>
f010a908:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(p != NULL);
f010a90b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a90f:	75 19                	jne    f010a92a <sched+0x2d>
f010a911:	68 16 58 12 f0       	push   $0xf0125816
f010a916:	68 01 58 12 f0       	push   $0xf0125801
f010a91b:	68 5d 02 00 00       	push   $0x25d
f010a920:	68 2b 57 12 f0       	push   $0xf012572b
f010a925:	e8 f0 59 ff ff       	call   f010031a <_panic>

	/*To protect process Qs (or info of current process) in multi-CPU*/
	if(!holding_spinlock(&ProcessQueues.qlock))
f010a92a:	83 ec 0c             	sub    $0xc,%esp
f010a92d:	68 60 24 55 f0       	push   $0xf0552460
f010a932:	e8 b9 43 00 00       	call   f010ecf0 <holding_spinlock>
f010a937:	83 c4 10             	add    $0x10,%esp
f010a93a:	85 c0                	test   %eax,%eax
f010a93c:	75 17                	jne    f010a955 <sched+0x58>
		panic("sched: q.lock is not held by this CPU while it's expected to be. ");
f010a93e:	83 ec 04             	sub    $0x4,%esp
f010a941:	68 20 58 12 f0       	push   $0xf0125820
f010a946:	68 61 02 00 00       	push   $0x261
f010a94b:	68 2b 57 12 f0       	push   $0xf012572b
f010a950:	e8 c5 59 ff ff       	call   f010031a <_panic>
	/*Should ensure that the ncli = 1 so that the interrupt will be released after scheduling the next proc*/
	if(mycpu()->ncli != 1)
f010a955:	e8 a3 c7 ff ff       	call   f01070fd <mycpu>
f010a95a:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f010a960:	83 f8 01             	cmp    $0x1,%eax
f010a963:	74 20                	je     f010a985 <sched+0x88>
		panic("sched locks: ncli = %d", mycpu()->ncli);
f010a965:	e8 93 c7 ff ff       	call   f01070fd <mycpu>
f010a96a:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
f010a970:	50                   	push   %eax
f010a971:	68 62 58 12 f0       	push   $0xf0125862
f010a976:	68 64 02 00 00       	push   $0x264
f010a97b:	68 2b 57 12 f0       	push   $0xf012572b
f010a980:	e8 95 59 ff ff       	call   f010031a <_panic>
	/*********************************************************************/
	if(p->env_status == ENV_RUNNING)
f010a985:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a988:	8b 40 18             	mov    0x18(%eax),%eax
f010a98b:	83 f8 02             	cmp    $0x2,%eax
f010a98e:	75 17                	jne    f010a9a7 <sched+0xaa>
		panic("sched a running process");
f010a990:	83 ec 04             	sub    $0x4,%esp
f010a993:	68 79 58 12 f0       	push   $0xf0125879
f010a998:	68 67 02 00 00       	push   $0x267
f010a99d:	68 2b 57 12 f0       	push   $0xf012572b
f010a9a2:	e8 73 59 ff ff       	call   f010031a <_panic>

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f010a9a7:	9c                   	pushf  
f010a9a8:	58                   	pop    %eax
f010a9a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        return eflags;
f010a9ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
	if(read_eflags()&FL_IF)
f010a9af:	25 00 02 00 00       	and    $0x200,%eax
f010a9b4:	85 c0                	test   %eax,%eax
f010a9b6:	74 17                	je     f010a9cf <sched+0xd2>
		panic("sched is interruptible!");
f010a9b8:	83 ec 04             	sub    $0x4,%esp
f010a9bb:	68 91 58 12 f0       	push   $0xf0125891
f010a9c0:	68 69 02 00 00       	push   $0x269
f010a9c5:	68 2b 57 12 f0       	push   $0xf012572b
f010a9ca:	e8 4b 59 ff ff       	call   f010031a <_panic>
	intena = mycpu()->intena;
f010a9cf:	e8 29 c7 ff ff       	call   f01070fd <mycpu>
f010a9d4:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
f010a9da:	89 45 f0             	mov    %eax,-0x10(%ebp)
	context_switch(&(p->context), mycpu()->scheduler);
f010a9dd:	e8 1b c7 ff ff       	call   f01070fd <mycpu>
f010a9e2:	8b 40 04             	mov    0x4(%eax),%eax
f010a9e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a9e8:	83 c2 04             	add    $0x4,%edx
f010a9eb:	83 ec 08             	sub    $0x8,%esp
f010a9ee:	50                   	push   %eax
f010a9ef:	52                   	push   %edx
f010a9f0:	e8 4a a1 ff ff       	call   f0104b3f <context_switch>
f010a9f5:	83 c4 10             	add    $0x10,%esp
	mycpu()->intena = intena;
f010a9f8:	e8 00 c7 ff ff       	call   f01070fd <mycpu>
f010a9fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010aa00:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
}
f010aa06:	90                   	nop
f010aa07:	c9                   	leave  
f010aa08:	c3                   	ret    

f010aa09 <switchkvm>:
// 10) SWITCH VIRTUAL MEMORYs:
//===============================
// [10.1] Switch h/w page table register to the kernel-only page table,
// for when no process is running.
void switchkvm(void)
{
f010aa09:	55                   	push   %ebp
f010aa0a:	89 e5                	mov    %esp,%ebp
f010aa0c:	83 ec 10             	sub    $0x10,%esp
	lcr3(phys_page_directory);   // switch to the kernel page table
f010aa0f:	a1 e4 51 55 f0       	mov    0xf05551e4,%eax
f010aa14:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010aa17:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010aa1a:	0f 22 d8             	mov    %eax,%cr3
}
f010aa1d:	90                   	nop
f010aa1e:	c9                   	leave  
f010aa1f:	c3                   	ret    

f010aa20 <switchuvm>:

// [10.2] Switch TSS and h/w page table to correspond to process p.
void switchuvm(struct Env *proc)
{
f010aa20:	55                   	push   %ebp
f010aa21:	89 e5                	mov    %esp,%ebp
f010aa23:	53                   	push   %ebx
f010aa24:	83 ec 14             	sub    $0x14,%esp
	if(proc == 0)
f010aa27:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010aa2b:	75 17                	jne    f010aa44 <switchuvm+0x24>
		panic("switchuvm: no process");
f010aa2d:	83 ec 04             	sub    $0x4,%esp
f010aa30:	68 a9 58 12 f0       	push   $0xf01258a9
f010aa35:	68 7e 02 00 00       	push   $0x27e
f010aa3a:	68 2b 57 12 f0       	push   $0xf012572b
f010aa3f:	e8 d6 58 ff ff       	call   f010031a <_panic>
	if(proc->kstack == 0)
f010aa44:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa47:	8b 40 70             	mov    0x70(%eax),%eax
f010aa4a:	85 c0                	test   %eax,%eax
f010aa4c:	75 17                	jne    f010aa65 <switchuvm+0x45>
		panic("switchuvm: no kstack");
f010aa4e:	83 ec 04             	sub    $0x4,%esp
f010aa51:	68 bf 58 12 f0       	push   $0xf01258bf
f010aa56:	68 80 02 00 00       	push   $0x280
f010aa5b:	68 2b 57 12 f0       	push   $0xf012572b
f010aa60:	e8 b5 58 ff ff       	call   f010031a <_panic>
	if(proc->env_page_directory == 0)
f010aa65:	8b 45 08             	mov    0x8(%ebp),%eax
f010aa68:	8b 40 64             	mov    0x64(%eax),%eax
f010aa6b:	85 c0                	test   %eax,%eax
f010aa6d:	75 17                	jne    f010aa86 <switchuvm+0x66>
		panic("switchuvm: no pgdir");
f010aa6f:	83 ec 04             	sub    $0x4,%esp
f010aa72:	68 d4 58 12 f0       	push   $0xf01258d4
f010aa77:	68 82 02 00 00       	push   $0x282
f010aa7c:	68 2b 57 12 f0       	push   $0xf012572b
f010aa81:	e8 94 58 ff ff       	call   f010031a <_panic>

	pushcli();	//disable interrupt - lock: to protect CPU info
f010aa86:	e8 35 c7 ff ff       	call   f01071c0 <pushcli>
	struct cpu* c = mycpu();
f010aa8b:	e8 6d c6 ff ff       	call   f01070fd <mycpu>
f010aa90:	89 45 f4             	mov    %eax,-0xc(%ebp)
	c->proc = proc;
f010aa93:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aa96:	8b 55 08             	mov    0x8(%ebp),%edx
f010aa99:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)

	// Initialize the TSS field of the gdt.
	c->gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&(c->ts)), sizeof(struct Taskstate), 0);
f010aa9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aaa2:	83 c0 0c             	add    $0xc,%eax
f010aaa5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aaa8:	83 c2 0c             	add    $0xc,%edx
f010aaab:	c1 ea 10             	shr    $0x10,%edx
f010aaae:	88 d3                	mov    %dl,%bl
f010aab0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aab3:	83 c2 0c             	add    $0xc,%edx
f010aab6:	c1 ea 18             	shr    $0x18,%edx
f010aab9:	88 d1                	mov    %dl,%cl
f010aabb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aabe:	66 c7 82 9c 00 00 00 	movw   $0x68,0x9c(%edx)
f010aac5:	68 00 
f010aac7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010aaca:	66 89 82 9e 00 00 00 	mov    %ax,0x9e(%edx)
f010aad1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aad4:	88 98 a0 00 00 00    	mov    %bl,0xa0(%eax)
f010aada:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aadd:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010aae3:	83 e2 f0             	and    $0xfffffff0,%edx
f010aae6:	83 ca 09             	or     $0x9,%edx
f010aae9:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010aaef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010aaf2:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010aaf8:	83 ca 10             	or     $0x10,%edx
f010aafb:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010ab01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab04:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010ab0a:	83 e2 9f             	and    $0xffffff9f,%edx
f010ab0d:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010ab13:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab16:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010ab1c:	83 ca 80             	or     $0xffffff80,%edx
f010ab1f:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010ab25:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab28:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010ab2e:	83 e2 f0             	and    $0xfffffff0,%edx
f010ab31:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010ab37:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab3a:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010ab40:	83 e2 ef             	and    $0xffffffef,%edx
f010ab43:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010ab49:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab4c:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010ab52:	83 e2 df             	and    $0xffffffdf,%edx
f010ab55:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010ab5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab5e:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010ab64:	83 ca 40             	or     $0x40,%edx
f010ab67:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010ab6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab70:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010ab76:	83 e2 7f             	and    $0x7f,%edx
f010ab79:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010ab7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab82:	88 88 a3 00 00 00    	mov    %cl,0xa3(%eax)
	c->gdt[GD_TSS >> 3].sd_s = 0;
f010ab88:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab8b:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010ab91:	83 e2 ef             	and    $0xffffffef,%edx
f010ab94:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)

	//adjust the default stack for the trap to be the user kernel stack
	c->ts.ts_esp0 = (uint32)(c->proc->kstack + KERNEL_STACK_SIZE);
f010ab9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ab9d:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010aba3:	8b 40 70             	mov    0x70(%eax),%eax
f010aba6:	05 00 80 00 00       	add    $0x8000,%eax
f010abab:	89 c2                	mov    %eax,%edx
f010abad:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abb0:	89 50 10             	mov    %edx,0x10(%eax)
	c->ts.ts_ss0 = GD_KD;
f010abb3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abb6:	66 c7 40 14 10 00    	movw   $0x10,0x14(%eax)
f010abbc:	66 c7 45 f2 28 00    	movw   $0x28,-0xe(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010abc2:	66 8b 45 f2          	mov    -0xe(%ebp),%ax
f010abc6:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	//load the user page directory
	lcr3(c->proc->env_cr3) ;
f010abc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010abcc:	8b 80 b0 00 00 00    	mov    0xb0(%eax),%eax
f010abd2:	8b 40 68             	mov    0x68(%eax),%eax
f010abd5:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f010abd8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010abdb:	0f 22 d8             	mov    %eax,%cr3

	popcli();	//enable interrupt
f010abde:	e8 2f c6 ff ff       	call   f0107212 <popcli>
}
f010abe3:	90                   	nop
f010abe4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010abe7:	c9                   	leave  
f010abe8:	c3                   	ret    

f010abe9 <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f010abe9:	55                   	push   %ebp
f010abea:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f010abec:	8b 15 14 1a 55 f0    	mov    0xf0551a14,%edx
f010abf2:	8b 45 08             	mov    0x8(%ebp),%eax
f010abf5:	89 10                	mov    %edx,(%eax)
f010abf7:	8b 45 08             	mov    0x8(%ebp),%eax
f010abfa:	8b 00                	mov    (%eax),%eax
f010abfc:	85 c0                	test   %eax,%eax
f010abfe:	75 07                	jne    f010ac07 <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f010ac00:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f010ac05:	eb 11                	jmp    f010ac18 <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f010ac07:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac0a:	8b 00                	mov    (%eax),%eax
f010ac0c:	c7 40 18 06 00 00 00 	movl   $0x6,0x18(%eax)
	return 0;
f010ac13:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010ac18:	5d                   	pop    %ebp
f010ac19:	c3                   	ret    

f010ac1a <free_environment>:
//===============================
// 2) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f010ac1a:	55                   	push   %ebp
f010ac1b:	89 e5                	mov    %esp,%ebp
f010ac1d:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f010ac20:	83 ec 04             	sub    $0x4,%esp
f010ac23:	68 6c da 01 00       	push   $0x1da6c
f010ac28:	6a 00                	push   $0x0
f010ac2a:	ff 75 08             	pushl  0x8(%ebp)
f010ac2d:	e8 46 5e 01 00       	call   f0120a78 <memset>
f010ac32:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f010ac35:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac38:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f010ac3f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010ac43:	75 17                	jne    f010ac5c <free_environment+0x42>
f010ac45:	83 ec 04             	sub    $0x4,%esp
f010ac48:	68 08 57 12 f0       	push   $0xf0125708
f010ac4d:	68 bd 02 00 00       	push   $0x2bd
f010ac52:	68 2b 57 12 f0       	push   $0xf012572b
f010ac57:	e8 be 56 ff ff       	call   f010031a <_panic>
f010ac5c:	8b 15 14 1a 55 f0    	mov    0xf0551a14,%edx
f010ac62:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac65:	89 50 08             	mov    %edx,0x8(%eax)
f010ac68:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac6b:	8b 40 08             	mov    0x8(%eax),%eax
f010ac6e:	85 c0                	test   %eax,%eax
f010ac70:	74 0d                	je     f010ac7f <free_environment+0x65>
f010ac72:	a1 14 1a 55 f0       	mov    0xf0551a14,%eax
f010ac77:	8b 55 08             	mov    0x8(%ebp),%edx
f010ac7a:	89 50 0c             	mov    %edx,0xc(%eax)
f010ac7d:	eb 08                	jmp    f010ac87 <free_environment+0x6d>
f010ac7f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac82:	a3 18 1a 55 f0       	mov    %eax,0xf0551a18
f010ac87:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac8a:	a3 14 1a 55 f0       	mov    %eax,0xf0551a14
f010ac8f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ac92:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f010ac99:	a1 20 1a 55 f0       	mov    0xf0551a20,%eax
f010ac9e:	40                   	inc    %eax
f010ac9f:	a3 20 1a 55 f0       	mov    %eax,0xf0551a20
}
f010aca4:	90                   	nop
f010aca5:	c9                   	leave  
f010aca6:	c3                   	ret    

f010aca7 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f010aca7:	55                   	push   %ebp
f010aca8:	89 e5                	mov    %esp,%ebp
f010acaa:	53                   	push   %ebx
f010acab:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f010acae:	8b 45 0c             	mov    0xc(%ebp),%eax
f010acb1:	8b 40 0c             	mov    0xc(%eax),%eax
f010acb4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f010acb7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010acba:	8b 40 08             	mov    0x8(%eax),%eax
f010acbd:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f010acc0:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f010acc7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010acca:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010accd:	01 c2                	add    %eax,%edx
f010accf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010acd2:	01 d0                	add    %edx,%eax
f010acd4:	48                   	dec    %eax
f010acd5:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010acd8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010acdb:	ba 00 00 00 00       	mov    $0x0,%edx
f010ace0:	f7 75 dc             	divl   -0x24(%ebp)
f010ace3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010ace6:	29 d0                	sub    %edx,%eax
f010ace8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f010aceb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010acee:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010acf1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010acf4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010acf9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f010acfc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f010ad03:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f010ad0a:	8b 45 10             	mov    0x10(%ebp),%eax
f010ad0d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f010ad13:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f010ad1a:	0f 85 35 06 00 00    	jne    f010b355 <program_segment_alloc_map_copy_workingset+0x6ae>
f010ad20:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad23:	83 c0 20             	add    $0x20,%eax
f010ad26:	83 ec 08             	sub    $0x8,%esp
f010ad29:	68 e8 58 12 f0       	push   $0xf01258e8
f010ad2e:	50                   	push   %eax
f010ad2f:	e8 62 5c 01 00       	call   f0120996 <strcmp>
f010ad34:	83 c4 10             	add    $0x10,%esp
f010ad37:	85 c0                	test   %eax,%eax
f010ad39:	0f 84 16 06 00 00    	je     f010b355 <program_segment_alloc_map_copy_workingset+0x6ae>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f010ad3f:	8b 45 14             	mov    0x14(%ebp),%eax
f010ad42:	83 f8 06             	cmp    $0x6,%eax
f010ad45:	76 05                	jbe    f010ad4c <program_segment_alloc_map_copy_workingset+0xa5>
f010ad47:	b8 06 00 00 00       	mov    $0x6,%eax
f010ad4c:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010ad4f:	e9 01 06 00 00       	jmp    f010b355 <program_segment_alloc_map_copy_workingset+0x6ae>
	{
		// Allocate a page
		allocate_frame(&p) ;
f010ad54:	83 ec 0c             	sub    $0xc,%esp
f010ad57:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010ad5a:	50                   	push   %eax
f010ad5b:	e8 70 d4 ff ff       	call   f01081d0 <allocate_frame>
f010ad60:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f010ad63:	8b 55 c0             	mov    -0x40(%ebp),%edx
f010ad66:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad69:	8b 40 64             	mov    0x64(%eax),%eax
f010ad6c:	6a 06                	push   $0x6
f010ad6e:	ff 75 f4             	pushl  -0xc(%ebp)
f010ad71:	52                   	push   %edx
f010ad72:	50                   	push   %eax
f010ad73:	e8 6c da ff ff       	call   f01087e4 <loadtime_map_frame>
f010ad78:	83 c4 10             	add    $0x10,%esp
		wse->time_stamp = 0;
		LIST_INSERT_TAIL(&(e->page_WS_list), wse);

#else
		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));
		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f010ad7b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ad7e:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010ad84:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ad87:	89 d0                	mov    %edx,%eax
f010ad89:	01 c0                	add    %eax,%eax
f010ad8b:	01 d0                	add    %edx,%eax
f010ad8d:	c1 e0 03             	shl    $0x3,%eax
f010ad90:	01 c8                	add    %ecx,%eax
f010ad92:	8d 90 88 00 00 00    	lea    0x88(%eax),%edx
f010ad98:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ad9b:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f010ad9d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ada0:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010ada6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ada9:	89 d0                	mov    %edx,%eax
f010adab:	01 c0                	add    %eax,%eax
f010adad:	01 d0                	add    %edx,%eax
f010adaf:	c1 e0 03             	shl    $0x3,%eax
f010adb2:	01 c8                	add    %ecx,%eax
f010adb4:	05 8c 00 00 00       	add    $0x8c,%eax
f010adb9:	c6 00 00             	movb   $0x0,(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f010adbc:	8b 45 08             	mov    0x8(%ebp),%eax
f010adbf:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010adc5:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010adc8:	89 d0                	mov    %edx,%eax
f010adca:	01 c0                	add    %eax,%eax
f010adcc:	01 d0                	add    %edx,%eax
f010adce:	c1 e0 03             	shl    $0x3,%eax
f010add1:	01 c8                	add    %ecx,%eax
f010add3:	05 90 00 00 00       	add    $0x90,%eax
f010add8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#endif
		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010adde:	83 ec 0c             	sub    $0xc,%esp
f010ade1:	6a 02                	push   $0x2
f010ade3:	e8 de 38 00 00       	call   f010e6c6 <isPageReplacmentAlgorithmLRU>
f010ade8:	83 c4 10             	add    $0x10,%esp
f010adeb:	85 c0                	test   %eax,%eax
f010aded:	0f 84 2c 04 00 00    	je     f010b21f <program_segment_alloc_map_copy_workingset+0x578>
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), wse);
			}
#else

			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010adf3:	8b 45 08             	mov    0x8(%ebp),%eax
f010adf6:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010adfc:	89 d0                	mov    %edx,%eax
f010adfe:	01 c0                	add    %eax,%eax
f010ae00:	01 d0                	add    %edx,%eax
f010ae02:	c1 e0 03             	shl    $0x3,%eax
f010ae05:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010ae0b:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae0e:	01 d0                	add    %edx,%eax
f010ae10:	83 c0 08             	add    $0x8,%eax
f010ae13:	85 c0                	test   %eax,%eax
f010ae15:	75 17                	jne    f010ae2e <program_segment_alloc_map_copy_workingset+0x187>
f010ae17:	83 ec 04             	sub    $0x4,%esp
f010ae1a:	68 bd 57 12 f0       	push   $0xf01257bd
f010ae1f:	68 00 03 00 00       	push   $0x300
f010ae24:	68 2b 57 12 f0       	push   $0xf012572b
f010ae29:	e8 ec 54 ff ff       	call   f010031a <_panic>
f010ae2e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae31:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010ae37:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ae3a:	89 d0                	mov    %edx,%eax
f010ae3c:	01 c0                	add    %eax,%eax
f010ae3e:	01 d0                	add    %edx,%eax
f010ae40:	c1 e0 03             	shl    $0x3,%eax
f010ae43:	01 c8                	add    %ecx,%eax
f010ae45:	05 98 00 00 00       	add    $0x98,%eax
f010ae4a:	8b 00                	mov    (%eax),%eax
f010ae4c:	85 c0                	test   %eax,%eax
f010ae4e:	74 41                	je     f010ae91 <program_segment_alloc_map_copy_workingset+0x1ea>
f010ae50:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae53:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010ae59:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ae5c:	89 d0                	mov    %edx,%eax
f010ae5e:	01 c0                	add    %eax,%eax
f010ae60:	01 d0                	add    %edx,%eax
f010ae62:	c1 e0 03             	shl    $0x3,%eax
f010ae65:	01 c8                	add    %ecx,%eax
f010ae67:	05 98 00 00 00       	add    $0x98,%eax
f010ae6c:	8b 10                	mov    (%eax),%edx
f010ae6e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae71:	8b 88 58 d5 01 00    	mov    0x1d558(%eax),%ecx
f010ae77:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010ae7a:	89 c8                	mov    %ecx,%eax
f010ae7c:	01 c0                	add    %eax,%eax
f010ae7e:	01 c8                	add    %ecx,%eax
f010ae80:	c1 e0 03             	shl    $0x3,%eax
f010ae83:	01 d8                	add    %ebx,%eax
f010ae85:	05 9c 00 00 00       	add    $0x9c,%eax
f010ae8a:	8b 00                	mov    (%eax),%eax
f010ae8c:	89 42 14             	mov    %eax,0x14(%edx)
f010ae8f:	eb 27                	jmp    f010aeb8 <program_segment_alloc_map_copy_workingset+0x211>
f010ae91:	8b 45 08             	mov    0x8(%ebp),%eax
f010ae94:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010ae9a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ae9d:	89 d0                	mov    %edx,%eax
f010ae9f:	01 c0                	add    %eax,%eax
f010aea1:	01 d0                	add    %edx,%eax
f010aea3:	c1 e0 03             	shl    $0x3,%eax
f010aea6:	01 c8                	add    %ecx,%eax
f010aea8:	05 9c 00 00 00       	add    $0x9c,%eax
f010aead:	8b 10                	mov    (%eax),%edx
f010aeaf:	8b 45 08             	mov    0x8(%ebp),%eax
f010aeb2:	89 90 4c d5 01 00    	mov    %edx,0x1d54c(%eax)
f010aeb8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aebb:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010aec1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010aec4:	89 d0                	mov    %edx,%eax
f010aec6:	01 c0                	add    %eax,%eax
f010aec8:	01 d0                	add    %edx,%eax
f010aeca:	c1 e0 03             	shl    $0x3,%eax
f010aecd:	01 c8                	add    %ecx,%eax
f010aecf:	05 9c 00 00 00       	add    $0x9c,%eax
f010aed4:	8b 00                	mov    (%eax),%eax
f010aed6:	85 c0                	test   %eax,%eax
f010aed8:	74 41                	je     f010af1b <program_segment_alloc_map_copy_workingset+0x274>
f010aeda:	8b 45 08             	mov    0x8(%ebp),%eax
f010aedd:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010aee3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010aee6:	89 d0                	mov    %edx,%eax
f010aee8:	01 c0                	add    %eax,%eax
f010aeea:	01 d0                	add    %edx,%eax
f010aeec:	c1 e0 03             	shl    $0x3,%eax
f010aeef:	01 c8                	add    %ecx,%eax
f010aef1:	05 9c 00 00 00       	add    $0x9c,%eax
f010aef6:	8b 10                	mov    (%eax),%edx
f010aef8:	8b 45 08             	mov    0x8(%ebp),%eax
f010aefb:	8b 88 58 d5 01 00    	mov    0x1d558(%eax),%ecx
f010af01:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010af04:	89 c8                	mov    %ecx,%eax
f010af06:	01 c0                	add    %eax,%eax
f010af08:	01 c8                	add    %ecx,%eax
f010af0a:	c1 e0 03             	shl    $0x3,%eax
f010af0d:	01 d8                	add    %ebx,%eax
f010af0f:	05 98 00 00 00       	add    $0x98,%eax
f010af14:	8b 00                	mov    (%eax),%eax
f010af16:	89 42 10             	mov    %eax,0x10(%edx)
f010af19:	eb 27                	jmp    f010af42 <program_segment_alloc_map_copy_workingset+0x29b>
f010af1b:	8b 45 08             	mov    0x8(%ebp),%eax
f010af1e:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010af24:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010af27:	89 d0                	mov    %edx,%eax
f010af29:	01 c0                	add    %eax,%eax
f010af2b:	01 d0                	add    %edx,%eax
f010af2d:	c1 e0 03             	shl    $0x3,%eax
f010af30:	01 c8                	add    %ecx,%eax
f010af32:	05 98 00 00 00       	add    $0x98,%eax
f010af37:	8b 10                	mov    (%eax),%edx
f010af39:	8b 45 08             	mov    0x8(%ebp),%eax
f010af3c:	89 90 48 d5 01 00    	mov    %edx,0x1d548(%eax)
f010af42:	8b 45 08             	mov    0x8(%ebp),%eax
f010af45:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010af4b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010af4e:	89 d0                	mov    %edx,%eax
f010af50:	01 c0                	add    %eax,%eax
f010af52:	01 d0                	add    %edx,%eax
f010af54:	c1 e0 03             	shl    $0x3,%eax
f010af57:	01 c8                	add    %ecx,%eax
f010af59:	05 98 00 00 00       	add    $0x98,%eax
f010af5e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010af64:	8b 45 08             	mov    0x8(%ebp),%eax
f010af67:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010af6d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010af70:	89 d0                	mov    %edx,%eax
f010af72:	01 c0                	add    %eax,%eax
f010af74:	01 d0                	add    %edx,%eax
f010af76:	c1 e0 03             	shl    $0x3,%eax
f010af79:	01 c8                	add    %ecx,%eax
f010af7b:	05 9c 00 00 00       	add    $0x9c,%eax
f010af80:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010af86:	8b 45 08             	mov    0x8(%ebp),%eax
f010af89:	8b 80 54 d5 01 00    	mov    0x1d554(%eax),%eax
f010af8f:	8d 50 ff             	lea    -0x1(%eax),%edx
f010af92:	8b 45 08             	mov    0x8(%ebp),%eax
f010af95:	89 90 54 d5 01 00    	mov    %edx,0x1d554(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f010af9b:	8b 45 08             	mov    0x8(%ebp),%eax
f010af9e:	8b 90 1c da 01 00    	mov    0x1da1c(%eax),%edx
f010afa4:	8b 45 08             	mov    0x8(%ebp),%eax
f010afa7:	8b 80 30 da 01 00    	mov    0x1da30(%eax),%eax
f010afad:	48                   	dec    %eax
f010afae:	39 c2                	cmp    %eax,%edx
f010afb0:	0f 83 37 01 00 00    	jae    f010b0ed <program_segment_alloc_map_copy_workingset+0x446>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010afb6:	8b 45 08             	mov    0x8(%ebp),%eax
f010afb9:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010afbf:	89 d0                	mov    %edx,%eax
f010afc1:	01 c0                	add    %eax,%eax
f010afc3:	01 d0                	add    %edx,%eax
f010afc5:	c1 e0 03             	shl    $0x3,%eax
f010afc8:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010afce:	8b 45 08             	mov    0x8(%ebp),%eax
f010afd1:	01 d0                	add    %edx,%eax
f010afd3:	83 c0 08             	add    $0x8,%eax
f010afd6:	85 c0                	test   %eax,%eax
f010afd8:	75 17                	jne    f010aff1 <program_segment_alloc_map_copy_workingset+0x34a>
f010afda:	83 ec 04             	sub    $0x4,%esp
f010afdd:	68 08 57 12 f0       	push   $0xf0125708
f010afe2:	68 04 03 00 00       	push   $0x304
f010afe7:	68 2b 57 12 f0       	push   $0xf012572b
f010afec:	e8 29 53 ff ff       	call   f010031a <_panic>
f010aff1:	8b 45 08             	mov    0x8(%ebp),%eax
f010aff4:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010affa:	8b 45 08             	mov    0x8(%ebp),%eax
f010affd:	8b 88 10 da 01 00    	mov    0x1da10(%eax),%ecx
f010b003:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010b006:	89 d0                	mov    %edx,%eax
f010b008:	01 c0                	add    %eax,%eax
f010b00a:	01 d0                	add    %edx,%eax
f010b00c:	c1 e0 03             	shl    $0x3,%eax
f010b00f:	01 d8                	add    %ebx,%eax
f010b011:	05 98 00 00 00       	add    $0x98,%eax
f010b016:	89 08                	mov    %ecx,(%eax)
f010b018:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b01b:	89 d0                	mov    %edx,%eax
f010b01d:	01 c0                	add    %eax,%eax
f010b01f:	01 d0                	add    %edx,%eax
f010b021:	c1 e0 03             	shl    $0x3,%eax
f010b024:	01 c8                	add    %ecx,%eax
f010b026:	05 98 00 00 00       	add    $0x98,%eax
f010b02b:	8b 00                	mov    (%eax),%eax
f010b02d:	85 c0                	test   %eax,%eax
f010b02f:	74 2e                	je     f010b05f <program_segment_alloc_map_copy_workingset+0x3b8>
f010b031:	8b 45 08             	mov    0x8(%ebp),%eax
f010b034:	8b 90 10 da 01 00    	mov    0x1da10(%eax),%edx
f010b03a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b03d:	8b 88 58 d5 01 00    	mov    0x1d558(%eax),%ecx
f010b043:	89 c8                	mov    %ecx,%eax
f010b045:	01 c0                	add    %eax,%eax
f010b047:	01 c8                	add    %ecx,%eax
f010b049:	c1 e0 03             	shl    $0x3,%eax
f010b04c:	8d 88 80 00 00 00    	lea    0x80(%eax),%ecx
f010b052:	8b 45 08             	mov    0x8(%ebp),%eax
f010b055:	01 c8                	add    %ecx,%eax
f010b057:	83 c0 08             	add    $0x8,%eax
f010b05a:	89 42 14             	mov    %eax,0x14(%edx)
f010b05d:	eb 29                	jmp    f010b088 <program_segment_alloc_map_copy_workingset+0x3e1>
f010b05f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b062:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b068:	89 d0                	mov    %edx,%eax
f010b06a:	01 c0                	add    %eax,%eax
f010b06c:	01 d0                	add    %edx,%eax
f010b06e:	c1 e0 03             	shl    $0x3,%eax
f010b071:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b077:	8b 45 08             	mov    0x8(%ebp),%eax
f010b07a:	01 d0                	add    %edx,%eax
f010b07c:	8d 50 08             	lea    0x8(%eax),%edx
f010b07f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b082:	89 90 14 da 01 00    	mov    %edx,0x1da14(%eax)
f010b088:	8b 45 08             	mov    0x8(%ebp),%eax
f010b08b:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b091:	89 d0                	mov    %edx,%eax
f010b093:	01 c0                	add    %eax,%eax
f010b095:	01 d0                	add    %edx,%eax
f010b097:	c1 e0 03             	shl    $0x3,%eax
f010b09a:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b0a0:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0a3:	01 d0                	add    %edx,%eax
f010b0a5:	8d 50 08             	lea    0x8(%eax),%edx
f010b0a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0ab:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
f010b0b1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0b4:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b0ba:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b0bd:	89 d0                	mov    %edx,%eax
f010b0bf:	01 c0                	add    %eax,%eax
f010b0c1:	01 d0                	add    %edx,%eax
f010b0c3:	c1 e0 03             	shl    $0x3,%eax
f010b0c6:	01 c8                	add    %ecx,%eax
f010b0c8:	05 9c 00 00 00       	add    $0x9c,%eax
f010b0cd:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b0d3:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0d6:	8b 80 1c da 01 00    	mov    0x1da1c(%eax),%eax
f010b0dc:	8d 50 01             	lea    0x1(%eax),%edx
f010b0df:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0e2:	89 90 1c da 01 00    	mov    %edx,0x1da1c(%eax)
f010b0e8:	e9 32 01 00 00       	jmp    f010b21f <program_segment_alloc_map_copy_workingset+0x578>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010b0ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010b0f0:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b0f6:	89 d0                	mov    %edx,%eax
f010b0f8:	01 c0                	add    %eax,%eax
f010b0fa:	01 d0                	add    %edx,%eax
f010b0fc:	c1 e0 03             	shl    $0x3,%eax
f010b0ff:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b105:	8b 45 08             	mov    0x8(%ebp),%eax
f010b108:	01 d0                	add    %edx,%eax
f010b10a:	83 c0 08             	add    $0x8,%eax
f010b10d:	85 c0                	test   %eax,%eax
f010b10f:	75 17                	jne    f010b128 <program_segment_alloc_map_copy_workingset+0x481>
f010b111:	83 ec 04             	sub    $0x4,%esp
f010b114:	68 08 57 12 f0       	push   $0xf0125708
f010b119:	68 09 03 00 00       	push   $0x309
f010b11e:	68 2b 57 12 f0       	push   $0xf012572b
f010b123:	e8 f2 51 ff ff       	call   f010031a <_panic>
f010b128:	8b 45 08             	mov    0x8(%ebp),%eax
f010b12b:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b131:	8b 45 08             	mov    0x8(%ebp),%eax
f010b134:	8b 88 20 da 01 00    	mov    0x1da20(%eax),%ecx
f010b13a:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010b13d:	89 d0                	mov    %edx,%eax
f010b13f:	01 c0                	add    %eax,%eax
f010b141:	01 d0                	add    %edx,%eax
f010b143:	c1 e0 03             	shl    $0x3,%eax
f010b146:	01 d8                	add    %ebx,%eax
f010b148:	05 98 00 00 00       	add    $0x98,%eax
f010b14d:	89 08                	mov    %ecx,(%eax)
f010b14f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b152:	89 d0                	mov    %edx,%eax
f010b154:	01 c0                	add    %eax,%eax
f010b156:	01 d0                	add    %edx,%eax
f010b158:	c1 e0 03             	shl    $0x3,%eax
f010b15b:	01 c8                	add    %ecx,%eax
f010b15d:	05 98 00 00 00       	add    $0x98,%eax
f010b162:	8b 00                	mov    (%eax),%eax
f010b164:	85 c0                	test   %eax,%eax
f010b166:	74 2e                	je     f010b196 <program_segment_alloc_map_copy_workingset+0x4ef>
f010b168:	8b 45 08             	mov    0x8(%ebp),%eax
f010b16b:	8b 90 20 da 01 00    	mov    0x1da20(%eax),%edx
f010b171:	8b 45 08             	mov    0x8(%ebp),%eax
f010b174:	8b 88 58 d5 01 00    	mov    0x1d558(%eax),%ecx
f010b17a:	89 c8                	mov    %ecx,%eax
f010b17c:	01 c0                	add    %eax,%eax
f010b17e:	01 c8                	add    %ecx,%eax
f010b180:	c1 e0 03             	shl    $0x3,%eax
f010b183:	8d 88 80 00 00 00    	lea    0x80(%eax),%ecx
f010b189:	8b 45 08             	mov    0x8(%ebp),%eax
f010b18c:	01 c8                	add    %ecx,%eax
f010b18e:	83 c0 08             	add    $0x8,%eax
f010b191:	89 42 14             	mov    %eax,0x14(%edx)
f010b194:	eb 29                	jmp    f010b1bf <program_segment_alloc_map_copy_workingset+0x518>
f010b196:	8b 45 08             	mov    0x8(%ebp),%eax
f010b199:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b19f:	89 d0                	mov    %edx,%eax
f010b1a1:	01 c0                	add    %eax,%eax
f010b1a3:	01 d0                	add    %edx,%eax
f010b1a5:	c1 e0 03             	shl    $0x3,%eax
f010b1a8:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b1ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1b1:	01 d0                	add    %edx,%eax
f010b1b3:	8d 50 08             	lea    0x8(%eax),%edx
f010b1b6:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1b9:	89 90 24 da 01 00    	mov    %edx,0x1da24(%eax)
f010b1bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1c2:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b1c8:	89 d0                	mov    %edx,%eax
f010b1ca:	01 c0                	add    %eax,%eax
f010b1cc:	01 d0                	add    %edx,%eax
f010b1ce:	c1 e0 03             	shl    $0x3,%eax
f010b1d1:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b1d7:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1da:	01 d0                	add    %edx,%eax
f010b1dc:	8d 50 08             	lea    0x8(%eax),%edx
f010b1df:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1e2:	89 90 20 da 01 00    	mov    %edx,0x1da20(%eax)
f010b1e8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b1eb:	8b 90 58 d5 01 00    	mov    0x1d558(%eax),%edx
f010b1f1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b1f4:	89 d0                	mov    %edx,%eax
f010b1f6:	01 c0                	add    %eax,%eax
f010b1f8:	01 d0                	add    %edx,%eax
f010b1fa:	c1 e0 03             	shl    $0x3,%eax
f010b1fd:	01 c8                	add    %ecx,%eax
f010b1ff:	05 9c 00 00 00       	add    $0x9c,%eax
f010b204:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b20a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b20d:	8b 80 2c da 01 00    	mov    0x1da2c(%eax),%eax
f010b213:	8d 50 01             	lea    0x1(%eax),%edx
f010b216:	8b 45 08             	mov    0x8(%ebp),%eax
f010b219:	89 90 2c da 01 00    	mov    %edx,0x1da2c(%eax)
		else
		{
			e->page_last_WS_element = NULL;
		}
#else
		e->page_last_WS_index ++;
f010b21f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b222:	8b 80 58 d5 01 00    	mov    0x1d558(%eax),%eax
f010b228:	8d 50 01             	lea    0x1(%eax),%edx
f010b22b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b22e:	89 90 58 d5 01 00    	mov    %edx,0x1d558(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f010b234:	8b 45 08             	mov    0x8(%ebp),%eax
f010b237:	8b 80 58 d5 01 00    	mov    0x1d558(%eax),%eax
f010b23d:	8b 55 08             	mov    0x8(%ebp),%edx
f010b240:	8b 8a 84 00 00 00    	mov    0x84(%edx),%ecx
f010b246:	ba 00 00 00 00       	mov    $0x0,%edx
f010b24b:	f7 f1                	div    %ecx
f010b24d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b250:	89 90 58 d5 01 00    	mov    %edx,0x1d558(%eax)
#endif
		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f010b256:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b259:	c1 e8 16             	shr    $0x16,%eax
f010b25c:	89 c2                	mov    %eax,%edx
f010b25e:	8b 45 18             	mov    0x18(%ebp),%eax
f010b261:	8b 00                	mov    (%eax),%eax
f010b263:	39 c2                	cmp    %eax,%edx
f010b265:	0f 84 d3 00 00 00    	je     f010b33e <program_segment_alloc_map_copy_workingset+0x697>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f010b26b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b26e:	8b 90 0c da 01 00    	mov    0x1da0c(%eax),%edx
f010b274:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b277:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010b27a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010b27d:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f010b282:	89 c1                	mov    %eax,%ecx
f010b284:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010b287:	89 d0                	mov    %edx,%eax
f010b289:	01 c0                	add    %eax,%eax
f010b28b:	01 d0                	add    %edx,%eax
f010b28d:	c1 e0 03             	shl    $0x3,%eax
f010b290:	01 d8                	add    %ebx,%eax
f010b292:	05 5c d5 01 00       	add    $0x1d55c,%eax
f010b297:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f010b299:	8b 45 08             	mov    0x8(%ebp),%eax
f010b29c:	8b 90 0c da 01 00    	mov    0x1da0c(%eax),%edx
f010b2a2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b2a5:	89 d0                	mov    %edx,%eax
f010b2a7:	01 c0                	add    %eax,%eax
f010b2a9:	01 d0                	add    %edx,%eax
f010b2ab:	c1 e0 03             	shl    $0x3,%eax
f010b2ae:	01 c8                	add    %ecx,%eax
f010b2b0:	05 60 d5 01 00       	add    $0x1d560,%eax
f010b2b5:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f010b2b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2bb:	8b 90 0c da 01 00    	mov    0x1da0c(%eax),%edx
f010b2c1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b2c4:	89 d0                	mov    %edx,%eax
f010b2c6:	01 c0                	add    %eax,%eax
f010b2c8:	01 d0                	add    %edx,%eax
f010b2ca:	c1 e0 03             	shl    $0x3,%eax
f010b2cd:	01 c8                	add    %ecx,%eax
f010b2cf:	05 64 d5 01 00       	add    $0x1d564,%eax
f010b2d4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f010b2da:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2dd:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f010b2e3:	8d 50 01             	lea    0x1(%eax),%edx
f010b2e6:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2e9:	89 90 0c da 01 00    	mov    %edx,0x1da0c(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f010b2ef:	8b 45 08             	mov    0x8(%ebp),%eax
f010b2f2:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f010b2f8:	b9 32 00 00 00       	mov    $0x32,%ecx
f010b2fd:	ba 00 00 00 00       	mov    $0x0,%edx
f010b302:	f7 f1                	div    %ecx
f010b304:	8b 45 08             	mov    0x8(%ebp),%eax
f010b307:	89 90 0c da 01 00    	mov    %edx,0x1da0c(%eax)
			if (e->table_last_WS_index == 0)
f010b30d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b310:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f010b316:	85 c0                	test   %eax,%eax
f010b318:	75 17                	jne    f010b331 <program_segment_alloc_map_copy_workingset+0x68a>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f010b31a:	83 ec 04             	sub    $0x4,%esp
f010b31d:	68 ec 58 12 f0       	push   $0xf01258ec
f010b322:	68 24 03 00 00       	push   $0x324
f010b327:	68 2b 57 12 f0       	push   $0xf012572b
f010b32c:	e8 e9 4f ff ff       	call   f010031a <_panic>
			(*lastTableNumber) = PDX(iVA);
f010b331:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b334:	c1 e8 16             	shr    $0x16,%eax
f010b337:	89 c2                	mov    %eax,%edx
f010b339:	8b 45 18             	mov    0x18(%ebp),%eax
f010b33c:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f010b33e:	8b 45 10             	mov    0x10(%ebp),%eax
f010b341:	8b 00                	mov    (%eax),%eax
f010b343:	8d 50 01             	lea    0x1(%eax),%edx
f010b346:	8b 45 10             	mov    0x10(%ebp),%eax
f010b349:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f010b34b:	ff 45 f0             	incl   -0x10(%ebp)
f010b34e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010b355:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b358:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010b35b:	73 0c                	jae    f010b369 <program_segment_alloc_map_copy_workingset+0x6c2>
f010b35d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b360:	3b 45 14             	cmp    0x14(%ebp),%eax
f010b363:	0f 82 eb f9 ff ff    	jb     f010ad54 <program_segment_alloc_map_copy_workingset+0xad>

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}
	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f010b369:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b36c:	8b 00                	mov    (%eax),%eax
f010b36e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f010b371:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b374:	8b 40 0c             	mov    0xc(%eax),%eax
f010b377:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010b37a:	eb 10                	jmp    f010b38c <program_segment_alloc_map_copy_workingset+0x6e5>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f010b37c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b37f:	8a 10                	mov    (%eax),%dl
f010b381:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b384:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f010b386:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f010b389:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010b38c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b38f:	89 45 c8             	mov    %eax,-0x38(%ebp)
f010b392:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010b395:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b39a:	89 c2                	mov    %eax,%edx
f010b39c:	8b 45 10             	mov    0x10(%ebp),%eax
f010b39f:	8b 00                	mov    (%eax),%eax
f010b3a1:	c1 e0 0c             	shl    $0xc,%eax
f010b3a4:	01 c2                	add    %eax,%edx
f010b3a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b3a9:	39 c2                	cmp    %eax,%edx
f010b3ab:	76 1d                	jbe    f010b3ca <program_segment_alloc_map_copy_workingset+0x723>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f010b3ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f010b3b0:	8b 50 04             	mov    0x4(%eax),%edx
f010b3b3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b3b6:	01 c2                	add    %eax,%edx
f010b3b8:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f010b3bb:	39 c2                	cmp    %eax,%edx
f010b3bd:	77 bd                	ja     f010b37c <program_segment_alloc_map_copy_workingset+0x6d5>
		dst_ptr++ ;
		src_ptr++ ;
	}

	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010b3bf:	eb 09                	jmp    f010b3ca <program_segment_alloc_map_copy_workingset+0x723>
	{
		*dst_ptr = 0;
f010b3c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b3c4:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f010b3c7:	ff 45 e8             	incl   -0x18(%ebp)
		dst_ptr++ ;
		src_ptr++ ;
	}

	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f010b3ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010b3cd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f010b3d0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010b3d3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010b3d8:	89 c2                	mov    %eax,%edx
f010b3da:	8b 45 10             	mov    0x10(%ebp),%eax
f010b3dd:	8b 00                	mov    (%eax),%eax
f010b3df:	c1 e0 0c             	shl    $0xc,%eax
f010b3e2:	01 c2                	add    %eax,%edx
f010b3e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010b3e7:	39 c2                	cmp    %eax,%edx
f010b3e9:	77 d6                	ja     f010b3c1 <program_segment_alloc_map_copy_workingset+0x71a>
	{
		*dst_ptr = 0;
		dst_ptr++ ;
	}

	return 0;
f010b3eb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010b3f0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010b3f3:	c9                   	leave  
f010b3f4:	c3                   	ret    

f010b3f5 <create_user_directory>:

//==================================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f010b3f5:	55                   	push   %ebp
f010b3f6:	89 e5                	mov    %esp,%ebp
f010b3f8:	83 ec 18             	sub    $0x18,%esp
	//panic("create_user_directory() is not implemented yet...!!");

	//Use kmalloc() to allocate a new directory

	//change this "return" according to your answer
	uint32* ptr_user_page_directory = kmalloc(PAGE_SIZE);
f010b3fb:	83 ec 0c             	sub    $0xc,%esp
f010b3fe:	68 00 10 00 00       	push   $0x1000
f010b403:	e8 ae d6 ff ff       	call   f0108ab6 <kmalloc>
f010b408:	83 c4 10             	add    $0x10,%esp
f010b40b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_user_page_directory == NULL)
f010b40e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b412:	75 17                	jne    f010b42b <create_user_directory+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f010b414:	83 ec 04             	sub    $0x4,%esp
f010b417:	68 8f 59 12 f0       	push   $0xf012598f
f010b41c:	68 54 03 00 00       	push   $0x354
f010b421:	68 2b 57 12 f0       	push   $0xf012572b
f010b426:	e8 ef 4e ff ff       	call   f010031a <_panic>
	}
	return ptr_user_page_directory;
f010b42b:	8b 45 f4             	mov    -0xc(%ebp),%eax
	//return 0;
}
f010b42e:	c9                   	leave  
f010b42f:	c3                   	ret    

f010b430 <create_user_kern_stack>:
uint32 __cur_k_stk = KERNEL_HEAP_START;
//===========================================================
// 5) ALLOCATE SPACE FOR USER KERNEL STACK (One Per Process):
//===========================================================
void* create_user_kern_stack(uint32* ptr_user_page_directory)
{
f010b430:	55                   	push   %ebp
f010b431:	89 e5                	mov    %esp,%ebp
f010b433:	83 ec 18             	sub    $0x18,%esp
	//remember to leave its bottom page as a GUARD PAGE (i.e. not mapped)
	//return a pointer to the start of the allocated space (including the GUARD PAGE)


#else
	if (KERNEL_HEAP_MAX - __cur_k_stk < KERNEL_STACK_SIZE)
f010b436:	a1 5c 99 17 f0       	mov    0xf017995c,%eax
f010b43b:	ba 00 f0 ff ff       	mov    $0xfffff000,%edx
f010b440:	29 c2                	sub    %eax,%edx
f010b442:	89 d0                	mov    %edx,%eax
f010b444:	3d ff 7f 00 00       	cmp    $0x7fff,%eax
f010b449:	77 17                	ja     f010b462 <create_user_kern_stack+0x32>
		panic("Run out of kernel heap!! Unable to create a kernel stack for the process. Can't create more processes!");
f010b44b:	83 ec 04             	sub    $0x4,%esp
f010b44e:	68 ac 59 12 f0       	push   $0xf01259ac
f010b453:	68 6d 03 00 00       	push   $0x36d
f010b458:	68 2b 57 12 f0       	push   $0xf012572b
f010b45d:	e8 b8 4e ff ff       	call   f010031a <_panic>
	void* kstack = (void*) __cur_k_stk;
f010b462:	a1 5c 99 17 f0       	mov    0xf017995c,%eax
f010b467:	89 45 f4             	mov    %eax,-0xc(%ebp)
	__cur_k_stk += KERNEL_STACK_SIZE;
f010b46a:	a1 5c 99 17 f0       	mov    0xf017995c,%eax
f010b46f:	05 00 80 00 00       	add    $0x8000,%eax
f010b474:	a3 5c 99 17 f0       	mov    %eax,0xf017995c
	return kstack ;
f010b479:	8b 45 f4             	mov    -0xc(%ebp),%eax
//	panic("KERNEL HEAP is OFF! user kernel stack is not supported");
#endif
}
f010b47c:	c9                   	leave  
f010b47d:	c3                   	ret    

f010b47e <delete_user_kern_stack>:
/*2024*/
//===========================================================
// 6) DELETE USER KERNEL STACK (One Per Process):
//===========================================================
void delete_user_kern_stack(struct Env* e)
{
f010b47e:	55                   	push   %ebp
f010b47f:	89 e5                	mov    %esp,%ebp
f010b481:	83 ec 08             	sub    $0x8,%esp
	panic("delete_user_kern_stack() is not implemented yet...!!");

	//Delete the allocated space for the user kernel stack of this process "e"
	//remember to delete the bottom GUARD PAGE (i.e. not mapped)
#else
	panic("KERNEL HEAP is OFF! user kernel stack can't be deleted");
f010b484:	83 ec 04             	sub    $0x4,%esp
f010b487:	68 14 5a 12 f0       	push   $0xf0125a14
f010b48c:	68 83 03 00 00       	push   $0x383
f010b491:	68 2b 57 12 f0       	push   $0xf012572b
f010b496:	e8 7f 4e ff ff       	call   f010031a <_panic>

f010b49b <initialize_uheap_dynamic_allocator>:
}
//===============================================
// 7) INITIALIZE DYNAMIC ALLOCATOR OF UHEAP:
//===============================================
void initialize_uheap_dynamic_allocator(struct Env* e, uint32 daStart, uint32 daLimit)
{
f010b49b:	55                   	push   %ebp
f010b49c:	89 e5                	mov    %esp,%ebp
	//[PROJECT'24.MS2] Initialize the dynamic allocator of the user heap
	//Remember:
	//	1) there's no initial allocations for the dynamic allocator of the user heap (=0)
	//	2) call the initialize_dynamic_allocator(..) to complete the initialization
	//panic("initialize_uheap_dynamic_allocator() is not implemented yet...!!");
}
f010b49e:	90                   	nop
f010b49f:	5d                   	pop    %ebp
f010b4a0:	c3                   	ret    

f010b4a1 <initialize_environment>:
//	  3.3 Setup the context to return to env_start() at the early first run from the scheduler
// 4. Initialize the working set
// 5. Initialize the user dynamic allocator
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f010b4a1:	55                   	push   %ebp
f010b4a2:	89 e5                	mov    %esp,%ebp
f010b4a4:	53                   	push   %ebx
f010b4a5:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f010b4a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4ab:	8b 55 0c             	mov    0xc(%ebp),%edx
f010b4ae:	89 50 64             	mov    %edx,0x64(%eax)
	e->env_cr3 = phys_user_page_directory;
f010b4b1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4b4:	8b 55 10             	mov    0x10(%ebp),%edx
f010b4b7:	89 50 68             	mov    %edx,0x68(%eax)

	//copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010b4ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b4c1:	eb 17                	jmp    f010b4da <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f010b4c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4c6:	8b 40 64             	mov    0x64(%eax),%eax
f010b4c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b4cc:	c1 e2 02             	shl    $0x2,%edx
f010b4cf:	01 d0                	add    %edx,%eax
f010b4d1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f010b4d7:	ff 45 f4             	incl   -0xc(%ebp)
f010b4da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b4dd:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f010b4e2:	76 df                	jbe    f010b4c3 <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}
	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010b4e4:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f010b4eb:	eb 22                	jmp    f010b50f <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f010b4ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010b4f0:	8b 40 64             	mov    0x64(%eax),%eax
f010b4f3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b4f6:	c1 e2 02             	shl    $0x2,%edx
f010b4f9:	01 c2                	add    %eax,%edx
f010b4fb:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f010b500:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010b503:	c1 e1 02             	shl    $0x2,%ecx
f010b506:	01 c8                	add    %ecx,%eax
f010b508:	8b 00                	mov    (%eax),%eax
f010b50a:	89 02                	mov    %eax,(%edx)
	//copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}
	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f010b50c:	ff 45 f4             	incl   -0xc(%ebp)
f010b50f:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f010b516:	7e d5                	jle    f010b4ed <initialize_environment+0x4c>
	 * Setup the new context to start executing at the env_start() to do some initializations then
	 * returns to trapret() to pop the trap frame and invoke iret
	 */
	{
		//[1] Create the stack
		e->kstack = create_user_kern_stack(e->env_page_directory);
f010b518:	8b 45 08             	mov    0x8(%ebp),%eax
f010b51b:	8b 40 64             	mov    0x64(%eax),%eax
f010b51e:	83 ec 0c             	sub    $0xc,%esp
f010b521:	50                   	push   %eax
f010b522:	e8 09 ff ff ff       	call   f010b430 <create_user_kern_stack>
f010b527:	83 c4 10             	add    $0x10,%esp
f010b52a:	89 c2                	mov    %eax,%edx
f010b52c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b52f:	89 50 70             	mov    %edx,0x70(%eax)

		//[2] Leave room for the trap frame
		void* sp = e->kstack + KERNEL_STACK_SIZE;
f010b532:	8b 45 08             	mov    0x8(%ebp),%eax
f010b535:	8b 40 70             	mov    0x70(%eax),%eax
f010b538:	05 00 80 00 00       	add    $0x8000,%eax
f010b53d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		sp -= sizeof(struct Trapframe);
f010b540:	83 6d ec 44          	subl   $0x44,-0x14(%ebp)
		e->env_tf = (struct Trapframe *) sp;
f010b544:	8b 45 08             	mov    0x8(%ebp),%eax
f010b547:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010b54a:	89 10                	mov    %edx,(%eax)

		//[3] Set the address of trapret() first - to return on it after env_start() is returned,
		sp -= 4;
f010b54c:	83 6d ec 04          	subl   $0x4,-0x14(%ebp)
		*(uint32*)sp = (uint32)trapret;
f010b550:	ba 84 d7 10 f0       	mov    $0xf010d784,%edx
f010b555:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010b558:	89 10                	mov    %edx,(%eax)

		//[4] Place the context next
		sp -= sizeof(struct Context);
f010b55a:	83 6d ec 20          	subl   $0x20,-0x14(%ebp)
		e->context = (struct Context *) sp;
f010b55e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b561:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010b564:	89 50 04             	mov    %edx,0x4(%eax)

		//[4] Setup the context to return to env_start() at the early first run from the scheduler
		memset(e->context, 0, sizeof(*(e->context)));
f010b567:	8b 45 08             	mov    0x8(%ebp),%eax
f010b56a:	8b 40 04             	mov    0x4(%eax),%eax
f010b56d:	83 ec 04             	sub    $0x4,%esp
f010b570:	6a 20                	push   $0x20
f010b572:	6a 00                	push   $0x0
f010b574:	50                   	push   %eax
f010b575:	e8 fe 54 01 00       	call   f0120a78 <memset>
f010b57a:	83 c4 10             	add    $0x10,%esp
		e->context->eip = (uint32) (env_start);
f010b57d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b580:	8b 40 04             	mov    0x4(%eax),%eax
f010b583:	ba d6 a6 10 f0       	mov    $0xf010a6d6,%edx
f010b588:	89 50 1c             	mov    %edx,0x1c(%eax)
	{
		LIST_INIT(&(e->page_WS_list));
	}
#else
	{
		uint32 env_index = (uint32)(e-envs);
f010b58b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b58e:	8b 15 10 1a 55 f0    	mov    0xf0551a10,%edx
f010b594:	29 d0                	sub    %edx,%eax
f010b596:	c1 f8 02             	sar    $0x2,%eax
f010b599:	89 c2                	mov    %eax,%edx
f010b59b:	89 d0                	mov    %edx,%eax
f010b59d:	c1 e0 02             	shl    $0x2,%eax
f010b5a0:	01 d0                	add    %edx,%eax
f010b5a2:	c1 e0 02             	shl    $0x2,%eax
f010b5a5:	01 d0                	add    %edx,%eax
f010b5a7:	c1 e0 02             	shl    $0x2,%eax
f010b5aa:	01 d0                	add    %edx,%eax
f010b5ac:	c1 e0 02             	shl    $0x2,%eax
f010b5af:	01 d0                	add    %edx,%eax
f010b5b1:	c1 e0 08             	shl    $0x8,%eax
f010b5b4:	29 d0                	sub    %edx,%eax
f010b5b6:	c1 e0 08             	shl    $0x8,%eax
f010b5b9:	29 d0                	sub    %edx,%eax
f010b5bb:	c1 e0 03             	shl    $0x3,%eax
f010b5be:	01 d0                	add    %edx,%eax
f010b5c0:	c1 e0 03             	shl    $0x3,%eax
f010b5c3:	01 d0                	add    %edx,%eax
f010b5c5:	01 c0                	add    %eax,%eax
f010b5c7:	01 d0                	add    %edx,%eax
f010b5c9:	89 45 e8             	mov    %eax,-0x18(%ebp)
		e->__uptr_pws = (struct WorkingSetElement*) ( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
f010b5cc:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010b5cf:	89 d0                	mov    %edx,%eax
f010b5d1:	c1 e0 06             	shl    $0x6,%eax
f010b5d4:	29 d0                	sub    %edx,%eax
f010b5d6:	c1 e0 02             	shl    $0x2,%eax
f010b5d9:	01 d0                	add    %edx,%eax
f010b5db:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010b5e2:	01 c8                	add    %ecx,%eax
f010b5e4:	c1 e0 03             	shl    $0x3,%eax
f010b5e7:	01 d0                	add    %edx,%eax
f010b5e9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010b5f0:	29 c2                	sub    %eax,%edx
f010b5f2:	8d 04 95 00 00 00 00 	lea    0x0(,%edx,4),%eax
f010b5f9:	89 c2                	mov    %eax,%edx
f010b5fb:	89 d0                	mov    %edx,%eax
f010b5fd:	2d 00 00 40 11       	sub    $0x11400000,%eax
f010b602:	8d 90 88 00 00 00    	lea    0x88(%eax),%edx
f010b608:	8b 45 08             	mov    0x8(%ebp),%eax
f010b60b:	89 90 38 da 01 00    	mov    %edx,0x1da38(%eax)
	}
#endif

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010b611:	83 ec 0c             	sub    $0xc,%esp
f010b614:	6a 02                	push   $0x2
f010b616:	e8 ab 30 00 00       	call   f010e6c6 <isPageReplacmentAlgorithmLRU>
f010b61b:	83 c4 10             	add    $0x10,%esp
f010b61e:	85 c0                	test   %eax,%eax
f010b620:	0f 84 34 01 00 00    	je     f010b75a <initialize_environment+0x2b9>
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010b626:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010b62d:	e9 14 01 00 00       	jmp    f010b746 <initialize_environment+0x2a5>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f010b632:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b635:	89 d0                	mov    %edx,%eax
f010b637:	01 c0                	add    %eax,%eax
f010b639:	01 d0                	add    %edx,%eax
f010b63b:	c1 e0 03             	shl    $0x3,%eax
f010b63e:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b644:	8b 45 08             	mov    0x8(%ebp),%eax
f010b647:	01 d0                	add    %edx,%eax
f010b649:	83 c0 08             	add    $0x8,%eax
f010b64c:	85 c0                	test   %eax,%eax
f010b64e:	75 17                	jne    f010b667 <initialize_environment+0x1c6>
f010b650:	83 ec 04             	sub    $0x4,%esp
f010b653:	68 08 57 12 f0       	push   $0xf0125708
f010b658:	68 e6 03 00 00       	push   $0x3e6
f010b65d:	68 2b 57 12 f0       	push   $0xf012572b
f010b662:	e8 b3 4c ff ff       	call   f010031a <_panic>
f010b667:	8b 45 08             	mov    0x8(%ebp),%eax
f010b66a:	8b 90 48 d5 01 00    	mov    0x1d548(%eax),%edx
f010b670:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010b673:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010b676:	89 c8                	mov    %ecx,%eax
f010b678:	01 c0                	add    %eax,%eax
f010b67a:	01 c8                	add    %ecx,%eax
f010b67c:	c1 e0 03             	shl    $0x3,%eax
f010b67f:	01 d8                	add    %ebx,%eax
f010b681:	05 98 00 00 00       	add    $0x98,%eax
f010b686:	89 10                	mov    %edx,(%eax)
f010b688:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b68b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b68e:	89 d0                	mov    %edx,%eax
f010b690:	01 c0                	add    %eax,%eax
f010b692:	01 d0                	add    %edx,%eax
f010b694:	c1 e0 03             	shl    $0x3,%eax
f010b697:	01 c8                	add    %ecx,%eax
f010b699:	05 98 00 00 00       	add    $0x98,%eax
f010b69e:	8b 00                	mov    (%eax),%eax
f010b6a0:	85 c0                	test   %eax,%eax
f010b6a2:	74 28                	je     f010b6cc <initialize_environment+0x22b>
f010b6a4:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6a7:	8b 90 48 d5 01 00    	mov    0x1d548(%eax),%edx
f010b6ad:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f010b6b0:	89 c8                	mov    %ecx,%eax
f010b6b2:	01 c0                	add    %eax,%eax
f010b6b4:	01 c8                	add    %ecx,%eax
f010b6b6:	c1 e0 03             	shl    $0x3,%eax
f010b6b9:	8d 88 80 00 00 00    	lea    0x80(%eax),%ecx
f010b6bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6c2:	01 c8                	add    %ecx,%eax
f010b6c4:	83 c0 08             	add    $0x8,%eax
f010b6c7:	89 42 14             	mov    %eax,0x14(%edx)
f010b6ca:	eb 23                	jmp    f010b6ef <initialize_environment+0x24e>
f010b6cc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b6cf:	89 d0                	mov    %edx,%eax
f010b6d1:	01 c0                	add    %eax,%eax
f010b6d3:	01 d0                	add    %edx,%eax
f010b6d5:	c1 e0 03             	shl    $0x3,%eax
f010b6d8:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b6de:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6e1:	01 d0                	add    %edx,%eax
f010b6e3:	8d 50 08             	lea    0x8(%eax),%edx
f010b6e6:	8b 45 08             	mov    0x8(%ebp),%eax
f010b6e9:	89 90 4c d5 01 00    	mov    %edx,0x1d54c(%eax)
f010b6ef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b6f2:	89 d0                	mov    %edx,%eax
f010b6f4:	01 c0                	add    %eax,%eax
f010b6f6:	01 d0                	add    %edx,%eax
f010b6f8:	c1 e0 03             	shl    $0x3,%eax
f010b6fb:	8d 90 80 00 00 00    	lea    0x80(%eax),%edx
f010b701:	8b 45 08             	mov    0x8(%ebp),%eax
f010b704:	01 d0                	add    %edx,%eax
f010b706:	8d 50 08             	lea    0x8(%eax),%edx
f010b709:	8b 45 08             	mov    0x8(%ebp),%eax
f010b70c:	89 90 48 d5 01 00    	mov    %edx,0x1d548(%eax)
f010b712:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b715:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010b718:	89 d0                	mov    %edx,%eax
f010b71a:	01 c0                	add    %eax,%eax
f010b71c:	01 d0                	add    %edx,%eax
f010b71e:	c1 e0 03             	shl    $0x3,%eax
f010b721:	01 c8                	add    %ecx,%eax
f010b723:	05 9c 00 00 00       	add    $0x9c,%eax
f010b728:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010b72e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b731:	8b 80 54 d5 01 00    	mov    0x1d554(%eax),%eax
f010b737:	8d 50 01             	lea    0x1(%eax),%edx
f010b73a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b73d:	89 90 54 d5 01 00    	mov    %edx,0x1d554(%eax)
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
#if USE_KHEAP == 1
		//panic("not handled yet");
#else
		for (int i = 0; i < e->page_WS_max_size; ++i)
f010b743:	ff 45 f0             	incl   -0x10(%ebp)
f010b746:	8b 45 08             	mov    0x8(%ebp),%eax
f010b749:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f010b74f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010b752:	39 c2                	cmp    %eax,%edx
f010b754:	0f 87 d8 fe ff ff    	ja     f010b632 <initialize_environment+0x191>
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010b75a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b761:	eb 54                	jmp    f010b7b7 <initialize_environment+0x316>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f010b763:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b766:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b769:	89 d0                	mov    %edx,%eax
f010b76b:	01 c0                	add    %eax,%eax
f010b76d:	01 d0                	add    %edx,%eax
f010b76f:	c1 e0 03             	shl    $0x3,%eax
f010b772:	01 c8                	add    %ecx,%eax
f010b774:	05 88 00 00 00       	add    $0x88,%eax
f010b779:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f010b77f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b782:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b785:	89 d0                	mov    %edx,%eax
f010b787:	01 c0                	add    %eax,%eax
f010b789:	01 d0                	add    %edx,%eax
f010b78b:	c1 e0 03             	shl    $0x3,%eax
f010b78e:	01 c8                	add    %ecx,%eax
f010b790:	05 8c 00 00 00       	add    $0x8c,%eax
f010b795:	c6 00 01             	movb   $0x1,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f010b798:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b79b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b79e:	89 d0                	mov    %edx,%eax
f010b7a0:	01 c0                	add    %eax,%eax
f010b7a2:	01 d0                	add    %edx,%eax
f010b7a4:	c1 e0 03             	shl    $0x3,%eax
f010b7a7:	01 c8                	add    %ecx,%eax
f010b7a9:	05 90 00 00 00       	add    $0x90,%eax
f010b7ae:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}

	//initialize environment working set
#if USE_KHEAP
#else
	for(i=0; i< (e->page_WS_max_size); i++)
f010b7b4:	ff 45 f4             	incl   -0xc(%ebp)
f010b7b7:	8b 45 08             	mov    0x8(%ebp),%eax
f010b7ba:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f010b7c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010b7c3:	39 c2                	cmp    %eax,%edx
f010b7c5:	77 9c                	ja     f010b763 <initialize_environment+0x2c2>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f010b7c7:	8b 45 08             	mov    0x8(%ebp),%eax
f010b7ca:	c7 80 58 d5 01 00 00 	movl   $0x0,0x1d558(%eax)
f010b7d1:	00 00 00 
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010b7d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010b7db:	eb 54                	jmp    f010b831 <initialize_environment+0x390>
	{
		e->__ptr_tws[i].virtual_address = 0;
f010b7dd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b7e0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b7e3:	89 d0                	mov    %edx,%eax
f010b7e5:	01 c0                	add    %eax,%eax
f010b7e7:	01 d0                	add    %edx,%eax
f010b7e9:	c1 e0 03             	shl    $0x3,%eax
f010b7ec:	01 c8                	add    %ecx,%eax
f010b7ee:	05 5c d5 01 00       	add    $0x1d55c,%eax
f010b7f3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f010b7f9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b7fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b7ff:	89 d0                	mov    %edx,%eax
f010b801:	01 c0                	add    %eax,%eax
f010b803:	01 d0                	add    %edx,%eax
f010b805:	c1 e0 03             	shl    $0x3,%eax
f010b808:	01 c8                	add    %ecx,%eax
f010b80a:	05 60 d5 01 00       	add    $0x1d560,%eax
f010b80f:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f010b812:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010b815:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010b818:	89 d0                	mov    %edx,%eax
f010b81a:	01 c0                	add    %eax,%eax
f010b81c:	01 d0                	add    %edx,%eax
f010b81e:	c1 e0 03             	shl    $0x3,%eax
f010b821:	01 c8                	add    %ecx,%eax
f010b823:	05 64 d5 01 00       	add    $0x1d564,%eax
f010b828:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
#endif

	for(i=0; i< __TWS_MAX_SIZE; i++)
f010b82e:	ff 45 f4             	incl   -0xc(%ebp)
f010b831:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f010b835:	7e a6                	jle    f010b7dd <initialize_environment+0x33c>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f010b837:	8b 45 08             	mov    0x8(%ebp),%eax
f010b83a:	c7 80 0c da 01 00 00 	movl   $0x0,0x1da0c(%eax)
f010b841:	00 00 00 

	e->pageFaultsCounter=0;
f010b844:	8b 45 08             	mov    0x8(%ebp),%eax
f010b847:	c7 80 40 da 01 00 00 	movl   $0x0,0x1da40(%eax)
f010b84e:	00 00 00 
	e->tableFaultsCounter=0;
f010b851:	8b 45 08             	mov    0x8(%ebp),%eax
f010b854:	c7 80 44 da 01 00 00 	movl   $0x0,0x1da44(%eax)
f010b85b:	00 00 00 

	e->freeingFullWSCounter = 0;
f010b85e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b861:	c7 80 48 da 01 00 00 	movl   $0x0,0x1da48(%eax)
f010b868:	00 00 00 
	e->freeingScarceMemCounter = 0;
f010b86b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b86e:	c7 80 4c da 01 00 00 	movl   $0x0,0x1da4c(%eax)
f010b875:	00 00 00 

	e->nModifiedPages=0;
f010b878:	8b 45 08             	mov    0x8(%ebp),%eax
f010b87b:	c7 80 50 da 01 00 00 	movl   $0x0,0x1da50(%eax)
f010b882:	00 00 00 
	e->nNotModifiedPages=0;
f010b885:	8b 45 08             	mov    0x8(%ebp),%eax
f010b888:	c7 80 54 da 01 00 00 	movl   $0x0,0x1da54(%eax)
f010b88f:	00 00 00 
	e->nClocks = 0;
f010b892:	8b 45 08             	mov    0x8(%ebp),%eax
f010b895:	c7 80 68 da 01 00 00 	movl   $0x0,0x1da68(%eax)
f010b89c:	00 00 00 

	//2020
	e->nPageIn = 0;
f010b89f:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8a2:	c7 80 5c da 01 00 00 	movl   $0x0,0x1da5c(%eax)
f010b8a9:	00 00 00 
	e->nPageOut = 0;
f010b8ac:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8af:	c7 80 60 da 01 00 00 	movl   $0x0,0x1da60(%eax)
f010b8b6:	00 00 00 
	e->nNewPageAdded = 0;
f010b8b9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8bc:	c7 80 64 da 01 00 00 	movl   $0x0,0x1da64(%eax)
f010b8c3:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//[PROJECT'24.DONE] call initialize_uheap_dynamic_allocator(...)
	initialize_uheap_dynamic_allocator(e, USER_HEAP_START, USER_HEAP_START + DYN_ALLOC_MAX_SIZE);
f010b8c6:	83 ec 04             	sub    $0x4,%esp
f010b8c9:	68 00 00 00 82       	push   $0x82000000
f010b8ce:	68 00 00 00 80       	push   $0x80000000
f010b8d3:	ff 75 08             	pushl  0x8(%ebp)
f010b8d6:	e8 c0 fb ff ff       	call   f010b49b <initialize_uheap_dynamic_allocator>
f010b8db:	83 c4 10             	add    $0x10,%esp

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f010b8de:	83 ec 0c             	sub    $0xc,%esp
f010b8e1:	ff 75 08             	pushl  0x8(%ebp)
f010b8e4:	e8 09 00 00 00       	call   f010b8f2 <complete_environment_initialization>
f010b8e9:	83 c4 10             	add    $0x10,%esp
}
f010b8ec:	90                   	nop
f010b8ed:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010b8f0:	c9                   	leave  
f010b8f1:	c3                   	ret    

f010b8f2 <complete_environment_initialization>:

//========================================================
// 9) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f010b8f2:	55                   	push   %ebp
f010b8f3:	89 e5                	mov    %esp,%ebp
f010b8f5:	53                   	push   %ebx
f010b8f6:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f010b8f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8fc:	8b 40 64             	mov    0x64(%eax),%eax
f010b8ff:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010b905:	8b 45 08             	mov    0x8(%ebp),%eax
f010b908:	8b 40 68             	mov    0x68(%eax),%eax
f010b90b:	83 c8 03             	or     $0x3,%eax
f010b90e:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010b910:	8b 45 08             	mov    0x8(%ebp),%eax
f010b913:	8b 40 64             	mov    0x64(%eax),%eax
f010b916:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010b91c:	8b 45 08             	mov    0x8(%ebp),%eax
f010b91f:	8b 40 68             	mov    0x68(%eax),%eax
f010b922:	83 c8 05             	or     $0x5,%eax
f010b925:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010b927:	8b 45 08             	mov    0x8(%ebp),%eax
f010b92a:	c7 40 74 00 00 00 00 	movl   $0x0,0x74(%eax)
	e->disk_env_pgdir_PA= 0;
f010b931:	8b 45 08             	mov    0x8(%ebp),%eax
f010b934:	c7 40 78 00 00 00 00 	movl   $0x0,0x78(%eax)
	e->disk_env_tabledir = 0;
f010b93b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b93e:	c7 40 7c 00 00 00 00 	movl   $0x0,0x7c(%eax)
	e->disk_env_tabledir_PA = 0;
f010b945:	8b 45 08             	mov    0x8(%ebp),%eax
f010b948:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
f010b94f:	00 00 00 

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010b952:	8b 45 08             	mov    0x8(%ebp),%eax
f010b955:	8b 58 10             	mov    0x10(%eax),%ebx
f010b958:	83 ec 0c             	sub    $0xc,%esp
f010b95b:	6a 08                	push   $0x8
f010b95d:	e8 f4 36 01 00       	call   f011f056 <log2_ceil>
f010b962:	83 c4 10             	add    $0x10,%esp
f010b965:	ba 01 00 00 00       	mov    $0x1,%edx
f010b96a:	88 c1                	mov    %al,%cl
f010b96c:	d3 e2                	shl    %cl,%edx
f010b96e:	89 d0                	mov    %edx,%eax
f010b970:	01 d8                	add    %ebx,%eax
f010b972:	89 c3                	mov    %eax,%ebx
f010b974:	83 ec 0c             	sub    $0xc,%esp
f010b977:	6a 08                	push   $0x8
f010b979:	e8 a3 36 01 00       	call   f011f021 <nearest_pow2_ceil>
f010b97e:	83 c4 10             	add    $0x10,%esp
f010b981:	f7 d8                	neg    %eax
f010b983:	21 d8                	and    %ebx,%eax
f010b985:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010b988:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010b98c:	7f 1b                	jg     f010b9a9 <complete_environment_initialization+0xb7>
		generation = 1 << ENVGENSHIFT;
f010b98e:	83 ec 0c             	sub    $0xc,%esp
f010b991:	6a 08                	push   $0x8
f010b993:	e8 be 36 01 00       	call   f011f056 <log2_ceil>
f010b998:	83 c4 10             	add    $0x10,%esp
f010b99b:	ba 01 00 00 00       	mov    $0x1,%edx
f010b9a0:	88 c1                	mov    %al,%cl
f010b9a2:	d3 e2                	shl    %cl,%edx
f010b9a4:	89 d0                	mov    %edx,%eax
f010b9a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010b9a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b9ac:	8b 15 10 1a 55 f0    	mov    0xf0551a10,%edx
f010b9b2:	29 d0                	sub    %edx,%eax
f010b9b4:	c1 f8 02             	sar    $0x2,%eax
f010b9b7:	89 c2                	mov    %eax,%edx
f010b9b9:	89 d0                	mov    %edx,%eax
f010b9bb:	c1 e0 02             	shl    $0x2,%eax
f010b9be:	01 d0                	add    %edx,%eax
f010b9c0:	c1 e0 02             	shl    $0x2,%eax
f010b9c3:	01 d0                	add    %edx,%eax
f010b9c5:	c1 e0 02             	shl    $0x2,%eax
f010b9c8:	01 d0                	add    %edx,%eax
f010b9ca:	c1 e0 02             	shl    $0x2,%eax
f010b9cd:	01 d0                	add    %edx,%eax
f010b9cf:	c1 e0 08             	shl    $0x8,%eax
f010b9d2:	29 d0                	sub    %edx,%eax
f010b9d4:	c1 e0 08             	shl    $0x8,%eax
f010b9d7:	29 d0                	sub    %edx,%eax
f010b9d9:	c1 e0 03             	shl    $0x3,%eax
f010b9dc:	01 d0                	add    %edx,%eax
f010b9de:	c1 e0 03             	shl    $0x3,%eax
f010b9e1:	01 d0                	add    %edx,%eax
f010b9e3:	01 c0                	add    %eax,%eax
f010b9e5:	01 d0                	add    %edx,%eax
f010b9e7:	0b 45 f4             	or     -0xc(%ebp),%eax
f010b9ea:	89 c2                	mov    %eax,%edx
f010b9ec:	8b 45 08             	mov    0x8(%ebp),%eax
f010b9ef:	89 50 10             	mov    %edx,0x10(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	struct Env* cur_env = get_cpu_proc();
f010b9f2:	e8 79 ed ff ff       	call   f010a770 <get_cpu_proc>
f010b9f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (cur_env == NULL)
f010b9fa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010b9fe:	75 0c                	jne    f010ba0c <complete_environment_initialization+0x11a>
		e->env_parent_id = 0;//no parent;
f010ba00:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba03:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
f010ba0a:	eb 0c                	jmp    f010ba18 <complete_environment_initialization+0x126>
	else
		e->env_parent_id = cur_env->env_id;//curenv is the parent;
f010ba0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ba0f:	8b 50 10             	mov    0x10(%eax),%edx
f010ba12:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba15:	89 50 14             	mov    %edx,0x14(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010ba18:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba1b:	c7 40 18 04 00 00 00 	movl   $0x4,0x18(%eax)
	e->env_runs = 0;
f010ba22:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba25:	c7 80 58 da 01 00 00 	movl   $0x0,0x1da58(%eax)
f010ba2c:	00 00 00 

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(e->env_tf, 0, sizeof(*(e->env_tf)));
f010ba2f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba32:	8b 00                	mov    (%eax),%eax
f010ba34:	83 ec 04             	sub    $0x4,%esp
f010ba37:	6a 44                	push   $0x44
f010ba39:	6a 00                	push   $0x0
f010ba3b:	50                   	push   %eax
f010ba3c:	e8 37 50 01 00       	call   f0120a78 <memset>
f010ba41:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf->tf_ds = GD_UD | 3;
f010ba44:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba47:	8b 00                	mov    (%eax),%eax
f010ba49:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf->tf_es = GD_UD | 3;
f010ba4f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba52:	8b 00                	mov    (%eax),%eax
f010ba54:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf->tf_ss = GD_UD | 3;
f010ba5a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba5d:	8b 00                	mov    (%eax),%eax
f010ba5f:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf->tf_esp = (uint32*)USTACKTOP;
f010ba65:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba68:	8b 00                	mov    (%eax),%eax
f010ba6a:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf->tf_cs = GD_UT | 3;
f010ba71:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba74:	8b 00                	mov    (%eax),%eax
f010ba76:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf->tf_eflags |= FL_IF;
f010ba7c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba7f:	8b 00                	mov    (%eax),%eax
f010ba81:	8b 55 08             	mov    0x8(%ebp),%edx
f010ba84:	8b 12                	mov    (%edx),%edx
f010ba86:	8b 52 38             	mov    0x38(%edx),%edx
f010ba89:	80 ce 02             	or     $0x2,%dh
f010ba8c:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010ba8f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010ba93:	75 17                	jne    f010baac <complete_environment_initialization+0x1ba>
f010ba95:	83 ec 04             	sub    $0x4,%esp
f010ba98:	68 bd 57 12 f0       	push   $0xf01257bd
f010ba9d:	68 52 04 00 00       	push   $0x452
f010baa2:	68 2b 57 12 f0       	push   $0xf012572b
f010baa7:	e8 6e 48 ff ff       	call   f010031a <_panic>
f010baac:	8b 45 08             	mov    0x8(%ebp),%eax
f010baaf:	8b 40 08             	mov    0x8(%eax),%eax
f010bab2:	85 c0                	test   %eax,%eax
f010bab4:	74 11                	je     f010bac7 <complete_environment_initialization+0x1d5>
f010bab6:	8b 45 08             	mov    0x8(%ebp),%eax
f010bab9:	8b 40 08             	mov    0x8(%eax),%eax
f010babc:	8b 55 08             	mov    0x8(%ebp),%edx
f010babf:	8b 52 0c             	mov    0xc(%edx),%edx
f010bac2:	89 50 0c             	mov    %edx,0xc(%eax)
f010bac5:	eb 0b                	jmp    f010bad2 <complete_environment_initialization+0x1e0>
f010bac7:	8b 45 08             	mov    0x8(%ebp),%eax
f010baca:	8b 40 0c             	mov    0xc(%eax),%eax
f010bacd:	a3 18 1a 55 f0       	mov    %eax,0xf0551a18
f010bad2:	8b 45 08             	mov    0x8(%ebp),%eax
f010bad5:	8b 40 0c             	mov    0xc(%eax),%eax
f010bad8:	85 c0                	test   %eax,%eax
f010bada:	74 11                	je     f010baed <complete_environment_initialization+0x1fb>
f010badc:	8b 45 08             	mov    0x8(%ebp),%eax
f010badf:	8b 40 0c             	mov    0xc(%eax),%eax
f010bae2:	8b 55 08             	mov    0x8(%ebp),%edx
f010bae5:	8b 52 08             	mov    0x8(%edx),%edx
f010bae8:	89 50 08             	mov    %edx,0x8(%eax)
f010baeb:	eb 0b                	jmp    f010baf8 <complete_environment_initialization+0x206>
f010baed:	8b 45 08             	mov    0x8(%ebp),%eax
f010baf0:	8b 40 08             	mov    0x8(%eax),%eax
f010baf3:	a3 14 1a 55 f0       	mov    %eax,0xf0551a14
f010baf8:	8b 45 08             	mov    0x8(%ebp),%eax
f010bafb:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
f010bb02:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb05:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
f010bb0c:	a1 20 1a 55 f0       	mov    0xf0551a20,%eax
f010bb11:	48                   	dec    %eax
f010bb12:	a3 20 1a 55 f0       	mov    %eax,0xf0551a20
	return ;
f010bb17:	90                   	nop
}
f010bb18:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010bb1b:	c9                   	leave  
f010bb1c:	c3                   	ret    

f010bb1d <set_environment_entry_point>:

//===============================================
// 10) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010bb1d:	55                   	push   %ebp
f010bb1e:	89 e5                	mov    %esp,%ebp
f010bb20:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010bb23:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bb26:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010bb29:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bb2c:	8b 00                	mov    (%eax),%eax
f010bb2e:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010bb33:	74 17                	je     f010bb4c <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010bb35:	83 ec 04             	sub    $0x4,%esp
f010bb38:	68 4b 5a 12 f0       	push   $0xf0125a4b
f010bb3d:	68 5e 04 00 00       	push   $0x45e
f010bb42:	68 2b 57 12 f0       	push   $0xf012572b
f010bb47:	e8 ce 47 ff ff       	call   f010031a <_panic>
	e->env_tf->tf_eip = (uint32*)pELFHDR->e_entry ;
f010bb4c:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb4f:	8b 00                	mov    (%eax),%eax
f010bb51:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bb54:	8b 52 18             	mov    0x18(%edx),%edx
f010bb57:	89 50 30             	mov    %edx,0x30(%eax)
}
f010bb5a:	90                   	nop
f010bb5b:	c9                   	leave  
f010bb5c:	c3                   	ret    

f010bb5d <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 11) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010bb5d:	55                   	push   %ebp
f010bb5e:	89 e5                	mov    %esp,%ebp
f010bb60:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010bb63:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb66:	8b 40 10             	mov    0x10(%eax),%eax
f010bb69:	8d 48 01             	lea    0x1(%eax),%ecx
f010bb6c:	8b 55 08             	mov    0x8(%ebp),%edx
f010bb6f:	89 4a 10             	mov    %ecx,0x10(%edx)
f010bb72:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010bb75:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bb78:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010bb7b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bb7e:	8b 00                	mov    (%eax),%eax
f010bb80:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010bb85:	74 17                	je     f010bb9e <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010bb87:	83 ec 04             	sub    $0x4,%esp
f010bb8a:	68 4b 5a 12 f0       	push   $0xf0125a4b
f010bb8f:	68 6c 04 00 00       	push   $0x46c
f010bb94:	68 2b 57 12 f0       	push   $0xf012572b
f010bb99:	e8 7c 47 ff ff       	call   f010031a <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010bb9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bba1:	8b 50 1c             	mov    0x1c(%eax),%edx
f010bba4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bba7:	01 d0                	add    %edx,%eax
f010bba9:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010bbac:	eb 0f                	jmp    f010bbbd <PROGRAM_SEGMENT_NEXT+0x60>
f010bbae:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbb1:	8b 40 10             	mov    0x10(%eax),%eax
f010bbb4:	8d 50 01             	lea    0x1(%eax),%edx
f010bbb7:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbba:	89 50 10             	mov    %edx,0x10(%eax)
f010bbbd:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbc0:	8b 40 10             	mov    0x10(%eax),%eax
f010bbc3:	c1 e0 05             	shl    $0x5,%eax
f010bbc6:	89 c2                	mov    %eax,%edx
f010bbc8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bbcb:	01 d0                	add    %edx,%eax
f010bbcd:	8b 00                	mov    (%eax),%eax
f010bbcf:	83 f8 01             	cmp    $0x1,%eax
f010bbd2:	74 13                	je     f010bbe7 <PROGRAM_SEGMENT_NEXT+0x8a>
f010bbd4:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbd7:	8b 50 10             	mov    0x10(%eax),%edx
f010bbda:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bbdd:	8b 40 2c             	mov    0x2c(%eax),%eax
f010bbe0:	0f b7 c0             	movzwl %ax,%eax
f010bbe3:	39 c2                	cmp    %eax,%edx
f010bbe5:	72 c7                	jb     f010bbae <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010bbe7:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbea:	8b 40 10             	mov    0x10(%eax),%eax
f010bbed:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010bbf0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bbf3:	8b 40 2c             	mov    0x2c(%eax),%eax
f010bbf6:	0f b7 c0             	movzwl %ax,%eax
f010bbf9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010bbfc:	7e 63                	jle    f010bc61 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010bbfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc01:	c1 e0 05             	shl    $0x5,%eax
f010bc04:	89 c2                	mov    %eax,%edx
f010bc06:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bc09:	01 d0                	add    %edx,%eax
f010bc0b:	8b 50 04             	mov    0x4(%eax),%edx
f010bc0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bc11:	01 c2                	add    %eax,%edx
f010bc13:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc16:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010bc18:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc1b:	c1 e0 05             	shl    $0x5,%eax
f010bc1e:	89 c2                	mov    %eax,%edx
f010bc20:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bc23:	01 d0                	add    %edx,%eax
f010bc25:	8b 50 14             	mov    0x14(%eax),%edx
f010bc28:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc2b:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010bc2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc31:	c1 e0 05             	shl    $0x5,%eax
f010bc34:	89 c2                	mov    %eax,%edx
f010bc36:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bc39:	01 d0                	add    %edx,%eax
f010bc3b:	8b 50 10             	mov    0x10(%eax),%edx
f010bc3e:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc41:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010bc44:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bc47:	c1 e0 05             	shl    $0x5,%eax
f010bc4a:	89 c2                	mov    %eax,%edx
f010bc4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bc4f:	01 d0                	add    %edx,%eax
f010bc51:	8b 40 08             	mov    0x8(%eax),%eax
f010bc54:	89 c2                	mov    %eax,%edx
f010bc56:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc59:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010bc5c:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc5f:	eb 05                	jmp    f010bc66 <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010bc61:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010bc66:	c9                   	leave  
f010bc67:	c3                   	ret    

f010bc68 <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 12) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010bc68:	55                   	push   %ebp
f010bc69:	89 e5                	mov    %esp,%ebp
f010bc6b:	57                   	push   %edi
f010bc6c:	56                   	push   %esi
f010bc6d:	53                   	push   %ebx
f010bc6e:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010bc71:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010bc78:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bc7b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010bc7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010bc81:	8b 00                	mov    (%eax),%eax
f010bc83:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010bc88:	74 17                	je     f010bca1 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010bc8a:	83 ec 04             	sub    $0x4,%esp
f010bc8d:	68 4b 5a 12 f0       	push   $0xf0125a4b
f010bc92:	68 88 04 00 00       	push   $0x488
f010bc97:	68 2b 57 12 f0       	push   $0xf012572b
f010bc9c:	e8 79 46 ff ff       	call   f010031a <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010bca1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010bca4:	8b 50 1c             	mov    0x1c(%eax),%edx
f010bca7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bcaa:	01 d0                	add    %edx,%eax
f010bcac:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010bcaf:	eb 07                	jmp    f010bcb8 <PROGRAM_SEGMENT_FIRST+0x50>
f010bcb1:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010bcb4:	40                   	inc    %eax
f010bcb5:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010bcb8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010bcbb:	c1 e0 05             	shl    $0x5,%eax
f010bcbe:	89 c2                	mov    %eax,%edx
f010bcc0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bcc3:	01 d0                	add    %edx,%eax
f010bcc5:	8b 00                	mov    (%eax),%eax
f010bcc7:	83 f8 01             	cmp    $0x1,%eax
f010bcca:	74 10                	je     f010bcdc <PROGRAM_SEGMENT_FIRST+0x74>
f010bccc:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010bccf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010bcd2:	8b 40 2c             	mov    0x2c(%eax),%eax
f010bcd5:	0f b7 c0             	movzwl %ax,%eax
f010bcd8:	39 c2                	cmp    %eax,%edx
f010bcda:	72 d5                	jb     f010bcb1 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010bcdc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010bcdf:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010bce2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010bce5:	8b 40 2c             	mov    0x2c(%eax),%eax
f010bce8:	0f b7 c0             	movzwl %ax,%eax
f010bceb:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010bcee:	7e 68                	jle    f010bd58 <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010bcf0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010bcf3:	c1 e0 05             	shl    $0x5,%eax
f010bcf6:	89 c2                	mov    %eax,%edx
f010bcf8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bcfb:	01 d0                	add    %edx,%eax
f010bcfd:	8b 50 04             	mov    0x4(%eax),%edx
f010bd00:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bd03:	01 d0                	add    %edx,%eax
f010bd05:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010bd08:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010bd0b:	c1 e0 05             	shl    $0x5,%eax
f010bd0e:	89 c2                	mov    %eax,%edx
f010bd10:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bd13:	01 d0                	add    %edx,%eax
f010bd15:	8b 40 14             	mov    0x14(%eax),%eax
f010bd18:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010bd1b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010bd1e:	c1 e0 05             	shl    $0x5,%eax
f010bd21:	89 c2                	mov    %eax,%edx
f010bd23:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bd26:	01 d0                	add    %edx,%eax
f010bd28:	8b 40 10             	mov    0x10(%eax),%eax
f010bd2b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010bd2e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010bd31:	c1 e0 05             	shl    $0x5,%eax
f010bd34:	89 c2                	mov    %eax,%edx
f010bd36:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bd39:	01 d0                	add    %edx,%eax
f010bd3b:	8b 40 08             	mov    0x8(%eax),%eax
f010bd3e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010bd41:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd44:	89 c3                	mov    %eax,%ebx
f010bd46:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010bd49:	ba 05 00 00 00       	mov    $0x5,%edx
f010bd4e:	89 df                	mov    %ebx,%edi
f010bd50:	89 c6                	mov    %eax,%esi
f010bd52:	89 d1                	mov    %edx,%ecx
f010bd54:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010bd56:	eb 1c                	jmp    f010bd74 <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010bd58:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010bd5f:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd62:	89 c3                	mov    %eax,%ebx
f010bd64:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010bd67:	ba 05 00 00 00       	mov    $0x5,%edx
f010bd6c:	89 df                	mov    %ebx,%edi
f010bd6e:	89 c6                	mov    %eax,%esi
f010bd70:	89 d1                	mov    %edx,%ecx
f010bd72:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010bd74:	8b 45 08             	mov    0x8(%ebp),%eax
f010bd77:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010bd7a:	5b                   	pop    %ebx
f010bd7b:	5e                   	pop    %esi
f010bd7c:	5f                   	pop    %edi
f010bd7d:	5d                   	pop    %ebp
f010bd7e:	c2 04 00             	ret    $0x4

f010bd81 <cleanup_buffers>:

//===============================================================================
// 13) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================================================
void cleanup_buffers(struct Env* e)
{
f010bd81:	55                   	push   %ebp
f010bd82:	89 e5                	mov    %esp,%ebp
f010bd84:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010bd87:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	acquire_spinlock(&MemFrameLists.mfllock);
f010bd8e:	83 ec 0c             	sub    $0xc,%esp
f010bd91:	68 40 25 55 f0       	push   $0xf0552540
f010bd96:	e8 3c 2d 00 00       	call   f010ead7 <acquire_spinlock>
f010bd9b:	83 c4 10             	add    $0x10,%esp
	{
		LIST_FOREACH(ptr_fi, &MemFrameLists.modified_frame_list)
f010bd9e:	a1 30 25 55 f0       	mov    0xf0552530,%eax
f010bda3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010bda6:	e9 c3 00 00 00       	jmp    f010be6e <cleanup_buffers+0xed>
		{
			if(ptr_fi->proc == e)
f010bdab:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bdae:	8b 40 0c             	mov    0xc(%eax),%eax
f010bdb1:	3b 45 08             	cmp    0x8(%ebp),%eax
f010bdb4:	0f 85 ac 00 00 00    	jne    f010be66 <cleanup_buffers+0xe5>
			{
				pt_clear_page_table_entry(ptr_fi->proc->env_page_directory,ptr_fi->bufferedVA);
f010bdba:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bdbd:	8b 50 10             	mov    0x10(%eax),%edx
f010bdc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bdc3:	8b 40 0c             	mov    0xc(%eax),%eax
f010bdc6:	8b 40 64             	mov    0x64(%eax),%eax
f010bdc9:	83 ec 08             	sub    $0x8,%esp
f010bdcc:	52                   	push   %edx
f010bdcd:	50                   	push   %eax
f010bdce:	e8 62 ce ff ff       	call   f0108c35 <pt_clear_page_table_entry>
f010bdd3:	83 c4 10             	add    $0x10,%esp

				//cprintf("==================\n");
				//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
				LIST_REMOVE(&MemFrameLists.modified_frame_list, ptr_fi);
f010bdd6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010bdda:	75 17                	jne    f010bdf3 <cleanup_buffers+0x72>
f010bddc:	83 ec 04             	sub    $0x4,%esp
f010bddf:	68 bd 57 12 f0       	push   $0xf01257bd
f010bde4:	68 b1 04 00 00       	push   $0x4b1
f010bde9:	68 2b 57 12 f0       	push   $0xf012572b
f010bdee:	e8 27 45 ff ff       	call   f010031a <_panic>
f010bdf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bdf6:	8b 00                	mov    (%eax),%eax
f010bdf8:	85 c0                	test   %eax,%eax
f010bdfa:	74 10                	je     f010be0c <cleanup_buffers+0x8b>
f010bdfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010bdff:	8b 00                	mov    (%eax),%eax
f010be01:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010be04:	8b 52 04             	mov    0x4(%edx),%edx
f010be07:	89 50 04             	mov    %edx,0x4(%eax)
f010be0a:	eb 0b                	jmp    f010be17 <cleanup_buffers+0x96>
f010be0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be0f:	8b 40 04             	mov    0x4(%eax),%eax
f010be12:	a3 34 25 55 f0       	mov    %eax,0xf0552534
f010be17:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be1a:	8b 40 04             	mov    0x4(%eax),%eax
f010be1d:	85 c0                	test   %eax,%eax
f010be1f:	74 0f                	je     f010be30 <cleanup_buffers+0xaf>
f010be21:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be24:	8b 40 04             	mov    0x4(%eax),%eax
f010be27:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010be2a:	8b 12                	mov    (%edx),%edx
f010be2c:	89 10                	mov    %edx,(%eax)
f010be2e:	eb 0a                	jmp    f010be3a <cleanup_buffers+0xb9>
f010be30:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be33:	8b 00                	mov    (%eax),%eax
f010be35:	a3 30 25 55 f0       	mov    %eax,0xf0552530
f010be3a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be3d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010be43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be46:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010be4d:	a1 3c 25 55 f0       	mov    0xf055253c,%eax
f010be52:	48                   	dec    %eax
f010be53:	a3 3c 25 55 f0       	mov    %eax,0xf055253c

				free_frame(ptr_fi);
f010be58:	83 ec 0c             	sub    $0xc,%esp
f010be5b:	ff 75 f4             	pushl  -0xc(%ebp)
f010be5e:	e8 c1 c4 ff ff       	call   f0108324 <free_frame>
f010be63:	83 c4 10             	add    $0x10,%esp
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	acquire_spinlock(&MemFrameLists.mfllock);
	{
		LIST_FOREACH(ptr_fi, &MemFrameLists.modified_frame_list)
f010be66:	a1 38 25 55 f0       	mov    0xf0552538,%eax
f010be6b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010be6e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010be72:	74 07                	je     f010be7b <cleanup_buffers+0xfa>
f010be74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010be77:	8b 00                	mov    (%eax),%eax
f010be79:	eb 05                	jmp    f010be80 <cleanup_buffers+0xff>
f010be7b:	b8 00 00 00 00       	mov    $0x0,%eax
f010be80:	a3 38 25 55 f0       	mov    %eax,0xf0552538
f010be85:	a1 38 25 55 f0       	mov    0xf0552538,%eax
f010be8a:	85 c0                	test   %eax,%eax
f010be8c:	0f 85 19 ff ff ff    	jne    f010bdab <cleanup_buffers+0x2a>
f010be92:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010be96:	0f 85 0f ff ff ff    	jne    f010bdab <cleanup_buffers+0x2a>
				//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x, saved next = %x \n", curenv->prog_name ,ptr_fi, LIST_NEXT(ptr_fi), ___ptr_next);
				//cprintf("==================\n");
			}
		}
	}
	release_spinlock(&MemFrameLists.mfllock);
f010be9c:	83 ec 0c             	sub    $0xc,%esp
f010be9f:	68 40 25 55 f0       	push   $0xf0552540
f010bea4:	e8 b5 2c 00 00       	call   f010eb5e <release_spinlock>
f010bea9:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010beac:	90                   	nop
f010bead:	c9                   	leave  
f010beae:	c3                   	ret    

f010beaf <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010beaf:	55                   	push   %ebp
f010beb0:	89 e5                	mov    %esp,%ebp
f010beb2:	83 ec 08             	sub    $0x8,%esp
	//[PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010beb5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010beb9:	7e 06                	jle    f010bec1 <set_program_priority+0x12>
f010bebb:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010bebf:	7e 14                	jle    f010bed5 <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010bec1:	83 ec 04             	sub    $0x4,%esp
f010bec4:	68 64 5a 12 f0       	push   $0xf0125a64
f010bec9:	6a 10                	push   $0x10
f010becb:	68 88 5a 12 f0       	push   $0xf0125a88
f010bed0:	e8 45 44 ff ff       	call   f010031a <_panic>
		return;
	}
	if(env == NULL)
f010bed5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010bed9:	74 78                	je     f010bf53 <set_program_priority+0xa4>
		return;
	switch(priority)
f010bedb:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010bedf:	77 56                	ja     f010bf37 <set_program_priority+0x88>
f010bee1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bee4:	c1 e0 02             	shl    $0x2,%eax
f010bee7:	05 c4 5a 12 f0       	add    $0xf0125ac4,%eax
f010beec:	8b 00                	mov    (%eax),%eax
f010beee:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010bef0:	83 ec 08             	sub    $0x8,%esp
f010bef3:	6a 01                	push   $0x1
f010bef5:	ff 75 08             	pushl  0x8(%ebp)
f010bef8:	e8 b6 d7 ff ff       	call   f01096b3 <half_WS_Size>
f010befd:	83 c4 10             	add    $0x10,%esp
			break;
f010bf00:	eb 35                	jmp    f010bf37 <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010bf02:	83 ec 08             	sub    $0x8,%esp
f010bf05:	6a 00                	push   $0x0
f010bf07:	ff 75 08             	pushl  0x8(%ebp)
f010bf0a:	e8 a4 d7 ff ff       	call   f01096b3 <half_WS_Size>
f010bf0f:	83 c4 10             	add    $0x10,%esp
			break;
f010bf12:	eb 23                	jmp    f010bf37 <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010bf14:	83 ec 08             	sub    $0x8,%esp
f010bf17:	6a 01                	push   $0x1
f010bf19:	ff 75 08             	pushl  0x8(%ebp)
f010bf1c:	e8 75 d7 ff ff       	call   f0109696 <double_WS_Size>
f010bf21:	83 c4 10             	add    $0x10,%esp
			break;
f010bf24:	eb 11                	jmp    f010bf37 <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010bf26:	83 ec 08             	sub    $0x8,%esp
f010bf29:	6a 00                	push   $0x0
f010bf2b:	ff 75 08             	pushl  0x8(%ebp)
f010bf2e:	e8 63 d7 ff ff       	call   f0109696 <double_WS_Size>
f010bf33:	83 c4 10             	add    $0x10,%esp
			break;
f010bf36:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010bf37:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf3a:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f010bf40:	83 ec 08             	sub    $0x8,%esp
f010bf43:	50                   	push   %eax
f010bf44:	68 a5 5a 12 f0       	push   $0xf0125aa5
f010bf49:	e8 1e 50 ff ff       	call   f0100f6c <cprintf>
f010bf4e:	83 c4 10             	add    $0x10,%esp
f010bf51:	eb 01                	jmp    f010bf54 <set_program_priority+0xa5>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010bf53:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010bf54:	c9                   	leave  
f010bf55:	c3                   	ret    

f010bf56 <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010bf56:	55                   	push   %ebp
f010bf57:	89 e5                	mov    %esp,%ebp
f010bf59:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010bf5c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010bf63:	eb 29                	jmp    f010bf8e <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010bf65:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bf68:	89 d0                	mov    %edx,%eax
f010bf6a:	01 c0                	add    %eax,%eax
f010bf6c:	01 d0                	add    %edx,%eax
f010bf6e:	c1 e0 02             	shl    $0x2,%eax
f010bf71:	05 80 99 17 f0       	add    $0xf0179980,%eax
f010bf76:	8b 00                	mov    (%eax),%eax
f010bf78:	83 ec 08             	sub    $0x8,%esp
f010bf7b:	50                   	push   %eax
f010bf7c:	ff 75 08             	pushl  0x8(%ebp)
f010bf7f:	e8 12 4a 01 00       	call   f0120996 <strcmp>
f010bf84:	83 c4 10             	add    $0x10,%esp
f010bf87:	85 c0                	test   %eax,%eax
f010bf89:	74 0f                	je     f010bf9a <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010bf8b:	ff 45 f4             	incl   -0xc(%ebp)
f010bf8e:	a1 a8 9c 17 f0       	mov    0xf0179ca8,%eax
f010bf93:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010bf96:	7c cd                	jl     f010bf65 <get_user_program_info+0xf>
f010bf98:	eb 01                	jmp    f010bf9b <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010bf9a:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010bf9b:	a1 a8 9c 17 f0       	mov    0xf0179ca8,%eax
f010bfa0:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010bfa3:	75 1a                	jne    f010bfbf <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010bfa5:	83 ec 08             	sub    $0x8,%esp
f010bfa8:	ff 75 08             	pushl  0x8(%ebp)
f010bfab:	68 2d 67 12 f0       	push   $0xf012672d
f010bfb0:	e8 b7 4f ff ff       	call   f0100f6c <cprintf>
f010bfb5:	83 c4 10             	add    $0x10,%esp
		return 0;
f010bfb8:	b8 00 00 00 00       	mov    $0x0,%eax
f010bfbd:	eb 11                	jmp    f010bfd0 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010bfbf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bfc2:	89 d0                	mov    %edx,%eax
f010bfc4:	01 c0                	add    %eax,%eax
f010bfc6:	01 d0                	add    %edx,%eax
f010bfc8:	c1 e0 02             	shl    $0x2,%eax
f010bfcb:	05 80 99 17 f0       	add    $0xf0179980,%eax
}
f010bfd0:	c9                   	leave  
f010bfd1:	c3                   	ret    

f010bfd2 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010bfd2:	55                   	push   %ebp
f010bfd3:	89 e5                	mov    %esp,%ebp
f010bfd5:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010bfd8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010bfdf:	eb 2d                	jmp    f010c00e <get_user_program_info_by_env+0x3c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010bfe1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010bfe4:	89 d0                	mov    %edx,%eax
f010bfe6:	01 c0                	add    %eax,%eax
f010bfe8:	01 d0                	add    %edx,%eax
f010bfea:	c1 e0 02             	shl    $0x2,%eax
f010bfed:	05 80 99 17 f0       	add    $0xf0179980,%eax
f010bff2:	8b 00                	mov    (%eax),%eax
f010bff4:	8b 55 08             	mov    0x8(%ebp),%edx
f010bff7:	83 c2 20             	add    $0x20,%edx
f010bffa:	83 ec 08             	sub    $0x8,%esp
f010bffd:	50                   	push   %eax
f010bffe:	52                   	push   %edx
f010bfff:	e8 92 49 01 00       	call   f0120996 <strcmp>
f010c004:	83 c4 10             	add    $0x10,%esp
f010c007:	85 c0                	test   %eax,%eax
f010c009:	74 0f                	je     f010c01a <get_user_program_info_by_env+0x48>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010c00b:	ff 45 f4             	incl   -0xc(%ebp)
f010c00e:	a1 a8 9c 17 f0       	mov    0xf0179ca8,%eax
f010c013:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010c016:	7c c9                	jl     f010bfe1 <get_user_program_info_by_env+0xf>
f010c018:	eb 01                	jmp    f010c01b <get_user_program_info_by_env+0x49>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010c01a:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010c01b:	a1 a8 9c 17 f0       	mov    0xf0179ca8,%eax
f010c020:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010c023:	75 17                	jne    f010c03c <get_user_program_info_by_env+0x6a>
	{
		cprintf("Unknown user program \n");
f010c025:	83 ec 0c             	sub    $0xc,%esp
f010c028:	68 48 67 12 f0       	push   $0xf0126748
f010c02d:	e8 3a 4f ff ff       	call   f0100f6c <cprintf>
f010c032:	83 c4 10             	add    $0x10,%esp
		return 0;
f010c035:	b8 00 00 00 00       	mov    $0x0,%eax
f010c03a:	eb 11                	jmp    f010c04d <get_user_program_info_by_env+0x7b>
	}

	return &userPrograms[i];
f010c03c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c03f:	89 d0                	mov    %edx,%eax
f010c041:	01 c0                	add    %eax,%eax
f010c043:	01 d0                	add    %edx,%eax
f010c045:	c1 e0 02             	shl    $0x2,%eax
f010c048:	05 80 99 17 f0       	add    $0xf0179980,%eax
}
f010c04d:	c9                   	leave  
f010c04e:	c3                   	ret    

f010c04f <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010c04f:	55                   	push   %ebp
f010c050:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010c052:	8b 45 08             	mov    0x8(%ebp),%eax
f010c055:	83 f8 13             	cmp    $0x13,%eax
f010c058:	77 0c                	ja     f010c066 <trapname+0x17>
		return excnames[trapno];
f010c05a:	8b 45 08             	mov    0x8(%ebp),%eax
f010c05d:	8b 04 85 20 6b 12 f0 	mov    -0xfed94e0(,%eax,4),%eax
f010c064:	eb 2c                	jmp    f010c092 <trapname+0x43>
	if (trapno == T_SYSCALL)
f010c066:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010c06a:	75 07                	jne    f010c073 <trapname+0x24>
		return "System call";
f010c06c:	b8 60 67 12 f0       	mov    $0xf0126760,%eax
f010c071:	eb 1f                	jmp    f010c092 <trapname+0x43>
	else if (trapno == IRQ0_Clock)
f010c073:	83 7d 08 20          	cmpl   $0x20,0x8(%ebp)
f010c077:	75 07                	jne    f010c080 <trapname+0x31>
		return "Clock Interrupt";
f010c079:	b8 6c 67 12 f0       	mov    $0xf012676c,%eax
f010c07e:	eb 12                	jmp    f010c092 <trapname+0x43>
	else if (trapno == IRQ1_KB)
f010c080:	83 7d 08 21          	cmpl   $0x21,0x8(%ebp)
f010c084:	75 07                	jne    f010c08d <trapname+0x3e>
		return "Keyboard Interrupt";
f010c086:	b8 7c 67 12 f0       	mov    $0xf012677c,%eax
f010c08b:	eb 05                	jmp    f010c092 <trapname+0x43>
	return "(unknown trap)";
f010c08d:	b8 8f 67 12 f0       	mov    $0xf012678f,%eax
}
f010c092:	5d                   	pop    %ebp
f010c093:	c3                   	ret    

f010c094 <ts_init>:


void ts_init(void)
{
f010c094:	55                   	push   %ebp
f010c095:	89 e5                	mov    %esp,%ebp
f010c097:	53                   	push   %ebx
f010c098:	83 ec 14             	sub    $0x14,%esp
	pushcli();	//disable interrupt - lock: to protect CPU info in multi-CPU
f010c09b:	e8 20 b1 ff ff       	call   f01071c0 <pushcli>

	struct cpu* c = mycpu();
f010c0a0:	e8 58 b0 ff ff       	call   f01070fd <mycpu>
f010c0a5:	89 45 f4             	mov    %eax,-0xc(%ebp)

	// Setup a TSS so that we get the right user kernel stack
	// when we trap to the kernel.
	// 2024: for now, temporarily set it to 0
	// since the scheduler will run first then switch to the first process
	c->ts.ts_esp0 = 0;
f010c0a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c0ab:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
	c->ts.ts_ss0 = GD_KD;
f010c0b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c0b5:	66 c7 40 14 10 00    	movw   $0x10,0x14(%eax)

	// Initialize the TSS field of the gdt.
	c->gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&(c->ts)), sizeof(struct Taskstate), 0);
f010c0bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c0be:	83 c0 0c             	add    $0xc,%eax
f010c0c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c0c4:	83 c2 0c             	add    $0xc,%edx
f010c0c7:	c1 ea 10             	shr    $0x10,%edx
f010c0ca:	88 d3                	mov    %dl,%bl
f010c0cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c0cf:	83 c2 0c             	add    $0xc,%edx
f010c0d2:	c1 ea 18             	shr    $0x18,%edx
f010c0d5:	88 d1                	mov    %dl,%cl
f010c0d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c0da:	66 c7 82 9c 00 00 00 	movw   $0x68,0x9c(%edx)
f010c0e1:	68 00 
f010c0e3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c0e6:	66 89 82 9e 00 00 00 	mov    %ax,0x9e(%edx)
f010c0ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c0f0:	88 98 a0 00 00 00    	mov    %bl,0xa0(%eax)
f010c0f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c0f9:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010c0ff:	83 e2 f0             	and    $0xfffffff0,%edx
f010c102:	83 ca 09             	or     $0x9,%edx
f010c105:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010c10b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c10e:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010c114:	83 ca 10             	or     $0x10,%edx
f010c117:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010c11d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c120:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010c126:	83 e2 9f             	and    $0xffffff9f,%edx
f010c129:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010c12f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c132:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010c138:	83 ca 80             	or     $0xffffff80,%edx
f010c13b:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)
f010c141:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c144:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010c14a:	83 e2 f0             	and    $0xfffffff0,%edx
f010c14d:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010c153:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c156:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010c15c:	83 e2 ef             	and    $0xffffffef,%edx
f010c15f:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010c165:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c168:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010c16e:	83 e2 df             	and    $0xffffffdf,%edx
f010c171:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010c177:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c17a:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010c180:	83 ca 40             	or     $0x40,%edx
f010c183:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010c189:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c18c:	8a 90 a2 00 00 00    	mov    0xa2(%eax),%dl
f010c192:	83 e2 7f             	and    $0x7f,%edx
f010c195:	88 90 a2 00 00 00    	mov    %dl,0xa2(%eax)
f010c19b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c19e:	88 88 a3 00 00 00    	mov    %cl,0xa3(%eax)
	c->gdt[GD_TSS >> 3].sd_s = 0;
f010c1a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c1a7:	8a 90 a1 00 00 00    	mov    0xa1(%eax),%dl
f010c1ad:	83 e2 ef             	and    $0xffffffef,%edx
f010c1b0:	88 90 a1 00 00 00    	mov    %dl,0xa1(%eax)

	popcli();	//enable interrupt - lock: to protect CPU info in multi-CPU
f010c1b6:	e8 57 b0 ff ff       	call   f0107212 <popcli>
f010c1bb:	66 c7 45 f2 28 00    	movw   $0x28,-0xe(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010c1c1:	66 8b 45 f2          	mov    -0xe(%ebp),%ax
f010c1c5:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);
}
f010c1c8:	90                   	nop
f010c1c9:	83 c4 14             	add    $0x14,%esp
f010c1cc:	5b                   	pop    %ebx
f010c1cd:	5d                   	pop    %ebp
f010c1ce:	c3                   	ret    

f010c1cf <idt_init>:
/// shifted function addresses can't be represented in relocation records.)
///
struct Gatedesc idt[256] = { { 0 } };

void idt_init(void)
{
f010c1cf:	55                   	push   %ebp
f010c1d0:	89 e5                	mov    %esp,%ebp
f010c1d2:	83 ec 10             	sub    $0x10,%esp
	//initialize idt
	SETGATE(idt[T_DBLFLT  ], 0, GD_KT , &DBL_FAULT, 0) ;		//8
f010c1d5:	b8 7e d6 10 f0       	mov    $0xf010d67e,%eax
f010c1da:	66 a3 80 1a 55 f0    	mov    %ax,0xf0551a80
f010c1e0:	66 c7 05 82 1a 55 f0 	movw   $0x8,0xf0551a82
f010c1e7:	08 00 
f010c1e9:	a0 84 1a 55 f0       	mov    0xf0551a84,%al
f010c1ee:	83 e0 e0             	and    $0xffffffe0,%eax
f010c1f1:	a2 84 1a 55 f0       	mov    %al,0xf0551a84
f010c1f6:	a0 84 1a 55 f0       	mov    0xf0551a84,%al
f010c1fb:	83 e0 1f             	and    $0x1f,%eax
f010c1fe:	a2 84 1a 55 f0       	mov    %al,0xf0551a84
f010c203:	a0 85 1a 55 f0       	mov    0xf0551a85,%al
f010c208:	83 e0 f0             	and    $0xfffffff0,%eax
f010c20b:	83 c8 0e             	or     $0xe,%eax
f010c20e:	a2 85 1a 55 f0       	mov    %al,0xf0551a85
f010c213:	a0 85 1a 55 f0       	mov    0xf0551a85,%al
f010c218:	83 e0 ef             	and    $0xffffffef,%eax
f010c21b:	a2 85 1a 55 f0       	mov    %al,0xf0551a85
f010c220:	a0 85 1a 55 f0       	mov    0xf0551a85,%al
f010c225:	83 e0 9f             	and    $0xffffff9f,%eax
f010c228:	a2 85 1a 55 f0       	mov    %al,0xf0551a85
f010c22d:	a0 85 1a 55 f0       	mov    0xf0551a85,%al
f010c232:	83 c8 80             	or     $0xffffff80,%eax
f010c235:	a2 85 1a 55 f0       	mov    %al,0xf0551a85
f010c23a:	b8 7e d6 10 f0       	mov    $0xf010d67e,%eax
f010c23f:	c1 e8 10             	shr    $0x10,%eax
f010c242:	66 a3 86 1a 55 f0    	mov    %ax,0xf0551a86
	SETGATE(idt[T_PGFLT   ], 0, GD_KT , &PAGE_FAULT, 0) ;		//14
f010c248:	b8 86 d6 10 f0       	mov    $0xf010d686,%eax
f010c24d:	66 a3 b0 1a 55 f0    	mov    %ax,0xf0551ab0
f010c253:	66 c7 05 b2 1a 55 f0 	movw   $0x8,0xf0551ab2
f010c25a:	08 00 
f010c25c:	a0 b4 1a 55 f0       	mov    0xf0551ab4,%al
f010c261:	83 e0 e0             	and    $0xffffffe0,%eax
f010c264:	a2 b4 1a 55 f0       	mov    %al,0xf0551ab4
f010c269:	a0 b4 1a 55 f0       	mov    0xf0551ab4,%al
f010c26e:	83 e0 1f             	and    $0x1f,%eax
f010c271:	a2 b4 1a 55 f0       	mov    %al,0xf0551ab4
f010c276:	a0 b5 1a 55 f0       	mov    0xf0551ab5,%al
f010c27b:	83 e0 f0             	and    $0xfffffff0,%eax
f010c27e:	83 c8 0e             	or     $0xe,%eax
f010c281:	a2 b5 1a 55 f0       	mov    %al,0xf0551ab5
f010c286:	a0 b5 1a 55 f0       	mov    0xf0551ab5,%al
f010c28b:	83 e0 ef             	and    $0xffffffef,%eax
f010c28e:	a2 b5 1a 55 f0       	mov    %al,0xf0551ab5
f010c293:	a0 b5 1a 55 f0       	mov    0xf0551ab5,%al
f010c298:	83 e0 9f             	and    $0xffffff9f,%eax
f010c29b:	a2 b5 1a 55 f0       	mov    %al,0xf0551ab5
f010c2a0:	a0 b5 1a 55 f0       	mov    0xf0551ab5,%al
f010c2a5:	83 c8 80             	or     $0xffffff80,%eax
f010c2a8:	a2 b5 1a 55 f0       	mov    %al,0xf0551ab5
f010c2ad:	b8 86 d6 10 f0       	mov    $0xf010d686,%eax
f010c2b2:	c1 e8 10             	shr    $0x10,%eax
f010c2b5:	66 a3 b6 1a 55 f0    	mov    %ax,0xf0551ab6
	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &IRQ0_CLK_HANDLER, 3) ;	//32
f010c2bb:	b8 8e d6 10 f0       	mov    $0xf010d68e,%eax
f010c2c0:	66 a3 40 1b 55 f0    	mov    %ax,0xf0551b40
f010c2c6:	66 c7 05 42 1b 55 f0 	movw   $0x8,0xf0551b42
f010c2cd:	08 00 
f010c2cf:	a0 44 1b 55 f0       	mov    0xf0551b44,%al
f010c2d4:	83 e0 e0             	and    $0xffffffe0,%eax
f010c2d7:	a2 44 1b 55 f0       	mov    %al,0xf0551b44
f010c2dc:	a0 44 1b 55 f0       	mov    0xf0551b44,%al
f010c2e1:	83 e0 1f             	and    $0x1f,%eax
f010c2e4:	a2 44 1b 55 f0       	mov    %al,0xf0551b44
f010c2e9:	a0 45 1b 55 f0       	mov    0xf0551b45,%al
f010c2ee:	83 e0 f0             	and    $0xfffffff0,%eax
f010c2f1:	83 c8 0e             	or     $0xe,%eax
f010c2f4:	a2 45 1b 55 f0       	mov    %al,0xf0551b45
f010c2f9:	a0 45 1b 55 f0       	mov    0xf0551b45,%al
f010c2fe:	83 e0 ef             	and    $0xffffffef,%eax
f010c301:	a2 45 1b 55 f0       	mov    %al,0xf0551b45
f010c306:	a0 45 1b 55 f0       	mov    0xf0551b45,%al
f010c30b:	83 c8 60             	or     $0x60,%eax
f010c30e:	a2 45 1b 55 f0       	mov    %al,0xf0551b45
f010c313:	a0 45 1b 55 f0       	mov    0xf0551b45,%al
f010c318:	83 c8 80             	or     $0xffffff80,%eax
f010c31b:	a2 45 1b 55 f0       	mov    %al,0xf0551b45
f010c320:	b8 8e d6 10 f0       	mov    $0xf010d68e,%eax
f010c325:	c1 e8 10             	shr    $0x10,%eax
f010c328:	66 a3 46 1b 55 f0    	mov    %ax,0xf0551b46
	SETGATE(idt[IRQ1_KB	  ], 0, GD_KT , &IRQ1_KBD_HANDLER, 3) ;	//33
f010c32e:	b8 98 d6 10 f0       	mov    $0xf010d698,%eax
f010c333:	66 a3 48 1b 55 f0    	mov    %ax,0xf0551b48
f010c339:	66 c7 05 4a 1b 55 f0 	movw   $0x8,0xf0551b4a
f010c340:	08 00 
f010c342:	a0 4c 1b 55 f0       	mov    0xf0551b4c,%al
f010c347:	83 e0 e0             	and    $0xffffffe0,%eax
f010c34a:	a2 4c 1b 55 f0       	mov    %al,0xf0551b4c
f010c34f:	a0 4c 1b 55 f0       	mov    0xf0551b4c,%al
f010c354:	83 e0 1f             	and    $0x1f,%eax
f010c357:	a2 4c 1b 55 f0       	mov    %al,0xf0551b4c
f010c35c:	a0 4d 1b 55 f0       	mov    0xf0551b4d,%al
f010c361:	83 e0 f0             	and    $0xfffffff0,%eax
f010c364:	83 c8 0e             	or     $0xe,%eax
f010c367:	a2 4d 1b 55 f0       	mov    %al,0xf0551b4d
f010c36c:	a0 4d 1b 55 f0       	mov    0xf0551b4d,%al
f010c371:	83 e0 ef             	and    $0xffffffef,%eax
f010c374:	a2 4d 1b 55 f0       	mov    %al,0xf0551b4d
f010c379:	a0 4d 1b 55 f0       	mov    0xf0551b4d,%al
f010c37e:	83 c8 60             	or     $0x60,%eax
f010c381:	a2 4d 1b 55 f0       	mov    %al,0xf0551b4d
f010c386:	a0 4d 1b 55 f0       	mov    0xf0551b4d,%al
f010c38b:	83 c8 80             	or     $0xffffff80,%eax
f010c38e:	a2 4d 1b 55 f0       	mov    %al,0xf0551b4d
f010c393:	b8 98 d6 10 f0       	mov    $0xf010d698,%eax
f010c398:	c1 e8 10             	shr    $0x10,%eax
f010c39b:	66 a3 4e 1b 55 f0    	mov    %ax,0xf0551b4e
	SETGATE(idt[T_SYSCALL ], 0, GD_KT , &SYSCALL_HANDLER, 3) ;	//48
f010c3a1:	b8 a2 d6 10 f0       	mov    $0xf010d6a2,%eax
f010c3a6:	66 a3 c0 1b 55 f0    	mov    %ax,0xf0551bc0
f010c3ac:	66 c7 05 c2 1b 55 f0 	movw   $0x8,0xf0551bc2
f010c3b3:	08 00 
f010c3b5:	a0 c4 1b 55 f0       	mov    0xf0551bc4,%al
f010c3ba:	83 e0 e0             	and    $0xffffffe0,%eax
f010c3bd:	a2 c4 1b 55 f0       	mov    %al,0xf0551bc4
f010c3c2:	a0 c4 1b 55 f0       	mov    0xf0551bc4,%al
f010c3c7:	83 e0 1f             	and    $0x1f,%eax
f010c3ca:	a2 c4 1b 55 f0       	mov    %al,0xf0551bc4
f010c3cf:	a0 c5 1b 55 f0       	mov    0xf0551bc5,%al
f010c3d4:	83 e0 f0             	and    $0xfffffff0,%eax
f010c3d7:	83 c8 0e             	or     $0xe,%eax
f010c3da:	a2 c5 1b 55 f0       	mov    %al,0xf0551bc5
f010c3df:	a0 c5 1b 55 f0       	mov    0xf0551bc5,%al
f010c3e4:	83 e0 ef             	and    $0xffffffef,%eax
f010c3e7:	a2 c5 1b 55 f0       	mov    %al,0xf0551bc5
f010c3ec:	a0 c5 1b 55 f0       	mov    0xf0551bc5,%al
f010c3f1:	83 c8 60             	or     $0x60,%eax
f010c3f4:	a2 c5 1b 55 f0       	mov    %al,0xf0551bc5
f010c3f9:	a0 c5 1b 55 f0       	mov    0xf0551bc5,%al
f010c3fe:	83 c8 80             	or     $0xffffff80,%eax
f010c401:	a2 c5 1b 55 f0       	mov    %al,0xf0551bc5
f010c406:	b8 a2 d6 10 f0       	mov    $0xf010d6a2,%eax
f010c40b:	c1 e8 10             	shr    $0x10,%eax
f010c40e:	66 a3 c6 1b 55 f0    	mov    %ax,0xf0551bc6

	//S/W Exceptions
	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010c414:	b8 ac d6 10 f0       	mov    $0xf010d6ac,%eax
f010c419:	66 a3 40 1a 55 f0    	mov    %ax,0xf0551a40
f010c41f:	66 c7 05 42 1a 55 f0 	movw   $0x8,0xf0551a42
f010c426:	08 00 
f010c428:	a0 44 1a 55 f0       	mov    0xf0551a44,%al
f010c42d:	83 e0 e0             	and    $0xffffffe0,%eax
f010c430:	a2 44 1a 55 f0       	mov    %al,0xf0551a44
f010c435:	a0 44 1a 55 f0       	mov    0xf0551a44,%al
f010c43a:	83 e0 1f             	and    $0x1f,%eax
f010c43d:	a2 44 1a 55 f0       	mov    %al,0xf0551a44
f010c442:	a0 45 1a 55 f0       	mov    0xf0551a45,%al
f010c447:	83 e0 f0             	and    $0xfffffff0,%eax
f010c44a:	83 c8 0e             	or     $0xe,%eax
f010c44d:	a2 45 1a 55 f0       	mov    %al,0xf0551a45
f010c452:	a0 45 1a 55 f0       	mov    0xf0551a45,%al
f010c457:	83 e0 ef             	and    $0xffffffef,%eax
f010c45a:	a2 45 1a 55 f0       	mov    %al,0xf0551a45
f010c45f:	a0 45 1a 55 f0       	mov    0xf0551a45,%al
f010c464:	83 c8 60             	or     $0x60,%eax
f010c467:	a2 45 1a 55 f0       	mov    %al,0xf0551a45
f010c46c:	a0 45 1a 55 f0       	mov    0xf0551a45,%al
f010c471:	83 c8 80             	or     $0xffffff80,%eax
f010c474:	a2 45 1a 55 f0       	mov    %al,0xf0551a45
f010c479:	b8 ac d6 10 f0       	mov    $0xf010d6ac,%eax
f010c47e:	c1 e8 10             	shr    $0x10,%eax
f010c481:	66 a3 46 1a 55 f0    	mov    %ax,0xf0551a46
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010c487:	b8 b6 d6 10 f0       	mov    $0xf010d6b6,%eax
f010c48c:	66 a3 48 1a 55 f0    	mov    %ax,0xf0551a48
f010c492:	66 c7 05 4a 1a 55 f0 	movw   $0x8,0xf0551a4a
f010c499:	08 00 
f010c49b:	a0 4c 1a 55 f0       	mov    0xf0551a4c,%al
f010c4a0:	83 e0 e0             	and    $0xffffffe0,%eax
f010c4a3:	a2 4c 1a 55 f0       	mov    %al,0xf0551a4c
f010c4a8:	a0 4c 1a 55 f0       	mov    0xf0551a4c,%al
f010c4ad:	83 e0 1f             	and    $0x1f,%eax
f010c4b0:	a2 4c 1a 55 f0       	mov    %al,0xf0551a4c
f010c4b5:	a0 4d 1a 55 f0       	mov    0xf0551a4d,%al
f010c4ba:	83 c8 0f             	or     $0xf,%eax
f010c4bd:	a2 4d 1a 55 f0       	mov    %al,0xf0551a4d
f010c4c2:	a0 4d 1a 55 f0       	mov    0xf0551a4d,%al
f010c4c7:	83 e0 ef             	and    $0xffffffef,%eax
f010c4ca:	a2 4d 1a 55 f0       	mov    %al,0xf0551a4d
f010c4cf:	a0 4d 1a 55 f0       	mov    0xf0551a4d,%al
f010c4d4:	83 c8 60             	or     $0x60,%eax
f010c4d7:	a2 4d 1a 55 f0       	mov    %al,0xf0551a4d
f010c4dc:	a0 4d 1a 55 f0       	mov    0xf0551a4d,%al
f010c4e1:	83 c8 80             	or     $0xffffff80,%eax
f010c4e4:	a2 4d 1a 55 f0       	mov    %al,0xf0551a4d
f010c4e9:	b8 b6 d6 10 f0       	mov    $0xf010d6b6,%eax
f010c4ee:	c1 e8 10             	shr    $0x10,%eax
f010c4f1:	66 a3 4e 1a 55 f0    	mov    %ax,0xf0551a4e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010c4f7:	b8 c0 d6 10 f0       	mov    $0xf010d6c0,%eax
f010c4fc:	66 a3 50 1a 55 f0    	mov    %ax,0xf0551a50
f010c502:	66 c7 05 52 1a 55 f0 	movw   $0x8,0xf0551a52
f010c509:	08 00 
f010c50b:	a0 54 1a 55 f0       	mov    0xf0551a54,%al
f010c510:	83 e0 e0             	and    $0xffffffe0,%eax
f010c513:	a2 54 1a 55 f0       	mov    %al,0xf0551a54
f010c518:	a0 54 1a 55 f0       	mov    0xf0551a54,%al
f010c51d:	83 e0 1f             	and    $0x1f,%eax
f010c520:	a2 54 1a 55 f0       	mov    %al,0xf0551a54
f010c525:	a0 55 1a 55 f0       	mov    0xf0551a55,%al
f010c52a:	83 e0 f0             	and    $0xfffffff0,%eax
f010c52d:	83 c8 0e             	or     $0xe,%eax
f010c530:	a2 55 1a 55 f0       	mov    %al,0xf0551a55
f010c535:	a0 55 1a 55 f0       	mov    0xf0551a55,%al
f010c53a:	83 e0 ef             	and    $0xffffffef,%eax
f010c53d:	a2 55 1a 55 f0       	mov    %al,0xf0551a55
f010c542:	a0 55 1a 55 f0       	mov    0xf0551a55,%al
f010c547:	83 c8 60             	or     $0x60,%eax
f010c54a:	a2 55 1a 55 f0       	mov    %al,0xf0551a55
f010c54f:	a0 55 1a 55 f0       	mov    0xf0551a55,%al
f010c554:	83 c8 80             	or     $0xffffff80,%eax
f010c557:	a2 55 1a 55 f0       	mov    %al,0xf0551a55
f010c55c:	b8 c0 d6 10 f0       	mov    $0xf010d6c0,%eax
f010c561:	c1 e8 10             	shr    $0x10,%eax
f010c564:	66 a3 56 1a 55 f0    	mov    %ax,0xf0551a56
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010c56a:	b8 ca d6 10 f0       	mov    $0xf010d6ca,%eax
f010c56f:	66 a3 58 1a 55 f0    	mov    %ax,0xf0551a58
f010c575:	66 c7 05 5a 1a 55 f0 	movw   $0x8,0xf0551a5a
f010c57c:	08 00 
f010c57e:	a0 5c 1a 55 f0       	mov    0xf0551a5c,%al
f010c583:	83 e0 e0             	and    $0xffffffe0,%eax
f010c586:	a2 5c 1a 55 f0       	mov    %al,0xf0551a5c
f010c58b:	a0 5c 1a 55 f0       	mov    0xf0551a5c,%al
f010c590:	83 e0 1f             	and    $0x1f,%eax
f010c593:	a2 5c 1a 55 f0       	mov    %al,0xf0551a5c
f010c598:	a0 5d 1a 55 f0       	mov    0xf0551a5d,%al
f010c59d:	83 c8 0f             	or     $0xf,%eax
f010c5a0:	a2 5d 1a 55 f0       	mov    %al,0xf0551a5d
f010c5a5:	a0 5d 1a 55 f0       	mov    0xf0551a5d,%al
f010c5aa:	83 e0 ef             	and    $0xffffffef,%eax
f010c5ad:	a2 5d 1a 55 f0       	mov    %al,0xf0551a5d
f010c5b2:	a0 5d 1a 55 f0       	mov    0xf0551a5d,%al
f010c5b7:	83 c8 60             	or     $0x60,%eax
f010c5ba:	a2 5d 1a 55 f0       	mov    %al,0xf0551a5d
f010c5bf:	a0 5d 1a 55 f0       	mov    0xf0551a5d,%al
f010c5c4:	83 c8 80             	or     $0xffffff80,%eax
f010c5c7:	a2 5d 1a 55 f0       	mov    %al,0xf0551a5d
f010c5cc:	b8 ca d6 10 f0       	mov    $0xf010d6ca,%eax
f010c5d1:	c1 e8 10             	shr    $0x10,%eax
f010c5d4:	66 a3 5e 1a 55 f0    	mov    %ax,0xf0551a5e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010c5da:	b8 d4 d6 10 f0       	mov    $0xf010d6d4,%eax
f010c5df:	66 a3 60 1a 55 f0    	mov    %ax,0xf0551a60
f010c5e5:	66 c7 05 62 1a 55 f0 	movw   $0x8,0xf0551a62
f010c5ec:	08 00 
f010c5ee:	a0 64 1a 55 f0       	mov    0xf0551a64,%al
f010c5f3:	83 e0 e0             	and    $0xffffffe0,%eax
f010c5f6:	a2 64 1a 55 f0       	mov    %al,0xf0551a64
f010c5fb:	a0 64 1a 55 f0       	mov    0xf0551a64,%al
f010c600:	83 e0 1f             	and    $0x1f,%eax
f010c603:	a2 64 1a 55 f0       	mov    %al,0xf0551a64
f010c608:	a0 65 1a 55 f0       	mov    0xf0551a65,%al
f010c60d:	83 c8 0f             	or     $0xf,%eax
f010c610:	a2 65 1a 55 f0       	mov    %al,0xf0551a65
f010c615:	a0 65 1a 55 f0       	mov    0xf0551a65,%al
f010c61a:	83 e0 ef             	and    $0xffffffef,%eax
f010c61d:	a2 65 1a 55 f0       	mov    %al,0xf0551a65
f010c622:	a0 65 1a 55 f0       	mov    0xf0551a65,%al
f010c627:	83 c8 60             	or     $0x60,%eax
f010c62a:	a2 65 1a 55 f0       	mov    %al,0xf0551a65
f010c62f:	a0 65 1a 55 f0       	mov    0xf0551a65,%al
f010c634:	83 c8 80             	or     $0xffffff80,%eax
f010c637:	a2 65 1a 55 f0       	mov    %al,0xf0551a65
f010c63c:	b8 d4 d6 10 f0       	mov    $0xf010d6d4,%eax
f010c641:	c1 e8 10             	shr    $0x10,%eax
f010c644:	66 a3 66 1a 55 f0    	mov    %ax,0xf0551a66
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010c64a:	b8 de d6 10 f0       	mov    $0xf010d6de,%eax
f010c64f:	66 a3 68 1a 55 f0    	mov    %ax,0xf0551a68
f010c655:	66 c7 05 6a 1a 55 f0 	movw   $0x8,0xf0551a6a
f010c65c:	08 00 
f010c65e:	a0 6c 1a 55 f0       	mov    0xf0551a6c,%al
f010c663:	83 e0 e0             	and    $0xffffffe0,%eax
f010c666:	a2 6c 1a 55 f0       	mov    %al,0xf0551a6c
f010c66b:	a0 6c 1a 55 f0       	mov    0xf0551a6c,%al
f010c670:	83 e0 1f             	and    $0x1f,%eax
f010c673:	a2 6c 1a 55 f0       	mov    %al,0xf0551a6c
f010c678:	a0 6d 1a 55 f0       	mov    0xf0551a6d,%al
f010c67d:	83 e0 f0             	and    $0xfffffff0,%eax
f010c680:	83 c8 0e             	or     $0xe,%eax
f010c683:	a2 6d 1a 55 f0       	mov    %al,0xf0551a6d
f010c688:	a0 6d 1a 55 f0       	mov    0xf0551a6d,%al
f010c68d:	83 e0 ef             	and    $0xffffffef,%eax
f010c690:	a2 6d 1a 55 f0       	mov    %al,0xf0551a6d
f010c695:	a0 6d 1a 55 f0       	mov    0xf0551a6d,%al
f010c69a:	83 c8 60             	or     $0x60,%eax
f010c69d:	a2 6d 1a 55 f0       	mov    %al,0xf0551a6d
f010c6a2:	a0 6d 1a 55 f0       	mov    0xf0551a6d,%al
f010c6a7:	83 c8 80             	or     $0xffffff80,%eax
f010c6aa:	a2 6d 1a 55 f0       	mov    %al,0xf0551a6d
f010c6af:	b8 de d6 10 f0       	mov    $0xf010d6de,%eax
f010c6b4:	c1 e8 10             	shr    $0x10,%eax
f010c6b7:	66 a3 6e 1a 55 f0    	mov    %ax,0xf0551a6e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010c6bd:	b8 e8 d6 10 f0       	mov    $0xf010d6e8,%eax
f010c6c2:	66 a3 70 1a 55 f0    	mov    %ax,0xf0551a70
f010c6c8:	66 c7 05 72 1a 55 f0 	movw   $0x8,0xf0551a72
f010c6cf:	08 00 
f010c6d1:	a0 74 1a 55 f0       	mov    0xf0551a74,%al
f010c6d6:	83 e0 e0             	and    $0xffffffe0,%eax
f010c6d9:	a2 74 1a 55 f0       	mov    %al,0xf0551a74
f010c6de:	a0 74 1a 55 f0       	mov    0xf0551a74,%al
f010c6e3:	83 e0 1f             	and    $0x1f,%eax
f010c6e6:	a2 74 1a 55 f0       	mov    %al,0xf0551a74
f010c6eb:	a0 75 1a 55 f0       	mov    0xf0551a75,%al
f010c6f0:	83 e0 f0             	and    $0xfffffff0,%eax
f010c6f3:	83 c8 0e             	or     $0xe,%eax
f010c6f6:	a2 75 1a 55 f0       	mov    %al,0xf0551a75
f010c6fb:	a0 75 1a 55 f0       	mov    0xf0551a75,%al
f010c700:	83 e0 ef             	and    $0xffffffef,%eax
f010c703:	a2 75 1a 55 f0       	mov    %al,0xf0551a75
f010c708:	a0 75 1a 55 f0       	mov    0xf0551a75,%al
f010c70d:	83 c8 60             	or     $0x60,%eax
f010c710:	a2 75 1a 55 f0       	mov    %al,0xf0551a75
f010c715:	a0 75 1a 55 f0       	mov    0xf0551a75,%al
f010c71a:	83 c8 80             	or     $0xffffff80,%eax
f010c71d:	a2 75 1a 55 f0       	mov    %al,0xf0551a75
f010c722:	b8 e8 d6 10 f0       	mov    $0xf010d6e8,%eax
f010c727:	c1 e8 10             	shr    $0x10,%eax
f010c72a:	66 a3 76 1a 55 f0    	mov    %ax,0xf0551a76
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010c730:	b8 f2 d6 10 f0       	mov    $0xf010d6f2,%eax
f010c735:	66 a3 78 1a 55 f0    	mov    %ax,0xf0551a78
f010c73b:	66 c7 05 7a 1a 55 f0 	movw   $0x8,0xf0551a7a
f010c742:	08 00 
f010c744:	a0 7c 1a 55 f0       	mov    0xf0551a7c,%al
f010c749:	83 e0 e0             	and    $0xffffffe0,%eax
f010c74c:	a2 7c 1a 55 f0       	mov    %al,0xf0551a7c
f010c751:	a0 7c 1a 55 f0       	mov    0xf0551a7c,%al
f010c756:	83 e0 1f             	and    $0x1f,%eax
f010c759:	a2 7c 1a 55 f0       	mov    %al,0xf0551a7c
f010c75e:	a0 7d 1a 55 f0       	mov    0xf0551a7d,%al
f010c763:	83 e0 f0             	and    $0xfffffff0,%eax
f010c766:	83 c8 0e             	or     $0xe,%eax
f010c769:	a2 7d 1a 55 f0       	mov    %al,0xf0551a7d
f010c76e:	a0 7d 1a 55 f0       	mov    0xf0551a7d,%al
f010c773:	83 e0 ef             	and    $0xffffffef,%eax
f010c776:	a2 7d 1a 55 f0       	mov    %al,0xf0551a7d
f010c77b:	a0 7d 1a 55 f0       	mov    0xf0551a7d,%al
f010c780:	83 c8 60             	or     $0x60,%eax
f010c783:	a2 7d 1a 55 f0       	mov    %al,0xf0551a7d
f010c788:	a0 7d 1a 55 f0       	mov    0xf0551a7d,%al
f010c78d:	83 c8 80             	or     $0xffffff80,%eax
f010c790:	a2 7d 1a 55 f0       	mov    %al,0xf0551a7d
f010c795:	b8 f2 d6 10 f0       	mov    $0xf010d6f2,%eax
f010c79a:	c1 e8 10             	shr    $0x10,%eax
f010c79d:	66 a3 7e 1a 55 f0    	mov    %ax,0xf0551a7e
	//SETGATE(idt[T_DBLFLT ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010c7a3:	b8 f8 d6 10 f0       	mov    $0xf010d6f8,%eax
f010c7a8:	66 a3 90 1a 55 f0    	mov    %ax,0xf0551a90
f010c7ae:	66 c7 05 92 1a 55 f0 	movw   $0x8,0xf0551a92
f010c7b5:	08 00 
f010c7b7:	a0 94 1a 55 f0       	mov    0xf0551a94,%al
f010c7bc:	83 e0 e0             	and    $0xffffffe0,%eax
f010c7bf:	a2 94 1a 55 f0       	mov    %al,0xf0551a94
f010c7c4:	a0 94 1a 55 f0       	mov    0xf0551a94,%al
f010c7c9:	83 e0 1f             	and    $0x1f,%eax
f010c7cc:	a2 94 1a 55 f0       	mov    %al,0xf0551a94
f010c7d1:	a0 95 1a 55 f0       	mov    0xf0551a95,%al
f010c7d6:	83 e0 f0             	and    $0xfffffff0,%eax
f010c7d9:	83 c8 0e             	or     $0xe,%eax
f010c7dc:	a2 95 1a 55 f0       	mov    %al,0xf0551a95
f010c7e1:	a0 95 1a 55 f0       	mov    0xf0551a95,%al
f010c7e6:	83 e0 ef             	and    $0xffffffef,%eax
f010c7e9:	a2 95 1a 55 f0       	mov    %al,0xf0551a95
f010c7ee:	a0 95 1a 55 f0       	mov    0xf0551a95,%al
f010c7f3:	83 c8 60             	or     $0x60,%eax
f010c7f6:	a2 95 1a 55 f0       	mov    %al,0xf0551a95
f010c7fb:	a0 95 1a 55 f0       	mov    0xf0551a95,%al
f010c800:	83 c8 80             	or     $0xffffff80,%eax
f010c803:	a2 95 1a 55 f0       	mov    %al,0xf0551a95
f010c808:	b8 f8 d6 10 f0       	mov    $0xf010d6f8,%eax
f010c80d:	c1 e8 10             	shr    $0x10,%eax
f010c810:	66 a3 96 1a 55 f0    	mov    %ax,0xf0551a96
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010c816:	b8 fc d6 10 f0       	mov    $0xf010d6fc,%eax
f010c81b:	66 a3 98 1a 55 f0    	mov    %ax,0xf0551a98
f010c821:	66 c7 05 9a 1a 55 f0 	movw   $0x8,0xf0551a9a
f010c828:	08 00 
f010c82a:	a0 9c 1a 55 f0       	mov    0xf0551a9c,%al
f010c82f:	83 e0 e0             	and    $0xffffffe0,%eax
f010c832:	a2 9c 1a 55 f0       	mov    %al,0xf0551a9c
f010c837:	a0 9c 1a 55 f0       	mov    0xf0551a9c,%al
f010c83c:	83 e0 1f             	and    $0x1f,%eax
f010c83f:	a2 9c 1a 55 f0       	mov    %al,0xf0551a9c
f010c844:	a0 9d 1a 55 f0       	mov    0xf0551a9d,%al
f010c849:	83 e0 f0             	and    $0xfffffff0,%eax
f010c84c:	83 c8 0e             	or     $0xe,%eax
f010c84f:	a2 9d 1a 55 f0       	mov    %al,0xf0551a9d
f010c854:	a0 9d 1a 55 f0       	mov    0xf0551a9d,%al
f010c859:	83 e0 ef             	and    $0xffffffef,%eax
f010c85c:	a2 9d 1a 55 f0       	mov    %al,0xf0551a9d
f010c861:	a0 9d 1a 55 f0       	mov    0xf0551a9d,%al
f010c866:	83 c8 60             	or     $0x60,%eax
f010c869:	a2 9d 1a 55 f0       	mov    %al,0xf0551a9d
f010c86e:	a0 9d 1a 55 f0       	mov    0xf0551a9d,%al
f010c873:	83 c8 80             	or     $0xffffff80,%eax
f010c876:	a2 9d 1a 55 f0       	mov    %al,0xf0551a9d
f010c87b:	b8 fc d6 10 f0       	mov    $0xf010d6fc,%eax
f010c880:	c1 e8 10             	shr    $0x10,%eax
f010c883:	66 a3 9e 1a 55 f0    	mov    %ax,0xf0551a9e
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010c889:	b8 00 d7 10 f0       	mov    $0xf010d700,%eax
f010c88e:	66 a3 a0 1a 55 f0    	mov    %ax,0xf0551aa0
f010c894:	66 c7 05 a2 1a 55 f0 	movw   $0x8,0xf0551aa2
f010c89b:	08 00 
f010c89d:	a0 a4 1a 55 f0       	mov    0xf0551aa4,%al
f010c8a2:	83 e0 e0             	and    $0xffffffe0,%eax
f010c8a5:	a2 a4 1a 55 f0       	mov    %al,0xf0551aa4
f010c8aa:	a0 a4 1a 55 f0       	mov    0xf0551aa4,%al
f010c8af:	83 e0 1f             	and    $0x1f,%eax
f010c8b2:	a2 a4 1a 55 f0       	mov    %al,0xf0551aa4
f010c8b7:	a0 a5 1a 55 f0       	mov    0xf0551aa5,%al
f010c8bc:	83 e0 f0             	and    $0xfffffff0,%eax
f010c8bf:	83 c8 0e             	or     $0xe,%eax
f010c8c2:	a2 a5 1a 55 f0       	mov    %al,0xf0551aa5
f010c8c7:	a0 a5 1a 55 f0       	mov    0xf0551aa5,%al
f010c8cc:	83 e0 ef             	and    $0xffffffef,%eax
f010c8cf:	a2 a5 1a 55 f0       	mov    %al,0xf0551aa5
f010c8d4:	a0 a5 1a 55 f0       	mov    0xf0551aa5,%al
f010c8d9:	83 c8 60             	or     $0x60,%eax
f010c8dc:	a2 a5 1a 55 f0       	mov    %al,0xf0551aa5
f010c8e1:	a0 a5 1a 55 f0       	mov    0xf0551aa5,%al
f010c8e6:	83 c8 80             	or     $0xffffff80,%eax
f010c8e9:	a2 a5 1a 55 f0       	mov    %al,0xf0551aa5
f010c8ee:	b8 00 d7 10 f0       	mov    $0xf010d700,%eax
f010c8f3:	c1 e8 10             	shr    $0x10,%eax
f010c8f6:	66 a3 a6 1a 55 f0    	mov    %ax,0xf0551aa6
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010c8fc:	b8 04 d7 10 f0       	mov    $0xf010d704,%eax
f010c901:	66 a3 a8 1a 55 f0    	mov    %ax,0xf0551aa8
f010c907:	66 c7 05 aa 1a 55 f0 	movw   $0x8,0xf0551aaa
f010c90e:	08 00 
f010c910:	a0 ac 1a 55 f0       	mov    0xf0551aac,%al
f010c915:	83 e0 e0             	and    $0xffffffe0,%eax
f010c918:	a2 ac 1a 55 f0       	mov    %al,0xf0551aac
f010c91d:	a0 ac 1a 55 f0       	mov    0xf0551aac,%al
f010c922:	83 e0 1f             	and    $0x1f,%eax
f010c925:	a2 ac 1a 55 f0       	mov    %al,0xf0551aac
f010c92a:	a0 ad 1a 55 f0       	mov    0xf0551aad,%al
f010c92f:	83 e0 f0             	and    $0xfffffff0,%eax
f010c932:	83 c8 0e             	or     $0xe,%eax
f010c935:	a2 ad 1a 55 f0       	mov    %al,0xf0551aad
f010c93a:	a0 ad 1a 55 f0       	mov    0xf0551aad,%al
f010c93f:	83 e0 ef             	and    $0xffffffef,%eax
f010c942:	a2 ad 1a 55 f0       	mov    %al,0xf0551aad
f010c947:	a0 ad 1a 55 f0       	mov    0xf0551aad,%al
f010c94c:	83 c8 60             	or     $0x60,%eax
f010c94f:	a2 ad 1a 55 f0       	mov    %al,0xf0551aad
f010c954:	a0 ad 1a 55 f0       	mov    0xf0551aad,%al
f010c959:	83 c8 80             	or     $0xffffff80,%eax
f010c95c:	a2 ad 1a 55 f0       	mov    %al,0xf0551aad
f010c961:	b8 04 d7 10 f0       	mov    $0xf010d704,%eax
f010c966:	c1 e8 10             	shr    $0x10,%eax
f010c969:	66 a3 ae 1a 55 f0    	mov    %ax,0xf0551aae
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010c96f:	b8 08 d7 10 f0       	mov    $0xf010d708,%eax
f010c974:	66 a3 c0 1a 55 f0    	mov    %ax,0xf0551ac0
f010c97a:	66 c7 05 c2 1a 55 f0 	movw   $0x8,0xf0551ac2
f010c981:	08 00 
f010c983:	a0 c4 1a 55 f0       	mov    0xf0551ac4,%al
f010c988:	83 e0 e0             	and    $0xffffffe0,%eax
f010c98b:	a2 c4 1a 55 f0       	mov    %al,0xf0551ac4
f010c990:	a0 c4 1a 55 f0       	mov    0xf0551ac4,%al
f010c995:	83 e0 1f             	and    $0x1f,%eax
f010c998:	a2 c4 1a 55 f0       	mov    %al,0xf0551ac4
f010c99d:	a0 c5 1a 55 f0       	mov    0xf0551ac5,%al
f010c9a2:	83 e0 f0             	and    $0xfffffff0,%eax
f010c9a5:	83 c8 0e             	or     $0xe,%eax
f010c9a8:	a2 c5 1a 55 f0       	mov    %al,0xf0551ac5
f010c9ad:	a0 c5 1a 55 f0       	mov    0xf0551ac5,%al
f010c9b2:	83 e0 ef             	and    $0xffffffef,%eax
f010c9b5:	a2 c5 1a 55 f0       	mov    %al,0xf0551ac5
f010c9ba:	a0 c5 1a 55 f0       	mov    0xf0551ac5,%al
f010c9bf:	83 c8 60             	or     $0x60,%eax
f010c9c2:	a2 c5 1a 55 f0       	mov    %al,0xf0551ac5
f010c9c7:	a0 c5 1a 55 f0       	mov    0xf0551ac5,%al
f010c9cc:	83 c8 80             	or     $0xffffff80,%eax
f010c9cf:	a2 c5 1a 55 f0       	mov    %al,0xf0551ac5
f010c9d4:	b8 08 d7 10 f0       	mov    $0xf010d708,%eax
f010c9d9:	c1 e8 10             	shr    $0x10,%eax
f010c9dc:	66 a3 c6 1a 55 f0    	mov    %ax,0xf0551ac6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010c9e2:	b8 0e d7 10 f0       	mov    $0xf010d70e,%eax
f010c9e7:	66 a3 c8 1a 55 f0    	mov    %ax,0xf0551ac8
f010c9ed:	66 c7 05 ca 1a 55 f0 	movw   $0x8,0xf0551aca
f010c9f4:	08 00 
f010c9f6:	a0 cc 1a 55 f0       	mov    0xf0551acc,%al
f010c9fb:	83 e0 e0             	and    $0xffffffe0,%eax
f010c9fe:	a2 cc 1a 55 f0       	mov    %al,0xf0551acc
f010ca03:	a0 cc 1a 55 f0       	mov    0xf0551acc,%al
f010ca08:	83 e0 1f             	and    $0x1f,%eax
f010ca0b:	a2 cc 1a 55 f0       	mov    %al,0xf0551acc
f010ca10:	a0 cd 1a 55 f0       	mov    0xf0551acd,%al
f010ca15:	83 e0 f0             	and    $0xfffffff0,%eax
f010ca18:	83 c8 0e             	or     $0xe,%eax
f010ca1b:	a2 cd 1a 55 f0       	mov    %al,0xf0551acd
f010ca20:	a0 cd 1a 55 f0       	mov    0xf0551acd,%al
f010ca25:	83 e0 ef             	and    $0xffffffef,%eax
f010ca28:	a2 cd 1a 55 f0       	mov    %al,0xf0551acd
f010ca2d:	a0 cd 1a 55 f0       	mov    0xf0551acd,%al
f010ca32:	83 c8 60             	or     $0x60,%eax
f010ca35:	a2 cd 1a 55 f0       	mov    %al,0xf0551acd
f010ca3a:	a0 cd 1a 55 f0       	mov    0xf0551acd,%al
f010ca3f:	83 c8 80             	or     $0xffffff80,%eax
f010ca42:	a2 cd 1a 55 f0       	mov    %al,0xf0551acd
f010ca47:	b8 0e d7 10 f0       	mov    $0xf010d70e,%eax
f010ca4c:	c1 e8 10             	shr    $0x10,%eax
f010ca4f:	66 a3 ce 1a 55 f0    	mov    %ax,0xf0551ace
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010ca55:	b8 12 d7 10 f0       	mov    $0xf010d712,%eax
f010ca5a:	66 a3 d0 1a 55 f0    	mov    %ax,0xf0551ad0
f010ca60:	66 c7 05 d2 1a 55 f0 	movw   $0x8,0xf0551ad2
f010ca67:	08 00 
f010ca69:	a0 d4 1a 55 f0       	mov    0xf0551ad4,%al
f010ca6e:	83 e0 e0             	and    $0xffffffe0,%eax
f010ca71:	a2 d4 1a 55 f0       	mov    %al,0xf0551ad4
f010ca76:	a0 d4 1a 55 f0       	mov    0xf0551ad4,%al
f010ca7b:	83 e0 1f             	and    $0x1f,%eax
f010ca7e:	a2 d4 1a 55 f0       	mov    %al,0xf0551ad4
f010ca83:	a0 d5 1a 55 f0       	mov    0xf0551ad5,%al
f010ca88:	83 e0 f0             	and    $0xfffffff0,%eax
f010ca8b:	83 c8 0e             	or     $0xe,%eax
f010ca8e:	a2 d5 1a 55 f0       	mov    %al,0xf0551ad5
f010ca93:	a0 d5 1a 55 f0       	mov    0xf0551ad5,%al
f010ca98:	83 e0 ef             	and    $0xffffffef,%eax
f010ca9b:	a2 d5 1a 55 f0       	mov    %al,0xf0551ad5
f010caa0:	a0 d5 1a 55 f0       	mov    0xf0551ad5,%al
f010caa5:	83 c8 60             	or     $0x60,%eax
f010caa8:	a2 d5 1a 55 f0       	mov    %al,0xf0551ad5
f010caad:	a0 d5 1a 55 f0       	mov    0xf0551ad5,%al
f010cab2:	83 c8 80             	or     $0xffffff80,%eax
f010cab5:	a2 d5 1a 55 f0       	mov    %al,0xf0551ad5
f010caba:	b8 12 d7 10 f0       	mov    $0xf010d712,%eax
f010cabf:	c1 e8 10             	shr    $0x10,%eax
f010cac2:	66 a3 d6 1a 55 f0    	mov    %ax,0xf0551ad6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010cac8:	b8 18 d7 10 f0       	mov    $0xf010d718,%eax
f010cacd:	66 a3 d8 1a 55 f0    	mov    %ax,0xf0551ad8
f010cad3:	66 c7 05 da 1a 55 f0 	movw   $0x8,0xf0551ada
f010cada:	08 00 
f010cadc:	a0 dc 1a 55 f0       	mov    0xf0551adc,%al
f010cae1:	83 e0 e0             	and    $0xffffffe0,%eax
f010cae4:	a2 dc 1a 55 f0       	mov    %al,0xf0551adc
f010cae9:	a0 dc 1a 55 f0       	mov    0xf0551adc,%al
f010caee:	83 e0 1f             	and    $0x1f,%eax
f010caf1:	a2 dc 1a 55 f0       	mov    %al,0xf0551adc
f010caf6:	a0 dd 1a 55 f0       	mov    0xf0551add,%al
f010cafb:	83 e0 f0             	and    $0xfffffff0,%eax
f010cafe:	83 c8 0e             	or     $0xe,%eax
f010cb01:	a2 dd 1a 55 f0       	mov    %al,0xf0551add
f010cb06:	a0 dd 1a 55 f0       	mov    0xf0551add,%al
f010cb0b:	83 e0 ef             	and    $0xffffffef,%eax
f010cb0e:	a2 dd 1a 55 f0       	mov    %al,0xf0551add
f010cb13:	a0 dd 1a 55 f0       	mov    0xf0551add,%al
f010cb18:	83 c8 60             	or     $0x60,%eax
f010cb1b:	a2 dd 1a 55 f0       	mov    %al,0xf0551add
f010cb20:	a0 dd 1a 55 f0       	mov    0xf0551add,%al
f010cb25:	83 c8 80             	or     $0xffffff80,%eax
f010cb28:	a2 dd 1a 55 f0       	mov    %al,0xf0551add
f010cb2d:	b8 18 d7 10 f0       	mov    $0xf010d718,%eax
f010cb32:	c1 e8 10             	shr    $0x10,%eax
f010cb35:	66 a3 de 1a 55 f0    	mov    %ax,0xf0551ade

	//IRQs
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010cb3b:	b8 1e d7 10 f0       	mov    $0xf010d71e,%eax
f010cb40:	66 a3 50 1b 55 f0    	mov    %ax,0xf0551b50
f010cb46:	66 c7 05 52 1b 55 f0 	movw   $0x8,0xf0551b52
f010cb4d:	08 00 
f010cb4f:	a0 54 1b 55 f0       	mov    0xf0551b54,%al
f010cb54:	83 e0 e0             	and    $0xffffffe0,%eax
f010cb57:	a2 54 1b 55 f0       	mov    %al,0xf0551b54
f010cb5c:	a0 54 1b 55 f0       	mov    0xf0551b54,%al
f010cb61:	83 e0 1f             	and    $0x1f,%eax
f010cb64:	a2 54 1b 55 f0       	mov    %al,0xf0551b54
f010cb69:	a0 55 1b 55 f0       	mov    0xf0551b55,%al
f010cb6e:	83 e0 f0             	and    $0xfffffff0,%eax
f010cb71:	83 c8 0e             	or     $0xe,%eax
f010cb74:	a2 55 1b 55 f0       	mov    %al,0xf0551b55
f010cb79:	a0 55 1b 55 f0       	mov    0xf0551b55,%al
f010cb7e:	83 e0 ef             	and    $0xffffffef,%eax
f010cb81:	a2 55 1b 55 f0       	mov    %al,0xf0551b55
f010cb86:	a0 55 1b 55 f0       	mov    0xf0551b55,%al
f010cb8b:	83 c8 60             	or     $0x60,%eax
f010cb8e:	a2 55 1b 55 f0       	mov    %al,0xf0551b55
f010cb93:	a0 55 1b 55 f0       	mov    0xf0551b55,%al
f010cb98:	83 c8 80             	or     $0xffffff80,%eax
f010cb9b:	a2 55 1b 55 f0       	mov    %al,0xf0551b55
f010cba0:	b8 1e d7 10 f0       	mov    $0xf010d71e,%eax
f010cba5:	c1 e8 10             	shr    $0x10,%eax
f010cba8:	66 a3 56 1b 55 f0    	mov    %ax,0xf0551b56
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010cbae:	b8 24 d7 10 f0       	mov    $0xf010d724,%eax
f010cbb3:	66 a3 58 1b 55 f0    	mov    %ax,0xf0551b58
f010cbb9:	66 c7 05 5a 1b 55 f0 	movw   $0x8,0xf0551b5a
f010cbc0:	08 00 
f010cbc2:	a0 5c 1b 55 f0       	mov    0xf0551b5c,%al
f010cbc7:	83 e0 e0             	and    $0xffffffe0,%eax
f010cbca:	a2 5c 1b 55 f0       	mov    %al,0xf0551b5c
f010cbcf:	a0 5c 1b 55 f0       	mov    0xf0551b5c,%al
f010cbd4:	83 e0 1f             	and    $0x1f,%eax
f010cbd7:	a2 5c 1b 55 f0       	mov    %al,0xf0551b5c
f010cbdc:	a0 5d 1b 55 f0       	mov    0xf0551b5d,%al
f010cbe1:	83 e0 f0             	and    $0xfffffff0,%eax
f010cbe4:	83 c8 0e             	or     $0xe,%eax
f010cbe7:	a2 5d 1b 55 f0       	mov    %al,0xf0551b5d
f010cbec:	a0 5d 1b 55 f0       	mov    0xf0551b5d,%al
f010cbf1:	83 e0 ef             	and    $0xffffffef,%eax
f010cbf4:	a2 5d 1b 55 f0       	mov    %al,0xf0551b5d
f010cbf9:	a0 5d 1b 55 f0       	mov    0xf0551b5d,%al
f010cbfe:	83 c8 60             	or     $0x60,%eax
f010cc01:	a2 5d 1b 55 f0       	mov    %al,0xf0551b5d
f010cc06:	a0 5d 1b 55 f0       	mov    0xf0551b5d,%al
f010cc0b:	83 c8 80             	or     $0xffffff80,%eax
f010cc0e:	a2 5d 1b 55 f0       	mov    %al,0xf0551b5d
f010cc13:	b8 24 d7 10 f0       	mov    $0xf010d724,%eax
f010cc18:	c1 e8 10             	shr    $0x10,%eax
f010cc1b:	66 a3 5e 1b 55 f0    	mov    %ax,0xf0551b5e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010cc21:	b8 2a d7 10 f0       	mov    $0xf010d72a,%eax
f010cc26:	66 a3 60 1b 55 f0    	mov    %ax,0xf0551b60
f010cc2c:	66 c7 05 62 1b 55 f0 	movw   $0x8,0xf0551b62
f010cc33:	08 00 
f010cc35:	a0 64 1b 55 f0       	mov    0xf0551b64,%al
f010cc3a:	83 e0 e0             	and    $0xffffffe0,%eax
f010cc3d:	a2 64 1b 55 f0       	mov    %al,0xf0551b64
f010cc42:	a0 64 1b 55 f0       	mov    0xf0551b64,%al
f010cc47:	83 e0 1f             	and    $0x1f,%eax
f010cc4a:	a2 64 1b 55 f0       	mov    %al,0xf0551b64
f010cc4f:	a0 65 1b 55 f0       	mov    0xf0551b65,%al
f010cc54:	83 e0 f0             	and    $0xfffffff0,%eax
f010cc57:	83 c8 0e             	or     $0xe,%eax
f010cc5a:	a2 65 1b 55 f0       	mov    %al,0xf0551b65
f010cc5f:	a0 65 1b 55 f0       	mov    0xf0551b65,%al
f010cc64:	83 e0 ef             	and    $0xffffffef,%eax
f010cc67:	a2 65 1b 55 f0       	mov    %al,0xf0551b65
f010cc6c:	a0 65 1b 55 f0       	mov    0xf0551b65,%al
f010cc71:	83 c8 60             	or     $0x60,%eax
f010cc74:	a2 65 1b 55 f0       	mov    %al,0xf0551b65
f010cc79:	a0 65 1b 55 f0       	mov    0xf0551b65,%al
f010cc7e:	83 c8 80             	or     $0xffffff80,%eax
f010cc81:	a2 65 1b 55 f0       	mov    %al,0xf0551b65
f010cc86:	b8 2a d7 10 f0       	mov    $0xf010d72a,%eax
f010cc8b:	c1 e8 10             	shr    $0x10,%eax
f010cc8e:	66 a3 66 1b 55 f0    	mov    %ax,0xf0551b66
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010cc94:	b8 30 d7 10 f0       	mov    $0xf010d730,%eax
f010cc99:	66 a3 68 1b 55 f0    	mov    %ax,0xf0551b68
f010cc9f:	66 c7 05 6a 1b 55 f0 	movw   $0x8,0xf0551b6a
f010cca6:	08 00 
f010cca8:	a0 6c 1b 55 f0       	mov    0xf0551b6c,%al
f010ccad:	83 e0 e0             	and    $0xffffffe0,%eax
f010ccb0:	a2 6c 1b 55 f0       	mov    %al,0xf0551b6c
f010ccb5:	a0 6c 1b 55 f0       	mov    0xf0551b6c,%al
f010ccba:	83 e0 1f             	and    $0x1f,%eax
f010ccbd:	a2 6c 1b 55 f0       	mov    %al,0xf0551b6c
f010ccc2:	a0 6d 1b 55 f0       	mov    0xf0551b6d,%al
f010ccc7:	83 e0 f0             	and    $0xfffffff0,%eax
f010ccca:	83 c8 0e             	or     $0xe,%eax
f010cccd:	a2 6d 1b 55 f0       	mov    %al,0xf0551b6d
f010ccd2:	a0 6d 1b 55 f0       	mov    0xf0551b6d,%al
f010ccd7:	83 e0 ef             	and    $0xffffffef,%eax
f010ccda:	a2 6d 1b 55 f0       	mov    %al,0xf0551b6d
f010ccdf:	a0 6d 1b 55 f0       	mov    0xf0551b6d,%al
f010cce4:	83 c8 60             	or     $0x60,%eax
f010cce7:	a2 6d 1b 55 f0       	mov    %al,0xf0551b6d
f010ccec:	a0 6d 1b 55 f0       	mov    0xf0551b6d,%al
f010ccf1:	83 c8 80             	or     $0xffffff80,%eax
f010ccf4:	a2 6d 1b 55 f0       	mov    %al,0xf0551b6d
f010ccf9:	b8 30 d7 10 f0       	mov    $0xf010d730,%eax
f010ccfe:	c1 e8 10             	shr    $0x10,%eax
f010cd01:	66 a3 6e 1b 55 f0    	mov    %ax,0xf0551b6e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010cd07:	b8 36 d7 10 f0       	mov    $0xf010d736,%eax
f010cd0c:	66 a3 70 1b 55 f0    	mov    %ax,0xf0551b70
f010cd12:	66 c7 05 72 1b 55 f0 	movw   $0x8,0xf0551b72
f010cd19:	08 00 
f010cd1b:	a0 74 1b 55 f0       	mov    0xf0551b74,%al
f010cd20:	83 e0 e0             	and    $0xffffffe0,%eax
f010cd23:	a2 74 1b 55 f0       	mov    %al,0xf0551b74
f010cd28:	a0 74 1b 55 f0       	mov    0xf0551b74,%al
f010cd2d:	83 e0 1f             	and    $0x1f,%eax
f010cd30:	a2 74 1b 55 f0       	mov    %al,0xf0551b74
f010cd35:	a0 75 1b 55 f0       	mov    0xf0551b75,%al
f010cd3a:	83 e0 f0             	and    $0xfffffff0,%eax
f010cd3d:	83 c8 0e             	or     $0xe,%eax
f010cd40:	a2 75 1b 55 f0       	mov    %al,0xf0551b75
f010cd45:	a0 75 1b 55 f0       	mov    0xf0551b75,%al
f010cd4a:	83 e0 ef             	and    $0xffffffef,%eax
f010cd4d:	a2 75 1b 55 f0       	mov    %al,0xf0551b75
f010cd52:	a0 75 1b 55 f0       	mov    0xf0551b75,%al
f010cd57:	83 c8 60             	or     $0x60,%eax
f010cd5a:	a2 75 1b 55 f0       	mov    %al,0xf0551b75
f010cd5f:	a0 75 1b 55 f0       	mov    0xf0551b75,%al
f010cd64:	83 c8 80             	or     $0xffffff80,%eax
f010cd67:	a2 75 1b 55 f0       	mov    %al,0xf0551b75
f010cd6c:	b8 36 d7 10 f0       	mov    $0xf010d736,%eax
f010cd71:	c1 e8 10             	shr    $0x10,%eax
f010cd74:	66 a3 76 1b 55 f0    	mov    %ax,0xf0551b76
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010cd7a:	b8 3c d7 10 f0       	mov    $0xf010d73c,%eax
f010cd7f:	66 a3 78 1b 55 f0    	mov    %ax,0xf0551b78
f010cd85:	66 c7 05 7a 1b 55 f0 	movw   $0x8,0xf0551b7a
f010cd8c:	08 00 
f010cd8e:	a0 7c 1b 55 f0       	mov    0xf0551b7c,%al
f010cd93:	83 e0 e0             	and    $0xffffffe0,%eax
f010cd96:	a2 7c 1b 55 f0       	mov    %al,0xf0551b7c
f010cd9b:	a0 7c 1b 55 f0       	mov    0xf0551b7c,%al
f010cda0:	83 e0 1f             	and    $0x1f,%eax
f010cda3:	a2 7c 1b 55 f0       	mov    %al,0xf0551b7c
f010cda8:	a0 7d 1b 55 f0       	mov    0xf0551b7d,%al
f010cdad:	83 e0 f0             	and    $0xfffffff0,%eax
f010cdb0:	83 c8 0e             	or     $0xe,%eax
f010cdb3:	a2 7d 1b 55 f0       	mov    %al,0xf0551b7d
f010cdb8:	a0 7d 1b 55 f0       	mov    0xf0551b7d,%al
f010cdbd:	83 e0 ef             	and    $0xffffffef,%eax
f010cdc0:	a2 7d 1b 55 f0       	mov    %al,0xf0551b7d
f010cdc5:	a0 7d 1b 55 f0       	mov    0xf0551b7d,%al
f010cdca:	83 c8 60             	or     $0x60,%eax
f010cdcd:	a2 7d 1b 55 f0       	mov    %al,0xf0551b7d
f010cdd2:	a0 7d 1b 55 f0       	mov    0xf0551b7d,%al
f010cdd7:	83 c8 80             	or     $0xffffff80,%eax
f010cdda:	a2 7d 1b 55 f0       	mov    %al,0xf0551b7d
f010cddf:	b8 3c d7 10 f0       	mov    $0xf010d73c,%eax
f010cde4:	c1 e8 10             	shr    $0x10,%eax
f010cde7:	66 a3 7e 1b 55 f0    	mov    %ax,0xf0551b7e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010cded:	b8 42 d7 10 f0       	mov    $0xf010d742,%eax
f010cdf2:	66 a3 80 1b 55 f0    	mov    %ax,0xf0551b80
f010cdf8:	66 c7 05 82 1b 55 f0 	movw   $0x8,0xf0551b82
f010cdff:	08 00 
f010ce01:	a0 84 1b 55 f0       	mov    0xf0551b84,%al
f010ce06:	83 e0 e0             	and    $0xffffffe0,%eax
f010ce09:	a2 84 1b 55 f0       	mov    %al,0xf0551b84
f010ce0e:	a0 84 1b 55 f0       	mov    0xf0551b84,%al
f010ce13:	83 e0 1f             	and    $0x1f,%eax
f010ce16:	a2 84 1b 55 f0       	mov    %al,0xf0551b84
f010ce1b:	a0 85 1b 55 f0       	mov    0xf0551b85,%al
f010ce20:	83 e0 f0             	and    $0xfffffff0,%eax
f010ce23:	83 c8 0e             	or     $0xe,%eax
f010ce26:	a2 85 1b 55 f0       	mov    %al,0xf0551b85
f010ce2b:	a0 85 1b 55 f0       	mov    0xf0551b85,%al
f010ce30:	83 e0 ef             	and    $0xffffffef,%eax
f010ce33:	a2 85 1b 55 f0       	mov    %al,0xf0551b85
f010ce38:	a0 85 1b 55 f0       	mov    0xf0551b85,%al
f010ce3d:	83 c8 60             	or     $0x60,%eax
f010ce40:	a2 85 1b 55 f0       	mov    %al,0xf0551b85
f010ce45:	a0 85 1b 55 f0       	mov    0xf0551b85,%al
f010ce4a:	83 c8 80             	or     $0xffffff80,%eax
f010ce4d:	a2 85 1b 55 f0       	mov    %al,0xf0551b85
f010ce52:	b8 42 d7 10 f0       	mov    $0xf010d742,%eax
f010ce57:	c1 e8 10             	shr    $0x10,%eax
f010ce5a:	66 a3 86 1b 55 f0    	mov    %ax,0xf0551b86
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010ce60:	b8 48 d7 10 f0       	mov    $0xf010d748,%eax
f010ce65:	66 a3 88 1b 55 f0    	mov    %ax,0xf0551b88
f010ce6b:	66 c7 05 8a 1b 55 f0 	movw   $0x8,0xf0551b8a
f010ce72:	08 00 
f010ce74:	a0 8c 1b 55 f0       	mov    0xf0551b8c,%al
f010ce79:	83 e0 e0             	and    $0xffffffe0,%eax
f010ce7c:	a2 8c 1b 55 f0       	mov    %al,0xf0551b8c
f010ce81:	a0 8c 1b 55 f0       	mov    0xf0551b8c,%al
f010ce86:	83 e0 1f             	and    $0x1f,%eax
f010ce89:	a2 8c 1b 55 f0       	mov    %al,0xf0551b8c
f010ce8e:	a0 8d 1b 55 f0       	mov    0xf0551b8d,%al
f010ce93:	83 e0 f0             	and    $0xfffffff0,%eax
f010ce96:	83 c8 0e             	or     $0xe,%eax
f010ce99:	a2 8d 1b 55 f0       	mov    %al,0xf0551b8d
f010ce9e:	a0 8d 1b 55 f0       	mov    0xf0551b8d,%al
f010cea3:	83 e0 ef             	and    $0xffffffef,%eax
f010cea6:	a2 8d 1b 55 f0       	mov    %al,0xf0551b8d
f010ceab:	a0 8d 1b 55 f0       	mov    0xf0551b8d,%al
f010ceb0:	83 c8 60             	or     $0x60,%eax
f010ceb3:	a2 8d 1b 55 f0       	mov    %al,0xf0551b8d
f010ceb8:	a0 8d 1b 55 f0       	mov    0xf0551b8d,%al
f010cebd:	83 c8 80             	or     $0xffffff80,%eax
f010cec0:	a2 8d 1b 55 f0       	mov    %al,0xf0551b8d
f010cec5:	b8 48 d7 10 f0       	mov    $0xf010d748,%eax
f010ceca:	c1 e8 10             	shr    $0x10,%eax
f010cecd:	66 a3 8e 1b 55 f0    	mov    %ax,0xf0551b8e
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010ced3:	b8 4e d7 10 f0       	mov    $0xf010d74e,%eax
f010ced8:	66 a3 90 1b 55 f0    	mov    %ax,0xf0551b90
f010cede:	66 c7 05 92 1b 55 f0 	movw   $0x8,0xf0551b92
f010cee5:	08 00 
f010cee7:	a0 94 1b 55 f0       	mov    0xf0551b94,%al
f010ceec:	83 e0 e0             	and    $0xffffffe0,%eax
f010ceef:	a2 94 1b 55 f0       	mov    %al,0xf0551b94
f010cef4:	a0 94 1b 55 f0       	mov    0xf0551b94,%al
f010cef9:	83 e0 1f             	and    $0x1f,%eax
f010cefc:	a2 94 1b 55 f0       	mov    %al,0xf0551b94
f010cf01:	a0 95 1b 55 f0       	mov    0xf0551b95,%al
f010cf06:	83 e0 f0             	and    $0xfffffff0,%eax
f010cf09:	83 c8 0e             	or     $0xe,%eax
f010cf0c:	a2 95 1b 55 f0       	mov    %al,0xf0551b95
f010cf11:	a0 95 1b 55 f0       	mov    0xf0551b95,%al
f010cf16:	83 e0 ef             	and    $0xffffffef,%eax
f010cf19:	a2 95 1b 55 f0       	mov    %al,0xf0551b95
f010cf1e:	a0 95 1b 55 f0       	mov    0xf0551b95,%al
f010cf23:	83 c8 60             	or     $0x60,%eax
f010cf26:	a2 95 1b 55 f0       	mov    %al,0xf0551b95
f010cf2b:	a0 95 1b 55 f0       	mov    0xf0551b95,%al
f010cf30:	83 c8 80             	or     $0xffffff80,%eax
f010cf33:	a2 95 1b 55 f0       	mov    %al,0xf0551b95
f010cf38:	b8 4e d7 10 f0       	mov    $0xf010d74e,%eax
f010cf3d:	c1 e8 10             	shr    $0x10,%eax
f010cf40:	66 a3 96 1b 55 f0    	mov    %ax,0xf0551b96
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010cf46:	b8 54 d7 10 f0       	mov    $0xf010d754,%eax
f010cf4b:	66 a3 98 1b 55 f0    	mov    %ax,0xf0551b98
f010cf51:	66 c7 05 9a 1b 55 f0 	movw   $0x8,0xf0551b9a
f010cf58:	08 00 
f010cf5a:	a0 9c 1b 55 f0       	mov    0xf0551b9c,%al
f010cf5f:	83 e0 e0             	and    $0xffffffe0,%eax
f010cf62:	a2 9c 1b 55 f0       	mov    %al,0xf0551b9c
f010cf67:	a0 9c 1b 55 f0       	mov    0xf0551b9c,%al
f010cf6c:	83 e0 1f             	and    $0x1f,%eax
f010cf6f:	a2 9c 1b 55 f0       	mov    %al,0xf0551b9c
f010cf74:	a0 9d 1b 55 f0       	mov    0xf0551b9d,%al
f010cf79:	83 e0 f0             	and    $0xfffffff0,%eax
f010cf7c:	83 c8 0e             	or     $0xe,%eax
f010cf7f:	a2 9d 1b 55 f0       	mov    %al,0xf0551b9d
f010cf84:	a0 9d 1b 55 f0       	mov    0xf0551b9d,%al
f010cf89:	83 e0 ef             	and    $0xffffffef,%eax
f010cf8c:	a2 9d 1b 55 f0       	mov    %al,0xf0551b9d
f010cf91:	a0 9d 1b 55 f0       	mov    0xf0551b9d,%al
f010cf96:	83 c8 60             	or     $0x60,%eax
f010cf99:	a2 9d 1b 55 f0       	mov    %al,0xf0551b9d
f010cf9e:	a0 9d 1b 55 f0       	mov    0xf0551b9d,%al
f010cfa3:	83 c8 80             	or     $0xffffff80,%eax
f010cfa6:	a2 9d 1b 55 f0       	mov    %al,0xf0551b9d
f010cfab:	b8 54 d7 10 f0       	mov    $0xf010d754,%eax
f010cfb0:	c1 e8 10             	shr    $0x10,%eax
f010cfb3:	66 a3 9e 1b 55 f0    	mov    %ax,0xf0551b9e
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010cfb9:	b8 5a d7 10 f0       	mov    $0xf010d75a,%eax
f010cfbe:	66 a3 a0 1b 55 f0    	mov    %ax,0xf0551ba0
f010cfc4:	66 c7 05 a2 1b 55 f0 	movw   $0x8,0xf0551ba2
f010cfcb:	08 00 
f010cfcd:	a0 a4 1b 55 f0       	mov    0xf0551ba4,%al
f010cfd2:	83 e0 e0             	and    $0xffffffe0,%eax
f010cfd5:	a2 a4 1b 55 f0       	mov    %al,0xf0551ba4
f010cfda:	a0 a4 1b 55 f0       	mov    0xf0551ba4,%al
f010cfdf:	83 e0 1f             	and    $0x1f,%eax
f010cfe2:	a2 a4 1b 55 f0       	mov    %al,0xf0551ba4
f010cfe7:	a0 a5 1b 55 f0       	mov    0xf0551ba5,%al
f010cfec:	83 e0 f0             	and    $0xfffffff0,%eax
f010cfef:	83 c8 0e             	or     $0xe,%eax
f010cff2:	a2 a5 1b 55 f0       	mov    %al,0xf0551ba5
f010cff7:	a0 a5 1b 55 f0       	mov    0xf0551ba5,%al
f010cffc:	83 e0 ef             	and    $0xffffffef,%eax
f010cfff:	a2 a5 1b 55 f0       	mov    %al,0xf0551ba5
f010d004:	a0 a5 1b 55 f0       	mov    0xf0551ba5,%al
f010d009:	83 c8 60             	or     $0x60,%eax
f010d00c:	a2 a5 1b 55 f0       	mov    %al,0xf0551ba5
f010d011:	a0 a5 1b 55 f0       	mov    0xf0551ba5,%al
f010d016:	83 c8 80             	or     $0xffffff80,%eax
f010d019:	a2 a5 1b 55 f0       	mov    %al,0xf0551ba5
f010d01e:	b8 5a d7 10 f0       	mov    $0xf010d75a,%eax
f010d023:	c1 e8 10             	shr    $0x10,%eax
f010d026:	66 a3 a6 1b 55 f0    	mov    %ax,0xf0551ba6
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010d02c:	b8 60 d7 10 f0       	mov    $0xf010d760,%eax
f010d031:	66 a3 a8 1b 55 f0    	mov    %ax,0xf0551ba8
f010d037:	66 c7 05 aa 1b 55 f0 	movw   $0x8,0xf0551baa
f010d03e:	08 00 
f010d040:	a0 ac 1b 55 f0       	mov    0xf0551bac,%al
f010d045:	83 e0 e0             	and    $0xffffffe0,%eax
f010d048:	a2 ac 1b 55 f0       	mov    %al,0xf0551bac
f010d04d:	a0 ac 1b 55 f0       	mov    0xf0551bac,%al
f010d052:	83 e0 1f             	and    $0x1f,%eax
f010d055:	a2 ac 1b 55 f0       	mov    %al,0xf0551bac
f010d05a:	a0 ad 1b 55 f0       	mov    0xf0551bad,%al
f010d05f:	83 e0 f0             	and    $0xfffffff0,%eax
f010d062:	83 c8 0e             	or     $0xe,%eax
f010d065:	a2 ad 1b 55 f0       	mov    %al,0xf0551bad
f010d06a:	a0 ad 1b 55 f0       	mov    0xf0551bad,%al
f010d06f:	83 e0 ef             	and    $0xffffffef,%eax
f010d072:	a2 ad 1b 55 f0       	mov    %al,0xf0551bad
f010d077:	a0 ad 1b 55 f0       	mov    0xf0551bad,%al
f010d07c:	83 c8 60             	or     $0x60,%eax
f010d07f:	a2 ad 1b 55 f0       	mov    %al,0xf0551bad
f010d084:	a0 ad 1b 55 f0       	mov    0xf0551bad,%al
f010d089:	83 c8 80             	or     $0xffffff80,%eax
f010d08c:	a2 ad 1b 55 f0       	mov    %al,0xf0551bad
f010d091:	b8 60 d7 10 f0       	mov    $0xf010d760,%eax
f010d096:	c1 e8 10             	shr    $0x10,%eax
f010d099:	66 a3 ae 1b 55 f0    	mov    %ax,0xf0551bae
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010d09f:	b8 66 d7 10 f0       	mov    $0xf010d766,%eax
f010d0a4:	66 a3 b0 1b 55 f0    	mov    %ax,0xf0551bb0
f010d0aa:	66 c7 05 b2 1b 55 f0 	movw   $0x8,0xf0551bb2
f010d0b1:	08 00 
f010d0b3:	a0 b4 1b 55 f0       	mov    0xf0551bb4,%al
f010d0b8:	83 e0 e0             	and    $0xffffffe0,%eax
f010d0bb:	a2 b4 1b 55 f0       	mov    %al,0xf0551bb4
f010d0c0:	a0 b4 1b 55 f0       	mov    0xf0551bb4,%al
f010d0c5:	83 e0 1f             	and    $0x1f,%eax
f010d0c8:	a2 b4 1b 55 f0       	mov    %al,0xf0551bb4
f010d0cd:	a0 b5 1b 55 f0       	mov    0xf0551bb5,%al
f010d0d2:	83 e0 f0             	and    $0xfffffff0,%eax
f010d0d5:	83 c8 0e             	or     $0xe,%eax
f010d0d8:	a2 b5 1b 55 f0       	mov    %al,0xf0551bb5
f010d0dd:	a0 b5 1b 55 f0       	mov    0xf0551bb5,%al
f010d0e2:	83 e0 ef             	and    $0xffffffef,%eax
f010d0e5:	a2 b5 1b 55 f0       	mov    %al,0xf0551bb5
f010d0ea:	a0 b5 1b 55 f0       	mov    0xf0551bb5,%al
f010d0ef:	83 c8 60             	or     $0x60,%eax
f010d0f2:	a2 b5 1b 55 f0       	mov    %al,0xf0551bb5
f010d0f7:	a0 b5 1b 55 f0       	mov    0xf0551bb5,%al
f010d0fc:	83 c8 80             	or     $0xffffff80,%eax
f010d0ff:	a2 b5 1b 55 f0       	mov    %al,0xf0551bb5
f010d104:	b8 66 d7 10 f0       	mov    $0xf010d766,%eax
f010d109:	c1 e8 10             	shr    $0x10,%eax
f010d10c:	66 a3 b6 1b 55 f0    	mov    %ax,0xf0551bb6
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010d112:	b8 6c d7 10 f0       	mov    $0xf010d76c,%eax
f010d117:	66 a3 b8 1b 55 f0    	mov    %ax,0xf0551bb8
f010d11d:	66 c7 05 ba 1b 55 f0 	movw   $0x8,0xf0551bba
f010d124:	08 00 
f010d126:	a0 bc 1b 55 f0       	mov    0xf0551bbc,%al
f010d12b:	83 e0 e0             	and    $0xffffffe0,%eax
f010d12e:	a2 bc 1b 55 f0       	mov    %al,0xf0551bbc
f010d133:	a0 bc 1b 55 f0       	mov    0xf0551bbc,%al
f010d138:	83 e0 1f             	and    $0x1f,%eax
f010d13b:	a2 bc 1b 55 f0       	mov    %al,0xf0551bbc
f010d140:	a0 bd 1b 55 f0       	mov    0xf0551bbd,%al
f010d145:	83 e0 f0             	and    $0xfffffff0,%eax
f010d148:	83 c8 0e             	or     $0xe,%eax
f010d14b:	a2 bd 1b 55 f0       	mov    %al,0xf0551bbd
f010d150:	a0 bd 1b 55 f0       	mov    0xf0551bbd,%al
f010d155:	83 e0 ef             	and    $0xffffffef,%eax
f010d158:	a2 bd 1b 55 f0       	mov    %al,0xf0551bbd
f010d15d:	a0 bd 1b 55 f0       	mov    0xf0551bbd,%al
f010d162:	83 c8 60             	or     $0x60,%eax
f010d165:	a2 bd 1b 55 f0       	mov    %al,0xf0551bbd
f010d16a:	a0 bd 1b 55 f0       	mov    0xf0551bbd,%al
f010d16f:	83 c8 80             	or     $0xffffff80,%eax
f010d172:	a2 bd 1b 55 f0       	mov    %al,0xf0551bbd
f010d177:	b8 6c d7 10 f0       	mov    $0xf010d76c,%eax
f010d17c:	c1 e8 10             	shr    $0x10,%eax
f010d17f:	66 a3 be 1b 55 f0    	mov    %ax,0xf0551bbe
f010d185:	c7 45 fc 40 1a 55 f0 	movl   $0xf0551a40,-0x4(%ebp)
f010d18c:	c7 45 f8 00 08 00 00 	movl   $0x800,-0x8(%ebp)
//load IDT register
static __inline void lidt(struct Gatedesc *p, int size)
{
  volatile unsigned short pd[3];

  pd[0] = size-1;
f010d193:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010d196:	48                   	dec    %eax
f010d197:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
  pd[1] = (uint32)p;
f010d19b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d19e:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
  pd[2] = (uint32)p >> 16;
f010d1a2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010d1a5:	c1 e8 10             	shr    $0x10,%eax
f010d1a8:	66 89 45 f6          	mov    %ax,-0xa(%ebp)

  asm volatile("lidt (%0)" : : "r" (pd));
f010d1ac:	8d 45 f2             	lea    -0xe(%ebp),%eax
f010d1af:	0f 01 18             	lidtl  (%eax)

	// Load the IDT
	//asm volatile("lidt idt_pd");
	lidt(idt, sizeof(idt));

}
f010d1b2:	90                   	nop
f010d1b3:	c9                   	leave  
f010d1b4:	c3                   	ret    

f010d1b5 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010d1b5:	55                   	push   %ebp
f010d1b6:	89 e5                	mov    %esp,%ebp
f010d1b8:	53                   	push   %ebx
f010d1b9:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010d1bc:	83 ec 08             	sub    $0x8,%esp
f010d1bf:	ff 75 08             	pushl  0x8(%ebp)
f010d1c2:	68 9e 67 12 f0       	push   $0xf012679e
f010d1c7:	e8 a0 3d ff ff       	call   f0100f6c <cprintf>
f010d1cc:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010d1cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1d2:	83 ec 0c             	sub    $0xc,%esp
f010d1d5:	50                   	push   %eax
f010d1d6:	e8 fd 00 00 00       	call   f010d2d8 <print_regs>
f010d1db:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010d1de:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1e1:	8b 40 20             	mov    0x20(%eax),%eax
f010d1e4:	0f b7 c0             	movzwl %ax,%eax
f010d1e7:	83 ec 08             	sub    $0x8,%esp
f010d1ea:	50                   	push   %eax
f010d1eb:	68 b0 67 12 f0       	push   $0xf01267b0
f010d1f0:	e8 77 3d ff ff       	call   f0100f6c <cprintf>
f010d1f5:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010d1f8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d1fb:	8b 40 24             	mov    0x24(%eax),%eax
f010d1fe:	0f b7 c0             	movzwl %ax,%eax
f010d201:	83 ec 08             	sub    $0x8,%esp
f010d204:	50                   	push   %eax
f010d205:	68 c3 67 12 f0       	push   $0xf01267c3
f010d20a:	e8 5d 3d ff ff       	call   f0100f6c <cprintf>
f010d20f:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010d212:	8b 45 08             	mov    0x8(%ebp),%eax
f010d215:	8b 58 28             	mov    0x28(%eax),%ebx
f010d218:	8b 45 08             	mov    0x8(%ebp),%eax
f010d21b:	8b 40 28             	mov    0x28(%eax),%eax
f010d21e:	83 ec 0c             	sub    $0xc,%esp
f010d221:	50                   	push   %eax
f010d222:	e8 28 ee ff ff       	call   f010c04f <trapname>
f010d227:	83 c4 10             	add    $0x10,%esp
f010d22a:	89 c2                	mov    %eax,%edx
f010d22c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d22f:	8b 40 28             	mov    0x28(%eax),%eax
f010d232:	53                   	push   %ebx
f010d233:	52                   	push   %edx
f010d234:	50                   	push   %eax
f010d235:	68 d6 67 12 f0       	push   $0xf01267d6
f010d23a:	e8 2d 3d ff ff       	call   f0100f6c <cprintf>
f010d23f:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010d242:	8b 45 08             	mov    0x8(%ebp),%eax
f010d245:	8b 40 2c             	mov    0x2c(%eax),%eax
f010d248:	83 ec 08             	sub    $0x8,%esp
f010d24b:	50                   	push   %eax
f010d24c:	68 ed 67 12 f0       	push   $0xf01267ed
f010d251:	e8 16 3d ff ff       	call   f0100f6c <cprintf>
f010d256:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010d259:	8b 45 08             	mov    0x8(%ebp),%eax
f010d25c:	8b 40 30             	mov    0x30(%eax),%eax
f010d25f:	83 ec 08             	sub    $0x8,%esp
f010d262:	50                   	push   %eax
f010d263:	68 fc 67 12 f0       	push   $0xf01267fc
f010d268:	e8 ff 3c ff ff       	call   f0100f6c <cprintf>
f010d26d:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010d270:	8b 45 08             	mov    0x8(%ebp),%eax
f010d273:	8b 40 34             	mov    0x34(%eax),%eax
f010d276:	0f b7 c0             	movzwl %ax,%eax
f010d279:	83 ec 08             	sub    $0x8,%esp
f010d27c:	50                   	push   %eax
f010d27d:	68 0b 68 12 f0       	push   $0xf012680b
f010d282:	e8 e5 3c ff ff       	call   f0100f6c <cprintf>
f010d287:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010d28a:	8b 45 08             	mov    0x8(%ebp),%eax
f010d28d:	8b 40 38             	mov    0x38(%eax),%eax
f010d290:	83 ec 08             	sub    $0x8,%esp
f010d293:	50                   	push   %eax
f010d294:	68 1e 68 12 f0       	push   $0xf012681e
f010d299:	e8 ce 3c ff ff       	call   f0100f6c <cprintf>
f010d29e:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010d2a1:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2a4:	8b 40 3c             	mov    0x3c(%eax),%eax
f010d2a7:	83 ec 08             	sub    $0x8,%esp
f010d2aa:	50                   	push   %eax
f010d2ab:	68 2d 68 12 f0       	push   $0xf012682d
f010d2b0:	e8 b7 3c ff ff       	call   f0100f6c <cprintf>
f010d2b5:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010d2b8:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2bb:	8b 40 40             	mov    0x40(%eax),%eax
f010d2be:	0f b7 c0             	movzwl %ax,%eax
f010d2c1:	83 ec 08             	sub    $0x8,%esp
f010d2c4:	50                   	push   %eax
f010d2c5:	68 3c 68 12 f0       	push   $0xf012683c
f010d2ca:	e8 9d 3c ff ff       	call   f0100f6c <cprintf>
f010d2cf:	83 c4 10             	add    $0x10,%esp
}
f010d2d2:	90                   	nop
f010d2d3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010d2d6:	c9                   	leave  
f010d2d7:	c3                   	ret    

f010d2d8 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010d2d8:	55                   	push   %ebp
f010d2d9:	89 e5                	mov    %esp,%ebp
f010d2db:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010d2de:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2e1:	8b 00                	mov    (%eax),%eax
f010d2e3:	83 ec 08             	sub    $0x8,%esp
f010d2e6:	50                   	push   %eax
f010d2e7:	68 4f 68 12 f0       	push   $0xf012684f
f010d2ec:	e8 7b 3c ff ff       	call   f0100f6c <cprintf>
f010d2f1:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010d2f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010d2f7:	8b 40 04             	mov    0x4(%eax),%eax
f010d2fa:	83 ec 08             	sub    $0x8,%esp
f010d2fd:	50                   	push   %eax
f010d2fe:	68 5e 68 12 f0       	push   $0xf012685e
f010d303:	e8 64 3c ff ff       	call   f0100f6c <cprintf>
f010d308:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010d30b:	8b 45 08             	mov    0x8(%ebp),%eax
f010d30e:	8b 40 08             	mov    0x8(%eax),%eax
f010d311:	83 ec 08             	sub    $0x8,%esp
f010d314:	50                   	push   %eax
f010d315:	68 6d 68 12 f0       	push   $0xf012686d
f010d31a:	e8 4d 3c ff ff       	call   f0100f6c <cprintf>
f010d31f:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010d322:	8b 45 08             	mov    0x8(%ebp),%eax
f010d325:	8b 40 0c             	mov    0xc(%eax),%eax
f010d328:	83 ec 08             	sub    $0x8,%esp
f010d32b:	50                   	push   %eax
f010d32c:	68 7c 68 12 f0       	push   $0xf012687c
f010d331:	e8 36 3c ff ff       	call   f0100f6c <cprintf>
f010d336:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010d339:	8b 45 08             	mov    0x8(%ebp),%eax
f010d33c:	8b 40 10             	mov    0x10(%eax),%eax
f010d33f:	83 ec 08             	sub    $0x8,%esp
f010d342:	50                   	push   %eax
f010d343:	68 8b 68 12 f0       	push   $0xf012688b
f010d348:	e8 1f 3c ff ff       	call   f0100f6c <cprintf>
f010d34d:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010d350:	8b 45 08             	mov    0x8(%ebp),%eax
f010d353:	8b 40 14             	mov    0x14(%eax),%eax
f010d356:	83 ec 08             	sub    $0x8,%esp
f010d359:	50                   	push   %eax
f010d35a:	68 9a 68 12 f0       	push   $0xf012689a
f010d35f:	e8 08 3c ff ff       	call   f0100f6c <cprintf>
f010d364:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010d367:	8b 45 08             	mov    0x8(%ebp),%eax
f010d36a:	8b 40 18             	mov    0x18(%eax),%eax
f010d36d:	83 ec 08             	sub    $0x8,%esp
f010d370:	50                   	push   %eax
f010d371:	68 a9 68 12 f0       	push   $0xf01268a9
f010d376:	e8 f1 3b ff ff       	call   f0100f6c <cprintf>
f010d37b:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010d37e:	8b 45 08             	mov    0x8(%ebp),%eax
f010d381:	8b 40 1c             	mov    0x1c(%eax),%eax
f010d384:	83 ec 08             	sub    $0x8,%esp
f010d387:	50                   	push   %eax
f010d388:	68 b8 68 12 f0       	push   $0xf01268b8
f010d38d:	e8 da 3b ff ff       	call   f0100f6c <cprintf>
f010d392:	83 c4 10             	add    $0x10,%esp
}
f010d395:	90                   	nop
f010d396:	c9                   	leave  
f010d397:	c3                   	ret    

f010d398 <irq_install_handler>:


void *irq_handlers[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ;
void irq_install_handler(int irq, void (*handler)(struct Trapframe *tf))
{
f010d398:	55                   	push   %ebp
f010d399:	89 e5                	mov    %esp,%ebp
	irq_handlers[irq] = handler;
f010d39b:	8b 45 08             	mov    0x8(%ebp),%eax
f010d39e:	8b 55 0c             	mov    0xc(%ebp),%edx
f010d3a1:	89 14 85 40 22 55 f0 	mov    %edx,-0xfaaddc0(,%eax,4)
}
f010d3a8:	90                   	nop
f010d3a9:	5d                   	pop    %ebp
f010d3aa:	c3                   	ret    

f010d3ab <irq_uninstall_handler>:
void irq_uninstall_handler(int irq)
{
f010d3ab:	55                   	push   %ebp
f010d3ac:	89 e5                	mov    %esp,%ebp
	irq_handlers[irq] = NULL;
f010d3ae:	8b 45 08             	mov    0x8(%ebp),%eax
f010d3b1:	c7 04 85 40 22 55 f0 	movl   $0x0,-0xfaaddc0(,%eax,4)
f010d3b8:	00 00 00 00 
}
f010d3bc:	90                   	nop
f010d3bd:	5d                   	pop    %ebp
f010d3be:	c3                   	ret    

f010d3bf <irq_dispatch>:
void irq_dispatch(struct Trapframe *tf)
{
f010d3bf:	55                   	push   %ebp
f010d3c0:	89 e5                	mov    %esp,%ebp
f010d3c2:	83 ec 18             	sub    $0x18,%esp
	void (*handler)(struct Trapframe *tf);
	int IRQNum = tf->tf_trapno - IRQ_OFFSET;
f010d3c5:	8b 45 08             	mov    0x8(%ebp),%eax
f010d3c8:	8b 40 28             	mov    0x28(%eax),%eax
f010d3cb:	83 e8 20             	sub    $0x20,%eax
f010d3ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
	handler = irq_handlers[IRQNum] ;
f010d3d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d3d4:	8b 04 85 40 22 55 f0 	mov    -0xfaaddc0(,%eax,4),%eax
f010d3db:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (handler)
f010d3de:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010d3e2:	74 0e                	je     f010d3f2 <irq_dispatch+0x33>
	{
		handler(tf);
f010d3e4:	83 ec 0c             	sub    $0xc,%esp
f010d3e7:	ff 75 08             	pushl  0x8(%ebp)
f010d3ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d3ed:	ff d0                	call   *%eax
f010d3ef:	83 c4 10             	add    $0x10,%esp
	}

	//Send End Of Interrupt CMD to PIC
	pic_sendEOI(IRQNum);
f010d3f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d3f5:	0f b6 c0             	movzbl %al,%eax
f010d3f8:	83 ec 0c             	sub    $0xc,%esp
f010d3fb:	50                   	push   %eax
f010d3fc:	e8 c3 9c ff ff       	call   f01070c4 <pic_sendEOI>
f010d401:	83 c4 10             	add    $0x10,%esp
}
f010d404:	90                   	nop
f010d405:	c9                   	leave  
f010d406:	c3                   	ret    

f010d407 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010d407:	55                   	push   %ebp
f010d408:	89 e5                	mov    %esp,%ebp
f010d40a:	57                   	push   %edi
f010d40b:	56                   	push   %esi
f010d40c:	53                   	push   %ebx
f010d40d:	83 ec 1c             	sub    $0x1c,%esp
	if(tf->tf_trapno == T_PGFLT)
f010d410:	8b 45 08             	mov    0x8(%ebp),%eax
f010d413:	8b 40 28             	mov    0x28(%eax),%eax
f010d416:	83 f8 0e             	cmp    $0xe,%eax
f010d419:	75 51                	jne    f010d46c <trap_dispatch+0x65>
	{
		//2016: Bypass the faulted instruction [used for some tests in which we need to resume the execution after an intended page fault]
		if (bypassInstrLength != 0)
f010d41b:	a0 80 22 55 f0       	mov    0xf0552280,%al
f010d420:	84 c0                	test   %al,%al
f010d422:	74 1f                	je     f010d443 <trap_dispatch+0x3c>
		{
			tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010d424:	8b 45 08             	mov    0x8(%ebp),%eax
f010d427:	8b 40 30             	mov    0x30(%eax),%eax
f010d42a:	89 c2                	mov    %eax,%edx
f010d42c:	a0 80 22 55 f0       	mov    0xf0552280,%al
f010d431:	0f b6 c0             	movzbl %al,%eax
f010d434:	01 d0                	add    %edx,%eax
f010d436:	89 c2                	mov    %eax,%edx
f010d438:	8b 45 08             	mov    0x8(%ebp),%eax
f010d43b:	89 50 30             	mov    %edx,0x30(%eax)
			/*2024: commented. already will be returned to the trapret() in trapentry.S which return to the user/kernel caller code*/
			//kclock_resume();
			//env_pop_tf(tf);
			return;
f010d43e:	e9 0c 01 00 00       	jmp    f010d54f <trap_dispatch+0x148>
		}

		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010d443:	83 ec 0c             	sub    $0xc,%esp
f010d446:	6a 01                	push   $0x1
f010d448:	e8 79 12 00 00       	call   f010e6c6 <isPageReplacmentAlgorithmLRU>
f010d44d:	83 c4 10             	add    $0x10,%esp
f010d450:	85 c0                	test   %eax,%eax
f010d452:	74 05                	je     f010d459 <trap_dispatch+0x52>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010d454:	e8 de 97 ff ff       	call   f0106c37 <update_WS_time_stamps>
		}
		fault_handler(tf);
f010d459:	83 ec 0c             	sub    $0xc,%esp
f010d45c:	ff 75 08             	pushl  0x8(%ebp)
f010d45f:	e8 47 13 00 00       	call   f010e7ab <fault_handler>
f010d464:	83 c4 10             	add    $0x10,%esp
f010d467:	e9 e3 00 00 00       	jmp    f010d54f <trap_dispatch+0x148>
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010d46c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d46f:	8b 40 28             	mov    0x28(%eax),%eax
f010d472:	83 f8 30             	cmp    $0x30,%eax
f010d475:	75 6e                	jne    f010d4e5 <trap_dispatch+0xde>
	{
		/* If the original status of the interrupt is ENABLED (before getting into kernel),
		 * Then, re-enable the interrupts & resume the clock during the system calls
		 * to allow switching between processes
		 */
		if (tf->tf_eflags & FL_IF)
f010d477:	8b 45 08             	mov    0x8(%ebp),%eax
f010d47a:	8b 40 38             	mov    0x38(%eax),%eax
f010d47d:	25 00 02 00 00       	and    $0x200,%eax
f010d482:	85 c0                	test   %eax,%eax
f010d484:	74 06                	je     f010d48c <trap_dispatch+0x85>

//set interrupt flag
static __inline void
sti(void)
{
	__asm __volatile("sti");
f010d486:	fb                   	sti    
		{
			sti();
			kclock_resume();
f010d487:	e8 24 78 ff ff       	call   f0104cb0 <kclock_resume>
		}
		//cprintf("\nserving system call #%d\n", tf->tf_regs.reg_eax);
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010d48c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d48f:	8b 78 04             	mov    0x4(%eax),%edi
f010d492:	8b 45 08             	mov    0x8(%ebp),%eax
f010d495:	8b 30                	mov    (%eax),%esi
f010d497:	8b 45 08             	mov    0x8(%ebp),%eax
f010d49a:	8b 58 10             	mov    0x10(%eax),%ebx
f010d49d:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4a0:	8b 48 18             	mov    0x18(%eax),%ecx
f010d4a3:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4a6:	8b 50 14             	mov    0x14(%eax),%edx
f010d4a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4ac:	8b 40 1c             	mov    0x1c(%eax),%eax
f010d4af:	83 ec 08             	sub    $0x8,%esp
f010d4b2:	57                   	push   %edi
f010d4b3:	56                   	push   %esi
f010d4b4:	53                   	push   %ebx
f010d4b5:	51                   	push   %ecx
f010d4b6:	52                   	push   %edx
f010d4b7:	50                   	push   %eax
f010d4b8:	e8 7a 09 00 00       	call   f010de37 <syscall>
f010d4bd:	83 c4 20             	add    $0x20,%esp
f010d4c0:	89 45 e0             	mov    %eax,-0x20(%ebp)
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);

		tf->tf_regs.reg_eax = ret;
f010d4c3:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4c6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010d4c9:	89 50 1c             	mov    %edx,0x1c(%eax)

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f010d4cc:	9c                   	pushf  
f010d4cd:	58                   	pop    %eax
f010d4ce:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        return eflags;
f010d4d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax

		/*If still enabled, Disable the interrupt & stop clock before getting into user again
		 */
		if (read_eflags() & FL_IF)
f010d4d4:	25 00 02 00 00       	and    $0x200,%eax
f010d4d9:	85 c0                	test   %eax,%eax
f010d4db:	74 72                	je     f010d54f <trap_dispatch+0x148>
 */
//clear interrupt flag
static __inline void
cli(void)
{
	__asm __volatile("cli");
f010d4dd:	fa                   	cli    
		{
			cli();
			kclock_stop();
f010d4de:	e8 a5 77 ff ff       	call   f0104c88 <kclock_stop>
f010d4e3:	eb 6a                	jmp    f010d54f <trap_dispatch+0x148>
		}
		//cprintf("ret val form syscall = %d\n", ret);
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010d4e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010d4e8:	8b 40 28             	mov    0x28(%eax),%eax
f010d4eb:	83 f8 08             	cmp    $0x8,%eax
f010d4ee:	75 17                	jne    f010d507 <trap_dispatch+0x100>
	{
		panic("double fault!!");
f010d4f0:	83 ec 04             	sub    $0x4,%esp
f010d4f3:	68 c7 68 12 f0       	push   $0xf01268c7
f010d4f8:	68 22 01 00 00       	push   $0x122
f010d4fd:	68 d6 68 12 f0       	push   $0xf01268d6
f010d502:	e8 13 2e ff ff       	call   f010031a <_panic>
	}
	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		print_trapframe(tf);
f010d507:	83 ec 0c             	sub    $0xc,%esp
f010d50a:	ff 75 08             	pushl  0x8(%ebp)
f010d50d:	e8 a3 fc ff ff       	call   f010d1b5 <print_trapframe>
f010d512:	83 c4 10             	add    $0x10,%esp
		if (tf->tf_cs == GD_KT)
f010d515:	8b 45 08             	mov    0x8(%ebp),%eax
f010d518:	8b 40 34             	mov    0x34(%eax),%eax
f010d51b:	66 83 f8 08          	cmp    $0x8,%ax
f010d51f:	75 17                	jne    f010d538 <trap_dispatch+0x131>
		{
			panic("unhandled trap in kernel");
f010d521:	83 ec 04             	sub    $0x4,%esp
f010d524:	68 e7 68 12 f0       	push   $0xf01268e7
f010d529:	68 2a 01 00 00       	push   $0x12a
f010d52e:	68 d6 68 12 f0       	push   $0xf01268d6
f010d533:	e8 e2 2d ff ff       	call   f010031a <_panic>
		}
		else
		{
			//env_destroy(curenv);
			panic("unhandled trap in user program");
f010d538:	83 ec 04             	sub    $0x4,%esp
f010d53b:	68 00 69 12 f0       	push   $0xf0126900
f010d540:	68 2f 01 00 00       	push   $0x12f
f010d545:	68 d6 68 12 f0       	push   $0xf01268d6
f010d54a:	e8 cb 2d ff ff       	call   f010031a <_panic>
		}
	}
}
f010d54f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010d552:	5b                   	pop    %ebx
f010d553:	5e                   	pop    %esi
f010d554:	5f                   	pop    %edi
f010d555:	5d                   	pop    %ebp
f010d556:	c3                   	ret    

f010d557 <trap>:

void trap(struct Trapframe *tf)
{
f010d557:	55                   	push   %ebp
f010d558:	89 e5                	mov    %esp,%ebp
f010d55a:	83 ec 28             	sub    $0x28,%esp
	/* to avoid counting down on the current process while handling exceptions
	 * This avoid pending clock interrupt after returning from the trap.
	 * NOTE: interrupt is automatically disabled by the interrupt cycle (by marking all traps as "Interrupt Gates").
	 * Resume the clock and Re-enable the interrupt whenever required (e.g. in system calls).
	 */
	kclock_stop();
f010d55d:	e8 26 77 ff ff       	call   f0104c88 <kclock_stop>

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f010d562:	9c                   	pushf  
f010d563:	58                   	pop    %eax
f010d564:	89 45 e0             	mov    %eax,-0x20(%ebp)
        return eflags;
f010d567:	8b 45 e0             	mov    -0x20(%ebp),%eax

	//[2] Some validations

	//2024 check if interrupt is enabled during the trap handler, then panic
	uint32 flags = read_eflags();
f010d56a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (flags & FL_IF)
f010d56d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d570:	25 00 02 00 00       	and    $0x200,%eax
f010d575:	85 c0                	test   %eax,%eax
f010d577:	74 25                	je     f010d59e <trap+0x47>
	{
		print_trapframe(tf);
f010d579:	83 ec 0c             	sub    $0xc,%esp
f010d57c:	ff 75 08             	pushl  0x8(%ebp)
f010d57f:	e8 31 fc ff ff       	call   f010d1b5 <print_trapframe>
f010d584:	83 c4 10             	add    $0x10,%esp
		panic("trap(): interrupt is enabled while it's expected to be disabled\n");
f010d587:	83 ec 04             	sub    $0x4,%esp
f010d58a:	68 20 69 12 f0       	push   $0xf0126920
f010d58f:	68 45 01 00 00       	push   $0x145
f010d594:	68 d6 68 12 f0       	push   $0xf01268d6
f010d599:	e8 7c 2d ff ff       	call   f010031a <_panic>
	}

	int userTrap = 0;
f010d59e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct Env* cur_env = get_cpu_proc(); //the current running Environment (if any)
f010d5a5:	e8 c6 d1 ff ff       	call   f010a770 <get_cpu_proc>
f010d5aa:	89 45 e8             	mov    %eax,-0x18(%ebp)

	if ((tf->tf_cs & 3) == 3)
f010d5ad:	8b 45 08             	mov    0x8(%ebp),%eax
f010d5b0:	8b 40 34             	mov    0x34(%eax),%eax
f010d5b3:	0f b7 c0             	movzwl %ax,%eax
f010d5b6:	83 e0 03             	and    $0x3,%eax
f010d5b9:	83 f8 03             	cmp    $0x3,%eax
f010d5bc:	75 54                	jne    f010d612 <trap+0xbb>
	{
		assert(cur_env && cur_env->env_status == ENV_RUNNING);	//environment should be exist & run
f010d5be:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010d5c2:	74 0b                	je     f010d5cf <trap+0x78>
f010d5c4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d5c7:	8b 40 18             	mov    0x18(%eax),%eax
f010d5ca:	83 f8 02             	cmp    $0x2,%eax
f010d5cd:	74 19                	je     f010d5e8 <trap+0x91>
f010d5cf:	68 64 69 12 f0       	push   $0xf0126964
f010d5d4:	68 92 69 12 f0       	push   $0xf0126992
f010d5d9:	68 4d 01 00 00       	push   $0x14d
f010d5de:	68 d6 68 12 f0       	push   $0xf01268d6
f010d5e3:	e8 32 2d ff ff       	call   f010031a <_panic>
		//cprintf("curenv->env_tf @ %x, tf param @ %x\n", curenv->env_tf , tf);
		assert(cur_env->env_tf == tf);	//tf should be placed in the kernel stack of this process (@e->env_tf)
f010d5e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d5eb:	8b 00                	mov    (%eax),%eax
f010d5ed:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d5f0:	74 19                	je     f010d60b <trap+0xb4>
f010d5f2:	68 a7 69 12 f0       	push   $0xf01269a7
f010d5f7:	68 92 69 12 f0       	push   $0xf0126992
f010d5fc:	68 4f 01 00 00       	push   $0x14f
f010d601:	68 d6 68 12 f0       	push   $0xf01268d6
f010d606:	e8 0f 2d ff ff       	call   f010031a <_panic>
		userTrap = 1;
f010d60b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//	if (tf->tf_trapno == T_SYSCALL)
	//	{
	//		cprintf("System Call #%d\n", tf->tf_regs.reg_eax);
	//	}
	//[3] Handle the incoming trap/interrupt
	if (tf->tf_trapno >= IRQ_OFFSET && tf->tf_trapno < IRQ_OFFSET + MAX_IRQS)
f010d612:	8b 45 08             	mov    0x8(%ebp),%eax
f010d615:	8b 40 28             	mov    0x28(%eax),%eax
f010d618:	83 f8 1f             	cmp    $0x1f,%eax
f010d61b:	76 1b                	jbe    f010d638 <trap+0xe1>
f010d61d:	8b 45 08             	mov    0x8(%ebp),%eax
f010d620:	8b 40 28             	mov    0x28(%eax),%eax
f010d623:	83 f8 2f             	cmp    $0x2f,%eax
f010d626:	77 10                	ja     f010d638 <trap+0xe1>
	{
		irq_dispatch(tf);
f010d628:	83 ec 0c             	sub    $0xc,%esp
f010d62b:	ff 75 08             	pushl  0x8(%ebp)
f010d62e:	e8 8c fd ff ff       	call   f010d3bf <irq_dispatch>
f010d633:	83 c4 10             	add    $0x10,%esp
f010d636:	eb 0e                	jmp    f010d646 <trap+0xef>
	}
	else
	{
		trap_dispatch(tf);
f010d638:	83 ec 0c             	sub    $0xc,%esp
f010d63b:	ff 75 08             	pushl  0x8(%ebp)
f010d63e:	e8 c4 fd ff ff       	call   f010d407 <trap_dispatch>
f010d643:	83 c4 10             	add    $0x10,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f010d646:	9c                   	pushf  
f010d647:	58                   	pop    %eax
f010d648:	89 45 f4             	mov    %eax,-0xc(%ebp)
        return eflags;
f010d64b:	8b 45 f4             	mov    -0xc(%ebp),%eax

	//cprintf("will be returned to the trapret() \n");
	/*2024: will be returned to the trapret() in trapentry.S which return to the caller*/

	//[4] Make sure that the interrupt is disabled before executing the trapret()
	uint32 IEN = read_eflags() & FL_IF;
f010d64e:	25 00 02 00 00       	and    $0x200,%eax
f010d653:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	assert(IEN == 0);
f010d656:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010d65a:	74 19                	je     f010d675 <trap+0x11e>
f010d65c:	68 bd 69 12 f0       	push   $0xf01269bd
f010d661:	68 92 69 12 f0       	push   $0xf0126992
f010d666:	68 66 01 00 00       	push   $0x166
f010d66b:	68 d6 68 12 f0       	push   $0xf01268d6
f010d670:	e8 a5 2c ff ff       	call   f010031a <_panic>

	//cprintf("will resume the clock\n");

	//[5] Resume the clock
	kclock_resume();
f010d675:	e8 36 76 ff ff       	call   f0104cb0 <kclock_resume>
	//	cprintf("\nclock is resumed with counter = %d.\n", kclock_read_cnt0_latch());
	//	cprintf("[tf] tf @%x - tf.cs = %x - tf.eip = %x - tf.eax = %d\n", tf, tf->tf_cs,tf->tf_eip, tf->tf_regs.reg_eax );
}
f010d67a:	90                   	nop
f010d67b:	c9                   	leave  
f010d67c:	c3                   	ret    
f010d67d:	90                   	nop

f010d67e <DBL_FAULT>:
	jmp _alltraps

.text
/* Lab 3: Your code here for generating entry points for the different traps.
*/
TRAPHANDLER(DBL_FAULT, T_DBLFLT)					//8 double fault
f010d67e:	6a 08                	push   $0x8
f010d680:	e9 ed 00 00 00       	jmp    f010d772 <_alltraps>
f010d685:	90                   	nop

f010d686 <PAGE_FAULT>:
TRAPHANDLER(PAGE_FAULT, T_PGFLT)					//14 page fault
f010d686:	6a 0e                	push   $0xe
f010d688:	e9 e5 00 00 00       	jmp    f010d772 <_alltraps>
f010d68d:	90                   	nop

f010d68e <IRQ0_CLK_HANDLER>:
TRAPHANDLER_NOEC(IRQ0_CLK_HANDLER, IRQ0_Clock)		//32 the first IRQ (clock iterrrupt)
f010d68e:	6a 00                	push   $0x0
f010d690:	6a 20                	push   $0x20
f010d692:	e9 db 00 00 00       	jmp    f010d772 <_alltraps>
f010d697:	90                   	nop

f010d698 <IRQ1_KBD_HANDLER>:
TRAPHANDLER_NOEC(IRQ1_KBD_HANDLER, IRQ1_KB	)		//33 keyboard interrupt request
f010d698:	6a 00                	push   $0x0
f010d69a:	6a 21                	push   $0x21
f010d69c:	e9 d1 00 00 00       	jmp    f010d772 <_alltraps>
f010d6a1:	90                   	nop

f010d6a2 <SYSCALL_HANDLER>:
TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)		//48 SYSTEM CALLS
f010d6a2:	6a 00                	push   $0x0
f010d6a4:	6a 30                	push   $0x30
f010d6a6:	e9 c7 00 00 00       	jmp    f010d772 <_alltraps>
f010d6ab:	90                   	nop

f010d6ac <ALL_FAULTS0>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)		//0			// divide error
f010d6ac:	6a 00                	push   $0x0
f010d6ae:	6a 00                	push   $0x0
f010d6b0:	e9 bd 00 00 00       	jmp    f010d772 <_alltraps>
f010d6b5:	90                   	nop

f010d6b6 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )	//1			// debug exception
f010d6b6:	6a 00                	push   $0x0
f010d6b8:	6a 01                	push   $0x1
f010d6ba:	e9 b3 00 00 00       	jmp    f010d772 <_alltraps>
f010d6bf:	90                   	nop

f010d6c0 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )//2			// NMI: non-maskable interrupt
f010d6c0:	6a 00                	push   $0x0
f010d6c2:	6a 02                	push   $0x2
f010d6c4:	e9 a9 00 00 00       	jmp    f010d772 <_alltraps>
f010d6c9:	90                   	nop

f010d6ca <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT     )//3			// breakpoint
f010d6ca:	6a 00                	push   $0x0
f010d6cc:	6a 03                	push   $0x3
f010d6ce:	e9 9f 00 00 00       	jmp    f010d772 <_alltraps>
f010d6d3:	90                   	nop

f010d6d4 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW     )//4			// overflow
f010d6d4:	6a 00                	push   $0x0
f010d6d6:	6a 04                	push   $0x4
f010d6d8:	e9 95 00 00 00       	jmp    f010d772 <_alltraps>
f010d6dd:	90                   	nop

f010d6de <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND     )//5			// bounds check
f010d6de:	6a 00                	push   $0x0
f010d6e0:	6a 05                	push   $0x5
f010d6e2:	e9 8b 00 00 00       	jmp    f010d772 <_alltraps>
f010d6e7:	90                   	nop

f010d6e8 <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP     )//6			// illegal opcode
f010d6e8:	6a 00                	push   $0x0
f010d6ea:	6a 06                	push   $0x6
f010d6ec:	e9 81 00 00 00       	jmp    f010d772 <_alltraps>
f010d6f1:	90                   	nop

f010d6f2 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE    )//7			// device not available
f010d6f2:	6a 00                	push   $0x0
f010d6f4:	6a 07                	push   $0x7
f010d6f6:	eb 7a                	jmp    f010d772 <_alltraps>

f010d6f8 <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS8,  T_DBLFLT)     	//8			// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS9,  9   )		//9			// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )	//10		// invalid task switch segment
f010d6f8:	6a 0a                	push   $0xa
f010d6fa:	eb 76                	jmp    f010d772 <_alltraps>

f010d6fc <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )	//11		// segment not present
f010d6fc:	6a 0b                	push   $0xb
f010d6fe:	eb 72                	jmp    f010d772 <_alltraps>

f010d700 <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )	//12		// stack exception
f010d700:	6a 0c                	push   $0xc
f010d702:	eb 6e                	jmp    f010d772 <_alltraps>

f010d704 <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )	//13		// General protection fault
f010d704:	6a 0d                	push   $0xd
f010d706:	eb 6a                	jmp    f010d772 <_alltraps>

f010d708 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS14,  T_PGFLT)     	//14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )			//15 		// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR    )//16		// floating point error
f010d708:	6a 00                	push   $0x0
f010d70a:	6a 10                	push   $0x10
f010d70c:	eb 64                	jmp    f010d772 <_alltraps>

f010d70e <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )	//17		// Alignment check
f010d70e:	6a 11                	push   $0x11
f010d710:	eb 60                	jmp    f010d772 <_alltraps>

f010d712 <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK     )//18		// machine check
f010d712:	6a 00                	push   $0x0
f010d714:	6a 12                	push   $0x12
f010d716:	eb 5a                	jmp    f010d772 <_alltraps>

f010d718 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )	//19		// the last one
f010d718:	6a 00                	push   $0x0
f010d71a:	6a 13                	push   $0x13
f010d71c:	eb 54                	jmp    f010d772 <_alltraps>

f010d71e <ALL_FAULTS34>:

//TRAPHANDLER_NOEC(IRQ0_CLK_HANDLER,IRQ0_Clock)			//32 the first IRQ (clock iterrrupt)
//TRAPHANDLER_NOEC(IRQ1_KBD_HANDLER,IRQ1_KB	)			//33 keyboard interrupt request
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010d71e:	6a 00                	push   $0x0
f010d720:	6a 22                	push   $0x22
f010d722:	eb 4e                	jmp    f010d772 <_alltraps>

f010d724 <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010d724:	6a 00                	push   $0x0
f010d726:	6a 23                	push   $0x23
f010d728:	eb 48                	jmp    f010d772 <_alltraps>

f010d72a <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010d72a:	6a 00                	push   $0x0
f010d72c:	6a 24                	push   $0x24
f010d72e:	eb 42                	jmp    f010d772 <_alltraps>

f010d730 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010d730:	6a 00                	push   $0x0
f010d732:	6a 25                	push   $0x25
f010d734:	eb 3c                	jmp    f010d772 <_alltraps>

f010d736 <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010d736:	6a 00                	push   $0x0
f010d738:	6a 26                	push   $0x26
f010d73a:	eb 36                	jmp    f010d772 <_alltraps>

f010d73c <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010d73c:	6a 00                	push   $0x0
f010d73e:	6a 27                	push   $0x27
f010d740:	eb 30                	jmp    f010d772 <_alltraps>

f010d742 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010d742:	6a 00                	push   $0x0
f010d744:	6a 28                	push   $0x28
f010d746:	eb 2a                	jmp    f010d772 <_alltraps>

f010d748 <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010d748:	6a 00                	push   $0x0
f010d74a:	6a 29                	push   $0x29
f010d74c:	eb 24                	jmp    f010d772 <_alltraps>

f010d74e <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010d74e:	6a 00                	push   $0x0
f010d750:	6a 2a                	push   $0x2a
f010d752:	eb 1e                	jmp    f010d772 <_alltraps>

f010d754 <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010d754:	6a 00                	push   $0x0
f010d756:	6a 2b                	push   $0x2b
f010d758:	eb 18                	jmp    f010d772 <_alltraps>

f010d75a <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010d75a:	6a 00                	push   $0x0
f010d75c:	6a 2c                	push   $0x2c
f010d75e:	eb 12                	jmp    f010d772 <_alltraps>

f010d760 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010d760:	6a 00                	push   $0x0
f010d762:	6a 2d                	push   $0x2d
f010d764:	eb 0c                	jmp    f010d772 <_alltraps>

f010d766 <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010d766:	6a 00                	push   $0x0
f010d768:	6a 2e                	push   $0x2e
f010d76a:	eb 06                	jmp    f010d772 <_alltraps>

f010d76c <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 		//the last IRQ
f010d76c:	6a 00                	push   $0x0
f010d76e:	6a 2f                	push   $0x2f
f010d770:	eb 00                	jmp    f010d772 <_alltraps>

f010d772 <_alltraps>:

/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:
push 	%ds
f010d772:	1e                   	push   %ds
push 	%es
f010d773:	06                   	push   %es
pushal
f010d774:	60                   	pusha  

mov 	$(GD_KD), %ax
f010d775:	66 b8 10 00          	mov    $0x10,%ax
mov 	%ax,%ds
f010d779:	8e d8                	mov    %eax,%ds
mov 	%ax,%es
f010d77b:	8e c0                	mov    %eax,%es

push 	%esp /* push the pointer to the tf into the stack to be passed as a param to the trap()*/
f010d77d:	54                   	push   %esp
call 	trap
f010d77e:	e8 d4 fd ff ff       	call   f010d557 <trap>

pop 	%ecx /* pop the pointer to the tf from the stack so that the stack top is at the beginning values of the registers pushed by pusha*/
f010d783:	59                   	pop    %ecx

f010d784 <trapret>:
.globl trapret
trapret:
popal
f010d784:	61                   	popa   
pop 	%es
f010d785:	07                   	pop    %es
pop 	%ds
f010d786:	1f                   	pop    %ds
add 	$(8),%esp /*skipping the trap_no and the error code so that the stack top is at the old eip value*/
f010d787:	83 c4 08             	add    $0x8,%esp
iret
f010d78a:	cf                   	iret   

f010d78b <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010d78b:	55                   	push   %ebp
f010d78c:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010d78e:	8b 45 08             	mov    0x8(%ebp),%eax
f010d791:	8b 15 20 4f 55 f0    	mov    0xf0554f20,%edx
f010d797:	29 d0                	sub    %edx,%eax
f010d799:	c1 f8 03             	sar    $0x3,%eax
f010d79c:	89 c2                	mov    %eax,%edx
f010d79e:	89 d0                	mov    %edx,%eax
f010d7a0:	c1 e0 02             	shl    $0x2,%eax
f010d7a3:	01 d0                	add    %edx,%eax
f010d7a5:	c1 e0 02             	shl    $0x2,%eax
f010d7a8:	01 d0                	add    %edx,%eax
f010d7aa:	c1 e0 02             	shl    $0x2,%eax
f010d7ad:	01 d0                	add    %edx,%eax
f010d7af:	89 c1                	mov    %eax,%ecx
f010d7b1:	c1 e1 08             	shl    $0x8,%ecx
f010d7b4:	01 c8                	add    %ecx,%eax
f010d7b6:	89 c1                	mov    %eax,%ecx
f010d7b8:	c1 e1 10             	shl    $0x10,%ecx
f010d7bb:	01 c8                	add    %ecx,%eax
f010d7bd:	01 c0                	add    %eax,%eax
f010d7bf:	01 d0                	add    %edx,%eax
}
f010d7c1:	5d                   	pop    %ebp
f010d7c2:	c3                   	ret    

f010d7c3 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010d7c3:	55                   	push   %ebp
f010d7c4:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010d7c6:	ff 75 08             	pushl  0x8(%ebp)
f010d7c9:	e8 bd ff ff ff       	call   f010d78b <to_frame_number>
f010d7ce:	83 c4 04             	add    $0x4,%esp
f010d7d1:	c1 e0 0c             	shl    $0xc,%eax
}
f010d7d4:	c9                   	leave  
f010d7d5:	c3                   	ret    

f010d7d6 <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010d7d6:	55                   	push   %ebp
f010d7d7:	89 e5                	mov    %esp,%ebp
f010d7d9:	83 ec 18             	sub    $0x18,%esp
f010d7dc:	8b 45 10             	mov    0x10(%ebp),%eax
f010d7df:	88 45 f4             	mov    %al,-0xc(%ebp)
	//2024 - better to use locks instead (to support multiprocessors)
	pushcli();	//disable interrupts
f010d7e2:	e8 d9 99 ff ff       	call   f01071c0 <pushcli>
		// Destroy the environment if not.

		// LAB 3: Your code here.

		// Print the string supplied by the user.
		if (printProgName)
f010d7e7:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010d7eb:	74 23                	je     f010d810 <sys_cputs+0x3a>
			cprintf("[%s %d] ",cur_env->prog_name, cur_env->env_id);
f010d7ed:	a1 c4 36 57 f0       	mov    0xf05736c4,%eax
f010d7f2:	8b 40 10             	mov    0x10(%eax),%eax
f010d7f5:	8b 15 c4 36 57 f0    	mov    0xf05736c4,%edx
f010d7fb:	83 c2 20             	add    $0x20,%edx
f010d7fe:	83 ec 04             	sub    $0x4,%esp
f010d801:	50                   	push   %eax
f010d802:	52                   	push   %edx
f010d803:	68 70 6b 12 f0       	push   $0xf0126b70
f010d808:	e8 5f 37 ff ff       	call   f0100f6c <cprintf>
f010d80d:	83 c4 10             	add    $0x10,%esp
		cprintf("%.*s",len, s);
f010d810:	83 ec 04             	sub    $0x4,%esp
f010d813:	ff 75 08             	pushl  0x8(%ebp)
f010d816:	ff 75 0c             	pushl  0xc(%ebp)
f010d819:	68 79 6b 12 f0       	push   $0xf0126b79
f010d81e:	e8 49 37 ff ff       	call   f0100f6c <cprintf>
f010d823:	83 c4 10             	add    $0x10,%esp
	}
	popcli();	//enable interrupts
f010d826:	e8 e7 99 ff ff       	call   f0107212 <popcli>
}
f010d82b:	90                   	nop
f010d82c:	c9                   	leave  
f010d82d:	c3                   	ret    

f010d82e <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010d82e:	55                   	push   %ebp
f010d82f:	89 e5                	mov    %esp,%ebp
f010d831:	83 ec 18             	sub    $0x18,%esp
f010d834:	8b 45 08             	mov    0x8(%ebp),%eax
f010d837:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010d83a:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010d83e:	83 ec 08             	sub    $0x8,%esp
f010d841:	50                   	push   %eax
f010d842:	68 7e 6b 12 f0       	push   $0xf0126b7e
f010d847:	e8 20 37 ff ff       	call   f0100f6c <cprintf>
f010d84c:	83 c4 10             	add    $0x10,%esp
}
f010d84f:	90                   	nop
f010d850:	c9                   	leave  
f010d851:	c3                   	ret    

f010d852 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010d852:	55                   	push   %ebp
f010d853:	89 e5                	mov    %esp,%ebp
f010d855:	83 ec 18             	sub    $0x18,%esp

static __inline uint32
read_eflags(void)
{
        uint32 eflags;
        __asm __volatile("pushfl; popl %0" : "=r" (eflags));
f010d858:	9c                   	pushf  
f010d859:	58                   	pop    %eax
f010d85a:	89 45 ec             	mov    %eax,-0x14(%ebp)
        return eflags;
f010d85d:	8b 45 ec             	mov    -0x14(%ebp),%eax
	int c;
	int IEN = read_eflags() & FL_IF;
f010d860:	25 00 02 00 00       	and    $0x200,%eax
f010d865:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if (IEN) /*Interrupt-Enabled I/O*/
f010d868:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010d86c:	74 10                	je     f010d87e <sys_cgetc+0x2c>
	{
		// The cons_getc2() primitive doesn't wait for a character
		while ((c = cons_getc2()) == 0)
f010d86e:	e8 32 35 ff ff       	call   f0100da5 <cons_getc2>
f010d873:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d876:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d87a:	74 f2                	je     f010d86e <sys_cgetc+0x1c>
f010d87c:	eb 0e                	jmp    f010d88c <sys_cgetc+0x3a>
	else	/*Programmed I/O*/
	{
		//cprintf("\n(((((((Programmed I/O))))))\n");
		// The cons_getc() primitive doesn't wait for a character,
		// but the sys_cgetc() system call does.
		while ((c = cons_getc()) == 0)
f010d87e:	e8 c7 34 ff ff       	call   f0100d4a <cons_getc>
f010d883:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d886:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d88a:	74 f2                	je     f010d87e <sys_cgetc+0x2c>
			/* do nothing */;
		}
	}
	//cprintf("\nCHAR %d is READ from KB, IEN = %d\n", c, read_eflags() & FL_IF);

	return c;
f010d88c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010d88f:	c9                   	leave  
f010d890:	c3                   	ret    

f010d891 <sys_lock_cons>:

//Lock the console so that no other processes can read from KB or output to the monitor
void sys_lock_cons(void)
{
f010d891:	55                   	push   %ebp
f010d892:	89 e5                	mov    %esp,%ebp
f010d894:	83 ec 08             	sub    $0x8,%esp
	cons_lock();
f010d897:	e8 f5 35 ff ff       	call   f0100e91 <cons_lock>
}
f010d89c:	90                   	nop
f010d89d:	c9                   	leave  
f010d89e:	c3                   	ret    

f010d89f <sys_unlock_cons>:
//Unlock the console so that other processes can read from KB or output to the monitor
void sys_unlock_cons(void)
{
f010d89f:	55                   	push   %ebp
f010d8a0:	89 e5                	mov    %esp,%ebp
f010d8a2:	83 ec 08             	sub    $0x8,%esp
	cons_unlock();
f010d8a5:	e8 2e 36 ff ff       	call   f0100ed8 <cons_unlock>
}
f010d8aa:	90                   	nop
f010d8ab:	c9                   	leave  
f010d8ac:	c3                   	ret    

f010d8ad <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010d8ad:	55                   	push   %ebp
f010d8ae:	89 e5                	mov    %esp,%ebp
f010d8b0:	83 ec 28             	sub    $0x28,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = cur_env;
f010d8b3:	a1 c4 36 57 f0       	mov    0xf05736c4,%eax
f010d8b8:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010d8bb:	83 ec 0c             	sub    $0xc,%esp
f010d8be:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010d8c1:	50                   	push   %eax
f010d8c2:	e8 09 a9 ff ff       	call   f01081d0 <allocate_frame>
f010d8c7:	83 c4 10             	add    $0x10,%esp
f010d8ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010d8cd:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010d8d1:	75 08                	jne    f010d8db <__sys_allocate_page+0x2e>
		return r ;
f010d8d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d8d6:	e9 d0 00 00 00       	jmp    f010d9ab <__sys_allocate_page+0xfe>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010d8db:	8b 45 08             	mov    0x8(%ebp),%eax
f010d8de:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010d8e3:	77 0c                	ja     f010d8f1 <__sys_allocate_page+0x44>
f010d8e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010d8e8:	25 ff 0f 00 00       	and    $0xfff,%eax
f010d8ed:	85 c0                	test   %eax,%eax
f010d8ef:	74 0a                	je     f010d8fb <__sys_allocate_page+0x4e>
		return E_INVAL;
f010d8f1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010d8f6:	e9 b0 00 00 00       	jmp    f010d9ab <__sys_allocate_page+0xfe>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010d8fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d8fe:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010d903:	83 f8 04             	cmp    $0x4,%eax
f010d906:	74 0a                	je     f010d912 <__sys_allocate_page+0x65>
		return E_INVAL;
f010d908:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010d90d:	e9 99 00 00 00       	jmp    f010d9ab <__sys_allocate_page+0xfe>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010d912:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d915:	83 ec 0c             	sub    $0xc,%esp
f010d918:	50                   	push   %eax
f010d919:	e8 a5 fe ff ff       	call   f010d7c3 <to_physical_address>
f010d91e:	83 c4 10             	add    $0x10,%esp
f010d921:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//return it to the original status
		ptr_frame_info->references -= 1;
	}
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
f010d924:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d927:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010d92a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d92d:	c1 e8 0c             	shr    $0xc,%eax
f010d930:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010d933:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f010d938:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d93b:	72 17                	jb     f010d954 <__sys_allocate_page+0xa7>
f010d93d:	ff 75 e8             	pushl  -0x18(%ebp)
f010d940:	68 84 6b 12 f0       	push   $0xf0126b84
f010d945:	68 b5 00 00 00       	push   $0xb5
f010d94a:	68 b3 6b 12 f0       	push   $0xf0126bb3
f010d94f:	e8 c6 29 ff ff       	call   f010031a <_panic>
f010d954:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d957:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010d95c:	83 ec 04             	sub    $0x4,%esp
f010d95f:	68 00 10 00 00       	push   $0x1000
f010d964:	6a 00                	push   $0x0
f010d966:	50                   	push   %eax
f010d967:	e8 0c 31 01 00       	call   f0120a78 <memset>
f010d96c:	83 c4 10             	add    $0x10,%esp
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010d96f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010d972:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010d975:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d978:	8b 40 64             	mov    0x64(%eax),%eax
f010d97b:	ff 75 0c             	pushl  0xc(%ebp)
f010d97e:	51                   	push   %ecx
f010d97f:	52                   	push   %edx
f010d980:	50                   	push   %eax
f010d981:	e8 60 ac ff ff       	call   f01085e6 <map_frame>
f010d986:	83 c4 10             	add    $0x10,%esp
f010d989:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010d98c:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010d990:	75 14                	jne    f010d9a6 <__sys_allocate_page+0xf9>
	{
		decrement_references(ptr_frame_info);
f010d992:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010d995:	83 ec 0c             	sub    $0xc,%esp
f010d998:	50                   	push   %eax
f010d999:	e8 3f aa ff ff       	call   f01083dd <decrement_references>
f010d99e:	83 c4 10             	add    $0x10,%esp
		return r;
f010d9a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d9a4:	eb 05                	jmp    f010d9ab <__sys_allocate_page+0xfe>
	}
	return 0 ;
f010d9a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d9ab:	c9                   	leave  
f010d9ac:	c3                   	ret    

f010d9ad <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010d9ad:	55                   	push   %ebp
f010d9ae:	89 e5                	mov    %esp,%ebp
f010d9b0:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010d9b3:	83 ec 04             	sub    $0x4,%esp
f010d9b6:	68 c7 6b 12 f0       	push   $0xf0126bc7
f010d9bb:	68 dc 00 00 00       	push   $0xdc
f010d9c0:	68 b3 6b 12 f0       	push   $0xf0126bb3
f010d9c5:	e8 50 29 ff ff       	call   f010031a <_panic>

f010d9ca <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010d9ca:	55                   	push   %ebp
f010d9cb:	89 e5                	mov    %esp,%ebp
f010d9cd:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010d9d0:	83 ec 04             	sub    $0x4,%esp
f010d9d3:	68 e8 6b 12 f0       	push   $0xf0126be8
f010d9d8:	68 ed 00 00 00       	push   $0xed
f010d9dd:	68 b3 6b 12 f0       	push   $0xf0126bb3
f010d9e2:	e8 33 29 ff ff       	call   f010031a <_panic>

f010d9e7 <sys_calculate_required_frames>:
	return 0;
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010d9e7:	55                   	push   %ebp
f010d9e8:	89 e5                	mov    %esp,%ebp
f010d9ea:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(cur_env->env_page_directory, start_virtual_address, size);
f010d9ed:	a1 c4 36 57 f0       	mov    0xf05736c4,%eax
f010d9f2:	8b 40 64             	mov    0x64(%eax),%eax
f010d9f5:	83 ec 04             	sub    $0x4,%esp
f010d9f8:	ff 75 0c             	pushl  0xc(%ebp)
f010d9fb:	ff 75 08             	pushl  0x8(%ebp)
f010d9fe:	50                   	push   %eax
f010d9ff:	e8 4e bd ff ff       	call   f0109752 <calculate_required_frames>
f010da04:	83 c4 10             	add    $0x10,%esp
}
f010da07:	c9                   	leave  
f010da08:	c3                   	ret    

f010da09 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010da09:	55                   	push   %ebp
f010da0a:	89 e5                	mov    %esp,%ebp
f010da0c:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010da0f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010da12:	83 ec 0c             	sub    $0xc,%esp
f010da15:	50                   	push   %eax
f010da16:	e8 83 ae ff ff       	call   f010889e <calculate_available_frames>
f010da1b:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010da1e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010da21:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010da24:	01 d0                	add    %edx,%eax
}
f010da26:	c9                   	leave  
f010da27:	c3                   	ret    

f010da28 <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010da28:	55                   	push   %ebp
f010da29:	89 e5                	mov    %esp,%ebp
f010da2b:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010da2e:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010da31:	83 ec 0c             	sub    $0xc,%esp
f010da34:	50                   	push   %eax
f010da35:	e8 64 ae ff ff       	call   f010889e <calculate_available_frames>
f010da3a:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010da3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010da40:	c9                   	leave  
f010da41:	c3                   	ret    

f010da42 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010da42:	55                   	push   %ebp
f010da43:	89 e5                	mov    %esp,%ebp
f010da45:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010da48:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010da4b:	83 ec 0c             	sub    $0xc,%esp
f010da4e:	50                   	push   %eax
f010da4f:	e8 4a ae ff ff       	call   f010889e <calculate_available_frames>
f010da54:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010da57:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010da5a:	c9                   	leave  
f010da5b:	c3                   	ret    

f010da5c <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010da5c:	55                   	push   %ebp
f010da5d:	89 e5                	mov    %esp,%ebp
f010da5f:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010da62:	83 ec 0c             	sub    $0xc,%esp
f010da65:	ff 75 08             	pushl  0x8(%ebp)
f010da68:	e8 96 1b 01 00       	call   f011f603 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010da6d:	83 c4 10             	add    $0x10,%esp
}
f010da70:	c9                   	leave  
f010da71:	c3                   	ret    

f010da72 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010da72:	55                   	push   %ebp
f010da73:	89 e5                	mov    %esp,%ebp
f010da75:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010da78:	e8 b1 1a 01 00       	call   f011f52e <scarce_memory>
}
f010da7d:	90                   	nop
f010da7e:	c9                   	leave  
f010da7f:	c3                   	ret    

f010da80 <sys_clearFFL>:

void sys_clearFFL()
{
f010da80:	55                   	push   %ebp
f010da81:	89 e5                	mov    %esp,%ebp
f010da83:	83 ec 18             	sub    $0x18,%esp
	int size;
	acquire_spinlock(&MemFrameLists.mfllock);
f010da86:	83 ec 0c             	sub    $0xc,%esp
f010da89:	68 40 25 55 f0       	push   $0xf0552540
f010da8e:	e8 44 10 00 00       	call   f010ead7 <acquire_spinlock>
f010da93:	83 c4 10             	add    $0x10,%esp
	{
		size = LIST_SIZE(&MemFrameLists.free_frame_list) ;
f010da96:	a1 2c 25 55 f0       	mov    0xf055252c,%eax
f010da9b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		struct FrameInfo* ptr_tmp_FI ;
		for (int i = 0; i < size ; i++)
f010da9e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010daa5:	eb 12                	jmp    f010dab9 <sys_clearFFL+0x39>
		{
			allocate_frame(&ptr_tmp_FI) ;
f010daa7:	83 ec 0c             	sub    $0xc,%esp
f010daaa:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010daad:	50                   	push   %eax
f010daae:	e8 1d a7 ff ff       	call   f01081d0 <allocate_frame>
f010dab3:	83 c4 10             	add    $0x10,%esp
	int size;
	acquire_spinlock(&MemFrameLists.mfllock);
	{
		size = LIST_SIZE(&MemFrameLists.free_frame_list) ;
		struct FrameInfo* ptr_tmp_FI ;
		for (int i = 0; i < size ; i++)
f010dab6:	ff 45 f4             	incl   -0xc(%ebp)
f010dab9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dabc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010dabf:	7c e6                	jl     f010daa7 <sys_clearFFL+0x27>
		{
			allocate_frame(&ptr_tmp_FI) ;
		}
	}
	release_spinlock(&MemFrameLists.mfllock);
f010dac1:	83 ec 0c             	sub    $0xc,%esp
f010dac4:	68 40 25 55 f0       	push   $0xf0552540
f010dac9:	e8 90 10 00 00       	call   f010eb5e <release_spinlock>
f010dace:	83 c4 10             	add    $0x10,%esp
}
f010dad1:	90                   	nop
f010dad2:	c9                   	leave  
f010dad3:	c3                   	ret    

f010dad4 <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010dad4:	55                   	push   %ebp
f010dad5:	89 e5                	mov    %esp,%ebp
f010dad7:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(cur_env);
f010dada:	a1 c4 36 57 f0       	mov    0xf05736c4,%eax
f010dadf:	83 ec 0c             	sub    $0xc,%esp
f010dae2:	50                   	push   %eax
f010dae3:	e8 87 6c ff ff       	call   f010476f <pf_calculate_allocated_pages>
f010dae8:	83 c4 10             	add    $0x10,%esp
}
f010daeb:	c9                   	leave  
f010daec:	c3                   	ret    

f010daed <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010daed:	55                   	push   %ebp
f010daee:	89 e5                	mov    %esp,%ebp
f010daf0:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010daf3:	e8 91 0c 00 00       	call   f010e789 <isBufferingEnabled>
f010daf8:	84 c0                	test   %al,%al
f010dafa:	74 19                	je     f010db15 <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(cur_env, virtual_address, size);
f010dafc:	a1 c4 36 57 f0       	mov    0xf05736c4,%eax
f010db01:	83 ec 04             	sub    $0x4,%esp
f010db04:	ff 75 0c             	pushl  0xc(%ebp)
f010db07:	ff 75 08             	pushl  0x8(%ebp)
f010db0a:	50                   	push   %eax
f010db0b:	e8 8d bc ff ff       	call   f010979d <__free_user_mem_with_buffering>
f010db10:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(cur_env, virtual_address, size);
	}
	return;
f010db13:	eb 18                	jmp    f010db2d <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(cur_env, virtual_address, size);
	}
	else
	{
		free_user_mem(cur_env, virtual_address, size);
f010db15:	a1 c4 36 57 f0       	mov    0xf05736c4,%eax
f010db1a:	83 ec 04             	sub    $0x4,%esp
f010db1d:	ff 75 0c             	pushl  0xc(%ebp)
f010db20:	ff 75 08             	pushl  0x8(%ebp)
f010db23:	50                   	push   %eax
f010db24:	e8 66 bc ff ff       	call   f010978f <free_user_mem>
f010db29:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010db2c:	90                   	nop
}
f010db2d:	c9                   	leave  
f010db2e:	c3                   	ret    

f010db2f <check_Param>:
void check_Param(uint32 virtual_address)
{
f010db2f:	55                   	push   %ebp
f010db30:	89 e5                	mov    %esp,%ebp
f010db32:	83 ec 08             	sub    $0x8,%esp
	if(virtual_address == 0)
f010db35:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010db39:	75 07                	jne    f010db42 <check_Param+0x13>
	{
		env_exit();
f010db3b:	e8 ee cb ff ff       	call   f010a72e <env_exit>
	}
	else if(virtual_address >= KERNEL_BASE)
	{
		env_exit();
	}
}
f010db40:	eb 25                	jmp    f010db67 <check_Param+0x38>
{
	if(virtual_address == 0)
	{
		env_exit();
	}
	else if(virtual_address <= USER_HEAP_MAX && virtual_address >= USER_HEAP_START)
f010db42:	81 7d 08 00 00 00 a0 	cmpl   $0xa0000000,0x8(%ebp)
f010db49:	77 0e                	ja     f010db59 <check_Param+0x2a>
f010db4b:	8b 45 08             	mov    0x8(%ebp),%eax
f010db4e:	85 c0                	test   %eax,%eax
f010db50:	79 07                	jns    f010db59 <check_Param+0x2a>
	{
		env_exit();
f010db52:	e8 d7 cb ff ff       	call   f010a72e <env_exit>
	}
	else if(virtual_address >= KERNEL_BASE)
	{
		env_exit();
	}
}
f010db57:	eb 0e                	jmp    f010db67 <check_Param+0x38>
	}
	else if(virtual_address <= USER_HEAP_MAX && virtual_address >= USER_HEAP_START)
	{
		env_exit();
	}
	else if(virtual_address >= KERNEL_BASE)
f010db59:	81 7d 08 ff ff ff ef 	cmpl   $0xefffffff,0x8(%ebp)
f010db60:	76 05                	jbe    f010db67 <check_Param+0x38>
	{
		env_exit();
f010db62:	e8 c7 cb ff ff       	call   f010a72e <env_exit>
	}
}
f010db67:	90                   	nop
f010db68:	c9                   	leave  
f010db69:	c3                   	ret    

f010db6a <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010db6a:	55                   	push   %ebp
f010db6b:	89 e5                	mov    %esp,%ebp
f010db6d:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #03] [2] SYSTEM CALLS - Params Validation
	check_Param(virtual_address);
f010db70:	83 ec 0c             	sub    $0xc,%esp
f010db73:	ff 75 08             	pushl  0x8(%ebp)
f010db76:	e8 b4 ff ff ff       	call   f010db2f <check_Param>
f010db7b:	83 c4 10             	add    $0x10,%esp

	allocate_user_mem(cur_env, virtual_address, size);
f010db7e:	a1 c4 36 57 f0       	mov    0xf05736c4,%eax
f010db83:	83 ec 04             	sub    $0x4,%esp
f010db86:	ff 75 0c             	pushl  0xc(%ebp)
f010db89:	ff 75 08             	pushl  0x8(%ebp)
f010db8c:	50                   	push   %eax
f010db8d:	e8 ef bb ff ff       	call   f0109781 <allocate_user_mem>
f010db92:	83 c4 10             	add    $0x10,%esp
	return;
f010db95:	90                   	nop
}
f010db96:	c9                   	leave  
f010db97:	c3                   	ret    

f010db98 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010db98:	55                   	push   %ebp
f010db99:	89 e5                	mov    %esp,%ebp
f010db9b:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #03] [2] SYSTEM CALLS - Params Validation
	check_Param(virtual_address);
f010db9e:	83 ec 0c             	sub    $0xc,%esp
f010dba1:	ff 75 08             	pushl  0x8(%ebp)
f010dba4:	e8 86 ff ff ff       	call   f010db2f <check_Param>
f010dba9:	83 c4 10             	add    $0x10,%esp

	allocate_chunk(cur_env->env_page_directory, virtual_address, size, perms);
f010dbac:	a1 c4 36 57 f0       	mov    0xf05736c4,%eax
f010dbb1:	8b 40 64             	mov    0x64(%eax),%eax
f010dbb4:	ff 75 10             	pushl  0x10(%ebp)
f010dbb7:	ff 75 0c             	pushl  0xc(%ebp)
f010dbba:	ff 75 08             	pushl  0x8(%ebp)
f010dbbd:	50                   	push   %eax
f010dbbe:	e8 5b bb ff ff       	call   f010971e <allocate_chunk>
f010dbc3:	83 c4 10             	add    $0x10,%esp
	return;
f010dbc6:	90                   	nop
}
f010dbc7:	c9                   	leave  
f010dbc8:	c3                   	ret    

f010dbc9 <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010dbc9:	55                   	push   %ebp
f010dbca:	89 e5                	mov    %esp,%ebp
f010dbcc:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(cur_env, src_virtual_address, dst_virtual_address, size);
f010dbcf:	a1 c4 36 57 f0       	mov    0xf05736c4,%eax
f010dbd4:	ff 75 10             	pushl  0x10(%ebp)
f010dbd7:	ff 75 0c             	pushl  0xc(%ebp)
f010dbda:	ff 75 08             	pushl  0x8(%ebp)
f010dbdd:	50                   	push   %eax
f010dbde:	e8 d7 bb ff ff       	call   f01097ba <move_user_mem>
f010dbe3:	83 c4 10             	add    $0x10,%esp
	return;
f010dbe6:	90                   	nop
}
f010dbe7:	c9                   	leave  
f010dbe8:	c3                   	ret    

f010dbe9 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010dbe9:	55                   	push   %ebp
f010dbea:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010dbec:	a1 04 4f 55 f0       	mov    0xf0554f04,%eax
}
f010dbf1:	5d                   	pop    %ebp
f010dbf2:	c3                   	ret    

f010dbf3 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010dbf3:	55                   	push   %ebp
f010dbf4:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010dbf6:	8b 45 08             	mov    0x8(%ebp),%eax
f010dbf9:	a3 04 4f 55 f0       	mov    %eax,0xf0554f04
}
f010dbfe:	90                   	nop
f010dbff:	5d                   	pop    %ebp
f010dc00:	c3                   	ret    

f010dc01 <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010dc01:	55                   	push   %ebp
f010dc02:	89 e5                	mov    %esp,%ebp
f010dc04:	83 ec 18             	sub    $0x18,%esp
f010dc07:	8b 45 10             	mov    0x10(%ebp),%eax
f010dc0a:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(cur_env->env_id, shareName, size, isWritable, virtual_address);
f010dc0d:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010dc11:	a1 c4 36 57 f0       	mov    0xf05736c4,%eax
f010dc16:	8b 40 10             	mov    0x10(%eax),%eax
f010dc19:	83 ec 0c             	sub    $0xc,%esp
f010dc1c:	ff 75 14             	pushl  0x14(%ebp)
f010dc1f:	52                   	push   %edx
f010dc20:	ff 75 0c             	pushl  0xc(%ebp)
f010dc23:	ff 75 08             	pushl  0x8(%ebp)
f010dc26:	50                   	push   %eax
f010dc27:	e8 dd ad ff ff       	call   f0108a09 <createSharedObject>
f010dc2c:	83 c4 20             	add    $0x20,%esp
}
f010dc2f:	c9                   	leave  
f010dc30:	c3                   	ret    

f010dc31 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010dc31:	55                   	push   %ebp
f010dc32:	89 e5                	mov    %esp,%ebp
f010dc34:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010dc37:	83 ec 08             	sub    $0x8,%esp
f010dc3a:	ff 75 0c             	pushl  0xc(%ebp)
f010dc3d:	ff 75 08             	pushl  0x8(%ebp)
f010dc40:	e8 e4 ad ff ff       	call   f0108a29 <getSizeOfSharedObject>
f010dc45:	83 c4 10             	add    $0x10,%esp
}
f010dc48:	c9                   	leave  
f010dc49:	c3                   	ret    

f010dc4a <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010dc4a:	55                   	push   %ebp
f010dc4b:	89 e5                	mov    %esp,%ebp
f010dc4d:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010dc50:	83 ec 04             	sub    $0x4,%esp
f010dc53:	ff 75 10             	pushl  0x10(%ebp)
f010dc56:	ff 75 0c             	pushl  0xc(%ebp)
f010dc59:	ff 75 08             	pushl  0x8(%ebp)
f010dc5c:	e8 f7 ad ff ff       	call   f0108a58 <getSharedObject>
f010dc61:	83 c4 10             	add    $0x10,%esp
}
f010dc64:	c9                   	leave  
f010dc65:	c3                   	ret    

f010dc66 <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010dc66:	55                   	push   %ebp
f010dc67:	89 e5                	mov    %esp,%ebp
f010dc69:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010dc6c:	83 ec 08             	sub    $0x8,%esp
f010dc6f:	ff 75 0c             	pushl  0xc(%ebp)
f010dc72:	ff 75 08             	pushl  0x8(%ebp)
f010dc75:	e8 fb ad ff ff       	call   f0108a75 <freeSharedObject>
f010dc7a:	83 c4 10             	add    $0x10,%esp
}
f010dc7d:	c9                   	leave  
f010dc7e:	c3                   	ret    

f010dc7f <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010dc7f:	55                   	push   %ebp
f010dc80:	89 e5                	mov    %esp,%ebp
	return cur_env->env_id;
f010dc82:	a1 c4 36 57 f0       	mov    0xf05736c4,%eax
f010dc87:	8b 40 10             	mov    0x10(%eax),%eax
}
f010dc8a:	5d                   	pop    %ebp
f010dc8b:	c3                   	ret    

f010dc8c <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010dc8c:	55                   	push   %ebp
f010dc8d:	89 e5                	mov    %esp,%ebp
	//return cur_env->env_id;
	return (cur_env - envs) ;
f010dc8f:	a1 c4 36 57 f0       	mov    0xf05736c4,%eax
f010dc94:	89 c2                	mov    %eax,%edx
f010dc96:	a1 10 1a 55 f0       	mov    0xf0551a10,%eax
f010dc9b:	29 c2                	sub    %eax,%edx
f010dc9d:	89 d0                	mov    %edx,%eax
f010dc9f:	c1 f8 02             	sar    $0x2,%eax
f010dca2:	89 c2                	mov    %eax,%edx
f010dca4:	89 d0                	mov    %edx,%eax
f010dca6:	c1 e0 02             	shl    $0x2,%eax
f010dca9:	01 d0                	add    %edx,%eax
f010dcab:	c1 e0 02             	shl    $0x2,%eax
f010dcae:	01 d0                	add    %edx,%eax
f010dcb0:	c1 e0 02             	shl    $0x2,%eax
f010dcb3:	01 d0                	add    %edx,%eax
f010dcb5:	c1 e0 02             	shl    $0x2,%eax
f010dcb8:	01 d0                	add    %edx,%eax
f010dcba:	c1 e0 08             	shl    $0x8,%eax
f010dcbd:	29 d0                	sub    %edx,%eax
f010dcbf:	c1 e0 08             	shl    $0x8,%eax
f010dcc2:	29 d0                	sub    %edx,%eax
f010dcc4:	c1 e0 03             	shl    $0x3,%eax
f010dcc7:	01 d0                	add    %edx,%eax
f010dcc9:	c1 e0 03             	shl    $0x3,%eax
f010dccc:	01 d0                	add    %edx,%eax
f010dcce:	01 c0                	add    %eax,%eax
f010dcd0:	01 d0                	add    %edx,%eax
}
f010dcd2:	5d                   	pop    %ebp
f010dcd3:	c3                   	ret    

f010dcd4 <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010dcd4:	55                   	push   %ebp
f010dcd5:	89 e5                	mov    %esp,%ebp
	return cur_env->env_parent_id;
f010dcd7:	a1 c4 36 57 f0       	mov    0xf05736c4,%eax
f010dcdc:	8b 40 14             	mov    0x14(%eax),%eax
}
f010dcdf:	5d                   	pop    %ebp
f010dce0:	c3                   	ret    

f010dce1 <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010dce1:	55                   	push   %ebp
f010dce2:	89 e5                	mov    %esp,%ebp
f010dce4:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010dce7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010dceb:	75 0a                	jne    f010dcf7 <sys_destroy_env+0x16>
	{
		e = cur_env ;
f010dced:	a1 c4 36 57 f0       	mov    0xf05736c4,%eax
f010dcf2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010dcf5:	eb 22                	jmp    f010dd19 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010dcf7:	83 ec 04             	sub    $0x4,%esp
f010dcfa:	6a 00                	push   $0x0
f010dcfc:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010dcff:	50                   	push   %eax
f010dd00:	ff 75 08             	pushl  0x8(%ebp)
f010dd03:	e8 b8 ca ff ff       	call   f010a7c0 <envid2env>
f010dd08:	83 c4 10             	add    $0x10,%esp
f010dd0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010dd0e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010dd12:	79 05                	jns    f010dd19 <sys_destroy_env+0x38>
	{
		return r;
f010dd14:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010dd17:	eb 5e                	jmp    f010dd77 <sys_destroy_env+0x96>
	}

	if (e == cur_env)
f010dd19:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010dd1c:	a1 c4 36 57 f0       	mov    0xf05736c4,%eax
f010dd21:	39 c2                	cmp    %eax,%edx
f010dd23:	75 1b                	jne    f010dd40 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", cur_env->env_id);
f010dd25:	a1 c4 36 57 f0       	mov    0xf05736c4,%eax
f010dd2a:	8b 40 10             	mov    0x10(%eax),%eax
f010dd2d:	83 ec 08             	sub    $0x8,%esp
f010dd30:	50                   	push   %eax
f010dd31:	68 07 6c 12 f0       	push   $0xf0126c07
f010dd36:	e8 31 32 ff ff       	call   f0100f6c <cprintf>
f010dd3b:	83 c4 10             	add    $0x10,%esp
f010dd3e:	eb 20                	jmp    f010dd60 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", cur_env->env_id, e->env_id);
f010dd40:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dd43:	8b 50 10             	mov    0x10(%eax),%edx
f010dd46:	a1 c4 36 57 f0       	mov    0xf05736c4,%eax
f010dd4b:	8b 40 10             	mov    0x10(%eax),%eax
f010dd4e:	83 ec 04             	sub    $0x4,%esp
f010dd51:	52                   	push   %edx
f010dd52:	50                   	push   %eax
f010dd53:	68 22 6c 12 f0       	push   $0xf0126c22
f010dd58:	e8 0f 32 ff ff       	call   f0100f6c <cprintf>
f010dd5d:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010dd60:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010dd63:	8b 40 10             	mov    0x10(%eax),%eax
f010dd66:	83 ec 0c             	sub    $0xc,%esp
f010dd69:	50                   	push   %eax
f010dd6a:	e8 f4 7c ff ff       	call   f0105a63 <sched_kill_env>
f010dd6f:	83 c4 10             	add    $0x10,%esp

	return 0;
f010dd72:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010dd77:	c9                   	leave  
f010dd78:	c3                   	ret    

f010dd79 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010dd79:	55                   	push   %ebp
f010dd7a:	89 e5                	mov    %esp,%ebp
f010dd7c:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010dd7f:	e8 aa c9 ff ff       	call   f010a72e <env_exit>

	//2024: if returned here, then it's not the current environment. So, just return
	//env_run_cmd_prmpt();
	//context_switch(&(cur_env->context), mycpu()->scheduler);

}
f010dd84:	90                   	nop
f010dd85:	c9                   	leave  
f010dd86:	c3                   	ret    

f010dd87 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010dd87:	55                   	push   %ebp
f010dd88:	89 e5                	mov    %esp,%ebp
f010dd8a:	83 ec 18             	sub    $0x18,%esp
	//cprintf("\nAttempt to create a new env\n");

	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010dd8d:	ff 75 14             	pushl  0x14(%ebp)
f010dd90:	ff 75 10             	pushl  0x10(%ebp)
f010dd93:	ff 75 0c             	pushl  0xc(%ebp)
f010dd96:	ff 75 08             	pushl  0x8(%ebp)
f010dd99:	e8 d2 bc ff ff       	call   f0109a70 <env_create>
f010dd9e:	83 c4 10             	add    $0x10,%esp
f010dda1:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010dda4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010dda8:	75 07                	jne    f010ddb1 <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010ddaa:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010ddaf:	eb 14                	jmp    f010ddc5 <sys_create_env+0x3e>
	}
	//cprintf("\nENV %d is created\n", env->env_id);

	//2015
	sched_new_env(env);
f010ddb1:	83 ec 0c             	sub    $0xc,%esp
f010ddb4:	ff 75 f4             	pushl  -0xc(%ebp)
f010ddb7:	e8 e9 78 ff ff       	call   f01056a5 <sched_new_env>
f010ddbc:	83 c4 10             	add    $0x10,%esp

	//cprintf("\nENV %d is scheduled as NEW\n", env->env_id);

	return env->env_id;
f010ddbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ddc2:	8b 40 10             	mov    0x10(%eax),%eax
}
f010ddc5:	c9                   	leave  
f010ddc6:	c3                   	ret    

f010ddc7 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010ddc7:	55                   	push   %ebp
f010ddc8:	89 e5                	mov    %esp,%ebp
f010ddca:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010ddcd:	8b 45 08             	mov    0x8(%ebp),%eax
f010ddd0:	83 ec 0c             	sub    $0xc,%esp
f010ddd3:	50                   	push   %eax
f010ddd4:	e8 22 79 ff ff       	call   f01056fb <sched_run_env>
f010ddd9:	83 c4 10             	add    $0x10,%esp
}
f010dddc:	90                   	nop
f010dddd:	c9                   	leave  
f010ddde:	c3                   	ret    

f010dddf <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010dddf:	55                   	push   %ebp
f010dde0:	89 e5                	mov    %esp,%ebp
f010dde2:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010dde5:	0f 31                	rdtsc  
f010dde7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010ddea:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010dded:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ddf0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ddf3:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010ddf6:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010ddf9:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010ddfc:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010ddff:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010de02:	89 01                	mov    %eax,(%ecx)
f010de04:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010de07:	8b 45 08             	mov    0x8(%ebp),%eax
f010de0a:	c9                   	leave  
f010de0b:	c2 04 00             	ret    $0x4

f010de0e <sys_rcr2>:

uint32 sys_rcr2()
{
f010de0e:	55                   	push   %ebp
f010de0f:	89 e5                	mov    %esp,%ebp
f010de11:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010de14:	0f 20 d0             	mov    %cr2,%eax
f010de17:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010de1a:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010de1d:	90                   	nop
}
f010de1e:	c9                   	leave  
f010de1f:	c3                   	ret    

f010de20 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010de20:	55                   	push   %ebp
f010de21:	89 e5                	mov    %esp,%ebp
f010de23:	83 ec 04             	sub    $0x4,%esp
f010de26:	8b 45 08             	mov    0x8(%ebp),%eax
f010de29:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010de2c:	8a 45 fc             	mov    -0x4(%ebp),%al
f010de2f:	a2 80 22 55 f0       	mov    %al,0xf0552280
}
f010de34:	90                   	nop
f010de35:	c9                   	leave  
f010de36:	c3                   	ret    

f010de37 <syscall>:
/**************************************************************************/
/************************* SYSTEM CALLS HANDLER ***************************/
/**************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010de37:	55                   	push   %ebp
f010de38:	89 e5                	mov    %esp,%ebp
f010de3a:	56                   	push   %esi
f010de3b:	53                   	push   %ebx
f010de3c:	83 ec 10             	sub    $0x10,%esp
	cur_env = get_cpu_proc();
f010de3f:	e8 2c c9 ff ff       	call   f010a770 <get_cpu_proc>
f010de44:	a3 c4 36 57 f0       	mov    %eax,0xf05736c4
	assert(cur_env != NULL);
f010de49:	a1 c4 36 57 f0       	mov    0xf05736c4,%eax
f010de4e:	85 c0                	test   %eax,%eax
f010de50:	75 19                	jne    f010de6b <syscall+0x34>
f010de52:	68 3a 6c 12 f0       	push   $0xf0126c3a
f010de57:	68 4a 6c 12 f0       	push   $0xf0126c4a
f010de5c:	68 06 02 00 00       	push   $0x206
f010de61:	68 b3 6b 12 f0       	push   $0xf0126bb3
f010de66:	e8 af 24 ff ff       	call   f010031a <_panic>

	//cprintf("syscallno = %d\n", syscallno);
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	switch(syscallno)
f010de6b:	83 7d 08 2b          	cmpl   $0x2b,0x8(%ebp)
f010de6f:	0f 87 bc 03 00 00    	ja     f010e231 <syscall+0x3fa>
f010de75:	8b 45 08             	mov    0x8(%ebp),%eax
f010de78:	c1 e0 02             	shl    $0x2,%eax
f010de7b:	05 60 6c 12 f0       	add    $0xf0126c60,%eax
f010de80:	8b 00                	mov    (%eax),%eax
f010de82:	ff e0                	jmp    *%eax
	{
	//TODO: [PROJECT'24.MS1 - #02] [2] SYSTEM CALLS - Add suitable code here

	//======================================================================
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010de84:	8b 45 14             	mov    0x14(%ebp),%eax
f010de87:	0f b6 d0             	movzbl %al,%edx
f010de8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010de8d:	83 ec 04             	sub    $0x4,%esp
f010de90:	52                   	push   %edx
f010de91:	ff 75 10             	pushl  0x10(%ebp)
f010de94:	50                   	push   %eax
f010de95:	e8 3c f9 ff ff       	call   f010d7d6 <sys_cputs>
f010de9a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010de9d:	b8 00 00 00 00       	mov    $0x0,%eax
f010dea2:	e9 8f 03 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010dea7:	e8 a6 f9 ff ff       	call   f010d852 <sys_cgetc>
f010deac:	e9 85 03 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_lock_cons:
		sys_lock_cons();
f010deb1:	e8 db f9 ff ff       	call   f010d891 <sys_lock_cons>
		return 0;
f010deb6:	b8 00 00 00 00       	mov    $0x0,%eax
f010debb:	e9 76 03 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_unlock_cons:
		sys_unlock_cons();
f010dec0:	e8 da f9 ff ff       	call   f010d89f <sys_unlock_cons>
		return 0;
f010dec5:	b8 00 00 00 00       	mov    $0x0,%eax
f010deca:	e9 67 03 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010decf:	83 ec 08             	sub    $0x8,%esp
f010ded2:	ff 75 10             	pushl  0x10(%ebp)
f010ded5:	ff 75 0c             	pushl  0xc(%ebp)
f010ded8:	e8 0a fb ff ff       	call   f010d9e7 <sys_calculate_required_frames>
f010dedd:	83 c4 10             	add    $0x10,%esp
f010dee0:	e9 51 03 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010dee5:	e8 1f fb ff ff       	call   f010da09 <sys_calculate_free_frames>
f010deea:	e9 47 03 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010deef:	e8 34 fb ff ff       	call   f010da28 <sys_calculate_modified_frames>
f010def4:	e9 3d 03 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010def9:	e8 44 fb ff ff       	call   f010da42 <sys_calculate_notmod_frames>
f010defe:	e9 33 03 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010df03:	e8 cc fb ff ff       	call   f010dad4 <sys_pf_calculate_allocated_pages>
f010df08:	e9 29 03 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010df0d:	83 ec 0c             	sub    $0xc,%esp
f010df10:	ff 75 0c             	pushl  0xc(%ebp)
f010df13:	e8 44 fb ff ff       	call   f010da5c <sys_calculate_pages_tobe_removed_ready_exit>
f010df18:	83 c4 10             	add    $0x10,%esp
f010df1b:	e9 16 03 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010df20:	e8 4d fb ff ff       	call   f010da72 <sys_scarce_memory>
		return 0;
f010df25:	b8 00 00 00 00       	mov    $0x0,%eax
f010df2a:	e9 07 03 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010df2f:	83 ec 04             	sub    $0x4,%esp
f010df32:	ff 75 14             	pushl  0x14(%ebp)
f010df35:	ff 75 10             	pushl  0x10(%ebp)
f010df38:	ff 75 0c             	pushl  0xc(%ebp)
f010df3b:	e8 58 fc ff ff       	call   f010db98 <sys_allocate_chunk>
f010df40:	83 c4 10             	add    $0x10,%esp
		return 0;
f010df43:	b8 00 00 00 00       	mov    $0x0,%eax
f010df48:	e9 e9 02 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;

		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010df4d:	8b 55 10             	mov    0x10(%ebp),%edx
f010df50:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df53:	83 ec 08             	sub    $0x8,%esp
f010df56:	52                   	push   %edx
f010df57:	50                   	push   %eax
f010df58:	e8 50 f9 ff ff       	call   f010d8ad <__sys_allocate_page>
f010df5d:	83 c4 10             	add    $0x10,%esp
		return 0;
f010df60:	b8 00 00 00 00       	mov    $0x0,%eax
f010df65:	e9 cc 02 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010df6a:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010df6d:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010df70:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010df73:	8b 55 10             	mov    0x10(%ebp),%edx
f010df76:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df79:	83 ec 0c             	sub    $0xc,%esp
f010df7c:	56                   	push   %esi
f010df7d:	53                   	push   %ebx
f010df7e:	51                   	push   %ecx
f010df7f:	52                   	push   %edx
f010df80:	50                   	push   %eax
f010df81:	e8 27 fa ff ff       	call   f010d9ad <__sys_map_frame>
f010df86:	83 c4 20             	add    $0x20,%esp
		return 0;
f010df89:	b8 00 00 00 00       	mov    $0x0,%eax
f010df8e:	e9 a3 02 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010df93:	8b 55 10             	mov    0x10(%ebp),%edx
f010df96:	8b 45 0c             	mov    0xc(%ebp),%eax
f010df99:	83 ec 08             	sub    $0x8,%esp
f010df9c:	52                   	push   %edx
f010df9d:	50                   	push   %eax
f010df9e:	e8 27 fa ff ff       	call   f010d9ca <__sys_unmap_frame>
f010dfa3:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dfa6:	b8 00 00 00 00       	mov    $0x0,%eax
f010dfab:	e9 86 02 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010dfb0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfb3:	0f be c0             	movsbl %al,%eax
f010dfb6:	83 ec 0c             	sub    $0xc,%esp
f010dfb9:	50                   	push   %eax
f010dfba:	e8 6f f8 ff ff       	call   f010d82e <sys_cputc>
f010dfbf:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dfc2:	b8 00 00 00 00       	mov    $0x0,%eax
f010dfc7:	e9 6a 02 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010dfcc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dfcf:	0f be c0             	movsbl %al,%eax
f010dfd2:	83 ec 0c             	sub    $0xc,%esp
f010dfd5:	50                   	push   %eax
f010dfd6:	e8 a5 fa ff ff       	call   f010da80 <sys_clearFFL>
f010dfdb:	83 c4 10             	add    $0x10,%esp
		return 0;
f010dfde:	b8 00 00 00 00       	mov    $0x0,%eax
f010dfe3:	e9 4e 02 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010dfe8:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010dfeb:	8b 45 14             	mov    0x14(%ebp),%eax
f010dfee:	0f b6 d0             	movzbl %al,%edx
f010dff1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010dff4:	51                   	push   %ecx
f010dff5:	52                   	push   %edx
f010dff6:	ff 75 10             	pushl  0x10(%ebp)
f010dff9:	50                   	push   %eax
f010dffa:	e8 02 fc ff ff       	call   f010dc01 <sys_createSharedObject>
f010dfff:	83 c4 10             	add    $0x10,%esp
f010e002:	e9 2f 02 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010e007:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010e00a:	8b 55 10             	mov    0x10(%ebp),%edx
f010e00d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e010:	83 ec 04             	sub    $0x4,%esp
f010e013:	51                   	push   %ecx
f010e014:	52                   	push   %edx
f010e015:	50                   	push   %eax
f010e016:	e8 2f fc ff ff       	call   f010dc4a <sys_getSharedObject>
f010e01b:	83 c4 10             	add    $0x10,%esp
f010e01e:	e9 13 02 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010e023:	8b 55 10             	mov    0x10(%ebp),%edx
f010e026:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e029:	83 ec 08             	sub    $0x8,%esp
f010e02c:	52                   	push   %edx
f010e02d:	50                   	push   %eax
f010e02e:	e8 33 fc ff ff       	call   f010dc66 <sys_freeSharedObject>
f010e033:	83 c4 10             	add    $0x10,%esp
f010e036:	e9 fb 01 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010e03b:	8b 55 10             	mov    0x10(%ebp),%edx
f010e03e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e041:	83 ec 08             	sub    $0x8,%esp
f010e044:	52                   	push   %edx
f010e045:	50                   	push   %eax
f010e046:	e8 e6 fb ff ff       	call   f010dc31 <sys_getSizeOfSharedObject>
f010e04b:	83 c4 10             	add    $0x10,%esp
f010e04e:	e9 e3 01 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010e053:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e056:	ff 75 18             	pushl  0x18(%ebp)
f010e059:	ff 75 14             	pushl  0x14(%ebp)
f010e05c:	ff 75 10             	pushl  0x10(%ebp)
f010e05f:	50                   	push   %eax
f010e060:	e8 22 fd ff ff       	call   f010dd87 <sys_create_env>
f010e065:	83 c4 10             	add    $0x10,%esp
f010e068:	e9 c9 01 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010e06d:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e070:	83 ec 0c             	sub    $0xc,%esp
f010e073:	50                   	push   %eax
f010e074:	e8 4e fd ff ff       	call   f010ddc7 <sys_run_env>
f010e079:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e07c:	b8 00 00 00 00       	mov    $0x0,%eax
f010e081:	e9 b0 01 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010e086:	e8 01 fc ff ff       	call   f010dc8c <sys_getenvindex>
f010e08b:	e9 a6 01 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010e090:	e8 ea fb ff ff       	call   f010dc7f <sys_getenvid>
f010e095:	e9 9c 01 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010e09a:	e8 35 fc ff ff       	call   f010dcd4 <sys_getparentenvid>
f010e09f:	e9 92 01 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010e0a4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0a7:	83 ec 0c             	sub    $0xc,%esp
f010e0aa:	50                   	push   %eax
f010e0ab:	e8 31 fc ff ff       	call   f010dce1 <sys_destroy_env>
f010e0b0:	83 c4 10             	add    $0x10,%esp
f010e0b3:	e9 7e 01 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010e0b8:	e8 bc fc ff ff       	call   f010dd79 <sys_exit_env>
		return 0;
f010e0bd:	b8 00 00 00 00       	mov    $0x0,%eax
f010e0c2:	e9 6f 01 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010e0c7:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010e0ca:	83 ec 0c             	sub    $0xc,%esp
f010e0cd:	50                   	push   %eax
f010e0ce:	e8 0c fd ff ff       	call   f010dddf <sys_get_virtual_time>
f010e0d3:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010e0d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e0d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010e0dc:	8b 45 10             	mov    0x10(%ebp),%eax
f010e0df:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010e0e2:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010e0e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e0e8:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010e0ea:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e0ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e0f0:	89 10                	mov    %edx,(%eax)
		return 0;
f010e0f2:	b8 00 00 00 00       	mov    $0x0,%eax
f010e0f7:	e9 3a 01 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010e0fc:	83 ec 04             	sub    $0x4,%esp
f010e0ff:	ff 75 14             	pushl  0x14(%ebp)
f010e102:	ff 75 10             	pushl  0x10(%ebp)
f010e105:	ff 75 0c             	pushl  0xc(%ebp)
f010e108:	e8 bc fa ff ff       	call   f010dbc9 <sys_move_user_mem>
f010e10d:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e110:	b8 00 00 00 00       	mov    $0x0,%eax
f010e115:	e9 1c 01 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010e11a:	e8 ef fc ff ff       	call   f010de0e <sys_rcr2>
f010e11f:	e9 12 01 00 00       	jmp    f010e236 <syscall+0x3ff>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010e124:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e127:	0f b6 c0             	movzbl %al,%eax
f010e12a:	83 ec 0c             	sub    $0xc,%esp
f010e12d:	50                   	push   %eax
f010e12e:	e8 ed fc ff ff       	call   f010de20 <sys_bypassPageFault>
f010e133:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e136:	b8 00 00 00 00       	mov    $0x0,%eax
f010e13b:	e9 f6 00 00 00       	jmp    f010e236 <syscall+0x3ff>

	case SYS_rsttst:
		rsttst();
f010e140:	e8 f4 0c 01 00       	call   f011ee39 <rsttst>
		return 0;
f010e145:	b8 00 00 00 00       	mov    $0x0,%eax
f010e14a:	e9 e7 00 00 00       	jmp    f010e236 <syscall+0x3ff>
	case SYS_inctst:
		inctst();
f010e14f:	e8 2d 0d 01 00       	call   f011ee81 <inctst>
		return 0;
f010e154:	b8 00 00 00 00       	mov    $0x0,%eax
f010e159:	e9 d8 00 00 00       	jmp    f010e236 <syscall+0x3ff>
	case SYS_chktst:
		chktst(a1);
f010e15e:	83 ec 0c             	sub    $0xc,%esp
f010e161:	ff 75 0c             	pushl  0xc(%ebp)
f010e164:	e8 5a 0e 01 00       	call   f011efc3 <chktst>
f010e169:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e16c:	b8 00 00 00 00       	mov    $0x0,%eax
f010e171:	e9 c0 00 00 00       	jmp    f010e236 <syscall+0x3ff>
	case SYS_gettst:
		return gettst();
f010e176:	e8 3a 0d 01 00       	call   f011eeb5 <gettst>
f010e17b:	e9 b6 00 00 00       	jmp    f010e236 <syscall+0x3ff>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010e180:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010e183:	8b 45 18             	mov    0x18(%ebp),%eax
f010e186:	0f be c0             	movsbl %al,%eax
f010e189:	83 ec 0c             	sub    $0xc,%esp
f010e18c:	52                   	push   %edx
f010e18d:	50                   	push   %eax
f010e18e:	ff 75 14             	pushl  0x14(%ebp)
f010e191:	ff 75 10             	pushl  0x10(%ebp)
f010e194:	ff 75 0c             	pushl  0xc(%ebp)
f010e197:	e8 23 0d 01 00       	call   f011eebf <tst>
f010e19c:	83 c4 20             	add    $0x20,%esp
		return 0;
f010e19f:	b8 00 00 00 00       	mov    $0x0,%eax
f010e1a4:	e9 8d 00 00 00       	jmp    f010e236 <syscall+0x3ff>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010e1a9:	e8 3b fa ff ff       	call   f010dbe9 <sys_get_heap_strategy>
f010e1ae:	e9 83 00 00 00       	jmp    f010e236 <syscall+0x3ff>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010e1b3:	83 ec 0c             	sub    $0xc,%esp
f010e1b6:	ff 75 0c             	pushl  0xc(%ebp)
f010e1b9:	e8 35 fa ff ff       	call   f010dbf3 <sys_set_uheap_strategy>
f010e1be:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e1c1:	b8 00 00 00 00       	mov    $0x0,%eax
f010e1c6:	eb 6e                	jmp    f010e236 <syscall+0x3ff>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010e1c8:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010e1cb:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010e1ce:	8b 55 10             	mov    0x10(%ebp),%edx
f010e1d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1d4:	53                   	push   %ebx
f010e1d5:	51                   	push   %ecx
f010e1d6:	52                   	push   %edx
f010e1d7:	50                   	push   %eax
f010e1d8:	e8 73 31 00 00       	call   f0111350 <sys_check_LRU_lists>
f010e1dd:	83 c4 10             	add    $0x10,%esp
f010e1e0:	eb 54                	jmp    f010e236 <syscall+0x3ff>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010e1e2:	8b 55 10             	mov    0x10(%ebp),%edx
f010e1e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e1e8:	83 ec 08             	sub    $0x8,%esp
f010e1eb:	52                   	push   %edx
f010e1ec:	50                   	push   %eax
f010e1ed:	e8 20 33 00 00       	call   f0111512 <sys_check_LRU_lists_free>
f010e1f2:	83 c4 10             	add    $0x10,%esp
f010e1f5:	eb 3f                	jmp    f010e236 <syscall+0x3ff>

	case SYS_check_WS_list:
		return sys_check_WS_list((uint32*)a1, (int)a2, (uint32)a3, (bool)a4);
f010e1f7:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010e1fa:	8b 55 10             	mov    0x10(%ebp),%edx
f010e1fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e200:	51                   	push   %ecx
f010e201:	ff 75 14             	pushl  0x14(%ebp)
f010e204:	52                   	push   %edx
f010e205:	50                   	push   %eax
f010e206:	e8 94 34 00 00       	call   f011169f <sys_check_WS_list>
f010e20b:	83 c4 10             	add    $0x10,%esp
f010e20e:	eb 26                	jmp    f010e236 <syscall+0x3ff>

	case SYS_utilities:
		sys_utilities((char*)a1, (int)a2);
f010e210:	8b 55 10             	mov    0x10(%ebp),%edx
f010e213:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e216:	83 ec 08             	sub    $0x8,%esp
f010e219:	52                   	push   %edx
f010e21a:	50                   	push   %eax
f010e21b:	e8 a4 0f 01 00       	call   f011f1c4 <sys_utilities>
f010e220:	83 c4 10             	add    $0x10,%esp
		return 0;
f010e223:	b8 00 00 00 00       	mov    $0x0,%eax
f010e228:	eb 0c                	jmp    f010e236 <syscall+0x3ff>

	case NSYSCALLS:
		return 	-E_INVAL;
f010e22a:	b8 03 00 00 00       	mov    $0x3,%eax
f010e22f:	eb 05                	jmp    f010e236 <syscall+0x3ff>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010e231:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010e236:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010e239:	5b                   	pop    %ebx
f010e23a:	5e                   	pop    %esi
f010e23b:	5d                   	pop    %ebp
f010e23c:	c3                   	ret    

f010e23d <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010e23d:	55                   	push   %ebp
f010e23e:	89 e5                	mov    %esp,%ebp
f010e240:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010e243:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e246:	8b 00                	mov    (%eax),%eax
f010e248:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010e24b:	8b 45 10             	mov    0x10(%ebp),%eax
f010e24e:	8b 00                	mov    (%eax),%eax
f010e250:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010e253:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010e25a:	e9 ca 00 00 00       	jmp    f010e329 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010e25f:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010e262:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010e265:	01 d0                	add    %edx,%eax
f010e267:	89 c2                	mov    %eax,%edx
f010e269:	c1 ea 1f             	shr    $0x1f,%edx
f010e26c:	01 d0                	add    %edx,%eax
f010e26e:	d1 f8                	sar    %eax
f010e270:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010e273:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e276:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010e279:	eb 03                	jmp    f010e27e <stab_binsearch+0x41>
			m--;
f010e27b:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010e27e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e281:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010e284:	7c 1e                	jl     f010e2a4 <stab_binsearch+0x67>
f010e286:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e289:	89 d0                	mov    %edx,%eax
f010e28b:	01 c0                	add    %eax,%eax
f010e28d:	01 d0                	add    %edx,%eax
f010e28f:	c1 e0 02             	shl    $0x2,%eax
f010e292:	89 c2                	mov    %eax,%edx
f010e294:	8b 45 08             	mov    0x8(%ebp),%eax
f010e297:	01 d0                	add    %edx,%eax
f010e299:	8a 40 04             	mov    0x4(%eax),%al
f010e29c:	0f b6 c0             	movzbl %al,%eax
f010e29f:	3b 45 14             	cmp    0x14(%ebp),%eax
f010e2a2:	75 d7                	jne    f010e27b <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010e2a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e2a7:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010e2aa:	7d 09                	jge    f010e2b5 <stab_binsearch+0x78>
			l = true_m + 1;
f010e2ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e2af:	40                   	inc    %eax
f010e2b0:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010e2b3:	eb 74                	jmp    f010e329 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010e2b5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010e2bc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e2bf:	89 d0                	mov    %edx,%eax
f010e2c1:	01 c0                	add    %eax,%eax
f010e2c3:	01 d0                	add    %edx,%eax
f010e2c5:	c1 e0 02             	shl    $0x2,%eax
f010e2c8:	89 c2                	mov    %eax,%edx
f010e2ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2cd:	01 d0                	add    %edx,%eax
f010e2cf:	8b 40 08             	mov    0x8(%eax),%eax
f010e2d2:	3b 45 18             	cmp    0x18(%ebp),%eax
f010e2d5:	73 11                	jae    f010e2e8 <stab_binsearch+0xab>
			*region_left = m;
f010e2d7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e2da:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e2dd:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010e2df:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e2e2:	40                   	inc    %eax
f010e2e3:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010e2e6:	eb 41                	jmp    f010e329 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010e2e8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e2eb:	89 d0                	mov    %edx,%eax
f010e2ed:	01 c0                	add    %eax,%eax
f010e2ef:	01 d0                	add    %edx,%eax
f010e2f1:	c1 e0 02             	shl    $0x2,%eax
f010e2f4:	89 c2                	mov    %eax,%edx
f010e2f6:	8b 45 08             	mov    0x8(%ebp),%eax
f010e2f9:	01 d0                	add    %edx,%eax
f010e2fb:	8b 40 08             	mov    0x8(%eax),%eax
f010e2fe:	3b 45 18             	cmp    0x18(%ebp),%eax
f010e301:	76 14                	jbe    f010e317 <stab_binsearch+0xda>
			*region_right = m - 1;
f010e303:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e306:	8d 50 ff             	lea    -0x1(%eax),%edx
f010e309:	8b 45 10             	mov    0x10(%ebp),%eax
f010e30c:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010e30e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e311:	48                   	dec    %eax
f010e312:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010e315:	eb 12                	jmp    f010e329 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010e317:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e31a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e31d:	89 10                	mov    %edx,(%eax)
			l = m;
f010e31f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010e322:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010e325:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010e329:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010e32c:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010e32f:	0f 8e 2a ff ff ff    	jle    f010e25f <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010e335:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e339:	75 0f                	jne    f010e34a <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010e33b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e33e:	8b 00                	mov    (%eax),%eax
f010e340:	8d 50 ff             	lea    -0x1(%eax),%edx
f010e343:	8b 45 10             	mov    0x10(%ebp),%eax
f010e346:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010e348:	eb 3d                	jmp    f010e387 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010e34a:	8b 45 10             	mov    0x10(%ebp),%eax
f010e34d:	8b 00                	mov    (%eax),%eax
f010e34f:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010e352:	eb 03                	jmp    f010e357 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010e354:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010e357:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e35a:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010e35c:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010e35f:	7d 1e                	jge    f010e37f <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010e361:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010e364:	89 d0                	mov    %edx,%eax
f010e366:	01 c0                	add    %eax,%eax
f010e368:	01 d0                	add    %edx,%eax
f010e36a:	c1 e0 02             	shl    $0x2,%eax
f010e36d:	89 c2                	mov    %eax,%edx
f010e36f:	8b 45 08             	mov    0x8(%ebp),%eax
f010e372:	01 d0                	add    %edx,%eax
f010e374:	8a 40 04             	mov    0x4(%eax),%al
f010e377:	0f b6 c0             	movzbl %al,%eax
f010e37a:	3b 45 14             	cmp    0x14(%ebp),%eax
f010e37d:	75 d5                	jne    f010e354 <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010e37f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e382:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010e385:	89 10                	mov    %edx,(%eax)
	}
}
f010e387:	90                   	nop
f010e388:	c9                   	leave  
f010e389:	c3                   	ret    

f010e38a <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010e38a:	55                   	push   %ebp
f010e38b:	89 e5                	mov    %esp,%ebp
f010e38d:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010e390:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e393:	c7 00 10 6d 12 f0    	movl   $0xf0126d10,(%eax)
	info->eip_line = 0;
f010e399:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e39c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010e3a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3a6:	c7 40 08 10 6d 12 f0 	movl   $0xf0126d10,0x8(%eax)
	info->eip_fn_namelen = 9;
f010e3ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3b0:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010e3b7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3ba:	8b 55 08             	mov    0x8(%ebp),%edx
f010e3bd:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010e3c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e3c3:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010e3ca:	8b 45 08             	mov    0x8(%ebp),%eax
f010e3cd:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010e3d2:	76 1e                	jbe    f010e3f2 <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010e3d4:	c7 45 f4 78 e2 12 f0 	movl   $0xf012e278,-0xc(%ebp)
		stab_end = __STAB_END__;
f010e3db:	c7 45 f0 90 f7 15 f0 	movl   $0xf015f790,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010e3e2:	c7 45 ec 91 f7 15 f0 	movl   $0xf015f791,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010e3e9:	c7 45 e8 0f 0c 17 f0 	movl   $0xf0170c0f,-0x18(%ebp)
f010e3f0:	eb 2a                	jmp    f010e41c <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010e3f2:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010e3f9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e3fc:	8b 00                	mov    (%eax),%eax
f010e3fe:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010e401:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e404:	8b 40 04             	mov    0x4(%eax),%eax
f010e407:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010e40a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e40d:	8b 40 08             	mov    0x8(%eax),%eax
f010e410:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010e413:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e416:	8b 40 0c             	mov    0xc(%eax),%eax
f010e419:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010e41c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e41f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e422:	76 0a                	jbe    f010e42e <debuginfo_eip+0xa4>
f010e424:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e427:	48                   	dec    %eax
f010e428:	8a 00                	mov    (%eax),%al
f010e42a:	84 c0                	test   %al,%al
f010e42c:	74 0a                	je     f010e438 <debuginfo_eip+0xae>
		return -1;
f010e42e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010e433:	e9 01 02 00 00       	jmp    f010e639 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010e438:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010e43f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010e442:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e445:	29 c2                	sub    %eax,%edx
f010e447:	89 d0                	mov    %edx,%eax
f010e449:	c1 f8 02             	sar    $0x2,%eax
f010e44c:	89 c2                	mov    %eax,%edx
f010e44e:	89 d0                	mov    %edx,%eax
f010e450:	c1 e0 02             	shl    $0x2,%eax
f010e453:	01 d0                	add    %edx,%eax
f010e455:	c1 e0 02             	shl    $0x2,%eax
f010e458:	01 d0                	add    %edx,%eax
f010e45a:	c1 e0 02             	shl    $0x2,%eax
f010e45d:	01 d0                	add    %edx,%eax
f010e45f:	89 c1                	mov    %eax,%ecx
f010e461:	c1 e1 08             	shl    $0x8,%ecx
f010e464:	01 c8                	add    %ecx,%eax
f010e466:	89 c1                	mov    %eax,%ecx
f010e468:	c1 e1 10             	shl    $0x10,%ecx
f010e46b:	01 c8                	add    %ecx,%eax
f010e46d:	01 c0                	add    %eax,%eax
f010e46f:	01 d0                	add    %edx,%eax
f010e471:	48                   	dec    %eax
f010e472:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010e475:	ff 75 08             	pushl  0x8(%ebp)
f010e478:	6a 64                	push   $0x64
f010e47a:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010e47d:	50                   	push   %eax
f010e47e:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010e481:	50                   	push   %eax
f010e482:	ff 75 f4             	pushl  -0xc(%ebp)
f010e485:	e8 b3 fd ff ff       	call   f010e23d <stab_binsearch>
f010e48a:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010e48d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e490:	85 c0                	test   %eax,%eax
f010e492:	75 0a                	jne    f010e49e <debuginfo_eip+0x114>
		return -1;
f010e494:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010e499:	e9 9b 01 00 00       	jmp    f010e639 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010e49e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e4a1:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010e4a4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e4a7:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010e4aa:	ff 75 08             	pushl  0x8(%ebp)
f010e4ad:	6a 24                	push   $0x24
f010e4af:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010e4b2:	50                   	push   %eax
f010e4b3:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010e4b6:	50                   	push   %eax
f010e4b7:	ff 75 f4             	pushl  -0xc(%ebp)
f010e4ba:	e8 7e fd ff ff       	call   f010e23d <stab_binsearch>
f010e4bf:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010e4c2:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010e4c5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e4c8:	39 c2                	cmp    %eax,%edx
f010e4ca:	0f 8f 86 00 00 00    	jg     f010e556 <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010e4d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e4d3:	89 c2                	mov    %eax,%edx
f010e4d5:	89 d0                	mov    %edx,%eax
f010e4d7:	01 c0                	add    %eax,%eax
f010e4d9:	01 d0                	add    %edx,%eax
f010e4db:	c1 e0 02             	shl    $0x2,%eax
f010e4de:	89 c2                	mov    %eax,%edx
f010e4e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e4e3:	01 d0                	add    %edx,%eax
f010e4e5:	8b 00                	mov    (%eax),%eax
f010e4e7:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010e4ea:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e4ed:	29 d1                	sub    %edx,%ecx
f010e4ef:	89 ca                	mov    %ecx,%edx
f010e4f1:	39 d0                	cmp    %edx,%eax
f010e4f3:	73 22                	jae    f010e517 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010e4f5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e4f8:	89 c2                	mov    %eax,%edx
f010e4fa:	89 d0                	mov    %edx,%eax
f010e4fc:	01 c0                	add    %eax,%eax
f010e4fe:	01 d0                	add    %edx,%eax
f010e500:	c1 e0 02             	shl    $0x2,%eax
f010e503:	89 c2                	mov    %eax,%edx
f010e505:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e508:	01 d0                	add    %edx,%eax
f010e50a:	8b 10                	mov    (%eax),%edx
f010e50c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e50f:	01 c2                	add    %eax,%edx
f010e511:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e514:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010e517:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e51a:	89 c2                	mov    %eax,%edx
f010e51c:	89 d0                	mov    %edx,%eax
f010e51e:	01 c0                	add    %eax,%eax
f010e520:	01 d0                	add    %edx,%eax
f010e522:	c1 e0 02             	shl    $0x2,%eax
f010e525:	89 c2                	mov    %eax,%edx
f010e527:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e52a:	01 d0                	add    %edx,%eax
f010e52c:	8b 50 08             	mov    0x8(%eax),%edx
f010e52f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e532:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010e535:	8b 55 08             	mov    0x8(%ebp),%edx
f010e538:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e53b:	8b 40 10             	mov    0x10(%eax),%eax
f010e53e:	29 c2                	sub    %eax,%edx
f010e540:	89 d0                	mov    %edx,%eax
f010e542:	c1 f8 02             	sar    $0x2,%eax
f010e545:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010e548:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010e54b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010e54e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010e551:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010e554:	eb 15                	jmp    f010e56b <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010e556:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e559:	8b 55 08             	mov    0x8(%ebp),%edx
f010e55c:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010e55f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e562:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010e565:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010e568:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010e56b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e56e:	8b 40 08             	mov    0x8(%eax),%eax
f010e571:	83 ec 08             	sub    $0x8,%esp
f010e574:	6a 3a                	push   $0x3a
f010e576:	50                   	push   %eax
f010e577:	e8 d0 24 01 00       	call   f0120a4c <strfind>
f010e57c:	83 c4 10             	add    $0x10,%esp
f010e57f:	89 c2                	mov    %eax,%edx
f010e581:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e584:	8b 40 08             	mov    0x8(%eax),%eax
f010e587:	29 c2                	sub    %eax,%edx
f010e589:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e58c:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010e58f:	eb 03                	jmp    f010e594 <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010e591:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010e594:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e597:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010e59a:	7c 4e                	jl     f010e5ea <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010e59c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e59f:	89 d0                	mov    %edx,%eax
f010e5a1:	01 c0                	add    %eax,%eax
f010e5a3:	01 d0                	add    %edx,%eax
f010e5a5:	c1 e0 02             	shl    $0x2,%eax
f010e5a8:	89 c2                	mov    %eax,%edx
f010e5aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e5ad:	01 d0                	add    %edx,%eax
f010e5af:	8a 40 04             	mov    0x4(%eax),%al
f010e5b2:	3c 84                	cmp    $0x84,%al
f010e5b4:	74 34                	je     f010e5ea <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010e5b6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e5b9:	89 d0                	mov    %edx,%eax
f010e5bb:	01 c0                	add    %eax,%eax
f010e5bd:	01 d0                	add    %edx,%eax
f010e5bf:	c1 e0 02             	shl    $0x2,%eax
f010e5c2:	89 c2                	mov    %eax,%edx
f010e5c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e5c7:	01 d0                	add    %edx,%eax
f010e5c9:	8a 40 04             	mov    0x4(%eax),%al
f010e5cc:	3c 64                	cmp    $0x64,%al
f010e5ce:	75 c1                	jne    f010e591 <debuginfo_eip+0x207>
f010e5d0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e5d3:	89 d0                	mov    %edx,%eax
f010e5d5:	01 c0                	add    %eax,%eax
f010e5d7:	01 d0                	add    %edx,%eax
f010e5d9:	c1 e0 02             	shl    $0x2,%eax
f010e5dc:	89 c2                	mov    %eax,%edx
f010e5de:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e5e1:	01 d0                	add    %edx,%eax
f010e5e3:	8b 40 08             	mov    0x8(%eax),%eax
f010e5e6:	85 c0                	test   %eax,%eax
f010e5e8:	74 a7                	je     f010e591 <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010e5ea:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010e5ed:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010e5f0:	7c 42                	jl     f010e634 <debuginfo_eip+0x2aa>
f010e5f2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e5f5:	89 d0                	mov    %edx,%eax
f010e5f7:	01 c0                	add    %eax,%eax
f010e5f9:	01 d0                	add    %edx,%eax
f010e5fb:	c1 e0 02             	shl    $0x2,%eax
f010e5fe:	89 c2                	mov    %eax,%edx
f010e600:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e603:	01 d0                	add    %edx,%eax
f010e605:	8b 00                	mov    (%eax),%eax
f010e607:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010e60a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e60d:	29 d1                	sub    %edx,%ecx
f010e60f:	89 ca                	mov    %ecx,%edx
f010e611:	39 d0                	cmp    %edx,%eax
f010e613:	73 1f                	jae    f010e634 <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010e615:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e618:	89 d0                	mov    %edx,%eax
f010e61a:	01 c0                	add    %eax,%eax
f010e61c:	01 d0                	add    %edx,%eax
f010e61e:	c1 e0 02             	shl    $0x2,%eax
f010e621:	89 c2                	mov    %eax,%edx
f010e623:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010e626:	01 d0                	add    %edx,%eax
f010e628:	8b 10                	mov    (%eax),%edx
f010e62a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e62d:	01 c2                	add    %eax,%edx
f010e62f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010e632:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010e634:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010e639:	c9                   	leave  
f010e63a:	c3                   	ret    

f010e63b <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010e63b:	55                   	push   %ebp
f010e63c:	89 e5                	mov    %esp,%ebp
f010e63e:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010e641:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010e645:	74 1c                	je     f010e663 <setPageReplacmentAlgorithmLRU+0x28>
f010e647:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010e64b:	74 16                	je     f010e663 <setPageReplacmentAlgorithmLRU+0x28>
f010e64d:	68 1c 6d 12 f0       	push   $0xf0126d1c
f010e652:	68 66 6d 12 f0       	push   $0xf0126d66
f010e657:	6a 19                	push   $0x19
f010e659:	68 7b 6d 12 f0       	push   $0xf0126d7b
f010e65e:	e8 b7 1c ff ff       	call   f010031a <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010e663:	8b 45 08             	mov    0x8(%ebp),%eax
f010e666:	a3 68 51 55 f0       	mov    %eax,0xf0555168
}
f010e66b:	90                   	nop
f010e66c:	c9                   	leave  
f010e66d:	c3                   	ret    

f010e66e <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010e66e:	55                   	push   %ebp
f010e66f:	89 e5                	mov    %esp,%ebp
f010e671:	c7 05 68 51 55 f0 03 	movl   $0x3,0xf0555168
f010e678:	00 00 00 
f010e67b:	90                   	nop
f010e67c:	5d                   	pop    %ebp
f010e67d:	c3                   	ret    

f010e67e <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010e67e:	55                   	push   %ebp
f010e67f:	89 e5                	mov    %esp,%ebp
f010e681:	c7 05 68 51 55 f0 04 	movl   $0x4,0xf0555168
f010e688:	00 00 00 
f010e68b:	90                   	nop
f010e68c:	5d                   	pop    %ebp
f010e68d:	c3                   	ret    

f010e68e <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010e68e:	55                   	push   %ebp
f010e68f:	89 e5                	mov    %esp,%ebp
f010e691:	c7 05 68 51 55 f0 05 	movl   $0x5,0xf0555168
f010e698:	00 00 00 
f010e69b:	90                   	nop
f010e69c:	5d                   	pop    %ebp
f010e69d:	c3                   	ret    

f010e69e <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010e69e:	55                   	push   %ebp
f010e69f:	89 e5                	mov    %esp,%ebp
f010e6a1:	c7 05 68 51 55 f0 07 	movl   $0x7,0xf0555168
f010e6a8:	00 00 00 
f010e6ab:	90                   	nop
f010e6ac:	5d                   	pop    %ebp
f010e6ad:	c3                   	ret    

f010e6ae <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010e6ae:	55                   	push   %ebp
f010e6af:	89 e5                	mov    %esp,%ebp
f010e6b1:	c7 05 68 51 55 f0 06 	movl   $0x6,0xf0555168
f010e6b8:	00 00 00 
f010e6bb:	8b 45 08             	mov    0x8(%ebp),%eax
f010e6be:	a3 00 25 55 f0       	mov    %eax,0xf0552500
f010e6c3:	90                   	nop
f010e6c4:	5d                   	pop    %ebp
f010e6c5:	c3                   	ret    

f010e6c6 <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010e6c6:	55                   	push   %ebp
f010e6c7:	89 e5                	mov    %esp,%ebp
f010e6c9:	8b 15 68 51 55 f0    	mov    0xf0555168,%edx
f010e6cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010e6d2:	39 c2                	cmp    %eax,%edx
f010e6d4:	0f 94 c0             	sete   %al
f010e6d7:	0f b6 c0             	movzbl %al,%eax
f010e6da:	5d                   	pop    %ebp
f010e6db:	c3                   	ret    

f010e6dc <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010e6dc:	55                   	push   %ebp
f010e6dd:	89 e5                	mov    %esp,%ebp
f010e6df:	a1 68 51 55 f0       	mov    0xf0555168,%eax
f010e6e4:	83 f8 03             	cmp    $0x3,%eax
f010e6e7:	75 07                	jne    f010e6f0 <isPageReplacmentAlgorithmCLOCK+0x14>
f010e6e9:	b8 01 00 00 00       	mov    $0x1,%eax
f010e6ee:	eb 05                	jmp    f010e6f5 <isPageReplacmentAlgorithmCLOCK+0x19>
f010e6f0:	b8 00 00 00 00       	mov    $0x0,%eax
f010e6f5:	5d                   	pop    %ebp
f010e6f6:	c3                   	ret    

f010e6f7 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010e6f7:	55                   	push   %ebp
f010e6f8:	89 e5                	mov    %esp,%ebp
f010e6fa:	a1 68 51 55 f0       	mov    0xf0555168,%eax
f010e6ff:	83 f8 04             	cmp    $0x4,%eax
f010e702:	75 07                	jne    f010e70b <isPageReplacmentAlgorithmFIFO+0x14>
f010e704:	b8 01 00 00 00       	mov    $0x1,%eax
f010e709:	eb 05                	jmp    f010e710 <isPageReplacmentAlgorithmFIFO+0x19>
f010e70b:	b8 00 00 00 00       	mov    $0x0,%eax
f010e710:	5d                   	pop    %ebp
f010e711:	c3                   	ret    

f010e712 <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010e712:	55                   	push   %ebp
f010e713:	89 e5                	mov    %esp,%ebp
f010e715:	a1 68 51 55 f0       	mov    0xf0555168,%eax
f010e71a:	83 f8 05             	cmp    $0x5,%eax
f010e71d:	75 07                	jne    f010e726 <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010e71f:	b8 01 00 00 00       	mov    $0x1,%eax
f010e724:	eb 05                	jmp    f010e72b <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010e726:	b8 00 00 00 00       	mov    $0x0,%eax
f010e72b:	5d                   	pop    %ebp
f010e72c:	c3                   	ret    

f010e72d <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010e72d:	55                   	push   %ebp
f010e72e:	89 e5                	mov    %esp,%ebp
f010e730:	a1 68 51 55 f0       	mov    0xf0555168,%eax
f010e735:	83 f8 07             	cmp    $0x7,%eax
f010e738:	75 07                	jne    f010e741 <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010e73a:	b8 01 00 00 00       	mov    $0x1,%eax
f010e73f:	eb 05                	jmp    f010e746 <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010e741:	b8 00 00 00 00       	mov    $0x0,%eax
f010e746:	5d                   	pop    %ebp
f010e747:	c3                   	ret    

f010e748 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010e748:	55                   	push   %ebp
f010e749:	89 e5                	mov    %esp,%ebp
f010e74b:	a1 68 51 55 f0       	mov    0xf0555168,%eax
f010e750:	83 f8 06             	cmp    $0x6,%eax
f010e753:	75 07                	jne    f010e75c <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010e755:	b8 01 00 00 00       	mov    $0x1,%eax
f010e75a:	eb 05                	jmp    f010e761 <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010e75c:	b8 00 00 00 00       	mov    $0x0,%eax
f010e761:	5d                   	pop    %ebp
f010e762:	c3                   	ret    

f010e763 <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010e763:	55                   	push   %ebp
f010e764:	89 e5                	mov    %esp,%ebp
f010e766:	8b 45 08             	mov    0x8(%ebp),%eax
f010e769:	a3 18 4f 55 f0       	mov    %eax,0xf0554f18
f010e76e:	90                   	nop
f010e76f:	5d                   	pop    %ebp
f010e770:	c3                   	ret    

f010e771 <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010e771:	55                   	push   %ebp
f010e772:	89 e5                	mov    %esp,%ebp
f010e774:	a1 18 4f 55 f0       	mov    0xf0554f18,%eax
f010e779:	5d                   	pop    %ebp
f010e77a:	c3                   	ret    

f010e77b <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010e77b:	55                   	push   %ebp
f010e77c:	89 e5                	mov    %esp,%ebp
f010e77e:	8b 45 08             	mov    0x8(%ebp),%eax
f010e781:	a3 d4 51 55 f0       	mov    %eax,0xf05551d4
f010e786:	90                   	nop
f010e787:	5d                   	pop    %ebp
f010e788:	c3                   	ret    

f010e789 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010e789:	55                   	push   %ebp
f010e78a:	89 e5                	mov    %esp,%ebp
f010e78c:	a1 d4 51 55 f0       	mov    0xf05551d4,%eax
f010e791:	5d                   	pop    %ebp
f010e792:	c3                   	ret    

f010e793 <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010e793:	55                   	push   %ebp
f010e794:	89 e5                	mov    %esp,%ebp
f010e796:	8b 45 08             	mov    0x8(%ebp),%eax
f010e799:	a3 70 52 55 f0       	mov    %eax,0xf0555270
f010e79e:	90                   	nop
f010e79f:	5d                   	pop    %ebp
f010e7a0:	c3                   	ret    

f010e7a1 <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010e7a1:	55                   	push   %ebp
f010e7a2:	89 e5                	mov    %esp,%ebp
f010e7a4:	a1 70 52 55 f0       	mov    0xf0555270,%eax
f010e7a9:	5d                   	pop    %ebp
f010e7aa:	c3                   	ret    

f010e7ab <fault_handler>:
uint32 before_last_fault_va = 0;
int8 num_repeated_fault  = 0;

struct Env* last_faulted_env = NULL;
void fault_handler(struct Trapframe *tf)
{
f010e7ab:	55                   	push   %ebp
f010e7ac:	89 e5                	mov    %esp,%ebp
f010e7ae:	83 ec 28             	sub    $0x28,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010e7b1:	0f 20 d0             	mov    %cr2,%eax
f010e7b4:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f010e7b7:	8b 45 d8             	mov    -0x28(%ebp),%eax
	/******************************************************/
	// Read processor's CR2 register to find the faulting address
	uint32 fault_va = rcr2();
f010e7ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//	print_trapframe(tf);
	/******************************************************/

	//If same fault va for 3 times, then panic
	//UPDATE: 3 FAULTS MUST come from the same environment (or the kernel)
	struct Env* cur_env = get_cpu_proc();
f010e7bd:	e8 ae bf ff ff       	call   f010a770 <get_cpu_proc>
f010e7c2:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (last_fault_va == fault_va && last_faulted_env == cur_env)
f010e7c5:	a1 8c 22 55 f0       	mov    0xf055228c,%eax
f010e7ca:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e7cd:	75 50                	jne    f010e81f <fault_handler+0x74>
f010e7cf:	a1 98 22 55 f0       	mov    0xf0552298,%eax
f010e7d4:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010e7d7:	75 46                	jne    f010e81f <fault_handler+0x74>
	{
		num_repeated_fault++ ;
f010e7d9:	a0 94 22 55 f0       	mov    0xf0552294,%al
f010e7de:	40                   	inc    %eax
f010e7df:	a2 94 22 55 f0       	mov    %al,0xf0552294
		if (num_repeated_fault == 3)
f010e7e4:	a0 94 22 55 f0       	mov    0xf0552294,%al
f010e7e9:	3c 03                	cmp    $0x3,%al
f010e7eb:	75 4d                	jne    f010e83a <fault_handler+0x8f>
		{
			print_trapframe(tf);
f010e7ed:	83 ec 0c             	sub    $0xc,%esp
f010e7f0:	ff 75 08             	pushl  0x8(%ebp)
f010e7f3:	e8 bd e9 ff ff       	call   f010d1b5 <print_trapframe>
f010e7f8:	83 c4 10             	add    $0x10,%esp
			panic("Failed to handle fault! fault @ at va = %x from eip = %x causes va (%x) to be faulted for 3 successive times\n", before_last_fault_va, before_last_eip, fault_va);
f010e7fb:	8b 15 88 22 55 f0    	mov    0xf0552288,%edx
f010e801:	a1 90 22 55 f0       	mov    0xf0552290,%eax
f010e806:	83 ec 08             	sub    $0x8,%esp
f010e809:	ff 75 ec             	pushl  -0x14(%ebp)
f010e80c:	52                   	push   %edx
f010e80d:	50                   	push   %eax
f010e80e:	68 98 6d 12 f0       	push   $0xf0126d98
f010e813:	6a 57                	push   $0x57
f010e815:	68 7b 6d 12 f0       	push   $0xf0126d7b
f010e81a:	e8 fb 1a ff ff       	call   f010031a <_panic>
		}
	}
	else
	{
		before_last_fault_va = last_fault_va;
f010e81f:	a1 8c 22 55 f0       	mov    0xf055228c,%eax
f010e824:	a3 90 22 55 f0       	mov    %eax,0xf0552290
		before_last_eip = last_eip;
f010e829:	a1 84 22 55 f0       	mov    0xf0552284,%eax
f010e82e:	a3 88 22 55 f0       	mov    %eax,0xf0552288
		num_repeated_fault = 0;
f010e833:	c6 05 94 22 55 f0 00 	movb   $0x0,0xf0552294
	}
	last_eip = (uint32)tf->tf_eip;
f010e83a:	8b 45 08             	mov    0x8(%ebp),%eax
f010e83d:	8b 40 30             	mov    0x30(%eax),%eax
f010e840:	a3 84 22 55 f0       	mov    %eax,0xf0552284
	last_fault_va = fault_va ;
f010e845:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010e848:	a3 8c 22 55 f0       	mov    %eax,0xf055228c
	last_faulted_env = cur_env;
f010e84d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e850:	a3 98 22 55 f0       	mov    %eax,0xf0552298
	/******************************************************/
	//2017: Check stack overflow for Kernel
	int userTrap = 0;
f010e855:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010e85c:	8b 45 08             	mov    0x8(%ebp),%eax
f010e85f:	8b 40 34             	mov    0x34(%eax),%eax
f010e862:	0f b7 c0             	movzwl %ax,%eax
f010e865:	83 e0 03             	and    $0x3,%eax
f010e868:	83 f8 03             	cmp    $0x3,%eax
f010e86b:	75 07                	jne    f010e874 <fault_handler+0xc9>
		userTrap = 1;
f010e86d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	}
	if (!userTrap)
f010e874:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010e878:	0f 85 a9 00 00 00    	jne    f010e927 <fault_handler+0x17c>
	{
		struct cpu* c = mycpu();
f010e87e:	e8 7a 88 ff ff       	call   f01070fd <mycpu>
f010e883:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		//cprintf("trap from KERNEL\n");
		if (cur_env && fault_va >= (uint32)cur_env->kstack && fault_va < (uint32)cur_env->kstack + PAGE_SIZE)
f010e886:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f010e88a:	74 2f                	je     f010e8bb <fault_handler+0x110>
f010e88c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e88f:	8b 40 70             	mov    0x70(%eax),%eax
f010e892:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e895:	77 24                	ja     f010e8bb <fault_handler+0x110>
f010e897:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e89a:	8b 40 70             	mov    0x70(%eax),%eax
f010e89d:	05 00 10 00 00       	add    $0x1000,%eax
f010e8a2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e8a5:	76 14                	jbe    f010e8bb <fault_handler+0x110>
			panic("User Kernel Stack: overflow exception!");
f010e8a7:	83 ec 04             	sub    $0x4,%esp
f010e8aa:	68 08 6e 12 f0       	push   $0xf0126e08
f010e8af:	6a 6e                	push   $0x6e
f010e8b1:	68 7b 6d 12 f0       	push   $0xf0126d7b
f010e8b6:	e8 5f 1a ff ff       	call   f010031a <_panic>
		else if (fault_va >= (uint32)c->stack && fault_va < (uint32)c->stack + PAGE_SIZE)
f010e8bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8be:	8b 40 08             	mov    0x8(%eax),%eax
f010e8c1:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e8c4:	0f 87 83 00 00 00    	ja     f010e94d <fault_handler+0x1a2>
f010e8ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8cd:	8b 40 08             	mov    0x8(%eax),%eax
f010e8d0:	05 00 10 00 00       	add    $0x1000,%eax
f010e8d5:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010e8d8:	76 73                	jbe    f010e94d <fault_handler+0x1a2>
			panic("Sched Kernel Stack of CPU #%d: overflow exception!", c - CPUS);
f010e8da:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e8dd:	ba 00 4c 55 f0       	mov    $0xf0554c00,%edx
f010e8e2:	29 d0                	sub    %edx,%eax
f010e8e4:	c1 f8 03             	sar    $0x3,%eax
f010e8e7:	89 c2                	mov    %eax,%edx
f010e8e9:	89 d0                	mov    %edx,%eax
f010e8eb:	c1 e0 02             	shl    $0x2,%eax
f010e8ee:	01 d0                	add    %edx,%eax
f010e8f0:	01 c0                	add    %eax,%eax
f010e8f2:	01 d0                	add    %edx,%eax
f010e8f4:	c1 e0 03             	shl    $0x3,%eax
f010e8f7:	01 d0                	add    %edx,%eax
f010e8f9:	89 c1                	mov    %eax,%ecx
f010e8fb:	c1 e1 0b             	shl    $0xb,%ecx
f010e8fe:	01 c8                	add    %ecx,%eax
f010e900:	c1 e0 05             	shl    $0x5,%eax
f010e903:	01 d0                	add    %edx,%eax
f010e905:	c1 e0 02             	shl    $0x2,%eax
f010e908:	01 d0                	add    %edx,%eax
f010e90a:	01 c0                	add    %eax,%eax
f010e90c:	01 d0                	add    %edx,%eax
f010e90e:	c1 e0 03             	shl    $0x3,%eax
f010e911:	01 d0                	add    %edx,%eax
f010e913:	f7 d8                	neg    %eax
f010e915:	50                   	push   %eax
f010e916:	68 30 6e 12 f0       	push   $0xf0126e30
f010e91b:	6a 70                	push   $0x70
f010e91d:	68 7b 6d 12 f0       	push   $0xf0126d7b
f010e922:	e8 f3 19 ff ff       	call   f010031a <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		//cprintf("trap from USER\n");
		if (fault_va >= USTACKTOP && fault_va < USER_TOP)
f010e927:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010e92e:	76 1d                	jbe    f010e94d <fault_handler+0x1a2>
f010e930:	81 7d ec ff ff bf ee 	cmpl   $0xeebfffff,-0x14(%ebp)
f010e937:	77 14                	ja     f010e94d <fault_handler+0x1a2>
			panic("User: stack underflow exception!");
f010e939:	83 ec 04             	sub    $0x4,%esp
f010e93c:	68 64 6e 12 f0       	push   $0xf0126e64
f010e941:	6a 7b                	push   $0x7b
f010e943:	68 7b 6d 12 f0       	push   $0xf0126d7b
f010e948:	e8 cd 19 ff ff       	call   f010031a <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	//cprintf("curenv = %x\n", curenv);
	struct Env* faulted_env = cur_env;
f010e94d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010e950:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (faulted_env == NULL)
f010e953:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010e957:	75 25                	jne    f010e97e <fault_handler+0x1d3>
	{
		print_trapframe(tf);
f010e959:	83 ec 0c             	sub    $0xc,%esp
f010e95c:	ff 75 08             	pushl  0x8(%ebp)
f010e95f:	e8 51 e8 ff ff       	call   f010d1b5 <print_trapframe>
f010e964:	83 c4 10             	add    $0x10,%esp
		panic("faulted env == NULL!");
f010e967:	83 ec 04             	sub    $0x4,%esp
f010e96a:	68 85 6e 12 f0       	push   $0xf0126e85
f010e96f:	68 84 00 00 00       	push   $0x84
f010e974:	68 7b 6d 12 f0       	push   $0xf0126d7b
f010e979:	e8 9c 19 ff ff       	call   f010031a <_panic>
	}
	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (faulted_env->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010e97e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e981:	8b 40 64             	mov    0x64(%eax),%eax
f010e984:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010e987:	c1 ea 16             	shr    $0x16,%edx
f010e98a:	c1 e2 02             	shl    $0x2,%edx
f010e98d:	01 d0                	add    %edx,%eax
f010e98f:	8b 00                	mov    (%eax),%eax
f010e991:	83 e0 01             	and    $0x1,%eax
f010e994:	85 c0                	test   %eax,%eax
f010e996:	75 28                	jne    f010e9c0 <fault_handler+0x215>
	{
		// we have a table fault =============================================================
		//		cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		//		print_trapframe(tf);

		faulted_env->tableFaultsCounter ++ ;
f010e998:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e99b:	8b 80 44 da 01 00    	mov    0x1da44(%eax),%eax
f010e9a1:	8d 50 01             	lea    0x1(%eax),%edx
f010e9a4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e9a7:	89 90 44 da 01 00    	mov    %edx,0x1da44(%eax)

		table_fault_handler(faulted_env, fault_va);
f010e9ad:	83 ec 08             	sub    $0x8,%esp
f010e9b0:	ff 75 ec             	pushl  -0x14(%ebp)
f010e9b3:	ff 75 e0             	pushl  -0x20(%ebp)
f010e9b6:	e8 8f 00 00 00       	call   f010ea4a <table_fault_handler>
f010e9bb:	83 c4 10             	add    $0x10,%esp
f010e9be:	eb 7b                	jmp    f010ea3b <fault_handler+0x290>

			/*============================================================================================*/
		}

		/*2022: Check if fault due to Access Rights */
		int perms = pt_get_page_permissions(faulted_env->env_page_directory, fault_va);
f010e9c0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e9c3:	8b 40 64             	mov    0x64(%eax),%eax
f010e9c6:	83 ec 08             	sub    $0x8,%esp
f010e9c9:	ff 75 ec             	pushl  -0x14(%ebp)
f010e9cc:	50                   	push   %eax
f010e9cd:	e8 1a a2 ff ff       	call   f0108bec <pt_get_page_permissions>
f010e9d2:	83 c4 10             	add    $0x10,%esp
f010e9d5:	89 45 dc             	mov    %eax,-0x24(%ebp)
		if (perms & PERM_PRESENT)
f010e9d8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e9db:	83 e0 01             	and    $0x1,%eax
f010e9de:	85 c0                	test   %eax,%eax
f010e9e0:	74 17                	je     f010e9f9 <fault_handler+0x24e>
			panic("Page @va=%x is exist! page fault due to violation of ACCESS RIGHTS\n", fault_va) ;
f010e9e2:	ff 75 ec             	pushl  -0x14(%ebp)
f010e9e5:	68 9c 6e 12 f0       	push   $0xf0126e9c
f010e9ea:	68 a1 00 00 00       	push   $0xa1
f010e9ef:	68 7b 6d 12 f0       	push   $0xf0126d7b
f010e9f4:	e8 21 19 ff ff       	call   f010031a <_panic>
		/*============================================================================================*/


		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010e9f9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010e9fc:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f010ea02:	8d 50 01             	lea    0x1(%eax),%edx
f010ea05:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010ea08:	89 90 40 da 01 00    	mov    %edx,0x1da40(%eax)

		//		cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//		cprintf("\nPage working set BEFORE fault handler...\n");
		//		env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010ea0e:	e8 76 fd ff ff       	call   f010e789 <isBufferingEnabled>
f010ea13:	84 c0                	test   %al,%al
f010ea15:	74 13                	je     f010ea2a <fault_handler+0x27f>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010ea17:	83 ec 08             	sub    $0x8,%esp
f010ea1a:	ff 75 ec             	pushl  -0x14(%ebp)
f010ea1d:	ff 75 e0             	pushl  -0x20(%ebp)
f010ea20:	e8 64 00 00 00       	call   f010ea89 <__page_fault_handler_with_buffering>
f010ea25:	83 c4 10             	add    $0x10,%esp
f010ea28:	eb 11                	jmp    f010ea3b <fault_handler+0x290>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010ea2a:	83 ec 08             	sub    $0x8,%esp
f010ea2d:	ff 75 ec             	pushl  -0x14(%ebp)
f010ea30:	ff 75 e0             	pushl  -0x20(%ebp)
f010ea33:	e8 34 00 00 00       	call   f010ea6c <page_fault_handler>
f010ea38:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010ea3b:	0f 20 d8             	mov    %cr3,%eax
f010ea3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010ea41:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ea44:	0f 22 d8             	mov    %eax,%cr3

	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/
}
f010ea47:	90                   	nop
f010ea48:	c9                   	leave  
f010ea49:	c3                   	ret    

f010ea4a <table_fault_handler>:

//=========================
// [2] TABLE FAULT HANDLER:
//=========================
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010ea4a:	55                   	push   %ebp
f010ea4b:	89 e5                	mov    %esp,%ebp
f010ea4d:	83 ec 18             	sub    $0x18,%esp
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
	}
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
f010ea50:	8b 45 08             	mov    0x8(%ebp),%eax
f010ea53:	8b 40 64             	mov    0x64(%eax),%eax
f010ea56:	83 ec 04             	sub    $0x4,%esp
f010ea59:	8d 55 f4             	lea    -0xc(%ebp),%edx
f010ea5c:	52                   	push   %edx
f010ea5d:	ff 75 0c             	pushl  0xc(%ebp)
f010ea60:	50                   	push   %eax
f010ea61:	e8 cd 9a ff ff       	call   f0108533 <__static_cpt>
f010ea66:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f010ea69:	90                   	nop
f010ea6a:	c9                   	leave  
f010ea6b:	c3                   	ret    

f010ea6c <page_fault_handler>:

//=========================
// [3] PAGE FAULT HANDLER:
//=========================
void page_fault_handler(struct Env * faulted_env, uint32 fault_va)
{
f010ea6c:	55                   	push   %ebp
f010ea6d:	89 e5                	mov    %esp,%ebp
f010ea6f:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24] [3] PAGE FAULT HANDLER
	// Write your code here, remove the panic and write your code
	panic("page_fault_handler() is not implemented yet...!!");
f010ea72:	83 ec 04             	sub    $0x4,%esp
f010ea75:	68 e0 6e 12 f0       	push   $0xf0126ee0
f010ea7a:	68 db 00 00 00       	push   $0xdb
f010ea7f:	68 7b 6d 12 f0       	push   $0xf0126d7b
f010ea84:	e8 91 18 ff ff       	call   f010031a <_panic>

f010ea89 <__page_fault_handler_with_buffering>:
		panic("page_fault_handler() Replacement is not implemented yet...!!");
	}
}

void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010ea89:	55                   	push   %ebp
f010ea8a:	89 e5                	mov    %esp,%ebp
f010ea8c:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT] PAGE FAULT HANDLER WITH BUFFERING
	// your code is here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010ea8f:	83 ec 04             	sub    $0x4,%esp
f010ea92:	68 14 6f 12 f0       	push   $0xf0126f14
f010ea97:	68 fc 00 00 00       	push   $0xfc
f010ea9c:	68 7b 6d 12 f0       	push   $0xf0126d7b
f010eaa1:	e8 74 18 ff ff       	call   f010031a <_panic>

f010eaa6 <init_spinlock>:
#include "spinlock.h"
#include "../cpu/cpu.h"
#include "../proc/user_environment.h"

void init_spinlock(struct spinlock *lk, char *name)
{
f010eaa6:	55                   	push   %ebp
f010eaa7:	89 e5                	mov    %esp,%ebp
f010eaa9:	83 ec 08             	sub    $0x8,%esp
	strcpy(lk->name, name);
f010eaac:	8b 45 08             	mov    0x8(%ebp),%eax
f010eaaf:	83 c0 04             	add    $0x4,%eax
f010eab2:	83 ec 08             	sub    $0x8,%esp
f010eab5:	ff 75 0c             	pushl  0xc(%ebp)
f010eab8:	50                   	push   %eax
f010eab9:	e8 1b 1e 01 00       	call   f01208d9 <strcpy>
f010eabe:	83 c4 10             	add    $0x10,%esp
	lk->locked = 0;
f010eac1:	8b 45 08             	mov    0x8(%ebp),%eax
f010eac4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	lk->cpu = 0;
f010eaca:	8b 45 08             	mov    0x8(%ebp),%eax
f010eacd:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
}
f010ead4:	90                   	nop
f010ead5:	c9                   	leave  
f010ead6:	c3                   	ret    

f010ead7 <acquire_spinlock>:
// Acquire the lock.
// Loops (spins) until the lock is acquired.
// Holding a lock for a long time may cause
// other CPUs to waste time spinning to acquire it.
void acquire_spinlock(struct spinlock *lk)
{
f010ead7:	55                   	push   %ebp
f010ead8:	89 e5                	mov    %esp,%ebp
f010eada:	53                   	push   %ebx
f010eadb:	83 ec 14             	sub    $0x14,%esp
	if(holding_spinlock(lk))
f010eade:	8b 45 08             	mov    0x8(%ebp),%eax
f010eae1:	83 ec 0c             	sub    $0xc,%esp
f010eae4:	50                   	push   %eax
f010eae5:	e8 06 02 00 00       	call   f010ecf0 <holding_spinlock>
f010eaea:	83 c4 10             	add    $0x10,%esp
f010eaed:	85 c0                	test   %eax,%eax
f010eaef:	74 18                	je     f010eb09 <acquire_spinlock+0x32>
		panic("acquire_spinlock: lock \"%s\" is already held by the same CPU.", lk->name);
f010eaf1:	8b 45 08             	mov    0x8(%ebp),%eax
f010eaf4:	83 c0 04             	add    $0x4,%eax
f010eaf7:	50                   	push   %eax
f010eaf8:	68 58 6f 12 f0       	push   $0xf0126f58
f010eafd:	6a 1f                	push   $0x1f
f010eaff:	68 95 6f 12 f0       	push   $0xf0126f95
f010eb04:	e8 11 18 ff ff       	call   f010031a <_panic>

	pushcli(); // disable interrupts to avoid deadlock (in case if interrupted from a higher priority (or event handler) just after holding the lock => the handler will stuck in busy-waiting and prevent the other from resuming)
f010eb09:	e8 b2 86 ff ff       	call   f01071c0 <pushcli>

	//cprintf("\nAttempt to acquire SPIN lock [%s] by [%d]\n", lk->name, myproc() != NULL? myproc()->env_id : 0);

	// The xchg is atomic.
	while(xchg(&lk->locked, 1) != 0) ;
f010eb0e:	90                   	nop
f010eb0f:	8b 45 08             	mov    0x8(%ebp),%eax
f010eb12:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010eb15:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
xchg(volatile uint32 *addr, uint32 newval)
{
  uint32 result;

  // The + in "+m" denotes a read-modify-write operand.
  __asm __volatile("lock; xchgl %0, %1" :
f010eb1c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010eb1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010eb22:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010eb25:	f0 87 02             	lock xchg %eax,(%edx)
f010eb28:	89 45 ec             	mov    %eax,-0x14(%ebp)
               "+m" (*addr), "=a" (result) :
               "1" (newval) :
               "cc");
  return result;
f010eb2b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010eb2e:	85 c0                	test   %eax,%eax
f010eb30:	75 dd                	jne    f010eb0f <acquire_spinlock+0x38>
	//cprintf("SPIN lock [%s] is ACQUIRED  by [%d]\n", lk->name, myproc() != NULL? myproc()->env_id : 0);

	// Tell the C compiler and the processor to not move loads or stores
	// past this point, to ensure that the critical section's memory
	// references happen after the lock is acquired.
	__sync_synchronize();
f010eb32:	f0 83 0c 24 00       	lock orl $0x0,(%esp)

	// Record info about lock acquisition for debugging.
	lk->cpu = mycpu();
f010eb37:	8b 5d 08             	mov    0x8(%ebp),%ebx
f010eb3a:	e8 be 85 ff ff       	call   f01070fd <mycpu>
f010eb3f:	89 43 44             	mov    %eax,0x44(%ebx)
	getcallerpcs(&lk, lk->pcs);
f010eb42:	8b 45 08             	mov    0x8(%ebp),%eax
f010eb45:	83 c0 48             	add    $0x48,%eax
f010eb48:	83 ec 08             	sub    $0x8,%esp
f010eb4b:	50                   	push   %eax
f010eb4c:	8d 45 08             	lea    0x8(%ebp),%eax
f010eb4f:	50                   	push   %eax
f010eb50:	e8 74 00 00 00       	call   f010ebc9 <getcallerpcs>
f010eb55:	83 c4 10             	add    $0x10,%esp

}
f010eb58:	90                   	nop
f010eb59:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010eb5c:	c9                   	leave  
f010eb5d:	c3                   	ret    

f010eb5e <release_spinlock>:

// Release the lock.
void release_spinlock(struct spinlock *lk)
{
f010eb5e:	55                   	push   %ebp
f010eb5f:	89 e5                	mov    %esp,%ebp
f010eb61:	83 ec 08             	sub    $0x8,%esp
	if(!holding_spinlock(lk))
f010eb64:	83 ec 0c             	sub    $0xc,%esp
f010eb67:	ff 75 08             	pushl  0x8(%ebp)
f010eb6a:	e8 81 01 00 00       	call   f010ecf0 <holding_spinlock>
f010eb6f:	83 c4 10             	add    $0x10,%esp
f010eb72:	85 c0                	test   %eax,%eax
f010eb74:	75 26                	jne    f010eb9c <release_spinlock+0x3e>
	{
		printcallstack(lk);
f010eb76:	83 ec 0c             	sub    $0xc,%esp
f010eb79:	ff 75 08             	pushl  0x8(%ebp)
f010eb7c:	e8 08 01 00 00       	call   f010ec89 <printcallstack>
f010eb81:	83 c4 10             	add    $0x10,%esp
		panic("release: lock \"%s\" is either not held or held by another CPU!", lk->name);
f010eb84:	8b 45 08             	mov    0x8(%ebp),%eax
f010eb87:	83 c0 04             	add    $0x4,%eax
f010eb8a:	50                   	push   %eax
f010eb8b:	68 ac 6f 12 f0       	push   $0xf0126fac
f010eb90:	6a 3b                	push   $0x3b
f010eb92:	68 95 6f 12 f0       	push   $0xf0126f95
f010eb97:	e8 7e 17 ff ff       	call   f010031a <_panic>
	}
	lk->pcs[0] = 0;
f010eb9c:	8b 45 08             	mov    0x8(%ebp),%eax
f010eb9f:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
	lk->cpu = 0;
f010eba6:	8b 45 08             	mov    0x8(%ebp),%eax
f010eba9:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
	// Tell the C compiler and the processor to not move loads or stores
	// past this point, to ensure that all the stores in the critical
	// section are visible to other cores before the lock is released.
	// Both the C compiler and the hardware may re-order loads and
	// stores; __sync_synchronize() tells them both not to.
	__sync_synchronize();
f010ebb0:	f0 83 0c 24 00       	lock orl $0x0,(%esp)

	// Release the lock, equivalent to lk->locked = 0.
	// This code can't use a C assignment, since it might
	// not be atomic. A real OS would use C atomics here.
	asm volatile("movl $0, %0" : "+m" (lk->locked) : );
f010ebb5:	8b 45 08             	mov    0x8(%ebp),%eax
f010ebb8:	8b 55 08             	mov    0x8(%ebp),%edx
f010ebbb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	popcli();
f010ebc1:	e8 4c 86 ff ff       	call   f0107212 <popcli>
}
f010ebc6:	90                   	nop
f010ebc7:	c9                   	leave  
f010ebc8:	c3                   	ret    

f010ebc9 <getcallerpcs>:

// Record the current call stack in pcs[] by following the %ebp chain.
int getcallerpcs(void *v, uint32 pcs[])
{
f010ebc9:	55                   	push   %ebp
f010ebca:	89 e5                	mov    %esp,%ebp
f010ebcc:	83 ec 28             	sub    $0x28,%esp
	uint32 *ebp;
	int i;
	struct Env* p = get_cpu_proc();
f010ebcf:	e8 9c bb ff ff       	call   f010a770 <get_cpu_proc>
f010ebd4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct cpu* c = mycpu();
f010ebd7:	e8 21 85 ff ff       	call   f01070fd <mycpu>
f010ebdc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	ebp = (uint32*)v - 2;
f010ebdf:	8b 45 08             	mov    0x8(%ebp),%eax
f010ebe2:	83 e8 08             	sub    $0x8,%eax
f010ebe5:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for(i = 0; i < 10; i++)
f010ebe8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010ebef:	eb 67                	jmp    f010ec58 <getcallerpcs+0x8f>
	{
		//cprintf("old ebp = %x\n", ebp);
		if	(	ebp == 0 || (ebp < (uint32*) USER_LIMIT) ||
f010ebf1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010ebf5:	74 67                	je     f010ec5e <getcallerpcs+0x95>
f010ebf7:	81 7d f4 ff ff 7f ef 	cmpl   $0xef7fffff,-0xc(%ebp)
f010ebfe:	76 5e                	jbe    f010ec5e <getcallerpcs+0x95>
				(ebp >= (uint32*)(c->stack + KERNEL_STACK_SIZE) && ebp < (uint32*)(c->stack + KERNEL_STACK_SIZE + PAGE_SIZE)) ||
f010ec00:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ec03:	8b 40 08             	mov    0x8(%eax),%eax
f010ec06:	05 00 80 00 00       	add    $0x8000,%eax
	struct cpu* c = mycpu();
	ebp = (uint32*)v - 2;
	for(i = 0; i < 10; i++)
	{
		//cprintf("old ebp = %x\n", ebp);
		if	(	ebp == 0 || (ebp < (uint32*) USER_LIMIT) ||
f010ec0b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ec0e:	77 10                	ja     f010ec20 <getcallerpcs+0x57>
				(ebp >= (uint32*)(c->stack + KERNEL_STACK_SIZE) && ebp < (uint32*)(c->stack + KERNEL_STACK_SIZE + PAGE_SIZE)) ||
f010ec10:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010ec13:	8b 40 08             	mov    0x8(%eax),%eax
f010ec16:	05 00 90 00 00       	add    $0x9000,%eax
f010ec1b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ec1e:	77 3e                	ja     f010ec5e <getcallerpcs+0x95>
f010ec20:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010ec24:	74 10                	je     f010ec36 <getcallerpcs+0x6d>
				(p && ebp >= (uint32*) (p->kstack + KERNEL_STACK_SIZE)))
f010ec26:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ec29:	8b 40 70             	mov    0x70(%eax),%eax
f010ec2c:	05 00 80 00 00       	add    $0x8000,%eax
f010ec31:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ec34:	76 28                	jbe    f010ec5e <getcallerpcs+0x95>
			break;
		pcs[i] = ebp[1];     // saved %eip
f010ec36:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ec39:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ec40:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ec43:	01 c2                	add    %eax,%edx
f010ec45:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ec48:	8b 40 04             	mov    0x4(%eax),%eax
f010ec4b:	89 02                	mov    %eax,(%edx)
		ebp = (uint32*)ebp[0]; // saved %ebp
f010ec4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ec50:	8b 00                	mov    (%eax),%eax
f010ec52:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ebp;
	int i;
	struct Env* p = get_cpu_proc();
	struct cpu* c = mycpu();
	ebp = (uint32*)v - 2;
	for(i = 0; i < 10; i++)
f010ec55:	ff 45 f0             	incl   -0x10(%ebp)
f010ec58:	83 7d f0 09          	cmpl   $0x9,-0x10(%ebp)
f010ec5c:	7e 93                	jle    f010ebf1 <getcallerpcs+0x28>
		pcs[i] = ebp[1];     // saved %eip
		ebp = (uint32*)ebp[0]; // saved %ebp
		//		cprintf("new ebp = %x\n", ebp);
		//		cprintf("pc[%d] = %x\n", i, pcs[i]);
	}
	int length = i ;
f010ec5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ec61:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	for(; i < 10; i++)
f010ec64:	eb 18                	jmp    f010ec7e <getcallerpcs+0xb5>
		pcs[i] = 0;
f010ec66:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ec69:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ec70:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ec73:	01 d0                	add    %edx,%eax
f010ec75:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		ebp = (uint32*)ebp[0]; // saved %ebp
		//		cprintf("new ebp = %x\n", ebp);
		//		cprintf("pc[%d] = %x\n", i, pcs[i]);
	}
	int length = i ;
	for(; i < 10; i++)
f010ec7b:	ff 45 f0             	incl   -0x10(%ebp)
f010ec7e:	83 7d f0 09          	cmpl   $0x9,-0x10(%ebp)
f010ec82:	7e e2                	jle    f010ec66 <getcallerpcs+0x9d>
		pcs[i] = 0;
	return length ;
f010ec84:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f010ec87:	c9                   	leave  
f010ec88:	c3                   	ret    

f010ec89 <printcallstack>:

void printcallstack(struct spinlock *lk)
{
f010ec89:	55                   	push   %ebp
f010ec8a:	89 e5                	mov    %esp,%ebp
f010ec8c:	83 ec 18             	sub    $0x18,%esp
	cprintf("\nCaller Stack:\n");
f010ec8f:	83 ec 0c             	sub    $0xc,%esp
f010ec92:	68 ea 6f 12 f0       	push   $0xf0126fea
f010ec97:	e8 d0 22 ff ff       	call   f0100f6c <cprintf>
f010ec9c:	83 c4 10             	add    $0x10,%esp
	int stacklen = 	getcallerpcs(&lk, lk->pcs);
f010ec9f:	8b 45 08             	mov    0x8(%ebp),%eax
f010eca2:	83 c0 48             	add    $0x48,%eax
f010eca5:	83 ec 08             	sub    $0x8,%esp
f010eca8:	50                   	push   %eax
f010eca9:	8d 45 08             	lea    0x8(%ebp),%eax
f010ecac:	50                   	push   %eax
f010ecad:	e8 17 ff ff ff       	call   f010ebc9 <getcallerpcs>
f010ecb2:	83 c4 10             	add    $0x10,%esp
f010ecb5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (int i = 0; i < stacklen; ++i) {
f010ecb8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ecbf:	eb 24                	jmp    f010ece5 <printcallstack+0x5c>
		cprintf("  PC[%d] = %x\n", i, lk->pcs[i]);
f010ecc1:	8b 45 08             	mov    0x8(%ebp),%eax
f010ecc4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010ecc7:	83 c2 10             	add    $0x10,%edx
f010ecca:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
f010ecce:	83 ec 04             	sub    $0x4,%esp
f010ecd1:	50                   	push   %eax
f010ecd2:	ff 75 f4             	pushl  -0xc(%ebp)
f010ecd5:	68 fa 6f 12 f0       	push   $0xf0126ffa
f010ecda:	e8 8d 22 ff ff       	call   f0100f6c <cprintf>
f010ecdf:	83 c4 10             	add    $0x10,%esp

void printcallstack(struct spinlock *lk)
{
	cprintf("\nCaller Stack:\n");
	int stacklen = 	getcallerpcs(&lk, lk->pcs);
	for (int i = 0; i < stacklen; ++i) {
f010ece2:	ff 45 f4             	incl   -0xc(%ebp)
f010ece5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ece8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010eceb:	7c d4                	jl     f010ecc1 <printcallstack+0x38>
		cprintf("  PC[%d] = %x\n", i, lk->pcs[i]);
	}
}
f010eced:	90                   	nop
f010ecee:	c9                   	leave  
f010ecef:	c3                   	ret    

f010ecf0 <holding_spinlock>:
// Check whether this cpu is holding the lock.
int holding_spinlock(struct spinlock *lock)
{
f010ecf0:	55                   	push   %ebp
f010ecf1:	89 e5                	mov    %esp,%ebp
f010ecf3:	53                   	push   %ebx
f010ecf4:	83 ec 14             	sub    $0x14,%esp
	int r;
	pushcli();
f010ecf7:	e8 c4 84 ff ff       	call   f01071c0 <pushcli>
	r = lock->locked && lock->cpu == mycpu();
f010ecfc:	8b 45 08             	mov    0x8(%ebp),%eax
f010ecff:	8b 00                	mov    (%eax),%eax
f010ed01:	85 c0                	test   %eax,%eax
f010ed03:	74 16                	je     f010ed1b <holding_spinlock+0x2b>
f010ed05:	8b 45 08             	mov    0x8(%ebp),%eax
f010ed08:	8b 58 44             	mov    0x44(%eax),%ebx
f010ed0b:	e8 ed 83 ff ff       	call   f01070fd <mycpu>
f010ed10:	39 c3                	cmp    %eax,%ebx
f010ed12:	75 07                	jne    f010ed1b <holding_spinlock+0x2b>
f010ed14:	b8 01 00 00 00       	mov    $0x1,%eax
f010ed19:	eb 05                	jmp    f010ed20 <holding_spinlock+0x30>
f010ed1b:	b8 00 00 00 00       	mov    $0x0,%eax
f010ed20:	89 45 f4             	mov    %eax,-0xc(%ebp)
	popcli();
f010ed23:	e8 ea 84 ff ff       	call   f0107212 <popcli>
	return r;
f010ed28:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010ed2b:	83 c4 14             	add    $0x14,%esp
f010ed2e:	5b                   	pop    %ebx
f010ed2f:	5d                   	pop    %ebp
f010ed30:	c3                   	ret    

f010ed31 <init_sleeplock>:
#include "channel.h"
#include "../cpu/cpu.h"
#include "../proc/user_environment.h"

void init_sleeplock(struct sleeplock *lk, char *name)
{
f010ed31:	55                   	push   %ebp
f010ed32:	89 e5                	mov    %esp,%ebp
f010ed34:	83 ec 08             	sub    $0x8,%esp
	init_channel(&(lk->chan), "sleep lock channel");
f010ed37:	8b 45 08             	mov    0x8(%ebp),%eax
f010ed3a:	83 c0 74             	add    $0x74,%eax
f010ed3d:	83 ec 08             	sub    $0x8,%esp
f010ed40:	68 0c 70 12 f0       	push   $0xf012700c
f010ed45:	50                   	push   %eax
f010ed46:	e8 de 00 00 00       	call   f010ee29 <init_channel>
f010ed4b:	83 c4 10             	add    $0x10,%esp
	init_spinlock(&(lk->lk), "lock of sleep lock");
f010ed4e:	8b 45 08             	mov    0x8(%ebp),%eax
f010ed51:	83 c0 04             	add    $0x4,%eax
f010ed54:	83 ec 08             	sub    $0x8,%esp
f010ed57:	68 1f 70 12 f0       	push   $0xf012701f
f010ed5c:	50                   	push   %eax
f010ed5d:	e8 44 fd ff ff       	call   f010eaa6 <init_spinlock>
f010ed62:	83 c4 10             	add    $0x10,%esp
	strcpy(lk->name, name);
f010ed65:	8b 45 08             	mov    0x8(%ebp),%eax
f010ed68:	05 c4 00 00 00       	add    $0xc4,%eax
f010ed6d:	83 ec 08             	sub    $0x8,%esp
f010ed70:	ff 75 0c             	pushl  0xc(%ebp)
f010ed73:	50                   	push   %eax
f010ed74:	e8 60 1b 01 00       	call   f01208d9 <strcpy>
f010ed79:	83 c4 10             	add    $0x10,%esp
	lk->locked = 0;
f010ed7c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ed7f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	lk->pid = 0;
f010ed85:	8b 45 08             	mov    0x8(%ebp),%eax
f010ed88:	c7 80 04 01 00 00 00 	movl   $0x0,0x104(%eax)
f010ed8f:	00 00 00 
}
f010ed92:	90                   	nop
f010ed93:	c9                   	leave  
f010ed94:	c3                   	ret    

f010ed95 <holding_sleeplock>:
int holding_sleeplock(struct sleeplock *lk)
{
f010ed95:	55                   	push   %ebp
f010ed96:	89 e5                	mov    %esp,%ebp
f010ed98:	53                   	push   %ebx
f010ed99:	83 ec 14             	sub    $0x14,%esp
	int r;
	acquire_spinlock(&(lk->lk));
f010ed9c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ed9f:	83 c0 04             	add    $0x4,%eax
f010eda2:	83 ec 0c             	sub    $0xc,%esp
f010eda5:	50                   	push   %eax
f010eda6:	e8 2c fd ff ff       	call   f010ead7 <acquire_spinlock>
f010edab:	83 c4 10             	add    $0x10,%esp
	r = lk->locked && (lk->pid == get_cpu_proc()->env_id);
f010edae:	8b 45 08             	mov    0x8(%ebp),%eax
f010edb1:	8b 00                	mov    (%eax),%eax
f010edb3:	85 c0                	test   %eax,%eax
f010edb5:	74 1c                	je     f010edd3 <holding_sleeplock+0x3e>
f010edb7:	8b 45 08             	mov    0x8(%ebp),%eax
f010edba:	8b 98 04 01 00 00    	mov    0x104(%eax),%ebx
f010edc0:	e8 ab b9 ff ff       	call   f010a770 <get_cpu_proc>
f010edc5:	8b 40 10             	mov    0x10(%eax),%eax
f010edc8:	39 c3                	cmp    %eax,%ebx
f010edca:	75 07                	jne    f010edd3 <holding_sleeplock+0x3e>
f010edcc:	b8 01 00 00 00       	mov    $0x1,%eax
f010edd1:	eb 05                	jmp    f010edd8 <holding_sleeplock+0x43>
f010edd3:	b8 00 00 00 00       	mov    $0x0,%eax
f010edd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	release_spinlock(&(lk->lk));
f010eddb:	8b 45 08             	mov    0x8(%ebp),%eax
f010edde:	83 c0 04             	add    $0x4,%eax
f010ede1:	83 ec 0c             	sub    $0xc,%esp
f010ede4:	50                   	push   %eax
f010ede5:	e8 74 fd ff ff       	call   f010eb5e <release_spinlock>
f010edea:	83 c4 10             	add    $0x10,%esp
	return r;
f010eded:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010edf0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010edf3:	c9                   	leave  
f010edf4:	c3                   	ret    

f010edf5 <acquire_sleeplock>:
//==========================================================================

void acquire_sleeplock(struct sleeplock *lk)
{
f010edf5:	55                   	push   %ebp
f010edf6:	89 e5                	mov    %esp,%ebp
f010edf8:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #13] [4] LOCKS - acquire_sleeplock
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("acquire_sleeplock is not implemented yet");
f010edfb:	83 ec 04             	sub    $0x4,%esp
f010edfe:	68 34 70 12 f0       	push   $0xf0127034
f010ee03:	6a 25                	push   $0x25
f010ee05:	68 5d 70 12 f0       	push   $0xf012705d
f010ee0a:	e8 0b 15 ff ff       	call   f010031a <_panic>

f010ee0f <release_sleeplock>:
	//Your Code is Here...

}

void release_sleeplock(struct sleeplock *lk)
{
f010ee0f:	55                   	push   %ebp
f010ee10:	89 e5                	mov    %esp,%ebp
f010ee12:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #14] [4] LOCKS - release_sleeplock
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("release_sleeplock is not implemented yet");
f010ee15:	83 ec 04             	sub    $0x4,%esp
f010ee18:	68 74 70 12 f0       	push   $0xf0127074
f010ee1d:	6a 2e                	push   $0x2e
f010ee1f:	68 5d 70 12 f0       	push   $0xf012705d
f010ee24:	e8 f1 14 ff ff       	call   f010031a <_panic>

f010ee29 <init_channel>:
//===============================
// 1) INITIALIZE THE CHANNEL:
//===============================
// initialize its lock & queue
void init_channel(struct Channel *chan, char *name)
{
f010ee29:	55                   	push   %ebp
f010ee2a:	89 e5                	mov    %esp,%ebp
f010ee2c:	83 ec 08             	sub    $0x8,%esp
	strcpy(chan->name, name);
f010ee2f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ee32:	83 c0 10             	add    $0x10,%eax
f010ee35:	83 ec 08             	sub    $0x8,%esp
f010ee38:	ff 75 0c             	pushl  0xc(%ebp)
f010ee3b:	50                   	push   %eax
f010ee3c:	e8 98 1a 01 00       	call   f01208d9 <strcpy>
f010ee41:	83 c4 10             	add    $0x10,%esp
	init_queue(&(chan->queue));
f010ee44:	8b 45 08             	mov    0x8(%ebp),%eax
f010ee47:	83 ec 0c             	sub    $0xc,%esp
f010ee4a:	50                   	push   %eax
f010ee4b:	e8 e7 60 ff ff       	call   f0104f37 <init_queue>
f010ee50:	83 c4 10             	add    $0x10,%esp
}
f010ee53:	90                   	nop
f010ee54:	c9                   	leave  
f010ee55:	c3                   	ret    

f010ee56 <sleep>:
//===============================
// Atomically release lock and sleep on chan.
// Reacquires lock when awakened.
// Ref: xv6-x86 OS code
void sleep(struct Channel *chan, struct spinlock* lk)
{
f010ee56:	55                   	push   %ebp
f010ee57:	89 e5                	mov    %esp,%ebp
f010ee59:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #10] [4] LOCKS - sleep
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("sleep is not implemented yet");
f010ee5c:	83 ec 04             	sub    $0x4,%esp
f010ee5f:	68 a0 70 12 f0       	push   $0xf01270a0
f010ee64:	6a 21                	push   $0x21
f010ee66:	68 bd 70 12 f0       	push   $0xf01270bd
f010ee6b:	e8 aa 14 ff ff       	call   f010031a <_panic>

f010ee70 <wakeup_one>:
// Wake up ONE process sleeping on chan.
// The qlock must be held.
// Ref: xv6-x86 OS code
// chan MUST be of type "struct Env_Queue" to hold the blocked processes
void wakeup_one(struct Channel *chan)
{
f010ee70:	55                   	push   %ebp
f010ee71:	89 e5                	mov    %esp,%ebp
f010ee73:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #11] [4] LOCKS - wakeup_one
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("wakeup_one is not implemented yet");
f010ee76:	83 ec 04             	sub    $0x4,%esp
f010ee79:	68 d4 70 12 f0       	push   $0xf01270d4
f010ee7e:	6a 31                	push   $0x31
f010ee80:	68 bd 70 12 f0       	push   $0xf01270bd
f010ee85:	e8 90 14 ff ff       	call   f010031a <_panic>

f010ee8a <wakeup_all>:
// The queues lock must be held.
// Ref: xv6-x86 OS code
// chan MUST be of type "struct Env_Queue" to hold the blocked processes

void wakeup_all(struct Channel *chan)
{
f010ee8a:	55                   	push   %ebp
f010ee8b:	89 e5                	mov    %esp,%ebp
f010ee8d:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #12] [4] LOCKS - wakeup_all
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("wakeup_all is not implemented yet");
f010ee90:	83 ec 04             	sub    $0x4,%esp
f010ee93:	68 f8 70 12 f0       	push   $0xf01270f8
f010ee98:	6a 41                	push   $0x41
f010ee9a:	68 bd 70 12 f0       	push   $0xf01270bd
f010ee9f:	e8 76 14 ff ff       	call   f010031a <_panic>

f010eea4 <init_ksemaphore>:
#include "channel.h"
#include "../cpu/cpu.h"
#include "../proc/user_environment.h"

void init_ksemaphore(struct ksemaphore *ksem, int value, char *name)
{
f010eea4:	55                   	push   %ebp
f010eea5:	89 e5                	mov    %esp,%ebp
f010eea7:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS3]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("init_ksemaphore is not implemented yet");
f010eeaa:	83 ec 04             	sub    $0x4,%esp
f010eead:	68 1c 71 12 f0       	push   $0xf012711c
f010eeb2:	6a 13                	push   $0x13
f010eeb4:	68 43 71 12 f0       	push   $0xf0127143
f010eeb9:	e8 5c 14 ff ff       	call   f010031a <_panic>

f010eebe <wait_ksemaphore>:
	//Your Code is Here...
}

void wait_ksemaphore(struct ksemaphore *ksem)
{
f010eebe:	55                   	push   %ebp
f010eebf:	89 e5                	mov    %esp,%ebp
f010eec1:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS3]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("wait_ksemaphore is not implemented yet");
f010eec4:	83 ec 04             	sub    $0x4,%esp
f010eec7:	68 5c 71 12 f0       	push   $0xf012715c
f010eecc:	6a 1b                	push   $0x1b
f010eece:	68 43 71 12 f0       	push   $0xf0127143
f010eed3:	e8 42 14 ff ff       	call   f010031a <_panic>

f010eed8 <signal_ksemaphore>:
	//Your Code is Here...

}

void signal_ksemaphore(struct ksemaphore *ksem)
{
f010eed8:	55                   	push   %ebp
f010eed9:	89 e5                	mov    %esp,%ebp
f010eedb:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT'24.MS3]
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("signal_ksemaphore is not implemented yet");
f010eede:	83 ec 04             	sub    $0x4,%esp
f010eee1:	68 84 71 12 f0       	push   $0xf0127184
f010eee6:	6a 24                	push   $0x24
f010eee8:	68 43 71 12 f0       	push   $0xf0127143
f010eeed:	e8 28 14 ff ff       	call   f010031a <_panic>

f010eef2 <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010eef2:	55                   	push   %ebp
f010eef3:	89 e5                	mov    %esp,%ebp
f010eef5:	c7 05 b0 4f 55 f0 01 	movl   $0x1,0xf0554fb0
f010eefc:	00 00 00 
f010eeff:	90                   	nop
f010ef00:	5d                   	pop    %ebp
f010ef01:	c3                   	ret    

f010ef02 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f010ef02:	55                   	push   %ebp
f010ef03:	89 e5                	mov    %esp,%ebp
f010ef05:	c7 05 b0 4f 55 f0 02 	movl   $0x2,0xf0554fb0
f010ef0c:	00 00 00 
f010ef0f:	90                   	nop
f010ef10:	5d                   	pop    %ebp
f010ef11:	c3                   	ret    

f010ef12 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f010ef12:	55                   	push   %ebp
f010ef13:	89 e5                	mov    %esp,%ebp
f010ef15:	c7 05 b0 4f 55 f0 03 	movl   $0x3,0xf0554fb0
f010ef1c:	00 00 00 
f010ef1f:	90                   	nop
f010ef20:	5d                   	pop    %ebp
f010ef21:	c3                   	ret    

f010ef22 <isKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f010ef22:	55                   	push   %ebp
f010ef23:	89 e5                	mov    %esp,%ebp
f010ef25:	a1 b0 4f 55 f0       	mov    0xf0554fb0,%eax
f010ef2a:	83 f8 01             	cmp    $0x1,%eax
f010ef2d:	75 04                	jne    f010ef33 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f010ef2f:	b0 01                	mov    $0x1,%al
f010ef31:	eb 02                	jmp    f010ef35 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f010ef33:	b0 00                	mov    $0x0,%al
f010ef35:	5d                   	pop    %ebp
f010ef36:	c3                   	ret    

f010ef37 <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f010ef37:	55                   	push   %ebp
f010ef38:	89 e5                	mov    %esp,%ebp
f010ef3a:	a1 b0 4f 55 f0       	mov    0xf0554fb0,%eax
f010ef3f:	83 f8 02             	cmp    $0x2,%eax
f010ef42:	75 04                	jne    f010ef48 <isKHeapPlacementStrategyBESTFIT+0x11>
f010ef44:	b0 01                	mov    $0x1,%al
f010ef46:	eb 02                	jmp    f010ef4a <isKHeapPlacementStrategyBESTFIT+0x13>
f010ef48:	b0 00                	mov    $0x0,%al
f010ef4a:	5d                   	pop    %ebp
f010ef4b:	c3                   	ret    

f010ef4c <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f010ef4c:	55                   	push   %ebp
f010ef4d:	89 e5                	mov    %esp,%ebp
f010ef4f:	a1 b0 4f 55 f0       	mov    0xf0554fb0,%eax
f010ef54:	83 f8 03             	cmp    $0x3,%eax
f010ef57:	75 04                	jne    f010ef5d <isKHeapPlacementStrategyNEXTFIT+0x11>
f010ef59:	b0 01                	mov    $0x1,%al
f010ef5b:	eb 02                	jmp    f010ef5f <isKHeapPlacementStrategyNEXTFIT+0x13>
f010ef5d:	b0 00                	mov    $0x0,%al
f010ef5f:	5d                   	pop    %ebp
f010ef60:	c3                   	ret    

f010ef61 <tst_handler>:

//=================//
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
f010ef61:	55                   	push   %ebp
f010ef62:	89 e5                	mov    %esp,%ebp
f010ef64:	83 ec 18             	sub    $0x18,%esp
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010ef67:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010ef6e:	eb 26                	jmp    f010ef96 <tst_handler+0x35>
	{
		arguments[a] = arguments[a+1] ;
f010ef70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ef73:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ef7a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ef7d:	01 c2                	add    %eax,%edx
f010ef7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ef82:	40                   	inc    %eax
f010ef83:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010ef8a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ef8d:	01 c8                	add    %ecx,%eax
f010ef8f:	8b 00                	mov    (%eax),%eax
f010ef91:	89 02                	mov    %eax,(%edx)
/*Test MAIN Handler*/
//=================//
int tst_handler(int number_of_arguments, char **arguments)
{
	//Remove "tst" from arguments
	for (int a = 0; a < number_of_arguments - 1; ++a)
f010ef93:	ff 45 f4             	incl   -0xc(%ebp)
f010ef96:	8b 45 08             	mov    0x8(%ebp),%eax
f010ef99:	48                   	dec    %eax
f010ef9a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010ef9d:	7f d1                	jg     f010ef70 <tst_handler+0xf>
	{
		arguments[a] = arguments[a+1] ;
	}
	number_of_arguments--;
f010ef9f:	ff 4d 08             	decl   0x8(%ebp)

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
f010efa2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010efa9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f010efb0:	eb 35                	jmp    f010efe7 <tst_handler+0x86>
	{
		if (strcmp(arguments[0], tests[i].name) == 0)
f010efb2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010efb5:	89 d0                	mov    %edx,%eax
f010efb7:	01 c0                	add    %eax,%eax
f010efb9:	01 d0                	add    %edx,%eax
f010efbb:	c1 e0 02             	shl    $0x2,%eax
f010efbe:	05 c0 9c 17 f0       	add    $0xf0179cc0,%eax
f010efc3:	8b 10                	mov    (%eax),%edx
f010efc5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010efc8:	8b 00                	mov    (%eax),%eax
f010efca:	83 ec 08             	sub    $0x8,%esp
f010efcd:	52                   	push   %edx
f010efce:	50                   	push   %eax
f010efcf:	e8 c2 19 01 00       	call   f0120996 <strcmp>
f010efd4:	83 c4 10             	add    $0x10,%esp
f010efd7:	85 c0                	test   %eax,%eax
f010efd9:	75 09                	jne    f010efe4 <tst_handler+0x83>
		{
			test_found = 1;
f010efdb:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			break;
f010efe2:	eb 0f                	jmp    f010eff3 <tst_handler+0x92>
	number_of_arguments--;

	//Check name of the given test and execute its corresponding function
	int test_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_TESTS; i++)
f010efe4:	ff 45 ec             	incl   -0x14(%ebp)
f010efe7:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010efea:	a1 74 9d 17 f0       	mov    0xf0179d74,%eax
f010efef:	39 c2                	cmp    %eax,%edx
f010eff1:	72 bf                	jb     f010efb2 <tst_handler+0x51>
			test_found = 1;
			break;
		}
	}

	if(test_found)
f010eff3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010eff7:	74 29                	je     f010f022 <tst_handler+0xc1>
	{
		int return_value;
		return_value = tests[i].function_to_execute(number_of_arguments, arguments);
f010eff9:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010effc:	89 d0                	mov    %edx,%eax
f010effe:	01 c0                	add    %eax,%eax
f010f000:	01 d0                	add    %edx,%eax
f010f002:	c1 e0 02             	shl    $0x2,%eax
f010f005:	05 c8 9c 17 f0       	add    $0xf0179cc8,%eax
f010f00a:	8b 00                	mov    (%eax),%eax
f010f00c:	83 ec 08             	sub    $0x8,%esp
f010f00f:	ff 75 0c             	pushl  0xc(%ebp)
f010f012:	ff 75 08             	pushl  0x8(%ebp)
f010f015:	ff d0                	call   *%eax
f010f017:	83 c4 10             	add    $0x10,%esp
f010f01a:	89 45 e8             	mov    %eax,-0x18(%ebp)
		return return_value;
f010f01d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010f020:	eb 1b                	jmp    f010f03d <tst_handler+0xdc>
	}
	else
	{
		cprintf("Unknown test '%s'\n", arguments[0]);
f010f022:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f025:	8b 00                	mov    (%eax),%eax
f010f027:	83 ec 08             	sub    $0x8,%esp
f010f02a:	50                   	push   %eax
f010f02b:	68 c4 74 12 f0       	push   $0xf01274c4
f010f030:	e8 37 1f ff ff       	call   f0100f6c <cprintf>
f010f035:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f038:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f010f03d:	c9                   	leave  
f010f03e:	c3                   	ret    

f010f03f <tst_three_creation_functions>:

//=================//
/*TESTING Functions*/
//=================//
int tst_three_creation_functions(int number_of_arguments, char **arguments)
{
f010f03f:	55                   	push   %ebp
f010f040:	89 e5                	mov    %esp,%ebp
f010f042:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f010f045:	e8 0f f1 00 00       	call   f011e159 <test_three_creation_functions>
	return 0;
f010f04a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f04f:	c9                   	leave  
f010f050:	c3                   	ret    

f010f051 <tst_priority1>:

int tst_priority1(int number_of_arguments, char **arguments)
{
f010f051:	55                   	push   %ebp
f010f052:	89 e5                	mov    %esp,%ebp
f010f054:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f010f057:	e8 51 80 00 00       	call   f01170ad <test_priority_normal_and_higher>
	return 0;
f010f05c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f061:	c9                   	leave  
f010f062:	c3                   	ret    

f010f063 <tst_priority2>:

int tst_priority2(int number_of_arguments, char **arguments)
{
f010f063:	55                   	push   %ebp
f010f064:	89 e5                	mov    %esp,%ebp
f010f066:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f010f069:	e8 a9 8a 00 00       	call   f0117b17 <test_priority_normal_and_lower>
	return 0;
f010f06e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f073:	c9                   	leave  
f010f074:	c3                   	ret    

f010f075 <tst_kfreeall>:

int tst_kfreeall(int number_of_arguments, char **arguments)
{
f010f075:	55                   	push   %ebp
f010f076:	89 e5                	mov    %esp,%ebp
f010f078:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f010f07b:	e8 91 f2 00 00       	call   f011e311 <test_kfreeall>
	return 0;
f010f080:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f085:	c9                   	leave  
f010f086:	c3                   	ret    

f010f087 <tst_kexpand>:

int tst_kexpand(int number_of_arguments, char **arguments)
{
f010f087:	55                   	push   %ebp
f010f088:	89 e5                	mov    %esp,%ebp
f010f08a:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f010f08d:	e8 9c f2 00 00       	call   f011e32e <test_kexpand>
	return 0;
f010f092:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f097:	c9                   	leave  
f010f098:	c3                   	ret    

f010f099 <tst_kshrink>:

int tst_kshrink(int number_of_arguments, char **arguments)
{
f010f099:	55                   	push   %ebp
f010f09a:	89 e5                	mov    %esp,%ebp
f010f09c:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f010f09f:	e8 a7 f2 00 00       	call   f011e34b <test_kshrink>
	return 0;
f010f0a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f0a9:	c9                   	leave  
f010f0aa:	c3                   	ret    

f010f0ab <tst_kfreelast>:

int tst_kfreelast(int number_of_arguments, char **arguments)
{
f010f0ab:	55                   	push   %ebp
f010f0ac:	89 e5                	mov    %esp,%ebp
f010f0ae:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f010f0b1:	e8 b2 f2 00 00       	call   f011e368 <test_kfreelast>
	return 0;
f010f0b6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f0bb:	c9                   	leave  
f010f0bc:	c3                   	ret    

f010f0bd <tst_sc_MLFQ>:

int tst_sc_MLFQ(int number_of_arguments, char **arguments)
{
f010f0bd:	55                   	push   %ebp
f010f0be:	89 e5                	mov    %esp,%ebp
f010f0c0:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f010f0c3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f0c6:	83 c0 04             	add    $0x4,%eax
f010f0c9:	8b 00                	mov    (%eax),%eax
f010f0cb:	83 ec 04             	sub    $0x4,%esp
f010f0ce:	6a 0a                	push   $0xa
f010f0d0:	6a 00                	push   $0x0
f010f0d2:	50                   	push   %eax
f010f0d3:	e8 12 1b 01 00       	call   f0120bea <strtol>
f010f0d8:	83 c4 10             	add    $0x10,%esp
f010f0db:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f010f0de:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f010f0e5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	acquire_spinlock(&ProcessQueues.qlock);
f010f0ec:	83 ec 0c             	sub    $0xc,%esp
f010f0ef:	68 60 24 55 f0       	push   $0xf0552460
f010f0f4:	e8 de f9 ff ff       	call   f010ead7 <acquire_spinlock>
f010f0f9:	83 c4 10             	add    $0x10,%esp
	{
		LIST_FOREACH(e, &ProcessQueues.env_exit_queue)
f010f0fc:	a1 e0 24 55 f0       	mov    0xf05524e0,%eax
f010f101:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010f104:	eb 3b                	jmp    f010f141 <tst_sc_MLFQ+0x84>
			{
			if (strcmp(e->prog_name, "tmlfq_2") == 0)
f010f106:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f109:	83 c0 20             	add    $0x20,%eax
f010f10c:	83 ec 08             	sub    $0x8,%esp
f010f10f:	68 d7 74 12 f0       	push   $0xf01274d7
f010f114:	50                   	push   %eax
f010f115:	e8 7c 18 01 00       	call   f0120996 <strcmp>
f010f11a:	83 c4 10             	add    $0x10,%esp
f010f11d:	85 c0                	test   %eax,%eax
f010f11f:	75 12                	jne    f010f133 <tst_sc_MLFQ+0x76>
			{
				if (firstTime)
f010f121:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f125:	74 07                	je     f010f12e <tst_sc_MLFQ+0x71>
					firstTime = 0;
f010f127:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				cnt++ ;
f010f12e:	ff 45 f4             	incl   -0xc(%ebp)
f010f131:	eb 06                	jmp    f010f139 <tst_sc_MLFQ+0x7c>
			}
			else if (!firstTime)
f010f133:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f137:	74 31                	je     f010f16a <tst_sc_MLFQ+0xad>
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	acquire_spinlock(&ProcessQueues.qlock);
	{
		LIST_FOREACH(e, &ProcessQueues.env_exit_queue)
f010f139:	a1 e8 24 55 f0       	mov    0xf05524e8,%eax
f010f13e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010f141:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010f145:	74 08                	je     f010f14f <tst_sc_MLFQ+0x92>
f010f147:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f14a:	8b 40 08             	mov    0x8(%eax),%eax
f010f14d:	eb 05                	jmp    f010f154 <tst_sc_MLFQ+0x97>
f010f14f:	b8 00 00 00 00       	mov    $0x0,%eax
f010f154:	a3 e8 24 55 f0       	mov    %eax,0xf05524e8
f010f159:	a1 e8 24 55 f0       	mov    0xf05524e8,%eax
f010f15e:	85 c0                	test   %eax,%eax
f010f160:	75 a4                	jne    f010f106 <tst_sc_MLFQ+0x49>
f010f162:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010f166:	75 9e                	jne    f010f106 <tst_sc_MLFQ+0x49>
f010f168:	eb 01                	jmp    f010f16b <tst_sc_MLFQ+0xae>
				if (firstTime)
					firstTime = 0;
				cnt++ ;
			}
			else if (!firstTime)
				break;
f010f16a:	90                   	nop
			}
		if(cnt == numOfSlave2)
f010f16b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f16e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010f171:	75 12                	jne    f010f185 <tst_sc_MLFQ+0xc8>
		{
			cprintf("Congratulations... MLFQScenario# completed successfully\n");
f010f173:	83 ec 0c             	sub    $0xc,%esp
f010f176:	68 e0 74 12 f0       	push   $0xf01274e0
f010f17b:	e8 ec 1d ff ff       	call   f0100f6c <cprintf>
f010f180:	83 c4 10             	add    $0x10,%esp
f010f183:	eb 17                	jmp    f010f19c <tst_sc_MLFQ+0xdf>
		}
		else
		{
			panic("MLFQScenario# failed\n");
f010f185:	83 ec 04             	sub    $0x4,%esp
f010f188:	68 19 75 12 f0       	push   $0xf0127519
f010f18d:	68 9b 00 00 00       	push   $0x9b
f010f192:	68 2f 75 12 f0       	push   $0xf012752f
f010f197:	e8 7e 11 ff ff       	call   f010031a <_panic>
		}
	}
	release_spinlock(&ProcessQueues.qlock);
f010f19c:	83 ec 0c             	sub    $0xc,%esp
f010f19f:	68 60 24 55 f0       	push   $0xf0552460
f010f1a4:	e8 b5 f9 ff ff       	call   f010eb5e <release_spinlock>
f010f1a9:	83 c4 10             	add    $0x10,%esp
	return 0;
f010f1ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f1b1:	c9                   	leave  
f010f1b2:	c3                   	ret    

f010f1b3 <tst_bsd_nice>:


/*2023*/
int tst_bsd_nice(int number_of_arguments, char **arguments)
{
f010f1b3:	55                   	push   %ebp
f010f1b4:	89 e5                	mov    %esp,%ebp
f010f1b6:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments != 2)
f010f1b9:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010f1bd:	74 17                	je     f010f1d6 <tst_bsd_nice+0x23>
	{
		cprintf("Invalid number of arguments! USAGE: tst bsd_nice <testnumber>\n");
f010f1bf:	83 ec 0c             	sub    $0xc,%esp
f010f1c2:	68 48 75 12 f0       	push   $0xf0127548
f010f1c7:	e8 a0 1d ff ff       	call   f0100f6c <cprintf>
f010f1cc:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f1cf:	b8 00 00 00 00       	mov    $0x0,%eax
f010f1d4:	eb 45                	jmp    f010f21b <tst_bsd_nice+0x68>
	}
	int testNumber = strtol(arguments[1], NULL, 10);
f010f1d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f1d9:	83 c0 04             	add    $0x4,%eax
f010f1dc:	8b 00                	mov    (%eax),%eax
f010f1de:	83 ec 04             	sub    $0x4,%esp
f010f1e1:	6a 0a                	push   $0xa
f010f1e3:	6a 00                	push   $0x0
f010f1e5:	50                   	push   %eax
f010f1e6:	e8 ff 19 01 00       	call   f0120bea <strtol>
f010f1eb:	83 c4 10             	add    $0x10,%esp
f010f1ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
	switch (testNumber)
f010f1f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f1f4:	83 f8 01             	cmp    $0x1,%eax
f010f1f7:	74 10                	je     f010f209 <tst_bsd_nice+0x56>
f010f1f9:	83 f8 02             	cmp    $0x2,%eax
f010f1fc:	74 12                	je     f010f210 <tst_bsd_nice+0x5d>
f010f1fe:	85 c0                	test   %eax,%eax
f010f200:	75 14                	jne    f010f216 <tst_bsd_nice+0x63>
	{
	case 0:
		test_bsd_nice_0();
f010f202:	e8 54 f4 00 00       	call   f011e65b <test_bsd_nice_0>
		break;
f010f207:	eb 0d                	jmp    f010f216 <tst_bsd_nice+0x63>
	case 1:
		test_bsd_nice_1();
f010f209:	e8 d7 f6 00 00       	call   f011e8e5 <test_bsd_nice_1>
		break;
f010f20e:	eb 06                	jmp    f010f216 <tst_bsd_nice+0x63>
	case 2:
		test_bsd_nice_2();
f010f210:	e8 e4 f8 00 00       	call   f011eaf9 <test_bsd_nice_2>
		break;
f010f215:	90                   	nop
	}
	return 0;
f010f216:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f21b:	c9                   	leave  
f010f21c:	c3                   	ret    

f010f21d <tst_str2lower>:

int tst_str2lower(int number_of_arguments, char **arguments)
{
f010f21d:	55                   	push   %ebp
f010f21e:	89 e5                	mov    %esp,%ebp
f010f220:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 1)
f010f223:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010f227:	74 17                	je     f010f240 <tst_str2lower+0x23>
	{
		cprintf("Invalid number of arguments! USAGE: tst str2lower\n");
f010f229:	83 ec 0c             	sub    $0xc,%esp
f010f22c:	68 88 75 12 f0       	push   $0xf0127588
f010f231:	e8 36 1d ff ff       	call   f0100f6c <cprintf>
f010f236:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f239:	b8 00 00 00 00       	mov    $0x0,%eax
f010f23e:	eb 0a                	jmp    f010f24a <tst_str2lower+0x2d>
	}

	test_str2lower_function();
f010f240:	e8 42 29 00 00       	call   f0111b87 <test_str2lower_function>
	return 0;
f010f245:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f24a:	c9                   	leave  
f010f24b:	c3                   	ret    

f010f24c <tst_autocomplete>:

int tst_autocomplete(int number_of_arguments, char **arguments)
{
f010f24c:	55                   	push   %ebp
f010f24d:	89 e5                	mov    %esp,%ebp
f010f24f:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f010f252:	e8 66 25 00 00       	call   f01117bd <TestAutoCompleteCommand>
f010f257:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f010f25a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f25f:	c9                   	leave  
f010f260:	c3                   	ret    

f010f261 <tst_dyn_alloc>:
int tst_dyn_alloc(int number_of_arguments, char **arguments)
{
f010f261:	55                   	push   %ebp
f010f262:	89 e5                	mov    %esp,%ebp
f010f264:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010f267:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010f26b:	74 1a                	je     f010f287 <tst_dyn_alloc+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tst dynalloc <testname>\n") ;
f010f26d:	83 ec 0c             	sub    $0xc,%esp
f010f270:	68 bc 75 12 f0       	push   $0xf01275bc
f010f275:	e8 f2 1c ff ff       	call   f0100f6c <cprintf>
f010f27a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f27d:	b8 00 00 00 00       	mov    $0x0,%eax
f010f282:	e9 2f 01 00 00       	jmp    f010f3b6 <tst_dyn_alloc+0x155>
	}
	//str2lower(arguments[1]);
	// Test 1 Example for initialize_MemBlocksList: tstdynalloc init
	if(strcmp(arguments[1], "init") == 0)
f010f287:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f28a:	83 c0 04             	add    $0x4,%eax
f010f28d:	8b 00                	mov    (%eax),%eax
f010f28f:	83 ec 08             	sub    $0x8,%esp
f010f292:	68 f9 75 12 f0       	push   $0xf01275f9
f010f297:	50                   	push   %eax
f010f298:	e8 f9 16 01 00       	call   f0120996 <strcmp>
f010f29d:	83 c4 10             	add    $0x10,%esp
f010f2a0:	85 c0                	test   %eax,%eax
f010f2a2:	75 0a                	jne    f010f2ae <tst_dyn_alloc+0x4d>
	{
		test_initialize_dynamic_allocator();
f010f2a4:	e8 35 07 00 00       	call   f010f9de <test_initialize_dynamic_allocator>
f010f2a9:	e9 03 01 00 00       	jmp    f010f3b1 <tst_dyn_alloc+0x150>
	}
	// Test 2 Example for alloc_block_FF: tstdynalloc allocFF
	else if(strcmp(arguments[1], "allocff") == 0)
f010f2ae:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f2b1:	83 c0 04             	add    $0x4,%eax
f010f2b4:	8b 00                	mov    (%eax),%eax
f010f2b6:	83 ec 08             	sub    $0x8,%esp
f010f2b9:	68 fe 75 12 f0       	push   $0xf01275fe
f010f2be:	50                   	push   %eax
f010f2bf:	e8 d2 16 01 00       	call   f0120996 <strcmp>
f010f2c4:	83 c4 10             	add    $0x10,%esp
f010f2c7:	85 c0                	test   %eax,%eax
f010f2c9:	75 0a                	jne    f010f2d5 <tst_dyn_alloc+0x74>
	{
		test_alloc_block_FF();
f010f2cb:	e8 c7 0b 00 00       	call   f010fe97 <test_alloc_block_FF>
f010f2d0:	e9 dc 00 00 00       	jmp    f010f3b1 <tst_dyn_alloc+0x150>
	}
	// Test 3 Example for alloc_block_BF: tstdynalloc allocBF
	else if(strcmp(arguments[1], "allocbf") == 0)
f010f2d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f2d8:	83 c0 04             	add    $0x4,%eax
f010f2db:	8b 00                	mov    (%eax),%eax
f010f2dd:	83 ec 08             	sub    $0x8,%esp
f010f2e0:	68 06 76 12 f0       	push   $0xf0127606
f010f2e5:	50                   	push   %eax
f010f2e6:	e8 ab 16 01 00       	call   f0120996 <strcmp>
f010f2eb:	83 c4 10             	add    $0x10,%esp
f010f2ee:	85 c0                	test   %eax,%eax
f010f2f0:	75 0a                	jne    f010f2fc <tst_dyn_alloc+0x9b>
	{
		test_alloc_block_BF();
f010f2f2:	e8 1a 10 00 00       	call   f0110311 <test_alloc_block_BF>
f010f2f7:	e9 b5 00 00 00       	jmp    f010f3b1 <tst_dyn_alloc+0x150>
	}
	// Test 4 Example for alloc_block_NF: tstdynalloc allocNF
	else if(strcmp(arguments[1], "allocnf") == 0)
f010f2fc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f2ff:	83 c0 04             	add    $0x4,%eax
f010f302:	8b 00                	mov    (%eax),%eax
f010f304:	83 ec 08             	sub    $0x8,%esp
f010f307:	68 0e 76 12 f0       	push   $0xf012760e
f010f30c:	50                   	push   %eax
f010f30d:	e8 84 16 01 00       	call   f0120996 <strcmp>
f010f312:	83 c4 10             	add    $0x10,%esp
f010f315:	85 c0                	test   %eax,%eax
f010f317:	75 0a                	jne    f010f323 <tst_dyn_alloc+0xc2>
	{
		test_alloc_block_NF();
f010f319:	e8 10 10 00 00       	call   f011032e <test_alloc_block_NF>
f010f31e:	e9 8e 00 00 00       	jmp    f010f3b1 <tst_dyn_alloc+0x150>
	}
	// Test 5 Example for free_block: tstdynalloc freeFF
	else if(strcmp(arguments[1], "freeff") == 0)
f010f323:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f326:	83 c0 04             	add    $0x4,%eax
f010f329:	8b 00                	mov    (%eax),%eax
f010f32b:	83 ec 08             	sub    $0x8,%esp
f010f32e:	68 16 76 12 f0       	push   $0xf0127616
f010f333:	50                   	push   %eax
f010f334:	e8 5d 16 01 00       	call   f0120996 <strcmp>
f010f339:	83 c4 10             	add    $0x10,%esp
f010f33c:	85 c0                	test   %eax,%eax
f010f33e:	75 07                	jne    f010f347 <tst_dyn_alloc+0xe6>
	{
		test_free_block_FF();
f010f340:	e8 ef 0f 00 00       	call   f0110334 <test_free_block_FF>
f010f345:	eb 6a                	jmp    f010f3b1 <tst_dyn_alloc+0x150>
	}
	// Test 6 Example for free_block: tstdynalloc freeBF
	else if(strcmp(arguments[1], "freebf") == 0)
f010f347:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f34a:	83 c0 04             	add    $0x4,%eax
f010f34d:	8b 00                	mov    (%eax),%eax
f010f34f:	83 ec 08             	sub    $0x8,%esp
f010f352:	68 1d 76 12 f0       	push   $0xf012761d
f010f357:	50                   	push   %eax
f010f358:	e8 39 16 01 00       	call   f0120996 <strcmp>
f010f35d:	83 c4 10             	add    $0x10,%esp
f010f360:	85 c0                	test   %eax,%eax
f010f362:	75 07                	jne    f010f36b <tst_dyn_alloc+0x10a>
	{
		test_free_block_BF();
f010f364:	e8 03 1f 00 00       	call   f011126c <test_free_block_BF>
f010f369:	eb 46                	jmp    f010f3b1 <tst_dyn_alloc+0x150>
	}
	// Test 7 Example for free_block: tstdynalloc freeNF
	else if(strcmp(arguments[1], "freenf") == 0)
f010f36b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f36e:	83 c0 04             	add    $0x4,%eax
f010f371:	8b 00                	mov    (%eax),%eax
f010f373:	83 ec 08             	sub    $0x8,%esp
f010f376:	68 24 76 12 f0       	push   $0xf0127624
f010f37b:	50                   	push   %eax
f010f37c:	e8 15 16 01 00       	call   f0120996 <strcmp>
f010f381:	83 c4 10             	add    $0x10,%esp
f010f384:	85 c0                	test   %eax,%eax
f010f386:	75 07                	jne    f010f38f <tst_dyn_alloc+0x12e>
	{
		test_free_block_NF();
f010f388:	e8 2c 1f 00 00       	call   f01112b9 <test_free_block_NF>
f010f38d:	eb 22                	jmp    f010f3b1 <tst_dyn_alloc+0x150>
	}
	// Test 8 Example for realloc_block_ff: tstdynalloc reallocFF
	else if(strcmp(arguments[1], "reallocff") == 0)
f010f38f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f392:	83 c0 04             	add    $0x4,%eax
f010f395:	8b 00                	mov    (%eax),%eax
f010f397:	83 ec 08             	sub    $0x8,%esp
f010f39a:	68 2b 76 12 f0       	push   $0xf012762b
f010f39f:	50                   	push   %eax
f010f3a0:	e8 f1 15 01 00       	call   f0120996 <strcmp>
f010f3a5:	83 c4 10             	add    $0x10,%esp
f010f3a8:	85 c0                	test   %eax,%eax
f010f3aa:	75 05                	jne    f010f3b1 <tst_dyn_alloc+0x150>
	{
		test_realloc_block_FF();
f010f3ac:	e8 25 1f 00 00       	call   f01112d6 <test_realloc_block_FF>
		//test_realloc_block_FF_COMPLETE();
	}
	return 0;
f010f3b1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f3b6:	c9                   	leave  
f010f3b7:	c3                   	ret    

f010f3b8 <tst_chunks>:

int tst_chunks(int number_of_arguments, char **arguments)
{
f010f3b8:	55                   	push   %ebp
f010f3b9:	89 e5                	mov    %esp,%ebp
f010f3bb:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010f3be:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010f3c2:	74 1a                	je     f010f3de <tst_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f010f3c4:	83 ec 0c             	sub    $0xc,%esp
f010f3c7:	68 38 76 12 f0       	push   $0xf0127638
f010f3cc:	e8 9b 1b ff ff       	call   f0100f6c <cprintf>
f010f3d1:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f3d4:	b8 00 00 00 00       	mov    $0x0,%eax
f010f3d9:	e9 e1 00 00 00       	jmp    f010f4bf <tst_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f010f3de:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f3e1:	83 c0 04             	add    $0x4,%eax
f010f3e4:	8b 00                	mov    (%eax),%eax
f010f3e6:	83 ec 08             	sub    $0x8,%esp
f010f3e9:	68 71 76 12 f0       	push   $0xf0127671
f010f3ee:	50                   	push   %eax
f010f3ef:	e8 a2 15 01 00       	call   f0120996 <strcmp>
f010f3f4:	83 c4 10             	add    $0x10,%esp
f010f3f7:	85 c0                	test   %eax,%eax
f010f3f9:	75 0a                	jne    f010f405 <tst_chunks+0x4d>
	{
		test_cut_paste_pages();
f010f3fb:	e8 9a 30 00 00       	call   f011249a <test_cut_paste_pages>
f010f400:	e9 b5 00 00 00       	jmp    f010f4ba <tst_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f010f405:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f408:	83 c0 04             	add    $0x4,%eax
f010f40b:	8b 00                	mov    (%eax),%eax
f010f40d:	83 ec 08             	sub    $0x8,%esp
f010f410:	68 7a 76 12 f0       	push   $0xf012767a
f010f415:	50                   	push   %eax
f010f416:	e8 7b 15 01 00       	call   f0120996 <strcmp>
f010f41b:	83 c4 10             	add    $0x10,%esp
f010f41e:	85 c0                	test   %eax,%eax
f010f420:	75 0a                	jne    f010f42c <tst_chunks+0x74>
	{
		test_copy_paste_chunk();
f010f422:	e8 be 3a 00 00       	call   f0112ee5 <test_copy_paste_chunk>
f010f427:	e9 8e 00 00 00       	jmp    f010f4ba <tst_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f010f42c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f42f:	83 c0 04             	add    $0x4,%eax
f010f432:	8b 00                	mov    (%eax),%eax
f010f434:	83 ec 08             	sub    $0x8,%esp
f010f437:	68 84 76 12 f0       	push   $0xf0127684
f010f43c:	50                   	push   %eax
f010f43d:	e8 54 15 01 00       	call   f0120996 <strcmp>
f010f442:	83 c4 10             	add    $0x10,%esp
f010f445:	85 c0                	test   %eax,%eax
f010f447:	75 07                	jne    f010f450 <tst_chunks+0x98>
	{
		test_share_chunk();
f010f449:	e8 95 4b 00 00       	call   f0113fe3 <test_share_chunk>
f010f44e:	eb 6a                	jmp    f010f4ba <tst_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f010f450:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f453:	83 c0 04             	add    $0x4,%eax
f010f456:	8b 00                	mov    (%eax),%eax
f010f458:	83 ec 08             	sub    $0x8,%esp
f010f45b:	68 8a 76 12 f0       	push   $0xf012768a
f010f460:	50                   	push   %eax
f010f461:	e8 30 15 01 00       	call   f0120996 <strcmp>
f010f466:	83 c4 10             	add    $0x10,%esp
f010f469:	85 c0                	test   %eax,%eax
f010f46b:	75 07                	jne    f010f474 <tst_chunks+0xbc>
	{
		test_allocate_chunk();
f010f46d:	e8 99 55 00 00       	call   f0114a0b <test_allocate_chunk>
f010f472:	eb 46                	jmp    f010f4ba <tst_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f010f474:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f477:	83 c0 04             	add    $0x4,%eax
f010f47a:	8b 00                	mov    (%eax),%eax
f010f47c:	83 ec 08             	sub    $0x8,%esp
f010f47f:	68 93 76 12 f0       	push   $0xf0127693
f010f484:	50                   	push   %eax
f010f485:	e8 0c 15 01 00       	call   f0120996 <strcmp>
f010f48a:	83 c4 10             	add    $0x10,%esp
f010f48d:	85 c0                	test   %eax,%eax
f010f48f:	75 07                	jne    f010f498 <tst_chunks+0xe0>
	{
		test_calculate_required_frames();
f010f491:	e8 7c 5e 00 00       	call   f0115312 <test_calculate_required_frames>
f010f496:	eb 22                	jmp    f010f4ba <tst_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f010f498:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f49b:	83 c0 04             	add    $0x4,%eax
f010f49e:	8b 00                	mov    (%eax),%eax
f010f4a0:	83 ec 08             	sub    $0x8,%esp
f010f4a3:	68 a2 76 12 f0       	push   $0xf01276a2
f010f4a8:	50                   	push   %eax
f010f4a9:	e8 e8 14 01 00       	call   f0120996 <strcmp>
f010f4ae:	83 c4 10             	add    $0x10,%esp
f010f4b1:	85 c0                	test   %eax,%eax
f010f4b3:	75 05                	jne    f010f4ba <tst_chunks+0x102>
	{
		test_calculate_allocated_space();
f010f4b5:	e8 cc 66 00 00       	call   f0115b86 <test_calculate_allocated_space>
	}
	return 0;
f010f4ba:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f4bf:	c9                   	leave  
f010f4c0:	c3                   	ret    

f010f4c1 <tst_paging_manipulation>:

int tst_paging_manipulation(int number_of_arguments, char **arguments)
{
f010f4c1:	55                   	push   %ebp
f010f4c2:	89 e5                	mov    %esp,%ebp
f010f4c4:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f010f4c7:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010f4cb:	74 1a                	je     f010f4e7 <tst_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f010f4cd:	83 ec 0c             	sub    $0xc,%esp
f010f4d0:	68 b4 76 12 f0       	push   $0xf01276b4
f010f4d5:	e8 92 1a ff ff       	call   f0100f6c <cprintf>
f010f4da:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f4dd:	b8 00 00 00 00       	mov    $0x0,%eax
f010f4e2:	e9 ba 00 00 00       	jmp    f010f5a1 <tst_paging_manipulation+0xe0>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f010f4e7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f4ea:	83 c0 04             	add    $0x4,%eax
f010f4ed:	8b 00                	mov    (%eax),%eax
f010f4ef:	83 ec 08             	sub    $0x8,%esp
f010f4f2:	68 ea 76 12 f0       	push   $0xf01276ea
f010f4f7:	50                   	push   %eax
f010f4f8:	e8 99 14 01 00       	call   f0120996 <strcmp>
f010f4fd:	83 c4 10             	add    $0x10,%esp
f010f500:	85 c0                	test   %eax,%eax
f010f502:	75 0a                	jne    f010f50e <tst_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f010f504:	e8 04 2a 00 00       	call   f0111f0d <test_pt_set_page_permissions>
f010f509:	e9 8e 00 00 00       	jmp    f010f59c <tst_paging_manipulation+0xdb>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f010f50e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f511:	83 c0 04             	add    $0x4,%eax
f010f514:	8b 00                	mov    (%eax),%eax
f010f516:	83 ec 08             	sub    $0x8,%esp
f010f519:	68 f2 76 12 f0       	push   $0xf01276f2
f010f51e:	50                   	push   %eax
f010f51f:	e8 72 14 01 00       	call   f0120996 <strcmp>
f010f524:	83 c4 10             	add    $0x10,%esp
f010f527:	85 c0                	test   %eax,%eax
f010f529:	75 07                	jne    f010f532 <tst_paging_manipulation+0x71>
	{
		test_pt_set_page_permissions_invalid_va();
f010f52b:	e8 4c 2c 00 00       	call   f011217c <test_pt_set_page_permissions_invalid_va>
f010f530:	eb 6a                	jmp    f010f59c <tst_paging_manipulation+0xdb>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f010f532:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f535:	83 c0 04             	add    $0x4,%eax
f010f538:	8b 00                	mov    (%eax),%eax
f010f53a:	83 ec 08             	sub    $0x8,%esp
f010f53d:	68 fa 76 12 f0       	push   $0xf01276fa
f010f542:	50                   	push   %eax
f010f543:	e8 4e 14 01 00       	call   f0120996 <strcmp>
f010f548:	83 c4 10             	add    $0x10,%esp
f010f54b:	85 c0                	test   %eax,%eax
f010f54d:	75 07                	jne    f010f556 <tst_paging_manipulation+0x95>
	{
		test_pt_get_page_permissions();
f010f54f:	e8 71 2c 00 00       	call   f01121c5 <test_pt_get_page_permissions>
f010f554:	eb 46                	jmp    f010f59c <tst_paging_manipulation+0xdb>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f010f556:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f559:	83 c0 04             	add    $0x4,%eax
f010f55c:	8b 00                	mov    (%eax),%eax
f010f55e:	83 ec 08             	sub    $0x8,%esp
f010f561:	68 02 77 12 f0       	push   $0xf0127702
f010f566:	50                   	push   %eax
f010f567:	e8 2a 14 01 00       	call   f0120996 <strcmp>
f010f56c:	83 c4 10             	add    $0x10,%esp
f010f56f:	85 c0                	test   %eax,%eax
f010f571:	75 07                	jne    f010f57a <tst_paging_manipulation+0xb9>
	{
		test_pt_clear_page_table_entry();
f010f573:	e8 91 2d 00 00       	call   f0112309 <test_pt_clear_page_table_entry>
f010f578:	eb 22                	jmp    f010f59c <tst_paging_manipulation+0xdb>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f010f57a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f57d:	83 c0 04             	add    $0x4,%eax
f010f580:	8b 00                	mov    (%eax),%eax
f010f582:	83 ec 08             	sub    $0x8,%esp
f010f585:	68 09 77 12 f0       	push   $0xf0127709
f010f58a:	50                   	push   %eax
f010f58b:	e8 06 14 01 00       	call   f0120996 <strcmp>
f010f590:	83 c4 10             	add    $0x10,%esp
f010f593:	85 c0                	test   %eax,%eax
f010f595:	75 05                	jne    f010f59c <tst_paging_manipulation+0xdb>
	{
		test_pt_clear_page_table_entry_invalid_va();
f010f597:	e8 c6 2e 00 00       	call   f0112462 <test_pt_clear_page_table_entry_invalid_va>
	// Test 4-Convert virtual to physical: tstpg v2p
//	else if(strcmp(arguments[1], "v2p") == 0)
//	{
//		test_virtual_to_physical();
//	}
	return 0;
f010f59c:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f5a1:	c9                   	leave  
f010f5a2:	c3                   	ret    

f010f5a3 <tst_kheap>:

int tst_kheap(int number_of_arguments, char **arguments)
{
f010f5a3:	55                   	push   %ebp
f010f5a4:	89 e5                	mov    %esp,%ebp
f010f5a6:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f010f5a9:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f5ac:	83 c0 08             	add    $0x8,%eax
f010f5af:	8b 00                	mov    (%eax),%eax
f010f5b1:	83 ec 08             	sub    $0x8,%esp
f010f5b4:	68 10 77 12 f0       	push   $0xf0127710
f010f5b9:	50                   	push   %eax
f010f5ba:	e8 d7 13 01 00       	call   f0120996 <strcmp>
f010f5bf:	83 c4 10             	add    $0x10,%esp
f010f5c2:	85 c0                	test   %eax,%eax
f010f5c4:	75 20                	jne    f010f5e6 <tst_kheap+0x43>
f010f5c6:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f010f5ca:	74 1a                	je     f010f5e6 <tst_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f010f5cc:	83 ec 0c             	sub    $0xc,%esp
f010f5cf:	68 18 77 12 f0       	push   $0xf0127718
f010f5d4:	e8 93 19 ff ff       	call   f0100f6c <cprintf>
f010f5d9:	83 c4 10             	add    $0x10,%esp
		return 0;
f010f5dc:	b8 00 00 00 00       	mov    $0x0,%eax
f010f5e1:	e9 f6 03 00 00       	jmp    f010f9dc <tst_kheap+0x439>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f010f5e6:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f5e9:	83 c0 08             	add    $0x8,%eax
f010f5ec:	8b 00                	mov    (%eax),%eax
f010f5ee:	83 ec 08             	sub    $0x8,%esp
f010f5f1:	68 10 77 12 f0       	push   $0xf0127710
f010f5f6:	50                   	push   %eax
f010f5f7:	e8 9a 13 01 00       	call   f0120996 <strcmp>
f010f5fc:	83 c4 10             	add    $0x10,%esp
f010f5ff:	85 c0                	test   %eax,%eax
f010f601:	74 43                	je     f010f646 <tst_kheap+0xa3>
f010f603:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010f607:	74 3d                	je     f010f646 <tst_kheap+0xa3>
	{
		if (strcmp(arguments[2], "krealloc") != 0 && number_of_arguments != 5)
f010f609:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f60c:	83 c0 08             	add    $0x8,%eax
f010f60f:	8b 00                	mov    (%eax),%eax
f010f611:	83 ec 08             	sub    $0x8,%esp
f010f614:	68 68 77 12 f0       	push   $0xf0127768
f010f619:	50                   	push   %eax
f010f61a:	e8 77 13 01 00       	call   f0120996 <strcmp>
f010f61f:	83 c4 10             	add    $0x10,%esp
f010f622:	85 c0                	test   %eax,%eax
f010f624:	74 20                	je     f010f646 <tst_kheap+0xa3>
f010f626:	83 7d 08 05          	cmpl   $0x5,0x8(%ebp)
f010f62a:	74 1a                	je     f010f646 <tst_kheap+0xa3>
		{
			cprintf("Invalid number of arguments! USAGE: tst kheap <Strategy> <testname>\n") ;
f010f62c:	83 ec 0c             	sub    $0xc,%esp
f010f62f:	68 74 77 12 f0       	push   $0xf0127774
f010f634:	e8 33 19 ff ff       	call   f0100f6c <cprintf>
f010f639:	83 c4 10             	add    $0x10,%esp
			return 0;
f010f63c:	b8 00 00 00 00       	mov    $0x0,%eax
f010f641:	e9 96 03 00 00       	jmp    f010f9dc <tst_kheap+0x439>
		}
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f010f646:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f649:	83 c0 04             	add    $0x4,%eax
f010f64c:	8b 00                	mov    (%eax),%eax
f010f64e:	83 ec 08             	sub    $0x8,%esp
f010f651:	68 b9 77 12 f0       	push   $0xf01277b9
f010f656:	50                   	push   %eax
f010f657:	e8 3a 13 01 00       	call   f0120996 <strcmp>
f010f65c:	83 c4 10             	add    $0x10,%esp
f010f65f:	85 c0                	test   %eax,%eax
f010f661:	74 1d                	je     f010f680 <tst_kheap+0xdd>
f010f663:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f666:	83 c0 04             	add    $0x4,%eax
f010f669:	8b 00                	mov    (%eax),%eax
f010f66b:	83 ec 08             	sub    $0x8,%esp
f010f66e:	68 bc 77 12 f0       	push   $0xf01277bc
f010f673:	50                   	push   %eax
f010f674:	e8 1d 13 01 00       	call   f0120996 <strcmp>
f010f679:	83 c4 10             	add    $0x10,%esp
f010f67c:	85 c0                	test   %eax,%eax
f010f67e:	75 1a                	jne    f010f69a <tst_kheap+0xf7>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f010f680:	e8 6d f8 ff ff       	call   f010eef2 <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f010f685:	83 ec 0c             	sub    $0xc,%esp
f010f688:	68 c0 77 12 f0       	push   $0xf01277c0
f010f68d:	e8 da 18 ff ff       	call   f0100f6c <cprintf>
f010f692:	83 c4 10             	add    $0x10,%esp
f010f695:	e9 a0 00 00 00       	jmp    f010f73a <tst_kheap+0x197>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f010f69a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f69d:	83 c0 04             	add    $0x4,%eax
f010f6a0:	8b 00                	mov    (%eax),%eax
f010f6a2:	83 ec 08             	sub    $0x8,%esp
f010f6a5:	68 ed 77 12 f0       	push   $0xf01277ed
f010f6aa:	50                   	push   %eax
f010f6ab:	e8 e6 12 01 00       	call   f0120996 <strcmp>
f010f6b0:	83 c4 10             	add    $0x10,%esp
f010f6b3:	85 c0                	test   %eax,%eax
f010f6b5:	74 1d                	je     f010f6d4 <tst_kheap+0x131>
f010f6b7:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f6ba:	83 c0 04             	add    $0x4,%eax
f010f6bd:	8b 00                	mov    (%eax),%eax
f010f6bf:	83 ec 08             	sub    $0x8,%esp
f010f6c2:	68 f0 77 12 f0       	push   $0xf01277f0
f010f6c7:	50                   	push   %eax
f010f6c8:	e8 c9 12 01 00       	call   f0120996 <strcmp>
f010f6cd:	83 c4 10             	add    $0x10,%esp
f010f6d0:	85 c0                	test   %eax,%eax
f010f6d2:	75 17                	jne    f010f6eb <tst_kheap+0x148>
	{
		setKHeapPlacementStrategyBESTFIT();
f010f6d4:	e8 29 f8 ff ff       	call   f010ef02 <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f010f6d9:	83 ec 0c             	sub    $0xc,%esp
f010f6dc:	68 f4 77 12 f0       	push   $0xf01277f4
f010f6e1:	e8 86 18 ff ff       	call   f0100f6c <cprintf>
f010f6e6:	83 c4 10             	add    $0x10,%esp
f010f6e9:	eb 4f                	jmp    f010f73a <tst_kheap+0x197>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f010f6eb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f6ee:	83 c0 04             	add    $0x4,%eax
f010f6f1:	8b 00                	mov    (%eax),%eax
f010f6f3:	83 ec 08             	sub    $0x8,%esp
f010f6f6:	68 20 78 12 f0       	push   $0xf0127820
f010f6fb:	50                   	push   %eax
f010f6fc:	e8 95 12 01 00       	call   f0120996 <strcmp>
f010f701:	83 c4 10             	add    $0x10,%esp
f010f704:	85 c0                	test   %eax,%eax
f010f706:	74 1d                	je     f010f725 <tst_kheap+0x182>
f010f708:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f70b:	83 c0 04             	add    $0x4,%eax
f010f70e:	8b 00                	mov    (%eax),%eax
f010f710:	83 ec 08             	sub    $0x8,%esp
f010f713:	68 23 78 12 f0       	push   $0xf0127823
f010f718:	50                   	push   %eax
f010f719:	e8 78 12 01 00       	call   f0120996 <strcmp>
f010f71e:	83 c4 10             	add    $0x10,%esp
f010f721:	85 c0                	test   %eax,%eax
f010f723:	75 15                	jne    f010f73a <tst_kheap+0x197>
	{
		setKHeapPlacementStrategyNEXTFIT();
f010f725:	e8 e8 f7 ff ff       	call   f010ef12 <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f010f72a:	83 ec 0c             	sub    $0xc,%esp
f010f72d:	68 28 78 12 f0       	push   $0xf0127828
f010f732:	e8 35 18 ff ff       	call   f0100f6c <cprintf>
f010f737:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tst kheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f010f73a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f73d:	83 c0 08             	add    $0x8,%eax
f010f740:	8b 00                	mov    (%eax),%eax
f010f742:	83 ec 08             	sub    $0x8,%esp
f010f745:	68 10 77 12 f0       	push   $0xf0127710
f010f74a:	50                   	push   %eax
f010f74b:	e8 46 12 01 00       	call   f0120996 <strcmp>
f010f750:	83 c4 10             	add    $0x10,%esp
f010f753:	85 c0                	test   %eax,%eax
f010f755:	0f 85 13 01 00 00    	jne    f010f86e <tst_kheap+0x2cb>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f010f75b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f75e:	83 c0 0c             	add    $0xc,%eax
f010f761:	8b 00                	mov    (%eax),%eax
f010f763:	83 ec 04             	sub    $0x4,%esp
f010f766:	6a 0a                	push   $0xa
f010f768:	6a 00                	push   $0x0
f010f76a:	50                   	push   %eax
f010f76b:	e8 7a 14 01 00       	call   f0120bea <strtol>
f010f770:	83 c4 10             	add    $0x10,%esp
f010f773:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f010f776:	e8 a7 f7 ff ff       	call   f010ef22 <isKHeapPlacementStrategyFIRSTFIT>
f010f77b:	84 c0                	test   %al,%al
f010f77d:	74 54                	je     f010f7d3 <tst_kheap+0x230>
		{
			if (testNum == 0)
f010f77f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010f783:	75 1a                	jne    f010f79f <tst_kheap+0x1fc>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010f785:	83 ec 0c             	sub    $0xc,%esp
f010f788:	68 54 78 12 f0       	push   $0xf0127854
f010f78d:	e8 da 17 ff ff       	call   f0100f6c <cprintf>
f010f792:	83 c4 10             	add    $0x10,%esp
				return 0;
f010f795:	b8 00 00 00 00       	mov    $0x0,%eax
f010f79a:	e9 3d 02 00 00       	jmp    f010f9dc <tst_kheap+0x439>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f010f79f:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010f7a3:	75 0a                	jne    f010f7af <tst_kheap+0x20c>
				test_kmalloc();
f010f7a5:	e8 ba 8d 00 00       	call   f0118564 <test_kmalloc>
f010f7aa:	e9 b5 00 00 00       	jmp    f010f864 <tst_kheap+0x2c1>
			else if (testNum == 2)
f010f7af:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010f7b3:	75 0a                	jne    f010f7bf <tst_kheap+0x21c>
				test_kmalloc_firstfit1();
f010f7b5:	e8 c4 98 00 00       	call   f011907e <test_kmalloc_firstfit1>
f010f7ba:	e9 a5 00 00 00       	jmp    f010f864 <tst_kheap+0x2c1>
			else if (testNum == 3)
f010f7bf:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010f7c3:	0f 85 9b 00 00 00    	jne    f010f864 <tst_kheap+0x2c1>
				test_kmalloc_firstfit2();
f010f7c9:	e8 44 a3 00 00       	call   f0119b12 <test_kmalloc_firstfit2>
f010f7ce:	e9 91 00 00 00       	jmp    f010f864 <tst_kheap+0x2c1>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f010f7d3:	e8 5f f7 ff ff       	call   f010ef37 <isKHeapPlacementStrategyBESTFIT>
f010f7d8:	84 c0                	test   %al,%al
f010f7da:	74 47                	je     f010f823 <tst_kheap+0x280>
		{
			if (testNum == 0)
f010f7dc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010f7e0:	75 1a                	jne    f010f7fc <tst_kheap+0x259>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f010f7e2:	83 ec 0c             	sub    $0xc,%esp
f010f7e5:	68 a4 78 12 f0       	push   $0xf01278a4
f010f7ea:	e8 7d 17 ff ff       	call   f0100f6c <cprintf>
f010f7ef:	83 c4 10             	add    $0x10,%esp
				return 0;
f010f7f2:	b8 00 00 00 00       	mov    $0x0,%eax
f010f7f7:	e9 e0 01 00 00       	jmp    f010f9dc <tst_kheap+0x439>
			}
			if (testNum == 1)
f010f7fc:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010f800:	75 07                	jne    f010f809 <tst_kheap+0x266>
				test_kmalloc();
f010f802:	e8 5d 8d 00 00       	call   f0118564 <test_kmalloc>
f010f807:	eb 5b                	jmp    f010f864 <tst_kheap+0x2c1>
			else if (testNum == 2)
f010f809:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010f80d:	75 07                	jne    f010f816 <tst_kheap+0x273>
				test_kmalloc_bestfit1();
f010f80f:	e8 cb e8 00 00       	call   f011e0df <test_kmalloc_bestfit1>
f010f814:	eb 4e                	jmp    f010f864 <tst_kheap+0x2c1>
			else if (testNum == 3)
f010f816:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010f81a:	75 48                	jne    f010f864 <tst_kheap+0x2c1>
				test_kmalloc_bestfit2();
f010f81c:	e8 db e8 00 00       	call   f011e0fc <test_kmalloc_bestfit2>
f010f821:	eb 41                	jmp    f010f864 <tst_kheap+0x2c1>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f010f823:	e8 24 f7 ff ff       	call   f010ef4c <isKHeapPlacementStrategyNEXTFIT>
f010f828:	84 c0                	test   %al,%al
f010f82a:	74 38                	je     f010f864 <tst_kheap+0x2c1>
		{
			if (testNum == 0)
f010f82c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010f830:	75 1a                	jne    f010f84c <tst_kheap+0x2a9>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f010f832:	83 ec 0c             	sub    $0xc,%esp
f010f835:	68 f4 78 12 f0       	push   $0xf01278f4
f010f83a:	e8 2d 17 ff ff       	call   f0100f6c <cprintf>
f010f83f:	83 c4 10             	add    $0x10,%esp
				return 0;
f010f842:	b8 00 00 00 00       	mov    $0x0,%eax
f010f847:	e9 90 01 00 00       	jmp    f010f9dc <tst_kheap+0x439>
			}
			//Test cont. allocation
			if (testNum == 1)
f010f84c:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f010f850:	75 07                	jne    f010f859 <tst_kheap+0x2b6>
				test_kmalloc();
f010f852:	e8 0d 8d 00 00       	call   f0118564 <test_kmalloc>
f010f857:	eb 0b                	jmp    f010f864 <tst_kheap+0x2c1>
			//Test nextfit strategy
			else if (testNum == 2)
f010f859:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010f85d:	75 05                	jne    f010f864 <tst_kheap+0x2c1>
				test_kmalloc_nextfit();
f010f85f:	e8 5b e8 00 00       	call   f011e0bf <test_kmalloc_nextfit>
		}
		return 0;
f010f864:	b8 00 00 00 00       	mov    $0x0,%eax
f010f869:	e9 6e 01 00 00       	jmp    f010f9dc <tst_kheap+0x439>
	}
	// Test 2-kfree: tst kheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f010f86e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f871:	83 c0 08             	add    $0x8,%eax
f010f874:	8b 00                	mov    (%eax),%eax
f010f876:	83 ec 08             	sub    $0x8,%esp
f010f879:	68 42 79 12 f0       	push   $0xf0127942
f010f87e:	50                   	push   %eax
f010f87f:	e8 12 11 01 00       	call   f0120996 <strcmp>
f010f884:	83 c4 10             	add    $0x10,%esp
f010f887:	85 c0                	test   %eax,%eax
f010f889:	75 28                	jne    f010f8b3 <tst_kheap+0x310>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f010f88b:	e8 a7 f6 ff ff       	call   f010ef37 <isKHeapPlacementStrategyBESTFIT>
f010f890:	84 c0                	test   %al,%al
f010f892:	75 09                	jne    f010f89d <tst_kheap+0x2fa>
f010f894:	e8 89 f6 ff ff       	call   f010ef22 <isKHeapPlacementStrategyFIRSTFIT>
f010f899:	84 c0                	test   %al,%al
f010f89b:	74 07                	je     f010f8a4 <tst_kheap+0x301>
		{
			test_kfree_bestfirstfit();
f010f89d:	e8 29 ad 00 00       	call   f011a5cb <test_kfree_bestfirstfit>
f010f8a2:	eb 05                	jmp    f010f8a9 <tst_kheap+0x306>
		}
		else //NEXT & CONT
		{
			test_kfree();
f010f8a4:	e8 90 e8 00 00       	call   f011e139 <test_kfree>
		}
		return 0;
f010f8a9:	b8 00 00 00 00       	mov    $0x0,%eax
f010f8ae:	e9 29 01 00 00       	jmp    f010f9dc <tst_kheap+0x439>
	}
	// Test 3-kphysaddr: tst kheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f010f8b3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f8b6:	83 c0 08             	add    $0x8,%eax
f010f8b9:	8b 00                	mov    (%eax),%eax
f010f8bb:	83 ec 08             	sub    $0x8,%esp
f010f8be:	68 48 79 12 f0       	push   $0xf0127948
f010f8c3:	50                   	push   %eax
f010f8c4:	e8 cd 10 01 00       	call   f0120996 <strcmp>
f010f8c9:	83 c4 10             	add    $0x10,%esp
f010f8cc:	85 c0                	test   %eax,%eax
f010f8ce:	75 0f                	jne    f010f8df <tst_kheap+0x33c>
	{
		test_kheap_phys_addr();
f010f8d0:	e8 01 c3 00 00       	call   f011bbd6 <test_kheap_phys_addr>
		return 0;
f010f8d5:	b8 00 00 00 00       	mov    $0x0,%eax
f010f8da:	e9 fd 00 00 00       	jmp    f010f9dc <tst_kheap+0x439>
	}
	// Test 4-kvirtaddr: tst kheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f010f8df:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f8e2:	83 c0 08             	add    $0x8,%eax
f010f8e5:	8b 00                	mov    (%eax),%eax
f010f8e7:	83 ec 08             	sub    $0x8,%esp
f010f8ea:	68 52 79 12 f0       	push   $0xf0127952
f010f8ef:	50                   	push   %eax
f010f8f0:	e8 a1 10 01 00       	call   f0120996 <strcmp>
f010f8f5:	83 c4 10             	add    $0x10,%esp
f010f8f8:	85 c0                	test   %eax,%eax
f010f8fa:	75 0f                	jne    f010f90b <tst_kheap+0x368>
	{
		test_kheap_virt_addr();
f010f8fc:	e8 4f d0 00 00       	call   f011c950 <test_kheap_virt_addr>
		return 0;
f010f901:	b8 00 00 00 00       	mov    $0x0,%eax
f010f906:	e9 d1 00 00 00       	jmp    f010f9dc <tst_kheap+0x439>
	}
	// Test 5-krealloc: tst kheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f010f90b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f90e:	83 c0 08             	add    $0x8,%eax
f010f911:	8b 00                	mov    (%eax),%eax
f010f913:	83 ec 08             	sub    $0x8,%esp
f010f916:	68 68 77 12 f0       	push   $0xf0127768
f010f91b:	50                   	push   %eax
f010f91c:	e8 75 10 01 00       	call   f0120996 <strcmp>
f010f921:	83 c4 10             	add    $0x10,%esp
f010f924:	85 c0                	test   %eax,%eax
f010f926:	0f 85 89 00 00 00    	jne    f010f9b5 <tst_kheap+0x412>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f010f92c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f92f:	83 c0 0c             	add    $0xc,%eax
f010f932:	8b 00                	mov    (%eax),%eax
f010f934:	83 ec 04             	sub    $0x4,%esp
f010f937:	6a 0a                	push   $0xa
f010f939:	6a 00                	push   $0x0
f010f93b:	50                   	push   %eax
f010f93c:	e8 a9 12 01 00       	call   f0120bea <strtol>
f010f941:	83 c4 10             	add    $0x10,%esp
f010f944:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f010f947:	e8 d6 f5 ff ff       	call   f010ef22 <isKHeapPlacementStrategyFIRSTFIT>
f010f94c:	84 c0                	test   %al,%al
f010f94e:	74 42                	je     f010f992 <tst_kheap+0x3ef>
		{
			if (testNum == 0)
f010f950:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010f954:	75 17                	jne    f010f96d <tst_kheap+0x3ca>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f010f956:	83 ec 0c             	sub    $0xc,%esp
f010f959:	68 54 78 12 f0       	push   $0xf0127854
f010f95e:	e8 09 16 ff ff       	call   f0100f6c <cprintf>
f010f963:	83 c4 10             	add    $0x10,%esp
				return 0;
f010f966:	b8 00 00 00 00       	mov    $0x0,%eax
f010f96b:	eb 6f                	jmp    f010f9dc <tst_kheap+0x439>
			}
			if (testNum==1)
f010f96d:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f010f971:	75 07                	jne    f010f97a <tst_kheap+0x3d7>
				test_krealloc_FF1();
f010f973:	e8 a7 ea 00 00       	call   f011e41f <test_krealloc_FF1>
f010f978:	eb 18                	jmp    f010f992 <tst_kheap+0x3ef>
			else if (testNum==2)
f010f97a:	83 7d f0 02          	cmpl   $0x2,-0x10(%ebp)
f010f97e:	75 07                	jne    f010f987 <tst_kheap+0x3e4>
				test_krealloc_FF2();
f010f980:	e8 e7 ea 00 00       	call   f011e46c <test_krealloc_FF2>
f010f985:	eb 0b                	jmp    f010f992 <tst_kheap+0x3ef>
			else if (testNum==3)
f010f987:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f010f98b:	75 05                	jne    f010f992 <tst_kheap+0x3ef>
				test_krealloc_FF3();
f010f98d:	e8 27 eb 00 00       	call   f011e4b9 <test_krealloc_FF3>
		}
		if (isKHeapPlacementStrategyNEXTFIT())
f010f992:	e8 b5 f5 ff ff       	call   f010ef4c <isKHeapPlacementStrategyNEXTFIT>
f010f997:	84 c0                	test   %al,%al
f010f999:	74 05                	je     f010f9a0 <tst_kheap+0x3fd>
		{
			test_krealloc();
f010f99b:	e8 e5 e9 00 00       	call   f011e385 <test_krealloc>
		}
		if (isKHeapPlacementStrategyBESTFIT())
f010f9a0:	e8 92 f5 ff ff       	call   f010ef37 <isKHeapPlacementStrategyBESTFIT>
f010f9a5:	84 c0                	test   %al,%al
f010f9a7:	74 05                	je     f010f9ae <tst_kheap+0x40b>
		{
			test_krealloc_BF();
f010f9a9:	e8 24 ea 00 00       	call   f011e3d2 <test_krealloc_BF>
		}
		return 0;
f010f9ae:	b8 00 00 00 00       	mov    $0x0,%eax
f010f9b3:	eb 27                	jmp    f010f9dc <tst_kheap+0x439>
	}
	// Test 6-sbr: tst kheap FF sbrk
	else if (strcmp(arguments[2], "sbrk") == 0)
f010f9b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f010f9b8:	83 c0 08             	add    $0x8,%eax
f010f9bb:	8b 00                	mov    (%eax),%eax
f010f9bd:	83 ec 08             	sub    $0x8,%esp
f010f9c0:	68 5c 79 12 f0       	push   $0xf012795c
f010f9c5:	50                   	push   %eax
f010f9c6:	e8 cb 0f 01 00       	call   f0120996 <strcmp>
f010f9cb:	83 c4 10             	add    $0x10,%esp
f010f9ce:	85 c0                	test   %eax,%eax
f010f9d0:	75 05                	jne    f010f9d7 <tst_kheap+0x434>
	{
		test_ksbrk();
f010f9d2:	e8 13 dc 00 00       	call   f011d5ea <test_ksbrk>
	}
	return 0;
f010f9d7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010f9dc:	c9                   	leave  
f010f9dd:	c3                   	ret    

f010f9de <test_initialize_dynamic_allocator>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_dynamic_allocator()
{
f010f9de:	55                   	push   %ebp
f010f9df:	89 e5                	mov    %esp,%ebp
f010f9e1:	83 ec 28             	sub    $0x28,%esp
	panic("test_initialize_dynamic_allocator: the kernel heap should be diabled. make sure USE_KHEAP = 0");
	return;
#endif

	//write initial data at the start (for checking)
	int* tmp_ptr = (int*)KERNEL_HEAP_START;
f010f9e4:	c7 45 f4 00 00 00 f6 	movl   $0xf6000000,-0xc(%ebp)
	*tmp_ptr = -1 ;
f010f9eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f9ee:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	*(tmp_ptr+1) = 1 ;
f010f9f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f9f7:	83 c0 04             	add    $0x4,%eax
f010f9fa:	c7 00 01 00 00 00    	movl   $0x1,(%eax)

	uint32 initAllocatedSpace = 2*Mega;
f010fa00:	c7 45 f0 00 00 20 00 	movl   $0x200000,-0x10(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010fa07:	83 ec 08             	sub    $0x8,%esp
f010fa0a:	ff 75 f0             	pushl  -0x10(%ebp)
f010fa0d:	68 00 00 00 f6       	push   $0xf6000000
f010fa12:	e8 42 1a 01 00       	call   f0121459 <initialize_dynamic_allocator>
f010fa17:	83 c4 10             	add    $0x10,%esp


	//Check#1: Metadata
	uint32* daBeg = (uint32*) KERNEL_HEAP_START ;
f010fa1a:	c7 45 ec 00 00 00 f6 	movl   $0xf6000000,-0x14(%ebp)
	uint32* daEnd = (uint32*) (KERNEL_HEAP_START +  initAllocatedSpace - sizeof(int));
f010fa21:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010fa24:	2d 04 00 00 0a       	sub    $0xa000004,%eax
f010fa29:	89 45 e8             	mov    %eax,-0x18(%ebp)
	uint32* blkHeader = (uint32*) (KERNEL_HEAP_START + sizeof(int));
f010fa2c:	c7 45 e4 04 00 00 f6 	movl   $0xf6000004,-0x1c(%ebp)
	uint32* blkFooter = (uint32*) (KERNEL_HEAP_START +  initAllocatedSpace - 2*sizeof(int));
f010fa33:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010fa36:	2d 08 00 00 0a       	sub    $0xa000008,%eax
f010fa3b:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (*daBeg != 1 || *daEnd != 1 || (*blkHeader != initAllocatedSpace - 2*sizeof(int))|| (*blkFooter != initAllocatedSpace - 2*sizeof(int)))
f010fa3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fa41:	8b 00                	mov    (%eax),%eax
f010fa43:	83 f8 01             	cmp    $0x1,%eax
f010fa46:	75 28                	jne    f010fa70 <test_initialize_dynamic_allocator+0x92>
f010fa48:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010fa4b:	8b 00                	mov    (%eax),%eax
f010fa4d:	83 f8 01             	cmp    $0x1,%eax
f010fa50:	75 1e                	jne    f010fa70 <test_initialize_dynamic_allocator+0x92>
f010fa52:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fa55:	8b 00                	mov    (%eax),%eax
f010fa57:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010fa5a:	83 ea 08             	sub    $0x8,%edx
f010fa5d:	39 d0                	cmp    %edx,%eax
f010fa5f:	75 0f                	jne    f010fa70 <test_initialize_dynamic_allocator+0x92>
f010fa61:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010fa64:	8b 00                	mov    (%eax),%eax
f010fa66:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010fa69:	83 ea 08             	sub    $0x8,%edx
f010fa6c:	39 d0                	cmp    %edx,%eax
f010fa6e:	74 14                	je     f010fa84 <test_initialize_dynamic_allocator+0xa6>
	{
		panic("Content of header/footer and/or DA begin/end are not set correctly");
f010fa70:	83 ec 04             	sub    $0x4,%esp
f010fa73:	68 64 79 12 f0       	push   $0xf0127964
f010fa78:	6a 2b                	push   $0x2b
f010fa7a:	68 a8 79 12 f0       	push   $0xf01279a8
f010fa7f:	e8 96 08 ff ff       	call   f010031a <_panic>
	}
	if (LIST_SIZE(&freeBlocksList) != 1 || (uint32)LIST_FIRST(&freeBlocksList) != KERNEL_HEAP_START + 2*sizeof(int))
f010fa84:	a1 bc 25 55 f0       	mov    0xf05525bc,%eax
f010fa89:	83 f8 01             	cmp    $0x1,%eax
f010fa8c:	75 0c                	jne    f010fa9a <test_initialize_dynamic_allocator+0xbc>
f010fa8e:	a1 b0 25 55 f0       	mov    0xf05525b0,%eax
f010fa93:	3d 08 00 00 f6       	cmp    $0xf6000008,%eax
f010fa98:	74 14                	je     f010faae <test_initialize_dynamic_allocator+0xd0>
	{
		panic("free block is not added correctly");
f010fa9a:	83 ec 04             	sub    $0x4,%esp
f010fa9d:	68 cc 79 12 f0       	push   $0xf01279cc
f010faa2:	6a 2f                	push   $0x2f
f010faa4:	68 a8 79 12 f0       	push   $0xf01279a8
f010faa9:	e8 6c 08 ff ff       	call   f010031a <_panic>
	}

	cprintf("Congratulations!! test initialize_dynamic_allocator completed successfully.\n");
f010faae:	83 ec 0c             	sub    $0xc,%esp
f010fab1:	68 f0 79 12 f0       	push   $0xf01279f0
f010fab6:	e8 b1 14 ff ff       	call   f0100f6c <cprintf>
f010fabb:	83 c4 10             	add    $0x10,%esp
}
f010fabe:	90                   	nop
f010fabf:	c9                   	leave  
f010fac0:	c3                   	ret    

f010fac1 <test_initial_alloc>:
short* startVAs[numOfAllocs*allocCntPerSize+1] ;
short* midVAs[numOfAllocs*allocCntPerSize+1] ;
short* endVAs[numOfAllocs*allocCntPerSize+1] ;

int test_initial_alloc(int ALLOC_STRATEGY)
{
f010fac1:	55                   	push   %ebp
f010fac2:	89 e5                	mov    %esp,%ebp
f010fac4:	83 ec 48             	sub    $0x48,%esp
#if USE_KHEAP
	panic("test_initial_alloc: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return 0;
#endif

	int eval = 0;
f010fac7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct = 1;
f010face:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int initAllocatedSpace = 3*Mega;
f010fad5:	c7 45 d0 00 00 30 00 	movl   $0x300000,-0x30(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f010fadc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010fadf:	83 ec 08             	sub    $0x8,%esp
f010fae2:	50                   	push   %eax
f010fae3:	68 00 00 00 f6       	push   $0xf6000000
f010fae8:	e8 6c 19 01 00       	call   f0121459 <initialize_dynamic_allocator>
f010faed:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/*INITIAL ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010faf0:	83 ec 0c             	sub    $0xc,%esp
f010faf3:	68 40 7a 12 f0       	push   $0xf0127a40
f010faf8:	e8 6f 14 ff ff       	call   f0100f6c <cprintf>
f010fafd:	83 c4 10             	add    $0x10,%esp

	is_correct = 1;
f010fb00:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	va = alloc_block(3*initAllocatedSpace, ALLOC_STRATEGY);
f010fb07:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010fb0a:	89 c2                	mov    %eax,%edx
f010fb0c:	01 d2                	add    %edx,%edx
f010fb0e:	01 d0                	add    %edx,%eax
f010fb10:	83 ec 08             	sub    $0x8,%esp
f010fb13:	ff 75 08             	pushl  0x8(%ebp)
f010fb16:	50                   	push   %eax
f010fb17:	e8 10 18 01 00       	call   f012132c <alloc_block>
f010fb1c:	83 c4 10             	add    $0x10,%esp
f010fb1f:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010fb22:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010fb26:	74 17                	je     f010fb3f <test_initial_alloc+0x7e>
	{
		is_correct = 0;
f010fb28:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #1: should not be allocated.\n");
f010fb2f:	83 ec 0c             	sub    $0xc,%esp
f010fb32:	68 7c 7a 12 f0       	push   $0xf0127a7c
f010fb37:	e8 30 14 ff ff       	call   f0100f6c <cprintf>
f010fb3c:	83 c4 10             	add    $0x10,%esp
	}
	va = alloc_block(initAllocatedSpace, ALLOC_STRATEGY);
f010fb3f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010fb42:	83 ec 08             	sub    $0x8,%esp
f010fb45:	ff 75 08             	pushl  0x8(%ebp)
f010fb48:	50                   	push   %eax
f010fb49:	e8 de 17 01 00       	call   f012132c <alloc_block>
f010fb4e:	83 c4 10             	add    $0x10,%esp
f010fb51:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//Check returned va
	if(va != NULL)
f010fb54:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010fb58:	74 17                	je     f010fb71 <test_initial_alloc+0xb0>
	{
		is_correct = 0;
f010fb5a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #2: should not be allocated.\n");
f010fb61:	83 ec 0c             	sub    $0xc,%esp
f010fb64:	68 ac 7a 12 f0       	push   $0xf0127aac
f010fb69:	e8 fe 13 ff ff       	call   f0100f6c <cprintf>
f010fb6e:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f010fb71:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fb75:	74 04                	je     f010fb7b <test_initial_alloc+0xba>
	{
		eval += 5;
f010fb77:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 2: Try to allocate set of blocks with different sizes*/
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
f010fb7b:	83 ec 0c             	sub    $0xc,%esp
f010fb7e:	68 dc 7a 12 f0       	push   $0xf0127adc
f010fb83:	e8 e4 13 ff ff       	call   f0100f6c <cprintf>
f010fb88:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fb8b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	int totalSizes = 0;
f010fb92:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010fb99:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f010fba0:	eb 2a                	jmp    f010fbcc <test_initial_alloc+0x10b>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f010fba2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010fba5:	8b 14 85 78 9d 17 f0 	mov    -0xfe86288(,%eax,4),%edx
f010fbac:	89 d0                	mov    %edx,%eax
f010fbae:	c1 e0 02             	shl    $0x2,%eax
f010fbb1:	01 d0                	add    %edx,%eax
f010fbb3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010fbba:	01 d0                	add    %edx,%eax
f010fbbc:	c1 e0 03             	shl    $0x3,%eax
f010fbbf:	89 c2                	mov    %eax,%edx
f010fbc1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fbc4:	01 d0                	add    %edx,%eax
f010fbc6:	89 45 ec             	mov    %eax,-0x14(%ebp)
	/*INITIAL ALLOC Scenario 2: Try to allocate set of blocks with different sizes*/
	cprintf("	2: Try to allocate set of blocks with different sizes [all should fit]\n\n") ;
	is_correct = 1;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f010fbc9:	ff 45 e8             	incl   -0x18(%ebp)
f010fbcc:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f010fbd0:	7e d0                	jle    f010fba2 <test_initial_alloc+0xe1>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes - 2*sizeof(int) ; //exclude size of "DA Begin & End" blocks
f010fbd2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010fbd5:	2b 45 ec             	sub    -0x14(%ebp),%eax
f010fbd8:	83 e8 08             	sub    $0x8,%eax
f010fbdb:	89 45 c8             	mov    %eax,-0x38(%ebp)
	//cprintf("\n********* Remaining size = %d\n", remainSize);
	if (remainSize <= 0)
f010fbde:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010fbe2:	7f 17                	jg     f010fbfb <test_initial_alloc+0x13a>
	{
		is_correct = 0;
f010fbe4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
f010fbeb:	83 ec 0c             	sub    $0xc,%esp
f010fbee:	68 28 7b 12 f0       	push   $0xf0127b28
f010fbf3:	e8 74 13 ff ff       	call   f0100f6c <cprintf>
f010fbf8:	83 c4 10             	add    $0x10,%esp
	}
	int idx = 0;
f010fbfb:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
f010fc02:	c7 45 e0 04 00 00 f6 	movl   $0xf6000004,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010fc09:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010fc10:	e9 fc 00 00 00       	jmp    f010fd11 <test_initial_alloc+0x250>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010fc15:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f010fc1c:	e9 e0 00 00 00       	jmp    f010fd01 <test_initial_alloc+0x240>
		{
			actualSize = allocSizes[i] - sizeOfMetaData;
f010fc21:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fc24:	8b 04 85 78 9d 17 f0 	mov    -0xfe86288(,%eax,4),%eax
f010fc2b:	83 e8 08             	sub    $0x8,%eax
f010fc2e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010fc31:	83 ec 08             	sub    $0x8,%esp
f010fc34:	ff 75 08             	pushl  0x8(%ebp)
f010fc37:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fc3a:	e8 ed 16 01 00       	call   f012132c <alloc_block>
f010fc3f:	83 c4 10             	add    $0x10,%esp
f010fc42:	89 c2                	mov    %eax,%edx
f010fc44:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fc47:	89 14 85 e0 36 57 f0 	mov    %edx,-0xfa8c920(,%eax,4)
f010fc4e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fc51:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f010fc58:	89 45 cc             	mov    %eax,-0x34(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f010fc5b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010fc5e:	d1 e8                	shr    %eax
f010fc60:	89 c2                	mov    %eax,%edx
f010fc62:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010fc65:	01 c2                	add    %eax,%edx
f010fc67:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fc6a:	89 14 85 e0 62 57 f0 	mov    %edx,-0xfa89d20(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f010fc71:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010fc74:	8d 50 fe             	lea    -0x2(%eax),%edx
f010fc77:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010fc7a:	01 c2                	add    %eax,%edx
f010fc7c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fc7f:	89 14 85 e0 4c 57 f0 	mov    %edx,-0xfa8b320(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData/2)))
f010fc86:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010fc8a:	74 0b                	je     f010fc97 <test_initial_alloc+0x1d6>
f010fc8c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010fc8f:	83 c0 04             	add    $0x4,%eax
f010fc92:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010fc95:	74 27                	je     f010fcbe <test_initial_alloc+0x1fd>
			{
				if (is_correct)
f010fc97:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fc9b:	74 21                	je     f010fcbe <test_initial_alloc+0x1fd>
				{
					is_correct = 0;
f010fc9d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
					cprintf("alloc_block_xx #3.%d: WRONG ALLOC - alloc_block_xx return wrong address. Expected %x, Actual %x\n", idx, curVA + sizeOfMetaData ,va);
f010fca4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010fca7:	83 c0 08             	add    $0x8,%eax
f010fcaa:	ff 75 cc             	pushl  -0x34(%ebp)
f010fcad:	50                   	push   %eax
f010fcae:	ff 75 e4             	pushl  -0x1c(%ebp)
f010fcb1:	68 a4 7b 12 f0       	push   $0xf0127ba4
f010fcb6:	e8 b1 12 ff ff       	call   f0100f6c <cprintf>
f010fcbb:	83 c4 10             	add    $0x10,%esp
				}
			}
			curVA += allocSizes[i] ;
f010fcbe:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010fcc1:	8b 04 85 78 9d 17 f0 	mov    -0xfe86288(,%eax,4),%eax
f010fcc8:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f010fccb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fcce:	8b 14 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%edx
f010fcd5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fcd8:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f010fcdb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fcde:	8b 14 85 e0 62 57 f0 	mov    -0xfa89d20(,%eax,4),%edx
f010fce5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fce8:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f010fceb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fcee:	8b 14 85 e0 4c 57 f0 	mov    -0xfa8b320(,%eax,4),%edx
f010fcf5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fcf8:	66 89 02             	mov    %ax,(%edx)
			idx++;
f010fcfb:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f010fcfe:	ff 45 d8             	incl   -0x28(%ebp)
f010fd01:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f010fd08:	0f 8e 13 ff ff ff    	jle    f010fc21 <test_initial_alloc+0x160>
		cprintf("alloc_block_xx test is not configured correctly. Consider updating the initial allocated space OR the required allocations\n");
	}
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f010fd0e:	ff 45 dc             	incl   -0x24(%ebp)
f010fd11:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010fd15:	0f 8e fa fe ff ff    	jle    f010fc15 <test_initial_alloc+0x154>
			idx++;
		}
		//if (is_correct == 0)
		//break;
	}
	if (is_correct)
f010fd1b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fd1f:	74 04                	je     f010fd25 <test_initial_alloc+0x264>
	{
		eval += 20;
f010fd21:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f010fd25:	83 ec 0c             	sub    $0xc,%esp
f010fd28:	68 08 7c 12 f0       	push   $0xf0127c08
f010fd2d:	e8 3a 12 ff ff       	call   f0100f6c <cprintf>
f010fd32:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fd35:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	actualSize = remainSize - sizeOfMetaData;
f010fd3c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010fd3f:	83 e8 08             	sub    $0x8,%eax
f010fd42:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, ALLOC_STRATEGY);
f010fd45:	83 ec 08             	sub    $0x8,%esp
f010fd48:	ff 75 08             	pushl  0x8(%ebp)
f010fd4b:	ff 75 c4             	pushl  -0x3c(%ebp)
f010fd4e:	e8 d9 15 01 00       	call   f012132c <alloc_block>
f010fd53:	83 c4 10             	add    $0x10,%esp
f010fd56:	89 c2                	mov    %eax,%edx
f010fd58:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fd5b:	89 14 85 e0 36 57 f0 	mov    %edx,-0xfa8c920(,%eax,4)
f010fd62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fd65:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f010fd6c:	89 45 cc             	mov    %eax,-0x34(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f010fd6f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010fd72:	d1 e8                	shr    %eax
f010fd74:	89 c2                	mov    %eax,%edx
f010fd76:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010fd79:	01 c2                	add    %eax,%edx
f010fd7b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fd7e:	89 14 85 e0 62 57 f0 	mov    %edx,-0xfa89d20(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f010fd85:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010fd88:	8d 50 fe             	lea    -0x2(%eax),%edx
f010fd8b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010fd8e:	01 c2                	add    %eax,%edx
f010fd90:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fd93:	89 14 85 e0 4c 57 f0 	mov    %edx,-0xfa8b320(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData/2)) || LIST_SIZE(&freeBlocksList) != 0)
f010fd9a:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
f010fd9e:	74 14                	je     f010fdb4 <test_initial_alloc+0x2f3>
f010fda0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010fda3:	83 c0 04             	add    $0x4,%eax
f010fda6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f010fda9:	75 09                	jne    f010fdb4 <test_initial_alloc+0x2f3>
f010fdab:	a1 bc 25 55 f0       	mov    0xf05525bc,%eax
f010fdb0:	85 c0                	test   %eax,%eax
f010fdb2:	74 17                	je     f010fdcb <test_initial_alloc+0x30a>
	{
		is_correct = 0;
f010fdb4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("alloc_block_xx #4: WRONG ALLOC.\n");
f010fdbb:	83 ec 0c             	sub    $0xc,%esp
f010fdbe:	68 54 7c 12 f0       	push   $0xf0127c54
f010fdc3:	e8 a4 11 ff ff       	call   f0100f6c <cprintf>
f010fdc8:	83 c4 10             	add    $0x10,%esp
	}
	*(startVAs[idx]) = idx ;
f010fdcb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fdce:	8b 14 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%edx
f010fdd5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fdd8:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f010fddb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fdde:	8b 14 85 e0 62 57 f0 	mov    -0xfa89d20(,%eax,4),%edx
f010fde5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fde8:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f010fdeb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fdee:	8b 14 85 e0 4c 57 f0 	mov    -0xfa8b320(,%eax,4),%edx
f010fdf5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010fdf8:	66 89 02             	mov    %ax,(%edx)
	if (is_correct)
f010fdfb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fdff:	74 04                	je     f010fe05 <test_initial_alloc+0x344>
	{
		eval += 5;
f010fe01:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
	}
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f010fe05:	83 ec 0c             	sub    $0xc,%esp
f010fe08:	68 78 7c 12 f0       	push   $0xf0127c78
f010fe0d:	e8 5a 11 ff ff       	call   f0100f6c <cprintf>
f010fe12:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010fe15:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f010fe1c:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010fe23:	eb 5b                	jmp    f010fe80 <test_initial_alloc+0x3bf>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f010fe25:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010fe28:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f010fe2f:	66 8b 00             	mov    (%eax),%ax
f010fe32:	98                   	cwtl   
f010fe33:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010fe36:	75 26                	jne    f010fe5e <test_initial_alloc+0x39d>
f010fe38:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010fe3b:	8b 04 85 e0 62 57 f0 	mov    -0xfa89d20(,%eax,4),%eax
f010fe42:	66 8b 00             	mov    (%eax),%ax
f010fe45:	98                   	cwtl   
f010fe46:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010fe49:	75 13                	jne    f010fe5e <test_initial_alloc+0x39d>
f010fe4b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010fe4e:	8b 04 85 e0 4c 57 f0 	mov    -0xfa8b320(,%eax,4),%eax
f010fe55:	66 8b 00             	mov    (%eax),%ax
f010fe58:	98                   	cwtl   
f010fe59:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f010fe5c:	74 1f                	je     f010fe7d <test_initial_alloc+0x3bc>
		{
			is_correct = 0;
f010fe5e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f010fe65:	83 ec 04             	sub    $0x4,%esp
f010fe68:	ff 75 d4             	pushl  -0x2c(%ebp)
f010fe6b:	ff 75 d4             	pushl  -0x2c(%ebp)
f010fe6e:	68 ac 7c 12 f0       	push   $0xf0127cac
f010fe73:	e8 f4 10 ff ff       	call   f0100f6c <cprintf>
f010fe78:	83 c4 10             	add    $0x10,%esp
			break;
f010fe7b:	eb 0b                	jmp    f010fe88 <test_initial_alloc+0x3c7>
	//====================================================================//
	/*INITIAL ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f010fe7d:	ff 45 d4             	incl   -0x2c(%ebp)
f010fe80:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010fe83:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f010fe86:	7c 9d                	jl     f010fe25 <test_initial_alloc+0x364>
			is_correct = 0;
			cprintf("alloc_block_xx #4.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
			break;
		}
	}
	if (is_correct)
f010fe88:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010fe8c:	74 04                	je     f010fe92 <test_initial_alloc+0x3d1>
	{
		eval += 10;
f010fe8e:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}
	return eval;
f010fe92:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010fe95:	c9                   	leave  
f010fe96:	c3                   	ret    

f010fe97 <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010fe97:	55                   	push   %ebp
f010fe98:	89 e5                	mov    %esp,%ebp
f010fe9a:	57                   	push   %edi
f010fe9b:	56                   	push   %esi
f010fe9c:	53                   	push   %ebx
f010fe9d:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
#if USE_KHEAP
	panic("test_alloc_block_FF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	int eval = 0;
f010fea3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool is_correct;
	void* va = NULL;
f010feaa:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 actualSize = 0;
f010feb1:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)

	cprintf("=======================================================\n") ;
f010feb8:	83 ec 0c             	sub    $0xc,%esp
f010febb:	68 fc 7c 12 f0       	push   $0xf0127cfc
f010fec0:	e8 a7 10 ff ff       	call   f0100f6c <cprintf>
f010fec5:	83 c4 10             	add    $0x10,%esp
	cprintf("FIRST: Tests depend on the Allocate Function ONLY [40%]\n") ;
f010fec8:	83 ec 0c             	sub    $0xc,%esp
f010fecb:	68 38 7d 12 f0       	push   $0xf0127d38
f010fed0:	e8 97 10 ff ff       	call   f0100f6c <cprintf>
f010fed5:	83 c4 10             	add    $0x10,%esp
	cprintf("=======================================================\n") ;
f010fed8:	83 ec 0c             	sub    $0xc,%esp
f010fedb:	68 fc 7c 12 f0       	push   $0xf0127cfc
f010fee0:	e8 87 10 ff ff       	call   f0100f6c <cprintf>
f010fee5:	83 c4 10             	add    $0x10,%esp
	eval = test_initial_alloc(DA_FF);
f010fee8:	83 ec 0c             	sub    $0xc,%esp
f010feeb:	6a 01                	push   $0x1
f010feed:	e8 cf fb ff ff       	call   f010fac1 <test_initial_alloc>
f010fef2:	83 c4 10             	add    $0x10,%esp
f010fef5:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	cprintf("====================================================\n") ;
f010fef8:	83 ec 0c             	sub    $0xc,%esp
f010fefb:	68 74 7d 12 f0       	push   $0xf0127d74
f010ff00:	e8 67 10 ff ff       	call   f0100f6c <cprintf>
f010ff05:	83 c4 10             	add    $0x10,%esp
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
f010ff08:	83 ec 0c             	sub    $0xc,%esp
f010ff0b:	68 ac 7d 12 f0       	push   $0xf0127dac
f010ff10:	e8 57 10 ff ff       	call   f0100f6c <cprintf>
f010ff15:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
f010ff18:	83 ec 0c             	sub    $0xc,%esp
f010ff1b:	68 74 7d 12 f0       	push   $0xf0127d74
f010ff20:	e8 47 10 ff ff       	call   f0100f6c <cprintf>
f010ff25:	83 c4 10             	add    $0x10,%esp

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010ff28:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f010ff2f:	eb 2c                	jmp    f010ff5d <test_alloc_block_FF+0xc6>
	{
		free_block(startVAs[i*allocCntPerSize]);
f010ff31:	8b 55 dc             	mov    -0x24(%ebp),%edx
f010ff34:	89 d0                	mov    %edx,%eax
f010ff36:	c1 e0 02             	shl    $0x2,%eax
f010ff39:	01 d0                	add    %edx,%eax
f010ff3b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ff42:	01 d0                	add    %edx,%eax
f010ff44:	c1 e0 03             	shl    $0x3,%eax
f010ff47:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f010ff4e:	83 ec 0c             	sub    $0xc,%esp
f010ff51:	50                   	push   %eax
f010ff52:	e8 16 16 01 00       	call   f012156d <free_block>
f010ff57:	83 c4 10             	add    $0x10,%esp
	cprintf("====================================================\n") ;
	cprintf("SECOND: Tests depend on BOTH Allocate and Free [60%] \n") ;
	cprintf("====================================================\n") ;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f010ff5a:	ff 45 dc             	incl   -0x24(%ebp)
f010ff5d:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f010ff61:	7e ce                	jle    f010ff31 <test_alloc_block_FF+0x9a>
	{
		free_block(startVAs[i*allocCntPerSize]);
	}
	is_correct = 1;
f010ff63:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	//Check number of freed blocks
	if(LIST_SIZE(&freeBlocksList) != numOfAllocs)
f010ff6a:	a1 bc 25 55 f0       	mov    0xf05525bc,%eax
f010ff6f:	83 f8 07             	cmp    $0x7,%eax
f010ff72:	74 17                	je     f010ff8b <test_alloc_block_FF+0xf4>
	{
		is_correct = 0;
f010ff74:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #5: WRONG FREE. unexpected number of freed blocks\n");
f010ff7b:	83 ec 0c             	sub    $0xc,%esp
f010ff7e:	68 e4 7d 12 f0       	push   $0xf0127de4
f010ff83:	e8 e4 0f ff ff       	call   f0100f6c <cprintf>
f010ff88:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f010ff8b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f010ff8f:	74 04                	je     f010ff95 <test_alloc_block_FF+0xfe>
	{
		eval += 10;
f010ff91:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
f010ff95:	83 ec 0c             	sub    $0xc,%esp
f010ff98:	68 40 7a 12 f0       	push   $0xf0127a40
f010ff9d:	e8 ca 0f ff ff       	call   f0100f6c <cprintf>
f010ffa2:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f010ffa5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	uint32 maxSize = 0 ;
f010ffac:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f010ffb3:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f010ffba:	eb 1f                	jmp    f010ffdb <test_alloc_block_FF+0x144>
	{
		if (allocSizes[i] > maxSize)
f010ffbc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ffbf:	8b 04 85 78 9d 17 f0 	mov    -0xfe86288(,%eax,4),%eax
f010ffc6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ffc9:	76 0d                	jbe    f010ffd8 <test_alloc_block_FF+0x141>
			maxSize = allocSizes[i] ;
f010ffcb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010ffce:	8b 04 85 78 9d 17 f0 	mov    -0xfe86288(,%eax,4),%eax
f010ffd5:	89 45 d8             	mov    %eax,-0x28(%ebp)
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	cprintf("	1: Try to allocate large block [not fit in any space]\n\n") ;
	is_correct = 1;

	uint32 maxSize = 0 ;
	for (int i = 0; i < numOfAllocs; ++i)
f010ffd8:	ff 45 d4             	incl   -0x2c(%ebp)
f010ffdb:	83 7d d4 06          	cmpl   $0x6,-0x2c(%ebp)
f010ffdf:	7e db                	jle    f010ffbc <test_alloc_block_FF+0x125>
	{
		if (allocSizes[i] > maxSize)
			maxSize = allocSizes[i] ;
	}
	va = alloc_block(maxSize, DA_FF);
f010ffe1:	83 ec 08             	sub    $0x8,%esp
f010ffe4:	6a 01                	push   $0x1
f010ffe6:	ff 75 d8             	pushl  -0x28(%ebp)
f010ffe9:	e8 3e 13 01 00       	call   f012132c <alloc_block>
f010ffee:	83 c4 10             	add    $0x10,%esp
f010fff1:	89 45 c8             	mov    %eax,-0x38(%ebp)

	//Check returned va
	if(va != NULL)
f010fff4:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f010fff8:	74 17                	je     f0110011 <test_alloc_block_FF+0x17a>
	{
		is_correct = 0;
f010fffa:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #5: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.\n");
f0110001:	83 ec 0c             	sub    $0xc,%esp
f0110004:	68 28 7e 12 f0       	push   $0xf0127e28
f0110009:	e8 5e 0f ff ff       	call   f0100f6c <cprintf>
f011000e:	83 c4 10             	add    $0x10,%esp
	}

	if (is_correct)
f0110011:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110015:	74 04                	je     f011001b <test_alloc_block_FF+0x184>
	{
		eval += 5;
f0110017:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate blocks with sizes smaller than existing free blocks*/
	cprintf("	2: Try to allocate set of blocks with different sizes smaller than existing free blocks\n\n") ;
f011001b:	83 ec 0c             	sub    $0xc,%esp
f011001e:	68 a0 7e 12 f0       	push   $0xf0127ea0
f0110023:	e8 44 0f ff ff       	call   f0100f6c <cprintf>
f0110028:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f011002b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

#define numOfFFTests 3
	uint32 startVA = KERNEL_HEAP_START + sizeof(int); //just after the DA Begin block
f0110032:	c7 45 c0 04 00 00 f6 	movl   $0xf6000004,-0x40(%ebp)
	uint32 testSizes[numOfFFTests] = {1*kilo + kilo/2, 3*kilo, kilo/2} ;
f0110039:	8d 45 ac             	lea    -0x54(%ebp),%eax
f011003c:	bb c0 80 12 f0       	mov    $0xf01280c0,%ebx
f0110041:	ba 03 00 00 00       	mov    $0x3,%edx
f0110046:	89 c7                	mov    %eax,%edi
f0110048:	89 de                	mov    %ebx,%esi
f011004a:	89 d1                	mov    %edx,%ecx
f011004c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
f011004e:	a1 a0 49 57 f0       	mov    0xf05749a0,%eax
f0110053:	89 45 bc             	mov    %eax,-0x44(%ebp)
	uint32 expectedVAs[numOfFFTests] = {startVA + sizeOfMetaData/2, startOf1st7KB, startVA + testSizes[0] + sizeOfMetaData/2};
f0110056:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110059:	83 c0 04             	add    $0x4,%eax
f011005c:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011005f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0110062:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0110065:	8b 55 ac             	mov    -0x54(%ebp),%edx
f0110068:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011006b:	01 d0                	add    %edx,%eax
f011006d:	83 c0 04             	add    $0x4,%eax
f0110070:	89 45 a8             	mov    %eax,-0x58(%ebp)
	short* tstStartVAs[numOfFFTests+1] ;
	short* tstMidVAs[numOfFFTests+1] ;
	short* tstEndVAs[numOfFFTests+1] ;
	for (int i = 0; i < numOfFFTests; ++i)
f0110073:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f011007a:	e9 c6 00 00 00       	jmp    f0110145 <test_alloc_block_FF+0x2ae>
	{
		actualSize = testSizes[i] - sizeOfMetaData;
f011007f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110082:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f0110086:	83 e8 08             	sub    $0x8,%eax
f0110089:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		va = tstStartVAs[i] = alloc_block(actualSize, DA_FF);
f011008c:	83 ec 08             	sub    $0x8,%esp
f011008f:	6a 01                	push   $0x1
f0110091:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110094:	e8 93 12 01 00       	call   f012132c <alloc_block>
f0110099:	83 c4 10             	add    $0x10,%esp
f011009c:	89 c2                	mov    %eax,%edx
f011009e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01100a1:	89 54 85 90          	mov    %edx,-0x70(%ebp,%eax,4)
f01100a5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01100a8:	8b 44 85 90          	mov    -0x70(%ebp,%eax,4),%eax
f01100ac:	89 45 c8             	mov    %eax,-0x38(%ebp)
		tstMidVAs[i] = va + actualSize/2 ;
f01100af:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01100b2:	d1 e8                	shr    %eax
f01100b4:	89 c2                	mov    %eax,%edx
f01100b6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01100b9:	01 c2                	add    %eax,%edx
f01100bb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01100be:	89 54 85 80          	mov    %edx,-0x80(%ebp,%eax,4)
		tstEndVAs[i] = va + actualSize - sizeof(short);
f01100c2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01100c5:	8d 50 fe             	lea    -0x2(%eax),%edx
f01100c8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01100cb:	01 c2                	add    %eax,%edx
f01100cd:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01100d0:	89 94 85 70 ff ff ff 	mov    %edx,-0x90(%ebp,%eax,4)
		//Check returned va
		if(tstStartVAs[i] == NULL || (tstStartVAs[i] != (short*)expectedVAs[i]))
f01100d7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01100da:	8b 44 85 90          	mov    -0x70(%ebp,%eax,4),%eax
f01100de:	85 c0                	test   %eax,%eax
f01100e0:	74 12                	je     f01100f4 <test_alloc_block_FF+0x25d>
f01100e2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01100e5:	8b 54 85 90          	mov    -0x70(%ebp,%eax,4),%edx
f01100e9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01100ec:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
f01100f0:	39 c2                	cmp    %eax,%edx
f01100f2:	74 27                	je     f011011b <test_alloc_block_FF+0x284>
		{
			is_correct = 0;
f01100f4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_FF #6.%d: WRONG FF ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", i, expectedVAs[i] ,tstStartVAs[i]);
f01100fb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01100fe:	8b 54 85 90          	mov    -0x70(%ebp,%eax,4),%edx
f0110102:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110105:	8b 44 85 a0          	mov    -0x60(%ebp,%eax,4),%eax
f0110109:	52                   	push   %edx
f011010a:	50                   	push   %eax
f011010b:	ff 75 d0             	pushl  -0x30(%ebp)
f011010e:	68 fc 7e 12 f0       	push   $0xf0127efc
f0110113:	e8 54 0e ff ff       	call   f0100f6c <cprintf>
f0110118:	83 c4 10             	add    $0x10,%esp
			//break;
		}
		*(tstStartVAs[i]) = 353;
f011011b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011011e:	8b 44 85 90          	mov    -0x70(%ebp,%eax,4),%eax
f0110122:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstMidVAs[i]) = 353;
f0110127:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011012a:	8b 44 85 80          	mov    -0x80(%ebp,%eax,4),%eax
f011012e:	66 c7 00 61 01       	movw   $0x161,(%eax)
		*(tstEndVAs[i]) = 353;
f0110133:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0110136:	8b 84 85 70 ff ff ff 	mov    -0x90(%ebp,%eax,4),%eax
f011013d:	66 c7 00 61 01       	movw   $0x161,(%eax)
	uint32 startOf1st7KB = (uint32)startVAs[6*allocCntPerSize];
	uint32 expectedVAs[numOfFFTests] = {startVA + sizeOfMetaData/2, startOf1st7KB, startVA + testSizes[0] + sizeOfMetaData/2};
	short* tstStartVAs[numOfFFTests+1] ;
	short* tstMidVAs[numOfFFTests+1] ;
	short* tstEndVAs[numOfFFTests+1] ;
	for (int i = 0; i < numOfFFTests; ++i)
f0110142:	ff 45 d0             	incl   -0x30(%ebp)
f0110145:	83 7d d0 02          	cmpl   $0x2,-0x30(%ebp)
f0110149:	0f 8e 30 ff ff ff    	jle    f011007f <test_alloc_block_FF+0x1e8>
		}
		*(tstStartVAs[i]) = 353;
		*(tstMidVAs[i]) = 353;
		*(tstEndVAs[i]) = 353;
	}
	if (is_correct)
f011014f:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110153:	74 04                	je     f0110159 <test_alloc_block_FF+0x2c2>
	{
		eval += 15;
f0110155:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the first existing free block*/
	cprintf("	3: Try to allocate a block with equal to the first existing free block\n\n") ;
f0110159:	83 ec 0c             	sub    $0xc,%esp
f011015c:	68 08 7c 12 f0       	push   $0xf0127c08
f0110161:	e8 06 0e ff ff       	call   f0100f6c <cprintf>
f0110166:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110169:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	actualSize = 2*kilo - sizeOfMetaData;
f0110170:	c7 45 c4 f8 07 00 00 	movl   $0x7f8,-0x3c(%ebp)
	va = tstStartVAs[numOfFFTests] = alloc_block(actualSize, DA_FF);
f0110177:	83 ec 08             	sub    $0x8,%esp
f011017a:	6a 01                	push   $0x1
f011017c:	ff 75 c4             	pushl  -0x3c(%ebp)
f011017f:	e8 a8 11 01 00       	call   f012132c <alloc_block>
f0110184:	83 c4 10             	add    $0x10,%esp
f0110187:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011018a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011018d:	89 45 c8             	mov    %eax,-0x38(%ebp)
	tstMidVAs[numOfFFTests] = va + actualSize/2 ;
f0110190:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110193:	d1 e8                	shr    %eax
f0110195:	89 c2                	mov    %eax,%edx
f0110197:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011019a:	01 d0                	add    %edx,%eax
f011019c:	89 45 8c             	mov    %eax,-0x74(%ebp)
	tstEndVAs[numOfFFTests] = va + actualSize - sizeof(short);
f011019f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01101a2:	8d 50 fe             	lea    -0x2(%eax),%edx
f01101a5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01101a8:	01 d0                	add    %edx,%eax
f01101aa:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	//Check returned va
	void* expected = (void*)(startVA + testSizes[0] + testSizes[2] + sizeOfMetaData/2) ;
f01101b0:	8b 55 ac             	mov    -0x54(%ebp),%edx
f01101b3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01101b6:	01 c2                	add    %eax,%edx
f01101b8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01101bb:	01 d0                	add    %edx,%eax
f01101bd:	83 c0 04             	add    $0x4,%eax
f01101c0:	89 45 b8             	mov    %eax,-0x48(%ebp)
	if(va == NULL || (va != expected))
f01101c3:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f01101c7:	74 08                	je     f01101d1 <test_alloc_block_FF+0x33a>
f01101c9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01101cc:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01101cf:	74 1d                	je     f01101ee <test_alloc_block_FF+0x357>
	{
		is_correct = 0;
f01101d1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #7: WRONG FF ALLOC - alloc_block_FF return wrong address.expected %x, actual %x\n", expected, va);
f01101d8:	83 ec 04             	sub    $0x4,%esp
f01101db:	ff 75 c8             	pushl  -0x38(%ebp)
f01101de:	ff 75 b8             	pushl  -0x48(%ebp)
f01101e1:	68 60 7f 12 f0       	push   $0xf0127f60
f01101e6:	e8 81 0d ff ff       	call   f0100f6c <cprintf>
f01101eb:	83 c4 10             	add    $0x10,%esp
	}
	if(LIST_SIZE(&freeBlocksList) != numOfAllocs - 1)
f01101ee:	a1 bc 25 55 f0       	mov    0xf05525bc,%eax
f01101f3:	83 f8 06             	cmp    $0x6,%eax
f01101f6:	74 1f                	je     f0110217 <test_alloc_block_FF+0x380>
	{
		is_correct = 0;
f01101f8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		cprintf("alloc_block_FF #7: WRONG FF ALLOC - unexpected number of free blocks. expected %d, actual %d\n", numOfAllocs-1, LIST_SIZE(&freeBlocksList));
f01101ff:	a1 bc 25 55 f0       	mov    0xf05525bc,%eax
f0110204:	83 ec 04             	sub    $0x4,%esp
f0110207:	50                   	push   %eax
f0110208:	6a 06                	push   $0x6
f011020a:	68 c0 7f 12 f0       	push   $0xf0127fc0
f011020f:	e8 58 0d ff ff       	call   f0100f6c <cprintf>
f0110214:	83 c4 10             	add    $0x10,%esp
	}

	*(tstStartVAs[numOfFFTests]) = 353 ;
f0110217:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011021a:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstMidVAs[numOfFFTests]) = 353 ;
f011021f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0110222:	66 c7 00 61 01       	movw   $0x161,(%eax)
	*(tstEndVAs[numOfFFTests]) = 353 ;
f0110227:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011022d:	66 c7 00 61 01       	movw   $0x161,(%eax)

	if (is_correct)
f0110232:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110236:	74 04                	je     f011023c <test_alloc_block_FF+0x3a5>
	{
		eval += 15;
f0110238:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	//====================================================================//
	/*FF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
f011023c:	83 ec 0c             	sub    $0xc,%esp
f011023f:	68 78 7c 12 f0       	push   $0xf0127c78
f0110244:	e8 23 0d ff ff       	call   f0100f6c <cprintf>
f0110249:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f011024c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	for (int i = 0; i <= numOfFFTests; ++i)
f0110253:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f011025a:	e9 82 00 00 00       	jmp    f01102e1 <test_alloc_block_FF+0x44a>
	{
		//cprintf("startVA = %x, mid = %x, last = %x\n", tstStartVAs[i], tstMidVAs[i], tstEndVAs[i]);
		if (*(tstStartVAs[i]) != 353 || *(tstMidVAs[i]) != 353 || *(tstEndVAs[i]) != 353)
f011025f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110262:	8b 44 85 90          	mov    -0x70(%ebp,%eax,4),%eax
f0110266:	66 8b 00             	mov    (%eax),%ax
f0110269:	66 3d 61 01          	cmp    $0x161,%ax
f011026d:	75 23                	jne    f0110292 <test_alloc_block_FF+0x3fb>
f011026f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110272:	8b 44 85 80          	mov    -0x80(%ebp,%eax,4),%eax
f0110276:	66 8b 00             	mov    (%eax),%ax
f0110279:	66 3d 61 01          	cmp    $0x161,%ax
f011027d:	75 13                	jne    f0110292 <test_alloc_block_FF+0x3fb>
f011027f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0110282:	8b 84 85 70 ff ff ff 	mov    -0x90(%ebp,%eax,4),%eax
f0110289:	66 8b 00             	mov    (%eax),%ax
f011028c:	66 3d 61 01          	cmp    $0x161,%ax
f0110290:	74 4c                	je     f01102de <test_alloc_block_FF+0x447>
		{
			is_correct = 0;
f0110292:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
f0110299:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011029c:	8b 84 85 70 ff ff ff 	mov    -0x90(%ebp,%eax,4),%eax
f01102a3:	66 8b 00             	mov    (%eax),%ax
f01102a6:	0f bf c8             	movswl %ax,%ecx
f01102a9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01102ac:	8b 44 85 80          	mov    -0x80(%ebp,%eax,4),%eax
f01102b0:	66 8b 00             	mov    (%eax),%ax
f01102b3:	0f bf d0             	movswl %ax,%edx
f01102b6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01102b9:	8b 44 85 90          	mov    -0x70(%ebp,%eax,4),%eax
f01102bd:	66 8b 00             	mov    (%eax),%ax
f01102c0:	98                   	cwtl   
f01102c1:	83 ec 08             	sub    $0x8,%esp
f01102c4:	51                   	push   %ecx
f01102c5:	52                   	push   %edx
f01102c6:	50                   	push   %eax
f01102c7:	68 61 01 00 00       	push   $0x161
f01102cc:	ff 75 cc             	pushl  -0x34(%ebp)
f01102cf:	68 20 80 12 f0       	push   $0xf0128020
f01102d4:	e8 93 0c ff ff       	call   f0100f6c <cprintf>
f01102d9:	83 c4 20             	add    $0x20,%esp
			break;
f01102dc:	eb 0d                	jmp    f01102eb <test_alloc_block_FF+0x454>
	//====================================================================//
	/*FF ALLOC Scenario 4: Check stored data inside each allocated block*/
	cprintf("	4: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i <= numOfFFTests; ++i)
f01102de:	ff 45 cc             	incl   -0x34(%ebp)
f01102e1:	83 7d cc 03          	cmpl   $0x3,-0x34(%ebp)
f01102e5:	0f 8e 74 ff ff ff    	jle    f011025f <test_alloc_block_FF+0x3c8>
			cprintf("alloc_block_FF #8.%d: WRONG! content of the block is not correct. Expected=%d, val1=%d, val2=%d, val3=%d\n",i, 353, *(tstStartVAs[i]), *(tstMidVAs[i]), *(tstEndVAs[i]));
			break;
		}
	}

	if (is_correct)
f01102eb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01102ef:	74 04                	je     f01102f5 <test_alloc_block_FF+0x45e>
	{
		eval += 15;
f01102f1:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	cprintf("test alloc_block_FF completed. Evaluation = %d%\n", eval);
f01102f5:	83 ec 08             	sub    $0x8,%esp
f01102f8:	ff 75 e4             	pushl  -0x1c(%ebp)
f01102fb:	68 8c 80 12 f0       	push   $0xf012808c
f0110300:	e8 67 0c ff ff       	call   f0100f6c <cprintf>
f0110305:	83 c4 10             	add    $0x10,%esp
}
f0110308:	90                   	nop
f0110309:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011030c:	5b                   	pop    %ebx
f011030d:	5e                   	pop    %esi
f011030e:	5f                   	pop    %edi
f011030f:	5d                   	pop    %ebp
f0110310:	c3                   	ret    

f0110311 <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f0110311:	55                   	push   %ebp
f0110312:	89 e5                	mov    %esp,%ebp
f0110314:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	panic("test_alloc_block_BF: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	panic("Test is under construction! will be announced later isA");
f0110317:	83 ec 04             	sub    $0x4,%esp
f011031a:	68 cc 80 12 f0       	push   $0xf01280cc
f011031f:	68 5e 01 00 00       	push   $0x15e
f0110324:	68 a8 79 12 f0       	push   $0xf01279a8
f0110329:	e8 ec ff fe ff       	call   f010031a <_panic>

f011032e <test_alloc_block_NF>:
}

void test_alloc_block_NF()
{
f011032e:	55                   	push   %ebp
f011032f:	89 e5                	mov    %esp,%ebp
	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/

	//cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");

}
f0110331:	90                   	nop
f0110332:	5d                   	pop    %ebp
f0110333:	c3                   	ret    

f0110334 <test_free_block_FF>:

void test_free_block_FF()
{
f0110334:	55                   	push   %ebp
f0110335:	89 e5                	mov    %esp,%ebp
f0110337:	83 ec 68             	sub    $0x68,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f011033a:	83 ec 0c             	sub    $0xc,%esp
f011033d:	68 04 81 12 f0       	push   $0xf0128104
f0110342:	e8 25 0c ff ff       	call   f0100f6c <cprintf>
f0110347:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f011034a:	83 ec 0c             	sub    $0xc,%esp
f011034d:	68 44 81 12 f0       	push   $0xf0128144
f0110352:	e8 15 0c ff ff       	call   f0100f6c <cprintf>
f0110357:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f011035a:	83 ec 0c             	sub    $0xc,%esp
f011035d:	68 04 81 12 f0       	push   $0xf0128104
f0110362:	e8 05 0c ff ff       	call   f0100f6c <cprintf>
f0110367:	83 c4 10             	add    $0x10,%esp

	int eval = 0;
f011036a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool is_correct;
	int initAllocatedSpace = 3*Mega;
f0110371:	c7 45 cc 00 00 30 00 	movl   $0x300000,-0x34(%ebp)
	initialize_dynamic_allocator(KERNEL_HEAP_START, initAllocatedSpace);
f0110378:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011037b:	83 ec 08             	sub    $0x8,%esp
f011037e:	50                   	push   %eax
f011037f:	68 00 00 00 f6       	push   $0xf6000000
f0110384:	e8 d0 10 01 00       	call   f0121459 <initialize_dynamic_allocator>
f0110389:	83 c4 10             	add    $0x10,%esp

	void * va ;
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;
f011038c:	83 ec 0c             	sub    $0xc,%esp
f011038f:	68 84 81 12 f0       	push   $0xf0128184
f0110394:	e8 d3 0b ff ff       	call   f0100f6c <cprintf>
f0110399:	83 c4 10             	add    $0x10,%esp

	int totalSizes = 0;
f011039c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (int i = 0; i < numOfAllocs; ++i)
f01103a3:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f01103aa:	eb 2a                	jmp    f01103d6 <test_free_block_FF+0xa2>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
f01103ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01103af:	8b 14 85 78 9d 17 f0 	mov    -0xfe86288(,%eax,4),%edx
f01103b6:	89 d0                	mov    %edx,%eax
f01103b8:	c1 e0 02             	shl    $0x2,%eax
f01103bb:	01 d0                	add    %edx,%eax
f01103bd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01103c4:	01 d0                	add    %edx,%eax
f01103c6:	c1 e0 03             	shl    $0x3,%eax
f01103c9:	89 c2                	mov    %eax,%edx
f01103cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01103ce:	01 d0                	add    %edx,%eax
f01103d0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	//====================================================================//
	/* Try to allocate set of blocks with different sizes*/
	cprintf("	1: Try to allocate set of blocks with different sizes to fill-up the allocated space\n\n") ;

	int totalSizes = 0;
	for (int i = 0; i < numOfAllocs; ++i)
f01103d3:	ff 45 e8             	incl   -0x18(%ebp)
f01103d6:	83 7d e8 06          	cmpl   $0x6,-0x18(%ebp)
f01103da:	7e d0                	jle    f01103ac <test_free_block_FF+0x78>
	{
		totalSizes += allocSizes[i] * allocCntPerSize ;
	}
	int remainSize = initAllocatedSpace - totalSizes - 2*sizeof(int) ; //exclude size of "DA Begin & End" blocks
f01103dc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01103df:	2b 45 ec             	sub    -0x14(%ebp),%eax
f01103e2:	83 e8 08             	sub    $0x8,%eax
f01103e5:	89 45 c8             	mov    %eax,-0x38(%ebp)
	if (remainSize <= 0)
f01103e8:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
f01103ec:	7f 17                	jg     f0110405 <test_free_block_FF+0xd1>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");
f01103ee:	83 ec 04             	sub    $0x4,%esp
f01103f1:	68 dc 81 12 f0       	push   $0xf01281dc
f01103f6:	68 9a 01 00 00       	push   $0x19a
f01103fb:	68 a8 79 12 f0       	push   $0xf01279a8
f0110400:	e8 15 ff fe ff       	call   f010031a <_panic>

	int idx = 0;
f0110405:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
f011040c:	c7 45 e0 04 00 00 f6 	movl   $0xf6000004,-0x20(%ebp)
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0110413:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011041a:	e9 f8 00 00 00       	jmp    f0110517 <test_free_block_FF+0x1e3>
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f011041f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0110426:	e9 dc 00 00 00       	jmp    f0110507 <test_free_block_FF+0x1d3>
		{
			actualSize = allocSizes[i] - sizeOfMetaData;
f011042b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011042e:	8b 04 85 78 9d 17 f0 	mov    -0xfe86288(,%eax,4),%eax
f0110435:	83 e8 08             	sub    $0x8,%eax
f0110438:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f011043b:	83 ec 08             	sub    $0x8,%esp
f011043e:	6a 01                	push   $0x1
f0110440:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110443:	e8 e4 0e 01 00       	call   f012132c <alloc_block>
f0110448:	83 c4 10             	add    $0x10,%esp
f011044b:	89 c2                	mov    %eax,%edx
f011044d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110450:	89 14 85 e0 36 57 f0 	mov    %edx,-0xfa8c920(,%eax,4)
f0110457:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011045a:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110461:	89 45 c0             	mov    %eax,-0x40(%ebp)
			midVAs[idx] = va + actualSize/2 ;
f0110464:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110467:	d1 e8                	shr    %eax
f0110469:	89 c2                	mov    %eax,%edx
f011046b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011046e:	01 c2                	add    %eax,%edx
f0110470:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110473:	89 14 85 e0 62 57 f0 	mov    %edx,-0xfa89d20(,%eax,4)
			endVAs[idx] = va + actualSize - sizeof(short);
f011047a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011047d:	8d 50 fe             	lea    -0x2(%eax),%edx
f0110480:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110483:	01 c2                	add    %eax,%edx
f0110485:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110488:	89 14 85 e0 4c 57 f0 	mov    %edx,-0xfa8b320(,%eax,4)
			//Check returned va
			if(va == NULL || (va != (curVA + sizeOfMetaData/2)))
f011048f:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f0110493:	74 0b                	je     f01104a0 <test_free_block_FF+0x16c>
f0110495:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0110498:	83 c0 04             	add    $0x4,%eax
f011049b:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011049e:	74 24                	je     f01104c4 <test_free_block_FF+0x190>
				panic("test_free_block #1.%d: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x", idx, curVA + sizeOfMetaData ,va);
f01104a0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01104a3:	83 c0 08             	add    $0x8,%eax
f01104a6:	83 ec 08             	sub    $0x8,%esp
f01104a9:	ff 75 c0             	pushl  -0x40(%ebp)
f01104ac:	50                   	push   %eax
f01104ad:	ff 75 e4             	pushl  -0x1c(%ebp)
f01104b0:	68 54 82 12 f0       	push   $0xf0128254
f01104b5:	68 a9 01 00 00       	push   $0x1a9
f01104ba:	68 a8 79 12 f0       	push   $0xf01279a8
f01104bf:	e8 56 fe fe ff       	call   f010031a <_panic>
			curVA += allocSizes[i] ;
f01104c4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01104c7:	8b 04 85 78 9d 17 f0 	mov    -0xfe86288(,%eax,4),%eax
f01104ce:	01 45 e0             	add    %eax,-0x20(%ebp)
			*(startVAs[idx]) = idx ;
f01104d1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01104d4:	8b 14 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%edx
f01104db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01104de:	66 89 02             	mov    %ax,(%edx)
			*(midVAs[idx]) = idx ;
f01104e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01104e4:	8b 14 85 e0 62 57 f0 	mov    -0xfa89d20(,%eax,4),%edx
f01104eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01104ee:	66 89 02             	mov    %ax,(%edx)
			*(endVAs[idx]) = idx ;
f01104f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01104f4:	8b 14 85 e0 4c 57 f0 	mov    -0xfa8b320(,%eax,4),%edx
f01104fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01104fe:	66 89 02             	mov    %ax,(%edx)
			idx++;
f0110501:	ff 45 e4             	incl   -0x1c(%ebp)
	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
	{
		for (int j = 0; j < allocCntPerSize; ++j)
f0110504:	ff 45 d8             	incl   -0x28(%ebp)
f0110507:	81 7d d8 c7 00 00 00 	cmpl   $0xc7,-0x28(%ebp)
f011050e:	0f 8e 17 ff ff ff    	jle    f011042b <test_free_block_FF+0xf7>
		panic("test_free_block is not configured correctly. Consider updating the initial allocated space OR the required allocations");

	int idx = 0;
	void* curVA = (void*) KERNEL_HEAP_START + sizeof(int) ; //just after the "DA Begin" block
	uint32 actualSize;
	for (int i = 0; i < numOfAllocs; ++i)
f0110514:	ff 45 dc             	incl   -0x24(%ebp)
f0110517:	83 7d dc 06          	cmpl   $0x6,-0x24(%ebp)
f011051b:	0f 8e fe fe ff ff    	jle    f011041f <test_free_block_FF+0xeb>
		}
	}

	//====================================================================//
	/* Try to allocate a block with a size equal to the size of the first existing free block*/
	actualSize = remainSize - sizeOfMetaData;
f0110521:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110524:	83 e8 08             	sub    $0x8,%eax
f0110527:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = startVAs[idx] = alloc_block(actualSize, DA_FF);
f011052a:	83 ec 08             	sub    $0x8,%esp
f011052d:	6a 01                	push   $0x1
f011052f:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110532:	e8 f5 0d 01 00       	call   f012132c <alloc_block>
f0110537:	83 c4 10             	add    $0x10,%esp
f011053a:	89 c2                	mov    %eax,%edx
f011053c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011053f:	89 14 85 e0 36 57 f0 	mov    %edx,-0xfa8c920(,%eax,4)
f0110546:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110549:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110550:	89 45 c0             	mov    %eax,-0x40(%ebp)
	midVAs[idx] = va + actualSize/2 ;
f0110553:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0110556:	d1 e8                	shr    %eax
f0110558:	89 c2                	mov    %eax,%edx
f011055a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011055d:	01 c2                	add    %eax,%edx
f011055f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110562:	89 14 85 e0 62 57 f0 	mov    %edx,-0xfa89d20(,%eax,4)
	endVAs[idx] = va + actualSize - sizeof(short);
f0110569:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011056c:	8d 50 fe             	lea    -0x2(%eax),%edx
f011056f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110572:	01 c2                	add    %eax,%edx
f0110574:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0110577:	89 14 85 e0 4c 57 f0 	mov    %edx,-0xfa8b320(,%eax,4)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData/2)))
f011057e:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f0110582:	74 0b                	je     f011058f <test_free_block_FF+0x25b>
f0110584:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0110587:	83 c0 04             	add    $0x4,%eax
f011058a:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f011058d:	74 17                	je     f01105a6 <test_free_block_FF+0x272>
		panic("test_free_block #2: WRONG ALLOC - alloc_block_FF return wrong address.");
f011058f:	83 ec 04             	sub    $0x4,%esp
f0110592:	68 b8 82 12 f0       	push   $0xf01282b8
f0110597:	68 ba 01 00 00       	push   $0x1ba
f011059c:	68 a8 79 12 f0       	push   $0xf01279a8
f01105a1:	e8 74 fd fe ff       	call   f010031a <_panic>
	*(startVAs[idx]) = idx ;
f01105a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01105a9:	8b 14 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%edx
f01105b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01105b3:	66 89 02             	mov    %ax,(%edx)
	*(midVAs[idx]) = idx ;
f01105b6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01105b9:	8b 14 85 e0 62 57 f0 	mov    -0xfa89d20(,%eax,4),%edx
f01105c0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01105c3:	66 89 02             	mov    %ax,(%edx)
	*(endVAs[idx]) = idx ;
f01105c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01105c9:	8b 14 85 e0 4c 57 f0 	mov    -0xfa8b320(,%eax,4),%edx
f01105d0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01105d3:	66 89 02             	mov    %ax,(%edx)

	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
f01105d6:	83 ec 0c             	sub    $0xc,%esp
f01105d9:	68 00 83 12 f0       	push   $0xf0128300
f01105de:	e8 89 09 ff ff       	call   f0100f6c <cprintf>
f01105e3:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01105e6:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	for (int i = 0; i < idx; ++i)
f01105ed:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01105f4:	eb 5b                	jmp    f0110651 <test_free_block_FF+0x31d>
	{
		if (*(startVAs[i]) != i || *(midVAs[i]) != i ||	*(endVAs[i]) != i)
f01105f6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01105f9:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110600:	66 8b 00             	mov    (%eax),%ax
f0110603:	98                   	cwtl   
f0110604:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0110607:	75 26                	jne    f011062f <test_free_block_FF+0x2fb>
f0110609:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011060c:	8b 04 85 e0 62 57 f0 	mov    -0xfa89d20(,%eax,4),%eax
f0110613:	66 8b 00             	mov    (%eax),%ax
f0110616:	98                   	cwtl   
f0110617:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011061a:	75 13                	jne    f011062f <test_free_block_FF+0x2fb>
f011061c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011061f:	8b 04 85 e0 4c 57 f0 	mov    -0xfa8b320(,%eax,4),%eax
f0110626:	66 8b 00             	mov    (%eax),%ax
f0110629:	98                   	cwtl   
f011062a:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011062d:	74 1f                	je     f011064e <test_free_block_FF+0x31a>
		{
			is_correct = 0;
f011062f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cprintf("test_free_block #3.%d: WRONG! content of the block is not correct. Expected %d\n",i, i);
f0110636:	83 ec 04             	sub    $0x4,%esp
f0110639:	ff 75 d4             	pushl  -0x2c(%ebp)
f011063c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011063f:	68 34 83 12 f0       	push   $0xf0128334
f0110644:	e8 23 09 ff ff       	call   f0100f6c <cprintf>
f0110649:	83 c4 10             	add    $0x10,%esp
			break;
f011064c:	eb 0b                	jmp    f0110659 <test_free_block_FF+0x325>
	//====================================================================//
	/* Check stored data inside each allocated block*/
	cprintf("	2: Check stored data inside each allocated block\n\n") ;
	is_correct = 1;

	for (int i = 0; i < idx; ++i)
f011064e:	ff 45 d4             	incl   -0x2c(%ebp)
f0110651:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0110654:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0110657:	7c 9d                	jl     f01105f6 <test_free_block_FF+0x2c2>
		}
	}

	//====================================================================//
	/* free_block Scenario 1: Free some allocated blocks [no coalesce]*/
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
f0110659:	83 ec 0c             	sub    $0xc,%esp
f011065c:	68 84 83 12 f0       	push   $0xf0128384
f0110661:	e8 06 09 ff ff       	call   f0100f6c <cprintf>
f0110666:	83 c4 10             	add    $0x10,%esp
	uint32 block_size, expected_size, *blk_header, *blk_footer;
	is_correct = 1;
f0110669:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f0110670:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0110677:	e9 e4 00 00 00       	jmp    f0110760 <test_free_block_FF+0x42c>
	{
		free_block(startVAs[i*allocCntPerSize]);
f011067c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011067f:	89 d0                	mov    %edx,%eax
f0110681:	c1 e0 02             	shl    $0x2,%eax
f0110684:	01 d0                	add    %edx,%eax
f0110686:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011068d:	01 d0                	add    %edx,%eax
f011068f:	c1 e0 03             	shl    $0x3,%eax
f0110692:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110699:	83 ec 0c             	sub    $0xc,%esp
f011069c:	50                   	push   %eax
f011069d:	e8 cb 0e 01 00       	call   f012156d <free_block>
f01106a2:	83 c4 10             	add    $0x10,%esp
		uint32 block_size = get_block_size(startVAs[i*allocCntPerSize]) ;
f01106a5:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01106a8:	89 d0                	mov    %edx,%eax
f01106aa:	c1 e0 02             	shl    $0x2,%eax
f01106ad:	01 d0                	add    %edx,%eax
f01106af:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01106b6:	01 d0                	add    %edx,%eax
f01106b8:	c1 e0 03             	shl    $0x3,%eax
f01106bb:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f01106c2:	83 ec 0c             	sub    $0xc,%esp
f01106c5:	50                   	push   %eax
f01106c6:	e8 2a 0c 01 00       	call   f01212f5 <get_block_size>
f01106cb:	83 c4 10             	add    $0x10,%esp
f01106ce:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if (block_size != allocSizes[i])
f01106d1:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01106d4:	8b 04 85 78 9d 17 f0 	mov    -0xfe86288(,%eax,4),%eax
f01106db:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01106de:	74 2b                	je     f011070b <test_free_block_FF+0x3d7>
		{
			if (is_correct)
f01106e0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01106e4:	74 25                	je     f011070b <test_free_block_FF+0x3d7>
			{
				is_correct = 0;
f01106e6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				cprintf("test_free_block #4.%d: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",i, allocSizes[i],block_size);
f01106ed:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01106f0:	8b 04 85 78 9d 17 f0 	mov    -0xfe86288(,%eax,4),%eax
f01106f7:	ff 75 bc             	pushl  -0x44(%ebp)
f01106fa:	50                   	push   %eax
f01106fb:	ff 75 d0             	pushl  -0x30(%ebp)
f01106fe:	68 b4 83 12 f0       	push   $0xf01283b4
f0110703:	e8 64 08 ff ff       	call   f0100f6c <cprintf>
f0110708:	83 c4 10             	add    $0x10,%esp
			}
		}
		int8 block_status = is_free_block(startVAs[i*allocCntPerSize]) ;
f011070b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011070e:	89 d0                	mov    %edx,%eax
f0110710:	c1 e0 02             	shl    $0x2,%eax
f0110713:	01 d0                	add    %edx,%eax
f0110715:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011071c:	01 d0                	add    %edx,%eax
f011071e:	c1 e0 03             	shl    $0x3,%eax
f0110721:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110728:	83 ec 0c             	sub    $0xc,%esp
f011072b:	50                   	push   %eax
f011072c:	e8 dd 0b 01 00       	call   f012130e <is_free_block>
f0110731:	83 c4 10             	add    $0x10,%esp
f0110734:	88 45 bb             	mov    %al,-0x45(%ebp)
		if (block_status != 1)
f0110737:	80 7d bb 01          	cmpb   $0x1,-0x45(%ebp)
f011073b:	74 20                	je     f011075d <test_free_block_FF+0x429>
		{
			if (is_correct)
f011073d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110741:	74 1a                	je     f011075d <test_free_block_FF+0x429>
			{
				is_correct = 0;
f0110743:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				cprintf("test_free_block #5.%d: WRONG FREE! block status not marked as free.\n", i);
f011074a:	83 ec 08             	sub    $0x8,%esp
f011074d:	ff 75 d0             	pushl  -0x30(%ebp)
f0110750:	68 18 84 12 f0       	push   $0xf0128418
f0110755:	e8 12 08 ff ff       	call   f0100f6c <cprintf>
f011075a:	83 c4 10             	add    $0x10,%esp
	cprintf("	3: Free some allocated block [no coalesce]\n\n") ;
	uint32 block_size, expected_size, *blk_header, *blk_footer;
	is_correct = 1;

	//Free set of blocks with different sizes (first block of each size)
	for (int i = 0; i < numOfAllocs; ++i)
f011075d:	ff 45 d0             	incl   -0x30(%ebp)
f0110760:	83 7d d0 06          	cmpl   $0x6,-0x30(%ebp)
f0110764:	0f 8e 12 ff ff ff    	jle    f011067c <test_free_block_FF+0x348>
				is_correct = 0;
				cprintf("test_free_block #5.%d: WRONG FREE! block status not marked as free.\n", i);
			}
		}
	}
	uint32 expectedNumOfFreeBlks = numOfAllocs;
f011076a:	c7 45 b4 07 00 00 00 	movl   $0x7,-0x4c(%ebp)
	is_correct = 1;
f0110771:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&freeBlocksList) != expectedNumOfFreeBlks)
f0110778:	a1 bc 25 55 f0       	mov    0xf05525bc,%eax
f011077d:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0110780:	74 17                	je     f0110799 <test_free_block_FF+0x465>
	{
		is_correct = 0;
f0110782:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #5.oo: WRONG number of freed blocks in the freeBlockList.\n");
f0110789:	83 ec 0c             	sub    $0xc,%esp
f011078c:	68 60 84 12 f0       	push   $0xf0128460
f0110791:	e8 d6 07 ff ff       	call   f0100f6c <cprintf>
f0110796:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f0110799:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011079d:	74 04                	je     f01107a3 <test_free_block_FF+0x46f>
	{
		eval += 10;
f011079f:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	is_correct = 1;
f01107a3:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block
	free_block(startVAs[numOfAllocs*allocCntPerSize]);
f01107aa:	a1 c0 4c 57 f0       	mov    0xf0574cc0,%eax
f01107af:	83 ec 0c             	sub    $0xc,%esp
f01107b2:	50                   	push   %eax
f01107b3:	e8 b5 0d 01 00       	call   f012156d <free_block>
f01107b8:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize]) ;
f01107bb:	a1 c0 4c 57 f0       	mov    0xf0574cc0,%eax
f01107c0:	83 ec 0c             	sub    $0xc,%esp
f01107c3:	50                   	push   %eax
f01107c4:	e8 2c 0b 01 00       	call   f01212f5 <get_block_size>
f01107c9:	83 c4 10             	add    $0x10,%esp
f01107cc:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if (block_size != remainSize)
f01107cf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01107d2:	39 45 b0             	cmp    %eax,-0x50(%ebp)
f01107d5:	74 1d                	je     f01107f4 <test_free_block_FF+0x4c0>
	{
		is_correct = 0;
f01107d7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",remainSize,block_size);
f01107de:	83 ec 04             	sub    $0x4,%esp
f01107e1:	ff 75 b0             	pushl  -0x50(%ebp)
f01107e4:	ff 75 c8             	pushl  -0x38(%ebp)
f01107e7:	68 ac 84 12 f0       	push   $0xf01284ac
f01107ec:	e8 7b 07 ff ff       	call   f0100f6c <cprintf>
f01107f1:	83 c4 10             	add    $0x10,%esp
	}
	int8 block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize]) ;
f01107f4:	a1 c0 4c 57 f0       	mov    0xf0574cc0,%eax
f01107f9:	83 ec 0c             	sub    $0xc,%esp
f01107fc:	50                   	push   %eax
f01107fd:	e8 0c 0b 01 00       	call   f012130e <is_free_block>
f0110802:	83 c4 10             	add    $0x10,%esp
f0110805:	88 45 af             	mov    %al,-0x51(%ebp)
	if (block_status != 1)
f0110808:	80 7d af 01          	cmpb   $0x1,-0x51(%ebp)
f011080c:	74 17                	je     f0110825 <test_free_block_FF+0x4f1>
	{
		is_correct = 0;
f011080e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.2: WRONG FREE! WRONG FREE! block status not marked as free.\n");
f0110815:	83 ec 0c             	sub    $0xc,%esp
f0110818:	68 0c 85 12 f0       	push   $0xf012850c
f011081d:	e8 4a 07 ff ff       	call   f0100f6c <cprintf>
f0110822:	83 c4 10             	add    $0x10,%esp
	}

	//Reallocate last block
	actualSize = remainSize - sizeOfMetaData;
f0110825:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110828:	83 e8 08             	sub    $0x8,%eax
f011082b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f011082e:	83 ec 08             	sub    $0x8,%esp
f0110831:	6a 01                	push   $0x1
f0110833:	ff 75 c4             	pushl  -0x3c(%ebp)
f0110836:	e8 f1 0a 01 00       	call   f012132c <alloc_block>
f011083b:	83 c4 10             	add    $0x10,%esp
f011083e:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	if(va == NULL || (va != (curVA + sizeOfMetaData/2)))
f0110841:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f0110845:	74 0b                	je     f0110852 <test_free_block_FF+0x51e>
f0110847:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011084a:	83 c0 04             	add    $0x4,%eax
f011084d:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0110850:	74 17                	je     f0110869 <test_free_block_FF+0x535>
	{
		is_correct = 0;
f0110852:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.3: WRONG ALLOC - alloc_block_FF return wrong address.\n");
f0110859:	83 ec 0c             	sub    $0xc,%esp
f011085c:	68 5c 85 12 f0       	push   $0xf012855c
f0110861:	e8 06 07 ff ff       	call   f0100f6c <cprintf>
f0110866:	83 c4 10             	add    $0x10,%esp
	}

	//Free block before last
	free_block(startVAs[numOfAllocs*allocCntPerSize - 1]);
f0110869:	a1 bc 4c 57 f0       	mov    0xf0574cbc,%eax
f011086e:	83 ec 0c             	sub    $0xc,%esp
f0110871:	50                   	push   %eax
f0110872:	e8 f6 0c 01 00       	call   f012156d <free_block>
f0110877:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[numOfAllocs*allocCntPerSize - 1]) ;
f011087a:	a1 bc 4c 57 f0       	mov    0xf0574cbc,%eax
f011087f:	83 ec 0c             	sub    $0xc,%esp
f0110882:	50                   	push   %eax
f0110883:	e8 6d 0a 01 00       	call   f01212f5 <get_block_size>
f0110888:	83 c4 10             	add    $0x10,%esp
f011088b:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if (block_size != allocSizes[numOfAllocs-1])
f011088e:	a1 90 9d 17 f0       	mov    0xf0179d90,%eax
f0110893:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110896:	74 20                	je     f01108b8 <test_free_block_FF+0x584>
	{
		is_correct = 0;
f0110898:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.4: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[numOfAllocs-1],block_size);
f011089f:	a1 90 9d 17 f0       	mov    0xf0179d90,%eax
f01108a4:	83 ec 04             	sub    $0x4,%esp
f01108a7:	ff 75 b0             	pushl  -0x50(%ebp)
f01108aa:	50                   	push   %eax
f01108ab:	68 a8 85 12 f0       	push   $0xf01285a8
f01108b0:	e8 b7 06 ff ff       	call   f0100f6c <cprintf>
f01108b5:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[numOfAllocs*allocCntPerSize-1]) ;
f01108b8:	a1 bc 4c 57 f0       	mov    0xf0574cbc,%eax
f01108bd:	83 ec 0c             	sub    $0xc,%esp
f01108c0:	50                   	push   %eax
f01108c1:	e8 48 0a 01 00       	call   f012130e <is_free_block>
f01108c6:	83 c4 10             	add    $0x10,%esp
f01108c9:	88 45 af             	mov    %al,-0x51(%ebp)
	if (block_status != 1)
f01108cc:	80 7d af 01          	cmpb   $0x1,-0x51(%ebp)
f01108d0:	74 17                	je     f01108e9 <test_free_block_FF+0x5b5>
	{
		is_correct = 0;
f01108d2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #6.5: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f01108d9:	83 ec 0c             	sub    $0xc,%esp
f01108dc:	68 08 86 12 f0       	push   $0xf0128608
f01108e1:	e8 86 06 ff ff       	call   f0100f6c <cprintf>
f01108e6:	83 c4 10             	add    $0x10,%esp
	}

	//Reallocate first block
	actualSize = allocSizes[0] - sizeOfMetaData;
f01108e9:	a1 78 9d 17 f0       	mov    0xf0179d78,%eax
f01108ee:	83 e8 08             	sub    $0x8,%eax
f01108f1:	89 45 c4             	mov    %eax,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f01108f4:	83 ec 08             	sub    $0x8,%esp
f01108f7:	6a 01                	push   $0x1
f01108f9:	ff 75 c4             	pushl  -0x3c(%ebp)
f01108fc:	e8 2b 0a 01 00       	call   f012132c <alloc_block>
f0110901:	83 c4 10             	add    $0x10,%esp
f0110904:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	if(va == NULL || (va != (void*)(KERNEL_HEAP_START + sizeof(int) + sizeOfMetaData/2)))
f0110907:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f011090b:	74 09                	je     f0110916 <test_free_block_FF+0x5e2>
f011090d:	81 7d c0 08 00 00 f6 	cmpl   $0xf6000008,-0x40(%ebp)
f0110914:	74 17                	je     f011092d <test_free_block_FF+0x5f9>
	{
		is_correct = 0;
f0110916:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.1: WRONG ALLOC - alloc_block_FF return wrong address.\n");
f011091d:	83 ec 0c             	sub    $0xc,%esp
f0110920:	68 60 86 12 f0       	push   $0xf0128660
f0110925:	e8 42 06 ff ff       	call   f0100f6c <cprintf>
f011092a:	83 c4 10             	add    $0x10,%esp
	}

	//Free 2nd block
	free_block(startVAs[1]);
f011092d:	a1 e4 36 57 f0       	mov    0xf05736e4,%eax
f0110932:	83 ec 0c             	sub    $0xc,%esp
f0110935:	50                   	push   %eax
f0110936:	e8 32 0c 01 00       	call   f012156d <free_block>
f011093b:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[1]) ;
f011093e:	a1 e4 36 57 f0       	mov    0xf05736e4,%eax
f0110943:	83 ec 0c             	sub    $0xc,%esp
f0110946:	50                   	push   %eax
f0110947:	e8 a9 09 01 00       	call   f01212f5 <get_block_size>
f011094c:	83 c4 10             	add    $0x10,%esp
f011094f:	89 45 b0             	mov    %eax,-0x50(%ebp)
	if (block_size != allocSizes[0])
f0110952:	a1 78 9d 17 f0       	mov    0xf0179d78,%eax
f0110957:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011095a:	74 20                	je     f011097c <test_free_block_FF+0x648>
	{
		is_correct = 0;
f011095c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.2: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0],block_size);
f0110963:	a1 78 9d 17 f0       	mov    0xf0179d78,%eax
f0110968:	83 ec 04             	sub    $0x4,%esp
f011096b:	ff 75 b0             	pushl  -0x50(%ebp)
f011096e:	50                   	push   %eax
f011096f:	68 ac 86 12 f0       	push   $0xf01286ac
f0110974:	e8 f3 05 ff ff       	call   f0100f6c <cprintf>
f0110979:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[1]) ;
f011097c:	a1 e4 36 57 f0       	mov    0xf05736e4,%eax
f0110981:	83 ec 0c             	sub    $0xc,%esp
f0110984:	50                   	push   %eax
f0110985:	e8 84 09 01 00       	call   f012130e <is_free_block>
f011098a:	83 c4 10             	add    $0x10,%esp
f011098d:	88 45 af             	mov    %al,-0x51(%ebp)
	if (block_status != 1)
f0110990:	80 7d af 01          	cmpb   $0x1,-0x51(%ebp)
f0110994:	74 17                	je     f01109ad <test_free_block_FF+0x679>
	{
		is_correct = 0;
f0110996:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.3: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f011099d:	83 ec 0c             	sub    $0xc,%esp
f01109a0:	68 0c 87 12 f0       	push   $0xf012870c
f01109a5:	e8 c2 05 ff ff       	call   f0100f6c <cprintf>
f01109aa:	83 c4 10             	add    $0x10,%esp
	}
	is_correct = 1;
f01109ad:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	expectedNumOfFreeBlks++ ;
f01109b4:	ff 45 b4             	incl   -0x4c(%ebp)
	if (LIST_SIZE(&freeBlocksList) != expectedNumOfFreeBlks)
f01109b7:	a1 bc 25 55 f0       	mov    0xf05525bc,%eax
f01109bc:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01109bf:	74 17                	je     f01109d8 <test_free_block_FF+0x6a4>
	{
		is_correct = 0;
f01109c1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #7.4: WRONG number of freed blocks in the freeBlockList.\n");
f01109c8:	83 ec 0c             	sub    $0xc,%esp
f01109cb:	68 64 87 12 f0       	push   $0xf0128764
f01109d0:	e8 97 05 ff ff       	call   f0100f6c <cprintf>
f01109d5:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f01109d8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01109dc:	74 04                	je     f01109e2 <test_free_block_FF+0x6ae>
	{
		eval += 10;
f01109de:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 2: Merge with previous ONLY (AT the tail)*/
	cprintf("	4: Free some allocated blocks [Merge with previous ONLY]\n\n") ;
f01109e2:	83 ec 0c             	sub    $0xc,%esp
f01109e5:	68 b0 87 12 f0       	push   $0xf01287b0
f01109ea:	e8 7d 05 ff ff       	call   f0100f6c <cprintf>
f01109ef:	83 c4 10             	add    $0x10,%esp
	cprintf("		4.1: at the tail\n\n") ;
f01109f2:	83 ec 0c             	sub    $0xc,%esp
f01109f5:	68 ec 87 12 f0       	push   $0xf01287ec
f01109fa:	e8 6d 05 ff ff       	call   f0100f6c <cprintf>
f01109ff:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110a02:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Free last block (coalesce with previous)
	uint32 blockIndex = numOfAllocs*allocCntPerSize;
f0110a09:	c7 45 a8 78 05 00 00 	movl   $0x578,-0x58(%ebp)
	free_block(startVAs[blockIndex]);
f0110a10:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110a13:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110a1a:	83 ec 0c             	sub    $0xc,%esp
f0110a1d:	50                   	push   %eax
f0110a1e:	e8 4a 0b 01 00       	call   f012156d <free_block>
f0110a23:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0110a26:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110a29:	48                   	dec    %eax
f0110a2a:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110a31:	83 ec 0c             	sub    $0xc,%esp
f0110a34:	50                   	push   %eax
f0110a35:	e8 bb 08 01 00       	call   f01212f5 <get_block_size>
f0110a3a:	83 c4 10             	add    $0x10,%esp
f0110a3d:	89 45 b0             	mov    %eax,-0x50(%ebp)
	expected_size = remainSize + allocSizes[numOfAllocs-1];
f0110a40:	8b 15 90 9d 17 f0    	mov    0xf0179d90,%edx
f0110a46:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110a49:	01 d0                	add    %edx,%eax
f0110a4b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	if (block_size != expected_size)
f0110a4e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0110a51:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0110a54:	74 26                	je     f0110a7c <test_free_block_FF+0x748>
	{
		is_correct = 0;
f0110a56:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",remainSize + allocSizes[numOfAllocs-1],block_size);
f0110a5d:	8b 15 90 9d 17 f0    	mov    0xf0179d90,%edx
f0110a63:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0110a66:	01 d0                	add    %edx,%eax
f0110a68:	83 ec 04             	sub    $0x4,%esp
f0110a6b:	ff 75 b0             	pushl  -0x50(%ebp)
f0110a6e:	50                   	push   %eax
f0110a6f:	68 04 88 12 f0       	push   $0xf0128804
f0110a74:	e8 f3 04 ff ff       	call   f0100f6c <cprintf>
f0110a79:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f0110a7c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110a7f:	48                   	dec    %eax
f0110a80:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110a87:	83 ec 0c             	sub    $0xc,%esp
f0110a8a:	50                   	push   %eax
f0110a8b:	e8 7e 08 01 00       	call   f012130e <is_free_block>
f0110a90:	83 c4 10             	add    $0x10,%esp
f0110a93:	88 45 af             	mov    %al,-0x51(%ebp)
	if (block_status != 1)
f0110a96:	80 7d af 01          	cmpb   $0x1,-0x51(%ebp)
f0110a9a:	74 17                	je     f0110ab3 <test_free_block_FF+0x77f>
	{
		is_correct = 0;
f0110a9c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f0110aa3:	83 ec 0c             	sub    $0xc,%esp
f0110aa6:	68 64 88 12 f0       	push   $0xf0128864
f0110aab:	e8 bc 04 ff ff       	call   f0100f6c <cprintf>
f0110ab0:	83 c4 10             	add    $0x10,%esp
	}

	blk_header = (uint32*)((uint32)startVAs[blockIndex-1] - sizeof(int));
f0110ab3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110ab6:	48                   	dec    %eax
f0110ab7:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110abe:	83 e8 04             	sub    $0x4,%eax
f0110ac1:	89 45 a0             	mov    %eax,-0x60(%ebp)
	blk_footer = (uint32*)((uint32)startVAs[blockIndex-1]+expected_size-2*sizeof(int));
f0110ac4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110ac7:	48                   	dec    %eax
f0110ac8:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110acf:	89 c2                	mov    %eax,%edx
f0110ad1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0110ad4:	01 d0                	add    %edx,%eax
f0110ad6:	83 e8 08             	sub    $0x8,%eax
f0110ad9:	89 45 9c             	mov    %eax,-0x64(%ebp)
	if (*(blk_header) != *(blk_footer))
f0110adc:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0110adf:	8b 10                	mov    (%eax),%edx
f0110ae1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0110ae4:	8b 00                	mov    (%eax),%eax
f0110ae6:	39 c2                	cmp    %eax,%edx
f0110ae8:	74 17                	je     f0110b01 <test_free_block_FF+0x7cd>
	{
		is_correct = 0;
f0110aea:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #8.3: WRONG FREE! make sure to set block header and footer with the same values.\n");
f0110af1:	83 ec 0c             	sub    $0xc,%esp
f0110af4:	68 bc 88 12 f0       	push   $0xf01288bc
f0110af9:	e8 6e 04 ff ff       	call   f0100f6c <cprintf>
f0110afe:	83 c4 10             	add    $0x10,%esp
	}

	//====================================================================//
	/*free_block Scenario 3: Merge with previous ONLY (between 2 blocks)*/
	cprintf("		4.2: between 2 blocks\n\n") ;
f0110b01:	83 ec 0c             	sub    $0xc,%esp
f0110b04:	68 1e 89 12 f0       	push   $0xf012891e
f0110b09:	e8 5e 04 ff ff       	call   f0100f6c <cprintf>
f0110b0e:	83 c4 10             	add    $0x10,%esp
	blockIndex = 2*allocCntPerSize+1 ;
f0110b11:	c7 45 a8 91 01 00 00 	movl   $0x191,-0x58(%ebp)
	free_block(startVAs[blockIndex]);
f0110b18:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110b1b:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110b22:	83 ec 0c             	sub    $0xc,%esp
f0110b25:	50                   	push   %eax
f0110b26:	e8 42 0a 01 00       	call   f012156d <free_block>
f0110b2b:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0110b2e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110b31:	48                   	dec    %eax
f0110b32:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110b39:	83 ec 0c             	sub    $0xc,%esp
f0110b3c:	50                   	push   %eax
f0110b3d:	e8 b3 07 01 00       	call   f01212f5 <get_block_size>
f0110b42:	83 c4 10             	add    $0x10,%esp
f0110b45:	89 45 b0             	mov    %eax,-0x50(%ebp)
	expected_size = allocSizes[2]+allocSizes[2];
f0110b48:	8b 15 80 9d 17 f0    	mov    0xf0179d80,%edx
f0110b4e:	a1 80 9d 17 f0       	mov    0xf0179d80,%eax
f0110b53:	01 d0                	add    %edx,%eax
f0110b55:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	if (block_size != expected_size)
f0110b58:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0110b5b:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0110b5e:	74 28                	je     f0110b88 <test_free_block_FF+0x854>
	{
		is_correct = 0;
f0110b60:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf	("test_free_block #9.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[2] + allocSizes[2],block_size);
f0110b67:	8b 15 80 9d 17 f0    	mov    0xf0179d80,%edx
f0110b6d:	a1 80 9d 17 f0       	mov    0xf0179d80,%eax
f0110b72:	01 d0                	add    %edx,%eax
f0110b74:	83 ec 04             	sub    $0x4,%esp
f0110b77:	ff 75 b0             	pushl  -0x50(%ebp)
f0110b7a:	50                   	push   %eax
f0110b7b:	68 38 89 12 f0       	push   $0xf0128938
f0110b80:	e8 e7 03 ff ff       	call   f0100f6c <cprintf>
f0110b85:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f0110b88:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110b8b:	48                   	dec    %eax
f0110b8c:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110b93:	83 ec 0c             	sub    $0xc,%esp
f0110b96:	50                   	push   %eax
f0110b97:	e8 72 07 01 00       	call   f012130e <is_free_block>
f0110b9c:	83 c4 10             	add    $0x10,%esp
f0110b9f:	88 45 af             	mov    %al,-0x51(%ebp)
	if (block_status != 1)
f0110ba2:	80 7d af 01          	cmpb   $0x1,-0x51(%ebp)
f0110ba6:	74 17                	je     f0110bbf <test_free_block_FF+0x88b>
	{
		is_correct = 0;
f0110ba8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f0110baf:	83 ec 0c             	sub    $0xc,%esp
f0110bb2:	68 98 89 12 f0       	push   $0xf0128998
f0110bb7:	e8 b0 03 ff ff       	call   f0100f6c <cprintf>
f0110bbc:	83 c4 10             	add    $0x10,%esp
	}

	blk_header = (uint32*)((uint32)startVAs[blockIndex-1] - sizeof(int));
f0110bbf:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110bc2:	48                   	dec    %eax
f0110bc3:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110bca:	83 e8 04             	sub    $0x4,%eax
f0110bcd:	89 45 a0             	mov    %eax,-0x60(%ebp)
	blk_footer = (uint32*)((uint32)startVAs[blockIndex-1]+expected_size-2*sizeof(int));
f0110bd0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110bd3:	48                   	dec    %eax
f0110bd4:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110bdb:	89 c2                	mov    %eax,%edx
f0110bdd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0110be0:	01 d0                	add    %edx,%eax
f0110be2:	83 e8 08             	sub    $0x8,%eax
f0110be5:	89 45 9c             	mov    %eax,-0x64(%ebp)
	if (*(blk_header) != *(blk_footer))
f0110be8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0110beb:	8b 10                	mov    (%eax),%edx
f0110bed:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0110bf0:	8b 00                	mov    (%eax),%eax
f0110bf2:	39 c2                	cmp    %eax,%edx
f0110bf4:	74 17                	je     f0110c0d <test_free_block_FF+0x8d9>
	{
		is_correct = 0;
f0110bf6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.3: WRONG FREE! make sure to set block header and footer with the same values.\n");
f0110bfd:	83 ec 0c             	sub    $0xc,%esp
f0110c00:	68 f0 89 12 f0       	push   $0xf01289f0
f0110c05:	e8 62 03 ff ff       	call   f0100f6c <cprintf>
f0110c0a:	83 c4 10             	add    $0x10,%esp
	}
	is_correct = 1;
f0110c0d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&freeBlocksList) != expectedNumOfFreeBlks)
f0110c14:	a1 bc 25 55 f0       	mov    0xf05525bc,%eax
f0110c19:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0110c1c:	74 17                	je     f0110c35 <test_free_block_FF+0x901>
	{
		is_correct = 0;
f0110c1e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #9.4: WRONG number of freed blocks in the freeBlockList.\n");
f0110c25:	83 ec 0c             	sub    $0xc,%esp
f0110c28:	68 54 8a 12 f0       	push   $0xf0128a54
f0110c2d:	e8 3a 03 ff ff       	call   f0100f6c <cprintf>
f0110c32:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f0110c35:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110c39:	74 04                	je     f0110c3f <test_free_block_FF+0x90b>
	{
		eval += 15;
f0110c3b:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 4: Merge with next ONLY (AT the head)*/
	cprintf("	5: Free some allocated blocks [Merge with next ONLY]\n\n") ;
f0110c3f:	83 ec 0c             	sub    $0xc,%esp
f0110c42:	68 a0 8a 12 f0       	push   $0xf0128aa0
f0110c47:	e8 20 03 ff ff       	call   f0100f6c <cprintf>
f0110c4c:	83 c4 10             	add    $0x10,%esp
	cprintf("		5.1: at the head\n\n") ;
f0110c4f:	83 ec 0c             	sub    $0xc,%esp
f0110c52:	68 d8 8a 12 f0       	push   $0xf0128ad8
f0110c57:	e8 10 03 ff ff       	call   f0100f6c <cprintf>
f0110c5c:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110c5f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 0 ;
f0110c66:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	free_block(startVAs[blockIndex]);
f0110c6d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110c70:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110c77:	83 ec 0c             	sub    $0xc,%esp
f0110c7a:	50                   	push   %eax
f0110c7b:	e8 ed 08 01 00       	call   f012156d <free_block>
f0110c80:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f0110c83:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110c86:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110c8d:	83 ec 0c             	sub    $0xc,%esp
f0110c90:	50                   	push   %eax
f0110c91:	e8 5f 06 01 00       	call   f01212f5 <get_block_size>
f0110c96:	83 c4 10             	add    $0x10,%esp
f0110c99:	89 45 b0             	mov    %eax,-0x50(%ebp)
	expected_size = allocSizes[0]+allocSizes[0];
f0110c9c:	8b 15 78 9d 17 f0    	mov    0xf0179d78,%edx
f0110ca2:	a1 78 9d 17 f0       	mov    0xf0179d78,%eax
f0110ca7:	01 d0                	add    %edx,%eax
f0110ca9:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	if (block_size != expected_size)
f0110cac:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0110caf:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0110cb2:	74 28                	je     f0110cdc <test_free_block_FF+0x9a8>
	{
		is_correct = 0;
f0110cb4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0] + allocSizes[0],block_size);
f0110cbb:	8b 15 78 9d 17 f0    	mov    0xf0179d78,%edx
f0110cc1:	a1 78 9d 17 f0       	mov    0xf0179d78,%eax
f0110cc6:	01 d0                	add    %edx,%eax
f0110cc8:	83 ec 04             	sub    $0x4,%esp
f0110ccb:	ff 75 b0             	pushl  -0x50(%ebp)
f0110cce:	50                   	push   %eax
f0110ccf:	68 f0 8a 12 f0       	push   $0xf0128af0
f0110cd4:	e8 93 02 ff ff       	call   f0100f6c <cprintf>
f0110cd9:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex]) ;
f0110cdc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110cdf:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110ce6:	83 ec 0c             	sub    $0xc,%esp
f0110ce9:	50                   	push   %eax
f0110cea:	e8 1f 06 01 00       	call   f012130e <is_free_block>
f0110cef:	83 c4 10             	add    $0x10,%esp
f0110cf2:	88 45 af             	mov    %al,-0x51(%ebp)
	if (block_status != 1)
f0110cf5:	80 7d af 01          	cmpb   $0x1,-0x51(%ebp)
f0110cf9:	74 17                	je     f0110d12 <test_free_block_FF+0x9de>
	{
		is_correct = 0;
f0110cfb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f0110d02:	83 ec 0c             	sub    $0xc,%esp
f0110d05:	68 54 8b 12 f0       	push   $0xf0128b54
f0110d0a:	e8 5d 02 ff ff       	call   f0100f6c <cprintf>
f0110d0f:	83 c4 10             	add    $0x10,%esp
	}
	blk_header = (uint32*)((uint32)startVAs[blockIndex] - sizeof(int));
f0110d12:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110d15:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110d1c:	83 e8 04             	sub    $0x4,%eax
f0110d1f:	89 45 a0             	mov    %eax,-0x60(%ebp)
	blk_footer = (uint32*)((uint32)startVAs[blockIndex]+expected_size-2*sizeof(int));
f0110d22:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110d25:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110d2c:	89 c2                	mov    %eax,%edx
f0110d2e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0110d31:	01 d0                	add    %edx,%eax
f0110d33:	83 e8 08             	sub    $0x8,%eax
f0110d36:	89 45 9c             	mov    %eax,-0x64(%ebp)
	if (*(blk_header) != *(blk_footer))
f0110d39:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0110d3c:	8b 10                	mov    (%eax),%edx
f0110d3e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0110d41:	8b 00                	mov    (%eax),%eax
f0110d43:	39 c2                	cmp    %eax,%edx
f0110d45:	74 17                	je     f0110d5e <test_free_block_FF+0xa2a>
	{
		is_correct = 0;
f0110d47:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #10.3: WRONG FREE! make sure to set block header and footer with the same values.\n");
f0110d4e:	83 ec 0c             	sub    $0xc,%esp
f0110d51:	68 ac 8b 12 f0       	push   $0xf0128bac
f0110d56:	e8 11 02 ff ff       	call   f0100f6c <cprintf>
f0110d5b:	83 c4 10             	add    $0x10,%esp
	}


	//====================================================================//
	/*free_block Scenario 5: Merge with next ONLY (between 2 blocks)*/
	cprintf("		5.2: between 2 blocks\n\n") ;
f0110d5e:	83 ec 0c             	sub    $0xc,%esp
f0110d61:	68 0f 8c 12 f0       	push   $0xf0128c0f
f0110d66:	e8 01 02 ff ff       	call   f0100f6c <cprintf>
f0110d6b:	83 c4 10             	add    $0x10,%esp
	blockIndex = 1*allocCntPerSize - 1 ;
f0110d6e:	c7 45 a8 c7 00 00 00 	movl   $0xc7,-0x58(%ebp)
	free_block(startVAs[blockIndex]);
f0110d75:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110d78:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110d7f:	83 ec 0c             	sub    $0xc,%esp
f0110d82:	50                   	push   %eax
f0110d83:	e8 e5 07 01 00       	call   f012156d <free_block>
f0110d88:	83 c4 10             	add    $0x10,%esp
	block_size = get_block_size(startVAs[blockIndex]) ;
f0110d8b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110d8e:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110d95:	83 ec 0c             	sub    $0xc,%esp
f0110d98:	50                   	push   %eax
f0110d99:	e8 57 05 01 00       	call   f01212f5 <get_block_size>
f0110d9e:	83 c4 10             	add    $0x10,%esp
f0110da1:	89 45 b0             	mov    %eax,-0x50(%ebp)
	expected_size = allocSizes[0]+allocSizes[1];
f0110da4:	8b 15 78 9d 17 f0    	mov    0xf0179d78,%edx
f0110daa:	a1 7c 9d 17 f0       	mov    0xf0179d7c,%eax
f0110daf:	01 d0                	add    %edx,%eax
f0110db1:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	if (block_size != expected_size)
f0110db4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0110db7:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0110dba:	74 28                	je     f0110de4 <test_free_block_FF+0xab0>
	{
		is_correct = 0;
f0110dbc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[0] + allocSizes[1],block_size);
f0110dc3:	8b 15 78 9d 17 f0    	mov    0xf0179d78,%edx
f0110dc9:	a1 7c 9d 17 f0       	mov    0xf0179d7c,%eax
f0110dce:	01 d0                	add    %edx,%eax
f0110dd0:	83 ec 04             	sub    $0x4,%esp
f0110dd3:	ff 75 b0             	pushl  -0x50(%ebp)
f0110dd6:	50                   	push   %eax
f0110dd7:	68 2c 8c 12 f0       	push   $0xf0128c2c
f0110ddc:	e8 8b 01 ff ff       	call   f0100f6c <cprintf>
f0110de1:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex]) ;
f0110de4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110de7:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110dee:	83 ec 0c             	sub    $0xc,%esp
f0110df1:	50                   	push   %eax
f0110df2:	e8 17 05 01 00       	call   f012130e <is_free_block>
f0110df7:	83 c4 10             	add    $0x10,%esp
f0110dfa:	88 45 af             	mov    %al,-0x51(%ebp)
	if (block_status != 1)
f0110dfd:	80 7d af 01          	cmpb   $0x1,-0x51(%ebp)
f0110e01:	74 17                	je     f0110e1a <test_free_block_FF+0xae6>
	{
		is_correct = 0;
f0110e03:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f0110e0a:	83 ec 0c             	sub    $0xc,%esp
f0110e0d:	68 90 8c 12 f0       	push   $0xf0128c90
f0110e12:	e8 55 01 ff ff       	call   f0100f6c <cprintf>
f0110e17:	83 c4 10             	add    $0x10,%esp
	}
	blk_header = (uint32*)((uint32)startVAs[blockIndex] - sizeof(int));
f0110e1a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110e1d:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110e24:	83 e8 04             	sub    $0x4,%eax
f0110e27:	89 45 a0             	mov    %eax,-0x60(%ebp)
	blk_footer = (uint32*)((uint32)startVAs[blockIndex]+expected_size-2*sizeof(int));
f0110e2a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110e2d:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110e34:	89 c2                	mov    %eax,%edx
f0110e36:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0110e39:	01 d0                	add    %edx,%eax
f0110e3b:	83 e8 08             	sub    $0x8,%eax
f0110e3e:	89 45 9c             	mov    %eax,-0x64(%ebp)
	if (*(blk_header) != *(blk_footer))
f0110e41:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0110e44:	8b 10                	mov    (%eax),%edx
f0110e46:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0110e49:	8b 00                	mov    (%eax),%eax
f0110e4b:	39 c2                	cmp    %eax,%edx
f0110e4d:	74 17                	je     f0110e66 <test_free_block_FF+0xb32>
	{
		is_correct = 0;
f0110e4f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.3: WRONG FREE! make sure to set block header and footer with the same values.\n");
f0110e56:	83 ec 0c             	sub    $0xc,%esp
f0110e59:	68 e8 8c 12 f0       	push   $0xf0128ce8
f0110e5e:	e8 09 01 ff ff       	call   f0100f6c <cprintf>
f0110e63:	83 c4 10             	add    $0x10,%esp
	}

	is_correct = 1;
f0110e66:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&freeBlocksList) != expectedNumOfFreeBlks)
f0110e6d:	a1 bc 25 55 f0       	mov    0xf05525bc,%eax
f0110e72:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0110e75:	74 17                	je     f0110e8e <test_free_block_FF+0xb5a>
	{
		is_correct = 0;
f0110e77:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #11.4: WRONG number of freed blocks in the freeBlockList.\n");
f0110e7e:	83 ec 0c             	sub    $0xc,%esp
f0110e81:	68 4c 8d 12 f0       	push   $0xf0128d4c
f0110e86:	e8 e1 00 ff ff       	call   f0100f6c <cprintf>
f0110e8b:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f0110e8e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0110e92:	74 04                	je     f0110e98 <test_free_block_FF+0xb64>
	{
		eval += 15;
f0110e94:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)
	}

	//====================================================================//
	/*free_block Scenario 6: Merge with prev & next */
	cprintf("	6: Free some allocated blocks [Merge with previous & next]\n\n") ;
f0110e98:	83 ec 0c             	sub    $0xc,%esp
f0110e9b:	68 98 8d 12 f0       	push   $0xf0128d98
f0110ea0:	e8 c7 00 ff ff       	call   f0100f6c <cprintf>
f0110ea5:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0110ea8:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	blockIndex = 4*allocCntPerSize - 2 ;
f0110eaf:	c7 45 a8 1e 03 00 00 	movl   $0x31e,-0x58(%ebp)
	free_block(startVAs[blockIndex]);	//no merge
f0110eb6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110eb9:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110ec0:	83 ec 0c             	sub    $0xc,%esp
f0110ec3:	50                   	push   %eax
f0110ec4:	e8 a4 06 01 00       	call   f012156d <free_block>
f0110ec9:	83 c4 10             	add    $0x10,%esp
	expectedNumOfFreeBlks++;
f0110ecc:	ff 45 b4             	incl   -0x4c(%ebp)

	blockIndex = 4*allocCntPerSize - 1 ;
f0110ecf:	c7 45 a8 1f 03 00 00 	movl   $0x31f,-0x58(%ebp)
	free_block(startVAs[blockIndex]);	//merge with prev & next
f0110ed6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110ed9:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110ee0:	83 ec 0c             	sub    $0xc,%esp
f0110ee3:	50                   	push   %eax
f0110ee4:	e8 84 06 01 00       	call   f012156d <free_block>
f0110ee9:	83 c4 10             	add    $0x10,%esp
	expectedNumOfFreeBlks--;
f0110eec:	ff 4d b4             	decl   -0x4c(%ebp)

	block_size = get_block_size(startVAs[blockIndex-1]) ;
f0110eef:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110ef2:	48                   	dec    %eax
f0110ef3:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110efa:	83 ec 0c             	sub    $0xc,%esp
f0110efd:	50                   	push   %eax
f0110efe:	e8 f2 03 01 00       	call   f01212f5 <get_block_size>
f0110f03:	83 c4 10             	add    $0x10,%esp
f0110f06:	89 45 b0             	mov    %eax,-0x50(%ebp)
	expected_size = allocSizes[3]+allocSizes[3]+allocSizes[4];
f0110f09:	8b 15 84 9d 17 f0    	mov    0xf0179d84,%edx
f0110f0f:	a1 84 9d 17 f0       	mov    0xf0179d84,%eax
f0110f14:	01 c2                	add    %eax,%edx
f0110f16:	a1 88 9d 17 f0       	mov    0xf0179d88,%eax
f0110f1b:	01 d0                	add    %edx,%eax
f0110f1d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	if (block_size != expected_size)
f0110f20:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0110f23:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0110f26:	74 2f                	je     f0110f57 <test_free_block_FF+0xc23>
	{
		is_correct = 0;
f0110f28:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.1: WRONG FREE! block size after free is not correct. Expected %d, Actual %d\n",allocSizes[3]+allocSizes[3]+allocSizes[4],block_size);
f0110f2f:	8b 15 84 9d 17 f0    	mov    0xf0179d84,%edx
f0110f35:	a1 84 9d 17 f0       	mov    0xf0179d84,%eax
f0110f3a:	01 c2                	add    %eax,%edx
f0110f3c:	a1 88 9d 17 f0       	mov    0xf0179d88,%eax
f0110f41:	01 d0                	add    %edx,%eax
f0110f43:	83 ec 04             	sub    $0x4,%esp
f0110f46:	ff 75 b0             	pushl  -0x50(%ebp)
f0110f49:	50                   	push   %eax
f0110f4a:	68 d8 8d 12 f0       	push   $0xf0128dd8
f0110f4f:	e8 18 00 ff ff       	call   f0100f6c <cprintf>
f0110f54:	83 c4 10             	add    $0x10,%esp
	}
	block_status = is_free_block(startVAs[blockIndex-1]) ;
f0110f57:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110f5a:	48                   	dec    %eax
f0110f5b:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110f62:	83 ec 0c             	sub    $0xc,%esp
f0110f65:	50                   	push   %eax
f0110f66:	e8 a3 03 01 00       	call   f012130e <is_free_block>
f0110f6b:	83 c4 10             	add    $0x10,%esp
f0110f6e:	88 45 af             	mov    %al,-0x51(%ebp)
	if (block_status != 1)
f0110f71:	80 7d af 01          	cmpb   $0x1,-0x51(%ebp)
f0110f75:	74 17                	je     f0110f8e <test_free_block_FF+0xc5a>
	{
		is_correct = 0;
f0110f77:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.2: WRONG FREE! block status (is_free) not equal 1 after freeing.\n");
f0110f7e:	83 ec 0c             	sub    $0xc,%esp
f0110f81:	68 3c 8e 12 f0       	push   $0xf0128e3c
f0110f86:	e8 e1 ff fe ff       	call   f0100f6c <cprintf>
f0110f8b:	83 c4 10             	add    $0x10,%esp
	}
	blk_header = (uint32*)((uint32)startVAs[blockIndex-1] - sizeof(int));
f0110f8e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110f91:	48                   	dec    %eax
f0110f92:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110f99:	83 e8 04             	sub    $0x4,%eax
f0110f9c:	89 45 a0             	mov    %eax,-0x60(%ebp)
	blk_footer = (uint32*)((uint32)startVAs[blockIndex-1]+expected_size-2*sizeof(int));
f0110f9f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110fa2:	48                   	dec    %eax
f0110fa3:	8b 04 85 e0 36 57 f0 	mov    -0xfa8c920(,%eax,4),%eax
f0110faa:	89 c2                	mov    %eax,%edx
f0110fac:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0110faf:	01 d0                	add    %edx,%eax
f0110fb1:	83 e8 08             	sub    $0x8,%eax
f0110fb4:	89 45 9c             	mov    %eax,-0x64(%ebp)
	if (*(blk_header) != *(blk_footer))
f0110fb7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0110fba:	8b 10                	mov    (%eax),%edx
f0110fbc:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0110fbf:	8b 00                	mov    (%eax),%eax
f0110fc1:	39 c2                	cmp    %eax,%edx
f0110fc3:	74 17                	je     f0110fdc <test_free_block_FF+0xca8>
	{
		is_correct = 0;
f0110fc5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.3: WRONG FREE! make sure to set block header and footer with the same values.\n");
f0110fcc:	83 ec 0c             	sub    $0xc,%esp
f0110fcf:	68 94 8e 12 f0       	push   $0xf0128e94
f0110fd4:	e8 93 ff fe ff       	call   f0100f6c <cprintf>
f0110fd9:	83 c4 10             	add    $0x10,%esp
	}

	is_correct = 1;
f0110fdc:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&freeBlocksList) != expectedNumOfFreeBlks)
f0110fe3:	a1 bc 25 55 f0       	mov    0xf05525bc,%eax
f0110fe8:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0110feb:	74 20                	je     f011100d <test_free_block_FF+0xcd9>
	{
		is_correct = 0;
f0110fed:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #12.4: WRONG number of freed blocks in the freeBlockList. expected = %d, actual = %d\n", expectedNumOfFreeBlks, LIST_SIZE(&freeBlocksList));
f0110ff4:	a1 bc 25 55 f0       	mov    0xf05525bc,%eax
f0110ff9:	83 ec 04             	sub    $0x4,%esp
f0110ffc:	50                   	push   %eax
f0110ffd:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111000:	68 f8 8e 12 f0       	push   $0xf0128ef8
f0111005:	e8 62 ff fe ff       	call   f0100f6c <cprintf>
f011100a:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f011100d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111011:	74 04                	je     f0111017 <test_free_block_FF+0xce3>
	{
		eval += 20;
f0111013:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)
	}

	//====================================================================//
	/*Allocate After Free Scenarios */
	cprintf("	7: Allocate After Free [should be placed in coalesced blocks]\n\n") ;
f0111017:	83 ec 0c             	sub    $0xc,%esp
f011101a:	68 60 8f 12 f0       	push   $0xf0128f60
f011101f:	e8 48 ff fe ff       	call   f0100f6c <cprintf>
f0111024:	83 c4 10             	add    $0x10,%esp

	cprintf("		7.1: in block coalesces with NEXT\n\n") ;
f0111027:	83 ec 0c             	sub    $0xc,%esp
f011102a:	68 a4 8f 12 f0       	push   $0xf0128fa4
f011102f:	e8 38 ff fe ff       	call   f0100f6c <cprintf>
f0111034:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f0111037:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 5*kilo - sizeOfMetaData;
f011103e:	c7 45 c4 f8 13 00 00 	movl   $0x13f8,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0111045:	83 ec 08             	sub    $0x8,%esp
f0111048:	6a 01                	push   $0x1
f011104a:	ff 75 c4             	pushl  -0x3c(%ebp)
f011104d:	e8 da 02 01 00       	call   f012132c <alloc_block>
f0111052:	83 c4 10             	add    $0x10,%esp
f0111055:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	void* expected = (void*)(KERNEL_HEAP_START + sizeof(int) + sizeOfMetaData/2);
f0111058:	c7 45 98 08 00 00 f6 	movl   $0xf6000008,-0x68(%ebp)
	if(va == NULL || (va != expected))
f011105f:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f0111063:	74 08                	je     f011106d <test_free_block_FF+0xd39>
f0111065:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111068:	3b 45 98             	cmp    -0x68(%ebp),%eax
f011106b:	74 1d                	je     f011108a <test_free_block_FF+0xd56>
	{
		is_correct = 0;
f011106d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #13.1: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f0111074:	83 ec 04             	sub    $0x4,%esp
f0111077:	ff 75 c0             	pushl  -0x40(%ebp)
f011107a:	ff 75 98             	pushl  -0x68(%ebp)
f011107d:	68 cc 8f 12 f0       	push   $0xf0128fcc
f0111082:	e8 e5 fe fe ff       	call   f0100f6c <cprintf>
f0111087:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 3*kilo - sizeOfMetaData;
f011108a:	c7 45 c4 f8 0b 00 00 	movl   $0xbf8,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0111091:	83 ec 08             	sub    $0x8,%esp
f0111094:	6a 01                	push   $0x1
f0111096:	ff 75 c4             	pushl  -0x3c(%ebp)
f0111099:	e8 8e 02 01 00       	call   f012132c <alloc_block>
f011109e:	83 c4 10             	add    $0x10,%esp
f01110a1:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = (void*)(KERNEL_HEAP_START + sizeof(int) + 5*kilo + sizeOfMetaData/2);
f01110a4:	c7 45 98 08 14 00 f6 	movl   $0xf6001408,-0x68(%ebp)
	if(va == NULL || (va != expected))
f01110ab:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f01110af:	74 08                	je     f01110b9 <test_free_block_FF+0xd85>
f01110b1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01110b4:	3b 45 98             	cmp    -0x68(%ebp),%eax
f01110b7:	74 1d                	je     f01110d6 <test_free_block_FF+0xda2>
	{
		is_correct = 0;
f01110b9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #13.2: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f01110c0:	83 ec 04             	sub    $0x4,%esp
f01110c3:	ff 75 c0             	pushl  -0x40(%ebp)
f01110c6:	ff 75 98             	pushl  -0x68(%ebp)
f01110c9:	68 30 90 12 f0       	push   $0xf0129030
f01110ce:	e8 99 fe fe ff       	call   f0100f6c <cprintf>
f01110d3:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 4*kilo + 10;
f01110d6:	c7 45 c4 0a 10 00 00 	movl   $0x100a,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f01110dd:	83 ec 08             	sub    $0x8,%esp
f01110e0:	6a 01                	push   $0x1
f01110e2:	ff 75 c4             	pushl  -0x3c(%ebp)
f01110e5:	e8 42 02 01 00       	call   f012132c <alloc_block>
f01110ea:	83 c4 10             	add    $0x10,%esp
f01110ed:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[1*allocCntPerSize - 1];
f01110f0:	a1 fc 39 57 f0       	mov    0xf05739fc,%eax
f01110f5:	89 45 98             	mov    %eax,-0x68(%ebp)
	if(va == NULL || (va != expected))
f01110f8:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f01110fc:	74 08                	je     f0111106 <test_free_block_FF+0xdd2>
f01110fe:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111101:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0111104:	74 1d                	je     f0111123 <test_free_block_FF+0xdef>
	{
		is_correct = 0;
f0111106:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #13.3: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f011110d:	83 ec 04             	sub    $0x4,%esp
f0111110:	ff 75 c0             	pushl  -0x40(%ebp)
f0111113:	ff 75 98             	pushl  -0x68(%ebp)
f0111116:	68 94 90 12 f0       	push   $0xf0129094
f011111b:	e8 4c fe fe ff       	call   f0100f6c <cprintf>
f0111120:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f0111123:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111127:	74 04                	je     f011112d <test_free_block_FF+0xdf9>
	{
		eval += 10;
f0111129:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("		7.2: in block coalesces with PREV & NEXT\n\n") ;
f011112d:	83 ec 0c             	sub    $0xc,%esp
f0111130:	68 f8 90 12 f0       	push   $0xf01290f8
f0111135:	e8 32 fe fe ff       	call   f0100f6c <cprintf>
f011113a:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f011113d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo + 1;
f0111144:	c7 45 c4 01 08 00 00 	movl   $0x801,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f011114b:	83 ec 08             	sub    $0x8,%esp
f011114e:	6a 01                	push   $0x1
f0111150:	ff 75 c4             	pushl  -0x3c(%ebp)
f0111153:	e8 d4 01 01 00       	call   f012132c <alloc_block>
f0111158:	83 c4 10             	add    $0x10,%esp
f011115b:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[4*allocCntPerSize - 2];
f011115e:	a1 58 43 57 f0       	mov    0xf0574358,%eax
f0111163:	89 45 98             	mov    %eax,-0x68(%ebp)
	if(va == NULL || (va != expected))
f0111166:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f011116a:	74 08                	je     f0111174 <test_free_block_FF+0xe40>
f011116c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011116f:	3b 45 98             	cmp    -0x68(%ebp),%eax
f0111172:	74 1d                	je     f0111191 <test_free_block_FF+0xe5d>
	{
		is_correct = 0;
f0111174:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #13.4: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f011117b:	83 ec 04             	sub    $0x4,%esp
f011117e:	ff 75 c0             	pushl  -0x40(%ebp)
f0111181:	ff 75 98             	pushl  -0x68(%ebp)
f0111184:	68 28 91 12 f0       	push   $0xf0129128
f0111189:	e8 de fd fe ff       	call   f0100f6c <cprintf>
f011118e:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f0111191:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111195:	74 04                	je     f011119b <test_free_block_FF+0xe67>
	{
		eval += 10;
f0111197:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("		7.3: in block coalesces with PREV\n\n") ;
f011119b:	83 ec 0c             	sub    $0xc,%esp
f011119e:	68 8c 91 12 f0       	push   $0xf012918c
f01111a3:	e8 c4 fd fe ff       	call   f0100f6c <cprintf>
f01111a8:	83 c4 10             	add    $0x10,%esp
	is_correct = 1;
f01111ab:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	actualSize = 2*kilo - sizeOfMetaData;
f01111b2:	c7 45 c4 f8 07 00 00 	movl   $0x7f8,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f01111b9:	83 ec 08             	sub    $0x8,%esp
f01111bc:	6a 01                	push   $0x1
f01111be:	ff 75 c4             	pushl  -0x3c(%ebp)
f01111c1:	e8 66 01 01 00       	call   f012132c <alloc_block>
f01111c6:	83 c4 10             	add    $0x10,%esp
f01111c9:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[2*allocCntPerSize];
f01111cc:	a1 20 3d 57 f0       	mov    0xf0573d20,%eax
f01111d1:	89 45 98             	mov    %eax,-0x68(%ebp)
	if(va == NULL || (va != expected))
f01111d4:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f01111d8:	74 08                	je     f01111e2 <test_free_block_FF+0xeae>
f01111da:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01111dd:	3b 45 98             	cmp    -0x68(%ebp),%eax
f01111e0:	74 1d                	je     f01111ff <test_free_block_FF+0xecb>
	{
		is_correct = 0;
f01111e2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #13.5: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f01111e9:	83 ec 04             	sub    $0x4,%esp
f01111ec:	ff 75 c0             	pushl  -0x40(%ebp)
f01111ef:	ff 75 98             	pushl  -0x68(%ebp)
f01111f2:	68 b4 91 12 f0       	push   $0xf01291b4
f01111f7:	e8 70 fd fe ff       	call   f0100f6c <cprintf>
f01111fc:	83 c4 10             	add    $0x10,%esp
	}
	actualSize = 8*kilo - sizeOfMetaData;
f01111ff:	c7 45 c4 f8 1f 00 00 	movl   $0x1ff8,-0x3c(%ebp)
	va = alloc_block(actualSize, DA_FF);
f0111206:	83 ec 08             	sub    $0x8,%esp
f0111209:	6a 01                	push   $0x1
f011120b:	ff 75 c4             	pushl  -0x3c(%ebp)
f011120e:	e8 19 01 01 00       	call   f012132c <alloc_block>
f0111213:	83 c4 10             	add    $0x10,%esp
f0111216:	89 45 c0             	mov    %eax,-0x40(%ebp)
	//Check returned va
	expected = startVAs[numOfAllocs*allocCntPerSize-1];
f0111219:	a1 bc 4c 57 f0       	mov    0xf0574cbc,%eax
f011121e:	89 45 98             	mov    %eax,-0x68(%ebp)
	if(va == NULL || (va != expected))
f0111221:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
f0111225:	74 08                	je     f011122f <test_free_block_FF+0xefb>
f0111227:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011122a:	3b 45 98             	cmp    -0x68(%ebp),%eax
f011122d:	74 1d                	je     f011124c <test_free_block_FF+0xf18>
	{
		is_correct = 0;
f011122f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		cprintf("test_free_block #13.6: WRONG ALLOC - alloc_block_FF return wrong address. Expected %x, Actual %x\n", expected, va);
f0111236:	83 ec 04             	sub    $0x4,%esp
f0111239:	ff 75 c0             	pushl  -0x40(%ebp)
f011123c:	ff 75 98             	pushl  -0x68(%ebp)
f011123f:	68 18 92 12 f0       	push   $0xf0129218
f0111244:	e8 23 fd fe ff       	call   f0100f6c <cprintf>
f0111249:	83 c4 10             	add    $0x10,%esp
	}
	if (is_correct)
f011124c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111250:	74 04                	je     f0111256 <test_free_block_FF+0xf22>
	{
		eval += 10;
f0111252:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)
	}

	cprintf("test free_block with FIRST FIT completed. Evaluation = %d%\n", eval);
f0111256:	83 ec 08             	sub    $0x8,%esp
f0111259:	ff 75 f4             	pushl  -0xc(%ebp)
f011125c:	68 7c 92 12 f0       	push   $0xf012927c
f0111261:	e8 06 fd fe ff       	call   f0100f6c <cprintf>
f0111266:	83 c4 10             	add    $0x10,%esp

}
f0111269:	90                   	nop
f011126a:	c9                   	leave  
f011126b:	c3                   	ret    

f011126c <test_free_block_BF>:

void test_free_block_BF()
{
f011126c:	55                   	push   %ebp
f011126d:	89 e5                	mov    %esp,%ebp
f011126f:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===========================================================\n") ;
f0111272:	83 ec 0c             	sub    $0xc,%esp
f0111275:	68 04 81 12 f0       	push   $0xf0128104
f011127a:	e8 ed fc fe ff       	call   f0100f6c <cprintf>
f011127f:	83 c4 10             	add    $0x10,%esp
	cprintf("NOTE: THIS TEST IS DEPEND ON BOTH ALLOCATE & FREE FUNCTIONS\n") ;
f0111282:	83 ec 0c             	sub    $0xc,%esp
f0111285:	68 44 81 12 f0       	push   $0xf0128144
f011128a:	e8 dd fc fe ff       	call   f0100f6c <cprintf>
f011128f:	83 c4 10             	add    $0x10,%esp
	cprintf("===========================================================\n") ;
f0111292:	83 ec 0c             	sub    $0xc,%esp
f0111295:	68 04 81 12 f0       	push   $0xf0128104
f011129a:	e8 cd fc fe ff       	call   f0100f6c <cprintf>
f011129f:	83 c4 10             	add    $0x10,%esp

	panic("Test is under construction! will be announced later isA");
f01112a2:	83 ec 04             	sub    $0x4,%esp
f01112a5:	68 cc 80 12 f0       	push   $0xf01280cc
f01112aa:	68 53 03 00 00       	push   $0x353
f01112af:	68 a8 79 12 f0       	push   $0xf01279a8
f01112b4:	e8 61 f0 fe ff       	call   f010031a <_panic>

f01112b9 <test_free_block_NF>:

}

void test_free_block_NF()
{
f01112b9:	55                   	push   %ebp
f01112ba:	89 e5                	mov    %esp,%ebp
f01112bc:	83 ec 08             	sub    $0x8,%esp
	panic("not implemented");
f01112bf:	83 ec 04             	sub    $0x4,%esp
f01112c2:	68 b8 92 12 f0       	push   $0xf01292b8
f01112c7:	68 59 03 00 00       	push   $0x359
f01112cc:	68 a8 79 12 f0       	push   $0xf01279a8
f01112d1:	e8 44 f0 fe ff       	call   f010031a <_panic>

f01112d6 <test_realloc_block_FF>:
}

void test_realloc_block_FF()
{
f01112d6:	55                   	push   %ebp
f01112d7:	89 e5                	mov    %esp,%ebp
f01112d9:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	cprintf("===================================================\n");
f01112dc:	83 ec 0c             	sub    $0xc,%esp
f01112df:	68 c8 92 12 f0       	push   $0xf01292c8
f01112e4:	e8 83 fc fe ff       	call   f0100f6c <cprintf>
f01112e9:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A PARTIAL TEST FOR REALLOC******\n") ;
f01112ec:	83 ec 0c             	sub    $0xc,%esp
f01112ef:	68 00 93 12 f0       	push   $0xf0129300
f01112f4:	e8 73 fc fe ff       	call   f0100f6c <cprintf>
f01112f9:	83 c4 10             	add    $0x10,%esp
	cprintf("You need to pick-up the missing tests and test them\n") ;
f01112fc:	83 ec 0c             	sub    $0xc,%esp
f01112ff:	68 38 93 12 f0       	push   $0xf0129338
f0111304:	e8 63 fc fe ff       	call   f0100f6c <cprintf>
f0111309:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f011130c:	83 ec 0c             	sub    $0xc,%esp
f011130f:	68 c8 92 12 f0       	push   $0xf01292c8
f0111314:	e8 53 fc fe ff       	call   f0100f6c <cprintf>
f0111319:	83 c4 10             	add    $0x10,%esp

	//TODO: [PROJECT'24.MS1 - #09] [3] DYNAMIC ALLOCATOR - test_realloc_block_FF()
	//CHECK MISSING CASES AND TRY TO TEST THEM !

	panic("Test is under construction! will be announced later isA");
f011131c:	83 ec 04             	sub    $0x4,%esp
f011131f:	68 cc 80 12 f0       	push   $0xf01280cc
f0111324:	68 6b 03 00 00       	push   $0x36b
f0111329:	68 a8 79 12 f0       	push   $0xf01279a8
f011132e:	e8 e7 ef fe ff       	call   f010031a <_panic>

f0111333 <test_realloc_block_FF_COMPLETE>:

}


void test_realloc_block_FF_COMPLETE()
{
f0111333:	55                   	push   %ebp
f0111334:	89 e5                	mov    %esp,%ebp
f0111336:	83 ec 08             	sub    $0x8,%esp
#if USE_KHEAP
	panic("test_free_block: the kernel heap should be disabled. make sure USE_KHEAP = 0");
	return;
#endif

	panic("this is unseen test");
f0111339:	83 ec 04             	sub    $0x4,%esp
f011133c:	68 6d 93 12 f0       	push   $0xf012936d
f0111341:	68 77 03 00 00       	push   $0x377
f0111346:	68 a8 79 12 f0       	push   $0xf01279a8
f011134b:	e8 ca ef fe ff       	call   f010031a <_panic>

f0111350 <sys_check_LRU_lists>:
#include <kern/proc/user_environment.h>
#include <kern/mem/working_set_manager.h>

//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f0111350:	55                   	push   %ebp
f0111351:	89 e5                	mov    %esp,%ebp
f0111353:	83 ec 38             	sub    $0x38,%esp
	struct Env* cur_env = get_cpu_proc();
f0111356:	e8 15 94 ff ff       	call   f010a770 <get_cpu_proc>
f011135b:	89 45 e0             	mov    %eax,-0x20(%ebp)
	assert(cur_env != NULL);
f011135e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111362:	75 16                	jne    f011137a <sys_check_LRU_lists+0x2a>
f0111364:	68 84 93 12 f0       	push   $0xf0129384
f0111369:	68 94 93 12 f0       	push   $0xf0129394
f011136e:	6a 10                	push   $0x10
f0111370:	68 a9 93 12 f0       	push   $0xf01293a9
f0111375:	e8 a0 ef fe ff       	call   f010031a <_panic>
	cprintf("CURRENT WS CONTENT BEFORE CHECKING:\n");
f011137a:	83 ec 0c             	sub    $0xc,%esp
f011137d:	68 c8 93 12 f0       	push   $0xf01293c8
f0111382:	e8 e5 fb fe ff       	call   f0100f6c <cprintf>
f0111387:	83 c4 10             	add    $0x10,%esp
	env_page_ws_print(cur_env);
f011138a:	83 ec 0c             	sub    $0xc,%esp
f011138d:	ff 75 e0             	pushl  -0x20(%ebp)
f0111390:	e8 73 7c ff ff       	call   f0109008 <env_page_ws_print>
f0111395:	83 c4 10             	add    $0x10,%esp

	struct Env* env = cur_env;
f0111398:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011139b:	89 45 dc             	mov    %eax,-0x24(%ebp)
	int active_list_validation = 1;
f011139e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	int second_list_validation = 1;
f01113a5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f01113ac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01113b0:	0f 84 a5 00 00 00    	je     f011145b <sys_check_LRU_lists+0x10b>
	{
		int idx_active_list = 0;
f01113b6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f01113bd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01113c0:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f01113c6:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01113c9:	eb 4a                	jmp    f0111415 <sys_check_LRU_lists+0xc5>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f01113cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01113ce:	8b 00                	mov    (%eax),%eax
f01113d0:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01113d3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01113d6:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01113db:	89 c2                	mov    %eax,%edx
f01113dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01113e0:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f01113e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01113ea:	01 c8                	add    %ecx,%eax
f01113ec:	8b 00                	mov    (%eax),%eax
f01113ee:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f01113f1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01113f4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01113f9:	39 c2                	cmp    %eax,%edx
f01113fb:	74 09                	je     f0111406 <sys_check_LRU_lists+0xb6>
			{
				active_list_validation = 0;
f01113fd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				break;
f0111404:	eb 3e                	jmp    f0111444 <sys_check_LRU_lists+0xf4>
			}
			idx_active_list++;
f0111406:	ff 45 e8             	incl   -0x18(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0111409:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011140c:	8b 80 18 da 01 00    	mov    0x1da18(%eax),%eax
f0111412:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0111415:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0111419:	74 08                	je     f0111423 <sys_check_LRU_lists+0xd3>
f011141b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011141e:	8b 40 10             	mov    0x10(%eax),%eax
f0111421:	eb 05                	jmp    f0111428 <sys_check_LRU_lists+0xd8>
f0111423:	b8 00 00 00 00       	mov    $0x0,%eax
f0111428:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011142b:	89 82 18 da 01 00    	mov    %eax,0x1da18(%edx)
f0111431:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111434:	8b 80 18 da 01 00    	mov    0x1da18(%eax),%eax
f011143a:	85 c0                	test   %eax,%eax
f011143c:	75 8d                	jne    f01113cb <sys_check_LRU_lists+0x7b>
f011143e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0111442:	75 87                	jne    f01113cb <sys_check_LRU_lists+0x7b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f0111444:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111447:	8b 90 1c da 01 00    	mov    0x1da1c(%eax),%edx
f011144d:	8b 45 10             	mov    0x10(%ebp),%eax
f0111450:	39 c2                	cmp    %eax,%edx
f0111452:	74 07                	je     f011145b <sys_check_LRU_lists+0x10b>
		{
			active_list_validation = 0;
f0111454:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f011145b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f011145f:	0f 84 a5 00 00 00    	je     f011150a <sys_check_LRU_lists+0x1ba>
	{
		int idx_second_list = 0;
f0111465:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f011146c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011146f:	8b 80 20 da 01 00    	mov    0x1da20(%eax),%eax
f0111475:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0111478:	eb 4a                	jmp    f01114c4 <sys_check_LRU_lists+0x174>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f011147a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011147d:	8b 00                	mov    (%eax),%eax
f011147f:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0111482:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111485:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011148a:	89 c2                	mov    %eax,%edx
f011148c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011148f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111496:	8b 45 0c             	mov    0xc(%ebp),%eax
f0111499:	01 c8                	add    %ecx,%eax
f011149b:	8b 00                	mov    (%eax),%eax
f011149d:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01114a0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01114a3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01114a8:	39 c2                	cmp    %eax,%edx
f01114aa:	74 09                	je     f01114b5 <sys_check_LRU_lists+0x165>
			{
				second_list_validation = 0;
f01114ac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
				break;
f01114b3:	eb 3e                	jmp    f01114f3 <sys_check_LRU_lists+0x1a3>
			}
			idx_second_list++;
f01114b5:	ff 45 e4             	incl   -0x1c(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f01114b8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01114bb:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f01114c1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01114c4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01114c8:	74 08                	je     f01114d2 <sys_check_LRU_lists+0x182>
f01114ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01114cd:	8b 40 10             	mov    0x10(%eax),%eax
f01114d0:	eb 05                	jmp    f01114d7 <sys_check_LRU_lists+0x187>
f01114d2:	b8 00 00 00 00       	mov    $0x0,%eax
f01114d7:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01114da:	89 82 28 da 01 00    	mov    %eax,0x1da28(%edx)
f01114e0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01114e3:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f01114e9:	85 c0                	test   %eax,%eax
f01114eb:	75 8d                	jne    f011147a <sys_check_LRU_lists+0x12a>
f01114ed:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01114f1:	75 87                	jne    f011147a <sys_check_LRU_lists+0x12a>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f01114f3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01114f6:	8b 90 2c da 01 00    	mov    0x1da2c(%eax),%edx
f01114fc:	8b 45 14             	mov    0x14(%ebp),%eax
f01114ff:	39 c2                	cmp    %eax,%edx
f0111501:	74 07                	je     f011150a <sys_check_LRU_lists+0x1ba>
			second_list_validation = 0;
f0111503:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	}
	return active_list_validation&second_list_validation;
f011150a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011150d:	23 45 f0             	and    -0x10(%ebp),%eax
}
f0111510:	c9                   	leave  
f0111511:	c3                   	ret    

f0111512 <sys_check_LRU_lists_free>:


//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f0111512:	55                   	push   %ebp
f0111513:	89 e5                	mov    %esp,%ebp
f0111515:	83 ec 38             	sub    $0x38,%esp
	struct Env* cur_env = get_cpu_proc();
f0111518:	e8 53 92 ff ff       	call   f010a770 <get_cpu_proc>
f011151d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	assert(cur_env != NULL);
f0111520:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0111524:	75 16                	jne    f011153c <sys_check_LRU_lists_free+0x2a>
f0111526:	68 84 93 12 f0       	push   $0xf0129384
f011152b:	68 94 93 12 f0       	push   $0xf0129394
f0111530:	6a 45                	push   $0x45
f0111532:	68 a9 93 12 f0       	push   $0xf01293a9
f0111537:	e8 de ed fe ff       	call   f010031a <_panic>
	struct Env* env = cur_env;
f011153c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011153f:	89 45 e0             	mov    %eax,-0x20(%ebp)
	int list_validation_count = 0;
f0111542:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f0111549:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011154c:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f0111552:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0111555:	eb 65                	jmp    f01115bc <sys_check_LRU_lists_free+0xaa>
	{
		for(int var = 0; var < list_size; var++)
f0111557:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011155e:	eb 3a                	jmp    f011159a <sys_check_LRU_lists_free+0x88>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f0111560:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111563:	8b 00                	mov    (%eax),%eax
f0111565:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0111568:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011156b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111570:	89 c2                	mov    %eax,%edx
f0111572:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0111575:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011157c:	8b 45 08             	mov    0x8(%ebp),%eax
f011157f:	01 c8                	add    %ecx,%eax
f0111581:	8b 00                	mov    (%eax),%eax
f0111583:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0111586:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0111589:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011158e:	39 c2                	cmp    %eax,%edx
f0111590:	75 05                	jne    f0111597 <sys_check_LRU_lists_free+0x85>
			{
				list_validation_count++;
f0111592:	ff 45 f4             	incl   -0xc(%ebp)
				break;
f0111595:	eb 0b                	jmp    f01115a2 <sys_check_LRU_lists_free+0x90>
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f0111597:	ff 45 ec             	incl   -0x14(%ebp)
f011159a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011159d:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01115a0:	7c be                	jl     f0111560 <sys_check_LRU_lists_free+0x4e>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f01115a2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01115a6:	7e 08                	jle    f01115b0 <sys_check_LRU_lists_free+0x9e>
			return list_validation_count;
f01115a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01115ab:	e9 ed 00 00 00       	jmp    f011169d <sys_check_LRU_lists_free+0x18b>
	assert(cur_env != NULL);
	struct Env* env = cur_env;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;

	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f01115b0:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01115b3:	8b 80 18 da 01 00    	mov    0x1da18(%eax),%eax
f01115b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01115bc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01115c0:	74 08                	je     f01115ca <sys_check_LRU_lists_free+0xb8>
f01115c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01115c5:	8b 40 10             	mov    0x10(%eax),%eax
f01115c8:	eb 05                	jmp    f01115cf <sys_check_LRU_lists_free+0xbd>
f01115ca:	b8 00 00 00 00       	mov    $0x0,%eax
f01115cf:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01115d2:	89 82 18 da 01 00    	mov    %eax,0x1da18(%edx)
f01115d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01115db:	8b 80 18 da 01 00    	mov    0x1da18(%eax),%eax
f01115e1:	85 c0                	test   %eax,%eax
f01115e3:	0f 85 6e ff ff ff    	jne    f0111557 <sys_check_LRU_lists_free+0x45>
f01115e9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01115ed:	0f 85 64 ff ff ff    	jne    f0111557 <sys_check_LRU_lists_free+0x45>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f01115f3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01115f6:	8b 80 20 da 01 00    	mov    0x1da20(%eax),%eax
f01115fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01115ff:	eb 62                	jmp    f0111663 <sys_check_LRU_lists_free+0x151>
	{
		for(int var = 0; var < list_size; var++)
f0111601:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f0111608:	eb 3a                	jmp    f0111644 <sys_check_LRU_lists_free+0x132>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f011160a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011160d:	8b 00                	mov    (%eax),%eax
f011160f:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0111612:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0111615:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011161a:	89 c2                	mov    %eax,%edx
f011161c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011161f:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0111626:	8b 45 08             	mov    0x8(%ebp),%eax
f0111629:	01 c8                	add    %ecx,%eax
f011162b:	8b 00                	mov    (%eax),%eax
f011162d:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0111630:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111633:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0111638:	39 c2                	cmp    %eax,%edx
f011163a:	75 05                	jne    f0111641 <sys_check_LRU_lists_free+0x12f>
			{
				list_validation_count++;
f011163c:	ff 45 f4             	incl   -0xc(%ebp)
				break;
f011163f:	eb 0b                	jmp    f011164c <sys_check_LRU_lists_free+0x13a>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f0111641:	ff 45 e8             	incl   -0x18(%ebp)
f0111644:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0111647:	3b 45 0c             	cmp    0xc(%ebp),%eax
f011164a:	7c be                	jl     f011160a <sys_check_LRU_lists_free+0xf8>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f011164c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111650:	7e 05                	jle    f0111657 <sys_check_LRU_lists_free+0x145>
			return list_validation_count;
f0111652:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111655:	eb 46                	jmp    f011169d <sys_check_LRU_lists_free+0x18b>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f0111657:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011165a:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f0111660:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0111663:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111667:	74 08                	je     f0111671 <sys_check_LRU_lists_free+0x15f>
f0111669:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011166c:	8b 40 10             	mov    0x10(%eax),%eax
f011166f:	eb 05                	jmp    f0111676 <sys_check_LRU_lists_free+0x164>
f0111671:	b8 00 00 00 00       	mov    $0x0,%eax
f0111676:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0111679:	89 82 28 da 01 00    	mov    %eax,0x1da28(%edx)
f011167f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0111682:	8b 80 28 da 01 00    	mov    0x1da28(%eax),%eax
f0111688:	85 c0                	test   %eax,%eax
f011168a:	0f 85 71 ff ff ff    	jne    f0111601 <sys_check_LRU_lists_free+0xef>
f0111690:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0111694:	0f 85 67 ff ff ff    	jne    f0111601 <sys_check_LRU_lists_free+0xef>
			return list_validation_count;

	}


	return list_validation_count;
f011169a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f011169d:	c9                   	leave  
f011169e:	c3                   	ret    

f011169f <sys_check_WS_list>:
 * = 1: check entire list (order is important)
 * = 2: check only the existence of the given set of elements
 * = 3: check only the NOT existence of the given set of elements
 */
int sys_check_WS_list(uint32* WS_list_content, int actual_WS_list_size, uint32 last_WS_element_content, bool chk_status)
{
f011169f:	55                   	push   %ebp
f01116a0:	89 e5                	mov    %esp,%ebp
f01116a2:	83 ec 08             	sub    $0x8,%esp
		}
	}

	return WS_list_validation;
#else
	panic("sys_check_WS_list: this function is intended to be used when USE_KHEAP = 1");
f01116a5:	83 ec 04             	sub    $0x4,%esp
f01116a8:	68 f0 93 12 f0       	push   $0xf01293f0
f01116ad:	68 ea 00 00 00       	push   $0xea
f01116b2:	68 a9 93 12 f0       	push   $0xf01293a9
f01116b7:	e8 5e ec fe ff       	call   f010031a <_panic>

f01116bc <hasExpectedCommands>:
	cprintf("=================\n\n");
	return 0;
}*/

int hasExpectedCommands(char **expectedCommands, int commandsCount)
{
f01116bc:	55                   	push   %ebp
f01116bd:	89 e5                	mov    %esp,%ebp
f01116bf:	83 ec 18             	sub    $0x18,%esp
	struct Command *cmd = NULL;
f01116c2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (LIST_SIZE(&foundCommands) != commandsCount)
f01116c9:	8b 15 78 51 55 f0    	mov    0xf0555178,%edx
f01116cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01116d2:	39 c2                	cmp    %eax,%edx
f01116d4:	74 0a                	je     f01116e0 <hasExpectedCommands+0x24>
		return 0;
f01116d6:	b8 00 00 00 00       	mov    $0x0,%eax
f01116db:	e9 8b 00 00 00       	jmp    f011176b <hasExpectedCommands+0xaf>

	LIST_FOREACH(cmd, &foundCommands)
f01116e0:	a1 6c 51 55 f0       	mov    0xf055516c,%eax
f01116e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01116e8:	eb 55                	jmp    f011173f <hasExpectedCommands+0x83>
	{
		int i;
		for (i = 0; i < commandsCount; i++)
f01116ea:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01116f1:	eb 2a                	jmp    f011171d <hasExpectedCommands+0x61>
			if (strcmp(cmd->name, expectedCommands[i]) == 0)
f01116f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01116f6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01116fd:	8b 45 08             	mov    0x8(%ebp),%eax
f0111700:	01 d0                	add    %edx,%eax
f0111702:	8b 10                	mov    (%eax),%edx
f0111704:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111707:	8b 00                	mov    (%eax),%eax
f0111709:	83 ec 08             	sub    $0x8,%esp
f011170c:	52                   	push   %edx
f011170d:	50                   	push   %eax
f011170e:	e8 83 f2 00 00       	call   f0120996 <strcmp>
f0111713:	83 c4 10             	add    $0x10,%esp
f0111716:	85 c0                	test   %eax,%eax
f0111718:	74 0d                	je     f0111727 <hasExpectedCommands+0x6b>
		return 0;

	LIST_FOREACH(cmd, &foundCommands)
	{
		int i;
		for (i = 0; i < commandsCount; i++)
f011171a:	ff 45 f0             	incl   -0x10(%ebp)
f011171d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0111720:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0111723:	7c ce                	jl     f01116f3 <hasExpectedCommands+0x37>
f0111725:	eb 01                	jmp    f0111728 <hasExpectedCommands+0x6c>
			if (strcmp(cmd->name, expectedCommands[i]) == 0)
				break;
f0111727:	90                   	nop
		if (i == commandsCount)
f0111728:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011172b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f011172e:	75 07                	jne    f0111737 <hasExpectedCommands+0x7b>
			return 0;
f0111730:	b8 00 00 00 00       	mov    $0x0,%eax
f0111735:	eb 34                	jmp    f011176b <hasExpectedCommands+0xaf>
{
	struct Command *cmd = NULL;
	if (LIST_SIZE(&foundCommands) != commandsCount)
		return 0;

	LIST_FOREACH(cmd, &foundCommands)
f0111737:	a1 74 51 55 f0       	mov    0xf0555174,%eax
f011173c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011173f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111743:	74 08                	je     f011174d <hasExpectedCommands+0x91>
f0111745:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0111748:	8b 40 10             	mov    0x10(%eax),%eax
f011174b:	eb 05                	jmp    f0111752 <hasExpectedCommands+0x96>
f011174d:	b8 00 00 00 00       	mov    $0x0,%eax
f0111752:	a3 74 51 55 f0       	mov    %eax,0xf0555174
f0111757:	a1 74 51 55 f0       	mov    0xf0555174,%eax
f011175c:	85 c0                	test   %eax,%eax
f011175e:	75 8a                	jne    f01116ea <hasExpectedCommands+0x2e>
f0111760:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0111764:	75 84                	jne    f01116ea <hasExpectedCommands+0x2e>
			if (strcmp(cmd->name, expectedCommands[i]) == 0)
				break;
		if (i == commandsCount)
			return 0;
	}
	return 1;
f0111766:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011176b:	c9                   	leave  
f011176c:	c3                   	ret    

f011176d <getIndexOfCommand>:

int getIndexOfCommand(const char *commandName)
{
f011176d:	55                   	push   %ebp
f011176e:	89 e5                	mov    %esp,%ebp
f0111770:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0111773:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011177a:	eb 2e                	jmp    f01117aa <getIndexOfCommand+0x3d>
		if (strcmp(commands[i].name, commandName) == 0)
f011177c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011177f:	89 d0                	mov    %edx,%eax
f0111781:	01 c0                	add    %eax,%eax
f0111783:	01 d0                	add    %edx,%eax
f0111785:	c1 e0 03             	shl    $0x3,%eax
f0111788:	05 40 95 17 f0       	add    $0xf0179540,%eax
f011178d:	8b 00                	mov    (%eax),%eax
f011178f:	83 ec 08             	sub    $0x8,%esp
f0111792:	ff 75 08             	pushl  0x8(%ebp)
f0111795:	50                   	push   %eax
f0111796:	e8 fb f1 00 00       	call   f0120996 <strcmp>
f011179b:	83 c4 10             	add    $0x10,%esp
f011179e:	85 c0                	test   %eax,%eax
f01117a0:	75 05                	jne    f01117a7 <getIndexOfCommand+0x3a>
			return i;
f01117a2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01117a5:	eb 14                	jmp    f01117bb <getIndexOfCommand+0x4e>
}

int getIndexOfCommand(const char *commandName)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f01117a7:	ff 45 f4             	incl   -0xc(%ebp)
f01117aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01117ad:	a1 48 99 17 f0       	mov    0xf0179948,%eax
f01117b2:	39 c2                	cmp    %eax,%edx
f01117b4:	72 c6                	jb     f011177c <getIndexOfCommand+0xf>
		if (strcmp(commands[i].name, commandName) == 0)
			return i;
	return -404;
f01117b6:	b8 6c fe ff ff       	mov    $0xfffffe6c,%eax
}
f01117bb:	c9                   	leave  
f01117bc:	c3                   	ret    

f01117bd <TestAutoCompleteCommand>:

int TestAutoCompleteCommand()
{
f01117bd:	55                   	push   %ebp
f01117be:	89 e5                	mov    %esp,%ebp
f01117c0:	57                   	push   %edi
f01117c1:	56                   	push   %esi
f01117c2:	53                   	push   %ebx
f01117c3:	81 ec 9c 00 00 00    	sub    $0x9c,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f01117c9:	83 ec 0c             	sub    $0xc,%esp
f01117cc:	68 40 94 12 f0       	push   $0xf0129440
f01117d1:	e8 96 f7 fe ff       	call   f0100f6c <cprintf>
f01117d6:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f01117d9:	83 ec 0c             	sub    $0xc,%esp
f01117dc:	68 64 94 12 f0       	push   $0xf0129464
f01117e1:	e8 86 f7 fe ff       	call   f0100f6c <cprintf>
f01117e6:	83 c4 10             	add    $0x10,%esp

	// CASE1: command is found with correct number of arguments
	int eval = 0;
f01117e9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	char *args1[] = {"kernel_info"};
f01117f0:	c7 45 8c 7f 94 12 f0 	movl   $0xf012947f,-0x74(%ebp)
	int ret = process_command(ARRAY_LENGTH(args1), args1);
f01117f7:	83 ec 08             	sub    $0x8,%esp
f01117fa:	8d 45 8c             	lea    -0x74(%ebp),%eax
f01117fd:	50                   	push   %eax
f01117fe:	6a 01                	push   $0x1
f0111800:	e8 ac 09 ff ff       	call   f01021b1 <process_command>
f0111805:	83 c4 10             	add    $0x10,%esp
f0111808:	89 45 e0             	mov    %eax,-0x20(%ebp)
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f011180b:	83 ec 0c             	sub    $0xc,%esp
f011180e:	68 8c 94 12 f0       	push   $0xf012948c
f0111813:	e8 54 f7 fe ff       	call   f0100f6c <cprintf>
f0111818:	83 c4 10             	add    $0x10,%esp
	if (ret == getIndexOfCommand(args1[0]) && LIST_EMPTY(&foundCommands))
f011181b:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011181e:	83 ec 0c             	sub    $0xc,%esp
f0111821:	50                   	push   %eax
f0111822:	e8 46 ff ff ff       	call   f011176d <getIndexOfCommand>
f0111827:	83 c4 10             	add    $0x10,%esp
f011182a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011182d:	75 0f                	jne    f011183e <TestAutoCompleteCommand+0x81>
f011182f:	a1 6c 51 55 f0       	mov    0xf055516c,%eax
f0111834:	85 c0                	test   %eax,%eax
f0111836:	75 06                	jne    f011183e <TestAutoCompleteCommand+0x81>
		eval += 15;
f0111838:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
f011183c:	eb 10                	jmp    f011184e <TestAutoCompleteCommand+0x91>
	else
		cprintf("#1: WRONG - process_command return wrong value or foundCommands is not empty.\n");
f011183e:	83 ec 0c             	sub    $0xc,%esp
f0111841:	68 bc 94 12 f0       	push   $0xf01294bc
f0111846:	e8 21 f7 fe ff       	call   f0100f6c <cprintf>
f011184b:	83 c4 10             	add    $0x10,%esp

	// CASE2: command is not found BUT its chars are subsequence-matched with one or more commands
	// should print the commands that contains "clk" as subsequence
	cprintf("==>Testing now AUTOCOMPLETE for: clk\n");
f011184e:	83 ec 0c             	sub    $0xc,%esp
f0111851:	68 0c 95 12 f0       	push   $0xf012950c
f0111856:	e8 11 f7 fe ff       	call   f0100f6c <cprintf>
f011185b:	83 c4 10             	add    $0x10,%esp
	char *args2[] = {"clk"};
f011185e:	c7 45 88 32 95 12 f0 	movl   $0xf0129532,-0x78(%ebp)
	ret = process_command(ARRAY_LENGTH(args2), args2);
f0111865:	83 ec 08             	sub    $0x8,%esp
f0111868:	8d 45 88             	lea    -0x78(%ebp),%eax
f011186b:	50                   	push   %eax
f011186c:	6a 01                	push   $0x1
f011186e:	e8 3e 09 ff ff       	call   f01021b1 <process_command>
f0111873:	83 c4 10             	add    $0x10,%esp
f0111876:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == CMD_MATCHED && hasExpectedCommands((char *[]){"clock", "modifiedclock", "nclock"}, 3))
f0111879:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f011187d:	75 30                	jne    f01118af <TestAutoCompleteCommand+0xf2>
f011187f:	8d 45 90             	lea    -0x70(%ebp),%eax
f0111882:	bb 10 99 12 f0       	mov    $0xf0129910,%ebx
f0111887:	ba 03 00 00 00       	mov    $0x3,%edx
f011188c:	89 c7                	mov    %eax,%edi
f011188e:	89 de                	mov    %ebx,%esi
f0111890:	89 d1                	mov    %edx,%ecx
f0111892:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0111894:	83 ec 08             	sub    $0x8,%esp
f0111897:	6a 03                	push   $0x3
f0111899:	8d 45 90             	lea    -0x70(%ebp),%eax
f011189c:	50                   	push   %eax
f011189d:	e8 1a fe ff ff       	call   f01116bc <hasExpectedCommands>
f01118a2:	83 c4 10             	add    $0x10,%esp
f01118a5:	85 c0                	test   %eax,%eax
f01118a7:	74 06                	je     f01118af <TestAutoCompleteCommand+0xf2>
		eval += 15;
f01118a9:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
f01118ad:	eb 10                	jmp    f01118bf <TestAutoCompleteCommand+0x102>
	else
		cprintf("#2: WRONG - process_command return wrong value or foundCommands is not empty.\n");
f01118af:	83 ec 0c             	sub    $0xc,%esp
f01118b2:	68 38 95 12 f0       	push   $0xf0129538
f01118b7:	e8 b0 f6 fe ff       	call   f0100f6c <cprintf>
f01118bc:	83 c4 10             	add    $0x10,%esp

	// CASE3: should print invalid number of args
	cprintf("==>Testing now AUTOCOMPLETE for: wm\n");
f01118bf:	83 ec 0c             	sub    $0xc,%esp
f01118c2:	68 88 95 12 f0       	push   $0xf0129588
f01118c7:	e8 a0 f6 fe ff       	call   f0100f6c <cprintf>
f01118cc:	83 c4 10             	add    $0x10,%esp
	char *args3[] = {"wm"};
f01118cf:	c7 45 84 ad 95 12 f0 	movl   $0xf01295ad,-0x7c(%ebp)
	cprintf("va of args3 = %x, *args3 = %x\n", args3, *args3);
f01118d6:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01118d9:	83 ec 04             	sub    $0x4,%esp
f01118dc:	50                   	push   %eax
f01118dd:	8d 45 84             	lea    -0x7c(%ebp),%eax
f01118e0:	50                   	push   %eax
f01118e1:	68 b0 95 12 f0       	push   $0xf01295b0
f01118e6:	e8 81 f6 fe ff       	call   f0100f6c <cprintf>
f01118eb:	83 c4 10             	add    $0x10,%esp
	ret = process_command(ARRAY_LENGTH(args3), args3);
f01118ee:	83 ec 08             	sub    $0x8,%esp
f01118f1:	8d 45 84             	lea    -0x7c(%ebp),%eax
f01118f4:	50                   	push   %eax
f01118f5:	6a 01                	push   $0x1
f01118f7:	e8 b5 08 ff ff       	call   f01021b1 <process_command>
f01118fc:	83 c4 10             	add    $0x10,%esp
f01118ff:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == CMD_INV_NUM_ARGS && hasExpectedCommands(args3, 1))
f0111902:	83 7d e0 fe          	cmpl   $0xfffffffe,-0x20(%ebp)
f0111906:	75 1b                	jne    f0111923 <TestAutoCompleteCommand+0x166>
f0111908:	83 ec 08             	sub    $0x8,%esp
f011190b:	6a 01                	push   $0x1
f011190d:	8d 45 84             	lea    -0x7c(%ebp),%eax
f0111910:	50                   	push   %eax
f0111911:	e8 a6 fd ff ff       	call   f01116bc <hasExpectedCommands>
f0111916:	83 c4 10             	add    $0x10,%esp
f0111919:	85 c0                	test   %eax,%eax
f011191b:	74 06                	je     f0111923 <TestAutoCompleteCommand+0x166>
		eval += 15;
f011191d:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
f0111921:	eb 10                	jmp    f0111933 <TestAutoCompleteCommand+0x176>
	else
		cprintf("#3: WRONG - process_command return wrong value or foundCommands contains wrong values.\n");
f0111923:	83 ec 0c             	sub    $0xc,%esp
f0111926:	68 d0 95 12 f0       	push   $0xf01295d0
f011192b:	e8 3c f6 fe ff       	call   f0100f6c <cprintf>
f0111930:	83 c4 10             	add    $0x10,%esp

	// CASE4: should print invalid command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f0111933:	83 ec 0c             	sub    $0xc,%esp
f0111936:	68 28 96 12 f0       	push   $0xf0129628
f011193b:	e8 2c f6 fe ff       	call   f0100f6c <cprintf>
f0111940:	83 c4 10             	add    $0x10,%esp
	char *args4[] = {"smm"};
f0111943:	c7 45 80 4e 96 12 f0 	movl   $0xf012964e,-0x80(%ebp)
	ret = process_command(ARRAY_LENGTH(args4), args4);
f011194a:	83 ec 08             	sub    $0x8,%esp
f011194d:	8d 45 80             	lea    -0x80(%ebp),%eax
f0111950:	50                   	push   %eax
f0111951:	6a 01                	push   $0x1
f0111953:	e8 59 08 ff ff       	call   f01021b1 <process_command>
f0111958:	83 c4 10             	add    $0x10,%esp
f011195b:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == CMD_INVALID && LIST_SIZE(&foundCommands) == 0)
f011195e:	83 7d e0 fd          	cmpl   $0xfffffffd,-0x20(%ebp)
f0111962:	75 0f                	jne    f0111973 <TestAutoCompleteCommand+0x1b6>
f0111964:	a1 78 51 55 f0       	mov    0xf0555178,%eax
f0111969:	85 c0                	test   %eax,%eax
f011196b:	75 06                	jne    f0111973 <TestAutoCompleteCommand+0x1b6>
		eval += 15;
f011196d:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
f0111971:	eb 10                	jmp    f0111983 <TestAutoCompleteCommand+0x1c6>
	else
		cprintf("#4: WRONG - process_command return wrong value or foundCommands is not empty.\n");
f0111973:	83 ec 0c             	sub    $0xc,%esp
f0111976:	68 54 96 12 f0       	push   $0xf0129654
f011197b:	e8 ec f5 fe ff       	call   f0100f6c <cprintf>
f0111980:	83 c4 10             	add    $0x10,%esp

	// CASE5: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f0111983:	83 ec 0c             	sub    $0xc,%esp
f0111986:	68 a4 96 12 f0       	push   $0xf01296a4
f011198b:	e8 dc f5 fe ff       	call   f0100f6c <cprintf>
f0111990:	83 c4 10             	add    $0x10,%esp
	char *args5[] = {"he"};
f0111993:	c7 85 7c ff ff ff c9 	movl   $0xf01296c9,-0x84(%ebp)
f011199a:	96 12 f0 
	ret = process_command(ARRAY_LENGTH(args5), args5);
f011199d:	83 ec 08             	sub    $0x8,%esp
f01119a0:	8d 85 7c ff ff ff    	lea    -0x84(%ebp),%eax
f01119a6:	50                   	push   %eax
f01119a7:	6a 01                	push   $0x1
f01119a9:	e8 03 08 ff ff       	call   f01021b1 <process_command>
f01119ae:	83 c4 10             	add    $0x10,%esp
f01119b1:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == CMD_MATCHED && hasExpectedCommands((char *[]){"help", "sched?", "uhbestfit", "uhnextfit", "uheap?", "khbestfit", "khnextfit", "kheap?", "schedRR", "schedTest", "schedBSD", "schedMLFQ"}, 12))
f01119b4:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f01119b8:	75 30                	jne    f01119ea <TestAutoCompleteCommand+0x22d>
f01119ba:	8d 45 9c             	lea    -0x64(%ebp),%eax
f01119bd:	bb a0 99 12 f0       	mov    $0xf01299a0,%ebx
f01119c2:	ba 0c 00 00 00       	mov    $0xc,%edx
f01119c7:	89 c7                	mov    %eax,%edi
f01119c9:	89 de                	mov    %ebx,%esi
f01119cb:	89 d1                	mov    %edx,%ecx
f01119cd:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01119cf:	83 ec 08             	sub    $0x8,%esp
f01119d2:	6a 0c                	push   $0xc
f01119d4:	8d 45 9c             	lea    -0x64(%ebp),%eax
f01119d7:	50                   	push   %eax
f01119d8:	e8 df fc ff ff       	call   f01116bc <hasExpectedCommands>
f01119dd:	83 c4 10             	add    $0x10,%esp
f01119e0:	85 c0                	test   %eax,%eax
f01119e2:	74 06                	je     f01119ea <TestAutoCompleteCommand+0x22d>
		eval += 10;
f01119e4:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
f01119e8:	eb 10                	jmp    f01119fa <TestAutoCompleteCommand+0x23d>
	else
		cprintf("#5: WRONG - process_command return wrong value or foundCommands is has wrong values.\n");
f01119ea:	83 ec 0c             	sub    $0xc,%esp
f01119ed:	68 cc 96 12 f0       	push   $0xf01296cc
f01119f2:	e8 75 f5 fe ff       	call   f0100f6c <cprintf>
f01119f7:	83 c4 10             	add    $0x10,%esp

	// CASE6: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f01119fa:	83 ec 0c             	sub    $0xc,%esp
f01119fd:	68 24 97 12 f0       	push   $0xf0129724
f0111a02:	e8 65 f5 fe ff       	call   f0100f6c <cprintf>
f0111a07:	83 c4 10             	add    $0x10,%esp
	char *args6[] = {"ru"};
f0111a0a:	c7 85 78 ff ff ff 49 	movl   $0xf0129749,-0x88(%ebp)
f0111a11:	97 12 f0 
	ret = process_command(ARRAY_LENGTH(args6), args6);
f0111a14:	83 ec 08             	sub    $0x8,%esp
f0111a17:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
f0111a1d:	50                   	push   %eax
f0111a1e:	6a 01                	push   $0x1
f0111a20:	e8 8c 07 ff ff       	call   f01021b1 <process_command>
f0111a25:	83 c4 10             	add    $0x10,%esp
f0111a28:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == CMD_MATCHED && hasExpectedCommands((char *[]){"runall", "lru", "rub", "run", "rum"}, 5))
f0111a2b:	83 7d e0 ff          	cmpl   $0xffffffff,-0x20(%ebp)
f0111a2f:	75 30                	jne    f0111a61 <TestAutoCompleteCommand+0x2a4>
f0111a31:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0111a34:	bb e8 99 12 f0       	mov    $0xf01299e8,%ebx
f0111a39:	ba 05 00 00 00       	mov    $0x5,%edx
f0111a3e:	89 c7                	mov    %eax,%edi
f0111a40:	89 de                	mov    %ebx,%esi
f0111a42:	89 d1                	mov    %edx,%ecx
f0111a44:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0111a46:	83 ec 08             	sub    $0x8,%esp
f0111a49:	6a 05                	push   $0x5
f0111a4b:	8d 45 cc             	lea    -0x34(%ebp),%eax
f0111a4e:	50                   	push   %eax
f0111a4f:	e8 68 fc ff ff       	call   f01116bc <hasExpectedCommands>
f0111a54:	83 c4 10             	add    $0x10,%esp
f0111a57:	85 c0                	test   %eax,%eax
f0111a59:	74 06                	je     f0111a61 <TestAutoCompleteCommand+0x2a4>
		eval += 10;
f0111a5b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
f0111a5f:	eb 10                	jmp    f0111a71 <TestAutoCompleteCommand+0x2b4>
	else
		cprintf("#6: WRONG - process_command return wrong value. or foundCommands is has wrong values.\n");
f0111a61:	83 ec 0c             	sub    $0xc,%esp
f0111a64:	68 4c 97 12 f0       	push   $0xf012974c
f0111a69:	e8 fe f4 fe ff       	call   f0100f6c <cprintf>
f0111a6e:	83 c4 10             	add    $0x10,%esp

	// CASE7: command is found with correct number of arguments
	cprintf("==>Testing now AUTOCOMPLETE for: load game\n");
f0111a71:	83 ec 0c             	sub    $0xc,%esp
f0111a74:	68 a4 97 12 f0       	push   $0xf01297a4
f0111a79:	e8 ee f4 fe ff       	call   f0100f6c <cprintf>
f0111a7e:	83 c4 10             	add    $0x10,%esp
	char *args7[] = {"load", "game"};
f0111a81:	c7 85 70 ff ff ff d0 	movl   $0xf01297d0,-0x90(%ebp)
f0111a88:	97 12 f0 
f0111a8b:	c7 85 74 ff ff ff d5 	movl   $0xf01297d5,-0x8c(%ebp)
f0111a92:	97 12 f0 
	ret = process_command(ARRAY_LENGTH(args7), args7);
f0111a95:	83 ec 08             	sub    $0x8,%esp
f0111a98:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f0111a9e:	50                   	push   %eax
f0111a9f:	6a 02                	push   $0x2
f0111aa1:	e8 0b 07 ff ff       	call   f01021b1 <process_command>
f0111aa6:	83 c4 10             	add    $0x10,%esp
f0111aa9:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == getIndexOfCommand(args7[0]) && LIST_EMPTY(&foundCommands))
f0111aac:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0111ab2:	83 ec 0c             	sub    $0xc,%esp
f0111ab5:	50                   	push   %eax
f0111ab6:	e8 b2 fc ff ff       	call   f011176d <getIndexOfCommand>
f0111abb:	83 c4 10             	add    $0x10,%esp
f0111abe:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0111ac1:	75 0f                	jne    f0111ad2 <TestAutoCompleteCommand+0x315>
f0111ac3:	a1 6c 51 55 f0       	mov    0xf055516c,%eax
f0111ac8:	85 c0                	test   %eax,%eax
f0111aca:	75 06                	jne    f0111ad2 <TestAutoCompleteCommand+0x315>
		eval += 10;
f0111acc:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
f0111ad0:	eb 10                	jmp    f0111ae2 <TestAutoCompleteCommand+0x325>
	else
		cprintf("#7: WRONG - process_command return wrong value or foundCommands is not empty.\n");
f0111ad2:	83 ec 0c             	sub    $0xc,%esp
f0111ad5:	68 dc 97 12 f0       	push   $0xf01297dc
f0111ada:	e8 8d f4 fe ff       	call   f0100f6c <cprintf>
f0111adf:	83 c4 10             	add    $0x10,%esp

	// CASE8: command is found with correct number of arguments
	cprintf("==>Testing now AUTOCOMPLETE for: wum 0xF0000000 M\n");
f0111ae2:	83 ec 0c             	sub    $0xc,%esp
f0111ae5:	68 2c 98 12 f0       	push   $0xf012982c
f0111aea:	e8 7d f4 fe ff       	call   f0100f6c <cprintf>
f0111aef:	83 c4 10             	add    $0x10,%esp
	char *args8[] = {"wum", "0xF0000000", "M"};
f0111af2:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f0111af8:	bb 10 9a 12 f0       	mov    $0xf0129a10,%ebx
f0111afd:	ba 03 00 00 00       	mov    $0x3,%edx
f0111b02:	89 c7                	mov    %eax,%edi
f0111b04:	89 de                	mov    %ebx,%esi
f0111b06:	89 d1                	mov    %edx,%ecx
f0111b08:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	ret = process_command(ARRAY_LENGTH(args8), args8);
f0111b0a:	83 ec 08             	sub    $0x8,%esp
f0111b0d:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f0111b13:	50                   	push   %eax
f0111b14:	6a 03                	push   $0x3
f0111b16:	e8 96 06 ff ff       	call   f01021b1 <process_command>
f0111b1b:	83 c4 10             	add    $0x10,%esp
f0111b1e:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (ret == getIndexOfCommand(args8[0]) && LIST_EMPTY(&foundCommands))
f0111b21:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0111b27:	83 ec 0c             	sub    $0xc,%esp
f0111b2a:	50                   	push   %eax
f0111b2b:	e8 3d fc ff ff       	call   f011176d <getIndexOfCommand>
f0111b30:	83 c4 10             	add    $0x10,%esp
f0111b33:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0111b36:	75 0f                	jne    f0111b47 <TestAutoCompleteCommand+0x38a>
f0111b38:	a1 6c 51 55 f0       	mov    0xf055516c,%eax
f0111b3d:	85 c0                	test   %eax,%eax
f0111b3f:	75 06                	jne    f0111b47 <TestAutoCompleteCommand+0x38a>
		eval += 10;
f0111b41:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
f0111b45:	eb 10                	jmp    f0111b57 <TestAutoCompleteCommand+0x39a>
	else
		cprintf("#8: WRONG - process_command return wrong value or foundCommands is not empty.\n");
f0111b47:	83 ec 0c             	sub    $0xc,%esp
f0111b4a:	68 60 98 12 f0       	push   $0xf0129860
f0111b4f:	e8 18 f4 fe ff       	call   f0100f6c <cprintf>
f0111b54:	83 c4 10             	add    $0x10,%esp

	cprintf("test autocomplete completed. Evaluation = %d%%\n", eval);
f0111b57:	83 ec 08             	sub    $0x8,%esp
f0111b5a:	ff 75 e4             	pushl  -0x1c(%ebp)
f0111b5d:	68 b0 98 12 f0       	push   $0xf01298b0
f0111b62:	e8 05 f4 fe ff       	call   f0100f6c <cprintf>
f0111b67:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111b6a:	83 ec 0c             	sub    $0xc,%esp
f0111b6d:	68 e0 98 12 f0       	push   $0xf01298e0
f0111b72:	e8 f5 f3 fe ff       	call   f0100f6c <cprintf>
f0111b77:	83 c4 10             	add    $0x10,%esp

	return 0;
f0111b7a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111b7f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111b82:	5b                   	pop    %ebx
f0111b83:	5e                   	pop    %esi
f0111b84:	5f                   	pop    %edi
f0111b85:	5d                   	pop    %ebp
f0111b86:	c3                   	ret    

f0111b87 <test_str2lower_function>:

int test_str2lower_function()
{
f0111b87:	55                   	push   %ebp
f0111b88:	89 e5                	mov    %esp,%ebp
f0111b8a:	81 ec f8 02 00 00    	sub    $0x2f8,%esp
	cprintf("Automatic Testing of str2lower:\n");
f0111b90:	83 ec 0c             	sub    $0xc,%esp
f0111b93:	68 1c 9a 12 f0       	push   $0xf0129a1c
f0111b98:	e8 cf f3 fe ff       	call   f0100f6c <cprintf>
f0111b9d:	83 c4 10             	add    $0x10,%esp
	cprintf("========================\n");
f0111ba0:	83 ec 0c             	sub    $0xc,%esp
f0111ba3:	68 3d 9a 12 f0       	push   $0xf0129a3d
f0111ba8:	e8 bf f3 fe ff       	call   f0100f6c <cprintf>
f0111bad:	83 c4 10             	add    $0x10,%esp
	int i = 0;
f0111bb0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	int eval = 0;
f0111bb7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	// CASE1: input string in lower case
	const char *src1 = "HelloWorld";
f0111bbe:	c7 45 ec 57 9a 12 f0 	movl   $0xf0129a57,-0x14(%ebp)
	char dst1[100];
	char *result = str2lower(dst1, src1);
f0111bc5:	83 ec 08             	sub    $0x8,%esp
f0111bc8:	ff 75 ec             	pushl  -0x14(%ebp)
f0111bcb:	8d 85 68 ff ff ff    	lea    -0x98(%ebp),%eax
f0111bd1:	50                   	push   %eax
f0111bd2:	e8 9c f3 00 00       	call   f0120f73 <str2lower>
f0111bd7:	83 c4 10             	add    $0x10,%esp
f0111bda:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int resultLength = strlen(result);
f0111bdd:	83 ec 0c             	sub    $0xc,%esp
f0111be0:	ff 75 e8             	pushl  -0x18(%ebp)
f0111be3:	e8 a2 ec 00 00       	call   f012088a <strlen>
f0111be8:	83 c4 10             	add    $0x10,%esp
f0111beb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "helloworld") != 0 || resultLength != strlen(src1))
f0111bee:	83 ec 08             	sub    $0x8,%esp
f0111bf1:	68 62 9a 12 f0       	push   $0xf0129a62
f0111bf6:	ff 75 e8             	pushl  -0x18(%ebp)
f0111bf9:	e8 98 ed 00 00       	call   f0120996 <strcmp>
f0111bfe:	83 c4 10             	add    $0x10,%esp
f0111c01:	85 c0                	test   %eax,%eax
f0111c03:	75 13                	jne    f0111c18 <test_str2lower_function+0x91>
f0111c05:	83 ec 0c             	sub    $0xc,%esp
f0111c08:	ff 75 ec             	pushl  -0x14(%ebp)
f0111c0b:	e8 7a ec 00 00       	call   f012088a <strlen>
f0111c10:	83 c4 10             	add    $0x10,%esp
f0111c13:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0111c16:	74 15                	je     f0111c2d <test_str2lower_function+0xa6>
		cprintf("str2lower #1: WRONG - str2lower return wrong value or length. Expected \"helloworld\", Actual \"%s\"\n", result);
f0111c18:	83 ec 08             	sub    $0x8,%esp
f0111c1b:	ff 75 e8             	pushl  -0x18(%ebp)
f0111c1e:	68 70 9a 12 f0       	push   $0xf0129a70
f0111c23:	e8 44 f3 fe ff       	call   f0100f6c <cprintf>
f0111c28:	83 c4 10             	add    $0x10,%esp
f0111c2b:	eb 04                	jmp    f0111c31 <test_str2lower_function+0xaa>
	else
		eval += 10;
f0111c2d:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	// CASE2: input string is empty
	const char *src2 = "";
f0111c31:	c7 45 e0 d2 9a 12 f0 	movl   $0xf0129ad2,-0x20(%ebp)
	char dst2[100];
	result = str2lower(dst2, src2);
f0111c38:	83 ec 08             	sub    $0x8,%esp
f0111c3b:	ff 75 e0             	pushl  -0x20(%ebp)
f0111c3e:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111c44:	50                   	push   %eax
f0111c45:	e8 29 f3 00 00       	call   f0120f73 <str2lower>
f0111c4a:	83 c4 10             	add    $0x10,%esp
f0111c4d:	89 45 e8             	mov    %eax,-0x18(%ebp)
	resultLength = strlen(result);
f0111c50:	83 ec 0c             	sub    $0xc,%esp
f0111c53:	ff 75 e8             	pushl  -0x18(%ebp)
f0111c56:	e8 2f ec 00 00       	call   f012088a <strlen>
f0111c5b:	83 c4 10             	add    $0x10,%esp
f0111c5e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "") != 0 || resultLength != strlen(src2))
f0111c61:	83 ec 08             	sub    $0x8,%esp
f0111c64:	68 d2 9a 12 f0       	push   $0xf0129ad2
f0111c69:	ff 75 e8             	pushl  -0x18(%ebp)
f0111c6c:	e8 25 ed 00 00       	call   f0120996 <strcmp>
f0111c71:	83 c4 10             	add    $0x10,%esp
f0111c74:	85 c0                	test   %eax,%eax
f0111c76:	75 13                	jne    f0111c8b <test_str2lower_function+0x104>
f0111c78:	83 ec 0c             	sub    $0xc,%esp
f0111c7b:	ff 75 e0             	pushl  -0x20(%ebp)
f0111c7e:	e8 07 ec 00 00       	call   f012088a <strlen>
f0111c83:	83 c4 10             	add    $0x10,%esp
f0111c86:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0111c89:	74 15                	je     f0111ca0 <test_str2lower_function+0x119>
		cprintf("str2lower #2: WRONG - str2lower return wrong value or length. Expected \"\", Actual \"%s\"\n", result);
f0111c8b:	83 ec 08             	sub    $0x8,%esp
f0111c8e:	ff 75 e8             	pushl  -0x18(%ebp)
f0111c91:	68 d4 9a 12 f0       	push   $0xf0129ad4
f0111c96:	e8 d1 f2 fe ff       	call   f0100f6c <cprintf>
f0111c9b:	83 c4 10             	add    $0x10,%esp
f0111c9e:	eb 04                	jmp    f0111ca4 <test_str2lower_function+0x11d>
	else
		eval += 10;
f0111ca0:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	// CASE3: input string is Only special characters
	const char *src3 = "!@#$%%^&*()";
f0111ca4:	c7 45 dc 2c 9b 12 f0 	movl   $0xf0129b2c,-0x24(%ebp)
	char dst3[100];
	result = str2lower(dst3, src3);
f0111cab:	83 ec 08             	sub    $0x8,%esp
f0111cae:	ff 75 dc             	pushl  -0x24(%ebp)
f0111cb1:	8d 85 a0 fe ff ff    	lea    -0x160(%ebp),%eax
f0111cb7:	50                   	push   %eax
f0111cb8:	e8 b6 f2 00 00       	call   f0120f73 <str2lower>
f0111cbd:	83 c4 10             	add    $0x10,%esp
f0111cc0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	resultLength = strlen(result);
f0111cc3:	83 ec 0c             	sub    $0xc,%esp
f0111cc6:	ff 75 e8             	pushl  -0x18(%ebp)
f0111cc9:	e8 bc eb 00 00       	call   f012088a <strlen>
f0111cce:	83 c4 10             	add    $0x10,%esp
f0111cd1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "!@#$%%^&*()") != 0 || resultLength != strlen(src3))
f0111cd4:	83 ec 08             	sub    $0x8,%esp
f0111cd7:	68 2c 9b 12 f0       	push   $0xf0129b2c
f0111cdc:	ff 75 e8             	pushl  -0x18(%ebp)
f0111cdf:	e8 b2 ec 00 00       	call   f0120996 <strcmp>
f0111ce4:	83 c4 10             	add    $0x10,%esp
f0111ce7:	85 c0                	test   %eax,%eax
f0111ce9:	75 13                	jne    f0111cfe <test_str2lower_function+0x177>
f0111ceb:	83 ec 0c             	sub    $0xc,%esp
f0111cee:	ff 75 dc             	pushl  -0x24(%ebp)
f0111cf1:	e8 94 eb 00 00       	call   f012088a <strlen>
f0111cf6:	83 c4 10             	add    $0x10,%esp
f0111cf9:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0111cfc:	74 15                	je     f0111d13 <test_str2lower_function+0x18c>
		cprintf("str2lower #3: WRONG - str2lower return wrong value or length. Expected \"!@#$%%^&*()\", Actual \"%s\"\n", result);
f0111cfe:	83 ec 08             	sub    $0x8,%esp
f0111d01:	ff 75 e8             	pushl  -0x18(%ebp)
f0111d04:	68 38 9b 12 f0       	push   $0xf0129b38
f0111d09:	e8 5e f2 fe ff       	call   f0100f6c <cprintf>
f0111d0e:	83 c4 10             	add    $0x10,%esp
f0111d11:	eb 04                	jmp    f0111d17 <test_str2lower_function+0x190>
	else
		eval += 15;
f0111d13:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)

	// CASE4: input string is only numbers
	const char *src4 = "1234567890";
f0111d17:	c7 45 d8 9b 9b 12 f0 	movl   $0xf0129b9b,-0x28(%ebp)
	char dst4[100];
	result = str2lower(dst4, src4);
f0111d1e:	83 ec 08             	sub    $0x8,%esp
f0111d21:	ff 75 d8             	pushl  -0x28(%ebp)
f0111d24:	8d 85 3c fe ff ff    	lea    -0x1c4(%ebp),%eax
f0111d2a:	50                   	push   %eax
f0111d2b:	e8 43 f2 00 00       	call   f0120f73 <str2lower>
f0111d30:	83 c4 10             	add    $0x10,%esp
f0111d33:	89 45 e8             	mov    %eax,-0x18(%ebp)
	resultLength = strlen(result);
f0111d36:	83 ec 0c             	sub    $0xc,%esp
f0111d39:	ff 75 e8             	pushl  -0x18(%ebp)
f0111d3c:	e8 49 eb 00 00       	call   f012088a <strlen>
f0111d41:	83 c4 10             	add    $0x10,%esp
f0111d44:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "1234567890") != 0 || resultLength != strlen(src4))
f0111d47:	83 ec 08             	sub    $0x8,%esp
f0111d4a:	68 9b 9b 12 f0       	push   $0xf0129b9b
f0111d4f:	ff 75 e8             	pushl  -0x18(%ebp)
f0111d52:	e8 3f ec 00 00       	call   f0120996 <strcmp>
f0111d57:	83 c4 10             	add    $0x10,%esp
f0111d5a:	85 c0                	test   %eax,%eax
f0111d5c:	75 13                	jne    f0111d71 <test_str2lower_function+0x1ea>
f0111d5e:	83 ec 0c             	sub    $0xc,%esp
f0111d61:	ff 75 d8             	pushl  -0x28(%ebp)
f0111d64:	e8 21 eb 00 00       	call   f012088a <strlen>
f0111d69:	83 c4 10             	add    $0x10,%esp
f0111d6c:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0111d6f:	74 15                	je     f0111d86 <test_str2lower_function+0x1ff>
		cprintf("str2lower #4: WRONG - str2lower return wrong value or length. Expected \"1234567890\", Actual \"%s\"\n", result);
f0111d71:	83 ec 08             	sub    $0x8,%esp
f0111d74:	ff 75 e8             	pushl  -0x18(%ebp)
f0111d77:	68 a8 9b 12 f0       	push   $0xf0129ba8
f0111d7c:	e8 eb f1 fe ff       	call   f0100f6c <cprintf>
f0111d81:	83 c4 10             	add    $0x10,%esp
f0111d84:	eb 04                	jmp    f0111d8a <test_str2lower_function+0x203>
	else
		eval += 15;
f0111d86:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)

	// CASE5: input string contains invalid characters
	const char *src5 = "Hello!@#$%%^&*()World";
f0111d8a:	c7 45 d4 0a 9c 12 f0 	movl   $0xf0129c0a,-0x2c(%ebp)
	char dst5[100];
	result = str2lower(dst5, src5);
f0111d91:	83 ec 08             	sub    $0x8,%esp
f0111d94:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111d97:	8d 85 d8 fd ff ff    	lea    -0x228(%ebp),%eax
f0111d9d:	50                   	push   %eax
f0111d9e:	e8 d0 f1 00 00       	call   f0120f73 <str2lower>
f0111da3:	83 c4 10             	add    $0x10,%esp
f0111da6:	89 45 e8             	mov    %eax,-0x18(%ebp)
	resultLength = strlen(result);
f0111da9:	83 ec 0c             	sub    $0xc,%esp
f0111dac:	ff 75 e8             	pushl  -0x18(%ebp)
f0111daf:	e8 d6 ea 00 00       	call   f012088a <strlen>
f0111db4:	83 c4 10             	add    $0x10,%esp
f0111db7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "hello!@#$%%^&*()world") != 0 || resultLength != strlen(src5))
f0111dba:	83 ec 08             	sub    $0x8,%esp
f0111dbd:	68 20 9c 12 f0       	push   $0xf0129c20
f0111dc2:	ff 75 e8             	pushl  -0x18(%ebp)
f0111dc5:	e8 cc eb 00 00       	call   f0120996 <strcmp>
f0111dca:	83 c4 10             	add    $0x10,%esp
f0111dcd:	85 c0                	test   %eax,%eax
f0111dcf:	75 13                	jne    f0111de4 <test_str2lower_function+0x25d>
f0111dd1:	83 ec 0c             	sub    $0xc,%esp
f0111dd4:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111dd7:	e8 ae ea 00 00       	call   f012088a <strlen>
f0111ddc:	83 c4 10             	add    $0x10,%esp
f0111ddf:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0111de2:	74 15                	je     f0111df9 <test_str2lower_function+0x272>
		cprintf("str2lower #5: WRONG - str2lower return wrong value or length. Expected \"hello!@#$%%^&*()world\", Actual \"%s\"\n", result);
f0111de4:	83 ec 08             	sub    $0x8,%esp
f0111de7:	ff 75 e8             	pushl  -0x18(%ebp)
f0111dea:	68 38 9c 12 f0       	push   $0xf0129c38
f0111def:	e8 78 f1 fe ff       	call   f0100f6c <cprintf>
f0111df4:	83 c4 10             	add    $0x10,%esp
f0111df7:	eb 04                	jmp    f0111dfd <test_str2lower_function+0x276>
	else
		eval += 15;
f0111df9:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)

	// CASE6: input string contains characters with white-space characters
	const char *src6 = "Hello World";
f0111dfd:	c7 45 d0 a5 9c 12 f0 	movl   $0xf0129ca5,-0x30(%ebp)
	char dst6[100];
	result = str2lower(dst6, src6);
f0111e04:	83 ec 08             	sub    $0x8,%esp
f0111e07:	ff 75 d0             	pushl  -0x30(%ebp)
f0111e0a:	8d 85 74 fd ff ff    	lea    -0x28c(%ebp),%eax
f0111e10:	50                   	push   %eax
f0111e11:	e8 5d f1 00 00       	call   f0120f73 <str2lower>
f0111e16:	83 c4 10             	add    $0x10,%esp
f0111e19:	89 45 e8             	mov    %eax,-0x18(%ebp)
	resultLength = strlen(result);
f0111e1c:	83 ec 0c             	sub    $0xc,%esp
f0111e1f:	ff 75 e8             	pushl  -0x18(%ebp)
f0111e22:	e8 63 ea 00 00       	call   f012088a <strlen>
f0111e27:	83 c4 10             	add    $0x10,%esp
f0111e2a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "hello world") != 0 || resultLength != strlen(src6))
f0111e2d:	83 ec 08             	sub    $0x8,%esp
f0111e30:	68 b1 9c 12 f0       	push   $0xf0129cb1
f0111e35:	ff 75 e8             	pushl  -0x18(%ebp)
f0111e38:	e8 59 eb 00 00       	call   f0120996 <strcmp>
f0111e3d:	83 c4 10             	add    $0x10,%esp
f0111e40:	85 c0                	test   %eax,%eax
f0111e42:	75 13                	jne    f0111e57 <test_str2lower_function+0x2d0>
f0111e44:	83 ec 0c             	sub    $0xc,%esp
f0111e47:	ff 75 d0             	pushl  -0x30(%ebp)
f0111e4a:	e8 3b ea 00 00       	call   f012088a <strlen>
f0111e4f:	83 c4 10             	add    $0x10,%esp
f0111e52:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0111e55:	74 15                	je     f0111e6c <test_str2lower_function+0x2e5>
		cprintf("str2lower #6: WRONG - str2lower return wrong value or length. Expected \"hello world\", Actual \"%s\"\n", result);
f0111e57:	83 ec 08             	sub    $0x8,%esp
f0111e5a:	ff 75 e8             	pushl  -0x18(%ebp)
f0111e5d:	68 c0 9c 12 f0       	push   $0xf0129cc0
f0111e62:	e8 05 f1 fe ff       	call   f0100f6c <cprintf>
f0111e67:	83 c4 10             	add    $0x10,%esp
f0111e6a:	eb 04                	jmp    f0111e70 <test_str2lower_function+0x2e9>
	else
		eval += 15;
f0111e6c:	83 45 f4 0f          	addl   $0xf,-0xc(%ebp)

	// CASE7: input string contains valid characters separated by _
	const char *src7 = "Hello WORLD String_2_LOWeR";
f0111e70:	c7 45 cc 23 9d 12 f0 	movl   $0xf0129d23,-0x34(%ebp)
	char dst7[100];
	result = str2lower(dst7, src7);
f0111e77:	83 ec 08             	sub    $0x8,%esp
f0111e7a:	ff 75 cc             	pushl  -0x34(%ebp)
f0111e7d:	8d 85 10 fd ff ff    	lea    -0x2f0(%ebp),%eax
f0111e83:	50                   	push   %eax
f0111e84:	e8 ea f0 00 00       	call   f0120f73 <str2lower>
f0111e89:	83 c4 10             	add    $0x10,%esp
f0111e8c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	resultLength = strlen(result);
f0111e8f:	83 ec 0c             	sub    $0xc,%esp
f0111e92:	ff 75 e8             	pushl  -0x18(%ebp)
f0111e95:	e8 f0 e9 00 00       	call   f012088a <strlen>
f0111e9a:	83 c4 10             	add    $0x10,%esp
f0111e9d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (strcmp(result, "hello world string_2_lower") != 0 || resultLength != strlen(src7))
f0111ea0:	83 ec 08             	sub    $0x8,%esp
f0111ea3:	68 3e 9d 12 f0       	push   $0xf0129d3e
f0111ea8:	ff 75 e8             	pushl  -0x18(%ebp)
f0111eab:	e8 e6 ea 00 00       	call   f0120996 <strcmp>
f0111eb0:	83 c4 10             	add    $0x10,%esp
f0111eb3:	85 c0                	test   %eax,%eax
f0111eb5:	75 13                	jne    f0111eca <test_str2lower_function+0x343>
f0111eb7:	83 ec 0c             	sub    $0xc,%esp
f0111eba:	ff 75 cc             	pushl  -0x34(%ebp)
f0111ebd:	e8 c8 e9 00 00       	call   f012088a <strlen>
f0111ec2:	83 c4 10             	add    $0x10,%esp
f0111ec5:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0111ec8:	74 15                	je     f0111edf <test_str2lower_function+0x358>
		cprintf("str2lower #7: WRONG - str2lower return wrong value or length. Expected \"hello world string_2_lower\", Actual \"%s\"\n", result);
f0111eca:	83 ec 08             	sub    $0x8,%esp
f0111ecd:	ff 75 e8             	pushl  -0x18(%ebp)
f0111ed0:	68 5c 9d 12 f0       	push   $0xf0129d5c
f0111ed5:	e8 92 f0 fe ff       	call   f0100f6c <cprintf>
f0111eda:	83 c4 10             	add    $0x10,%esp
f0111edd:	eb 04                	jmp    f0111ee3 <test_str2lower_function+0x35c>
	else
		eval += 20;
f0111edf:	83 45 f4 14          	addl   $0x14,-0xc(%ebp)

	cprintf("Test str2lower completed. Evaluation = %d%%\n", eval);
f0111ee3:	83 ec 08             	sub    $0x8,%esp
f0111ee6:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ee9:	68 d0 9d 12 f0       	push   $0xf0129dd0
f0111eee:	e8 79 f0 fe ff       	call   f0100f6c <cprintf>
f0111ef3:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0111ef6:	83 ec 0c             	sub    $0xc,%esp
f0111ef9:	68 e0 98 12 f0       	push   $0xf01298e0
f0111efe:	e8 69 f0 fe ff       	call   f0100f6c <cprintf>
f0111f03:	83 c4 10             	add    $0x10,%esp
	return 0;
f0111f06:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111f0b:	c9                   	leave  
f0111f0c:	c3                   	ret    

f0111f0d <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f0111f0d:	55                   	push   %ebp
f0111f0e:	89 e5                	mov    %esp,%ebp
f0111f10:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f0111f13:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0111f1a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0111f21:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111f28:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f0111f2d:	ff 75 ec             	pushl  -0x14(%ebp)
f0111f30:	ff 75 f0             	pushl  -0x10(%ebp)
f0111f33:	ff 75 f4             	pushl  -0xc(%ebp)
f0111f36:	50                   	push   %eax
f0111f37:	e8 ec 6b ff ff       	call   f0108b28 <pt_set_page_permissions>
f0111f3c:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111f3f:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f0111f44:	ff 75 ec             	pushl  -0x14(%ebp)
f0111f47:	ff 75 f0             	pushl  -0x10(%ebp)
f0111f4a:	ff 75 f4             	pushl  -0xc(%ebp)
f0111f4d:	50                   	push   %eax
f0111f4e:	e8 a0 4d 00 00       	call   f0116cf3 <CP>
f0111f53:	83 c4 10             	add    $0x10,%esp
f0111f56:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111f59:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111f5d:	74 17                	je     f0111f76 <test_pt_set_page_permissions+0x69>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f0111f5f:	83 ec 04             	sub    $0x4,%esp
f0111f62:	68 00 9e 12 f0       	push   $0xf0129e00
f0111f67:	68 23 01 00 00       	push   $0x123
f0111f6c:	68 22 9e 12 f0       	push   $0xf0129e22
f0111f71:	e8 a4 e3 fe ff       	call   f010031a <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f0111f76:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f0111f7d:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f0111f84:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111f8b:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f0111f90:	ff 75 ec             	pushl  -0x14(%ebp)
f0111f93:	ff 75 f0             	pushl  -0x10(%ebp)
f0111f96:	ff 75 f4             	pushl  -0xc(%ebp)
f0111f99:	50                   	push   %eax
f0111f9a:	e8 89 6b ff ff       	call   f0108b28 <pt_set_page_permissions>
f0111f9f:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111fa2:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f0111fa7:	ff 75 ec             	pushl  -0x14(%ebp)
f0111faa:	ff 75 f0             	pushl  -0x10(%ebp)
f0111fad:	ff 75 f4             	pushl  -0xc(%ebp)
f0111fb0:	50                   	push   %eax
f0111fb1:	e8 3d 4d 00 00       	call   f0116cf3 <CP>
f0111fb6:	83 c4 10             	add    $0x10,%esp
f0111fb9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0111fbc:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0111fc0:	74 17                	je     f0111fd9 <test_pt_set_page_permissions+0xcc>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f0111fc2:	83 ec 04             	sub    $0x4,%esp
f0111fc5:	68 40 9e 12 f0       	push   $0xf0129e40
f0111fca:	68 2f 01 00 00       	push   $0x12f
f0111fcf:	68 22 9e 12 f0       	push   $0xf0129e22
f0111fd4:	e8 41 e3 fe ff       	call   f010031a <_panic>
	}

	va = 0xEF800000;
f0111fd9:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f0111fe0:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0111fe7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0111fee:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f0111ff3:	ff 75 ec             	pushl  -0x14(%ebp)
f0111ff6:	ff 75 f0             	pushl  -0x10(%ebp)
f0111ff9:	ff 75 f4             	pushl  -0xc(%ebp)
f0111ffc:	50                   	push   %eax
f0111ffd:	e8 26 6b ff ff       	call   f0108b28 <pt_set_page_permissions>
f0112002:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0112005:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f011200a:	ff 75 ec             	pushl  -0x14(%ebp)
f011200d:	ff 75 f0             	pushl  -0x10(%ebp)
f0112010:	ff 75 f4             	pushl  -0xc(%ebp)
f0112013:	50                   	push   %eax
f0112014:	e8 da 4c 00 00       	call   f0116cf3 <CP>
f0112019:	83 c4 10             	add    $0x10,%esp
f011201c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011201f:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0112023:	74 17                	je     f011203c <test_pt_set_page_permissions+0x12f>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f0112025:	83 ec 04             	sub    $0x4,%esp
f0112028:	68 64 9e 12 f0       	push   $0xf0129e64
f011202d:	68 3a 01 00 00       	push   $0x13a
f0112032:	68 22 9e 12 f0       	push   $0xf0129e22
f0112037:	e8 de e2 fe ff       	call   f010031a <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f011203c:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f0112043:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f011204a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0112051:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f0112056:	ff 75 ec             	pushl  -0x14(%ebp)
f0112059:	ff 75 f0             	pushl  -0x10(%ebp)
f011205c:	ff 75 f4             	pushl  -0xc(%ebp)
f011205f:	50                   	push   %eax
f0112060:	e8 c3 6a ff ff       	call   f0108b28 <pt_set_page_permissions>
f0112065:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0112068:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f011206d:	ff 75 ec             	pushl  -0x14(%ebp)
f0112070:	ff 75 f0             	pushl  -0x10(%ebp)
f0112073:	ff 75 f4             	pushl  -0xc(%ebp)
f0112076:	50                   	push   %eax
f0112077:	e8 77 4c 00 00       	call   f0116cf3 <CP>
f011207c:	83 c4 10             	add    $0x10,%esp
f011207f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0112082:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0112086:	74 17                	je     f011209f <test_pt_set_page_permissions+0x192>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0112088:	83 ec 04             	sub    $0x4,%esp
f011208b:	68 88 9e 12 f0       	push   $0xf0129e88
f0112090:	68 46 01 00 00       	push   $0x146
f0112095:	68 22 9e 12 f0       	push   $0xf0129e22
f011209a:	e8 7b e2 fe ff       	call   f010031a <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f011209f:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f01120a6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f01120ad:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01120b4:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f01120b9:	ff 75 ec             	pushl  -0x14(%ebp)
f01120bc:	ff 75 f0             	pushl  -0x10(%ebp)
f01120bf:	ff 75 f4             	pushl  -0xc(%ebp)
f01120c2:	50                   	push   %eax
f01120c3:	e8 60 6a ff ff       	call   f0108b28 <pt_set_page_permissions>
f01120c8:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01120cb:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f01120d0:	ff 75 ec             	pushl  -0x14(%ebp)
f01120d3:	ff 75 f0             	pushl  -0x10(%ebp)
f01120d6:	ff 75 f4             	pushl  -0xc(%ebp)
f01120d9:	50                   	push   %eax
f01120da:	e8 14 4c 00 00       	call   f0116cf3 <CP>
f01120df:	83 c4 10             	add    $0x10,%esp
f01120e2:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01120e5:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01120e9:	74 17                	je     f0112102 <test_pt_set_page_permissions+0x1f5>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f01120eb:	83 ec 04             	sub    $0x4,%esp
f01120ee:	68 ac 9e 12 f0       	push   $0xf0129eac
f01120f3:	68 52 01 00 00       	push   $0x152
f01120f8:	68 22 9e 12 f0       	push   $0xf0129e22
f01120fd:	e8 18 e2 fe ff       	call   f010031a <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f0112102:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f0112109:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f0112110:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0112117:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f011211c:	ff 75 ec             	pushl  -0x14(%ebp)
f011211f:	ff 75 f0             	pushl  -0x10(%ebp)
f0112122:	ff 75 f4             	pushl  -0xc(%ebp)
f0112125:	50                   	push   %eax
f0112126:	e8 fd 69 ff ff       	call   f0108b28 <pt_set_page_permissions>
f011212b:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011212e:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f0112133:	ff 75 ec             	pushl  -0x14(%ebp)
f0112136:	ff 75 f0             	pushl  -0x10(%ebp)
f0112139:	ff 75 f4             	pushl  -0xc(%ebp)
f011213c:	50                   	push   %eax
f011213d:	e8 b1 4b 00 00       	call   f0116cf3 <CP>
f0112142:	83 c4 10             	add    $0x10,%esp
f0112145:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f0112148:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f011214c:	74 17                	je     f0112165 <test_pt_set_page_permissions+0x258>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f011214e:	83 ec 04             	sub    $0x4,%esp
f0112151:	68 d0 9e 12 f0       	push   $0xf0129ed0
f0112156:	68 5e 01 00 00       	push   $0x15e
f011215b:	68 22 9e 12 f0       	push   $0xf0129e22
f0112160:	e8 b5 e1 fe ff       	call   f010031a <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f0112165:	83 ec 0c             	sub    $0xc,%esp
f0112168:	68 fc 9e 12 f0       	push   $0xf0129efc
f011216d:	e8 fa ed fe ff       	call   f0100f6c <cprintf>
f0112172:	83 c4 10             	add    $0x10,%esp
	return 0;
f0112175:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011217a:	c9                   	leave  
f011217b:	c3                   	ret    

f011217c <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f011217c:	55                   	push   %ebp
f011217d:	89 e5                	mov    %esp,%ebp
f011217f:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f0112182:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0112189:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0112190:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0112197:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f011219c:	ff 75 ec             	pushl  -0x14(%ebp)
f011219f:	ff 75 f0             	pushl  -0x10(%ebp)
f01121a2:	ff 75 f4             	pushl  -0xc(%ebp)
f01121a5:	50                   	push   %eax
f01121a6:	e8 7d 69 ff ff       	call   f0108b28 <pt_set_page_permissions>
f01121ab:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f01121ae:	83 ec 04             	sub    $0x4,%esp
f01121b1:	68 4c 9f 12 f0       	push   $0xf0129f4c
f01121b6:	68 6b 01 00 00       	push   $0x16b
f01121bb:	68 22 9e 12 f0       	push   $0xf0129e22
f01121c0:	e8 55 e1 fe ff       	call   f010031a <_panic>

f01121c5 <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f01121c5:	55                   	push   %ebp
f01121c6:	89 e5                	mov    %esp,%ebp
f01121c8:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f01121cb:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f01121d2:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f01121d7:	83 ec 08             	sub    $0x8,%esp
f01121da:	ff 75 f4             	pushl  -0xc(%ebp)
f01121dd:	50                   	push   %eax
f01121de:	e8 09 6a ff ff       	call   f0108bec <pt_get_page_permissions>
f01121e3:	83 c4 10             	add    $0x10,%esp
f01121e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f01121e9:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f01121ed:	74 17                	je     f0112206 <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f01121ef:	83 ec 04             	sub    $0x4,%esp
f01121f2:	68 e8 9f 12 f0       	push   $0xf0129fe8
f01121f7:	68 79 01 00 00       	push   $0x179
f01121fc:	68 22 9e 12 f0       	push   $0xf0129e22
f0112201:	e8 14 e1 fe ff       	call   f010031a <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f0112206:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f011220d:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f0112212:	83 ec 08             	sub    $0x8,%esp
f0112215:	ff 75 f4             	pushl  -0xc(%ebp)
f0112218:	50                   	push   %eax
f0112219:	e8 ce 69 ff ff       	call   f0108bec <pt_get_page_permissions>
f011221e:	83 c4 10             	add    $0x10,%esp
f0112221:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f0112224:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0112228:	74 17                	je     f0112241 <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f011222a:	83 ec 04             	sub    $0x4,%esp
f011222d:	68 0c a0 12 f0       	push   $0xf012a00c
f0112232:	68 81 01 00 00       	push   $0x181
f0112237:	68 22 9e 12 f0       	push   $0xf0129e22
f011223c:	e8 d9 e0 fe ff       	call   f010031a <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f0112241:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0112248:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f011224d:	83 ec 08             	sub    $0x8,%esp
f0112250:	ff 75 f4             	pushl  -0xc(%ebp)
f0112253:	50                   	push   %eax
f0112254:	e8 93 69 ff ff       	call   f0108bec <pt_get_page_permissions>
f0112259:	83 c4 10             	add    $0x10,%esp
f011225c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f011225f:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0112263:	74 17                	je     f011227c <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f0112265:	83 ec 04             	sub    $0x4,%esp
f0112268:	68 30 a0 12 f0       	push   $0xf012a030
f011226d:	68 89 01 00 00       	push   $0x189
f0112272:	68 22 9e 12 f0       	push   $0xf0129e22
f0112277:	e8 9e e0 fe ff       	call   f010031a <_panic>
	}

	va = 0xF1000000;
f011227c:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0112283:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f0112288:	83 ec 08             	sub    $0x8,%esp
f011228b:	ff 75 f4             	pushl  -0xc(%ebp)
f011228e:	50                   	push   %eax
f011228f:	e8 58 69 ff ff       	call   f0108bec <pt_get_page_permissions>
f0112294:	83 c4 10             	add    $0x10,%esp
f0112297:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f011229a:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f011229e:	74 17                	je     f01122b7 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f01122a0:	83 ec 04             	sub    $0x4,%esp
f01122a3:	68 54 a0 12 f0       	push   $0xf012a054
f01122a8:	68 90 01 00 00       	push   $0x190
f01122ad:	68 22 9e 12 f0       	push   $0xf0129e22
f01122b2:	e8 63 e0 fe ff       	call   f010031a <_panic>
	}

	va = 0xF0001000;
f01122b7:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01122be:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f01122c3:	83 ec 08             	sub    $0x8,%esp
f01122c6:	ff 75 f4             	pushl  -0xc(%ebp)
f01122c9:	50                   	push   %eax
f01122ca:	e8 1d 69 ff ff       	call   f0108bec <pt_get_page_permissions>
f01122cf:	83 c4 10             	add    $0x10,%esp
f01122d2:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f01122d5:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f01122d9:	74 17                	je     f01122f2 <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f01122db:	83 ec 04             	sub    $0x4,%esp
f01122de:	68 78 a0 12 f0       	push   $0xf012a078
f01122e3:	68 97 01 00 00       	push   $0x197
f01122e8:	68 22 9e 12 f0       	push   $0xf0129e22
f01122ed:	e8 28 e0 fe ff       	call   f010031a <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f01122f2:	83 ec 0c             	sub    $0xc,%esp
f01122f5:	68 9c a0 12 f0       	push   $0xf012a09c
f01122fa:	e8 6d ec fe ff       	call   f0100f6c <cprintf>
f01122ff:	83 c4 10             	add    $0x10,%esp
	return 0;
f0112302:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112307:	c9                   	leave  
f0112308:	c3                   	ret    

f0112309 <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f0112309:	55                   	push   %ebp
f011230a:	89 e5                	mov    %esp,%ebp
f011230c:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f011230f:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0112316:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f011231b:	83 ec 08             	sub    $0x8,%esp
f011231e:	ff 75 f4             	pushl  -0xc(%ebp)
f0112321:	50                   	push   %eax
f0112322:	e8 0e 69 ff ff       	call   f0108c35 <pt_clear_page_table_entry>
f0112327:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f011232a:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f011232f:	83 ec 08             	sub    $0x8,%esp
f0112332:	ff 75 f4             	pushl  -0xc(%ebp)
f0112335:	50                   	push   %eax
f0112336:	e8 14 49 00 00       	call   f0116c4f <CE>
f011233b:	83 c4 10             	add    $0x10,%esp
f011233e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0112341:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0112345:	74 17                	je     f011235e <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f0112347:	83 ec 04             	sub    $0x4,%esp
f011234a:	68 e4 a0 12 f0       	push   $0xf012a0e4
f011234f:	68 a7 01 00 00       	push   $0x1a7
f0112354:	68 22 9e 12 f0       	push   $0xf0129e22
f0112359:	e8 bc df fe ff       	call   f010031a <_panic>
	}

	va = 0xF0001000;
f011235e:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0112365:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f011236a:	83 ec 08             	sub    $0x8,%esp
f011236d:	ff 75 f4             	pushl  -0xc(%ebp)
f0112370:	50                   	push   %eax
f0112371:	e8 bf 68 ff ff       	call   f0108c35 <pt_clear_page_table_entry>
f0112376:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0112379:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f011237e:	83 ec 08             	sub    $0x8,%esp
f0112381:	ff 75 f4             	pushl  -0xc(%ebp)
f0112384:	50                   	push   %eax
f0112385:	e8 c5 48 00 00       	call   f0116c4f <CE>
f011238a:	83 c4 10             	add    $0x10,%esp
f011238d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0112390:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0112394:	74 17                	je     f01123ad <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f0112396:	83 ec 04             	sub    $0x4,%esp
f0112399:	68 10 a1 12 f0       	push   $0xf012a110
f011239e:	68 af 01 00 00       	push   $0x1af
f01123a3:	68 22 9e 12 f0       	push   $0xf0129e22
f01123a8:	e8 6d df fe ff       	call   f010031a <_panic>
	}

	va = 0xEF800000;
f01123ad:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01123b4:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f01123b9:	83 ec 08             	sub    $0x8,%esp
f01123bc:	ff 75 f4             	pushl  -0xc(%ebp)
f01123bf:	50                   	push   %eax
f01123c0:	e8 70 68 ff ff       	call   f0108c35 <pt_clear_page_table_entry>
f01123c5:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f01123c8:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f01123cd:	83 ec 08             	sub    $0x8,%esp
f01123d0:	ff 75 f4             	pushl  -0xc(%ebp)
f01123d3:	50                   	push   %eax
f01123d4:	e8 76 48 00 00       	call   f0116c4f <CE>
f01123d9:	83 c4 10             	add    $0x10,%esp
f01123dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01123df:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01123e3:	74 17                	je     f01123fc <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f01123e5:	83 ec 04             	sub    $0x4,%esp
f01123e8:	68 3c a1 12 f0       	push   $0xf012a13c
f01123ed:	68 b7 01 00 00       	push   $0x1b7
f01123f2:	68 22 9e 12 f0       	push   $0xf0129e22
f01123f7:	e8 1e df fe ff       	call   f010031a <_panic>
	}

	va = 0xF0000000;
f01123fc:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0112403:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f0112408:	83 ec 08             	sub    $0x8,%esp
f011240b:	ff 75 f4             	pushl  -0xc(%ebp)
f011240e:	50                   	push   %eax
f011240f:	e8 21 68 ff ff       	call   f0108c35 <pt_clear_page_table_entry>
f0112414:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0112417:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f011241c:	83 ec 08             	sub    $0x8,%esp
f011241f:	ff 75 f4             	pushl  -0xc(%ebp)
f0112422:	50                   	push   %eax
f0112423:	e8 27 48 00 00       	call   f0116c4f <CE>
f0112428:	83 c4 10             	add    $0x10,%esp
f011242b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f011242e:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f0112432:	74 17                	je     f011244b <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f0112434:	83 ec 04             	sub    $0x4,%esp
f0112437:	68 68 a1 12 f0       	push   $0xf012a168
f011243c:	68 bf 01 00 00       	push   $0x1bf
f0112441:	68 22 9e 12 f0       	push   $0xf0129e22
f0112446:	e8 cf de fe ff       	call   f010031a <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f011244b:	83 ec 0c             	sub    $0xc,%esp
f011244e:	68 94 a1 12 f0       	push   $0xf012a194
f0112453:	e8 14 eb fe ff       	call   f0100f6c <cprintf>
f0112458:	83 c4 10             	add    $0x10,%esp
	return 0;
f011245b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112460:	c9                   	leave  
f0112461:	c3                   	ret    

f0112462 <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f0112462:	55                   	push   %ebp
f0112463:	89 e5                	mov    %esp,%ebp
f0112465:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f0112468:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011246f:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f0112474:	83 ec 08             	sub    $0x8,%esp
f0112477:	ff 75 f4             	pushl  -0xc(%ebp)
f011247a:	50                   	push   %eax
f011247b:	e8 b5 67 ff ff       	call   f0108c35 <pt_clear_page_table_entry>
f0112480:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f0112483:	83 ec 04             	sub    $0x4,%esp
f0112486:	68 e0 a1 12 f0       	push   $0xf012a1e0
f011248b:	68 ca 01 00 00       	push   $0x1ca
f0112490:	68 22 9e 12 f0       	push   $0xf0129e22
f0112495:	e8 80 de fe ff       	call   f010031a <_panic>

f011249a <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f011249a:	55                   	push   %ebp
f011249b:	89 e5                	mov    %esp,%ebp
f011249d:	57                   	push   %edi
f011249e:	56                   	push   %esi
f011249f:	53                   	push   %ebx
f01124a0:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01124a6:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01124ac:	bb 24 a5 12 f0       	mov    $0xf012a524,%ebx
f01124b1:	ba 0f 00 00 00       	mov    $0xf,%edx
f01124b6:	89 c7                	mov    %eax,%edi
f01124b8:	89 de                	mov    %ebx,%esi
f01124ba:	89 d1                	mov    %edx,%ecx
f01124bc:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01124be:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f01124c4:	b9 23 00 00 00       	mov    $0x23,%ecx
f01124c9:	b0 00                	mov    $0x0,%al
f01124cb:	89 d7                	mov    %edx,%edi
f01124cd:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f01124cf:	6a 00                	push   $0x0
f01124d1:	6a 0a                	push   $0xa
f01124d3:	6a 14                	push   $0x14
f01124d5:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f01124db:	50                   	push   %eax
f01124dc:	e8 8f 75 ff ff       	call   f0109a70 <env_create>
f01124e1:	83 c4 10             	add    $0x10,%esp
f01124e4:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f01124e7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01124ea:	8b 40 64             	mov    0x64(%eax),%eax
f01124ed:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f01124f0:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01124f3:	8b 40 68             	mov    0x68(%eax),%eax
f01124f6:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01124f9:	8b 45 90             	mov    -0x70(%ebp),%eax
f01124fc:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01124ff:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0112506:	75 70 20 
f0112509:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0112510:	00 00 00 
f0112513:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f0112519:	b9 03 00 00 00       	mov    $0x3,%ecx
f011251e:	b8 00 00 00 00       	mov    $0x0,%eax
f0112523:	89 d7                	mov    %edx,%edi
f0112525:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112527:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011252a:	8b 40 10             	mov    0x10(%eax),%eax
f011252d:	83 ec 08             	sub    $0x8,%esp
f0112530:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112536:	52                   	push   %edx
f0112537:	50                   	push   %eax
f0112538:	e8 f3 e7 00 00       	call   f0120d30 <ltostr>
f011253d:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0112540:	83 ec 04             	sub    $0x4,%esp
f0112543:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112549:	50                   	push   %eax
f011254a:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f0112550:	50                   	push   %eax
f0112551:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0112557:	50                   	push   %eax
f0112558:	e8 ac e8 00 00       	call   f0120e09 <strcconcat>
f011255d:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f0112560:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f0112567:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f011256e:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f0112575:	83 ec 0c             	sub    $0xc,%esp
f0112578:	ff 75 d4             	pushl  -0x2c(%ebp)
f011257b:	e8 d0 48 00 00       	call   f0116e50 <ClearUserSpace>
f0112580:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0112583:	83 ec 04             	sub    $0x4,%esp
f0112586:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f011258c:	50                   	push   %eax
f011258d:	68 76 a2 12 f0       	push   $0xf012a276
f0112592:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112598:	50                   	push   %eax
f0112599:	e8 6b e8 00 00       	call   f0120e09 <strcconcat>
f011259e:	83 c4 10             	add    $0x10,%esp
f01125a1:	83 ec 0c             	sub    $0xc,%esp
f01125a4:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f01125aa:	50                   	push   %eax
f01125ab:	e8 2c f9 fe ff       	call   f0101edc <execute_command>
f01125b0:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f01125b3:	83 ec 04             	sub    $0x4,%esp
f01125b6:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01125bc:	50                   	push   %eax
f01125bd:	68 81 a2 12 f0       	push   $0xf012a281
f01125c2:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01125c8:	50                   	push   %eax
f01125c9:	e8 3b e8 00 00       	call   f0120e09 <strcconcat>
f01125ce:	83 c4 10             	add    $0x10,%esp
f01125d1:	83 ec 0c             	sub    $0xc,%esp
f01125d4:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f01125da:	50                   	push   %eax
f01125db:	e8 fc f8 fe ff       	call   f0101edc <execute_command>
f01125e0:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f01125e3:	83 ec 04             	sub    $0x4,%esp
f01125e6:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f01125ec:	50                   	push   %eax
f01125ed:	68 8c a2 12 f0       	push   $0xf012a28c
f01125f2:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01125f8:	50                   	push   %eax
f01125f9:	e8 0b e8 00 00       	call   f0120e09 <strcconcat>
f01125fe:	83 c4 10             	add    $0x10,%esp
f0112601:	83 ec 0c             	sub    $0xc,%esp
f0112604:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f011260a:	50                   	push   %eax
f011260b:	e8 cc f8 fe ff       	call   f0101edc <execute_command>
f0112610:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0112613:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f011261a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011261d:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f0112620:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f0112627:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011262a:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f011262d:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0112634:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112637:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f011263a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011263d:	83 ec 08             	sub    $0x8,%esp
f0112640:	50                   	push   %eax
f0112641:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112644:	e8 6e 47 00 00       	call   f0116db7 <GP>
f0112649:	83 c4 10             	add    $0x10,%esp
f011264c:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f011264f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f0112656:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f011265d:	e8 a7 b3 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0112662:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f0112665:	83 ec 0c             	sub    $0xc,%esp
f0112668:	68 98 a2 12 f0       	push   $0xf012a298
f011266d:	e8 fa e8 fe ff       	call   f0100f6c <cprintf>
f0112672:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f0112675:	6a 03                	push   $0x3
f0112677:	68 00 00 90 02       	push   $0x2900000
f011267c:	68 00 00 80 02       	push   $0x2800000
f0112681:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112684:	e8 47 70 ff ff       	call   f01096d0 <cut_paste_pages>
f0112689:	83 c4 10             	add    $0x10,%esp
f011268c:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f011268f:	e8 75 b3 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0112694:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f0112697:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f011269e:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f01126a2:	75 08                	jne    f01126ac <test_cut_paste_pages+0x212>
f01126a4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01126a7:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01126aa:	74 2b                	je     f01126d7 <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f01126ac:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01126af:	2b 45 b0             	sub    -0x50(%ebp),%eax
f01126b2:	83 ec 0c             	sub    $0xc,%esp
f01126b5:	50                   	push   %eax
f01126b6:	ff 75 b4             	pushl  -0x4c(%ebp)
f01126b9:	68 c8 a2 12 f0       	push   $0xf012a2c8
f01126be:	68 04 02 00 00       	push   $0x204
f01126c3:	68 22 9e 12 f0       	push   $0xf0129e22
f01126c8:	e8 ea dd fe ff       	call   f01004b7 <_warn>
f01126cd:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01126d0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f01126d7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01126db:	74 04                	je     f01126e1 <test_cut_paste_pages+0x247>
f01126dd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f01126e1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01126e8:	83 ec 08             	sub    $0x8,%esp
f01126eb:	6a 00                	push   $0x0
f01126ed:	6a 01                	push   $0x1
f01126ef:	6a 00                	push   $0x0
f01126f1:	68 ff 0f 00 00       	push   $0xfff
f01126f6:	ff 75 bc             	pushl  -0x44(%ebp)
f01126f9:	6a 01                	push   $0x1
f01126fb:	68 00 30 00 00       	push   $0x3000
f0112700:	68 00 00 90 02       	push   $0x2900000
f0112705:	68 00 00 80 02       	push   $0x2800000
f011270a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011270d:	e8 72 47 00 00       	call   f0116e84 <CCP>
f0112712:	83 c4 30             	add    $0x30,%esp
f0112715:	83 f8 01             	cmp    $0x1,%eax
f0112718:	74 21                	je     f011273b <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011271a:	83 ec 04             	sub    $0x4,%esp
f011271d:	68 1c a3 12 f0       	push   $0xf012a31c
f0112722:	68 0c 02 00 00       	push   $0x20c
f0112727:	68 22 9e 12 f0       	push   $0xf0129e22
f011272c:	e8 86 dd fe ff       	call   f01004b7 <_warn>
f0112731:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112734:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f011273b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011273f:	74 04                	je     f0112745 <test_cut_paste_pages+0x2ab>
f0112741:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f0112745:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f011274c:	83 ec 04             	sub    $0x4,%esp
f011274f:	6a 00                	push   $0x0
f0112751:	68 00 00 90 02       	push   $0x2900000
f0112756:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112759:	e8 b7 41 00 00       	call   f0116915 <CB>
f011275e:	83 c4 10             	add    $0x10,%esp
f0112761:	85 c0                	test   %eax,%eax
f0112763:	0f 84 f6 00 00 00    	je     f011285f <test_cut_paste_pages+0x3c5>
f0112769:	83 ec 04             	sub    $0x4,%esp
f011276c:	6a 00                	push   $0x0
f011276e:	68 00 10 90 02       	push   $0x2901000
f0112773:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112776:	e8 9a 41 00 00       	call   f0116915 <CB>
f011277b:	83 c4 10             	add    $0x10,%esp
f011277e:	85 c0                	test   %eax,%eax
f0112780:	0f 84 d9 00 00 00    	je     f011285f <test_cut_paste_pages+0x3c5>
f0112786:	83 ec 04             	sub    $0x4,%esp
f0112789:	6a 00                	push   $0x0
f011278b:	68 00 20 90 02       	push   $0x2902000
f0112790:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112793:	e8 7d 41 00 00       	call   f0116915 <CB>
f0112798:	83 c4 10             	add    $0x10,%esp
f011279b:	85 c0                	test   %eax,%eax
f011279d:	0f 84 bc 00 00 00    	je     f011285f <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f01127a3:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f01127aa:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f01127b1:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f01127b8:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01127bb:	8a 00                	mov    (%eax),%al
f01127bd:	3c 61                	cmp    $0x61,%al
f01127bf:	75 12                	jne    f01127d3 <test_cut_paste_pages+0x339>
f01127c1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01127c4:	8a 00                	mov    (%eax),%al
f01127c6:	3c 62                	cmp    $0x62,%al
f01127c8:	75 09                	jne    f01127d3 <test_cut_paste_pages+0x339>
f01127ca:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01127cd:	8a 00                	mov    (%eax),%al
f01127cf:	3c 63                	cmp    $0x63,%al
f01127d1:	74 21                	je     f01127f4 <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01127d3:	83 ec 04             	sub    $0x4,%esp
f01127d6:	68 68 a3 12 f0       	push   $0xf012a368
f01127db:	68 19 02 00 00       	push   $0x219
f01127e0:	68 22 9e 12 f0       	push   $0xf0129e22
f01127e5:	e8 cd dc fe ff       	call   f01004b7 <_warn>
f01127ea:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01127ed:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01127f4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01127f8:	74 04                	je     f01127fe <test_cut_paste_pages+0x364>
f01127fa:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01127fe:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f0112805:	83 ec 04             	sub    $0x4,%esp
f0112808:	6a 01                	push   $0x1
f011280a:	68 00 10 90 02       	push   $0x2901000
f011280f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112812:	e8 fe 40 00 00       	call   f0116915 <CB>
f0112817:	83 c4 10             	add    $0x10,%esp
f011281a:	85 c0                	test   %eax,%eax
f011281c:	74 41                	je     f011285f <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f011281e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112821:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f0112824:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112827:	8a 00                	mov    (%eax),%al
f0112829:	3c 79                	cmp    $0x79,%al
f011282b:	74 21                	je     f011284e <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011282d:	83 ec 04             	sub    $0x4,%esp
f0112830:	68 68 a3 12 f0       	push   $0xf012a368
f0112835:	68 24 02 00 00       	push   $0x224
f011283a:	68 22 9e 12 f0       	push   $0xf0129e22
f011283f:	e8 73 dc fe ff       	call   f01004b7 <_warn>
f0112844:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112847:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f011284e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112852:	74 04                	je     f0112858 <test_cut_paste_pages+0x3be>
f0112854:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112858:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f011285f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112862:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f0112865:	6a 02                	push   $0x2
f0112867:	68 00 f0 bf 02       	push   $0x2bff000
f011286c:	68 00 10 90 02       	push   $0x2901000
f0112871:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112874:	e8 57 6e ff ff       	call   f01096d0 <cut_paste_pages>
f0112879:	83 c4 10             	add    $0x10,%esp
f011287c:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f011287f:	e8 85 b1 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0112884:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f0112887:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f011288b:	75 0b                	jne    f0112898 <test_cut_paste_pages+0x3fe>
f011288d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112890:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112893:	83 f8 01             	cmp    $0x1,%eax
f0112896:	74 2b                	je     f01128c3 <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112898:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011289b:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011289e:	83 ec 0c             	sub    $0xc,%esp
f01128a1:	50                   	push   %eax
f01128a2:	ff 75 b4             	pushl  -0x4c(%ebp)
f01128a5:	68 c8 a2 12 f0       	push   $0xf012a2c8
f01128aa:	68 35 02 00 00       	push   $0x235
f01128af:	68 22 9e 12 f0       	push   $0xf0129e22
f01128b4:	e8 fe db fe ff       	call   f01004b7 <_warn>
f01128b9:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f01128bc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01128c3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01128c7:	74 04                	je     f01128cd <test_cut_paste_pages+0x433>
f01128c9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01128cd:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f01128d4:	83 ec 08             	sub    $0x8,%esp
f01128d7:	6a 00                	push   $0x0
f01128d9:	6a 01                	push   $0x1
f01128db:	6a 00                	push   $0x0
f01128dd:	68 ff 0f 00 00       	push   $0xfff
f01128e2:	ff 75 bc             	pushl  -0x44(%ebp)
f01128e5:	6a 01                	push   $0x1
f01128e7:	68 00 20 00 00       	push   $0x2000
f01128ec:	68 00 f0 bf 02       	push   $0x2bff000
f01128f1:	68 00 10 90 02       	push   $0x2901000
f01128f6:	ff 75 d4             	pushl  -0x2c(%ebp)
f01128f9:	e8 86 45 00 00       	call   f0116e84 <CCP>
f01128fe:	83 c4 30             	add    $0x30,%esp
f0112901:	83 f8 01             	cmp    $0x1,%eax
f0112904:	74 21                	je     f0112927 <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112906:	83 ec 04             	sub    $0x4,%esp
f0112909:	68 1c a3 12 f0       	push   $0xf012a31c
f011290e:	68 3d 02 00 00       	push   $0x23d
f0112913:	68 22 9e 12 f0       	push   $0xf0129e22
f0112918:	e8 9a db fe ff       	call   f01004b7 <_warn>
f011291d:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112920:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112927:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011292b:	74 04                	je     f0112931 <test_cut_paste_pages+0x497>
f011292d:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112931:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f0112938:	83 ec 04             	sub    $0x4,%esp
f011293b:	6a 00                	push   $0x0
f011293d:	68 ff f7 bf 02       	push   $0x2bff7ff
f0112942:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112945:	e8 cb 3f 00 00       	call   f0116915 <CB>
f011294a:	83 c4 10             	add    $0x10,%esp
f011294d:	85 c0                	test   %eax,%eax
f011294f:	74 6b                	je     f01129bc <test_cut_paste_pages+0x522>
f0112951:	83 ec 04             	sub    $0x4,%esp
f0112954:	6a 00                	push   $0x0
f0112956:	68 ff 0f c0 02       	push   $0x2c00fff
f011295b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011295e:	e8 b2 3f 00 00       	call   f0116915 <CB>
f0112963:	83 c4 10             	add    $0x10,%esp
f0112966:	85 c0                	test   %eax,%eax
f0112968:	74 52                	je     f01129bc <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f011296a:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0112971:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f0112978:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011297b:	8a 00                	mov    (%eax),%al
f011297d:	3c 79                	cmp    $0x79,%al
f011297f:	75 09                	jne    f011298a <test_cut_paste_pages+0x4f0>
f0112981:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112984:	8a 00                	mov    (%eax),%al
f0112986:	3c 63                	cmp    $0x63,%al
f0112988:	74 21                	je     f01129ab <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011298a:	83 ec 04             	sub    $0x4,%esp
f011298d:	68 68 a3 12 f0       	push   $0xf012a368
f0112992:	68 49 02 00 00       	push   $0x249
f0112997:	68 22 9e 12 f0       	push   $0xf0129e22
f011299c:	e8 16 db fe ff       	call   f01004b7 <_warn>
f01129a1:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01129a4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01129ab:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01129af:	74 04                	je     f01129b5 <test_cut_paste_pages+0x51b>
f01129b1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01129b5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f01129bc:	83 ec 0c             	sub    $0xc,%esp
f01129bf:	68 a1 a3 12 f0       	push   $0xf012a3a1
f01129c4:	e8 a3 e5 fe ff       	call   f0100f6c <cprintf>
f01129c9:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f01129cc:	83 ec 0c             	sub    $0xc,%esp
f01129cf:	68 b0 a3 12 f0       	push   $0xf012a3b0
f01129d4:	e8 93 e5 fe ff       	call   f0100f6c <cprintf>
f01129d9:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f01129dc:	83 ec 04             	sub    $0x4,%esp
f01129df:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f01129e5:	50                   	push   %eax
f01129e6:	68 d9 a3 12 f0       	push   $0xf012a3d9
f01129eb:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01129f1:	50                   	push   %eax
f01129f2:	e8 12 e4 00 00       	call   f0120e09 <strcconcat>
f01129f7:	83 c4 10             	add    $0x10,%esp
f01129fa:	83 ec 0c             	sub    $0xc,%esp
f01129fd:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f0112a03:	50                   	push   %eax
f0112a04:	e8 d3 f4 fe ff       	call   f0101edc <execute_command>
f0112a09:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f0112a0c:	83 ec 04             	sub    $0x4,%esp
f0112a0f:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0112a15:	50                   	push   %eax
f0112a16:	68 e4 a3 12 f0       	push   $0xf012a3e4
f0112a1b:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112a21:	50                   	push   %eax
f0112a22:	e8 e2 e3 00 00       	call   f0120e09 <strcconcat>
f0112a27:	83 c4 10             	add    $0x10,%esp
f0112a2a:	83 ec 0c             	sub    $0xc,%esp
f0112a2d:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f0112a33:	50                   	push   %eax
f0112a34:	e8 a3 f4 fe ff       	call   f0101edc <execute_command>
f0112a39:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f0112a3c:	83 ec 04             	sub    $0x4,%esp
f0112a3f:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112a45:	50                   	push   %eax
f0112a46:	68 ef a3 12 f0       	push   $0xf012a3ef
f0112a4b:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112a51:	50                   	push   %eax
f0112a52:	e8 b2 e3 00 00       	call   f0120e09 <strcconcat>
f0112a57:	83 c4 10             	add    $0x10,%esp
f0112a5a:	83 ec 0c             	sub    $0xc,%esp
f0112a5d:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f0112a63:	50                   	push   %eax
f0112a64:	e8 73 f4 fe ff       	call   f0101edc <execute_command>
f0112a69:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f0112a6c:	83 ec 04             	sub    $0x4,%esp
f0112a6f:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112a75:	50                   	push   %eax
f0112a76:	68 fa a3 12 f0       	push   $0xf012a3fa
f0112a7b:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0112a81:	50                   	push   %eax
f0112a82:	e8 82 e3 00 00       	call   f0120e09 <strcconcat>
f0112a87:	83 c4 10             	add    $0x10,%esp
f0112a8a:	83 ec 0c             	sub    $0xc,%esp
f0112a8d:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f0112a93:	50                   	push   %eax
f0112a94:	e8 43 f4 fe ff       	call   f0101edc <execute_command>
f0112a99:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f0112a9c:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f0112aa3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112aa6:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f0112aa9:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f0112ab0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112ab3:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f0112ab6:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f0112abd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112ac0:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f0112ac3:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f0112aca:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112acd:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f0112ad0:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f0112ad7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112ada:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f0112add:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f0112ae4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112ae7:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f0112aea:	83 ec 08             	sub    $0x8,%esp
f0112aed:	68 00 00 c0 01       	push   $0x1c00000
f0112af2:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112af5:	e8 bd 42 00 00       	call   f0116db7 <GP>
f0112afa:	83 c4 10             	add    $0x10,%esp
f0112afd:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f0112b00:	83 ec 08             	sub    $0x8,%esp
f0112b03:	68 00 00 40 01       	push   $0x1400000
f0112b08:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b0b:	e8 a7 42 00 00       	call   f0116db7 <GP>
f0112b10:	83 c4 10             	add    $0x10,%esp
f0112b13:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f0112b16:	e8 ee ae ff ff       	call   f010da09 <sys_calculate_free_frames>
f0112b1b:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f0112b1e:	6a 01                	push   $0x1
f0112b20:	68 00 00 40 01       	push   $0x1400000
f0112b25:	68 00 00 c0 01       	push   $0x1c00000
f0112b2a:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112b2d:	e8 9e 6b ff ff       	call   f01096d0 <cut_paste_pages>
f0112b32:	83 c4 10             	add    $0x10,%esp
f0112b35:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112b38:	e8 cc ae ff ff       	call   f010da09 <sys_calculate_free_frames>
f0112b3d:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0112b40:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112b44:	75 08                	jne    f0112b4e <test_cut_paste_pages+0x6b4>
f0112b46:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112b49:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112b4c:	74 2b                	je     f0112b79 <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112b4e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112b51:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112b54:	83 ec 0c             	sub    $0xc,%esp
f0112b57:	50                   	push   %eax
f0112b58:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112b5b:	68 08 a4 12 f0       	push   $0xf012a408
f0112b60:	68 6c 02 00 00       	push   $0x26c
f0112b65:	68 22 9e 12 f0       	push   $0xf0129e22
f0112b6a:	e8 48 d9 fe ff       	call   f01004b7 <_warn>
f0112b6f:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112b72:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112b79:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112b7d:	74 04                	je     f0112b83 <test_cut_paste_pages+0x6e9>
f0112b7f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112b83:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f0112b8a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f0112b91:	83 ec 08             	sub    $0x8,%esp
f0112b94:	6a 00                	push   $0x0
f0112b96:	68 ff 0f 00 00       	push   $0xfff
f0112b9b:	ff 75 a4             	pushl  -0x5c(%ebp)
f0112b9e:	68 ff 0f 00 00       	push   $0xfff
f0112ba3:	ff 75 a0             	pushl  -0x60(%ebp)
f0112ba6:	6a 01                	push   $0x1
f0112ba8:	68 00 10 00 00       	push   $0x1000
f0112bad:	68 00 00 40 01       	push   $0x1400000
f0112bb2:	68 00 00 c0 01       	push   $0x1c00000
f0112bb7:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112bba:	e8 c5 42 00 00       	call   f0116e84 <CCP>
f0112bbf:	83 c4 30             	add    $0x30,%esp
f0112bc2:	83 f8 01             	cmp    $0x1,%eax
f0112bc5:	74 28                	je     f0112bef <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0112bc7:	83 ec 04             	sub    $0x4,%esp
f0112bca:	68 1c a3 12 f0       	push   $0xf012a31c
f0112bcf:	68 75 02 00 00       	push   $0x275
f0112bd4:	68 22 9e 12 f0       	push   $0xf0129e22
f0112bd9:	e8 d9 d8 fe ff       	call   f01004b7 <_warn>
f0112bde:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112be1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112be8:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112bef:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112bf3:	74 04                	je     f0112bf9 <test_cut_paste_pages+0x75f>
f0112bf5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112bf9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112c00:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112c04:	0f 84 92 00 00 00    	je     f0112c9c <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f0112c0a:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112c11:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112c18:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112c1f:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112c26:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112c2d:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112c34:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112c37:	8a 00                	mov    (%eax),%al
f0112c39:	3c 61                	cmp    $0x61,%al
f0112c3b:	75 2d                	jne    f0112c6a <test_cut_paste_pages+0x7d0>
f0112c3d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112c40:	8a 00                	mov    (%eax),%al
f0112c42:	3c 78                	cmp    $0x78,%al
f0112c44:	75 24                	jne    f0112c6a <test_cut_paste_pages+0x7d0>
f0112c46:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112c49:	8a 00                	mov    (%eax),%al
f0112c4b:	3c 62                	cmp    $0x62,%al
f0112c4d:	75 1b                	jne    f0112c6a <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112c4f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112c52:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112c54:	3c 79                	cmp    $0x79,%al
f0112c56:	75 12                	jne    f0112c6a <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112c58:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112c5b:	8a 00                	mov    (%eax),%al
f0112c5d:	3c 63                	cmp    $0x63,%al
f0112c5f:	75 09                	jne    f0112c6a <test_cut_paste_pages+0x7d0>
f0112c61:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112c64:	8a 00                	mov    (%eax),%al
f0112c66:	3c 7a                	cmp    $0x7a,%al
f0112c68:	74 21                	je     f0112c8b <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112c6a:	83 ec 04             	sub    $0x4,%esp
f0112c6d:	68 68 a3 12 f0       	push   $0xf012a368
f0112c72:	68 87 02 00 00       	push   $0x287
f0112c77:	68 22 9e 12 f0       	push   $0xf0129e22
f0112c7c:	e8 36 d8 fe ff       	call   f01004b7 <_warn>
f0112c81:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112c84:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0112c8b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112c8f:	74 04                	je     f0112c95 <test_cut_paste_pages+0x7fb>
f0112c91:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112c95:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f0112c9c:	e8 68 ad ff ff       	call   f010da09 <sys_calculate_free_frames>
f0112ca1:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f0112ca4:	6a 03                	push   $0x3
f0112ca6:	68 00 f0 bf 01       	push   $0x1bff000
f0112cab:	68 00 00 40 01       	push   $0x1400000
f0112cb0:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112cb3:	e8 18 6a ff ff       	call   f01096d0 <cut_paste_pages>
f0112cb8:	83 c4 10             	add    $0x10,%esp
f0112cbb:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0112cbe:	e8 46 ad ff ff       	call   f010da09 <sys_calculate_free_frames>
f0112cc3:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0112cc6:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f0112cca:	75 08                	jne    f0112cd4 <test_cut_paste_pages+0x83a>
f0112ccc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112ccf:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0112cd2:	74 2b                	je     f0112cff <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0112cd4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112cd7:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0112cda:	83 ec 0c             	sub    $0xc,%esp
f0112cdd:	50                   	push   %eax
f0112cde:	ff 75 b4             	pushl  -0x4c(%ebp)
f0112ce1:	68 08 a4 12 f0       	push   $0xf012a408
f0112ce6:	68 96 02 00 00       	push   $0x296
f0112ceb:	68 22 9e 12 f0       	push   $0xf0129e22
f0112cf0:	e8 c2 d7 fe ff       	call   f01004b7 <_warn>
f0112cf5:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0112cf8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0112cff:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112d03:	74 04                	je     f0112d09 <test_cut_paste_pages+0x86f>
f0112d05:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0112d09:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0112d10:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112d17:	83 ec 04             	sub    $0x4,%esp
f0112d1a:	6a 00                	push   $0x0
f0112d1c:	68 00 00 40 01       	push   $0x1400000
f0112d21:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112d24:	e8 ec 3b 00 00       	call   f0116915 <CB>
f0112d29:	83 c4 10             	add    $0x10,%esp
f0112d2c:	83 f8 01             	cmp    $0x1,%eax
f0112d2f:	0f 85 80 00 00 00    	jne    f0112db5 <test_cut_paste_pages+0x91b>
f0112d35:	83 ec 04             	sub    $0x4,%esp
f0112d38:	6a 00                	push   $0x0
f0112d3a:	68 00 10 40 01       	push   $0x1401000
f0112d3f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112d42:	e8 ce 3b 00 00       	call   f0116915 <CB>
f0112d47:	83 c4 10             	add    $0x10,%esp
f0112d4a:	83 f8 01             	cmp    $0x1,%eax
f0112d4d:	75 66                	jne    f0112db5 <test_cut_paste_pages+0x91b>
f0112d4f:	83 ec 04             	sub    $0x4,%esp
f0112d52:	6a 00                	push   $0x0
f0112d54:	68 00 20 40 01       	push   $0x1402000
f0112d59:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112d5c:	e8 b4 3b 00 00       	call   f0116915 <CB>
f0112d61:	83 c4 10             	add    $0x10,%esp
f0112d64:	83 f8 01             	cmp    $0x1,%eax
f0112d67:	75 4c                	jne    f0112db5 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112d69:	83 ec 04             	sub    $0x4,%esp
f0112d6c:	6a 00                	push   $0x0
f0112d6e:	68 00 f0 bf 01       	push   $0x1bff000
f0112d73:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112d76:	e8 9a 3b 00 00       	call   f0116915 <CB>
f0112d7b:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f0112d7e:	85 c0                	test   %eax,%eax
f0112d80:	75 33                	jne    f0112db5 <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0112d82:	83 ec 04             	sub    $0x4,%esp
f0112d85:	6a 00                	push   $0x0
f0112d87:	68 00 00 c0 01       	push   $0x1c00000
f0112d8c:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112d8f:	e8 81 3b 00 00       	call   f0116915 <CB>
f0112d94:	83 c4 10             	add    $0x10,%esp
f0112d97:	83 f8 01             	cmp    $0x1,%eax
f0112d9a:	75 19                	jne    f0112db5 <test_cut_paste_pages+0x91b>
f0112d9c:	83 ec 04             	sub    $0x4,%esp
f0112d9f:	6a 00                	push   $0x0
f0112da1:	68 00 10 c0 01       	push   $0x1c01000
f0112da6:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112da9:	e8 67 3b 00 00       	call   f0116915 <CB>
f0112dae:	83 c4 10             	add    $0x10,%esp
f0112db1:	85 c0                	test   %eax,%eax
f0112db3:	74 28                	je     f0112ddd <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f0112db5:	83 ec 04             	sub    $0x4,%esp
f0112db8:	68 68 a4 12 f0       	push   $0xf012a468
f0112dbd:	68 9f 02 00 00       	push   $0x29f
f0112dc2:	68 22 9e 12 f0       	push   $0xf0129e22
f0112dc7:	e8 eb d6 fe ff       	call   f01004b7 <_warn>
f0112dcc:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0112dcf:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f0112dd6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0112ddd:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112de1:	74 04                	je     f0112de7 <test_cut_paste_pages+0x94d>
f0112de3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0112de7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0112dee:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112df2:	0f 84 99 00 00 00    	je     f0112e91 <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f0112df8:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0112dff:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f0112e06:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0112e0d:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f0112e14:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0112e1b:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112e22:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112e25:	8a 00                	mov    (%eax),%al
f0112e27:	3c 61                	cmp    $0x61,%al
f0112e29:	75 2d                	jne    f0112e58 <test_cut_paste_pages+0x9be>
f0112e2b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0112e2e:	8a 00                	mov    (%eax),%al
f0112e30:	3c 78                	cmp    $0x78,%al
f0112e32:	75 24                	jne    f0112e58 <test_cut_paste_pages+0x9be>
f0112e34:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112e37:	8a 00                	mov    (%eax),%al
f0112e39:	3c 62                	cmp    $0x62,%al
f0112e3b:	75 1b                	jne    f0112e58 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112e3d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112e40:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0112e42:	3c 79                	cmp    $0x79,%al
f0112e44:	75 12                	jne    f0112e58 <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0112e46:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112e49:	8a 00                	mov    (%eax),%al
f0112e4b:	3c 63                	cmp    $0x63,%al
f0112e4d:	75 09                	jne    f0112e58 <test_cut_paste_pages+0x9be>
f0112e4f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112e52:	8a 00                	mov    (%eax),%al
f0112e54:	3c 7a                	cmp    $0x7a,%al
f0112e56:	74 28                	je     f0112e80 <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f0112e58:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0112e5f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0112e66:	83 ec 04             	sub    $0x4,%esp
f0112e69:	68 68 a3 12 f0       	push   $0xf012a368
f0112e6e:	68 b3 02 00 00       	push   $0x2b3
f0112e73:	68 22 9e 12 f0       	push   $0xf0129e22
f0112e78:	e8 3a d6 fe ff       	call   f01004b7 <_warn>
f0112e7d:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f0112e80:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112e84:	74 04                	je     f0112e8a <test_cut_paste_pages+0x9f0>
f0112e86:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112e8a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f0112e91:	83 ec 0c             	sub    $0xc,%esp
f0112e94:	68 a1 a4 12 f0       	push   $0xf012a4a1
f0112e99:	e8 ce e0 fe ff       	call   f0100f6c <cprintf>
f0112e9e:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f0112ea1:	83 ec 08             	sub    $0x8,%esp
f0112ea4:	ff 75 e4             	pushl  -0x1c(%ebp)
f0112ea7:	68 b0 a4 12 f0       	push   $0xf012a4b0
f0112eac:	e8 bb e0 fe ff       	call   f0100f6c <cprintf>
f0112eb1:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0112eb4:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0112eb8:	75 10                	jne    f0112eca <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f0112eba:	83 ec 0c             	sub    $0xc,%esp
f0112ebd:	68 e4 a4 12 f0       	push   $0xf012a4e4
f0112ec2:	e8 a5 e0 fe ff       	call   f0100f6c <cprintf>
f0112ec7:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0112eca:	a1 e4 51 55 f0       	mov    0xf05551e4,%eax
f0112ecf:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0112ed2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112ed5:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0112ed8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112edd:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112ee0:	5b                   	pop    %ebx
f0112ee1:	5e                   	pop    %esi
f0112ee2:	5f                   	pop    %edi
f0112ee3:	5d                   	pop    %ebp
f0112ee4:	c3                   	ret    

f0112ee5 <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f0112ee5:	55                   	push   %ebp
f0112ee6:	89 e5                	mov    %esp,%ebp
f0112ee8:	57                   	push   %edi
f0112ee9:	56                   	push   %esi
f0112eea:	53                   	push   %ebx
f0112eeb:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112ef1:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112ef7:	bb 24 a5 12 f0       	mov    $0xf012a524,%ebx
f0112efc:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112f01:	89 c7                	mov    %eax,%edi
f0112f03:	89 de                	mov    %ebx,%esi
f0112f05:	89 d1                	mov    %edx,%ecx
f0112f07:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112f09:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0112f0f:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112f14:	b0 00                	mov    $0x0,%al
f0112f16:	89 d7                	mov    %edx,%edi
f0112f18:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0112f1a:	6a 00                	push   $0x0
f0112f1c:	6a 0a                	push   $0xa
f0112f1e:	6a 14                	push   $0x14
f0112f20:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f0112f26:	50                   	push   %eax
f0112f27:	e8 44 6b ff ff       	call   f0109a70 <env_create>
f0112f2c:	83 c4 10             	add    $0x10,%esp
f0112f2f:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112f32:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112f35:	8b 40 64             	mov    0x64(%eax),%eax
f0112f38:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0112f3b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112f3e:	8b 40 68             	mov    0x68(%eax),%eax
f0112f41:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0112f47:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0112f4d:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0112f50:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f0112f57:	75 70 20 
f0112f5a:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0112f61:	00 00 00 
f0112f64:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0112f6a:	b9 03 00 00 00       	mov    $0x3,%ecx
f0112f6f:	b8 00 00 00 00       	mov    $0x0,%eax
f0112f74:	89 d7                	mov    %edx,%edi
f0112f76:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0112f78:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0112f7b:	8b 40 10             	mov    0x10(%eax),%eax
f0112f7e:	83 ec 08             	sub    $0x8,%esp
f0112f81:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f0112f87:	52                   	push   %edx
f0112f88:	50                   	push   %eax
f0112f89:	e8 a2 dd 00 00       	call   f0120d30 <ltostr>
f0112f8e:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0112f91:	83 ec 04             	sub    $0x4,%esp
f0112f94:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112f9a:	50                   	push   %eax
f0112f9b:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f0112fa1:	50                   	push   %eax
f0112fa2:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f0112fa8:	50                   	push   %eax
f0112fa9:	e8 5b de 00 00       	call   f0120e09 <strcconcat>
f0112fae:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f0112fb1:	83 ec 0c             	sub    $0xc,%esp
f0112fb4:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112fb7:	e8 94 3e 00 00       	call   f0116e50 <ClearUserSpace>
f0112fbc:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f0112fbf:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f0112fc6:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f0112fcd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0112fd4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0112fdb:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0112fe2:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0112fe9:	83 ec 0c             	sub    $0xc,%esp
f0112fec:	68 58 a5 12 f0       	push   $0xf012a558
f0112ff1:	e8 76 df fe ff       	call   f0100f6c <cprintf>
f0112ff6:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0112ff9:	83 ec 04             	sub    $0x4,%esp
f0112ffc:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113002:	50                   	push   %eax
f0113003:	68 8e a5 12 f0       	push   $0xf012a58e
f0113008:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011300e:	50                   	push   %eax
f011300f:	e8 f5 dd 00 00       	call   f0120e09 <strcconcat>
f0113014:	83 c4 10             	add    $0x10,%esp
f0113017:	83 ec 0c             	sub    $0xc,%esp
f011301a:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113020:	50                   	push   %eax
f0113021:	e8 b6 ee fe ff       	call   f0101edc <execute_command>
f0113026:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0113029:	83 ec 04             	sub    $0x4,%esp
f011302c:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113032:	50                   	push   %eax
f0113033:	68 93 a5 12 f0       	push   $0xf012a593
f0113038:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011303e:	50                   	push   %eax
f011303f:	e8 c5 dd 00 00       	call   f0120e09 <strcconcat>
f0113044:	83 c4 10             	add    $0x10,%esp
f0113047:	83 ec 0c             	sub    $0xc,%esp
f011304a:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0113050:	50                   	push   %eax
f0113051:	e8 86 ee fe ff       	call   f0101edc <execute_command>
f0113056:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0113059:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f011305f:	bb 99 a8 12 f0       	mov    $0xf012a899,%ebx
f0113064:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113069:	89 c7                	mov    %eax,%edi
f011306b:	89 de                	mov    %ebx,%esi
f011306d:	89 d1                	mov    %edx,%ecx
f011306f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113071:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0113077:	b9 55 00 00 00       	mov    $0x55,%ecx
f011307c:	b0 00                	mov    $0x0,%al
f011307e:	89 d7                	mov    %edx,%edi
f0113080:	f3 aa                	rep stos %al,%es:(%edi)
f0113082:	83 ec 0c             	sub    $0xc,%esp
f0113085:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f011308b:	50                   	push   %eax
f011308c:	e8 4b ee fe ff       	call   f0101edc <execute_command>
f0113091:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f0113094:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f011309a:	bb fd a8 12 f0       	mov    $0xf012a8fd,%ebx
f011309f:	ba 0f 00 00 00       	mov    $0xf,%edx
f01130a4:	89 c7                	mov    %eax,%edi
f01130a6:	89 de                	mov    %ebx,%esi
f01130a8:	89 d1                	mov    %edx,%ecx
f01130aa:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01130ac:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f01130b2:	b9 55 00 00 00       	mov    $0x55,%ecx
f01130b7:	b0 00                	mov    $0x0,%al
f01130b9:	89 d7                	mov    %edx,%edi
f01130bb:	f3 aa                	rep stos %al,%es:(%edi)
f01130bd:	83 ec 0c             	sub    $0xc,%esp
f01130c0:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01130c6:	50                   	push   %eax
f01130c7:	e8 10 ee fe ff       	call   f0101edc <execute_command>
f01130cc:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f01130cf:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01130d5:	bb 61 a9 12 f0       	mov    $0xf012a961,%ebx
f01130da:	ba 0f 00 00 00       	mov    $0xf,%edx
f01130df:	89 c7                	mov    %eax,%edi
f01130e1:	89 de                	mov    %ebx,%esi
f01130e3:	89 d1                	mov    %edx,%ecx
f01130e5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01130e7:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f01130ed:	b9 55 00 00 00       	mov    $0x55,%ecx
f01130f2:	b0 00                	mov    $0x0,%al
f01130f4:	89 d7                	mov    %edx,%edi
f01130f6:	f3 aa                	rep stos %al,%es:(%edi)
f01130f8:	83 ec 0c             	sub    $0xc,%esp
f01130fb:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0113101:	50                   	push   %eax
f0113102:	e8 d5 ed fe ff       	call   f0101edc <execute_command>
f0113107:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f011310a:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0113110:	bb c5 a9 12 f0       	mov    $0xf012a9c5,%ebx
f0113115:	ba 0f 00 00 00       	mov    $0xf,%edx
f011311a:	89 c7                	mov    %eax,%edi
f011311c:	89 de                	mov    %ebx,%esi
f011311e:	89 d1                	mov    %edx,%ecx
f0113120:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113122:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0113128:	b9 55 00 00 00       	mov    $0x55,%ecx
f011312d:	b0 00                	mov    $0x0,%al
f011312f:	89 d7                	mov    %edx,%edi
f0113131:	f3 aa                	rep stos %al,%es:(%edi)
f0113133:	83 ec 0c             	sub    $0xc,%esp
f0113136:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f011313c:	50                   	push   %eax
f011313d:	e8 9a ed fe ff       	call   f0101edc <execute_command>
f0113142:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f0113145:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011314b:	bb 29 aa 12 f0       	mov    $0xf012aa29,%ebx
f0113150:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113155:	89 c7                	mov    %eax,%edi
f0113157:	89 de                	mov    %ebx,%esi
f0113159:	89 d1                	mov    %edx,%ecx
f011315b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011315d:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0113163:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113168:	b0 00                	mov    $0x0,%al
f011316a:	89 d7                	mov    %edx,%edi
f011316c:	f3 aa                	rep stos %al,%es:(%edi)
f011316e:	83 ec 0c             	sub    $0xc,%esp
f0113171:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0113177:	50                   	push   %eax
f0113178:	e8 5f ed fe ff       	call   f0101edc <execute_command>
f011317d:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f0113180:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0113186:	bb 8d aa 12 f0       	mov    $0xf012aa8d,%ebx
f011318b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113190:	89 c7                	mov    %eax,%edi
f0113192:	89 de                	mov    %ebx,%esi
f0113194:	89 d1                	mov    %edx,%ecx
f0113196:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113198:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f011319e:	b9 55 00 00 00       	mov    $0x55,%ecx
f01131a3:	b0 00                	mov    $0x0,%al
f01131a5:	89 d7                	mov    %edx,%edi
f01131a7:	f3 aa                	rep stos %al,%es:(%edi)
f01131a9:	83 ec 0c             	sub    $0xc,%esp
f01131ac:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01131b2:	50                   	push   %eax
f01131b3:	e8 24 ed fe ff       	call   f0101edc <execute_command>
f01131b8:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f01131bb:	83 ec 04             	sub    $0x4,%esp
f01131be:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01131c4:	50                   	push   %eax
f01131c5:	68 9b a5 12 f0       	push   $0xf012a59b
f01131ca:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01131d0:	50                   	push   %eax
f01131d1:	e8 33 dc 00 00       	call   f0120e09 <strcconcat>
f01131d6:	83 c4 10             	add    $0x10,%esp
f01131d9:	83 ec 0c             	sub    $0xc,%esp
f01131dc:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01131e2:	50                   	push   %eax
f01131e3:	e8 f4 ec fe ff       	call   f0101edc <execute_command>
f01131e8:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f01131eb:	83 ec 04             	sub    $0x4,%esp
f01131ee:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01131f4:	50                   	push   %eax
f01131f5:	68 a5 a5 12 f0       	push   $0xf012a5a5
f01131fa:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113200:	50                   	push   %eax
f0113201:	e8 03 dc 00 00       	call   f0120e09 <strcconcat>
f0113206:	83 c4 10             	add    $0x10,%esp
f0113209:	83 ec 0c             	sub    $0xc,%esp
f011320c:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113212:	50                   	push   %eax
f0113213:	e8 c4 ec fe ff       	call   f0101edc <execute_command>
f0113218:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f011321b:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113221:	bb f1 aa 12 f0       	mov    $0xf012aaf1,%ebx
f0113226:	ba 0f 00 00 00       	mov    $0xf,%edx
f011322b:	89 c7                	mov    %eax,%edi
f011322d:	89 de                	mov    %ebx,%esi
f011322f:	89 d1                	mov    %edx,%ecx
f0113231:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113233:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0113239:	b9 55 00 00 00       	mov    $0x55,%ecx
f011323e:	b0 00                	mov    $0x0,%al
f0113240:	89 d7                	mov    %edx,%edi
f0113242:	f3 aa                	rep stos %al,%es:(%edi)
f0113244:	83 ec 0c             	sub    $0xc,%esp
f0113247:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f011324d:	50                   	push   %eax
f011324e:	e8 89 ec fe ff       	call   f0101edc <execute_command>
f0113253:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f0113256:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011325c:	bb 55 ab 12 f0       	mov    $0xf012ab55,%ebx
f0113261:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113266:	89 c7                	mov    %eax,%edi
f0113268:	89 de                	mov    %ebx,%esi
f011326a:	89 d1                	mov    %edx,%ecx
f011326c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011326e:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0113274:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113279:	b0 00                	mov    $0x0,%al
f011327b:	89 d7                	mov    %edx,%edi
f011327d:	f3 aa                	rep stos %al,%es:(%edi)
f011327f:	83 ec 0c             	sub    $0xc,%esp
f0113282:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113288:	50                   	push   %eax
f0113289:	e8 4e ec fe ff       	call   f0101edc <execute_command>
f011328e:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f0113291:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113297:	bb b9 ab 12 f0       	mov    $0xf012abb9,%ebx
f011329c:	ba 0f 00 00 00       	mov    $0xf,%edx
f01132a1:	89 c7                	mov    %eax,%edi
f01132a3:	89 de                	mov    %ebx,%esi
f01132a5:	89 d1                	mov    %edx,%ecx
f01132a7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01132a9:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01132af:	b9 55 00 00 00       	mov    $0x55,%ecx
f01132b4:	b0 00                	mov    $0x0,%al
f01132b6:	89 d7                	mov    %edx,%edi
f01132b8:	f3 aa                	rep stos %al,%es:(%edi)
f01132ba:	83 ec 0c             	sub    $0xc,%esp
f01132bd:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01132c3:	50                   	push   %eax
f01132c4:	e8 13 ec fe ff       	call   f0101edc <execute_command>
f01132c9:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f01132cc:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f01132d3:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f01132da:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f01132e1:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f01132e8:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f01132ef:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f01132f6:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01132fd:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0113304:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f011330b:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0113312:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f0113319:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0113320:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113323:	8a 00                	mov    (%eax),%al
f0113325:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f011332b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011332e:	8a 00                	mov    (%eax),%al
f0113330:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0113336:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113339:	8a 00                	mov    (%eax),%al
f011333b:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113341:	e8 c3 a6 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0113346:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f0113349:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011334c:	89 d0                	mov    %edx,%eax
f011334e:	01 c0                	add    %eax,%eax
f0113350:	01 d0                	add    %edx,%eax
f0113352:	01 c0                	add    %eax,%eax
f0113354:	50                   	push   %eax
f0113355:	68 00 00 10 00       	push   $0x100000
f011335a:	6a 00                	push   $0x0
f011335c:	ff 75 d4             	pushl  -0x2c(%ebp)
f011335f:	e8 86 63 ff ff       	call   f01096ea <copy_paste_chunk>
f0113364:	83 c4 10             	add    $0x10,%esp
f0113367:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011336a:	e8 9a a6 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011336f:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0113372:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113379:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f011337d:	75 08                	jne    f0113387 <test_copy_paste_chunk+0x4a2>
f011337f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113382:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0113385:	74 2b                	je     f01133b2 <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113387:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011338a:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011338d:	83 ec 0c             	sub    $0xc,%esp
f0113390:	50                   	push   %eax
f0113391:	ff 75 88             	pushl  -0x78(%ebp)
f0113394:	68 b4 a5 12 f0       	push   $0xf012a5b4
f0113399:	68 06 03 00 00       	push   $0x306
f011339e:	68 22 9e 12 f0       	push   $0xf0129e22
f01133a3:	e8 0f d1 fe ff       	call   f01004b7 <_warn>
f01133a8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01133ab:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01133b2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01133b6:	74 04                	je     f01133bc <test_copy_paste_chunk+0x4d7>
f01133b8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01133bc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f01133c3:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01133c6:	8a 00                	mov    (%eax),%al
f01133c8:	3c 61                	cmp    $0x61,%al
f01133ca:	75 75                	jne    f0113441 <test_copy_paste_chunk+0x55c>
f01133cc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01133cf:	8a 00                	mov    (%eax),%al
f01133d1:	3c 78                	cmp    $0x78,%al
f01133d3:	75 6c                	jne    f0113441 <test_copy_paste_chunk+0x55c>
f01133d5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01133d8:	8a 00                	mov    (%eax),%al
f01133da:	3c 62                	cmp    $0x62,%al
f01133dc:	75 63                	jne    f0113441 <test_copy_paste_chunk+0x55c>
f01133de:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01133e1:	8a 00                	mov    (%eax),%al
f01133e3:	3c 79                	cmp    $0x79,%al
f01133e5:	75 5a                	jne    f0113441 <test_copy_paste_chunk+0x55c>
f01133e7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01133ea:	8a 00                	mov    (%eax),%al
f01133ec:	3c 63                	cmp    $0x63,%al
f01133ee:	75 51                	jne    f0113441 <test_copy_paste_chunk+0x55c>
f01133f0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01133f3:	8a 00                	mov    (%eax),%al
f01133f5:	3c 7a                	cmp    $0x7a,%al
f01133f7:	75 48                	jne    f0113441 <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f01133f9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01133fc:	8a 00                	mov    (%eax),%al
f01133fe:	3c 64                	cmp    $0x64,%al
f0113400:	75 3f                	jne    f0113441 <test_copy_paste_chunk+0x55c>
f0113402:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113405:	8a 10                	mov    (%eax),%dl
f0113407:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f011340d:	38 c2                	cmp    %al,%dl
f011340f:	75 30                	jne    f0113441 <test_copy_paste_chunk+0x55c>
f0113411:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113414:	8a 00                	mov    (%eax),%al
f0113416:	3c 65                	cmp    $0x65,%al
f0113418:	75 27                	jne    f0113441 <test_copy_paste_chunk+0x55c>
f011341a:	8b 45 98             	mov    -0x68(%ebp),%eax
f011341d:	8a 10                	mov    (%eax),%dl
f011341f:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0113425:	38 c2                	cmp    %al,%dl
f0113427:	75 18                	jne    f0113441 <test_copy_paste_chunk+0x55c>
f0113429:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011342c:	8a 00                	mov    (%eax),%al
f011342e:	3c 66                	cmp    $0x66,%al
f0113430:	75 0f                	jne    f0113441 <test_copy_paste_chunk+0x55c>
f0113432:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113435:	8a 10                	mov    (%eax),%dl
f0113437:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f011343d:	38 c2                	cmp    %al,%dl
f011343f:	74 21                	je     f0113462 <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113441:	83 ec 04             	sub    $0x4,%esp
f0113444:	68 18 a6 12 f0       	push   $0xf012a618
f0113449:	68 0f 03 00 00       	push   $0x30f
f011344e:	68 22 9e 12 f0       	push   $0xf0129e22
f0113453:	e8 5f d0 fe ff       	call   f01004b7 <_warn>
f0113458:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011345b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113462:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113466:	74 04                	je     f011346c <test_copy_paste_chunk+0x587>
f0113468:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011346c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0113473:	83 ec 0c             	sub    $0xc,%esp
f0113476:	68 52 a6 12 f0       	push   $0xf012a652
f011347b:	e8 ec da fe ff       	call   f0100f6c <cprintf>
f0113480:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0113483:	83 ec 0c             	sub    $0xc,%esp
f0113486:	68 64 a6 12 f0       	push   $0xf012a664
f011348b:	e8 dc da fe ff       	call   f0100f6c <cprintf>
f0113490:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0113493:	83 ec 04             	sub    $0x4,%esp
f0113496:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f011349c:	50                   	push   %eax
f011349d:	68 9a a6 12 f0       	push   $0xf012a69a
f01134a2:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01134a8:	50                   	push   %eax
f01134a9:	e8 5b d9 00 00       	call   f0120e09 <strcconcat>
f01134ae:	83 c4 10             	add    $0x10,%esp
f01134b1:	83 ec 0c             	sub    $0xc,%esp
f01134b4:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01134ba:	50                   	push   %eax
f01134bb:	e8 1c ea fe ff       	call   f0101edc <execute_command>
f01134c0:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f01134c3:	83 ec 04             	sub    $0x4,%esp
f01134c6:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01134cc:	50                   	push   %eax
f01134cd:	68 a4 a6 12 f0       	push   $0xf012a6a4
f01134d2:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01134d8:	50                   	push   %eax
f01134d9:	e8 2b d9 00 00       	call   f0120e09 <strcconcat>
f01134de:	83 c4 10             	add    $0x10,%esp
f01134e1:	83 ec 0c             	sub    $0xc,%esp
f01134e4:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f01134ea:	50                   	push   %eax
f01134eb:	e8 ec e9 fe ff       	call   f0101edc <execute_command>
f01134f0:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f01134f3:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01134f9:	bb 1d ac 12 f0       	mov    $0xf012ac1d,%ebx
f01134fe:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113503:	89 c7                	mov    %eax,%edi
f0113505:	89 de                	mov    %ebx,%esi
f0113507:	89 d1                	mov    %edx,%ecx
f0113509:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011350b:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0113511:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113516:	b0 00                	mov    $0x0,%al
f0113518:	89 d7                	mov    %edx,%edi
f011351a:	f3 aa                	rep stos %al,%es:(%edi)
f011351c:	83 ec 0c             	sub    $0xc,%esp
f011351f:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0113525:	50                   	push   %eax
f0113526:	e8 b1 e9 fe ff       	call   f0101edc <execute_command>
f011352b:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f011352e:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0113534:	bb 81 ac 12 f0       	mov    $0xf012ac81,%ebx
f0113539:	ba 0f 00 00 00       	mov    $0xf,%edx
f011353e:	89 c7                	mov    %eax,%edi
f0113540:	89 de                	mov    %ebx,%esi
f0113542:	89 d1                	mov    %edx,%ecx
f0113544:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113546:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f011354c:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113551:	b0 00                	mov    $0x0,%al
f0113553:	89 d7                	mov    %edx,%edi
f0113555:	f3 aa                	rep stos %al,%es:(%edi)
f0113557:	83 ec 0c             	sub    $0xc,%esp
f011355a:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0113560:	50                   	push   %eax
f0113561:	e8 76 e9 fe ff       	call   f0101edc <execute_command>
f0113566:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f0113569:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f011356f:	bb e5 ac 12 f0       	mov    $0xf012ace5,%ebx
f0113574:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113579:	89 c7                	mov    %eax,%edi
f011357b:	89 de                	mov    %ebx,%esi
f011357d:	89 d1                	mov    %edx,%ecx
f011357f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113581:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0113587:	b9 55 00 00 00       	mov    $0x55,%ecx
f011358c:	b0 00                	mov    $0x0,%al
f011358e:	89 d7                	mov    %edx,%edi
f0113590:	f3 aa                	rep stos %al,%es:(%edi)
f0113592:	83 ec 0c             	sub    $0xc,%esp
f0113595:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f011359b:	50                   	push   %eax
f011359c:	e8 3b e9 fe ff       	call   f0101edc <execute_command>
f01135a1:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f01135a4:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01135aa:	bb 49 ad 12 f0       	mov    $0xf012ad49,%ebx
f01135af:	ba 0f 00 00 00       	mov    $0xf,%edx
f01135b4:	89 c7                	mov    %eax,%edi
f01135b6:	89 de                	mov    %ebx,%esi
f01135b8:	89 d1                	mov    %edx,%ecx
f01135ba:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01135bc:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f01135c2:	b9 55 00 00 00       	mov    $0x55,%ecx
f01135c7:	b0 00                	mov    $0x0,%al
f01135c9:	89 d7                	mov    %edx,%edi
f01135cb:	f3 aa                	rep stos %al,%es:(%edi)
f01135cd:	83 ec 0c             	sub    $0xc,%esp
f01135d0:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f01135d6:	50                   	push   %eax
f01135d7:	e8 00 e9 fe ff       	call   f0101edc <execute_command>
f01135dc:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f01135df:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f01135e5:	bb ad ad 12 f0       	mov    $0xf012adad,%ebx
f01135ea:	ba 0f 00 00 00       	mov    $0xf,%edx
f01135ef:	89 c7                	mov    %eax,%edi
f01135f1:	89 de                	mov    %ebx,%esi
f01135f3:	89 d1                	mov    %edx,%ecx
f01135f5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01135f7:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f01135fd:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113602:	b0 00                	mov    $0x0,%al
f0113604:	89 d7                	mov    %edx,%edi
f0113606:	f3 aa                	rep stos %al,%es:(%edi)
f0113608:	83 ec 0c             	sub    $0xc,%esp
f011360b:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0113611:	50                   	push   %eax
f0113612:	e8 c5 e8 fe ff       	call   f0101edc <execute_command>
f0113617:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f011361a:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0113620:	bb 11 ae 12 f0       	mov    $0xf012ae11,%ebx
f0113625:	ba 0f 00 00 00       	mov    $0xf,%edx
f011362a:	89 c7                	mov    %eax,%edi
f011362c:	89 de                	mov    %ebx,%esi
f011362e:	89 d1                	mov    %edx,%ecx
f0113630:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113632:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0113638:	b9 55 00 00 00       	mov    $0x55,%ecx
f011363d:	b0 00                	mov    $0x0,%al
f011363f:	89 d7                	mov    %edx,%edi
f0113641:	f3 aa                	rep stos %al,%es:(%edi)
f0113643:	83 ec 0c             	sub    $0xc,%esp
f0113646:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f011364c:	50                   	push   %eax
f011364d:	e8 8a e8 fe ff       	call   f0101edc <execute_command>
f0113652:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f0113655:	83 ec 04             	sub    $0x4,%esp
f0113658:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011365e:	50                   	push   %eax
f011365f:	68 ae a6 12 f0       	push   $0xf012a6ae
f0113664:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011366a:	50                   	push   %eax
f011366b:	e8 99 d7 00 00       	call   f0120e09 <strcconcat>
f0113670:	83 c4 10             	add    $0x10,%esp
f0113673:	83 ec 0c             	sub    $0xc,%esp
f0113676:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011367c:	50                   	push   %eax
f011367d:	e8 5a e8 fe ff       	call   f0101edc <execute_command>
f0113682:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f0113685:	83 ec 04             	sub    $0x4,%esp
f0113688:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011368e:	50                   	push   %eax
f011368f:	68 b8 a6 12 f0       	push   $0xf012a6b8
f0113694:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f011369a:	50                   	push   %eax
f011369b:	e8 69 d7 00 00       	call   f0120e09 <strcconcat>
f01136a0:	83 c4 10             	add    $0x10,%esp
f01136a3:	83 ec 0c             	sub    $0xc,%esp
f01136a6:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01136ac:	50                   	push   %eax
f01136ad:	e8 2a e8 fe ff       	call   f0101edc <execute_command>
f01136b2:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f01136b5:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01136bb:	bb 75 ae 12 f0       	mov    $0xf012ae75,%ebx
f01136c0:	ba 0f 00 00 00       	mov    $0xf,%edx
f01136c5:	89 c7                	mov    %eax,%edi
f01136c7:	89 de                	mov    %ebx,%esi
f01136c9:	89 d1                	mov    %edx,%ecx
f01136cb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01136cd:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01136d3:	b9 55 00 00 00       	mov    $0x55,%ecx
f01136d8:	b0 00                	mov    $0x0,%al
f01136da:	89 d7                	mov    %edx,%edi
f01136dc:	f3 aa                	rep stos %al,%es:(%edi)
f01136de:	83 ec 0c             	sub    $0xc,%esp
f01136e1:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01136e7:	50                   	push   %eax
f01136e8:	e8 ef e7 fe ff       	call   f0101edc <execute_command>
f01136ed:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f01136f0:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01136f6:	bb d9 ae 12 f0       	mov    $0xf012aed9,%ebx
f01136fb:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113700:	89 c7                	mov    %eax,%edi
f0113702:	89 de                	mov    %ebx,%esi
f0113704:	89 d1                	mov    %edx,%ecx
f0113706:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113708:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f011370e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113713:	b0 00                	mov    $0x0,%al
f0113715:	89 d7                	mov    %edx,%edi
f0113717:	f3 aa                	rep stos %al,%es:(%edi)
f0113719:	83 ec 0c             	sub    $0xc,%esp
f011371c:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113722:	50                   	push   %eax
f0113723:	e8 b4 e7 fe ff       	call   f0101edc <execute_command>
f0113728:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f011372b:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113731:	bb 3d af 12 f0       	mov    $0xf012af3d,%ebx
f0113736:	ba 0f 00 00 00       	mov    $0xf,%edx
f011373b:	89 c7                	mov    %eax,%edi
f011373d:	89 de                	mov    %ebx,%esi
f011373f:	89 d1                	mov    %edx,%ecx
f0113741:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113743:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113749:	b9 55 00 00 00       	mov    $0x55,%ecx
f011374e:	b0 00                	mov    $0x0,%al
f0113750:	89 d7                	mov    %edx,%edi
f0113752:	f3 aa                	rep stos %al,%es:(%edi)
f0113754:	83 ec 0c             	sub    $0xc,%esp
f0113757:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011375d:	50                   	push   %eax
f011375e:	e8 79 e7 fe ff       	call   f0101edc <execute_command>
f0113763:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f0113766:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f011376d:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f0113774:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f011377b:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f0113782:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f0113789:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f0113790:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f0113797:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f011379e:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f01137a5:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f01137ac:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f01137b3:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f01137ba:	8b 45 90             	mov    -0x70(%ebp),%eax
f01137bd:	8a 00                	mov    (%eax),%al
f01137bf:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01137c5:	e8 3f a2 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01137ca:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f01137cd:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01137d0:	89 d0                	mov    %edx,%eax
f01137d2:	01 c0                	add    %eax,%eax
f01137d4:	01 d0                	add    %edx,%eax
f01137d6:	01 c0                	add    %eax,%eax
f01137d8:	50                   	push   %eax
f01137d9:	68 00 00 40 00       	push   $0x400000
f01137de:	68 00 00 20 00       	push   $0x200000
f01137e3:	ff 75 d4             	pushl  -0x2c(%ebp)
f01137e6:	e8 ff 5e ff ff       	call   f01096ea <copy_paste_chunk>
f01137eb:	83 c4 10             	add    $0x10,%esp
f01137ee:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01137f1:	e8 13 a2 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01137f6:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f01137f9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0113800:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0113804:	75 08                	jne    f011380e <test_copy_paste_chunk+0x929>
f0113806:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113809:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011380c:	74 2b                	je     f0113839 <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011380e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113811:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113814:	83 ec 0c             	sub    $0xc,%esp
f0113817:	50                   	push   %eax
f0113818:	ff 75 80             	pushl  -0x80(%ebp)
f011381b:	68 c4 a6 12 f0       	push   $0xf012a6c4
f0113820:	68 3f 03 00 00       	push   $0x33f
f0113825:	68 22 9e 12 f0       	push   $0xf0129e22
f011382a:	e8 88 cc fe ff       	call   f01004b7 <_warn>
f011382f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113832:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113839:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011383d:	74 04                	je     f0113843 <test_copy_paste_chunk+0x95e>
f011383f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113843:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f011384a:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f0113851:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113854:	83 ec 08             	sub    $0x8,%esp
f0113857:	6a 01                	push   $0x1
f0113859:	6a 07                	push   $0x7
f011385b:	6a 07                	push   $0x7
f011385d:	6a 07                	push   $0x7
f011385f:	6a 07                	push   $0x7
f0113861:	6a 01                	push   $0x1
f0113863:	68 00 20 00 00       	push   $0x2000
f0113868:	68 00 00 40 00       	push   $0x400000
f011386d:	68 00 00 20 00       	push   $0x200000
f0113872:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113875:	e8 0a 36 00 00       	call   f0116e84 <CCP>
f011387a:	83 c4 30             	add    $0x30,%esp
f011387d:	83 f8 01             	cmp    $0x1,%eax
f0113880:	74 2b                	je     f01138ad <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f0113882:	83 ec 04             	sub    $0x4,%esp
f0113885:	68 18 a7 12 f0       	push   $0xf012a718
f011388a:	68 48 03 00 00       	push   $0x348
f011388f:	68 22 9e 12 f0       	push   $0xf0129e22
f0113894:	e8 1e cc fe ff       	call   f01004b7 <_warn>
f0113899:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011389c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f01138a3:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f01138aa:	00 00 00 
		}
		if (correct) eval += 5 ;
f01138ad:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01138b1:	74 04                	je     f01138b7 <test_copy_paste_chunk+0x9d2>
f01138b3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01138b7:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f01138be:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01138c1:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f01138c4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01138c7:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f01138ca:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01138cd:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f01138d0:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01138d3:	8a 00                	mov    (%eax),%al
f01138d5:	3c 61                	cmp    $0x61,%al
f01138d7:	75 69                	jne    f0113942 <test_copy_paste_chunk+0xa5d>
f01138d9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01138dc:	8a 00                	mov    (%eax),%al
f01138de:	3c 61                	cmp    $0x61,%al
f01138e0:	75 60                	jne    f0113942 <test_copy_paste_chunk+0xa5d>
f01138e2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01138e5:	8a 00                	mov    (%eax),%al
f01138e7:	3c 79                	cmp    $0x79,%al
f01138e9:	75 57                	jne    f0113942 <test_copy_paste_chunk+0xa5d>
f01138eb:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01138ee:	8a 00                	mov    (%eax),%al
f01138f0:	3c 62                	cmp    $0x62,%al
f01138f2:	75 4e                	jne    f0113942 <test_copy_paste_chunk+0xa5d>
f01138f4:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01138f7:	8a 00                	mov    (%eax),%al
f01138f9:	3c 63                	cmp    $0x63,%al
f01138fb:	75 45                	jne    f0113942 <test_copy_paste_chunk+0xa5d>
f01138fd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113900:	8a 00                	mov    (%eax),%al
f0113902:	3c 7a                	cmp    $0x7a,%al
f0113904:	75 3c                	jne    f0113942 <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f0113906:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113909:	8a 00                	mov    (%eax),%al
f011390b:	3c 77                	cmp    $0x77,%al
f011390d:	75 33                	jne    f0113942 <test_copy_paste_chunk+0xa5d>
f011390f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113912:	8a 00                	mov    (%eax),%al
f0113914:	3c 64                	cmp    $0x64,%al
f0113916:	75 2a                	jne    f0113942 <test_copy_paste_chunk+0xa5d>
f0113918:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011391b:	8a 00                	mov    (%eax),%al
f011391d:	3c 65                	cmp    $0x65,%al
f011391f:	75 21                	jne    f0113942 <test_copy_paste_chunk+0xa5d>
f0113921:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113924:	8a 00                	mov    (%eax),%al
f0113926:	3c 65                	cmp    $0x65,%al
f0113928:	75 18                	jne    f0113942 <test_copy_paste_chunk+0xa5d>
f011392a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011392d:	8a 00                	mov    (%eax),%al
f011392f:	3c 66                	cmp    $0x66,%al
f0113931:	75 0f                	jne    f0113942 <test_copy_paste_chunk+0xa5d>
f0113933:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113936:	8a 10                	mov    (%eax),%dl
f0113938:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f011393e:	38 c2                	cmp    %al,%dl
f0113940:	74 21                	je     f0113963 <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113942:	83 ec 04             	sub    $0x4,%esp
f0113945:	68 18 a6 12 f0       	push   $0xf012a618
f011394a:	68 56 03 00 00       	push   $0x356
f011394f:	68 22 9e 12 f0       	push   $0xf0129e22
f0113954:	e8 5e cb fe ff       	call   f01004b7 <_warn>
f0113959:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011395c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113963:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113967:	74 04                	je     f011396d <test_copy_paste_chunk+0xa88>
f0113969:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011396d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f0113974:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113977:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011397a:	e8 8a a0 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011397f:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f0113982:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113985:	89 c2                	mov    %eax,%edx
f0113987:	01 d2                	add    %edx,%edx
f0113989:	01 d0                	add    %edx,%eax
f011398b:	50                   	push   %eax
f011398c:	68 00 08 20 00       	push   $0x200800
f0113991:	68 00 08 40 00       	push   $0x400800
f0113996:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113999:	e8 4c 5d ff ff       	call   f01096ea <copy_paste_chunk>
f011399e:	83 c4 10             	add    $0x10,%esp
f01139a1:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01139a4:	e8 60 a0 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01139a9:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01139ac:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f01139b0:	75 08                	jne    f01139ba <test_copy_paste_chunk+0xad5>
f01139b2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01139b5:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01139b8:	74 2b                	je     f01139e5 <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01139ba:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01139bd:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01139c0:	83 ec 0c             	sub    $0xc,%esp
f01139c3:	50                   	push   %eax
f01139c4:	ff 75 80             	pushl  -0x80(%ebp)
f01139c7:	68 c4 a6 12 f0       	push   $0xf012a6c4
f01139cc:	68 66 03 00 00       	push   $0x366
f01139d1:	68 22 9e 12 f0       	push   $0xf0129e22
f01139d6:	e8 dc ca fe ff       	call   f01004b7 <_warn>
f01139db:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01139de:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01139e5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01139e9:	74 04                	je     f01139ef <test_copy_paste_chunk+0xb0a>
f01139eb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01139ef:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f01139f6:	83 ec 08             	sub    $0x8,%esp
f01139f9:	6a 01                	push   $0x1
f01139fb:	6a 07                	push   $0x7
f01139fd:	6a 07                	push   $0x7
f01139ff:	6a 07                	push   $0x7
f0113a01:	6a 07                	push   $0x7
f0113a03:	6a 01                	push   $0x1
f0113a05:	68 00 20 00 00       	push   $0x2000
f0113a0a:	68 00 00 20 00       	push   $0x200000
f0113a0f:	68 00 00 40 00       	push   $0x400000
f0113a14:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113a17:	e8 68 34 00 00       	call   f0116e84 <CCP>
f0113a1c:	83 c4 30             	add    $0x30,%esp
f0113a1f:	83 f8 01             	cmp    $0x1,%eax
f0113a22:	74 21                	je     f0113a45 <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113a24:	83 ec 04             	sub    $0x4,%esp
f0113a27:	68 64 a7 12 f0       	push   $0xf012a764
f0113a2c:	68 6e 03 00 00       	push   $0x36e
f0113a31:	68 22 9e 12 f0       	push   $0xf0129e22
f0113a36:	e8 7c ca fe ff       	call   f01004b7 <_warn>
f0113a3b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113a3e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113a45:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113a49:	74 04                	je     f0113a4f <test_copy_paste_chunk+0xb6a>
f0113a4b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113a4f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0113a56:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113a59:	8a 00                	mov    (%eax),%al
f0113a5b:	3c 61                	cmp    $0x61,%al
f0113a5d:	75 69                	jne    f0113ac8 <test_copy_paste_chunk+0xbe3>
f0113a5f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113a62:	8a 00                	mov    (%eax),%al
f0113a64:	3c 61                	cmp    $0x61,%al
f0113a66:	75 60                	jne    f0113ac8 <test_copy_paste_chunk+0xbe3>
f0113a68:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113a6b:	8a 00                	mov    (%eax),%al
f0113a6d:	3c 79                	cmp    $0x79,%al
f0113a6f:	75 57                	jne    f0113ac8 <test_copy_paste_chunk+0xbe3>
f0113a71:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113a74:	8a 00                	mov    (%eax),%al
f0113a76:	3c 62                	cmp    $0x62,%al
f0113a78:	75 4e                	jne    f0113ac8 <test_copy_paste_chunk+0xbe3>
f0113a7a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113a7d:	8a 00                	mov    (%eax),%al
f0113a7f:	3c 7a                	cmp    $0x7a,%al
f0113a81:	75 45                	jne    f0113ac8 <test_copy_paste_chunk+0xbe3>
f0113a83:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113a86:	8a 00                	mov    (%eax),%al
f0113a88:	3c 7a                	cmp    $0x7a,%al
f0113a8a:	75 3c                	jne    f0113ac8 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113a8c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0113a8f:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f0113a91:	3c 64                	cmp    $0x64,%al
f0113a93:	75 33                	jne    f0113ac8 <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f0113a95:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0113a98:	8a 00                	mov    (%eax),%al
f0113a9a:	3c 64                	cmp    $0x64,%al
f0113a9c:	75 2a                	jne    f0113ac8 <test_copy_paste_chunk+0xbe3>
f0113a9e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113aa1:	8a 00                	mov    (%eax),%al
f0113aa3:	3c 65                	cmp    $0x65,%al
f0113aa5:	75 21                	jne    f0113ac8 <test_copy_paste_chunk+0xbe3>
f0113aa7:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113aaa:	8a 00                	mov    (%eax),%al
f0113aac:	3c 78                	cmp    $0x78,%al
f0113aae:	75 18                	jne    f0113ac8 <test_copy_paste_chunk+0xbe3>
f0113ab0:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113ab3:	8a 00                	mov    (%eax),%al
f0113ab5:	3c 66                	cmp    $0x66,%al
f0113ab7:	75 0f                	jne    f0113ac8 <test_copy_paste_chunk+0xbe3>
f0113ab9:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113abc:	8a 10                	mov    (%eax),%dl
f0113abe:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0113ac4:	38 c2                	cmp    %al,%dl
f0113ac6:	74 21                	je     f0113ae9 <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113ac8:	83 ec 04             	sub    $0x4,%esp
f0113acb:	68 18 a6 12 f0       	push   $0xf012a618
f0113ad0:	68 77 03 00 00       	push   $0x377
f0113ad5:	68 22 9e 12 f0       	push   $0xf0129e22
f0113ada:	e8 d8 c9 fe ff       	call   f01004b7 <_warn>
f0113adf:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113ae2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0113ae9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113aed:	74 04                	je     f0113af3 <test_copy_paste_chunk+0xc0e>
f0113aef:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113af3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f0113afa:	83 ec 0c             	sub    $0xc,%esp
f0113afd:	68 af a7 12 f0       	push   $0xf012a7af
f0113b02:	e8 65 d4 fe ff       	call   f0100f6c <cprintf>
f0113b07:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f0113b0a:	83 ec 0c             	sub    $0xc,%esp
f0113b0d:	68 c0 a7 12 f0       	push   $0xf012a7c0
f0113b12:	e8 55 d4 fe ff       	call   f0100f6c <cprintf>
f0113b17:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f0113b1a:	83 ec 04             	sub    $0x4,%esp
f0113b1d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113b23:	50                   	push   %eax
f0113b24:	68 f4 a7 12 f0       	push   $0xf012a7f4
f0113b29:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113b2f:	50                   	push   %eax
f0113b30:	e8 d4 d2 00 00       	call   f0120e09 <strcconcat>
f0113b35:	83 c4 10             	add    $0x10,%esp
f0113b38:	83 ec 0c             	sub    $0xc,%esp
f0113b3b:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113b41:	50                   	push   %eax
f0113b42:	e8 95 e3 fe ff       	call   f0101edc <execute_command>
f0113b47:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f0113b4a:	83 ec 04             	sub    $0x4,%esp
f0113b4d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113b53:	50                   	push   %eax
f0113b54:	68 fe a7 12 f0       	push   $0xf012a7fe
f0113b59:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113b5f:	50                   	push   %eax
f0113b60:	e8 a4 d2 00 00       	call   f0120e09 <strcconcat>
f0113b65:	83 c4 10             	add    $0x10,%esp
f0113b68:	83 ec 0c             	sub    $0xc,%esp
f0113b6b:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113b71:	50                   	push   %eax
f0113b72:	e8 65 e3 fe ff       	call   f0101edc <execute_command>
f0113b77:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f0113b7a:	83 ec 04             	sub    $0x4,%esp
f0113b7d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113b83:	50                   	push   %eax
f0113b84:	68 08 a8 12 f0       	push   $0xf012a808
f0113b89:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0113b8f:	50                   	push   %eax
f0113b90:	e8 74 d2 00 00       	call   f0120e09 <strcconcat>
f0113b95:	83 c4 10             	add    $0x10,%esp
f0113b98:	83 ec 0c             	sub    $0xc,%esp
f0113b9b:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0113ba1:	50                   	push   %eax
f0113ba2:	e8 35 e3 fe ff       	call   f0101edc <execute_command>
f0113ba7:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f0113baa:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113bb0:	bb a1 af 12 f0       	mov    $0xf012afa1,%ebx
f0113bb5:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113bba:	89 c7                	mov    %eax,%edi
f0113bbc:	89 de                	mov    %ebx,%esi
f0113bbe:	89 d1                	mov    %edx,%ecx
f0113bc0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113bc2:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0113bc8:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113bcd:	b0 00                	mov    $0x0,%al
f0113bcf:	89 d7                	mov    %edx,%edi
f0113bd1:	f3 aa                	rep stos %al,%es:(%edi)
f0113bd3:	83 ec 0c             	sub    $0xc,%esp
f0113bd6:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0113bdc:	50                   	push   %eax
f0113bdd:	e8 fa e2 fe ff       	call   f0101edc <execute_command>
f0113be2:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f0113be5:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113beb:	bb 05 b0 12 f0       	mov    $0xf012b005,%ebx
f0113bf0:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113bf5:	89 c7                	mov    %eax,%edi
f0113bf7:	89 de                	mov    %ebx,%esi
f0113bf9:	89 d1                	mov    %edx,%ecx
f0113bfb:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113bfd:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0113c03:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113c08:	b0 00                	mov    $0x0,%al
f0113c0a:	89 d7                	mov    %edx,%edi
f0113c0c:	f3 aa                	rep stos %al,%es:(%edi)
f0113c0e:	83 ec 0c             	sub    $0xc,%esp
f0113c11:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0113c17:	50                   	push   %eax
f0113c18:	e8 bf e2 fe ff       	call   f0101edc <execute_command>
f0113c1d:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0113c20:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113c26:	bb 69 b0 12 f0       	mov    $0xf012b069,%ebx
f0113c2b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113c30:	89 c7                	mov    %eax,%edi
f0113c32:	89 de                	mov    %ebx,%esi
f0113c34:	89 d1                	mov    %edx,%ecx
f0113c36:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113c38:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0113c3e:	b9 55 00 00 00       	mov    $0x55,%ecx
f0113c43:	b0 00                	mov    $0x0,%al
f0113c45:	89 d7                	mov    %edx,%edi
f0113c47:	f3 aa                	rep stos %al,%es:(%edi)
f0113c49:	83 ec 0c             	sub    $0xc,%esp
f0113c4c:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0113c52:	50                   	push   %eax
f0113c53:	e8 84 e2 fe ff       	call   f0101edc <execute_command>
f0113c58:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113c5b:	e8 a9 9d ff ff       	call   f010da09 <sys_calculate_free_frames>
f0113c60:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f0113c63:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113c66:	89 d0                	mov    %edx,%eax
f0113c68:	01 c0                	add    %eax,%eax
f0113c6a:	01 d0                	add    %edx,%eax
f0113c6c:	c1 e0 02             	shl    $0x2,%eax
f0113c6f:	50                   	push   %eax
f0113c70:	68 00 00 90 00       	push   $0x900000
f0113c75:	68 00 00 80 00       	push   $0x800000
f0113c7a:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113c7d:	e8 68 5a ff ff       	call   f01096ea <copy_paste_chunk>
f0113c82:	83 c4 10             	add    $0x10,%esp
f0113c85:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113c8b:	e8 79 9d ff ff       	call   f010da09 <sys_calculate_free_frames>
f0113c90:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113c93:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113c9a:	75 0b                	jne    f0113ca7 <test_copy_paste_chunk+0xdc2>
f0113c9c:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113c9f:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113ca2:	83 f8 03             	cmp    $0x3,%eax
f0113ca5:	74 2e                	je     f0113cd5 <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113ca7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113caa:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113cad:	83 ec 0c             	sub    $0xc,%esp
f0113cb0:	50                   	push   %eax
f0113cb1:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113cb7:	68 c4 a6 12 f0       	push   $0xf012a6c4
f0113cbc:	68 95 03 00 00       	push   $0x395
f0113cc1:	68 22 9e 12 f0       	push   $0xf0129e22
f0113cc6:	e8 ec c7 fe ff       	call   f01004b7 <_warn>
f0113ccb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113cce:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113cd5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113cd9:	74 04                	je     f0113cdf <test_copy_paste_chunk+0xdfa>
f0113cdb:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113cdf:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f0113ce6:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0113ced:	83 ec 08             	sub    $0x8,%esp
f0113cf0:	6a 01                	push   $0x1
f0113cf2:	6a 07                	push   $0x7
f0113cf4:	6a 07                	push   $0x7
f0113cf6:	6a 07                	push   $0x7
f0113cf8:	6a 07                	push   $0x7
f0113cfa:	6a 01                	push   $0x1
f0113cfc:	68 00 30 00 00       	push   $0x3000
f0113d01:	68 00 00 90 00       	push   $0x900000
f0113d06:	68 00 00 80 00       	push   $0x800000
f0113d0b:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113d0e:	e8 71 31 00 00       	call   f0116e84 <CCP>
f0113d13:	83 c4 30             	add    $0x30,%esp
f0113d16:	83 f8 01             	cmp    $0x1,%eax
f0113d19:	74 28                	je     f0113d43 <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113d1b:	83 ec 04             	sub    $0x4,%esp
f0113d1e:	68 64 a7 12 f0       	push   $0xf012a764
f0113d23:	68 9e 03 00 00       	push   $0x39e
f0113d28:	68 22 9e 12 f0       	push   $0xf0129e22
f0113d2d:	e8 85 c7 fe ff       	call   f01004b7 <_warn>
f0113d32:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113d35:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113d3c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f0113d43:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113d47:	74 04                	je     f0113d4d <test_copy_paste_chunk+0xe68>
f0113d49:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113d4d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113d54:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113d58:	0f 84 9e 00 00 00    	je     f0113dfc <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0113d5e:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f0113d65:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0113d6c:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f0113d73:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f0113d7a:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f0113d81:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f0113d88:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113d8b:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f0113d8e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113d91:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f0113d94:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113d97:	8a 00                	mov    (%eax),%al
f0113d99:	3c 61                	cmp    $0x61,%al
f0113d9b:	75 2d                	jne    f0113dca <test_copy_paste_chunk+0xee5>
f0113d9d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113da0:	8a 00                	mov    (%eax),%al
f0113da2:	3c 61                	cmp    $0x61,%al
f0113da4:	75 24                	jne    f0113dca <test_copy_paste_chunk+0xee5>
f0113da6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113da9:	8a 00                	mov    (%eax),%al
f0113dab:	3c 79                	cmp    $0x79,%al
f0113dad:	75 1b                	jne    f0113dca <test_copy_paste_chunk+0xee5>
f0113daf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113db2:	8a 00                	mov    (%eax),%al
f0113db4:	3c 62                	cmp    $0x62,%al
f0113db6:	75 12                	jne    f0113dca <test_copy_paste_chunk+0xee5>
f0113db8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0113dbb:	8a 00                	mov    (%eax),%al
f0113dbd:	3c 63                	cmp    $0x63,%al
f0113dbf:	75 09                	jne    f0113dca <test_copy_paste_chunk+0xee5>
f0113dc1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0113dc4:	8a 00                	mov    (%eax),%al
f0113dc6:	3c 7a                	cmp    $0x7a,%al
f0113dc8:	74 21                	je     f0113deb <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113dca:	83 ec 04             	sub    $0x4,%esp
f0113dcd:	68 18 a6 12 f0       	push   $0xf012a618
f0113dd2:	68 b0 03 00 00       	push   $0x3b0
f0113dd7:	68 22 9e 12 f0       	push   $0xf0129e22
f0113ddc:	e8 d6 c6 fe ff       	call   f01004b7 <_warn>
f0113de1:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113de4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0113deb:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113def:	74 04                	je     f0113df5 <test_copy_paste_chunk+0xf10>
f0113df1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f0113df5:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113dfc:	e8 08 9c ff ff       	call   f010da09 <sys_calculate_free_frames>
f0113e01:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f0113e04:	6a 00                	push   $0x0
f0113e06:	6a 02                	push   $0x2
f0113e08:	68 00 10 90 00       	push   $0x901000
f0113e0d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113e10:	e8 b1 2b 00 00       	call   f01169c6 <SB>
f0113e15:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f0113e18:	6a 00                	push   $0x0
f0113e1a:	6a 02                	push   $0x2
f0113e1c:	68 00 20 90 00       	push   $0x902000
f0113e21:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113e24:	e8 9d 2b 00 00       	call   f01169c6 <SB>
f0113e29:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0113e2c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113e2f:	c1 e0 03             	shl    $0x3,%eax
f0113e32:	50                   	push   %eax
f0113e33:	68 00 f0 bf 00       	push   $0xbff000
f0113e38:	68 00 10 90 00       	push   $0x901000
f0113e3d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113e40:	e8 a5 58 ff ff       	call   f01096ea <copy_paste_chunk>
f0113e45:	83 c4 10             	add    $0x10,%esp
f0113e48:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0113e4e:	e8 b6 9b ff ff       	call   f010da09 <sys_calculate_free_frames>
f0113e53:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f0113e56:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0113e5d:	75 0b                	jne    f0113e6a <test_copy_paste_chunk+0xf85>
f0113e5f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113e62:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113e65:	83 f8 03             	cmp    $0x3,%eax
f0113e68:	74 2e                	je     f0113e98 <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0113e6a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0113e6d:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0113e70:	83 ec 0c             	sub    $0xc,%esp
f0113e73:	50                   	push   %eax
f0113e74:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f0113e7a:	68 c4 a6 12 f0       	push   $0xf012a6c4
f0113e7f:	68 c0 03 00 00       	push   $0x3c0
f0113e84:	68 22 9e 12 f0       	push   $0xf0129e22
f0113e89:	e8 29 c6 fe ff       	call   f01004b7 <_warn>
f0113e8e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113e91:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0113e98:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113e9c:	74 04                	je     f0113ea2 <test_copy_paste_chunk+0xfbd>
f0113e9e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113ea2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f0113ea9:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f0113eb0:	83 ec 08             	sub    $0x8,%esp
f0113eb3:	6a 01                	push   $0x1
f0113eb5:	6a 07                	push   $0x7
f0113eb7:	6a 03                	push   $0x3
f0113eb9:	6a 07                	push   $0x7
f0113ebb:	6a 03                	push   $0x3
f0113ebd:	6a 01                	push   $0x1
f0113ebf:	68 00 20 00 00       	push   $0x2000
f0113ec4:	68 00 f0 bf 00       	push   $0xbff000
f0113ec9:	68 00 10 90 00       	push   $0x901000
f0113ece:	ff 75 d4             	pushl  -0x2c(%ebp)
f0113ed1:	e8 ae 2f 00 00       	call   f0116e84 <CCP>
f0113ed6:	83 c4 30             	add    $0x30,%esp
f0113ed9:	83 f8 01             	cmp    $0x1,%eax
f0113edc:	74 28                	je     f0113f06 <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0113ede:	83 ec 04             	sub    $0x4,%esp
f0113ee1:	68 64 a7 12 f0       	push   $0xf012a764
f0113ee6:	68 c9 03 00 00       	push   $0x3c9
f0113eeb:	68 22 9e 12 f0       	push   $0xf0129e22
f0113ef0:	e8 c2 c5 fe ff       	call   f01004b7 <_warn>
f0113ef5:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113ef8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0113eff:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f0113f06:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113f0a:	74 04                	je     f0113f10 <test_copy_paste_chunk+0x102b>
f0113f0c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113f10:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f0113f17:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0113f1b:	74 72                	je     f0113f8f <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0113f1d:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f0113f24:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0113f2b:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0113f32:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f0113f39:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113f3c:	8a 00                	mov    (%eax),%al
f0113f3e:	3c 62                	cmp    $0x62,%al
f0113f40:	75 1b                	jne    f0113f5d <test_copy_paste_chunk+0x1078>
f0113f42:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113f45:	8a 00                	mov    (%eax),%al
f0113f47:	3c 62                	cmp    $0x62,%al
f0113f49:	75 12                	jne    f0113f5d <test_copy_paste_chunk+0x1078>
f0113f4b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113f4e:	8a 00                	mov    (%eax),%al
f0113f50:	3c 7a                	cmp    $0x7a,%al
f0113f52:	75 09                	jne    f0113f5d <test_copy_paste_chunk+0x1078>
f0113f54:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0113f57:	8a 00                	mov    (%eax),%al
f0113f59:	3c 7a                	cmp    $0x7a,%al
f0113f5b:	74 21                	je     f0113f7e <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0113f5d:	83 ec 04             	sub    $0x4,%esp
f0113f60:	68 18 a6 12 f0       	push   $0xf012a618
f0113f65:	68 d5 03 00 00       	push   $0x3d5
f0113f6a:	68 22 9e 12 f0       	push   $0xf0129e22
f0113f6f:	e8 43 c5 fe ff       	call   f01004b7 <_warn>
f0113f74:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113f77:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0113f7e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0113f82:	74 04                	je     f0113f88 <test_copy_paste_chunk+0x10a3>
f0113f84:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113f88:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0113f8f:	83 ec 0c             	sub    $0xc,%esp
f0113f92:	68 12 a8 12 f0       	push   $0xf012a812
f0113f97:	e8 d0 cf fe ff       	call   f0100f6c <cprintf>
f0113f9c:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f0113f9f:	83 ec 08             	sub    $0x8,%esp
f0113fa2:	ff 75 e4             	pushl  -0x1c(%ebp)
f0113fa5:	68 24 a8 12 f0       	push   $0xf012a824
f0113faa:	e8 bd cf fe ff       	call   f0100f6c <cprintf>
f0113faf:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113fb2:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113fb6:	75 10                	jne    f0113fc8 <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f0113fb8:	83 ec 0c             	sub    $0xc,%esp
f0113fbb:	68 58 a8 12 f0       	push   $0xf012a858
f0113fc0:	e8 a7 cf fe ff       	call   f0100f6c <cprintf>
f0113fc5:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113fc8:	a1 e4 51 55 f0       	mov    0xf05551e4,%eax
f0113fcd:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0113fd0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113fd3:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113fd6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0113fdb:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0113fde:	5b                   	pop    %ebx
f0113fdf:	5e                   	pop    %esi
f0113fe0:	5f                   	pop    %edi
f0113fe1:	5d                   	pop    %ebp
f0113fe2:	c3                   	ret    

f0113fe3 <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f0113fe3:	55                   	push   %ebp
f0113fe4:	89 e5                	mov    %esp,%ebp
f0113fe6:	57                   	push   %edi
f0113fe7:	56                   	push   %esi
f0113fe8:	53                   	push   %ebx
f0113fe9:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0113fef:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0113ff5:	bb 24 a5 12 f0       	mov    $0xf012a524,%ebx
f0113ffa:	ba 0f 00 00 00       	mov    $0xf,%edx
f0113fff:	89 c7                	mov    %eax,%edi
f0114001:	89 de                	mov    %ebx,%esi
f0114003:	89 d1                	mov    %edx,%ecx
f0114005:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114007:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f011400d:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114012:	b0 00                	mov    $0x0,%al
f0114014:	89 d7                	mov    %edx,%edi
f0114016:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114018:	6a 00                	push   $0x0
f011401a:	6a 0a                	push   $0xa
f011401c:	6a 14                	push   $0x14
f011401e:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f0114024:	50                   	push   %eax
f0114025:	e8 46 5a ff ff       	call   f0109a70 <env_create>
f011402a:	83 c4 10             	add    $0x10,%esp
f011402d:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114030:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114033:	8b 40 64             	mov    0x64(%eax),%eax
f0114036:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0114039:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011403c:	8b 40 68             	mov    0x68(%eax),%eax
f011403f:	89 45 80             	mov    %eax,-0x80(%ebp)
f0114042:	8b 45 80             	mov    -0x80(%ebp),%eax
f0114045:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0114048:	83 ec 0c             	sub    $0xc,%esp
f011404b:	ff 75 cc             	pushl  -0x34(%ebp)
f011404e:	e8 fd 2d 00 00       	call   f0116e50 <ClearUserSpace>
f0114053:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114056:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f011405d:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0114064:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f011406b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f011406f:	83 ec 0c             	sub    $0xc,%esp
f0114072:	68 d0 b0 12 f0       	push   $0xf012b0d0
f0114077:	e8 f0 ce fe ff       	call   f0100f6c <cprintf>
f011407c:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f011407f:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF0104000;
f0114086:	c7 45 b8 00 40 10 f0 	movl   $0xf0104000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f011408d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114090:	8a 00                	mov    (%eax),%al
f0114092:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f0114098:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011409b:	8a 00                	mov    (%eax),%al
f011409d:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01140a3:	e8 61 99 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01140a8:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f01140ab:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01140ae:	89 d0                	mov    %edx,%eax
f01140b0:	01 c0                	add    %eax,%eax
f01140b2:	01 d0                	add    %edx,%eax
f01140b4:	01 c0                	add    %eax,%eax
f01140b6:	83 ec 0c             	sub    $0xc,%esp
f01140b9:	6a 02                	push   $0x2
f01140bb:	50                   	push   %eax
f01140bc:	68 00 40 10 f0       	push   $0xf0104000
f01140c1:	68 00 00 10 f0       	push   $0xf0100000
f01140c6:	ff 75 cc             	pushl  -0x34(%ebp)
f01140c9:	e8 36 56 ff ff       	call   f0109704 <share_chunk>
f01140ce:	83 c4 20             	add    $0x20,%esp
f01140d1:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01140d4:	e8 30 99 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01140d9:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01140dc:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01140e0:	75 08                	jne    f01140ea <test_share_chunk+0x107>
f01140e2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01140e5:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01140e8:	74 28                	je     f0114112 <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f01140ea:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01140ed:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01140f0:	83 ec 0c             	sub    $0xc,%esp
f01140f3:	50                   	push   %eax
f01140f4:	ff 75 b0             	pushl  -0x50(%ebp)
f01140f7:	68 fc b0 12 f0       	push   $0xf012b0fc
f01140fc:	68 11 04 00 00       	push   $0x411
f0114101:	68 22 9e 12 f0       	push   $0xf0129e22
f0114106:	e8 ac c3 fe ff       	call   f01004b7 <_warn>
f011410b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011410e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114112:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114116:	74 04                	je     f011411c <test_share_chunk+0x139>
f0114118:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011411c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0114120:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114123:	c1 e0 03             	shl    $0x3,%eax
f0114126:	83 ec 08             	sub    $0x8,%esp
f0114129:	68 fd 00 00 00       	push   $0xfd
f011412e:	6a 07                	push   $0x7
f0114130:	6a 03                	push   $0x3
f0114132:	6a 07                	push   $0x7
f0114134:	6a 03                	push   $0x3
f0114136:	6a 01                	push   $0x1
f0114138:	50                   	push   %eax
f0114139:	68 00 40 10 f0       	push   $0xf0104000
f011413e:	68 00 00 10 f0       	push   $0xf0100000
f0114143:	ff 75 cc             	pushl  -0x34(%ebp)
f0114146:	e8 39 2d 00 00       	call   f0116e84 <CCP>
f011414b:	83 c4 30             	add    $0x30,%esp
f011414e:	85 c0                	test   %eax,%eax
f0114150:	75 1e                	jne    f0114170 <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114152:	83 ec 04             	sub    $0x4,%esp
f0114155:	68 58 b1 12 f0       	push   $0xf012b158
f011415a:	68 19 04 00 00       	push   $0x419
f011415f:	68 22 9e 12 f0       	push   $0xf0129e22
f0114164:	e8 4e c3 fe ff       	call   f01004b7 <_warn>
f0114169:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011416c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114170:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114174:	74 04                	je     f011417a <test_share_chunk+0x197>
f0114176:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f011417a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011417d:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f0114180:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114183:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f0114186:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114189:	8a 00                	mov    (%eax),%al
f011418b:	3c 41                	cmp    $0x41,%al
f011418d:	75 09                	jne    f0114198 <test_share_chunk+0x1b5>
f011418f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114192:	8a 00                	mov    (%eax),%al
f0114194:	3c 42                	cmp    $0x42,%al
f0114196:	74 1e                	je     f01141b6 <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114198:	83 ec 04             	sub    $0x4,%esp
f011419b:	68 a0 b1 12 f0       	push   $0xf012b1a0
f01141a0:	68 23 04 00 00       	push   $0x423
f01141a5:	68 22 9e 12 f0       	push   $0xf0129e22
f01141aa:	e8 08 c3 fe ff       	call   f01004b7 <_warn>
f01141af:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01141b2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01141b6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01141ba:	74 04                	je     f01141c0 <test_share_chunk+0x1dd>
f01141bc:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01141c0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f01141c4:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f01141ca:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01141cd:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f01141cf:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f01141d5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01141d8:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f01141da:	83 ec 0c             	sub    $0xc,%esp
f01141dd:	68 d5 b1 12 f0       	push   $0xf012b1d5
f01141e2:	e8 85 cd fe ff       	call   f0100f6c <cprintf>
f01141e7:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f01141ea:	83 ec 0c             	sub    $0xc,%esp
f01141ed:	68 e4 b1 12 f0       	push   $0xf012b1e4
f01141f2:	e8 75 cd fe ff       	call   f0100f6c <cprintf>
f01141f7:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01141fa:	e8 0a 98 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01141ff:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0114202:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114205:	c1 e0 05             	shl    $0x5,%eax
f0114208:	83 ec 0c             	sub    $0xc,%esp
f011420b:	68 02 0e 00 00       	push   $0xe02
f0114210:	50                   	push   %eax
f0114211:	68 00 00 00 40       	push   $0x40000000
f0114216:	68 00 00 00 f0       	push   $0xf0000000
f011421b:	ff 75 cc             	pushl  -0x34(%ebp)
f011421e:	e8 e1 54 ff ff       	call   f0109704 <share_chunk>
f0114223:	83 c4 20             	add    $0x20,%esp
f0114226:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114229:	e8 db 97 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011422e:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0114231:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0114235:	75 1f                	jne    f0114256 <test_share_chunk+0x273>
f0114237:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011423a:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011423d:	89 c1                	mov    %eax,%ecx
f011423f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114242:	c1 e0 05             	shl    $0x5,%eax
f0114245:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114248:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011424f:	99                   	cltd   
f0114250:	f7 fb                	idiv   %ebx
f0114252:	39 c1                	cmp    %eax,%ecx
f0114254:	74 28                	je     f011427e <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0114256:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114259:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011425c:	83 ec 0c             	sub    $0xc,%esp
f011425f:	50                   	push   %eax
f0114260:	ff 75 a8             	pushl  -0x58(%ebp)
f0114263:	68 20 b2 12 f0       	push   $0xf012b220
f0114268:	68 3b 04 00 00       	push   $0x43b
f011426d:	68 22 9e 12 f0       	push   $0xf0129e22
f0114272:	e8 40 c2 fe ff       	call   f01004b7 <_warn>
f0114277:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011427a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011427e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114282:	74 04                	je     f0114288 <test_share_chunk+0x2a5>
f0114284:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114288:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011428c:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0114293:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114296:	c1 e0 05             	shl    $0x5,%eax
f0114299:	83 ec 08             	sub    $0x8,%esp
f011429c:	6a 02                	push   $0x2
f011429e:	6a 07                	push   $0x7
f01142a0:	6a 03                	push   $0x3
f01142a2:	68 07 0e 00 00       	push   $0xe07
f01142a7:	68 03 0e 00 00       	push   $0xe03
f01142ac:	6a ff                	push   $0xffffffff
f01142ae:	50                   	push   %eax
f01142af:	68 00 00 00 40       	push   $0x40000000
f01142b4:	68 00 00 00 f0       	push   $0xf0000000
f01142b9:	ff 75 cc             	pushl  -0x34(%ebp)
f01142bc:	e8 c3 2b 00 00       	call   f0116e84 <CCP>
f01142c1:	83 c4 30             	add    $0x30,%esp
f01142c4:	85 c0                	test   %eax,%eax
f01142c6:	75 25                	jne    f01142ed <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01142c8:	83 ec 04             	sub    $0x4,%esp
f01142cb:	68 58 b1 12 f0       	push   $0xf012b158
f01142d0:	68 44 04 00 00       	push   $0x444
f01142d5:	68 22 9e 12 f0       	push   $0xf0129e22
f01142da:	e8 d8 c1 fe ff       	call   f01004b7 <_warn>
f01142df:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01142e2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01142e6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01142ed:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01142f0:	89 d0                	mov    %edx,%eax
f01142f2:	01 c0                	add    %eax,%eax
f01142f4:	01 d0                	add    %edx,%eax
f01142f6:	c1 e0 02             	shl    $0x2,%eax
f01142f9:	83 ec 08             	sub    $0x8,%esp
f01142fc:	6a 02                	push   $0x2
f01142fe:	6a 07                	push   $0x7
f0114300:	6a 03                	push   $0x3
f0114302:	68 07 0e 00 00       	push   $0xe07
f0114307:	68 03 0e 00 00       	push   $0xe03
f011430c:	6a 02                	push   $0x2
f011430e:	50                   	push   %eax
f011430f:	68 00 00 00 40       	push   $0x40000000
f0114314:	68 00 00 00 f0       	push   $0xf0000000
f0114319:	ff 75 cc             	pushl  -0x34(%ebp)
f011431c:	e8 63 2b 00 00       	call   f0116e84 <CCP>
f0114321:	83 c4 30             	add    $0x30,%esp
f0114324:	85 c0                	test   %eax,%eax
f0114326:	75 1e                	jne    f0114346 <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114328:	83 ec 04             	sub    $0x4,%esp
f011432b:	68 58 b1 12 f0       	push   $0xf012b158
f0114330:	68 4b 04 00 00       	push   $0x44b
f0114335:	68 22 9e 12 f0       	push   $0xf0129e22
f011433a:	e8 78 c1 fe ff       	call   f01004b7 <_warn>
f011433f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114342:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114346:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011434a:	74 04                	je     f0114350 <test_share_chunk+0x36d>
f011434c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114350:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0114354:	b8 a8 79 57 f0       	mov    $0xf05779a8,%eax
f0114359:	05 00 00 00 10       	add    $0x10000000,%eax
f011435e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0114361:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0114364:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0114369:	83 ec 08             	sub    $0x8,%esp
f011436c:	6a 02                	push   $0x2
f011436e:	6a 07                	push   $0x7
f0114370:	6a 03                	push   $0x3
f0114372:	68 07 0e 00 00       	push   $0xe07
f0114377:	68 03 0e 00 00       	push   $0xe03
f011437c:	6a 02                	push   $0x2
f011437e:	50                   	push   %eax
f011437f:	68 00 00 0a 40       	push   $0x400a0000
f0114384:	68 00 00 0a f0       	push   $0xf00a0000
f0114389:	ff 75 cc             	pushl  -0x34(%ebp)
f011438c:	e8 f3 2a 00 00       	call   f0116e84 <CCP>
f0114391:	83 c4 30             	add    $0x30,%esp
f0114394:	85 c0                	test   %eax,%eax
f0114396:	75 1e                	jne    f01143b6 <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114398:	83 ec 04             	sub    $0x4,%esp
f011439b:	68 58 b1 12 f0       	push   $0xf012b158
f01143a0:	68 55 04 00 00       	push   $0x455
f01143a5:	68 22 9e 12 f0       	push   $0xf0129e22
f01143aa:	e8 08 c1 fe ff       	call   f01004b7 <_warn>
f01143af:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01143b2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01143b6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01143ba:	74 04                	je     f01143c0 <test_share_chunk+0x3dd>
f01143bc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01143c0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01143c4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01143c8:	0f 84 a4 00 00 00    	je     f0114472 <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f01143ce:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f01143d5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01143d8:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f01143db:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f01143e2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01143e5:	8a 00                	mov    (%eax),%al
f01143e7:	3c 41                	cmp    $0x41,%al
f01143e9:	75 09                	jne    f01143f4 <test_share_chunk+0x411>
f01143eb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01143ee:	8a 00                	mov    (%eax),%al
f01143f0:	3c 41                	cmp    $0x41,%al
f01143f2:	74 1e                	je     f0114412 <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01143f4:	83 ec 04             	sub    $0x4,%esp
f01143f7:	68 a0 b1 12 f0       	push   $0xf012b1a0
f01143fc:	68 62 04 00 00       	push   $0x462
f0114401:	68 22 9e 12 f0       	push   $0xf0129e22
f0114406:	e8 ac c0 fe ff       	call   f01004b7 <_warn>
f011440b:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011440e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114412:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114416:	74 04                	je     f011441c <test_share_chunk+0x439>
f0114418:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011441c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0114420:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0114427:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011442a:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f011442d:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0114434:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114437:	8a 00                	mov    (%eax),%al
f0114439:	3c 43                	cmp    $0x43,%al
f011443b:	75 09                	jne    f0114446 <test_share_chunk+0x463>
f011443d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114440:	8a 00                	mov    (%eax),%al
f0114442:	3c 43                	cmp    $0x43,%al
f0114444:	74 1e                	je     f0114464 <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114446:	83 ec 04             	sub    $0x4,%esp
f0114449:	68 a0 b1 12 f0       	push   $0xf012b1a0
f011444e:	68 6d 04 00 00       	push   $0x46d
f0114453:	68 22 9e 12 f0       	push   $0xf0129e22
f0114458:	e8 5a c0 fe ff       	call   f01004b7 <_warn>
f011445d:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114460:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114464:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114468:	74 04                	je     f011446e <test_share_chunk+0x48b>
f011446a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011446e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0114472:	83 ec 0c             	sub    $0xc,%esp
f0114475:	68 af a7 12 f0       	push   $0xf012a7af
f011447a:	e8 ed ca fe ff       	call   f0100f6c <cprintf>
f011447f:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0114482:	83 ec 0c             	sub    $0xc,%esp
f0114485:	68 70 b2 12 f0       	push   $0xf012b270
f011448a:	e8 dd ca fe ff       	call   f0100f6c <cprintf>
f011448f:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114492:	e8 72 95 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114497:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f011449a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011449d:	89 d0                	mov    %edx,%eax
f011449f:	c1 e0 03             	shl    $0x3,%eax
f01144a2:	01 d0                	add    %edx,%eax
f01144a4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01144ab:	01 d0                	add    %edx,%eax
f01144ad:	c1 e0 03             	shl    $0x3,%eax
f01144b0:	83 ec 0c             	sub    $0xc,%esp
f01144b3:	6a 06                	push   $0x6
f01144b5:	50                   	push   %eax
f01144b6:	6a 00                	push   $0x0
f01144b8:	68 00 00 00 40       	push   $0x40000000
f01144bd:	ff 75 cc             	pushl  -0x34(%ebp)
f01144c0:	e8 3f 52 ff ff       	call   f0109704 <share_chunk>
f01144c5:	83 c4 20             	add    $0x20,%esp
f01144c8:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01144cb:	e8 39 95 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01144d0:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f01144d3:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f01144d7:	75 0b                	jne    f01144e4 <test_share_chunk+0x501>
f01144d9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01144dc:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01144df:	83 f8 01             	cmp    $0x1,%eax
f01144e2:	74 28                	je     f011450c <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01144e4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01144e7:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01144ea:	83 ec 0c             	sub    $0xc,%esp
f01144ed:	50                   	push   %eax
f01144ee:	ff 75 a0             	pushl  -0x60(%ebp)
f01144f1:	68 20 b2 12 f0       	push   $0xf012b220
f01144f6:	68 83 04 00 00       	push   $0x483
f01144fb:	68 22 9e 12 f0       	push   $0xf0129e22
f0114500:	e8 b2 bf fe ff       	call   f01004b7 <_warn>
f0114505:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114508:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011450c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114510:	74 04                	je     f0114516 <test_share_chunk+0x533>
f0114512:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114516:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011451a:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114521:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114524:	05 00 80 02 00       	add    $0x28000,%eax
f0114529:	c1 e0 02             	shl    $0x2,%eax
f011452c:	83 ec 08             	sub    $0x8,%esp
f011452f:	6a 02                	push   $0x2
f0114531:	6a 07                	push   $0x7
f0114533:	6a 03                	push   $0x3
f0114535:	6a 07                	push   $0x7
f0114537:	6a 07                	push   $0x7
f0114539:	6a ff                	push   $0xffffffff
f011453b:	50                   	push   %eax
f011453c:	6a 00                	push   $0x0
f011453e:	68 00 00 00 40       	push   $0x40000000
f0114543:	ff 75 cc             	pushl  -0x34(%ebp)
f0114546:	e8 39 29 00 00       	call   f0116e84 <CCP>
f011454b:	83 c4 30             	add    $0x30,%esp
f011454e:	85 c0                	test   %eax,%eax
f0114550:	75 25                	jne    f0114577 <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114552:	83 ec 04             	sub    $0x4,%esp
f0114555:	68 58 b1 12 f0       	push   $0xf012b158
f011455a:	68 8c 04 00 00       	push   $0x48c
f011455f:	68 22 9e 12 f0       	push   $0xf0129e22
f0114564:	e8 4e bf fe ff       	call   f01004b7 <_warn>
f0114569:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011456c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114570:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0114577:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011457a:	89 d0                	mov    %edx,%eax
f011457c:	01 c0                	add    %eax,%eax
f011457e:	01 d0                	add    %edx,%eax
f0114580:	c1 e0 02             	shl    $0x2,%eax
f0114583:	83 ec 08             	sub    $0x8,%esp
f0114586:	6a 02                	push   $0x2
f0114588:	6a 07                	push   $0x7
f011458a:	6a 03                	push   $0x3
f011458c:	6a 07                	push   $0x7
f011458e:	6a 07                	push   $0x7
f0114590:	6a 03                	push   $0x3
f0114592:	50                   	push   %eax
f0114593:	6a 00                	push   $0x0
f0114595:	68 00 00 00 40       	push   $0x40000000
f011459a:	ff 75 cc             	pushl  -0x34(%ebp)
f011459d:	e8 e2 28 00 00       	call   f0116e84 <CCP>
f01145a2:	83 c4 30             	add    $0x30,%esp
f01145a5:	85 c0                	test   %eax,%eax
f01145a7:	75 1e                	jne    f01145c7 <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01145a9:	83 ec 04             	sub    $0x4,%esp
f01145ac:	68 58 b1 12 f0       	push   $0xf012b158
f01145b1:	68 93 04 00 00       	push   $0x493
f01145b6:	68 22 9e 12 f0       	push   $0xf0129e22
f01145bb:	e8 f7 be fe ff       	call   f01004b7 <_warn>
f01145c0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01145c3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01145c7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01145cb:	74 04                	je     f01145d1 <test_share_chunk+0x5ee>
f01145cd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01145d1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f01145d5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01145d8:	89 d0                	mov    %edx,%eax
f01145da:	01 c0                	add    %eax,%eax
f01145dc:	01 d0                	add    %edx,%eax
f01145de:	c1 e0 02             	shl    $0x2,%eax
f01145e1:	f7 d8                	neg    %eax
f01145e3:	05 00 00 0a 00       	add    $0xa0000,%eax
f01145e8:	83 ec 08             	sub    $0x8,%esp
f01145eb:	6a 02                	push   $0x2
f01145ed:	6a 07                	push   $0x7
f01145ef:	6a 03                	push   $0x3
f01145f1:	6a 07                	push   $0x7
f01145f3:	6a 07                	push   $0x7
f01145f5:	6a 02                	push   $0x2
f01145f7:	50                   	push   %eax
f01145f8:	68 00 30 00 00       	push   $0x3000
f01145fd:	68 00 30 00 40       	push   $0x40003000
f0114602:	ff 75 cc             	pushl  -0x34(%ebp)
f0114605:	e8 7a 28 00 00       	call   f0116e84 <CCP>
f011460a:	83 c4 30             	add    $0x30,%esp
f011460d:	85 c0                	test   %eax,%eax
f011460f:	75 1e                	jne    f011462f <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114611:	83 ec 04             	sub    $0x4,%esp
f0114614:	68 58 b1 12 f0       	push   $0xf012b158
f0114619:	68 9b 04 00 00       	push   $0x49b
f011461e:	68 22 9e 12 f0       	push   $0xf0129e22
f0114623:	e8 8f be fe ff       	call   f01004b7 <_warn>
f0114628:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011462b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011462f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114633:	74 04                	je     f0114639 <test_share_chunk+0x656>
f0114635:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114639:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f011463d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114640:	c1 e0 02             	shl    $0x2,%eax
f0114643:	83 ec 08             	sub    $0x8,%esp
f0114646:	6a 02                	push   $0x2
f0114648:	6a 07                	push   $0x7
f011464a:	6a 03                	push   $0x3
f011464c:	6a 07                	push   $0x7
f011464e:	6a 07                	push   $0x7
f0114650:	6a 03                	push   $0x3
f0114652:	50                   	push   %eax
f0114653:	68 00 00 0a 00       	push   $0xa0000
f0114658:	68 00 00 0a 40       	push   $0x400a0000
f011465d:	ff 75 cc             	pushl  -0x34(%ebp)
f0114660:	e8 1f 28 00 00       	call   f0116e84 <CCP>
f0114665:	83 c4 30             	add    $0x30,%esp
f0114668:	85 c0                	test   %eax,%eax
f011466a:	75 1e                	jne    f011468a <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f011466c:	83 ec 04             	sub    $0x4,%esp
f011466f:	68 58 b1 12 f0       	push   $0xf012b158
f0114674:	68 a3 04 00 00       	push   $0x4a3
f0114679:	68 22 9e 12 f0       	push   $0xf0129e22
f011467e:	e8 34 be fe ff       	call   f01004b7 <_warn>
f0114683:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114686:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011468a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011468e:	74 04                	je     f0114694 <test_share_chunk+0x6b1>
f0114690:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114694:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0114698:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f011469c:	0f 84 92 00 00 00    	je     f0114734 <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f01146a2:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f01146a9:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f01146b0:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f01146b7:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f01146be:	8b 45 98             	mov    -0x68(%ebp),%eax
f01146c1:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f01146c4:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f01146cb:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01146d2:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01146d5:	8a 00                	mov    (%eax),%al
f01146d7:	3c 41                	cmp    $0x41,%al
f01146d9:	75 2d                	jne    f0114708 <test_share_chunk+0x725>
f01146db:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01146de:	8a 00                	mov    (%eax),%al
f01146e0:	3c 41                	cmp    $0x41,%al
f01146e2:	75 24                	jne    f0114708 <test_share_chunk+0x725>
f01146e4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01146e7:	8a 00                	mov    (%eax),%al
f01146e9:	3c 41                	cmp    $0x41,%al
f01146eb:	75 1b                	jne    f0114708 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f01146ed:	8b 45 98             	mov    -0x68(%ebp),%eax
f01146f0:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f01146f2:	3c 44                	cmp    $0x44,%al
f01146f4:	75 12                	jne    f0114708 <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f01146f6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01146f9:	8a 00                	mov    (%eax),%al
f01146fb:	3c 44                	cmp    $0x44,%al
f01146fd:	75 09                	jne    f0114708 <test_share_chunk+0x725>
f01146ff:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114702:	8a 00                	mov    (%eax),%al
f0114704:	3c 44                	cmp    $0x44,%al
f0114706:	74 1e                	je     f0114726 <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0114708:	83 ec 04             	sub    $0x4,%esp
f011470b:	68 a0 b1 12 f0       	push   $0xf012b1a0
f0114710:	68 b5 04 00 00       	push   $0x4b5
f0114715:	68 22 9e 12 f0       	push   $0xf0129e22
f011471a:	e8 98 bd fe ff       	call   f01004b7 <_warn>
f011471f:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114722:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0114726:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011472a:	74 04                	je     f0114730 <test_share_chunk+0x74d>
f011472c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0114730:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0114734:	83 ec 0c             	sub    $0xc,%esp
f0114737:	68 12 a8 12 f0       	push   $0xf012a812
f011473c:	e8 2b c8 fe ff       	call   f0100f6c <cprintf>
f0114741:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f0114744:	83 ec 0c             	sub    $0xc,%esp
f0114747:	68 ac b2 12 f0       	push   $0xf012b2ac
f011474c:	e8 1b c8 fe ff       	call   f0100f6c <cprintf>
f0114751:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114754:	e8 b0 92 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114759:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f011475c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011475f:	89 d0                	mov    %edx,%eax
f0114761:	01 c0                	add    %eax,%eax
f0114763:	01 d0                	add    %edx,%eax
f0114765:	01 c0                	add    %eax,%eax
f0114767:	01 d0                	add    %edx,%eax
f0114769:	83 ec 0c             	sub    $0xc,%esp
f011476c:	6a 04                	push   $0x4
f011476e:	50                   	push   %eax
f011476f:	68 00 fc 3f 00       	push   $0x3ffc00
f0114774:	68 00 fc 09 00       	push   $0x9fc00
f0114779:	ff 75 cc             	pushl  -0x34(%ebp)
f011477c:	e8 83 4f ff ff       	call   f0109704 <share_chunk>
f0114781:	83 c4 20             	add    $0x20,%esp
f0114784:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114787:	e8 7d 92 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011478c:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f011478f:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f0114793:	75 0b                	jne    f01147a0 <test_share_chunk+0x7bd>
f0114795:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114798:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011479b:	83 f8 01             	cmp    $0x1,%eax
f011479e:	74 28                	je     f01147c8 <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01147a0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01147a3:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01147a6:	83 ec 0c             	sub    $0xc,%esp
f01147a9:	50                   	push   %eax
f01147aa:	ff 75 8c             	pushl  -0x74(%ebp)
f01147ad:	68 20 b2 12 f0       	push   $0xf012b220
f01147b2:	68 cb 04 00 00       	push   $0x4cb
f01147b7:	68 22 9e 12 f0       	push   $0xf0129e22
f01147bc:	e8 f6 bc fe ff       	call   f01004b7 <_warn>
f01147c1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01147c4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01147c8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01147cc:	74 04                	je     f01147d2 <test_share_chunk+0x7ef>
f01147ce:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01147d2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01147d6:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01147dd:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01147e0:	89 d0                	mov    %edx,%eax
f01147e2:	01 c0                	add    %eax,%eax
f01147e4:	01 d0                	add    %edx,%eax
f01147e6:	c1 e0 02             	shl    $0x2,%eax
f01147e9:	83 ec 08             	sub    $0x8,%esp
f01147ec:	6a 02                	push   $0x2
f01147ee:	6a 07                	push   $0x7
f01147f0:	6a 07                	push   $0x7
f01147f2:	6a 07                	push   $0x7
f01147f4:	6a 05                	push   $0x5
f01147f6:	6a ff                	push   $0xffffffff
f01147f8:	50                   	push   %eax
f01147f9:	68 00 f0 3f 00       	push   $0x3ff000
f01147fe:	68 00 f0 09 00       	push   $0x9f000
f0114803:	ff 75 cc             	pushl  -0x34(%ebp)
f0114806:	e8 79 26 00 00       	call   f0116e84 <CCP>
f011480b:	83 c4 30             	add    $0x30,%esp
f011480e:	85 c0                	test   %eax,%eax
f0114810:	75 25                	jne    f0114837 <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114812:	83 ec 04             	sub    $0x4,%esp
f0114815:	68 58 b1 12 f0       	push   $0xf012b158
f011481a:	68 d4 04 00 00       	push   $0x4d4
f011481f:	68 22 9e 12 f0       	push   $0xf0129e22
f0114824:	e8 8e bc fe ff       	call   f01004b7 <_warn>
f0114829:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011482c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0114830:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f0114837:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011483b:	74 04                	je     f0114841 <test_share_chunk+0x85e>
f011483d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114841:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0114845:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114848:	c1 e0 02             	shl    $0x2,%eax
f011484b:	83 ec 08             	sub    $0x8,%esp
f011484e:	6a 02                	push   $0x2
f0114850:	6a 07                	push   $0x7
f0114852:	6a 07                	push   $0x7
f0114854:	6a 07                	push   $0x7
f0114856:	6a 05                	push   $0x5
f0114858:	6a 03                	push   $0x3
f011485a:	50                   	push   %eax
f011485b:	68 00 f0 3f 00       	push   $0x3ff000
f0114860:	68 00 f0 09 00       	push   $0x9f000
f0114865:	ff 75 cc             	pushl  -0x34(%ebp)
f0114868:	e8 17 26 00 00       	call   f0116e84 <CCP>
f011486d:	83 c4 30             	add    $0x30,%esp
f0114870:	85 c0                	test   %eax,%eax
f0114872:	75 1e                	jne    f0114892 <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0114874:	83 ec 04             	sub    $0x4,%esp
f0114877:	68 58 b1 12 f0       	push   $0xf012b158
f011487c:	68 dd 04 00 00       	push   $0x4dd
f0114881:	68 22 9e 12 f0       	push   $0xf0129e22
f0114886:	e8 2c bc fe ff       	call   f01004b7 <_warn>
f011488b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011488e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114892:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114896:	74 04                	je     f011489c <test_share_chunk+0x8b9>
f0114898:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011489c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f01148a0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01148a3:	c1 e0 03             	shl    $0x3,%eax
f01148a6:	83 ec 08             	sub    $0x8,%esp
f01148a9:	6a 02                	push   $0x2
f01148ab:	6a 07                	push   $0x7
f01148ad:	6a 07                	push   $0x7
f01148af:	6a 07                	push   $0x7
f01148b1:	6a 05                	push   $0x5
f01148b3:	6a 04                	push   $0x4
f01148b5:	50                   	push   %eax
f01148b6:	68 00 00 40 00       	push   $0x400000
f01148bb:	68 00 00 0a 00       	push   $0xa0000
f01148c0:	ff 75 cc             	pushl  -0x34(%ebp)
f01148c3:	e8 bc 25 00 00       	call   f0116e84 <CCP>
f01148c8:	83 c4 30             	add    $0x30,%esp
f01148cb:	85 c0                	test   %eax,%eax
f01148cd:	75 1e                	jne    f01148ed <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01148cf:	83 ec 04             	sub    $0x4,%esp
f01148d2:	68 58 b1 12 f0       	push   $0xf012b158
f01148d7:	68 e5 04 00 00       	push   $0x4e5
f01148dc:	68 22 9e 12 f0       	push   $0xf0129e22
f01148e1:	e8 d1 bb fe ff       	call   f01004b7 <_warn>
f01148e6:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01148e9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01148ed:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01148f1:	74 04                	je     f01148f7 <test_share_chunk+0x914>
f01148f3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01148f7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01148fb:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f01148ff:	0f 84 b2 00 00 00    	je     f01149b7 <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f0114905:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f011490c:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f0114913:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f011491a:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f0114921:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f0114928:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f011492f:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f0114936:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f011493d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114940:	8a 00                	mov    (%eax),%al
f0114942:	3c 44                	cmp    $0x44,%al
f0114944:	75 45                	jne    f011498b <test_share_chunk+0x9a8>
f0114946:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0114949:	8a 00                	mov    (%eax),%al
f011494b:	3c 44                	cmp    $0x44,%al
f011494d:	75 3c                	jne    f011498b <test_share_chunk+0x9a8>
f011494f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0114952:	8a 00                	mov    (%eax),%al
f0114954:	3c 44                	cmp    $0x44,%al
f0114956:	75 33                	jne    f011498b <test_share_chunk+0x9a8>
f0114958:	8b 45 98             	mov    -0x68(%ebp),%eax
f011495b:	8a 00                	mov    (%eax),%al
f011495d:	3c 44                	cmp    $0x44,%al
f011495f:	75 2a                	jne    f011498b <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0114961:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114964:	8a 10                	mov    (%eax),%dl
f0114966:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114969:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f011496b:	38 c2                	cmp    %al,%dl
f011496d:	75 1c                	jne    f011498b <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f011496f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114972:	8a 10                	mov    (%eax),%dl
f0114974:	8b 45 88             	mov    -0x78(%ebp),%eax
f0114977:	8a 00                	mov    (%eax),%al
f0114979:	38 c2                	cmp    %al,%dl
f011497b:	75 0e                	jne    f011498b <test_share_chunk+0x9a8>
f011497d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0114980:	8a 10                	mov    (%eax),%dl
f0114982:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0114985:	8a 00                	mov    (%eax),%al
f0114987:	38 c2                	cmp    %al,%dl
f0114989:	74 1e                	je     f01149a9 <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f011498b:	83 ec 04             	sub    $0x4,%esp
f011498e:	68 a0 b1 12 f0       	push   $0xf012b1a0
f0114993:	68 fa 04 00 00       	push   $0x4fa
f0114998:	68 22 9e 12 f0       	push   $0xf0129e22
f011499d:	e8 15 bb fe ff       	call   f01004b7 <_warn>
f01149a2:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01149a5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01149a9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01149ad:	74 04                	je     f01149b3 <test_share_chunk+0x9d0>
f01149af:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01149b3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f01149b7:	83 ec 0c             	sub    $0xc,%esp
f01149ba:	68 e4 b2 12 f0       	push   $0xf012b2e4
f01149bf:	e8 a8 c5 fe ff       	call   f0100f6c <cprintf>
f01149c4:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f01149c7:	83 ec 08             	sub    $0x8,%esp
f01149ca:	ff 75 e4             	pushl  -0x1c(%ebp)
f01149cd:	68 f4 b2 12 f0       	push   $0xf012b2f4
f01149d2:	e8 95 c5 fe ff       	call   f0100f6c <cprintf>
f01149d7:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01149da:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01149de:	75 10                	jne    f01149f0 <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f01149e0:	83 ec 0c             	sub    $0xc,%esp
f01149e3:	68 24 b3 12 f0       	push   $0xf012b324
f01149e8:	e8 7f c5 fe ff       	call   f0100f6c <cprintf>
f01149ed:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01149f0:	a1 e4 51 55 f0       	mov    0xf05551e4,%eax
f01149f5:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01149f8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01149fb:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01149fe:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114a03:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114a06:	5b                   	pop    %ebx
f0114a07:	5e                   	pop    %esi
f0114a08:	5f                   	pop    %edi
f0114a09:	5d                   	pop    %ebp
f0114a0a:	c3                   	ret    

f0114a0b <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f0114a0b:	55                   	push   %ebp
f0114a0c:	89 e5                	mov    %esp,%ebp
f0114a0e:	57                   	push   %edi
f0114a0f:	56                   	push   %esi
f0114a10:	53                   	push   %ebx
f0114a11:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114a17:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0114a1d:	bb 24 a5 12 f0       	mov    $0xf012a524,%ebx
f0114a22:	ba 0f 00 00 00       	mov    $0xf,%edx
f0114a27:	89 c7                	mov    %eax,%edi
f0114a29:	89 de                	mov    %ebx,%esi
f0114a2b:	89 d1                	mov    %edx,%ecx
f0114a2d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114a2f:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0114a35:	b9 23 00 00 00       	mov    $0x23,%ecx
f0114a3a:	b0 00                	mov    $0x0,%al
f0114a3c:	89 d7                	mov    %edx,%edi
f0114a3e:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114a40:	6a 00                	push   $0x0
f0114a42:	6a 0a                	push   $0xa
f0114a44:	6a 14                	push   $0x14
f0114a46:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0114a4c:	50                   	push   %eax
f0114a4d:	e8 1e 50 ff ff       	call   f0109a70 <env_create>
f0114a52:	83 c4 10             	add    $0x10,%esp
f0114a55:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114a58:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114a5b:	8b 40 64             	mov    0x64(%eax),%eax
f0114a5e:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0114a61:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114a64:	8b 40 68             	mov    0x68(%eax),%eax
f0114a67:	89 45 90             	mov    %eax,-0x70(%ebp)
f0114a6a:	8b 45 90             	mov    -0x70(%ebp),%eax
f0114a6d:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0114a70:	83 ec 0c             	sub    $0xc,%esp
f0114a73:	ff 75 cc             	pushl  -0x34(%ebp)
f0114a76:	e8 d5 23 00 00       	call   f0116e50 <ClearUserSpace>
f0114a7b:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0114a7e:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0114a85:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f0114a8c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint8 correct =1 ;
f0114a93:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f0114a97:	83 ec 0c             	sub    $0xc,%esp
f0114a9a:	68 60 b3 12 f0       	push   $0xf012b360
f0114a9f:	e8 c8 c4 fe ff       	call   f0100f6c <cprintf>
f0114aa4:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERN_STACK_TOP - 1;
f0114aa7:	c7 45 e4 ff ff bf ef 	movl   $0xefbfffff,-0x1c(%ebp)
		ptr2 = (char*)KERN_STACK_TOP - 2;
f0114aae:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		while ((ptr1 > (char*)(KERN_STACK_TOP - PAGE_SIZE)) && *ptr1 == 0)	ptr1-- ;
f0114ab5:	eb 03                	jmp    f0114aba <test_allocate_chunk+0xaf>
f0114ab7:	ff 4d e4             	decl   -0x1c(%ebp)
f0114aba:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f0114ac1:	76 09                	jbe    f0114acc <test_allocate_chunk+0xc1>
f0114ac3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114ac6:	8a 00                	mov    (%eax),%al
f0114ac8:	84 c0                	test   %al,%al
f0114aca:	74 eb                	je     f0114ab7 <test_allocate_chunk+0xac>
		if (ptr1 == (char*)(KERN_STACK_TOP - PAGE_SIZE))	*ptr1 = 'A' ;
f0114acc:	81 7d e4 00 f0 bf ef 	cmpl   $0xefbff000,-0x1c(%ebp)
f0114ad3:	75 06                	jne    f0114adb <test_allocate_chunk+0xd0>
f0114ad5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114ad8:	c6 00 41             	movb   $0x41,(%eax)
		tptr[1] = *ptr1 ;
f0114adb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114ade:	8a 00                	mov    (%eax),%al
f0114ae0:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f0114ae6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114ae9:	8a 00                	mov    (%eax),%al
f0114aeb:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		cprintf("*ptr1 = %c\n", *ptr1) ;
f0114af1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114af4:	8a 00                	mov    (%eax),%al
f0114af6:	0f be c0             	movsbl %al,%eax
f0114af9:	83 ec 08             	sub    $0x8,%esp
f0114afc:	50                   	push   %eax
f0114afd:	68 8a b3 12 f0       	push   $0xf012b38a
f0114b02:	e8 65 c4 fe ff       	call   f0100f6c <cprintf>
f0114b07:	83 c4 10             	add    $0x10,%esp
		cprintf("*ptr2 = %c\n", *ptr2) ;
f0114b0a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114b0d:	8a 00                	mov    (%eax),%al
f0114b0f:	0f be c0             	movsbl %al,%eax
f0114b12:	83 ec 08             	sub    $0x8,%esp
f0114b15:	50                   	push   %eax
f0114b16:	68 96 b3 12 f0       	push   $0xf012b396
f0114b1b:	e8 4c c4 fe ff       	call   f0100f6c <cprintf>
f0114b20:	83 c4 10             	add    $0x10,%esp
		uint32 old_perms = GP(proc_directory, KERN_STACK_TOP - 1*PAGE_SIZE) ;
f0114b23:	83 ec 08             	sub    $0x8,%esp
f0114b26:	68 00 f0 bf ef       	push   $0xefbff000
f0114b2b:	ff 75 cc             	pushl  -0x34(%ebp)
f0114b2e:	e8 84 22 00 00       	call   f0116db7 <GP>
f0114b33:	83 c4 10             	add    $0x10,%esp
f0114b36:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114b39:	e8 cb 8e ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114b3e:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERN_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f0114b41:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114b44:	c1 e0 02             	shl    $0x2,%eax
f0114b47:	6a 02                	push   $0x2
f0114b49:	50                   	push   %eax
f0114b4a:	68 00 f0 bf ef       	push   $0xefbff000
f0114b4f:	ff 75 cc             	pushl  -0x34(%ebp)
f0114b52:	e8 c7 4b ff ff       	call   f010971e <allocate_chunk>
f0114b57:	83 c4 10             	add    $0x10,%esp
f0114b5a:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114b5d:	e8 a7 8e ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114b62:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0114b65:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0114b69:	75 08                	jne    f0114b73 <test_allocate_chunk+0x168>
f0114b6b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114b6e:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114b71:	74 2a                	je     f0114b9d <test_allocate_chunk+0x192>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0114b73:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114b76:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114b79:	83 ec 08             	sub    $0x8,%esp
f0114b7c:	6a 00                	push   $0x0
f0114b7e:	50                   	push   %eax
f0114b7f:	ff 75 b0             	pushl  -0x50(%ebp)
f0114b82:	68 a4 b3 12 f0       	push   $0xf012b3a4
f0114b87:	68 3a 05 00 00       	push   $0x53a
f0114b8c:	68 22 9e 12 f0       	push   $0xf0129e22
f0114b91:	e8 21 b9 fe ff       	call   f01004b7 <_warn>
f0114b96:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114b99:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114b9d:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114ba1:	74 04                	je     f0114ba7 <test_allocate_chunk+0x19c>
f0114ba3:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114ba7:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114bab:	e8 59 8e ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114bb0:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERN_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0114bb3:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114bb6:	01 c0                	add    %eax,%eax
f0114bb8:	89 c1                	mov    %eax,%ecx
f0114bba:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114bbd:	89 d0                	mov    %edx,%eax
f0114bbf:	c1 e0 02             	shl    $0x2,%eax
f0114bc2:	01 d0                	add    %edx,%eax
f0114bc4:	f7 d8                	neg    %eax
f0114bc6:	2d 00 00 40 10       	sub    $0x10400000,%eax
f0114bcb:	6a 02                	push   $0x2
f0114bcd:	51                   	push   %ecx
f0114bce:	50                   	push   %eax
f0114bcf:	ff 75 cc             	pushl  -0x34(%ebp)
f0114bd2:	e8 47 4b ff ff       	call   f010971e <allocate_chunk>
f0114bd7:	83 c4 10             	add    $0x10,%esp
f0114bda:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114bdd:	e8 27 8e ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114be2:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0114be5:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0114be9:	75 08                	jne    f0114bf3 <test_allocate_chunk+0x1e8>
f0114beb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114bee:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0114bf1:	74 2a                	je     f0114c1d <test_allocate_chunk+0x212>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0114bf3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114bf6:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114bf9:	83 ec 08             	sub    $0x8,%esp
f0114bfc:	6a 00                	push   $0x0
f0114bfe:	50                   	push   %eax
f0114bff:	ff 75 b0             	pushl  -0x50(%ebp)
f0114c02:	68 a4 b3 12 f0       	push   $0xf012b3a4
f0114c07:	68 48 05 00 00       	push   $0x548
f0114c0c:	68 22 9e 12 f0       	push   $0xf0129e22
f0114c11:	e8 a1 b8 fe ff       	call   f01004b7 <_warn>
f0114c16:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c19:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0114c1d:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114c21:	74 04                	je     f0114c27 <test_allocate_chunk+0x21c>
f0114c23:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114c27:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (CCP(proc_directory, 0, KERN_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f0114c2b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114c2e:	c1 e0 02             	shl    $0x2,%eax
f0114c31:	83 ec 08             	sub    $0x8,%esp
f0114c34:	6a 03                	push   $0x3
f0114c36:	6a 00                	push   $0x0
f0114c38:	6a 00                	push   $0x0
f0114c3a:	68 ff 0f 00 00       	push   $0xfff
f0114c3f:	ff 75 b8             	pushl  -0x48(%ebp)
f0114c42:	6a 01                	push   $0x1
f0114c44:	50                   	push   %eax
f0114c45:	68 00 f0 bf ef       	push   $0xefbff000
f0114c4a:	6a 00                	push   $0x0
f0114c4c:	ff 75 cc             	pushl  -0x34(%ebp)
f0114c4f:	e8 30 22 00 00       	call   f0116e84 <CCP>
f0114c54:	83 c4 30             	add    $0x30,%esp
f0114c57:	85 c0                	test   %eax,%eax
f0114c59:	75 1e                	jne    f0114c79 <test_allocate_chunk+0x26e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114c5b:	83 ec 04             	sub    $0x4,%esp
f0114c5e:	68 0c b4 12 f0       	push   $0xf012b40c
f0114c63:	68 50 05 00 00       	push   $0x550
f0114c68:	68 22 9e 12 f0       	push   $0xf0129e22
f0114c6d:	e8 45 b8 fe ff       	call   f01004b7 <_warn>
f0114c72:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114c75:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114c79:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114c7d:	74 04                	je     f0114c83 <test_allocate_chunk+0x278>
f0114c7f:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114c83:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f0114c87:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114c8a:	8a 10                	mov    (%eax),%dl
f0114c8c:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f0114c92:	38 c2                	cmp    %al,%dl
f0114c94:	75 0f                	jne    f0114ca5 <test_allocate_chunk+0x29a>
f0114c96:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114c99:	8a 10                	mov    (%eax),%dl
f0114c9b:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f0114ca1:	38 c2                	cmp    %al,%dl
f0114ca3:	74 1e                	je     f0114cc3 <test_allocate_chunk+0x2b8>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114ca5:	83 ec 04             	sub    $0x4,%esp
f0114ca8:	68 58 b4 12 f0       	push   $0xf012b458
f0114cad:	68 58 05 00 00       	push   $0x558
f0114cb2:	68 22 9e 12 f0       	push   $0xf0129e22
f0114cb7:	e8 fb b7 fe ff       	call   f01004b7 <_warn>
f0114cbc:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114cbf:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f0114cc3:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114cc7:	74 04                	je     f0114ccd <test_allocate_chunk+0x2c2>
f0114cc9:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114ccd:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0114cd1:	83 ec 0c             	sub    $0xc,%esp
f0114cd4:	68 d5 b1 12 f0       	push   $0xf012b1d5
f0114cd9:	e8 8e c2 fe ff       	call   f0100f6c <cprintf>
f0114cde:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f0114ce1:	83 ec 0c             	sub    $0xc,%esp
f0114ce4:	68 90 b4 12 f0       	push   $0xf012b490
f0114ce9:	e8 7e c2 fe ff       	call   f0100f6c <cprintf>
f0114cee:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114cf1:	e8 13 8d ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114cf6:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0114cf9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114cfc:	c1 e0 05             	shl    $0x5,%eax
f0114cff:	68 02 0e 00 00       	push   $0xe02
f0114d04:	50                   	push   %eax
f0114d05:	6a 00                	push   $0x0
f0114d07:	ff 75 cc             	pushl  -0x34(%ebp)
f0114d0a:	e8 0f 4a ff ff       	call   f010971e <allocate_chunk>
f0114d0f:	83 c4 10             	add    $0x10,%esp
f0114d12:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114d15:	e8 ef 8c ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114d1a:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f0114d1d:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f0114d21:	75 36                	jne    f0114d59 <test_allocate_chunk+0x34e>
f0114d23:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114d26:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114d29:	89 c1                	mov    %eax,%ecx
f0114d2b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114d2e:	c1 e0 05             	shl    $0x5,%eax
f0114d31:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114d34:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114d3b:	99                   	cltd   
f0114d3c:	f7 fe                	idiv   %esi
f0114d3e:	89 c3                	mov    %eax,%ebx
f0114d40:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114d43:	c1 e0 05             	shl    $0x5,%eax
f0114d46:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114d49:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114d50:	99                   	cltd   
f0114d51:	f7 fe                	idiv   %esi
f0114d53:	01 d8                	add    %ebx,%eax
f0114d55:	39 c1                	cmp    %eax,%ecx
f0114d57:	74 54                	je     f0114dad <test_allocate_chunk+0x3a2>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0114d59:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114d5c:	c1 e0 05             	shl    $0x5,%eax
f0114d5f:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114d62:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114d69:	99                   	cltd   
f0114d6a:	f7 ff                	idiv   %edi
f0114d6c:	89 c1                	mov    %eax,%ecx
f0114d6e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114d71:	c1 e0 05             	shl    $0x5,%eax
f0114d74:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114d77:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114d7e:	99                   	cltd   
f0114d7f:	f7 fe                	idiv   %esi
f0114d81:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114d84:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114d87:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114d8a:	83 ec 08             	sub    $0x8,%esp
f0114d8d:	52                   	push   %edx
f0114d8e:	50                   	push   %eax
f0114d8f:	ff 75 a8             	pushl  -0x58(%ebp)
f0114d92:	68 d0 b4 12 f0       	push   $0xf012b4d0
f0114d97:	68 6d 05 00 00       	push   $0x56d
f0114d9c:	68 22 9e 12 f0       	push   $0xf0129e22
f0114da1:	e8 11 b7 fe ff       	call   f01004b7 <_warn>
f0114da6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114da9:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114dad:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114db1:	74 04                	je     f0114db7 <test_allocate_chunk+0x3ac>
f0114db3:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114db7:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0114dbb:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114dc2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114dc5:	c1 e0 05             	shl    $0x5,%eax
f0114dc8:	83 ec 08             	sub    $0x8,%esp
f0114dcb:	6a 03                	push   $0x3
f0114dcd:	6a 00                	push   $0x0
f0114dcf:	6a 00                	push   $0x0
f0114dd1:	68 07 0e 00 00       	push   $0xe07
f0114dd6:	68 03 0e 00 00       	push   $0xe03
f0114ddb:	6a 01                	push   $0x1
f0114ddd:	50                   	push   %eax
f0114dde:	6a 00                	push   $0x0
f0114de0:	6a 00                	push   $0x0
f0114de2:	ff 75 cc             	pushl  -0x34(%ebp)
f0114de5:	e8 9a 20 00 00       	call   f0116e84 <CCP>
f0114dea:	83 c4 30             	add    $0x30,%esp
f0114ded:	85 c0                	test   %eax,%eax
f0114def:	75 25                	jne    f0114e16 <test_allocate_chunk+0x40b>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114df1:	83 ec 04             	sub    $0x4,%esp
f0114df4:	68 0c b4 12 f0       	push   $0xf012b40c
f0114df9:	68 76 05 00 00       	push   $0x576
f0114dfe:	68 22 9e 12 f0       	push   $0xf0129e22
f0114e03:	e8 af b6 fe ff       	call   f01004b7 <_warn>
f0114e08:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114e0b:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0114e0f:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f0114e16:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114e1a:	74 04                	je     f0114e20 <test_allocate_chunk+0x415>
f0114e1c:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114e20:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0114e24:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0114e28:	74 5a                	je     f0114e84 <test_allocate_chunk+0x479>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f0114e2a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0114e2d:	01 c0                	add    %eax,%eax
f0114e2f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0114e32:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114e35:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f0114e38:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114e3b:	01 c0                	add    %eax,%eax
f0114e3d:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0114e40:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114e43:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0114e46:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0114e49:	8a 00                	mov    (%eax),%al
f0114e4b:	3c 4b                	cmp    $0x4b,%al
f0114e4d:	75 09                	jne    f0114e58 <test_allocate_chunk+0x44d>
f0114e4f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0114e52:	8a 00                	mov    (%eax),%al
f0114e54:	3c 4d                	cmp    $0x4d,%al
f0114e56:	74 1e                	je     f0114e76 <test_allocate_chunk+0x46b>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0114e58:	83 ec 04             	sub    $0x4,%esp
f0114e5b:	68 58 b4 12 f0       	push   $0xf012b458
f0114e60:	68 84 05 00 00       	push   $0x584
f0114e65:	68 22 9e 12 f0       	push   $0xf0129e22
f0114e6a:	e8 48 b6 fe ff       	call   f01004b7 <_warn>
f0114e6f:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0114e72:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f0114e76:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114e7a:	74 04                	je     f0114e80 <test_allocate_chunk+0x475>
f0114e7c:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f0114e80:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0114e84:	83 ec 0c             	sub    $0xc,%esp
f0114e87:	68 af a7 12 f0       	push   $0xf012a7af
f0114e8c:	e8 db c0 fe ff       	call   f0100f6c <cprintf>
f0114e91:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0114e94:	83 ec 0c             	sub    $0xc,%esp
f0114e97:	68 30 b5 12 f0       	push   $0xf012b530
f0114e9c:	e8 cb c0 fe ff       	call   f0100f6c <cprintf>
f0114ea1:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114ea4:	e8 60 8b ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114ea9:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f0114eac:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114eaf:	c1 e0 06             	shl    $0x6,%eax
f0114eb2:	89 c2                	mov    %eax,%edx
f0114eb4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114eb7:	c1 e0 05             	shl    $0x5,%eax
f0114eba:	6a 00                	push   $0x0
f0114ebc:	52                   	push   %edx
f0114ebd:	50                   	push   %eax
f0114ebe:	ff 75 cc             	pushl  -0x34(%ebp)
f0114ec1:	e8 58 48 ff ff       	call   f010971e <allocate_chunk>
f0114ec6:	83 c4 10             	add    $0x10,%esp
f0114ec9:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0114ecc:	e8 38 8b ff ff       	call   f010da09 <sys_calculate_free_frames>
f0114ed1:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f0114ed4:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f0114ed8:	75 36                	jne    f0114f10 <test_allocate_chunk+0x505>
f0114eda:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114edd:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114ee0:	89 c1                	mov    %eax,%ecx
f0114ee2:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114ee5:	c1 e0 06             	shl    $0x6,%eax
f0114ee8:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114eeb:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114ef2:	99                   	cltd   
f0114ef3:	f7 ff                	idiv   %edi
f0114ef5:	89 c3                	mov    %eax,%ebx
f0114ef7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114efa:	c1 e0 06             	shl    $0x6,%eax
f0114efd:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114f00:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0114f07:	99                   	cltd   
f0114f08:	f7 fe                	idiv   %esi
f0114f0a:	01 d8                	add    %ebx,%eax
f0114f0c:	39 c1                	cmp    %eax,%ecx
f0114f0e:	74 54                	je     f0114f64 <test_allocate_chunk+0x559>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f0114f10:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f13:	c1 e0 06             	shl    $0x6,%eax
f0114f16:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0114f19:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0114f20:	99                   	cltd   
f0114f21:	f7 fb                	idiv   %ebx
f0114f23:	89 c1                	mov    %eax,%ecx
f0114f25:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f28:	c1 e0 06             	shl    $0x6,%eax
f0114f2b:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0114f2e:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0114f35:	99                   	cltd   
f0114f36:	f7 ff                	idiv   %edi
f0114f38:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0114f3b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0114f3e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0114f41:	83 ec 08             	sub    $0x8,%esp
f0114f44:	52                   	push   %edx
f0114f45:	50                   	push   %eax
f0114f46:	ff 75 a4             	pushl  -0x5c(%ebp)
f0114f49:	68 d0 b4 12 f0       	push   $0xf012b4d0
f0114f4e:	68 9a 05 00 00       	push   $0x59a
f0114f53:	68 22 9e 12 f0       	push   $0xf0129e22
f0114f58:	e8 5a b5 fe ff       	call   f01004b7 <_warn>
f0114f5d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f60:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f0114f64:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114f68:	74 04                	je     f0114f6e <test_allocate_chunk+0x563>
f0114f6a:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f0114f6e:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f0114f72:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0114f79:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f7c:	c1 e0 06             	shl    $0x6,%eax
f0114f7f:	89 c2                	mov    %eax,%edx
f0114f81:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0114f84:	c1 e0 05             	shl    $0x5,%eax
f0114f87:	83 ec 08             	sub    $0x8,%esp
f0114f8a:	6a 03                	push   $0x3
f0114f8c:	6a 00                	push   $0x0
f0114f8e:	6a 00                	push   $0x0
f0114f90:	68 07 0e 00 00       	push   $0xe07
f0114f95:	6a 01                	push   $0x1
f0114f97:	6a 01                	push   $0x1
f0114f99:	52                   	push   %edx
f0114f9a:	50                   	push   %eax
f0114f9b:	6a 00                	push   $0x0
f0114f9d:	ff 75 cc             	pushl  -0x34(%ebp)
f0114fa0:	e8 df 1e 00 00       	call   f0116e84 <CCP>
f0114fa5:	83 c4 30             	add    $0x30,%esp
f0114fa8:	85 c0                	test   %eax,%eax
f0114faa:	75 25                	jne    f0114fd1 <test_allocate_chunk+0x5c6>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0114fac:	83 ec 04             	sub    $0x4,%esp
f0114faf:	68 0c b4 12 f0       	push   $0xf012b40c
f0114fb4:	68 a3 05 00 00       	push   $0x5a3
f0114fb9:	68 22 9e 12 f0       	push   $0xf0129e22
f0114fbe:	e8 f4 b4 fe ff       	call   f01004b7 <_warn>
f0114fc3:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0114fc6:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0114fca:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f0114fd1:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0114fd5:	74 04                	je     f0114fdb <test_allocate_chunk+0x5d0>
f0114fd7:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0114fdb:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f0114fdf:	83 ec 0c             	sub    $0xc,%esp
f0114fe2:	68 12 a8 12 f0       	push   $0xf012a812
f0114fe7:	e8 80 bf fe ff       	call   f0100f6c <cprintf>
f0114fec:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f0114fef:	83 ec 0c             	sub    $0xc,%esp
f0114ff2:	68 70 b5 12 f0       	push   $0xf012b570
f0114ff7:	e8 70 bf fe ff       	call   f0100f6c <cprintf>
f0114ffc:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0114fff:	e8 05 8a ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115004:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f0115007:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011500a:	c1 e0 06             	shl    $0x6,%eax
f011500d:	68 06 0e 00 00       	push   $0xe06
f0115012:	50                   	push   %eax
f0115013:	68 00 00 00 80       	push   $0x80000000
f0115018:	ff 75 cc             	pushl  -0x34(%ebp)
f011501b:	e8 fe 46 ff ff       	call   f010971e <allocate_chunk>
f0115020:	83 c4 10             	add    $0x10,%esp
f0115023:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0115026:	e8 de 89 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011502b:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f011502e:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0115032:	75 36                	jne    f011506a <test_allocate_chunk+0x65f>
f0115034:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115037:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011503a:	89 c1                	mov    %eax,%ecx
f011503c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011503f:	c1 e0 06             	shl    $0x6,%eax
f0115042:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115045:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011504c:	99                   	cltd   
f011504d:	f7 fb                	idiv   %ebx
f011504f:	89 c3                	mov    %eax,%ebx
f0115051:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115054:	c1 e0 06             	shl    $0x6,%eax
f0115057:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011505a:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0115061:	99                   	cltd   
f0115062:	f7 fe                	idiv   %esi
f0115064:	01 d8                	add    %ebx,%eax
f0115066:	39 c1                	cmp    %eax,%ecx
f0115068:	74 54                	je     f01150be <test_allocate_chunk+0x6b3>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f011506a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011506d:	c1 e0 06             	shl    $0x6,%eax
f0115070:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115073:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f011507a:	99                   	cltd   
f011507b:	f7 ff                	idiv   %edi
f011507d:	89 c1                	mov    %eax,%ecx
f011507f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115082:	c1 e0 06             	shl    $0x6,%eax
f0115085:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0115088:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011508f:	99                   	cltd   
f0115090:	f7 fb                	idiv   %ebx
f0115092:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0115095:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115098:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011509b:	83 ec 08             	sub    $0x8,%esp
f011509e:	52                   	push   %edx
f011509f:	50                   	push   %eax
f01150a0:	ff 75 9c             	pushl  -0x64(%ebp)
f01150a3:	68 d0 b4 12 f0       	push   $0xf012b4d0
f01150a8:	68 b9 05 00 00       	push   $0x5b9
f01150ad:	68 22 9e 12 f0       	push   $0xf0129e22
f01150b2:	e8 00 b4 fe ff       	call   f01004b7 <_warn>
f01150b7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01150ba:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 5 ;
f01150be:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01150c2:	74 04                	je     f01150c8 <test_allocate_chunk+0x6bd>
f01150c4:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f01150c8:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f01150cc:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01150d3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01150d6:	c1 e0 06             	shl    $0x6,%eax
f01150d9:	83 ec 08             	sub    $0x8,%esp
f01150dc:	6a 03                	push   $0x3
f01150de:	6a 00                	push   $0x0
f01150e0:	6a 00                	push   $0x0
f01150e2:	68 07 0e 00 00       	push   $0xe07
f01150e7:	68 07 0e 00 00       	push   $0xe07
f01150ec:	6a 01                	push   $0x1
f01150ee:	50                   	push   %eax
f01150ef:	68 00 00 00 80       	push   $0x80000000
f01150f4:	6a 00                	push   $0x0
f01150f6:	ff 75 cc             	pushl  -0x34(%ebp)
f01150f9:	e8 86 1d 00 00       	call   f0116e84 <CCP>
f01150fe:	83 c4 30             	add    $0x30,%esp
f0115101:	85 c0                	test   %eax,%eax
f0115103:	75 25                	jne    f011512a <test_allocate_chunk+0x71f>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f0115105:	83 ec 04             	sub    $0x4,%esp
f0115108:	68 0c b4 12 f0       	push   $0xf012b40c
f011510d:	68 c2 05 00 00       	push   $0x5c2
f0115112:	68 22 9e 12 f0       	push   $0xf0129e22
f0115117:	e8 9b b3 fe ff       	call   f01004b7 <_warn>
f011511c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011511f:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f0115123:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 10 ;
f011512a:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f011512e:	74 04                	je     f0115134 <test_allocate_chunk+0x729>
f0115130:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0115134:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		if (chk_cnt)
f0115138:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f011513c:	74 6f                	je     f01151ad <test_allocate_chunk+0x7a2>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f011513e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0115141:	01 c0                	add    %eax,%eax
f0115143:	05 00 00 00 80       	add    $0x80000000,%eax
f0115148:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f011514b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011514e:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0115151:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0115154:	89 d0                	mov    %edx,%eax
f0115156:	c1 e0 02             	shl    $0x2,%eax
f0115159:	01 d0                	add    %edx,%eax
f011515b:	01 c0                	add    %eax,%eax
f011515d:	01 d0                	add    %edx,%eax
f011515f:	01 c0                	add    %eax,%eax
f0115161:	05 00 00 00 80       	add    $0x80000000,%eax
f0115166:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0115169:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011516c:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f011516f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115172:	8a 00                	mov    (%eax),%al
f0115174:	3c 4b                	cmp    $0x4b,%al
f0115176:	75 09                	jne    f0115181 <test_allocate_chunk+0x776>
f0115178:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011517b:	8a 00                	mov    (%eax),%al
f011517d:	3c 4d                	cmp    $0x4d,%al
f011517f:	74 1e                	je     f011519f <test_allocate_chunk+0x794>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0115181:	83 ec 04             	sub    $0x4,%esp
f0115184:	68 58 b4 12 f0       	push   $0xf012b458
f0115189:	68 d0 05 00 00       	push   $0x5d0
f011518e:	68 22 9e 12 f0       	push   $0xf0129e22
f0115193:	e8 1f b3 fe ff       	call   f01004b7 <_warn>
f0115198:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011519b:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			}
			if (correct) eval += 5 ;
f011519f:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01151a3:	74 04                	je     f01151a9 <test_allocate_chunk+0x79e>
f01151a5:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
			correct = 1 ;
f01151a9:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f01151ad:	83 ec 0c             	sub    $0xc,%esp
f01151b0:	68 e4 b2 12 f0       	push   $0xf012b2e4
f01151b5:	e8 b2 bd fe ff       	call   f0100f6c <cprintf>
f01151ba:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f01151bd:	83 ec 0c             	sub    $0xc,%esp
f01151c0:	68 ac b5 12 f0       	push   $0xf012b5ac
f01151c5:	e8 a2 bd fe ff       	call   f0100f6c <cprintf>
f01151ca:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01151cd:	e8 37 88 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01151d2:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f01151d5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01151d8:	89 d0                	mov    %edx,%eax
f01151da:	01 c0                	add    %eax,%eax
f01151dc:	01 d0                	add    %edx,%eax
f01151de:	01 c0                	add    %eax,%eax
f01151e0:	01 d0                	add    %edx,%eax
f01151e2:	68 04 0e 00 00       	push   $0xe04
f01151e7:	50                   	push   %eax
f01151e8:	68 00 fc 3f 40       	push   $0x403ffc00
f01151ed:	ff 75 cc             	pushl  -0x34(%ebp)
f01151f0:	e8 29 45 ff ff       	call   f010971e <allocate_chunk>
f01151f5:	83 c4 10             	add    $0x10,%esp
f01151f8:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01151fb:	e8 09 88 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0115200:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f0115203:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f0115207:	75 0b                	jne    f0115214 <test_allocate_chunk+0x809>
f0115209:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011520c:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011520f:	83 f8 05             	cmp    $0x5,%eax
f0115212:	74 2a                	je     f011523e <test_allocate_chunk+0x833>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f0115214:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0115217:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011521a:	83 ec 08             	sub    $0x8,%esp
f011521d:	6a 05                	push   $0x5
f011521f:	50                   	push   %eax
f0115220:	ff 75 98             	pushl  -0x68(%ebp)
f0115223:	68 d0 b4 12 f0       	push   $0xf012b4d0
f0115228:	68 e7 05 00 00       	push   $0x5e7
f011522d:	68 22 9e 12 f0       	push   $0xf0129e22
f0115232:	e8 80 b2 fe ff       	call   f01004b7 <_warn>
f0115237:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011523a:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
		}
		if (correct) eval += 10 ;
f011523e:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f0115242:	74 04                	je     f0115248 <test_allocate_chunk+0x83d>
f0115244:	83 45 e0 0a          	addl   $0xa,-0x20(%ebp)
		correct = 1 ;
f0115248:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

		int chk_cnt = 1 ;
f011524c:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0115253:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115256:	89 d0                	mov    %edx,%eax
f0115258:	01 c0                	add    %eax,%eax
f011525a:	01 d0                	add    %edx,%eax
f011525c:	c1 e0 02             	shl    $0x2,%eax
f011525f:	83 ec 08             	sub    $0x8,%esp
f0115262:	6a 03                	push   $0x3
f0115264:	6a 00                	push   $0x0
f0115266:	6a 00                	push   $0x0
f0115268:	68 07 0e 00 00       	push   $0xe07
f011526d:	68 05 0e 00 00       	push   $0xe05
f0115272:	6a 01                	push   $0x1
f0115274:	50                   	push   %eax
f0115275:	68 00 f0 3f 40       	push   $0x403ff000
f011527a:	6a 00                	push   $0x0
f011527c:	ff 75 cc             	pushl  -0x34(%ebp)
f011527f:	e8 00 1c 00 00       	call   f0116e84 <CCP>
f0115284:	83 c4 30             	add    $0x30,%esp
f0115287:	85 c0                	test   %eax,%eax
f0115289:	75 25                	jne    f01152b0 <test_allocate_chunk+0x8a5>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f011528b:	83 ec 04             	sub    $0x4,%esp
f011528e:	68 0c b4 12 f0       	push   $0xf012b40c
f0115293:	68 f0 05 00 00       	push   $0x5f0
f0115298:	68 22 9e 12 f0       	push   $0xf0129e22
f011529d:	e8 15 b2 fe ff       	call   f01004b7 <_warn>
f01152a2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01152a5:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
			chk_cnt = 0 ;
f01152a9:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f01152b0:	80 7d df 00          	cmpb   $0x0,-0x21(%ebp)
f01152b4:	74 04                	je     f01152ba <test_allocate_chunk+0x8af>
f01152b6:	83 45 e0 05          	addl   $0x5,-0x20(%ebp)
		correct = 1 ;
f01152ba:	c6 45 df 01          	movb   $0x1,-0x21(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f01152be:	83 ec 0c             	sub    $0xc,%esp
f01152c1:	68 e3 b5 12 f0       	push   $0xf012b5e3
f01152c6:	e8 a1 bc fe ff       	call   f0100f6c <cprintf>
f01152cb:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f01152ce:	83 ec 08             	sub    $0x8,%esp
f01152d1:	ff 75 e0             	pushl  -0x20(%ebp)
f01152d4:	68 f4 b5 12 f0       	push   $0xf012b5f4
f01152d9:	e8 8e bc fe ff       	call   f0100f6c <cprintf>
f01152de:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01152e1:	83 7d e0 64          	cmpl   $0x64,-0x20(%ebp)
f01152e5:	75 10                	jne    f01152f7 <test_allocate_chunk+0x8ec>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f01152e7:	83 ec 0c             	sub    $0xc,%esp
f01152ea:	68 28 b6 12 f0       	push   $0xf012b628
f01152ef:	e8 78 bc fe ff       	call   f0100f6c <cprintf>
f01152f4:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01152f7:	a1 e4 51 55 f0       	mov    0xf05551e4,%eax
f01152fc:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01152ff:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115302:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115305:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011530a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011530d:	5b                   	pop    %ebx
f011530e:	5e                   	pop    %esi
f011530f:	5f                   	pop    %edi
f0115310:	5d                   	pop    %ebp
f0115311:	c3                   	ret    

f0115312 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f0115312:	55                   	push   %ebp
f0115313:	89 e5                	mov    %esp,%ebp
f0115315:	57                   	push   %edi
f0115316:	56                   	push   %esi
f0115317:	53                   	push   %ebx
f0115318:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011531e:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115321:	bb 24 a5 12 f0       	mov    $0xf012a524,%ebx
f0115326:	ba 0f 00 00 00       	mov    $0xf,%edx
f011532b:	89 c7                	mov    %eax,%edi
f011532d:	89 de                	mov    %ebx,%esi
f011532f:	89 d1                	mov    %edx,%ecx
f0115331:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115333:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0115336:	b9 23 00 00 00       	mov    $0x23,%ecx
f011533b:	b0 00                	mov    $0x0,%al
f011533d:	89 d7                	mov    %edx,%edi
f011533f:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0115341:	6a 00                	push   $0x0
f0115343:	6a 0a                	push   $0xa
f0115345:	6a 14                	push   $0x14
f0115347:	8d 45 8e             	lea    -0x72(%ebp),%eax
f011534a:	50                   	push   %eax
f011534b:	e8 20 47 ff ff       	call   f0109a70 <env_create>
f0115350:	83 c4 10             	add    $0x10,%esp
f0115353:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0115356:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115359:	8b 40 64             	mov    0x64(%eax),%eax
f011535c:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f011535f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115362:	8b 40 68             	mov    0x68(%eax),%eax
f0115365:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0115368:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011536b:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f011536e:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0115375:	75 70 20 
f0115378:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f011537f:	00 00 00 
f0115382:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0115385:	b9 03 00 00 00       	mov    $0x3,%ecx
f011538a:	b8 00 00 00 00       	mov    $0x0,%eax
f011538f:	89 d7                	mov    %edx,%edi
f0115391:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0115393:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115396:	8b 40 10             	mov    0x10(%eax),%eax
f0115399:	83 ec 08             	sub    $0x8,%esp
f011539c:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f01153a2:	52                   	push   %edx
f01153a3:	50                   	push   %eax
f01153a4:	e8 87 b9 00 00       	call   f0120d30 <ltostr>
f01153a9:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01153ac:	83 ec 04             	sub    $0x4,%esp
f01153af:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01153b5:	50                   	push   %eax
f01153b6:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f01153bc:	50                   	push   %eax
f01153bd:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f01153c3:	50                   	push   %eax
f01153c4:	e8 40 ba 00 00       	call   f0120e09 <strcconcat>
f01153c9:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01153cc:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f01153d3:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f01153da:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f01153e1:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f01153e8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f01153ec:	83 ec 0c             	sub    $0xc,%esp
f01153ef:	ff 75 d8             	pushl  -0x28(%ebp)
f01153f2:	e8 59 1a 00 00       	call   f0116e50 <ClearUserSpace>
f01153f7:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f01153fa:	83 ec 0c             	sub    $0xc,%esp
f01153fd:	68 68 b6 12 f0       	push   $0xf012b668
f0115402:	e8 65 bb fe ff       	call   f0100f6c <cprintf>
f0115407:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f011540a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011540d:	c1 e0 03             	shl    $0x3,%eax
f0115410:	83 ec 04             	sub    $0x4,%esp
f0115413:	50                   	push   %eax
f0115414:	6a 00                	push   $0x0
f0115416:	ff 75 d8             	pushl  -0x28(%ebp)
f0115419:	e8 34 43 ff ff       	call   f0109752 <calculate_required_frames>
f011541e:	83 c4 10             	add    $0x10,%esp
f0115421:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0115424:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0115428:	74 23                	je     f011544d <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f011542a:	83 ec 0c             	sub    $0xc,%esp
f011542d:	6a 03                	push   $0x3
f011542f:	ff 75 c8             	pushl  -0x38(%ebp)
f0115432:	68 9c b6 12 f0       	push   $0xf012b69c
f0115437:	68 29 06 00 00       	push   $0x629
f011543c:	68 22 9e 12 f0       	push   $0xf0129e22
f0115441:	e8 71 b0 fe ff       	call   f01004b7 <_warn>
f0115446:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115449:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011544d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115451:	74 04                	je     f0115457 <test_calculate_required_frames+0x145>
f0115453:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115457:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f011545b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011545e:	c1 e0 02             	shl    $0x2,%eax
f0115461:	83 ec 04             	sub    $0x4,%esp
f0115464:	50                   	push   %eax
f0115465:	6a 00                	push   $0x0
f0115467:	ff 75 d8             	pushl  -0x28(%ebp)
f011546a:	e8 e3 42 ff ff       	call   f0109752 <calculate_required_frames>
f011546f:	83 c4 10             	add    $0x10,%esp
f0115472:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f0115475:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f011547c:	74 26                	je     f01154a4 <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f011547e:	83 ec 0c             	sub    $0xc,%esp
f0115481:	68 01 04 00 00       	push   $0x401
f0115486:	ff 75 c8             	pushl  -0x38(%ebp)
f0115489:	68 9c b6 12 f0       	push   $0xf012b69c
f011548e:	68 33 06 00 00       	push   $0x633
f0115493:	68 22 9e 12 f0       	push   $0xf0129e22
f0115498:	e8 1a b0 fe ff       	call   f01004b7 <_warn>
f011549d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01154a0:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01154a4:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01154a8:	74 04                	je     f01154ae <test_calculate_required_frames+0x19c>
f01154aa:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01154ae:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f01154b2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01154b5:	c1 e0 0a             	shl    $0xa,%eax
f01154b8:	83 ec 04             	sub    $0x4,%esp
f01154bb:	50                   	push   %eax
f01154bc:	6a 00                	push   $0x0
f01154be:	ff 75 d8             	pushl  -0x28(%ebp)
f01154c1:	e8 8c 42 ff ff       	call   f0109752 <calculate_required_frames>
f01154c6:	83 c4 10             	add    $0x10,%esp
f01154c9:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f01154cc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01154cf:	c1 e0 0a             	shl    $0xa,%eax
f01154d2:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01154d5:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01154dc:	99                   	cltd   
f01154dd:	f7 fb                	idiv   %ebx
f01154df:	89 c1                	mov    %eax,%ecx
f01154e1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01154e4:	c1 e0 0a             	shl    $0xa,%eax
f01154e7:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01154ea:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01154f1:	99                   	cltd   
f01154f2:	f7 fe                	idiv   %esi
f01154f4:	01 c8                	add    %ecx,%eax
f01154f6:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01154f9:	74 4c                	je     f0115547 <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f01154fb:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01154fe:	c1 e0 0a             	shl    $0xa,%eax
f0115501:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115504:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011550b:	99                   	cltd   
f011550c:	f7 fb                	idiv   %ebx
f011550e:	89 c1                	mov    %eax,%ecx
f0115510:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115513:	c1 e0 0a             	shl    $0xa,%eax
f0115516:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115519:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0115520:	99                   	cltd   
f0115521:	f7 fe                	idiv   %esi
f0115523:	01 c8                	add    %ecx,%eax
f0115525:	83 ec 0c             	sub    $0xc,%esp
f0115528:	50                   	push   %eax
f0115529:	ff 75 c8             	pushl  -0x38(%ebp)
f011552c:	68 9c b6 12 f0       	push   $0xf012b69c
f0115531:	68 3d 06 00 00       	push   $0x63d
f0115536:	68 22 9e 12 f0       	push   $0xf0129e22
f011553b:	e8 77 af fe ff       	call   f01004b7 <_warn>
f0115540:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115543:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115547:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011554b:	74 04                	je     f0115551 <test_calculate_required_frames+0x23f>
f011554d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115551:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f0115555:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115558:	89 d0                	mov    %edx,%eax
f011555a:	01 c0                	add    %eax,%eax
f011555c:	01 d0                	add    %edx,%eax
f011555e:	01 c0                	add    %eax,%eax
f0115560:	83 ec 04             	sub    $0x4,%esp
f0115563:	50                   	push   %eax
f0115564:	68 00 10 00 00       	push   $0x1000
f0115569:	ff 75 d8             	pushl  -0x28(%ebp)
f011556c:	e8 e1 41 ff ff       	call   f0109752 <calculate_required_frames>
f0115571:	83 c4 10             	add    $0x10,%esp
f0115574:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0115577:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f011557b:	74 23                	je     f01155a0 <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f011557d:	83 ec 0c             	sub    $0xc,%esp
f0115580:	6a 03                	push   $0x3
f0115582:	ff 75 c8             	pushl  -0x38(%ebp)
f0115585:	68 9c b6 12 f0       	push   $0xf012b69c
f011558a:	68 49 06 00 00       	push   $0x649
f011558f:	68 22 9e 12 f0       	push   $0xf0129e22
f0115594:	e8 1e af fe ff       	call   f01004b7 <_warn>
f0115599:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011559c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01155a0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01155a4:	74 04                	je     f01155aa <test_calculate_required_frames+0x298>
f01155a6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01155aa:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f01155ae:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01155b1:	89 c2                	mov    %eax,%edx
f01155b3:	01 d2                	add    %edx,%edx
f01155b5:	01 d0                	add    %edx,%eax
f01155b7:	83 ec 04             	sub    $0x4,%esp
f01155ba:	50                   	push   %eax
f01155bb:	68 00 18 00 00       	push   $0x1800
f01155c0:	ff 75 d8             	pushl  -0x28(%ebp)
f01155c3:	e8 8a 41 ff ff       	call   f0109752 <calculate_required_frames>
f01155c8:	83 c4 10             	add    $0x10,%esp
f01155cb:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f01155ce:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f01155d2:	74 23                	je     f01155f7 <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f01155d4:	83 ec 0c             	sub    $0xc,%esp
f01155d7:	6a 03                	push   $0x3
f01155d9:	ff 75 c8             	pushl  -0x38(%ebp)
f01155dc:	68 9c b6 12 f0       	push   $0xf012b69c
f01155e1:	68 53 06 00 00       	push   $0x653
f01155e6:	68 22 9e 12 f0       	push   $0xf0129e22
f01155eb:	e8 c7 ae fe ff       	call   f01004b7 <_warn>
f01155f0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01155f3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01155f7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01155fb:	74 04                	je     f0115601 <test_calculate_required_frames+0x2ef>
f01155fd:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115601:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0115605:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115608:	89 d0                	mov    %edx,%eax
f011560a:	c1 e0 02             	shl    $0x2,%eax
f011560d:	01 d0                	add    %edx,%eax
f011560f:	01 c0                	add    %eax,%eax
f0115611:	83 ec 04             	sub    $0x4,%esp
f0115614:	50                   	push   %eax
f0115615:	68 00 00 40 00       	push   $0x400000
f011561a:	ff 75 d8             	pushl  -0x28(%ebp)
f011561d:	e8 30 41 ff ff       	call   f0109752 <calculate_required_frames>
f0115622:	83 c4 10             	add    $0x10,%esp
f0115625:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f0115628:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f011562f:	74 26                	je     f0115657 <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0115631:	83 ec 0c             	sub    $0xc,%esp
f0115634:	68 03 0a 00 00       	push   $0xa03
f0115639:	ff 75 c8             	pushl  -0x38(%ebp)
f011563c:	68 9c b6 12 f0       	push   $0xf012b69c
f0115641:	68 5d 06 00 00       	push   $0x65d
f0115646:	68 22 9e 12 f0       	push   $0xf0129e22
f011564b:	e8 67 ae fe ff       	call   f01004b7 <_warn>
f0115650:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115653:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115657:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011565b:	74 04                	je     f0115661 <test_calculate_required_frames+0x34f>
f011565d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115661:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0115665:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115668:	01 c0                	add    %eax,%eax
f011566a:	83 ec 04             	sub    $0x4,%esp
f011566d:	50                   	push   %eax
f011566e:	68 00 00 70 00       	push   $0x700000
f0115673:	ff 75 d8             	pushl  -0x28(%ebp)
f0115676:	e8 d7 40 ff ff       	call   f0109752 <calculate_required_frames>
f011567b:	83 c4 10             	add    $0x10,%esp
f011567e:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f0115681:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f0115688:	74 26                	je     f01156b0 <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f011568a:	83 ec 0c             	sub    $0xc,%esp
f011568d:	68 02 02 00 00       	push   $0x202
f0115692:	ff 75 c8             	pushl  -0x38(%ebp)
f0115695:	68 9c b6 12 f0       	push   $0xf012b69c
f011569a:	68 69 06 00 00       	push   $0x669
f011569f:	68 22 9e 12 f0       	push   $0xf0129e22
f01156a4:	e8 0e ae fe ff       	call   f01004b7 <_warn>
f01156a9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01156ac:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01156b0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01156b4:	74 04                	je     f01156ba <test_calculate_required_frames+0x3a8>
f01156b6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01156ba:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f01156be:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01156c1:	83 ec 04             	sub    $0x4,%esp
f01156c4:	50                   	push   %eax
f01156c5:	68 ff ff 3f 00       	push   $0x3fffff
f01156ca:	ff 75 d8             	pushl  -0x28(%ebp)
f01156cd:	e8 80 40 ff ff       	call   f0109752 <calculate_required_frames>
f01156d2:	83 c4 10             	add    $0x10,%esp
f01156d5:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f01156d8:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f01156dc:	74 23                	je     f0115701 <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f01156de:	83 ec 0c             	sub    $0xc,%esp
f01156e1:	6a 04                	push   $0x4
f01156e3:	ff 75 c8             	pushl  -0x38(%ebp)
f01156e6:	68 9c b6 12 f0       	push   $0xf012b69c
f01156eb:	68 73 06 00 00       	push   $0x673
f01156f0:	68 22 9e 12 f0       	push   $0xf0129e22
f01156f5:	e8 bd ad fe ff       	call   f01004b7 <_warn>
f01156fa:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01156fd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115701:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115705:	74 04                	je     f011570b <test_calculate_required_frames+0x3f9>
f0115707:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011570b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f011570f:	83 ec 0c             	sub    $0xc,%esp
f0115712:	68 d5 b1 12 f0       	push   $0xf012b1d5
f0115717:	e8 50 b8 fe ff       	call   f0100f6c <cprintf>
f011571c:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f011571f:	83 ec 0c             	sub    $0xc,%esp
f0115722:	68 f4 b6 12 f0       	push   $0xf012b6f4
f0115727:	e8 40 b8 fe ff       	call   f0100f6c <cprintf>
f011572c:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f011572f:	83 ec 04             	sub    $0x4,%esp
f0115732:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0115738:	50                   	push   %eax
f0115739:	68 8e a5 12 f0       	push   $0xf012a58e
f011573e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115744:	50                   	push   %eax
f0115745:	e8 bf b6 00 00       	call   f0120e09 <strcconcat>
f011574a:	83 c4 10             	add    $0x10,%esp
f011574d:	83 ec 0c             	sub    $0xc,%esp
f0115750:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0115756:	50                   	push   %eax
f0115757:	e8 80 c7 fe ff       	call   f0101edc <execute_command>
f011575c:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f011575f:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115762:	c1 e0 03             	shl    $0x3,%eax
f0115765:	83 ec 04             	sub    $0x4,%esp
f0115768:	50                   	push   %eax
f0115769:	6a 00                	push   $0x0
f011576b:	ff 75 d8             	pushl  -0x28(%ebp)
f011576e:	e8 df 3f ff ff       	call   f0109752 <calculate_required_frames>
f0115773:	83 c4 10             	add    $0x10,%esp
f0115776:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0115779:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0115780:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115783:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115786:	74 24                	je     f01157ac <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115788:	83 ec 0c             	sub    $0xc,%esp
f011578b:	ff 75 c4             	pushl  -0x3c(%ebp)
f011578e:	ff 75 c8             	pushl  -0x38(%ebp)
f0115791:	68 9c b6 12 f0       	push   $0xf012b69c
f0115796:	68 87 06 00 00       	push   $0x687
f011579b:	68 22 9e 12 f0       	push   $0xf0129e22
f01157a0:	e8 12 ad fe ff       	call   f01004b7 <_warn>
f01157a5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01157a8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01157ac:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01157b0:	74 04                	je     f01157b6 <test_calculate_required_frames+0x4a4>
f01157b2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01157b6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f01157ba:	83 ec 04             	sub    $0x4,%esp
f01157bd:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01157c3:	50                   	push   %eax
f01157c4:	68 9b a5 12 f0       	push   $0xf012a59b
f01157c9:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01157cf:	50                   	push   %eax
f01157d0:	e8 34 b6 00 00       	call   f0120e09 <strcconcat>
f01157d5:	83 c4 10             	add    $0x10,%esp
f01157d8:	83 ec 0c             	sub    $0xc,%esp
f01157db:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01157e1:	50                   	push   %eax
f01157e2:	e8 f5 c6 fe ff       	call   f0101edc <execute_command>
f01157e7:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f01157ea:	83 ec 04             	sub    $0x4,%esp
f01157ed:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01157f3:	50                   	push   %eax
f01157f4:	68 28 b7 12 f0       	push   $0xf012b728
f01157f9:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01157ff:	50                   	push   %eax
f0115800:	e8 04 b6 00 00       	call   f0120e09 <strcconcat>
f0115805:	83 c4 10             	add    $0x10,%esp
f0115808:	83 ec 0c             	sub    $0xc,%esp
f011580b:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115811:	50                   	push   %eax
f0115812:	e8 c5 c6 fe ff       	call   f0101edc <execute_command>
f0115817:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f011581a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011581d:	c1 e0 03             	shl    $0x3,%eax
f0115820:	83 ec 04             	sub    $0x4,%esp
f0115823:	50                   	push   %eax
f0115824:	6a 00                	push   $0x0
f0115826:	ff 75 d8             	pushl  -0x28(%ebp)
f0115829:	e8 24 3f ff ff       	call   f0109752 <calculate_required_frames>
f011582e:	83 c4 10             	add    $0x10,%esp
f0115831:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f0115834:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f011583b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011583e:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115841:	74 24                	je     f0115867 <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115843:	83 ec 0c             	sub    $0xc,%esp
f0115846:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115849:	ff 75 c8             	pushl  -0x38(%ebp)
f011584c:	68 9c b6 12 f0       	push   $0xf012b69c
f0115851:	68 95 06 00 00       	push   $0x695
f0115856:	68 22 9e 12 f0       	push   $0xf0129e22
f011585b:	e8 57 ac fe ff       	call   f01004b7 <_warn>
f0115860:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115863:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115867:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011586b:	74 04                	je     f0115871 <test_calculate_required_frames+0x55f>
f011586d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115871:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0115875:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115878:	c1 e0 0a             	shl    $0xa,%eax
f011587b:	83 ec 04             	sub    $0x4,%esp
f011587e:	50                   	push   %eax
f011587f:	6a 00                	push   $0x0
f0115881:	ff 75 d8             	pushl  -0x28(%ebp)
f0115884:	e8 c9 3e ff ff       	call   f0109752 <calculate_required_frames>
f0115889:	83 c4 10             	add    $0x10,%esp
f011588c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f011588f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115892:	c1 e0 0a             	shl    $0xa,%eax
f0115895:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115898:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011589f:	99                   	cltd   
f01158a0:	f7 fb                	idiv   %ebx
f01158a2:	89 c1                	mov    %eax,%ecx
f01158a4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01158a7:	c1 e0 0a             	shl    $0xa,%eax
f01158aa:	8b 55 d0             	mov    -0x30(%ebp),%edx
f01158ad:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01158b4:	99                   	cltd   
f01158b5:	f7 fe                	idiv   %esi
f01158b7:	01 c8                	add    %ecx,%eax
f01158b9:	83 e8 05             	sub    $0x5,%eax
f01158bc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f01158bf:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01158c2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01158c5:	74 24                	je     f01158eb <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01158c7:	83 ec 0c             	sub    $0xc,%esp
f01158ca:	ff 75 c4             	pushl  -0x3c(%ebp)
f01158cd:	ff 75 c8             	pushl  -0x38(%ebp)
f01158d0:	68 9c b6 12 f0       	push   $0xf012b69c
f01158d5:	68 a0 06 00 00       	push   $0x6a0
f01158da:	68 22 9e 12 f0       	push   $0xf0129e22
f01158df:	e8 d3 ab fe ff       	call   f01004b7 <_warn>
f01158e4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01158e7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01158eb:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01158ef:	74 04                	je     f01158f5 <test_calculate_required_frames+0x5e3>
f01158f1:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01158f5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f01158f9:	83 ec 04             	sub    $0x4,%esp
f01158fc:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115902:	50                   	push   %eax
f0115903:	68 34 b7 12 f0       	push   $0xf012b734
f0115908:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011590e:	50                   	push   %eax
f011590f:	e8 f5 b4 00 00       	call   f0120e09 <strcconcat>
f0115914:	83 c4 10             	add    $0x10,%esp
f0115917:	83 ec 0c             	sub    $0xc,%esp
f011591a:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115920:	50                   	push   %eax
f0115921:	e8 b6 c5 fe ff       	call   f0101edc <execute_command>
f0115926:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0115929:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011592c:	89 c2                	mov    %eax,%edx
f011592e:	01 d2                	add    %edx,%edx
f0115930:	01 d0                	add    %edx,%eax
f0115932:	83 ec 04             	sub    $0x4,%esp
f0115935:	50                   	push   %eax
f0115936:	68 00 18 00 00       	push   $0x1800
f011593b:	ff 75 d8             	pushl  -0x28(%ebp)
f011593e:	e8 0f 3e ff ff       	call   f0109752 <calculate_required_frames>
f0115943:	83 c4 10             	add    $0x10,%esp
f0115946:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0115949:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0115950:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115953:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115956:	74 24                	je     f011597c <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115958:	83 ec 0c             	sub    $0xc,%esp
f011595b:	ff 75 c4             	pushl  -0x3c(%ebp)
f011595e:	ff 75 c8             	pushl  -0x38(%ebp)
f0115961:	68 9c b6 12 f0       	push   $0xf012b69c
f0115966:	68 af 06 00 00       	push   $0x6af
f011596b:	68 22 9e 12 f0       	push   $0xf0129e22
f0115970:	e8 42 ab fe ff       	call   f01004b7 <_warn>
f0115975:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115978:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011597c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115980:	74 04                	je     f0115986 <test_calculate_required_frames+0x674>
f0115982:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115986:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f011598a:	83 ec 04             	sub    $0x4,%esp
f011598d:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115993:	50                   	push   %eax
f0115994:	68 f4 a7 12 f0       	push   $0xf012a7f4
f0115999:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011599f:	50                   	push   %eax
f01159a0:	e8 64 b4 00 00       	call   f0120e09 <strcconcat>
f01159a5:	83 c4 10             	add    $0x10,%esp
f01159a8:	83 ec 0c             	sub    $0xc,%esp
f01159ab:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f01159b1:	50                   	push   %eax
f01159b2:	e8 25 c5 fe ff       	call   f0101edc <execute_command>
f01159b7:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f01159ba:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01159bd:	89 d0                	mov    %edx,%eax
f01159bf:	c1 e0 02             	shl    $0x2,%eax
f01159c2:	01 d0                	add    %edx,%eax
f01159c4:	01 c0                	add    %eax,%eax
f01159c6:	83 ec 04             	sub    $0x4,%esp
f01159c9:	50                   	push   %eax
f01159ca:	68 00 00 40 00       	push   $0x400000
f01159cf:	ff 75 d8             	pushl  -0x28(%ebp)
f01159d2:	e8 7b 3d ff ff       	call   f0109752 <calculate_required_frames>
f01159d7:	83 c4 10             	add    $0x10,%esp
f01159da:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f01159dd:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f01159e4:	74 26                	je     f0115a0c <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f01159e6:	83 ec 0c             	sub    $0xc,%esp
f01159e9:	68 03 0a 00 00       	push   $0xa03
f01159ee:	ff 75 c8             	pushl  -0x38(%ebp)
f01159f1:	68 9c b6 12 f0       	push   $0xf012b69c
f01159f6:	68 bb 06 00 00       	push   $0x6bb
f01159fb:	68 22 9e 12 f0       	push   $0xf0129e22
f0115a00:	e8 b2 aa fe ff       	call   f01004b7 <_warn>
f0115a05:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115a08:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115a0c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115a10:	74 04                	je     f0115a16 <test_calculate_required_frames+0x704>
f0115a12:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115a16:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0115a1a:	83 ec 04             	sub    $0x4,%esp
f0115a1d:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115a23:	50                   	push   %eax
f0115a24:	68 fe a7 12 f0       	push   $0xf012a7fe
f0115a29:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115a2f:	50                   	push   %eax
f0115a30:	e8 d4 b3 00 00       	call   f0120e09 <strcconcat>
f0115a35:	83 c4 10             	add    $0x10,%esp
f0115a38:	83 ec 0c             	sub    $0xc,%esp
f0115a3b:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0115a41:	50                   	push   %eax
f0115a42:	e8 95 c4 fe ff       	call   f0101edc <execute_command>
f0115a47:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0115a4a:	83 ec 04             	sub    $0x4,%esp
f0115a4d:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115a53:	50                   	push   %eax
f0115a54:	68 3c b7 12 f0       	push   $0xf012b73c
f0115a59:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115a5f:	50                   	push   %eax
f0115a60:	e8 a4 b3 00 00       	call   f0120e09 <strcconcat>
f0115a65:	83 c4 10             	add    $0x10,%esp
f0115a68:	83 ec 0c             	sub    $0xc,%esp
f0115a6b:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0115a71:	50                   	push   %eax
f0115a72:	e8 65 c4 fe ff       	call   f0101edc <execute_command>
f0115a77:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0115a7a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115a7d:	01 c0                	add    %eax,%eax
f0115a7f:	83 ec 04             	sub    $0x4,%esp
f0115a82:	50                   	push   %eax
f0115a83:	68 00 00 70 00       	push   $0x700000
f0115a88:	ff 75 d8             	pushl  -0x28(%ebp)
f0115a8b:	e8 c2 3c ff ff       	call   f0109752 <calculate_required_frames>
f0115a90:	83 c4 10             	add    $0x10,%esp
f0115a93:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f0115a96:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f0115a9d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115aa0:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115aa3:	74 24                	je     f0115ac9 <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115aa5:	83 ec 0c             	sub    $0xc,%esp
f0115aa8:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115aab:	ff 75 c8             	pushl  -0x38(%ebp)
f0115aae:	68 9c b6 12 f0       	push   $0xf012b69c
f0115ab3:	68 cb 06 00 00       	push   $0x6cb
f0115ab8:	68 22 9e 12 f0       	push   $0xf0129e22
f0115abd:	e8 f5 a9 fe ff       	call   f01004b7 <_warn>
f0115ac2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115ac5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115ac9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115acd:	74 04                	je     f0115ad3 <test_calculate_required_frames+0x7c1>
f0115acf:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115ad3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0115ad7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115ada:	83 ec 04             	sub    $0x4,%esp
f0115add:	50                   	push   %eax
f0115ade:	68 ff ff 3f 00       	push   $0x3fffff
f0115ae3:	ff 75 d8             	pushl  -0x28(%ebp)
f0115ae6:	e8 67 3c ff ff       	call   f0109752 <calculate_required_frames>
f0115aeb:	83 c4 10             	add    $0x10,%esp
f0115aee:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f0115af1:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f0115af8:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0115afb:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0115afe:	74 24                	je     f0115b24 <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0115b00:	83 ec 0c             	sub    $0xc,%esp
f0115b03:	ff 75 c4             	pushl  -0x3c(%ebp)
f0115b06:	ff 75 c8             	pushl  -0x38(%ebp)
f0115b09:	68 9c b6 12 f0       	push   $0xf012b69c
f0115b0e:	68 d6 06 00 00       	push   $0x6d6
f0115b13:	68 22 9e 12 f0       	push   $0xf0129e22
f0115b18:	e8 9a a9 fe ff       	call   f01004b7 <_warn>
f0115b1d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115b20:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0115b24:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115b28:	74 04                	je     f0115b2e <test_calculate_required_frames+0x81c>
f0115b2a:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0115b2e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0115b32:	83 ec 0c             	sub    $0xc,%esp
f0115b35:	68 af a7 12 f0       	push   $0xf012a7af
f0115b3a:	e8 2d b4 fe ff       	call   f0100f6c <cprintf>
f0115b3f:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f0115b42:	83 ec 08             	sub    $0x8,%esp
f0115b45:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115b48:	68 48 b7 12 f0       	push   $0xf012b748
f0115b4d:	e8 1a b4 fe ff       	call   f0100f6c <cprintf>
f0115b52:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0115b55:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0115b59:	75 10                	jne    f0115b6b <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f0115b5b:	83 ec 0c             	sub    $0xc,%esp
f0115b5e:	68 88 b7 12 f0       	push   $0xf012b788
f0115b63:	e8 04 b4 fe ff       	call   f0100f6c <cprintf>
f0115b68:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0115b6b:	a1 e4 51 55 f0       	mov    0xf05551e4,%eax
f0115b70:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0115b73:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0115b76:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0115b79:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115b7e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0115b81:	5b                   	pop    %ebx
f0115b82:	5e                   	pop    %esi
f0115b83:	5f                   	pop    %edi
f0115b84:	5d                   	pop    %ebp
f0115b85:	c3                   	ret    

f0115b86 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f0115b86:	55                   	push   %ebp
f0115b87:	89 e5                	mov    %esp,%ebp
f0115b89:	57                   	push   %edi
f0115b8a:	56                   	push   %esi
f0115b8b:	53                   	push   %ebx
f0115b8c:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0115b92:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115b95:	bb 24 a5 12 f0       	mov    $0xf012a524,%ebx
f0115b9a:	ba 0f 00 00 00       	mov    $0xf,%edx
f0115b9f:	89 c7                	mov    %eax,%edi
f0115ba1:	89 de                	mov    %ebx,%esi
f0115ba3:	89 d1                	mov    %edx,%ecx
f0115ba5:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0115ba7:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0115baa:	b9 23 00 00 00       	mov    $0x23,%ecx
f0115baf:	b0 00                	mov    $0x0,%al
f0115bb1:	89 d7                	mov    %edx,%edi
f0115bb3:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0115bb5:	6a 00                	push   $0x0
f0115bb7:	6a 0a                	push   $0xa
f0115bb9:	6a 14                	push   $0x14
f0115bbb:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0115bbe:	50                   	push   %eax
f0115bbf:	e8 ac 3e ff ff       	call   f0109a70 <env_create>
f0115bc4:	83 c4 10             	add    $0x10,%esp
f0115bc7:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0115bca:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115bcd:	8b 40 64             	mov    0x64(%eax),%eax
f0115bd0:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0115bd3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115bd6:	8b 40 68             	mov    0x68(%eax),%eax
f0115bd9:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0115bdc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115bdf:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0115be2:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0115be9:	75 70 20 
f0115bec:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0115bf3:	00 00 00 
f0115bf6:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0115bf9:	b9 03 00 00 00       	mov    $0x3,%ecx
f0115bfe:	b8 00 00 00 00       	mov    $0x0,%eax
f0115c03:	89 d7                	mov    %edx,%edi
f0115c05:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0115c07:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115c0a:	8b 40 10             	mov    0x10(%eax),%eax
f0115c0d:	83 ec 08             	sub    $0x8,%esp
f0115c10:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0115c16:	52                   	push   %edx
f0115c17:	50                   	push   %eax
f0115c18:	e8 13 b1 00 00       	call   f0120d30 <ltostr>
f0115c1d:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0115c20:	83 ec 04             	sub    $0x4,%esp
f0115c23:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0115c29:	50                   	push   %eax
f0115c2a:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0115c30:	50                   	push   %eax
f0115c31:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0115c37:	50                   	push   %eax
f0115c38:	e8 cc b1 00 00       	call   f0120e09 <strcconcat>
f0115c3d:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0115c40:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0115c47:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0115c4e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f0115c55:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0115c59:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115c60:	00 00 00 
	uint32 num_tables = 0;
f0115c63:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115c6a:	00 00 00 
	ClearUserSpace(proc_directory);
f0115c6d:	83 ec 0c             	sub    $0xc,%esp
f0115c70:	ff 75 d8             	pushl  -0x28(%ebp)
f0115c73:	e8 d8 11 00 00       	call   f0116e50 <ClearUserSpace>
f0115c78:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0115c7b:	83 ec 0c             	sub    $0xc,%esp
f0115c7e:	68 68 b6 12 f0       	push   $0xf012b668
f0115c83:	e8 e4 b2 fe ff       	call   f0100f6c <cprintf>
f0115c88:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0115c8b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115c8e:	c1 e0 03             	shl    $0x3,%eax
f0115c91:	89 c2                	mov    %eax,%edx
f0115c93:	83 ec 0c             	sub    $0xc,%esp
f0115c96:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115c9c:	50                   	push   %eax
f0115c9d:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115ca3:	50                   	push   %eax
f0115ca4:	52                   	push   %edx
f0115ca5:	6a 00                	push   $0x0
f0115ca7:	ff 75 d8             	pushl  -0x28(%ebp)
f0115caa:	e8 89 3a ff ff       	call   f0109738 <calculate_allocated_space>
f0115caf:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115cb2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115cb8:	85 c0                	test   %eax,%eax
f0115cba:	74 27                	je     f0115ce3 <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115cbc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115cc2:	83 ec 0c             	sub    $0xc,%esp
f0115cc5:	6a 00                	push   $0x0
f0115cc7:	50                   	push   %eax
f0115cc8:	68 d4 b7 12 f0       	push   $0xf012b7d4
f0115ccd:	68 0b 07 00 00       	push   $0x70b
f0115cd2:	68 22 9e 12 f0       	push   $0xf0129e22
f0115cd7:	e8 db a7 fe ff       	call   f01004b7 <_warn>
f0115cdc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115cdf:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115ce3:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ce9:	85 c0                	test   %eax,%eax
f0115ceb:	74 27                	je     f0115d14 <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115ced:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115cf3:	83 ec 0c             	sub    $0xc,%esp
f0115cf6:	6a 00                	push   $0x0
f0115cf8:	50                   	push   %eax
f0115cf9:	68 34 b8 12 f0       	push   $0xf012b834
f0115cfe:	68 10 07 00 00       	push   $0x710
f0115d03:	68 22 9e 12 f0       	push   $0xf0129e22
f0115d08:	e8 aa a7 fe ff       	call   f01004b7 <_warn>
f0115d0d:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d10:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115d14:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115d18:	74 04                	je     f0115d1e <test_calculate_allocated_space+0x198>
f0115d1a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115d1e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f0115d22:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115d29:	00 00 00 
		num_pages = 0;
f0115d2c:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115d33:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0115d36:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115d39:	c1 e0 02             	shl    $0x2,%eax
f0115d3c:	89 c2                	mov    %eax,%edx
f0115d3e:	83 ec 0c             	sub    $0xc,%esp
f0115d41:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115d47:	50                   	push   %eax
f0115d48:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115d4e:	50                   	push   %eax
f0115d4f:	52                   	push   %edx
f0115d50:	6a 00                	push   $0x0
f0115d52:	ff 75 d8             	pushl  -0x28(%ebp)
f0115d55:	e8 de 39 ff ff       	call   f0109738 <calculate_allocated_space>
f0115d5a:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115d5d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d63:	85 c0                	test   %eax,%eax
f0115d65:	74 27                	je     f0115d8e <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115d67:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115d6d:	83 ec 0c             	sub    $0xc,%esp
f0115d70:	6a 00                	push   $0x0
f0115d72:	50                   	push   %eax
f0115d73:	68 d4 b7 12 f0       	push   $0xf012b7d4
f0115d78:	68 1c 07 00 00       	push   $0x71c
f0115d7d:	68 22 9e 12 f0       	push   $0xf0129e22
f0115d82:	e8 30 a7 fe ff       	call   f01004b7 <_warn>
f0115d87:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115d8a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115d8e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d94:	85 c0                	test   %eax,%eax
f0115d96:	74 27                	je     f0115dbf <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115d98:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115d9e:	83 ec 0c             	sub    $0xc,%esp
f0115da1:	6a 00                	push   $0x0
f0115da3:	50                   	push   %eax
f0115da4:	68 34 b8 12 f0       	push   $0xf012b834
f0115da9:	68 21 07 00 00       	push   $0x721
f0115dae:	68 22 9e 12 f0       	push   $0xf0129e22
f0115db3:	e8 ff a6 fe ff       	call   f01004b7 <_warn>
f0115db8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115dbb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115dbf:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115dc3:	74 04                	je     f0115dc9 <test_calculate_allocated_space+0x243>
f0115dc5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115dc9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0115dcd:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115dd4:	00 00 00 
		num_pages = 0;
f0115dd7:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115dde:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0115de1:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0115de4:	c1 e0 0a             	shl    $0xa,%eax
f0115de7:	89 c2                	mov    %eax,%edx
f0115de9:	83 ec 0c             	sub    $0xc,%esp
f0115dec:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115df2:	50                   	push   %eax
f0115df3:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115df9:	50                   	push   %eax
f0115dfa:	52                   	push   %edx
f0115dfb:	6a 00                	push   $0x0
f0115dfd:	ff 75 d8             	pushl  -0x28(%ebp)
f0115e00:	e8 33 39 ff ff       	call   f0109738 <calculate_allocated_space>
f0115e05:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115e08:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e0e:	85 c0                	test   %eax,%eax
f0115e10:	74 27                	je     f0115e39 <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115e12:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115e18:	83 ec 0c             	sub    $0xc,%esp
f0115e1b:	6a 00                	push   $0x0
f0115e1d:	50                   	push   %eax
f0115e1e:	68 d4 b7 12 f0       	push   $0xf012b7d4
f0115e23:	68 2d 07 00 00       	push   $0x72d
f0115e28:	68 22 9e 12 f0       	push   $0xf0129e22
f0115e2d:	e8 85 a6 fe ff       	call   f01004b7 <_warn>
f0115e32:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e35:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115e39:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e3f:	85 c0                	test   %eax,%eax
f0115e41:	74 27                	je     f0115e6a <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115e43:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115e49:	83 ec 0c             	sub    $0xc,%esp
f0115e4c:	6a 00                	push   $0x0
f0115e4e:	50                   	push   %eax
f0115e4f:	68 34 b8 12 f0       	push   $0xf012b834
f0115e54:	68 32 07 00 00       	push   $0x732
f0115e59:	68 22 9e 12 f0       	push   $0xf0129e22
f0115e5e:	e8 54 a6 fe ff       	call   f01004b7 <_warn>
f0115e63:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115e66:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115e6a:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115e6e:	74 04                	je     f0115e74 <test_calculate_allocated_space+0x2ee>
f0115e70:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115e74:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f0115e78:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115e7f:	00 00 00 
		num_pages = 0;
f0115e82:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115e89:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f0115e8c:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115e8f:	89 d0                	mov    %edx,%eax
f0115e91:	01 c0                	add    %eax,%eax
f0115e93:	01 d0                	add    %edx,%eax
f0115e95:	01 c0                	add    %eax,%eax
f0115e97:	05 00 10 00 00       	add    $0x1000,%eax
f0115e9c:	89 c2                	mov    %eax,%edx
f0115e9e:	83 ec 0c             	sub    $0xc,%esp
f0115ea1:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115ea7:	50                   	push   %eax
f0115ea8:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115eae:	50                   	push   %eax
f0115eaf:	52                   	push   %edx
f0115eb0:	68 00 10 00 00       	push   $0x1000
f0115eb5:	ff 75 d8             	pushl  -0x28(%ebp)
f0115eb8:	e8 7b 38 ff ff       	call   f0109738 <calculate_allocated_space>
f0115ebd:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115ec0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ec6:	85 c0                	test   %eax,%eax
f0115ec8:	74 27                	je     f0115ef1 <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115eca:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115ed0:	83 ec 0c             	sub    $0xc,%esp
f0115ed3:	6a 00                	push   $0x0
f0115ed5:	50                   	push   %eax
f0115ed6:	68 d4 b7 12 f0       	push   $0xf012b7d4
f0115edb:	68 3f 07 00 00       	push   $0x73f
f0115ee0:	68 22 9e 12 f0       	push   $0xf0129e22
f0115ee5:	e8 cd a5 fe ff       	call   f01004b7 <_warn>
f0115eea:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115eed:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115ef1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115ef7:	85 c0                	test   %eax,%eax
f0115ef9:	74 27                	je     f0115f22 <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115efb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115f01:	83 ec 0c             	sub    $0xc,%esp
f0115f04:	6a 00                	push   $0x0
f0115f06:	50                   	push   %eax
f0115f07:	68 34 b8 12 f0       	push   $0xf012b834
f0115f0c:	68 44 07 00 00       	push   $0x744
f0115f11:	68 22 9e 12 f0       	push   $0xf0129e22
f0115f16:	e8 9c a5 fe ff       	call   f01004b7 <_warn>
f0115f1b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115f1e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115f22:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115f26:	74 04                	je     f0115f2c <test_calculate_allocated_space+0x3a6>
f0115f28:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115f2c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f0115f30:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115f37:	00 00 00 
		num_pages = 0;
f0115f3a:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115f41:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0115f44:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0115f47:	89 c2                	mov    %eax,%edx
f0115f49:	01 d2                	add    %edx,%edx
f0115f4b:	01 d0                	add    %edx,%eax
f0115f4d:	05 00 18 00 00       	add    $0x1800,%eax
f0115f52:	89 c2                	mov    %eax,%edx
f0115f54:	83 ec 0c             	sub    $0xc,%esp
f0115f57:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0115f5d:	50                   	push   %eax
f0115f5e:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0115f64:	50                   	push   %eax
f0115f65:	52                   	push   %edx
f0115f66:	68 00 18 00 00       	push   $0x1800
f0115f6b:	ff 75 d8             	pushl  -0x28(%ebp)
f0115f6e:	e8 c5 37 ff ff       	call   f0109738 <calculate_allocated_space>
f0115f73:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0115f76:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f7c:	85 c0                	test   %eax,%eax
f0115f7e:	74 27                	je     f0115fa7 <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0115f80:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0115f86:	83 ec 0c             	sub    $0xc,%esp
f0115f89:	6a 00                	push   $0x0
f0115f8b:	50                   	push   %eax
f0115f8c:	68 d4 b7 12 f0       	push   $0xf012b7d4
f0115f91:	68 50 07 00 00       	push   $0x750
f0115f96:	68 22 9e 12 f0       	push   $0xf0129e22
f0115f9b:	e8 17 a5 fe ff       	call   f01004b7 <_warn>
f0115fa0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115fa3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0115fa7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115fad:	85 c0                	test   %eax,%eax
f0115faf:	74 27                	je     f0115fd8 <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0115fb1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0115fb7:	83 ec 0c             	sub    $0xc,%esp
f0115fba:	6a 00                	push   $0x0
f0115fbc:	50                   	push   %eax
f0115fbd:	68 34 b8 12 f0       	push   $0xf012b834
f0115fc2:	68 55 07 00 00       	push   $0x755
f0115fc7:	68 22 9e 12 f0       	push   $0xf0129e22
f0115fcc:	e8 e6 a4 fe ff       	call   f01004b7 <_warn>
f0115fd1:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0115fd4:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0115fd8:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0115fdc:	74 04                	je     f0115fe2 <test_calculate_allocated_space+0x45c>
f0115fde:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0115fe2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f0115fe6:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0115fed:	00 00 00 
		num_pages = 0;
f0115ff0:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0115ff7:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0115ffa:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115ffd:	89 d0                	mov    %edx,%eax
f0115fff:	c1 e0 02             	shl    $0x2,%eax
f0116002:	01 d0                	add    %edx,%eax
f0116004:	01 c0                	add    %eax,%eax
f0116006:	05 00 00 40 00       	add    $0x400000,%eax
f011600b:	89 c2                	mov    %eax,%edx
f011600d:	83 ec 0c             	sub    $0xc,%esp
f0116010:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116016:	50                   	push   %eax
f0116017:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011601d:	50                   	push   %eax
f011601e:	52                   	push   %edx
f011601f:	68 00 00 40 00       	push   $0x400000
f0116024:	ff 75 d8             	pushl  -0x28(%ebp)
f0116027:	e8 0c 37 ff ff       	call   f0109738 <calculate_allocated_space>
f011602c:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011602f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116035:	85 c0                	test   %eax,%eax
f0116037:	74 27                	je     f0116060 <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0116039:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011603f:	83 ec 0c             	sub    $0xc,%esp
f0116042:	6a 00                	push   $0x0
f0116044:	50                   	push   %eax
f0116045:	68 d4 b7 12 f0       	push   $0xf012b7d4
f011604a:	68 61 07 00 00       	push   $0x761
f011604f:	68 22 9e 12 f0       	push   $0xf0129e22
f0116054:	e8 5e a4 fe ff       	call   f01004b7 <_warn>
f0116059:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011605c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0116060:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116066:	85 c0                	test   %eax,%eax
f0116068:	74 27                	je     f0116091 <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011606a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116070:	83 ec 0c             	sub    $0xc,%esp
f0116073:	6a 00                	push   $0x0
f0116075:	50                   	push   %eax
f0116076:	68 34 b8 12 f0       	push   $0xf012b834
f011607b:	68 66 07 00 00       	push   $0x766
f0116080:	68 22 9e 12 f0       	push   $0xf0129e22
f0116085:	e8 2d a4 fe ff       	call   f01004b7 <_warn>
f011608a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011608d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116091:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116095:	74 04                	je     f011609b <test_calculate_allocated_space+0x515>
f0116097:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011609b:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f011609f:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01160a6:	00 00 00 
		num_pages = 0;
f01160a9:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01160b0:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f01160b3:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01160b6:	05 00 00 38 00       	add    $0x380000,%eax
f01160bb:	01 c0                	add    %eax,%eax
f01160bd:	89 c2                	mov    %eax,%edx
f01160bf:	83 ec 0c             	sub    $0xc,%esp
f01160c2:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01160c8:	50                   	push   %eax
f01160c9:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01160cf:	50                   	push   %eax
f01160d0:	52                   	push   %edx
f01160d1:	68 00 00 70 00       	push   $0x700000
f01160d6:	ff 75 d8             	pushl  -0x28(%ebp)
f01160d9:	e8 5a 36 ff ff       	call   f0109738 <calculate_allocated_space>
f01160de:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01160e1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01160e7:	85 c0                	test   %eax,%eax
f01160e9:	74 27                	je     f0116112 <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01160eb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01160f1:	83 ec 0c             	sub    $0xc,%esp
f01160f4:	6a 00                	push   $0x0
f01160f6:	50                   	push   %eax
f01160f7:	68 d4 b7 12 f0       	push   $0xf012b7d4
f01160fc:	68 73 07 00 00       	push   $0x773
f0116101:	68 22 9e 12 f0       	push   $0xf0129e22
f0116106:	e8 ac a3 fe ff       	call   f01004b7 <_warn>
f011610b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011610e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0116112:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116118:	85 c0                	test   %eax,%eax
f011611a:	74 27                	je     f0116143 <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011611c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116122:	83 ec 0c             	sub    $0xc,%esp
f0116125:	6a 00                	push   $0x0
f0116127:	50                   	push   %eax
f0116128:	68 34 b8 12 f0       	push   $0xf012b834
f011612d:	68 78 07 00 00       	push   $0x778
f0116132:	68 22 9e 12 f0       	push   $0xf0129e22
f0116137:	e8 7b a3 fe ff       	call   f01004b7 <_warn>
f011613c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011613f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0116143:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116147:	74 04                	je     f011614d <test_calculate_allocated_space+0x5c7>
f0116149:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011614d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0116151:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116158:	00 00 00 
		num_pages = 0;
f011615b:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116162:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0116165:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116168:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f011616d:	89 c2                	mov    %eax,%edx
f011616f:	83 ec 0c             	sub    $0xc,%esp
f0116172:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116178:	50                   	push   %eax
f0116179:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011617f:	50                   	push   %eax
f0116180:	52                   	push   %edx
f0116181:	68 ff ff 3f 00       	push   $0x3fffff
f0116186:	ff 75 d8             	pushl  -0x28(%ebp)
f0116189:	e8 aa 35 ff ff       	call   f0109738 <calculate_allocated_space>
f011618e:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0116191:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116197:	85 c0                	test   %eax,%eax
f0116199:	74 27                	je     f01161c2 <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011619b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01161a1:	83 ec 0c             	sub    $0xc,%esp
f01161a4:	6a 00                	push   $0x0
f01161a6:	50                   	push   %eax
f01161a7:	68 d4 b7 12 f0       	push   $0xf012b7d4
f01161ac:	68 84 07 00 00       	push   $0x784
f01161b1:	68 22 9e 12 f0       	push   $0xf0129e22
f01161b6:	e8 fc a2 fe ff       	call   f01004b7 <_warn>
f01161bb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01161be:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01161c2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01161c8:	85 c0                	test   %eax,%eax
f01161ca:	74 27                	je     f01161f3 <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01161cc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01161d2:	83 ec 0c             	sub    $0xc,%esp
f01161d5:	6a 00                	push   $0x0
f01161d7:	50                   	push   %eax
f01161d8:	68 34 b8 12 f0       	push   $0xf012b834
f01161dd:	68 89 07 00 00       	push   $0x789
f01161e2:	68 22 9e 12 f0       	push   $0xf0129e22
f01161e7:	e8 cb a2 fe ff       	call   f01004b7 <_warn>
f01161ec:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01161ef:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01161f3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01161f7:	74 04                	je     f01161fd <test_calculate_allocated_space+0x677>
f01161f9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01161fd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0116201:	83 ec 0c             	sub    $0xc,%esp
f0116204:	68 d5 b1 12 f0       	push   $0xf012b1d5
f0116209:	e8 5e ad fe ff       	call   f0100f6c <cprintf>
f011620e:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0116211:	83 ec 0c             	sub    $0xc,%esp
f0116214:	68 f4 b6 12 f0       	push   $0xf012b6f4
f0116219:	e8 4e ad fe ff       	call   f0100f6c <cprintf>
f011621e:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0116221:	83 ec 04             	sub    $0x4,%esp
f0116224:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f011622a:	50                   	push   %eax
f011622b:	68 8e a5 12 f0       	push   $0xf012a58e
f0116230:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116236:	50                   	push   %eax
f0116237:	e8 cd ab 00 00       	call   f0120e09 <strcconcat>
f011623c:	83 c4 10             	add    $0x10,%esp
f011623f:	83 ec 0c             	sub    $0xc,%esp
f0116242:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0116248:	50                   	push   %eax
f0116249:	e8 8e bc fe ff       	call   f0101edc <execute_command>
f011624e:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f0116251:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116258:	00 00 00 
		num_pages = 0;
f011625b:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116262:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0116265:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116268:	c1 e0 03             	shl    $0x3,%eax
f011626b:	89 c2                	mov    %eax,%edx
f011626d:	83 ec 0c             	sub    $0xc,%esp
f0116270:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116276:	50                   	push   %eax
f0116277:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011627d:	50                   	push   %eax
f011627e:	52                   	push   %edx
f011627f:	6a 00                	push   $0x0
f0116281:	ff 75 d8             	pushl  -0x28(%ebp)
f0116284:	e8 af 34 ff ff       	call   f0109738 <calculate_allocated_space>
f0116289:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f011628c:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0116293:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011629a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01162a0:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01162a3:	74 28                	je     f01162cd <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01162a5:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01162ab:	83 ec 0c             	sub    $0xc,%esp
f01162ae:	ff 75 c8             	pushl  -0x38(%ebp)
f01162b1:	50                   	push   %eax
f01162b2:	68 d4 b7 12 f0       	push   $0xf012b7d4
f01162b7:	68 a0 07 00 00       	push   $0x7a0
f01162bc:	68 22 9e 12 f0       	push   $0xf0129e22
f01162c1:	e8 f1 a1 fe ff       	call   f01004b7 <_warn>
f01162c6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01162c9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01162cd:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01162d3:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01162d6:	74 28                	je     f0116300 <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01162d8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01162de:	83 ec 0c             	sub    $0xc,%esp
f01162e1:	ff 75 c4             	pushl  -0x3c(%ebp)
f01162e4:	50                   	push   %eax
f01162e5:	68 34 b8 12 f0       	push   $0xf012b834
f01162ea:	68 a5 07 00 00       	push   $0x7a5
f01162ef:	68 22 9e 12 f0       	push   $0xf0129e22
f01162f4:	e8 be a1 fe ff       	call   f01004b7 <_warn>
f01162f9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01162fc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0116300:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116304:	74 04                	je     f011630a <test_calculate_allocated_space+0x784>
f0116306:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011630a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f011630e:	83 ec 04             	sub    $0x4,%esp
f0116311:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116317:	50                   	push   %eax
f0116318:	68 9b a5 12 f0       	push   $0xf012a59b
f011631d:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116323:	50                   	push   %eax
f0116324:	e8 e0 aa 00 00       	call   f0120e09 <strcconcat>
f0116329:	83 c4 10             	add    $0x10,%esp
f011632c:	83 ec 0c             	sub    $0xc,%esp
f011632f:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116335:	50                   	push   %eax
f0116336:	e8 a1 bb fe ff       	call   f0101edc <execute_command>
f011633b:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f011633e:	83 ec 04             	sub    $0x4,%esp
f0116341:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116347:	50                   	push   %eax
f0116348:	68 28 b7 12 f0       	push   $0xf012b728
f011634d:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116353:	50                   	push   %eax
f0116354:	e8 b0 aa 00 00       	call   f0120e09 <strcconcat>
f0116359:	83 c4 10             	add    $0x10,%esp
f011635c:	83 ec 0c             	sub    $0xc,%esp
f011635f:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116365:	50                   	push   %eax
f0116366:	e8 71 bb fe ff       	call   f0101edc <execute_command>
f011636b:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f011636e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116375:	00 00 00 
		num_pages = 0;
f0116378:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011637f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f0116382:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116385:	c1 e0 03             	shl    $0x3,%eax
f0116388:	89 c2                	mov    %eax,%edx
f011638a:	83 ec 0c             	sub    $0xc,%esp
f011638d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116393:	50                   	push   %eax
f0116394:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011639a:	50                   	push   %eax
f011639b:	52                   	push   %edx
f011639c:	6a 00                	push   $0x0
f011639e:	ff 75 d8             	pushl  -0x28(%ebp)
f01163a1:	e8 92 33 ff ff       	call   f0109738 <calculate_allocated_space>
f01163a6:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f01163a9:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f01163b0:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f01163b7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01163bd:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f01163c0:	74 28                	je     f01163ea <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f01163c2:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01163c8:	83 ec 0c             	sub    $0xc,%esp
f01163cb:	ff 75 c8             	pushl  -0x38(%ebp)
f01163ce:	50                   	push   %eax
f01163cf:	68 d4 b7 12 f0       	push   $0xf012b7d4
f01163d4:	68 b6 07 00 00       	push   $0x7b6
f01163d9:	68 22 9e 12 f0       	push   $0xf0129e22
f01163de:	e8 d4 a0 fe ff       	call   f01004b7 <_warn>
f01163e3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01163e6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01163ea:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01163f0:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01163f3:	74 28                	je     f011641d <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01163f5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01163fb:	83 ec 0c             	sub    $0xc,%esp
f01163fe:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116401:	50                   	push   %eax
f0116402:	68 34 b8 12 f0       	push   $0xf012b834
f0116407:	68 bb 07 00 00       	push   $0x7bb
f011640c:	68 22 9e 12 f0       	push   $0xf0129e22
f0116411:	e8 a1 a0 fe ff       	call   f01004b7 <_warn>
f0116416:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116419:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011641d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116421:	74 04                	je     f0116427 <test_calculate_allocated_space+0x8a1>
f0116423:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0116427:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f011642b:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116432:	00 00 00 
		num_pages = 0;
f0116435:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011643c:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f011643f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116442:	c1 e0 0a             	shl    $0xa,%eax
f0116445:	89 c2                	mov    %eax,%edx
f0116447:	83 ec 0c             	sub    $0xc,%esp
f011644a:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116450:	50                   	push   %eax
f0116451:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116457:	50                   	push   %eax
f0116458:	52                   	push   %edx
f0116459:	6a 00                	push   $0x0
f011645b:	ff 75 d8             	pushl  -0x28(%ebp)
f011645e:	e8 d5 32 ff ff       	call   f0109738 <calculate_allocated_space>
f0116463:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0116466:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f011646d:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116474:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011647a:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f011647d:	74 28                	je     f01164a7 <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f011647f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116485:	83 ec 0c             	sub    $0xc,%esp
f0116488:	ff 75 c8             	pushl  -0x38(%ebp)
f011648b:	50                   	push   %eax
f011648c:	68 d4 b7 12 f0       	push   $0xf012b7d4
f0116491:	68 c9 07 00 00       	push   $0x7c9
f0116496:	68 22 9e 12 f0       	push   $0xf0129e22
f011649b:	e8 17 a0 fe ff       	call   f01004b7 <_warn>
f01164a0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01164a3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01164a7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01164ad:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01164b0:	74 28                	je     f01164da <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01164b2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01164b8:	83 ec 0c             	sub    $0xc,%esp
f01164bb:	ff 75 c4             	pushl  -0x3c(%ebp)
f01164be:	50                   	push   %eax
f01164bf:	68 34 b8 12 f0       	push   $0xf012b834
f01164c4:	68 ce 07 00 00       	push   $0x7ce
f01164c9:	68 22 9e 12 f0       	push   $0xf0129e22
f01164ce:	e8 e4 9f fe ff       	call   f01004b7 <_warn>
f01164d3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01164d6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01164da:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01164de:	74 04                	je     f01164e4 <test_calculate_allocated_space+0x95e>
f01164e0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01164e4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f01164e8:	83 ec 04             	sub    $0x4,%esp
f01164eb:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01164f1:	50                   	push   %eax
f01164f2:	68 34 b7 12 f0       	push   $0xf012b734
f01164f7:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01164fd:	50                   	push   %eax
f01164fe:	e8 06 a9 00 00       	call   f0120e09 <strcconcat>
f0116503:	83 c4 10             	add    $0x10,%esp
f0116506:	83 ec 0c             	sub    $0xc,%esp
f0116509:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f011650f:	50                   	push   %eax
f0116510:	e8 c7 b9 fe ff       	call   f0101edc <execute_command>
f0116515:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f0116518:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011651f:	00 00 00 
		num_pages = 0;
f0116522:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116529:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f011652c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011652f:	89 c2                	mov    %eax,%edx
f0116531:	01 d2                	add    %edx,%edx
f0116533:	01 d0                	add    %edx,%eax
f0116535:	05 00 18 00 00       	add    $0x1800,%eax
f011653a:	89 c2                	mov    %eax,%edx
f011653c:	83 ec 0c             	sub    $0xc,%esp
f011653f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116545:	50                   	push   %eax
f0116546:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011654c:	50                   	push   %eax
f011654d:	52                   	push   %edx
f011654e:	68 00 18 00 00       	push   $0x1800
f0116553:	ff 75 d8             	pushl  -0x28(%ebp)
f0116556:	e8 dd 31 ff ff       	call   f0109738 <calculate_allocated_space>
f011655b:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011655e:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0116565:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011656c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116572:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116575:	74 28                	je     f011659f <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116577:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011657d:	83 ec 0c             	sub    $0xc,%esp
f0116580:	ff 75 c8             	pushl  -0x38(%ebp)
f0116583:	50                   	push   %eax
f0116584:	68 d4 b7 12 f0       	push   $0xf012b7d4
f0116589:	68 df 07 00 00       	push   $0x7df
f011658e:	68 22 9e 12 f0       	push   $0xf0129e22
f0116593:	e8 1f 9f fe ff       	call   f01004b7 <_warn>
f0116598:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011659b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011659f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01165a5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01165a8:	74 28                	je     f01165d2 <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01165aa:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01165b0:	83 ec 0c             	sub    $0xc,%esp
f01165b3:	ff 75 c4             	pushl  -0x3c(%ebp)
f01165b6:	50                   	push   %eax
f01165b7:	68 34 b8 12 f0       	push   $0xf012b834
f01165bc:	68 e4 07 00 00       	push   $0x7e4
f01165c1:	68 22 9e 12 f0       	push   $0xf0129e22
f01165c6:	e8 ec 9e fe ff       	call   f01004b7 <_warn>
f01165cb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01165ce:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01165d2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01165d6:	74 04                	je     f01165dc <test_calculate_allocated_space+0xa56>
f01165d8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01165dc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f01165e0:	83 ec 04             	sub    $0x4,%esp
f01165e3:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f01165e9:	50                   	push   %eax
f01165ea:	68 f4 a7 12 f0       	push   $0xf012a7f4
f01165ef:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01165f5:	50                   	push   %eax
f01165f6:	e8 0e a8 00 00       	call   f0120e09 <strcconcat>
f01165fb:	83 c4 10             	add    $0x10,%esp
f01165fe:	83 ec 0c             	sub    $0xc,%esp
f0116601:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116607:	50                   	push   %eax
f0116608:	e8 cf b8 fe ff       	call   f0101edc <execute_command>
f011660d:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f0116610:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116617:	00 00 00 
		num_pages = 0;
f011661a:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116621:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0116624:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116627:	89 d0                	mov    %edx,%eax
f0116629:	c1 e0 02             	shl    $0x2,%eax
f011662c:	01 d0                	add    %edx,%eax
f011662e:	01 c0                	add    %eax,%eax
f0116630:	05 00 00 40 00       	add    $0x400000,%eax
f0116635:	89 c2                	mov    %eax,%edx
f0116637:	83 ec 0c             	sub    $0xc,%esp
f011663a:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116640:	50                   	push   %eax
f0116641:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0116647:	50                   	push   %eax
f0116648:	52                   	push   %edx
f0116649:	68 00 00 40 00       	push   $0x400000
f011664e:	ff 75 d8             	pushl  -0x28(%ebp)
f0116651:	e8 e2 30 ff ff       	call   f0109738 <calculate_allocated_space>
f0116656:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0116659:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0116660:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0116667:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011666d:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116670:	74 28                	je     f011669a <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116672:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116678:	83 ec 0c             	sub    $0xc,%esp
f011667b:	ff 75 c8             	pushl  -0x38(%ebp)
f011667e:	50                   	push   %eax
f011667f:	68 d4 b7 12 f0       	push   $0xf012b7d4
f0116684:	68 f4 07 00 00       	push   $0x7f4
f0116689:	68 22 9e 12 f0       	push   $0xf0129e22
f011668e:	e8 24 9e fe ff       	call   f01004b7 <_warn>
f0116693:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0116696:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011669a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01166a0:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01166a3:	74 28                	je     f01166cd <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01166a5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01166ab:	83 ec 0c             	sub    $0xc,%esp
f01166ae:	ff 75 c4             	pushl  -0x3c(%ebp)
f01166b1:	50                   	push   %eax
f01166b2:	68 34 b8 12 f0       	push   $0xf012b834
f01166b7:	68 f9 07 00 00       	push   $0x7f9
f01166bc:	68 22 9e 12 f0       	push   $0xf0129e22
f01166c1:	e8 f1 9d fe ff       	call   f01004b7 <_warn>
f01166c6:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01166c9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01166cd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01166d1:	74 04                	je     f01166d7 <test_calculate_allocated_space+0xb51>
f01166d3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01166d7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f01166db:	83 ec 04             	sub    $0x4,%esp
f01166de:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01166e4:	50                   	push   %eax
f01166e5:	68 fe a7 12 f0       	push   $0xf012a7fe
f01166ea:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01166f0:	50                   	push   %eax
f01166f1:	e8 13 a7 00 00       	call   f0120e09 <strcconcat>
f01166f6:	83 c4 10             	add    $0x10,%esp
f01166f9:	83 ec 0c             	sub    $0xc,%esp
f01166fc:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0116702:	50                   	push   %eax
f0116703:	e8 d4 b7 fe ff       	call   f0101edc <execute_command>
f0116708:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f011670b:	83 ec 04             	sub    $0x4,%esp
f011670e:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116714:	50                   	push   %eax
f0116715:	68 3c b7 12 f0       	push   $0xf012b73c
f011671a:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0116720:	50                   	push   %eax
f0116721:	e8 e3 a6 00 00       	call   f0120e09 <strcconcat>
f0116726:	83 c4 10             	add    $0x10,%esp
f0116729:	83 ec 0c             	sub    $0xc,%esp
f011672c:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0116732:	50                   	push   %eax
f0116733:	e8 a4 b7 fe ff       	call   f0101edc <execute_command>
f0116738:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f011673b:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116742:	00 00 00 
		num_pages = 0;
f0116745:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011674c:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f011674f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116752:	05 00 00 38 00       	add    $0x380000,%eax
f0116757:	01 c0                	add    %eax,%eax
f0116759:	89 c2                	mov    %eax,%edx
f011675b:	83 ec 0c             	sub    $0xc,%esp
f011675e:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116764:	50                   	push   %eax
f0116765:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011676b:	50                   	push   %eax
f011676c:	52                   	push   %edx
f011676d:	68 00 00 70 00       	push   $0x700000
f0116772:	ff 75 d8             	pushl  -0x28(%ebp)
f0116775:	e8 be 2f ff ff       	call   f0109738 <calculate_allocated_space>
f011677a:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011677d:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f0116784:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011678b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116791:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116794:	74 28                	je     f01167be <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116796:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011679c:	83 ec 0c             	sub    $0xc,%esp
f011679f:	ff 75 c8             	pushl  -0x38(%ebp)
f01167a2:	50                   	push   %eax
f01167a3:	68 d4 b7 12 f0       	push   $0xf012b7d4
f01167a8:	68 0b 08 00 00       	push   $0x80b
f01167ad:	68 22 9e 12 f0       	push   $0xf0129e22
f01167b2:	e8 00 9d fe ff       	call   f01004b7 <_warn>
f01167b7:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01167ba:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f01167be:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01167c4:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01167c7:	74 28                	je     f01167f1 <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01167c9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01167cf:	83 ec 0c             	sub    $0xc,%esp
f01167d2:	ff 75 c4             	pushl  -0x3c(%ebp)
f01167d5:	50                   	push   %eax
f01167d6:	68 34 b8 12 f0       	push   $0xf012b834
f01167db:	68 10 08 00 00       	push   $0x810
f01167e0:	68 22 9e 12 f0       	push   $0xf0129e22
f01167e5:	e8 cd 9c fe ff       	call   f01004b7 <_warn>
f01167ea:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01167ed:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01167f1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01167f5:	74 04                	je     f01167fb <test_calculate_allocated_space+0xc75>
f01167f7:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01167fb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f01167ff:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0116806:	00 00 00 
		num_pages = 0;
f0116809:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0116810:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0116813:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116816:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f011681b:	89 c2                	mov    %eax,%edx
f011681d:	83 ec 0c             	sub    $0xc,%esp
f0116820:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0116826:	50                   	push   %eax
f0116827:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011682d:	50                   	push   %eax
f011682e:	52                   	push   %edx
f011682f:	68 ff ff 3f 00       	push   $0x3fffff
f0116834:	ff 75 d8             	pushl  -0x28(%ebp)
f0116837:	e8 fc 2e ff ff       	call   f0109738 <calculate_allocated_space>
f011683c:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f011683f:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f0116846:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f011684d:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0116853:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0116856:	74 28                	je     f0116880 <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0116858:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011685e:	83 ec 0c             	sub    $0xc,%esp
f0116861:	ff 75 c8             	pushl  -0x38(%ebp)
f0116864:	50                   	push   %eax
f0116865:	68 d4 b7 12 f0       	push   $0xf012b7d4
f011686a:	68 1e 08 00 00       	push   $0x81e
f011686f:	68 22 9e 12 f0       	push   $0xf0129e22
f0116874:	e8 3e 9c fe ff       	call   f01004b7 <_warn>
f0116879:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011687c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0116880:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116886:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0116889:	74 28                	je     f01168b3 <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f011688b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0116891:	83 ec 0c             	sub    $0xc,%esp
f0116894:	ff 75 c4             	pushl  -0x3c(%ebp)
f0116897:	50                   	push   %eax
f0116898:	68 34 b8 12 f0       	push   $0xf012b834
f011689d:	68 23 08 00 00       	push   $0x823
f01168a2:	68 22 9e 12 f0       	push   $0xf0129e22
f01168a7:	e8 0b 9c fe ff       	call   f01004b7 <_warn>
f01168ac:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01168af:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01168b3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01168b7:	74 04                	je     f01168bd <test_calculate_allocated_space+0xd37>
f01168b9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01168bd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f01168c1:	83 ec 0c             	sub    $0xc,%esp
f01168c4:	68 af a7 12 f0       	push   $0xf012a7af
f01168c9:	e8 9e a6 fe ff       	call   f0100f6c <cprintf>
f01168ce:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f01168d1:	83 ec 08             	sub    $0x8,%esp
f01168d4:	ff 75 e4             	pushl  -0x1c(%ebp)
f01168d7:	68 90 b8 12 f0       	push   $0xf012b890
f01168dc:	e8 8b a6 fe ff       	call   f0100f6c <cprintf>
f01168e1:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01168e4:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01168e8:	75 10                	jne    f01168fa <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f01168ea:	83 ec 0c             	sub    $0xc,%esp
f01168ed:	68 d0 b8 12 f0       	push   $0xf012b8d0
f01168f2:	e8 75 a6 fe ff       	call   f0100f6c <cprintf>
f01168f7:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01168fa:	a1 e4 51 55 f0       	mov    0xf05551e4,%eax
f01168ff:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0116902:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116905:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0116908:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011690d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116910:	5b                   	pop    %ebx
f0116911:	5e                   	pop    %esi
f0116912:	5f                   	pop    %edi
f0116913:	5d                   	pop    %ebp
f0116914:	c3                   	ret    

f0116915 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f0116915:	55                   	push   %ebp
f0116916:	89 e5                	mov    %esp,%ebp
f0116918:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f011691b:	8b 45 10             	mov    0x10(%ebp),%eax
f011691e:	ba 01 00 00 00       	mov    $0x1,%edx
f0116923:	88 c1                	mov    %al,%cl
f0116925:	d3 e2                	shl    %cl,%edx
f0116927:	89 d0                	mov    %edx,%eax
f0116929:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011692c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011692f:	c1 e8 16             	shr    $0x16,%eax
f0116932:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116939:	8b 45 08             	mov    0x8(%ebp),%eax
f011693c:	01 d0                	add    %edx,%eax
f011693e:	8b 00                	mov    (%eax),%eax
f0116940:	83 e0 01             	and    $0x1,%eax
f0116943:	85 c0                	test   %eax,%eax
f0116945:	75 07                	jne    f011694e <CB+0x39>
f0116947:	b8 00 00 00 00       	mov    $0x0,%eax
f011694c:	eb 76                	jmp    f01169c4 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011694e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116951:	c1 e8 16             	shr    $0x16,%eax
f0116954:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011695b:	8b 45 08             	mov    0x8(%ebp),%eax
f011695e:	01 d0                	add    %edx,%eax
f0116960:	8b 00                	mov    (%eax),%eax
f0116962:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116967:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011696a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011696d:	c1 e8 0c             	shr    $0xc,%eax
f0116970:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116973:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f0116978:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f011697b:	72 17                	jb     f0116994 <CB+0x7f>
f011697d:	ff 75 f0             	pushl  -0x10(%ebp)
f0116980:	68 1c b9 12 f0       	push   $0xf012b91c
f0116985:	68 3e 08 00 00       	push   $0x83e
f011698a:	68 22 9e 12 f0       	push   $0xf0129e22
f011698f:	e8 86 99 fe ff       	call   f010031a <_panic>
f0116994:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116997:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011699c:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f011699f:	8b 45 0c             	mov    0xc(%ebp),%eax
f01169a2:	c1 e8 0c             	shr    $0xc,%eax
f01169a5:	25 ff 03 00 00       	and    $0x3ff,%eax
f01169aa:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01169b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01169b4:	01 d0                	add    %edx,%eax
f01169b6:	8b 00                	mov    (%eax),%eax
f01169b8:	23 45 f4             	and    -0xc(%ebp),%eax
f01169bb:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01169be:	0f 94 c0             	sete   %al
f01169c1:	0f b6 c0             	movzbl %al,%eax
}
f01169c4:	c9                   	leave  
f01169c5:	c3                   	ret    

f01169c6 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f01169c6:	55                   	push   %ebp
f01169c7:	89 e5                	mov    %esp,%ebp
f01169c9:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f01169cc:	8b 45 10             	mov    0x10(%ebp),%eax
f01169cf:	ba 01 00 00 00       	mov    $0x1,%edx
f01169d4:	88 c1                	mov    %al,%cl
f01169d6:	d3 e2                	shl    %cl,%edx
f01169d8:	89 d0                	mov    %edx,%eax
f01169da:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01169dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01169e0:	c1 e8 16             	shr    $0x16,%eax
f01169e3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01169ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01169ed:	01 d0                	add    %edx,%eax
f01169ef:	8b 00                	mov    (%eax),%eax
f01169f1:	83 e0 01             	and    $0x1,%eax
f01169f4:	85 c0                	test   %eax,%eax
f01169f6:	75 0a                	jne    f0116a02 <SB+0x3c>
f01169f8:	b8 00 00 00 00       	mov    $0x0,%eax
f01169fd:	e9 cd 00 00 00       	jmp    f0116acf <SB+0x109>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116a02:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116a05:	c1 e8 16             	shr    $0x16,%eax
f0116a08:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116a0f:	8b 45 08             	mov    0x8(%ebp),%eax
f0116a12:	01 d0                	add    %edx,%eax
f0116a14:	8b 00                	mov    (%eax),%eax
f0116a16:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116a1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116a1e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116a21:	c1 e8 0c             	shr    $0xc,%eax
f0116a24:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116a27:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f0116a2c:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0116a2f:	72 17                	jb     f0116a48 <SB+0x82>
f0116a31:	ff 75 f0             	pushl  -0x10(%ebp)
f0116a34:	68 1c b9 12 f0       	push   $0xf012b91c
f0116a39:	68 46 08 00 00       	push   $0x846
f0116a3e:	68 22 9e 12 f0       	push   $0xf0129e22
f0116a43:	e8 d2 98 fe ff       	call   f010031a <_panic>
f0116a48:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116a4b:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116a50:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
f0116a53:	83 7d 14 ff          	cmpl   $0xffffffff,0x14(%ebp)
f0116a57:	74 3c                	je     f0116a95 <SB+0xcf>
f0116a59:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116a5c:	c1 e8 0c             	shr    $0xc,%eax
f0116a5f:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116a64:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116a6b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116a6e:	01 d0                	add    %edx,%eax
f0116a70:	8b 55 0c             	mov    0xc(%ebp),%edx
f0116a73:	c1 ea 0c             	shr    $0xc,%edx
f0116a76:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116a7c:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0116a83:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0116a86:	01 ca                	add    %ecx,%edx
f0116a88:	8b 12                	mov    (%edx),%edx
f0116a8a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0116a8d:	f7 d1                	not    %ecx
f0116a8f:	21 ca                	and    %ecx,%edx
f0116a91:	89 10                	mov    %edx,(%eax)
f0116a93:	eb 35                	jmp    f0116aca <SB+0x104>
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
f0116a95:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116a98:	c1 e8 0c             	shr    $0xc,%eax
f0116a9b:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116aa0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116aa7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116aaa:	01 c2                	add    %eax,%edx
f0116aac:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116aaf:	c1 e8 0c             	shr    $0xc,%eax
f0116ab2:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116ab7:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0116abe:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116ac1:	01 c8                	add    %ecx,%eax
f0116ac3:	8b 00                	mov    (%eax),%eax
f0116ac5:	0b 45 f4             	or     -0xc(%ebp),%eax
f0116ac8:	89 02                	mov    %eax,(%edx)
	return 0;
f0116aca:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0116acf:	c9                   	leave  
f0116ad0:	c3                   	ret    

f0116ad1 <CPs>:
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f0116ad1:	55                   	push   %ebp
f0116ad2:	89 e5                	mov    %esp,%ebp
f0116ad4:	83 ec 28             	sub    $0x28,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116ad7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116ada:	c1 e8 16             	shr    $0x16,%eax
f0116add:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116ae4:	8b 45 08             	mov    0x8(%ebp),%eax
f0116ae7:	01 d0                	add    %edx,%eax
f0116ae9:	8b 00                	mov    (%eax),%eax
f0116aeb:	83 e0 01             	and    $0x1,%eax
f0116aee:	85 c0                	test   %eax,%eax
f0116af0:	75 0a                	jne    f0116afc <CPs+0x2b>
f0116af2:	b8 00 00 00 00       	mov    $0x0,%eax
f0116af7:	e9 b8 00 00 00       	jmp    f0116bb4 <CPs+0xe3>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116afc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116aff:	c1 e8 16             	shr    $0x16,%eax
f0116b02:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116b09:	8b 45 08             	mov    0x8(%ebp),%eax
f0116b0c:	01 d0                	add    %edx,%eax
f0116b0e:	8b 00                	mov    (%eax),%eax
f0116b10:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116b15:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116b18:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116b1b:	c1 e8 0c             	shr    $0xc,%eax
f0116b1e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116b21:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f0116b26:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0116b29:	72 17                	jb     f0116b42 <CPs+0x71>
f0116b2b:	ff 75 f0             	pushl  -0x10(%ebp)
f0116b2e:	68 1c b9 12 f0       	push   $0xf012b91c
f0116b33:	68 4f 08 00 00       	push   $0x84f
f0116b38:	68 22 9e 12 f0       	push   $0xf0129e22
f0116b3d:	e8 d8 97 fe ff       	call   f010031a <_panic>
f0116b42:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116b45:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116b4a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	for (int i = 0 ; i < 12 ; i++)
f0116b4d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0116b54:	eb 53                	jmp    f0116ba9 <CPs+0xd8>
	{
		uint32 mask = 1<<i;
f0116b56:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116b59:	ba 01 00 00 00       	mov    $0x1,%edx
f0116b5e:	88 c1                	mov    %al,%cl
f0116b60:	d3 e2                	shl    %cl,%edx
f0116b62:	89 d0                	mov    %edx,%eax
f0116b64:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (!(which & mask))	continue ;
f0116b67:	8b 45 14             	mov    0x14(%ebp),%eax
f0116b6a:	23 45 e4             	and    -0x1c(%ebp),%eax
f0116b6d:	85 c0                	test   %eax,%eax
f0116b6f:	74 34                	je     f0116ba5 <CPs+0xd4>
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
f0116b71:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116b74:	c1 e8 0c             	shr    $0xc,%eax
f0116b77:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116b7c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116b83:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116b86:	01 d0                	add    %edx,%eax
f0116b88:	8b 00                	mov    (%eax),%eax
f0116b8a:	33 45 10             	xor    0x10(%ebp),%eax
f0116b8d:	23 45 e4             	and    -0x1c(%ebp),%eax
f0116b90:	85 c0                	test   %eax,%eax
f0116b92:	0f 94 c0             	sete   %al
f0116b95:	88 45 e3             	mov    %al,-0x1d(%ebp)
		if (!c) return 0;
f0116b98:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0116b9c:	75 08                	jne    f0116ba6 <CPs+0xd5>
f0116b9e:	b8 00 00 00 00       	mov    $0x0,%eax
f0116ba3:	eb 0f                	jmp    f0116bb4 <CPs+0xe3>
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
	{
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
f0116ba5:	90                   	nop
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
f0116ba6:	ff 45 f4             	incl   -0xc(%ebp)
f0116ba9:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
f0116bad:	7e a7                	jle    f0116b56 <CPs+0x85>
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
		if (!c) return 0;
	}
	return 1;
f0116baf:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116bb4:	c9                   	leave  
f0116bb5:	c3                   	ret    

f0116bb6 <CA>:

int CA(uint32 *ptr_dir, uint32 va)
{
f0116bb6:	55                   	push   %ebp
f0116bb7:	89 e5                	mov    %esp,%ebp
f0116bb9:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116bbc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116bbf:	c1 e8 16             	shr    $0x16,%eax
f0116bc2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116bc9:	8b 45 08             	mov    0x8(%ebp),%eax
f0116bcc:	01 d0                	add    %edx,%eax
f0116bce:	8b 00                	mov    (%eax),%eax
f0116bd0:	83 e0 01             	and    $0x1,%eax
f0116bd3:	85 c0                	test   %eax,%eax
f0116bd5:	75 07                	jne    f0116bde <CA+0x28>
f0116bd7:	b8 00 00 00 00       	mov    $0x0,%eax
f0116bdc:	eb 6f                	jmp    f0116c4d <CA+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116bde:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116be1:	c1 e8 16             	shr    $0x16,%eax
f0116be4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116beb:	8b 45 08             	mov    0x8(%ebp),%eax
f0116bee:	01 d0                	add    %edx,%eax
f0116bf0:	8b 00                	mov    (%eax),%eax
f0116bf2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116bf7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116bfa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116bfd:	c1 e8 0c             	shr    $0xc,%eax
f0116c00:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116c03:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f0116c08:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116c0b:	72 17                	jb     f0116c24 <CA+0x6e>
f0116c0d:	ff 75 f4             	pushl  -0xc(%ebp)
f0116c10:	68 1c b9 12 f0       	push   $0xf012b91c
f0116c15:	68 5e 08 00 00       	push   $0x85e
f0116c1a:	68 22 9e 12 f0       	push   $0xf0129e22
f0116c1f:	e8 f6 96 fe ff       	call   f010031a <_panic>
f0116c24:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116c27:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116c2c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
f0116c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c32:	c1 e8 0c             	shr    $0xc,%eax
f0116c35:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116c3a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116c41:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116c44:	01 d0                	add    %edx,%eax
f0116c46:	8b 00                	mov    (%eax),%eax
f0116c48:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0116c4d:	c9                   	leave  
f0116c4e:	c3                   	ret    

f0116c4f <CE>:

int CE(uint32 *_d, uint32 va)
{
f0116c4f:	55                   	push   %ebp
f0116c50:	89 e5                	mov    %esp,%ebp
f0116c52:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116c55:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c58:	c1 e8 16             	shr    $0x16,%eax
f0116c5b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116c62:	8b 45 08             	mov    0x8(%ebp),%eax
f0116c65:	01 d0                	add    %edx,%eax
f0116c67:	8b 00                	mov    (%eax),%eax
f0116c69:	83 e0 01             	and    $0x1,%eax
f0116c6c:	85 c0                	test   %eax,%eax
f0116c6e:	75 07                	jne    f0116c77 <CE+0x28>
f0116c70:	b8 00 00 00 00       	mov    $0x0,%eax
f0116c75:	eb 7a                	jmp    f0116cf1 <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116c77:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116c7a:	c1 e8 16             	shr    $0x16,%eax
f0116c7d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116c84:	8b 45 08             	mov    0x8(%ebp),%eax
f0116c87:	01 d0                	add    %edx,%eax
f0116c89:	8b 00                	mov    (%eax),%eax
f0116c8b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116c90:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116c93:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116c96:	c1 e8 0c             	shr    $0xc,%eax
f0116c99:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116c9c:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f0116ca1:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116ca4:	72 17                	jb     f0116cbd <CE+0x6e>
f0116ca6:	ff 75 f4             	pushl  -0xc(%ebp)
f0116ca9:	68 1c b9 12 f0       	push   $0xf012b91c
f0116cae:	68 65 08 00 00       	push   $0x865
f0116cb3:	68 22 9e 12 f0       	push   $0xf0129e22
f0116cb8:	e8 5d 96 fe ff       	call   f010031a <_panic>
f0116cbd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116cc0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116cc5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f0116cc8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116ccb:	c1 e8 0c             	shr    $0xc,%eax
f0116cce:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116cd3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116cda:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116cdd:	01 d0                	add    %edx,%eax
f0116cdf:	8b 00                	mov    (%eax),%eax
f0116ce1:	85 c0                	test   %eax,%eax
f0116ce3:	74 07                	je     f0116cec <CE+0x9d>
f0116ce5:	b8 00 00 00 00       	mov    $0x0,%eax
f0116cea:	eb 05                	jmp    f0116cf1 <CE+0xa2>
	return 1;
f0116cec:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0116cf1:	c9                   	leave  
f0116cf2:	c3                   	ret    

f0116cf3 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f0116cf3:	55                   	push   %ebp
f0116cf4:	89 e5                	mov    %esp,%ebp
f0116cf6:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 pd_entry = pd[((((uint32) (va)) >> 22) & 0x3FF)];
f0116cf9:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116cfc:	c1 e8 16             	shr    $0x16,%eax
f0116cff:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116d06:	8b 45 08             	mov    0x8(%ebp),%eax
f0116d09:	01 d0                	add    %edx,%eax
f0116d0b:	8b 00                	mov    (%eax),%eax
f0116d0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ( (pd_entry & 1) == 1)
f0116d10:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116d13:	83 e0 01             	and    $0x1,%eax
f0116d16:	85 c0                	test   %eax,%eax
f0116d18:	0f 84 92 00 00 00    	je     f0116db0 <CP+0xbd>
	{
		uint32 *t = NULL;
f0116d1e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		t = (STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(pd_entry)));
f0116d25:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116d28:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116d2d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0116d30:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116d33:	c1 e8 0c             	shr    $0xc,%eax
f0116d36:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0116d39:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f0116d3e:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0116d41:	72 17                	jb     f0116d5a <CP+0x67>
f0116d43:	ff 75 ec             	pushl  -0x14(%ebp)
f0116d46:	68 1c b9 12 f0       	push   $0xf012b91c
f0116d4b:	68 71 08 00 00       	push   $0x871
f0116d50:	68 22 9e 12 f0       	push   $0xf0129e22
f0116d55:	e8 c0 95 fe ff       	call   f010031a <_panic>
f0116d5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116d5d:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116d62:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf("va =%x, ENTRY after PERM = %x, perm to set = %x, perm to clear = %x\n", va, t[PTX(va)]&0x00000FFF, ps, pc);

		if (((t[((((uint32) (va)) >> 12) & 0x3FF)]&ps) == ps)&&((~(t[((((uint32) (va)) >> 12) & 0x3FF)])&pc) == pc))
f0116d65:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116d68:	c1 e8 0c             	shr    $0xc,%eax
f0116d6b:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116d70:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116d77:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116d7a:	01 d0                	add    %edx,%eax
f0116d7c:	8b 00                	mov    (%eax),%eax
f0116d7e:	23 45 10             	and    0x10(%ebp),%eax
f0116d81:	3b 45 10             	cmp    0x10(%ebp),%eax
f0116d84:	75 2a                	jne    f0116db0 <CP+0xbd>
f0116d86:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116d89:	c1 e8 0c             	shr    $0xc,%eax
f0116d8c:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116d91:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116d98:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116d9b:	01 d0                	add    %edx,%eax
f0116d9d:	8b 00                	mov    (%eax),%eax
f0116d9f:	f7 d0                	not    %eax
f0116da1:	23 45 14             	and    0x14(%ebp),%eax
f0116da4:	3b 45 14             	cmp    0x14(%ebp),%eax
f0116da7:	75 07                	jne    f0116db0 <CP+0xbd>
			return 1;
f0116da9:	b8 01 00 00 00       	mov    $0x1,%eax
f0116dae:	eb 05                	jmp    f0116db5 <CP+0xc2>
	}
	return 0;
f0116db0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0116db5:	c9                   	leave  
f0116db6:	c3                   	ret    

f0116db7 <GP>:

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f0116db7:	55                   	push   %ebp
f0116db8:	89 e5                	mov    %esp,%ebp
f0116dba:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0116dbd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116dc0:	c1 e8 16             	shr    $0x16,%eax
f0116dc3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116dca:	8b 45 08             	mov    0x8(%ebp),%eax
f0116dcd:	01 d0                	add    %edx,%eax
f0116dcf:	8b 00                	mov    (%eax),%eax
f0116dd1:	83 e0 01             	and    $0x1,%eax
f0116dd4:	85 c0                	test   %eax,%eax
f0116dd6:	75 07                	jne    f0116ddf <GP+0x28>
f0116dd8:	b8 00 00 00 00       	mov    $0x0,%eax
f0116ddd:	eb 6f                	jmp    f0116e4e <GP+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0116ddf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116de2:	c1 e8 16             	shr    $0x16,%eax
f0116de5:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116dec:	8b 45 08             	mov    0x8(%ebp),%eax
f0116def:	01 d0                	add    %edx,%eax
f0116df1:	8b 00                	mov    (%eax),%eax
f0116df3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116df8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0116dfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116dfe:	c1 e8 0c             	shr    $0xc,%eax
f0116e01:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0116e04:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f0116e09:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0116e0c:	72 17                	jb     f0116e25 <GP+0x6e>
f0116e0e:	ff 75 f4             	pushl  -0xc(%ebp)
f0116e11:	68 1c b9 12 f0       	push   $0xf012b91c
f0116e16:	68 7e 08 00 00       	push   $0x87e
f0116e1b:	68 22 9e 12 f0       	push   $0xf0129e22
f0116e20:	e8 f5 94 fe ff       	call   f010031a <_panic>
f0116e25:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116e28:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0116e2d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
f0116e30:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116e33:	c1 e8 0c             	shr    $0xc,%eax
f0116e36:	25 ff 03 00 00       	and    $0x3ff,%eax
f0116e3b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116e42:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116e45:	01 d0                	add    %edx,%eax
f0116e47:	8b 00                	mov    (%eax),%eax
f0116e49:	25 ff 0f 00 00       	and    $0xfff,%eax
}
f0116e4e:	c9                   	leave  
f0116e4f:	c3                   	ret    

f0116e50 <ClearUserSpace>:

void ClearUserSpace(uint32 *ptr_dir)
{
f0116e50:	55                   	push   %ebp
f0116e51:	89 e5                	mov    %esp,%ebp
f0116e53:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116e56:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0116e5d:	eb 18                	jmp    f0116e77 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f0116e5f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116e62:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0116e69:	8b 45 08             	mov    0x8(%ebp),%eax
f0116e6c:	01 d0                	add    %edx,%eax
f0116e6e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0116e74:	ff 45 fc             	incl   -0x4(%ebp)
f0116e77:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0116e7a:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0116e7f:	76 de                	jbe    f0116e5f <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f0116e81:	90                   	nop
f0116e82:	c9                   	leave  
f0116e83:	c3                   	ret    

f0116e84 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f0116e84:	55                   	push   %ebp
f0116e85:	89 e5                	mov    %esp,%ebp
f0116e87:	83 ec 38             	sub    $0x38,%esp
f0116e8a:	8b 45 2c             	mov    0x2c(%ebp),%eax
f0116e8d:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f0116e90:	8b 45 0c             	mov    0xc(%ebp),%eax
f0116e93:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116e98:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f0116e9b:	8b 45 10             	mov    0x10(%ebp),%eax
f0116e9e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0116ea3:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0116ea6:	e9 ea 01 00 00       	jmp    f0117095 <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f0116eab:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0116eaf:	74 44                	je     f0116ef5 <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f0116eb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0116eb4:	83 ec 04             	sub    $0x4,%esp
f0116eb7:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0116eba:	52                   	push   %edx
f0116ebb:	50                   	push   %eax
f0116ebc:	ff 75 08             	pushl  0x8(%ebp)
f0116ebf:	e8 06 18 ff ff       	call   f01086ca <get_frame_info>
f0116ec4:	83 c4 10             	add    $0x10,%esp
f0116ec7:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f0116eca:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116ecd:	85 c0                	test   %eax,%eax
f0116ecf:	75 24                	jne    f0116ef5 <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f0116ed1:	83 ec 04             	sub    $0x4,%esp
f0116ed4:	68 4c b9 12 f0       	push   $0xf012b94c
f0116ed9:	68 99 08 00 00       	push   $0x899
f0116ede:	68 22 9e 12 f0       	push   $0xf0129e22
f0116ee3:	e8 cf 95 fe ff       	call   f01004b7 <_warn>
f0116ee8:	83 c4 10             	add    $0x10,%esp
				return 0;
f0116eeb:	b8 00 00 00 00       	mov    $0x0,%eax
f0116ef0:	e9 b6 01 00 00       	jmp    f01170ab <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f0116ef5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0116ef8:	83 ec 04             	sub    $0x4,%esp
f0116efb:	8d 55 d8             	lea    -0x28(%ebp),%edx
f0116efe:	52                   	push   %edx
f0116eff:	50                   	push   %eax
f0116f00:	ff 75 08             	pushl  0x8(%ebp)
f0116f03:	e8 c2 17 ff ff       	call   f01086ca <get_frame_info>
f0116f08:	83 c4 10             	add    $0x10,%esp
f0116f0b:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f0116f0e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116f11:	85 c0                	test   %eax,%eax
f0116f13:	75 24                	jne    f0116f39 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f0116f15:	83 ec 04             	sub    $0x4,%esp
f0116f18:	68 78 b9 12 f0       	push   $0xf012b978
f0116f1d:	68 a0 08 00 00       	push   $0x8a0
f0116f22:	68 22 9e 12 f0       	push   $0xf0129e22
f0116f27:	e8 8b 95 fe ff       	call   f01004b7 <_warn>
f0116f2c:	83 c4 10             	add    $0x10,%esp
			return 0;
f0116f2f:	b8 00 00 00 00       	mov    $0x0,%eax
f0116f34:	e9 72 01 00 00       	jmp    f01170ab <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0116f39:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f0116f3d:	75 70                	jne    f0116faf <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f0116f3f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116f42:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0116f45:	c1 ea 0c             	shr    $0xc,%edx
f0116f48:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116f4e:	c1 e2 02             	shl    $0x2,%edx
f0116f51:	01 d0                	add    %edx,%eax
f0116f53:	8b 00                	mov    (%eax),%eax
f0116f55:	c1 e8 0c             	shr    $0xc,%eax
f0116f58:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f0116f5b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116f5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0116f61:	c1 ea 0c             	shr    $0xc,%edx
f0116f64:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0116f6a:	c1 e2 02             	shl    $0x2,%edx
f0116f6d:	01 d0                	add    %edx,%eax
f0116f6f:	8b 00                	mov    (%eax),%eax
f0116f71:	c1 e8 0c             	shr    $0xc,%eax
f0116f74:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f0116f77:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0116f7a:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0116f7d:	74 30                	je     f0116faf <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f0116f7f:	83 ec 04             	sub    $0x4,%esp
f0116f82:	ff 75 e4             	pushl  -0x1c(%ebp)
f0116f85:	ff 75 e8             	pushl  -0x18(%ebp)
f0116f88:	ff 75 f0             	pushl  -0x10(%ebp)
f0116f8b:	ff 75 f4             	pushl  -0xc(%ebp)
f0116f8e:	68 a4 b9 12 f0       	push   $0xf012b9a4
f0116f93:	68 aa 08 00 00       	push   $0x8aa
f0116f98:	68 22 9e 12 f0       	push   $0xf0129e22
f0116f9d:	e8 15 95 fe ff       	call   f01004b7 <_warn>
f0116fa2:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116fa5:	b8 00 00 00 00       	mov    $0x0,%eax
f0116faa:	e9 fc 00 00 00       	jmp    f01170ab <CCP+0x227>
			}
		}
		if (ref != -1)
f0116faf:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f0116fb3:	74 52                	je     f0117007 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0116fb5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116fb9:	74 0e                	je     f0116fc9 <CCP+0x145>
f0116fbb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116fbe:	8b 40 08             	mov    0x8(%eax),%eax
f0116fc1:	0f b7 c0             	movzwl %ax,%eax
f0116fc4:	3b 45 18             	cmp    0x18(%ebp),%eax
f0116fc7:	74 3e                	je     f0117007 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0116fc9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0116fcd:	74 0b                	je     f0116fda <CCP+0x156>
f0116fcf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0116fd2:	8b 40 08             	mov    0x8(%eax),%eax
f0116fd5:	0f b7 c0             	movzwl %ax,%eax
f0116fd8:	eb 05                	jmp    f0116fdf <CCP+0x15b>
f0116fda:	b8 00 00 00 00       	mov    $0x0,%eax
f0116fdf:	83 ec 0c             	sub    $0xc,%esp
f0116fe2:	50                   	push   %eax
f0116fe3:	ff 75 f0             	pushl  -0x10(%ebp)
f0116fe6:	68 00 ba 12 f0       	push   $0xf012ba00
f0116feb:	68 b2 08 00 00       	push   $0x8b2
f0116ff0:	68 22 9e 12 f0       	push   $0xf0129e22
f0116ff5:	e8 bd 94 fe ff       	call   f01004b7 <_warn>
f0116ffa:	83 c4 20             	add    $0x20,%esp
				return 0;
f0116ffd:	b8 00 00 00 00       	mov    $0x0,%eax
f0117002:	e9 a4 00 00 00       	jmp    f01170ab <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f0117007:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011700a:	ff 75 20             	pushl  0x20(%ebp)
f011700d:	ff 75 1c             	pushl  0x1c(%ebp)
f0117010:	50                   	push   %eax
f0117011:	ff 75 08             	pushl  0x8(%ebp)
f0117014:	e8 b8 fa ff ff       	call   f0116ad1 <CPs>
f0117019:	83 c4 10             	add    $0x10,%esp
f011701c:	85 c0                	test   %eax,%eax
f011701e:	7f 21                	jg     f0117041 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f0117020:	83 ec 04             	sub    $0x4,%esp
f0117023:	68 70 ba 12 f0       	push   $0xf012ba70
f0117028:	68 b8 08 00 00       	push   $0x8b8
f011702d:	68 22 9e 12 f0       	push   $0xf0129e22
f0117032:	e8 80 94 fe ff       	call   f01004b7 <_warn>
f0117037:	83 c4 10             	add    $0x10,%esp
			return 0;
f011703a:	b8 00 00 00 00       	mov    $0x0,%eax
f011703f:	eb 6a                	jmp    f01170ab <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0117041:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0117045:	74 3a                	je     f0117081 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0117047:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011704a:	ff 75 28             	pushl  0x28(%ebp)
f011704d:	ff 75 24             	pushl  0x24(%ebp)
f0117050:	50                   	push   %eax
f0117051:	ff 75 08             	pushl  0x8(%ebp)
f0117054:	e8 78 fa ff ff       	call   f0116ad1 <CPs>
f0117059:	83 c4 10             	add    $0x10,%esp
f011705c:	85 c0                	test   %eax,%eax
f011705e:	7f 21                	jg     f0117081 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f0117060:	83 ec 04             	sub    $0x4,%esp
f0117063:	68 b8 ba 12 f0       	push   $0xf012bab8
f0117068:	68 bf 08 00 00       	push   $0x8bf
f011706d:	68 22 9e 12 f0       	push   $0xf0129e22
f0117072:	e8 40 94 fe ff       	call   f01004b7 <_warn>
f0117077:	83 c4 10             	add    $0x10,%esp
				return 0;
f011707a:	b8 00 00 00 00       	mov    $0x0,%eax
f011707f:	eb 2a                	jmp    f01170ab <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0117081:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0117085:	74 07                	je     f011708e <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0117087:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f011708e:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0117095:	8b 55 10             	mov    0x10(%ebp),%edx
f0117098:	8b 45 14             	mov    0x14(%ebp),%eax
f011709b:	01 d0                	add    %edx,%eax
f011709d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01170a0:	0f 87 05 fe ff ff    	ja     f0116eab <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f01170a6:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01170ab:	c9                   	leave  
f01170ac:	c3                   	ret    

f01170ad <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f01170ad:	55                   	push   %ebp
f01170ae:	89 e5                	mov    %esp,%ebp
f01170b0:	57                   	push   %edi
f01170b1:	56                   	push   %esi
f01170b2:	53                   	push   %ebx
f01170b3:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f01170b9:	a0 94 9d 17 f0       	mov    0xf0179d94,%al
f01170be:	84 c0                	test   %al,%al
f01170c0:	0f 84 38 0a 00 00    	je     f0117afe <test_priority_normal_and_higher+0xa51>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f01170c6:	c6 05 94 9d 17 f0 00 	movb   $0x0,0xf0179d94
		char command[100] = "load fos_add 20";
f01170cd:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f01170d3:	bb 74 bd 12 f0       	mov    $0xf012bd74,%ebx
f01170d8:	ba 04 00 00 00       	mov    $0x4,%edx
f01170dd:	89 c7                	mov    %eax,%edi
f01170df:	89 de                	mov    %ebx,%esi
f01170e1:	89 d1                	mov    %edx,%ecx
f01170e3:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01170e5:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f01170eb:	b9 15 00 00 00       	mov    $0x15,%ecx
f01170f0:	b8 00 00 00 00       	mov    $0x0,%eax
f01170f5:	89 d7                	mov    %edx,%edi
f01170f7:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f01170f9:	83 ec 0c             	sub    $0xc,%esp
f01170fc:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f0117102:	50                   	push   %eax
f0117103:	e8 d4 ad fe ff       	call   f0101edc <execute_command>
f0117108:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f011710b:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f0117111:	bb d8 bd 12 f0       	mov    $0xf012bdd8,%ebx
f0117116:	ba 0d 00 00 00       	mov    $0xd,%edx
f011711b:	89 c7                	mov    %eax,%edi
f011711d:	89 de                	mov    %ebx,%esi
f011711f:	89 d1                	mov    %edx,%ecx
f0117121:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117123:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f0117129:	b9 57 00 00 00       	mov    $0x57,%ecx
f011712e:	b0 00                	mov    $0x0,%al
f0117130:	89 d7                	mov    %edx,%edi
f0117132:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0117134:	83 ec 0c             	sub    $0xc,%esp
f0117137:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f011713d:	50                   	push   %eax
f011713e:	e8 99 ad fe ff       	call   f0101edc <execute_command>
f0117143:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0117146:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f011714c:	bb 3c be 12 f0       	mov    $0xf012be3c,%ebx
f0117151:	ba 17 00 00 00       	mov    $0x17,%edx
f0117156:	89 c7                	mov    %eax,%edi
f0117158:	89 de                	mov    %ebx,%esi
f011715a:	89 d1                	mov    %edx,%ecx
f011715c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011715e:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0117164:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0117169:	b0 00                	mov    $0x0,%al
f011716b:	89 d7                	mov    %edx,%edi
f011716d:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f011716f:	83 ec 0c             	sub    $0xc,%esp
f0117172:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0117178:	50                   	push   %eax
f0117179:	e8 5e ad fe ff       	call   f0101edc <execute_command>
f011717e:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(16, &addEnv, 0);
f0117181:	83 ec 04             	sub    $0x4,%esp
f0117184:	6a 00                	push   $0x0
f0117186:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0117189:	50                   	push   %eax
f011718a:	6a 10                	push   $0x10
f011718c:	e8 2f 36 ff ff       	call   f010a7c0 <envid2env>
f0117191:	83 c4 10             	add    $0x10,%esp
		envid2env(17, &factEnv, 0);
f0117194:	83 ec 04             	sub    $0x4,%esp
f0117197:	6a 00                	push   $0x0
f0117199:	8d 45 a8             	lea    -0x58(%ebp),%eax
f011719c:	50                   	push   %eax
f011719d:	6a 11                	push   $0x11
f011719f:	e8 1c 36 ff ff       	call   f010a7c0 <envid2env>
f01171a4:	83 c4 10             	add    $0x10,%esp
		envid2env(18, &helloEnv, 0);
f01171a7:	83 ec 04             	sub    $0x4,%esp
f01171aa:	6a 00                	push   $0x0
f01171ac:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f01171af:	50                   	push   %eax
f01171b0:	6a 12                	push   $0x12
f01171b2:	e8 09 36 ff ff       	call   f010a7c0 <envid2env>
f01171b7:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f01171ba:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01171bd:	85 c0                	test   %eax,%eax
f01171bf:	74 0e                	je     f01171cf <test_priority_normal_and_higher+0x122>
f01171c1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01171c4:	85 c0                	test   %eax,%eax
f01171c6:	74 07                	je     f01171cf <test_priority_normal_and_higher+0x122>
f01171c8:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01171cb:	85 c0                	test   %eax,%eax
f01171cd:	75 14                	jne    f01171e3 <test_priority_normal_and_higher+0x136>
			panic("Loading programs failed\n");
f01171cf:	83 ec 04             	sub    $0x4,%esp
f01171d2:	68 f8 ba 12 f0       	push   $0xf012baf8
f01171d7:	6a 29                	push   $0x29
f01171d9:	68 11 bb 12 f0       	push   $0xf012bb11
f01171de:	e8 37 91 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01171e3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01171e6:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01171ec:	83 f8 14             	cmp    $0x14,%eax
f01171ef:	75 1c                	jne    f011720d <test_priority_normal_and_higher+0x160>
f01171f1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01171f4:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01171fa:	83 f8 0f             	cmp    $0xf,%eax
f01171fd:	75 0e                	jne    f011720d <test_priority_normal_and_higher+0x160>
f01171ff:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117202:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0117208:	83 f8 0a             	cmp    $0xa,%eax
f011720b:	74 32                	je     f011723f <test_priority_normal_and_higher+0x192>
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );
f011720d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117210:	8b 88 84 00 00 00    	mov    0x84(%eax),%ecx
f0117216:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117219:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f011721f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117222:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0117228:	83 ec 08             	sub    $0x8,%esp
f011722b:	51                   	push   %ecx
f011722c:	52                   	push   %edx
f011722d:	50                   	push   %eax
f011722e:	68 2c bb 12 f0       	push   $0xf012bb2c
f0117233:	6a 2c                	push   $0x2c
f0117235:	68 11 bb 12 f0       	push   $0xf012bb11
f011723a:	e8 db 90 fe ff       	call   f010031a <_panic>

		for(int i = 0; i < 20; i++)
f011723f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0117246:	eb 47                	jmp    f011728f <test_priority_normal_and_higher+0x1e2>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0117248:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f011724b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011724e:	89 d0                	mov    %edx,%eax
f0117250:	01 c0                	add    %eax,%eax
f0117252:	01 d0                	add    %edx,%eax
f0117254:	c1 e0 03             	shl    $0x3,%eax
f0117257:	01 c8                	add    %ecx,%eax
f0117259:	05 88 00 00 00       	add    $0x88,%eax
f011725e:	8b 10                	mov    (%eax),%edx
f0117260:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117263:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f011726a:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f011726d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117270:	89 d0                	mov    %edx,%eax
f0117272:	01 c0                	add    %eax,%eax
f0117274:	01 d0                	add    %edx,%eax
f0117276:	c1 e0 03             	shl    $0x3,%eax
f0117279:	01 c8                	add    %ecx,%eax
f011727b:	05 90 00 00 00       	add    $0x90,%eax
f0117280:	8b 10                	mov    (%eax),%edx
f0117282:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117285:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size. add: %d, fact: %d, hello: %d\n", addEnv->page_WS_max_size , factEnv->page_WS_max_size , helloEnv->page_WS_max_size );

		for(int i = 0; i < 20; i++)
f011728c:	ff 45 e4             	incl   -0x1c(%ebp)
f011728f:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0117293:	7e b3                	jle    f0117248 <test_priority_normal_and_higher+0x19b>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0117295:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011729c:	eb 47                	jmp    f01172e5 <test_priority_normal_and_higher+0x238>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f011729e:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f01172a1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01172a4:	89 d0                	mov    %edx,%eax
f01172a6:	01 c0                	add    %eax,%eax
f01172a8:	01 d0                	add    %edx,%eax
f01172aa:	c1 e0 03             	shl    $0x3,%eax
f01172ad:	01 c8                	add    %ecx,%eax
f01172af:	05 88 00 00 00       	add    $0x88,%eax
f01172b4:	8b 10                	mov    (%eax),%edx
f01172b6:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01172b9:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f01172c0:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f01172c3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01172c6:	89 d0                	mov    %edx,%eax
f01172c8:	01 c0                	add    %eax,%eax
f01172ca:	01 d0                	add    %edx,%eax
f01172cc:	c1 e0 03             	shl    $0x3,%eax
f01172cf:	01 c8                	add    %ecx,%eax
f01172d1:	05 90 00 00 00       	add    $0x90,%eax
f01172d6:	8b 10                	mov    (%eax),%edx
f01172d8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01172db:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f01172e2:	ff 45 e0             	incl   -0x20(%ebp)
f01172e5:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f01172e9:	7e b3                	jle    f011729e <test_priority_normal_and_higher+0x1f1>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f01172eb:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f01172f2:	eb 47                	jmp    f011733b <test_priority_normal_and_higher+0x28e>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f01172f4:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01172f7:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01172fa:	89 d0                	mov    %edx,%eax
f01172fc:	01 c0                	add    %eax,%eax
f01172fe:	01 d0                	add    %edx,%eax
f0117300:	c1 e0 03             	shl    $0x3,%eax
f0117303:	01 c8                	add    %ecx,%eax
f0117305:	05 88 00 00 00       	add    $0x88,%eax
f011730a:	8b 10                	mov    (%eax),%edx
f011730c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011730f:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0117316:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0117319:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011731c:	89 d0                	mov    %edx,%eax
f011731e:	01 c0                	add    %eax,%eax
f0117320:	01 d0                	add    %edx,%eax
f0117322:	c1 e0 03             	shl    $0x3,%eax
f0117325:	01 c8                	add    %ecx,%eax
f0117327:	05 90 00 00 00       	add    $0x90,%eax
f011732c:	8b 10                	mov    (%eax),%edx
f011732e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117331:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0117338:	ff 45 dc             	incl   -0x24(%ebp)
f011733b:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f011733f:	7e b3                	jle    f01172f4 <test_priority_normal_and_higher+0x247>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0117341:	e8 c3 66 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0117346:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f0117349:	e8 f2 d4 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011734e:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0117351:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117354:	83 ec 08             	sub    $0x8,%esp
f0117357:	6a 03                	push   $0x3
f0117359:	50                   	push   %eax
f011735a:	e8 50 4b ff ff       	call   f010beaf <set_program_priority>
f011735f:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0117362:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117365:	83 ec 08             	sub    $0x8,%esp
f0117368:	6a 03                	push   $0x3
f011736a:	50                   	push   %eax
f011736b:	e8 3f 4b ff ff       	call   f010beaf <set_program_priority>
f0117370:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0117373:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117376:	83 ec 08             	sub    $0x8,%esp
f0117379:	6a 03                	push   $0x3
f011737b:	50                   	push   %eax
f011737c:	e8 2e 4b ff ff       	call   f010beaf <set_program_priority>
f0117381:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117384:	e8 b7 d4 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0117389:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f011738c:	74 14                	je     f01173a2 <test_priority_normal_and_higher+0x2f5>
f011738e:	83 ec 04             	sub    $0x4,%esp
f0117391:	68 94 bb 12 f0       	push   $0xf012bb94
f0117396:	6a 48                	push   $0x48
f0117398:	68 11 bb 12 f0       	push   $0xf012bb11
f011739d:	e8 78 8f fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01173a2:	e8 62 66 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01173a7:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01173aa:	74 14                	je     f01173c0 <test_priority_normal_and_higher+0x313>
f01173ac:	83 ec 04             	sub    $0x4,%esp
f01173af:	68 94 bb 12 f0       	push   $0xf012bb94
f01173b4:	6a 49                	push   $0x49
f01173b6:	68 11 bb 12 f0       	push   $0xf012bb11
f01173bb:	e8 5a 8f fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01173c0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01173c3:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01173c9:	83 f8 14             	cmp    $0x14,%eax
f01173cc:	75 1c                	jne    f01173ea <test_priority_normal_and_higher+0x33d>
f01173ce:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01173d1:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01173d7:	83 f8 0f             	cmp    $0xf,%eax
f01173da:	75 0e                	jne    f01173ea <test_priority_normal_and_higher+0x33d>
f01173dc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01173df:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01173e5:	83 f8 0a             	cmp    $0xa,%eax
f01173e8:	74 14                	je     f01173fe <test_priority_normal_and_higher+0x351>
			panic("The programs' working set size should not change after setting priority to normal\n");
f01173ea:	83 ec 04             	sub    $0x4,%esp
f01173ed:	68 c0 bb 12 f0       	push   $0xf012bbc0
f01173f2:	6a 4c                	push   $0x4c
f01173f4:	68 11 bb 12 f0       	push   $0xf012bb11
f01173f9:	e8 1c 8f fe ff       	call   f010031a <_panic>

		freeFrames = sys_calculate_free_frames();
f01173fe:	e8 06 66 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0117403:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117406:	e8 35 d4 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011740b:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f011740e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117411:	83 ec 08             	sub    $0x8,%esp
f0117414:	6a 04                	push   $0x4
f0117416:	50                   	push   %eax
f0117417:	e8 93 4a ff ff       	call   f010beaf <set_program_priority>
f011741c:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f011741f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117422:	83 ec 08             	sub    $0x8,%esp
f0117425:	6a 04                	push   $0x4
f0117427:	50                   	push   %eax
f0117428:	e8 82 4a ff ff       	call   f010beaf <set_program_priority>
f011742d:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0117430:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117433:	83 ec 08             	sub    $0x8,%esp
f0117436:	6a 04                	push   $0x4
f0117438:	50                   	push   %eax
f0117439:	e8 71 4a ff ff       	call   f010beaf <set_program_priority>
f011743e:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117441:	e8 fa d3 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0117446:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117449:	74 14                	je     f011745f <test_priority_normal_and_higher+0x3b2>
f011744b:	83 ec 04             	sub    $0x4,%esp
f011744e:	68 94 bb 12 f0       	push   $0xf012bb94
f0117453:	6a 56                	push   $0x56
f0117455:	68 11 bb 12 f0       	push   $0xf012bb11
f011745a:	e8 bb 8e fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f011745f:	e8 a5 65 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0117464:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117467:	74 14                	je     f011747d <test_priority_normal_and_higher+0x3d0>
f0117469:	83 ec 04             	sub    $0x4,%esp
f011746c:	68 14 bc 12 f0       	push   $0xf012bc14
f0117471:	6a 57                	push   $0x57
f0117473:	68 11 bb 12 f0       	push   $0xf012bb11
f0117478:	e8 9d 8e fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f011747d:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117480:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0117486:	83 f8 14             	cmp    $0x14,%eax
f0117489:	75 1c                	jne    f01174a7 <test_priority_normal_and_higher+0x3fa>
f011748b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011748e:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0117494:	83 f8 0f             	cmp    $0xf,%eax
f0117497:	75 0e                	jne    f01174a7 <test_priority_normal_and_higher+0x3fa>
f0117499:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011749c:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01174a2:	83 f8 14             	cmp    $0x14,%eax
f01174a5:	74 14                	je     f01174bb <test_priority_normal_and_higher+0x40e>
			panic("The programs' working set size should be doubled only if it is full\n");
f01174a7:	83 ec 04             	sub    $0x4,%esp
f01174aa:	68 44 bc 12 f0       	push   $0xf012bc44
f01174af:	6a 5a                	push   $0x5a
f01174b1:	68 11 bb 12 f0       	push   $0xf012bb11
f01174b6:	e8 5f 8e fe ff       	call   f010031a <_panic>

		freeFrames = sys_calculate_free_frames();
f01174bb:	e8 49 65 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01174c0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01174c3:	e8 78 d3 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01174c8:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f01174cb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01174ce:	83 ec 08             	sub    $0x8,%esp
f01174d1:	6a 04                	push   $0x4
f01174d3:	50                   	push   %eax
f01174d4:	e8 d6 49 ff ff       	call   f010beaf <set_program_priority>
f01174d9:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01174dc:	e8 5f d3 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01174e1:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01174e4:	74 14                	je     f01174fa <test_priority_normal_and_higher+0x44d>
f01174e6:	83 ec 04             	sub    $0x4,%esp
f01174e9:	68 94 bb 12 f0       	push   $0xf012bb94
f01174ee:	6a 62                	push   $0x62
f01174f0:	68 11 bb 12 f0       	push   $0xf012bb11
f01174f5:	e8 20 8e fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01174fa:	e8 0a 65 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01174ff:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117502:	74 14                	je     f0117518 <test_priority_normal_and_higher+0x46b>
f0117504:	83 ec 04             	sub    $0x4,%esp
f0117507:	68 94 bb 12 f0       	push   $0xf012bb94
f011750c:	6a 63                	push   $0x63
f011750e:	68 11 bb 12 f0       	push   $0xf012bb11
f0117513:	e8 02 8e fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0117518:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011751b:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0117521:	83 f8 14             	cmp    $0x14,%eax
f0117524:	75 1c                	jne    f0117542 <test_priority_normal_and_higher+0x495>
f0117526:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117529:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f011752f:	83 f8 0f             	cmp    $0xf,%eax
f0117532:	75 0e                	jne    f0117542 <test_priority_normal_and_higher+0x495>
f0117534:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117537:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f011753d:	83 f8 14             	cmp    $0x14,%eax
f0117540:	74 14                	je     f0117556 <test_priority_normal_and_higher+0x4a9>
			panic("The programs' working set size should be doubled only once\n");
f0117542:	83 ec 04             	sub    $0x4,%esp
f0117545:	68 8c bc 12 f0       	push   $0xf012bc8c
f011754a:	6a 66                	push   $0x66
f011754c:	68 11 bb 12 f0       	push   $0xf012bb11
f0117551:	e8 c4 8d fe ff       	call   f010031a <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0117556:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f011755d:	eb 1c                	jmp    f011757b <test_priority_normal_and_higher+0x4ce>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f011755f:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0117562:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0117565:	89 d0                	mov    %edx,%eax
f0117567:	01 c0                	add    %eax,%eax
f0117569:	01 d0                	add    %edx,%eax
f011756b:	c1 e0 03             	shl    $0x3,%eax
f011756e:	01 c8                	add    %ecx,%eax
f0117570:	05 8c 00 00 00       	add    $0x8c,%eax
f0117575:	c6 00 00             	movb   $0x0,(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0117578:	ff 45 d8             	incl   -0x28(%ebp)
f011757b:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f011757f:	7e de                	jle    f011755f <test_priority_normal_and_higher+0x4b2>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117581:	e8 83 64 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0117586:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117589:	e8 b2 d2 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011758e:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0117591:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117594:	83 ec 08             	sub    $0x8,%esp
f0117597:	6a 04                	push   $0x4
f0117599:	50                   	push   %eax
f011759a:	e8 10 49 ff ff       	call   f010beaf <set_program_priority>
f011759f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01175a2:	e8 99 d2 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01175a7:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01175aa:	74 14                	je     f01175c0 <test_priority_normal_and_higher+0x513>
f01175ac:	83 ec 04             	sub    $0x4,%esp
f01175af:	68 94 bb 12 f0       	push   $0xf012bb94
f01175b4:	6a 73                	push   $0x73
f01175b6:	68 11 bb 12 f0       	push   $0xf012bb11
f01175bb:	e8 5a 8d fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f01175c0:	e8 44 64 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01175c5:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01175c8:	74 14                	je     f01175de <test_priority_normal_and_higher+0x531>
f01175ca:	83 ec 04             	sub    $0x4,%esp
f01175cd:	68 94 bb 12 f0       	push   $0xf012bb94
f01175d2:	6a 74                	push   $0x74
f01175d4:	68 11 bb 12 f0       	push   $0xf012bb11
f01175d9:	e8 3c 8d fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f01175de:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01175e1:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01175e7:	83 f8 14             	cmp    $0x14,%eax
f01175ea:	75 1c                	jne    f0117608 <test_priority_normal_and_higher+0x55b>
f01175ec:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01175ef:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01175f5:	83 f8 0f             	cmp    $0xf,%eax
f01175f8:	75 0e                	jne    f0117608 <test_priority_normal_and_higher+0x55b>
f01175fa:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01175fd:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0117603:	83 f8 14             	cmp    $0x14,%eax
f0117606:	74 14                	je     f011761c <test_priority_normal_and_higher+0x56f>
			panic("The programs' working set size should be doubled only once\n");
f0117608:	83 ec 04             	sub    $0x4,%esp
f011760b:	68 8c bc 12 f0       	push   $0xf012bc8c
f0117610:	6a 77                	push   $0x77
f0117612:	68 11 bb 12 f0       	push   $0xf012bb11
f0117617:	e8 fe 8c fe ff       	call   f010031a <_panic>

		for(int i = 10; i < 15; i++)
f011761c:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0117623:	eb 1c                	jmp    f0117641 <test_priority_normal_and_higher+0x594>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0117625:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0117628:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011762b:	89 d0                	mov    %edx,%eax
f011762d:	01 c0                	add    %eax,%eax
f011762f:	01 d0                	add    %edx,%eax
f0117631:	c1 e0 03             	shl    $0x3,%eax
f0117634:	01 c8                	add    %ecx,%eax
f0117636:	05 8c 00 00 00       	add    $0x8c,%eax
f011763b:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f011763e:	ff 45 d4             	incl   -0x2c(%ebp)
f0117641:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0117645:	7e de                	jle    f0117625 <test_priority_normal_and_higher+0x578>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117647:	e8 bd 63 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011764c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011764f:	e8 ec d1 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0117654:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117657:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011765a:	83 ec 08             	sub    $0x8,%esp
f011765d:	6a 05                	push   $0x5
f011765f:	50                   	push   %eax
f0117660:	e8 4a 48 ff ff       	call   f010beaf <set_program_priority>
f0117665:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f0117668:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011766b:	83 ec 08             	sub    $0x8,%esp
f011766e:	6a 05                	push   $0x5
f0117670:	50                   	push   %eax
f0117671:	e8 39 48 ff ff       	call   f010beaf <set_program_priority>
f0117676:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117679:	e8 c2 d1 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011767e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117681:	74 17                	je     f011769a <test_priority_normal_and_higher+0x5ed>
f0117683:	83 ec 04             	sub    $0x4,%esp
f0117686:	68 94 bb 12 f0       	push   $0xf012bb94
f011768b:	68 82 00 00 00       	push   $0x82
f0117690:	68 11 bb 12 f0       	push   $0xf012bb11
f0117695:	e8 80 8c fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011769a:	e8 6a 63 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011769f:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f01176a2:	74 17                	je     f01176bb <test_priority_normal_and_higher+0x60e>
f01176a4:	83 ec 04             	sub    $0x4,%esp
f01176a7:	68 94 bb 12 f0       	push   $0xf012bb94
f01176ac:	68 83 00 00 00       	push   $0x83
f01176b1:	68 11 bb 12 f0       	push   $0xf012bb11
f01176b6:	e8 5f 8c fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f01176bb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01176be:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01176c4:	83 f8 14             	cmp    $0x14,%eax
f01176c7:	75 1c                	jne    f01176e5 <test_priority_normal_and_higher+0x638>
f01176c9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01176cc:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01176d2:	83 f8 1e             	cmp    $0x1e,%eax
f01176d5:	75 0e                	jne    f01176e5 <test_priority_normal_and_higher+0x638>
f01176d7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01176da:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01176e0:	83 f8 28             	cmp    $0x28,%eax
f01176e3:	74 17                	je     f01176fc <test_priority_normal_and_higher+0x64f>
			panic("The programs' working set size should be doubled if full\n");
f01176e5:	83 ec 04             	sub    $0x4,%esp
f01176e8:	68 c8 bc 12 f0       	push   $0xf012bcc8
f01176ed:	68 86 00 00 00       	push   $0x86
f01176f2:	68 11 bb 12 f0       	push   $0xf012bb11
f01176f7:	e8 1e 8c fe ff       	call   f010031a <_panic>

		for(int i = 20; i < 40; i++)
f01176fc:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f0117703:	eb 1c                	jmp    f0117721 <test_priority_normal_and_higher+0x674>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0117705:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0117708:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011770b:	89 d0                	mov    %edx,%eax
f011770d:	01 c0                	add    %eax,%eax
f011770f:	01 d0                	add    %edx,%eax
f0117711:	c1 e0 03             	shl    $0x3,%eax
f0117714:	01 c8                	add    %ecx,%eax
f0117716:	05 8c 00 00 00       	add    $0x8c,%eax
f011771b:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f011771e:	ff 45 d0             	incl   -0x30(%ebp)
f0117721:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f0117725:	7e de                	jle    f0117705 <test_priority_normal_and_higher+0x658>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117727:	e8 dd 62 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011772c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011772f:	e8 0c d1 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0117734:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117737:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011773a:	83 ec 08             	sub    $0x8,%esp
f011773d:	6a 05                	push   $0x5
f011773f:	50                   	push   %eax
f0117740:	e8 6a 47 ff ff       	call   f010beaf <set_program_priority>
f0117745:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0117748:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011774b:	83 ec 08             	sub    $0x8,%esp
f011774e:	6a 04                	push   $0x4
f0117750:	50                   	push   %eax
f0117751:	e8 59 47 ff ff       	call   f010beaf <set_program_priority>
f0117756:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117759:	e8 e2 d0 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011775e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117761:	74 17                	je     f011777a <test_priority_normal_and_higher+0x6cd>
f0117763:	83 ec 04             	sub    $0x4,%esp
f0117766:	68 94 bb 12 f0       	push   $0xf012bb94
f011776b:	68 91 00 00 00       	push   $0x91
f0117770:	68 11 bb 12 f0       	push   $0xf012bb11
f0117775:	e8 a0 8b fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011777a:	e8 8a 62 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011777f:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117782:	74 17                	je     f011779b <test_priority_normal_and_higher+0x6ee>
f0117784:	83 ec 04             	sub    $0x4,%esp
f0117787:	68 94 bb 12 f0       	push   $0xf012bb94
f011778c:	68 92 00 00 00       	push   $0x92
f0117791:	68 11 bb 12 f0       	push   $0xf012bb11
f0117796:	e8 7f 8b fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011779b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011779e:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01177a4:	83 f8 14             	cmp    $0x14,%eax
f01177a7:	75 1c                	jne    f01177c5 <test_priority_normal_and_higher+0x718>
f01177a9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01177ac:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01177b2:	83 f8 1e             	cmp    $0x1e,%eax
f01177b5:	75 0e                	jne    f01177c5 <test_priority_normal_and_higher+0x718>
f01177b7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01177ba:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01177c0:	83 f8 28             	cmp    $0x28,%eax
f01177c3:	74 17                	je     f01177dc <test_priority_normal_and_higher+0x72f>
			panic("The programs' working set size should be doubled if full\n");
f01177c5:	83 ec 04             	sub    $0x4,%esp
f01177c8:	68 c8 bc 12 f0       	push   $0xf012bcc8
f01177cd:	68 95 00 00 00       	push   $0x95
f01177d2:	68 11 bb 12 f0       	push   $0xf012bb11
f01177d7:	e8 3e 8b fe ff       	call   f010031a <_panic>

		for(int i = 15; i < 30; i++)
f01177dc:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f01177e3:	eb 1c                	jmp    f0117801 <test_priority_normal_and_higher+0x754>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f01177e5:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f01177e8:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01177eb:	89 d0                	mov    %edx,%eax
f01177ed:	01 c0                	add    %eax,%eax
f01177ef:	01 d0                	add    %edx,%eax
f01177f1:	c1 e0 03             	shl    $0x3,%eax
f01177f4:	01 c8                	add    %ecx,%eax
f01177f6:	05 8c 00 00 00       	add    $0x8c,%eax
f01177fb:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f01177fe:	ff 45 cc             	incl   -0x34(%ebp)
f0117801:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f0117805:	7e de                	jle    f01177e5 <test_priority_normal_and_higher+0x738>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0117807:	e8 fd 61 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011780c:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011780f:	e8 2c d0 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0117814:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0117817:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011781a:	83 ec 08             	sub    $0x8,%esp
f011781d:	6a 05                	push   $0x5
f011781f:	50                   	push   %eax
f0117820:	e8 8a 46 ff ff       	call   f010beaf <set_program_priority>
f0117825:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0117828:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011782b:	83 ec 08             	sub    $0x8,%esp
f011782e:	6a 04                	push   $0x4
f0117830:	50                   	push   %eax
f0117831:	e8 79 46 ff ff       	call   f010beaf <set_program_priority>
f0117836:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117839:	e8 02 d0 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011783e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0117841:	74 17                	je     f011785a <test_priority_normal_and_higher+0x7ad>
f0117843:	83 ec 04             	sub    $0x4,%esp
f0117846:	68 94 bb 12 f0       	push   $0xf012bb94
f011784b:	68 a0 00 00 00       	push   $0xa0
f0117850:	68 11 bb 12 f0       	push   $0xf012bb11
f0117855:	e8 c0 8a fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011785a:	e8 aa 61 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011785f:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0117862:	74 17                	je     f011787b <test_priority_normal_and_higher+0x7ce>
f0117864:	83 ec 04             	sub    $0x4,%esp
f0117867:	68 94 bb 12 f0       	push   $0xf012bb94
f011786c:	68 a1 00 00 00       	push   $0xa1
f0117871:	68 11 bb 12 f0       	push   $0xf012bb11
f0117876:	e8 9f 8a fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f011787b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011787e:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0117884:	83 f8 14             	cmp    $0x14,%eax
f0117887:	75 1c                	jne    f01178a5 <test_priority_normal_and_higher+0x7f8>
f0117889:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011788c:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0117892:	83 f8 3c             	cmp    $0x3c,%eax
f0117895:	75 0e                	jne    f01178a5 <test_priority_normal_and_higher+0x7f8>
f0117897:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011789a:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01178a0:	83 f8 28             	cmp    $0x28,%eax
f01178a3:	74 17                	je     f01178bc <test_priority_normal_and_higher+0x80f>
			panic("The programs' working set size should be doubled if full\n");
f01178a5:	83 ec 04             	sub    $0x4,%esp
f01178a8:	68 c8 bc 12 f0       	push   $0xf012bcc8
f01178ad:	68 a4 00 00 00       	push   $0xa4
f01178b2:	68 11 bb 12 f0       	push   $0xf012bb11
f01178b7:	e8 5e 8a fe ff       	call   f010031a <_panic>

		for(int i = 15; i < 60; i++)
f01178bc:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f01178c3:	eb 1c                	jmp    f01178e1 <test_priority_normal_and_higher+0x834>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f01178c5:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f01178c8:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01178cb:	89 d0                	mov    %edx,%eax
f01178cd:	01 c0                	add    %eax,%eax
f01178cf:	01 d0                	add    %edx,%eax
f01178d1:	c1 e0 03             	shl    $0x3,%eax
f01178d4:	01 c8                	add    %ecx,%eax
f01178d6:	05 8c 00 00 00       	add    $0x8c,%eax
f01178db:	c6 00 01             	movb   $0x1,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f01178de:	ff 45 c8             	incl   -0x38(%ebp)
f01178e1:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f01178e5:	7e de                	jle    f01178c5 <test_priority_normal_and_higher+0x818>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f01178e7:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f01178ee:	eb 1c                	jmp    f011790c <test_priority_normal_and_higher+0x85f>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f01178f0:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01178f3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01178f6:	89 d0                	mov    %edx,%eax
f01178f8:	01 c0                	add    %eax,%eax
f01178fa:	01 d0                	add    %edx,%eax
f01178fc:	c1 e0 03             	shl    $0x3,%eax
f01178ff:	01 c8                	add    %ecx,%eax
f0117901:	05 8c 00 00 00       	add    $0x8c,%eax
f0117906:	c6 00 01             	movb   $0x1,(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0117909:	ff 45 c4             	incl   -0x3c(%ebp)
f011790c:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f0117910:	7e de                	jle    f01178f0 <test_priority_normal_and_higher+0x843>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0117912:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0117919:	eb 7d                	jmp    f0117998 <test_priority_normal_and_higher+0x8eb>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011791b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011791e:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0117925:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0117928:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011792b:	89 d0                	mov    %edx,%eax
f011792d:	01 c0                	add    %eax,%eax
f011792f:	01 d0                	add    %edx,%eax
f0117931:	c1 e0 03             	shl    $0x3,%eax
f0117934:	01 d8                	add    %ebx,%eax
f0117936:	05 88 00 00 00       	add    $0x88,%eax
f011793b:	8b 00                	mov    (%eax),%eax
f011793d:	39 c1                	cmp    %eax,%ecx
f011793f:	74 17                	je     f0117958 <test_priority_normal_and_higher+0x8ab>
				panic("Working set should be moved properly to the new one");
f0117941:	83 ec 04             	sub    $0x4,%esp
f0117944:	68 04 bd 12 f0       	push   $0xf012bd04
f0117949:	68 b2 00 00 00       	push   $0xb2
f011794e:	68 11 bb 12 f0       	push   $0xf012bb11
f0117953:	e8 c2 89 fe ff       	call   f010031a <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0117958:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011795b:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0117962:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0117965:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117968:	89 d0                	mov    %edx,%eax
f011796a:	01 c0                	add    %eax,%eax
f011796c:	01 d0                	add    %edx,%eax
f011796e:	c1 e0 03             	shl    $0x3,%eax
f0117971:	01 d8                	add    %ebx,%eax
f0117973:	05 90 00 00 00       	add    $0x90,%eax
f0117978:	8b 00                	mov    (%eax),%eax
f011797a:	39 c1                	cmp    %eax,%ecx
f011797c:	74 17                	je     f0117995 <test_priority_normal_and_higher+0x8e8>
				panic("Working set should be moved properly to the new one");
f011797e:	83 ec 04             	sub    $0x4,%esp
f0117981:	68 04 bd 12 f0       	push   $0xf012bd04
f0117986:	68 b5 00 00 00       	push   $0xb5
f011798b:	68 11 bb 12 f0       	push   $0xf012bb11
f0117990:	e8 85 89 fe ff       	call   f010031a <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0117995:	ff 45 c0             	incl   -0x40(%ebp)
f0117998:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f011799c:	0f 8e 79 ff ff ff    	jle    f011791b <test_priority_normal_and_higher+0x86e>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f01179a2:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f01179a9:	eb 7d                	jmp    f0117a28 <test_priority_normal_and_higher+0x97b>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01179ab:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01179ae:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f01179b5:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01179b8:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01179bb:	89 d0                	mov    %edx,%eax
f01179bd:	01 c0                	add    %eax,%eax
f01179bf:	01 d0                	add    %edx,%eax
f01179c1:	c1 e0 03             	shl    $0x3,%eax
f01179c4:	01 d8                	add    %ebx,%eax
f01179c6:	05 88 00 00 00       	add    $0x88,%eax
f01179cb:	8b 00                	mov    (%eax),%eax
f01179cd:	39 c1                	cmp    %eax,%ecx
f01179cf:	74 17                	je     f01179e8 <test_priority_normal_and_higher+0x93b>
				panic("Working set should be moved properly to the new one");
f01179d1:	83 ec 04             	sub    $0x4,%esp
f01179d4:	68 04 bd 12 f0       	push   $0xf012bd04
f01179d9:	68 bb 00 00 00       	push   $0xbb
f01179de:	68 11 bb 12 f0       	push   $0xf012bb11
f01179e3:	e8 32 89 fe ff       	call   f010031a <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f01179e8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01179eb:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f01179f2:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01179f5:	8b 55 bc             	mov    -0x44(%ebp),%edx
f01179f8:	89 d0                	mov    %edx,%eax
f01179fa:	01 c0                	add    %eax,%eax
f01179fc:	01 d0                	add    %edx,%eax
f01179fe:	c1 e0 03             	shl    $0x3,%eax
f0117a01:	01 d8                	add    %ebx,%eax
f0117a03:	05 90 00 00 00       	add    $0x90,%eax
f0117a08:	8b 00                	mov    (%eax),%eax
f0117a0a:	39 c1                	cmp    %eax,%ecx
f0117a0c:	74 17                	je     f0117a25 <test_priority_normal_and_higher+0x978>
				panic("Working set should be moved properly to the new one");
f0117a0e:	83 ec 04             	sub    $0x4,%esp
f0117a11:	68 04 bd 12 f0       	push   $0xf012bd04
f0117a16:	68 be 00 00 00       	push   $0xbe
f0117a1b:	68 11 bb 12 f0       	push   $0xf012bb11
f0117a20:	e8 f5 88 fe ff       	call   f010031a <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0117a25:	ff 45 bc             	incl   -0x44(%ebp)
f0117a28:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f0117a2c:	0f 8e 79 ff ff ff    	jle    f01179ab <test_priority_normal_and_higher+0x8fe>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117a32:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0117a39:	eb 7d                	jmp    f0117ab8 <test_priority_normal_and_higher+0xa0b>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0117a3b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117a3e:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f0117a45:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f0117a48:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0117a4b:	89 d0                	mov    %edx,%eax
f0117a4d:	01 c0                	add    %eax,%eax
f0117a4f:	01 d0                	add    %edx,%eax
f0117a51:	c1 e0 03             	shl    $0x3,%eax
f0117a54:	01 d8                	add    %ebx,%eax
f0117a56:	05 88 00 00 00       	add    $0x88,%eax
f0117a5b:	8b 00                	mov    (%eax),%eax
f0117a5d:	39 c1                	cmp    %eax,%ecx
f0117a5f:	74 17                	je     f0117a78 <test_priority_normal_and_higher+0x9cb>
				panic("Working set should be moved properly to the new one");
f0117a61:	83 ec 04             	sub    $0x4,%esp
f0117a64:	68 04 bd 12 f0       	push   $0xf012bd04
f0117a69:	68 c4 00 00 00       	push   $0xc4
f0117a6e:	68 11 bb 12 f0       	push   $0xf012bb11
f0117a73:	e8 a2 88 fe ff       	call   f010031a <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0117a78:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117a7b:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f0117a82:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f0117a85:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0117a88:	89 d0                	mov    %edx,%eax
f0117a8a:	01 c0                	add    %eax,%eax
f0117a8c:	01 d0                	add    %edx,%eax
f0117a8e:	c1 e0 03             	shl    $0x3,%eax
f0117a91:	01 d8                	add    %ebx,%eax
f0117a93:	05 90 00 00 00       	add    $0x90,%eax
f0117a98:	8b 00                	mov    (%eax),%eax
f0117a9a:	39 c1                	cmp    %eax,%ecx
f0117a9c:	74 17                	je     f0117ab5 <test_priority_normal_and_higher+0xa08>
				panic("Working set should be moved properly to the new one");
f0117a9e:	83 ec 04             	sub    $0x4,%esp
f0117aa1:	68 04 bd 12 f0       	push   $0xf012bd04
f0117aa6:	68 c7 00 00 00       	push   $0xc7
f0117aab:	68 11 bb 12 f0       	push   $0xf012bb11
f0117ab0:	e8 65 88 fe ff       	call   f010031a <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0117ab5:	ff 45 b8             	incl   -0x48(%ebp)
f0117ab8:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f0117abc:	0f 8e 79 ff ff ff    	jle    f0117a3b <test_priority_normal_and_higher+0x98e>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0117ac2:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0117ac9:	75 6e 61 
f0117acc:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0117ad3:	6c 00 00 
f0117ad6:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f0117adc:	b9 17 00 00 00       	mov    $0x17,%ecx
f0117ae1:	b8 00 00 00 00       	mov    $0x0,%eax
f0117ae6:	89 d7                	mov    %edx,%edi
f0117ae8:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0117aea:	83 ec 0c             	sub    $0xc,%esp
f0117aed:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0117af3:	50                   	push   %eax
f0117af4:	e8 e3 a3 fe ff       	call   f0101edc <execute_command>
f0117af9:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
#endif
}
f0117afc:	eb 10                	jmp    f0117b0e <test_priority_normal_and_higher+0xa61>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f0117afe:	83 ec 0c             	sub    $0xc,%esp
f0117b01:	68 38 bd 12 f0       	push   $0xf012bd38
f0117b06:	e8 61 94 fe ff       	call   f0100f6c <cprintf>
f0117b0b:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f0117b0e:	90                   	nop
f0117b0f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0117b12:	5b                   	pop    %ebx
f0117b13:	5e                   	pop    %esi
f0117b14:	5f                   	pop    %edi
f0117b15:	5d                   	pop    %ebp
f0117b16:	c3                   	ret    

f0117b17 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f0117b17:	55                   	push   %ebp
f0117b18:	89 e5                	mov    %esp,%ebp
f0117b1a:	57                   	push   %edi
f0117b1b:	56                   	push   %esi
f0117b1c:	53                   	push   %ebx
f0117b1d:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
#if USE_KHEAP
	panic("not handled yet");
#else
	if(firstTime)
f0117b23:	a0 94 9d 17 f0       	mov    0xf0179d94,%al
f0117b28:	84 c0                	test   %al,%al
f0117b2a:	0f 84 1b 0a 00 00    	je     f011854b <test_priority_normal_and_lower+0xa34>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f0117b30:	c6 05 94 9d 17 f0 00 	movb   $0x0,0xf0179d94
		char command[100] = "load fos_add 20";
f0117b37:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0117b3d:	bb 74 bd 12 f0       	mov    $0xf012bd74,%ebx
f0117b42:	ba 04 00 00 00       	mov    $0x4,%edx
f0117b47:	89 c7                	mov    %eax,%edi
f0117b49:	89 de                	mov    %ebx,%esi
f0117b4b:	89 d1                	mov    %edx,%ecx
f0117b4d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0117b4f:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f0117b55:	b9 15 00 00 00       	mov    $0x15,%ecx
f0117b5a:	b8 00 00 00 00       	mov    $0x0,%eax
f0117b5f:	89 d7                	mov    %edx,%edi
f0117b61:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f0117b63:	83 ec 0c             	sub    $0xc,%esp
f0117b66:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f0117b6c:	50                   	push   %eax
f0117b6d:	e8 6a a3 fe ff       	call   f0101edc <execute_command>
f0117b72:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f0117b75:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0117b7b:	bb 7c c0 12 f0       	mov    $0xf012c07c,%ebx
f0117b80:	ba 0d 00 00 00       	mov    $0xd,%edx
f0117b85:	89 c7                	mov    %eax,%edi
f0117b87:	89 de                	mov    %ebx,%esi
f0117b89:	89 d1                	mov    %edx,%ecx
f0117b8b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117b8d:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f0117b93:	b9 57 00 00 00       	mov    $0x57,%ecx
f0117b98:	b0 00                	mov    $0x0,%al
f0117b9a:	89 d7                	mov    %edx,%edi
f0117b9c:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0117b9e:	83 ec 0c             	sub    $0xc,%esp
f0117ba1:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f0117ba7:	50                   	push   %eax
f0117ba8:	e8 2f a3 fe ff       	call   f0101edc <execute_command>
f0117bad:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f0117bb0:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117bb6:	bb e0 c0 12 f0       	mov    $0xf012c0e0,%ebx
f0117bbb:	ba 17 00 00 00       	mov    $0x17,%edx
f0117bc0:	89 c7                	mov    %eax,%edi
f0117bc2:	89 de                	mov    %ebx,%esi
f0117bc4:	89 d1                	mov    %edx,%ecx
f0117bc6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0117bc8:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f0117bce:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0117bd3:	b0 00                	mov    $0x0,%al
f0117bd5:	89 d7                	mov    %edx,%edi
f0117bd7:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0117bd9:	83 ec 0c             	sub    $0xc,%esp
f0117bdc:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0117be2:	50                   	push   %eax
f0117be3:	e8 f4 a2 fe ff       	call   f0101edc <execute_command>
f0117be8:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0117beb:	83 ec 04             	sub    $0x4,%esp
f0117bee:	6a 00                	push   $0x0
f0117bf0:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0117bf3:	50                   	push   %eax
f0117bf4:	68 00 10 00 00       	push   $0x1000
f0117bf9:	e8 c2 2b ff ff       	call   f010a7c0 <envid2env>
f0117bfe:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0117c01:	83 ec 04             	sub    $0x4,%esp
f0117c04:	6a 00                	push   $0x0
f0117c06:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0117c09:	50                   	push   %eax
f0117c0a:	68 01 10 00 00       	push   $0x1001
f0117c0f:	e8 ac 2b ff ff       	call   f010a7c0 <envid2env>
f0117c14:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0117c17:	83 ec 04             	sub    $0x4,%esp
f0117c1a:	6a 00                	push   $0x0
f0117c1c:	8d 45 b0             	lea    -0x50(%ebp),%eax
f0117c1f:	50                   	push   %eax
f0117c20:	68 02 10 00 00       	push   $0x1002
f0117c25:	e8 96 2b ff ff       	call   f010a7c0 <envid2env>
f0117c2a:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0117c2d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117c30:	85 c0                	test   %eax,%eax
f0117c32:	74 0e                	je     f0117c42 <test_priority_normal_and_lower+0x12b>
f0117c34:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117c37:	85 c0                	test   %eax,%eax
f0117c39:	74 07                	je     f0117c42 <test_priority_normal_and_lower+0x12b>
f0117c3b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117c3e:	85 c0                	test   %eax,%eax
f0117c40:	75 17                	jne    f0117c59 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f0117c42:	83 ec 04             	sub    $0x4,%esp
f0117c45:	68 f8 ba 12 f0       	push   $0xf012baf8
f0117c4a:	68 f2 00 00 00       	push   $0xf2
f0117c4f:	68 11 bb 12 f0       	push   $0xf012bb11
f0117c54:	e8 c1 86 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117c59:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117c5c:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0117c62:	83 f8 14             	cmp    $0x14,%eax
f0117c65:	75 1c                	jne    f0117c83 <test_priority_normal_and_lower+0x16c>
f0117c67:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117c6a:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0117c70:	83 f8 1e             	cmp    $0x1e,%eax
f0117c73:	75 0e                	jne    f0117c83 <test_priority_normal_and_lower+0x16c>
f0117c75:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117c78:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0117c7e:	83 f8 28             	cmp    $0x28,%eax
f0117c81:	74 17                	je     f0117c9a <test_priority_normal_and_lower+0x183>
			panic("The programs should be initially loaded with the given working set size\n");
f0117c83:	83 ec 04             	sub    $0x4,%esp
f0117c86:	68 a0 be 12 f0       	push   $0xf012bea0
f0117c8b:	68 f5 00 00 00       	push   $0xf5
f0117c90:	68 11 bb 12 f0       	push   $0xf012bb11
f0117c95:	e8 80 86 fe ff       	call   f010031a <_panic>

		for(int i = 0; i < 20; i++)
f0117c9a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0117ca1:	eb 47                	jmp    f0117cea <test_priority_normal_and_lower+0x1d3>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f0117ca3:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f0117ca6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117ca9:	89 d0                	mov    %edx,%eax
f0117cab:	01 c0                	add    %eax,%eax
f0117cad:	01 d0                	add    %edx,%eax
f0117caf:	c1 e0 03             	shl    $0x3,%eax
f0117cb2:	01 c8                	add    %ecx,%eax
f0117cb4:	05 88 00 00 00       	add    $0x88,%eax
f0117cb9:	8b 10                	mov    (%eax),%edx
f0117cbb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117cbe:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0117cc5:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f0117cc8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0117ccb:	89 d0                	mov    %edx,%eax
f0117ccd:	01 c0                	add    %eax,%eax
f0117ccf:	01 d0                	add    %edx,%eax
f0117cd1:	c1 e0 03             	shl    $0x3,%eax
f0117cd4:	01 c8                	add    %ecx,%eax
f0117cd6:	05 90 00 00 00       	add    $0x90,%eax
f0117cdb:	8b 10                	mov    (%eax),%edx
f0117cdd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117ce0:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0117ce7:	ff 45 e4             	incl   -0x1c(%ebp)
f0117cea:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0117cee:	7e b3                	jle    f0117ca3 <test_priority_normal_and_lower+0x18c>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0117cf0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0117cf7:	eb 47                	jmp    f0117d40 <test_priority_normal_and_lower+0x229>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f0117cf9:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0117cfc:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117cff:	89 d0                	mov    %edx,%eax
f0117d01:	01 c0                	add    %eax,%eax
f0117d03:	01 d0                	add    %edx,%eax
f0117d05:	c1 e0 03             	shl    $0x3,%eax
f0117d08:	01 c8                	add    %ecx,%eax
f0117d0a:	05 88 00 00 00       	add    $0x88,%eax
f0117d0f:	8b 10                	mov    (%eax),%edx
f0117d11:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117d14:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f0117d1b:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f0117d1e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0117d21:	89 d0                	mov    %edx,%eax
f0117d23:	01 c0                	add    %eax,%eax
f0117d25:	01 d0                	add    %edx,%eax
f0117d27:	c1 e0 03             	shl    $0x3,%eax
f0117d2a:	01 c8                	add    %ecx,%eax
f0117d2c:	05 90 00 00 00       	add    $0x90,%eax
f0117d31:	8b 10                	mov    (%eax),%edx
f0117d33:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117d36:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0117d3d:	ff 45 e0             	incl   -0x20(%ebp)
f0117d40:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0117d44:	7e b3                	jle    f0117cf9 <test_priority_normal_and_lower+0x1e2>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117d46:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f0117d4d:	eb 47                	jmp    f0117d96 <test_priority_normal_and_lower+0x27f>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f0117d4f:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0117d52:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117d55:	89 d0                	mov    %edx,%eax
f0117d57:	01 c0                	add    %eax,%eax
f0117d59:	01 d0                	add    %edx,%eax
f0117d5b:	c1 e0 03             	shl    $0x3,%eax
f0117d5e:	01 c8                	add    %ecx,%eax
f0117d60:	05 88 00 00 00       	add    $0x88,%eax
f0117d65:	8b 10                	mov    (%eax),%edx
f0117d67:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117d6a:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f0117d71:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0117d74:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0117d77:	89 d0                	mov    %edx,%eax
f0117d79:	01 c0                	add    %eax,%eax
f0117d7b:	01 d0                	add    %edx,%eax
f0117d7d:	c1 e0 03             	shl    $0x3,%eax
f0117d80:	01 c8                	add    %ecx,%eax
f0117d82:	05 90 00 00 00       	add    $0x90,%eax
f0117d87:	8b 10                	mov    (%eax),%edx
f0117d89:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117d8c:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0117d93:	ff 45 dc             	incl   -0x24(%ebp)
f0117d96:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f0117d9a:	7e b3                	jle    f0117d4f <test_priority_normal_and_lower+0x238>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f0117d9c:	e8 68 5c ff ff       	call   f010da09 <sys_calculate_free_frames>
f0117da1:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0117da4:	e8 97 ca fe ff       	call   f0104840 <pf_calculate_free_frames>
f0117da9:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f0117dac:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117daf:	83 ec 08             	sub    $0x8,%esp
f0117db2:	6a 03                	push   $0x3
f0117db4:	50                   	push   %eax
f0117db5:	e8 f5 40 ff ff       	call   f010beaf <set_program_priority>
f0117dba:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0117dbd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117dc0:	83 ec 08             	sub    $0x8,%esp
f0117dc3:	6a 03                	push   $0x3
f0117dc5:	50                   	push   %eax
f0117dc6:	e8 e4 40 ff ff       	call   f010beaf <set_program_priority>
f0117dcb:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0117dce:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117dd1:	83 ec 08             	sub    $0x8,%esp
f0117dd4:	6a 03                	push   $0x3
f0117dd6:	50                   	push   %eax
f0117dd7:	e8 d3 40 ff ff       	call   f010beaf <set_program_priority>
f0117ddc:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117ddf:	e8 5c ca fe ff       	call   f0104840 <pf_calculate_free_frames>
f0117de4:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117de7:	74 17                	je     f0117e00 <test_priority_normal_and_lower+0x2e9>
f0117de9:	83 ec 04             	sub    $0x4,%esp
f0117dec:	68 94 bb 12 f0       	push   $0xf012bb94
f0117df1:	68 11 01 00 00       	push   $0x111
f0117df6:	68 11 bb 12 f0       	push   $0xf012bb11
f0117dfb:	e8 1a 85 fe ff       	call   f010031a <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0117e00:	e8 04 5c ff ff       	call   f010da09 <sys_calculate_free_frames>
f0117e05:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117e08:	74 17                	je     f0117e21 <test_priority_normal_and_lower+0x30a>
f0117e0a:	83 ec 04             	sub    $0x4,%esp
f0117e0d:	68 94 bb 12 f0       	push   $0xf012bb94
f0117e12:	68 12 01 00 00       	push   $0x112
f0117e17:	68 11 bb 12 f0       	push   $0xf012bb11
f0117e1c:	e8 f9 84 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0117e21:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117e24:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0117e2a:	83 f8 14             	cmp    $0x14,%eax
f0117e2d:	75 1c                	jne    f0117e4b <test_priority_normal_and_lower+0x334>
f0117e2f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117e32:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0117e38:	83 f8 1e             	cmp    $0x1e,%eax
f0117e3b:	75 0e                	jne    f0117e4b <test_priority_normal_and_lower+0x334>
f0117e3d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117e40:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0117e46:	83 f8 28             	cmp    $0x28,%eax
f0117e49:	74 17                	je     f0117e62 <test_priority_normal_and_lower+0x34b>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0117e4b:	83 ec 04             	sub    $0x4,%esp
f0117e4e:	68 c0 bb 12 f0       	push   $0xf012bbc0
f0117e53:	68 15 01 00 00       	push   $0x115
f0117e58:	68 11 bb 12 f0       	push   $0xf012bb11
f0117e5d:	e8 b8 84 fe ff       	call   f010031a <_panic>

		freeFrames = sys_calculate_free_frames();
f0117e62:	e8 a2 5b ff ff       	call   f010da09 <sys_calculate_free_frames>
f0117e67:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117e6a:	e8 d1 c9 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0117e6f:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0117e72:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117e75:	83 ec 08             	sub    $0x8,%esp
f0117e78:	6a 02                	push   $0x2
f0117e7a:	50                   	push   %eax
f0117e7b:	e8 2f 40 ff ff       	call   f010beaf <set_program_priority>
f0117e80:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0117e83:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117e86:	83 ec 08             	sub    $0x8,%esp
f0117e89:	6a 02                	push   $0x2
f0117e8b:	50                   	push   %eax
f0117e8c:	e8 1e 40 ff ff       	call   f010beaf <set_program_priority>
f0117e91:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0117e94:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117e97:	83 ec 08             	sub    $0x8,%esp
f0117e9a:	6a 02                	push   $0x2
f0117e9c:	50                   	push   %eax
f0117e9d:	e8 0d 40 ff ff       	call   f010beaf <set_program_priority>
f0117ea2:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117ea5:	e8 96 c9 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0117eaa:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117ead:	74 17                	je     f0117ec6 <test_priority_normal_and_lower+0x3af>
f0117eaf:	83 ec 04             	sub    $0x4,%esp
f0117eb2:	68 94 bb 12 f0       	push   $0xf012bb94
f0117eb7:	68 1f 01 00 00       	push   $0x11f
f0117ebc:	68 11 bb 12 f0       	push   $0xf012bb11
f0117ec1:	e8 54 84 fe ff       	call   f010031a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0117ec6:	e8 3e 5b ff ff       	call   f010da09 <sys_calculate_free_frames>
f0117ecb:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117ece:	74 21                	je     f0117ef1 <test_priority_normal_and_lower+0x3da>
f0117ed0:	e8 34 5b ff ff       	call   f010da09 <sys_calculate_free_frames>
f0117ed5:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117ed8:	29 c2                	sub    %eax,%edx
f0117eda:	89 d0                	mov    %edx,%eax
f0117edc:	50                   	push   %eax
f0117edd:	68 14 bc 12 f0       	push   $0xf012bc14
f0117ee2:	68 20 01 00 00       	push   $0x120
f0117ee7:	68 11 bb 12 f0       	push   $0xf012bb11
f0117eec:	e8 29 84 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0117ef1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117ef4:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0117efa:	83 f8 0a             	cmp    $0xa,%eax
f0117efd:	75 1c                	jne    f0117f1b <test_priority_normal_and_lower+0x404>
f0117eff:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117f02:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0117f08:	83 f8 0f             	cmp    $0xf,%eax
f0117f0b:	75 0e                	jne    f0117f1b <test_priority_normal_and_lower+0x404>
f0117f0d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117f10:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0117f16:	83 f8 14             	cmp    $0x14,%eax
f0117f19:	74 17                	je     f0117f32 <test_priority_normal_and_lower+0x41b>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117f1b:	83 ec 04             	sub    $0x4,%esp
f0117f1e:	68 44 bc 12 f0       	push   $0xf012bc44
f0117f23:	68 23 01 00 00       	push   $0x123
f0117f28:	68 11 bb 12 f0       	push   $0xf012bb11
f0117f2d:	e8 e8 83 fe ff       	call   f010031a <_panic>

		freeFrames = sys_calculate_free_frames();
f0117f32:	e8 d2 5a ff ff       	call   f010da09 <sys_calculate_free_frames>
f0117f37:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117f3a:	e8 01 c9 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0117f3f:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0117f42:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117f45:	83 ec 08             	sub    $0x8,%esp
f0117f48:	6a 02                	push   $0x2
f0117f4a:	50                   	push   %eax
f0117f4b:	e8 5f 3f ff ff       	call   f010beaf <set_program_priority>
f0117f50:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f0117f53:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117f56:	83 ec 08             	sub    $0x8,%esp
f0117f59:	6a 02                	push   $0x2
f0117f5b:	50                   	push   %eax
f0117f5c:	e8 4e 3f ff ff       	call   f010beaf <set_program_priority>
f0117f61:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f0117f64:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117f67:	83 ec 08             	sub    $0x8,%esp
f0117f6a:	6a 02                	push   $0x2
f0117f6c:	50                   	push   %eax
f0117f6d:	e8 3d 3f ff ff       	call   f010beaf <set_program_priority>
f0117f72:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0117f75:	e8 c6 c8 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0117f7a:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0117f7d:	74 17                	je     f0117f96 <test_priority_normal_and_lower+0x47f>
f0117f7f:	83 ec 04             	sub    $0x4,%esp
f0117f82:	68 94 bb 12 f0       	push   $0xf012bb94
f0117f87:	68 2d 01 00 00       	push   $0x12d
f0117f8c:	68 11 bb 12 f0       	push   $0xf012bb11
f0117f91:	e8 84 83 fe ff       	call   f010031a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f0117f96:	e8 6e 5a ff ff       	call   f010da09 <sys_calculate_free_frames>
f0117f9b:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0117f9e:	74 21                	je     f0117fc1 <test_priority_normal_and_lower+0x4aa>
f0117fa0:	e8 64 5a ff ff       	call   f010da09 <sys_calculate_free_frames>
f0117fa5:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0117fa8:	29 c2                	sub    %eax,%edx
f0117faa:	89 d0                	mov    %edx,%eax
f0117fac:	50                   	push   %eax
f0117fad:	68 14 bc 12 f0       	push   $0xf012bc14
f0117fb2:	68 2e 01 00 00       	push   $0x12e
f0117fb7:	68 11 bb 12 f0       	push   $0xf012bb11
f0117fbc:	e8 59 83 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0117fc1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117fc4:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0117fca:	83 f8 0a             	cmp    $0xa,%eax
f0117fcd:	75 1c                	jne    f0117feb <test_priority_normal_and_lower+0x4d4>
f0117fcf:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117fd2:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0117fd8:	83 f8 0f             	cmp    $0xf,%eax
f0117fdb:	75 0e                	jne    f0117feb <test_priority_normal_and_lower+0x4d4>
f0117fdd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117fe0:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0117fe6:	83 f8 0a             	cmp    $0xa,%eax
f0117fe9:	74 17                	je     f0118002 <test_priority_normal_and_lower+0x4eb>
			panic("The programs' working set size should be doubled only if it is full\n");
f0117feb:	83 ec 04             	sub    $0x4,%esp
f0117fee:	68 44 bc 12 f0       	push   $0xf012bc44
f0117ff3:	68 31 01 00 00       	push   $0x131
f0117ff8:	68 11 bb 12 f0       	push   $0xf012bb11
f0117ffd:	e8 18 83 fe ff       	call   f010031a <_panic>

		for(int i = 0; i < 10; i++)
f0118002:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0118009:	eb 7d                	jmp    f0118088 <test_priority_normal_and_lower+0x571>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011800b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011800e:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0118015:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0118018:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011801b:	89 d0                	mov    %edx,%eax
f011801d:	01 c0                	add    %eax,%eax
f011801f:	01 d0                	add    %edx,%eax
f0118021:	c1 e0 03             	shl    $0x3,%eax
f0118024:	01 d8                	add    %ebx,%eax
f0118026:	05 88 00 00 00       	add    $0x88,%eax
f011802b:	8b 00                	mov    (%eax),%eax
f011802d:	39 c1                	cmp    %eax,%ecx
f011802f:	74 17                	je     f0118048 <test_priority_normal_and_lower+0x531>
				panic("Working set should be moved properly to the new one");
f0118031:	83 ec 04             	sub    $0x4,%esp
f0118034:	68 04 bd 12 f0       	push   $0xf012bd04
f0118039:	68 36 01 00 00       	push   $0x136
f011803e:	68 11 bb 12 f0       	push   $0xf012bb11
f0118043:	e8 d2 82 fe ff       	call   f010031a <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0118048:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011804b:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f0118052:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0118055:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0118058:	89 d0                	mov    %edx,%eax
f011805a:	01 c0                	add    %eax,%eax
f011805c:	01 d0                	add    %edx,%eax
f011805e:	c1 e0 03             	shl    $0x3,%eax
f0118061:	01 d8                	add    %ebx,%eax
f0118063:	05 90 00 00 00       	add    $0x90,%eax
f0118068:	8b 00                	mov    (%eax),%eax
f011806a:	39 c1                	cmp    %eax,%ecx
f011806c:	74 17                	je     f0118085 <test_priority_normal_and_lower+0x56e>
				panic("Working set should be moved properly to the new one");
f011806e:	83 ec 04             	sub    $0x4,%esp
f0118071:	68 04 bd 12 f0       	push   $0xf012bd04
f0118076:	68 39 01 00 00       	push   $0x139
f011807b:	68 11 bb 12 f0       	push   $0xf012bb11
f0118080:	e8 95 82 fe ff       	call   f010031a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0118085:	ff 45 d8             	incl   -0x28(%ebp)
f0118088:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f011808c:	0f 8e 79 ff ff ff    	jle    f011800b <test_priority_normal_and_lower+0x4f4>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0118092:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f0118099:	eb 7d                	jmp    f0118118 <test_priority_normal_and_lower+0x601>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f011809b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011809e:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f01180a5:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f01180a8:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01180ab:	89 d0                	mov    %edx,%eax
f01180ad:	01 c0                	add    %eax,%eax
f01180af:	01 d0                	add    %edx,%eax
f01180b1:	c1 e0 03             	shl    $0x3,%eax
f01180b4:	01 d8                	add    %ebx,%eax
f01180b6:	05 88 00 00 00       	add    $0x88,%eax
f01180bb:	8b 00                	mov    (%eax),%eax
f01180bd:	39 c1                	cmp    %eax,%ecx
f01180bf:	74 17                	je     f01180d8 <test_priority_normal_and_lower+0x5c1>
				panic("Working set should be moved properly to the new one");
f01180c1:	83 ec 04             	sub    $0x4,%esp
f01180c4:	68 04 bd 12 f0       	push   $0xf012bd04
f01180c9:	68 3f 01 00 00       	push   $0x13f
f01180ce:	68 11 bb 12 f0       	push   $0xf012bb11
f01180d3:	e8 42 82 fe ff       	call   f010031a <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f01180d8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01180db:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f01180e2:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f01180e5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01180e8:	89 d0                	mov    %edx,%eax
f01180ea:	01 c0                	add    %eax,%eax
f01180ec:	01 d0                	add    %edx,%eax
f01180ee:	c1 e0 03             	shl    $0x3,%eax
f01180f1:	01 d8                	add    %ebx,%eax
f01180f3:	05 90 00 00 00       	add    $0x90,%eax
f01180f8:	8b 00                	mov    (%eax),%eax
f01180fa:	39 c1                	cmp    %eax,%ecx
f01180fc:	74 17                	je     f0118115 <test_priority_normal_and_lower+0x5fe>
				panic("Working set should be moved properly to the new one");
f01180fe:	83 ec 04             	sub    $0x4,%esp
f0118101:	68 04 bd 12 f0       	push   $0xf012bd04
f0118106:	68 42 01 00 00       	push   $0x142
f011810b:	68 11 bb 12 f0       	push   $0xf012bb11
f0118110:	e8 05 82 fe ff       	call   f010031a <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0118115:	ff 45 d4             	incl   -0x2c(%ebp)
f0118118:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f011811c:	0f 8e 79 ff ff ff    	jle    f011809b <test_priority_normal_and_lower+0x584>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0118122:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0118129:	eb 7d                	jmp    f01181a8 <test_priority_normal_and_lower+0x691>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f011812b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011812e:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0118135:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0118138:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011813b:	89 d0                	mov    %edx,%eax
f011813d:	01 c0                	add    %eax,%eax
f011813f:	01 d0                	add    %edx,%eax
f0118141:	c1 e0 03             	shl    $0x3,%eax
f0118144:	01 d8                	add    %ebx,%eax
f0118146:	05 88 00 00 00       	add    $0x88,%eax
f011814b:	8b 00                	mov    (%eax),%eax
f011814d:	39 c1                	cmp    %eax,%ecx
f011814f:	74 17                	je     f0118168 <test_priority_normal_and_lower+0x651>
				panic("Working set should be moved properly to the new one");
f0118151:	83 ec 04             	sub    $0x4,%esp
f0118154:	68 04 bd 12 f0       	push   $0xf012bd04
f0118159:	68 48 01 00 00       	push   $0x148
f011815e:	68 11 bb 12 f0       	push   $0xf012bb11
f0118163:	e8 b2 81 fe ff       	call   f010031a <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0118168:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011816b:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0118172:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0118175:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0118178:	89 d0                	mov    %edx,%eax
f011817a:	01 c0                	add    %eax,%eax
f011817c:	01 d0                	add    %edx,%eax
f011817e:	c1 e0 03             	shl    $0x3,%eax
f0118181:	01 d8                	add    %ebx,%eax
f0118183:	05 90 00 00 00       	add    $0x90,%eax
f0118188:	8b 00                	mov    (%eax),%eax
f011818a:	39 c1                	cmp    %eax,%ecx
f011818c:	74 17                	je     f01181a5 <test_priority_normal_and_lower+0x68e>
				panic("Working set should be moved properly to the new one");
f011818e:	83 ec 04             	sub    $0x4,%esp
f0118191:	68 04 bd 12 f0       	push   $0xf012bd04
f0118196:	68 4b 01 00 00       	push   $0x14b
f011819b:	68 11 bb 12 f0       	push   $0xf012bb11
f01181a0:	e8 75 81 fe ff       	call   f010031a <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01181a5:	ff 45 d0             	incl   -0x30(%ebp)
f01181a8:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f01181ac:	0f 8e 79 ff ff ff    	jle    f011812b <test_priority_normal_and_lower+0x614>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f01181b2:	e8 52 58 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01181b7:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01181ba:	e8 81 c6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01181bf:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f01181c2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01181c5:	83 ec 08             	sub    $0x8,%esp
f01181c8:	6a 01                	push   $0x1
f01181ca:	50                   	push   %eax
f01181cb:	e8 df 3c ff ff       	call   f010beaf <set_program_priority>
f01181d0:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f01181d3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01181d6:	83 ec 08             	sub    $0x8,%esp
f01181d9:	6a 01                	push   $0x1
f01181db:	50                   	push   %eax
f01181dc:	e8 ce 3c ff ff       	call   f010beaf <set_program_priority>
f01181e1:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f01181e4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01181e7:	83 ec 08             	sub    $0x8,%esp
f01181ea:	6a 01                	push   $0x1
f01181ec:	50                   	push   %eax
f01181ed:	e8 bd 3c ff ff       	call   f010beaf <set_program_priority>
f01181f2:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01181f5:	e8 46 c6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01181fa:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01181fd:	74 17                	je     f0118216 <test_priority_normal_and_lower+0x6ff>
f01181ff:	83 ec 04             	sub    $0x4,%esp
f0118202:	68 94 bb 12 f0       	push   $0xf012bb94
f0118207:	68 54 01 00 00       	push   $0x154
f011820c:	68 11 bb 12 f0       	push   $0xf012bb11
f0118211:	e8 04 81 fe ff       	call   f010031a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f0118216:	e8 ee 57 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011821b:	2b 45 c0             	sub    -0x40(%ebp),%eax
f011821e:	83 f8 0d             	cmp    $0xd,%eax
f0118221:	74 17                	je     f011823a <test_priority_normal_and_lower+0x723>
f0118223:	83 ec 04             	sub    $0x4,%esp
f0118226:	68 ec be 12 f0       	push   $0xf012beec
f011822b:	68 55 01 00 00       	push   $0x155
f0118230:	68 11 bb 12 f0       	push   $0xf012bb11
f0118235:	e8 e0 80 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f011823a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011823d:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118243:	83 f8 05             	cmp    $0x5,%eax
f0118246:	75 1c                	jne    f0118264 <test_priority_normal_and_lower+0x74d>
f0118248:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011824b:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118251:	83 f8 07             	cmp    $0x7,%eax
f0118254:	75 0e                	jne    f0118264 <test_priority_normal_and_lower+0x74d>
f0118256:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118259:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f011825f:	83 f8 05             	cmp    $0x5,%eax
f0118262:	74 17                	je     f011827b <test_priority_normal_and_lower+0x764>
			panic("The programs' working set size should be half\n");
f0118264:	83 ec 04             	sub    $0x4,%esp
f0118267:	68 34 bf 12 f0       	push   $0xf012bf34
f011826c:	68 58 01 00 00       	push   $0x158
f0118271:	68 11 bb 12 f0       	push   $0xf012bb11
f0118276:	e8 9f 80 fe ff       	call   f010031a <_panic>


		freeFrames = sys_calculate_free_frames();
f011827b:	e8 89 57 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118280:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0118283:	e8 b8 c5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118288:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f011828b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011828e:	83 ec 08             	sub    $0x8,%esp
f0118291:	6a 01                	push   $0x1
f0118293:	50                   	push   %eax
f0118294:	e8 16 3c ff ff       	call   f010beaf <set_program_priority>
f0118299:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011829c:	e8 9f c5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01182a1:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01182a4:	74 17                	je     f01182bd <test_priority_normal_and_lower+0x7a6>
f01182a6:	83 ec 04             	sub    $0x4,%esp
f01182a9:	68 94 bb 12 f0       	push   $0xf012bb94
f01182ae:	68 5e 01 00 00       	push   $0x15e
f01182b3:	68 11 bb 12 f0       	push   $0xf012bb11
f01182b8:	e8 5d 80 fe ff       	call   f010031a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f01182bd:	e8 47 57 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01182c2:	2b 45 c0             	sub    -0x40(%ebp),%eax
f01182c5:	83 f8 03             	cmp    $0x3,%eax
f01182c8:	74 17                	je     f01182e1 <test_priority_normal_and_lower+0x7ca>
f01182ca:	83 ec 04             	sub    $0x4,%esp
f01182cd:	68 94 bb 12 f0       	push   $0xf012bb94
f01182d2:	68 5f 01 00 00       	push   $0x15f
f01182d7:	68 11 bb 12 f0       	push   $0xf012bb11
f01182dc:	e8 39 80 fe ff       	call   f010031a <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f01182e1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01182e4:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01182ea:	83 f8 02             	cmp    $0x2,%eax
f01182ed:	75 1c                	jne    f011830b <test_priority_normal_and_lower+0x7f4>
f01182ef:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01182f2:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f01182f8:	83 f8 07             	cmp    $0x7,%eax
f01182fb:	75 0e                	jne    f011830b <test_priority_normal_and_lower+0x7f4>
f01182fd:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118300:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f0118306:	83 f8 05             	cmp    $0x5,%eax
f0118309:	74 17                	je     f0118322 <test_priority_normal_and_lower+0x80b>
			panic("The programs' working set size should be doubled if full\n");
f011830b:	83 ec 04             	sub    $0x4,%esp
f011830e:	68 c8 bc 12 f0       	push   $0xf012bcc8
f0118313:	68 62 01 00 00       	push   $0x162
f0118318:	68 11 bb 12 f0       	push   $0xf012bb11
f011831d:	e8 f8 7f fe ff       	call   f010031a <_panic>

		for(int i = 0; i < 2; i++)
f0118322:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0118329:	e9 83 00 00 00       	jmp    f01183b1 <test_priority_normal_and_lower+0x89a>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011832e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118331:	83 c0 08             	add    $0x8,%eax
f0118334:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f011833b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011833e:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0118341:	89 d0                	mov    %edx,%eax
f0118343:	01 c0                	add    %eax,%eax
f0118345:	01 d0                	add    %edx,%eax
f0118347:	c1 e0 03             	shl    $0x3,%eax
f011834a:	01 d8                	add    %ebx,%eax
f011834c:	05 88 00 00 00       	add    $0x88,%eax
f0118351:	8b 00                	mov    (%eax),%eax
f0118353:	39 c1                	cmp    %eax,%ecx
f0118355:	74 17                	je     f011836e <test_priority_normal_and_lower+0x857>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0118357:	83 ec 04             	sub    $0x4,%esp
f011835a:	68 64 bf 12 f0       	push   $0xf012bf64
f011835f:	68 67 01 00 00       	push   $0x167
f0118364:	68 11 bb 12 f0       	push   $0xf012bb11
f0118369:	e8 ac 7f fe ff       	call   f010031a <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f011836e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0118371:	83 c0 08             	add    $0x8,%eax
f0118374:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f011837b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011837e:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0118381:	89 d0                	mov    %edx,%eax
f0118383:	01 c0                	add    %eax,%eax
f0118385:	01 d0                	add    %edx,%eax
f0118387:	c1 e0 03             	shl    $0x3,%eax
f011838a:	01 d8                	add    %ebx,%eax
f011838c:	05 90 00 00 00       	add    $0x90,%eax
f0118391:	8b 00                	mov    (%eax),%eax
f0118393:	39 c1                	cmp    %eax,%ecx
f0118395:	74 17                	je     f01183ae <test_priority_normal_and_lower+0x897>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0118397:	83 ec 04             	sub    $0x4,%esp
f011839a:	68 64 bf 12 f0       	push   $0xf012bf64
f011839f:	68 6a 01 00 00       	push   $0x16a
f01183a4:	68 11 bb 12 f0       	push   $0xf012bb11
f01183a9:	e8 6c 7f fe ff       	call   f010031a <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f01183ae:	ff 45 cc             	incl   -0x34(%ebp)
f01183b1:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f01183b5:	0f 8e 73 ff ff ff    	jle    f011832e <test_priority_normal_and_lower+0x817>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f01183bb:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f01183c2:	e9 83 00 00 00       	jmp    f011844a <test_priority_normal_and_lower+0x933>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01183c7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01183ca:	83 c0 03             	add    $0x3,%eax
f01183cd:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f01183d4:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f01183d7:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01183da:	89 d0                	mov    %edx,%eax
f01183dc:	01 c0                	add    %eax,%eax
f01183de:	01 d0                	add    %edx,%eax
f01183e0:	c1 e0 03             	shl    $0x3,%eax
f01183e3:	01 d8                	add    %ebx,%eax
f01183e5:	05 88 00 00 00       	add    $0x88,%eax
f01183ea:	8b 00                	mov    (%eax),%eax
f01183ec:	39 c1                	cmp    %eax,%ecx
f01183ee:	74 17                	je     f0118407 <test_priority_normal_and_lower+0x8f0>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f01183f0:	ff 75 c8             	pushl  -0x38(%ebp)
f01183f3:	68 d0 bf 12 f0       	push   $0xf012bfd0
f01183f8:	68 70 01 00 00       	push   $0x170
f01183fd:	68 11 bb 12 f0       	push   $0xf012bb11
f0118402:	e8 13 7f fe ff       	call   f010031a <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0118407:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011840a:	83 c0 03             	add    $0x3,%eax
f011840d:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f0118414:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f0118417:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011841a:	89 d0                	mov    %edx,%eax
f011841c:	01 c0                	add    %eax,%eax
f011841e:	01 d0                	add    %edx,%eax
f0118420:	c1 e0 03             	shl    $0x3,%eax
f0118423:	01 d8                	add    %ebx,%eax
f0118425:	05 90 00 00 00       	add    $0x90,%eax
f011842a:	8b 00                	mov    (%eax),%eax
f011842c:	39 c1                	cmp    %eax,%ecx
f011842e:	74 17                	je     f0118447 <test_priority_normal_and_lower+0x930>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0118430:	83 ec 04             	sub    $0x4,%esp
f0118433:	68 64 bf 12 f0       	push   $0xf012bf64
f0118438:	68 73 01 00 00       	push   $0x173
f011843d:	68 11 bb 12 f0       	push   $0xf012bb11
f0118442:	e8 d3 7e fe ff       	call   f010031a <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0118447:	ff 45 c8             	incl   -0x38(%ebp)
f011844a:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f011844e:	0f 8e 73 ff ff ff    	jle    f01183c7 <test_priority_normal_and_lower+0x8b0>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0118454:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f011845b:	e9 83 00 00 00       	jmp    f01184e3 <test_priority_normal_and_lower+0x9cc>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0118460:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118463:	83 c0 05             	add    $0x5,%eax
f0118466:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f011846d:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0118470:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0118473:	89 d0                	mov    %edx,%eax
f0118475:	01 c0                	add    %eax,%eax
f0118477:	01 d0                	add    %edx,%eax
f0118479:	c1 e0 03             	shl    $0x3,%eax
f011847c:	01 d8                	add    %ebx,%eax
f011847e:	05 88 00 00 00       	add    $0x88,%eax
f0118483:	8b 00                	mov    (%eax),%eax
f0118485:	39 c1                	cmp    %eax,%ecx
f0118487:	74 17                	je     f01184a0 <test_priority_normal_and_lower+0x989>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0118489:	83 ec 04             	sub    $0x4,%esp
f011848c:	68 64 bf 12 f0       	push   $0xf012bf64
f0118491:	68 79 01 00 00       	push   $0x179
f0118496:	68 11 bb 12 f0       	push   $0xf012bb11
f011849b:	e8 7a 7e fe ff       	call   f010031a <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01184a0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01184a3:	83 c0 05             	add    $0x5,%eax
f01184a6:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f01184ad:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f01184b0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01184b3:	89 d0                	mov    %edx,%eax
f01184b5:	01 c0                	add    %eax,%eax
f01184b7:	01 d0                	add    %edx,%eax
f01184b9:	c1 e0 03             	shl    $0x3,%eax
f01184bc:	01 d8                	add    %ebx,%eax
f01184be:	05 90 00 00 00       	add    $0x90,%eax
f01184c3:	8b 00                	mov    (%eax),%eax
f01184c5:	39 c1                	cmp    %eax,%ecx
f01184c7:	74 17                	je     f01184e0 <test_priority_normal_and_lower+0x9c9>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f01184c9:	83 ec 04             	sub    $0x4,%esp
f01184cc:	68 64 bf 12 f0       	push   $0xf012bf64
f01184d1:	68 7c 01 00 00       	push   $0x17c
f01184d6:	68 11 bb 12 f0       	push   $0xf012bb11
f01184db:	e8 3a 7e fe ff       	call   f010031a <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f01184e0:	ff 45 c4             	incl   -0x3c(%ebp)
f01184e3:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f01184e7:	0f 8e 73 ff ff ff    	jle    f0118460 <test_priority_normal_and_lower+0x949>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f01184ed:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01184f0:	83 ec 08             	sub    $0x8,%esp
f01184f3:	6a 05                	push   $0x5
f01184f5:	50                   	push   %eax
f01184f6:	e8 b4 39 ff ff       	call   f010beaf <set_program_priority>
f01184fb:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f01184fe:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118501:	83 ec 08             	sub    $0x8,%esp
f0118504:	6a 05                	push   $0x5
f0118506:	50                   	push   %eax
f0118507:	e8 a3 39 ff ff       	call   f010beaf <set_program_priority>
f011850c:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f011850f:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0118516:	75 6e 61 
f0118519:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0118520:	6c 00 00 
f0118523:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0118529:	b9 17 00 00 00       	mov    $0x17,%ecx
f011852e:	b8 00 00 00 00       	mov    $0x0,%eax
f0118533:	89 d7                	mov    %edx,%edi
f0118535:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0118537:	83 ec 0c             	sub    $0xc,%esp
f011853a:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0118540:	50                   	push   %eax
f0118541:	e8 96 99 fe ff       	call   f0101edc <execute_command>
f0118546:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
#endif
}
f0118549:	eb 10                	jmp    f011855b <test_priority_normal_and_lower+0xa44>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f011854b:	83 ec 0c             	sub    $0xc,%esp
f011854e:	68 40 c0 12 f0       	push   $0xf012c040
f0118553:	e8 14 8a fe ff       	call   f0100f6c <cprintf>
f0118558:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f011855b:	90                   	nop
f011855c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011855f:	5b                   	pop    %ebx
f0118560:	5e                   	pop    %esi
f0118561:	5f                   	pop    %edi
f0118562:	5d                   	pop    %ebp
f0118563:	c3                   	ret    

f0118564 <test_kmalloc>:
	int c;
};

uint32 da_limit = KERNEL_HEAP_START + DYN_ALLOC_MAX_SIZE ;
int test_kmalloc()
{
f0118564:	55                   	push   %ebp
f0118565:	89 e5                	mov    %esp,%ebp
f0118567:	57                   	push   %edi
f0118568:	53                   	push   %ebx
f0118569:	81 ec d0 00 00 00    	sub    $0xd0,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f011856f:	83 ec 0c             	sub    $0xc,%esp
f0118572:	68 60 c1 12 f0       	push   $0xf012c160
f0118577:	e8 f0 89 fe ff       	call   f0100f6c <cprintf>
f011857c:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011857f:	83 ec 0c             	sub    $0xc,%esp
f0118582:	68 90 c1 12 f0       	push   $0xf012c190
f0118587:	e8 e0 89 fe ff       	call   f0100f6c <cprintf>
f011858c:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011858f:	83 ec 0c             	sub    $0xc,%esp
f0118592:	68 60 c1 12 f0       	push   $0xf012c160
f0118597:	e8 d0 89 fe ff       	call   f0100f6c <cprintf>
f011859c:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011859f:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f01185a3:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f01185a7:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f01185ad:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f01185b3:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f01185ba:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2, *byteArr3 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfByte3, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = (int)sys_calculate_free_frames() ;
f01185c1:	e8 43 54 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01185c6:	89 45 d8             	mov    %eax,-0x28(%ebp)
	int eval = 0;
f01185c9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool correct = 1 ;
f01185d0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int freeFrames, freeDiskFrames;
	uint32 sizeOfKHeap;
	void* ptr_allocations[20] = {0};
f01185d7:	8d 95 38 ff ff ff    	lea    -0xc8(%ebp),%edx
f01185dd:	b9 14 00 00 00       	mov    $0x14,%ecx
f01185e2:	b8 00 00 00 00       	mov    $0x0,%eax
f01185e7:	89 d7                	mov    %edx,%edi
f01185e9:	f3 ab                	rep stos %eax,%es:(%edi)
	correct = 1 ;
f01185eb:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		//Insufficient space
		freeFrames = (int)sys_calculate_free_frames() ;
f01185f2:	e8 12 54 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01185f7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f01185fa:	e8 41 c2 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01185ff:	89 45 d0             	mov    %eax,-0x30(%ebp)
		sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0118602:	c7 45 cc 01 e0 ff 07 	movl   $0x7ffe001,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0118609:	83 ec 0c             	sub    $0xc,%esp
f011860c:	ff 75 cc             	pushl  -0x34(%ebp)
f011860f:	e8 a2 04 ff ff       	call   f0108ab6 <kmalloc>
f0118614:	83 c4 10             	add    $0x10,%esp
f0118617:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
		if (ptr_allocations[0] != NULL) { correct = 0; cprintf("Allocating insufficient space: should return NULL\n"); }
f011861d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118623:	85 c0                	test   %eax,%eax
f0118625:	74 17                	je     f011863e <test_kmalloc+0xda>
f0118627:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011862e:	83 ec 0c             	sub    $0xc,%esp
f0118631:	68 ec c1 12 f0       	push   $0xf012c1ec
f0118636:	e8 31 89 fe ff       	call   f0100f6c <cprintf>
f011863b:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011863e:	e8 fd c1 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118643:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0118646:	74 17                	je     f011865f <test_kmalloc+0xfb>
f0118648:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011864f:	83 ec 0c             	sub    $0xc,%esp
f0118652:	68 20 c2 12 f0       	push   $0xf012c220
f0118657:	e8 10 89 fe ff       	call   f0100f6c <cprintf>
f011865c:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011865f:	e8 a5 53 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118664:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0118667:	74 17                	je     f0118680 <test_kmalloc+0x11c>
f0118669:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118670:	83 ec 0c             	sub    $0xc,%esp
f0118673:	68 8c c2 12 f0       	push   $0xf012c28c
f0118678:	e8 ef 88 fe ff       	call   f0100f6c <cprintf>
f011867d:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f0118680:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0118684:	74 04                	je     f011868a <test_kmalloc+0x126>
f0118686:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011868a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		//2 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f0118691:	e8 73 53 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118696:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f0118699:	e8 a2 c1 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011869e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01186a1:	83 ec 0c             	sub    $0xc,%esp
f01186a4:	68 00 fc 1f 00       	push   $0x1ffc00
f01186a9:	e8 08 04 ff ff       	call   f0108ab6 <kmalloc>
f01186ae:	83 c4 10             	add    $0x10,%esp
f01186b1:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f01186b7:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01186bd:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f01186c2:	74 17                	je     f01186db <test_kmalloc+0x177>
f01186c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01186cb:	83 ec 0c             	sub    $0xc,%esp
f01186ce:	68 d0 c2 12 f0       	push   $0xf012c2d0
f01186d3:	e8 94 88 fe ff       	call   f0100f6c <cprintf>
f01186d8:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01186db:	e8 60 c1 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01186e0:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01186e3:	74 17                	je     f01186fc <test_kmalloc+0x198>
f01186e5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01186ec:	83 ec 0c             	sub    $0xc,%esp
f01186ef:	68 20 c2 12 f0       	push   $0xf012c220
f01186f4:	e8 73 88 fe ff       	call   f0100f6c <cprintf>
f01186f9:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f01186fc:	e8 08 53 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118701:	89 c2                	mov    %eax,%edx
f0118703:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118706:	29 d0                	sub    %edx,%eax
f0118708:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011870d:	7f 17                	jg     f0118726 <test_kmalloc+0x1c2>
f011870f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118716:	83 ec 0c             	sub    $0xc,%esp
f0118719:	68 8c c2 12 f0       	push   $0xf012c28c
f011871e:	e8 49 88 fe ff       	call   f0100f6c <cprintf>
f0118723:	83 c4 10             	add    $0x10,%esp

		//2 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f0118726:	e8 de 52 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011872b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011872e:	e8 0d c1 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118733:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0118736:	83 ec 0c             	sub    $0xc,%esp
f0118739:	68 00 fc 1f 00       	push   $0x1ffc00
f011873e:	e8 73 03 ff ff       	call   f0108ab6 <kmalloc>
f0118743:	83 c4 10             	add    $0x10,%esp
f0118746:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011874c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118752:	3d 00 10 20 f8       	cmp    $0xf8201000,%eax
f0118757:	74 17                	je     f0118770 <test_kmalloc+0x20c>
f0118759:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118760:	83 ec 0c             	sub    $0xc,%esp
f0118763:	68 d0 c2 12 f0       	push   $0xf012c2d0
f0118768:	e8 ff 87 fe ff       	call   f0100f6c <cprintf>
f011876d:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0118770:	e8 cb c0 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118775:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0118778:	74 17                	je     f0118791 <test_kmalloc+0x22d>
f011877a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118781:	83 ec 0c             	sub    $0xc,%esp
f0118784:	68 20 c2 12 f0       	push   $0xf012c220
f0118789:	e8 de 87 fe ff       	call   f0100f6c <cprintf>
f011878e:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0118791:	e8 73 52 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118796:	89 c2                	mov    %eax,%edx
f0118798:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011879b:	29 d0                	sub    %edx,%eax
f011879d:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f01187a2:	7f 17                	jg     f01187bb <test_kmalloc+0x257>
f01187a4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01187ab:	83 ec 0c             	sub    $0xc,%esp
f01187ae:	68 8c c2 12 f0       	push   $0xf012c28c
f01187b3:	e8 b4 87 fe ff       	call   f0100f6c <cprintf>
f01187b8:	83 c4 10             	add    $0x10,%esp

		//2 KB - 1 (should be allocated by dynamic allocator not page allocator)
		freeFrames = (int)sys_calculate_free_frames() ;
f01187bb:	e8 49 52 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01187c0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f01187c3:	e8 78 c0 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01187c8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo-1);
f01187cb:	83 ec 0c             	sub    $0xc,%esp
f01187ce:	68 ff 07 00 00       	push   $0x7ff
f01187d3:	e8 de 02 ff ff       	call   f0108ab6 <kmalloc>
f01187d8:	83 c4 10             	add    $0x10,%esp
f01187db:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f01187e1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01187e7:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f01187ec:	76 28                	jbe    f0118816 <test_kmalloc+0x2b2>
f01187ee:	8b 9d 40 ff ff ff    	mov    -0xc0(%ebp),%ebx
f01187f4:	83 ec 0c             	sub    $0xc,%esp
f01187f7:	6a 00                	push   $0x0
f01187f9:	e8 ae 02 ff ff       	call   f0108aac <sbrk>
f01187fe:	83 c4 10             	add    $0x10,%esp
f0118801:	39 c3                	cmp    %eax,%ebx
f0118803:	73 11                	jae    f0118816 <test_kmalloc+0x2b2>
f0118805:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011880b:	89 c2                	mov    %eax,%edx
f011880d:	a1 98 9d 17 f0       	mov    0xf0179d98,%eax
f0118812:	39 c2                	cmp    %eax,%edx
f0118814:	72 17                	jb     f011882d <test_kmalloc+0x2c9>
		{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f0118816:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011881d:	83 ec 0c             	sub    $0xc,%esp
f0118820:	68 20 c3 12 f0       	push   $0xf012c320
f0118825:	e8 42 87 fe ff       	call   f0100f6c <cprintf>
f011882a:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011882d:	e8 0e c0 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118832:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0118835:	74 17                	je     f011884e <test_kmalloc+0x2ea>
f0118837:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011883e:	83 ec 0c             	sub    $0xc,%esp
f0118841:	68 20 c2 12 f0       	push   $0xf012c220
f0118846:	e8 21 87 fe ff       	call   f0100f6c <cprintf>
f011884b:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - (int)sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//2 KB - 1 (should be allocated by dynamic allocator not page allocator)
		freeFrames = (int)sys_calculate_free_frames() ;
f011884e:	e8 b6 51 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118853:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f0118856:	e8 e5 bf fe ff       	call   f0104840 <pf_calculate_free_frames>
f011885b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo-1);
f011885e:	83 ec 0c             	sub    $0xc,%esp
f0118861:	68 ff 07 00 00       	push   $0x7ff
f0118866:	e8 4b 02 ff ff       	call   f0108ab6 <kmalloc>
f011886b:	83 c4 10             	add    $0x10,%esp
f011886e:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f0118874:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011887a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011887f:	76 28                	jbe    f01188a9 <test_kmalloc+0x345>
f0118881:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0118887:	83 ec 0c             	sub    $0xc,%esp
f011888a:	6a 00                	push   $0x0
f011888c:	e8 1b 02 ff ff       	call   f0108aac <sbrk>
f0118891:	83 c4 10             	add    $0x10,%esp
f0118894:	39 c3                	cmp    %eax,%ebx
f0118896:	73 11                	jae    f01188a9 <test_kmalloc+0x345>
f0118898:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011889e:	89 c2                	mov    %eax,%edx
f01188a0:	a1 98 9d 17 f0       	mov    0xf0179d98,%eax
f01188a5:	39 c2                	cmp    %eax,%edx
f01188a7:	72 17                	jb     f01188c0 <test_kmalloc+0x35c>
		{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f01188a9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01188b0:	83 ec 0c             	sub    $0xc,%esp
f01188b3:	68 20 c3 12 f0       	push   $0xf012c320
f01188b8:	e8 af 86 fe ff       	call   f0100f6c <cprintf>
f01188bd:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01188c0:	e8 7b bf fe ff       	call   f0104840 <pf_calculate_free_frames>
f01188c5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01188c8:	74 17                	je     f01188e1 <test_kmalloc+0x37d>
f01188ca:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01188d1:	83 ec 0c             	sub    $0xc,%esp
f01188d4:	68 20 c2 12 f0       	push   $0xf012c220
f01188d9:	e8 8e 86 fe ff       	call   f0100f6c <cprintf>
f01188de:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - (int)sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//7 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f01188e1:	e8 23 51 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01188e6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f01188e9:	e8 52 bf fe ff       	call   f0104840 <pf_calculate_free_frames>
f01188ee:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01188f1:	83 ec 0c             	sub    $0xc,%esp
f01188f4:	68 00 1c 00 00       	push   $0x1c00
f01188f9:	e8 b8 01 ff ff       	call   f0108ab6 <kmalloc>
f01188fe:	83 c4 10             	add    $0x10,%esp
f0118901:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega /*+ 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0118907:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011890d:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f0118912:	74 17                	je     f011892b <test_kmalloc+0x3c7>
f0118914:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011891b:	83 ec 0c             	sub    $0xc,%esp
f011891e:	68 d0 c2 12 f0       	push   $0xf012c2d0
f0118923:	e8 44 86 fe ff       	call   f0100f6c <cprintf>
f0118928:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011892b:	e8 10 bf fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118930:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0118933:	74 17                	je     f011894c <test_kmalloc+0x3e8>
f0118935:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011893c:	83 ec 0c             	sub    $0xc,%esp
f011893f:	68 20 c2 12 f0       	push   $0xf012c220
f0118944:	e8 23 86 fe ff       	call   f0100f6c <cprintf>
f0118949:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011894c:	e8 b8 50 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118951:	89 c2                	mov    %eax,%edx
f0118953:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118956:	29 d0                	sub    %edx,%eax
f0118958:	83 f8 01             	cmp    $0x1,%eax
f011895b:	7f 17                	jg     f0118974 <test_kmalloc+0x410>
f011895d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118964:	83 ec 0c             	sub    $0xc,%esp
f0118967:	68 8c c2 12 f0       	push   $0xf012c28c
f011896c:	e8 fb 85 fe ff       	call   f0100f6c <cprintf>
f0118971:	83 c4 10             	add    $0x10,%esp

		//3 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f0118974:	e8 90 50 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118979:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011897c:	e8 bf be fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118981:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0118984:	83 ec 0c             	sub    $0xc,%esp
f0118987:	68 00 fc 2f 00       	push   $0x2ffc00
f011898c:	e8 25 01 ff ff       	call   f0108ab6 <kmalloc>
f0118991:	83 c4 10             	add    $0x10,%esp
f0118994:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011899a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01189a0:	3d 00 30 40 f8       	cmp    $0xf8403000,%eax
f01189a5:	74 17                	je     f01189be <test_kmalloc+0x45a>
f01189a7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01189ae:	83 ec 0c             	sub    $0xc,%esp
f01189b1:	68 d0 c2 12 f0       	push   $0xf012c2d0
f01189b6:	e8 b1 85 fe ff       	call   f0100f6c <cprintf>
f01189bb:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01189be:	e8 7d be fe ff       	call   f0104840 <pf_calculate_free_frames>
f01189c3:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01189c6:	74 17                	je     f01189df <test_kmalloc+0x47b>
f01189c8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01189cf:	83 ec 0c             	sub    $0xc,%esp
f01189d2:	68 20 c2 12 f0       	push   $0xf012c220
f01189d7:	e8 90 85 fe ff       	call   f0100f6c <cprintf>
f01189dc:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f01189df:	e8 25 50 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01189e4:	89 c2                	mov    %eax,%edx
f01189e6:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01189e9:	29 d0                	sub    %edx,%eax
f01189eb:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f01189f0:	7f 17                	jg     f0118a09 <test_kmalloc+0x4a5>
f01189f2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01189f9:	83 ec 0c             	sub    $0xc,%esp
f01189fc:	68 8c c2 12 f0       	push   $0xf012c28c
f0118a01:	e8 66 85 fe ff       	call   f0100f6c <cprintf>
f0118a06:	83 c4 10             	add    $0x10,%esp

		//6 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f0118a09:	e8 fb 4f ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118a0e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f0118a11:	e8 2a be fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118a16:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0118a19:	83 ec 0c             	sub    $0xc,%esp
f0118a1c:	68 00 fc 5f 00       	push   $0x5ffc00
f0118a21:	e8 90 00 ff ff       	call   f0108ab6 <kmalloc>
f0118a26:	83 c4 10             	add    $0x10,%esp
f0118a29:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0118a2f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0118a35:	3d 00 30 70 f8       	cmp    $0xf8703000,%eax
f0118a3a:	74 17                	je     f0118a53 <test_kmalloc+0x4ef>
f0118a3c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118a43:	83 ec 0c             	sub    $0xc,%esp
f0118a46:	68 d0 c2 12 f0       	push   $0xf012c2d0
f0118a4b:	e8 1c 85 fe ff       	call   f0100f6c <cprintf>
f0118a50:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0118a53:	e8 e8 bd fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118a58:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0118a5b:	74 17                	je     f0118a74 <test_kmalloc+0x510>
f0118a5d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118a64:	83 ec 0c             	sub    $0xc,%esp
f0118a67:	68 20 c2 12 f0       	push   $0xf012c220
f0118a6c:	e8 fb 84 fe ff       	call   f0100f6c <cprintf>
f0118a71:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 1536) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0118a74:	e8 90 4f ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118a79:	89 c2                	mov    %eax,%edx
f0118a7b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118a7e:	29 d0                	sub    %edx,%eax
f0118a80:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f0118a85:	7f 17                	jg     f0118a9e <test_kmalloc+0x53a>
f0118a87:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118a8e:	83 ec 0c             	sub    $0xc,%esp
f0118a91:	68 8c c2 12 f0       	push   $0xf012c28c
f0118a96:	e8 d1 84 fe ff       	call   f0100f6c <cprintf>
f0118a9b:	83 c4 10             	add    $0x10,%esp

		//14 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f0118a9e:	e8 66 4f ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118aa3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f0118aa6:	e8 95 bd fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118aab:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0118aae:	83 ec 0c             	sub    $0xc,%esp
f0118ab1:	68 00 38 00 00       	push   $0x3800
f0118ab6:	e8 fb ff fe ff       	call   f0108ab6 <kmalloc>
f0118abb:	83 c4 10             	add    $0x10,%esp
f0118abe:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f0118ac4:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118aca:	3d 00 30 d0 f8       	cmp    $0xf8d03000,%eax
f0118acf:	74 17                	je     f0118ae8 <test_kmalloc+0x584>
f0118ad1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118ad8:	83 ec 0c             	sub    $0xc,%esp
f0118adb:	68 d0 c2 12 f0       	push   $0xf012c2d0
f0118ae0:	e8 87 84 fe ff       	call   f0100f6c <cprintf>
f0118ae5:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0118ae8:	e8 53 bd fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118aed:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0118af0:	74 17                	je     f0118b09 <test_kmalloc+0x5a5>
f0118af2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118af9:	83 ec 0c             	sub    $0xc,%esp
f0118afc:	68 20 c2 12 f0       	push   $0xf012c220
f0118b01:	e8 66 84 fe ff       	call   f0100f6c <cprintf>
f0118b06:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0118b09:	e8 fb 4e ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118b0e:	89 c2                	mov    %eax,%edx
f0118b10:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0118b13:	29 d0                	sub    %edx,%eax
f0118b15:	83 f8 03             	cmp    $0x3,%eax
f0118b18:	7f 17                	jg     f0118b31 <test_kmalloc+0x5cd>
f0118b1a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118b21:	83 ec 0c             	sub    $0xc,%esp
f0118b24:	68 8c c2 12 f0       	push   $0xf012c28c
f0118b29:	e8 3e 84 fe ff       	call   f0100f6c <cprintf>
f0118b2e:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=40 ;
f0118b31:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0118b35:	74 04                	je     f0118b3b <test_kmalloc+0x5d7>
f0118b37:	83 45 f4 28          	addl   $0x28,-0xc(%ebp)

	correct = 1 ;
f0118b3b:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Checking read/write on the allocated spaces
	{

		freeFrames = (int)sys_calculate_free_frames() ;
f0118b42:	e8 c2 4e ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118b47:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f0118b4a:	e8 f1 bc fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118b4f:	89 45 d0             	mov    %eax,-0x30(%ebp)

		//Write values
		//In 1st 2 MB
		lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f0118b52:	c7 45 c8 ff fb 1f 00 	movl   $0x1ffbff,-0x38(%ebp)
		byteArr = (char *) ptr_allocations[0];
f0118b59:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118b5f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		byteArr[0] = minByte ;
f0118b62:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118b65:	8a 55 eb             	mov    -0x15(%ebp),%dl
f0118b68:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte ;
f0118b6a:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0118b6d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118b70:	01 c2                	add    %eax,%edx
f0118b72:	8a 45 ea             	mov    -0x16(%ebp),%al
f0118b75:	88 02                	mov    %al,(%edx)

		//In 2nd 2 MB
		shortArr = (short *) ptr_allocations[1];
f0118b77:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118b7d:	89 45 c0             	mov    %eax,-0x40(%ebp)
		lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f0118b80:	c7 45 bc ff fd 0f 00 	movl   $0xffdff,-0x44(%ebp)
		shortArr[0] = minShort;
f0118b87:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0118b8a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0118b8d:	66 89 02             	mov    %ax,(%edx)
		shortArr[lastIndexOfShort] = maxShort;
f0118b90:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118b93:	01 c0                	add    %eax,%eax
f0118b95:	89 c2                	mov    %eax,%edx
f0118b97:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0118b9a:	01 c2                	add    %eax,%edx
f0118b9c:	66 8b 45 e6          	mov    -0x1a(%ebp),%ax
f0118ba0:	66 89 02             	mov    %ax,(%edx)

		//In Dynamic Allocator Area
		{
			//In 2 KB - 1
			intArr = (int *) ptr_allocations[2];
f0118ba3:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0118ba9:	89 45 b8             	mov    %eax,-0x48(%ebp)
			lastIndexOfInt = (2*kilo-1)/sizeof(int) - 1;
f0118bac:	c7 45 b4 fe 01 00 00 	movl   $0x1fe,-0x4c(%ebp)
			intArr[0] = minInt;
f0118bb3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118bb6:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0118bb9:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f0118bbb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118bbe:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118bc5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118bc8:	01 c2                	add    %eax,%edx
f0118bca:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118bcd:	89 02                	mov    %eax,(%edx)

			//In 2 KB - 1
			byteArr2 = (char *) ptr_allocations[3];
f0118bcf:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0118bd5:	89 45 b0             	mov    %eax,-0x50(%ebp)
			lastIndexOfByte2 = (2*kilo-1)/sizeof(char) - 1;
f0118bd8:	c7 45 ac fe 07 00 00 	movl   $0x7fe,-0x54(%ebp)
			byteArr2[0] = minByte;
f0118bdf:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118be2:	8a 55 eb             	mov    -0x15(%ebp),%dl
f0118be5:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2] = maxByte;
f0118be7:	8b 55 ac             	mov    -0x54(%ebp),%edx
f0118bea:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118bed:	01 c2                	add    %eax,%edx
f0118bef:	8a 45 ea             	mov    -0x16(%ebp),%al
f0118bf2:	88 02                	mov    %al,(%edx)
		}

		//In 7 KB
		structArr = (struct MyStruct *) ptr_allocations[4];
f0118bf4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0118bfa:	89 45 a8             	mov    %eax,-0x58(%ebp)
		lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0118bfd:	c7 45 a4 7f 03 00 00 	movl   $0x37f,-0x5c(%ebp)
		structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f0118c04:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118c07:	8a 55 eb             	mov    -0x15(%ebp),%dl
f0118c0a:	88 10                	mov    %dl,(%eax)
f0118c0c:	8b 55 a8             	mov    -0x58(%ebp),%edx
f0118c0f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0118c12:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118c16:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118c19:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0118c1c:	89 50 04             	mov    %edx,0x4(%eax)
		structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f0118c1f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118c22:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118c29:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118c2c:	01 c2                	add    %eax,%edx
f0118c2e:	8a 45 ea             	mov    -0x16(%ebp),%al
f0118c31:	88 02                	mov    %al,(%edx)
f0118c33:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118c36:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118c3d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118c40:	01 c2                	add    %eax,%edx
f0118c42:	66 8b 45 e6          	mov    -0x1a(%ebp),%ax
f0118c46:	66 89 42 02          	mov    %ax,0x2(%edx)
f0118c4a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118c4d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118c54:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118c57:	01 c2                	add    %eax,%edx
f0118c59:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0118c5c:	89 42 04             	mov    %eax,0x4(%edx)

		//In 6 MB
		lastIndexOfByte3 = (6*Mega-kilo)/sizeof(char) - 1;
f0118c5f:	c7 45 a0 ff fb 5f 00 	movl   $0x5ffbff,-0x60(%ebp)
		byteArr3 = (char *) ptr_allocations[6];
f0118c66:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0118c6c:	89 45 9c             	mov    %eax,-0x64(%ebp)
		byteArr3[0] = minByte ;
f0118c6f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118c72:	8a 55 eb             	mov    -0x15(%ebp),%dl
f0118c75:	88 10                	mov    %dl,(%eax)
		byteArr3[lastIndexOfByte3 / 2] = maxByte / 2;
f0118c77:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0118c7a:	89 c2                	mov    %eax,%edx
f0118c7c:	c1 ea 1f             	shr    $0x1f,%edx
f0118c7f:	01 d0                	add    %edx,%eax
f0118c81:	d1 f8                	sar    %eax
f0118c83:	89 c2                	mov    %eax,%edx
f0118c85:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118c88:	01 c2                	add    %eax,%edx
f0118c8a:	8a 45 ea             	mov    -0x16(%ebp),%al
f0118c8d:	88 c1                	mov    %al,%cl
f0118c8f:	c0 e9 07             	shr    $0x7,%cl
f0118c92:	01 c8                	add    %ecx,%eax
f0118c94:	d0 f8                	sar    %al
f0118c96:	88 02                	mov    %al,(%edx)
		byteArr3[lastIndexOfByte3] = maxByte ;
f0118c98:	8b 55 a0             	mov    -0x60(%ebp),%edx
f0118c9b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118c9e:	01 c2                	add    %eax,%edx
f0118ca0:	8a 45 ea             	mov    -0x16(%ebp),%al
f0118ca3:	88 02                	mov    %al,(%edx)

		//In 14 KB
		shortArr2 = (short *) ptr_allocations[7];
f0118ca5:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118cab:	89 45 98             	mov    %eax,-0x68(%ebp)
		lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f0118cae:	c7 45 94 ff 1b 00 00 	movl   $0x1bff,-0x6c(%ebp)
		shortArr2[0] = minShort;
f0118cb5:	8b 55 98             	mov    -0x68(%ebp),%edx
f0118cb8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0118cbb:	66 89 02             	mov    %ax,(%edx)
		shortArr2[lastIndexOfShort2] = maxShort;
f0118cbe:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118cc1:	01 c0                	add    %eax,%eax
f0118cc3:	89 c2                	mov    %eax,%edx
f0118cc5:	8b 45 98             	mov    -0x68(%ebp),%eax
f0118cc8:	01 c2                	add    %eax,%edx
f0118cca:	66 8b 45 e6          	mov    -0x1a(%ebp),%ax
f0118cce:	66 89 02             	mov    %ax,(%edx)

		//Read values: check that the values are successfully written
		if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f0118cd1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118cd4:	8a 00                	mov    (%eax),%al
f0118cd6:	3a 45 eb             	cmp    -0x15(%ebp),%al
f0118cd9:	75 0f                	jne    f0118cea <test_kmalloc+0x786>
f0118cdb:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0118cde:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0118ce1:	01 d0                	add    %edx,%eax
f0118ce3:	8a 00                	mov    (%eax),%al
f0118ce5:	3a 45 ea             	cmp    -0x16(%ebp),%al
f0118ce8:	74 17                	je     f0118d01 <test_kmalloc+0x79d>
f0118cea:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118cf1:	83 ec 0c             	sub    $0xc,%esp
f0118cf4:	68 a8 c3 12 f0       	push   $0xf012c3a8
f0118cf9:	e8 6e 82 fe ff       	call   f0100f6c <cprintf>
f0118cfe:	83 c4 10             	add    $0x10,%esp
		if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f0118d01:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0118d04:	66 8b 00             	mov    (%eax),%ax
f0118d07:	66 3b 45 e8          	cmp    -0x18(%ebp),%ax
f0118d0b:	75 15                	jne    f0118d22 <test_kmalloc+0x7be>
f0118d0d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0118d10:	01 c0                	add    %eax,%eax
f0118d12:	89 c2                	mov    %eax,%edx
f0118d14:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0118d17:	01 d0                	add    %edx,%eax
f0118d19:	66 8b 00             	mov    (%eax),%ax
f0118d1c:	66 3b 45 e6          	cmp    -0x1a(%ebp),%ax
f0118d20:	74 17                	je     f0118d39 <test_kmalloc+0x7d5>
f0118d22:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118d29:	83 ec 0c             	sub    $0xc,%esp
f0118d2c:	68 a8 c3 12 f0       	push   $0xf012c3a8
f0118d31:	e8 36 82 fe ff       	call   f0100f6c <cprintf>
f0118d36:	83 c4 10             	add    $0x10,%esp
		if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f0118d39:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118d3c:	8b 00                	mov    (%eax),%eax
f0118d3e:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0118d41:	75 16                	jne    f0118d59 <test_kmalloc+0x7f5>
f0118d43:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0118d46:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0118d4d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0118d50:	01 d0                	add    %edx,%eax
f0118d52:	8b 00                	mov    (%eax),%eax
f0118d54:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0118d57:	74 17                	je     f0118d70 <test_kmalloc+0x80c>
f0118d59:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118d60:	83 ec 0c             	sub    $0xc,%esp
f0118d63:	68 a8 c3 12 f0       	push   $0xf012c3a8
f0118d68:	e8 ff 81 fe ff       	call   f0100f6c <cprintf>
f0118d6d:	83 c4 10             	add    $0x10,%esp
		if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2] != maxByte) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f0118d70:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118d73:	8a 00                	mov    (%eax),%al
f0118d75:	3a 45 eb             	cmp    -0x15(%ebp),%al
f0118d78:	75 0f                	jne    f0118d89 <test_kmalloc+0x825>
f0118d7a:	8b 55 ac             	mov    -0x54(%ebp),%edx
f0118d7d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0118d80:	01 d0                	add    %edx,%eax
f0118d82:	8a 00                	mov    (%eax),%al
f0118d84:	3a 45 ea             	cmp    -0x16(%ebp),%al
f0118d87:	74 17                	je     f0118da0 <test_kmalloc+0x83c>
f0118d89:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118d90:	83 ec 0c             	sub    $0xc,%esp
f0118d93:	68 a8 c3 12 f0       	push   $0xf012c3a8
f0118d98:	e8 cf 81 fe ff       	call   f0100f6c <cprintf>
f0118d9d:	83 c4 10             	add    $0x10,%esp

		if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	{ correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f0118da0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118da3:	8a 00                	mov    (%eax),%al
f0118da5:	3a 45 eb             	cmp    -0x15(%ebp),%al
f0118da8:	75 16                	jne    f0118dc0 <test_kmalloc+0x85c>
f0118daa:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118dad:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118db4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118db7:	01 d0                	add    %edx,%eax
f0118db9:	8a 00                	mov    (%eax),%al
f0118dbb:	3a 45 ea             	cmp    -0x16(%ebp),%al
f0118dbe:	74 17                	je     f0118dd7 <test_kmalloc+0x873>
f0118dc0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118dc7:	83 ec 0c             	sub    $0xc,%esp
f0118dca:	68 a8 c3 12 f0       	push   $0xf012c3a8
f0118dcf:	e8 98 81 fe ff       	call   f0100f6c <cprintf>
f0118dd4:	83 c4 10             	add    $0x10,%esp
		if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	{ correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f0118dd7:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118dda:	66 8b 40 02          	mov    0x2(%eax),%ax
f0118dde:	66 3b 45 e8          	cmp    -0x18(%ebp),%ax
f0118de2:	75 19                	jne    f0118dfd <test_kmalloc+0x899>
f0118de4:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118de7:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118dee:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118df1:	01 d0                	add    %edx,%eax
f0118df3:	66 8b 40 02          	mov    0x2(%eax),%ax
f0118df7:	66 3b 45 e6          	cmp    -0x1a(%ebp),%ax
f0118dfb:	74 17                	je     f0118e14 <test_kmalloc+0x8b0>
f0118dfd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118e04:	83 ec 0c             	sub    $0xc,%esp
f0118e07:	68 a8 c3 12 f0       	push   $0xf012c3a8
f0118e0c:	e8 5b 81 fe ff       	call   f0100f6c <cprintf>
f0118e11:	83 c4 10             	add    $0x10,%esp
		if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	{ correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f0118e14:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118e17:	8b 40 04             	mov    0x4(%eax),%eax
f0118e1a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f0118e1d:	75 17                	jne    f0118e36 <test_kmalloc+0x8d2>
f0118e1f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0118e22:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0118e29:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0118e2c:	01 d0                	add    %edx,%eax
f0118e2e:	8b 40 04             	mov    0x4(%eax),%eax
f0118e31:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f0118e34:	74 17                	je     f0118e4d <test_kmalloc+0x8e9>
f0118e36:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118e3d:	83 ec 0c             	sub    $0xc,%esp
f0118e40:	68 a8 c3 12 f0       	push   $0xf012c3a8
f0118e45:	e8 22 81 fe ff       	call   f0100f6c <cprintf>
f0118e4a:	83 c4 10             	add    $0x10,%esp

		if (byteArr3[0] != minByte || byteArr3[lastIndexOfByte3/2] != maxByte/2 || byteArr3[lastIndexOfByte3] != maxByte) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f0118e4d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118e50:	8a 00                	mov    (%eax),%al
f0118e52:	3a 45 eb             	cmp    -0x15(%ebp),%al
f0118e55:	75 34                	jne    f0118e8b <test_kmalloc+0x927>
f0118e57:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0118e5a:	89 c2                	mov    %eax,%edx
f0118e5c:	c1 ea 1f             	shr    $0x1f,%edx
f0118e5f:	01 d0                	add    %edx,%eax
f0118e61:	d1 f8                	sar    %eax
f0118e63:	89 c2                	mov    %eax,%edx
f0118e65:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118e68:	01 d0                	add    %edx,%eax
f0118e6a:	8a 10                	mov    (%eax),%dl
f0118e6c:	8a 45 ea             	mov    -0x16(%ebp),%al
f0118e6f:	88 c1                	mov    %al,%cl
f0118e71:	c0 e9 07             	shr    $0x7,%cl
f0118e74:	01 c8                	add    %ecx,%eax
f0118e76:	d0 f8                	sar    %al
f0118e78:	38 c2                	cmp    %al,%dl
f0118e7a:	75 0f                	jne    f0118e8b <test_kmalloc+0x927>
f0118e7c:	8b 55 a0             	mov    -0x60(%ebp),%edx
f0118e7f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118e82:	01 d0                	add    %edx,%eax
f0118e84:	8a 00                	mov    (%eax),%al
f0118e86:	3a 45 ea             	cmp    -0x16(%ebp),%al
f0118e89:	74 17                	je     f0118ea2 <test_kmalloc+0x93e>
f0118e8b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118e92:	83 ec 0c             	sub    $0xc,%esp
f0118e95:	68 a8 c3 12 f0       	push   $0xf012c3a8
f0118e9a:	e8 cd 80 fe ff       	call   f0100f6c <cprintf>
f0118e9f:	83 c4 10             	add    $0x10,%esp
		if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) { correct = 0; cprintf("Wrong allocation: stored values are wrongly changed!\n"); }
f0118ea2:	8b 45 98             	mov    -0x68(%ebp),%eax
f0118ea5:	66 8b 00             	mov    (%eax),%ax
f0118ea8:	66 3b 45 e8          	cmp    -0x18(%ebp),%ax
f0118eac:	75 15                	jne    f0118ec3 <test_kmalloc+0x95f>
f0118eae:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118eb1:	01 c0                	add    %eax,%eax
f0118eb3:	89 c2                	mov    %eax,%edx
f0118eb5:	8b 45 98             	mov    -0x68(%ebp),%eax
f0118eb8:	01 d0                	add    %edx,%eax
f0118eba:	66 8b 00             	mov    (%eax),%ax
f0118ebd:	66 3b 45 e6          	cmp    -0x1a(%ebp),%ax
f0118ec1:	74 17                	je     f0118eda <test_kmalloc+0x976>
f0118ec3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118eca:	83 ec 0c             	sub    $0xc,%esp
f0118ecd:	68 a8 c3 12 f0       	push   $0xf012c3a8
f0118ed2:	e8 95 80 fe ff       	call   f0100f6c <cprintf>
f0118ed7:	83 c4 10             	add    $0x10,%esp

		if ((freeFrames - (int)sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0118eda:	e8 2a 4b ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118edf:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0118ee2:	74 17                	je     f0118efb <test_kmalloc+0x997>
f0118ee4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118eeb:	83 ec 0c             	sub    $0xc,%esp
f0118eee:	68 8c c2 12 f0       	push   $0xf012c28c
f0118ef3:	e8 74 80 fe ff       	call   f0100f6c <cprintf>
f0118ef8:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0118efb:	e8 40 b9 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118f00:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0118f03:	74 17                	je     f0118f1c <test_kmalloc+0x9b8>
f0118f05:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118f0c:	83 ec 0c             	sub    $0xc,%esp
f0118f0f:	68 20 c2 12 f0       	push   $0xf012c220
f0118f14:	e8 53 80 fe ff       	call   f0100f6c <cprintf>
f0118f19:	83 c4 10             	add    $0x10,%esp

	}
	if (correct)	eval+=30 ;
f0118f1c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0118f20:	74 04                	je     f0118f26 <test_kmalloc+0x9c2>
f0118f22:	83 45 f4 1e          	addl   $0x1e,-0xc(%ebp)

	correct = 1 ;
f0118f26:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//Insufficient space again
	{
		freeFrames = (int)sys_calculate_free_frames() ;
f0118f2d:	e8 d7 4a ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118f32:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f0118f35:	e8 06 b9 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118f3a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+/*4*kilo+4*kilo+*/8*kilo+3*Mega+6*Mega+16*kilo) ;
f0118f3d:	c7 45 90 00 a0 2f 07 	movl   $0x72fa000,-0x70(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f0118f44:	83 ec 0c             	sub    $0xc,%esp
f0118f47:	ff 75 90             	pushl  -0x70(%ebp)
f0118f4a:	e8 67 fb fe ff       	call   f0108ab6 <kmalloc>
f0118f4f:	83 c4 10             	add    $0x10,%esp
f0118f52:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
		if (ptr_allocations[8] != NULL) { correct = 0; cprintf("Allocating insufficient space: should return NULL\n"); }
f0118f58:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0118f5e:	85 c0                	test   %eax,%eax
f0118f60:	74 17                	je     f0118f79 <test_kmalloc+0xa15>
f0118f62:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118f69:	83 ec 0c             	sub    $0xc,%esp
f0118f6c:	68 ec c1 12 f0       	push   $0xf012c1ec
f0118f71:	e8 f6 7f fe ff       	call   f0100f6c <cprintf>
f0118f76:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0118f79:	e8 c2 b8 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0118f7e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0118f81:	74 17                	je     f0118f9a <test_kmalloc+0xa36>
f0118f83:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118f8a:	83 ec 0c             	sub    $0xc,%esp
f0118f8d:	68 20 c2 12 f0       	push   $0xf012c220
f0118f92:	e8 d5 7f fe ff       	call   f0100f6c <cprintf>
f0118f97:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f0118f9a:	e8 6a 4a ff ff       	call   f010da09 <sys_calculate_free_frames>
f0118f9f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0118fa2:	74 17                	je     f0118fbb <test_kmalloc+0xa57>
f0118fa4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0118fab:	83 ec 0c             	sub    $0xc,%esp
f0118fae:	68 8c c2 12 f0       	push   $0xf012c28c
f0118fb3:	e8 b4 7f fe ff       	call   f0100f6c <cprintf>
f0118fb8:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f0118fbb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0118fbf:	74 04                	je     f0118fc5 <test_kmalloc+0xa61>
f0118fc1:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f0118fc5:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//permissions
	{
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0118fcc:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118fd2:	05 00 40 00 00       	add    $0x4000,%eax
f0118fd7:	89 45 8c             	mov    %eax,-0x74(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0118fda:	c7 45 ec 00 10 00 f8 	movl   $0xf8001000,-0x14(%ebp)
f0118fe1:	eb 6a                	jmp    f011904d <test_kmalloc+0xae9>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0118fe3:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f0118fe8:	83 ec 04             	sub    $0x4,%esp
f0118feb:	8d 95 34 ff ff ff    	lea    -0xcc(%ebp),%edx
f0118ff1:	52                   	push   %edx
f0118ff2:	ff 75 ec             	pushl  -0x14(%ebp)
f0118ff5:	50                   	push   %eax
f0118ff6:	e8 12 f4 fe ff       	call   f010840d <get_page_table>
f0118ffb:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f0118ffe:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0119004:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0119007:	c1 ea 0c             	shr    $0xc,%edx
f011900a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0119010:	c1 e2 02             	shl    $0x2,%edx
f0119013:	01 d0                	add    %edx,%eax
f0119015:	8b 00                	mov    (%eax),%eax
f0119017:	25 ff 0f 00 00       	and    $0xfff,%eax
f011901c:	89 45 88             	mov    %eax,-0x78(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f011901f:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119022:	83 e0 04             	and    $0x4,%eax
f0119025:	85 c0                	test   %eax,%eax
f0119027:	74 1d                	je     f0119046 <test_kmalloc+0xae2>
			{
				if (correct)
f0119029:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011902d:	74 17                	je     f0119046 <test_kmalloc+0xae2>
				{
					correct = 0; cprintf("Wrong permissions: pages should be mapped with Supervisor permission only\n");
f011902f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119036:	83 ec 0c             	sub    $0xc,%esp
f0119039:	68 e0 c3 12 f0       	push   $0xf012c3e0
f011903e:	e8 29 7f fe ff       	call   f0100f6c <cprintf>
f0119043:	83 c4 10             	add    $0x10,%esp
	correct = 1 ;
	//permissions
	{
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0119046:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f011904d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0119050:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f0119053:	72 8e                	jb     f0118fe3 <test_kmalloc+0xa7f>
					correct = 0; cprintf("Wrong permissions: pages should be mapped with Supervisor permission only\n");
				}
			}
		}
	}
	if (correct)	eval+=10 ;
f0119055:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0119059:	74 04                	je     f011905f <test_kmalloc+0xafb>
f011905b:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	cprintf("\ntest kmalloc completed. Evaluation = %d%\n", eval);
f011905f:	83 ec 08             	sub    $0x8,%esp
f0119062:	ff 75 f4             	pushl  -0xc(%ebp)
f0119065:	68 2c c4 12 f0       	push   $0xf012c42c
f011906a:	e8 fd 7e fe ff       	call   f0100f6c <cprintf>
f011906f:	83 c4 10             	add    $0x10,%esp

	return 1;
f0119072:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0119077:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011907a:	5b                   	pop    %ebx
f011907b:	5f                   	pop    %edi
f011907c:	5d                   	pop    %ebp
f011907d:	c3                   	ret    

f011907e <test_kmalloc_firstfit1>:


int test_kmalloc_firstfit1()
{
f011907e:	55                   	push   %ebp
f011907f:	89 e5                	mov    %esp,%ebp
f0119081:	57                   	push   %edi
f0119082:	83 ec 64             	sub    $0x64,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f0119085:	83 ec 0c             	sub    $0xc,%esp
f0119088:	68 60 c1 12 f0       	push   $0xf012c160
f011908d:	e8 da 7e fe ff       	call   f0100f6c <cprintf>
f0119092:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0119095:	83 ec 0c             	sub    $0xc,%esp
f0119098:	68 90 c1 12 f0       	push   $0xf012c190
f011909d:	e8 ca 7e fe ff       	call   f0100f6c <cprintf>
f01190a2:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01190a5:	83 ec 0c             	sub    $0xc,%esp
f01190a8:	68 60 c1 12 f0       	push   $0xf012c160
f01190ad:	e8 ba 7e fe ff       	call   f0100f6c <cprintf>
f01190b2:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f01190b5:	8d 55 98             	lea    -0x68(%ebp),%edx
f01190b8:	b9 14 00 00 00       	mov    $0x14,%ecx
f01190bd:	b8 00 00 00 00       	mov    $0x0,%eax
f01190c2:	89 d7                	mov    %edx,%edi
f01190c4:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;
	int eval = 0;
f01190c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool correct = 1 ;
f01190cd:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	correct = 1 ;
f01190d4:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f01190db:	e8 29 49 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01190e0:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f01190e3:	e8 58 b7 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01190e8:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f01190eb:	83 ec 0c             	sub    $0xc,%esp
f01190ee:	68 00 fc 0f 00       	push   $0xffc00
f01190f3:	e8 be f9 fe ff       	call   f0108ab6 <kmalloc>
f01190f8:	83 c4 10             	add    $0x10,%esp
f01190fb:	89 45 98             	mov    %eax,-0x68(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f01190fe:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119101:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f0119106:	74 17                	je     f011911f <test_kmalloc_firstfit1+0xa1>
f0119108:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011910f:	83 ec 0c             	sub    $0xc,%esp
f0119112:	68 58 c4 12 f0       	push   $0xf012c458
f0119117:	e8 50 7e fe ff       	call   f0100f6c <cprintf>
f011911c:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011911f:	e8 1c b7 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119124:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0119127:	74 17                	je     f0119140 <test_kmalloc_firstfit1+0xc2>
f0119129:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119130:	83 ec 0c             	sub    $0xc,%esp
f0119133:	68 20 c2 12 f0       	push   $0xf012c220
f0119138:	e8 2f 7e fe ff       	call   f0100f6c <cprintf>
f011913d:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f0119140:	e8 c4 48 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119145:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0119148:	29 c2                	sub    %eax,%edx
f011914a:	89 d0                	mov    %edx,%eax
f011914c:	3d ff 00 00 00       	cmp    $0xff,%eax
f0119151:	77 17                	ja     f011916a <test_kmalloc_firstfit1+0xec>
f0119153:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011915a:	83 ec 0c             	sub    $0xc,%esp
f011915d:	68 89 c4 12 f0       	push   $0xf012c489
f0119162:	e8 05 7e fe ff       	call   f0100f6c <cprintf>
f0119167:	83 c4 10             	add    $0x10,%esp

		//Allocate 1 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011916a:	e8 9a 48 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011916f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f0119172:	e8 c9 b6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119177:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011917a:	83 ec 0c             	sub    $0xc,%esp
f011917d:	68 00 fc 0f 00       	push   $0xffc00
f0119182:	e8 2f f9 fe ff       	call   f0108ab6 <kmalloc>
f0119187:	83 c4 10             	add    $0x10,%esp
f011918a:	89 45 9c             	mov    %eax,-0x64(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011918d:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0119190:	3d 00 10 10 f8       	cmp    $0xf8101000,%eax
f0119195:	74 17                	je     f01191ae <test_kmalloc_firstfit1+0x130>
f0119197:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011919e:	83 ec 0c             	sub    $0xc,%esp
f01191a1:	68 58 c4 12 f0       	push   $0xf012c458
f01191a6:	e8 c1 7d fe ff       	call   f0100f6c <cprintf>
f01191ab:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01191ae:	e8 8d b6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01191b3:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01191b6:	74 17                	je     f01191cf <test_kmalloc_firstfit1+0x151>
f01191b8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01191bf:	83 ec 0c             	sub    $0xc,%esp
f01191c2:	68 20 c2 12 f0       	push   $0xf012c220
f01191c7:	e8 a0 7d fe ff       	call   f0100f6c <cprintf>
f01191cc:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f01191cf:	e8 35 48 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01191d4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01191d7:	29 c2                	sub    %eax,%edx
f01191d9:	89 d0                	mov    %edx,%eax
f01191db:	3d ff 00 00 00       	cmp    $0xff,%eax
f01191e0:	77 17                	ja     f01191f9 <test_kmalloc_firstfit1+0x17b>
f01191e2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01191e9:	83 ec 0c             	sub    $0xc,%esp
f01191ec:	68 89 c4 12 f0       	push   $0xf012c489
f01191f1:	e8 76 7d fe ff       	call   f0100f6c <cprintf>
f01191f6:	83 c4 10             	add    $0x10,%esp

		//Allocate 1 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f01191f9:	e8 0b 48 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01191fe:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f0119201:	e8 3a b6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119206:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f0119209:	83 ec 0c             	sub    $0xc,%esp
f011920c:	68 00 fc 0f 00       	push   $0xffc00
f0119211:	e8 a0 f8 fe ff       	call   f0108ab6 <kmalloc>
f0119216:	83 c4 10             	add    $0x10,%esp
f0119219:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011921c:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011921f:	3d 00 10 20 f8       	cmp    $0xf8201000,%eax
f0119224:	74 17                	je     f011923d <test_kmalloc_firstfit1+0x1bf>
f0119226:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011922d:	83 ec 0c             	sub    $0xc,%esp
f0119230:	68 58 c4 12 f0       	push   $0xf012c458
f0119235:	e8 32 7d fe ff       	call   f0100f6c <cprintf>
f011923a:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011923d:	e8 fe b5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119242:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0119245:	74 17                	je     f011925e <test_kmalloc_firstfit1+0x1e0>
f0119247:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011924e:	83 ec 0c             	sub    $0xc,%esp
f0119251:	68 20 c2 12 f0       	push   $0xf012c220
f0119256:	e8 11 7d fe ff       	call   f0100f6c <cprintf>
f011925b:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f011925e:	e8 a6 47 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119263:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0119266:	29 c2                	sub    %eax,%edx
f0119268:	89 d0                	mov    %edx,%eax
f011926a:	3d ff 00 00 00       	cmp    $0xff,%eax
f011926f:	77 17                	ja     f0119288 <test_kmalloc_firstfit1+0x20a>
f0119271:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119278:	83 ec 0c             	sub    $0xc,%esp
f011927b:	68 89 c4 12 f0       	push   $0xf012c489
f0119280:	e8 e7 7c fe ff       	call   f0100f6c <cprintf>
f0119285:	83 c4 10             	add    $0x10,%esp

		//Allocate 1 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f0119288:	e8 7c 47 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011928d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f0119290:	e8 ab b5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119295:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f0119298:	83 ec 0c             	sub    $0xc,%esp
f011929b:	68 00 fc 0f 00       	push   $0xffc00
f01192a0:	e8 11 f8 fe ff       	call   f0108ab6 <kmalloc>
f01192a5:	83 c4 10             	add    $0x10,%esp
f01192a8:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f01192ab:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01192ae:	3d 00 10 30 f8       	cmp    $0xf8301000,%eax
f01192b3:	74 17                	je     f01192cc <test_kmalloc_firstfit1+0x24e>
f01192b5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01192bc:	83 ec 0c             	sub    $0xc,%esp
f01192bf:	68 58 c4 12 f0       	push   $0xf012c458
f01192c4:	e8 a3 7c fe ff       	call   f0100f6c <cprintf>
f01192c9:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01192cc:	e8 6f b5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01192d1:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01192d4:	74 17                	je     f01192ed <test_kmalloc_firstfit1+0x26f>
f01192d6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01192dd:	83 ec 0c             	sub    $0xc,%esp
f01192e0:	68 20 c2 12 f0       	push   $0xf012c220
f01192e5:	e8 82 7c fe ff       	call   f0100f6c <cprintf>
f01192ea:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f01192ed:	e8 17 47 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01192f2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01192f5:	29 c2                	sub    %eax,%edx
f01192f7:	89 d0                	mov    %edx,%eax
f01192f9:	3d ff 00 00 00       	cmp    $0xff,%eax
f01192fe:	77 17                	ja     f0119317 <test_kmalloc_firstfit1+0x299>
f0119300:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119307:	83 ec 0c             	sub    $0xc,%esp
f011930a:	68 89 c4 12 f0       	push   $0xf012c489
f011930f:	e8 58 7c fe ff       	call   f0100f6c <cprintf>
f0119314:	83 c4 10             	add    $0x10,%esp

		//Allocate 2 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f0119317:	e8 ed 46 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011931c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011931f:	e8 1c b5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119324:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f0119327:	83 ec 0c             	sub    $0xc,%esp
f011932a:	68 00 fc 1f 00       	push   $0x1ffc00
f011932f:	e8 82 f7 fe ff       	call   f0108ab6 <kmalloc>
f0119334:	83 c4 10             	add    $0x10,%esp
f0119337:	89 45 a8             	mov    %eax,-0x58(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011933a:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011933d:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f0119342:	74 17                	je     f011935b <test_kmalloc_firstfit1+0x2dd>
f0119344:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011934b:	83 ec 0c             	sub    $0xc,%esp
f011934e:	68 58 c4 12 f0       	push   $0xf012c458
f0119353:	e8 14 7c fe ff       	call   f0100f6c <cprintf>
f0119358:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011935b:	e8 e0 b4 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119360:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0119363:	74 17                	je     f011937c <test_kmalloc_firstfit1+0x2fe>
f0119365:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011936c:	83 ec 0c             	sub    $0xc,%esp
f011936f:	68 20 c2 12 f0       	push   $0xf012c220
f0119374:	e8 f3 7b fe ff       	call   f0100f6c <cprintf>
f0119379:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f011937c:	e8 88 46 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119381:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0119384:	29 c2                	sub    %eax,%edx
f0119386:	89 d0                	mov    %edx,%eax
f0119388:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011938d:	77 17                	ja     f01193a6 <test_kmalloc_firstfit1+0x328>
f011938f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119396:	83 ec 0c             	sub    $0xc,%esp
f0119399:	68 89 c4 12 f0       	push   $0xf012c489
f011939e:	e8 c9 7b fe ff       	call   f0100f6c <cprintf>
f01193a3:	83 c4 10             	add    $0x10,%esp

		//Allocate 2 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f01193a6:	e8 5e 46 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01193ab:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f01193ae:	e8 8d b4 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01193b3:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f01193b6:	83 ec 0c             	sub    $0xc,%esp
f01193b9:	68 00 fc 1f 00       	push   $0x1ffc00
f01193be:	e8 f3 f6 fe ff       	call   f0108ab6 <kmalloc>
f01193c3:	83 c4 10             	add    $0x10,%esp
f01193c6:	89 45 ac             	mov    %eax,-0x54(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f01193c9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01193cc:	3d 00 10 60 f8       	cmp    $0xf8601000,%eax
f01193d1:	74 17                	je     f01193ea <test_kmalloc_firstfit1+0x36c>
f01193d3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01193da:	83 ec 0c             	sub    $0xc,%esp
f01193dd:	68 58 c4 12 f0       	push   $0xf012c458
f01193e2:	e8 85 7b fe ff       	call   f0100f6c <cprintf>
f01193e7:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01193ea:	e8 51 b4 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01193ef:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01193f2:	74 17                	je     f011940b <test_kmalloc_firstfit1+0x38d>
f01193f4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01193fb:	83 ec 0c             	sub    $0xc,%esp
f01193fe:	68 20 c2 12 f0       	push   $0xf012c220
f0119403:	e8 64 7b fe ff       	call   f0100f6c <cprintf>
f0119408:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f011940b:	e8 f9 45 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119410:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0119413:	29 c2                	sub    %eax,%edx
f0119415:	89 d0                	mov    %edx,%eax
f0119417:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011941c:	77 17                	ja     f0119435 <test_kmalloc_firstfit1+0x3b7>
f011941e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119425:	83 ec 0c             	sub    $0xc,%esp
f0119428:	68 89 c4 12 f0       	push   $0xf012c489
f011942d:	e8 3a 7b fe ff       	call   f0100f6c <cprintf>
f0119432:	83 c4 10             	add    $0x10,%esp

		//Allocate 3 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f0119435:	e8 cf 45 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011943a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011943d:	e8 fe b3 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119442:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f0119445:	83 ec 0c             	sub    $0xc,%esp
f0119448:	68 00 fc 2f 00       	push   $0x2ffc00
f011944d:	e8 64 f6 fe ff       	call   f0108ab6 <kmalloc>
f0119452:	83 c4 10             	add    $0x10,%esp
f0119455:	89 45 b0             	mov    %eax,-0x50(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f0119458:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011945b:	3d 00 10 80 f8       	cmp    $0xf8801000,%eax
f0119460:	74 17                	je     f0119479 <test_kmalloc_firstfit1+0x3fb>
f0119462:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119469:	83 ec 0c             	sub    $0xc,%esp
f011946c:	68 58 c4 12 f0       	push   $0xf012c458
f0119471:	e8 f6 7a fe ff       	call   f0100f6c <cprintf>
f0119476:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0119479:	e8 c2 b3 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011947e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0119481:	74 17                	je     f011949a <test_kmalloc_firstfit1+0x41c>
f0119483:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011948a:	83 ec 0c             	sub    $0xc,%esp
f011948d:	68 20 c2 12 f0       	push   $0xf012c220
f0119492:	e8 d5 7a fe ff       	call   f0100f6c <cprintf>
f0119497:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: \n"); }
f011949a:	e8 6a 45 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011949f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01194a2:	29 c2                	sub    %eax,%edx
f01194a4:	89 d0                	mov    %edx,%eax
f01194a6:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f01194ab:	77 17                	ja     f01194c4 <test_kmalloc_firstfit1+0x446>
f01194ad:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01194b4:	83 ec 0c             	sub    $0xc,%esp
f01194b7:	68 89 c4 12 f0       	push   $0xf012c489
f01194bc:	e8 ab 7a fe ff       	call   f0100f6c <cprintf>
f01194c1:	83 c4 10             	add    $0x10,%esp

		//Allocate 3 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f01194c4:	e8 40 45 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01194c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f01194cc:	e8 6f b3 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01194d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f01194d4:	83 ec 0c             	sub    $0xc,%esp
f01194d7:	68 00 fc 2f 00       	push   $0x2ffc00
f01194dc:	e8 d5 f5 fe ff       	call   f0108ab6 <kmalloc>
f01194e1:	83 c4 10             	add    $0x10,%esp
f01194e4:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f01194e7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01194ea:	3d 00 10 b0 f8       	cmp    $0xf8b01000,%eax
f01194ef:	74 17                	je     f0119508 <test_kmalloc_firstfit1+0x48a>
f01194f1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01194f8:	83 ec 0c             	sub    $0xc,%esp
f01194fb:	68 58 c4 12 f0       	push   $0xf012c458
f0119500:	e8 67 7a fe ff       	call   f0100f6c <cprintf>
f0119505:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0119508:	e8 33 b3 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011950d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0119510:	74 17                	je     f0119529 <test_kmalloc_firstfit1+0x4ab>
f0119512:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119519:	83 ec 0c             	sub    $0xc,%esp
f011951c:	68 20 c2 12 f0       	push   $0xf012c220
f0119521:	e8 46 7a fe ff       	call   f0100f6c <cprintf>
f0119526:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: \n"); }
f0119529:	e8 db 44 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011952e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0119531:	29 c2                	sub    %eax,%edx
f0119533:	89 d0                	mov    %edx,%eax
f0119535:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011953a:	77 17                	ja     f0119553 <test_kmalloc_firstfit1+0x4d5>
f011953c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119543:	83 ec 0c             	sub    $0xc,%esp
f0119546:	68 89 c4 12 f0       	push   $0xf012c489
f011954b:	e8 1c 7a fe ff       	call   f0100f6c <cprintf>
f0119550:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f0119553:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0119557:	74 04                	je     f011955d <test_kmalloc_firstfit1+0x4df>
f0119559:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011955d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = (int)sys_calculate_free_frames() ;
f0119564:	e8 a0 44 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119569:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011956c:	e8 cf b2 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119571:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[1]);
f0119574:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0119577:	83 ec 0c             	sub    $0xc,%esp
f011957a:	50                   	push   %eax
f011957b:	e8 50 f5 fe ff       	call   f0108ad0 <kfree>
f0119580:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0119583:	e8 b8 b2 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119588:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011958b:	74 17                	je     f01195a4 <test_kmalloc_firstfit1+0x526>
f011958d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119594:	83 ec 0c             	sub    $0xc,%esp
f0119597:	68 20 c2 12 f0       	push   $0xf012c220
f011959c:	e8 cb 79 fe ff       	call   f0100f6c <cprintf>
f01195a1:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 256) { correct = 0; cprintf("Wrong free: \n"); }
f01195a4:	e8 60 44 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01195a9:	2b 45 ec             	sub    -0x14(%ebp),%eax
f01195ac:	3d ff 00 00 00       	cmp    $0xff,%eax
f01195b1:	77 17                	ja     f01195ca <test_kmalloc_firstfit1+0x54c>
f01195b3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01195ba:	83 ec 0c             	sub    $0xc,%esp
f01195bd:	68 9d c4 12 f0       	push   $0xf012c49d
f01195c2:	e8 a5 79 fe ff       	call   f0100f6c <cprintf>
f01195c7:	83 c4 10             	add    $0x10,%esp

		//2 MB Hole
		freeFrames = (int)sys_calculate_free_frames() ;
f01195ca:	e8 3a 44 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01195cf:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f01195d2:	e8 69 b2 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01195d7:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[4]);
f01195da:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01195dd:	83 ec 0c             	sub    $0xc,%esp
f01195e0:	50                   	push   %eax
f01195e1:	e8 ea f4 fe ff       	call   f0108ad0 <kfree>
f01195e6:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01195e9:	e8 52 b2 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01195ee:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01195f1:	74 17                	je     f011960a <test_kmalloc_firstfit1+0x58c>
f01195f3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01195fa:	83 ec 0c             	sub    $0xc,%esp
f01195fd:	68 20 c2 12 f0       	push   $0xf012c220
f0119602:	e8 65 79 fe ff       	call   f0100f6c <cprintf>
f0119607:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong free: \n"); }
f011960a:	e8 fa 43 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011960f:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0119612:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f0119617:	77 17                	ja     f0119630 <test_kmalloc_firstfit1+0x5b2>
f0119619:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119620:	83 ec 0c             	sub    $0xc,%esp
f0119623:	68 9d c4 12 f0       	push   $0xf012c49d
f0119628:	e8 3f 79 fe ff       	call   f0100f6c <cprintf>
f011962d:	83 c4 10             	add    $0x10,%esp

		//3 MB Hole
		freeFrames = (int)sys_calculate_free_frames() ;
f0119630:	e8 d4 43 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119635:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f0119638:	e8 03 b2 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011963d:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[6]);
f0119640:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119643:	83 ec 0c             	sub    $0xc,%esp
f0119646:	50                   	push   %eax
f0119647:	e8 84 f4 fe ff       	call   f0108ad0 <kfree>
f011964c:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011964f:	e8 ec b1 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119654:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0119657:	74 17                	je     f0119670 <test_kmalloc_firstfit1+0x5f2>
f0119659:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119660:	83 ec 0c             	sub    $0xc,%esp
f0119663:	68 20 c2 12 f0       	push   $0xf012c220
f0119668:	e8 ff 78 fe ff       	call   f0100f6c <cprintf>
f011966d:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 768) { correct = 0; cprintf("Wrong free: \n"); }
f0119670:	e8 94 43 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119675:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0119678:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011967d:	77 17                	ja     f0119696 <test_kmalloc_firstfit1+0x618>
f011967f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119686:	83 ec 0c             	sub    $0xc,%esp
f0119689:	68 9d c4 12 f0       	push   $0xf012c49d
f011968e:	e8 d9 78 fe ff       	call   f0100f6c <cprintf>
f0119693:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f0119696:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011969a:	74 04                	je     f01196a0 <test_kmalloc_firstfit1+0x622>
f011969c:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f01196a0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = (int)sys_calculate_free_frames() ;
f01196a7:	e8 5d 43 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01196ac:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f01196af:	e8 8c b1 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01196b4:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f01196b7:	83 ec 0c             	sub    $0xc,%esp
f01196ba:	68 00 fc 07 00       	push   $0x7fc00
f01196bf:	e8 f2 f3 fe ff       	call   f0108ab6 <kmalloc>
f01196c4:	83 c4 10             	add    $0x10,%esp
f01196c7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f01196ca:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01196cd:	3d 00 10 10 f8       	cmp    $0xf8101000,%eax
f01196d2:	74 17                	je     f01196eb <test_kmalloc_firstfit1+0x66d>
f01196d4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01196db:	83 ec 0c             	sub    $0xc,%esp
f01196de:	68 58 c4 12 f0       	push   $0xf012c458
f01196e3:	e8 84 78 fe ff       	call   f0100f6c <cprintf>
f01196e8:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01196eb:	e8 50 b1 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01196f0:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01196f3:	74 17                	je     f011970c <test_kmalloc_firstfit1+0x68e>
f01196f5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01196fc:	83 ec 0c             	sub    $0xc,%esp
f01196ff:	68 20 c2 12 f0       	push   $0xf012c220
f0119704:	e8 63 78 fe ff       	call   f0100f6c <cprintf>
f0119709:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 128) { correct = 0; cprintf("Wrong allocation: \n"); }
f011970c:	e8 f8 42 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119711:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0119714:	29 c2                	sub    %eax,%edx
f0119716:	89 d0                	mov    %edx,%eax
f0119718:	83 f8 7f             	cmp    $0x7f,%eax
f011971b:	77 17                	ja     f0119734 <test_kmalloc_firstfit1+0x6b6>
f011971d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119724:	83 ec 0c             	sub    $0xc,%esp
f0119727:	68 89 c4 12 f0       	push   $0xf012c489
f011972c:	e8 3b 78 fe ff       	call   f0100f6c <cprintf>
f0119731:	83 c4 10             	add    $0x10,%esp

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = (int)sys_calculate_free_frames() ;
f0119734:	e8 d0 42 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119739:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011973c:	e8 ff b0 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119741:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f0119744:	83 ec 0c             	sub    $0xc,%esp
f0119747:	68 00 fc 0f 00       	push   $0xffc00
f011974c:	e8 65 f3 fe ff       	call   f0108ab6 <kmalloc>
f0119751:	83 c4 10             	add    $0x10,%esp
f0119754:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f0119757:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011975a:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011975f:	74 17                	je     f0119778 <test_kmalloc_firstfit1+0x6fa>
f0119761:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119768:	83 ec 0c             	sub    $0xc,%esp
f011976b:	68 58 c4 12 f0       	push   $0xf012c458
f0119770:	e8 f7 77 fe ff       	call   f0100f6c <cprintf>
f0119775:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0119778:	e8 c3 b0 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011977d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0119780:	74 17                	je     f0119799 <test_kmalloc_firstfit1+0x71b>
f0119782:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119789:	83 ec 0c             	sub    $0xc,%esp
f011978c:	68 20 c2 12 f0       	push   $0xf012c220
f0119791:	e8 d6 77 fe ff       	call   f0100f6c <cprintf>
f0119796:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f0119799:	e8 6b 42 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011979e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01197a1:	29 c2                	sub    %eax,%edx
f01197a3:	89 d0                	mov    %edx,%eax
f01197a5:	3d ff 00 00 00       	cmp    $0xff,%eax
f01197aa:	77 17                	ja     f01197c3 <test_kmalloc_firstfit1+0x745>
f01197ac:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01197b3:	83 ec 0c             	sub    $0xc,%esp
f01197b6:	68 89 c4 12 f0       	push   $0xf012c489
f01197bb:	e8 ac 77 fe ff       	call   f0100f6c <cprintf>
f01197c0:	83 c4 10             	add    $0x10,%esp


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = (int)sys_calculate_free_frames() ;
f01197c3:	e8 41 42 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01197c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f01197cb:	e8 70 b0 fe ff       	call   f0104840 <pf_calculate_free_frames>
f01197d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f01197d3:	83 ec 0c             	sub    $0xc,%esp
f01197d6:	68 00 fc 03 00       	push   $0x3fc00
f01197db:	e8 d6 f2 fe ff       	call   f0108ab6 <kmalloc>
f01197e0:	83 c4 10             	add    $0x10,%esp
f01197e3:	89 45 c0             	mov    %eax,-0x40(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f01197e6:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01197e9:	3d 00 10 18 f8       	cmp    $0xf8181000,%eax
f01197ee:	74 17                	je     f0119807 <test_kmalloc_firstfit1+0x789>
f01197f0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01197f7:	83 ec 0c             	sub    $0xc,%esp
f01197fa:	68 58 c4 12 f0       	push   $0xf012c458
f01197ff:	e8 68 77 fe ff       	call   f0100f6c <cprintf>
f0119804:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0119807:	e8 34 b0 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011980c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011980f:	74 17                	je     f0119828 <test_kmalloc_firstfit1+0x7aa>
f0119811:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119818:	83 ec 0c             	sub    $0xc,%esp
f011981b:	68 20 c2 12 f0       	push   $0xf012c220
f0119820:	e8 47 77 fe ff       	call   f0100f6c <cprintf>
f0119825:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 64) { correct = 0; cprintf("Wrong allocation: \n"); }
f0119828:	e8 dc 41 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011982d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0119830:	29 c2                	sub    %eax,%edx
f0119832:	89 d0                	mov    %edx,%eax
f0119834:	83 f8 3f             	cmp    $0x3f,%eax
f0119837:	77 17                	ja     f0119850 <test_kmalloc_firstfit1+0x7d2>
f0119839:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119840:	83 ec 0c             	sub    $0xc,%esp
f0119843:	68 89 c4 12 f0       	push   $0xf012c489
f0119848:	e8 1f 77 fe ff       	call   f0100f6c <cprintf>
f011984d:	83 c4 10             	add    $0x10,%esp

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = (int)sys_calculate_free_frames() ;
f0119850:	e8 b4 41 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119855:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f0119858:	e8 e3 af fe ff       	call   f0104840 <pf_calculate_free_frames>
f011985d:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f0119860:	83 ec 0c             	sub    $0xc,%esp
f0119863:	68 00 00 20 00       	push   $0x200000
f0119868:	e8 49 f2 fe ff       	call   f0108ab6 <kmalloc>
f011986d:	83 c4 10             	add    $0x10,%esp
f0119870:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f0119873:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119876:	3d 00 10 80 f8       	cmp    $0xf8801000,%eax
f011987b:	74 17                	je     f0119894 <test_kmalloc_firstfit1+0x816>
f011987d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119884:	83 ec 0c             	sub    $0xc,%esp
f0119887:	68 58 c4 12 f0       	push   $0xf012c458
f011988c:	e8 db 76 fe ff       	call   f0100f6c <cprintf>
f0119891:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f0119894:	e8 70 41 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119899:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011989c:	29 c2                	sub    %eax,%edx
f011989e:	89 d0                	mov    %edx,%eax
f01198a0:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f01198a5:	77 17                	ja     f01198be <test_kmalloc_firstfit1+0x840>
f01198a7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01198ae:	83 ec 0c             	sub    $0xc,%esp
f01198b1:	68 89 c4 12 f0       	push   $0xf012c489
f01198b6:	e8 b1 76 fe ff       	call   f0100f6c <cprintf>
f01198bb:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f01198be:	e8 7d af fe ff       	call   f0104840 <pf_calculate_free_frames>
f01198c3:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01198c6:	74 17                	je     f01198df <test_kmalloc_firstfit1+0x861>
f01198c8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01198cf:	83 ec 0c             	sub    $0xc,%esp
f01198d2:	68 20 c2 12 f0       	push   $0xf012c220
f01198d7:	e8 90 76 fe ff       	call   f0100f6c <cprintf>
f01198dc:	83 c4 10             	add    $0x10,%esp


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = (int)sys_calculate_free_frames() ;
f01198df:	e8 25 41 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01198e4:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f01198e7:	e8 54 af fe ff       	call   f0104840 <pf_calculate_free_frames>
f01198ec:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f01198ef:	83 ec 0c             	sub    $0xc,%esp
f01198f2:	68 00 fc 3f 00       	push   $0x3ffc00
f01198f7:	e8 ba f1 fe ff       	call   f0108ab6 <kmalloc>
f01198fc:	83 c4 10             	add    $0x10,%esp
f01198ff:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f0119902:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119905:	3d 00 10 e0 f8       	cmp    $0xf8e01000,%eax
f011990a:	74 17                	je     f0119923 <test_kmalloc_firstfit1+0x8a5>
f011990c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119913:	83 ec 0c             	sub    $0xc,%esp
f0119916:	68 58 c4 12 f0       	push   $0xf012c458
f011991b:	e8 4c 76 fe ff       	call   f0100f6c <cprintf>
f0119920:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0119923:	e8 18 af fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119928:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011992b:	74 17                	je     f0119944 <test_kmalloc_firstfit1+0x8c6>
f011992d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119934:	83 ec 0c             	sub    $0xc,%esp
f0119937:	68 20 c2 12 f0       	push   $0xf012c220
f011993c:	e8 2b 76 fe ff       	call   f0100f6c <cprintf>
f0119941:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 1024) { correct = 0; cprintf("Wrong allocation: \n"); }
f0119944:	e8 c0 40 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119949:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011994c:	29 c2                	sub    %eax,%edx
f011994e:	89 d0                	mov    %edx,%eax
f0119950:	3d ff 03 00 00       	cmp    $0x3ff,%eax
f0119955:	77 17                	ja     f011996e <test_kmalloc_firstfit1+0x8f0>
f0119957:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011995e:	83 ec 0c             	sub    $0xc,%esp
f0119961:	68 89 c4 12 f0       	push   $0xf012c489
f0119966:	e8 01 76 fe ff       	call   f0100f6c <cprintf>
f011996b:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=40 ;
f011996e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0119972:	74 04                	je     f0119978 <test_kmalloc_firstfit1+0x8fa>
f0119974:	83 45 f4 28          	addl   $0x28,-0xc(%ebp)

	correct = 1 ;
f0119978:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011997f:	e8 85 40 ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119984:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f0119987:	e8 b4 ae fe ff       	call   f0104840 <pf_calculate_free_frames>
f011998c:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[2]);
f011998f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119992:	83 ec 0c             	sub    $0xc,%esp
f0119995:	50                   	push   %eax
f0119996:	e8 35 f1 fe ff       	call   f0108ad0 <kfree>
f011999b:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011999e:	e8 9d ae fe ff       	call   f0104840 <pf_calculate_free_frames>
f01199a3:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01199a6:	74 17                	je     f01199bf <test_kmalloc_firstfit1+0x941>
f01199a8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01199af:	83 ec 0c             	sub    $0xc,%esp
f01199b2:	68 20 c2 12 f0       	push   $0xf012c220
f01199b7:	e8 b0 75 fe ff       	call   f0100f6c <cprintf>
f01199bc:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 256) { correct = 0; cprintf("Wrong free: \n"); }
f01199bf:	e8 45 40 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01199c4:	2b 45 ec             	sub    -0x14(%ebp),%eax
f01199c7:	3d ff 00 00 00       	cmp    $0xff,%eax
f01199cc:	77 17                	ja     f01199e5 <test_kmalloc_firstfit1+0x967>
f01199ce:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01199d5:	83 ec 0c             	sub    $0xc,%esp
f01199d8:	68 9d c4 12 f0       	push   $0xf012c49d
f01199dd:	e8 8a 75 fe ff       	call   f0100f6c <cprintf>
f01199e2:	83 c4 10             	add    $0x10,%esp

		//Next 1 MB Hole appended also
		freeFrames = (int)sys_calculate_free_frames() ;
f01199e5:	e8 1f 40 ff ff       	call   f010da09 <sys_calculate_free_frames>
f01199ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f01199ed:	e8 4e ae fe ff       	call   f0104840 <pf_calculate_free_frames>
f01199f2:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[3]);
f01199f5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01199f8:	83 ec 0c             	sub    $0xc,%esp
f01199fb:	50                   	push   %eax
f01199fc:	e8 cf f0 fe ff       	call   f0108ad0 <kfree>
f0119a01:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0119a04:	e8 37 ae fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119a09:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0119a0c:	74 17                	je     f0119a25 <test_kmalloc_firstfit1+0x9a7>
f0119a0e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119a15:	83 ec 0c             	sub    $0xc,%esp
f0119a18:	68 20 c2 12 f0       	push   $0xf012c220
f0119a1d:	e8 4a 75 fe ff       	call   f0100f6c <cprintf>
f0119a22:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 256) { correct = 0; cprintf("Wrong free: \n"); }
f0119a25:	e8 df 3f ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119a2a:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0119a2d:	3d ff 00 00 00       	cmp    $0xff,%eax
f0119a32:	77 17                	ja     f0119a4b <test_kmalloc_firstfit1+0x9cd>
f0119a34:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119a3b:	83 ec 0c             	sub    $0xc,%esp
f0119a3e:	68 9d c4 12 f0       	push   $0xf012c49d
f0119a43:	e8 24 75 fe ff       	call   f0100f6c <cprintf>
f0119a48:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f0119a4b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0119a4f:	74 04                	je     f0119a55 <test_kmalloc_firstfit1+0x9d7>
f0119a51:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f0119a55:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = (int)sys_calculate_free_frames() ;
f0119a5c:	e8 a8 3f ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119a61:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f0119a64:	e8 d7 ad fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119a69:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f0119a6c:	83 ec 0c             	sub    $0xc,%esp
f0119a6f:	68 00 00 10 00       	push   $0x100000
f0119a74:	e8 3d f0 fe ff       	call   f0108ab6 <kmalloc>
f0119a79:	83 c4 10             	add    $0x10,%esp
f0119a7c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f0119a7f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119a82:	3d 00 10 1c f8       	cmp    $0xf81c1000,%eax
f0119a87:	74 17                	je     f0119aa0 <test_kmalloc_firstfit1+0xa22>
f0119a89:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119a90:	83 ec 0c             	sub    $0xc,%esp
f0119a93:	68 58 c4 12 f0       	push   $0xf012c458
f0119a98:	e8 cf 74 fe ff       	call   f0100f6c <cprintf>
f0119a9d:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0119aa0:	e8 9b ad fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119aa5:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0119aa8:	74 17                	je     f0119ac1 <test_kmalloc_firstfit1+0xa43>
f0119aaa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119ab1:	83 ec 0c             	sub    $0xc,%esp
f0119ab4:	68 20 c2 12 f0       	push   $0xf012c220
f0119ab9:	e8 ae 74 fe ff       	call   f0100f6c <cprintf>
f0119abe:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: \n"); }
f0119ac1:	e8 43 3f ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119ac6:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0119ac9:	29 c2                	sub    %eax,%edx
f0119acb:	89 d0                	mov    %edx,%eax
f0119acd:	3d ff 00 00 00       	cmp    $0xff,%eax
f0119ad2:	77 17                	ja     f0119aeb <test_kmalloc_firstfit1+0xa6d>
f0119ad4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119adb:	83 ec 0c             	sub    $0xc,%esp
f0119ade:	68 89 c4 12 f0       	push   $0xf012c489
f0119ae3:	e8 84 74 fe ff       	call   f0100f6c <cprintf>
f0119ae8:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=30 ;
f0119aeb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0119aef:	74 04                	je     f0119af5 <test_kmalloc_firstfit1+0xa77>
f0119af1:	83 45 f4 1e          	addl   $0x1e,-0xc(%ebp)

	cprintf("test FIRST FIT allocation (1) completed. Eval = %d%\n", eval);
f0119af5:	83 ec 08             	sub    $0x8,%esp
f0119af8:	ff 75 f4             	pushl  -0xc(%ebp)
f0119afb:	68 ac c4 12 f0       	push   $0xf012c4ac
f0119b00:	e8 67 74 fe ff       	call   f0100f6c <cprintf>
f0119b05:	83 c4 10             	add    $0x10,%esp

	return 1;
f0119b08:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0119b0d:	8b 7d fc             	mov    -0x4(%ebp),%edi
f0119b10:	c9                   	leave  
f0119b11:	c3                   	ret    

f0119b12 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f0119b12:	55                   	push   %ebp
f0119b13:	89 e5                	mov    %esp,%ebp
f0119b15:	57                   	push   %edi
f0119b16:	53                   	push   %ebx
f0119b17:	83 ec 60             	sub    $0x60,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f0119b1a:	83 ec 0c             	sub    $0xc,%esp
f0119b1d:	68 60 c1 12 f0       	push   $0xf012c160
f0119b22:	e8 45 74 fe ff       	call   f0100f6c <cprintf>
f0119b27:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0119b2a:	83 ec 0c             	sub    $0xc,%esp
f0119b2d:	68 90 c1 12 f0       	push   $0xf012c190
f0119b32:	e8 35 74 fe ff       	call   f0100f6c <cprintf>
f0119b37:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0119b3a:	83 ec 0c             	sub    $0xc,%esp
f0119b3d:	68 60 c1 12 f0       	push   $0xf012c160
f0119b42:	e8 25 74 fe ff       	call   f0100f6c <cprintf>
f0119b47:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f0119b4a:	8d 55 98             	lea    -0x68(%ebp),%edx
f0119b4d:	b9 14 00 00 00       	mov    $0x14,%ecx
f0119b52:	b8 00 00 00 00       	mov    $0x0,%eax
f0119b57:	89 d7                	mov    %edx,%edi
f0119b59:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;
	int eval = 0;
f0119b5b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	bool correct = 1 ;
f0119b62:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)

	correct = 1 ;
f0119b69:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f0119b70:	83 ec 0c             	sub    $0xc,%esp
f0119b73:	68 01 e0 ff 07       	push   $0x7ffe001
f0119b78:	e8 39 ef fe ff       	call   f0108ab6 <kmalloc>
f0119b7d:	83 c4 10             	add    $0x10,%esp
f0119b80:	89 45 98             	mov    %eax,-0x68(%ebp)
		if (ptr_allocations[0] != NULL) { correct = 0; cprintf("kmalloc: Attempt to allocate more than heap size, should return NULL\n"); }
f0119b83:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119b86:	85 c0                	test   %eax,%eax
f0119b88:	74 17                	je     f0119ba1 <test_kmalloc_firstfit2+0x8f>
f0119b8a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119b91:	83 ec 0c             	sub    $0xc,%esp
f0119b94:	68 e4 c4 12 f0       	push   $0xf012c4e4
f0119b99:	e8 ce 73 fe ff       	call   f0100f6c <cprintf>
f0119b9e:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f0119ba1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0119ba5:	74 04                	je     f0119bab <test_kmalloc_firstfit2+0x99>
f0119ba7:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f0119bab:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f0119bb2:	e8 52 3e ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119bb7:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f0119bba:	e8 81 ac fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119bbf:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0119bc2:	83 ec 0c             	sub    $0xc,%esp
f0119bc5:	68 00 fc 1f 00       	push   $0x1ffc00
f0119bca:	e8 e7 ee fe ff       	call   f0108ab6 <kmalloc>
f0119bcf:	83 c4 10             	add    $0x10,%esp
f0119bd2:	89 45 98             	mov    %eax,-0x68(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f0119bd5:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119bd8:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f0119bdd:	74 17                	je     f0119bf6 <test_kmalloc_firstfit2+0xe4>
f0119bdf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119be6:	83 ec 0c             	sub    $0xc,%esp
f0119be9:	68 58 c4 12 f0       	push   $0xf012c458
f0119bee:	e8 79 73 fe ff       	call   f0100f6c <cprintf>
f0119bf3:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0119bf6:	e8 45 ac fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119bfb:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0119bfe:	74 17                	je     f0119c17 <test_kmalloc_firstfit2+0x105>
f0119c00:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119c07:	83 ec 0c             	sub    $0xc,%esp
f0119c0a:	68 20 c2 12 f0       	push   $0xf012c220
f0119c0f:	e8 58 73 fe ff       	call   f0100f6c <cprintf>
f0119c14:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f0119c17:	e8 ed 3d ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119c1c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0119c1f:	29 c2                	sub    %eax,%edx
f0119c21:	89 d0                	mov    %edx,%eax
f0119c23:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f0119c28:	77 17                	ja     f0119c41 <test_kmalloc_firstfit2+0x12f>
f0119c2a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119c31:	83 ec 0c             	sub    $0xc,%esp
f0119c34:	68 89 c4 12 f0       	push   $0xf012c489
f0119c39:	e8 2e 73 fe ff       	call   f0100f6c <cprintf>
f0119c3e:	83 c4 10             	add    $0x10,%esp

		//2 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f0119c41:	e8 c3 3d ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119c46:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f0119c49:	e8 f2 ab fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119c4e:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0119c51:	83 ec 0c             	sub    $0xc,%esp
f0119c54:	68 00 fc 1f 00       	push   $0x1ffc00
f0119c59:	e8 58 ee fe ff       	call   f0108ab6 <kmalloc>
f0119c5e:	83 c4 10             	add    $0x10,%esp
f0119c61:	89 45 9c             	mov    %eax,-0x64(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f0119c64:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0119c67:	3d 00 10 20 f8       	cmp    $0xf8201000,%eax
f0119c6c:	74 17                	je     f0119c85 <test_kmalloc_firstfit2+0x173>
f0119c6e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119c75:	83 ec 0c             	sub    $0xc,%esp
f0119c78:	68 58 c4 12 f0       	push   $0xf012c458
f0119c7d:	e8 ea 72 fe ff       	call   f0100f6c <cprintf>
f0119c82:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0119c85:	e8 b6 ab fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119c8a:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0119c8d:	74 17                	je     f0119ca6 <test_kmalloc_firstfit2+0x194>
f0119c8f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119c96:	83 ec 0c             	sub    $0xc,%esp
f0119c99:	68 20 c2 12 f0       	push   $0xf012c220
f0119c9e:	e8 c9 72 fe ff       	call   f0100f6c <cprintf>
f0119ca3:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: \n"); }
f0119ca6:	e8 5e 3d ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119cab:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0119cae:	29 c2                	sub    %eax,%edx
f0119cb0:	89 d0                	mov    %edx,%eax
f0119cb2:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f0119cb7:	77 17                	ja     f0119cd0 <test_kmalloc_firstfit2+0x1be>
f0119cb9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119cc0:	83 ec 0c             	sub    $0xc,%esp
f0119cc3:	68 89 c4 12 f0       	push   $0xf012c489
f0119cc8:	e8 9f 72 fe ff       	call   f0100f6c <cprintf>
f0119ccd:	83 c4 10             	add    $0x10,%esp

		//1 KB (should be allocated by dynamic allocator not page allocator)
		freeFrames = (int)sys_calculate_free_frames() ;
f0119cd0:	e8 34 3d ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119cd5:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f0119cd8:	e8 63 ab fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119cdd:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[2] = kmalloc(1*kilo);
f0119ce0:	83 ec 0c             	sub    $0xc,%esp
f0119ce3:	68 00 04 00 00       	push   $0x400
f0119ce8:	e8 c9 ed fe ff       	call   f0108ab6 <kmalloc>
f0119ced:	83 c4 10             	add    $0x10,%esp
f0119cf0:	89 45 a0             	mov    %eax,-0x60(%ebp)
		if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f0119cf3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119cf6:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0119cfb:	76 22                	jbe    f0119d1f <test_kmalloc_firstfit2+0x20d>
f0119cfd:	8b 5d a0             	mov    -0x60(%ebp),%ebx
f0119d00:	83 ec 0c             	sub    $0xc,%esp
f0119d03:	6a 00                	push   $0x0
f0119d05:	e8 a2 ed fe ff       	call   f0108aac <sbrk>
f0119d0a:	83 c4 10             	add    $0x10,%esp
f0119d0d:	39 c3                	cmp    %eax,%ebx
f0119d0f:	73 0e                	jae    f0119d1f <test_kmalloc_firstfit2+0x20d>
f0119d11:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119d14:	89 c2                	mov    %eax,%edx
f0119d16:	a1 98 9d 17 f0       	mov    0xf0179d98,%eax
f0119d1b:	39 c2                	cmp    %eax,%edx
f0119d1d:	72 17                	jb     f0119d36 <test_kmalloc_firstfit2+0x224>
		{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f0119d1f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119d26:	83 ec 0c             	sub    $0xc,%esp
f0119d29:	68 20 c3 12 f0       	push   $0xf012c320
f0119d2e:	e8 39 72 fe ff       	call   f0100f6c <cprintf>
f0119d33:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0119d36:	e8 05 ab fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119d3b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0119d3e:	74 17                	je     f0119d57 <test_kmalloc_firstfit2+0x245>
f0119d40:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119d47:	83 ec 0c             	sub    $0xc,%esp
f0119d4a:	68 20 c2 12 f0       	push   $0xf012c220
f0119d4f:	e8 18 72 fe ff       	call   f0100f6c <cprintf>
f0119d54:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - (int)sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//2 KB (should be allocated by dynamic allocator not page allocator)
		freeFrames = (int)sys_calculate_free_frames() ;
f0119d57:	e8 ad 3c ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119d5c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f0119d5f:	e8 dc aa fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119d64:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0119d67:	83 ec 0c             	sub    $0xc,%esp
f0119d6a:	68 00 08 00 00       	push   $0x800
f0119d6f:	e8 42 ed fe ff       	call   f0108ab6 <kmalloc>
f0119d74:	83 c4 10             	add    $0x10,%esp
f0119d77:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f0119d7a:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119d7d:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0119d82:	76 22                	jbe    f0119da6 <test_kmalloc_firstfit2+0x294>
f0119d84:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f0119d87:	83 ec 0c             	sub    $0xc,%esp
f0119d8a:	6a 00                	push   $0x0
f0119d8c:	e8 1b ed fe ff       	call   f0108aac <sbrk>
f0119d91:	83 c4 10             	add    $0x10,%esp
f0119d94:	39 c3                	cmp    %eax,%ebx
f0119d96:	73 0e                	jae    f0119da6 <test_kmalloc_firstfit2+0x294>
f0119d98:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119d9b:	89 c2                	mov    %eax,%edx
f0119d9d:	a1 98 9d 17 f0       	mov    0xf0179d98,%eax
f0119da2:	39 c2                	cmp    %eax,%edx
f0119da4:	72 17                	jb     f0119dbd <test_kmalloc_firstfit2+0x2ab>
		{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f0119da6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119dad:	83 ec 0c             	sub    $0xc,%esp
f0119db0:	68 20 c3 12 f0       	push   $0xf012c320
f0119db5:	e8 b2 71 fe ff       	call   f0100f6c <cprintf>
f0119dba:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0119dbd:	e8 7e aa fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119dc2:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0119dc5:	74 17                	je     f0119dde <test_kmalloc_firstfit2+0x2cc>
f0119dc7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119dce:	83 ec 0c             	sub    $0xc,%esp
f0119dd1:	68 20 c2 12 f0       	push   $0xf012c220
f0119dd6:	e8 91 71 fe ff       	call   f0100f6c <cprintf>
f0119ddb:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - (int)sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//1 KB (should be allocated by dynamic allocator not page allocator)
		freeFrames = (int)sys_calculate_free_frames() ;
f0119dde:	e8 26 3c ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119de3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f0119de6:	e8 55 aa fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119deb:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[4] = kmalloc(1*kilo);
f0119dee:	83 ec 0c             	sub    $0xc,%esp
f0119df1:	68 00 04 00 00       	push   $0x400
f0119df6:	e8 bb ec fe ff       	call   f0108ab6 <kmalloc>
f0119dfb:	83 c4 10             	add    $0x10,%esp
f0119dfe:	89 45 a8             	mov    %eax,-0x58(%ebp)
		if ((uint32) ptr_allocations[4] < KERNEL_HEAP_START || ptr_allocations[4] >= sbrk(0) || (uint32) ptr_allocations[4] >= da_limit)
f0119e01:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119e04:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f0119e09:	76 22                	jbe    f0119e2d <test_kmalloc_firstfit2+0x31b>
f0119e0b:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0119e0e:	83 ec 0c             	sub    $0xc,%esp
f0119e11:	6a 00                	push   $0x0
f0119e13:	e8 94 ec fe ff       	call   f0108aac <sbrk>
f0119e18:	83 c4 10             	add    $0x10,%esp
f0119e1b:	39 c3                	cmp    %eax,%ebx
f0119e1d:	73 0e                	jae    f0119e2d <test_kmalloc_firstfit2+0x31b>
f0119e1f:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0119e22:	89 c2                	mov    %eax,%edx
f0119e24:	a1 98 9d 17 f0       	mov    0xf0179d98,%eax
f0119e29:	39 c2                	cmp    %eax,%edx
f0119e2b:	72 17                	jb     f0119e44 <test_kmalloc_firstfit2+0x332>
		{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f0119e2d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119e34:	83 ec 0c             	sub    $0xc,%esp
f0119e37:	68 20 c3 12 f0       	push   $0xf012c320
f0119e3c:	e8 2b 71 fe ff       	call   f0100f6c <cprintf>
f0119e41:	83 c4 10             	add    $0x10,%esp
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0119e44:	e8 f7 a9 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119e49:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0119e4c:	74 17                	je     f0119e65 <test_kmalloc_firstfit2+0x353>
f0119e4e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119e55:	83 ec 0c             	sub    $0xc,%esp
f0119e58:	68 20 c2 12 f0       	push   $0xf012c220
f0119e5d:	e8 0a 71 fe ff       	call   f0100f6c <cprintf>
f0119e62:	83 c4 10             	add    $0x10,%esp
		//if ((freeFrames - (int)sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

		//1 KB Hole in Dynamic Allocator Area
		freeFrames = (int)sys_calculate_free_frames() ;
f0119e65:	e8 9f 3b ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119e6a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f0119e6d:	e8 ce a9 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119e72:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[2]);
f0119e75:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119e78:	83 ec 0c             	sub    $0xc,%esp
f0119e7b:	50                   	push   %eax
f0119e7c:	e8 4f ec fe ff       	call   f0108ad0 <kfree>
f0119e81:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0119e84:	e8 b7 a9 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119e89:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0119e8c:	74 17                	je     f0119ea5 <test_kmalloc_firstfit2+0x393>
f0119e8e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119e95:	83 ec 0c             	sub    $0xc,%esp
f0119e98:	68 20 c2 12 f0       	push   $0xf012c220
f0119e9d:	e8 ca 70 fe ff       	call   f0100f6c <cprintf>
f0119ea2:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) != 0) { correct = 0; cprintf("Wrong free: freeing a block from the dynamic allocator should not affect the free frames\n"); }
f0119ea5:	e8 5f 3b ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119eaa:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119ead:	74 17                	je     f0119ec6 <test_kmalloc_firstfit2+0x3b4>
f0119eaf:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119eb6:	83 ec 0c             	sub    $0xc,%esp
f0119eb9:	68 2c c5 12 f0       	push   $0xf012c52c
f0119ebe:	e8 a9 70 fe ff       	call   f0100f6c <cprintf>
f0119ec3:	83 c4 10             	add    $0x10,%esp

		//7 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f0119ec6:	e8 3e 3b ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119ecb:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f0119ece:	e8 6d a9 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119ed3:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[5] = kmalloc(7*kilo);
f0119ed6:	83 ec 0c             	sub    $0xc,%esp
f0119ed9:	68 00 1c 00 00       	push   $0x1c00
f0119ede:	e8 d3 eb fe ff       	call   f0108ab6 <kmalloc>
f0119ee3:	83 c4 10             	add    $0x10,%esp
f0119ee6:	89 45 ac             	mov    %eax,-0x54(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega /*+ 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f0119ee9:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0119eec:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f0119ef1:	74 17                	je     f0119f0a <test_kmalloc_firstfit2+0x3f8>
f0119ef3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119efa:	83 ec 0c             	sub    $0xc,%esp
f0119efd:	68 58 c4 12 f0       	push   $0xf012c458
f0119f02:	e8 65 70 fe ff       	call   f0100f6c <cprintf>
f0119f07:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0119f0a:	e8 31 a9 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119f0f:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0119f12:	74 17                	je     f0119f2b <test_kmalloc_firstfit2+0x419>
f0119f14:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119f1b:	83 ec 0c             	sub    $0xc,%esp
f0119f1e:	68 20 c2 12 f0       	push   $0xf012c220
f0119f23:	e8 44 70 fe ff       	call   f0100f6c <cprintf>
f0119f28:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: \n"); }
f0119f2b:	e8 d9 3a ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119f30:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0119f33:	29 c2                	sub    %eax,%edx
f0119f35:	89 d0                	mov    %edx,%eax
f0119f37:	83 f8 01             	cmp    $0x1,%eax
f0119f3a:	77 17                	ja     f0119f53 <test_kmalloc_firstfit2+0x441>
f0119f3c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119f43:	83 ec 0c             	sub    $0xc,%esp
f0119f46:	68 89 c4 12 f0       	push   $0xf012c489
f0119f4b:	e8 1c 70 fe ff       	call   f0100f6c <cprintf>
f0119f50:	83 c4 10             	add    $0x10,%esp

		//2 MB Hole
		freeFrames = (int)sys_calculate_free_frames() ;
f0119f53:	e8 b1 3a ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119f58:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f0119f5b:	e8 e0 a8 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119f60:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[0]);
f0119f63:	8b 45 98             	mov    -0x68(%ebp),%eax
f0119f66:	83 ec 0c             	sub    $0xc,%esp
f0119f69:	50                   	push   %eax
f0119f6a:	e8 61 eb fe ff       	call   f0108ad0 <kfree>
f0119f6f:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0119f72:	e8 c9 a8 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119f77:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0119f7a:	74 17                	je     f0119f93 <test_kmalloc_firstfit2+0x481>
f0119f7c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119f83:	83 ec 0c             	sub    $0xc,%esp
f0119f86:	68 20 c2 12 f0       	push   $0xf012c220
f0119f8b:	e8 dc 6f fe ff       	call   f0100f6c <cprintf>
f0119f90:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong free: \n"); }
f0119f93:	e8 71 3a ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119f98:	2b 45 ec             	sub    -0x14(%ebp),%eax
f0119f9b:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f0119fa0:	77 17                	ja     f0119fb9 <test_kmalloc_firstfit2+0x4a7>
f0119fa2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119fa9:	83 ec 0c             	sub    $0xc,%esp
f0119fac:	68 9d c4 12 f0       	push   $0xf012c49d
f0119fb1:	e8 b6 6f fe ff       	call   f0100f6c <cprintf>
f0119fb6:	83 c4 10             	add    $0x10,%esp

		//3 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f0119fb9:	e8 4b 3a ff ff       	call   f010da09 <sys_calculate_free_frames>
f0119fbe:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f0119fc1:	e8 7a a8 fe ff       	call   f0104840 <pf_calculate_free_frames>
f0119fc6:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f0119fc9:	83 ec 0c             	sub    $0xc,%esp
f0119fcc:	68 00 fc 2f 00       	push   $0x2ffc00
f0119fd1:	e8 e0 ea fe ff       	call   f0108ab6 <kmalloc>
f0119fd6:	83 c4 10             	add    $0x10,%esp
f0119fd9:	89 45 b0             	mov    %eax,-0x50(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 4*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f0119fdc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119fdf:	3d 00 30 40 f8       	cmp    $0xf8403000,%eax
f0119fe4:	74 17                	je     f0119ffd <test_kmalloc_firstfit2+0x4eb>
f0119fe6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0119fed:	83 ec 0c             	sub    $0xc,%esp
f0119ff0:	68 58 c4 12 f0       	push   $0xf012c458
f0119ff5:	e8 72 6f fe ff       	call   f0100f6c <cprintf>
f0119ffa:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f0119ffd:	e8 3e a8 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a002:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011a005:	74 17                	je     f011a01e <test_kmalloc_firstfit2+0x50c>
f011a007:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a00e:	83 ec 0c             	sub    $0xc,%esp
f011a011:	68 20 c2 12 f0       	push   $0xf012c220
f011a016:	e8 51 6f fe ff       	call   f0100f6c <cprintf>
f011a01b:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) <  3*Mega/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: \n"); }
f011a01e:	e8 e6 39 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a023:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011a026:	29 c2                	sub    %eax,%edx
f011a028:	89 d0                	mov    %edx,%eax
f011a02a:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011a02f:	77 17                	ja     f011a048 <test_kmalloc_firstfit2+0x536>
f011a031:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a038:	83 ec 0c             	sub    $0xc,%esp
f011a03b:	68 89 c4 12 f0       	push   $0xf012c489
f011a040:	e8 27 6f fe ff       	call   f0100f6c <cprintf>
f011a045:	83 c4 10             	add    $0x10,%esp

		//2 MB + 6 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011a048:	e8 bc 39 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a04d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a050:	e8 eb a7 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a055:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[7] = kmalloc(2*Mega + 6*kilo);
f011a058:	83 ec 0c             	sub    $0xc,%esp
f011a05b:	68 00 18 20 00       	push   $0x201800
f011a060:	e8 51 ea fe ff       	call   f0108ab6 <kmalloc>
f011a065:	83 c4 10             	add    $0x10,%esp
f011a068:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011a06b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011a06e:	3d 00 30 70 f8       	cmp    $0xf8703000,%eax
f011a073:	74 17                	je     f011a08c <test_kmalloc_firstfit2+0x57a>
f011a075:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a07c:	83 ec 0c             	sub    $0xc,%esp
f011a07f:	68 58 c4 12 f0       	push   $0xf012c458
f011a084:	e8 e3 6e fe ff       	call   f0100f6c <cprintf>
f011a089:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a08c:	e8 af a7 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a091:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011a094:	74 17                	je     f011a0ad <test_kmalloc_firstfit2+0x59b>
f011a096:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a09d:	83 ec 0c             	sub    $0xc,%esp
f011a0a0:	68 20 c2 12 f0       	push   $0xf012c220
f011a0a5:	e8 c2 6e fe ff       	call   f0100f6c <cprintf>
f011a0aa:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) <  514) { correct = 0; cprintf("Wrong allocation: \n"); }
f011a0ad:	e8 57 39 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a0b2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011a0b5:	29 c2                	sub    %eax,%edx
f011a0b7:	89 d0                	mov    %edx,%eax
f011a0b9:	3d 01 02 00 00       	cmp    $0x201,%eax
f011a0be:	77 17                	ja     f011a0d7 <test_kmalloc_firstfit2+0x5c5>
f011a0c0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a0c7:	83 ec 0c             	sub    $0xc,%esp
f011a0ca:	68 89 c4 12 f0       	push   $0xf012c489
f011a0cf:	e8 98 6e fe ff       	call   f0100f6c <cprintf>
f011a0d4:	83 c4 10             	add    $0x10,%esp

		//3 MB Hole
		freeFrames = (int)sys_calculate_free_frames() ;
f011a0d7:	e8 2d 39 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a0dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a0df:	e8 5c a7 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a0e4:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[6]);
f011a0e7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a0ea:	83 ec 0c             	sub    $0xc,%esp
f011a0ed:	50                   	push   %eax
f011a0ee:	e8 dd e9 fe ff       	call   f0108ad0 <kfree>
f011a0f3:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a0f6:	e8 45 a7 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a0fb:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011a0fe:	74 17                	je     f011a117 <test_kmalloc_firstfit2+0x605>
f011a100:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a107:	83 ec 0c             	sub    $0xc,%esp
f011a10a:	68 20 c2 12 f0       	push   $0xf012c220
f011a10f:	e8 58 6e fe ff       	call   f0100f6c <cprintf>
f011a114:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 768) { correct = 0; cprintf("Wrong free: \n"); }
f011a117:	e8 ed 38 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a11c:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011a11f:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011a124:	77 17                	ja     f011a13d <test_kmalloc_firstfit2+0x62b>
f011a126:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a12d:	83 ec 0c             	sub    $0xc,%esp
f011a130:	68 9d c4 12 f0       	push   $0xf012c49d
f011a135:	e8 32 6e fe ff       	call   f0100f6c <cprintf>
f011a13a:	83 c4 10             	add    $0x10,%esp

		//2 KB Hole in Dynamic Allocator Area [Resulting Hole = 1 KB + 2 KB = 3 KB]
		freeFrames = (int)sys_calculate_free_frames() ;
f011a13d:	e8 c7 38 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a142:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a145:	e8 f6 a6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a14a:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[3]);
f011a14d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011a150:	83 ec 0c             	sub    $0xc,%esp
f011a153:	50                   	push   %eax
f011a154:	e8 77 e9 fe ff       	call   f0108ad0 <kfree>
f011a159:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a15c:	e8 df a6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a161:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011a164:	74 17                	je     f011a17d <test_kmalloc_firstfit2+0x66b>
f011a166:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a16d:	83 ec 0c             	sub    $0xc,%esp
f011a170:	68 20 c2 12 f0       	push   $0xf012c220
f011a175:	e8 f2 6d fe ff       	call   f0100f6c <cprintf>
f011a17a:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) != 0) { correct = 0; cprintf("Wrong free: freeing a block from the dynamic allocator should not affect the free frames\n"); }
f011a17d:	e8 87 38 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a182:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a185:	74 17                	je     f011a19e <test_kmalloc_firstfit2+0x68c>
f011a187:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a18e:	83 ec 0c             	sub    $0xc,%esp
f011a191:	68 2c c5 12 f0       	push   $0xf012c52c
f011a196:	e8 d1 6d fe ff       	call   f0100f6c <cprintf>
f011a19b:	83 c4 10             	add    $0x10,%esp

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB = 4 MB]
		freeFrames = (int)sys_calculate_free_frames() ;
f011a19e:	e8 66 38 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a1a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a1a6:	e8 95 a6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a1ab:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[1]);
f011a1ae:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011a1b1:	83 ec 0c             	sub    $0xc,%esp
f011a1b4:	50                   	push   %eax
f011a1b5:	e8 16 e9 fe ff       	call   f0108ad0 <kfree>
f011a1ba:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong free: \n"); }
f011a1bd:	e8 47 38 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a1c2:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011a1c5:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011a1ca:	77 17                	ja     f011a1e3 <test_kmalloc_firstfit2+0x6d1>
f011a1cc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a1d3:	83 ec 0c             	sub    $0xc,%esp
f011a1d6:	68 9d c4 12 f0       	push   $0xf012c49d
f011a1db:	e8 8c 6d fe ff       	call   f0100f6c <cprintf>
f011a1e0:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a1e3:	e8 58 a6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a1e8:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011a1eb:	74 17                	je     f011a204 <test_kmalloc_firstfit2+0x6f2>
f011a1ed:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a1f4:	83 ec 0c             	sub    $0xc,%esp
f011a1f7:	68 20 c2 12 f0       	push   $0xf012c220
f011a1fc:	e8 6b 6d fe ff       	call   f0100f6c <cprintf>
f011a201:	83 c4 10             	add    $0x10,%esp

		//5 MB
		freeFrames = (int)sys_calculate_free_frames() ;
f011a204:	e8 00 38 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a209:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a20c:	e8 2f a6 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a211:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[8] = kmalloc(5*Mega-kilo);
f011a214:	83 ec 0c             	sub    $0xc,%esp
f011a217:	68 00 fc 4f 00       	push   $0x4ffc00
f011a21c:	e8 95 e8 fe ff       	call   f0108ab6 <kmalloc>
f011a221:	83 c4 10             	add    $0x10,%esp
f011a224:	89 45 b8             	mov    %eax,-0x48(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 9*Mega + 16*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011a227:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a22a:	3d 00 50 90 f8       	cmp    $0xf8905000,%eax
f011a22f:	74 17                	je     f011a248 <test_kmalloc_firstfit2+0x736>
f011a231:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a238:	83 ec 0c             	sub    $0xc,%esp
f011a23b:	68 58 c4 12 f0       	push   $0xf012c458
f011a240:	e8 27 6d fe ff       	call   f0100f6c <cprintf>
f011a245:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a248:	e8 f3 a5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a24d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011a250:	74 17                	je     f011a269 <test_kmalloc_firstfit2+0x757>
f011a252:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a259:	83 ec 0c             	sub    $0xc,%esp
f011a25c:	68 20 c2 12 f0       	push   $0xf012c220
f011a261:	e8 06 6d fe ff       	call   f0100f6c <cprintf>
f011a266:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) <   5*Mega/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: \n"); }
f011a269:	e8 9b 37 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a26e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011a271:	29 c2                	sub    %eax,%edx
f011a273:	89 d0                	mov    %edx,%eax
f011a275:	3d ff 04 00 00       	cmp    $0x4ff,%eax
f011a27a:	77 17                	ja     f011a293 <test_kmalloc_firstfit2+0x781>
f011a27c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a283:	83 ec 0c             	sub    $0xc,%esp
f011a286:	68 89 c4 12 f0       	push   $0xf012c489
f011a28b:	e8 dc 6c fe ff       	call   f0100f6c <cprintf>
f011a290:	83 c4 10             	add    $0x10,%esp

		//8 KB Hole [Resulting Hole = 2 MB + 2 MB + 8 KB + 3 MB = 7 MB + 8 KB]
		freeFrames = (int)sys_calculate_free_frames() ;
f011a293:	e8 71 37 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a298:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a29b:	e8 a0 a5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a2a0:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree(ptr_allocations[5]);
f011a2a3:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011a2a6:	83 ec 0c             	sub    $0xc,%esp
f011a2a9:	50                   	push   %eax
f011a2aa:	e8 21 e8 fe ff       	call   f0108ad0 <kfree>
f011a2af:	83 c4 10             	add    $0x10,%esp
		if(((int)pf_calculate_free_frames() - freeDiskFrames) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a2b2:	e8 89 a5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a2b7:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011a2ba:	74 17                	je     f011a2d3 <test_kmalloc_firstfit2+0x7c1>
f011a2bc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a2c3:	83 ec 0c             	sub    $0xc,%esp
f011a2c6:	68 20 c2 12 f0       	push   $0xf012c220
f011a2cb:	e8 9c 6c fe ff       	call   f0100f6c <cprintf>
f011a2d0:	83 c4 10             	add    $0x10,%esp
		if (((int)sys_calculate_free_frames() - freeFrames) < 2) { correct = 0; cprintf("Wrong free: \n"); }
f011a2d3:	e8 31 37 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a2d8:	2b 45 ec             	sub    -0x14(%ebp),%eax
f011a2db:	83 f8 01             	cmp    $0x1,%eax
f011a2de:	77 17                	ja     f011a2f7 <test_kmalloc_firstfit2+0x7e5>
f011a2e0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a2e7:	83 ec 0c             	sub    $0xc,%esp
f011a2ea:	68 9d c4 12 f0       	push   $0xf012c49d
f011a2ef:	e8 78 6c fe ff       	call   f0100f6c <cprintf>
f011a2f4:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011a2f7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011a2fb:	74 04                	je     f011a301 <test_kmalloc_firstfit2+0x7ef>
f011a2fd:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	correct = 1 ;
f011a301:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		//[FIRST FIT Case#1] Should be allocated in the resulting hole inside Page Allocator Area
		//7 MB + 1 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011a308:	e8 fc 36 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a30d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a310:	e8 2b a5 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a315:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[9] = kmalloc(7*Mega+kilo);
f011a318:	83 ec 0c             	sub    $0xc,%esp
f011a31b:	68 00 04 70 00       	push   $0x700400
f011a320:	e8 91 e7 fe ff       	call   f0108ab6 <kmalloc>
f011a325:	83 c4 10             	add    $0x10,%esp
f011a328:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011a32b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011a32e:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011a333:	74 17                	je     f011a34c <test_kmalloc_firstfit2+0x83a>
f011a335:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a33c:	83 ec 0c             	sub    $0xc,%esp
f011a33f:	68 58 c4 12 f0       	push   $0xf012c458
f011a344:	e8 23 6c fe ff       	call   f0100f6c <cprintf>
f011a349:	83 c4 10             	add    $0x10,%esp
		if((freeDiskFrames - (int)pf_calculate_free_frames()) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a34c:	e8 ef a4 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a351:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011a354:	74 17                	je     f011a36d <test_kmalloc_firstfit2+0x85b>
f011a356:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a35d:	83 ec 0c             	sub    $0xc,%esp
f011a360:	68 20 c2 12 f0       	push   $0xf012c220
f011a365:	e8 02 6c fe ff       	call   f0100f6c <cprintf>
f011a36a:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) <  (7*Mega+4*kilo)/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: \n"); }
f011a36d:	e8 97 36 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a372:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011a375:	29 c2                	sub    %eax,%edx
f011a377:	89 d0                	mov    %edx,%eax
f011a379:	3d 00 07 00 00       	cmp    $0x700,%eax
f011a37e:	77 17                	ja     f011a397 <test_kmalloc_firstfit2+0x885>
f011a380:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a387:	83 ec 0c             	sub    $0xc,%esp
f011a38a:	68 89 c4 12 f0       	push   $0xf012c489
f011a38f:	e8 d8 6b fe ff       	call   f0100f6c <cprintf>
f011a394:	83 c4 10             	add    $0x10,%esp

		//[FIRST FIT Case#2] Should be allocated in the remaining area of resulting hole inside Page Allocator Area
		//3 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011a397:	e8 6d 36 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a39c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a39f:	e8 9c a4 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a3a4:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[10] = kmalloc(3*kilo);
f011a3a7:	83 ec 0c             	sub    $0xc,%esp
f011a3aa:	68 00 0c 00 00       	push   $0xc00
f011a3af:	e8 02 e7 fe ff       	call   f0108ab6 <kmalloc>
f011a3b4:	83 c4 10             	add    $0x10,%esp
f011a3b7:	89 45 c0             	mov    %eax,-0x40(%ebp)
		if ((uint32)ptr_allocations[10] != (ACTUAL_START + 7*Mega + 4*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011a3ba:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a3bd:	3d 00 20 70 f8       	cmp    $0xf8702000,%eax
f011a3c2:	74 17                	je     f011a3db <test_kmalloc_firstfit2+0x8c9>
f011a3c4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a3cb:	83 ec 0c             	sub    $0xc,%esp
f011a3ce:	68 58 c4 12 f0       	push   $0xf012c458
f011a3d3:	e8 94 6b fe ff       	call   f0100f6c <cprintf>
f011a3d8:	83 c4 10             	add    $0x10,%esp
		if((freeDiskFrames - (int)pf_calculate_free_frames()) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a3db:	e8 60 a4 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a3e0:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011a3e3:	74 17                	je     f011a3fc <test_kmalloc_firstfit2+0x8ea>
f011a3e5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a3ec:	83 ec 0c             	sub    $0xc,%esp
f011a3ef:	68 20 c2 12 f0       	push   $0xf012c220
f011a3f4:	e8 73 6b fe ff       	call   f0100f6c <cprintf>
f011a3f9:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) < 1) { correct = 0; cprintf("Wrong allocation: \n"); }
f011a3fc:	e8 08 36 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a401:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a404:	75 17                	jne    f011a41d <test_kmalloc_firstfit2+0x90b>
f011a406:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a40d:	83 ec 0c             	sub    $0xc,%esp
f011a410:	68 89 c4 12 f0       	push   $0xf012c489
f011a415:	e8 52 6b fe ff       	call   f0100f6c <cprintf>
f011a41a:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=35 ;
f011a41d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011a421:	74 04                	je     f011a427 <test_kmalloc_firstfit2+0x915>
f011a423:	83 45 f4 23          	addl   $0x23,-0xc(%ebp)

	correct = 1 ;
f011a427:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	{
		//[FIRST FIT Case#3] Should be allocated in the resulting hole inside DYNAMIC Allocator Area
		//1 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011a42e:	e8 d6 35 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a433:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a436:	e8 05 a4 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a43b:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[11] = kmalloc(1*kilo);
f011a43e:	83 ec 0c             	sub    $0xc,%esp
f011a441:	68 00 04 00 00       	push   $0x400
f011a446:	e8 6b e6 fe ff       	call   f0108ab6 <kmalloc>
f011a44b:	83 c4 10             	add    $0x10,%esp
f011a44e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if ((ptr_allocations[11] < ptr_allocations[2]) || (ptr_allocations[11] > (ptr_allocations[2] + 1*kilo)))
f011a451:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011a454:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011a457:	39 c2                	cmp    %eax,%edx
f011a459:	72 10                	jb     f011a46b <test_kmalloc_firstfit2+0x959>
f011a45b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a45e:	8b 55 a0             	mov    -0x60(%ebp),%edx
f011a461:	81 c2 00 04 00 00    	add    $0x400,%edx
f011a467:	39 d0                	cmp    %edx,%eax
f011a469:	76 17                	jbe    f011a482 <test_kmalloc_firstfit2+0x970>
		{ correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011a46b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a472:	83 ec 0c             	sub    $0xc,%esp
f011a475:	68 58 c4 12 f0       	push   $0xf012c458
f011a47a:	e8 ed 6a fe ff       	call   f0100f6c <cprintf>
f011a47f:	83 c4 10             	add    $0x10,%esp
		if((freeDiskFrames - (int)pf_calculate_free_frames()) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a482:	e8 b9 a3 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a487:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011a48a:	74 17                	je     f011a4a3 <test_kmalloc_firstfit2+0x991>
f011a48c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a493:	83 ec 0c             	sub    $0xc,%esp
f011a496:	68 20 c2 12 f0       	push   $0xf012c220
f011a49b:	e8 cc 6a fe ff       	call   f0100f6c <cprintf>
f011a4a0:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: \n"); }
f011a4a3:	e8 61 35 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a4a8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a4ab:	74 17                	je     f011a4c4 <test_kmalloc_firstfit2+0x9b2>
f011a4ad:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a4b4:	83 ec 0c             	sub    $0xc,%esp
f011a4b7:	68 89 c4 12 f0       	push   $0xf012c489
f011a4bc:	e8 ab 6a fe ff       	call   f0100f6c <cprintf>
f011a4c1:	83 c4 10             	add    $0x10,%esp

		//[FIRST FIT Case#4] Should be allocated in the remaining of resulting hole inside DYNAMIC Allocator Area
		//1 KB
		freeFrames = (int)sys_calculate_free_frames() ;
f011a4c4:	e8 40 35 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a4c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames() ;
f011a4cc:	e8 6f a3 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a4d1:	89 45 e8             	mov    %eax,-0x18(%ebp)
		ptr_allocations[12] = kmalloc(1*kilo);
f011a4d4:	83 ec 0c             	sub    $0xc,%esp
f011a4d7:	68 00 04 00 00       	push   $0x400
f011a4dc:	e8 d5 e5 fe ff       	call   f0108ab6 <kmalloc>
f011a4e1:	83 c4 10             	add    $0x10,%esp
f011a4e4:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if ((ptr_allocations[12] < ptr_allocations[2] + 1*kilo) || (ptr_allocations[12] > (ptr_allocations[2] + 2*kilo)))
f011a4e7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a4ea:	8b 55 a0             	mov    -0x60(%ebp),%edx
f011a4ed:	81 c2 00 04 00 00    	add    $0x400,%edx
f011a4f3:	39 d0                	cmp    %edx,%eax
f011a4f5:	72 10                	jb     f011a507 <test_kmalloc_firstfit2+0x9f5>
f011a4f7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a4fa:	8b 55 a0             	mov    -0x60(%ebp),%edx
f011a4fd:	81 c2 00 08 00 00    	add    $0x800,%edx
f011a503:	39 d0                	cmp    %edx,%eax
f011a505:	76 17                	jbe    f011a51e <test_kmalloc_firstfit2+0xa0c>
		{ correct = 0; cprintf("Wrong start address for the allocated space... \n"); }
f011a507:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a50e:	83 ec 0c             	sub    $0xc,%esp
f011a511:	68 58 c4 12 f0       	push   $0xf012c458
f011a516:	e8 51 6a fe ff       	call   f0100f6c <cprintf>
f011a51b:	83 c4 10             	add    $0x10,%esp
		if((freeDiskFrames - (int)pf_calculate_free_frames()) !=  0)  { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a51e:	e8 1d a3 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a523:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011a526:	74 17                	je     f011a53f <test_kmalloc_firstfit2+0xa2d>
f011a528:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a52f:	83 ec 0c             	sub    $0xc,%esp
f011a532:	68 20 c2 12 f0       	push   $0xf012c220
f011a537:	e8 30 6a fe ff       	call   f0100f6c <cprintf>
f011a53c:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: \n"); }
f011a53f:	e8 c5 34 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a544:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011a547:	74 17                	je     f011a560 <test_kmalloc_firstfit2+0xa4e>
f011a549:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a550:	83 ec 0c             	sub    $0xc,%esp
f011a553:	68 89 c4 12 f0       	push   $0xf012c489
f011a558:	e8 0f 6a fe ff       	call   f0100f6c <cprintf>
f011a55d:	83 c4 10             	add    $0x10,%esp

	}
	if (correct)	eval+=35 ;
f011a560:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011a564:	74 04                	je     f011a56a <test_kmalloc_firstfit2+0xa58>
f011a566:	83 45 f4 23          	addl   $0x23,-0xc(%ebp)

	correct = 1 ;
f011a56a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[13] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011a571:	83 ec 0c             	sub    $0xc,%esp
f011a574:	68 00 e0 1f 07       	push   $0x71fe000
f011a579:	e8 38 e5 fe ff       	call   f0108ab6 <kmalloc>
f011a57e:	83 c4 10             	add    $0x10,%esp
f011a581:	89 45 cc             	mov    %eax,-0x34(%ebp)
		if (ptr_allocations[13] != NULL) { correct = 0; cprintf("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL\n"); }
f011a584:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011a587:	85 c0                	test   %eax,%eax
f011a589:	74 17                	je     f011a5a2 <test_kmalloc_firstfit2+0xa90>
f011a58b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011a592:	83 ec 0c             	sub    $0xc,%esp
f011a595:	68 88 c5 12 f0       	push   $0xf012c588
f011a59a:	e8 cd 69 fe ff       	call   f0100f6c <cprintf>
f011a59f:	83 c4 10             	add    $0x10,%esp

	}
	if (correct)	eval+=10 ;
f011a5a2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011a5a6:	74 04                	je     f011a5ac <test_kmalloc_firstfit2+0xa9a>
f011a5a8:	83 45 f4 0a          	addl   $0xa,-0xc(%ebp)

	cprintf("test FIRST FIT allocation (2) completed. Eval = %d%\n", eval);
f011a5ac:	83 ec 08             	sub    $0x8,%esp
f011a5af:	ff 75 f4             	pushl  -0xc(%ebp)
f011a5b2:	68 ec c5 12 f0       	push   $0xf012c5ec
f011a5b7:	e8 b0 69 fe ff       	call   f0100f6c <cprintf>
f011a5bc:	83 c4 10             	add    $0x10,%esp

	return 1;
f011a5bf:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011a5c4:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a5c7:	5b                   	pop    %ebx
f011a5c8:	5f                   	pop    %edi
f011a5c9:	5d                   	pop    %ebp
f011a5ca:	c3                   	ret    

f011a5cb <test_kfree_bestfirstfit>:


int test_kfree_bestfirstfit()
{
f011a5cb:	55                   	push   %ebp
f011a5cc:	89 e5                	mov    %esp,%ebp
f011a5ce:	57                   	push   %edi
f011a5cf:	53                   	push   %ebx
f011a5d0:	81 ec 40 01 00 00    	sub    $0x140,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f011a5d6:	83 ec 0c             	sub    $0xc,%esp
f011a5d9:	68 60 c1 12 f0       	push   $0xf012c160
f011a5de:	e8 89 69 fe ff       	call   f0100f6c <cprintf>
f011a5e3:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a5e6:	83 ec 0c             	sub    $0xc,%esp
f011a5e9:	68 90 c1 12 f0       	push   $0xf012c190
f011a5ee:	e8 79 69 fe ff       	call   f0100f6c <cprintf>
f011a5f3:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a5f6:	83 ec 0c             	sub    $0xc,%esp
f011a5f9:	68 60 c1 12 f0       	push   $0xf012c160
f011a5fe:	e8 69 69 fe ff       	call   f0100f6c <cprintf>
f011a603:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011a606:	c6 45 df 80          	movb   $0x80,-0x21(%ebp)
	char maxByte = 0x7F;
f011a60a:	c6 45 de 7f          	movb   $0x7f,-0x22(%ebp)
	short minShort = 1<<15 ;
f011a60e:	66 c7 45 dc 00 80    	movw   $0x8000,-0x24(%ebp)
	short maxShort = 0x7FFF;
f011a614:	66 c7 45 da ff 7f    	movw   $0x7fff,-0x26(%ebp)
	int minInt = 1<<31 ;
f011a61a:	c7 45 d4 00 00 00 80 	movl   $0x80000000,-0x2c(%ebp)
	int maxInt = 0x7FFFFFFF;
f011a621:	c7 45 d0 ff ff ff 7f 	movl   $0x7fffffff,-0x30(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011a628:	e8 dc 33 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a62d:	89 45 cc             	mov    %eax,-0x34(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011a630:	8d 95 68 ff ff ff    	lea    -0x98(%ebp),%edx
f011a636:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a63b:	b8 00 00 00 00       	mov    $0x0,%eax
f011a640:	89 d7                	mov    %edx,%edi
f011a642:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011a644:	8d 95 18 ff ff ff    	lea    -0xe8(%ebp),%edx
f011a64a:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a64f:	b8 00 00 00 00       	mov    $0x0,%eax
f011a654:	89 d7                	mov    %edx,%edi
f011a656:	f3 ab                	rep stos %eax,%es:(%edi)

	int eval = 0;
f011a658:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	bool correct = 1;
f011a65f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

	correct = 1;
f011a666:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	void* ptr_allocations[20] = {0};
f011a66d:	8d 95 c8 fe ff ff    	lea    -0x138(%ebp),%edx
f011a673:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a678:	b8 00 00 00 00       	mov    $0x0,%eax
f011a67d:	89 d7                	mov    %edx,%edi
f011a67f:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//[BLOCK ALLOCATOR]
		{
			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f011a681:	e8 83 33 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a686:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011a689:	e8 b2 a1 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a68e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[2] = kmalloc(2*kilo);
f011a691:	83 ec 0c             	sub    $0xc,%esp
f011a694:	68 00 08 00 00       	push   $0x800
f011a699:	e8 18 e4 fe ff       	call   f0108ab6 <kmalloc>
f011a69e:	83 c4 10             	add    $0x10,%esp
f011a6a1:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f011a6a7:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a6ad:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011a6b2:	76 28                	jbe    f011a6dc <test_kfree_bestfirstfit+0x111>
f011a6b4:	8b 9d d0 fe ff ff    	mov    -0x130(%ebp),%ebx
f011a6ba:	83 ec 0c             	sub    $0xc,%esp
f011a6bd:	6a 00                	push   $0x0
f011a6bf:	e8 e8 e3 fe ff       	call   f0108aac <sbrk>
f011a6c4:	83 c4 10             	add    $0x10,%esp
f011a6c7:	39 c3                	cmp    %eax,%ebx
f011a6c9:	73 11                	jae    f011a6dc <test_kfree_bestfirstfit+0x111>
f011a6cb:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a6d1:	89 c2                	mov    %eax,%edx
f011a6d3:	a1 98 9d 17 f0       	mov    0xf0179d98,%eax
f011a6d8:	39 c2                	cmp    %eax,%edx
f011a6da:	72 17                	jb     f011a6f3 <test_kfree_bestfirstfit+0x128>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011a6dc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011a6e3:	83 ec 0c             	sub    $0xc,%esp
f011a6e6:	68 20 c3 12 f0       	push   $0xf012c320
f011a6eb:	e8 7c 68 fe ff       	call   f0100f6c <cprintf>
f011a6f0:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a6f3:	e8 48 a1 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a6f8:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011a6fb:	74 17                	je     f011a714 <test_kfree_bestfirstfit+0x149>
f011a6fd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011a704:	83 ec 0c             	sub    $0xc,%esp
f011a707:	68 20 c2 12 f0       	push   $0xf012c220
f011a70c:	e8 5b 68 fe ff       	call   f0100f6c <cprintf>
f011a711:	83 c4 10             	add    $0x10,%esp
			//		if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011a714:	c7 85 70 ff ff ff ff 	movl   $0x7ff,-0x90(%ebp)
f011a71b:	07 00 00 
			ptr = (char*)ptr_allocations[2];
f011a71e:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a724:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[2]; ++i)
f011a727:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011a72e:	eb 0e                	jmp    f011a73e <test_kfree_bestfirstfit+0x173>
			{
				ptr[i] = 2 ;
f011a730:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a733:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a736:	01 d0                	add    %edx,%eax
f011a738:	c6 00 02             	movb   $0x2,(%eax)
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			//		if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[2] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[2];
			for (i = 0; i < lastIndices[2]; ++i)
f011a73b:	ff 45 f4             	incl   -0xc(%ebp)
f011a73e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011a744:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011a747:	7f e7                	jg     f011a730 <test_kfree_bestfirstfit+0x165>
			{
				ptr[i] = 2 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f011a749:	e8 bb 32 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a74e:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011a751:	e8 ea a0 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a756:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[3] = kmalloc(2*kilo);
f011a759:	83 ec 0c             	sub    $0xc,%esp
f011a75c:	68 00 08 00 00       	push   $0x800
f011a761:	e8 50 e3 fe ff       	call   f0108ab6 <kmalloc>
f011a766:	83 c4 10             	add    $0x10,%esp
f011a769:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f011a76f:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a775:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011a77a:	76 28                	jbe    f011a7a4 <test_kfree_bestfirstfit+0x1d9>
f011a77c:	8b 9d d4 fe ff ff    	mov    -0x12c(%ebp),%ebx
f011a782:	83 ec 0c             	sub    $0xc,%esp
f011a785:	6a 00                	push   $0x0
f011a787:	e8 20 e3 fe ff       	call   f0108aac <sbrk>
f011a78c:	83 c4 10             	add    $0x10,%esp
f011a78f:	39 c3                	cmp    %eax,%ebx
f011a791:	73 11                	jae    f011a7a4 <test_kfree_bestfirstfit+0x1d9>
f011a793:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a799:	89 c2                	mov    %eax,%edx
f011a79b:	a1 98 9d 17 f0       	mov    0xf0179d98,%eax
f011a7a0:	39 c2                	cmp    %eax,%edx
f011a7a2:	72 17                	jb     f011a7bb <test_kfree_bestfirstfit+0x1f0>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011a7a4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011a7ab:	83 ec 0c             	sub    $0xc,%esp
f011a7ae:	68 20 c3 12 f0       	push   $0xf012c320
f011a7b3:	e8 b4 67 fe ff       	call   f0100f6c <cprintf>
f011a7b8:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a7bb:	e8 80 a0 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a7c0:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011a7c3:	74 17                	je     f011a7dc <test_kfree_bestfirstfit+0x211>
f011a7c5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011a7cc:	83 ec 0c             	sub    $0xc,%esp
f011a7cf:	68 20 c2 12 f0       	push   $0xf012c220
f011a7d4:	e8 93 67 fe ff       	call   f0100f6c <cprintf>
f011a7d9:	83 c4 10             	add    $0x10,%esp
			//		if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011a7dc:	c7 85 74 ff ff ff ff 	movl   $0x7ff,-0x8c(%ebp)
f011a7e3:	07 00 00 
			ptr = (char*)ptr_allocations[3];
f011a7e6:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a7ec:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[3]; ++i)
f011a7ef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011a7f6:	eb 0e                	jmp    f011a806 <test_kfree_bestfirstfit+0x23b>
			{
				ptr[i] = 3 ;
f011a7f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a7fb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a7fe:	01 d0                	add    %edx,%eax
f011a800:	c6 00 03             	movb   $0x3,(%eax)
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			//		if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[3] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[3];
			for (i = 0; i < lastIndices[3]; ++i)
f011a803:	ff 45 f4             	incl   -0xc(%ebp)
f011a806:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011a80c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011a80f:	7f e7                	jg     f011a7f8 <test_kfree_bestfirstfit+0x22d>
		}

		//[PAGE ALLOCATOR]
		{
			//2 MB
			freeFrames = sys_calculate_free_frames() ;
f011a811:	e8 f3 31 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a816:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011a819:	e8 22 a0 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a81e:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011a821:	83 ec 0c             	sub    $0xc,%esp
f011a824:	68 00 fc 1f 00       	push   $0x1ffc00
f011a829:	e8 88 e2 fe ff       	call   f0108ab6 <kmalloc>
f011a82e:	83 c4 10             	add    $0x10,%esp
f011a831:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
			if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011a837:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a83d:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011a842:	74 17                	je     f011a85b <test_kfree_bestfirstfit+0x290>
f011a844:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011a84b:	83 ec 0c             	sub    $0xc,%esp
f011a84e:	68 d0 c2 12 f0       	push   $0xf012c2d0
f011a853:	e8 14 67 fe ff       	call   f0100f6c <cprintf>
f011a858:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a85b:	e8 e0 9f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a860:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011a863:	74 17                	je     f011a87c <test_kfree_bestfirstfit+0x2b1>
f011a865:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011a86c:	83 ec 0c             	sub    $0xc,%esp
f011a86f:	68 20 c2 12 f0       	push   $0xf012c220
f011a874:	e8 f3 66 fe ff       	call   f0100f6c <cprintf>
f011a879:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a87c:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011a87f:	e8 85 31 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a884:	29 c3                	sub    %eax,%ebx
f011a886:	89 d8                	mov    %ebx,%eax
f011a888:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011a88d:	77 17                	ja     f011a8a6 <test_kfree_bestfirstfit+0x2db>
f011a88f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011a896:	83 ec 0c             	sub    $0xc,%esp
f011a899:	68 8c c2 12 f0       	push   $0xf012c28c
f011a89e:	e8 c9 66 fe ff       	call   f0100f6c <cprintf>
f011a8a3:	83 c4 10             	add    $0x10,%esp
			lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011a8a6:	c7 85 68 ff ff ff ff 	movl   $0x1ffbff,-0x98(%ebp)
f011a8ad:	fb 1f 00 

			//2 MB
			freeFrames = sys_calculate_free_frames() ;
f011a8b0:	e8 54 31 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a8b5:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011a8b8:	e8 83 9f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a8bd:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011a8c0:	83 ec 0c             	sub    $0xc,%esp
f011a8c3:	68 00 fc 1f 00       	push   $0x1ffc00
f011a8c8:	e8 e9 e1 fe ff       	call   f0108ab6 <kmalloc>
f011a8cd:	83 c4 10             	add    $0x10,%esp
f011a8d0:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
			if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011a8d6:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011a8dc:	3d 00 10 20 f8       	cmp    $0xf8201000,%eax
f011a8e1:	74 17                	je     f011a8fa <test_kfree_bestfirstfit+0x32f>
f011a8e3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011a8ea:	83 ec 0c             	sub    $0xc,%esp
f011a8ed:	68 d0 c2 12 f0       	push   $0xf012c2d0
f011a8f2:	e8 75 66 fe ff       	call   f0100f6c <cprintf>
f011a8f7:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a8fa:	e8 41 9f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a8ff:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011a902:	74 17                	je     f011a91b <test_kfree_bestfirstfit+0x350>
f011a904:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011a90b:	83 ec 0c             	sub    $0xc,%esp
f011a90e:	68 20 c2 12 f0       	push   $0xf012c220
f011a913:	e8 54 66 fe ff       	call   f0100f6c <cprintf>
f011a918:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a91b:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011a91e:	e8 e6 30 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a923:	29 c3                	sub    %eax,%ebx
f011a925:	89 d8                	mov    %ebx,%eax
f011a927:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011a92c:	77 17                	ja     f011a945 <test_kfree_bestfirstfit+0x37a>
f011a92e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011a935:	83 ec 0c             	sub    $0xc,%esp
f011a938:	68 8c c2 12 f0       	push   $0xf012c28c
f011a93d:	e8 2a 66 fe ff       	call   f0100f6c <cprintf>
f011a942:	83 c4 10             	add    $0x10,%esp
			lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011a945:	c7 85 6c ff ff ff ff 	movl   $0x1ffbff,-0x94(%ebp)
f011a94c:	fb 1f 00 


			//7 KB
			freeFrames = sys_calculate_free_frames() ;
f011a94f:	e8 b5 30 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a954:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011a957:	e8 e4 9e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a95c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[4] = kmalloc(7*kilo);
f011a95f:	83 ec 0c             	sub    $0xc,%esp
f011a962:	68 00 1c 00 00       	push   $0x1c00
f011a967:	e8 4a e1 fe ff       	call   f0108ab6 <kmalloc>
f011a96c:	83 c4 10             	add    $0x10,%esp
f011a96f:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
			if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega /* + 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011a975:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a97b:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011a980:	74 17                	je     f011a999 <test_kfree_bestfirstfit+0x3ce>
f011a982:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011a989:	83 ec 0c             	sub    $0xc,%esp
f011a98c:	68 d0 c2 12 f0       	push   $0xf012c2d0
f011a991:	e8 d6 65 fe ff       	call   f0100f6c <cprintf>
f011a996:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011a999:	e8 a2 9e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011a99e:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011a9a1:	74 17                	je     f011a9ba <test_kfree_bestfirstfit+0x3ef>
f011a9a3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011a9aa:	83 ec 0c             	sub    $0xc,%esp
f011a9ad:	68 20 c2 12 f0       	push   $0xf012c220
f011a9b2:	e8 b5 65 fe ff       	call   f0100f6c <cprintf>
f011a9b7:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011a9ba:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011a9bd:	e8 47 30 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011a9c2:	29 c3                	sub    %eax,%ebx
f011a9c4:	89 d8                	mov    %ebx,%eax
f011a9c6:	83 f8 01             	cmp    $0x1,%eax
f011a9c9:	77 17                	ja     f011a9e2 <test_kfree_bestfirstfit+0x417>
f011a9cb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011a9d2:	83 ec 0c             	sub    $0xc,%esp
f011a9d5:	68 8c c2 12 f0       	push   $0xf012c28c
f011a9da:	e8 8d 65 fe ff       	call   f0100f6c <cprintf>
f011a9df:	83 c4 10             	add    $0x10,%esp
			lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011a9e2:	c7 85 78 ff ff ff ff 	movl   $0x1bff,-0x88(%ebp)
f011a9e9:	1b 00 00 
			ptr = (char*)ptr_allocations[4];
f011a9ec:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a9f2:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[4]; ++i)
f011a9f5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011a9fc:	eb 0e                	jmp    f011aa0c <test_kfree_bestfirstfit+0x441>
			{
				ptr[i] = 4 ;
f011a9fe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aa01:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011aa04:	01 d0                	add    %edx,%eax
f011aa06:	c6 00 04             	movb   $0x4,(%eax)
			if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega /* + 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			if ((freeFrames - sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[4] = (7*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[4];
			for (i = 0; i < lastIndices[4]; ++i)
f011aa09:	ff 45 f4             	incl   -0xc(%ebp)
f011aa0c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011aa12:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011aa15:	7f e7                	jg     f011a9fe <test_kfree_bestfirstfit+0x433>
			{
				ptr[i] = 4 ;
			}

			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f011aa17:	e8 ed 2f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011aa1c:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011aa1f:	e8 1c 9e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011aa24:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011aa27:	83 ec 0c             	sub    $0xc,%esp
f011aa2a:	68 00 fc 2f 00       	push   $0x2ffc00
f011aa2f:	e8 82 e0 fe ff       	call   f0108ab6 <kmalloc>
f011aa34:	83 c4 10             	add    $0x10,%esp
f011aa37:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
			if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011aa3d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011aa43:	3d 00 30 40 f8       	cmp    $0xf8403000,%eax
f011aa48:	74 17                	je     f011aa61 <test_kfree_bestfirstfit+0x496>
f011aa4a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011aa51:	83 ec 0c             	sub    $0xc,%esp
f011aa54:	68 d0 c2 12 f0       	push   $0xf012c2d0
f011aa59:	e8 0e 65 fe ff       	call   f0100f6c <cprintf>
f011aa5e:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011aa61:	e8 da 9d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011aa66:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011aa69:	74 17                	je     f011aa82 <test_kfree_bestfirstfit+0x4b7>
f011aa6b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011aa72:	83 ec 0c             	sub    $0xc,%esp
f011aa75:	68 20 c2 12 f0       	push   $0xf012c220
f011aa7a:	e8 ed 64 fe ff       	call   f0100f6c <cprintf>
f011aa7f:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011aa82:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011aa85:	e8 7f 2f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011aa8a:	29 c3                	sub    %eax,%ebx
f011aa8c:	89 d8                	mov    %ebx,%eax
f011aa8e:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011aa93:	77 17                	ja     f011aaac <test_kfree_bestfirstfit+0x4e1>
f011aa95:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011aa9c:	83 ec 0c             	sub    $0xc,%esp
f011aa9f:	68 8c c2 12 f0       	push   $0xf012c28c
f011aaa4:	e8 c3 64 fe ff       	call   f0100f6c <cprintf>
f011aaa9:	83 c4 10             	add    $0x10,%esp
			lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011aaac:	c7 85 7c ff ff ff ff 	movl   $0x2ffbff,-0x84(%ebp)
f011aab3:	fb 2f 00 
			ptr = (char*)ptr_allocations[5];
f011aab6:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011aabc:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[5]; ++i)
f011aabf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011aac6:	eb 0e                	jmp    f011aad6 <test_kfree_bestfirstfit+0x50b>
			{
				ptr[i] = 5 ;
f011aac8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011aacb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011aace:	01 d0                	add    %edx,%eax
f011aad0:	c6 00 05             	movb   $0x5,(%eax)
			if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[5];
			for (i = 0; i < lastIndices[5]; ++i)
f011aad3:	ff 45 f4             	incl   -0xc(%ebp)
f011aad6:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011aadc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011aadf:	7f e7                	jg     f011aac8 <test_kfree_bestfirstfit+0x4fd>
			{
				ptr[i] = 5 ;
			}

			//6 MB
			freeFrames = sys_calculate_free_frames() ;
f011aae1:	e8 23 2f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011aae6:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011aae9:	e8 52 9d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011aaee:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011aaf1:	83 ec 0c             	sub    $0xc,%esp
f011aaf4:	68 00 fc 5f 00       	push   $0x5ffc00
f011aaf9:	e8 b8 df fe ff       	call   f0108ab6 <kmalloc>
f011aafe:	83 c4 10             	add    $0x10,%esp
f011ab01:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011ab07:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ab0d:	3d 00 30 70 f8       	cmp    $0xf8703000,%eax
f011ab12:	74 17                	je     f011ab2b <test_kfree_bestfirstfit+0x560>
f011ab14:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ab1b:	83 ec 0c             	sub    $0xc,%esp
f011ab1e:	68 d0 c2 12 f0       	push   $0xf012c2d0
f011ab23:	e8 44 64 fe ff       	call   f0100f6c <cprintf>
f011ab28:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ab2b:	e8 10 9d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ab30:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011ab33:	74 17                	je     f011ab4c <test_kfree_bestfirstfit+0x581>
f011ab35:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ab3c:	83 ec 0c             	sub    $0xc,%esp
f011ab3f:	68 20 c2 12 f0       	push   $0xf012c220
f011ab44:	e8 23 64 fe ff       	call   f0100f6c <cprintf>
f011ab49:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 1536) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011ab4c:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011ab4f:	e8 b5 2e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ab54:	29 c3                	sub    %eax,%ebx
f011ab56:	89 d8                	mov    %ebx,%eax
f011ab58:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011ab5d:	77 17                	ja     f011ab76 <test_kfree_bestfirstfit+0x5ab>
f011ab5f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ab66:	83 ec 0c             	sub    $0xc,%esp
f011ab69:	68 8c c2 12 f0       	push   $0xf012c28c
f011ab6e:	e8 f9 63 fe ff       	call   f0100f6c <cprintf>
f011ab73:	83 c4 10             	add    $0x10,%esp
			lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f011ab76:	c7 45 80 ff fb 5f 00 	movl   $0x5ffbff,-0x80(%ebp)

			//14 KB
			freeFrames = sys_calculate_free_frames() ;
f011ab7d:	e8 87 2e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ab82:	89 45 c8             	mov    %eax,-0x38(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011ab85:	e8 b6 9c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ab8a:	89 45 c4             	mov    %eax,-0x3c(%ebp)
			ptr_allocations[7] = kmalloc(14*kilo);
f011ab8d:	83 ec 0c             	sub    $0xc,%esp
f011ab90:	68 00 38 00 00       	push   $0x3800
f011ab95:	e8 1c df fe ff       	call   f0108ab6 <kmalloc>
f011ab9a:	83 c4 10             	add    $0x10,%esp
f011ab9d:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
			if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011aba3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011aba9:	3d 00 30 d0 f8       	cmp    $0xf8d03000,%eax
f011abae:	74 17                	je     f011abc7 <test_kfree_bestfirstfit+0x5fc>
f011abb0:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011abb7:	83 ec 0c             	sub    $0xc,%esp
f011abba:	68 d0 c2 12 f0       	push   $0xf012c2d0
f011abbf:	e8 a8 63 fe ff       	call   f0100f6c <cprintf>
f011abc4:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011abc7:	e8 74 9c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011abcc:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011abcf:	74 17                	je     f011abe8 <test_kfree_bestfirstfit+0x61d>
f011abd1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011abd8:	83 ec 0c             	sub    $0xc,%esp
f011abdb:	68 20 c2 12 f0       	push   $0xf012c220
f011abe0:	e8 87 63 fe ff       	call   f0100f6c <cprintf>
f011abe5:	83 c4 10             	add    $0x10,%esp
			if ((freeFrames - sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011abe8:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011abeb:	e8 19 2e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011abf0:	29 c3                	sub    %eax,%ebx
f011abf2:	89 d8                	mov    %ebx,%eax
f011abf4:	83 f8 03             	cmp    $0x3,%eax
f011abf7:	77 17                	ja     f011ac10 <test_kfree_bestfirstfit+0x645>
f011abf9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ac00:	83 ec 0c             	sub    $0xc,%esp
f011ac03:	68 8c c2 12 f0       	push   $0xf012c28c
f011ac08:	e8 5f 63 fe ff       	call   f0100f6c <cprintf>
f011ac0d:	83 c4 10             	add    $0x10,%esp
			lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f011ac10:	c7 45 84 ff 37 00 00 	movl   $0x37ff,-0x7c(%ebp)
			ptr = (char*)ptr_allocations[7];
f011ac17:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011ac1d:	89 45 c0             	mov    %eax,-0x40(%ebp)
			for (i = 0; i < lastIndices[7]; ++i)
f011ac20:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ac27:	eb 0e                	jmp    f011ac37 <test_kfree_bestfirstfit+0x66c>
			{
				ptr[i] = 7 ;
f011ac29:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ac2c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ac2f:	01 d0                	add    %edx,%eax
f011ac31:	c6 00 07             	movb   $0x7,(%eax)
			if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
			if ((freeFrames - sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
			lastIndices[7] = (14*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[7];
			for (i = 0; i < lastIndices[7]; ++i)
f011ac34:	ff 45 f4             	incl   -0xc(%ebp)
f011ac37:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ac3a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ac3d:	7f ea                	jg     f011ac29 <test_kfree_bestfirstfit+0x65e>
	}

	//kfree some of the allocated spaces [10%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011ac3f:	e8 c5 2d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ac44:	89 45 bc             	mov    %eax,-0x44(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011ac47:	e8 f4 9b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ac4c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		kfree(ptr_allocations[0]);
f011ac4f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ac55:	83 ec 0c             	sub    $0xc,%esp
f011ac58:	50                   	push   %eax
f011ac59:	e8 72 de fe ff       	call   f0108ad0 <kfree>
f011ac5e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ac61:	e8 da 9b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ac66:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011ac69:	74 17                	je     f011ac82 <test_kfree_bestfirstfit+0x6b7>
f011ac6b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ac72:	83 ec 0c             	sub    $0xc,%esp
f011ac75:	68 20 c2 12 f0       	push   $0xf012c220
f011ac7a:	e8 ed 62 fe ff       	call   f0100f6c <cprintf>
f011ac7f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512 ) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011ac82:	e8 82 2d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ac87:	89 c2                	mov    %eax,%edx
f011ac89:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ac8c:	29 c2                	sub    %eax,%edx
f011ac8e:	89 d0                	mov    %edx,%eax
f011ac90:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011ac95:	77 17                	ja     f011acae <test_kfree_bestfirstfit+0x6e3>
f011ac97:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ac9e:	83 ec 0c             	sub    $0xc,%esp
f011aca1:	68 24 c6 12 f0       	push   $0xf012c624
f011aca6:	e8 c1 62 fe ff       	call   f0100f6c <cprintf>
f011acab:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011acae:	e8 56 2d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011acb3:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011acb6:	e8 85 9b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011acbb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		kfree(ptr_allocations[2]);
f011acbe:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011acc4:	83 ec 0c             	sub    $0xc,%esp
f011acc7:	50                   	push   %eax
f011acc8:	e8 03 de fe ff       	call   f0108ad0 <kfree>
f011accd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011acd0:	e8 6b 9b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011acd5:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011acd8:	74 17                	je     f011acf1 <test_kfree_bestfirstfit+0x726>
f011acda:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ace1:	83 ec 0c             	sub    $0xc,%esp
f011ace4:	68 20 c2 12 f0       	push   $0xf012c220
f011ace9:	e8 7e 62 fe ff       	call   f0100f6c <cprintf>
f011acee:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0 ) { correct = 0; cprintf("Wrong free: freeing a block from the dynamic allocator should not affect the free frames\n"); }
f011acf1:	e8 13 2d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011acf6:	89 c2                	mov    %eax,%edx
f011acf8:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011acfb:	39 c2                	cmp    %eax,%edx
f011acfd:	74 17                	je     f011ad16 <test_kfree_bestfirstfit+0x74b>
f011acff:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ad06:	83 ec 0c             	sub    $0xc,%esp
f011ad09:	68 2c c5 12 f0       	push   $0xf012c52c
f011ad0e:	e8 59 62 fe ff       	call   f0100f6c <cprintf>
f011ad13:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ad16:	e8 ee 2c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ad1b:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ad1e:	e8 1d 9b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ad23:	89 45 b8             	mov    %eax,-0x48(%ebp)
		kfree(ptr_allocations[1]);
f011ad26:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011ad2c:	83 ec 0c             	sub    $0xc,%esp
f011ad2f:	50                   	push   %eax
f011ad30:	e8 9b dd fe ff       	call   f0108ad0 <kfree>
f011ad35:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ad38:	e8 03 9b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ad3d:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011ad40:	74 17                	je     f011ad59 <test_kfree_bestfirstfit+0x78e>
f011ad42:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ad49:	83 ec 0c             	sub    $0xc,%esp
f011ad4c:	68 20 c2 12 f0       	push   $0xf012c220
f011ad51:	e8 16 62 fe ff       	call   f0100f6c <cprintf>
f011ad56:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011ad59:	e8 ab 2c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ad5e:	89 c2                	mov    %eax,%edx
f011ad60:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ad63:	29 c2                	sub    %eax,%edx
f011ad65:	89 d0                	mov    %edx,%eax
f011ad67:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011ad6c:	77 17                	ja     f011ad85 <test_kfree_bestfirstfit+0x7ba>
f011ad6e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ad75:	83 ec 0c             	sub    $0xc,%esp
f011ad78:	68 24 c6 12 f0       	push   $0xf012c624
f011ad7d:	e8 ea 61 fe ff       	call   f0100f6c <cprintf>
f011ad82:	83 c4 10             	add    $0x10,%esp

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011ad85:	e8 7f 2c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ad8a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ad8d:	e8 ae 9a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ad92:	89 45 b8             	mov    %eax,-0x48(%ebp)
		kfree(ptr_allocations[6]);
f011ad95:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011ad9b:	83 ec 0c             	sub    $0xc,%esp
f011ad9e:	50                   	push   %eax
f011ad9f:	e8 2c dd fe ff       	call   f0108ad0 <kfree>
f011ada4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ada7:	e8 94 9a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011adac:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f011adaf:	74 17                	je     f011adc8 <test_kfree_bestfirstfit+0x7fd>
f011adb1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011adb8:	83 ec 0c             	sub    $0xc,%esp
f011adbb:	68 20 c2 12 f0       	push   $0xf012c220
f011adc0:	e8 a7 61 fe ff       	call   f0100f6c <cprintf>
f011adc5:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 6*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011adc8:	e8 3c 2c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011adcd:	89 c2                	mov    %eax,%edx
f011adcf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011add2:	29 c2                	sub    %eax,%edx
f011add4:	89 d0                	mov    %edx,%eax
f011add6:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011addb:	77 17                	ja     f011adf4 <test_kfree_bestfirstfit+0x829>
f011addd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ade4:	83 ec 0c             	sub    $0xc,%esp
f011ade7:	68 24 c6 12 f0       	push   $0xf012c624
f011adec:	e8 7b 61 fe ff       	call   f0100f6c <cprintf>
f011adf1:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011adf4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011adf8:	74 04                	je     f011adfe <test_kfree_bestfirstfit+0x833>
f011adfa:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)

	correct = 1 ;
f011adfe:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//Check memory access after kfree [10%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f011ae05:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011ae0b:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011ae0e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ae15:	eb 1e                	jmp    f011ae35 <test_kfree_bestfirstfit+0x86a>
		{
			sums[3] += ptr[i] ;
f011ae17:	8b 95 24 ff ff ff    	mov    -0xdc(%ebp),%edx
f011ae1d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011ae20:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ae23:	01 c8                	add    %ecx,%eax
f011ae25:	8a 00                	mov    (%eax),%al
f011ae27:	0f be c0             	movsbl %al,%eax
f011ae2a:	01 d0                	add    %edx,%eax
f011ae2c:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	correct = 1 ;
	//Check memory access after kfree [10%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011ae32:	ff 45 f4             	incl   -0xc(%ebp)
f011ae35:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011ae3b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ae3e:	7f d7                	jg     f011ae17 <test_kfree_bestfirstfit+0x84c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }
f011ae40:	8b 95 24 ff ff ff    	mov    -0xdc(%ebp),%edx
f011ae46:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011ae4c:	89 c1                	mov    %eax,%ecx
f011ae4e:	01 c9                	add    %ecx,%ecx
f011ae50:	01 c8                	add    %ecx,%eax
f011ae52:	39 c2                	cmp    %eax,%edx
f011ae54:	74 17                	je     f011ae6d <test_kfree_bestfirstfit+0x8a2>
f011ae56:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ae5d:	83 ec 0c             	sub    $0xc,%esp
f011ae60:	68 5c c6 12 f0       	push   $0xf012c65c
f011ae65:	e8 02 61 fe ff       	call   f0100f6c <cprintf>
f011ae6a:	83 c4 10             	add    $0x10,%esp

		//7 KB
		ptr = (char*)ptr_allocations[4];
f011ae6d:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011ae73:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011ae76:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ae7d:	eb 1e                	jmp    f011ae9d <test_kfree_bestfirstfit+0x8d2>
		{
			sums[4] += ptr[i] ;
f011ae7f:	8b 95 28 ff ff ff    	mov    -0xd8(%ebp),%edx
f011ae85:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011ae88:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ae8b:	01 c8                	add    %ecx,%eax
f011ae8d:	8a 00                	mov    (%eax),%al
f011ae8f:	0f be c0             	movsbl %al,%eax
f011ae92:	01 d0                	add    %edx,%eax
f011ae94:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011ae9a:	ff 45 f4             	incl   -0xc(%ebp)
f011ae9d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011aea3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011aea6:	7f d7                	jg     f011ae7f <test_kfree_bestfirstfit+0x8b4>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }
f011aea8:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011aeae:	8b 95 78 ff ff ff    	mov    -0x88(%ebp),%edx
f011aeb4:	c1 e2 02             	shl    $0x2,%edx
f011aeb7:	39 d0                	cmp    %edx,%eax
f011aeb9:	74 17                	je     f011aed2 <test_kfree_bestfirstfit+0x907>
f011aebb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011aec2:	83 ec 0c             	sub    $0xc,%esp
f011aec5:	68 5c c6 12 f0       	push   $0xf012c65c
f011aeca:	e8 9d 60 fe ff       	call   f0100f6c <cprintf>
f011aecf:	83 c4 10             	add    $0x10,%esp

		//3 MB
		ptr = (char*)ptr_allocations[5];
f011aed2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011aed8:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011aedb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011aee2:	eb 1e                	jmp    f011af02 <test_kfree_bestfirstfit+0x937>
		{
			sums[5] += ptr[i] ;
f011aee4:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f011aeea:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011aeed:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011aef0:	01 c8                	add    %ecx,%eax
f011aef2:	8a 00                	mov    (%eax),%al
f011aef4:	0f be c0             	movsbl %al,%eax
f011aef7:	01 d0                	add    %edx,%eax
f011aef9:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011aeff:	ff 45 f4             	incl   -0xc(%ebp)
f011af02:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011af08:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011af0b:	7f d7                	jg     f011aee4 <test_kfree_bestfirstfit+0x919>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }
f011af0d:	8b 8d 2c ff ff ff    	mov    -0xd4(%ebp),%ecx
f011af13:	8b 95 7c ff ff ff    	mov    -0x84(%ebp),%edx
f011af19:	89 d0                	mov    %edx,%eax
f011af1b:	c1 e0 02             	shl    $0x2,%eax
f011af1e:	01 d0                	add    %edx,%eax
f011af20:	39 c1                	cmp    %eax,%ecx
f011af22:	74 17                	je     f011af3b <test_kfree_bestfirstfit+0x970>
f011af24:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011af2b:	83 ec 0c             	sub    $0xc,%esp
f011af2e:	68 5c c6 12 f0       	push   $0xf012c65c
f011af33:	e8 34 60 fe ff       	call   f0100f6c <cprintf>
f011af38:	83 c4 10             	add    $0x10,%esp

		//14 KB
		ptr = (char*)ptr_allocations[7];
f011af3b:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011af41:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011af44:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011af4b:	eb 1e                	jmp    f011af6b <test_kfree_bestfirstfit+0x9a0>
		{
			sums[7] += ptr[i] ;
f011af4d:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f011af53:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011af56:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011af59:	01 c8                	add    %ecx,%eax
f011af5b:	8a 00                	mov    (%eax),%al
f011af5d:	0f be c0             	movsbl %al,%eax
f011af60:	01 d0                	add    %edx,%eax
f011af62:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011af68:	ff 45 f4             	incl   -0xc(%ebp)
f011af6b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011af6e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011af71:	7f da                	jg     f011af4d <test_kfree_bestfirstfit+0x982>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	{ correct = 0; cprintf("kfree: invalid read after freeing some allocations\n"); }
f011af73:	8b 8d 34 ff ff ff    	mov    -0xcc(%ebp),%ecx
f011af79:	8b 55 84             	mov    -0x7c(%ebp),%edx
f011af7c:	89 d0                	mov    %edx,%eax
f011af7e:	01 c0                	add    %eax,%eax
f011af80:	01 d0                	add    %edx,%eax
f011af82:	01 c0                	add    %eax,%eax
f011af84:	01 d0                	add    %edx,%eax
f011af86:	39 c1                	cmp    %eax,%ecx
f011af88:	74 17                	je     f011afa1 <test_kfree_bestfirstfit+0x9d6>
f011af8a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011af91:	83 ec 0c             	sub    $0xc,%esp
f011af94:	68 5c c6 12 f0       	push   $0xf012c65c
f011af99:	e8 ce 5f fe ff       	call   f0100f6c <cprintf>
f011af9e:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=10 ;
f011afa1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011afa5:	74 04                	je     f011afab <test_kfree_bestfirstfit+0x9e0>
f011afa7:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)

	correct = 1 ;
f011afab:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011afb2:	e8 52 2a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011afb7:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011afba:	e8 81 98 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011afbf:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f011afc2:	83 ec 0c             	sub    $0xc,%esp
f011afc5:	68 00 00 30 00       	push   $0x300000
f011afca:	e8 e7 da fe ff       	call   f0108ab6 <kmalloc>
f011afcf:	83 c4 10             	add    $0x10,%esp
f011afd2:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011afd8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011afde:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011afe3:	74 17                	je     f011affc <test_kfree_bestfirstfit+0xa31>
f011afe5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011afec:	83 ec 0c             	sub    $0xc,%esp
f011afef:	68 d0 c2 12 f0       	push   $0xf012c2d0
f011aff4:	e8 73 5f fe ff       	call   f0100f6c <cprintf>
f011aff9:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011affc:	e8 3f 98 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b001:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011b004:	74 17                	je     f011b01d <test_kfree_bestfirstfit+0xa52>
f011b006:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b00d:	83 ec 0c             	sub    $0xc,%esp
f011b010:	68 20 c2 12 f0       	push   $0xf012c220
f011b015:	e8 52 5f fe ff       	call   f0100f6c <cprintf>
f011b01a:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011b01d:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011b020:	e8 e4 29 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b025:	29 c3                	sub    %eax,%ebx
f011b027:	89 d8                	mov    %ebx,%eax
f011b029:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011b02e:	77 17                	ja     f011b047 <test_kfree_bestfirstfit+0xa7c>
f011b030:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b037:	83 ec 0c             	sub    $0xc,%esp
f011b03a:	68 8c c2 12 f0       	push   $0xf012c28c
f011b03f:	e8 28 5f fe ff       	call   f0100f6c <cprintf>
f011b044:	83 c4 10             	add    $0x10,%esp
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f011b047:	c7 45 88 ff ff 2f 00 	movl   $0x2fffff,-0x78(%ebp)
		ptr = (char*)ptr_allocations[8];
f011b04e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b054:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f011b057:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b05e:	eb 0e                	jmp    f011b06e <test_kfree_bestfirstfit+0xaa3>
		{
			ptr[i] = 8 ;
f011b060:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b063:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b066:	01 d0                	add    %edx,%eax
f011b068:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f011b06b:	ff 45 f4             	incl   -0xc(%ebp)
f011b06e:	8b 45 88             	mov    -0x78(%ebp),%eax
f011b071:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b074:	7f ea                	jg     f011b060 <test_kfree_bestfirstfit+0xa95>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f011b076:	e8 8e 29 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b07b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b07e:	e8 bd 97 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b083:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f011b086:	83 ec 0c             	sub    $0xc,%esp
f011b089:	68 00 00 10 00       	push   $0x100000
f011b08e:	e8 23 da fe ff       	call   f0108ab6 <kmalloc>
f011b093:	83 c4 10             	add    $0x10,%esp
f011b096:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega /*+ 4*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011b09c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b0a2:	3d 00 10 30 f8       	cmp    $0xf8301000,%eax
f011b0a7:	74 17                	je     f011b0c0 <test_kfree_bestfirstfit+0xaf5>
f011b0a9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b0b0:	83 ec 0c             	sub    $0xc,%esp
f011b0b3:	68 d0 c2 12 f0       	push   $0xf012c2d0
f011b0b8:	e8 af 5e fe ff       	call   f0100f6c <cprintf>
f011b0bd:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b0c0:	e8 7b 97 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b0c5:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011b0c8:	74 17                	je     f011b0e1 <test_kfree_bestfirstfit+0xb16>
f011b0ca:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b0d1:	83 ec 0c             	sub    $0xc,%esp
f011b0d4:	68 20 c2 12 f0       	push   $0xf012c220
f011b0d9:	e8 8e 5e fe ff       	call   f0100f6c <cprintf>
f011b0de:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011b0e1:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011b0e4:	e8 20 29 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b0e9:	29 c3                	sub    %eax,%ebx
f011b0eb:	89 d8                	mov    %ebx,%eax
f011b0ed:	3d ff 00 00 00       	cmp    $0xff,%eax
f011b0f2:	77 17                	ja     f011b10b <test_kfree_bestfirstfit+0xb40>
f011b0f4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b0fb:	83 ec 0c             	sub    $0xc,%esp
f011b0fe:	68 8c c2 12 f0       	push   $0xf012c28c
f011b103:	e8 64 5e fe ff       	call   f0100f6c <cprintf>
f011b108:	83 c4 10             	add    $0x10,%esp
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f011b10b:	c7 45 90 ff ff 0f 00 	movl   $0xfffff,-0x70(%ebp)
		ptr = (char*)ptr_allocations[10];
f011b112:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b118:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f011b11b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b122:	eb 0e                	jmp    f011b132 <test_kfree_bestfirstfit+0xb67>
		{
			ptr[i] = 10 ;
f011b124:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b127:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b12a:	01 d0                	add    %edx,%eax
f011b12c:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega /*+ 4*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) < 256) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f011b12f:	ff 45 f4             	incl   -0xc(%ebp)
f011b132:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b135:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b138:	7f ea                	jg     f011b124 <test_kfree_bestfirstfit+0xb59>
		{
			ptr[i] = 10 ;
		}

		//1 KB [Should be allocated in 1st hole in the Dynamic Allocator]
		freeFrames = sys_calculate_free_frames() ;
f011b13a:	e8 ca 28 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b13f:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b142:	e8 f9 96 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b147:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[9] = kmalloc(1*kilo);
f011b14a:	83 ec 0c             	sub    $0xc,%esp
f011b14d:	68 00 04 00 00       	push   $0x400
f011b152:	e8 5f d9 fe ff       	call   f0108ab6 <kmalloc>
f011b157:	83 c4 10             	add    $0x10,%esp
f011b15a:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if ((ptr_allocations[9] < ptr_allocations[2]) || (ptr_allocations[9] > (ptr_allocations[2] + 1*kilo)))
f011b160:	8b 95 ec fe ff ff    	mov    -0x114(%ebp),%edx
f011b166:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b16c:	39 c2                	cmp    %eax,%edx
f011b16e:	72 16                	jb     f011b186 <test_kfree_bestfirstfit+0xbbb>
f011b170:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011b176:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011b17c:	81 c2 00 04 00 00    	add    $0x400,%edx
f011b182:	39 d0                	cmp    %edx,%eax
f011b184:	76 17                	jbe    f011b19d <test_kfree_bestfirstfit+0xbd2>
		{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011b186:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b18d:	83 ec 0c             	sub    $0xc,%esp
f011b190:	68 d0 c2 12 f0       	push   $0xf012c2d0
f011b195:	e8 d2 5d fe ff       	call   f0100f6c <cprintf>
f011b19a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b19d:	e8 9e 96 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b1a2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011b1a5:	74 17                	je     f011b1be <test_kfree_bestfirstfit+0xbf3>
f011b1a7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b1ae:	83 ec 0c             	sub    $0xc,%esp
f011b1b1:	68 20 c2 12 f0       	push   $0xf012c220
f011b1b6:	e8 b1 5d fe ff       	call   f0100f6c <cprintf>
f011b1bb:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
f011b1be:	e8 46 28 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b1c3:	89 c2                	mov    %eax,%edx
f011b1c5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b1c8:	39 c2                	cmp    %eax,%edx
f011b1ca:	74 17                	je     f011b1e3 <test_kfree_bestfirstfit+0xc18>
f011b1cc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b1d3:	83 ec 0c             	sub    $0xc,%esp
f011b1d6:	68 90 c6 12 f0       	push   $0xf012c690
f011b1db:	e8 8c 5d fe ff       	call   f0100f6c <cprintf>
f011b1e0:	83 c4 10             	add    $0x10,%esp
		lastIndices[9] = (1*kilo)/sizeof(char) - 1;
f011b1e3:	c7 45 8c ff 03 00 00 	movl   $0x3ff,-0x74(%ebp)
		ptr = (char*)ptr_allocations[9];
f011b1ea:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011b1f0:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f011b1f3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b1fa:	eb 0e                	jmp    f011b20a <test_kfree_bestfirstfit+0xc3f>
		{
			ptr[i] = 9 ;
f011b1fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b1ff:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b202:	01 d0                	add    %edx,%eax
f011b204:	c6 00 09             	movb   $0x9,(%eax)
		{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
		lastIndices[9] = (1*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f011b207:	ff 45 f4             	incl   -0xc(%ebp)
f011b20a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011b20d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b210:	7f ea                	jg     f011b1fc <test_kfree_bestfirstfit+0xc31>
		{
			ptr[i] = 9 ;
		}

	}
	if (correct)	eval+=15 ;
f011b212:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011b216:	74 04                	je     f011b21c <test_kfree_bestfirstfit+0xc51>
f011b218:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)

	correct = 1 ;
f011b21c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//kfree remaining allocated spaces [15%]
	{
		//kfree 3 MB [PAGE ALLOCATOR: Should be Merged with NEXT 6 MB hole - total = 9MB]
		freeFrames = sys_calculate_free_frames() ;
f011b223:	e8 e1 27 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b228:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b22b:	e8 10 96 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b230:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[5]);
f011b233:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011b239:	83 ec 0c             	sub    $0xc,%esp
f011b23c:	50                   	push   %eax
f011b23d:	e8 8e d8 fe ff       	call   f0108ad0 <kfree>
f011b242:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b245:	e8 f6 95 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b24a:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011b24d:	74 17                	je     f011b266 <test_kfree_bestfirstfit+0xc9b>
f011b24f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b256:	83 ec 0c             	sub    $0xc,%esp
f011b259:	68 20 c2 12 f0       	push   $0xf012c220
f011b25e:	e8 09 5d fe ff       	call   f0100f6c <cprintf>
f011b263:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 3*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011b266:	e8 9e 27 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b26b:	89 c2                	mov    %eax,%edx
f011b26d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b270:	29 c2                	sub    %eax,%edx
f011b272:	89 d0                	mov    %edx,%eax
f011b274:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011b279:	77 17                	ja     f011b292 <test_kfree_bestfirstfit+0xcc7>
f011b27b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b282:	83 ec 0c             	sub    $0xc,%esp
f011b285:	68 24 c6 12 f0       	push   $0xf012c624
f011b28a:	e8 dd 5c fe ff       	call   f0100f6c <cprintf>
f011b28f:	83 c4 10             	add    $0x10,%esp

		//kfree 7 KB [PAGE ALLOCATOR: Should be Merged with NEXT 9 MB hole - total = 9MB + 8KB]
		freeFrames = sys_calculate_free_frames() ;
f011b292:	e8 72 27 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b297:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b29a:	e8 a1 95 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b29f:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[4]);
f011b2a2:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b2a8:	83 ec 0c             	sub    $0xc,%esp
f011b2ab:	50                   	push   %eax
f011b2ac:	e8 1f d8 fe ff       	call   f0108ad0 <kfree>
f011b2b1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b2b4:	e8 87 95 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b2b9:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011b2bc:	74 17                	je     f011b2d5 <test_kfree_bestfirstfit+0xd0a>
f011b2be:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b2c5:	83 ec 0c             	sub    $0xc,%esp
f011b2c8:	68 20 c2 12 f0       	push   $0xf012c220
f011b2cd:	e8 9a 5c fe ff       	call   f0100f6c <cprintf>
f011b2d2:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 2) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011b2d5:	e8 2f 27 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b2da:	89 c2                	mov    %eax,%edx
f011b2dc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b2df:	29 c2                	sub    %eax,%edx
f011b2e1:	89 d0                	mov    %edx,%eax
f011b2e3:	83 f8 01             	cmp    $0x1,%eax
f011b2e6:	77 17                	ja     f011b2ff <test_kfree_bestfirstfit+0xd34>
f011b2e8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b2ef:	83 ec 0c             	sub    $0xc,%esp
f011b2f2:	68 24 c6 12 f0       	push   $0xf012c624
f011b2f7:	e8 70 5c fe ff       	call   f0100f6c <cprintf>
f011b2fc:	83 c4 10             	add    $0x10,%esp

		//kfree 1 KB [DYNAMIC ALLOCATOR]
		freeFrames = sys_calculate_free_frames() ;
f011b2ff:	e8 05 27 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b304:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b307:	e8 34 95 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b30c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[9]);
f011b30f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011b315:	83 ec 0c             	sub    $0xc,%esp
f011b318:	50                   	push   %eax
f011b319:	e8 b2 d7 fe ff       	call   f0108ad0 <kfree>
f011b31e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b321:	e8 1a 95 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b326:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011b329:	74 17                	je     f011b342 <test_kfree_bestfirstfit+0xd77>
f011b32b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b332:	83 ec 0c             	sub    $0xc,%esp
f011b335:	68 20 c2 12 f0       	push   $0xf012c220
f011b33a:	e8 2d 5c fe ff       	call   f0100f6c <cprintf>
f011b33f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011b342:	e8 c2 26 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b347:	89 c2                	mov    %eax,%edx
f011b349:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b34c:	39 c2                	cmp    %eax,%edx
f011b34e:	74 17                	je     f011b367 <test_kfree_bestfirstfit+0xd9c>
f011b350:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b357:	83 ec 0c             	sub    $0xc,%esp
f011b35a:	68 24 c6 12 f0       	push   $0xf012c624
f011b35f:	e8 08 5c fe ff       	call   f0100f6c <cprintf>
f011b364:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB [DYNAMIC ALLOCATOR: Should be Merged with PREV remaining area of 2KB & NEXT free space]
		freeFrames = sys_calculate_free_frames() ;
f011b367:	e8 9d 26 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b36c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b36f:	e8 cc 94 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b374:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[3]);
f011b377:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011b37d:	83 ec 0c             	sub    $0xc,%esp
f011b380:	50                   	push   %eax
f011b381:	e8 4a d7 fe ff       	call   f0108ad0 <kfree>
f011b386:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b389:	e8 b2 94 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b38e:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011b391:	74 17                	je     f011b3aa <test_kfree_bestfirstfit+0xddf>
f011b393:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b39a:	83 ec 0c             	sub    $0xc,%esp
f011b39d:	68 20 c2 12 f0       	push   $0xf012c220
f011b3a2:	e8 c5 5b fe ff       	call   f0100f6c <cprintf>
f011b3a7:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) { correct = 0; cprintf("Wrong free: freeing a block from the dynamic allocator should not affect the free frames\n"); }
f011b3aa:	e8 5a 26 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b3af:	89 c2                	mov    %eax,%edx
f011b3b1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b3b4:	39 c2                	cmp    %eax,%edx
f011b3b6:	74 17                	je     f011b3cf <test_kfree_bestfirstfit+0xe04>
f011b3b8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b3bf:	83 ec 0c             	sub    $0xc,%esp
f011b3c2:	68 2c c5 12 f0       	push   $0xf012c52c
f011b3c7:	e8 a0 5b fe ff       	call   f0100f6c <cprintf>
f011b3cc:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB [PAGE ALLOCATOR: Should be Merged with PREV 9MB + 8KB hole - total = 9MB + 24KB]
		freeFrames = sys_calculate_free_frames() ;
f011b3cf:	e8 35 26 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b3d4:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b3d7:	e8 64 94 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b3dc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[7]);
f011b3df:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011b3e5:	83 ec 0c             	sub    $0xc,%esp
f011b3e8:	50                   	push   %eax
f011b3e9:	e8 e2 d6 fe ff       	call   f0108ad0 <kfree>
f011b3ee:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b3f1:	e8 4a 94 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b3f6:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011b3f9:	74 17                	je     f011b412 <test_kfree_bestfirstfit+0xe47>
f011b3fb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b402:	83 ec 0c             	sub    $0xc,%esp
f011b405:	68 20 c2 12 f0       	push   $0xf012c220
f011b40a:	e8 5d 5b fe ff       	call   f0100f6c <cprintf>
f011b40f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 4) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011b412:	e8 f2 25 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b417:	89 c2                	mov    %eax,%edx
f011b419:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b41c:	29 c2                	sub    %eax,%edx
f011b41e:	89 d0                	mov    %edx,%eax
f011b420:	83 f8 03             	cmp    $0x3,%eax
f011b423:	77 17                	ja     f011b43c <test_kfree_bestfirstfit+0xe71>
f011b425:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b42c:	83 ec 0c             	sub    $0xc,%esp
f011b42f:	68 24 c6 12 f0       	push   $0xf012c624
f011b434:	e8 33 5b fe ff       	call   f0100f6c <cprintf>
f011b439:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB [PAGE ALLOCATOR: Should be Merged with NEXT remaining hole ]
		freeFrames = sys_calculate_free_frames() ;
f011b43c:	e8 c8 25 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b441:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b444:	e8 f7 93 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b449:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[10]);
f011b44c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b452:	83 ec 0c             	sub    $0xc,%esp
f011b455:	50                   	push   %eax
f011b456:	e8 75 d6 fe ff       	call   f0108ad0 <kfree>
f011b45b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b45e:	e8 dd 93 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b463:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011b466:	74 17                	je     f011b47f <test_kfree_bestfirstfit+0xeb4>
f011b468:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b46f:	83 ec 0c             	sub    $0xc,%esp
f011b472:	68 20 c2 12 f0       	push   $0xf012c220
f011b477:	e8 f0 5a fe ff       	call   f0100f6c <cprintf>
f011b47c:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 1*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011b47f:	e8 85 25 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b484:	89 c2                	mov    %eax,%edx
f011b486:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b489:	29 c2                	sub    %eax,%edx
f011b48b:	89 d0                	mov    %edx,%eax
f011b48d:	3d ff 00 00 00       	cmp    $0xff,%eax
f011b492:	77 17                	ja     f011b4ab <test_kfree_bestfirstfit+0xee0>
f011b494:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b49b:	83 ec 0c             	sub    $0xc,%esp
f011b49e:	68 24 c6 12 f0       	push   $0xf012c624
f011b4a3:	e8 c4 5a fe ff       	call   f0100f6c <cprintf>
f011b4a8:	83 c4 10             	add    $0x10,%esp

		//kfree 3 MB [PAGE ALLOCATOR: Should be Merged with PREV 9MB + 24KB hole & NEXT remaining hole - total = ALL PAGE ALLOCATOR Space]
		freeFrames = sys_calculate_free_frames() ;
f011b4ab:	e8 59 25 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b4b0:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b4b3:	e8 88 93 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b4b8:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		kfree(ptr_allocations[8]);
f011b4bb:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b4c1:	83 ec 0c             	sub    $0xc,%esp
f011b4c4:	50                   	push   %eax
f011b4c5:	e8 06 d6 fe ff       	call   f0108ad0 <kfree>
f011b4ca:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b4cd:	e8 6e 93 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b4d2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011b4d5:	74 17                	je     f011b4ee <test_kfree_bestfirstfit+0xf23>
f011b4d7:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b4de:	83 ec 0c             	sub    $0xc,%esp
f011b4e1:	68 20 c2 12 f0       	push   $0xf012c220
f011b4e6:	e8 81 5a fe ff       	call   f0100f6c <cprintf>
f011b4eb:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 3*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011b4ee:	e8 16 25 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b4f3:	89 c2                	mov    %eax,%edx
f011b4f5:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b4f8:	29 c2                	sub    %eax,%edx
f011b4fa:	89 d0                	mov    %edx,%eax
f011b4fc:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011b501:	77 17                	ja     f011b51a <test_kfree_bestfirstfit+0xf4f>
f011b503:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b50a:	83 ec 0c             	sub    $0xc,%esp
f011b50d:	68 24 c6 12 f0       	push   $0xf012c624
f011b512:	e8 55 5a fe ff       	call   f0100f6c <cprintf>
f011b517:	83 c4 10             	add    $0x10,%esp

		//				if(start_freeFrames != (sys_calculate_free_frames())) {{ correct = 0; cprintf("Wrong kfree: not all pages removed correctly at end\n"); }}
	}
	if (correct)	eval+=15 ;
f011b51a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011b51e:	74 04                	je     f011b524 <test_kfree_bestfirstfit+0xf59>
f011b520:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)

	correct = 1 ;
f011b524:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f011b52b:	83 ec 0c             	sub    $0xc,%esp
f011b52e:	6a 03                	push   $0x3
f011b530:	e8 eb 28 ff ff       	call   f010de20 <sys_bypassPageFault>
f011b535:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i <= 10; ++i)
f011b538:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b53f:	e9 af 00 00 00       	jmp    f011b5f3 <test_kfree_bestfirstfit+0x1028>
		{
			//SKIP CHECKING THOSE IN DYNAMIC ALLOCATOR AREA
			if (i == 2 || i == 3 || i == 9)
f011b544:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f011b548:	0f 84 a1 00 00 00    	je     f011b5ef <test_kfree_bestfirstfit+0x1024>
f011b54e:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f011b552:	0f 84 97 00 00 00    	je     f011b5ef <test_kfree_bestfirstfit+0x1024>
f011b558:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f011b55c:	0f 84 8d 00 00 00    	je     f011b5ef <test_kfree_bestfirstfit+0x1024>
			{
				continue;
			}
			ptr = (char *) ptr_allocations[i];
f011b562:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b565:	8b 84 85 c8 fe ff ff 	mov    -0x138(%ebp,%eax,4),%eax
f011b56c:	89 45 c0             	mov    %eax,-0x40(%ebp)
			ptr[0] = 10;
f011b56f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b572:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0]))
f011b575:	e8 94 28 ff ff       	call   f010de0e <sys_rcr2>
f011b57a:	89 c2                	mov    %eax,%edx
f011b57c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b57f:	39 c2                	cmp    %eax,%edx
f011b581:	74 1d                	je     f011b5a0 <test_kfree_bestfirstfit+0xfd5>
				if (correct)
f011b583:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011b587:	74 17                	je     f011b5a0 <test_kfree_bestfirstfit+0xfd5>
				{ correct = 0; cprintf("kfree: successful access to freed space!! it should not be succeeded\n"); }
f011b589:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b590:	83 ec 0c             	sub    $0xc,%esp
f011b593:	68 08 c7 12 f0       	push   $0xf012c708
f011b598:	e8 cf 59 fe ff       	call   f0100f6c <cprintf>
f011b59d:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f011b5a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b5a3:	8b 84 85 68 ff ff ff 	mov    -0x98(%ebp,%eax,4),%eax
f011b5aa:	89 c2                	mov    %eax,%edx
f011b5ac:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b5af:	01 d0                	add    %edx,%eax
f011b5b1:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]]))
f011b5b4:	e8 55 28 ff ff       	call   f010de0e <sys_rcr2>
f011b5b9:	89 c2                	mov    %eax,%edx
f011b5bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011b5be:	8b 84 85 68 ff ff ff 	mov    -0x98(%ebp,%eax,4),%eax
f011b5c5:	89 c1                	mov    %eax,%ecx
f011b5c7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b5ca:	01 c8                	add    %ecx,%eax
f011b5cc:	39 c2                	cmp    %eax,%edx
f011b5ce:	74 20                	je     f011b5f0 <test_kfree_bestfirstfit+0x1025>
				if (correct)
f011b5d0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011b5d4:	74 1a                	je     f011b5f0 <test_kfree_bestfirstfit+0x1025>
				{ correct = 0; cprintf("kfree: successful access to freed space!! it should not be succeeded\n"); }
f011b5d6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b5dd:	83 ec 0c             	sub    $0xc,%esp
f011b5e0:	68 08 c7 12 f0       	push   $0xf012c708
f011b5e5:	e8 82 59 fe ff       	call   f0100f6c <cprintf>
f011b5ea:	83 c4 10             	add    $0x10,%esp
f011b5ed:	eb 01                	jmp    f011b5f0 <test_kfree_bestfirstfit+0x1025>
		for (i = 0; i <= 10; ++i)
		{
			//SKIP CHECKING THOSE IN DYNAMIC ALLOCATOR AREA
			if (i == 2 || i == 3 || i == 9)
			{
				continue;
f011b5ef:	90                   	nop
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i <= 10; ++i)
f011b5f0:	ff 45 f4             	incl   -0xc(%ebp)
f011b5f3:	83 7d f4 0a          	cmpl   $0xa,-0xc(%ebp)
f011b5f7:	0f 8e 47 ff ff ff    	jle    f011b544 <test_kfree_bestfirstfit+0xf79>
				if (correct)
				{ correct = 0; cprintf("kfree: successful access to freed space!! it should not be succeeded\n"); }
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f011b5fd:	83 ec 0c             	sub    $0xc,%esp
f011b600:	6a 00                	push   $0x0
f011b602:	e8 19 28 ff ff       	call   f010de20 <sys_bypassPageFault>
f011b607:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=15 ;
f011b60a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011b60e:	74 04                	je     f011b614 <test_kfree_bestfirstfit+0x1049>
f011b610:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)

	correct = 1 ;
f011b614:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)

	//Allocate after kfree ALL [30%]
	{
		//[DYNAMIC ALLOCATOR] Allocate in merged freed space
		//1 KB
		freeFrames = sys_calculate_free_frames() ;
f011b61b:	e8 e9 23 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b620:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b623:	e8 18 92 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b628:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[11] = kmalloc(1*kilo);
f011b62b:	83 ec 0c             	sub    $0xc,%esp
f011b62e:	68 00 04 00 00       	push   $0x400
f011b633:	e8 7e d4 fe ff       	call   f0108ab6 <kmalloc>
f011b638:	83 c4 10             	add    $0x10,%esp
f011b63b:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
		if ((ptr_allocations[11] < ptr_allocations[2]) || (ptr_allocations[11] > (ptr_allocations[2] + 1*kilo)))
f011b641:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f011b647:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b64d:	39 c2                	cmp    %eax,%edx
f011b64f:	72 16                	jb     f011b667 <test_kfree_bestfirstfit+0x109c>
f011b651:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b657:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011b65d:	81 c2 00 04 00 00    	add    $0x400,%edx
f011b663:	39 d0                	cmp    %edx,%eax
f011b665:	76 17                	jbe    f011b67e <test_kfree_bestfirstfit+0x10b3>
		{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011b667:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b66e:	83 ec 0c             	sub    $0xc,%esp
f011b671:	68 d0 c2 12 f0       	push   $0xf012c2d0
f011b676:	e8 f1 58 fe ff       	call   f0100f6c <cprintf>
f011b67b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b67e:	e8 bd 91 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b683:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011b686:	74 17                	je     f011b69f <test_kfree_bestfirstfit+0x10d4>
f011b688:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b68f:	83 ec 0c             	sub    $0xc,%esp
f011b692:	68 20 c2 12 f0       	push   $0xf012c220
f011b697:	e8 d0 58 fe ff       	call   f0100f6c <cprintf>
f011b69c:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
f011b69f:	e8 65 23 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b6a4:	89 c2                	mov    %eax,%edx
f011b6a6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b6a9:	39 c2                	cmp    %eax,%edx
f011b6ab:	74 17                	je     f011b6c4 <test_kfree_bestfirstfit+0x10f9>
f011b6ad:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b6b4:	83 ec 0c             	sub    $0xc,%esp
f011b6b7:	68 90 c6 12 f0       	push   $0xf012c690
f011b6bc:	e8 ab 58 fe ff       	call   f0100f6c <cprintf>
f011b6c1:	83 c4 10             	add    $0x10,%esp
		lastIndices[11] = (1*kilo)/sizeof(char) - 1;
f011b6c4:	c7 45 94 ff 03 00 00 	movl   $0x3ff,-0x6c(%ebp)
		ptr = (char*)ptr_allocations[11];
f011b6cb:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b6d1:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f011b6d4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b6db:	eb 0e                	jmp    f011b6eb <test_kfree_bestfirstfit+0x1120>
		{
			ptr[i] = 11 ;
f011b6dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b6e0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b6e3:	01 d0                	add    %edx,%eax
f011b6e5:	c6 00 0b             	movb   $0xb,(%eax)
		{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
		lastIndices[11] = (1*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f011b6e8:	ff 45 f4             	incl   -0xc(%ebp)
f011b6eb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011b6ee:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b6f1:	7f ea                	jg     f011b6dd <test_kfree_bestfirstfit+0x1112>
			ptr[i] = 11 ;
		}

		//[DYNAMIC ALLOCATOR] Allocate in merged freed space
		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011b6f3:	e8 11 23 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b6f8:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b6fb:	e8 40 91 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b700:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[12] = kmalloc(2*kilo);
f011b703:	83 ec 0c             	sub    $0xc,%esp
f011b706:	68 00 08 00 00       	push   $0x800
f011b70b:	e8 a6 d3 fe ff       	call   f0108ab6 <kmalloc>
f011b710:	83 c4 10             	add    $0x10,%esp
f011b713:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
		//expected = ptr_allocations[2] + 1*kilo + sizeOfMetaData();
		//if (ptr_allocations[12] != expected)
		if ((ptr_allocations[12] < ptr_allocations[2] + 1*kilo) || (ptr_allocations[12] > (ptr_allocations[2] + 2*kilo)))
f011b719:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b71f:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011b725:	81 c2 00 04 00 00    	add    $0x400,%edx
f011b72b:	39 d0                	cmp    %edx,%eax
f011b72d:	72 16                	jb     f011b745 <test_kfree_bestfirstfit+0x117a>
f011b72f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b735:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011b73b:	81 c2 00 08 00 00    	add    $0x800,%edx
f011b741:	39 d0                	cmp    %edx,%eax
f011b743:	76 35                	jbe    f011b77a <test_kfree_bestfirstfit+0x11af>
		{
			correct = 0;
f011b745:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
			cprintf("Wrong start address for the allocated space... check return address of kmalloc. Expected [%x, %x], Actual %x\n", (ptr_allocations[2] + 1*kilo), (ptr_allocations[2] + 2*kilo), ptr_allocations[12]);
f011b74c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b752:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011b758:	8d 8a 00 08 00 00    	lea    0x800(%edx),%ecx
f011b75e:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011b764:	81 c2 00 04 00 00    	add    $0x400,%edx
f011b76a:	50                   	push   %eax
f011b76b:	51                   	push   %ecx
f011b76c:	52                   	push   %edx
f011b76d:	68 50 c7 12 f0       	push   $0xf012c750
f011b772:	e8 f5 57 fe ff       	call   f0100f6c <cprintf>
f011b777:	83 c4 10             	add    $0x10,%esp
		}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b77a:	e8 c1 90 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b77f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011b782:	74 17                	je     f011b79b <test_kfree_bestfirstfit+0x11d0>
f011b784:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b78b:	83 ec 0c             	sub    $0xc,%esp
f011b78e:	68 20 c2 12 f0       	push   $0xf012c220
f011b793:	e8 d4 57 fe ff       	call   f0100f6c <cprintf>
f011b798:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
f011b79b:	e8 69 22 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b7a0:	89 c2                	mov    %eax,%edx
f011b7a2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b7a5:	39 c2                	cmp    %eax,%edx
f011b7a7:	74 17                	je     f011b7c0 <test_kfree_bestfirstfit+0x11f5>
f011b7a9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b7b0:	83 ec 0c             	sub    $0xc,%esp
f011b7b3:	68 90 c6 12 f0       	push   $0xf012c690
f011b7b8:	e8 af 57 fe ff       	call   f0100f6c <cprintf>
f011b7bd:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f011b7c0:	c7 45 98 ff 07 00 00 	movl   $0x7ff,-0x68(%ebp)
		ptr = (char*)ptr_allocations[12];
f011b7c7:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b7cd:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f011b7d0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b7d7:	eb 0e                	jmp    f011b7e7 <test_kfree_bestfirstfit+0x121c>
		{
			ptr[i] = 12 ;
f011b7d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b7dc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b7df:	01 d0                	add    %edx,%eax
f011b7e1:	c6 00 0c             	movb   $0xc,(%eax)
		}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
		lastIndices[12] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f011b7e4:	ff 45 f4             	incl   -0xc(%ebp)
f011b7e7:	8b 45 98             	mov    -0x68(%ebp),%eax
f011b7ea:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b7ed:	7f ea                	jg     f011b7d9 <test_kfree_bestfirstfit+0x120e>
			ptr[i] = 12 ;
		}

		//[DYNAMIC ALLOCATOR] Allocate in merged freed space
		//1.5 KB
		freeFrames = sys_calculate_free_frames() ;
f011b7ef:	e8 15 22 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b7f4:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b7f7:	e8 44 90 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b7fc:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[13] = kmalloc(3*kilo/2);
f011b7ff:	83 ec 0c             	sub    $0xc,%esp
f011b802:	68 00 06 00 00       	push   $0x600
f011b807:	e8 aa d2 fe ff       	call   f0108ab6 <kmalloc>
f011b80c:	83 c4 10             	add    $0x10,%esp
f011b80f:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
		//if (ptr_allocations[13] != ptr_allocations[12] + 2*kilo + sizeOfMetaData())
		if ((ptr_allocations[13] < ptr_allocations[2] + 3*kilo) || (ptr_allocations[13] > (ptr_allocations[2] + 4*kilo)))
f011b815:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b81b:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011b821:	81 c2 00 0c 00 00    	add    $0xc00,%edx
f011b827:	39 d0                	cmp    %edx,%eax
f011b829:	72 16                	jb     f011b841 <test_kfree_bestfirstfit+0x1276>
f011b82b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b831:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011b837:	81 c2 00 10 00 00    	add    $0x1000,%edx
f011b83d:	39 d0                	cmp    %edx,%eax
f011b83f:	76 17                	jbe    f011b858 <test_kfree_bestfirstfit+0x128d>
		{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011b841:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b848:	83 ec 0c             	sub    $0xc,%esp
f011b84b:	68 d0 c2 12 f0       	push   $0xf012c2d0
f011b850:	e8 17 57 fe ff       	call   f0100f6c <cprintf>
f011b855:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b858:	e8 e3 8f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b85d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011b860:	74 17                	je     f011b879 <test_kfree_bestfirstfit+0x12ae>
f011b862:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b869:	83 ec 0c             	sub    $0xc,%esp
f011b86c:	68 20 c2 12 f0       	push   $0xf012c220
f011b871:	e8 f6 56 fe ff       	call   f0100f6c <cprintf>
f011b876:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
f011b879:	e8 8b 21 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b87e:	89 c2                	mov    %eax,%edx
f011b880:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011b883:	39 c2                	cmp    %eax,%edx
f011b885:	74 17                	je     f011b89e <test_kfree_bestfirstfit+0x12d3>
f011b887:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b88e:	83 ec 0c             	sub    $0xc,%esp
f011b891:	68 90 c6 12 f0       	push   $0xf012c690
f011b896:	e8 d1 56 fe ff       	call   f0100f6c <cprintf>
f011b89b:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (3*kilo/2)/sizeof(char) - 1;
f011b89e:	c7 45 9c ff 05 00 00 	movl   $0x5ff,-0x64(%ebp)
		ptr = (char*)ptr_allocations[13];
f011b8a5:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b8ab:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f011b8ae:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b8b5:	eb 0e                	jmp    f011b8c5 <test_kfree_bestfirstfit+0x12fa>
		{
			ptr[i] = 13 ;
f011b8b7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b8ba:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b8bd:	01 d0                	add    %edx,%eax
f011b8bf:	c6 00 0d             	movb   $0xd,(%eax)
		{ correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) != 0) { correct = 0; cprintf("Wrong allocation: it's allocated in a previously allocated block. Should not allocate any pages from physical memory\n"); }
		lastIndices[13] = (3*kilo/2)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f011b8c2:	ff 45 f4             	incl   -0xc(%ebp)
f011b8c5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011b8c8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b8cb:	7f ea                	jg     f011b8b7 <test_kfree_bestfirstfit+0x12ec>
			ptr[i] = 13 ;
		}

		//[PAGE ALLOCATOR] Allocate in merged freed space
		//30 MB
		freeFrames = sys_calculate_free_frames() ;
f011b8cd:	e8 37 21 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b8d2:	89 45 c8             	mov    %eax,-0x38(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011b8d5:	e8 66 8f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b8da:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		ptr_allocations[10] = kmalloc(30*Mega);
f011b8dd:	83 ec 0c             	sub    $0xc,%esp
f011b8e0:	68 00 00 e0 01       	push   $0x1e00000
f011b8e5:	e8 cc d1 fe ff       	call   f0108ab6 <kmalloc>
f011b8ea:	83 c4 10             	add    $0x10,%esp
f011b8ed:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011b8f3:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b8f9:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011b8fe:	74 17                	je     f011b917 <test_kfree_bestfirstfit+0x134c>
f011b900:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b907:	83 ec 0c             	sub    $0xc,%esp
f011b90a:	68 d0 c2 12 f0       	push   $0xf012c2d0
f011b90f:	e8 58 56 fe ff       	call   f0100f6c <cprintf>
f011b914:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011b917:	e8 24 8f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011b91c:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f011b91f:	74 17                	je     f011b938 <test_kfree_bestfirstfit+0x136d>
f011b921:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b928:	83 ec 0c             	sub    $0xc,%esp
f011b92b:	68 20 c2 12 f0       	push   $0xf012c220
f011b930:	e8 37 56 fe ff       	call   f0100f6c <cprintf>
f011b935:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 30*Mega/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011b938:	8b 5d c8             	mov    -0x38(%ebp),%ebx
f011b93b:	e8 c9 20 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011b940:	29 c3                	sub    %eax,%ebx
f011b942:	89 d8                	mov    %ebx,%eax
f011b944:	3d ff 1d 00 00       	cmp    $0x1dff,%eax
f011b949:	77 17                	ja     f011b962 <test_kfree_bestfirstfit+0x1397>
f011b94b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b952:	83 ec 0c             	sub    $0xc,%esp
f011b955:	68 8c c2 12 f0       	push   $0xf012c28c
f011b95a:	e8 0d 56 fe ff       	call   f0100f6c <cprintf>
f011b95f:	83 c4 10             	add    $0x10,%esp
		lastIndices[10] = (30*Mega)/sizeof(char) - 1;
f011b962:	c7 45 90 ff ff df 01 	movl   $0x1dfffff,-0x70(%ebp)
		ptr = (char*)ptr_allocations[10];
f011b969:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b96f:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f011b972:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b979:	eb 0e                	jmp    f011b989 <test_kfree_bestfirstfit+0x13be>
		{
			ptr[i] = 10 ;
f011b97b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011b97e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b981:	01 d0                	add    %edx,%eax
f011b983:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
		if ((freeFrames - sys_calculate_free_frames()) < 30*Mega/PAGE_SIZE) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
		lastIndices[10] = (30*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f011b986:	ff 45 f4             	incl   -0xc(%ebp)
f011b989:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b98c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b98f:	7f ea                	jg     f011b97b <test_kfree_bestfirstfit+0x13b0>
			ptr[i] = 10 ;
		}


		//30 MB
		ptr = (char*)ptr_allocations[10];
f011b991:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b997:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f011b99a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011b9a1:	eb 1e                	jmp    f011b9c1 <test_kfree_bestfirstfit+0x13f6>
		{
			sums[10] += ptr[i] ;
f011b9a3:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f011b9a9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011b9ac:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011b9af:	01 c8                	add    %ecx,%eax
f011b9b1:	8a 00                	mov    (%eax),%al
f011b9b3:	0f be c0             	movsbl %al,%eax
f011b9b6:	01 d0                	add    %edx,%eax
f011b9b8:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		}


		//30 MB
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f011b9be:	ff 45 f4             	incl   -0xc(%ebp)
f011b9c1:	8b 45 90             	mov    -0x70(%ebp),%eax
f011b9c4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011b9c7:	7f da                	jg     f011b9a3 <test_kfree_bestfirstfit+0x13d8>
		{
			sums[10] += ptr[i] ;
		}
		if (sums[10] != 10*lastIndices[10])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }
f011b9c9:	8b 8d 40 ff ff ff    	mov    -0xc0(%ebp),%ecx
f011b9cf:	8b 55 90             	mov    -0x70(%ebp),%edx
f011b9d2:	89 d0                	mov    %edx,%eax
f011b9d4:	c1 e0 02             	shl    $0x2,%eax
f011b9d7:	01 d0                	add    %edx,%eax
f011b9d9:	01 c0                	add    %eax,%eax
f011b9db:	39 c1                	cmp    %eax,%ecx
f011b9dd:	74 17                	je     f011b9f6 <test_kfree_bestfirstfit+0x142b>
f011b9df:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011b9e6:	83 ec 0c             	sub    $0xc,%esp
f011b9e9:	68 c0 c7 12 f0       	push   $0xf012c7c0
f011b9ee:	e8 79 55 fe ff       	call   f0100f6c <cprintf>
f011b9f3:	83 c4 10             	add    $0x10,%esp

		//1 KB
		ptr = (char*)ptr_allocations[11];
f011b9f6:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b9fc:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f011b9ff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ba06:	eb 1e                	jmp    f011ba26 <test_kfree_bestfirstfit+0x145b>
		{
			sums[11] += ptr[i] ;
f011ba08:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f011ba0e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011ba11:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ba14:	01 c8                	add    %ecx,%eax
f011ba16:	8a 00                	mov    (%eax),%al
f011ba18:	0f be c0             	movsbl %al,%eax
f011ba1b:	01 d0                	add    %edx,%eax
f011ba1d:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		}
		if (sums[10] != 10*lastIndices[10])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }

		//1 KB
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f011ba23:	ff 45 f4             	incl   -0xc(%ebp)
f011ba26:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011ba29:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ba2c:	7f da                	jg     f011ba08 <test_kfree_bestfirstfit+0x143d>
		{
			sums[11] += ptr[i] ;
		}
		if (sums[11] != 11*lastIndices[11])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }
f011ba2e:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f011ba34:	8b 55 94             	mov    -0x6c(%ebp),%edx
f011ba37:	89 d0                	mov    %edx,%eax
f011ba39:	c1 e0 02             	shl    $0x2,%eax
f011ba3c:	01 d0                	add    %edx,%eax
f011ba3e:	01 c0                	add    %eax,%eax
f011ba40:	01 d0                	add    %edx,%eax
f011ba42:	39 c1                	cmp    %eax,%ecx
f011ba44:	74 17                	je     f011ba5d <test_kfree_bestfirstfit+0x1492>
f011ba46:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011ba4d:	83 ec 0c             	sub    $0xc,%esp
f011ba50:	68 c0 c7 12 f0       	push   $0xf012c7c0
f011ba55:	e8 12 55 fe ff       	call   f0100f6c <cprintf>
f011ba5a:	83 c4 10             	add    $0x10,%esp

		//2 KB
		ptr = (char*)ptr_allocations[12];
f011ba5d:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011ba63:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f011ba66:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ba6d:	eb 1e                	jmp    f011ba8d <test_kfree_bestfirstfit+0x14c2>
		{
			sums[12] += ptr[i] ;
f011ba6f:	8b 95 48 ff ff ff    	mov    -0xb8(%ebp),%edx
f011ba75:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011ba78:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011ba7b:	01 c8                	add    %ecx,%eax
f011ba7d:	8a 00                	mov    (%eax),%al
f011ba7f:	0f be c0             	movsbl %al,%eax
f011ba82:	01 d0                	add    %edx,%eax
f011ba84:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		}
		if (sums[11] != 11*lastIndices[11])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }

		//2 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f011ba8a:	ff 45 f4             	incl   -0xc(%ebp)
f011ba8d:	8b 45 98             	mov    -0x68(%ebp),%eax
f011ba90:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011ba93:	7f da                	jg     f011ba6f <test_kfree_bestfirstfit+0x14a4>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }
f011ba95:	8b 8d 48 ff ff ff    	mov    -0xb8(%ebp),%ecx
f011ba9b:	8b 55 98             	mov    -0x68(%ebp),%edx
f011ba9e:	89 d0                	mov    %edx,%eax
f011baa0:	01 c0                	add    %eax,%eax
f011baa2:	01 d0                	add    %edx,%eax
f011baa4:	c1 e0 02             	shl    $0x2,%eax
f011baa7:	39 c1                	cmp    %eax,%ecx
f011baa9:	74 17                	je     f011bac2 <test_kfree_bestfirstfit+0x14f7>
f011baab:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011bab2:	83 ec 0c             	sub    $0xc,%esp
f011bab5:	68 c0 c7 12 f0       	push   $0xf012c7c0
f011baba:	e8 ad 54 fe ff       	call   f0100f6c <cprintf>
f011babf:	83 c4 10             	add    $0x10,%esp

		//1.5 KB
		ptr = (char*)ptr_allocations[13];
f011bac2:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011bac8:	89 45 c0             	mov    %eax,-0x40(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f011bacb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011bad2:	eb 1e                	jmp    f011baf2 <test_kfree_bestfirstfit+0x1527>
		{
			sums[13] += ptr[i] ;
f011bad4:	8b 95 4c ff ff ff    	mov    -0xb4(%ebp),%edx
f011bada:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011badd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bae0:	01 c8                	add    %ecx,%eax
f011bae2:	8a 00                	mov    (%eax),%al
f011bae4:	0f be c0             	movsbl %al,%eax
f011bae7:	01 d0                	add    %edx,%eax
f011bae9:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
		}
		if (sums[12] != 12*lastIndices[12])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }

		//1.5 KB
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f011baef:	ff 45 f4             	incl   -0xc(%ebp)
f011baf2:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011baf5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011baf8:	7f da                	jg     f011bad4 <test_kfree_bestfirstfit+0x1509>
		{
			sums[13] += ptr[i] ;
		}
		if (sums[13] != 13*lastIndices[13])	{ correct = 0; cprintf("kfree: invalid read - data is corrupted\n"); }
f011bafa:	8b 8d 4c ff ff ff    	mov    -0xb4(%ebp),%ecx
f011bb00:	8b 55 9c             	mov    -0x64(%ebp),%edx
f011bb03:	89 d0                	mov    %edx,%eax
f011bb05:	01 c0                	add    %eax,%eax
f011bb07:	01 d0                	add    %edx,%eax
f011bb09:	c1 e0 02             	shl    $0x2,%eax
f011bb0c:	01 d0                	add    %edx,%eax
f011bb0e:	39 c1                	cmp    %eax,%ecx
f011bb10:	74 17                	je     f011bb29 <test_kfree_bestfirstfit+0x155e>
f011bb12:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011bb19:	83 ec 0c             	sub    $0xc,%esp
f011bb1c:	68 c0 c7 12 f0       	push   $0xf012c7c0
f011bb21:	e8 46 54 fe ff       	call   f0100f6c <cprintf>
f011bb26:	83 c4 10             	add    $0x10,%esp
	}
	if (correct)	eval+=30 ;
f011bb29:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011bb2d:	74 04                	je     f011bb33 <test_kfree_bestfirstfit+0x1568>
f011bb2f:	83 45 f0 1e          	addl   $0x1e,-0x10(%ebp)

	correct = 1 ;
f011bb33:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//check tables	[5%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f011bb3a:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f011bb41:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011bb48:	eb 4e                	jmp    f011bb98 <test_kfree_bestfirstfit+0x15cd>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f011bb4a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011bb4d:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f011bb52:	83 ec 04             	sub    $0x4,%esp
f011bb55:	8d 8d c4 fe ff ff    	lea    -0x13c(%ebp),%ecx
f011bb5b:	51                   	push   %ecx
f011bb5c:	52                   	push   %edx
f011bb5d:	50                   	push   %eax
f011bb5e:	e8 aa c8 fe ff       	call   f010840d <get_page_table>
f011bb63:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011bb66:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011bb6c:	85 c0                	test   %eax,%eax
f011bb6e:	75 1d                	jne    f011bb8d <test_kfree_bestfirstfit+0x15c2>
			{
				if (correct)
f011bb70:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011bb74:	74 17                	je     f011bb8d <test_kfree_bestfirstfit+0x15c2>
				{ correct = 0; cprintf("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree\n"); }
f011bb76:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011bb7d:	83 ec 0c             	sub    $0xc,%esp
f011bb80:	68 ec c7 12 f0       	push   $0xf012c7ec
f011bb85:	e8 e2 53 fe ff       	call   f0100f6c <cprintf>
f011bb8a:	83 c4 10             	add    $0x10,%esp

	correct = 1 ;
	//check tables	[5%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f011bb8d:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f011bb94:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f011bb98:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011bb9c:	78 ac                	js     f011bb4a <test_kfree_bestfirstfit+0x157f>
f011bb9e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011bba2:	7f 09                	jg     f011bbad <test_kfree_bestfirstfit+0x15e2>
f011bba4:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f011bbab:	76 9d                	jbe    f011bb4a <test_kfree_bestfirstfit+0x157f>
				if (correct)
				{ correct = 0; cprintf("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree\n"); }
			}
		}
	}
	if (correct)	eval+=5 ;
f011bbad:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011bbb1:	74 04                	je     f011bbb7 <test_kfree_bestfirstfit+0x15ec>
f011bbb3:	83 45 f0 05          	addl   $0x5,-0x10(%ebp)

	cprintf("\ntest kfree completed. Eval = %d%\n", eval);
f011bbb7:	83 ec 08             	sub    $0x8,%esp
f011bbba:	ff 75 f0             	pushl  -0x10(%ebp)
f011bbbd:	68 54 c8 12 f0       	push   $0xf012c854
f011bbc2:	e8 a5 53 fe ff       	call   f0100f6c <cprintf>
f011bbc7:	83 c4 10             	add    $0x10,%esp

	return 1;
f011bbca:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011bbcf:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011bbd2:	5b                   	pop    %ebx
f011bbd3:	5f                   	pop    %edi
f011bbd4:	5d                   	pop    %ebp
f011bbd5:	c3                   	ret    

f011bbd6 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f011bbd6:	55                   	push   %ebp
f011bbd7:	89 e5                	mov    %esp,%ebp
f011bbd9:	57                   	push   %edi
f011bbda:	53                   	push   %ebx
f011bbdb:	81 ec b0 35 00 00    	sub    $0x35b0,%esp
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f011bbe1:	83 ec 0c             	sub    $0xc,%esp
f011bbe4:	68 60 c1 12 f0       	push   $0xf012c160
f011bbe9:	e8 7e 53 fe ff       	call   f0100f6c <cprintf>
f011bbee:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011bbf1:	83 ec 0c             	sub    $0xc,%esp
f011bbf4:	68 90 c1 12 f0       	push   $0xf012c190
f011bbf9:	e8 6e 53 fe ff       	call   f0100f6c <cprintf>
f011bbfe:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011bc01:	83 ec 0c             	sub    $0xc,%esp
f011bc04:	68 60 c1 12 f0       	push   $0xf012c160
f011bc09:	e8 5e 53 fe ff       	call   f0100f6c <cprintf>
f011bc0e:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011bc11:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f011bc15:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f011bc19:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f011bc1f:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f011bc25:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f011bc2c:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011bc33:	e8 d1 1d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bc38:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011bc3b:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f011bc41:	b9 14 00 00 00       	mov    $0x14,%ecx
f011bc46:	b8 00 00 00 00       	mov    $0x0,%eax
f011bc4b:	89 d7                	mov    %edx,%edi
f011bc4d:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011bc4f:	8d 95 c4 fe ff ff    	lea    -0x13c(%ebp),%edx
f011bc55:	b9 14 00 00 00       	mov    $0x14,%ecx
f011bc5a:	b8 00 00 00 00       	mov    $0x0,%eax
f011bc5f:	89 d7                	mov    %edx,%edi
f011bc61:	f3 ab                	rep stos %eax,%es:(%edi)
	int eval = 0;
f011bc63:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	bool correct = 1;
f011bc6a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	void* ptr_allocations[20] = {0};
f011bc71:	8d 95 74 fe ff ff    	lea    -0x18c(%ebp),%edx
f011bc77:	b9 14 00 00 00       	mov    $0x14,%ecx
f011bc7c:	b8 00 00 00 00       	mov    $0x0,%eax
f011bc81:	89 d7                	mov    %edx,%edi
f011bc83:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bc85:	e8 7f 1d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bc8a:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bc8d:	e8 ae 8b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bc92:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011bc95:	83 ec 0c             	sub    $0xc,%esp
f011bc98:	68 00 fc 1f 00       	push   $0x1ffc00
f011bc9d:	e8 14 ce fe ff       	call   f0108ab6 <kmalloc>
f011bca2:	83 c4 10             	add    $0x10,%esp
f011bca5:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011bcab:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011bcb1:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011bcb6:	74 17                	je     f011bccf <test_kheap_phys_addr+0xf9>
f011bcb8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011bcbf:	83 ec 0c             	sub    $0xc,%esp
f011bcc2:	68 d0 c2 12 f0       	push   $0xf012c2d0
f011bcc7:	e8 a0 52 fe ff       	call   f0100f6c <cprintf>
f011bccc:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bccf:	e8 6c 8b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bcd4:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011bcd7:	74 17                	je     f011bcf0 <test_kheap_phys_addr+0x11a>
f011bcd9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011bce0:	83 ec 0c             	sub    $0xc,%esp
f011bce3:	68 20 c2 12 f0       	push   $0xf012c220
f011bce8:	e8 7f 52 fe ff       	call   f0100f6c <cprintf>
f011bced:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011bcf0:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011bcf3:	e8 11 1d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bcf8:	29 c3                	sub    %eax,%ebx
f011bcfa:	89 d8                	mov    %ebx,%eax
f011bcfc:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011bd01:	77 17                	ja     f011bd1a <test_kheap_phys_addr+0x144>
f011bd03:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011bd0a:	83 ec 0c             	sub    $0xc,%esp
f011bd0d:	68 8c c2 12 f0       	push   $0xf012c28c
f011bd12:	e8 55 52 fe ff       	call   f0100f6c <cprintf>
f011bd17:	83 c4 10             	add    $0x10,%esp

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bd1a:	e8 ea 1c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bd1f:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bd22:	e8 19 8b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bd27:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011bd2a:	83 ec 0c             	sub    $0xc,%esp
f011bd2d:	68 00 fc 1f 00       	push   $0x1ffc00
f011bd32:	e8 7f cd fe ff       	call   f0108ab6 <kmalloc>
f011bd37:	83 c4 10             	add    $0x10,%esp
f011bd3a:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011bd40:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011bd46:	3d 00 10 20 f8       	cmp    $0xf8201000,%eax
f011bd4b:	74 17                	je     f011bd64 <test_kheap_phys_addr+0x18e>
f011bd4d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011bd54:	83 ec 0c             	sub    $0xc,%esp
f011bd57:	68 d0 c2 12 f0       	push   $0xf012c2d0
f011bd5c:	e8 0b 52 fe ff       	call   f0100f6c <cprintf>
f011bd61:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bd64:	e8 d7 8a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bd69:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011bd6c:	74 17                	je     f011bd85 <test_kheap_phys_addr+0x1af>
f011bd6e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011bd75:	83 ec 0c             	sub    $0xc,%esp
f011bd78:	68 20 c2 12 f0       	push   $0xf012c220
f011bd7d:	e8 ea 51 fe ff       	call   f0100f6c <cprintf>
f011bd82:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011bd85:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011bd88:	e8 7c 1c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bd8d:	29 c3                	sub    %eax,%ebx
f011bd8f:	89 d8                	mov    %ebx,%eax
f011bd91:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011bd96:	77 17                	ja     f011bdaf <test_kheap_phys_addr+0x1d9>
f011bd98:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011bd9f:	83 ec 0c             	sub    $0xc,%esp
f011bda2:	68 8c c2 12 f0       	push   $0xf012c28c
f011bda7:	e8 c0 51 fe ff       	call   f0100f6c <cprintf>
f011bdac:	83 c4 10             	add    $0x10,%esp

		//[DYNAMIC ALLOCATOR]
		{
			//1 KB
			freeFrames = sys_calculate_free_frames() ;
f011bdaf:	e8 55 1c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bdb4:	89 45 a8             	mov    %eax,-0x58(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011bdb7:	e8 84 8a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bdbc:	89 45 a4             	mov    %eax,-0x5c(%ebp)
			ptr_allocations[2] = kmalloc(1*kilo);
f011bdbf:	83 ec 0c             	sub    $0xc,%esp
f011bdc2:	68 00 04 00 00       	push   $0x400
f011bdc7:	e8 ea cc fe ff       	call   f0108ab6 <kmalloc>
f011bdcc:	83 c4 10             	add    $0x10,%esp
f011bdcf:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
			if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f011bdd5:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011bddb:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011bde0:	76 28                	jbe    f011be0a <test_kheap_phys_addr+0x234>
f011bde2:	8b 9d 7c fe ff ff    	mov    -0x184(%ebp),%ebx
f011bde8:	83 ec 0c             	sub    $0xc,%esp
f011bdeb:	6a 00                	push   $0x0
f011bded:	e8 ba cc fe ff       	call   f0108aac <sbrk>
f011bdf2:	83 c4 10             	add    $0x10,%esp
f011bdf5:	39 c3                	cmp    %eax,%ebx
f011bdf7:	73 11                	jae    f011be0a <test_kheap_phys_addr+0x234>
f011bdf9:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011bdff:	89 c2                	mov    %eax,%edx
f011be01:	a1 98 9d 17 f0       	mov    0xf0179d98,%eax
f011be06:	39 c2                	cmp    %eax,%edx
f011be08:	72 17                	jb     f011be21 <test_kheap_phys_addr+0x24b>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011be0a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011be11:	83 ec 0c             	sub    $0xc,%esp
f011be14:	68 20 c3 12 f0       	push   $0xf012c320
f011be19:	e8 4e 51 fe ff       	call   f0100f6c <cprintf>
f011be1e:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011be21:	e8 1a 8a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011be26:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011be29:	74 17                	je     f011be42 <test_kheap_phys_addr+0x26c>
f011be2b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011be32:	83 ec 0c             	sub    $0xc,%esp
f011be35:	68 20 c2 12 f0       	push   $0xf012c220
f011be3a:	e8 2d 51 fe ff       	call   f0100f6c <cprintf>
f011be3f:	83 c4 10             	add    $0x10,%esp
			//if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f011be42:	e8 c2 1b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011be47:	89 45 a8             	mov    %eax,-0x58(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011be4a:	e8 f1 89 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011be4f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
			ptr_allocations[3] = kmalloc(2*kilo);
f011be52:	83 ec 0c             	sub    $0xc,%esp
f011be55:	68 00 08 00 00       	push   $0x800
f011be5a:	e8 57 cc fe ff       	call   f0108ab6 <kmalloc>
f011be5f:	83 c4 10             	add    $0x10,%esp
f011be62:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
			if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f011be68:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011be6e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011be73:	76 28                	jbe    f011be9d <test_kheap_phys_addr+0x2c7>
f011be75:	8b 9d 80 fe ff ff    	mov    -0x180(%ebp),%ebx
f011be7b:	83 ec 0c             	sub    $0xc,%esp
f011be7e:	6a 00                	push   $0x0
f011be80:	e8 27 cc fe ff       	call   f0108aac <sbrk>
f011be85:	83 c4 10             	add    $0x10,%esp
f011be88:	39 c3                	cmp    %eax,%ebx
f011be8a:	73 11                	jae    f011be9d <test_kheap_phys_addr+0x2c7>
f011be8c:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011be92:	89 c2                	mov    %eax,%edx
f011be94:	a1 98 9d 17 f0       	mov    0xf0179d98,%eax
f011be99:	39 c2                	cmp    %eax,%edx
f011be9b:	72 17                	jb     f011beb4 <test_kheap_phys_addr+0x2de>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011be9d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011bea4:	83 ec 0c             	sub    $0xc,%esp
f011bea7:	68 20 c3 12 f0       	push   $0xf012c320
f011beac:	e8 bb 50 fe ff       	call   f0100f6c <cprintf>
f011beb1:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011beb4:	e8 87 89 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011beb9:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011bebc:	74 17                	je     f011bed5 <test_kheap_phys_addr+0x2ff>
f011bebe:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011bec5:	83 ec 0c             	sub    $0xc,%esp
f011bec8:	68 20 c2 12 f0       	push   $0xf012c220
f011becd:	e8 9a 50 fe ff       	call   f0100f6c <cprintf>
f011bed2:	83 c4 10             	add    $0x10,%esp
			//if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

			//1.5 KB
			freeFrames = sys_calculate_free_frames() ;
f011bed5:	e8 2f 1b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011beda:	89 45 a8             	mov    %eax,-0x58(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011bedd:	e8 5e 89 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bee2:	89 45 a4             	mov    %eax,-0x5c(%ebp)
			ptr_allocations[4] = kmalloc(3*kilo/2);
f011bee5:	83 ec 0c             	sub    $0xc,%esp
f011bee8:	68 00 06 00 00       	push   $0x600
f011beed:	e8 c4 cb fe ff       	call   f0108ab6 <kmalloc>
f011bef2:	83 c4 10             	add    $0x10,%esp
f011bef5:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
			if ((uint32) ptr_allocations[4] < KERNEL_HEAP_START || ptr_allocations[4] >= sbrk(0) || (uint32) ptr_allocations[4] >= da_limit)
f011befb:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011bf01:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011bf06:	76 28                	jbe    f011bf30 <test_kheap_phys_addr+0x35a>
f011bf08:	8b 9d 84 fe ff ff    	mov    -0x17c(%ebp),%ebx
f011bf0e:	83 ec 0c             	sub    $0xc,%esp
f011bf11:	6a 00                	push   $0x0
f011bf13:	e8 94 cb fe ff       	call   f0108aac <sbrk>
f011bf18:	83 c4 10             	add    $0x10,%esp
f011bf1b:	39 c3                	cmp    %eax,%ebx
f011bf1d:	73 11                	jae    f011bf30 <test_kheap_phys_addr+0x35a>
f011bf1f:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011bf25:	89 c2                	mov    %eax,%edx
f011bf27:	a1 98 9d 17 f0       	mov    0xf0179d98,%eax
f011bf2c:	39 c2                	cmp    %eax,%edx
f011bf2e:	72 17                	jb     f011bf47 <test_kheap_phys_addr+0x371>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011bf30:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011bf37:	83 ec 0c             	sub    $0xc,%esp
f011bf3a:	68 20 c3 12 f0       	push   $0xf012c320
f011bf3f:	e8 28 50 fe ff       	call   f0100f6c <cprintf>
f011bf44:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bf47:	e8 f4 88 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bf4c:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011bf4f:	74 17                	je     f011bf68 <test_kheap_phys_addr+0x392>
f011bf51:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011bf58:	83 ec 0c             	sub    $0xc,%esp
f011bf5b:	68 20 c2 12 f0       	push   $0xf012c220
f011bf60:	e8 07 50 fe ff       	call   f0100f6c <cprintf>
f011bf65:	83 c4 10             	add    $0x10,%esp
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011bf68:	e8 9c 1a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bf6d:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bf70:	e8 cb 88 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bf75:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(7*kilo);
f011bf78:	83 ec 0c             	sub    $0xc,%esp
f011bf7b:	68 00 1c 00 00       	push   $0x1c00
f011bf80:	e8 31 cb fe ff       	call   f0108ab6 <kmalloc>
f011bf85:	83 c4 10             	add    $0x10,%esp
f011bf88:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega /*+ 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011bf8e:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011bf94:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011bf99:	74 17                	je     f011bfb2 <test_kheap_phys_addr+0x3dc>
f011bf9b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011bfa2:	83 ec 0c             	sub    $0xc,%esp
f011bfa5:	68 d0 c2 12 f0       	push   $0xf012c2d0
f011bfaa:	e8 bd 4f fe ff       	call   f0100f6c <cprintf>
f011bfaf:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011bfb2:	e8 89 88 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011bfb7:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011bfba:	74 17                	je     f011bfd3 <test_kheap_phys_addr+0x3fd>
f011bfbc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011bfc3:	83 ec 0c             	sub    $0xc,%esp
f011bfc6:	68 20 c2 12 f0       	push   $0xf012c220
f011bfcb:	e8 9c 4f fe ff       	call   f0100f6c <cprintf>
f011bfd0:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011bfd3:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011bfd6:	e8 2e 1a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011bfdb:	29 c3                	sub    %eax,%ebx
f011bfdd:	89 d8                	mov    %ebx,%eax
f011bfdf:	83 f8 01             	cmp    $0x1,%eax
f011bfe2:	77 17                	ja     f011bffb <test_kheap_phys_addr+0x425>
f011bfe4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011bfeb:	83 ec 0c             	sub    $0xc,%esp
f011bfee:	68 8c c2 12 f0       	push   $0xf012c28c
f011bff3:	e8 74 4f fe ff       	call   f0100f6c <cprintf>
f011bff8:	83 c4 10             	add    $0x10,%esp

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011bffb:	e8 09 1a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c000:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c003:	e8 38 88 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c008:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011c00b:	83 ec 0c             	sub    $0xc,%esp
f011c00e:	68 00 fc 2f 00       	push   $0x2ffc00
f011c013:	e8 9e ca fe ff       	call   f0108ab6 <kmalloc>
f011c018:	83 c4 10             	add    $0x10,%esp
f011c01b:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011c021:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011c027:	3d 00 30 40 f8       	cmp    $0xf8403000,%eax
f011c02c:	74 17                	je     f011c045 <test_kheap_phys_addr+0x46f>
f011c02e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c035:	83 ec 0c             	sub    $0xc,%esp
f011c038:	68 d0 c2 12 f0       	push   $0xf012c2d0
f011c03d:	e8 2a 4f fe ff       	call   f0100f6c <cprintf>
f011c042:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c045:	e8 f6 87 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c04a:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011c04d:	74 17                	je     f011c066 <test_kheap_phys_addr+0x490>
f011c04f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c056:	83 ec 0c             	sub    $0xc,%esp
f011c059:	68 20 c2 12 f0       	push   $0xf012c220
f011c05e:	e8 09 4f fe ff       	call   f0100f6c <cprintf>
f011c063:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011c066:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011c069:	e8 9b 19 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c06e:	29 c3                	sub    %eax,%ebx
f011c070:	89 d8                	mov    %ebx,%eax
f011c072:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011c077:	77 17                	ja     f011c090 <test_kheap_phys_addr+0x4ba>
f011c079:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c080:	83 ec 0c             	sub    $0xc,%esp
f011c083:	68 8c c2 12 f0       	push   $0xf012c28c
f011c088:	e8 df 4e fe ff       	call   f0100f6c <cprintf>
f011c08d:	83 c4 10             	add    $0x10,%esp

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011c090:	e8 74 19 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c095:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c098:	e8 a3 87 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c09d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(6*Mega-kilo);
f011c0a0:	83 ec 0c             	sub    $0xc,%esp
f011c0a3:	68 00 fc 5f 00       	push   $0x5ffc00
f011c0a8:	e8 09 ca fe ff       	call   f0108ab6 <kmalloc>
f011c0ad:	83 c4 10             	add    $0x10,%esp
f011c0b0:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011c0b6:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011c0bc:	3d 00 30 70 f8       	cmp    $0xf8703000,%eax
f011c0c1:	74 17                	je     f011c0da <test_kheap_phys_addr+0x504>
f011c0c3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c0ca:	83 ec 0c             	sub    $0xc,%esp
f011c0cd:	68 d0 c2 12 f0       	push   $0xf012c2d0
f011c0d2:	e8 95 4e fe ff       	call   f0100f6c <cprintf>
f011c0d7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c0da:	e8 61 87 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c0df:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011c0e2:	74 17                	je     f011c0fb <test_kheap_phys_addr+0x525>
f011c0e4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c0eb:	83 ec 0c             	sub    $0xc,%esp
f011c0ee:	68 20 c2 12 f0       	push   $0xf012c220
f011c0f3:	e8 74 4e fe ff       	call   f0100f6c <cprintf>
f011c0f8:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 1536) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011c0fb:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011c0fe:	e8 06 19 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c103:	29 c3                	sub    %eax,%ebx
f011c105:	89 d8                	mov    %ebx,%eax
f011c107:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011c10c:	77 17                	ja     f011c125 <test_kheap_phys_addr+0x54f>
f011c10e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c115:	83 ec 0c             	sub    $0xc,%esp
f011c118:	68 8c c2 12 f0       	push   $0xf012c28c
f011c11d:	e8 4a 4e fe ff       	call   f0100f6c <cprintf>
f011c122:	83 c4 10             	add    $0x10,%esp

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011c125:	e8 df 18 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c12a:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c12d:	e8 0e 87 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c132:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[8] = kmalloc(14*kilo);
f011c135:	83 ec 0c             	sub    $0xc,%esp
f011c138:	68 00 38 00 00       	push   $0x3800
f011c13d:	e8 74 c9 fe ff       	call   f0108ab6 <kmalloc>
f011c142:	83 c4 10             	add    $0x10,%esp
f011c145:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011c14b:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011c151:	3d 00 30 d0 f8       	cmp    $0xf8d03000,%eax
f011c156:	74 17                	je     f011c16f <test_kheap_phys_addr+0x599>
f011c158:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c15f:	83 ec 0c             	sub    $0xc,%esp
f011c162:	68 d0 c2 12 f0       	push   $0xf012c2d0
f011c167:	e8 00 4e fe ff       	call   f0100f6c <cprintf>
f011c16c:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c16f:	e8 cc 86 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c174:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f011c177:	74 17                	je     f011c190 <test_kheap_phys_addr+0x5ba>
f011c179:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c180:	83 ec 0c             	sub    $0xc,%esp
f011c183:	68 20 c2 12 f0       	push   $0xf012c220
f011c188:	e8 df 4d fe ff       	call   f0100f6c <cprintf>
f011c18d:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011c190:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f011c193:	e8 71 18 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c198:	29 c3                	sub    %eax,%ebx
f011c19a:	89 d8                	mov    %ebx,%eax
f011c19c:	83 f8 03             	cmp    $0x3,%eax
f011c19f:	77 17                	ja     f011c1b8 <test_kheap_phys_addr+0x5e2>
f011c1a1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c1a8:	83 ec 0c             	sub    $0xc,%esp
f011c1ab:	68 8c c2 12 f0       	push   $0xf012c28c
f011c1b0:	e8 b7 4d fe ff       	call   f0100f6c <cprintf>
f011c1b5:	83 c4 10             	add    $0x10,%esp
	}

	//[PAGE ALLOCATOR] test kheap_physical_address after kmalloc only [30%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
f011c1b8:	c7 45 a0 00 70 d0 f8 	movl   $0xf8d07000,-0x60(%ebp)
		uint32 allPAs[(13*Mega + 24*kilo + INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
f011c1bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		uint32 offset = 1;
f011c1c6:	c7 45 9c 01 00 00 00 	movl   $0x1,-0x64(%ebp)
		uint32 startVA = da_limit + PAGE_SIZE;
f011c1cd:	a1 98 9d 17 f0       	mov    0xf0179d98,%eax
f011c1d2:	05 00 10 00 00       	add    $0x1000,%eax
f011c1d7:	89 45 98             	mov    %eax,-0x68(%ebp)
		for (va = startVA; va < endVA; va+=PAGE_SIZE+offset)
f011c1da:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c1dd:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011c1e0:	eb 2e                	jmp    f011c210 <test_kheap_phys_addr+0x63a>
		{
			allPAs[i++] = kheap_physical_address(va);
f011c1e2:	8b 5d f4             	mov    -0xc(%ebp),%ebx
f011c1e5:	8d 43 01             	lea    0x1(%ebx),%eax
f011c1e8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011c1eb:	83 ec 0c             	sub    $0xc,%esp
f011c1ee:	ff 75 e8             	pushl  -0x18(%ebp)
f011c1f1:	e8 0e c9 fe ff       	call   f0108b04 <kheap_physical_address>
f011c1f6:	83 c4 10             	add    $0x10,%esp
f011c1f9:	89 84 9d 48 ca ff ff 	mov    %eax,-0x35b8(%ebp,%ebx,4)
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
		uint32 allPAs[(13*Mega + 24*kilo + INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		uint32 offset = 1;
		uint32 startVA = da_limit + PAGE_SIZE;
		for (va = startVA; va < endVA; va+=PAGE_SIZE+offset)
f011c200:	8b 55 9c             	mov    -0x64(%ebp),%edx
f011c203:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c206:	01 d0                	add    %edx,%eax
f011c208:	05 00 10 00 00       	add    $0x1000,%eax
f011c20d:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011c210:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c213:	3b 45 a0             	cmp    -0x60(%ebp),%eax
f011c216:	72 ca                	jb     f011c1e2 <test_kheap_phys_addr+0x60c>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f011c218:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011c21b:	89 45 94             	mov    %eax,-0x6c(%ebp)
		i = 0;
f011c21e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		int j;
		for (va = startVA; va < endVA; )
f011c225:	8b 45 98             	mov    -0x68(%ebp),%eax
f011c228:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011c22b:	e9 ce 00 00 00       	jmp    f011c2fe <test_kheap_phys_addr+0x728>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011c230:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f011c235:	83 ec 04             	sub    $0x4,%esp
f011c238:	8d 95 70 fe ff ff    	lea    -0x190(%ebp),%edx
f011c23e:	52                   	push   %edx
f011c23f:	ff 75 e8             	pushl  -0x18(%ebp)
f011c242:	50                   	push   %eax
f011c243:	e8 c5 c1 fe ff       	call   f010840d <get_page_table>
f011c248:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011c24b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011c251:	85 c0                	test   %eax,%eax
f011c253:	75 1e                	jne    f011c273 <test_kheap_phys_addr+0x69d>
			{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011c255:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c25c:	83 ec 04             	sub    $0x4,%esp
f011c25f:	68 78 c8 12 f0       	push   $0xf012c878
f011c264:	68 30 05 00 00       	push   $0x530
f011c269:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011c26e:	e8 a7 40 fe ff       	call   f010031a <_panic>

			for (j = PTX(va); i < ii && j < 1024 && va < endVA; ++j, ++i)
f011c273:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c276:	c1 e8 0c             	shr    $0xc,%eax
f011c279:	25 ff 03 00 00       	and    $0x3ff,%eax
f011c27e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f011c281:	eb 62                	jmp    f011c2e5 <test_kheap_phys_addr+0x70f>
			{
				if (((ptr_table[j] & 0xFFFFF000)+(va & 0x00000FFF))!= allPAs[i])
f011c283:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011c289:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011c28c:	c1 e2 02             	shl    $0x2,%edx
f011c28f:	01 d0                	add    %edx,%eax
f011c291:	8b 00                	mov    (%eax),%eax
f011c293:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011c298:	89 c2                	mov    %eax,%edx
f011c29a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c29d:	25 ff 0f 00 00       	and    $0xfff,%eax
f011c2a2:	01 c2                	add    %eax,%edx
f011c2a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011c2a7:	8b 84 85 48 ca ff ff 	mov    -0x35b8(%ebp,%eax,4),%eax
f011c2ae:	39 c2                	cmp    %eax,%edx
f011c2b0:	74 1d                	je     f011c2cf <test_kheap_phys_addr+0x6f9>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					if (correct)
f011c2b2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011c2b6:	74 17                	je     f011c2cf <test_kheap_phys_addr+0x6f9>
					{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f011c2b8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c2bf:	83 ec 0c             	sub    $0xc,%esp
f011c2c2:	68 ea c8 12 f0       	push   $0xf012c8ea
f011c2c7:	e8 a0 4c fe ff       	call   f0100f6c <cprintf>
f011c2cc:	83 c4 10             	add    $0x10,%esp
				}
				va+=PAGE_SIZE+offset;
f011c2cf:	8b 55 9c             	mov    -0x64(%ebp),%edx
f011c2d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c2d5:	01 d0                	add    %edx,%eax
f011c2d7:	05 00 10 00 00       	add    $0x1000,%eax
f011c2dc:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
			{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }

			for (j = PTX(va); i < ii && j < 1024 && va < endVA; ++j, ++i)
f011c2df:	ff 45 e4             	incl   -0x1c(%ebp)
f011c2e2:	ff 45 f4             	incl   -0xc(%ebp)
f011c2e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011c2e8:	3b 45 94             	cmp    -0x6c(%ebp),%eax
f011c2eb:	7d 11                	jge    f011c2fe <test_kheap_phys_addr+0x728>
f011c2ed:	81 7d e4 ff 03 00 00 	cmpl   $0x3ff,-0x1c(%ebp)
f011c2f4:	7f 08                	jg     f011c2fe <test_kheap_phys_addr+0x728>
f011c2f6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c2f9:	3b 45 a0             	cmp    -0x60(%ebp),%eax
f011c2fc:	72 85                	jb     f011c283 <test_kheap_phys_addr+0x6ad>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = startVA; va < endVA; )
f011c2fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011c301:	3b 45 a0             	cmp    -0x60(%ebp),%eax
f011c304:	0f 82 26 ff ff ff    	jb     f011c230 <test_kheap_phys_addr+0x65a>
				}
				va+=PAGE_SIZE+offset;
			}
		}
	}
	if (correct)	eval+=30 ;
f011c30a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011c30e:	74 04                	je     f011c314 <test_kheap_phys_addr+0x73e>
f011c310:	83 45 f0 1e          	addl   $0x1e,-0x10(%ebp)

	correct = 1 ;
f011c314:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//[DYNAMIC ALLOCATOR] test kheap_physical_address after kmalloc only [10%]
	{
		int i;
		uint32 va, pa;
		for (i = 2; i <= 4; i++)
f011c31b:	c7 45 e0 02 00 00 00 	movl   $0x2,-0x20(%ebp)
f011c322:	e9 b0 00 00 00       	jmp    f011c3d7 <test_kheap_phys_addr+0x801>
		{
			va = (uint32)ptr_allocations[i];
f011c327:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011c32a:	8b 84 85 74 fe ff ff 	mov    -0x18c(%ebp,%eax,4),%eax
f011c331:	89 45 90             	mov    %eax,-0x70(%ebp)
			pa = kheap_physical_address(va);
f011c334:	83 ec 0c             	sub    $0xc,%esp
f011c337:	ff 75 90             	pushl  -0x70(%ebp)
f011c33a:	e8 c5 c7 fe ff       	call   f0108b04 <kheap_physical_address>
f011c33f:	83 c4 10             	add    $0x10,%esp
f011c342:	89 45 8c             	mov    %eax,-0x74(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011c345:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f011c34a:	83 ec 04             	sub    $0x4,%esp
f011c34d:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f011c353:	52                   	push   %edx
f011c354:	ff 75 90             	pushl  -0x70(%ebp)
f011c357:	50                   	push   %eax
f011c358:	e8 b0 c0 fe ff       	call   f010840d <get_page_table>
f011c35d:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011c360:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011c366:	85 c0                	test   %eax,%eax
f011c368:	75 1e                	jne    f011c388 <test_kheap_phys_addr+0x7b2>
			{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011c36a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c371:	83 ec 04             	sub    $0x4,%esp
f011c374:	68 78 c8 12 f0       	push   $0xf012c878
f011c379:	68 4c 05 00 00       	push   $0x54c
f011c37e:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011c383:	e8 92 3f fe ff       	call   f010031a <_panic>

			if (((ptr_table[PTX(va)] & 0xFFFFF000)+(va & 0x00000FFF))!= pa)
f011c388:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011c38e:	8b 55 90             	mov    -0x70(%ebp),%edx
f011c391:	c1 ea 0c             	shr    $0xc,%edx
f011c394:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011c39a:	c1 e2 02             	shl    $0x2,%edx
f011c39d:	01 d0                	add    %edx,%eax
f011c39f:	8b 00                	mov    (%eax),%eax
f011c3a1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011c3a6:	89 c2                	mov    %eax,%edx
f011c3a8:	8b 45 90             	mov    -0x70(%ebp),%eax
f011c3ab:	25 ff 0f 00 00       	and    $0xfff,%eax
f011c3b0:	01 d0                	add    %edx,%eax
f011c3b2:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f011c3b5:	74 1d                	je     f011c3d4 <test_kheap_phys_addr+0x7fe>
			{
				//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
				if (correct)
f011c3b7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011c3bb:	74 17                	je     f011c3d4 <test_kheap_phys_addr+0x7fe>
				{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f011c3bd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c3c4:	83 ec 0c             	sub    $0xc,%esp
f011c3c7:	68 ea c8 12 f0       	push   $0xf012c8ea
f011c3cc:	e8 9b 4b fe ff       	call   f0100f6c <cprintf>
f011c3d1:	83 c4 10             	add    $0x10,%esp
	correct = 1 ;
	//[DYNAMIC ALLOCATOR] test kheap_physical_address after kmalloc only [10%]
	{
		int i;
		uint32 va, pa;
		for (i = 2; i <= 4; i++)
f011c3d4:	ff 45 e0             	incl   -0x20(%ebp)
f011c3d7:	83 7d e0 04          	cmpl   $0x4,-0x20(%ebp)
f011c3db:	0f 8e 46 ff ff ff    	jle    f011c327 <test_kheap_phys_addr+0x751>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
			}
		}
	}
	if (correct)	eval+=10 ;
f011c3e1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011c3e5:	74 04                	je     f011c3eb <test_kheap_phys_addr+0x815>
f011c3e7:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)

	correct = 1 ;
f011c3eb:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011c3f2:	e8 12 16 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c3f7:	89 45 88             	mov    %eax,-0x78(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011c3fa:	e8 41 84 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c3ff:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[0]);
f011c402:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011c408:	83 ec 0c             	sub    $0xc,%esp
f011c40b:	50                   	push   %eax
f011c40c:	e8 bf c6 fe ff       	call   f0108ad0 <kfree>
f011c411:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c414:	e8 27 84 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c419:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011c41c:	74 17                	je     f011c435 <test_kheap_phys_addr+0x85f>
f011c41e:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c425:	83 ec 0c             	sub    $0xc,%esp
f011c428:	68 20 c2 12 f0       	push   $0xf012c220
f011c42d:	e8 3a 4b fe ff       	call   f0100f6c <cprintf>
f011c432:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512 ) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011c435:	e8 cf 15 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c43a:	89 c2                	mov    %eax,%edx
f011c43c:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c43f:	29 c2                	sub    %eax,%edx
f011c441:	89 d0                	mov    %edx,%eax
f011c443:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011c448:	77 17                	ja     f011c461 <test_kheap_phys_addr+0x88b>
f011c44a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c451:	83 ec 0c             	sub    $0xc,%esp
f011c454:	68 24 c6 12 f0       	push   $0xf012c624
f011c459:	e8 0e 4b fe ff       	call   f0100f6c <cprintf>
f011c45e:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011c461:	e8 a3 15 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c466:	89 45 88             	mov    %eax,-0x78(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c469:	e8 d2 83 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c46e:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[1]);
f011c471:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011c477:	83 ec 0c             	sub    $0xc,%esp
f011c47a:	50                   	push   %eax
f011c47b:	e8 50 c6 fe ff       	call   f0108ad0 <kfree>
f011c480:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c483:	e8 b8 83 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c488:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011c48b:	74 17                	je     f011c4a4 <test_kheap_phys_addr+0x8ce>
f011c48d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c494:	83 ec 0c             	sub    $0xc,%esp
f011c497:	68 20 c2 12 f0       	push   $0xf012c220
f011c49c:	e8 cb 4a fe ff       	call   f0100f6c <cprintf>
f011c4a1:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011c4a4:	e8 60 15 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c4a9:	89 c2                	mov    %eax,%edx
f011c4ab:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c4ae:	29 c2                	sub    %eax,%edx
f011c4b0:	89 d0                	mov    %edx,%eax
f011c4b2:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011c4b7:	77 17                	ja     f011c4d0 <test_kheap_phys_addr+0x8fa>
f011c4b9:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c4c0:	83 ec 0c             	sub    $0xc,%esp
f011c4c3:	68 24 c6 12 f0       	push   $0xf012c624
f011c4c8:	e8 9f 4a fe ff       	call   f0100f6c <cprintf>
f011c4cd:	83 c4 10             	add    $0x10,%esp

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011c4d0:	e8 34 15 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c4d5:	89 45 88             	mov    %eax,-0x78(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c4d8:	e8 63 83 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c4dd:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[7]);
f011c4e0:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011c4e6:	83 ec 0c             	sub    $0xc,%esp
f011c4e9:	50                   	push   %eax
f011c4ea:	e8 e1 c5 fe ff       	call   f0108ad0 <kfree>
f011c4ef:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011c4f2:	e8 49 83 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011c4f7:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011c4fa:	74 17                	je     f011c513 <test_kheap_phys_addr+0x93d>
f011c4fc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c503:	83 ec 0c             	sub    $0xc,%esp
f011c506:	68 20 c2 12 f0       	push   $0xf012c220
f011c50b:	e8 5c 4a fe ff       	call   f0100f6c <cprintf>
f011c510:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 6*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011c513:	e8 f1 14 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c518:	89 c2                	mov    %eax,%edx
f011c51a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011c51d:	29 c2                	sub    %eax,%edx
f011c51f:	89 d0                	mov    %edx,%eax
f011c521:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011c526:	77 17                	ja     f011c53f <test_kheap_phys_addr+0x969>
f011c528:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c52f:	83 ec 0c             	sub    $0xc,%esp
f011c532:	68 24 c6 12 f0       	push   $0xf012c624
f011c537:	e8 30 4a fe ff       	call   f0100f6c <cprintf>
f011c53c:	83 c4 10             	add    $0x10,%esp
	}

	//[PAGE ALLOCATOR] test kheap_physical_address after kmalloc and kfree [20%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
f011c53f:	c7 45 80 00 70 d0 f8 	movl   $0xf8d07000,-0x80(%ebp)
		uint32 allPAs[(13*Mega + 24*kilo + INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
f011c546:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		uint32 startVA = da_limit + PAGE_SIZE;
f011c54d:	a1 98 9d 17 f0       	mov    0xf0179d98,%eax
f011c552:	05 00 10 00 00       	add    $0x1000,%eax
f011c557:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)

		for (va = startVA; va < endVA; va+=PAGE_SIZE)
f011c55d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011c563:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011c566:	eb 25                	jmp    f011c58d <test_kheap_phys_addr+0x9b7>
		{
			allPAs[i++] = kheap_physical_address(va);
f011c568:	8b 5d f4             	mov    -0xc(%ebp),%ebx
f011c56b:	8d 43 01             	lea    0x1(%ebx),%eax
f011c56e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011c571:	83 ec 0c             	sub    $0xc,%esp
f011c574:	ff 75 dc             	pushl  -0x24(%ebp)
f011c577:	e8 88 c5 fe ff       	call   f0108b04 <kheap_physical_address>
f011c57c:	83 c4 10             	add    $0x10,%esp
f011c57f:	89 84 9d 48 ca ff ff 	mov    %eax,-0x35b8(%ebp,%ebx,4)
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
		uint32 allPAs[(13*Mega + 24*kilo + INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		uint32 startVA = da_limit + PAGE_SIZE;

		for (va = startVA; va < endVA; va+=PAGE_SIZE)
f011c586:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
f011c58d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011c590:	3b 45 80             	cmp    -0x80(%ebp),%eax
f011c593:	72 d3                	jb     f011c568 <test_kheap_phys_addr+0x992>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f011c595:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011c598:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
		i = 0;
f011c59e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		int j;
		for (va = startVA; va < endVA; )
f011c5a5:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011c5ab:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011c5ae:	e9 f1 00 00 00       	jmp    f011c6a4 <test_kheap_phys_addr+0xace>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011c5b3:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f011c5b8:	83 ec 04             	sub    $0x4,%esp
f011c5bb:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011c5c1:	52                   	push   %edx
f011c5c2:	ff 75 dc             	pushl  -0x24(%ebp)
f011c5c5:	50                   	push   %eax
f011c5c6:	e8 42 be fe ff       	call   f010840d <get_page_table>
f011c5cb:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011c5ce:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c5d4:	85 c0                	test   %eax,%eax
f011c5d6:	75 24                	jne    f011c5fc <test_kheap_phys_addr+0xa26>
				if (correct)
f011c5d8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011c5dc:	74 1e                	je     f011c5fc <test_kheap_phys_addr+0xa26>
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011c5de:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c5e5:	83 ec 04             	sub    $0x4,%esp
f011c5e8:	68 78 c8 12 f0       	push   $0xf012c878
f011c5ed:	68 86 05 00 00       	push   $0x586
f011c5f2:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011c5f7:	e8 1e 3d fe ff       	call   f010031a <_panic>

			for (j = PTX(va); i < ii && j < 1024 && va < endVA; ++j, ++i)
f011c5fc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011c5ff:	c1 e8 0c             	shr    $0xc,%eax
f011c602:	25 ff 03 00 00       	and    $0x3ff,%eax
f011c607:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011c60a:	eb 78                	jmp    f011c684 <test_kheap_phys_addr+0xaae>
			{
				if (((ptr_table[j] & 0xFFFFF000)+((ptr_table[j] & PERM_PRESENT) == 0? 0 : va & 0x00000FFF)) != allPAs[i])
f011c60c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c612:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011c615:	c1 e2 02             	shl    $0x2,%edx
f011c618:	01 d0                	add    %edx,%eax
f011c61a:	8b 00                	mov    (%eax),%eax
f011c61c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011c621:	89 c1                	mov    %eax,%ecx
f011c623:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c629:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011c62c:	c1 e2 02             	shl    $0x2,%edx
f011c62f:	01 d0                	add    %edx,%eax
f011c631:	8b 00                	mov    (%eax),%eax
f011c633:	83 e0 01             	and    $0x1,%eax
f011c636:	85 c0                	test   %eax,%eax
f011c638:	74 0a                	je     f011c644 <test_kheap_phys_addr+0xa6e>
f011c63a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011c63d:	25 ff 0f 00 00       	and    $0xfff,%eax
f011c642:	eb 05                	jmp    f011c649 <test_kheap_phys_addr+0xa73>
f011c644:	b8 00 00 00 00       	mov    $0x0,%eax
f011c649:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f011c64c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011c64f:	8b 84 85 48 ca ff ff 	mov    -0x35b8(%ebp,%eax,4),%eax
f011c656:	39 c2                	cmp    %eax,%edx
f011c658:	74 1d                	je     f011c677 <test_kheap_phys_addr+0xaa1>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					if (correct)
f011c65a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011c65e:	74 17                	je     f011c677 <test_kheap_phys_addr+0xaa1>
					{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f011c660:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c667:	83 ec 0c             	sub    $0xc,%esp
f011c66a:	68 ea c8 12 f0       	push   $0xf012c8ea
f011c66f:	e8 f8 48 fe ff       	call   f0100f6c <cprintf>
f011c674:	83 c4 10             	add    $0x10,%esp
				}
				va += PAGE_SIZE;
f011c677:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				if (correct)
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }

			for (j = PTX(va); i < ii && j < 1024 && va < endVA; ++j, ++i)
f011c67e:	ff 45 d8             	incl   -0x28(%ebp)
f011c681:	ff 45 f4             	incl   -0xc(%ebp)
f011c684:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011c687:	3b 85 78 ff ff ff    	cmp    -0x88(%ebp),%eax
f011c68d:	7d 15                	jge    f011c6a4 <test_kheap_phys_addr+0xace>
f011c68f:	81 7d d8 ff 03 00 00 	cmpl   $0x3ff,-0x28(%ebp)
f011c696:	7f 0c                	jg     f011c6a4 <test_kheap_phys_addr+0xace>
f011c698:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011c69b:	3b 45 80             	cmp    -0x80(%ebp),%eax
f011c69e:	0f 82 68 ff ff ff    	jb     f011c60c <test_kheap_phys_addr+0xa36>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = startVA; va < endVA; )
f011c6a4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011c6a7:	3b 45 80             	cmp    -0x80(%ebp),%eax
f011c6aa:	0f 82 03 ff ff ff    	jb     f011c5b3 <test_kheap_phys_addr+0x9dd>
				}
				va += PAGE_SIZE;
			}
		}
	}
	if (correct)	eval+=20 ;
f011c6b0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011c6b4:	74 04                	je     f011c6ba <test_kheap_phys_addr+0xae4>
f011c6b6:	83 45 f0 14          	addl   $0x14,-0x10(%ebp)

	correct = 1 ;
f011c6ba:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//[DYNAMIC ALLOCATOR] test kheap_physical_address on the entire allocated area [30%]
	{
		uint32 va, pa;
		for (va = KERNEL_HEAP_START; va < (uint32)sbrk(0); va++)
f011c6c1:	c7 45 d4 00 00 00 f6 	movl   $0xf6000000,-0x2c(%ebp)
f011c6c8:	e9 af 00 00 00       	jmp    f011c77c <test_kheap_phys_addr+0xba6>
		{
			pa = kheap_physical_address(va);
f011c6cd:	83 ec 0c             	sub    $0xc,%esp
f011c6d0:	ff 75 d4             	pushl  -0x2c(%ebp)
f011c6d3:	e8 2c c4 fe ff       	call   f0108b04 <kheap_physical_address>
f011c6d8:	83 c4 10             	add    $0x10,%esp
f011c6db:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011c6e1:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f011c6e6:	83 ec 04             	sub    $0x4,%esp
f011c6e9:	8d 95 64 fe ff ff    	lea    -0x19c(%ebp),%edx
f011c6ef:	52                   	push   %edx
f011c6f0:	ff 75 d4             	pushl  -0x2c(%ebp)
f011c6f3:	50                   	push   %eax
f011c6f4:	e8 14 bd fe ff       	call   f010840d <get_page_table>
f011c6f9:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011c6fc:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c702:	85 c0                	test   %eax,%eax
f011c704:	75 24                	jne    f011c72a <test_kheap_phys_addr+0xb54>
				if (correct)
f011c706:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011c70a:	74 1e                	je     f011c72a <test_kheap_phys_addr+0xb54>
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011c70c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c713:	83 ec 04             	sub    $0x4,%esp
f011c716:	68 78 c8 12 f0       	push   $0xf012c878
f011c71b:	68 a1 05 00 00       	push   $0x5a1
f011c720:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011c725:	e8 f0 3b fe ff       	call   f010031a <_panic>

			if (((ptr_table[PTX(va)] & 0xFFFFF000)+(va & 0x00000FFF))!= pa)
f011c72a:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011c730:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011c733:	c1 ea 0c             	shr    $0xc,%edx
f011c736:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011c73c:	c1 e2 02             	shl    $0x2,%edx
f011c73f:	01 d0                	add    %edx,%eax
f011c741:	8b 00                	mov    (%eax),%eax
f011c743:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011c748:	89 c2                	mov    %eax,%edx
f011c74a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011c74d:	25 ff 0f 00 00       	and    $0xfff,%eax
f011c752:	01 d0                	add    %edx,%eax
f011c754:	3b 85 74 ff ff ff    	cmp    -0x8c(%ebp),%eax
f011c75a:	74 1d                	je     f011c779 <test_kheap_phys_addr+0xba3>
			{
				//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
				if (correct)
f011c75c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011c760:	74 17                	je     f011c779 <test_kheap_phys_addr+0xba3>
				{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f011c762:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c769:	83 ec 0c             	sub    $0xc,%esp
f011c76c:	68 ea c8 12 f0       	push   $0xf012c8ea
f011c771:	e8 f6 47 fe ff       	call   f0100f6c <cprintf>
f011c776:	83 c4 10             	add    $0x10,%esp

	correct = 1 ;
	//[DYNAMIC ALLOCATOR] test kheap_physical_address on the entire allocated area [30%]
	{
		uint32 va, pa;
		for (va = KERNEL_HEAP_START; va < (uint32)sbrk(0); va++)
f011c779:	ff 45 d4             	incl   -0x2c(%ebp)
f011c77c:	83 ec 0c             	sub    $0xc,%esp
f011c77f:	6a 00                	push   $0x0
f011c781:	e8 26 c3 fe ff       	call   f0108aac <sbrk>
f011c786:	83 c4 10             	add    $0x10,%esp
f011c789:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f011c78c:	0f 87 3b ff ff ff    	ja     f011c6cd <test_kheap_phys_addr+0xaf7>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
			}
		}
	}
	if (correct)	eval+=30 ;
f011c792:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011c796:	74 04                	je     f011c79c <test_kheap_phys_addr+0xbc6>
f011c798:	83 45 f0 1e          	addl   $0x1e,-0x10(%ebp)

	correct = 1 ;
f011c79c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	//test kheap_physical_address on non-mapped area [10%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f011c7a3:	c7 85 70 ff ff ff 00 	movl   $0xf9001000,-0x90(%ebp)
f011c7aa:	10 00 f9 
		i = 0;
f011c7ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f011c7b4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c7ba:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011c7bd:	eb 0a                	jmp    f011c7c9 <test_kheap_phys_addr+0xbf3>
		{
			i++;
f011c7bf:	ff 45 f4             	incl   -0xc(%ebp)
	//test kheap_physical_address on non-mapped area [10%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f011c7c2:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f011c7c9:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f011c7d0:	76 ed                	jbe    f011c7bf <test_kheap_phys_addr+0xbe9>
		{
			i++;
		}
		int ii = i ;
f011c7d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011c7d5:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
		i = 0;
f011c7db:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f011c7e2:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c7e8:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011c7eb:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f011c7f2:	e9 13 01 00 00       	jmp    f011c90a <test_kheap_phys_addr+0xd34>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f011c7f7:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011c7fa:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f011c7ff:	83 ec 04             	sub    $0x4,%esp
f011c802:	8d 8d 60 fe ff ff    	lea    -0x1a0(%ebp),%ecx
f011c808:	51                   	push   %ecx
f011c809:	52                   	push   %edx
f011c80a:	50                   	push   %eax
f011c80b:	e8 fd bb fe ff       	call   f010840d <get_page_table>
f011c810:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011c813:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011c819:	85 c0                	test   %eax,%eax
f011c81b:	75 24                	jne    f011c841 <test_kheap_phys_addr+0xc6b>
			{
				if (correct)
f011c81d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011c821:	74 1e                	je     f011c841 <test_kheap_phys_addr+0xc6b>
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011c823:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c82a:	83 ec 04             	sub    $0x4,%esp
f011c82d:	68 78 c8 12 f0       	push   $0xf012c878
f011c832:	68 c2 05 00 00       	push   $0x5c2
f011c837:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011c83c:	e8 d9 3a fe ff       	call   f010031a <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f011c841:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f011c848:	e9 9a 00 00 00       	jmp    f011c8e7 <test_kheap_phys_addr+0xd11>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f011c84d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011c850:	c1 e0 0c             	shl    $0xc,%eax
f011c853:	89 c2                	mov    %eax,%edx
f011c855:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c85b:	01 d0                	add    %edx,%eax
f011c85d:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f011c863:	83 ec 0c             	sub    $0xc,%esp
f011c866:	ff b5 68 ff ff ff    	pushl  -0x98(%ebp)
f011c86c:	e8 93 c2 fe ff       	call   f0108b04 <kheap_physical_address>
f011c871:	83 c4 10             	add    $0x10,%esp
f011c874:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
				if (((ptr_table[j] & 0xFFFFF000)+((ptr_table[j] & PERM_PRESENT) == 0? 0 : page_va & 0x00000FFF)) != supposed_kheap_phys_add)
f011c87a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011c880:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011c883:	c1 e2 02             	shl    $0x2,%edx
f011c886:	01 d0                	add    %edx,%eax
f011c888:	8b 00                	mov    (%eax),%eax
f011c88a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011c88f:	89 c1                	mov    %eax,%ecx
f011c891:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011c897:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011c89a:	c1 e2 02             	shl    $0x2,%edx
f011c89d:	01 d0                	add    %edx,%eax
f011c89f:	8b 00                	mov    (%eax),%eax
f011c8a1:	83 e0 01             	and    $0x1,%eax
f011c8a4:	85 c0                	test   %eax,%eax
f011c8a6:	74 0d                	je     f011c8b5 <test_kheap_phys_addr+0xcdf>
f011c8a8:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c8ae:	25 ff 0f 00 00       	and    $0xfff,%eax
f011c8b3:	eb 05                	jmp    f011c8ba <test_kheap_phys_addr+0xce4>
f011c8b5:	b8 00 00 00 00       	mov    $0x0,%eax
f011c8ba:	01 c8                	add    %ecx,%eax
f011c8bc:	3b 85 64 ff ff ff    	cmp    -0x9c(%ebp),%eax
f011c8c2:	74 1d                	je     f011c8e1 <test_kheap_phys_addr+0xd0b>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					if (correct)
f011c8c4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011c8c8:	74 17                	je     f011c8e1 <test_kheap_phys_addr+0xd0b>
					{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
f011c8ca:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011c8d1:	83 ec 0c             	sub    $0xc,%esp
f011c8d4:	68 ea c8 12 f0       	push   $0xf012c8ea
f011c8d9:	e8 8e 46 fe ff       	call   f0100f6c <cprintf>
f011c8de:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
			{
				if (correct)
				{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f011c8e1:	ff 45 cc             	incl   -0x34(%ebp)
f011c8e4:	ff 45 f4             	incl   -0xc(%ebp)
f011c8e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011c8ea:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f011c8f0:	7d 0d                	jge    f011c8ff <test_kheap_phys_addr+0xd29>
f011c8f2:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f011c8f9:	0f 8e 4e ff ff ff    	jle    f011c84d <test_kheap_phys_addr+0xc77>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f011c8ff:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f011c906:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f011c90a:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f011c90e:	0f 88 e3 fe ff ff    	js     f011c7f7 <test_kheap_phys_addr+0xc21>
f011c914:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f011c918:	7f 0d                	jg     f011c927 <test_kheap_phys_addr+0xd51>
f011c91a:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f011c921:	0f 86 d0 fe ff ff    	jbe    f011c7f7 <test_kheap_phys_addr+0xc21>
					{ correct = 0; cprintf("Wrong kheap_physical_address\n"); }
				}
			}
		}
	}
	if (correct)	eval+=10 ;
f011c927:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011c92b:	74 04                	je     f011c931 <test_kheap_phys_addr+0xd5b>
f011c92d:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)

	cprintf("\ntest kheap_physical_address completed. Eval = %d%\n", eval);
f011c931:	83 ec 08             	sub    $0x8,%esp
f011c934:	ff 75 f0             	pushl  -0x10(%ebp)
f011c937:	68 08 c9 12 f0       	push   $0xf012c908
f011c93c:	e8 2b 46 fe ff       	call   f0100f6c <cprintf>
f011c941:	83 c4 10             	add    $0x10,%esp

	return 1;
f011c944:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011c949:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011c94c:	5b                   	pop    %ebx
f011c94d:	5f                   	pop    %edi
f011c94e:	5d                   	pop    %ebp
f011c94f:	c3                   	ret    

f011c950 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f011c950:	55                   	push   %ebp
f011c951:	89 e5                	mov    %esp,%ebp
f011c953:	57                   	push   %edi
f011c954:	56                   	push   %esi
f011c955:	53                   	push   %ebx
f011c956:	81 ec 9c 01 00 00    	sub    $0x19c,%esp
f011c95c:	89 e0                	mov    %esp,%eax
f011c95e:	89 c6                	mov    %eax,%esi
	 * INSTEAD OF "EQUAL" RULE SINCE IT'S POSSIBLE FOR SOME
	 * IMPLEMENTATIONS TO DYNAMICALLY ALLOCATE SPECIAL DATA
	 * STRUCTURE TO MANAGE THE PAGE ALLOCATOR.
	 *********************************************************/

	cprintf("==============================================\n");
f011c960:	83 ec 0c             	sub    $0xc,%esp
f011c963:	68 60 c1 12 f0       	push   $0xf012c160
f011c968:	e8 ff 45 fe ff       	call   f0100f6c <cprintf>
f011c96d:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011c970:	83 ec 0c             	sub    $0xc,%esp
f011c973:	68 90 c1 12 f0       	push   $0xf012c190
f011c978:	e8 ef 45 fe ff       	call   f0100f6c <cprintf>
f011c97d:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011c980:	83 ec 0c             	sub    $0xc,%esp
f011c983:	68 60 c1 12 f0       	push   $0xf012c160
f011c988:	e8 df 45 fe ff       	call   f0100f6c <cprintf>
f011c98d:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011c990:	c6 45 c7 80          	movb   $0x80,-0x39(%ebp)
	char maxByte = 0x7F;
f011c994:	c6 45 c6 7f          	movb   $0x7f,-0x3a(%ebp)
	short minShort = 1<<15 ;
f011c998:	66 c7 45 c4 00 80    	movw   $0x8000,-0x3c(%ebp)
	short maxShort = 0x7FFF;
f011c99e:	66 c7 45 c2 ff 7f    	movw   $0x7fff,-0x3e(%ebp)
	int minInt = 1<<31 ;
f011c9a4:	c7 45 bc 00 00 00 80 	movl   $0x80000000,-0x44(%ebp)
	int maxInt = 0x7FFFFFFF;
f011c9ab:	c7 45 b8 ff ff ff 7f 	movl   $0x7fffffff,-0x48(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011c9b2:	e8 52 10 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011c9b7:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011c9ba:	8d 95 0c ff ff ff    	lea    -0xf4(%ebp),%edx
f011c9c0:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c9c5:	b8 00 00 00 00       	mov    $0x0,%eax
f011c9ca:	89 d7                	mov    %edx,%edi
f011c9cc:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011c9ce:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f011c9d4:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c9d9:	b8 00 00 00 00       	mov    $0x0,%eax
f011c9de:	89 d7                	mov    %edx,%edi
f011c9e0:	f3 ab                	rep stos %eax,%es:(%edi)

	int eval = 0;
f011c9e2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool correct = 1;
f011c9e9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f011c9f0:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f011c9f6:	b9 14 00 00 00       	mov    $0x14,%ecx
f011c9fb:	b8 00 00 00 00       	mov    $0x0,%eax
f011ca00:	89 d7                	mov    %edx,%edi
f011ca02:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ca04:	e8 00 10 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ca09:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ca0c:	e8 2f 7e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ca11:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011ca14:	83 ec 0c             	sub    $0xc,%esp
f011ca17:	68 00 fc 1f 00       	push   $0x1ffc00
f011ca1c:	e8 95 c0 fe ff       	call   f0108ab6 <kmalloc>
f011ca21:	83 c4 10             	add    $0x10,%esp
f011ca24:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011ca2a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011ca30:	3d 00 10 00 f8       	cmp    $0xf8001000,%eax
f011ca35:	74 17                	je     f011ca4e <test_kheap_virt_addr+0xfe>
f011ca37:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ca3e:	83 ec 0c             	sub    $0xc,%esp
f011ca41:	68 d0 c2 12 f0       	push   $0xf012c2d0
f011ca46:	e8 21 45 fe ff       	call   f0100f6c <cprintf>
f011ca4b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ca4e:	e8 ed 7d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ca53:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011ca56:	74 17                	je     f011ca6f <test_kheap_virt_addr+0x11f>
f011ca58:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ca5f:	83 ec 0c             	sub    $0xc,%esp
f011ca62:	68 20 c2 12 f0       	push   $0xf012c220
f011ca67:	e8 00 45 fe ff       	call   f0100f6c <cprintf>
f011ca6c:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011ca6f:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011ca72:	e8 92 0f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ca77:	29 c3                	sub    %eax,%ebx
f011ca79:	89 d8                	mov    %ebx,%eax
f011ca7b:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011ca80:	77 17                	ja     f011ca99 <test_kheap_virt_addr+0x149>
f011ca82:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ca89:	83 ec 0c             	sub    $0xc,%esp
f011ca8c:	68 8c c2 12 f0       	push   $0xf012c28c
f011ca91:	e8 d6 44 fe ff       	call   f0100f6c <cprintf>
f011ca96:	83 c4 10             	add    $0x10,%esp

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ca99:	e8 6b 0f ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ca9e:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011caa1:	e8 9a 7d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011caa6:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011caa9:	83 ec 0c             	sub    $0xc,%esp
f011caac:	68 00 fc 1f 00       	push   $0x1ffc00
f011cab1:	e8 00 c0 fe ff       	call   f0108ab6 <kmalloc>
f011cab6:	83 c4 10             	add    $0x10,%esp
f011cab9:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011cabf:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011cac5:	3d 00 10 20 f8       	cmp    $0xf8201000,%eax
f011caca:	74 17                	je     f011cae3 <test_kheap_virt_addr+0x193>
f011cacc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011cad3:	83 ec 0c             	sub    $0xc,%esp
f011cad6:	68 d0 c2 12 f0       	push   $0xf012c2d0
f011cadb:	e8 8c 44 fe ff       	call   f0100f6c <cprintf>
f011cae0:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cae3:	e8 58 7d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cae8:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011caeb:	74 17                	je     f011cb04 <test_kheap_virt_addr+0x1b4>
f011caed:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011caf4:	83 ec 0c             	sub    $0xc,%esp
f011caf7:	68 20 c2 12 f0       	push   $0xf012c220
f011cafc:	e8 6b 44 fe ff       	call   f0100f6c <cprintf>
f011cb01:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 512) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011cb04:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011cb07:	e8 fd 0e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cb0c:	29 c3                	sub    %eax,%ebx
f011cb0e:	89 d8                	mov    %ebx,%eax
f011cb10:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011cb15:	77 17                	ja     f011cb2e <test_kheap_virt_addr+0x1de>
f011cb17:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011cb1e:	83 ec 0c             	sub    $0xc,%esp
f011cb21:	68 8c c2 12 f0       	push   $0xf012c28c
f011cb26:	e8 41 44 fe ff       	call   f0100f6c <cprintf>
f011cb2b:	83 c4 10             	add    $0x10,%esp

		//[DYNAMIC ALLOCATOR]
		{
			//1 KB
			freeFrames = sys_calculate_free_frames() ;
f011cb2e:	e8 d6 0e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cb33:	89 45 b0             	mov    %eax,-0x50(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011cb36:	e8 05 7d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cb3b:	89 45 ac             	mov    %eax,-0x54(%ebp)
			ptr_allocations[2] = kmalloc(1*kilo);
f011cb3e:	83 ec 0c             	sub    $0xc,%esp
f011cb41:	68 00 04 00 00       	push   $0x400
f011cb46:	e8 6b bf fe ff       	call   f0108ab6 <kmalloc>
f011cb4b:	83 c4 10             	add    $0x10,%esp
f011cb4e:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
			if ((uint32) ptr_allocations[2] < KERNEL_HEAP_START || ptr_allocations[2] >= sbrk(0) || (uint32) ptr_allocations[2] >= da_limit)
f011cb54:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011cb5a:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011cb5f:	76 28                	jbe    f011cb89 <test_kheap_virt_addr+0x239>
f011cb61:	8b 9d 74 fe ff ff    	mov    -0x18c(%ebp),%ebx
f011cb67:	83 ec 0c             	sub    $0xc,%esp
f011cb6a:	6a 00                	push   $0x0
f011cb6c:	e8 3b bf fe ff       	call   f0108aac <sbrk>
f011cb71:	83 c4 10             	add    $0x10,%esp
f011cb74:	39 c3                	cmp    %eax,%ebx
f011cb76:	73 11                	jae    f011cb89 <test_kheap_virt_addr+0x239>
f011cb78:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011cb7e:	89 c2                	mov    %eax,%edx
f011cb80:	a1 98 9d 17 f0       	mov    0xf0179d98,%eax
f011cb85:	39 c2                	cmp    %eax,%edx
f011cb87:	72 17                	jb     f011cba0 <test_kheap_virt_addr+0x250>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011cb89:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011cb90:	83 ec 0c             	sub    $0xc,%esp
f011cb93:	68 20 c3 12 f0       	push   $0xf012c320
f011cb98:	e8 cf 43 fe ff       	call   f0100f6c <cprintf>
f011cb9d:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cba0:	e8 9b 7c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cba5:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011cba8:	74 17                	je     f011cbc1 <test_kheap_virt_addr+0x271>
f011cbaa:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011cbb1:	83 ec 0c             	sub    $0xc,%esp
f011cbb4:	68 20 c2 12 f0       	push   $0xf012c220
f011cbb9:	e8 ae 43 fe ff       	call   f0100f6c <cprintf>
f011cbbe:	83 c4 10             	add    $0x10,%esp
			//if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f011cbc1:	e8 43 0e ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cbc6:	89 45 b0             	mov    %eax,-0x50(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011cbc9:	e8 72 7c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cbce:	89 45 ac             	mov    %eax,-0x54(%ebp)
			ptr_allocations[3] = kmalloc(2*kilo);
f011cbd1:	83 ec 0c             	sub    $0xc,%esp
f011cbd4:	68 00 08 00 00       	push   $0x800
f011cbd9:	e8 d8 be fe ff       	call   f0108ab6 <kmalloc>
f011cbde:	83 c4 10             	add    $0x10,%esp
f011cbe1:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
			if ((uint32) ptr_allocations[3] < KERNEL_HEAP_START || ptr_allocations[3] >= sbrk(0) || (uint32) ptr_allocations[3] >= da_limit)
f011cbe7:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011cbed:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011cbf2:	76 28                	jbe    f011cc1c <test_kheap_virt_addr+0x2cc>
f011cbf4:	8b 9d 78 fe ff ff    	mov    -0x188(%ebp),%ebx
f011cbfa:	83 ec 0c             	sub    $0xc,%esp
f011cbfd:	6a 00                	push   $0x0
f011cbff:	e8 a8 be fe ff       	call   f0108aac <sbrk>
f011cc04:	83 c4 10             	add    $0x10,%esp
f011cc07:	39 c3                	cmp    %eax,%ebx
f011cc09:	73 11                	jae    f011cc1c <test_kheap_virt_addr+0x2cc>
f011cc0b:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011cc11:	89 c2                	mov    %eax,%edx
f011cc13:	a1 98 9d 17 f0       	mov    0xf0179d98,%eax
f011cc18:	39 c2                	cmp    %eax,%edx
f011cc1a:	72 17                	jb     f011cc33 <test_kheap_virt_addr+0x2e3>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011cc1c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011cc23:	83 ec 0c             	sub    $0xc,%esp
f011cc26:	68 20 c3 12 f0       	push   $0xf012c320
f011cc2b:	e8 3c 43 fe ff       	call   f0100f6c <cprintf>
f011cc30:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cc33:	e8 08 7c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cc38:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011cc3b:	74 17                	je     f011cc54 <test_kheap_virt_addr+0x304>
f011cc3d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011cc44:	83 ec 0c             	sub    $0xc,%esp
f011cc47:	68 20 c2 12 f0       	push   $0xf012c220
f011cc4c:	e8 1b 43 fe ff       	call   f0100f6c <cprintf>
f011cc51:	83 c4 10             	add    $0x10,%esp
			//if ((freeFrames - sys_calculate_free_frames()) != 1) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }

			//1.5 KB
			freeFrames = sys_calculate_free_frames() ;
f011cc54:	e8 b0 0d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cc59:	89 45 b0             	mov    %eax,-0x50(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f011cc5c:	e8 df 7b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cc61:	89 45 ac             	mov    %eax,-0x54(%ebp)
			ptr_allocations[4] = kmalloc(3*kilo/2);
f011cc64:	83 ec 0c             	sub    $0xc,%esp
f011cc67:	68 00 06 00 00       	push   $0x600
f011cc6c:	e8 45 be fe ff       	call   f0108ab6 <kmalloc>
f011cc71:	83 c4 10             	add    $0x10,%esp
f011cc74:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
			if ((uint32) ptr_allocations[4] < KERNEL_HEAP_START || ptr_allocations[4] >= sbrk(0) || (uint32) ptr_allocations[4] >= da_limit)
f011cc7a:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011cc80:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f011cc85:	76 28                	jbe    f011ccaf <test_kheap_virt_addr+0x35f>
f011cc87:	8b 9d 7c fe ff ff    	mov    -0x184(%ebp),%ebx
f011cc8d:	83 ec 0c             	sub    $0xc,%esp
f011cc90:	6a 00                	push   $0x0
f011cc92:	e8 15 be fe ff       	call   f0108aac <sbrk>
f011cc97:	83 c4 10             	add    $0x10,%esp
f011cc9a:	39 c3                	cmp    %eax,%ebx
f011cc9c:	73 11                	jae    f011ccaf <test_kheap_virt_addr+0x35f>
f011cc9e:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011cca4:	89 c2                	mov    %eax,%edx
f011cca6:	a1 98 9d 17 f0       	mov    0xf0179d98,%eax
f011ccab:	39 c2                	cmp    %eax,%edx
f011ccad:	72 17                	jb     f011ccc6 <test_kheap_virt_addr+0x376>
			{ correct = 0; cprintf("Wrong start address for the allocated space... should allocated by the dynamic allocator! check return address of kmalloc and/or sbrk\n"); }
f011ccaf:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ccb6:	83 ec 0c             	sub    $0xc,%esp
f011ccb9:	68 20 c3 12 f0       	push   $0xf012c320
f011ccbe:	e8 a9 42 fe ff       	call   f0100f6c <cprintf>
f011ccc3:	83 c4 10             	add    $0x10,%esp
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ccc6:	e8 75 7b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cccb:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011ccce:	74 17                	je     f011cce7 <test_kheap_virt_addr+0x397>
f011ccd0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ccd7:	83 ec 0c             	sub    $0xc,%esp
f011ccda:	68 20 c2 12 f0       	push   $0xf012c220
f011ccdf:	e8 88 42 fe ff       	call   f0100f6c <cprintf>
f011cce4:	83 c4 10             	add    $0x10,%esp
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011cce7:	e8 1d 0d ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ccec:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ccef:	e8 4c 7b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ccf4:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[5] = kmalloc(7*kilo);
f011ccf7:	83 ec 0c             	sub    $0xc,%esp
f011ccfa:	68 00 1c 00 00       	push   $0x1c00
f011ccff:	e8 b2 bd fe ff       	call   f0108ab6 <kmalloc>
f011cd04:	83 c4 10             	add    $0x10,%esp
f011cd07:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega /*+ 8*kilo*/)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011cd0d:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011cd13:	3d 00 10 40 f8       	cmp    $0xf8401000,%eax
f011cd18:	74 17                	je     f011cd31 <test_kheap_virt_addr+0x3e1>
f011cd1a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011cd21:	83 ec 0c             	sub    $0xc,%esp
f011cd24:	68 d0 c2 12 f0       	push   $0xf012c2d0
f011cd29:	e8 3e 42 fe ff       	call   f0100f6c <cprintf>
f011cd2e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cd31:	e8 0a 7b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cd36:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011cd39:	74 17                	je     f011cd52 <test_kheap_virt_addr+0x402>
f011cd3b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011cd42:	83 ec 0c             	sub    $0xc,%esp
f011cd45:	68 20 c2 12 f0       	push   $0xf012c220
f011cd4a:	e8 1d 42 fe ff       	call   f0100f6c <cprintf>
f011cd4f:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 2) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011cd52:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011cd55:	e8 af 0c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cd5a:	29 c3                	sub    %eax,%ebx
f011cd5c:	89 d8                	mov    %ebx,%eax
f011cd5e:	83 f8 01             	cmp    $0x1,%eax
f011cd61:	77 17                	ja     f011cd7a <test_kheap_virt_addr+0x42a>
f011cd63:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011cd6a:	83 ec 0c             	sub    $0xc,%esp
f011cd6d:	68 8c c2 12 f0       	push   $0xf012c28c
f011cd72:	e8 f5 41 fe ff       	call   f0100f6c <cprintf>
f011cd77:	83 c4 10             	add    $0x10,%esp

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011cd7a:	e8 8a 0c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cd7f:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cd82:	e8 b9 7a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cd87:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011cd8a:	83 ec 0c             	sub    $0xc,%esp
f011cd8d:	68 00 fc 2f 00       	push   $0x2ffc00
f011cd92:	e8 1f bd fe ff       	call   f0108ab6 <kmalloc>
f011cd97:	83 c4 10             	add    $0x10,%esp
f011cd9a:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 4*Mega + 8*kilo) ) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011cda0:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011cda6:	3d 00 30 40 f8       	cmp    $0xf8403000,%eax
f011cdab:	74 17                	je     f011cdc4 <test_kheap_virt_addr+0x474>
f011cdad:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011cdb4:	83 ec 0c             	sub    $0xc,%esp
f011cdb7:	68 d0 c2 12 f0       	push   $0xf012c2d0
f011cdbc:	e8 ab 41 fe ff       	call   f0100f6c <cprintf>
f011cdc1:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011cdc4:	e8 77 7a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cdc9:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011cdcc:	74 17                	je     f011cde5 <test_kheap_virt_addr+0x495>
f011cdce:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011cdd5:	83 ec 0c             	sub    $0xc,%esp
f011cdd8:	68 20 c2 12 f0       	push   $0xf012c220
f011cddd:	e8 8a 41 fe ff       	call   f0100f6c <cprintf>
f011cde2:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 768) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011cde5:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011cde8:	e8 1c 0c ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cded:	29 c3                	sub    %eax,%ebx
f011cdef:	89 d8                	mov    %ebx,%eax
f011cdf1:	3d ff 02 00 00       	cmp    $0x2ff,%eax
f011cdf6:	77 17                	ja     f011ce0f <test_kheap_virt_addr+0x4bf>
f011cdf8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011cdff:	83 ec 0c             	sub    $0xc,%esp
f011ce02:	68 8c c2 12 f0       	push   $0xf012c28c
f011ce07:	e8 60 41 fe ff       	call   f0100f6c <cprintf>
f011ce0c:	83 c4 10             	add    $0x10,%esp

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011ce0f:	e8 f5 0b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ce14:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce17:	e8 24 7a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ce1c:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[7] = kmalloc(6*Mega-kilo);
f011ce1f:	83 ec 0c             	sub    $0xc,%esp
f011ce22:	68 00 fc 5f 00       	push   $0x5ffc00
f011ce27:	e8 8a bc fe ff       	call   f0108ab6 <kmalloc>
f011ce2c:	83 c4 10             	add    $0x10,%esp
f011ce2f:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011ce35:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011ce3b:	3d 00 30 70 f8       	cmp    $0xf8703000,%eax
f011ce40:	74 17                	je     f011ce59 <test_kheap_virt_addr+0x509>
f011ce42:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ce49:	83 ec 0c             	sub    $0xc,%esp
f011ce4c:	68 d0 c2 12 f0       	push   $0xf012c2d0
f011ce51:	e8 16 41 fe ff       	call   f0100f6c <cprintf>
f011ce56:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ce59:	e8 e2 79 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ce5e:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011ce61:	74 17                	je     f011ce7a <test_kheap_virt_addr+0x52a>
f011ce63:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ce6a:	83 ec 0c             	sub    $0xc,%esp
f011ce6d:	68 20 c2 12 f0       	push   $0xf012c220
f011ce72:	e8 f5 40 fe ff       	call   f0100f6c <cprintf>
f011ce77:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 1536) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011ce7a:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011ce7d:	e8 87 0b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011ce82:	29 c3                	sub    %eax,%ebx
f011ce84:	89 d8                	mov    %ebx,%eax
f011ce86:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011ce8b:	77 17                	ja     f011cea4 <test_kheap_virt_addr+0x554>
f011ce8d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ce94:	83 ec 0c             	sub    $0xc,%esp
f011ce97:	68 8c c2 12 f0       	push   $0xf012c28c
f011ce9c:	e8 cb 40 fe ff       	call   f0100f6c <cprintf>
f011cea1:	83 c4 10             	add    $0x10,%esp

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011cea4:	e8 60 0b ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cea9:	89 45 b0             	mov    %eax,-0x50(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ceac:	e8 8f 79 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ceb1:	89 45 ac             	mov    %eax,-0x54(%ebp)
		ptr_allocations[8] = kmalloc(14*kilo);
f011ceb4:	83 ec 0c             	sub    $0xc,%esp
f011ceb7:	68 00 38 00 00       	push   $0x3800
f011cebc:	e8 f5 bb fe ff       	call   f0108ab6 <kmalloc>
f011cec1:	83 c4 10             	add    $0x10,%esp
f011cec4:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 8*kilo)) { correct = 0; cprintf("Wrong start address for the allocated space... check return address of kmalloc\n"); }
f011ceca:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011ced0:	3d 00 30 d0 f8       	cmp    $0xf8d03000,%eax
f011ced5:	74 17                	je     f011ceee <test_kheap_virt_addr+0x59e>
f011ced7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011cede:	83 ec 0c             	sub    $0xc,%esp
f011cee1:	68 d0 c2 12 f0       	push   $0xf012c2d0
f011cee6:	e8 81 40 fe ff       	call   f0100f6c <cprintf>
f011ceeb:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011ceee:	e8 4d 79 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011cef3:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011cef6:	74 17                	je     f011cf0f <test_kheap_virt_addr+0x5bf>
f011cef8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011ceff:	83 ec 0c             	sub    $0xc,%esp
f011cf02:	68 20 c2 12 f0       	push   $0xf012c220
f011cf07:	e8 60 40 fe ff       	call   f0100f6c <cprintf>
f011cf0c:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) < 4) { correct = 0; cprintf("Wrong allocation: pages are not loaded successfully into memory\n"); }
f011cf0f:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f011cf12:	e8 f2 0a ff ff       	call   f010da09 <sys_calculate_free_frames>
f011cf17:	29 c3                	sub    %eax,%ebx
f011cf19:	89 d8                	mov    %ebx,%eax
f011cf1b:	83 f8 03             	cmp    $0x3,%eax
f011cf1e:	77 17                	ja     f011cf37 <test_kheap_virt_addr+0x5e7>
f011cf20:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011cf27:	83 ec 0c             	sub    $0xc,%esp
f011cf2a:	68 8c c2 12 f0       	push   $0xf012c28c
f011cf2f:	e8 38 40 fe ff       	call   f0100f6c <cprintf>
f011cf34:	83 c4 10             	add    $0x10,%esp
	}

	uint32 allocatedSpace = (13*Mega + 24*kilo + (INITIAL_KHEAP_ALLOCATIONS));
f011cf37:	c7 45 a8 00 60 d0 00 	movl   $0xd06000,-0x58(%ebp)
	uint32 allPAs[allocatedSpace/PAGE_SIZE] ;
f011cf3e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cf41:	c1 e8 0c             	shr    $0xc,%eax
f011cf44:	89 c2                	mov    %eax,%edx
f011cf46:	4a                   	dec    %edx
f011cf47:	89 55 a4             	mov    %edx,-0x5c(%ebp)
f011cf4a:	c1 e0 02             	shl    $0x2,%eax
f011cf4d:	8d 50 03             	lea    0x3(%eax),%edx
f011cf50:	b8 10 00 00 00       	mov    $0x10,%eax
f011cf55:	48                   	dec    %eax
f011cf56:	01 d0                	add    %edx,%eax
f011cf58:	bf 10 00 00 00       	mov    $0x10,%edi
f011cf5d:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf62:	f7 f7                	div    %edi
f011cf64:	6b c0 10             	imul   $0x10,%eax,%eax
f011cf67:	29 c4                	sub    %eax,%esp
f011cf69:	89 e0                	mov    %esp,%eax
f011cf6b:	83 c0 03             	add    $0x3,%eax
f011cf6e:	c1 e8 02             	shr    $0x2,%eax
f011cf71:	c1 e0 02             	shl    $0x2,%eax
f011cf74:	89 45 a0             	mov    %eax,-0x60(%ebp)
	int numOfFrames = allocatedSpace/PAGE_SIZE ;
f011cf77:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011cf7a:	c1 e8 0c             	shr    $0xc,%eax
f011cf7d:	89 45 9c             	mov    %eax,-0x64(%ebp)

	//test kheap_virtual_address after kmalloc only [20%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
f011cf80:	c7 45 98 00 70 d0 f8 	movl   $0xf8d07000,-0x68(%ebp)
		uint32 startVA = da_limit + PAGE_SIZE;
f011cf87:	a1 98 9d 17 f0       	mov    0xf0179d98,%eax
f011cf8c:	05 00 10 00 00       	add    $0x1000,%eax
f011cf91:	89 45 94             	mov    %eax,-0x6c(%ebp)
		int i = 0;
f011cf94:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		for (va = startVA; va < endVA; )
f011cf9b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011cf9e:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011cfa1:	e9 2d 01 00 00       	jmp    f011d0d3 <test_kheap_virt_addr+0x783>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011cfa6:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f011cfab:	83 ec 04             	sub    $0x4,%esp
f011cfae:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f011cfb4:	52                   	push   %edx
f011cfb5:	ff 75 dc             	pushl  -0x24(%ebp)
f011cfb8:	50                   	push   %eax
f011cfb9:	e8 4f b4 fe ff       	call   f010840d <get_page_table>
f011cfbe:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011cfc1:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011cfc7:	85 c0                	test   %eax,%eax
f011cfc9:	75 1e                	jne    f011cfe9 <test_kheap_virt_addr+0x699>
			{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011cfcb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011cfd2:	83 ec 04             	sub    $0x4,%esp
f011cfd5:	68 78 c8 12 f0       	push   $0xf012c878
f011cfda:	68 5e 06 00 00       	push   $0x65e
f011cfdf:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011cfe4:	e8 31 33 fe ff       	call   f010031a <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024 && va < endVA; ++j, ++i)
f011cfe9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011cfec:	c1 e8 0c             	shr    $0xc,%eax
f011cfef:	25 ff 03 00 00       	and    $0x3ff,%eax
f011cff4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f011cff7:	e9 ba 00 00 00       	jmp    f011d0b6 <test_kheap_virt_addr+0x766>
			{
				uint32 offset = j;
f011cffc:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011cfff:	89 45 90             	mov    %eax,-0x70(%ebp)
				allPAs[i] = (ptr_table[j] & 0xFFFFF000) + offset;
f011d002:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011d008:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011d00b:	c1 e2 02             	shl    $0x2,%edx
f011d00e:	01 d0                	add    %edx,%eax
f011d010:	8b 00                	mov    (%eax),%eax
f011d012:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011d017:	89 c2                	mov    %eax,%edx
f011d019:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d01c:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
f011d01f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d022:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011d025:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011d028:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d02b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011d02e:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011d031:	83 ec 0c             	sub    $0xc,%esp
f011d034:	50                   	push   %eax
f011d035:	e8 b0 ba fe ff       	call   f0108aea <kheap_virtual_address>
f011d03a:	83 c4 10             	add    $0x10,%esp
f011d03d:	89 45 8c             	mov    %eax,-0x74(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va+offset))
f011d040:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d043:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d046:	01 d0                	add    %edx,%eax
f011d048:	3b 45 8c             	cmp    -0x74(%ebp),%eax
f011d04b:	74 5c                	je     f011d0a9 <test_kheap_virt_addr+0x759>
				{
					if (correct)
f011d04d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011d051:	74 56                	je     f011d0a9 <test_kheap_virt_addr+0x759>
					{
						cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + offset /*+ j*PAGE_SIZE*/, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f011d053:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d056:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011d059:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011d05c:	8b 95 68 fe ff ff    	mov    -0x198(%ebp),%edx
f011d062:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
f011d065:	c1 e1 02             	shl    $0x2,%ecx
f011d068:	01 ca                	add    %ecx,%edx
f011d06a:	8b 12                	mov    (%edx),%edx
f011d06c:	89 d1                	mov    %edx,%ecx
f011d06e:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f011d074:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011d077:	8b 55 90             	mov    -0x70(%ebp),%edx
f011d07a:	01 da                	add    %ebx,%edx
f011d07c:	83 ec 0c             	sub    $0xc,%esp
f011d07f:	50                   	push   %eax
f011d080:	51                   	push   %ecx
f011d081:	52                   	push   %edx
f011d082:	ff 75 8c             	pushl  -0x74(%ebp)
f011d085:	68 3c c9 12 f0       	push   $0xf012c93c
f011d08a:	e8 dd 3e fe ff       	call   f0100f6c <cprintf>
f011d08f:	83 c4 20             	add    $0x20,%esp
						correct = 0; cprintf("Wrong kheap_virtual_address\n");
f011d092:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011d099:	83 ec 0c             	sub    $0xc,%esp
f011d09c:	68 7f c9 12 f0       	push   $0xf012c97f
f011d0a1:	e8 c6 3e fe ff       	call   f0100f6c <cprintf>
f011d0a6:	83 c4 10             	add    $0x10,%esp
					}
				}
				va+=PAGE_SIZE;
f011d0a9:	81 45 dc 00 10 00 00 	addl   $0x1000,-0x24(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
			{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }

			for (j = PTX(va); i < numOfFrames && j < 1024 && va < endVA; ++j, ++i)
f011d0b0:	ff 45 d4             	incl   -0x2c(%ebp)
f011d0b3:	ff 45 d8             	incl   -0x28(%ebp)
f011d0b6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011d0b9:	3b 45 9c             	cmp    -0x64(%ebp),%eax
f011d0bc:	7d 15                	jge    f011d0d3 <test_kheap_virt_addr+0x783>
f011d0be:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f011d0c5:	7f 0c                	jg     f011d0d3 <test_kheap_virt_addr+0x783>
f011d0c7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011d0ca:	3b 45 98             	cmp    -0x68(%ebp),%eax
f011d0cd:	0f 82 29 ff ff ff    	jb     f011cffc <test_kheap_virt_addr+0x6ac>
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
		uint32 startVA = da_limit + PAGE_SIZE;
		int i = 0;
		int j;
		for (va = startVA; va < endVA; )
f011d0d3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011d0d6:	3b 45 98             	cmp    -0x68(%ebp),%eax
f011d0d9:	0f 82 c7 fe ff ff    	jb     f011cfa6 <test_kheap_virt_addr+0x656>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	if (correct)	eval+=20 ;
f011d0df:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011d0e3:	74 04                	je     f011d0e9 <test_kheap_virt_addr+0x799>
f011d0e5:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)

	correct = 1 ;
f011d0e9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011d0f0:	e8 14 09 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d0f5:	89 45 88             	mov    %eax,-0x78(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011d0f8:	e8 43 77 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d0fd:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[0]);
f011d100:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011d106:	83 ec 0c             	sub    $0xc,%esp
f011d109:	50                   	push   %eax
f011d10a:	e8 c1 b9 fe ff       	call   f0108ad0 <kfree>
f011d10f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d112:	e8 29 77 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d117:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011d11a:	74 17                	je     f011d133 <test_kheap_virt_addr+0x7e3>
f011d11c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011d123:	83 ec 0c             	sub    $0xc,%esp
f011d126:	68 20 c2 12 f0       	push   $0xf012c220
f011d12b:	e8 3c 3e fe ff       	call   f0100f6c <cprintf>
f011d130:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512 ) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011d133:	e8 d1 08 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d138:	89 c2                	mov    %eax,%edx
f011d13a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d13d:	29 c2                	sub    %eax,%edx
f011d13f:	89 d0                	mov    %edx,%eax
f011d141:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011d146:	77 17                	ja     f011d15f <test_kheap_virt_addr+0x80f>
f011d148:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011d14f:	83 ec 0c             	sub    $0xc,%esp
f011d152:	68 24 c6 12 f0       	push   $0xf012c624
f011d157:	e8 10 3e fe ff       	call   f0100f6c <cprintf>
f011d15c:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011d15f:	e8 a5 08 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d164:	89 45 88             	mov    %eax,-0x78(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d167:	e8 d4 76 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d16c:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[1]);
f011d16f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011d175:	83 ec 0c             	sub    $0xc,%esp
f011d178:	50                   	push   %eax
f011d179:	e8 52 b9 fe ff       	call   f0108ad0 <kfree>
f011d17e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d181:	e8 ba 76 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d186:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011d189:	74 17                	je     f011d1a2 <test_kheap_virt_addr+0x852>
f011d18b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011d192:	83 ec 0c             	sub    $0xc,%esp
f011d195:	68 20 c2 12 f0       	push   $0xf012c220
f011d19a:	e8 cd 3d fe ff       	call   f0100f6c <cprintf>
f011d19f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 512) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011d1a2:	e8 62 08 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d1a7:	89 c2                	mov    %eax,%edx
f011d1a9:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d1ac:	29 c2                	sub    %eax,%edx
f011d1ae:	89 d0                	mov    %edx,%eax
f011d1b0:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011d1b5:	77 17                	ja     f011d1ce <test_kheap_virt_addr+0x87e>
f011d1b7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011d1be:	83 ec 0c             	sub    $0xc,%esp
f011d1c1:	68 24 c6 12 f0       	push   $0xf012c624
f011d1c6:	e8 a1 3d fe ff       	call   f0100f6c <cprintf>
f011d1cb:	83 c4 10             	add    $0x10,%esp

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011d1ce:	e8 36 08 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d1d3:	89 45 88             	mov    %eax,-0x78(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d1d6:	e8 65 76 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d1db:	89 45 84             	mov    %eax,-0x7c(%ebp)
		kfree(ptr_allocations[7]);
f011d1de:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011d1e4:	83 ec 0c             	sub    $0xc,%esp
f011d1e7:	50                   	push   %eax
f011d1e8:	e8 e3 b8 fe ff       	call   f0108ad0 <kfree>
f011d1ed:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) { correct = 0; cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)\n"); }
f011d1f0:	e8 4b 76 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d1f5:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f011d1f8:	74 17                	je     f011d211 <test_kheap_virt_addr+0x8c1>
f011d1fa:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011d201:	83 ec 0c             	sub    $0xc,%esp
f011d204:	68 20 c2 12 f0       	push   $0xf012c220
f011d209:	e8 5e 3d fe ff       	call   f0100f6c <cprintf>
f011d20e:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) < 6*Mega/4096) { correct = 0; cprintf("Wrong kfree: pages in memory are not freed correctly\n"); }
f011d211:	e8 f3 07 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d216:	89 c2                	mov    %eax,%edx
f011d218:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d21b:	29 c2                	sub    %eax,%edx
f011d21d:	89 d0                	mov    %edx,%eax
f011d21f:	3d ff 05 00 00       	cmp    $0x5ff,%eax
f011d224:	77 17                	ja     f011d23d <test_kheap_virt_addr+0x8ed>
f011d226:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011d22d:	83 ec 0c             	sub    $0xc,%esp
f011d230:	68 24 c6 12 f0       	push   $0xf012c624
f011d235:	e8 32 3d fe ff       	call   f0100f6c <cprintf>
f011d23a:	83 c4 10             	add    $0x10,%esp


	//test kheap_virtual_address after kmalloc and kfree [20%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 24*kilo;
f011d23d:	c7 45 80 00 70 d0 f8 	movl   $0xf8d07000,-0x80(%ebp)
		uint32 startVA = da_limit + PAGE_SIZE;
f011d244:	a1 98 9d 17 f0       	mov    0xf0179d98,%eax
f011d249:	05 00 10 00 00       	add    $0x1000,%eax
f011d24e:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		int i = 0;
f011d254:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS) / PAGE_SIZE;
f011d25b:	c7 85 78 ff ff ff 00 	movl   $0x0,-0x88(%ebp)
f011d262:	00 00 00 
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f011d265:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d26b:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011d26e:	eb 44                	jmp    f011d2b4 <test_kheap_virt_addr+0x964>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011d270:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d273:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011d276:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011d279:	83 ec 0c             	sub    $0xc,%esp
f011d27c:	50                   	push   %eax
f011d27d:	e8 68 b8 fe ff       	call   f0108aea <kheap_virtual_address>
f011d282:	83 c4 10             	add    $0x10,%esp
f011d285:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
			if (retrievedVA != 0)
f011d28b:	83 bd 74 ff ff ff 00 	cmpl   $0x0,-0x8c(%ebp)
f011d292:	74 1d                	je     f011d2b1 <test_kheap_virt_addr+0x961>
			{
				if (correct)
f011d294:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011d298:	74 17                	je     f011d2b1 <test_kheap_virt_addr+0x961>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
f011d29a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011d2a1:	83 ec 0c             	sub    $0xc,%esp
f011d2a4:	68 7f c9 12 f0       	push   $0xf012c97f
f011d2a9:	e8 be 3c fe ff       	call   f0100f6c <cprintf>
f011d2ae:	83 c4 10             	add    $0x10,%esp
		uint32 startVA = da_limit + PAGE_SIZE;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f011d2b1:	ff 45 d0             	incl   -0x30(%ebp)
f011d2b4:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d2ba:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f011d2c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d2c3:	39 c2                	cmp    %eax,%edx
f011d2c5:	77 a9                	ja     f011d270 <test_kheap_virt_addr+0x920>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 8*kilo)/PAGE_SIZE; ++i)
f011d2c7:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d2cd:	05 00 04 00 00       	add    $0x400,%eax
f011d2d2:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011d2d5:	eb 64                	jmp    f011d33b <test_kheap_virt_addr+0x9eb>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011d2d7:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d2da:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011d2dd:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011d2e0:	83 ec 0c             	sub    $0xc,%esp
f011d2e3:	50                   	push   %eax
f011d2e4:	e8 01 b8 fe ff       	call   f0108aea <kheap_virtual_address>
f011d2e9:	83 c4 10             	add    $0x10,%esp
f011d2ec:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
			if (retrievedVA != ((startVA + i*PAGE_SIZE) + (allPAs[i] & 0xFFF)))
f011d2f2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d2f5:	c1 e0 0c             	shl    $0xc,%eax
f011d2f8:	89 c2                	mov    %eax,%edx
f011d2fa:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011d300:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
f011d303:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d306:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011d309:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011d30c:	25 ff 0f 00 00       	and    $0xfff,%eax
f011d311:	01 c8                	add    %ecx,%eax
f011d313:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f011d319:	74 1d                	je     f011d338 <test_kheap_virt_addr+0x9e8>
			{
				if (correct)
f011d31b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011d31f:	74 17                	je     f011d338 <test_kheap_virt_addr+0x9e8>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
f011d321:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011d328:	83 ec 0c             	sub    $0xc,%esp
f011d32b:	68 7f c9 12 f0       	push   $0xf012c97f
f011d330:	e8 37 3c fe ff       	call   f0100f6c <cprintf>
f011d335:	83 c4 10             	add    $0x10,%esp
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 8*kilo)/PAGE_SIZE; ++i)
f011d338:	ff 45 d0             	incl   -0x30(%ebp)
f011d33b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d341:	8d 90 02 07 00 00    	lea    0x702(%eax),%edx
f011d347:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d34a:	39 c2                	cmp    %eax,%edx
f011d34c:	77 89                	ja     f011d2d7 <test_kheap_virt_addr+0x987>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 8*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 8*kilo)/PAGE_SIZE; ++i)
f011d34e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d354:	05 02 07 00 00       	add    $0x702,%eax
f011d359:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011d35c:	eb 44                	jmp    f011d3a2 <test_kheap_virt_addr+0xa52>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011d35e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d361:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011d364:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011d367:	83 ec 0c             	sub    $0xc,%esp
f011d36a:	50                   	push   %eax
f011d36b:	e8 7a b7 fe ff       	call   f0108aea <kheap_virtual_address>
f011d370:	83 c4 10             	add    $0x10,%esp
f011d373:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
			if (retrievedVA != 0)
f011d379:	83 bd 6c ff ff ff 00 	cmpl   $0x0,-0x94(%ebp)
f011d380:	74 1d                	je     f011d39f <test_kheap_virt_addr+0xa4f>
			{
				if (correct)
f011d382:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011d386:	74 17                	je     f011d39f <test_kheap_virt_addr+0xa4f>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
f011d388:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011d38f:	83 ec 0c             	sub    $0xc,%esp
f011d392:	68 7f c9 12 f0       	push   $0xf012c97f
f011d397:	e8 d0 3b fe ff       	call   f0100f6c <cprintf>
f011d39c:	83 c4 10             	add    $0x10,%esp
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 8*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 8*kilo)/PAGE_SIZE; ++i)
f011d39f:	ff 45 d0             	incl   -0x30(%ebp)
f011d3a2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d3a8:	8d 90 02 0d 00 00    	lea    0xd02(%eax),%edx
f011d3ae:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d3b1:	39 c2                	cmp    %eax,%edx
f011d3b3:	77 a9                	ja     f011d35e <test_kheap_virt_addr+0xa0e>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 8*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 24*kilo)/PAGE_SIZE; ++i)
f011d3b5:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d3bb:	05 02 0d 00 00       	add    $0xd02,%eax
f011d3c0:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011d3c3:	eb 64                	jmp    f011d429 <test_kheap_virt_addr+0xad9>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f011d3c5:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d3c8:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011d3cb:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011d3ce:	83 ec 0c             	sub    $0xc,%esp
f011d3d1:	50                   	push   %eax
f011d3d2:	e8 13 b7 fe ff       	call   f0108aea <kheap_virtual_address>
f011d3d7:	83 c4 10             	add    $0x10,%esp
f011d3da:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
			if (retrievedVA != ((startVA + i*PAGE_SIZE) + (allPAs[i] & 0xFFF)))
f011d3e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d3e3:	c1 e0 0c             	shl    $0xc,%eax
f011d3e6:	89 c2                	mov    %eax,%edx
f011d3e8:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011d3ee:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
f011d3f1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d3f4:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011d3f7:	8b 04 90             	mov    (%eax,%edx,4),%eax
f011d3fa:	25 ff 0f 00 00       	and    $0xfff,%eax
f011d3ff:	01 c8                	add    %ecx,%eax
f011d401:	3b 85 68 ff ff ff    	cmp    -0x98(%ebp),%eax
f011d407:	74 1d                	je     f011d426 <test_kheap_virt_addr+0xad6>
			{
				if (correct)
f011d409:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011d40d:	74 17                	je     f011d426 <test_kheap_virt_addr+0xad6>
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
f011d40f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011d416:	83 ec 0c             	sub    $0xc,%esp
f011d419:	68 7f c9 12 f0       	push   $0xf012c97f
f011d41e:	e8 49 3b fe ff       	call   f0100f6c <cprintf>
f011d423:	83 c4 10             	add    $0x10,%esp
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 8*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 24*kilo)/PAGE_SIZE; ++i)
f011d426:	ff 45 d0             	incl   -0x30(%ebp)
f011d429:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d42f:	8d 90 06 0d 00 00    	lea    0xd06(%eax),%edx
f011d435:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011d438:	39 c2                	cmp    %eax,%edx
f011d43a:	77 89                	ja     f011d3c5 <test_kheap_virt_addr+0xa75>
				if (correct)
				{ correct = 0; cprintf("Wrong kheap_virtual_address\n"); }
			}
		}
	}
	if (correct)	eval+=20 ;
f011d43c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011d440:	74 04                	je     f011d446 <test_kheap_virt_addr+0xaf6>
f011d442:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)

	correct = 1 ;
f011d446:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	//[DYNAMIC ALLOCATOR] test kheap_virtual_address each address [40%]
	{
		uint32 va, pa;
		for (va = KERNEL_HEAP_START; va < (uint32)sbrk(0); va++)
f011d44d:	c7 45 cc 00 00 00 f6 	movl   $0xf6000000,-0x34(%ebp)
f011d454:	e9 d1 00 00 00       	jmp    f011d52a <test_kheap_virt_addr+0xbda>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f011d459:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f011d45e:	83 ec 04             	sub    $0x4,%esp
f011d461:	8d 95 64 fe ff ff    	lea    -0x19c(%ebp),%edx
f011d467:	52                   	push   %edx
f011d468:	ff 75 cc             	pushl  -0x34(%ebp)
f011d46b:	50                   	push   %eax
f011d46c:	e8 9c af fe ff       	call   f010840d <get_page_table>
f011d471:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f011d474:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011d47a:	85 c0                	test   %eax,%eax
f011d47c:	75 1e                	jne    f011d49c <test_kheap_virt_addr+0xb4c>
			{ correct = 0; panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed\n"); }
f011d47e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011d485:	83 ec 04             	sub    $0x4,%esp
f011d488:	68 78 c8 12 f0       	push   $0xf012c878
f011d48d:	68 cb 06 00 00       	push   $0x6cb
f011d492:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011d497:	e8 7e 2e fe ff       	call   f010031a <_panic>
			pa = (ptr_table[PTX(va)] & 0xFFFFF000) + (va & 0xFFF);
f011d49c:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011d4a2:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011d4a5:	c1 ea 0c             	shr    $0xc,%edx
f011d4a8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011d4ae:	c1 e2 02             	shl    $0x2,%edx
f011d4b1:	01 d0                	add    %edx,%eax
f011d4b3:	8b 00                	mov    (%eax),%eax
f011d4b5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011d4ba:	89 c2                	mov    %eax,%edx
f011d4bc:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011d4bf:	25 ff 0f 00 00       	and    $0xfff,%eax
f011d4c4:	01 d0                	add    %edx,%eax
f011d4c6:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
			uint32 retrievedVA = kheap_virtual_address(pa);
f011d4cc:	83 ec 0c             	sub    $0xc,%esp
f011d4cf:	ff b5 64 ff ff ff    	pushl  -0x9c(%ebp)
f011d4d5:	e8 10 b6 fe ff       	call   f0108aea <kheap_virtual_address>
f011d4da:	83 c4 10             	add    $0x10,%esp
f011d4dd:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
			if (retrievedVA != va)
f011d4e3:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d4e9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011d4ec:	74 39                	je     f011d527 <test_kheap_virt_addr+0xbd7>
			{
				if (correct)
f011d4ee:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011d4f2:	74 33                	je     f011d527 <test_kheap_virt_addr+0xbd7>
				{
					cprintf("\nPA = %x, retrievedVA = %x expectedVA = %x\n", pa, retrievedVA, va);
f011d4f4:	ff 75 cc             	pushl  -0x34(%ebp)
f011d4f7:	ff b5 60 ff ff ff    	pushl  -0xa0(%ebp)
f011d4fd:	ff b5 64 ff ff ff    	pushl  -0x9c(%ebp)
f011d503:	68 9c c9 12 f0       	push   $0xf012c99c
f011d508:	e8 5f 3a fe ff       	call   f0100f6c <cprintf>
f011d50d:	83 c4 10             	add    $0x10,%esp
					correct = 0; cprintf("Wrong kheap_virtual_address\n");
f011d510:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011d517:	83 ec 0c             	sub    $0xc,%esp
f011d51a:	68 7f c9 12 f0       	push   $0xf012c97f
f011d51f:	e8 48 3a fe ff       	call   f0100f6c <cprintf>
f011d524:	83 c4 10             	add    $0x10,%esp

	correct = 1 ;
	//[DYNAMIC ALLOCATOR] test kheap_virtual_address each address [40%]
	{
		uint32 va, pa;
		for (va = KERNEL_HEAP_START; va < (uint32)sbrk(0); va++)
f011d527:	ff 45 cc             	incl   -0x34(%ebp)
f011d52a:	83 ec 0c             	sub    $0xc,%esp
f011d52d:	6a 00                	push   $0x0
f011d52f:	e8 78 b5 fe ff       	call   f0108aac <sbrk>
f011d534:	83 c4 10             	add    $0x10,%esp
f011d537:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011d53a:	0f 87 19 ff ff ff    	ja     f011d459 <test_kheap_virt_addr+0xb09>
					correct = 0; cprintf("Wrong kheap_virtual_address\n");
				}
			}
		}
	}
	if (correct)	eval+=40 ;
f011d540:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011d544:	74 04                	je     f011d54a <test_kheap_virt_addr+0xbfa>
f011d546:	83 45 e4 28          	addl   $0x28,-0x1c(%ebp)

	correct = 1 ;
f011d54a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f011d551:	c7 45 c8 00 00 10 00 	movl   $0x100000,-0x38(%ebp)
f011d558:	eb 5a                	jmp    f011d5b4 <test_kheap_virt_addr+0xc64>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f011d55a:	83 ec 0c             	sub    $0xc,%esp
f011d55d:	ff 75 c8             	pushl  -0x38(%ebp)
f011d560:	e8 85 b5 fe ff       	call   f0108aea <kheap_virtual_address>
f011d565:	83 c4 10             	add    $0x10,%esp
f011d568:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
			if (retrievedVA != 0)
f011d56e:	83 bd 5c ff ff ff 00 	cmpl   $0x0,-0xa4(%ebp)
f011d575:	74 36                	je     f011d5ad <test_kheap_virt_addr+0xc5d>
			{
				if (correct)
f011d577:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011d57b:	74 30                	je     f011d5ad <test_kheap_virt_addr+0xc5d>
				{
					cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f011d57d:	83 ec 04             	sub    $0x4,%esp
f011d580:	ff b5 5c ff ff ff    	pushl  -0xa4(%ebp)
f011d586:	ff 75 c8             	pushl  -0x38(%ebp)
f011d589:	68 c8 c9 12 f0       	push   $0xf012c9c8
f011d58e:	e8 d9 39 fe ff       	call   f0100f6c <cprintf>
f011d593:	83 c4 10             	add    $0x10,%esp
					correct = 0; cprintf("Wrong kheap_virtual_address\n");
f011d596:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f011d59d:	83 ec 0c             	sub    $0xc,%esp
f011d5a0:	68 7f c9 12 f0       	push   $0xf012c97f
f011d5a5:	e8 c2 39 fe ff       	call   f0100f6c <cprintf>
f011d5aa:	83 c4 10             	add    $0x10,%esp

	correct = 1 ;
	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f011d5ad:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f011d5b4:	b8 a8 79 57 00       	mov    $0x5779a8,%eax
f011d5b9:	39 45 c8             	cmp    %eax,-0x38(%ebp)
f011d5bc:	72 9c                	jb     f011d55a <test_kheap_virt_addr+0xc0a>
					correct = 0; cprintf("Wrong kheap_virtual_address\n");
				}
			}
		}
	}
	if (correct)	eval+=20 ;
f011d5be:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011d5c2:	74 04                	je     f011d5c8 <test_kheap_virt_addr+0xc78>
f011d5c4:	83 45 e4 14          	addl   $0x14,-0x1c(%ebp)

	cprintf("\ntest kheap_virtual_address completed. Eval = %d%\n", eval);
f011d5c8:	83 ec 08             	sub    $0x8,%esp
f011d5cb:	ff 75 e4             	pushl  -0x1c(%ebp)
f011d5ce:	68 e4 c9 12 f0       	push   $0xf012c9e4
f011d5d3:	e8 94 39 fe ff       	call   f0100f6c <cprintf>
f011d5d8:	83 c4 10             	add    $0x10,%esp

	return 1;
f011d5db:	b8 01 00 00 00       	mov    $0x1,%eax
f011d5e0:	89 f4                	mov    %esi,%esp

}
f011d5e2:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011d5e5:	5b                   	pop    %ebx
f011d5e6:	5e                   	pop    %esi
f011d5e7:	5f                   	pop    %edi
f011d5e8:	5d                   	pop    %ebp
f011d5e9:	c3                   	ret    

f011d5ea <test_ksbrk>:


// 2023
int test_ksbrk()
{
f011d5ea:	55                   	push   %ebp
f011d5eb:	89 e5                	mov    %esp,%ebp
f011d5ed:	57                   	push   %edi
f011d5ee:	56                   	push   %esi
f011d5ef:	53                   	push   %ebx
f011d5f0:	81 ec 1c 01 00 00    	sub    $0x11c,%esp

	// malloc some spaces
	int i, freeFrames, freeDiskFrames;
	char *ptr;
	// int lastIndices[20] = {0};
	int sums[20] = {0};
f011d5f6:	8d 95 7c ff ff ff    	lea    -0x84(%ebp),%edx
f011d5fc:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d601:	b8 00 00 00 00       	mov    $0x0,%eax
f011d606:	89 d7                	mov    %edx,%edi
f011d608:	f3 ab                	rep stos %eax,%es:(%edi)
	void *ptr_allocations[20] = {0};
f011d60a:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f011d610:	b9 14 00 00 00       	mov    $0x14,%ecx
f011d615:	b8 00 00 00 00       	mov    $0x0,%eax
f011d61a:	89 d7                	mov    %edx,%edi
f011d61c:	f3 ab                	rep stos %eax,%es:(%edi)

	// uint32 inputIncrementValues[] = {0, kilo, 2*kilo, -512, -2 * kilo, -2* kilo, 128, kilo};
	uint32 expectedVAs[] = {
f011d61e:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f011d624:	bb 80 cf 12 f0       	mov    $0xf012cf80,%ebx
f011d629:	ba 0a 00 00 00       	mov    $0xa,%edx
f011d62e:	89 c7                	mov    %eax,%edi
f011d630:	89 de                	mov    %ebx,%esi
f011d632:	89 d1                	mov    %edx,%ecx
f011d634:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
			KERNEL_HEAP_START + 0x1E00, // 128
			KERNEL_HEAP_START + 0x2000, // kilo
			KERNEL_HEAP_START + 0x0C00, // -9*kilo
			KERNEL_HEAP_START + 0x0C00, // +6*kilo
	};
	uint32 expectedSbrks[] = {
f011d636:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f011d63c:	bb c0 cf 12 f0       	mov    $0xf012cfc0,%ebx
f011d641:	ba 0a 00 00 00       	mov    $0xa,%edx
f011d646:	89 c7                	mov    %eax,%edi
f011d648:	89 de                	mov    %ebx,%esi
f011d64a:	89 d1                	mov    %edx,%ecx
f011d64c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
			KERNEL_HEAP_START + 0x3000, // kilo
			KERNEL_HEAP_START + 0x0C00, // -9*kilo
			KERNEL_HEAP_START + 0x4000, // +10*kilo
	};
	uint32 oldBrk, newBrk;
	int eval = 0;
f011d64e:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	bool correct = 1;
f011d655:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	cprintf("STEP A: checking increment with ZERO\n");
f011d65c:	83 ec 0c             	sub    $0xc,%esp
f011d65f:	68 18 ca 12 f0       	push   $0xf012ca18
f011d664:	e8 03 39 fe ff       	call   f0100f6c <cprintf>
f011d669:	83 c4 10             	add    $0x10,%esp
	{
		freeFrames = (int)sys_calculate_free_frames();
f011d66c:	e8 98 03 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d671:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011d674:	e8 c7 71 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d679:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = sbrk(0);
f011d67c:	83 ec 0c             	sub    $0xc,%esp
f011d67f:	6a 00                	push   $0x0
f011d681:	e8 26 b4 fe ff       	call   f0108aac <sbrk>
f011d686:	83 c4 10             	add    $0x10,%esp
f011d689:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011d68f:	e8 ac 71 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d694:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d697:	74 17                	je     f011d6b0 <test_ksbrk+0xc6>
		{
			correct = 0;
f011d699:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d6a0:	83 ec 0c             	sub    $0xc,%esp
f011d6a3:	68 40 ca 12 f0       	push   $0xf012ca40
f011d6a8:	e8 bf 38 fe ff       	call   f0100f6c <cprintf>
f011d6ad:	83 c4 10             	add    $0x10,%esp
		}
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0)
f011d6b0:	e8 54 03 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d6b5:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011d6b8:	74 17                	je     f011d6d1 <test_ksbrk+0xe7>
		{
			correct = 0;
f011d6ba:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011d6c1:	83 ec 0c             	sub    $0xc,%esp
f011d6c4:	68 a8 ca 12 f0       	push   $0xf012caa8
f011d6c9:	e8 9e 38 fe ff       	call   f0100f6c <cprintf>
f011d6ce:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[0] != expectedVAs[0])
f011d6d1:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d6d7:	89 c2                	mov    %eax,%edx
f011d6d9:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011d6df:	39 c2                	cmp    %eax,%edx
f011d6e1:	74 25                	je     f011d708 <test_ksbrk+0x11e>
		{
			correct = 0;
f011d6e3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[0], ptr_allocations[0]);
f011d6ea:	8b 95 2c ff ff ff    	mov    -0xd4(%ebp),%edx
f011d6f0:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011d6f6:	83 ec 04             	sub    $0x4,%esp
f011d6f9:	52                   	push   %edx
f011d6fa:	50                   	push   %eax
f011d6fb:	68 e8 ca 12 f0       	push   $0xf012cae8
f011d700:	e8 67 38 fe ff       	call   f0100f6c <cprintf>
f011d705:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011d708:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011d70c:	74 04                	je     f011d712 <test_ksbrk+0x128>
			eval += 5;
f011d70e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	}
	cprintf("STEP B: checking increment with +ve value\n");
f011d712:	83 ec 0c             	sub    $0xc,%esp
f011d715:	68 18 cb 12 f0       	push   $0xf012cb18
f011d71a:	e8 4d 38 fe ff       	call   f0100f6c <cprintf>
f011d71f:	83 c4 10             	add    $0x10,%esp
	{ // +1 KB
		freeFrames = (int)sys_calculate_free_frames();
f011d722:	e8 e2 02 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d727:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011d72a:	e8 11 71 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d72f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011d732:	83 ec 0c             	sub    $0xc,%esp
f011d735:	6a 00                	push   $0x0
f011d737:	e8 70 b3 fe ff       	call   f0108aac <sbrk>
f011d73c:	83 c4 10             	add    $0x10,%esp
f011d73f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[1] = sbrk(kilo);
f011d742:	83 ec 0c             	sub    $0xc,%esp
f011d745:	68 00 04 00 00       	push   $0x400
f011d74a:	e8 5d b3 fe ff       	call   f0108aac <sbrk>
f011d74f:	83 c4 10             	add    $0x10,%esp
f011d752:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
		newBrk = (uint32)sbrk(0);
f011d758:	83 ec 0c             	sub    $0xc,%esp
f011d75b:	6a 00                	push   $0x0
f011d75d:	e8 4a b3 fe ff       	call   f0108aac <sbrk>
f011d762:	83 c4 10             	add    $0x10,%esp
f011d765:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011d768:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011d76f:	e8 cc 70 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d774:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d777:	74 17                	je     f011d790 <test_ksbrk+0x1a6>
		{
			correct = 0;
f011d779:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d780:	83 ec 0c             	sub    $0xc,%esp
f011d783:	68 40 ca 12 f0       	push   $0xf012ca40
f011d788:	e8 df 37 fe ff       	call   f0100f6c <cprintf>
f011d78d:	83 c4 10             	add    $0x10,%esp
		}
		// cprintf("####### %x - %x\n", freeFrames - (int)sys_calculate_free_frames(), -1 * ((ROUNDUP(oldBrk, PAGE_SIZE) - newBrk) / PAGE_SIZE));
		if ((freeFrames - (int)sys_calculate_free_frames()) != 1)
f011d790:	e8 74 02 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d795:	89 c2                	mov    %eax,%edx
f011d797:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011d79a:	29 d0                	sub    %edx,%eax
f011d79c:	83 f8 01             	cmp    $0x1,%eax
f011d79f:	74 17                	je     f011d7b8 <test_ksbrk+0x1ce>
		{
			correct = 0;
f011d7a1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011d7a8:	83 ec 0c             	sub    $0xc,%esp
f011d7ab:	68 a8 ca 12 f0       	push   $0xf012caa8
f011d7b0:	e8 b7 37 fe ff       	call   f0100f6c <cprintf>
f011d7b5:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[1] != expectedVAs[1])
f011d7b8:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d7be:	89 c2                	mov    %eax,%edx
f011d7c0:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d7c6:	39 c2                	cmp    %eax,%edx
f011d7c8:	74 25                	je     f011d7ef <test_ksbrk+0x205>
		{
			correct = 0;
f011d7ca:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[1], ptr_allocations[1]);
f011d7d1:	8b 95 30 ff ff ff    	mov    -0xd0(%ebp),%edx
f011d7d7:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011d7dd:	83 ec 04             	sub    $0x4,%esp
f011d7e0:	52                   	push   %edx
f011d7e1:	50                   	push   %eax
f011d7e2:	68 e8 ca 12 f0       	push   $0xf012cae8
f011d7e7:	e8 80 37 fe ff       	call   f0100f6c <cprintf>
f011d7ec:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[1])
f011d7ef:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d7f5:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011d7f8:	74 21                	je     f011d81b <test_ksbrk+0x231>
		{
			correct = 0;
f011d7fa:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[1]);
f011d801:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011d807:	83 ec 04             	sub    $0x4,%esp
f011d80a:	50                   	push   %eax
f011d80b:	ff 75 d0             	pushl  -0x30(%ebp)
f011d80e:	68 44 cb 12 f0       	push   $0xf012cb44
f011d813:	e8 54 37 fe ff       	call   f0100f6c <cprintf>
f011d818:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011d81b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011d81f:	74 04                	je     f011d825 <test_ksbrk+0x23b>
			eval += 5;
f011d821:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	}
	{ // +2 KB
		freeFrames = (int)sys_calculate_free_frames();
f011d825:	e8 df 01 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d82a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011d82d:	e8 0e 70 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d832:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011d835:	83 ec 0c             	sub    $0xc,%esp
f011d838:	6a 00                	push   $0x0
f011d83a:	e8 6d b2 fe ff       	call   f0108aac <sbrk>
f011d83f:	83 c4 10             	add    $0x10,%esp
f011d842:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[2] = sbrk(2 * kilo);
f011d845:	83 ec 0c             	sub    $0xc,%esp
f011d848:	68 00 08 00 00       	push   $0x800
f011d84d:	e8 5a b2 fe ff       	call   f0108aac <sbrk>
f011d852:	83 c4 10             	add    $0x10,%esp
f011d855:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
		newBrk = (uint32)sbrk(0);
f011d85b:	83 ec 0c             	sub    $0xc,%esp
f011d85e:	6a 00                	push   $0x0
f011d860:	e8 47 b2 fe ff       	call   f0108aac <sbrk>
f011d865:	83 c4 10             	add    $0x10,%esp
f011d868:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011d86b:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011d872:	e8 c9 6f fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d877:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d87a:	74 17                	je     f011d893 <test_ksbrk+0x2a9>
		{
			correct = 0;
f011d87c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d883:	83 ec 0c             	sub    $0xc,%esp
f011d886:	68 40 ca 12 f0       	push   $0xf012ca40
f011d88b:	e8 dc 36 fe ff       	call   f0100f6c <cprintf>
f011d890:	83 c4 10             	add    $0x10,%esp
		}
		int x = (freeFrames - (int)sys_calculate_free_frames());
f011d893:	e8 71 01 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d898:	89 c2                	mov    %eax,%edx
f011d89a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011d89d:	29 d0                	sub    %edx,%eax
f011d89f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		if ((freeFrames - (int)sys_calculate_free_frames()) != 1)
f011d8a2:	e8 62 01 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d8a7:	89 c2                	mov    %eax,%edx
f011d8a9:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011d8ac:	29 d0                	sub    %edx,%eax
f011d8ae:	83 f8 01             	cmp    $0x1,%eax
f011d8b1:	74 17                	je     f011d8ca <test_ksbrk+0x2e0>
		{
			correct = 0;
f011d8b3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011d8ba:	83 ec 0c             	sub    $0xc,%esp
f011d8bd:	68 a8 ca 12 f0       	push   $0xf012caa8
f011d8c2:	e8 a5 36 fe ff       	call   f0100f6c <cprintf>
f011d8c7:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[2] != expectedVAs[2])
f011d8ca:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011d8d0:	89 c2                	mov    %eax,%edx
f011d8d2:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011d8d8:	39 c2                	cmp    %eax,%edx
f011d8da:	74 25                	je     f011d901 <test_ksbrk+0x317>
		{
			correct = 0;
f011d8dc:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[2], ptr_allocations[2]);
f011d8e3:	8b 95 34 ff ff ff    	mov    -0xcc(%ebp),%edx
f011d8e9:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011d8ef:	83 ec 04             	sub    $0x4,%esp
f011d8f2:	52                   	push   %edx
f011d8f3:	50                   	push   %eax
f011d8f4:	68 e8 ca 12 f0       	push   $0xf012cae8
f011d8f9:	e8 6e 36 fe ff       	call   f0100f6c <cprintf>
f011d8fe:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[2])
f011d901:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011d907:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011d90a:	74 21                	je     f011d92d <test_ksbrk+0x343>
		{
			correct = 0;
f011d90c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[2]);
f011d913:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011d919:	83 ec 04             	sub    $0x4,%esp
f011d91c:	50                   	push   %eax
f011d91d:	ff 75 d0             	pushl  -0x30(%ebp)
f011d920:	68 44 cb 12 f0       	push   $0xf012cb44
f011d925:	e8 42 36 fe ff       	call   f0100f6c <cprintf>
f011d92a:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011d92d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011d931:	74 04                	je     f011d937 <test_ksbrk+0x34d>
			eval += 5;
f011d933:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	}
	cprintf("STEP C: checking increment with -ve value [No Frames to be Deallocated]\n");
f011d937:	83 ec 0c             	sub    $0xc,%esp
f011d93a:	68 70 cb 12 f0       	push   $0xf012cb70
f011d93f:	e8 28 36 fe ff       	call   f0100f6c <cprintf>
f011d944:	83 c4 10             	add    $0x10,%esp
	{ // -512 Bytes
		freeFrames = (int)sys_calculate_free_frames();
f011d947:	e8 bd 00 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d94c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011d94f:	e8 ec 6e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d954:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011d957:	83 ec 0c             	sub    $0xc,%esp
f011d95a:	6a 00                	push   $0x0
f011d95c:	e8 4b b1 fe ff       	call   f0108aac <sbrk>
f011d961:	83 c4 10             	add    $0x10,%esp
f011d964:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[3] = sbrk(-512);
f011d967:	83 ec 0c             	sub    $0xc,%esp
f011d96a:	68 00 fe ff ff       	push   $0xfffffe00
f011d96f:	e8 38 b1 fe ff       	call   f0108aac <sbrk>
f011d974:	83 c4 10             	add    $0x10,%esp
f011d977:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
		newBrk = (uint32)sbrk(0);
f011d97d:	83 ec 0c             	sub    $0xc,%esp
f011d980:	6a 00                	push   $0x0
f011d982:	e8 25 b1 fe ff       	call   f0108aac <sbrk>
f011d987:	83 c4 10             	add    $0x10,%esp
f011d98a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011d98d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011d994:	e8 a7 6e fe ff       	call   f0104840 <pf_calculate_free_frames>
f011d999:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d99c:	74 17                	je     f011d9b5 <test_ksbrk+0x3cb>
		{
			correct = 0;
f011d99e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d9a5:	83 ec 0c             	sub    $0xc,%esp
f011d9a8:	68 40 ca 12 f0       	push   $0xf012ca40
f011d9ad:	e8 ba 35 fe ff       	call   f0100f6c <cprintf>
f011d9b2:	83 c4 10             	add    $0x10,%esp
		}
		// cprintf("####### %x - %x\n", freeFrames - (int)sys_calculate_free_frames(), -1 * ((ROUNDUP(oldBrk, PAGE_SIZE) - newBrk) / PAGE_SIZE));
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0)
f011d9b5:	e8 4f 00 ff ff       	call   f010da09 <sys_calculate_free_frames>
f011d9ba:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011d9bd:	74 17                	je     f011d9d6 <test_ksbrk+0x3ec>
		{
			correct = 0;
f011d9bf:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011d9c6:	83 ec 0c             	sub    $0xc,%esp
f011d9c9:	68 a8 ca 12 f0       	push   $0xf012caa8
f011d9ce:	e8 99 35 fe ff       	call   f0100f6c <cprintf>
f011d9d3:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[3] != expectedVAs[3])
f011d9d6:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d9dc:	89 c2                	mov    %eax,%edx
f011d9de:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d9e4:	39 c2                	cmp    %eax,%edx
f011d9e6:	74 25                	je     f011da0d <test_ksbrk+0x423>
		{
			correct = 0;
f011d9e8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[3], ptr_allocations[3]);
f011d9ef:	8b 95 38 ff ff ff    	mov    -0xc8(%ebp),%edx
f011d9f5:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011d9fb:	83 ec 04             	sub    $0x4,%esp
f011d9fe:	52                   	push   %edx
f011d9ff:	50                   	push   %eax
f011da00:	68 e8 ca 12 f0       	push   $0xf012cae8
f011da05:	e8 62 35 fe ff       	call   f0100f6c <cprintf>
f011da0a:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[3])
f011da0d:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011da13:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011da16:	74 21                	je     f011da39 <test_ksbrk+0x44f>
		{
			correct = 0;
f011da18:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[3]);
f011da1f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011da25:	83 ec 04             	sub    $0x4,%esp
f011da28:	50                   	push   %eax
f011da29:	ff 75 d0             	pushl  -0x30(%ebp)
f011da2c:	68 44 cb 12 f0       	push   $0xf012cb44
f011da31:	e8 36 35 fe ff       	call   f0100f6c <cprintf>
f011da36:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011da39:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011da3d:	74 04                	je     f011da43 <test_ksbrk+0x459>
			eval += 10;
f011da3f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	{ // -2 KB
		freeFrames = (int)sys_calculate_free_frames();
f011da43:	e8 c1 ff fe ff       	call   f010da09 <sys_calculate_free_frames>
f011da48:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011da4b:	e8 f0 6d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011da50:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011da53:	83 ec 0c             	sub    $0xc,%esp
f011da56:	6a 00                	push   $0x0
f011da58:	e8 4f b0 fe ff       	call   f0108aac <sbrk>
f011da5d:	83 c4 10             	add    $0x10,%esp
f011da60:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[4] = sbrk(-2 * kilo);
f011da63:	83 ec 0c             	sub    $0xc,%esp
f011da66:	68 00 f8 ff ff       	push   $0xfffff800
f011da6b:	e8 3c b0 fe ff       	call   f0108aac <sbrk>
f011da70:	83 c4 10             	add    $0x10,%esp
f011da73:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
		newBrk = (uint32)sbrk(0);
f011da79:	83 ec 0c             	sub    $0xc,%esp
f011da7c:	6a 00                	push   $0x0
f011da7e:	e8 29 b0 fe ff       	call   f0108aac <sbrk>
f011da83:	83 c4 10             	add    $0x10,%esp
f011da86:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011da89:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011da90:	e8 ab 6d fe ff       	call   f0104840 <pf_calculate_free_frames>
f011da95:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011da98:	74 17                	je     f011dab1 <test_ksbrk+0x4c7>
		{
			correct = 0;
f011da9a:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011daa1:	83 ec 0c             	sub    $0xc,%esp
f011daa4:	68 40 ca 12 f0       	push   $0xf012ca40
f011daa9:	e8 be 34 fe ff       	call   f0100f6c <cprintf>
f011daae:	83 c4 10             	add    $0x10,%esp
		}
		// cprintf("####### %x - %x\n", freeFrames - (int)sys_calculate_free_frames(), -1 * ((ROUNDUP(oldBrk, PAGE_SIZE) - newBrk) / PAGE_SIZE));
		if ((freeFrames - (int)sys_calculate_free_frames()) != 0)
f011dab1:	e8 53 ff fe ff       	call   f010da09 <sys_calculate_free_frames>
f011dab6:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011dab9:	74 17                	je     f011dad2 <test_ksbrk+0x4e8>
		{
			correct = 0;
f011dabb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011dac2:	83 ec 0c             	sub    $0xc,%esp
f011dac5:	68 a8 ca 12 f0       	push   $0xf012caa8
f011daca:	e8 9d 34 fe ff       	call   f0100f6c <cprintf>
f011dacf:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[4] != expectedVAs[4])
f011dad2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011dad8:	89 c2                	mov    %eax,%edx
f011dada:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011dae0:	39 c2                	cmp    %eax,%edx
f011dae2:	74 25                	je     f011db09 <test_ksbrk+0x51f>
		{
			correct = 0;
f011dae4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[4], ptr_allocations[4]);
f011daeb:	8b 95 3c ff ff ff    	mov    -0xc4(%ebp),%edx
f011daf1:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011daf7:	83 ec 04             	sub    $0x4,%esp
f011dafa:	52                   	push   %edx
f011dafb:	50                   	push   %eax
f011dafc:	68 e8 ca 12 f0       	push   $0xf012cae8
f011db01:	e8 66 34 fe ff       	call   f0100f6c <cprintf>
f011db06:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[4])
f011db09:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011db0f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011db12:	74 21                	je     f011db35 <test_ksbrk+0x54b>
		{
			correct = 0;
f011db14:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[4]);
f011db1b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011db21:	83 ec 04             	sub    $0x4,%esp
f011db24:	50                   	push   %eax
f011db25:	ff 75 d0             	pushl  -0x30(%ebp)
f011db28:	68 44 cb 12 f0       	push   $0xf012cb44
f011db2d:	e8 3a 34 fe ff       	call   f0100f6c <cprintf>
f011db32:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011db35:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011db39:	74 04                	je     f011db3f <test_ksbrk+0x555>
			eval += 10;
f011db3b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	cprintf("STEP D: checking increment with -ve value [ONE Frame should be Deallocated]\n");
f011db3f:	83 ec 0c             	sub    $0xc,%esp
f011db42:	68 bc cb 12 f0       	push   $0xf012cbbc
f011db47:	e8 20 34 fe ff       	call   f0100f6c <cprintf>
f011db4c:	83 c4 10             	add    $0x10,%esp
	{ // -2 KB
		freeFrames = (int)sys_calculate_free_frames();
f011db4f:	e8 b5 fe fe ff       	call   f010da09 <sys_calculate_free_frames>
f011db54:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011db57:	e8 e4 6c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011db5c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011db5f:	83 ec 0c             	sub    $0xc,%esp
f011db62:	6a 00                	push   $0x0
f011db64:	e8 43 af fe ff       	call   f0108aac <sbrk>
f011db69:	83 c4 10             	add    $0x10,%esp
f011db6c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[5] = sbrk(-2 * kilo);
f011db6f:	83 ec 0c             	sub    $0xc,%esp
f011db72:	68 00 f8 ff ff       	push   $0xfffff800
f011db77:	e8 30 af fe ff       	call   f0108aac <sbrk>
f011db7c:	83 c4 10             	add    $0x10,%esp
f011db7f:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
		newBrk = (uint32)sbrk(0);
f011db85:	83 ec 0c             	sub    $0xc,%esp
f011db88:	6a 00                	push   $0x0
f011db8a:	e8 1d af fe ff       	call   f0108aac <sbrk>
f011db8f:	83 c4 10             	add    $0x10,%esp
f011db92:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011db95:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)(int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011db9c:	e8 9f 6c fe ff       	call   f0104840 <pf_calculate_free_frames>
f011dba1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dba4:	74 17                	je     f011dbbd <test_ksbrk+0x5d3>
		{
			correct = 0;
f011dba6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dbad:	83 ec 0c             	sub    $0xc,%esp
f011dbb0:	68 40 ca 12 f0       	push   $0xf012ca40
f011dbb5:	e8 b2 33 fe ff       	call   f0100f6c <cprintf>
f011dbba:	83 c4 10             	add    $0x10,%esp
		}
		// cprintf("####### %x - %x\n", freeFrames - (int)sys_calculate_free_frames(), -1 * ((ROUNDUP(oldBrk, PAGE_SIZE) - newBrk) / PAGE_SIZE));
		if (((int)(int)sys_calculate_free_frames() - freeFrames) != 1)
f011dbbd:	e8 47 fe fe ff       	call   f010da09 <sys_calculate_free_frames>
f011dbc2:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011dbc5:	83 f8 01             	cmp    $0x1,%eax
f011dbc8:	74 17                	je     f011dbe1 <test_ksbrk+0x5f7>
		{
			correct = 0;
f011dbca:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011dbd1:	83 ec 0c             	sub    $0xc,%esp
f011dbd4:	68 a8 ca 12 f0       	push   $0xf012caa8
f011dbd9:	e8 8e 33 fe ff       	call   f0100f6c <cprintf>
f011dbde:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[5] != expectedVAs[5])
f011dbe1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011dbe7:	89 c2                	mov    %eax,%edx
f011dbe9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011dbef:	39 c2                	cmp    %eax,%edx
f011dbf1:	74 25                	je     f011dc18 <test_ksbrk+0x62e>
		{
			correct = 0;
f011dbf3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[5], ptr_allocations[5]);
f011dbfa:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f011dc00:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011dc06:	83 ec 04             	sub    $0x4,%esp
f011dc09:	52                   	push   %edx
f011dc0a:	50                   	push   %eax
f011dc0b:	68 e8 ca 12 f0       	push   $0xf012cae8
f011dc10:	e8 57 33 fe ff       	call   f0100f6c <cprintf>
f011dc15:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[5])
f011dc18:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011dc1e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011dc21:	74 21                	je     f011dc44 <test_ksbrk+0x65a>
		{
			correct = 0;
f011dc23:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[5]);
f011dc2a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011dc30:	83 ec 04             	sub    $0x4,%esp
f011dc33:	50                   	push   %eax
f011dc34:	ff 75 d0             	pushl  -0x30(%ebp)
f011dc37:	68 44 cb 12 f0       	push   $0xf012cb44
f011dc3c:	e8 2b 33 fe ff       	call   f0100f6c <cprintf>
f011dc41:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011dc44:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011dc48:	74 04                	je     f011dc4e <test_ksbrk+0x664>
			eval += 15;
f011dc4a:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	cprintf("STEP E: checking increment with +ve value [No Frames to be Allocated]\n");
f011dc4e:	83 ec 0c             	sub    $0xc,%esp
f011dc51:	68 0c cc 12 f0       	push   $0xf012cc0c
f011dc56:	e8 11 33 fe ff       	call   f0100f6c <cprintf>
f011dc5b:	83 c4 10             	add    $0x10,%esp
	{ // 128 Bytes
		freeFrames = (int)(int)sys_calculate_free_frames();
f011dc5e:	e8 a6 fd fe ff       	call   f010da09 <sys_calculate_free_frames>
f011dc63:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)(int)pf_calculate_free_frames();
f011dc66:	e8 d5 6b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011dc6b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011dc6e:	83 ec 0c             	sub    $0xc,%esp
f011dc71:	6a 00                	push   $0x0
f011dc73:	e8 34 ae fe ff       	call   f0108aac <sbrk>
f011dc78:	83 c4 10             	add    $0x10,%esp
f011dc7b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[6] = sbrk(128);
f011dc7e:	83 ec 0c             	sub    $0xc,%esp
f011dc81:	68 80 00 00 00       	push   $0x80
f011dc86:	e8 21 ae fe ff       	call   f0108aac <sbrk>
f011dc8b:	83 c4 10             	add    $0x10,%esp
f011dc8e:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
		newBrk = (uint32)sbrk(0);
f011dc94:	83 ec 0c             	sub    $0xc,%esp
f011dc97:	6a 00                	push   $0x0
f011dc99:	e8 0e ae fe ff       	call   f0108aac <sbrk>
f011dc9e:	83 c4 10             	add    $0x10,%esp
f011dca1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011dca4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011dcab:	e8 90 6b fe ff       	call   f0104840 <pf_calculate_free_frames>
f011dcb0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dcb3:	74 17                	je     f011dccc <test_ksbrk+0x6e2>
		{
			correct = 0;
f011dcb5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dcbc:	83 ec 0c             	sub    $0xc,%esp
f011dcbf:	68 40 ca 12 f0       	push   $0xf012ca40
f011dcc4:	e8 a3 32 fe ff       	call   f0100f6c <cprintf>
f011dcc9:	83 c4 10             	add    $0x10,%esp
		}
		if (((int)(int)sys_calculate_free_frames() - freeFrames) != 0)
f011dccc:	e8 38 fd fe ff       	call   f010da09 <sys_calculate_free_frames>
f011dcd1:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011dcd4:	74 17                	je     f011dced <test_ksbrk+0x703>
		{
			correct = 0;
f011dcd6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong allocation: pages are not loaded successfully into memory");
f011dcdd:	83 ec 0c             	sub    $0xc,%esp
f011dce0:	68 a8 ca 12 f0       	push   $0xf012caa8
f011dce5:	e8 82 32 fe ff       	call   f0100f6c <cprintf>
f011dcea:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[6] != expectedVAs[6])
f011dced:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011dcf3:	89 c2                	mov    %eax,%edx
f011dcf5:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011dcfb:	39 c2                	cmp    %eax,%edx
f011dcfd:	74 25                	je     f011dd24 <test_ksbrk+0x73a>
		{
			correct = 0;
f011dcff:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[6], ptr_allocations[6]);
f011dd06:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f011dd0c:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011dd12:	83 ec 04             	sub    $0x4,%esp
f011dd15:	52                   	push   %edx
f011dd16:	50                   	push   %eax
f011dd17:	68 e8 ca 12 f0       	push   $0xf012cae8
f011dd1c:	e8 4b 32 fe ff       	call   f0100f6c <cprintf>
f011dd21:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[6])
f011dd24:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011dd2a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011dd2d:	74 21                	je     f011dd50 <test_ksbrk+0x766>
		{
			correct = 0;
f011dd2f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[6]);
f011dd36:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011dd3c:	83 ec 04             	sub    $0x4,%esp
f011dd3f:	50                   	push   %eax
f011dd40:	ff 75 d0             	pushl  -0x30(%ebp)
f011dd43:	68 44 cb 12 f0       	push   $0xf012cb44
f011dd48:	e8 1f 32 fe ff       	call   f0100f6c <cprintf>
f011dd4d:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011dd50:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011dd54:	74 04                	je     f011dd5a <test_ksbrk+0x770>
			eval += 15;
f011dd56:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	cprintf("STEP F: checking increment with +ve value [ONE Frame should be Allocated]\n");
f011dd5a:	83 ec 0c             	sub    $0xc,%esp
f011dd5d:	68 54 cc 12 f0       	push   $0xf012cc54
f011dd62:	e8 05 32 fe ff       	call   f0100f6c <cprintf>
f011dd67:	83 c4 10             	add    $0x10,%esp
	{ // 1 KB
		freeFrames = (int)(int)sys_calculate_free_frames();
f011dd6a:	e8 9a fc fe ff       	call   f010da09 <sys_calculate_free_frames>
f011dd6f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011dd72:	e8 c9 6a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011dd77:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011dd7a:	83 ec 0c             	sub    $0xc,%esp
f011dd7d:	6a 00                	push   $0x0
f011dd7f:	e8 28 ad fe ff       	call   f0108aac <sbrk>
f011dd84:	83 c4 10             	add    $0x10,%esp
f011dd87:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[7] = sbrk(kilo);
f011dd8a:	83 ec 0c             	sub    $0xc,%esp
f011dd8d:	68 00 04 00 00       	push   $0x400
f011dd92:	e8 15 ad fe ff       	call   f0108aac <sbrk>
f011dd97:	83 c4 10             	add    $0x10,%esp
f011dd9a:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
		newBrk = (uint32)sbrk(0);
f011dda0:	83 ec 0c             	sub    $0xc,%esp
f011dda3:	6a 00                	push   $0x0
f011dda5:	e8 02 ad fe ff       	call   f0108aac <sbrk>
f011ddaa:	83 c4 10             	add    $0x10,%esp
f011ddad:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011ddb0:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011ddb7:	e8 84 6a fe ff       	call   f0104840 <pf_calculate_free_frames>
f011ddbc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ddbf:	74 17                	je     f011ddd8 <test_ksbrk+0x7ee>
		{
			correct = 0;
f011ddc1:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ddc8:	83 ec 0c             	sub    $0xc,%esp
f011ddcb:	68 40 ca 12 f0       	push   $0xf012ca40
f011ddd0:	e8 97 31 fe ff       	call   f0100f6c <cprintf>
f011ddd5:	83 c4 10             	add    $0x10,%esp
		}
		//cprintf("((int)(int)sys_calculate_free_frames() - freeFrames) = %d\n", ((int)(int)sys_calculate_free_frames() - freeFrames));
		if ((freeFrames - (int)(int)sys_calculate_free_frames()) != 1)
f011ddd8:	e8 2c fc fe ff       	call   f010da09 <sys_calculate_free_frames>
f011dddd:	89 c2                	mov    %eax,%edx
f011dddf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011dde2:	29 d0                	sub    %edx,%eax
f011dde4:	83 f8 01             	cmp    $0x1,%eax
f011dde7:	74 17                	je     f011de00 <test_ksbrk+0x816>
		{
			correct = 0;
f011dde9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("7 Wrong allocation: pages are not loaded successfully into memory");
f011ddf0:	83 ec 0c             	sub    $0xc,%esp
f011ddf3:	68 a0 cc 12 f0       	push   $0xf012cca0
f011ddf8:	e8 6f 31 fe ff       	call   f0100f6c <cprintf>
f011ddfd:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[7] != expectedVAs[7])
f011de00:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011de06:	89 c2                	mov    %eax,%edx
f011de08:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011de0e:	39 c2                	cmp    %eax,%edx
f011de10:	74 25                	je     f011de37 <test_ksbrk+0x84d>
		{
			correct = 0;
f011de12:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("7 Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[7], ptr_allocations[7]);
f011de19:	8b 95 48 ff ff ff    	mov    -0xb8(%ebp),%edx
f011de1f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011de25:	83 ec 04             	sub    $0x4,%esp
f011de28:	52                   	push   %edx
f011de29:	50                   	push   %eax
f011de2a:	68 e4 cc 12 f0       	push   $0xf012cce4
f011de2f:	e8 38 31 fe ff       	call   f0100f6c <cprintf>
f011de34:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[7])
f011de37:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011de3d:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011de40:	74 21                	je     f011de63 <test_ksbrk+0x879>
		{
			correct = 0;
f011de42:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("7 Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[7]);
f011de49:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011de4f:	83 ec 04             	sub    $0x4,%esp
f011de52:	50                   	push   %eax
f011de53:	ff 75 d0             	pushl  -0x30(%ebp)
f011de56:	68 18 cd 12 f0       	push   $0xf012cd18
f011de5b:	e8 0c 31 fe ff       	call   f0100f6c <cprintf>
f011de60:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011de63:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011de67:	74 04                	je     f011de6d <test_ksbrk+0x883>
			eval += 15;
f011de69:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	}
	cprintf("STEP G: checking increment with -ve value [TWO Frames should be Deallocated]\n");
f011de6d:	83 ec 0c             	sub    $0xc,%esp
f011de70:	68 48 cd 12 f0       	push   $0xf012cd48
f011de75:	e8 f2 30 fe ff       	call   f0100f6c <cprintf>
f011de7a:	83 c4 10             	add    $0x10,%esp
	{ // -9 KB
		freeFrames = (int)sys_calculate_free_frames();
f011de7d:	e8 87 fb fe ff       	call   f010da09 <sys_calculate_free_frames>
f011de82:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011de85:	e8 b6 69 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011de8a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011de8d:	83 ec 0c             	sub    $0xc,%esp
f011de90:	6a 00                	push   $0x0
f011de92:	e8 15 ac fe ff       	call   f0108aac <sbrk>
f011de97:	83 c4 10             	add    $0x10,%esp
f011de9a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[8] = sbrk(-9 * kilo);
f011de9d:	83 ec 0c             	sub    $0xc,%esp
f011dea0:	68 00 dc ff ff       	push   $0xffffdc00
f011dea5:	e8 02 ac fe ff       	call   f0108aac <sbrk>
f011deaa:	83 c4 10             	add    $0x10,%esp
f011dead:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
		newBrk = (uint32)sbrk(0);
f011deb3:	83 ec 0c             	sub    $0xc,%esp
f011deb6:	6a 00                	push   $0x0
f011deb8:	e8 ef ab fe ff       	call   f0108aac <sbrk>
f011debd:	83 c4 10             	add    $0x10,%esp
f011dec0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011dec3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)(int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011deca:	e8 71 69 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011decf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ded2:	74 17                	je     f011deeb <test_ksbrk+0x901>
		{
			correct = 0;
f011ded4:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dedb:	83 ec 0c             	sub    $0xc,%esp
f011dede:	68 40 ca 12 f0       	push   $0xf012ca40
f011dee3:	e8 84 30 fe ff       	call   f0100f6c <cprintf>
f011dee8:	83 c4 10             	add    $0x10,%esp
		}
		// cprintf("####### %x - %x\n", freeFrames - (int)sys_calculate_free_frames(), -1 * ((ROUNDUP(oldBrk, PAGE_SIZE) - newBrk) / PAGE_SIZE));
		if (((int)(int)sys_calculate_free_frames() - freeFrames) != 2)
f011deeb:	e8 19 fb fe ff       	call   f010da09 <sys_calculate_free_frames>
f011def0:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011def3:	83 f8 02             	cmp    $0x2,%eax
f011def6:	74 17                	je     f011df0f <test_ksbrk+0x925>
		{
			correct = 0;
f011def8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("8 Wrong allocation: pages are not loaded successfully into memory");
f011deff:	83 ec 0c             	sub    $0xc,%esp
f011df02:	68 98 cd 12 f0       	push   $0xf012cd98
f011df07:	e8 60 30 fe ff       	call   f0100f6c <cprintf>
f011df0c:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[8] != expectedVAs[8])
f011df0f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011df15:	89 c2                	mov    %eax,%edx
f011df17:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011df1d:	39 c2                	cmp    %eax,%edx
f011df1f:	74 25                	je     f011df46 <test_ksbrk+0x95c>
		{
			correct = 0;
f011df21:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("8 Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[5], ptr_allocations[5]);
f011df28:	8b 95 40 ff ff ff    	mov    -0xc0(%ebp),%edx
f011df2e:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011df34:	83 ec 04             	sub    $0x4,%esp
f011df37:	52                   	push   %edx
f011df38:	50                   	push   %eax
f011df39:	68 dc cd 12 f0       	push   $0xf012cddc
f011df3e:	e8 29 30 fe ff       	call   f0100f6c <cprintf>
f011df43:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[8])
f011df46:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011df4c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011df4f:	74 21                	je     f011df72 <test_ksbrk+0x988>
		{
			correct = 0;
f011df51:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("8 Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[5]);
f011df58:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011df5e:	83 ec 04             	sub    $0x4,%esp
f011df61:	50                   	push   %eax
f011df62:	ff 75 d0             	pushl  -0x30(%ebp)
f011df65:	68 10 ce 12 f0       	push   $0xf012ce10
f011df6a:	e8 fd 2f fe ff       	call   f0100f6c <cprintf>
f011df6f:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011df72:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011df76:	74 04                	je     f011df7c <test_ksbrk+0x992>
			eval += 10;
f011df78:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}
	cprintf("STEP H: checking increment with +ve value [THREE Frames should be Allocated]\n");
f011df7c:	83 ec 0c             	sub    $0xc,%esp
f011df7f:	68 40 ce 12 f0       	push   $0xf012ce40
f011df84:	e8 e3 2f fe ff       	call   f0100f6c <cprintf>
f011df89:	83 c4 10             	add    $0x10,%esp
	{ // 10 KB
		freeFrames = (int)(int)sys_calculate_free_frames();
f011df8c:	e8 78 fa fe ff       	call   f010da09 <sys_calculate_free_frames>
f011df91:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = (int)pf_calculate_free_frames();
f011df94:	e8 a7 68 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011df99:	89 45 d8             	mov    %eax,-0x28(%ebp)
		oldBrk = (uint32)sbrk(0);
f011df9c:	83 ec 0c             	sub    $0xc,%esp
f011df9f:	6a 00                	push   $0x0
f011dfa1:	e8 06 ab fe ff       	call   f0108aac <sbrk>
f011dfa6:	83 c4 10             	add    $0x10,%esp
f011dfa9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		ptr_allocations[9] = sbrk(10*kilo);
f011dfac:	83 ec 0c             	sub    $0xc,%esp
f011dfaf:	68 00 28 00 00       	push   $0x2800
f011dfb4:	e8 f3 aa fe ff       	call   f0108aac <sbrk>
f011dfb9:	83 c4 10             	add    $0x10,%esp
f011dfbc:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
		newBrk = (uint32)sbrk(0);
f011dfc2:	83 ec 0c             	sub    $0xc,%esp
f011dfc5:	6a 00                	push   $0x0
f011dfc7:	e8 e0 aa fe ff       	call   f0108aac <sbrk>
f011dfcc:	83 c4 10             	add    $0x10,%esp
f011dfcf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		correct = 1;
f011dfd2:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (((int)pf_calculate_free_frames() - freeDiskFrames) != 0)
f011dfd9:	e8 62 68 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011dfde:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dfe1:	74 17                	je     f011dffa <test_ksbrk+0xa10>
		{
			correct = 0;
f011dfe3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dfea:	83 ec 0c             	sub    $0xc,%esp
f011dfed:	68 40 ca 12 f0       	push   $0xf012ca40
f011dff2:	e8 75 2f fe ff       	call   f0100f6c <cprintf>
f011dff7:	83 c4 10             	add    $0x10,%esp
		}
		if ((freeFrames - (int)(int)sys_calculate_free_frames()) != 3)
f011dffa:	e8 0a fa fe ff       	call   f010da09 <sys_calculate_free_frames>
f011dfff:	89 c2                	mov    %eax,%edx
f011e001:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e004:	29 d0                	sub    %edx,%eax
f011e006:	83 f8 03             	cmp    $0x3,%eax
f011e009:	74 17                	je     f011e022 <test_ksbrk+0xa38>
		{
			correct = 0;
f011e00b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("9 Wrong allocation: pages are not loaded successfully into memory");
f011e012:	83 ec 0c             	sub    $0xc,%esp
f011e015:	68 90 ce 12 f0       	push   $0xf012ce90
f011e01a:	e8 4d 2f fe ff       	call   f0100f6c <cprintf>
f011e01f:	83 c4 10             	add    $0x10,%esp
		}
		if ((uint32)ptr_allocations[9] != expectedVAs[9])
f011e022:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e028:	89 c2                	mov    %eax,%edx
f011e02a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e030:	39 c2                	cmp    %eax,%edx
f011e032:	74 25                	je     f011e059 <test_ksbrk+0xa6f>
		{
			correct = 0;
f011e034:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("9 Wrong returned break: Expected: %x, Actual: %x\n", expectedVAs[7], ptr_allocations[7]);
f011e03b:	8b 95 48 ff ff ff    	mov    -0xb8(%ebp),%edx
f011e041:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e047:	83 ec 04             	sub    $0x4,%esp
f011e04a:	52                   	push   %edx
f011e04b:	50                   	push   %eax
f011e04c:	68 d4 ce 12 f0       	push   $0xf012ced4
f011e051:	e8 16 2f fe ff       	call   f0100f6c <cprintf>
f011e056:	83 c4 10             	add    $0x10,%esp
		}
		if (newBrk != expectedSbrks[9])
f011e059:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e05f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f011e062:	74 21                	je     f011e085 <test_ksbrk+0xa9b>
		{
			correct = 0;
f011e064:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			cprintf("9 Wrong new break: Expected: %x, Actual: %x\n", newBrk, expectedSbrks[7]);
f011e06b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e071:	83 ec 04             	sub    $0x4,%esp
f011e074:	50                   	push   %eax
f011e075:	ff 75 d0             	pushl  -0x30(%ebp)
f011e078:	68 08 cf 12 f0       	push   $0xf012cf08
f011e07d:	e8 ea 2e fe ff       	call   f0100f6c <cprintf>
f011e082:	83 c4 10             	add    $0x10,%esp
		}
		if (correct)
f011e085:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011e089:	74 04                	je     f011e08f <test_ksbrk+0xaa5>
			eval += 10;
f011e08b:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	}

	//cprintf("Test kheap sbrk completed. Evaluation = %d%%\n", eval);
	cprintf("[AUTO_GR@DING_PARTIAL]%d\n", eval);
f011e08f:	83 ec 08             	sub    $0x8,%esp
f011e092:	ff 75 e4             	pushl  -0x1c(%ebp)
f011e095:	68 35 cf 12 f0       	push   $0xf012cf35
f011e09a:	e8 cd 2e fe ff       	call   f0100f6c <cprintf>
f011e09f:	83 c4 10             	add    $0x10,%esp

	cprintf("=================\n\n");
f011e0a2:	83 ec 0c             	sub    $0xc,%esp
f011e0a5:	68 4f cf 12 f0       	push   $0xf012cf4f
f011e0aa:	e8 bd 2e fe ff       	call   f0100f6c <cprintf>
f011e0af:	83 c4 10             	add    $0x10,%esp
	return 0;
f011e0b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011e0b7:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011e0ba:	5b                   	pop    %ebx
f011e0bb:	5e                   	pop    %esi
f011e0bc:	5f                   	pop    %edi
f011e0bd:	5d                   	pop    %ebp
f011e0be:	c3                   	ret    

f011e0bf <test_kmalloc_nextfit>:




int test_kmalloc_nextfit()
{
f011e0bf:	55                   	push   %ebp
f011e0c0:	89 e5                	mov    %esp,%ebp
f011e0c2:	81 ec 88 02 00 00    	sub    $0x288,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f011e0c8:	83 ec 04             	sub    $0x4,%esp
f011e0cb:	68 e8 cf 12 f0       	push   $0xf012cfe8
f011e0d0:	68 76 08 00 00       	push   $0x876
f011e0d5:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011e0da:	e8 3b 22 fe ff       	call   f010031a <_panic>

f011e0df <test_kmalloc_bestfit1>:
	return 1;

}

int test_kmalloc_bestfit1()
{
f011e0df:	55                   	push   %ebp
f011e0e0:	89 e5                	mov    %esp,%ebp
f011e0e2:	83 ec 58             	sub    $0x58,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f011e0e5:	83 ec 04             	sub    $0x4,%esp
f011e0e8:	68 e8 cf 12 f0       	push   $0xf012cfe8
f011e0ed:	68 1c 09 00 00       	push   $0x91c
f011e0f2:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011e0f7:	e8 1e 22 fe ff       	call   f010031a <_panic>

f011e0fc <test_kmalloc_bestfit2>:
	return 1;

}

int test_kmalloc_bestfit2()
{
f011e0fc:	55                   	push   %ebp
f011e0fd:	89 e5                	mov    %esp,%ebp
f011e0ff:	83 ec 58             	sub    $0x58,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f011e102:	83 ec 04             	sub    $0x4,%esp
f011e105:	68 e8 cf 12 f0       	push   $0xf012cfe8
f011e10a:	68 c8 09 00 00       	push   $0x9c8
f011e10f:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011e114:	e8 01 22 fe ff       	call   f010031a <_panic>

f011e119 <test_kmalloc_worstfit>:
	return 1;

}

int test_kmalloc_worstfit()
{
f011e119:	55                   	push   %ebp
f011e11a:	89 e5                	mov    %esp,%ebp
f011e11c:	81 ec 88 02 00 00    	sub    $0x288,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f011e122:	83 ec 04             	sub    $0x4,%esp
f011e125:	68 e8 cf 12 f0       	push   $0xf012cfe8
f011e12a:	68 6e 0a 00 00       	push   $0xa6e
f011e12f:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011e134:	e8 e1 21 fe ff       	call   f010031a <_panic>

f011e139 <test_kfree>:

	return 1;
}

int test_kfree()
{
f011e139:	55                   	push   %ebp
f011e13a:	89 e5                	mov    %esp,%ebp
f011e13c:	81 ec 08 01 00 00    	sub    $0x108,%esp
	panic("not handled yet after applying dynamic allocator with page allocator");
f011e142:	83 ec 04             	sub    $0x4,%esp
f011e145:	68 e8 cf 12 f0       	push   $0xf012cfe8
f011e14a:	68 14 0b 00 00       	push   $0xb14
f011e14f:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011e154:	e8 c1 21 fe ff       	call   f010031a <_panic>

f011e159 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f011e159:	55                   	push   %ebp
f011e15a:	89 e5                	mov    %esp,%ebp
f011e15c:	57                   	push   %edi
f011e15d:	56                   	push   %esi
f011e15e:	53                   	push   %ebx
f011e15f:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
	if (firstCall)
f011e165:	a0 9c 9d 17 f0       	mov    0xf0179d9c,%al
f011e16a:	84 c0                	test   %al,%al
f011e16c:	74 56                	je     f011e1c4 <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f011e16e:	c6 05 9c 9d 17 f0 00 	movb   $0x0,0xf0179d9c
		initFreeFrames = sys_calculate_free_frames() ;
f011e175:	e8 8f f8 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e17a:	a3 c8 78 57 f0       	mov    %eax,0xf05778c8
		initFreeDiskFrames = pf_calculate_free_frames() ;
f011e17f:	e8 bc 66 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e184:	a3 c4 78 57 f0       	mov    %eax,0xf05778c4
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f011e189:	8d 85 6c ff ff ff    	lea    -0x94(%ebp),%eax
f011e18f:	bb 45 d1 12 f0       	mov    $0xf012d145,%ebx
f011e194:	ba 11 00 00 00       	mov    $0x11,%edx
f011e199:	89 c7                	mov    %eax,%edi
f011e19b:	89 de                	mov    %ebx,%esi
f011e19d:	89 d1                	mov    %edx,%ecx
f011e19f:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011e1a1:	8d 95 7d ff ff ff    	lea    -0x83(%ebp),%edx
f011e1a7:	b9 53 00 00 00       	mov    $0x53,%ecx
f011e1ac:	b0 00                	mov    $0x0,%al
f011e1ae:	89 d7                	mov    %edx,%edi
f011e1b0:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f011e1b2:	83 ec 0c             	sub    $0xc,%esp
f011e1b5:	8d 85 6c ff ff ff    	lea    -0x94(%ebp),%eax
f011e1bb:	50                   	push   %eax
f011e1bc:	e8 1b 3d fe ff       	call   f0101edc <execute_command>
f011e1c1:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f011e1c4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f011e1cb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f011e1d2:	a1 e0 24 55 f0       	mov    0xf05524e0,%eax
f011e1d7:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e1da:	eb 2b                	jmp    f011e207 <test_three_creation_functions+0xae>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f011e1dc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e1df:	83 c0 20             	add    $0x20,%eax
f011e1e2:	83 ec 08             	sub    $0x8,%esp
f011e1e5:	68 2d d0 12 f0       	push   $0xf012d02d
f011e1ea:	50                   	push   %eax
f011e1eb:	e8 a6 27 00 00       	call   f0120996 <strcmp>
f011e1f0:	83 c4 10             	add    $0x10,%esp
f011e1f3:	85 c0                	test   %eax,%eax
f011e1f5:	75 08                	jne    f011e1ff <test_three_creation_functions+0xa6>
			{
				e = ptr_env ;
f011e1f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e1fa:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f011e1fd:	eb 2f                	jmp    f011e22e <test_three_creation_functions+0xd5>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &ProcessQueues.env_exit_queue)
f011e1ff:	a1 e8 24 55 f0       	mov    0xf05524e8,%eax
f011e204:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011e207:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011e20b:	74 08                	je     f011e215 <test_three_creation_functions+0xbc>
f011e20d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011e210:	8b 40 08             	mov    0x8(%eax),%eax
f011e213:	eb 05                	jmp    f011e21a <test_three_creation_functions+0xc1>
f011e215:	b8 00 00 00 00       	mov    $0x0,%eax
f011e21a:	a3 e8 24 55 f0       	mov    %eax,0xf05524e8
f011e21f:	a1 e8 24 55 f0       	mov    0xf05524e8,%eax
f011e224:	85 c0                	test   %eax,%eax
f011e226:	75 b4                	jne    f011e1dc <test_three_creation_functions+0x83>
f011e228:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011e22c:	75 ae                	jne    f011e1dc <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f011e22e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e231:	8b 80 40 da 01 00    	mov    0x1da40(%eax),%eax
f011e237:	85 c0                	test   %eax,%eax
f011e239:	74 17                	je     f011e252 <test_three_creation_functions+0xf9>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f011e23b:	83 ec 04             	sub    $0x4,%esp
f011e23e:	68 38 d0 12 f0       	push   $0xf012d038
f011e243:	68 f0 0c 00 00       	push   $0xcf0
f011e248:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011e24d:	e8 c8 20 fe ff       	call   f010031a <_panic>

#if USE_KHEAP
		int pagesInWS = LIST_SIZE(&(e->page_WS_list));
#else
		int pagesInWS = env_page_ws_get_size(e);
f011e252:	83 ec 0c             	sub    $0xc,%esp
f011e255:	ff 75 e4             	pushl  -0x1c(%ebp)
f011e258:	e8 01 ab fe ff       	call   f0108d5e <env_page_ws_get_size>
f011e25d:	83 c4 10             	add    $0x10,%esp
f011e260:	89 45 dc             	mov    %eax,-0x24(%ebp)
#endif
		int curFreeFrames = sys_calculate_free_frames() ;
f011e263:	e8 a1 f7 fe ff       	call   f010da09 <sys_calculate_free_frames>
f011e268:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f011e26b:	e8 d0 65 fe ff       	call   f0104840 <pf_calculate_free_frames>
f011e270:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e273:	a1 c4 78 57 f0       	mov    0xf05778c4,%eax
f011e278:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f011e27b:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f011e27e:	74 17                	je     f011e297 <test_three_creation_functions+0x13e>
f011e280:	83 ec 04             	sub    $0x4,%esp
f011e283:	68 40 ca 12 f0       	push   $0xf012ca40
f011e288:	68 fa 0c 00 00       	push   $0xcfa
f011e28d:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011e292:	e8 83 20 fe ff       	call   f010031a <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f011e297:	a1 c8 78 57 f0       	mov    0xf05778c8,%eax
f011e29c:	2b 45 d8             	sub    -0x28(%ebp),%eax
f011e29f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e2a2:	83 c2 15             	add    $0x15,%edx
f011e2a5:	39 d0                	cmp    %edx,%eax
f011e2a7:	74 17                	je     f011e2c0 <test_three_creation_functions+0x167>
f011e2a9:	83 ec 04             	sub    $0x4,%esp
f011e2ac:	68 a8 ca 12 f0       	push   $0xf012caa8
f011e2b1:	68 fc 0c 00 00       	push   $0xcfc
f011e2b6:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011e2bb:	e8 5a 20 fe ff       	call   f010031a <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f011e2c0:	83 ec 0c             	sub    $0xc,%esp
f011e2c3:	68 00 10 00 00       	push   $0x1000
f011e2c8:	e8 e9 a7 fe ff       	call   f0108ab6 <kmalloc>
f011e2cd:	83 c4 10             	add    $0x10,%esp
f011e2d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f011e2d3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e2d6:	3d 00 60 01 f8       	cmp    $0xf8016000,%eax
f011e2db:	74 17                	je     f011e2f4 <test_three_creation_functions+0x19b>
f011e2dd:	83 ec 04             	sub    $0x4,%esp
f011e2e0:	68 88 d0 12 f0       	push   $0xf012d088
f011e2e5:	68 00 0d 00 00       	push   $0xd00
f011e2ea:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011e2ef:	e8 26 20 fe ff       	call   f010031a <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f011e2f4:	83 ec 0c             	sub    $0xc,%esp
f011e2f7:	68 f8 d0 12 f0       	push   $0xf012d0f8
f011e2fc:	e8 6b 2c fe ff       	call   f0100f6c <cprintf>
f011e301:	83 c4 10             	add    $0x10,%esp

	return 1;
f011e304:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011e309:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011e30c:	5b                   	pop    %ebx
f011e30d:	5e                   	pop    %esi
f011e30e:	5f                   	pop    %edi
f011e30f:	5d                   	pop    %ebp
f011e310:	c3                   	ret    

f011e311 <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f011e311:	55                   	push   %ebp
f011e312:	89 e5                	mov    %esp,%ebp
f011e314:	83 ec 08             	sub    $0x8,%esp
	panic("test not available yet");
f011e317:	83 ec 04             	sub    $0x4,%esp
f011e31a:	68 a9 d1 12 f0       	push   $0xf012d1a9
f011e31f:	68 0e 0d 00 00       	push   $0xd0e
f011e324:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011e329:	e8 ec 1f fe ff       	call   f010031a <_panic>

f011e32e <test_kexpand>:

	return 1;

}
int test_kexpand(){
f011e32e:	55                   	push   %ebp
f011e32f:	89 e5                	mov    %esp,%ebp
f011e331:	83 ec 08             	sub    $0x8,%esp
	panic("test not available yet");
f011e334:	83 ec 04             	sub    $0x4,%esp
f011e337:	68 a9 d1 12 f0       	push   $0xf012d1a9
f011e33c:	68 14 0d 00 00       	push   $0xd14
f011e341:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011e346:	e8 cf 1f fe ff       	call   f010031a <_panic>

f011e34b <test_kshrink>:
	return 1;
}

int test_kshrink(){
f011e34b:	55                   	push   %ebp
f011e34c:	89 e5                	mov    %esp,%ebp
f011e34e:	83 ec 08             	sub    $0x8,%esp
	panic("test not available yet");
f011e351:	83 ec 04             	sub    $0x4,%esp
f011e354:	68 a9 d1 12 f0       	push   $0xf012d1a9
f011e359:	68 19 0d 00 00       	push   $0xd19
f011e35e:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011e363:	e8 b2 1f fe ff       	call   f010031a <_panic>

f011e368 <test_kfreelast>:
	return 1;
}
int test_kfreelast(){
f011e368:	55                   	push   %ebp
f011e369:	89 e5                	mov    %esp,%ebp
f011e36b:	83 ec 08             	sub    $0x8,%esp
	panic("test not available yet");
f011e36e:	83 ec 04             	sub    $0x4,%esp
f011e371:	68 a9 d1 12 f0       	push   $0xf012d1a9
f011e376:	68 1d 0d 00 00       	push   $0xd1d
f011e37b:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011e380:	e8 95 1f fe ff       	call   f010031a <_panic>

f011e385 <test_krealloc>:
	return 1;
}

int test_krealloc() {
f011e385:	55                   	push   %ebp
f011e386:	89 e5                	mov    %esp,%ebp
f011e388:	83 ec 08             	sub    $0x8,%esp
	cprintf("==============================================\n");
f011e38b:	83 ec 0c             	sub    $0xc,%esp
f011e38e:	68 60 c1 12 f0       	push   $0xf012c160
f011e393:	e8 d4 2b fe ff       	call   f0100f6c <cprintf>
f011e398:	83 c4 10             	add    $0x10,%esp
	cprintf(
f011e39b:	83 ec 0c             	sub    $0xc,%esp
f011e39e:	68 90 c1 12 f0       	push   $0xf012c190
f011e3a3:	e8 c4 2b fe ff       	call   f0100f6c <cprintf>
f011e3a8:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f011e3ab:	83 ec 0c             	sub    $0xc,%esp
f011e3ae:	68 60 c1 12 f0       	push   $0xf012c160
f011e3b3:	e8 b4 2b fe ff       	call   f0100f6c <cprintf>
f011e3b8:	83 c4 10             	add    $0x10,%esp
	panic("test not available yet");
f011e3bb:	83 ec 04             	sub    $0x4,%esp
f011e3be:	68 a9 d1 12 f0       	push   $0xf012d1a9
f011e3c3:	68 26 0d 00 00       	push   $0xd26
f011e3c8:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011e3cd:	e8 48 1f fe ff       	call   f010031a <_panic>

f011e3d2 <test_krealloc_BF>:
	return 0;
}


int test_krealloc_BF() {
f011e3d2:	55                   	push   %ebp
f011e3d3:	89 e5                	mov    %esp,%ebp
f011e3d5:	83 ec 08             	sub    $0x8,%esp
	cprintf("==============================================\n");
f011e3d8:	83 ec 0c             	sub    $0xc,%esp
f011e3db:	68 60 c1 12 f0       	push   $0xf012c160
f011e3e0:	e8 87 2b fe ff       	call   f0100f6c <cprintf>
f011e3e5:	83 c4 10             	add    $0x10,%esp
	cprintf(
f011e3e8:	83 ec 0c             	sub    $0xc,%esp
f011e3eb:	68 90 c1 12 f0       	push   $0xf012c190
f011e3f0:	e8 77 2b fe ff       	call   f0100f6c <cprintf>
f011e3f5:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f011e3f8:	83 ec 0c             	sub    $0xc,%esp
f011e3fb:	68 60 c1 12 f0       	push   $0xf012c160
f011e400:	e8 67 2b fe ff       	call   f0100f6c <cprintf>
f011e405:	83 c4 10             	add    $0x10,%esp
	panic("test not available yet");
f011e408:	83 ec 04             	sub    $0x4,%esp
f011e40b:	68 a9 d1 12 f0       	push   $0xf012d1a9
f011e410:	68 30 0d 00 00       	push   $0xd30
f011e415:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011e41a:	e8 fb 1e fe ff       	call   f010031a <_panic>

f011e41f <test_krealloc_FF1>:
	return 0;
}

int test_krealloc_FF1()
{
f011e41f:	55                   	push   %ebp
f011e420:	89 e5                	mov    %esp,%ebp
f011e422:	83 ec 08             	sub    $0x8,%esp
	cprintf("===================================================\n");
f011e425:	83 ec 0c             	sub    $0xc,%esp
f011e428:	68 c0 d1 12 f0       	push   $0xf012d1c0
f011e42d:	e8 3a 2b fe ff       	call   f0100f6c <cprintf>
f011e432:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A COMPLETE TEST FOR KREALLOC [BLOCK ALLOCATOR]******\n") ;
f011e435:	83 ec 0c             	sub    $0xc,%esp
f011e438:	68 f8 d1 12 f0       	push   $0xf012d1f8
f011e43d:	e8 2a 2b fe ff       	call   f0100f6c <cprintf>
f011e442:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f011e445:	83 ec 0c             	sub    $0xc,%esp
f011e448:	68 c0 d1 12 f0       	push   $0xf012d1c0
f011e44d:	e8 1a 2b fe ff       	call   f0100f6c <cprintf>
f011e452:	83 c4 10             	add    $0x10,%esp

	panic("test not available yet");
f011e455:	83 ec 04             	sub    $0x4,%esp
f011e458:	68 a9 d1 12 f0       	push   $0xf012d1a9
f011e45d:	68 3a 0d 00 00       	push   $0xd3a
f011e462:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011e467:	e8 ae 1e fe ff       	call   f010031a <_panic>

f011e46c <test_krealloc_FF2>:
	return 0;

}
int test_krealloc_FF2()
{
f011e46c:	55                   	push   %ebp
f011e46d:	89 e5                	mov    %esp,%ebp
f011e46f:	83 ec 08             	sub    $0x8,%esp
	cprintf("===================================================\n");
f011e472:	83 ec 0c             	sub    $0xc,%esp
f011e475:	68 c0 d1 12 f0       	push   $0xf012d1c0
f011e47a:	e8 ed 2a fe ff       	call   f0100f6c <cprintf>
f011e47f:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A COMPLETE TEST FOR KREALLOC [PAGE ALLOCATOR]******\n") ;
f011e482:	83 ec 0c             	sub    $0xc,%esp
f011e485:	68 44 d2 12 f0       	push   $0xf012d244
f011e48a:	e8 dd 2a fe ff       	call   f0100f6c <cprintf>
f011e48f:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f011e492:	83 ec 0c             	sub    $0xc,%esp
f011e495:	68 c0 d1 12 f0       	push   $0xf012d1c0
f011e49a:	e8 cd 2a fe ff       	call   f0100f6c <cprintf>
f011e49f:	83 c4 10             	add    $0x10,%esp

	panic("test not available yet");
f011e4a2:	83 ec 04             	sub    $0x4,%esp
f011e4a5:	68 a9 d1 12 f0       	push   $0xf012d1a9
f011e4aa:	68 44 0d 00 00       	push   $0xd44
f011e4af:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011e4b4:	e8 61 1e fe ff       	call   f010031a <_panic>

f011e4b9 <test_krealloc_FF3>:
	return 0;
}

int test_krealloc_FF3()
{
f011e4b9:	55                   	push   %ebp
f011e4ba:	89 e5                	mov    %esp,%ebp
f011e4bc:	83 ec 08             	sub    $0x8,%esp
	cprintf("===================================================\n");
f011e4bf:	83 ec 0c             	sub    $0xc,%esp
f011e4c2:	68 c0 d1 12 f0       	push   $0xf012d1c0
f011e4c7:	e8 a0 2a fe ff       	call   f0100f6c <cprintf>
f011e4cc:	83 c4 10             	add    $0x10,%esp
	cprintf("*****NOTE: THIS IS A COMPLETE TEST FOR KREALLOC [SWITCH FROM PAGE ALLOCATOR TO DYNAMIC ALLOCATOR AND VICE VERSA]******\n") ;
f011e4cf:	83 ec 0c             	sub    $0xc,%esp
f011e4d2:	68 8c d2 12 f0       	push   $0xf012d28c
f011e4d7:	e8 90 2a fe ff       	call   f0100f6c <cprintf>
f011e4dc:	83 c4 10             	add    $0x10,%esp
	cprintf("===================================================\n");
f011e4df:	83 ec 0c             	sub    $0xc,%esp
f011e4e2:	68 c0 d1 12 f0       	push   $0xf012d1c0
f011e4e7:	e8 80 2a fe ff       	call   f0100f6c <cprintf>
f011e4ec:	83 c4 10             	add    $0x10,%esp

	panic("test not available yet");
f011e4ef:	83 ec 04             	sub    $0x4,%esp
f011e4f2:	68 a9 d1 12 f0       	push   $0xf012d1a9
f011e4f7:	68 4e 0d 00 00       	push   $0xd4e
f011e4fc:	68 d2 c8 12 f0       	push   $0xf012c8d2
f011e501:	e8 14 1e fe ff       	call   f010031a <_panic>

f011e506 <print_order>:
uint8 firstTimeTestBSD = 1;
int prog_orders[TOTAL_NICE_VALUES][INSTANCES_NUMBER];
int nice_count[TOTAL_NICE_VALUES] = {0};

void print_order(int prog_orders[][INSTANCES_NUMBER])
{
f011e506:	55                   	push   %ebp
f011e507:	89 e5                	mov    %esp,%ebp
f011e509:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < TOTAL_NICE_VALUES; i++)
f011e50c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011e513:	e9 84 00 00 00       	jmp    f011e59c <print_order+0x96>
	{
		cprintf("\t[%d]: ", i);
f011e518:	83 ec 08             	sub    $0x8,%esp
f011e51b:	ff 75 f4             	pushl  -0xc(%ebp)
f011e51e:	68 04 d3 12 f0       	push   $0xf012d304
f011e523:	e8 44 2a fe ff       	call   f0100f6c <cprintf>
f011e528:	83 c4 10             	add    $0x10,%esp
		for (int j = 0; j < INSTANCES_NUMBER; j++)
f011e52b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011e532:	eb 4c                	jmp    f011e580 <print_order+0x7a>
		{
			if (prog_orders[i][j] == 0)
f011e534:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011e537:	89 d0                	mov    %edx,%eax
f011e539:	c1 e0 02             	shl    $0x2,%eax
f011e53c:	01 d0                	add    %edx,%eax
f011e53e:	c1 e0 03             	shl    $0x3,%eax
f011e541:	89 c2                	mov    %eax,%edx
f011e543:	8b 45 08             	mov    0x8(%ebp),%eax
f011e546:	01 c2                	add    %eax,%edx
f011e548:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e54b:	8b 04 82             	mov    (%edx,%eax,4),%eax
f011e54e:	85 c0                	test   %eax,%eax
f011e550:	74 36                	je     f011e588 <print_order+0x82>
				break;
			cprintf("%d, ", prog_orders[i][j]);
f011e552:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011e555:	89 d0                	mov    %edx,%eax
f011e557:	c1 e0 02             	shl    $0x2,%eax
f011e55a:	01 d0                	add    %edx,%eax
f011e55c:	c1 e0 03             	shl    $0x3,%eax
f011e55f:	89 c2                	mov    %eax,%edx
f011e561:	8b 45 08             	mov    0x8(%ebp),%eax
f011e564:	01 c2                	add    %eax,%edx
f011e566:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e569:	8b 04 82             	mov    (%edx,%eax,4),%eax
f011e56c:	83 ec 08             	sub    $0x8,%esp
f011e56f:	50                   	push   %eax
f011e570:	68 0c d3 12 f0       	push   $0xf012d30c
f011e575:	e8 f2 29 fe ff       	call   f0100f6c <cprintf>
f011e57a:	83 c4 10             	add    $0x10,%esp
void print_order(int prog_orders[][INSTANCES_NUMBER])
{
	for (int i = 0; i < TOTAL_NICE_VALUES; i++)
	{
		cprintf("\t[%d]: ", i);
		for (int j = 0; j < INSTANCES_NUMBER; j++)
f011e57d:	ff 45 f0             	incl   -0x10(%ebp)
f011e580:	83 7d f0 09          	cmpl   $0x9,-0x10(%ebp)
f011e584:	7e ae                	jle    f011e534 <print_order+0x2e>
f011e586:	eb 01                	jmp    f011e589 <print_order+0x83>
		{
			if (prog_orders[i][j] == 0)
				break;
f011e588:	90                   	nop
			cprintf("%d, ", prog_orders[i][j]);
		}
		cprintf("\n");
f011e589:	83 ec 0c             	sub    $0xc,%esp
f011e58c:	68 11 d3 12 f0       	push   $0xf012d311
f011e591:	e8 d6 29 fe ff       	call   f0100f6c <cprintf>
f011e596:	83 c4 10             	add    $0x10,%esp
int prog_orders[TOTAL_NICE_VALUES][INSTANCES_NUMBER];
int nice_count[TOTAL_NICE_VALUES] = {0};

void print_order(int prog_orders[][INSTANCES_NUMBER])
{
	for (int i = 0; i < TOTAL_NICE_VALUES; i++)
f011e599:	ff 45 f4             	incl   -0xc(%ebp)
f011e59c:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
f011e5a0:	0f 8e 72 ff ff ff    	jle    f011e518 <print_order+0x12>
				break;
			cprintf("%d, ", prog_orders[i][j]);
		}
		cprintf("\n");
	}
}
f011e5a6:	90                   	nop
f011e5a7:	c9                   	leave  
f011e5a8:	c3                   	ret    

f011e5a9 <find_in_range>:

int find_in_range(int env_id, int start, int count)
{
f011e5a9:	55                   	push   %ebp
f011e5aa:	89 e5                	mov    %esp,%ebp
f011e5ac:	83 ec 28             	sub    $0x28,%esp
	int ret = -1;
f011e5af:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	acquire_spinlock(&ProcessQueues.qlock);
f011e5b6:	83 ec 0c             	sub    $0xc,%esp
f011e5b9:	68 60 24 55 f0       	push   $0xf0552460
f011e5be:	e8 14 05 ff ff       	call   f010ead7 <acquire_spinlock>
f011e5c3:	83 c4 10             	add    $0x10,%esp
	{
		struct Env *env = NULL;
f011e5c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		int i = 0, end = start + count;
f011e5cd:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f011e5d4:	8b 55 0c             	mov    0xc(%ebp),%edx
f011e5d7:	8b 45 10             	mov    0x10(%ebp),%eax
f011e5da:	01 d0                	add    %edx,%eax
f011e5dc:	89 45 e8             	mov    %eax,-0x18(%ebp)

		//REVERSE LOOP ON EXIT LIST (to be the same as the queue order)
		int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
f011e5df:	a1 ec 24 55 f0       	mov    0xf05524ec,%eax
f011e5e4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		env = LIST_LAST(&ProcessQueues.env_exit_queue);
f011e5e7:	a1 e4 24 55 f0       	mov    0xf05524e4,%eax
f011e5ec:	89 45 f0             	mov    %eax,-0x10(%ebp)

		cprintf("searching for envID %d starting from %d till %d\n", env_id, start, end);
f011e5ef:	ff 75 e8             	pushl  -0x18(%ebp)
f011e5f2:	ff 75 0c             	pushl  0xc(%ebp)
f011e5f5:	ff 75 08             	pushl  0x8(%ebp)
f011e5f8:	68 14 d3 12 f0       	push   $0xf012d314
f011e5fd:	e8 6a 29 fe ff       	call   f0100f6c <cprintf>
f011e602:	83 c4 10             	add    $0x10,%esp
		for (; i < numOfExitEnvs; env = LIST_PREV(env))
f011e605:	eb 34                	jmp    f011e63b <find_in_range+0x92>
			//LIST_FOREACH_R(env, &env_exit_queue)
		{
			if (i < start)
f011e607:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011e60a:	3b 45 0c             	cmp    0xc(%ebp),%eax
f011e60d:	7d 05                	jge    f011e614 <find_in_range+0x6b>
			{
				i++;
f011e60f:	ff 45 ec             	incl   -0x14(%ebp)
				continue;
f011e612:	eb 1e                	jmp    f011e632 <find_in_range+0x89>
			}
			if (i >= end)
f011e614:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011e617:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011e61a:	7d 29                	jge    f011e645 <find_in_range+0x9c>
				//return -1;
				break;

			if (env_id == env->env_id)
f011e61c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e61f:	8b 40 10             	mov    0x10(%eax),%eax
f011e622:	3b 45 08             	cmp    0x8(%ebp),%eax
f011e625:	75 08                	jne    f011e62f <find_in_range+0x86>
			{
				ret = i;
f011e627:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011e62a:	89 45 f4             	mov    %eax,-0xc(%ebp)
				break;
f011e62d:	eb 17                	jmp    f011e646 <find_in_range+0x9d>
			}
			i++;
f011e62f:	ff 45 ec             	incl   -0x14(%ebp)
		//REVERSE LOOP ON EXIT LIST (to be the same as the queue order)
		int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
		env = LIST_LAST(&ProcessQueues.env_exit_queue);

		cprintf("searching for envID %d starting from %d till %d\n", env_id, start, end);
		for (; i < numOfExitEnvs; env = LIST_PREV(env))
f011e632:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e635:	8b 40 0c             	mov    0xc(%eax),%eax
f011e638:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011e63b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011e63e:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011e641:	7c c4                	jl     f011e607 <find_in_range+0x5e>
f011e643:	eb 01                	jmp    f011e646 <find_in_range+0x9d>
				i++;
				continue;
			}
			if (i >= end)
				//return -1;
				break;
f011e645:	90                   	nop
				break;
			}
			i++;
		}
	}
	release_spinlock(&ProcessQueues.qlock);
f011e646:	83 ec 0c             	sub    $0xc,%esp
f011e649:	68 60 24 55 f0       	push   $0xf0552460
f011e64e:	e8 0b 05 ff ff       	call   f010eb5e <release_spinlock>
f011e653:	83 c4 10             	add    $0x10,%esp
	return ret;
f011e656:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f011e659:	c9                   	leave  
f011e65a:	c3                   	ret    

f011e65b <test_bsd_nice_0>:


void test_bsd_nice_0()
{
f011e65b:	55                   	push   %ebp
f011e65c:	89 e5                	mov    %esp,%ebp
f011e65e:	57                   	push   %edi
f011e65f:	56                   	push   %esi
f011e660:	53                   	push   %ebx
f011e661:	83 ec 3c             	sub    $0x3c,%esp
	if (firstTimeTestBSD)
f011e664:	a0 9d 9d 17 f0       	mov    0xf0179d9d,%al
f011e669:	84 c0                	test   %al,%al
f011e66b:	0f 84 9b 01 00 00    	je     f011e80c <test_bsd_nice_0+0x1b1>
	{
		firstTimeTestBSD = 0;
f011e671:	c6 05 9d 9d 17 f0 00 	movb   $0x0,0xf0179d9d
		int nice_values[] = {-10, -5, 0, 5, 10};
f011e678:	8d 45 b8             	lea    -0x48(%ebp),%eax
f011e67b:	bb 8c d4 12 f0       	mov    $0xf012d48c,%ebx
f011e680:	ba 05 00 00 00       	mov    $0x5,%edx
f011e685:	89 c7                	mov    %eax,%edi
f011e687:	89 de                	mov    %ebx,%esi
f011e689:	89 d1                	mov    %edx,%ecx
f011e68b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		for (int i = 0; i < INSTANCES_NUMBER/2; i++)
f011e68d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011e694:	e9 44 01 00 00       	jmp    f011e7dd <test_bsd_nice_0+0x182>
		{
			struct Env *env = env_create("bsd_fib", 500, 0, 0);
f011e699:	6a 00                	push   $0x0
f011e69b:	6a 00                	push   $0x0
f011e69d:	68 f4 01 00 00       	push   $0x1f4
f011e6a2:	68 45 d3 12 f0       	push   $0xf012d345
f011e6a7:	e8 c4 b3 fe ff       	call   f0109a70 <env_create>
f011e6ac:	83 c4 10             	add    $0x10,%esp
f011e6af:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			int nice_index = i % TOTAL_NICE_VALUES;
f011e6b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e6b5:	b9 05 00 00 00       	mov    $0x5,%ecx
f011e6ba:	99                   	cltd   
f011e6bb:	f7 f9                	idiv   %ecx
f011e6bd:	89 55 d0             	mov    %edx,-0x30(%ebp)
			env_set_nice(env, nice_values[nice_index]);
f011e6c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e6c3:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f011e6c7:	83 ec 08             	sub    $0x8,%esp
f011e6ca:	50                   	push   %eax
f011e6cb:	ff 75 d4             	pushl  -0x2c(%ebp)
f011e6ce:	e8 d4 7f fe ff       	call   f01066a7 <env_set_nice>
f011e6d3:	83 c4 10             	add    $0x10,%esp
			if (env == NULL)
f011e6d6:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f011e6da:	75 14                	jne    f011e6f0 <test_bsd_nice_0+0x95>
				panic("Loading programs failed\n");
f011e6dc:	83 ec 04             	sub    $0x4,%esp
f011e6df:	68 4d d3 12 f0       	push   $0xf012d34d
f011e6e4:	6a 53                	push   $0x53
f011e6e6:	68 66 d3 12 f0       	push   $0xf012d366
f011e6eb:	e8 2a 1c fe ff       	call   f010031a <_panic>
			if (env->page_WS_max_size != 500)
f011e6f0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011e6f3:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f011e6f9:	3d f4 01 00 00       	cmp    $0x1f4,%eax
f011e6fe:	74 14                	je     f011e714 <test_bsd_nice_0+0xb9>
				panic("The program working set size is not correct\n");
f011e700:	83 ec 04             	sub    $0x4,%esp
f011e703:	68 84 d3 12 f0       	push   $0xf012d384
f011e708:	6a 55                	push   $0x55
f011e70a:	68 66 d3 12 f0       	push   $0xf012d366
f011e70f:	e8 06 1c fe ff       	call   f010031a <_panic>

			switch (nice_values[nice_index])
f011e714:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011e717:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f011e71b:	83 c0 0a             	add    $0xa,%eax
f011e71e:	83 f8 14             	cmp    $0x14,%eax
f011e721:	0f 87 a5 00 00 00    	ja     f011e7cc <test_bsd_nice_0+0x171>
f011e727:	8b 04 85 a0 d4 12 f0 	mov    -0xfed2b60(,%eax,4),%eax
f011e72e:	ff e0                	jmp    *%eax
			{
			case -10:
				prog_orders[0][nice_count[0]++] = env->env_id;
f011e730:	a1 9c 22 55 f0       	mov    0xf055229c,%eax
f011e735:	8d 50 01             	lea    0x1(%eax),%edx
f011e738:	89 15 9c 22 55 f0    	mov    %edx,0xf055229c
f011e73e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011e741:	8b 52 10             	mov    0x10(%edx),%edx
f011e744:	89 14 85 e0 78 57 f0 	mov    %edx,-0xfa88720(,%eax,4)
				break;
f011e74b:	eb 7f                	jmp    f011e7cc <test_bsd_nice_0+0x171>
			case -5:
				prog_orders[1][nice_count[1]++] = env->env_id;
f011e74d:	a1 a0 22 55 f0       	mov    0xf05522a0,%eax
f011e752:	8d 50 01             	lea    0x1(%eax),%edx
f011e755:	89 15 a0 22 55 f0    	mov    %edx,0xf05522a0
f011e75b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011e75e:	8b 52 10             	mov    0x10(%edx),%edx
f011e761:	83 c0 0a             	add    $0xa,%eax
f011e764:	89 14 85 e0 78 57 f0 	mov    %edx,-0xfa88720(,%eax,4)
				break;
f011e76b:	eb 5f                	jmp    f011e7cc <test_bsd_nice_0+0x171>
			case 0:
				prog_orders[2][nice_count[2]++] = env->env_id;
f011e76d:	a1 a4 22 55 f0       	mov    0xf05522a4,%eax
f011e772:	8d 50 01             	lea    0x1(%eax),%edx
f011e775:	89 15 a4 22 55 f0    	mov    %edx,0xf05522a4
f011e77b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011e77e:	8b 52 10             	mov    0x10(%edx),%edx
f011e781:	83 c0 14             	add    $0x14,%eax
f011e784:	89 14 85 e0 78 57 f0 	mov    %edx,-0xfa88720(,%eax,4)
				break;
f011e78b:	eb 3f                	jmp    f011e7cc <test_bsd_nice_0+0x171>
			case 5:
				prog_orders[3][nice_count[3]++] = env->env_id;
f011e78d:	a1 a8 22 55 f0       	mov    0xf05522a8,%eax
f011e792:	8d 50 01             	lea    0x1(%eax),%edx
f011e795:	89 15 a8 22 55 f0    	mov    %edx,0xf05522a8
f011e79b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011e79e:	8b 52 10             	mov    0x10(%edx),%edx
f011e7a1:	83 c0 1e             	add    $0x1e,%eax
f011e7a4:	89 14 85 e0 78 57 f0 	mov    %edx,-0xfa88720(,%eax,4)
				break;
f011e7ab:	eb 1f                	jmp    f011e7cc <test_bsd_nice_0+0x171>
			case 10:
				prog_orders[4][nice_count[4]++] = env->env_id;
f011e7ad:	a1 ac 22 55 f0       	mov    0xf05522ac,%eax
f011e7b2:	8d 50 01             	lea    0x1(%eax),%edx
f011e7b5:	89 15 ac 22 55 f0    	mov    %edx,0xf05522ac
f011e7bb:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011e7be:	8b 52 10             	mov    0x10(%edx),%edx
f011e7c1:	83 c0 28             	add    $0x28,%eax
f011e7c4:	89 14 85 e0 78 57 f0 	mov    %edx,-0xfa88720(,%eax,4)
				break;
f011e7cb:	90                   	nop
			}
			sched_new_env(env);
f011e7cc:	83 ec 0c             	sub    $0xc,%esp
f011e7cf:	ff 75 d4             	pushl  -0x2c(%ebp)
f011e7d2:	e8 ce 6e fe ff       	call   f01056a5 <sched_new_env>
f011e7d7:	83 c4 10             	add    $0x10,%esp
{
	if (firstTimeTestBSD)
	{
		firstTimeTestBSD = 0;
		int nice_values[] = {-10, -5, 0, 5, 10};
		for (int i = 0; i < INSTANCES_NUMBER/2; i++)
f011e7da:	ff 45 e4             	incl   -0x1c(%ebp)
f011e7dd:	83 7d e4 04          	cmpl   $0x4,-0x1c(%ebp)
f011e7e1:	0f 8e b2 fe ff ff    	jle    f011e699 <test_bsd_nice_0+0x3e>
				break;
			}
			sched_new_env(env);
		}
		// print_order(prog_orders);
		cprintf("> Running... (After all running programs finish, Run the same command again.)\n");
f011e7e7:	83 ec 0c             	sub    $0xc,%esp
f011e7ea:	68 b4 d3 12 f0       	push   $0xf012d3b4
f011e7ef:	e8 78 27 fe ff       	call   f0100f6c <cprintf>
f011e7f4:	83 c4 10             	add    $0x10,%esp
		execute_command("runall");
f011e7f7:	83 ec 0c             	sub    $0xc,%esp
f011e7fa:	68 03 d4 12 f0       	push   $0xf012d403
f011e7ff:	e8 d8 36 fe ff       	call   f0101edc <execute_command>
f011e804:	83 c4 10             	add    $0x10,%esp
f011e807:	e9 c0 00 00 00       	jmp    f011e8cc <test_bsd_nice_0+0x271>
	}
	else
	{
		cprintf("> Checking...\n");
f011e80c:	83 ec 0c             	sub    $0xc,%esp
f011e80f:	68 0a d4 12 f0       	push   $0xf012d40a
f011e814:	e8 53 27 fe ff       	call   f0100f6c <cprintf>
f011e819:	83 c4 10             	add    $0x10,%esp
		sched_print_all();
f011e81c:	e8 00 76 fe ff       	call   f0105e21 <sched_print_all>
		// print_order(prog_orders);
		int start_idx = 0;
f011e821:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		for (int i = 0; i < TOTAL_NICE_VALUES; i++)
f011e828:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011e82f:	e9 87 00 00 00       	jmp    f011e8bb <test_bsd_nice_0+0x260>
		{
			for (int j = 0; prog_orders[i][j] != 0; j++)
f011e834:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f011e83b:	eb 52                	jmp    f011e88f <test_bsd_nice_0+0x234>
			{
				int exist = find_in_range(prog_orders[i][j], start_idx, nice_count[i]);
f011e83d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e840:	8b 14 85 9c 22 55 f0 	mov    -0xfaadd64(,%eax,4),%edx
f011e847:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f011e84a:	89 c8                	mov    %ecx,%eax
f011e84c:	c1 e0 02             	shl    $0x2,%eax
f011e84f:	01 c8                	add    %ecx,%eax
f011e851:	01 c0                	add    %eax,%eax
f011e853:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f011e856:	01 c8                	add    %ecx,%eax
f011e858:	8b 04 85 e0 78 57 f0 	mov    -0xfa88720(,%eax,4),%eax
f011e85f:	83 ec 04             	sub    $0x4,%esp
f011e862:	52                   	push   %edx
f011e863:	ff 75 e0             	pushl  -0x20(%ebp)
f011e866:	50                   	push   %eax
f011e867:	e8 3d fd ff ff       	call   f011e5a9 <find_in_range>
f011e86c:	83 c4 10             	add    $0x10,%esp
f011e86f:	89 45 cc             	mov    %eax,-0x34(%ebp)
				if (exist == -1)
f011e872:	83 7d cc ff          	cmpl   $0xffffffff,-0x34(%ebp)
f011e876:	75 14                	jne    f011e88c <test_bsd_nice_0+0x231>
					panic("The programs' order of finishing is not correct\n");
f011e878:	83 ec 04             	sub    $0x4,%esp
f011e87b:	68 1c d4 12 f0       	push   $0xf012d41c
f011e880:	6a 7b                	push   $0x7b
f011e882:	68 66 d3 12 f0       	push   $0xf012d366
f011e887:	e8 8e 1a fe ff       	call   f010031a <_panic>
		sched_print_all();
		// print_order(prog_orders);
		int start_idx = 0;
		for (int i = 0; i < TOTAL_NICE_VALUES; i++)
		{
			for (int j = 0; prog_orders[i][j] != 0; j++)
f011e88c:	ff 45 d8             	incl   -0x28(%ebp)
f011e88f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011e892:	89 d0                	mov    %edx,%eax
f011e894:	c1 e0 02             	shl    $0x2,%eax
f011e897:	01 d0                	add    %edx,%eax
f011e899:	01 c0                	add    %eax,%eax
f011e89b:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011e89e:	01 d0                	add    %edx,%eax
f011e8a0:	8b 04 85 e0 78 57 f0 	mov    -0xfa88720(,%eax,4),%eax
f011e8a7:	85 c0                	test   %eax,%eax
f011e8a9:	75 92                	jne    f011e83d <test_bsd_nice_0+0x1e2>
			{
				int exist = find_in_range(prog_orders[i][j], start_idx, nice_count[i]);
				if (exist == -1)
					panic("The programs' order of finishing is not correct\n");
			}
			start_idx += nice_count[i];
f011e8ab:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011e8ae:	8b 04 85 9c 22 55 f0 	mov    -0xfaadd64(,%eax,4),%eax
f011e8b5:	01 45 e0             	add    %eax,-0x20(%ebp)
	{
		cprintf("> Checking...\n");
		sched_print_all();
		// print_order(prog_orders);
		int start_idx = 0;
		for (int i = 0; i < TOTAL_NICE_VALUES; i++)
f011e8b8:	ff 45 dc             	incl   -0x24(%ebp)
f011e8bb:	83 7d dc 04          	cmpl   $0x4,-0x24(%ebp)
f011e8bf:	0f 8e 6f ff ff ff    	jle    f011e834 <test_bsd_nice_0+0x1d9>
				if (exist == -1)
					panic("The programs' order of finishing is not correct\n");
			}
			start_idx += nice_count[i];
		}
		firstTimeTestBSD = 0;
f011e8c5:	c6 05 9d 9d 17 f0 00 	movb   $0x0,0xf0179d9d
	}
	cprintf("\nCongratulations!! test_bsd_nice_0 completed successfully.\n");
f011e8cc:	83 ec 0c             	sub    $0xc,%esp
f011e8cf:	68 50 d4 12 f0       	push   $0xf012d450
f011e8d4:	e8 93 26 fe ff       	call   f0100f6c <cprintf>
f011e8d9:	83 c4 10             	add    $0x10,%esp
}
f011e8dc:	90                   	nop
f011e8dd:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011e8e0:	5b                   	pop    %ebx
f011e8e1:	5e                   	pop    %esi
f011e8e2:	5f                   	pop    %edi
f011e8e3:	5d                   	pop    %ebp
f011e8e4:	c3                   	ret    

f011e8e5 <test_bsd_nice_1>:


void test_bsd_nice_1()
{
f011e8e5:	55                   	push   %ebp
f011e8e6:	89 e5                	mov    %esp,%ebp
f011e8e8:	83 ec 28             	sub    $0x28,%esp
	if (firstTimeTestBSD)
f011e8eb:	a0 9d 9d 17 f0       	mov    0xf0179d9d,%al
f011e8f0:	84 c0                	test   %al,%al
f011e8f2:	0f 84 50 01 00 00    	je     f011ea48 <test_bsd_nice_1+0x163>
	{
		firstTimeTestBSD = 0;
f011e8f8:	c6 05 9d 9d 17 f0 00 	movb   $0x0,0xf0179d9d
		struct Env *fibEnv = env_create("bsd_fib", 500, 0, 0);
f011e8ff:	6a 00                	push   $0x0
f011e901:	6a 00                	push   $0x0
f011e903:	68 f4 01 00 00       	push   $0x1f4
f011e908:	68 45 d3 12 f0       	push   $0xf012d345
f011e90d:	e8 5e b1 fe ff       	call   f0109a70 <env_create>
f011e912:	83 c4 10             	add    $0x10,%esp
f011e915:	89 45 ec             	mov    %eax,-0x14(%ebp)
		struct Env *fibposnEnv = env_create("bsd_fib_posn", 500, 0, 0);
f011e918:	6a 00                	push   $0x0
f011e91a:	6a 00                	push   $0x0
f011e91c:	68 f4 01 00 00       	push   $0x1f4
f011e921:	68 f4 d4 12 f0       	push   $0xf012d4f4
f011e926:	e8 45 b1 fe ff       	call   f0109a70 <env_create>
f011e92b:	83 c4 10             	add    $0x10,%esp
f011e92e:	89 45 e8             	mov    %eax,-0x18(%ebp)
		struct Env *fibnegnEnv = env_create("bsd_fib_negn", 500, 0, 0);
f011e931:	6a 00                	push   $0x0
f011e933:	6a 00                	push   $0x0
f011e935:	68 f4 01 00 00       	push   $0x1f4
f011e93a:	68 01 d5 12 f0       	push   $0xf012d501
f011e93f:	e8 2c b1 fe ff       	call   f0109a70 <env_create>
f011e944:	83 c4 10             	add    $0x10,%esp
f011e947:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (fibEnv == NULL || fibposnEnv == NULL || fibnegnEnv == NULL)
f011e94a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011e94e:	74 0c                	je     f011e95c <test_bsd_nice_1+0x77>
f011e950:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f011e954:	74 06                	je     f011e95c <test_bsd_nice_1+0x77>
f011e956:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011e95a:	75 17                	jne    f011e973 <test_bsd_nice_1+0x8e>
			panic("Loading programs failed\n");
f011e95c:	83 ec 04             	sub    $0x4,%esp
f011e95f:	68 4d d3 12 f0       	push   $0xf012d34d
f011e964:	68 8e 00 00 00       	push   $0x8e
f011e969:	68 66 d3 12 f0       	push   $0xf012d366
f011e96e:	e8 a7 19 fe ff       	call   f010031a <_panic>
		if (fibEnv->page_WS_max_size != 500 || fibposnEnv->page_WS_max_size != 500 || fibnegnEnv->page_WS_max_size != 500)
f011e973:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011e976:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f011e97c:	3d f4 01 00 00       	cmp    $0x1f4,%eax
f011e981:	75 20                	jne    f011e9a3 <test_bsd_nice_1+0xbe>
f011e983:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011e986:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f011e98c:	3d f4 01 00 00       	cmp    $0x1f4,%eax
f011e991:	75 10                	jne    f011e9a3 <test_bsd_nice_1+0xbe>
f011e993:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e996:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f011e99c:	3d f4 01 00 00       	cmp    $0x1f4,%eax
f011e9a1:	74 35                	je     f011e9d8 <test_bsd_nice_1+0xf3>
			panic("The programs should be initially loaded with the given working set size. fib: %d, fibposn: %d, fibnegn: %d\n", fibEnv->page_WS_max_size, fibposnEnv->page_WS_max_size, fibnegnEnv->page_WS_max_size);
f011e9a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011e9a6:	8b 88 84 00 00 00    	mov    0x84(%eax),%ecx
f011e9ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011e9af:	8b 90 84 00 00 00    	mov    0x84(%eax),%edx
f011e9b5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011e9b8:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f011e9be:	83 ec 08             	sub    $0x8,%esp
f011e9c1:	51                   	push   %ecx
f011e9c2:	52                   	push   %edx
f011e9c3:	50                   	push   %eax
f011e9c4:	68 10 d5 12 f0       	push   $0xf012d510
f011e9c9:	68 90 00 00 00       	push   $0x90
f011e9ce:	68 66 d3 12 f0       	push   $0xf012d366
f011e9d3:	e8 42 19 fe ff       	call   f010031a <_panic>
		sched_new_env(fibEnv);
f011e9d8:	83 ec 0c             	sub    $0xc,%esp
f011e9db:	ff 75 ec             	pushl  -0x14(%ebp)
f011e9de:	e8 c2 6c fe ff       	call   f01056a5 <sched_new_env>
f011e9e3:	83 c4 10             	add    $0x10,%esp
		sched_new_env(fibposnEnv);
f011e9e6:	83 ec 0c             	sub    $0xc,%esp
f011e9e9:	ff 75 e8             	pushl  -0x18(%ebp)
f011e9ec:	e8 b4 6c fe ff       	call   f01056a5 <sched_new_env>
f011e9f1:	83 c4 10             	add    $0x10,%esp
		sched_new_env(fibnegnEnv);
f011e9f4:	83 ec 0c             	sub    $0xc,%esp
f011e9f7:	ff 75 e4             	pushl  -0x1c(%ebp)
f011e9fa:	e8 a6 6c fe ff       	call   f01056a5 <sched_new_env>
f011e9ff:	83 c4 10             	add    $0x10,%esp
		prog_orders[0][0] = fibnegnEnv->env_id;
f011ea02:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011ea05:	8b 40 10             	mov    0x10(%eax),%eax
f011ea08:	a3 e0 78 57 f0       	mov    %eax,0xf05778e0
		prog_orders[1][0] = fibEnv->env_id;
f011ea0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011ea10:	8b 40 10             	mov    0x10(%eax),%eax
f011ea13:	a3 08 79 57 f0       	mov    %eax,0xf0577908
		prog_orders[2][0] = fibposnEnv->env_id;
f011ea18:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ea1b:	8b 40 10             	mov    0x10(%eax),%eax
f011ea1e:	a3 30 79 57 f0       	mov    %eax,0xf0577930
		cprintf("> Running... (After all running programs finish, Run the same command again.)\n");
f011ea23:	83 ec 0c             	sub    $0xc,%esp
f011ea26:	68 b4 d3 12 f0       	push   $0xf012d3b4
f011ea2b:	e8 3c 25 fe ff       	call   f0100f6c <cprintf>
f011ea30:	83 c4 10             	add    $0x10,%esp
		execute_command("runall");
f011ea33:	83 ec 0c             	sub    $0xc,%esp
f011ea36:	68 03 d4 12 f0       	push   $0xf012d403
f011ea3b:	e8 9c 34 fe ff       	call   f0101edc <execute_command>
f011ea40:	83 c4 10             	add    $0x10,%esp
f011ea43:	e9 9e 00 00 00       	jmp    f011eae6 <test_bsd_nice_1+0x201>
	}
	else
	{
		cprintf("> Checking...\n");
f011ea48:	83 ec 0c             	sub    $0xc,%esp
f011ea4b:	68 0a d4 12 f0       	push   $0xf012d40a
f011ea50:	e8 17 25 fe ff       	call   f0100f6c <cprintf>
f011ea55:	83 c4 10             	add    $0x10,%esp
		sched_print_all();
f011ea58:	e8 c4 73 fe ff       	call   f0105e21 <sched_print_all>
		// print_order(prog_orders);
		int i = 0;
f011ea5d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		struct Env *env = NULL;
f011ea64:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		acquire_spinlock(&ProcessQueues.qlock);
f011ea6b:	83 ec 0c             	sub    $0xc,%esp
f011ea6e:	68 60 24 55 f0       	push   $0xf0552460
f011ea73:	e8 5f 00 ff ff       	call   f010ead7 <acquire_spinlock>
f011ea78:	83 c4 10             	add    $0x10,%esp
		{
			//REVERSE LOOP ON EXIT LIST (to be the same as the queue order)
			int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
f011ea7b:	a1 ec 24 55 f0       	mov    0xf05524ec,%eax
f011ea80:	89 45 e0             	mov    %eax,-0x20(%ebp)
			env = LIST_LAST(&ProcessQueues.env_exit_queue);
f011ea83:	a1 e4 24 55 f0       	mov    0xf05524e4,%eax
f011ea88:	89 45 f0             	mov    %eax,-0x10(%ebp)
			for (; i < numOfExitEnvs; env = LIST_PREV(env))
f011ea8b:	eb 41                	jmp    f011eace <test_bsd_nice_1+0x1e9>
				//LIST_FOREACH_R(env, &env_exit_queue)
			{
				//cprintf("%s - id=%d, priority=%d, nice=%d\n", env->prog_name, env->env_id, env->priority, env->nice);
				if (prog_orders[i][0] != env->env_id)
f011ea8d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ea90:	89 d0                	mov    %edx,%eax
f011ea92:	c1 e0 02             	shl    $0x2,%eax
f011ea95:	01 d0                	add    %edx,%eax
f011ea97:	c1 e0 03             	shl    $0x3,%eax
f011ea9a:	05 e0 78 57 f0       	add    $0xf05778e0,%eax
f011ea9f:	8b 10                	mov    (%eax),%edx
f011eaa1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011eaa4:	8b 40 10             	mov    0x10(%eax),%eax
f011eaa7:	39 c2                	cmp    %eax,%edx
f011eaa9:	74 17                	je     f011eac2 <test_bsd_nice_1+0x1dd>
					panic("The programs' order of finishing is not correct\n");
f011eaab:	83 ec 04             	sub    $0x4,%esp
f011eaae:	68 1c d4 12 f0       	push   $0xf012d41c
f011eab3:	68 ab 00 00 00       	push   $0xab
f011eab8:	68 66 d3 12 f0       	push   $0xf012d366
f011eabd:	e8 58 18 fe ff       	call   f010031a <_panic>
				i++;
f011eac2:	ff 45 f4             	incl   -0xc(%ebp)
		acquire_spinlock(&ProcessQueues.qlock);
		{
			//REVERSE LOOP ON EXIT LIST (to be the same as the queue order)
			int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
			env = LIST_LAST(&ProcessQueues.env_exit_queue);
			for (; i < numOfExitEnvs; env = LIST_PREV(env))
f011eac5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011eac8:	8b 40 0c             	mov    0xc(%eax),%eax
f011eacb:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011eace:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011ead1:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011ead4:	7c b7                	jl     f011ea8d <test_bsd_nice_1+0x1a8>
				if (prog_orders[i][0] != env->env_id)
					panic("The programs' order of finishing is not correct\n");
				i++;
			}
		}
		release_spinlock(&ProcessQueues.qlock);
f011ead6:	83 ec 0c             	sub    $0xc,%esp
f011ead9:	68 60 24 55 f0       	push   $0xf0552460
f011eade:	e8 7b 00 ff ff       	call   f010eb5e <release_spinlock>
f011eae3:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\nCongratulations!! test_bsd_nice_1 completed successfully.\n");
f011eae6:	83 ec 0c             	sub    $0xc,%esp
f011eae9:	68 7c d5 12 f0       	push   $0xf012d57c
f011eaee:	e8 79 24 fe ff       	call   f0100f6c <cprintf>
f011eaf3:	83 c4 10             	add    $0x10,%esp
}
f011eaf6:	90                   	nop
f011eaf7:	c9                   	leave  
f011eaf8:	c3                   	ret    

f011eaf9 <test_bsd_nice_2>:

void test_bsd_nice_2()
{
f011eaf9:	55                   	push   %ebp
f011eafa:	89 e5                	mov    %esp,%ebp
f011eafc:	57                   	push   %edi
f011eafd:	56                   	push   %esi
f011eafe:	53                   	push   %ebx
f011eaff:	83 ec 3c             	sub    $0x3c,%esp
	if (firstTimeTestBSD)
f011eb02:	a0 9d 9d 17 f0       	mov    0xf0179d9d,%al
f011eb07:	84 c0                	test   %al,%al
f011eb09:	0f 84 ae 01 00 00    	je     f011ecbd <test_bsd_nice_2+0x1c4>
	{
		chksch(1);
f011eb0f:	83 ec 0c             	sub    $0xc,%esp
f011eb12:	6a 01                	push   $0x1
f011eb14:	e8 ce 0e 00 00       	call   f011f9e7 <chksch>
f011eb19:	83 c4 10             	add    $0x10,%esp
		firstTimeTestBSD = 0;
f011eb1c:	c6 05 9d 9d 17 f0 00 	movb   $0x0,0xf0179d9d
		int nice_values[] = {15, 5, 0, -5, -15};
f011eb23:	8d 45 b8             	lea    -0x48(%ebp),%eax
f011eb26:	bb 00 d6 12 f0       	mov    $0xf012d600,%ebx
f011eb2b:	ba 05 00 00 00       	mov    $0x5,%edx
f011eb30:	89 c7                	mov    %eax,%edi
f011eb32:	89 de                	mov    %ebx,%esi
f011eb34:	89 d1                	mov    %edx,%ecx
f011eb36:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		for (int i = 0; i < INSTANCES_NUMBER; i++)
f011eb38:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f011eb3f:	e9 4a 01 00 00       	jmp    f011ec8e <test_bsd_nice_2+0x195>
		{
			struct Env *env = env_create("bsd_matops", 10000, 0, 0);
f011eb44:	6a 00                	push   $0x0
f011eb46:	6a 00                	push   $0x0
f011eb48:	68 10 27 00 00       	push   $0x2710
f011eb4d:	68 b8 d5 12 f0       	push   $0xf012d5b8
f011eb52:	e8 19 af fe ff       	call   f0109a70 <env_create>
f011eb57:	83 c4 10             	add    $0x10,%esp
f011eb5a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			int nice_index = i % TOTAL_NICE_VALUES;
f011eb5d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011eb60:	b9 05 00 00 00       	mov    $0x5,%ecx
f011eb65:	99                   	cltd   
f011eb66:	f7 f9                	idiv   %ecx
f011eb68:	89 55 d0             	mov    %edx,-0x30(%ebp)
			env_set_nice(env, nice_values[nice_index]);
f011eb6b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011eb6e:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f011eb72:	83 ec 08             	sub    $0x8,%esp
f011eb75:	50                   	push   %eax
f011eb76:	ff 75 d4             	pushl  -0x2c(%ebp)
f011eb79:	e8 29 7b fe ff       	call   f01066a7 <env_set_nice>
f011eb7e:	83 c4 10             	add    $0x10,%esp
			if (env == NULL)
f011eb81:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f011eb85:	75 17                	jne    f011eb9e <test_bsd_nice_2+0xa5>
				panic("Loading programs failed\n");
f011eb87:	83 ec 04             	sub    $0x4,%esp
f011eb8a:	68 4d d3 12 f0       	push   $0xf012d34d
f011eb8f:	68 c1 00 00 00       	push   $0xc1
f011eb94:	68 66 d3 12 f0       	push   $0xf012d366
f011eb99:	e8 7c 17 fe ff       	call   f010031a <_panic>
			if (env->page_WS_max_size != 10000)
f011eb9e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011eba1:	8b 80 84 00 00 00    	mov    0x84(%eax),%eax
f011eba7:	3d 10 27 00 00       	cmp    $0x2710,%eax
f011ebac:	74 17                	je     f011ebc5 <test_bsd_nice_2+0xcc>
				panic("The program working set size is not correct\n");
f011ebae:	83 ec 04             	sub    $0x4,%esp
f011ebb1:	68 84 d3 12 f0       	push   $0xf012d384
f011ebb6:	68 c3 00 00 00       	push   $0xc3
f011ebbb:	68 66 d3 12 f0       	push   $0xf012d366
f011ebc0:	e8 55 17 fe ff       	call   f010031a <_panic>

			switch (nice_values[nice_index])
f011ebc5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ebc8:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f011ebcc:	83 c0 0f             	add    $0xf,%eax
f011ebcf:	83 f8 1e             	cmp    $0x1e,%eax
f011ebd2:	0f 87 a5 00 00 00    	ja     f011ec7d <test_bsd_nice_2+0x184>
f011ebd8:	8b 04 85 14 d6 12 f0 	mov    -0xfed29ec(,%eax,4),%eax
f011ebdf:	ff e0                	jmp    *%eax
			{
			case -15:
				prog_orders[0][nice_count[0]++] = env->env_id;
f011ebe1:	a1 9c 22 55 f0       	mov    0xf055229c,%eax
f011ebe6:	8d 50 01             	lea    0x1(%eax),%edx
f011ebe9:	89 15 9c 22 55 f0    	mov    %edx,0xf055229c
f011ebef:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011ebf2:	8b 52 10             	mov    0x10(%edx),%edx
f011ebf5:	89 14 85 e0 78 57 f0 	mov    %edx,-0xfa88720(,%eax,4)
				break;
f011ebfc:	eb 7f                	jmp    f011ec7d <test_bsd_nice_2+0x184>
			case -5:
				prog_orders[1][nice_count[1]++] = env->env_id;
f011ebfe:	a1 a0 22 55 f0       	mov    0xf05522a0,%eax
f011ec03:	8d 50 01             	lea    0x1(%eax),%edx
f011ec06:	89 15 a0 22 55 f0    	mov    %edx,0xf05522a0
f011ec0c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011ec0f:	8b 52 10             	mov    0x10(%edx),%edx
f011ec12:	83 c0 0a             	add    $0xa,%eax
f011ec15:	89 14 85 e0 78 57 f0 	mov    %edx,-0xfa88720(,%eax,4)
				break;
f011ec1c:	eb 5f                	jmp    f011ec7d <test_bsd_nice_2+0x184>
			case 0:
				prog_orders[2][nice_count[2]++] = env->env_id;
f011ec1e:	a1 a4 22 55 f0       	mov    0xf05522a4,%eax
f011ec23:	8d 50 01             	lea    0x1(%eax),%edx
f011ec26:	89 15 a4 22 55 f0    	mov    %edx,0xf05522a4
f011ec2c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011ec2f:	8b 52 10             	mov    0x10(%edx),%edx
f011ec32:	83 c0 14             	add    $0x14,%eax
f011ec35:	89 14 85 e0 78 57 f0 	mov    %edx,-0xfa88720(,%eax,4)
				break;
f011ec3c:	eb 3f                	jmp    f011ec7d <test_bsd_nice_2+0x184>
			case 5:
				prog_orders[3][nice_count[3]++] = env->env_id;
f011ec3e:	a1 a8 22 55 f0       	mov    0xf05522a8,%eax
f011ec43:	8d 50 01             	lea    0x1(%eax),%edx
f011ec46:	89 15 a8 22 55 f0    	mov    %edx,0xf05522a8
f011ec4c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011ec4f:	8b 52 10             	mov    0x10(%edx),%edx
f011ec52:	83 c0 1e             	add    $0x1e,%eax
f011ec55:	89 14 85 e0 78 57 f0 	mov    %edx,-0xfa88720(,%eax,4)
				break;
f011ec5c:	eb 1f                	jmp    f011ec7d <test_bsd_nice_2+0x184>
			case 15:
				prog_orders[4][nice_count[4]++] = env->env_id;
f011ec5e:	a1 ac 22 55 f0       	mov    0xf05522ac,%eax
f011ec63:	8d 50 01             	lea    0x1(%eax),%edx
f011ec66:	89 15 ac 22 55 f0    	mov    %edx,0xf05522ac
f011ec6c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f011ec6f:	8b 52 10             	mov    0x10(%edx),%edx
f011ec72:	83 c0 28             	add    $0x28,%eax
f011ec75:	89 14 85 e0 78 57 f0 	mov    %edx,-0xfa88720(,%eax,4)
				break;
f011ec7c:	90                   	nop
			}
			sched_new_env(env);
f011ec7d:	83 ec 0c             	sub    $0xc,%esp
f011ec80:	ff 75 d4             	pushl  -0x2c(%ebp)
f011ec83:	e8 1d 6a fe ff       	call   f01056a5 <sched_new_env>
f011ec88:	83 c4 10             	add    $0x10,%esp
	if (firstTimeTestBSD)
	{
		chksch(1);
		firstTimeTestBSD = 0;
		int nice_values[] = {15, 5, 0, -5, -15};
		for (int i = 0; i < INSTANCES_NUMBER; i++)
f011ec8b:	ff 45 e4             	incl   -0x1c(%ebp)
f011ec8e:	83 7d e4 09          	cmpl   $0x9,-0x1c(%ebp)
f011ec92:	0f 8e ac fe ff ff    	jle    f011eb44 <test_bsd_nice_2+0x4b>
				break;
			}
			sched_new_env(env);
		}
		// print_order(prog_orders);
		cprintf("> Running... (After all running programs finish, Run the same command again.)\n");
f011ec98:	83 ec 0c             	sub    $0xc,%esp
f011ec9b:	68 b4 d3 12 f0       	push   $0xf012d3b4
f011eca0:	e8 c7 22 fe ff       	call   f0100f6c <cprintf>
f011eca5:	83 c4 10             	add    $0x10,%esp
		execute_command("runall");
f011eca8:	83 ec 0c             	sub    $0xc,%esp
f011ecab:	68 03 d4 12 f0       	push   $0xf012d403
f011ecb0:	e8 27 32 fe ff       	call   f0101edc <execute_command>
f011ecb5:	83 c4 10             	add    $0x10,%esp
f011ecb8:	e9 d0 00 00 00       	jmp    f011ed8d <test_bsd_nice_2+0x294>
	}
	else
	{
		chksch(0);
f011ecbd:	83 ec 0c             	sub    $0xc,%esp
f011ecc0:	6a 00                	push   $0x0
f011ecc2:	e8 20 0d 00 00       	call   f011f9e7 <chksch>
f011ecc7:	83 c4 10             	add    $0x10,%esp
		cprintf("> Checking...\n");
f011ecca:	83 ec 0c             	sub    $0xc,%esp
f011eccd:	68 0a d4 12 f0       	push   $0xf012d40a
f011ecd2:	e8 95 22 fe ff       	call   f0100f6c <cprintf>
f011ecd7:	83 c4 10             	add    $0x10,%esp
		sched_print_all();
f011ecda:	e8 42 71 fe ff       	call   f0105e21 <sched_print_all>
		// print_order(prog_orders);
		int start_idx = 0;
f011ecdf:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		for (int i = 0; i < TOTAL_NICE_VALUES; i++)
f011ece6:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011eced:	e9 8a 00 00 00       	jmp    f011ed7c <test_bsd_nice_2+0x283>
		{
			for (int j = 0; prog_orders[i][j] != 0; j++)
f011ecf2:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f011ecf9:	eb 55                	jmp    f011ed50 <test_bsd_nice_2+0x257>
			{
				int exist = find_in_range(prog_orders[i][j], start_idx, nice_count[i]);
f011ecfb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011ecfe:	8b 14 85 9c 22 55 f0 	mov    -0xfaadd64(,%eax,4),%edx
f011ed05:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f011ed08:	89 c8                	mov    %ecx,%eax
f011ed0a:	c1 e0 02             	shl    $0x2,%eax
f011ed0d:	01 c8                	add    %ecx,%eax
f011ed0f:	01 c0                	add    %eax,%eax
f011ed11:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f011ed14:	01 c8                	add    %ecx,%eax
f011ed16:	8b 04 85 e0 78 57 f0 	mov    -0xfa88720(,%eax,4),%eax
f011ed1d:	83 ec 04             	sub    $0x4,%esp
f011ed20:	52                   	push   %edx
f011ed21:	ff 75 e0             	pushl  -0x20(%ebp)
f011ed24:	50                   	push   %eax
f011ed25:	e8 7f f8 ff ff       	call   f011e5a9 <find_in_range>
f011ed2a:	83 c4 10             	add    $0x10,%esp
f011ed2d:	89 45 cc             	mov    %eax,-0x34(%ebp)
				if (exist == -1)
f011ed30:	83 7d cc ff          	cmpl   $0xffffffff,-0x34(%ebp)
f011ed34:	75 17                	jne    f011ed4d <test_bsd_nice_2+0x254>
					panic("The programs' order of finishing is not correct\n");
f011ed36:	83 ec 04             	sub    $0x4,%esp
f011ed39:	68 1c d4 12 f0       	push   $0xf012d41c
f011ed3e:	68 ea 00 00 00       	push   $0xea
f011ed43:	68 66 d3 12 f0       	push   $0xf012d366
f011ed48:	e8 cd 15 fe ff       	call   f010031a <_panic>
		sched_print_all();
		// print_order(prog_orders);
		int start_idx = 0;
		for (int i = 0; i < TOTAL_NICE_VALUES; i++)
		{
			for (int j = 0; prog_orders[i][j] != 0; j++)
f011ed4d:	ff 45 d8             	incl   -0x28(%ebp)
f011ed50:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ed53:	89 d0                	mov    %edx,%eax
f011ed55:	c1 e0 02             	shl    $0x2,%eax
f011ed58:	01 d0                	add    %edx,%eax
f011ed5a:	01 c0                	add    %eax,%eax
f011ed5c:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011ed5f:	01 d0                	add    %edx,%eax
f011ed61:	8b 04 85 e0 78 57 f0 	mov    -0xfa88720(,%eax,4),%eax
f011ed68:	85 c0                	test   %eax,%eax
f011ed6a:	75 8f                	jne    f011ecfb <test_bsd_nice_2+0x202>
			{
				int exist = find_in_range(prog_orders[i][j], start_idx, nice_count[i]);
				if (exist == -1)
					panic("The programs' order of finishing is not correct\n");
			}
			start_idx += nice_count[i];
f011ed6c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011ed6f:	8b 04 85 9c 22 55 f0 	mov    -0xfaadd64(,%eax,4),%eax
f011ed76:	01 45 e0             	add    %eax,-0x20(%ebp)
		chksch(0);
		cprintf("> Checking...\n");
		sched_print_all();
		// print_order(prog_orders);
		int start_idx = 0;
		for (int i = 0; i < TOTAL_NICE_VALUES; i++)
f011ed79:	ff 45 dc             	incl   -0x24(%ebp)
f011ed7c:	83 7d dc 04          	cmpl   $0x4,-0x24(%ebp)
f011ed80:	0f 8e 6c ff ff ff    	jle    f011ecf2 <test_bsd_nice_2+0x1f9>
				if (exist == -1)
					panic("The programs' order of finishing is not correct\n");
			}
			start_idx += nice_count[i];
		}
		firstTimeTestBSD = 0;
f011ed86:	c6 05 9d 9d 17 f0 00 	movb   $0x0,0xf0179d9d
	}
	cprintf("\nCongratulations!! test_bsd_nice_2 completed successfully.\n");
f011ed8d:	83 ec 0c             	sub    $0xc,%esp
f011ed90:	68 c4 d5 12 f0       	push   $0xf012d5c4
f011ed95:	e8 d2 21 fe ff       	call   f0100f6c <cprintf>
f011ed9a:	83 c4 10             	add    $0x10,%esp
}
f011ed9d:	90                   	nop
f011ed9e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011eda1:	5b                   	pop    %ebx
f011eda2:	5e                   	pop    %esi
f011eda3:	5f                   	pop    %edi
f011eda4:	5d                   	pop    %ebp
f011eda5:	c3                   	ret    

f011eda6 <__mk_fix>:
fixed_point_t;

/* Returns a fixed-point number with F as its internal value. */
static inline fixed_point_t
__mk_fix (int f)
{
f011eda6:	55                   	push   %ebp
f011eda7:	89 e5                	mov    %esp,%ebp
f011eda9:	83 ec 10             	sub    $0x10,%esp
  fixed_point_t x;
  x.f = f;
f011edac:	8b 45 0c             	mov    0xc(%ebp),%eax
f011edaf:	89 45 fc             	mov    %eax,-0x4(%ebp)
  return x;
f011edb2:	8b 45 08             	mov    0x8(%ebp),%eax
f011edb5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f011edb8:	89 10                	mov    %edx,(%eax)
}
f011edba:	8b 45 08             	mov    0x8(%ebp),%eax
f011edbd:	c9                   	leave  
f011edbe:	c2 04 00             	ret    $0x4

f011edc1 <fix_round>:
}

/* Returns X rounded to the nearest integer. */
static inline int
fix_round (fixed_point_t x)
{
f011edc1:	55                   	push   %ebp
f011edc2:	89 e5                	mov    %esp,%ebp
	if (x.f >= 0)
f011edc4:	8b 45 08             	mov    0x8(%ebp),%eax
f011edc7:	85 c0                	test   %eax,%eax
f011edc9:	78 16                	js     f011ede1 <fix_round+0x20>
		return (x.f + FIX_F / 2) / FIX_F;
f011edcb:	8b 45 08             	mov    0x8(%ebp),%eax
f011edce:	05 00 20 00 00       	add    $0x2000,%eax
f011edd3:	85 c0                	test   %eax,%eax
f011edd5:	79 05                	jns    f011eddc <fix_round+0x1b>
f011edd7:	05 ff 3f 00 00       	add    $0x3fff,%eax
f011eddc:	c1 f8 0e             	sar    $0xe,%eax
f011eddf:	eb 14                	jmp    f011edf5 <fix_round+0x34>
	else
		return (x.f - FIX_F / 2) / FIX_F;
f011ede1:	8b 45 08             	mov    0x8(%ebp),%eax
f011ede4:	2d 00 20 00 00       	sub    $0x2000,%eax
f011ede9:	85 c0                	test   %eax,%eax
f011edeb:	79 05                	jns    f011edf2 <fix_round+0x31>
f011eded:	05 ff 3f 00 00       	add    $0x3fff,%eax
f011edf2:	c1 f8 0e             	sar    $0xe,%eax
}
f011edf5:	5d                   	pop    %ebp
f011edf6:	c3                   	ret    

f011edf7 <fix_scale>:
}

/* Returns X * N. */
static inline fixed_point_t
fix_scale (fixed_point_t x, int n)
{
f011edf7:	55                   	push   %ebp
f011edf8:	89 e5                	mov    %esp,%ebp
f011edfa:	83 ec 08             	sub    $0x8,%esp
	assert (n >= 0);
f011edfd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f011ee01:	79 16                	jns    f011ee19 <fix_scale+0x22>
f011ee03:	68 90 d6 12 f0       	push   $0xf012d690
f011ee08:	68 97 d6 12 f0       	push   $0xf012d697
f011ee0d:	6a 5a                	push   $0x5a
f011ee0f:	68 ac d6 12 f0       	push   $0xf012d6ac
f011ee14:	e8 01 15 fe ff       	call   f010031a <_panic>
  return __mk_fix (x.f * n);
f011ee19:	8b 45 0c             	mov    0xc(%ebp),%eax
f011ee1c:	0f af 45 10          	imul   0x10(%ebp),%eax
f011ee20:	89 c2                	mov    %eax,%edx
f011ee22:	8b 45 08             	mov    0x8(%ebp),%eax
f011ee25:	83 ec 08             	sub    $0x8,%esp
f011ee28:	52                   	push   %edx
f011ee29:	50                   	push   %eax
f011ee2a:	e8 77 ff ff ff       	call   f011eda6 <__mk_fix>
f011ee2f:	83 c4 0c             	add    $0xc,%esp
}
f011ee32:	8b 45 08             	mov    0x8(%ebp),%eax
f011ee35:	c9                   	leave  
f011ee36:	c2 04 00             	ret    $0x4

f011ee39 <rsttst>:
#include "../cons/console.h"

#include <kern/trap/fault_handler.h>

void rsttst()
{
f011ee39:	55                   	push   %ebp
f011ee3a:	89 e5                	mov    %esp,%ebp
f011ee3c:	83 ec 08             	sub    $0x8,%esp
	init_spinlock(&tstcntlock, "tstcnt lock");
f011ee3f:	83 ec 08             	sub    $0x8,%esp
f011ee42:	68 c0 d6 12 f0       	push   $0xf012d6c0
f011ee47:	68 00 52 55 f0       	push   $0xf0555200
f011ee4c:	e8 55 fc fe ff       	call   f010eaa6 <init_spinlock>
f011ee51:	83 c4 10             	add    $0x10,%esp
	acquire_spinlock(&tstcntlock);
f011ee54:	83 ec 0c             	sub    $0xc,%esp
f011ee57:	68 00 52 55 f0       	push   $0xf0555200
f011ee5c:	e8 76 fc fe ff       	call   f010ead7 <acquire_spinlock>
f011ee61:	83 c4 10             	add    $0x10,%esp
	{
		tstcnt = 0;
f011ee64:	c7 05 e8 23 55 f0 00 	movl   $0x0,0xf05523e8
f011ee6b:	00 00 00 
	}
	release_spinlock(&tstcntlock);
f011ee6e:	83 ec 0c             	sub    $0xc,%esp
f011ee71:	68 00 52 55 f0       	push   $0xf0555200
f011ee76:	e8 e3 fc fe ff       	call   f010eb5e <release_spinlock>
f011ee7b:	83 c4 10             	add    $0x10,%esp
}
f011ee7e:	90                   	nop
f011ee7f:	c9                   	leave  
f011ee80:	c3                   	ret    

f011ee81 <inctst>:
void inctst()
{
f011ee81:	55                   	push   %ebp
f011ee82:	89 e5                	mov    %esp,%ebp
f011ee84:	83 ec 08             	sub    $0x8,%esp
	acquire_spinlock(&tstcntlock);
f011ee87:	83 ec 0c             	sub    $0xc,%esp
f011ee8a:	68 00 52 55 f0       	push   $0xf0555200
f011ee8f:	e8 43 fc fe ff       	call   f010ead7 <acquire_spinlock>
f011ee94:	83 c4 10             	add    $0x10,%esp
	{
		tstcnt++;
f011ee97:	a1 e8 23 55 f0       	mov    0xf05523e8,%eax
f011ee9c:	40                   	inc    %eax
f011ee9d:	a3 e8 23 55 f0       	mov    %eax,0xf05523e8
	}
	release_spinlock(&tstcntlock);
f011eea2:	83 ec 0c             	sub    $0xc,%esp
f011eea5:	68 00 52 55 f0       	push   $0xf0555200
f011eeaa:	e8 af fc fe ff       	call   f010eb5e <release_spinlock>
f011eeaf:	83 c4 10             	add    $0x10,%esp
}
f011eeb2:	90                   	nop
f011eeb3:	c9                   	leave  
f011eeb4:	c3                   	ret    

f011eeb5 <gettst>:
uint32 gettst()
{
f011eeb5:	55                   	push   %ebp
f011eeb6:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f011eeb8:	a1 e8 23 55 f0       	mov    0xf05523e8,%eax
}
f011eebd:	5d                   	pop    %ebp
f011eebe:	c3                   	ret    

f011eebf <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f011eebf:	55                   	push   %ebp
f011eec0:	89 e5                	mov    %esp,%ebp
f011eec2:	83 ec 28             	sub    $0x28,%esp
f011eec5:	8b 45 14             	mov    0x14(%ebp),%eax
f011eec8:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f011eecb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f011eed2:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f011eed6:	83 f8 65             	cmp    $0x65,%eax
f011eed9:	74 5d                	je     f011ef38 <tst+0x79>
f011eedb:	83 f8 65             	cmp    $0x65,%eax
f011eede:	7f 0a                	jg     f011eeea <tst+0x2b>
f011eee0:	83 f8 62             	cmp    $0x62,%eax
f011eee3:	74 73                	je     f011ef58 <tst+0x99>
f011eee5:	e9 91 00 00 00       	jmp    f011ef7b <tst+0xbc>
f011eeea:	83 f8 67             	cmp    $0x67,%eax
f011eeed:	74 29                	je     f011ef18 <tst+0x59>
f011eeef:	83 f8 6c             	cmp    $0x6c,%eax
f011eef2:	0f 85 83 00 00 00    	jne    f011ef7b <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f011eef8:	8b 45 08             	mov    0x8(%ebp),%eax
f011eefb:	3b 45 0c             	cmp    0xc(%ebp),%eax
f011eefe:	73 09                	jae    f011ef09 <tst+0x4a>
			chk = 1;
f011ef00:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f011ef07:	eb 68                	jmp    f011ef71 <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f011ef09:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f011ef0d:	74 62                	je     f011ef71 <tst+0xb2>
			chk = 1;
f011ef0f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f011ef16:	eb 59                	jmp    f011ef71 <tst+0xb2>
	case 'g':
		if (n > v1)
f011ef18:	8b 45 08             	mov    0x8(%ebp),%eax
f011ef1b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f011ef1e:	76 09                	jbe    f011ef29 <tst+0x6a>
			chk = 1;
f011ef20:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f011ef27:	eb 4b                	jmp    f011ef74 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f011ef29:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f011ef2d:	74 45                	je     f011ef74 <tst+0xb5>
			chk = 1;
f011ef2f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f011ef36:	eb 3c                	jmp    f011ef74 <tst+0xb5>
	case 'e':
		if (n == v1)
f011ef38:	8b 45 08             	mov    0x8(%ebp),%eax
f011ef3b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f011ef3e:	75 09                	jne    f011ef49 <tst+0x8a>
			chk = 1;
f011ef40:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f011ef47:	eb 2e                	jmp    f011ef77 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f011ef49:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f011ef4d:	74 28                	je     f011ef77 <tst+0xb8>
			chk = 1;
f011ef4f:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f011ef56:	eb 1f                	jmp    f011ef77 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v2)
f011ef58:	8b 45 08             	mov    0x8(%ebp),%eax
f011ef5b:	3b 45 0c             	cmp    0xc(%ebp),%eax
f011ef5e:	72 1a                	jb     f011ef7a <tst+0xbb>
f011ef60:	8b 45 08             	mov    0x8(%ebp),%eax
f011ef63:	3b 45 10             	cmp    0x10(%ebp),%eax
f011ef66:	77 12                	ja     f011ef7a <tst+0xbb>
			chk = 1;
f011ef68:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f011ef6f:	eb 09                	jmp    f011ef7a <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f011ef71:	90                   	nop
f011ef72:	eb 07                	jmp    f011ef7b <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f011ef74:	90                   	nop
f011ef75:	eb 04                	jmp    f011ef7b <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f011ef77:	90                   	nop
f011ef78:	eb 01                	jmp    f011ef7b <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v2)
			chk = 1;
		break;
f011ef7a:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f011ef7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f011ef7f:	75 14                	jne    f011ef95 <tst+0xd6>
f011ef81:	83 ec 04             	sub    $0x4,%esp
f011ef84:	68 cc d6 12 f0       	push   $0xf012d6cc
f011ef89:	6a 47                	push   $0x47
f011ef8b:	68 df d6 12 f0       	push   $0xf012d6df
f011ef90:	e8 85 13 fe ff       	call   f010031a <_panic>

	acquire_spinlock(&tstcntlock);
f011ef95:	83 ec 0c             	sub    $0xc,%esp
f011ef98:	68 00 52 55 f0       	push   $0xf0555200
f011ef9d:	e8 35 fb fe ff       	call   f010ead7 <acquire_spinlock>
f011efa2:	83 c4 10             	add    $0x10,%esp
	{
		tstcnt++ ;
f011efa5:	a1 e8 23 55 f0       	mov    0xf05523e8,%eax
f011efaa:	40                   	inc    %eax
f011efab:	a3 e8 23 55 f0       	mov    %eax,0xf05523e8
	}
	release_spinlock(&tstcntlock);
f011efb0:	83 ec 0c             	sub    $0xc,%esp
f011efb3:	68 00 52 55 f0       	push   $0xf0555200
f011efb8:	e8 a1 fb fe ff       	call   f010eb5e <release_spinlock>
f011efbd:	83 c4 10             	add    $0x10,%esp

	return;
f011efc0:	90                   	nop
}
f011efc1:	c9                   	leave  
f011efc2:	c3                   	ret    

f011efc3 <chktst>:

void chktst(uint32 n)
{
f011efc3:	55                   	push   %ebp
f011efc4:	89 e5                	mov    %esp,%ebp
f011efc6:	83 ec 18             	sub    $0x18,%esp
	int __tstcnt;
	acquire_spinlock(&tstcntlock);
f011efc9:	83 ec 0c             	sub    $0xc,%esp
f011efcc:	68 00 52 55 f0       	push   $0xf0555200
f011efd1:	e8 01 fb fe ff       	call   f010ead7 <acquire_spinlock>
f011efd6:	83 c4 10             	add    $0x10,%esp
	{
		__tstcnt = tstcnt;
f011efd9:	a1 e8 23 55 f0       	mov    0xf05523e8,%eax
f011efde:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}
	release_spinlock(&tstcntlock);
f011efe1:	83 ec 0c             	sub    $0xc,%esp
f011efe4:	68 00 52 55 f0       	push   $0xf0555200
f011efe9:	e8 70 fb fe ff       	call   f010eb5e <release_spinlock>
f011efee:	83 c4 10             	add    $0x10,%esp
	if (__tstcnt == n)
f011eff1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011eff4:	3b 45 08             	cmp    0x8(%ebp),%eax
f011eff7:	75 12                	jne    f011f00b <chktst+0x48>
		cprintf("\nCongratulations... test runs successfully\n");
f011eff9:	83 ec 0c             	sub    $0xc,%esp
f011effc:	68 f8 d6 12 f0       	push   $0xf012d6f8
f011f001:	e8 66 1f fe ff       	call   f0100f6c <cprintf>
f011f006:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f011f009:	eb 14                	jmp    f011f01f <chktst+0x5c>
	}
	release_spinlock(&tstcntlock);
	if (__tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f011f00b:	83 ec 04             	sub    $0x4,%esp
f011f00e:	68 24 d7 12 f0       	push   $0xf012d724
f011f013:	6a 5d                	push   $0x5d
f011f015:	68 df d6 12 f0       	push   $0xf012d6df
f011f01a:	e8 fb 12 fe ff       	call   f010031a <_panic>
}
f011f01f:	c9                   	leave  
f011f020:	c3                   	ret    

f011f021 <nearest_pow2_ceil>:

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f011f021:	55                   	push   %ebp
f011f022:	89 e5                	mov    %esp,%ebp
f011f024:	83 ec 10             	sub    $0x10,%esp
	if (x <= 1) return 1;
f011f027:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f011f02b:	77 07                	ja     f011f034 <nearest_pow2_ceil+0x13>
f011f02d:	b8 01 00 00 00       	mov    $0x1,%eax
f011f032:	eb 20                	jmp    f011f054 <nearest_pow2_ceil+0x33>
	int power = 2;
f011f034:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
	x--;
f011f03b:	ff 4d 08             	decl   0x8(%ebp)
	while (x >>= 1) {
f011f03e:	eb 08                	jmp    f011f048 <nearest_pow2_ceil+0x27>
		power <<= 1;
f011f040:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011f043:	01 c0                	add    %eax,%eax
f011f045:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
	if (x <= 1) return 1;
	int power = 2;
	x--;
	while (x >>= 1) {
f011f048:	d1 6d 08             	shrl   0x8(%ebp)
f011f04b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f011f04f:	75 ef                	jne    f011f040 <nearest_pow2_ceil+0x1f>
		power <<= 1;
	}
	return power;
f011f051:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f011f054:	c9                   	leave  
f011f055:	c3                   	ret    

f011f056 <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f011f056:	55                   	push   %ebp
f011f057:	89 e5                	mov    %esp,%ebp
f011f059:	83 ec 10             	sub    $0x10,%esp
	if (x <= 1) return 1;
f011f05c:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f011f060:	77 07                	ja     f011f069 <log2_ceil+0x13>
f011f062:	b8 01 00 00 00       	mov    $0x1,%eax
f011f067:	eb 1b                	jmp    f011f084 <log2_ceil+0x2e>
	//int power = 2;
	int bits_cnt = 2 ;
f011f069:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
	x--;
f011f070:	ff 4d 08             	decl   0x8(%ebp)
	while (x >>= 1) {
f011f073:	eb 03                	jmp    f011f078 <log2_ceil+0x22>
		//power <<= 1;
		bits_cnt++ ;
f011f075:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
	if (x <= 1) return 1;
	//int power = 2;
	int bits_cnt = 2 ;
	x--;
	while (x >>= 1) {
f011f078:	d1 6d 08             	shrl   0x8(%ebp)
f011f07b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f011f07f:	75 f4                	jne    f011f075 <log2_ceil+0x1f>
		//power <<= 1;
		bits_cnt++ ;
	}
	return bits_cnt;
f011f081:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f011f084:	c9                   	leave  
f011f085:	c3                   	ret    

f011f086 <fixedPt2Str>:

/*2023*/
void fixedPt2Str(fixed_point_t f, int num_dec_digits, char* output)
{
f011f086:	55                   	push   %ebp
f011f087:	89 e5                	mov    %esp,%ebp
f011f089:	83 ec 78             	sub    $0x78,%esp
	int mulFactor = 1;
f011f08c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	for (int i = 0; i < num_dec_digits; ++i) {
f011f093:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f011f09a:	eb 12                	jmp    f011f0ae <fixedPt2Str+0x28>
		mulFactor *= 10;
f011f09c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f09f:	89 d0                	mov    %edx,%eax
f011f0a1:	c1 e0 02             	shl    $0x2,%eax
f011f0a4:	01 d0                	add    %edx,%eax
f011f0a6:	01 c0                	add    %eax,%eax
f011f0a8:	89 45 f4             	mov    %eax,-0xc(%ebp)

/*2023*/
void fixedPt2Str(fixed_point_t f, int num_dec_digits, char* output)
{
	int mulFactor = 1;
	for (int i = 0; i < num_dec_digits; ++i) {
f011f0ab:	ff 45 f0             	incl   -0x10(%ebp)
f011f0ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f0b1:	3b 45 0c             	cmp    0xc(%ebp),%eax
f011f0b4:	7c e6                	jl     f011f09c <fixedPt2Str+0x16>
		mulFactor *= 10;
	}
	int scaledVal = fix_round(fix_scale(f, mulFactor)) ;
f011f0b6:	8d 45 dc             	lea    -0x24(%ebp),%eax
f011f0b9:	83 ec 04             	sub    $0x4,%esp
f011f0bc:	ff 75 f4             	pushl  -0xc(%ebp)
f011f0bf:	ff 75 08             	pushl  0x8(%ebp)
f011f0c2:	50                   	push   %eax
f011f0c3:	e8 2f fd ff ff       	call   f011edf7 <fix_scale>
f011f0c8:	83 c4 0c             	add    $0xc,%esp
f011f0cb:	83 ec 0c             	sub    $0xc,%esp
f011f0ce:	ff 75 dc             	pushl  -0x24(%ebp)
f011f0d1:	e8 eb fc ff ff       	call   f011edc1 <fix_round>
f011f0d6:	83 c4 10             	add    $0x10,%esp
f011f0d9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int integer = scaledVal/mulFactor;
f011f0dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011f0df:	99                   	cltd   
f011f0e0:	f7 7d f4             	idivl  -0xc(%ebp)
f011f0e3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	int fraction = scaledVal%mulFactor;
f011f0e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011f0e9:	99                   	cltd   
f011f0ea:	f7 7d f4             	idivl  -0xc(%ebp)
f011f0ed:	89 55 e0             	mov    %edx,-0x20(%ebp)
	char intPart[20] ; ltostr(integer, intPart);
f011f0f0:	83 ec 08             	sub    $0x8,%esp
f011f0f3:	8d 45 c8             	lea    -0x38(%ebp),%eax
f011f0f6:	50                   	push   %eax
f011f0f7:	ff 75 e4             	pushl  -0x1c(%ebp)
f011f0fa:	e8 31 1c 00 00       	call   f0120d30 <ltostr>
f011f0ff:	83 c4 10             	add    $0x10,%esp
	char fractPart[20] ; ltostr(fraction, fractPart);
f011f102:	83 ec 08             	sub    $0x8,%esp
f011f105:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f011f108:	50                   	push   %eax
f011f109:	ff 75 e0             	pushl  -0x20(%ebp)
f011f10c:	e8 1f 1c 00 00       	call   f0120d30 <ltostr>
f011f111:	83 c4 10             	add    $0x10,%esp
	int tmp = mulFactor / 10;
f011f114:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011f117:	b8 67 66 66 66       	mov    $0x66666667,%eax
f011f11c:	f7 e9                	imul   %ecx
f011f11e:	c1 fa 02             	sar    $0x2,%edx
f011f121:	89 c8                	mov    %ecx,%eax
f011f123:	c1 f8 1f             	sar    $0x1f,%eax
f011f126:	29 c2                	sub    %eax,%edx
f011f128:	89 d0                	mov    %edx,%eax
f011f12a:	89 45 ec             	mov    %eax,-0x14(%ebp)

	char zeros[10] = "";
f011f12d:	c7 45 aa 00 00 00 00 	movl   $0x0,-0x56(%ebp)
f011f134:	c7 45 ae 00 00 00 00 	movl   $0x0,-0x52(%ebp)
f011f13b:	66 c7 45 b2 00 00    	movw   $0x0,-0x4e(%ebp)
	while (fraction < tmp)
f011f141:	eb 31                	jmp    f011f174 <fixedPt2Str+0xee>
	{
		strcconcat("0", zeros, zeros);
f011f143:	83 ec 04             	sub    $0x4,%esp
f011f146:	8d 45 aa             	lea    -0x56(%ebp),%eax
f011f149:	50                   	push   %eax
f011f14a:	8d 45 aa             	lea    -0x56(%ebp),%eax
f011f14d:	50                   	push   %eax
f011f14e:	68 40 d7 12 f0       	push   $0xf012d740
f011f153:	e8 b1 1c 00 00       	call   f0120e09 <strcconcat>
f011f158:	83 c4 10             	add    $0x10,%esp
		tmp /= 10;
f011f15b:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f011f15e:	b8 67 66 66 66       	mov    $0x66666667,%eax
f011f163:	f7 e9                	imul   %ecx
f011f165:	c1 fa 02             	sar    $0x2,%edx
f011f168:	89 c8                	mov    %ecx,%eax
f011f16a:	c1 f8 1f             	sar    $0x1f,%eax
f011f16d:	29 c2                	sub    %eax,%edx
f011f16f:	89 d0                	mov    %edx,%eax
f011f171:	89 45 ec             	mov    %eax,-0x14(%ebp)
	char intPart[20] ; ltostr(integer, intPart);
	char fractPart[20] ; ltostr(fraction, fractPart);
	int tmp = mulFactor / 10;

	char zeros[10] = "";
	while (fraction < tmp)
f011f174:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011f177:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f17a:	7c c7                	jl     f011f143 <fixedPt2Str+0xbd>
	{
		strcconcat("0", zeros, zeros);
		tmp /= 10;
	}
	char fractPart2[20];
	strcconcat(zeros, fractPart, fractPart2);
f011f17c:	83 ec 04             	sub    $0x4,%esp
f011f17f:	8d 45 96             	lea    -0x6a(%ebp),%eax
f011f182:	50                   	push   %eax
f011f183:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f011f186:	50                   	push   %eax
f011f187:	8d 45 aa             	lea    -0x56(%ebp),%eax
f011f18a:	50                   	push   %eax
f011f18b:	e8 79 1c 00 00       	call   f0120e09 <strcconcat>
f011f190:	83 c4 10             	add    $0x10,%esp

	//cprintf("integer = %d, intPart = %s - fraction = %d, fractPart = %s\n", integer, intPart, fraction , fractPart2);
	strcconcat(intPart, ".", intPart);
f011f193:	83 ec 04             	sub    $0x4,%esp
f011f196:	8d 45 c8             	lea    -0x38(%ebp),%eax
f011f199:	50                   	push   %eax
f011f19a:	68 42 d7 12 f0       	push   $0xf012d742
f011f19f:	8d 45 c8             	lea    -0x38(%ebp),%eax
f011f1a2:	50                   	push   %eax
f011f1a3:	e8 61 1c 00 00       	call   f0120e09 <strcconcat>
f011f1a8:	83 c4 10             	add    $0x10,%esp
	strcconcat(intPart, fractPart2, output);
f011f1ab:	83 ec 04             	sub    $0x4,%esp
f011f1ae:	ff 75 10             	pushl  0x10(%ebp)
f011f1b1:	8d 45 96             	lea    -0x6a(%ebp),%eax
f011f1b4:	50                   	push   %eax
f011f1b5:	8d 45 c8             	lea    -0x38(%ebp),%eax
f011f1b8:	50                   	push   %eax
f011f1b9:	e8 4b 1c 00 00       	call   f0120e09 <strcconcat>
f011f1be:	83 c4 10             	add    $0x10,%esp

}
f011f1c1:	90                   	nop
f011f1c2:	c9                   	leave  
f011f1c3:	c3                   	ret    

f011f1c4 <sys_utilities>:

void sys_utilities(char* utilityName, int value)
{
f011f1c4:	55                   	push   %ebp
f011f1c5:	89 e5                	mov    %esp,%ebp
f011f1c7:	83 ec 78             	sub    $0x78,%esp
	if (strncmp(utilityName, "__BSDSetNice@", strlen("__BSDSetNice@")) == 0)
f011f1ca:	83 ec 0c             	sub    $0xc,%esp
f011f1cd:	68 44 d7 12 f0       	push   $0xf012d744
f011f1d2:	e8 b3 16 00 00       	call   f012088a <strlen>
f011f1d7:	83 c4 10             	add    $0x10,%esp
f011f1da:	83 ec 04             	sub    $0x4,%esp
f011f1dd:	50                   	push   %eax
f011f1de:	68 44 d7 12 f0       	push   $0xf012d744
f011f1e3:	ff 75 08             	pushl  0x8(%ebp)
f011f1e6:	e8 e3 17 00 00       	call   f01209ce <strncmp>
f011f1eb:	83 c4 10             	add    $0x10,%esp
f011f1ee:	85 c0                	test   %eax,%eax
f011f1f0:	0f 85 84 00 00 00    	jne    f011f27a <sys_utilities+0xb6>
	{
		int number_of_tokens;
		//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
		char *tokens[MAX_ARGUMENTS];
		strsplit(utilityName, "@", tokens, &number_of_tokens) ;
f011f1f6:	8d 45 d0             	lea    -0x30(%ebp),%eax
f011f1f9:	50                   	push   %eax
f011f1fa:	8d 45 88             	lea    -0x78(%ebp),%eax
f011f1fd:	50                   	push   %eax
f011f1fe:	68 52 d7 12 f0       	push   $0xf012d752
f011f203:	ff 75 08             	pushl  0x8(%ebp)
f011f206:	e8 94 1c 00 00       	call   f0120e9f <strsplit>
f011f20b:	83 c4 10             	add    $0x10,%esp
		int envID = strtol(tokens[1], NULL, 10);
f011f20e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011f211:	83 ec 04             	sub    $0x4,%esp
f011f214:	6a 0a                	push   $0xa
f011f216:	6a 00                	push   $0x0
f011f218:	50                   	push   %eax
f011f219:	e8 cc 19 00 00       	call   f0120bea <strtol>
f011f21e:	83 c4 10             	add    $0x10,%esp
f011f221:	89 45 e0             	mov    %eax,-0x20(%ebp)
		struct Env* env = NULL ;
f011f224:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
		envid2env(envID, &env, 0);
f011f22b:	83 ec 04             	sub    $0x4,%esp
f011f22e:	6a 00                	push   $0x0
f011f230:	8d 45 cc             	lea    -0x34(%ebp),%eax
f011f233:	50                   	push   %eax
f011f234:	ff 75 e0             	pushl  -0x20(%ebp)
f011f237:	e8 84 b5 fe ff       	call   f010a7c0 <envid2env>
f011f23c:	83 c4 10             	add    $0x10,%esp
		assert(env->env_id == envID) ;
f011f23f:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011f242:	8b 40 10             	mov    0x10(%eax),%eax
f011f245:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f011f248:	74 19                	je     f011f263 <sys_utilities+0x9f>
f011f24a:	68 54 d7 12 f0       	push   $0xf012d754
f011f24f:	68 97 d6 12 f0       	push   $0xf012d697
f011f254:	68 9d 00 00 00       	push   $0x9d
f011f259:	68 df d6 12 f0       	push   $0xf012d6df
f011f25e:	e8 b7 10 fe ff       	call   f010031a <_panic>
		env_set_nice(env, value);
f011f263:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011f266:	83 ec 08             	sub    $0x8,%esp
f011f269:	ff 75 0c             	pushl  0xc(%ebp)
f011f26c:	50                   	push   %eax
f011f26d:	e8 35 74 fe ff       	call   f01066a7 <env_set_nice>
f011f272:	83 c4 10             	add    $0x10,%esp
f011f275:	e9 c4 01 00 00       	jmp    f011f43e <sys_utilities+0x27a>
	}
	else if (strncmp(utilityName, "__CheckExitOrder@", strlen("__CheckExitOrder@")) == 0)
f011f27a:	83 ec 0c             	sub    $0xc,%esp
f011f27d:	68 69 d7 12 f0       	push   $0xf012d769
f011f282:	e8 03 16 00 00       	call   f012088a <strlen>
f011f287:	83 c4 10             	add    $0x10,%esp
f011f28a:	83 ec 04             	sub    $0x4,%esp
f011f28d:	50                   	push   %eax
f011f28e:	68 69 d7 12 f0       	push   $0xf012d769
f011f293:	ff 75 08             	pushl  0x8(%ebp)
f011f296:	e8 33 17 00 00       	call   f01209ce <strncmp>
f011f29b:	83 c4 10             	add    $0x10,%esp
f011f29e:	85 c0                	test   %eax,%eax
f011f2a0:	0f 85 98 01 00 00    	jne    f011f43e <sys_utilities+0x27a>
	{
		int* numOfInstances = (int*) value ;
f011f2a6:	8b 45 0c             	mov    0xc(%ebp),%eax
f011f2a9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int number_of_tokens;
		//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
		char *tokens[MAX_ARGUMENTS];
		strsplit(utilityName, "@", tokens, &number_of_tokens) ;
f011f2ac:	8d 45 c8             	lea    -0x38(%ebp),%eax
f011f2af:	50                   	push   %eax
f011f2b0:	8d 45 88             	lea    -0x78(%ebp),%eax
f011f2b3:	50                   	push   %eax
f011f2b4:	68 52 d7 12 f0       	push   $0xf012d752
f011f2b9:	ff 75 08             	pushl  0x8(%ebp)
f011f2bc:	e8 de 1b 00 00       	call   f0120e9f <strsplit>
f011f2c1:	83 c4 10             	add    $0x10,%esp
		char *progName = tokens[1];
f011f2c4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011f2c7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		struct Env* env = NULL ;
f011f2ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		bool chkAscending = 1;
f011f2d1:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		int prevEnvID = -1 ;
f011f2d8:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)

		if (*numOfInstances < 0)
f011f2df:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f2e2:	8b 00                	mov    (%eax),%eax
f011f2e4:	85 c0                	test   %eax,%eax
f011f2e6:	79 1c                	jns    f011f304 <sys_utilities+0x140>
		{
			chkAscending = 0;
f011f2e8:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			*numOfInstances *= -1;
f011f2ef:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f2f2:	8b 00                	mov    (%eax),%eax
f011f2f4:	f7 d8                	neg    %eax
f011f2f6:	89 c2                	mov    %eax,%edx
f011f2f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f2fb:	89 10                	mov    %edx,(%eax)
			prevEnvID = 1<<30 ;
f011f2fd:	c7 45 ec 00 00 00 40 	movl   $0x40000000,-0x14(%ebp)
		}
		bool success = 1;
f011f304:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)

		acquire_spinlock(&ProcessQueues.qlock);
f011f30b:	83 ec 0c             	sub    $0xc,%esp
f011f30e:	68 60 24 55 f0       	push   $0xf0552460
f011f313:	e8 bf f7 fe ff       	call   f010ead7 <acquire_spinlock>
f011f318:	83 c4 10             	add    $0x10,%esp
		{
			//REVERSE LOOP ON EXIT LIST (to be the same as the queue order)
			int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
f011f31b:	a1 ec 24 55 f0       	mov    0xf05524ec,%eax
f011f320:	89 45 d4             	mov    %eax,-0x2c(%ebp)
			env = LIST_LAST(&ProcessQueues.env_exit_queue);
f011f323:	a1 e4 24 55 f0       	mov    0xf05524e4,%eax
f011f328:	89 45 f4             	mov    %eax,-0xc(%ebp)
			for (int i = numOfExitEnvs; i > 0; --i, env = LIST_PREV(env))
f011f32b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011f32e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f011f331:	eb 6c                	jmp    f011f39f <sys_utilities+0x1db>
			{
				if (strcmp(env->prog_name, progName) != 0)
f011f333:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011f336:	83 c0 20             	add    $0x20,%eax
f011f339:	83 ec 08             	sub    $0x8,%esp
f011f33c:	ff 75 d8             	pushl  -0x28(%ebp)
f011f33f:	50                   	push   %eax
f011f340:	e8 51 16 00 00       	call   f0120996 <strcmp>
f011f345:	83 c4 10             	add    $0x10,%esp
f011f348:	85 c0                	test   %eax,%eax
f011f34a:	75 46                	jne    f011f392 <sys_utilities+0x1ce>
					continue;
				(*numOfInstances)-- ;
f011f34c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f34f:	8b 00                	mov    (%eax),%eax
f011f351:	8d 50 ff             	lea    -0x1(%eax),%edx
f011f354:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f357:	89 10                	mov    %edx,(%eax)

				//cprintf("%s: prevID = %d, nextID = %d\n", progName, prevEnvID, env->env_id);
				if (chkAscending)
f011f359:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011f35d:	74 14                	je     f011f373 <sys_utilities+0x1af>
				{
					if (prevEnvID > env->env_id)
f011f35f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011f362:	8b 40 10             	mov    0x10(%eax),%eax
f011f365:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f368:	7d 1d                	jge    f011f387 <sys_utilities+0x1c3>
					{
						success = 0;
f011f36a:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
						break;
f011f371:	eb 32                	jmp    f011f3a5 <sys_utilities+0x1e1>
					}
				}
				else
				{
					if (prevEnvID < env->env_id)
f011f373:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011f376:	8b 40 10             	mov    0x10(%eax),%eax
f011f379:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f37c:	7e 09                	jle    f011f387 <sys_utilities+0x1c3>
					{
						success = 0;
f011f37e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
						break;
f011f385:	eb 1e                	jmp    f011f3a5 <sys_utilities+0x1e1>
					}
				}
				prevEnvID = env->env_id;
f011f387:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011f38a:	8b 40 10             	mov    0x10(%eax),%eax
f011f38d:	89 45 ec             	mov    %eax,-0x14(%ebp)
f011f390:	eb 01                	jmp    f011f393 <sys_utilities+0x1cf>
			int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
			env = LIST_LAST(&ProcessQueues.env_exit_queue);
			for (int i = numOfExitEnvs; i > 0; --i, env = LIST_PREV(env))
			{
				if (strcmp(env->prog_name, progName) != 0)
					continue;
f011f392:	90                   	nop
		acquire_spinlock(&ProcessQueues.qlock);
		{
			//REVERSE LOOP ON EXIT LIST (to be the same as the queue order)
			int numOfExitEnvs = LIST_SIZE(&ProcessQueues.env_exit_queue);
			env = LIST_LAST(&ProcessQueues.env_exit_queue);
			for (int i = numOfExitEnvs; i > 0; --i, env = LIST_PREV(env))
f011f393:	ff 4d e4             	decl   -0x1c(%ebp)
f011f396:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011f399:	8b 40 0c             	mov    0xc(%eax),%eax
f011f39c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011f39f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011f3a3:	7f 8e                	jg     f011f333 <sys_utilities+0x16f>
					}
				}
				prevEnvID = env->env_id;
			}
		}
		release_spinlock(&ProcessQueues.qlock);
f011f3a5:	83 ec 0c             	sub    $0xc,%esp
f011f3a8:	68 60 24 55 f0       	push   $0xf0552460
f011f3ad:	e8 ac f7 fe ff       	call   f010eb5e <release_spinlock>
f011f3b2:	83 c4 10             	add    $0x10,%esp
		if (*numOfInstances != 0 || success == 0)
f011f3b5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f3b8:	8b 00                	mov    (%eax),%eax
f011f3ba:	85 c0                	test   %eax,%eax
f011f3bc:	75 06                	jne    f011f3c4 <sys_utilities+0x200>
f011f3be:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f011f3c2:	75 3e                	jne    f011f402 <sys_utilities+0x23e>
		{
			cprintf("###########################################\n");
f011f3c4:	83 ec 0c             	sub    $0xc,%esp
f011f3c7:	68 7c d7 12 f0       	push   $0xf012d77c
f011f3cc:	e8 9b 1b fe ff       	call   f0100f6c <cprintf>
f011f3d1:	83 c4 10             	add    $0x10,%esp
			cprintf("%s: check exit order is FAILED\n", progName);
f011f3d4:	83 ec 08             	sub    $0x8,%esp
f011f3d7:	ff 75 d8             	pushl  -0x28(%ebp)
f011f3da:	68 ac d7 12 f0       	push   $0xf012d7ac
f011f3df:	e8 88 1b fe ff       	call   f0100f6c <cprintf>
f011f3e4:	83 c4 10             	add    $0x10,%esp
			cprintf("###########################################\n");
f011f3e7:	83 ec 0c             	sub    $0xc,%esp
f011f3ea:	68 7c d7 12 f0       	push   $0xf012d77c
f011f3ef:	e8 78 1b fe ff       	call   f0100f6c <cprintf>
f011f3f4:	83 c4 10             	add    $0x10,%esp
			*numOfInstances = 0; //to indicate the failure of test
f011f3f7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f3fa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f011f400:	eb 3c                	jmp    f011f43e <sys_utilities+0x27a>
		}
		else
		{
			cprintf("####################################################\n");
f011f402:	83 ec 0c             	sub    $0xc,%esp
f011f405:	68 cc d7 12 f0       	push   $0xf012d7cc
f011f40a:	e8 5d 1b fe ff       	call   f0100f6c <cprintf>
f011f40f:	83 c4 10             	add    $0x10,%esp
			cprintf("%s: check exit order is SUCCEEDED\n", progName);
f011f412:	83 ec 08             	sub    $0x8,%esp
f011f415:	ff 75 d8             	pushl  -0x28(%ebp)
f011f418:	68 04 d8 12 f0       	push   $0xf012d804
f011f41d:	e8 4a 1b fe ff       	call   f0100f6c <cprintf>
f011f422:	83 c4 10             	add    $0x10,%esp
			cprintf("####################################################\n");
f011f425:	83 ec 0c             	sub    $0xc,%esp
f011f428:	68 cc d7 12 f0       	push   $0xf012d7cc
f011f42d:	e8 3a 1b fe ff       	call   f0100f6c <cprintf>
f011f432:	83 c4 10             	add    $0x10,%esp
			*numOfInstances = 1; //to indicate the success of test
f011f435:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f438:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
		}
	}
	if ((int)value < 0)
f011f43e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f011f442:	79 5b                	jns    f011f49f <sys_utilities+0x2db>
	{
		if (strcmp(utilityName, "__ReplStrat__") == 0)
f011f444:	83 ec 08             	sub    $0x8,%esp
f011f447:	68 27 d8 12 f0       	push   $0xf012d827
f011f44c:	ff 75 08             	pushl  0x8(%ebp)
f011f44f:	e8 42 15 00 00       	call   f0120996 <strcmp>
f011f454:	83 c4 10             	add    $0x10,%esp
f011f457:	85 c0                	test   %eax,%eax
f011f459:	75 44                	jne    f011f49f <sys_utilities+0x2db>
		{
			switch (value)
f011f45b:	8b 45 0c             	mov    0xc(%ebp),%eax
f011f45e:	83 f8 fc             	cmp    $0xfffffffc,%eax
f011f461:	74 07                	je     f011f46a <sys_utilities+0x2a6>
f011f463:	83 f8 fe             	cmp    $0xfffffffe,%eax
f011f466:	74 19                	je     f011f481 <sys_utilities+0x2bd>
			case -PG_REP_LRU_LISTS_APPROX:
				cprintf("\n*************************************\nPAGE REPLACEMENT IS SET TO LRU LISTS.\n*************************************\n");
				setPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX);
				break;
			default:
				break;
f011f468:	eb 35                	jmp    f011f49f <sys_utilities+0x2db>
		if (strcmp(utilityName, "__ReplStrat__") == 0)
		{
			switch (value)
			{
			case -PG_REP_FIFO:
				cprintf("\n*************************************\nPAGE REPLACEMENT IS SET TO FIFO.\n*************************************\n");
f011f46a:	83 ec 0c             	sub    $0xc,%esp
f011f46d:	68 38 d8 12 f0       	push   $0xf012d838
f011f472:	e8 f5 1a fe ff       	call   f0100f6c <cprintf>
f011f477:	83 c4 10             	add    $0x10,%esp
				setPageReplacmentAlgorithmFIFO();
f011f47a:	e8 ff f1 fe ff       	call   f010e67e <setPageReplacmentAlgorithmFIFO>
				break;
f011f47f:	eb 1e                	jmp    f011f49f <sys_utilities+0x2db>
			case -PG_REP_LRU_LISTS_APPROX:
				cprintf("\n*************************************\nPAGE REPLACEMENT IS SET TO LRU LISTS.\n*************************************\n");
f011f481:	83 ec 0c             	sub    $0xc,%esp
f011f484:	68 a8 d8 12 f0       	push   $0xf012d8a8
f011f489:	e8 de 1a fe ff       	call   f0100f6c <cprintf>
f011f48e:	83 c4 10             	add    $0x10,%esp
				setPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX);
f011f491:	83 ec 0c             	sub    $0xc,%esp
f011f494:	6a 02                	push   $0x2
f011f496:	e8 a0 f1 fe ff       	call   f010e63b <setPageReplacmentAlgorithmLRU>
f011f49b:	83 c4 10             	add    $0x10,%esp
				break;
f011f49e:	90                   	nop
			}
		}
	}
	/*****************************************************************************************/

}
f011f49f:	90                   	nop
f011f4a0:	c9                   	leave  
f011f4a1:	c3                   	ret    

f011f4a2 <detect_loop_in_FrameInfo_list>:
/*=======================================*/
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f011f4a2:	55                   	push   %ebp
f011f4a3:	89 e5                	mov    %esp,%ebp
f011f4a5:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f011f4a8:	8b 45 08             	mov    0x8(%ebp),%eax
f011f4ab:	8b 00                	mov    (%eax),%eax
f011f4ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f011f4b0:	8b 45 08             	mov    0x8(%ebp),%eax
f011f4b3:	8b 00                	mov    (%eax),%eax
f011f4b5:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f011f4b8:	eb 52                	jmp    f011f50c <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f011f4ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f4bd:	8b 00                	mov    (%eax),%eax
f011f4bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f011f4c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f4c5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f4c8:	75 12                	jne    f011f4dc <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f011f4ca:	83 ec 0c             	sub    $0xc,%esp
f011f4cd:	68 1c d9 12 f0       	push   $0xf012d91c
f011f4d2:	e8 95 1a fe ff       	call   f0100f6c <cprintf>
f011f4d7:	83 c4 10             	add    $0x10,%esp
			break;
f011f4da:	eb 3f                	jmp    f011f51b <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f011f4dc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011f4e0:	74 38                	je     f011f51a <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f011f4e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f4e5:	8b 00                	mov    (%eax),%eax
f011f4e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f011f4ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f4ed:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f4f0:	75 12                	jne    f011f504 <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f011f4f2:	83 ec 0c             	sub    $0xc,%esp
f011f4f5:	68 38 d9 12 f0       	push   $0xf012d938
f011f4fa:	e8 6d 1a fe ff       	call   f0100f6c <cprintf>
f011f4ff:	83 c4 10             	add    $0x10,%esp
			break;
f011f502:	eb 17                	jmp    f011f51b <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f011f504:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011f507:	8b 00                	mov    (%eax),%eax
f011f509:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f011f50c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f011f510:	74 09                	je     f011f51b <detect_loop_in_FrameInfo_list+0x79>
f011f512:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011f516:	75 a2                	jne    f011f4ba <detect_loop_in_FrameInfo_list+0x18>
f011f518:	eb 01                	jmp    f011f51b <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f011f51a:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f011f51b:	83 ec 0c             	sub    $0xc,%esp
f011f51e:	68 4f d9 12 f0       	push   $0xf012d94f
f011f523:	e8 44 1a fe ff       	call   f0100f6c <cprintf>
f011f528:	83 c4 10             	add    $0x10,%esp
}
f011f52b:	90                   	nop
f011f52c:	c9                   	leave  
f011f52d:	c3                   	ret    

f011f52e <scarce_memory>:

void scarce_memory()
{
f011f52e:	55                   	push   %ebp
f011f52f:	89 e5                	mov    %esp,%ebp
f011f531:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f011f534:	a1 e0 4b 55 f0       	mov    0xf0554be0,%eax
f011f539:	ba 64 00 00 00       	mov    $0x64,%edx
f011f53e:	29 c2                	sub    %eax,%edx
f011f540:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f011f545:	0f af c2             	imul   %edx,%eax
f011f548:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f011f54d:	f7 e2                	mul    %edx
f011f54f:	89 d0                	mov    %edx,%eax
f011f551:	c1 e8 05             	shr    $0x5,%eax
f011f554:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f011f557:	a1 e0 4b 55 f0       	mov    0xf0554be0,%eax
f011f55c:	ba 64 00 00 00       	mov    $0x64,%edx
f011f561:	29 c2                	sub    %eax,%edx
f011f563:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f011f568:	89 d1                	mov    %edx,%ecx
f011f56a:	0f af c8             	imul   %eax,%ecx
f011f56d:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f011f572:	f7 e1                	mul    %ecx
f011f574:	c1 ea 05             	shr    $0x5,%edx
f011f577:	89 d0                	mov    %edx,%eax
f011f579:	c1 e0 02             	shl    $0x2,%eax
f011f57c:	01 d0                	add    %edx,%eax
f011f57e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011f585:	01 d0                	add    %edx,%eax
f011f587:	c1 e0 02             	shl    $0x2,%eax
f011f58a:	29 c1                	sub    %eax,%ecx
f011f58c:	89 ca                	mov    %ecx,%edx
f011f58e:	85 d2                	test   %edx,%edx
f011f590:	74 03                	je     f011f595 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f011f592:	ff 45 f4             	incl   -0xc(%ebp)

	int fflSize = 0;
f011f595:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	acquire_spinlock(&MemFrameLists.mfllock);
f011f59c:	83 ec 0c             	sub    $0xc,%esp
f011f59f:	68 40 25 55 f0       	push   $0xf0552540
f011f5a4:	e8 2e f5 fe ff       	call   f010ead7 <acquire_spinlock>
f011f5a9:	83 c4 10             	add    $0x10,%esp
	{
		fflSize = LIST_SIZE(&MemFrameLists.free_frame_list);
f011f5ac:	a1 2c 25 55 f0       	mov    0xf055252c,%eax
f011f5b1:	89 45 ec             	mov    %eax,-0x14(%ebp)

		uint32 size_of_already_allocated = number_of_frames - fflSize ;
f011f5b4:	8b 15 b8 4c 55 f0    	mov    0xf0554cb8,%edx
f011f5ba:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011f5bd:	29 c2                	sub    %eax,%edx
f011f5bf:	89 d0                	mov    %edx,%eax
f011f5c1:	89 45 e8             	mov    %eax,-0x18(%ebp)
		uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f011f5c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011f5c7:	2b 45 e8             	sub    -0x18(%ebp),%eax
f011f5ca:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
		//	cprintf("size to be allocated %d\n", size_tobe_allocated);
		int i = 0 ;
f011f5cd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		struct FrameInfo* ptr_tmp_FI ;
		for (; i <= size_tobe_allocated ; i++)
f011f5d4:	eb 12                	jmp    f011f5e8 <scarce_memory+0xba>
		{
			allocate_frame(&ptr_tmp_FI) ;
f011f5d6:	83 ec 0c             	sub    $0xc,%esp
f011f5d9:	8d 45 e0             	lea    -0x20(%ebp),%eax
f011f5dc:	50                   	push   %eax
f011f5dd:	e8 ee 8b fe ff       	call   f01081d0 <allocate_frame>
f011f5e2:	83 c4 10             	add    $0x10,%esp
		uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
		//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
		//	cprintf("size to be allocated %d\n", size_tobe_allocated);
		int i = 0 ;
		struct FrameInfo* ptr_tmp_FI ;
		for (; i <= size_tobe_allocated ; i++)
f011f5e5:	ff 45 f0             	incl   -0x10(%ebp)
f011f5e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f5eb:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011f5ee:	76 e6                	jbe    f011f5d6 <scarce_memory+0xa8>
		{
			allocate_frame(&ptr_tmp_FI) ;
		}
	}
	release_spinlock(&MemFrameLists.mfllock);
f011f5f0:	83 ec 0c             	sub    $0xc,%esp
f011f5f3:	68 40 25 55 f0       	push   $0xf0552540
f011f5f8:	e8 61 f5 fe ff       	call   f010eb5e <release_spinlock>
f011f5fd:	83 c4 10             	add    $0x10,%esp

}
f011f600:	90                   	nop
f011f601:	c9                   	leave  
f011f602:	c3                   	ret    

f011f603 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f011f603:	55                   	push   %ebp
f011f604:	89 e5                	mov    %esp,%ebp
f011f606:	83 ec 48             	sub    $0x48,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f011f609:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f011f610:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f011f617:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	struct Env* cur_env = get_cpu_proc();
f011f61e:	e8 4d b1 fe ff       	call   f010a770 <get_cpu_proc>
f011f623:	89 45 d0             	mov    %eax,-0x30(%ebp)
	assert(cur_env != NULL);
f011f626:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
f011f62a:	75 19                	jne    f011f645 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x42>
f011f62c:	68 69 d9 12 f0       	push   $0xf012d969
f011f631:	68 97 d6 12 f0       	push   $0xf012d697
f011f636:	68 38 01 00 00       	push   $0x138
f011f63b:	68 df d6 12 f0       	push   $0xf012d6df
f011f640:	e8 d5 0c fe ff       	call   f010031a <_panic>
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f011f645:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f011f649:	0f 85 f7 01 00 00    	jne    f011f846 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x243>
	{
		acquire_spinlock(&ProcessQueues.qlock);
f011f64f:	83 ec 0c             	sub    $0xc,%esp
f011f652:	68 60 24 55 f0       	push   $0xf0552460
f011f657:	e8 7b f4 fe ff       	call   f010ead7 <acquire_spinlock>
f011f65c:	83 c4 10             	add    $0x10,%esp
		{
			for(int i = 0; i < num_of_ready_queues; i++)
f011f65f:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f011f666:	e9 e9 00 00 00       	jmp    f011f754 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x151>
			{
				struct Env * ptr_ready_env = NULL;
f011f66b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
				LIST_FOREACH(ptr_ready_env, &(ProcessQueues.env_ready_queues[i]))
f011f672:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011f675:	83 c0 09             	add    $0x9,%eax
f011f678:	c1 e0 04             	shl    $0x4,%eax
f011f67b:	05 60 24 55 f0       	add    $0xf0552460,%eax
f011f680:	8b 00                	mov    (%eax),%eax
f011f682:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f011f685:	e9 81 00 00 00       	jmp    f011f70b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x108>
				{
#if USE_KHEAP
					int num_of_pages_in_WS = LIST_SIZE(&(ptr_ready_env->page_WS_list));
#else
					int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f011f68a:	83 ec 0c             	sub    $0xc,%esp
f011f68d:	ff 75 e4             	pushl  -0x1c(%ebp)
f011f690:	e8 c9 96 fe ff       	call   f0108d5e <env_page_ws_get_size>
f011f695:	83 c4 10             	add    $0x10,%esp
f011f698:	89 45 cc             	mov    %eax,-0x34(%ebp)
#endif
					int num_of_pages_to_be_removed = cur_env->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f011f69b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011f69e:	8b 90 3c da 01 00    	mov    0x1da3c(%eax),%edx
f011f6a4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011f6a7:	0f af c2             	imul   %edx,%eax
f011f6aa:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f011f6af:	f7 e2                	mul    %edx
f011f6b1:	89 d0                	mov    %edx,%eax
f011f6b3:	c1 e8 05             	shr    $0x5,%eax
f011f6b6:	89 45 e0             	mov    %eax,-0x20(%ebp)
					if ((cur_env->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f011f6b9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011f6bc:	8b 90 3c da 01 00    	mov    0x1da3c(%eax),%edx
f011f6c2:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011f6c5:	89 d1                	mov    %edx,%ecx
f011f6c7:	0f af c8             	imul   %eax,%ecx
f011f6ca:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f011f6cf:	f7 e1                	mul    %ecx
f011f6d1:	c1 ea 05             	shr    $0x5,%edx
f011f6d4:	89 d0                	mov    %edx,%eax
f011f6d6:	c1 e0 02             	shl    $0x2,%eax
f011f6d9:	01 d0                	add    %edx,%eax
f011f6db:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011f6e2:	01 d0                	add    %edx,%eax
f011f6e4:	c1 e0 02             	shl    $0x2,%eax
f011f6e7:	29 c1                	sub    %eax,%ecx
f011f6e9:	89 ca                	mov    %ecx,%edx
f011f6eb:	85 d2                	test   %edx,%edx
f011f6ed:	74 03                	je     f011f6f2 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xef>
						num_of_pages_to_be_removed++;
f011f6ef:	ff 45 e0             	incl   -0x20(%ebp)
					no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f011f6f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011f6f5:	01 45 f4             	add    %eax,-0xc(%ebp)
		acquire_spinlock(&ProcessQueues.qlock);
		{
			for(int i = 0; i < num_of_ready_queues; i++)
			{
				struct Env * ptr_ready_env = NULL;
				LIST_FOREACH(ptr_ready_env, &(ProcessQueues.env_ready_queues[i]))
f011f6f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011f6fb:	83 c0 09             	add    $0x9,%eax
f011f6fe:	c1 e0 04             	shl    $0x4,%eax
f011f701:	05 68 24 55 f0       	add    $0xf0552468,%eax
f011f706:	8b 00                	mov    (%eax),%eax
f011f708:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f011f70b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011f70f:	74 08                	je     f011f719 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x116>
f011f711:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011f714:	8b 40 08             	mov    0x8(%eax),%eax
f011f717:	eb 05                	jmp    f011f71e <calc_no_pages_tobe_removed_from_ready_exit_queues+0x11b>
f011f719:	b8 00 00 00 00       	mov    $0x0,%eax
f011f71e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f011f721:	83 c2 09             	add    $0x9,%edx
f011f724:	c1 e2 04             	shl    $0x4,%edx
f011f727:	81 c2 68 24 55 f0    	add    $0xf0552468,%edx
f011f72d:	89 02                	mov    %eax,(%edx)
f011f72f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011f732:	83 c0 09             	add    $0x9,%eax
f011f735:	c1 e0 04             	shl    $0x4,%eax
f011f738:	05 68 24 55 f0       	add    $0xf0552468,%eax
f011f73d:	8b 00                	mov    (%eax),%eax
f011f73f:	85 c0                	test   %eax,%eax
f011f741:	0f 85 43 ff ff ff    	jne    f011f68a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x87>
f011f747:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f011f74b:	0f 85 39 ff ff ff    	jne    f011f68a <calc_no_pages_tobe_removed_from_ready_exit_queues+0x87>
	assert(cur_env != NULL);
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		acquire_spinlock(&ProcessQueues.qlock);
		{
			for(int i = 0; i < num_of_ready_queues; i++)
f011f751:	ff 45 e8             	incl   -0x18(%ebp)
f011f754:	a0 60 51 55 f0       	mov    0xf0555160,%al
f011f759:	0f b6 c0             	movzbl %al,%eax
f011f75c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011f75f:	0f 8f 06 ff ff ff    	jg     f011f66b <calc_no_pages_tobe_removed_from_ready_exit_queues+0x68>
						num_of_pages_to_be_removed++;
					no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
				}
			}

			struct Env * ptr_exit_env = NULL;
f011f765:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			LIST_FOREACH(ptr_exit_env, &ProcessQueues.env_exit_queue)
f011f76c:	a1 e0 24 55 f0       	mov    0xf05524e0,%eax
f011f771:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011f774:	eb 1f                	jmp    f011f795 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x192>
			{
#if USE_KHEAP
				int num_of_pages_in_WS = LIST_SIZE(&(ptr_exit_env->page_WS_list));
#else
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_exit_env);
f011f776:	83 ec 0c             	sub    $0xc,%esp
f011f779:	ff 75 dc             	pushl  -0x24(%ebp)
f011f77c:	e8 dd 95 fe ff       	call   f0108d5e <env_page_ws_get_size>
f011f781:	83 c4 10             	add    $0x10,%esp
f011f784:	89 45 c8             	mov    %eax,-0x38(%ebp)
#endif
				no_of_pages_tobe_removed_from_exit += num_of_pages_in_WS;
f011f787:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011f78a:	01 45 f0             	add    %eax,-0x10(%ebp)
					no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
				}
			}

			struct Env * ptr_exit_env = NULL;
			LIST_FOREACH(ptr_exit_env, &ProcessQueues.env_exit_queue)
f011f78d:	a1 e8 24 55 f0       	mov    0xf05524e8,%eax
f011f792:	89 45 dc             	mov    %eax,-0x24(%ebp)
f011f795:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011f799:	74 08                	je     f011f7a3 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1a0>
f011f79b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011f79e:	8b 40 08             	mov    0x8(%eax),%eax
f011f7a1:	eb 05                	jmp    f011f7a8 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1a5>
f011f7a3:	b8 00 00 00 00       	mov    $0x0,%eax
f011f7a8:	a3 e8 24 55 f0       	mov    %eax,0xf05524e8
f011f7ad:	a1 e8 24 55 f0       	mov    0xf05524e8,%eax
f011f7b2:	85 c0                	test   %eax,%eax
f011f7b4:	75 c0                	jne    f011f776 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x173>
f011f7b6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011f7ba:	75 ba                	jne    f011f776 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x173>
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_exit_env);
#endif
				no_of_pages_tobe_removed_from_exit += num_of_pages_in_WS;
			}
		}
		release_spinlock(&ProcessQueues.qlock);
f011f7bc:	83 ec 0c             	sub    $0xc,%esp
f011f7bf:	68 60 24 55 f0       	push   $0xf0552460
f011f7c4:	e8 95 f3 fe ff       	call   f010eb5e <release_spinlock>
f011f7c9:	83 c4 10             	add    $0x10,%esp
		if(cur_env != NULL)
f011f7cc:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
f011f7d0:	0f 84 de 00 00 00    	je     f011f8b4 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x2b1>
		{
#if USE_KHEAP
			int num_of_pages_in_WS = LIST_SIZE(&(cur_env->page_WS_list));
#else
			int num_of_pages_in_WS = env_page_ws_get_size(cur_env);
f011f7d6:	83 ec 0c             	sub    $0xc,%esp
f011f7d9:	ff 75 d0             	pushl  -0x30(%ebp)
f011f7dc:	e8 7d 95 fe ff       	call   f0108d5e <env_page_ws_get_size>
f011f7e1:	83 c4 10             	add    $0x10,%esp
f011f7e4:	89 45 c4             	mov    %eax,-0x3c(%ebp)
#endif
			int num_of_pages_to_be_removed = cur_env->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f011f7e7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011f7ea:	8b 90 3c da 01 00    	mov    0x1da3c(%eax),%edx
f011f7f0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f7f3:	0f af c2             	imul   %edx,%eax
f011f7f6:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f011f7fb:	f7 e2                	mul    %edx
f011f7fd:	89 d0                	mov    %edx,%eax
f011f7ff:	c1 e8 05             	shr    $0x5,%eax
f011f802:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((cur_env->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f011f805:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011f808:	8b 90 3c da 01 00    	mov    0x1da3c(%eax),%edx
f011f80e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f811:	89 d1                	mov    %edx,%ecx
f011f813:	0f af c8             	imul   %eax,%ecx
f011f816:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f011f81b:	f7 e1                	mul    %ecx
f011f81d:	c1 ea 05             	shr    $0x5,%edx
f011f820:	89 d0                	mov    %edx,%eax
f011f822:	c1 e0 02             	shl    $0x2,%eax
f011f825:	01 d0                	add    %edx,%eax
f011f827:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011f82e:	01 d0                	add    %edx,%eax
f011f830:	c1 e0 02             	shl    $0x2,%eax
f011f833:	29 c1                	sub    %eax,%ecx
f011f835:	89 ca                	mov    %ecx,%edx
f011f837:	85 d2                	test   %edx,%edx
f011f839:	74 03                	je     f011f83e <calc_no_pages_tobe_removed_from_ready_exit_queues+0x23b>
				num_of_pages_to_be_removed++;
f011f83b:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f011f83e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011f841:	89 45 ec             	mov    %eax,-0x14(%ebp)
f011f844:	eb 6e                	jmp    f011f8b4 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x2b1>
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
#if USE_KHEAP
		int num_of_pages_in_WS = LIST_SIZE(&(cur_env->page_WS_list));
#else
		int num_of_pages_in_WS = env_page_ws_get_size(cur_env);
f011f846:	83 ec 0c             	sub    $0xc,%esp
f011f849:	ff 75 d0             	pushl  -0x30(%ebp)
f011f84c:	e8 0d 95 fe ff       	call   f0108d5e <env_page_ws_get_size>
f011f851:	83 c4 10             	add    $0x10,%esp
f011f854:	89 45 c0             	mov    %eax,-0x40(%ebp)
#endif
		int num_of_pages_to_be_removed = cur_env->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f011f857:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011f85a:	8b 90 3c da 01 00    	mov    0x1da3c(%eax),%edx
f011f860:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f863:	0f af c2             	imul   %edx,%eax
f011f866:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f011f86b:	f7 e2                	mul    %edx
f011f86d:	89 d0                	mov    %edx,%eax
f011f86f:	c1 e8 05             	shr    $0x5,%eax
f011f872:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((cur_env->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f011f875:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011f878:	8b 90 3c da 01 00    	mov    0x1da3c(%eax),%edx
f011f87e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f881:	89 d1                	mov    %edx,%ecx
f011f883:	0f af c8             	imul   %eax,%ecx
f011f886:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f011f88b:	f7 e1                	mul    %ecx
f011f88d:	c1 ea 05             	shr    $0x5,%edx
f011f890:	89 d0                	mov    %edx,%eax
f011f892:	c1 e0 02             	shl    $0x2,%eax
f011f895:	01 d0                	add    %edx,%eax
f011f897:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011f89e:	01 d0                	add    %edx,%eax
f011f8a0:	c1 e0 02             	shl    $0x2,%eax
f011f8a3:	29 c1                	sub    %eax,%ecx
f011f8a5:	89 ca                	mov    %ecx,%edx
f011f8a7:	85 d2                	test   %edx,%edx
f011f8a9:	74 03                	je     f011f8ae <calc_no_pages_tobe_removed_from_ready_exit_queues+0x2ab>
			num_of_pages_to_be_removed++;
f011f8ab:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f011f8ae:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011f8b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f011f8b4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f011f8b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011f8ba:	01 c2                	add    %eax,%edx
f011f8bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f8bf:	01 d0                	add    %edx,%eax
}
f011f8c1:	c9                   	leave  
f011f8c2:	c3                   	ret    

f011f8c3 <schenv>:


void schenv()
{
f011f8c3:	55                   	push   %ebp
f011f8c4:	89 e5                	mov    %esp,%ebp
f011f8c6:	83 ec 18             	sub    $0x18,%esp

	__nl = 0;
f011f8c9:	c6 05 e0 51 55 f0 00 	movb   $0x0,0xf05551e0
	__ne = NULL;
f011f8d0:	c7 05 0c 4f 55 f0 00 	movl   $0x0,0xf0554f0c
f011f8d7:	00 00 00 
	acquire_spinlock(&ProcessQueues.qlock);
f011f8da:	83 ec 0c             	sub    $0xc,%esp
f011f8dd:	68 60 24 55 f0       	push   $0xf0552460
f011f8e2:	e8 f0 f1 fe ff       	call   f010ead7 <acquire_spinlock>
f011f8e7:	83 c4 10             	add    $0x10,%esp
	{
		for (int i = 0; i < num_of_ready_queues; ++i)
f011f8ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f8f1:	eb 40                	jmp    f011f933 <schenv+0x70>
		{
			if (queue_size(&(ProcessQueues.env_ready_queues[i])))
f011f8f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011f8f6:	83 c0 09             	add    $0x9,%eax
f011f8f9:	c1 e0 04             	shl    $0x4,%eax
f011f8fc:	05 60 24 55 f0       	add    $0xf0552460,%eax
f011f901:	83 ec 0c             	sub    $0xc,%esp
f011f904:	50                   	push   %eax
f011f905:	e8 56 56 fe ff       	call   f0104f60 <queue_size>
f011f90a:	83 c4 10             	add    $0x10,%esp
f011f90d:	85 c0                	test   %eax,%eax
f011f90f:	74 1f                	je     f011f930 <schenv+0x6d>
			{
				__ne = LIST_LAST(&(ProcessQueues.env_ready_queues[i]));
f011f911:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011f914:	83 c0 09             	add    $0x9,%eax
f011f917:	c1 e0 04             	shl    $0x4,%eax
f011f91a:	05 64 24 55 f0       	add    $0xf0552464,%eax
f011f91f:	8b 00                	mov    (%eax),%eax
f011f921:	a3 0c 4f 55 f0       	mov    %eax,0xf0554f0c
				__nl = i;
f011f926:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011f929:	a2 e0 51 55 f0       	mov    %al,0xf05551e0
				break;
f011f92e:	eb 10                	jmp    f011f940 <schenv+0x7d>

	__nl = 0;
	__ne = NULL;
	acquire_spinlock(&ProcessQueues.qlock);
	{
		for (int i = 0; i < num_of_ready_queues; ++i)
f011f930:	ff 45 f4             	incl   -0xc(%ebp)
f011f933:	a0 60 51 55 f0       	mov    0xf0555160,%al
f011f938:	0f b6 c0             	movzbl %al,%eax
f011f93b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f93e:	7f b3                	jg     f011f8f3 <schenv+0x30>
				__nl = i;
				break;
			}
		}
	}
	release_spinlock(&ProcessQueues.qlock);
f011f940:	83 ec 0c             	sub    $0xc,%esp
f011f943:	68 60 24 55 f0       	push   $0xf0552460
f011f948:	e8 11 f2 fe ff       	call   f010eb5e <release_spinlock>
f011f94d:	83 c4 10             	add    $0x10,%esp
	struct Env* cur_env = get_cpu_proc();
f011f950:	e8 1b ae fe ff       	call   f010a770 <get_cpu_proc>
f011f955:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (cur_env != NULL)
f011f958:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011f95c:	0f 84 82 00 00 00    	je     f011f9e4 <schenv+0x121>
	{
		if (__ne != NULL)
f011f962:	a1 0c 4f 55 f0       	mov    0xf0554f0c,%eax
f011f967:	85 c0                	test   %eax,%eax
f011f969:	74 49                	je     f011f9b4 <schenv+0xf1>
		{
			if ((__pl + 1) < __nl)
f011f96b:	a0 51 24 55 f0       	mov    0xf0552451,%al
f011f970:	0f b6 c0             	movzbl %al,%eax
f011f973:	8d 50 01             	lea    0x1(%eax),%edx
f011f976:	a0 e0 51 55 f0       	mov    0xf05551e0,%al
f011f97b:	0f b6 c0             	movzbl %al,%eax
f011f97e:	39 c2                	cmp    %eax,%edx
f011f980:	7d 62                	jge    f011f9e4 <schenv+0x121>
			{
				__ne = cur_env;
f011f982:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f985:	a3 0c 4f 55 f0       	mov    %eax,0xf0554f0c
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f011f98a:	a0 51 24 55 f0       	mov    0xf0552451,%al
f011f98f:	0f b6 c0             	movzbl %al,%eax
f011f992:	8a 15 60 51 55 f0    	mov    0xf0555160,%dl
f011f998:	0f b6 d2             	movzbl %dl,%edx
f011f99b:	4a                   	dec    %edx
f011f99c:	39 d0                	cmp    %edx,%eax
f011f99e:	7d 08                	jge    f011f9a8 <schenv+0xe5>
f011f9a0:	a0 51 24 55 f0       	mov    0xf0552451,%al
f011f9a5:	40                   	inc    %eax
f011f9a6:	eb 05                	jmp    f011f9ad <schenv+0xea>
f011f9a8:	a0 51 24 55 f0       	mov    0xf0552451,%al
f011f9ad:	a2 e0 51 55 f0       	mov    %al,0xf05551e0
		{
			__ne = cur_env;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f011f9b2:	eb 30                	jmp    f011f9e4 <schenv+0x121>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = cur_env;
f011f9b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f9b7:	a3 0c 4f 55 f0       	mov    %eax,0xf0554f0c
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f011f9bc:	a0 51 24 55 f0       	mov    0xf0552451,%al
f011f9c1:	0f b6 c0             	movzbl %al,%eax
f011f9c4:	8a 15 60 51 55 f0    	mov    0xf0555160,%dl
f011f9ca:	0f b6 d2             	movzbl %dl,%edx
f011f9cd:	4a                   	dec    %edx
f011f9ce:	39 d0                	cmp    %edx,%eax
f011f9d0:	7d 08                	jge    f011f9da <schenv+0x117>
f011f9d2:	a0 51 24 55 f0       	mov    0xf0552451,%al
f011f9d7:	40                   	inc    %eax
f011f9d8:	eb 05                	jmp    f011f9df <schenv+0x11c>
f011f9da:	a0 51 24 55 f0       	mov    0xf0552451,%al
f011f9df:	a2 e0 51 55 f0       	mov    %al,0xf05551e0
		}
	}
}
f011f9e4:	90                   	nop
f011f9e5:	c9                   	leave  
f011f9e6:	c3                   	ret    

f011f9e7 <chksch>:

void chksch(uint8 onoff)
{
f011f9e7:	55                   	push   %ebp
f011f9e8:	89 e5                	mov    %esp,%ebp
f011f9ea:	83 ec 18             	sub    $0x18,%esp
f011f9ed:	8b 45 08             	mov    0x8(%ebp),%eax
f011f9f0:	88 45 f4             	mov    %al,-0xc(%ebp)
	//		__pl = 0 ;
	//		__nl = 0 ;
	//	}

	/*TEST BSD*/
	if (isSchedMethodBSD())
f011f9f3:	e8 3b 6d fe ff       	call   f0106733 <isSchedMethodBSD>
f011f9f8:	85 c0                	test   %eax,%eax
f011f9fa:	74 48                	je     f011fa44 <chksch+0x5d>
	{
		__histla = __pla = get_load_average();
f011f9fc:	e8 e0 6c fe ff       	call   f01066e1 <get_load_average>
f011fa01:	a3 7c 51 55 f0       	mov    %eax,0xf055517c
f011fa06:	a1 7c 51 55 f0       	mov    0xf055517c,%eax
f011fa0b:	a3 bc 4c 55 f0       	mov    %eax,0xf0554cbc
		acquire_spinlock(&ProcessQueues.qlock);
f011fa10:	83 ec 0c             	sub    $0xc,%esp
f011fa13:	68 60 24 55 f0       	push   $0xf0552460
f011fa18:	e8 ba f0 fe ff       	call   f010ead7 <acquire_spinlock>
f011fa1d:	83 c4 10             	add    $0x10,%esp
		{
			__pnexit = LIST_SIZE(&ProcessQueues.env_exit_queue) ;
f011fa20:	a1 ec 24 55 f0       	mov    0xf05524ec,%eax
f011fa25:	a3 c0 25 55 f0       	mov    %eax,0xf05525c0
		}
		release_spinlock(&ProcessQueues.qlock);
f011fa2a:	83 ec 0c             	sub    $0xc,%esp
f011fa2d:	68 60 24 55 f0       	push   $0xf0552460
f011fa32:	e8 27 f1 fe ff       	call   f010eb5e <release_spinlock>
f011fa37:	83 c4 10             	add    $0x10,%esp
		__firsttime = 1;
f011fa3a:	c7 05 1c 4f 55 f0 01 	movl   $0x1,0xf0554f1c
f011fa41:	00 00 00 
	}
	__chkstatus = onoff;
f011fa44:	8a 45 f4             	mov    -0xc(%ebp),%al
f011fa47:	a2 08 4f 55 f0       	mov    %al,0xf0554f08
}
f011fa4c:	90                   	nop
f011fa4d:	c9                   	leave  
f011fa4e:	c3                   	ret    

f011fa4f <chk1>:
void chk1()
{
f011fa4f:	55                   	push   %ebp
f011fa50:	89 e5                	mov    %esp,%ebp
	//			__pl = 0;
	//		}
	//		//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	//		schenv();
	//	}
}
f011fa52:	90                   	nop
f011fa53:	5d                   	pop    %ebp
f011fa54:	c3                   	ret    

f011fa55 <chk2>:
void chk2(struct Env* __se)
{
f011fa55:	55                   	push   %ebp
f011fa56:	89 e5                	mov    %esp,%ebp
f011fa58:	83 ec 28             	sub    $0x28,%esp
	if (__chkstatus == 0)
f011fa5b:	a0 08 4f 55 f0       	mov    0xf0554f08,%al
f011fa60:	84 c0                	test   %al,%al
f011fa62:	0f 84 59 03 00 00    	je     f011fdc1 <chk2+0x36c>
		return ;

	/*TEST BSD*/
	if (isSchedMethodBSD())
f011fa68:	e8 c6 6c fe ff       	call   f0106733 <isSchedMethodBSD>
f011fa6d:	85 c0                	test   %eax,%eax
f011fa6f:	0f 84 4d 03 00 00    	je     f011fdc2 <chk2+0x36d>
	{
		__nla = get_load_average();
f011fa75:	e8 67 6c fe ff       	call   f01066e1 <get_load_average>
f011fa7a:	a3 e4 4b 55 f0       	mov    %eax,0xf0554be4
		acquire_spinlock(&ProcessQueues.qlock);
f011fa7f:	83 ec 0c             	sub    $0xc,%esp
f011fa82:	68 60 24 55 f0       	push   $0xf0552460
f011fa87:	e8 4b f0 fe ff       	call   f010ead7 <acquire_spinlock>
f011fa8c:	83 c4 10             	add    $0x10,%esp
		{
			__nnexit = LIST_SIZE(&ProcessQueues.env_exit_queue);
f011fa8f:	a1 ec 24 55 f0       	mov    0xf05524ec,%eax
f011fa94:	a3 10 4f 55 f0       	mov    %eax,0xf0554f10
		}
		release_spinlock(&ProcessQueues.qlock);
f011fa99:	83 ec 0c             	sub    $0xc,%esp
f011fa9c:	68 60 24 55 f0       	push   $0xf0552460
f011faa1:	e8 b8 f0 fe ff       	call   f010eb5e <release_spinlock>
f011faa6:	83 c4 10             	add    $0x10,%esp

		if (__firsttime)
f011faa9:	a1 1c 4f 55 f0       	mov    0xf0554f1c,%eax
f011faae:	85 c0                	test   %eax,%eax
f011fab0:	74 72                	je     f011fb24 <chk2+0xcf>
		{
			acquire_spinlock(&ProcessQueues.qlock);
f011fab2:	83 ec 0c             	sub    $0xc,%esp
f011fab5:	68 60 24 55 f0       	push   $0xf0552460
f011faba:	e8 18 f0 fe ff       	call   f010ead7 <acquire_spinlock>
f011fabf:	83 c4 10             	add    $0x10,%esp
			{
				//Cnt #Processes
				__nproc = __se != NULL? 1 : 0;
f011fac2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f011fac6:	0f 95 c0             	setne  %al
f011fac9:	0f b6 c0             	movzbl %al,%eax
f011facc:	a3 d4 50 55 f0       	mov    %eax,0xf05550d4
				for (int l = num_of_ready_queues-1; l >= 0; --l)
f011fad1:	a0 60 51 55 f0       	mov    0xf0555160,%al
f011fad6:	0f b6 c0             	movzbl %al,%eax
f011fad9:	48                   	dec    %eax
f011fada:	89 45 f4             	mov    %eax,-0xc(%ebp)
f011fadd:	eb 20                	jmp    f011faff <chk2+0xaa>
				{
					__nproc += LIST_SIZE(&(ProcessQueues.env_ready_queues[l]));
f011fadf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011fae2:	83 c0 09             	add    $0x9,%eax
f011fae5:	c1 e0 04             	shl    $0x4,%eax
f011fae8:	05 6c 24 55 f0       	add    $0xf055246c,%eax
f011faed:	8b 00                	mov    (%eax),%eax
f011faef:	8b 15 d4 50 55 f0    	mov    0xf05550d4,%edx
f011faf5:	01 d0                	add    %edx,%eax
f011faf7:	a3 d4 50 55 f0       	mov    %eax,0xf05550d4
		{
			acquire_spinlock(&ProcessQueues.qlock);
			{
				//Cnt #Processes
				__nproc = __se != NULL? 1 : 0;
				for (int l = num_of_ready_queues-1; l >= 0; --l)
f011fafc:	ff 4d f4             	decl   -0xc(%ebp)
f011faff:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f011fb03:	79 da                	jns    f011fadf <chk2+0x8a>
				{
					__nproc += LIST_SIZE(&(ProcessQueues.env_ready_queues[l]));
				}
				__firsttime = 0;
f011fb05:	c7 05 1c 4f 55 f0 00 	movl   $0x0,0xf0554f1c
f011fb0c:	00 00 00 
			}
			release_spinlock(&ProcessQueues.qlock);
f011fb0f:	83 ec 0c             	sub    $0xc,%esp
f011fb12:	68 60 24 55 f0       	push   $0xf0552460
f011fb17:	e8 42 f0 fe ff       	call   f010eb5e <release_spinlock>
f011fb1c:	83 c4 10             	add    $0x10,%esp
f011fb1f:	e9 91 02 00 00       	jmp    f011fdb5 <chk2+0x360>
		}
		else
		{
			if (__pnexit != __nnexit)
f011fb24:	8b 15 c0 25 55 f0    	mov    0xf05525c0,%edx
f011fb2a:	a1 10 4f 55 f0       	mov    0xf0554f10,%eax
f011fb2f:	39 c2                	cmp    %eax,%edx
f011fb31:	74 63                	je     f011fb96 <chk2+0x141>
			{
				acquire_spinlock(&ProcessQueues.qlock);
f011fb33:	83 ec 0c             	sub    $0xc,%esp
f011fb36:	68 60 24 55 f0       	push   $0xf0552460
f011fb3b:	e8 97 ef fe ff       	call   f010ead7 <acquire_spinlock>
f011fb40:	83 c4 10             	add    $0x10,%esp
				{
					//Cnt #Processes
					__nproc = __se != NULL? 1 : 0;
f011fb43:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f011fb47:	0f 95 c0             	setne  %al
f011fb4a:	0f b6 c0             	movzbl %al,%eax
f011fb4d:	a3 d4 50 55 f0       	mov    %eax,0xf05550d4
					for (int l = num_of_ready_queues-1; l >= 0; --l)
f011fb52:	a0 60 51 55 f0       	mov    0xf0555160,%al
f011fb57:	0f b6 c0             	movzbl %al,%eax
f011fb5a:	48                   	dec    %eax
f011fb5b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011fb5e:	eb 20                	jmp    f011fb80 <chk2+0x12b>
					{
						__nproc += LIST_SIZE(&(ProcessQueues.env_ready_queues[l]));
f011fb60:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011fb63:	83 c0 09             	add    $0x9,%eax
f011fb66:	c1 e0 04             	shl    $0x4,%eax
f011fb69:	05 6c 24 55 f0       	add    $0xf055246c,%eax
f011fb6e:	8b 00                	mov    (%eax),%eax
f011fb70:	8b 15 d4 50 55 f0    	mov    0xf05550d4,%edx
f011fb76:	01 d0                	add    %edx,%eax
f011fb78:	a3 d4 50 55 f0       	mov    %eax,0xf05550d4
			{
				acquire_spinlock(&ProcessQueues.qlock);
				{
					//Cnt #Processes
					__nproc = __se != NULL? 1 : 0;
					for (int l = num_of_ready_queues-1; l >= 0; --l)
f011fb7d:	ff 4d f0             	decl   -0x10(%ebp)
f011fb80:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f011fb84:	79 da                	jns    f011fb60 <chk2+0x10b>
					{
						__nproc += LIST_SIZE(&(ProcessQueues.env_ready_queues[l]));
					}
				}
				release_spinlock(&ProcessQueues.qlock);
f011fb86:	83 ec 0c             	sub    $0xc,%esp
f011fb89:	68 60 24 55 f0       	push   $0xf0552460
f011fb8e:	e8 cb ef fe ff       	call   f010eb5e <release_spinlock>
f011fb93:	83 c4 10             	add    $0x10,%esp
			}

			//Make sure that the la is changed over long period of time
			if (timer_ticks() % 1000 == 0)
f011fb96:	e8 df 6a fe ff       	call   f010667a <timer_ticks>
f011fb9b:	6a 00                	push   $0x0
f011fb9d:	68 e8 03 00 00       	push   $0x3e8
f011fba2:	52                   	push   %edx
f011fba3:	50                   	push   %eax
f011fba4:	e8 3b 1a 00 00       	call   f01215e4 <__moddi3>
f011fba9:	83 c4 10             	add    $0x10,%esp
f011fbac:	09 d0                	or     %edx,%eax
f011fbae:	85 c0                	test   %eax,%eax
f011fbb0:	75 32                	jne    f011fbe4 <chk2+0x18f>
			{
				assert_endall(__histla != __nla) ;
f011fbb2:	8b 15 bc 4c 55 f0    	mov    0xf0554cbc,%edx
f011fbb8:	a1 e4 4b 55 f0       	mov    0xf0554be4,%eax
f011fbbd:	39 c2                	cmp    %eax,%edx
f011fbbf:	75 19                	jne    f011fbda <chk2+0x185>
f011fbc1:	68 79 d9 12 f0       	push   $0xf012d979
f011fbc6:	68 97 d6 12 f0       	push   $0xf012d697
f011fbcb:	68 f4 01 00 00       	push   $0x1f4
f011fbd0:	68 df d6 12 f0       	push   $0xf012d6df
f011fbd5:	e8 d0 07 fe ff       	call   f01003aa <_panic_all>
				__histla = __nla;
f011fbda:	a1 e4 4b 55 f0       	mov    0xf0554be4,%eax
f011fbdf:	a3 bc 4c 55 f0       	mov    %eax,0xf0554cbc
			}

			//check every 1 sec, assuming quantum >= 10
			if (timer_ticks() % 100 == 0)
f011fbe4:	e8 91 6a fe ff       	call   f010667a <timer_ticks>
f011fbe9:	6a 00                	push   $0x0
f011fbeb:	6a 64                	push   $0x64
f011fbed:	52                   	push   %edx
f011fbee:	50                   	push   %eax
f011fbef:	e8 f0 19 00 00       	call   f01215e4 <__moddi3>
f011fbf4:	83 c4 10             	add    $0x10,%esp
f011fbf7:	09 d0                	or     %edx,%eax
f011fbf9:	85 c0                	test   %eax,%eax
f011fbfb:	0f 85 b4 01 00 00    	jne    f011fdb5 <chk2+0x360>
			{
				int plaint = __pla / 100 ;
f011fc01:	8b 0d 7c 51 55 f0    	mov    0xf055517c,%ecx
f011fc07:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f011fc0c:	f7 e9                	imul   %ecx
f011fc0e:	c1 fa 05             	sar    $0x5,%edx
f011fc11:	89 c8                	mov    %ecx,%eax
f011fc13:	c1 f8 1f             	sar    $0x1f,%eax
f011fc16:	29 c2                	sub    %eax,%edx
f011fc18:	89 d0                	mov    %edx,%eax
f011fc1a:	89 45 ec             	mov    %eax,-0x14(%ebp)
				int plafrc = __pla % 100 ;
f011fc1d:	8b 0d 7c 51 55 f0    	mov    0xf055517c,%ecx
f011fc23:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f011fc28:	f7 e9                	imul   %ecx
f011fc2a:	c1 fa 05             	sar    $0x5,%edx
f011fc2d:	89 c8                	mov    %ecx,%eax
f011fc2f:	c1 f8 1f             	sar    $0x1f,%eax
f011fc32:	29 c2                	sub    %eax,%edx
f011fc34:	89 d0                	mov    %edx,%eax
f011fc36:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011fc39:	8b 55 e8             	mov    -0x18(%ebp),%edx
f011fc3c:	89 d0                	mov    %edx,%eax
f011fc3e:	c1 e0 02             	shl    $0x2,%eax
f011fc41:	01 d0                	add    %edx,%eax
f011fc43:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011fc4a:	01 d0                	add    %edx,%eax
f011fc4c:	c1 e0 02             	shl    $0x2,%eax
f011fc4f:	29 c1                	sub    %eax,%ecx
f011fc51:	89 c8                	mov    %ecx,%eax
f011fc53:	89 45 e8             	mov    %eax,-0x18(%ebp)

				int nlaint = __nla / 100 ;
f011fc56:	8b 0d e4 4b 55 f0    	mov    0xf0554be4,%ecx
f011fc5c:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f011fc61:	f7 e9                	imul   %ecx
f011fc63:	c1 fa 05             	sar    $0x5,%edx
f011fc66:	89 c8                	mov    %ecx,%eax
f011fc68:	c1 f8 1f             	sar    $0x1f,%eax
f011fc6b:	29 c2                	sub    %eax,%edx
f011fc6d:	89 d0                	mov    %edx,%eax
f011fc6f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				int nlafrc = __nla % 100 ;
f011fc72:	8b 0d e4 4b 55 f0    	mov    0xf0554be4,%ecx
f011fc78:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f011fc7d:	f7 e9                	imul   %ecx
f011fc7f:	c1 fa 05             	sar    $0x5,%edx
f011fc82:	89 c8                	mov    %ecx,%eax
f011fc84:	c1 f8 1f             	sar    $0x1f,%eax
f011fc87:	29 c2                	sub    %eax,%edx
f011fc89:	89 d0                	mov    %edx,%eax
f011fc8b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011fc8e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f011fc91:	89 d0                	mov    %edx,%eax
f011fc93:	c1 e0 02             	shl    $0x2,%eax
f011fc96:	01 d0                	add    %edx,%eax
f011fc98:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011fc9f:	01 d0                	add    %edx,%eax
f011fca1:	c1 e0 02             	shl    $0x2,%eax
f011fca4:	29 c1                	sub    %eax,%ecx
f011fca6:	89 c8                	mov    %ecx,%eax
f011fca8:	89 45 e0             	mov    %eax,-0x20(%ebp)

				//Check at steady state of nproc (include equality)
				if (__nnexit == __pnexit)
f011fcab:	8b 15 10 4f 55 f0    	mov    0xf0554f10,%edx
f011fcb1:	a1 c0 25 55 f0       	mov    0xf05525c0,%eax
f011fcb6:	39 c2                	cmp    %eax,%edx
f011fcb8:	0f 85 ed 00 00 00    	jne    f011fdab <chk2+0x356>
				{
					//cprintf("++++++++++++++++++# processes = %d, prev la = %d.%d, next la = %d.%d\n", __nproc, plaint, plafrc, nlaint, nlafrc);
					if (__nproc > plaint)
f011fcbe:	a1 d4 50 55 f0       	mov    0xf05550d4,%eax
f011fcc3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fcc6:	7e 5b                	jle    f011fd23 <chk2+0x2ce>
					{
						cprintf("++++++++++++++++++# processes = %d, prev la = %d.%d, next la = %d.%d\n", __nproc, plaint, plafrc, nlaint, nlafrc);
f011fcc8:	a1 d4 50 55 f0       	mov    0xf05550d4,%eax
f011fccd:	83 ec 08             	sub    $0x8,%esp
f011fcd0:	ff 75 e0             	pushl  -0x20(%ebp)
f011fcd3:	ff 75 e4             	pushl  -0x1c(%ebp)
f011fcd6:	ff 75 e8             	pushl  -0x18(%ebp)
f011fcd9:	ff 75 ec             	pushl  -0x14(%ebp)
f011fcdc:	50                   	push   %eax
f011fcdd:	68 8c d9 12 f0       	push   $0xf012d98c
f011fce2:	e8 85 12 fe ff       	call   f0100f6c <cprintf>
f011fce7:	83 c4 20             	add    $0x20,%esp
						//assert_endall(__nla > __pla);
						assert_endall((nlaint > plaint) || ((nlaint == plaint) && (nlafrc >= plafrc)));
f011fcea:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011fced:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fcf0:	0f 8f b5 00 00 00    	jg     f011fdab <chk2+0x356>
f011fcf6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011fcf9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fcfc:	75 0c                	jne    f011fd0a <chk2+0x2b5>
f011fcfe:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011fd01:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011fd04:	0f 8d a1 00 00 00    	jge    f011fdab <chk2+0x356>
f011fd0a:	68 d4 d9 12 f0       	push   $0xf012d9d4
f011fd0f:	68 97 d6 12 f0       	push   $0xf012d697
f011fd14:	68 09 02 00 00       	push   $0x209
f011fd19:	68 df d6 12 f0       	push   $0xf012d6df
f011fd1e:	e8 87 06 fe ff       	call   f01003aa <_panic_all>
					}
					else if (__nproc < plaint)
f011fd23:	a1 d4 50 55 f0       	mov    0xf05550d4,%eax
f011fd28:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fd2b:	7d 53                	jge    f011fd80 <chk2+0x32b>
					{
						cprintf("------------------# processes = %d, prev la = %d.%d, next la = %d.%d\n", __nproc, plaint, plafrc, nlaint, nlafrc);
f011fd2d:	a1 d4 50 55 f0       	mov    0xf05550d4,%eax
f011fd32:	83 ec 08             	sub    $0x8,%esp
f011fd35:	ff 75 e0             	pushl  -0x20(%ebp)
f011fd38:	ff 75 e4             	pushl  -0x1c(%ebp)
f011fd3b:	ff 75 e8             	pushl  -0x18(%ebp)
f011fd3e:	ff 75 ec             	pushl  -0x14(%ebp)
f011fd41:	50                   	push   %eax
f011fd42:	68 14 da 12 f0       	push   $0xf012da14
f011fd47:	e8 20 12 fe ff       	call   f0100f6c <cprintf>
f011fd4c:	83 c4 20             	add    $0x20,%esp
						//assert_endall(__nla < __pla);
						assert_endall((nlaint < plaint) || ((nlaint == plaint) && (nlafrc <= plafrc)));
f011fd4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011fd52:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fd55:	7c 54                	jl     f011fdab <chk2+0x356>
f011fd57:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011fd5a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fd5d:	75 08                	jne    f011fd67 <chk2+0x312>
f011fd5f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011fd62:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f011fd65:	7e 44                	jle    f011fdab <chk2+0x356>
f011fd67:	68 5c da 12 f0       	push   $0xf012da5c
f011fd6c:	68 97 d6 12 f0       	push   $0xf012d697
f011fd71:	68 0f 02 00 00       	push   $0x20f
f011fd76:	68 df d6 12 f0       	push   $0xf012d6df
f011fd7b:	e8 2a 06 fe ff       	call   f01003aa <_panic_all>
					}
					else if (__nproc == plaint)
f011fd80:	a1 d4 50 55 f0       	mov    0xf05550d4,%eax
f011fd85:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fd88:	75 21                	jne    f011fdab <chk2+0x356>
					{
						assert_endall((nlaint == plaint));
f011fd8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011fd8d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011fd90:	74 19                	je     f011fdab <chk2+0x356>
f011fd92:	68 9c da 12 f0       	push   $0xf012da9c
f011fd97:	68 97 d6 12 f0       	push   $0xf012d697
f011fd9c:	68 13 02 00 00       	push   $0x213
f011fda1:	68 df d6 12 f0       	push   $0xf012d6df
f011fda6:	e8 ff 05 fe ff       	call   f01003aa <_panic_all>
					}
				}
				__pla = __nla;
f011fdab:	a1 e4 4b 55 f0       	mov    0xf0554be4,%eax
f011fdb0:	a3 7c 51 55 f0       	mov    %eax,0xf055517c
			}
		}
		__pnexit = __nnexit;
f011fdb5:	a1 10 4f 55 f0       	mov    0xf0554f10,%eax
f011fdba:	a3 c0 25 55 f0       	mov    %eax,0xf05525c0
f011fdbf:	eb 01                	jmp    f011fdc2 <chk2+0x36d>
	//	}
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f011fdc1:	90                   	nop
	//				if (i == __tl) continue;
	//				assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
	//			}
	//		}
	//	}
}
f011fdc2:	c9                   	leave  
f011fdc3:	c3                   	ret    

f011fdc4 <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f011fdc4:	55                   	push   %ebp
f011fdc5:	89 e5                	mov    %esp,%ebp
f011fdc7:	83 ec 18             	sub    $0x18,%esp
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f011fdca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fdd1:	eb 40                	jmp    f011fe13 <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f011fdd3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011fdd6:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f011fddc:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f011fde1:	83 ec 08             	sub    $0x8,%esp
f011fde4:	52                   	push   %edx
f011fde5:	50                   	push   %eax
f011fde6:	e8 a6 01 00 00       	call   f011ff91 <check_va2pa>
f011fdeb:	83 c4 10             	add    $0x10,%esp
f011fdee:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fdf1:	74 19                	je     f011fe0c <check_boot_pgdir+0x48>
f011fdf3:	68 b0 da 12 f0       	push   $0xf012dab0
f011fdf8:	68 97 d6 12 f0       	push   $0xf012d697
f011fdfd:	68 5f 02 00 00       	push   $0x25f
f011fe02:	68 df d6 12 f0       	push   $0xf012d6df
f011fe07:	e8 0e 05 fe ff       	call   f010031a <_panic>
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f011fe0c:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f011fe13:	81 7d f4 00 00 00 10 	cmpl   $0x10000000,-0xc(%ebp)
f011fe1a:	75 b7                	jne    f011fdd3 <check_boot_pgdir+0xf>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
#endif
	// check scheduler kernel stack
	for (i = 0; i < NCPUS*KERNEL_STACK_SIZE; i += PAGE_SIZE)
f011fe1c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fe23:	e9 81 00 00 00       	jmp    f011fea9 <check_boot_pgdir+0xe5>
	{
		//skip GUARD page of each CPU Stack
		if (i%KERNEL_STACK_SIZE == 0)
f011fe28:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011fe2b:	25 ff 7f 00 00       	and    $0x7fff,%eax
f011fe30:	85 c0                	test   %eax,%eax
f011fe32:	74 6d                	je     f011fea1 <check_boot_pgdir+0xdd>
			continue;
		assert(check_va2pa(ptr_page_directory, KERN_STACK_TOP - NCPUS*KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f011fe34:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011fe37:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f011fe3d:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f011fe42:	83 ec 08             	sub    $0x8,%esp
f011fe45:	52                   	push   %edx
f011fe46:	50                   	push   %eax
f011fe47:	e8 45 01 00 00       	call   f011ff91 <check_va2pa>
f011fe4c:	83 c4 10             	add    $0x10,%esp
f011fe4f:	c7 45 f0 00 10 17 f0 	movl   $0xf0171000,-0x10(%ebp)
f011fe56:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f011fe5d:	77 17                	ja     f011fe76 <check_boot_pgdir+0xb2>
f011fe5f:	ff 75 f0             	pushl  -0x10(%ebp)
f011fe62:	68 e8 da 12 f0       	push   $0xf012dae8
f011fe67:	68 68 02 00 00       	push   $0x268
f011fe6c:	68 df d6 12 f0       	push   $0xf012d6df
f011fe71:	e8 a4 04 fe ff       	call   f010031a <_panic>
f011fe76:	8b 55 f0             	mov    -0x10(%ebp),%edx
f011fe79:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f011fe7f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fe82:	01 ca                	add    %ecx,%edx
f011fe84:	39 d0                	cmp    %edx,%eax
f011fe86:	74 1a                	je     f011fea2 <check_boot_pgdir+0xde>
f011fe88:	68 1c db 12 f0       	push   $0xf012db1c
f011fe8d:	68 97 d6 12 f0       	push   $0xf012d697
f011fe92:	68 68 02 00 00       	push   $0x268
f011fe97:	68 df d6 12 f0       	push   $0xf012d6df
f011fe9c:	e8 79 04 fe ff       	call   f010031a <_panic>
	// check scheduler kernel stack
	for (i = 0; i < NCPUS*KERNEL_STACK_SIZE; i += PAGE_SIZE)
	{
		//skip GUARD page of each CPU Stack
		if (i%KERNEL_STACK_SIZE == 0)
			continue;
f011fea1:	90                   	nop
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
#endif
	// check scheduler kernel stack
	for (i = 0; i < NCPUS*KERNEL_STACK_SIZE; i += PAGE_SIZE)
f011fea2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f011fea9:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f011feb0:	0f 86 72 ff ff ff    	jbe    f011fe28 <check_boot_pgdir+0x64>
		if (i%KERNEL_STACK_SIZE == 0)
			continue;
		assert(check_va2pa(ptr_page_directory, KERN_STACK_TOP - NCPUS*KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
	}
	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f011feb6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011febd:	e9 af 00 00 00       	jmp    f011ff71 <check_boot_pgdir+0x1ad>
		switch (i) {
f011fec2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011fec5:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f011feca:	74 11                	je     f011fedd <check_boot_pgdir+0x119>
f011fecc:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f011fed1:	72 36                	jb     f011ff09 <check_boot_pgdir+0x145>
f011fed3:	2d bd 03 00 00       	sub    $0x3bd,%eax
f011fed8:	83 f8 02             	cmp    $0x2,%eax
f011fedb:	77 2c                	ja     f011ff09 <check_boot_pgdir+0x145>
		case PDX(UVPT):
		case PDX(KERN_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f011fedd:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f011fee2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fee5:	c1 e2 02             	shl    $0x2,%edx
f011fee8:	01 d0                	add    %edx,%eax
f011feea:	8b 00                	mov    (%eax),%eax
f011feec:	85 c0                	test   %eax,%eax
f011feee:	75 7a                	jne    f011ff6a <check_boot_pgdir+0x1a6>
f011fef0:	68 a2 db 12 f0       	push   $0xf012dba2
f011fef5:	68 97 d6 12 f0       	push   $0xf012d697
f011fefa:	68 73 02 00 00       	push   $0x273
f011feff:	68 df d6 12 f0       	push   $0xf012d6df
f011ff04:	e8 11 04 fe ff       	call   f010031a <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f011ff09:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f011ff10:	76 2c                	jbe    f011ff3e <check_boot_pgdir+0x17a>
				assert(ptr_page_directory[i]);
f011ff12:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f011ff17:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ff1a:	c1 e2 02             	shl    $0x2,%edx
f011ff1d:	01 d0                	add    %edx,%eax
f011ff1f:	8b 00                	mov    (%eax),%eax
f011ff21:	85 c0                	test   %eax,%eax
f011ff23:	75 48                	jne    f011ff6d <check_boot_pgdir+0x1a9>
f011ff25:	68 a2 db 12 f0       	push   $0xf012dba2
f011ff2a:	68 97 d6 12 f0       	push   $0xf012d697
f011ff2f:	68 77 02 00 00       	push   $0x277
f011ff34:	68 df d6 12 f0       	push   $0xf012d6df
f011ff39:	e8 dc 03 fe ff       	call   f010031a <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f011ff3e:	a1 dc 50 55 f0       	mov    0xf05550dc,%eax
f011ff43:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011ff46:	c1 e2 02             	shl    $0x2,%edx
f011ff49:	01 d0                	add    %edx,%eax
f011ff4b:	8b 00                	mov    (%eax),%eax
f011ff4d:	85 c0                	test   %eax,%eax
f011ff4f:	74 1c                	je     f011ff6d <check_boot_pgdir+0x1a9>
f011ff51:	68 b8 db 12 f0       	push   $0xf012dbb8
f011ff56:	68 97 d6 12 f0       	push   $0xf012d697
f011ff5b:	68 79 02 00 00       	push   $0x279
f011ff60:	68 df d6 12 f0       	push   $0xf012d6df
f011ff65:	e8 b0 03 fe ff       	call   f010031a <_panic>
		case PDX(KERN_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f011ff6a:	90                   	nop
f011ff6b:	eb 01                	jmp    f011ff6e <check_boot_pgdir+0x1aa>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f011ff6d:	90                   	nop
		if (i%KERNEL_STACK_SIZE == 0)
			continue;
		assert(check_va2pa(ptr_page_directory, KERN_STACK_TOP - NCPUS*KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
	}
	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f011ff6e:	ff 45 f4             	incl   -0xc(%ebp)
f011ff71:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f011ff78:	0f 86 44 ff ff ff    	jbe    f011fec2 <check_boot_pgdir+0xfe>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("*	check_boot_pgdir() succeeded!\n");
f011ff7e:	83 ec 0c             	sub    $0xc,%esp
f011ff81:	68 d4 db 12 f0       	push   $0xf012dbd4
f011ff86:	e8 e1 0f fe ff       	call   f0100f6c <cprintf>
f011ff8b:	83 c4 10             	add    $0x10,%esp
}
f011ff8e:	90                   	nop
f011ff8f:	c9                   	leave  
f011ff90:	c3                   	ret    

f011ff91 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f011ff91:	55                   	push   %ebp
f011ff92:	89 e5                	mov    %esp,%ebp
f011ff94:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f011ff97:	8b 45 0c             	mov    0xc(%ebp),%eax
f011ff9a:	c1 e8 16             	shr    $0x16,%eax
f011ff9d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011ffa4:	8b 45 08             	mov    0x8(%ebp),%eax
f011ffa7:	01 d0                	add    %edx,%eax
f011ffa9:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f011ffac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011ffaf:	8b 00                	mov    (%eax),%eax
f011ffb1:	83 e0 01             	and    $0x1,%eax
f011ffb4:	85 c0                	test   %eax,%eax
f011ffb6:	75 0a                	jne    f011ffc2 <check_va2pa+0x31>
		return ~0;
f011ffb8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f011ffbd:	e9 87 00 00 00       	jmp    f0120049 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f011ffc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011ffc5:	8b 00                	mov    (%eax),%eax
f011ffc7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011ffcc:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011ffcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011ffd2:	c1 e8 0c             	shr    $0xc,%eax
f011ffd5:	89 45 ec             	mov    %eax,-0x14(%ebp)
f011ffd8:	a1 b8 4c 55 f0       	mov    0xf0554cb8,%eax
f011ffdd:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f011ffe0:	72 17                	jb     f011fff9 <check_va2pa+0x68>
f011ffe2:	ff 75 f0             	pushl  -0x10(%ebp)
f011ffe5:	68 f8 db 12 f0       	push   $0xf012dbf8
f011ffea:	68 8f 02 00 00       	push   $0x28f
f011ffef:	68 df d6 12 f0       	push   $0xf012d6df
f011fff4:	e8 21 03 fe ff       	call   f010031a <_panic>
f011fff9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011fffc:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0120001:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f0120004:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120007:	c1 e8 0c             	shr    $0xc,%eax
f012000a:	25 ff 03 00 00       	and    $0x3ff,%eax
f012000f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0120016:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0120019:	01 d0                	add    %edx,%eax
f012001b:	8b 00                	mov    (%eax),%eax
f012001d:	83 e0 01             	and    $0x1,%eax
f0120020:	85 c0                	test   %eax,%eax
f0120022:	75 07                	jne    f012002b <check_va2pa+0x9a>
		return ~0;
f0120024:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0120029:	eb 1e                	jmp    f0120049 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f012002b:	8b 45 0c             	mov    0xc(%ebp),%eax
f012002e:	c1 e8 0c             	shr    $0xc,%eax
f0120031:	25 ff 03 00 00       	and    $0x3ff,%eax
f0120036:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012003d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0120040:	01 d0                	add    %edx,%eax
f0120042:	8b 00                	mov    (%eax),%eax
f0120044:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0120049:	c9                   	leave  
f012004a:	c3                   	ret    

f012004b <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f012004b:	55                   	push   %ebp
f012004c:	89 e5                	mov    %esp,%ebp
f012004e:	53                   	push   %ebx
f012004f:	83 ec 14             	sub    $0x14,%esp
f0120052:	8b 45 10             	mov    0x10(%ebp),%eax
f0120055:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0120058:	8b 45 14             	mov    0x14(%ebp),%eax
f012005b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f012005e:	8b 45 18             	mov    0x18(%ebp),%eax
f0120061:	ba 00 00 00 00       	mov    $0x0,%edx
f0120066:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f0120069:	77 55                	ja     f01200c0 <printnum+0x75>
f012006b:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012006e:	72 05                	jb     f0120075 <printnum+0x2a>
f0120070:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0120073:	77 4b                	ja     f01200c0 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f0120075:	8b 45 1c             	mov    0x1c(%ebp),%eax
f0120078:	8d 58 ff             	lea    -0x1(%eax),%ebx
f012007b:	8b 45 18             	mov    0x18(%ebp),%eax
f012007e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120083:	52                   	push   %edx
f0120084:	50                   	push   %eax
f0120085:	ff 75 f4             	pushl  -0xc(%ebp)
f0120088:	ff 75 f0             	pushl  -0x10(%ebp)
f012008b:	e8 ec 16 00 00       	call   f012177c <__udivdi3>
f0120090:	83 c4 10             	add    $0x10,%esp
f0120093:	83 ec 04             	sub    $0x4,%esp
f0120096:	ff 75 20             	pushl  0x20(%ebp)
f0120099:	53                   	push   %ebx
f012009a:	ff 75 18             	pushl  0x18(%ebp)
f012009d:	52                   	push   %edx
f012009e:	50                   	push   %eax
f012009f:	ff 75 0c             	pushl  0xc(%ebp)
f01200a2:	ff 75 08             	pushl  0x8(%ebp)
f01200a5:	e8 a1 ff ff ff       	call   f012004b <printnum>
f01200aa:	83 c4 20             	add    $0x20,%esp
f01200ad:	eb 1a                	jmp    f01200c9 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f01200af:	83 ec 08             	sub    $0x8,%esp
f01200b2:	ff 75 0c             	pushl  0xc(%ebp)
f01200b5:	ff 75 20             	pushl  0x20(%ebp)
f01200b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01200bb:	ff d0                	call   *%eax
f01200bd:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f01200c0:	ff 4d 1c             	decl   0x1c(%ebp)
f01200c3:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f01200c7:	7f e6                	jg     f01200af <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f01200c9:	8b 4d 18             	mov    0x18(%ebp),%ecx
f01200cc:	bb 00 00 00 00       	mov    $0x0,%ebx
f01200d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01200d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01200d7:	53                   	push   %ebx
f01200d8:	51                   	push   %ecx
f01200d9:	52                   	push   %edx
f01200da:	50                   	push   %eax
f01200db:	e8 ac 17 00 00       	call   f012188c <__umoddi3>
f01200e0:	83 c4 10             	add    $0x10,%esp
f01200e3:	05 54 de 12 f0       	add    $0xf012de54,%eax
f01200e8:	8a 00                	mov    (%eax),%al
f01200ea:	0f be c0             	movsbl %al,%eax
f01200ed:	83 ec 08             	sub    $0x8,%esp
f01200f0:	ff 75 0c             	pushl  0xc(%ebp)
f01200f3:	50                   	push   %eax
f01200f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01200f7:	ff d0                	call   *%eax
f01200f9:	83 c4 10             	add    $0x10,%esp
}
f01200fc:	90                   	nop
f01200fd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0120100:	c9                   	leave  
f0120101:	c3                   	ret    

f0120102 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f0120102:	55                   	push   %ebp
f0120103:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f0120105:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0120109:	7e 1c                	jle    f0120127 <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f012010b:	8b 45 08             	mov    0x8(%ebp),%eax
f012010e:	8b 00                	mov    (%eax),%eax
f0120110:	8d 50 08             	lea    0x8(%eax),%edx
f0120113:	8b 45 08             	mov    0x8(%ebp),%eax
f0120116:	89 10                	mov    %edx,(%eax)
f0120118:	8b 45 08             	mov    0x8(%ebp),%eax
f012011b:	8b 00                	mov    (%eax),%eax
f012011d:	83 e8 08             	sub    $0x8,%eax
f0120120:	8b 50 04             	mov    0x4(%eax),%edx
f0120123:	8b 00                	mov    (%eax),%eax
f0120125:	eb 40                	jmp    f0120167 <getuint+0x65>
	else if (lflag)
f0120127:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012012b:	74 1e                	je     f012014b <getuint+0x49>
		return va_arg(*ap, unsigned long);
f012012d:	8b 45 08             	mov    0x8(%ebp),%eax
f0120130:	8b 00                	mov    (%eax),%eax
f0120132:	8d 50 04             	lea    0x4(%eax),%edx
f0120135:	8b 45 08             	mov    0x8(%ebp),%eax
f0120138:	89 10                	mov    %edx,(%eax)
f012013a:	8b 45 08             	mov    0x8(%ebp),%eax
f012013d:	8b 00                	mov    (%eax),%eax
f012013f:	83 e8 04             	sub    $0x4,%eax
f0120142:	8b 00                	mov    (%eax),%eax
f0120144:	ba 00 00 00 00       	mov    $0x0,%edx
f0120149:	eb 1c                	jmp    f0120167 <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f012014b:	8b 45 08             	mov    0x8(%ebp),%eax
f012014e:	8b 00                	mov    (%eax),%eax
f0120150:	8d 50 04             	lea    0x4(%eax),%edx
f0120153:	8b 45 08             	mov    0x8(%ebp),%eax
f0120156:	89 10                	mov    %edx,(%eax)
f0120158:	8b 45 08             	mov    0x8(%ebp),%eax
f012015b:	8b 00                	mov    (%eax),%eax
f012015d:	83 e8 04             	sub    $0x4,%eax
f0120160:	8b 00                	mov    (%eax),%eax
f0120162:	ba 00 00 00 00       	mov    $0x0,%edx
}
f0120167:	5d                   	pop    %ebp
f0120168:	c3                   	ret    

f0120169 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f0120169:	55                   	push   %ebp
f012016a:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012016c:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f0120170:	7e 1c                	jle    f012018e <getint+0x25>
		return va_arg(*ap, long long);
f0120172:	8b 45 08             	mov    0x8(%ebp),%eax
f0120175:	8b 00                	mov    (%eax),%eax
f0120177:	8d 50 08             	lea    0x8(%eax),%edx
f012017a:	8b 45 08             	mov    0x8(%ebp),%eax
f012017d:	89 10                	mov    %edx,(%eax)
f012017f:	8b 45 08             	mov    0x8(%ebp),%eax
f0120182:	8b 00                	mov    (%eax),%eax
f0120184:	83 e8 08             	sub    $0x8,%eax
f0120187:	8b 50 04             	mov    0x4(%eax),%edx
f012018a:	8b 00                	mov    (%eax),%eax
f012018c:	eb 38                	jmp    f01201c6 <getint+0x5d>
	else if (lflag)
f012018e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0120192:	74 1a                	je     f01201ae <getint+0x45>
		return va_arg(*ap, long);
f0120194:	8b 45 08             	mov    0x8(%ebp),%eax
f0120197:	8b 00                	mov    (%eax),%eax
f0120199:	8d 50 04             	lea    0x4(%eax),%edx
f012019c:	8b 45 08             	mov    0x8(%ebp),%eax
f012019f:	89 10                	mov    %edx,(%eax)
f01201a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01201a4:	8b 00                	mov    (%eax),%eax
f01201a6:	83 e8 04             	sub    $0x4,%eax
f01201a9:	8b 00                	mov    (%eax),%eax
f01201ab:	99                   	cltd   
f01201ac:	eb 18                	jmp    f01201c6 <getint+0x5d>
	else
		return va_arg(*ap, int);
f01201ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01201b1:	8b 00                	mov    (%eax),%eax
f01201b3:	8d 50 04             	lea    0x4(%eax),%edx
f01201b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01201b9:	89 10                	mov    %edx,(%eax)
f01201bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01201be:	8b 00                	mov    (%eax),%eax
f01201c0:	83 e8 04             	sub    $0x4,%eax
f01201c3:	8b 00                	mov    (%eax),%eax
f01201c5:	99                   	cltd   
}
f01201c6:	5d                   	pop    %ebp
f01201c7:	c3                   	ret    

f01201c8 <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f01201c8:	55                   	push   %ebp
f01201c9:	89 e5                	mov    %esp,%ebp
f01201cb:	56                   	push   %esi
f01201cc:	53                   	push   %ebx
f01201cd:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f01201d0:	eb 17                	jmp    f01201e9 <vprintfmt+0x21>
			if (ch == '\0')
f01201d2:	85 db                	test   %ebx,%ebx
f01201d4:	0f 84 c1 03 00 00    	je     f012059b <vprintfmt+0x3d3>
				return;
			putch(ch, putdat);
f01201da:	83 ec 08             	sub    $0x8,%esp
f01201dd:	ff 75 0c             	pushl  0xc(%ebp)
f01201e0:	53                   	push   %ebx
f01201e1:	8b 45 08             	mov    0x8(%ebp),%eax
f01201e4:	ff d0                	call   *%eax
f01201e6:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f01201e9:	8b 45 10             	mov    0x10(%ebp),%eax
f01201ec:	8d 50 01             	lea    0x1(%eax),%edx
f01201ef:	89 55 10             	mov    %edx,0x10(%ebp)
f01201f2:	8a 00                	mov    (%eax),%al
f01201f4:	0f b6 d8             	movzbl %al,%ebx
f01201f7:	83 fb 25             	cmp    $0x25,%ebx
f01201fa:	75 d6                	jne    f01201d2 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f01201fc:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f0120200:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f0120207:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f012020e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f0120215:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f012021c:	8b 45 10             	mov    0x10(%ebp),%eax
f012021f:	8d 50 01             	lea    0x1(%eax),%edx
f0120222:	89 55 10             	mov    %edx,0x10(%ebp)
f0120225:	8a 00                	mov    (%eax),%al
f0120227:	0f b6 d8             	movzbl %al,%ebx
f012022a:	8d 43 dd             	lea    -0x23(%ebx),%eax
f012022d:	83 f8 5b             	cmp    $0x5b,%eax
f0120230:	0f 87 3d 03 00 00    	ja     f0120573 <vprintfmt+0x3ab>
f0120236:	8b 04 85 78 de 12 f0 	mov    -0xfed2188(,%eax,4),%eax
f012023d:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f012023f:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f0120243:	eb d7                	jmp    f012021c <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f0120245:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f0120249:	eb d1                	jmp    f012021c <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012024b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f0120252:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0120255:	89 d0                	mov    %edx,%eax
f0120257:	c1 e0 02             	shl    $0x2,%eax
f012025a:	01 d0                	add    %edx,%eax
f012025c:	01 c0                	add    %eax,%eax
f012025e:	01 d8                	add    %ebx,%eax
f0120260:	83 e8 30             	sub    $0x30,%eax
f0120263:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f0120266:	8b 45 10             	mov    0x10(%ebp),%eax
f0120269:	8a 00                	mov    (%eax),%al
f012026b:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f012026e:	83 fb 2f             	cmp    $0x2f,%ebx
f0120271:	7e 3e                	jle    f01202b1 <vprintfmt+0xe9>
f0120273:	83 fb 39             	cmp    $0x39,%ebx
f0120276:	7f 39                	jg     f01202b1 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f0120278:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f012027b:	eb d5                	jmp    f0120252 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f012027d:	8b 45 14             	mov    0x14(%ebp),%eax
f0120280:	83 c0 04             	add    $0x4,%eax
f0120283:	89 45 14             	mov    %eax,0x14(%ebp)
f0120286:	8b 45 14             	mov    0x14(%ebp),%eax
f0120289:	83 e8 04             	sub    $0x4,%eax
f012028c:	8b 00                	mov    (%eax),%eax
f012028e:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f0120291:	eb 1f                	jmp    f01202b2 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f0120293:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0120297:	79 83                	jns    f012021c <vprintfmt+0x54>
				width = 0;
f0120299:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f01202a0:	e9 77 ff ff ff       	jmp    f012021c <vprintfmt+0x54>

		case '#':
			altflag = 1;
f01202a5:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f01202ac:	e9 6b ff ff ff       	jmp    f012021c <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f01202b1:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f01202b2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01202b6:	0f 89 60 ff ff ff    	jns    f012021c <vprintfmt+0x54>
				width = precision, precision = -1;
f01202bc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01202bf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01202c2:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f01202c9:	e9 4e ff ff ff       	jmp    f012021c <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f01202ce:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f01202d1:	e9 46 ff ff ff       	jmp    f012021c <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f01202d6:	8b 45 14             	mov    0x14(%ebp),%eax
f01202d9:	83 c0 04             	add    $0x4,%eax
f01202dc:	89 45 14             	mov    %eax,0x14(%ebp)
f01202df:	8b 45 14             	mov    0x14(%ebp),%eax
f01202e2:	83 e8 04             	sub    $0x4,%eax
f01202e5:	8b 00                	mov    (%eax),%eax
f01202e7:	83 ec 08             	sub    $0x8,%esp
f01202ea:	ff 75 0c             	pushl  0xc(%ebp)
f01202ed:	50                   	push   %eax
f01202ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01202f1:	ff d0                	call   *%eax
f01202f3:	83 c4 10             	add    $0x10,%esp
			break;
f01202f6:	e9 9b 02 00 00       	jmp    f0120596 <vprintfmt+0x3ce>

		// error message
		case 'e':
			err = va_arg(ap, int);
f01202fb:	8b 45 14             	mov    0x14(%ebp),%eax
f01202fe:	83 c0 04             	add    $0x4,%eax
f0120301:	89 45 14             	mov    %eax,0x14(%ebp)
f0120304:	8b 45 14             	mov    0x14(%ebp),%eax
f0120307:	83 e8 04             	sub    $0x4,%eax
f012030a:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f012030c:	85 db                	test   %ebx,%ebx
f012030e:	79 02                	jns    f0120312 <vprintfmt+0x14a>
				err = -err;
f0120310:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f0120312:	83 fb 64             	cmp    $0x64,%ebx
f0120315:	7f 0b                	jg     f0120322 <vprintfmt+0x15a>
f0120317:	8b 34 9d c0 dc 12 f0 	mov    -0xfed2340(,%ebx,4),%esi
f012031e:	85 f6                	test   %esi,%esi
f0120320:	75 19                	jne    f012033b <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f0120322:	53                   	push   %ebx
f0120323:	68 65 de 12 f0       	push   $0xf012de65
f0120328:	ff 75 0c             	pushl  0xc(%ebp)
f012032b:	ff 75 08             	pushl  0x8(%ebp)
f012032e:	e8 70 02 00 00       	call   f01205a3 <printfmt>
f0120333:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f0120336:	e9 5b 02 00 00       	jmp    f0120596 <vprintfmt+0x3ce>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f012033b:	56                   	push   %esi
f012033c:	68 6e de 12 f0       	push   $0xf012de6e
f0120341:	ff 75 0c             	pushl  0xc(%ebp)
f0120344:	ff 75 08             	pushl  0x8(%ebp)
f0120347:	e8 57 02 00 00       	call   f01205a3 <printfmt>
f012034c:	83 c4 10             	add    $0x10,%esp
			break;
f012034f:	e9 42 02 00 00       	jmp    f0120596 <vprintfmt+0x3ce>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f0120354:	8b 45 14             	mov    0x14(%ebp),%eax
f0120357:	83 c0 04             	add    $0x4,%eax
f012035a:	89 45 14             	mov    %eax,0x14(%ebp)
f012035d:	8b 45 14             	mov    0x14(%ebp),%eax
f0120360:	83 e8 04             	sub    $0x4,%eax
f0120363:	8b 30                	mov    (%eax),%esi
f0120365:	85 f6                	test   %esi,%esi
f0120367:	75 05                	jne    f012036e <vprintfmt+0x1a6>
				p = "(null)";
f0120369:	be 71 de 12 f0       	mov    $0xf012de71,%esi
			if (width > 0 && padc != '-')
f012036e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0120372:	7e 6d                	jle    f01203e1 <vprintfmt+0x219>
f0120374:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f0120378:	74 67                	je     f01203e1 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f012037a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012037d:	83 ec 08             	sub    $0x8,%esp
f0120380:	50                   	push   %eax
f0120381:	56                   	push   %esi
f0120382:	e8 26 05 00 00       	call   f01208ad <strnlen>
f0120387:	83 c4 10             	add    $0x10,%esp
f012038a:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f012038d:	eb 16                	jmp    f01203a5 <vprintfmt+0x1dd>
					putch(padc, putdat);
f012038f:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f0120393:	83 ec 08             	sub    $0x8,%esp
f0120396:	ff 75 0c             	pushl  0xc(%ebp)
f0120399:	50                   	push   %eax
f012039a:	8b 45 08             	mov    0x8(%ebp),%eax
f012039d:	ff d0                	call   *%eax
f012039f:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f01203a2:	ff 4d e4             	decl   -0x1c(%ebp)
f01203a5:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f01203a9:	7f e4                	jg     f012038f <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f01203ab:	eb 34                	jmp    f01203e1 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f01203ad:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01203b1:	74 1c                	je     f01203cf <vprintfmt+0x207>
f01203b3:	83 fb 1f             	cmp    $0x1f,%ebx
f01203b6:	7e 05                	jle    f01203bd <vprintfmt+0x1f5>
f01203b8:	83 fb 7e             	cmp    $0x7e,%ebx
f01203bb:	7e 12                	jle    f01203cf <vprintfmt+0x207>
					putch('?', putdat);
f01203bd:	83 ec 08             	sub    $0x8,%esp
f01203c0:	ff 75 0c             	pushl  0xc(%ebp)
f01203c3:	6a 3f                	push   $0x3f
f01203c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01203c8:	ff d0                	call   *%eax
f01203ca:	83 c4 10             	add    $0x10,%esp
f01203cd:	eb 0f                	jmp    f01203de <vprintfmt+0x216>
				else
					putch(ch, putdat);
f01203cf:	83 ec 08             	sub    $0x8,%esp
f01203d2:	ff 75 0c             	pushl  0xc(%ebp)
f01203d5:	53                   	push   %ebx
f01203d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01203d9:	ff d0                	call   *%eax
f01203db:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f01203de:	ff 4d e4             	decl   -0x1c(%ebp)
f01203e1:	89 f0                	mov    %esi,%eax
f01203e3:	8d 70 01             	lea    0x1(%eax),%esi
f01203e6:	8a 00                	mov    (%eax),%al
f01203e8:	0f be d8             	movsbl %al,%ebx
f01203eb:	85 db                	test   %ebx,%ebx
f01203ed:	74 24                	je     f0120413 <vprintfmt+0x24b>
f01203ef:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01203f3:	78 b8                	js     f01203ad <vprintfmt+0x1e5>
f01203f5:	ff 4d e0             	decl   -0x20(%ebp)
f01203f8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01203fc:	79 af                	jns    f01203ad <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f01203fe:	eb 13                	jmp    f0120413 <vprintfmt+0x24b>
				putch(' ', putdat);
f0120400:	83 ec 08             	sub    $0x8,%esp
f0120403:	ff 75 0c             	pushl  0xc(%ebp)
f0120406:	6a 20                	push   $0x20
f0120408:	8b 45 08             	mov    0x8(%ebp),%eax
f012040b:	ff d0                	call   *%eax
f012040d:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f0120410:	ff 4d e4             	decl   -0x1c(%ebp)
f0120413:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0120417:	7f e7                	jg     f0120400 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f0120419:	e9 78 01 00 00       	jmp    f0120596 <vprintfmt+0x3ce>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f012041e:	83 ec 08             	sub    $0x8,%esp
f0120421:	ff 75 e8             	pushl  -0x18(%ebp)
f0120424:	8d 45 14             	lea    0x14(%ebp),%eax
f0120427:	50                   	push   %eax
f0120428:	e8 3c fd ff ff       	call   f0120169 <getint>
f012042d:	83 c4 10             	add    $0x10,%esp
f0120430:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0120433:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f0120436:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0120439:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012043c:	85 d2                	test   %edx,%edx
f012043e:	79 23                	jns    f0120463 <vprintfmt+0x29b>
				putch('-', putdat);
f0120440:	83 ec 08             	sub    $0x8,%esp
f0120443:	ff 75 0c             	pushl  0xc(%ebp)
f0120446:	6a 2d                	push   $0x2d
f0120448:	8b 45 08             	mov    0x8(%ebp),%eax
f012044b:	ff d0                	call   *%eax
f012044d:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f0120450:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0120453:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120456:	f7 d8                	neg    %eax
f0120458:	83 d2 00             	adc    $0x0,%edx
f012045b:	f7 da                	neg    %edx
f012045d:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0120460:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f0120463:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012046a:	e9 bc 00 00 00       	jmp    f012052b <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f012046f:	83 ec 08             	sub    $0x8,%esp
f0120472:	ff 75 e8             	pushl  -0x18(%ebp)
f0120475:	8d 45 14             	lea    0x14(%ebp),%eax
f0120478:	50                   	push   %eax
f0120479:	e8 84 fc ff ff       	call   f0120102 <getuint>
f012047e:	83 c4 10             	add    $0x10,%esp
f0120481:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0120484:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f0120487:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f012048e:	e9 98 00 00 00       	jmp    f012052b <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f0120493:	83 ec 08             	sub    $0x8,%esp
f0120496:	ff 75 0c             	pushl  0xc(%ebp)
f0120499:	6a 58                	push   $0x58
f012049b:	8b 45 08             	mov    0x8(%ebp),%eax
f012049e:	ff d0                	call   *%eax
f01204a0:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f01204a3:	83 ec 08             	sub    $0x8,%esp
f01204a6:	ff 75 0c             	pushl  0xc(%ebp)
f01204a9:	6a 58                	push   $0x58
f01204ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01204ae:	ff d0                	call   *%eax
f01204b0:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f01204b3:	83 ec 08             	sub    $0x8,%esp
f01204b6:	ff 75 0c             	pushl  0xc(%ebp)
f01204b9:	6a 58                	push   $0x58
f01204bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01204be:	ff d0                	call   *%eax
f01204c0:	83 c4 10             	add    $0x10,%esp
			break;
f01204c3:	e9 ce 00 00 00       	jmp    f0120596 <vprintfmt+0x3ce>

		// pointer
		case 'p':
			putch('0', putdat);
f01204c8:	83 ec 08             	sub    $0x8,%esp
f01204cb:	ff 75 0c             	pushl  0xc(%ebp)
f01204ce:	6a 30                	push   $0x30
f01204d0:	8b 45 08             	mov    0x8(%ebp),%eax
f01204d3:	ff d0                	call   *%eax
f01204d5:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f01204d8:	83 ec 08             	sub    $0x8,%esp
f01204db:	ff 75 0c             	pushl  0xc(%ebp)
f01204de:	6a 78                	push   $0x78
f01204e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01204e3:	ff d0                	call   *%eax
f01204e5:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f01204e8:	8b 45 14             	mov    0x14(%ebp),%eax
f01204eb:	83 c0 04             	add    $0x4,%eax
f01204ee:	89 45 14             	mov    %eax,0x14(%ebp)
f01204f1:	8b 45 14             	mov    0x14(%ebp),%eax
f01204f4:	83 e8 04             	sub    $0x4,%eax
f01204f7:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f01204f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01204fc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f0120503:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f012050a:	eb 1f                	jmp    f012052b <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f012050c:	83 ec 08             	sub    $0x8,%esp
f012050f:	ff 75 e8             	pushl  -0x18(%ebp)
f0120512:	8d 45 14             	lea    0x14(%ebp),%eax
f0120515:	50                   	push   %eax
f0120516:	e8 e7 fb ff ff       	call   f0120102 <getuint>
f012051b:	83 c4 10             	add    $0x10,%esp
f012051e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0120521:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f0120524:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f012052b:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f012052f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0120532:	83 ec 04             	sub    $0x4,%esp
f0120535:	52                   	push   %edx
f0120536:	ff 75 e4             	pushl  -0x1c(%ebp)
f0120539:	50                   	push   %eax
f012053a:	ff 75 f4             	pushl  -0xc(%ebp)
f012053d:	ff 75 f0             	pushl  -0x10(%ebp)
f0120540:	ff 75 0c             	pushl  0xc(%ebp)
f0120543:	ff 75 08             	pushl  0x8(%ebp)
f0120546:	e8 00 fb ff ff       	call   f012004b <printnum>
f012054b:	83 c4 20             	add    $0x20,%esp
			break;
f012054e:	eb 46                	jmp    f0120596 <vprintfmt+0x3ce>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f0120550:	83 ec 08             	sub    $0x8,%esp
f0120553:	ff 75 0c             	pushl  0xc(%ebp)
f0120556:	53                   	push   %ebx
f0120557:	8b 45 08             	mov    0x8(%ebp),%eax
f012055a:	ff d0                	call   *%eax
f012055c:	83 c4 10             	add    $0x10,%esp
			break;
f012055f:	eb 35                	jmp    f0120596 <vprintfmt+0x3ce>

		/**********************************/
		/*2023*/
		// DON'T Print Program Name & UD
		case '~':
			printProgName = 0;
f0120561:	c6 05 50 24 55 f0 00 	movb   $0x0,0xf0552450
			break;
f0120568:	eb 2c                	jmp    f0120596 <vprintfmt+0x3ce>
		// Print Program Name & UD
		case '@':
			printProgName = 1;
f012056a:	c6 05 50 24 55 f0 01 	movb   $0x1,0xf0552450
			break;
f0120571:	eb 23                	jmp    f0120596 <vprintfmt+0x3ce>
		/**********************************/

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f0120573:	83 ec 08             	sub    $0x8,%esp
f0120576:	ff 75 0c             	pushl  0xc(%ebp)
f0120579:	6a 25                	push   $0x25
f012057b:	8b 45 08             	mov    0x8(%ebp),%eax
f012057e:	ff d0                	call   *%eax
f0120580:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f0120583:	ff 4d 10             	decl   0x10(%ebp)
f0120586:	eb 03                	jmp    f012058b <vprintfmt+0x3c3>
f0120588:	ff 4d 10             	decl   0x10(%ebp)
f012058b:	8b 45 10             	mov    0x10(%ebp),%eax
f012058e:	48                   	dec    %eax
f012058f:	8a 00                	mov    (%eax),%al
f0120591:	3c 25                	cmp    $0x25,%al
f0120593:	75 f3                	jne    f0120588 <vprintfmt+0x3c0>
				/* do nothing */;
			break;
f0120595:	90                   	nop
		}
	}
f0120596:	e9 35 fc ff ff       	jmp    f01201d0 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f012059b:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f012059c:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012059f:	5b                   	pop    %ebx
f01205a0:	5e                   	pop    %esi
f01205a1:	5d                   	pop    %ebp
f01205a2:	c3                   	ret    

f01205a3 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f01205a3:	55                   	push   %ebp
f01205a4:	89 e5                	mov    %esp,%ebp
f01205a6:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f01205a9:	8d 45 10             	lea    0x10(%ebp),%eax
f01205ac:	83 c0 04             	add    $0x4,%eax
f01205af:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f01205b2:	8b 45 10             	mov    0x10(%ebp),%eax
f01205b5:	ff 75 f4             	pushl  -0xc(%ebp)
f01205b8:	50                   	push   %eax
f01205b9:	ff 75 0c             	pushl  0xc(%ebp)
f01205bc:	ff 75 08             	pushl  0x8(%ebp)
f01205bf:	e8 04 fc ff ff       	call   f01201c8 <vprintfmt>
f01205c4:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f01205c7:	90                   	nop
f01205c8:	c9                   	leave  
f01205c9:	c3                   	ret    

f01205ca <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f01205ca:	55                   	push   %ebp
f01205cb:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f01205cd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01205d0:	8b 40 08             	mov    0x8(%eax),%eax
f01205d3:	8d 50 01             	lea    0x1(%eax),%edx
f01205d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01205d9:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f01205dc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01205df:	8b 10                	mov    (%eax),%edx
f01205e1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01205e4:	8b 40 04             	mov    0x4(%eax),%eax
f01205e7:	39 c2                	cmp    %eax,%edx
f01205e9:	73 12                	jae    f01205fd <sprintputch+0x33>
		*b->buf++ = ch;
f01205eb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01205ee:	8b 00                	mov    (%eax),%eax
f01205f0:	8d 48 01             	lea    0x1(%eax),%ecx
f01205f3:	8b 55 0c             	mov    0xc(%ebp),%edx
f01205f6:	89 0a                	mov    %ecx,(%edx)
f01205f8:	8b 55 08             	mov    0x8(%ebp),%edx
f01205fb:	88 10                	mov    %dl,(%eax)
}
f01205fd:	90                   	nop
f01205fe:	5d                   	pop    %ebp
f01205ff:	c3                   	ret    

f0120600 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f0120600:	55                   	push   %ebp
f0120601:	89 e5                	mov    %esp,%ebp
f0120603:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f0120606:	8b 45 08             	mov    0x8(%ebp),%eax
f0120609:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012060c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012060f:	8d 50 ff             	lea    -0x1(%eax),%edx
f0120612:	8b 45 08             	mov    0x8(%ebp),%eax
f0120615:	01 d0                	add    %edx,%eax
f0120617:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012061a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f0120621:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0120625:	74 06                	je     f012062d <vsnprintf+0x2d>
f0120627:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012062b:	7f 07                	jg     f0120634 <vsnprintf+0x34>
		return -E_INVAL;
f012062d:	b8 03 00 00 00       	mov    $0x3,%eax
f0120632:	eb 20                	jmp    f0120654 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f0120634:	ff 75 14             	pushl  0x14(%ebp)
f0120637:	ff 75 10             	pushl  0x10(%ebp)
f012063a:	8d 45 ec             	lea    -0x14(%ebp),%eax
f012063d:	50                   	push   %eax
f012063e:	68 ca 05 12 f0       	push   $0xf01205ca
f0120643:	e8 80 fb ff ff       	call   f01201c8 <vprintfmt>
f0120648:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f012064b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012064e:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f0120651:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0120654:	c9                   	leave  
f0120655:	c3                   	ret    

f0120656 <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f0120656:	55                   	push   %ebp
f0120657:	89 e5                	mov    %esp,%ebp
f0120659:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f012065c:	8d 45 10             	lea    0x10(%ebp),%eax
f012065f:	83 c0 04             	add    $0x4,%eax
f0120662:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f0120665:	8b 45 10             	mov    0x10(%ebp),%eax
f0120668:	ff 75 f4             	pushl  -0xc(%ebp)
f012066b:	50                   	push   %eax
f012066c:	ff 75 0c             	pushl  0xc(%ebp)
f012066f:	ff 75 08             	pushl  0x8(%ebp)
f0120672:	e8 89 ff ff ff       	call   f0120600 <vsnprintf>
f0120677:	83 c4 10             	add    $0x10,%esp
f012067a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f012067d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0120680:	c9                   	leave  
f0120681:	c3                   	ret    

f0120682 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f0120682:	55                   	push   %ebp
f0120683:	89 e5                	mov    %esp,%ebp
f0120685:	83 ec 18             	sub    $0x18,%esp
	int i, c, echoing;

	if (prompt != NULL)
f0120688:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012068c:	74 13                	je     f01206a1 <readline+0x1f>
		cprintf("%s", prompt);
f012068e:	83 ec 08             	sub    $0x8,%esp
f0120691:	ff 75 08             	pushl  0x8(%ebp)
f0120694:	68 e8 df 12 f0       	push   $0xf012dfe8
f0120699:	e8 ce 08 fe ff       	call   f0100f6c <cprintf>
f012069e:	83 c4 10             	add    $0x10,%esp

	i = 0;
f01206a1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f01206a8:	83 ec 0c             	sub    $0xc,%esp
f01206ab:	6a 00                	push   $0x0
f01206ad:	e8 c7 07 fe ff       	call   f0100e79 <iscons>
f01206b2:	83 c4 10             	add    $0x10,%esp
f01206b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f01206b8:	e8 a3 07 fe ff       	call   f0100e60 <getchar>
f01206bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f01206c0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01206c4:	79 22                	jns    f01206e8 <readline+0x66>
			if (c != -E_EOF)
f01206c6:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f01206ca:	0f 84 ad 00 00 00    	je     f012077d <readline+0xfb>
				cprintf("read error: %e\n", c);
f01206d0:	83 ec 08             	sub    $0x8,%esp
f01206d3:	ff 75 ec             	pushl  -0x14(%ebp)
f01206d6:	68 eb df 12 f0       	push   $0xf012dfeb
f01206db:	e8 8c 08 fe ff       	call   f0100f6c <cprintf>
f01206e0:	83 c4 10             	add    $0x10,%esp
			break;
f01206e3:	e9 95 00 00 00       	jmp    f012077d <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f01206e8:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f01206ec:	7e 34                	jle    f0120722 <readline+0xa0>
f01206ee:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f01206f5:	7f 2b                	jg     f0120722 <readline+0xa0>
			if (echoing)
f01206f7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01206fb:	74 0e                	je     f012070b <readline+0x89>
				cputchar(c);
f01206fd:	83 ec 0c             	sub    $0xc,%esp
f0120700:	ff 75 ec             	pushl  -0x14(%ebp)
f0120703:	e8 41 07 fe ff       	call   f0100e49 <cputchar>
f0120708:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f012070b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012070e:	8d 50 01             	lea    0x1(%eax),%edx
f0120711:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0120714:	89 c2                	mov    %eax,%edx
f0120716:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120719:	01 d0                	add    %edx,%eax
f012071b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012071e:	88 10                	mov    %dl,(%eax)
f0120720:	eb 56                	jmp    f0120778 <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f0120722:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f0120726:	75 1f                	jne    f0120747 <readline+0xc5>
f0120728:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012072c:	7e 19                	jle    f0120747 <readline+0xc5>
			if (echoing)
f012072e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0120732:	74 0e                	je     f0120742 <readline+0xc0>
				cputchar(c);
f0120734:	83 ec 0c             	sub    $0xc,%esp
f0120737:	ff 75 ec             	pushl  -0x14(%ebp)
f012073a:	e8 0a 07 fe ff       	call   f0100e49 <cputchar>
f012073f:	83 c4 10             	add    $0x10,%esp

			i--;
f0120742:	ff 4d f4             	decl   -0xc(%ebp)
f0120745:	eb 31                	jmp    f0120778 <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f0120747:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f012074b:	74 0a                	je     f0120757 <readline+0xd5>
f012074d:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0120751:	0f 85 61 ff ff ff    	jne    f01206b8 <readline+0x36>
			if (echoing)
f0120757:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012075b:	74 0e                	je     f012076b <readline+0xe9>
				cputchar(c);
f012075d:	83 ec 0c             	sub    $0xc,%esp
f0120760:	ff 75 ec             	pushl  -0x14(%ebp)
f0120763:	e8 e1 06 fe ff       	call   f0100e49 <cputchar>
f0120768:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f012076b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012076e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120771:	01 d0                	add    %edx,%eax
f0120773:	c6 00 00             	movb   $0x0,(%eax)
			break;
f0120776:	eb 06                	jmp    f012077e <readline+0xfc>
		}
	}
f0120778:	e9 3b ff ff ff       	jmp    f01206b8 <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			break;
f012077d:	90                   	nop

			buf[i] = 0;
			break;
		}
	}
}
f012077e:	90                   	nop
f012077f:	c9                   	leave  
f0120780:	c3                   	ret    

f0120781 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f0120781:	55                   	push   %ebp
f0120782:	89 e5                	mov    %esp,%ebp
f0120784:	83 ec 18             	sub    $0x18,%esp
	sys_lock_cons();
f0120787:	e8 05 d1 fe ff       	call   f010d891 <sys_lock_cons>
	{
		int i, c, echoing;

		if (prompt != NULL)
f012078c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0120790:	74 13                	je     f01207a5 <atomic_readline+0x24>
			cprintf("%s", prompt);
f0120792:	83 ec 08             	sub    $0x8,%esp
f0120795:	ff 75 08             	pushl  0x8(%ebp)
f0120798:	68 e8 df 12 f0       	push   $0xf012dfe8
f012079d:	e8 ca 07 fe ff       	call   f0100f6c <cprintf>
f01207a2:	83 c4 10             	add    $0x10,%esp

		i = 0;
f01207a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		echoing = iscons(0);
f01207ac:	83 ec 0c             	sub    $0xc,%esp
f01207af:	6a 00                	push   $0x0
f01207b1:	e8 c3 06 fe ff       	call   f0100e79 <iscons>
f01207b6:	83 c4 10             	add    $0x10,%esp
f01207b9:	89 45 f0             	mov    %eax,-0x10(%ebp)
		while (1) {
			c = getchar();
f01207bc:	e8 9f 06 fe ff       	call   f0100e60 <getchar>
f01207c1:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (c < 0) {
f01207c4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01207c8:	79 22                	jns    f01207ec <atomic_readline+0x6b>
				if (c != -E_EOF)
f01207ca:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f01207ce:	0f 84 ad 00 00 00    	je     f0120881 <atomic_readline+0x100>
					cprintf("read error: %e\n", c);
f01207d4:	83 ec 08             	sub    $0x8,%esp
f01207d7:	ff 75 ec             	pushl  -0x14(%ebp)
f01207da:	68 eb df 12 f0       	push   $0xf012dfeb
f01207df:	e8 88 07 fe ff       	call   f0100f6c <cprintf>
f01207e4:	83 c4 10             	add    $0x10,%esp
				break;
f01207e7:	e9 95 00 00 00       	jmp    f0120881 <atomic_readline+0x100>
			} else if (c >= ' ' && i < BUFLEN-1) {
f01207ec:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f01207f0:	7e 34                	jle    f0120826 <atomic_readline+0xa5>
f01207f2:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f01207f9:	7f 2b                	jg     f0120826 <atomic_readline+0xa5>
				if (echoing)
f01207fb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01207ff:	74 0e                	je     f012080f <atomic_readline+0x8e>
					cputchar(c);
f0120801:	83 ec 0c             	sub    $0xc,%esp
f0120804:	ff 75 ec             	pushl  -0x14(%ebp)
f0120807:	e8 3d 06 fe ff       	call   f0100e49 <cputchar>
f012080c:	83 c4 10             	add    $0x10,%esp
				buf[i++] = c;
f012080f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120812:	8d 50 01             	lea    0x1(%eax),%edx
f0120815:	89 55 f4             	mov    %edx,-0xc(%ebp)
f0120818:	89 c2                	mov    %eax,%edx
f012081a:	8b 45 0c             	mov    0xc(%ebp),%eax
f012081d:	01 d0                	add    %edx,%eax
f012081f:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0120822:	88 10                	mov    %dl,(%eax)
f0120824:	eb 56                	jmp    f012087c <atomic_readline+0xfb>
			} else if (c == '\b' && i > 0) {
f0120826:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f012082a:	75 1f                	jne    f012084b <atomic_readline+0xca>
f012082c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0120830:	7e 19                	jle    f012084b <atomic_readline+0xca>
				if (echoing)
f0120832:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0120836:	74 0e                	je     f0120846 <atomic_readline+0xc5>
					cputchar(c);
f0120838:	83 ec 0c             	sub    $0xc,%esp
f012083b:	ff 75 ec             	pushl  -0x14(%ebp)
f012083e:	e8 06 06 fe ff       	call   f0100e49 <cputchar>
f0120843:	83 c4 10             	add    $0x10,%esp
				i--;
f0120846:	ff 4d f4             	decl   -0xc(%ebp)
f0120849:	eb 31                	jmp    f012087c <atomic_readline+0xfb>
			} else if (c == '\n' || c == '\r') {
f012084b:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f012084f:	74 0a                	je     f012085b <atomic_readline+0xda>
f0120851:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0120855:	0f 85 61 ff ff ff    	jne    f01207bc <atomic_readline+0x3b>
				if (echoing)
f012085b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012085f:	74 0e                	je     f012086f <atomic_readline+0xee>
					cputchar(c);
f0120861:	83 ec 0c             	sub    $0xc,%esp
f0120864:	ff 75 ec             	pushl  -0x14(%ebp)
f0120867:	e8 dd 05 fe ff       	call   f0100e49 <cputchar>
f012086c:	83 c4 10             	add    $0x10,%esp
				buf[i] = 0;
f012086f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120872:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120875:	01 d0                	add    %edx,%eax
f0120877:	c6 00 00             	movb   $0x0,(%eax)
				break;
f012087a:	eb 06                	jmp    f0120882 <atomic_readline+0x101>
			}
		}
f012087c:	e9 3b ff ff ff       	jmp    f01207bc <atomic_readline+0x3b>
		while (1) {
			c = getchar();
			if (c < 0) {
				if (c != -E_EOF)
					cprintf("read error: %e\n", c);
				break;
f0120881:	90                   	nop
				buf[i] = 0;
				break;
			}
		}
	}
	sys_unlock_cons();
f0120882:	e8 18 d0 fe ff       	call   f010d89f <sys_unlock_cons>
}
f0120887:	90                   	nop
f0120888:	c9                   	leave  
f0120889:	c3                   	ret    

f012088a <strlen>:
#include <inc/string.h>
#include <inc/assert.h>

int
strlen(const char *s)
{
f012088a:	55                   	push   %ebp
f012088b:	89 e5                	mov    %esp,%ebp
f012088d:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f0120890:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0120897:	eb 06                	jmp    f012089f <strlen+0x15>
		n++;
f0120899:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f012089c:	ff 45 08             	incl   0x8(%ebp)
f012089f:	8b 45 08             	mov    0x8(%ebp),%eax
f01208a2:	8a 00                	mov    (%eax),%al
f01208a4:	84 c0                	test   %al,%al
f01208a6:	75 f1                	jne    f0120899 <strlen+0xf>
		n++;
	return n;
f01208a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01208ab:	c9                   	leave  
f01208ac:	c3                   	ret    

f01208ad <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f01208ad:	55                   	push   %ebp
f01208ae:	89 e5                	mov    %esp,%ebp
f01208b0:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f01208b3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01208ba:	eb 09                	jmp    f01208c5 <strnlen+0x18>
		n++;
f01208bc:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f01208bf:	ff 45 08             	incl   0x8(%ebp)
f01208c2:	ff 4d 0c             	decl   0xc(%ebp)
f01208c5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01208c9:	74 09                	je     f01208d4 <strnlen+0x27>
f01208cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01208ce:	8a 00                	mov    (%eax),%al
f01208d0:	84 c0                	test   %al,%al
f01208d2:	75 e8                	jne    f01208bc <strnlen+0xf>
		n++;
	return n;
f01208d4:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01208d7:	c9                   	leave  
f01208d8:	c3                   	ret    

f01208d9 <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f01208d9:	55                   	push   %ebp
f01208da:	89 e5                	mov    %esp,%ebp
f01208dc:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f01208df:	8b 45 08             	mov    0x8(%ebp),%eax
f01208e2:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f01208e5:	90                   	nop
f01208e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01208e9:	8d 50 01             	lea    0x1(%eax),%edx
f01208ec:	89 55 08             	mov    %edx,0x8(%ebp)
f01208ef:	8b 55 0c             	mov    0xc(%ebp),%edx
f01208f2:	8d 4a 01             	lea    0x1(%edx),%ecx
f01208f5:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f01208f8:	8a 12                	mov    (%edx),%dl
f01208fa:	88 10                	mov    %dl,(%eax)
f01208fc:	8a 00                	mov    (%eax),%al
f01208fe:	84 c0                	test   %al,%al
f0120900:	75 e4                	jne    f01208e6 <strcpy+0xd>
		/* do nothing */;
	return ret;
f0120902:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f0120905:	c9                   	leave  
f0120906:	c3                   	ret    

f0120907 <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f0120907:	55                   	push   %ebp
f0120908:	89 e5                	mov    %esp,%ebp
f012090a:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f012090d:	8b 45 08             	mov    0x8(%ebp),%eax
f0120910:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f0120913:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f012091a:	eb 1f                	jmp    f012093b <strncpy+0x34>
		*dst++ = *src;
f012091c:	8b 45 08             	mov    0x8(%ebp),%eax
f012091f:	8d 50 01             	lea    0x1(%eax),%edx
f0120922:	89 55 08             	mov    %edx,0x8(%ebp)
f0120925:	8b 55 0c             	mov    0xc(%ebp),%edx
f0120928:	8a 12                	mov    (%edx),%dl
f012092a:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f012092c:	8b 45 0c             	mov    0xc(%ebp),%eax
f012092f:	8a 00                	mov    (%eax),%al
f0120931:	84 c0                	test   %al,%al
f0120933:	74 03                	je     f0120938 <strncpy+0x31>
			src++;
f0120935:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f0120938:	ff 45 fc             	incl   -0x4(%ebp)
f012093b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012093e:	3b 45 10             	cmp    0x10(%ebp),%eax
f0120941:	72 d9                	jb     f012091c <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f0120943:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0120946:	c9                   	leave  
f0120947:	c3                   	ret    

f0120948 <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f0120948:	55                   	push   %ebp
f0120949:	89 e5                	mov    %esp,%ebp
f012094b:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f012094e:	8b 45 08             	mov    0x8(%ebp),%eax
f0120951:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f0120954:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0120958:	74 30                	je     f012098a <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f012095a:	eb 16                	jmp    f0120972 <strlcpy+0x2a>
			*dst++ = *src++;
f012095c:	8b 45 08             	mov    0x8(%ebp),%eax
f012095f:	8d 50 01             	lea    0x1(%eax),%edx
f0120962:	89 55 08             	mov    %edx,0x8(%ebp)
f0120965:	8b 55 0c             	mov    0xc(%ebp),%edx
f0120968:	8d 4a 01             	lea    0x1(%edx),%ecx
f012096b:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f012096e:	8a 12                	mov    (%edx),%dl
f0120970:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0120972:	ff 4d 10             	decl   0x10(%ebp)
f0120975:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0120979:	74 09                	je     f0120984 <strlcpy+0x3c>
f012097b:	8b 45 0c             	mov    0xc(%ebp),%eax
f012097e:	8a 00                	mov    (%eax),%al
f0120980:	84 c0                	test   %al,%al
f0120982:	75 d8                	jne    f012095c <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f0120984:	8b 45 08             	mov    0x8(%ebp),%eax
f0120987:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f012098a:	8b 55 08             	mov    0x8(%ebp),%edx
f012098d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0120990:	29 c2                	sub    %eax,%edx
f0120992:	89 d0                	mov    %edx,%eax
}
f0120994:	c9                   	leave  
f0120995:	c3                   	ret    

f0120996 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f0120996:	55                   	push   %ebp
f0120997:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f0120999:	eb 06                	jmp    f01209a1 <strcmp+0xb>
		p++, q++;
f012099b:	ff 45 08             	incl   0x8(%ebp)
f012099e:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f01209a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01209a4:	8a 00                	mov    (%eax),%al
f01209a6:	84 c0                	test   %al,%al
f01209a8:	74 0e                	je     f01209b8 <strcmp+0x22>
f01209aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01209ad:	8a 10                	mov    (%eax),%dl
f01209af:	8b 45 0c             	mov    0xc(%ebp),%eax
f01209b2:	8a 00                	mov    (%eax),%al
f01209b4:	38 c2                	cmp    %al,%dl
f01209b6:	74 e3                	je     f012099b <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f01209b8:	8b 45 08             	mov    0x8(%ebp),%eax
f01209bb:	8a 00                	mov    (%eax),%al
f01209bd:	0f b6 d0             	movzbl %al,%edx
f01209c0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01209c3:	8a 00                	mov    (%eax),%al
f01209c5:	0f b6 c0             	movzbl %al,%eax
f01209c8:	29 c2                	sub    %eax,%edx
f01209ca:	89 d0                	mov    %edx,%eax
}
f01209cc:	5d                   	pop    %ebp
f01209cd:	c3                   	ret    

f01209ce <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f01209ce:	55                   	push   %ebp
f01209cf:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f01209d1:	eb 09                	jmp    f01209dc <strncmp+0xe>
		n--, p++, q++;
f01209d3:	ff 4d 10             	decl   0x10(%ebp)
f01209d6:	ff 45 08             	incl   0x8(%ebp)
f01209d9:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f01209dc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01209e0:	74 17                	je     f01209f9 <strncmp+0x2b>
f01209e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01209e5:	8a 00                	mov    (%eax),%al
f01209e7:	84 c0                	test   %al,%al
f01209e9:	74 0e                	je     f01209f9 <strncmp+0x2b>
f01209eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01209ee:	8a 10                	mov    (%eax),%dl
f01209f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01209f3:	8a 00                	mov    (%eax),%al
f01209f5:	38 c2                	cmp    %al,%dl
f01209f7:	74 da                	je     f01209d3 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f01209f9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01209fd:	75 07                	jne    f0120a06 <strncmp+0x38>
		return 0;
f01209ff:	b8 00 00 00 00       	mov    $0x0,%eax
f0120a04:	eb 14                	jmp    f0120a1a <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f0120a06:	8b 45 08             	mov    0x8(%ebp),%eax
f0120a09:	8a 00                	mov    (%eax),%al
f0120a0b:	0f b6 d0             	movzbl %al,%edx
f0120a0e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120a11:	8a 00                	mov    (%eax),%al
f0120a13:	0f b6 c0             	movzbl %al,%eax
f0120a16:	29 c2                	sub    %eax,%edx
f0120a18:	89 d0                	mov    %edx,%eax
}
f0120a1a:	5d                   	pop    %ebp
f0120a1b:	c3                   	ret    

f0120a1c <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f0120a1c:	55                   	push   %ebp
f0120a1d:	89 e5                	mov    %esp,%ebp
f0120a1f:	83 ec 04             	sub    $0x4,%esp
f0120a22:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120a25:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0120a28:	eb 12                	jmp    f0120a3c <strchr+0x20>
		if (*s == c)
f0120a2a:	8b 45 08             	mov    0x8(%ebp),%eax
f0120a2d:	8a 00                	mov    (%eax),%al
f0120a2f:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0120a32:	75 05                	jne    f0120a39 <strchr+0x1d>
			return (char *) s;
f0120a34:	8b 45 08             	mov    0x8(%ebp),%eax
f0120a37:	eb 11                	jmp    f0120a4a <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f0120a39:	ff 45 08             	incl   0x8(%ebp)
f0120a3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0120a3f:	8a 00                	mov    (%eax),%al
f0120a41:	84 c0                	test   %al,%al
f0120a43:	75 e5                	jne    f0120a2a <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f0120a45:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0120a4a:	c9                   	leave  
f0120a4b:	c3                   	ret    

f0120a4c <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f0120a4c:	55                   	push   %ebp
f0120a4d:	89 e5                	mov    %esp,%ebp
f0120a4f:	83 ec 04             	sub    $0x4,%esp
f0120a52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120a55:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f0120a58:	eb 0d                	jmp    f0120a67 <strfind+0x1b>
		if (*s == c)
f0120a5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0120a5d:	8a 00                	mov    (%eax),%al
f0120a5f:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0120a62:	74 0e                	je     f0120a72 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0120a64:	ff 45 08             	incl   0x8(%ebp)
f0120a67:	8b 45 08             	mov    0x8(%ebp),%eax
f0120a6a:	8a 00                	mov    (%eax),%al
f0120a6c:	84 c0                	test   %al,%al
f0120a6e:	75 ea                	jne    f0120a5a <strfind+0xe>
f0120a70:	eb 01                	jmp    f0120a73 <strfind+0x27>
		if (*s == c)
			break;
f0120a72:	90                   	nop
	return (char *) s;
f0120a73:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0120a76:	c9                   	leave  
f0120a77:	c3                   	ret    

f0120a78 <memset>:


void *
memset(void *v, int c, uint32 n)
{
f0120a78:	55                   	push   %ebp
f0120a79:	89 e5                	mov    %esp,%ebp
f0120a7b:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f0120a7e:	8b 45 08             	mov    0x8(%ebp),%eax
f0120a81:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0120a84:	8b 45 10             	mov    0x10(%ebp),%eax
f0120a87:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f0120a8a:	eb 0e                	jmp    f0120a9a <memset+0x22>
		*p++ = c;
f0120a8c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0120a8f:	8d 50 01             	lea    0x1(%eax),%edx
f0120a92:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0120a95:	8b 55 0c             	mov    0xc(%ebp),%edx
f0120a98:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f0120a9a:	ff 4d f8             	decl   -0x8(%ebp)
f0120a9d:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0120aa1:	79 e9                	jns    f0120a8c <memset+0x14>
		*p++ = c;

	return v;
f0120aa3:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0120aa6:	c9                   	leave  
f0120aa7:	c3                   	ret    

f0120aa8 <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f0120aa8:	55                   	push   %ebp
f0120aa9:	89 e5                	mov    %esp,%ebp
f0120aab:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0120aae:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120ab1:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0120ab4:	8b 45 08             	mov    0x8(%ebp),%eax
f0120ab7:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f0120aba:	eb 16                	jmp    f0120ad2 <memcpy+0x2a>
		*d++ = *s++;
f0120abc:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0120abf:	8d 50 01             	lea    0x1(%eax),%edx
f0120ac2:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0120ac5:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0120ac8:	8d 4a 01             	lea    0x1(%edx),%ecx
f0120acb:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0120ace:	8a 12                	mov    (%edx),%dl
f0120ad0:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f0120ad2:	8b 45 10             	mov    0x10(%ebp),%eax
f0120ad5:	8d 50 ff             	lea    -0x1(%eax),%edx
f0120ad8:	89 55 10             	mov    %edx,0x10(%ebp)
f0120adb:	85 c0                	test   %eax,%eax
f0120add:	75 dd                	jne    f0120abc <memcpy+0x14>
		*d++ = *s++;

	return dst;
f0120adf:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0120ae2:	c9                   	leave  
f0120ae3:	c3                   	ret    

f0120ae4 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0120ae4:	55                   	push   %ebp
f0120ae5:	89 e5                	mov    %esp,%ebp
f0120ae7:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0120aea:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120aed:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0120af0:	8b 45 08             	mov    0x8(%ebp),%eax
f0120af3:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f0120af6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0120af9:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0120afc:	73 50                	jae    f0120b4e <memmove+0x6a>
f0120afe:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0120b01:	8b 45 10             	mov    0x10(%ebp),%eax
f0120b04:	01 d0                	add    %edx,%eax
f0120b06:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f0120b09:	76 43                	jbe    f0120b4e <memmove+0x6a>
		s += n;
f0120b0b:	8b 45 10             	mov    0x10(%ebp),%eax
f0120b0e:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f0120b11:	8b 45 10             	mov    0x10(%ebp),%eax
f0120b14:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f0120b17:	eb 10                	jmp    f0120b29 <memmove+0x45>
			*--d = *--s;
f0120b19:	ff 4d f8             	decl   -0x8(%ebp)
f0120b1c:	ff 4d fc             	decl   -0x4(%ebp)
f0120b1f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0120b22:	8a 10                	mov    (%eax),%dl
f0120b24:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0120b27:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f0120b29:	8b 45 10             	mov    0x10(%ebp),%eax
f0120b2c:	8d 50 ff             	lea    -0x1(%eax),%edx
f0120b2f:	89 55 10             	mov    %edx,0x10(%ebp)
f0120b32:	85 c0                	test   %eax,%eax
f0120b34:	75 e3                	jne    f0120b19 <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f0120b36:	eb 23                	jmp    f0120b5b <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f0120b38:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0120b3b:	8d 50 01             	lea    0x1(%eax),%edx
f0120b3e:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0120b41:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0120b44:	8d 4a 01             	lea    0x1(%edx),%ecx
f0120b47:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0120b4a:	8a 12                	mov    (%edx),%dl
f0120b4c:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f0120b4e:	8b 45 10             	mov    0x10(%ebp),%eax
f0120b51:	8d 50 ff             	lea    -0x1(%eax),%edx
f0120b54:	89 55 10             	mov    %edx,0x10(%ebp)
f0120b57:	85 c0                	test   %eax,%eax
f0120b59:	75 dd                	jne    f0120b38 <memmove+0x54>
			*d++ = *s++;

	return dst;
f0120b5b:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0120b5e:	c9                   	leave  
f0120b5f:	c3                   	ret    

f0120b60 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f0120b60:	55                   	push   %ebp
f0120b61:	89 e5                	mov    %esp,%ebp
f0120b63:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f0120b66:	8b 45 08             	mov    0x8(%ebp),%eax
f0120b69:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f0120b6c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120b6f:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0120b72:	eb 2a                	jmp    f0120b9e <memcmp+0x3e>
		if (*s1 != *s2)
f0120b74:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0120b77:	8a 10                	mov    (%eax),%dl
f0120b79:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0120b7c:	8a 00                	mov    (%eax),%al
f0120b7e:	38 c2                	cmp    %al,%dl
f0120b80:	74 16                	je     f0120b98 <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0120b82:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0120b85:	8a 00                	mov    (%eax),%al
f0120b87:	0f b6 d0             	movzbl %al,%edx
f0120b8a:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0120b8d:	8a 00                	mov    (%eax),%al
f0120b8f:	0f b6 c0             	movzbl %al,%eax
f0120b92:	29 c2                	sub    %eax,%edx
f0120b94:	89 d0                	mov    %edx,%eax
f0120b96:	eb 18                	jmp    f0120bb0 <memcmp+0x50>
		s1++, s2++;
f0120b98:	ff 45 fc             	incl   -0x4(%ebp)
f0120b9b:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f0120b9e:	8b 45 10             	mov    0x10(%ebp),%eax
f0120ba1:	8d 50 ff             	lea    -0x1(%eax),%edx
f0120ba4:	89 55 10             	mov    %edx,0x10(%ebp)
f0120ba7:	85 c0                	test   %eax,%eax
f0120ba9:	75 c9                	jne    f0120b74 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f0120bab:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0120bb0:	c9                   	leave  
f0120bb1:	c3                   	ret    

f0120bb2 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f0120bb2:	55                   	push   %ebp
f0120bb3:	89 e5                	mov    %esp,%ebp
f0120bb5:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f0120bb8:	8b 55 08             	mov    0x8(%ebp),%edx
f0120bbb:	8b 45 10             	mov    0x10(%ebp),%eax
f0120bbe:	01 d0                	add    %edx,%eax
f0120bc0:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f0120bc3:	eb 15                	jmp    f0120bda <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f0120bc5:	8b 45 08             	mov    0x8(%ebp),%eax
f0120bc8:	8a 00                	mov    (%eax),%al
f0120bca:	0f b6 d0             	movzbl %al,%edx
f0120bcd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120bd0:	0f b6 c0             	movzbl %al,%eax
f0120bd3:	39 c2                	cmp    %eax,%edx
f0120bd5:	74 0d                	je     f0120be4 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f0120bd7:	ff 45 08             	incl   0x8(%ebp)
f0120bda:	8b 45 08             	mov    0x8(%ebp),%eax
f0120bdd:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0120be0:	72 e3                	jb     f0120bc5 <memfind+0x13>
f0120be2:	eb 01                	jmp    f0120be5 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0120be4:	90                   	nop
	return (void *) s;
f0120be5:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0120be8:	c9                   	leave  
f0120be9:	c3                   	ret    

f0120bea <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f0120bea:	55                   	push   %ebp
f0120beb:	89 e5                	mov    %esp,%ebp
f0120bed:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f0120bf0:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f0120bf7:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0120bfe:	eb 03                	jmp    f0120c03 <strtol+0x19>
		s++;
f0120c00:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f0120c03:	8b 45 08             	mov    0x8(%ebp),%eax
f0120c06:	8a 00                	mov    (%eax),%al
f0120c08:	3c 20                	cmp    $0x20,%al
f0120c0a:	74 f4                	je     f0120c00 <strtol+0x16>
f0120c0c:	8b 45 08             	mov    0x8(%ebp),%eax
f0120c0f:	8a 00                	mov    (%eax),%al
f0120c11:	3c 09                	cmp    $0x9,%al
f0120c13:	74 eb                	je     f0120c00 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f0120c15:	8b 45 08             	mov    0x8(%ebp),%eax
f0120c18:	8a 00                	mov    (%eax),%al
f0120c1a:	3c 2b                	cmp    $0x2b,%al
f0120c1c:	75 05                	jne    f0120c23 <strtol+0x39>
		s++;
f0120c1e:	ff 45 08             	incl   0x8(%ebp)
f0120c21:	eb 13                	jmp    f0120c36 <strtol+0x4c>
	else if (*s == '-')
f0120c23:	8b 45 08             	mov    0x8(%ebp),%eax
f0120c26:	8a 00                	mov    (%eax),%al
f0120c28:	3c 2d                	cmp    $0x2d,%al
f0120c2a:	75 0a                	jne    f0120c36 <strtol+0x4c>
		s++, neg = 1;
f0120c2c:	ff 45 08             	incl   0x8(%ebp)
f0120c2f:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f0120c36:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0120c3a:	74 06                	je     f0120c42 <strtol+0x58>
f0120c3c:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f0120c40:	75 20                	jne    f0120c62 <strtol+0x78>
f0120c42:	8b 45 08             	mov    0x8(%ebp),%eax
f0120c45:	8a 00                	mov    (%eax),%al
f0120c47:	3c 30                	cmp    $0x30,%al
f0120c49:	75 17                	jne    f0120c62 <strtol+0x78>
f0120c4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0120c4e:	40                   	inc    %eax
f0120c4f:	8a 00                	mov    (%eax),%al
f0120c51:	3c 78                	cmp    $0x78,%al
f0120c53:	75 0d                	jne    f0120c62 <strtol+0x78>
		s += 2, base = 16;
f0120c55:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f0120c59:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f0120c60:	eb 28                	jmp    f0120c8a <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f0120c62:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0120c66:	75 15                	jne    f0120c7d <strtol+0x93>
f0120c68:	8b 45 08             	mov    0x8(%ebp),%eax
f0120c6b:	8a 00                	mov    (%eax),%al
f0120c6d:	3c 30                	cmp    $0x30,%al
f0120c6f:	75 0c                	jne    f0120c7d <strtol+0x93>
		s++, base = 8;
f0120c71:	ff 45 08             	incl   0x8(%ebp)
f0120c74:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f0120c7b:	eb 0d                	jmp    f0120c8a <strtol+0xa0>
	else if (base == 0)
f0120c7d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0120c81:	75 07                	jne    f0120c8a <strtol+0xa0>
		base = 10;
f0120c83:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f0120c8a:	8b 45 08             	mov    0x8(%ebp),%eax
f0120c8d:	8a 00                	mov    (%eax),%al
f0120c8f:	3c 2f                	cmp    $0x2f,%al
f0120c91:	7e 19                	jle    f0120cac <strtol+0xc2>
f0120c93:	8b 45 08             	mov    0x8(%ebp),%eax
f0120c96:	8a 00                	mov    (%eax),%al
f0120c98:	3c 39                	cmp    $0x39,%al
f0120c9a:	7f 10                	jg     f0120cac <strtol+0xc2>
			dig = *s - '0';
f0120c9c:	8b 45 08             	mov    0x8(%ebp),%eax
f0120c9f:	8a 00                	mov    (%eax),%al
f0120ca1:	0f be c0             	movsbl %al,%eax
f0120ca4:	83 e8 30             	sub    $0x30,%eax
f0120ca7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0120caa:	eb 42                	jmp    f0120cee <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f0120cac:	8b 45 08             	mov    0x8(%ebp),%eax
f0120caf:	8a 00                	mov    (%eax),%al
f0120cb1:	3c 60                	cmp    $0x60,%al
f0120cb3:	7e 19                	jle    f0120cce <strtol+0xe4>
f0120cb5:	8b 45 08             	mov    0x8(%ebp),%eax
f0120cb8:	8a 00                	mov    (%eax),%al
f0120cba:	3c 7a                	cmp    $0x7a,%al
f0120cbc:	7f 10                	jg     f0120cce <strtol+0xe4>
			dig = *s - 'a' + 10;
f0120cbe:	8b 45 08             	mov    0x8(%ebp),%eax
f0120cc1:	8a 00                	mov    (%eax),%al
f0120cc3:	0f be c0             	movsbl %al,%eax
f0120cc6:	83 e8 57             	sub    $0x57,%eax
f0120cc9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0120ccc:	eb 20                	jmp    f0120cee <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f0120cce:	8b 45 08             	mov    0x8(%ebp),%eax
f0120cd1:	8a 00                	mov    (%eax),%al
f0120cd3:	3c 40                	cmp    $0x40,%al
f0120cd5:	7e 39                	jle    f0120d10 <strtol+0x126>
f0120cd7:	8b 45 08             	mov    0x8(%ebp),%eax
f0120cda:	8a 00                	mov    (%eax),%al
f0120cdc:	3c 5a                	cmp    $0x5a,%al
f0120cde:	7f 30                	jg     f0120d10 <strtol+0x126>
			dig = *s - 'A' + 10;
f0120ce0:	8b 45 08             	mov    0x8(%ebp),%eax
f0120ce3:	8a 00                	mov    (%eax),%al
f0120ce5:	0f be c0             	movsbl %al,%eax
f0120ce8:	83 e8 37             	sub    $0x37,%eax
f0120ceb:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f0120cee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120cf1:	3b 45 10             	cmp    0x10(%ebp),%eax
f0120cf4:	7d 19                	jge    f0120d0f <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f0120cf6:	ff 45 08             	incl   0x8(%ebp)
f0120cf9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0120cfc:	0f af 45 10          	imul   0x10(%ebp),%eax
f0120d00:	89 c2                	mov    %eax,%edx
f0120d02:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120d05:	01 d0                	add    %edx,%eax
f0120d07:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f0120d0a:	e9 7b ff ff ff       	jmp    f0120c8a <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f0120d0f:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f0120d10:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0120d14:	74 08                	je     f0120d1e <strtol+0x134>
		*endptr = (char *) s;
f0120d16:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120d19:	8b 55 08             	mov    0x8(%ebp),%edx
f0120d1c:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f0120d1e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0120d22:	74 07                	je     f0120d2b <strtol+0x141>
f0120d24:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0120d27:	f7 d8                	neg    %eax
f0120d29:	eb 03                	jmp    f0120d2e <strtol+0x144>
f0120d2b:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0120d2e:	c9                   	leave  
f0120d2f:	c3                   	ret    

f0120d30 <ltostr>:

void
ltostr(long value, char *str)
{
f0120d30:	55                   	push   %ebp
f0120d31:	89 e5                	mov    %esp,%ebp
f0120d33:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f0120d36:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f0120d3d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f0120d44:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0120d48:	79 13                	jns    f0120d5d <ltostr+0x2d>
	{
		neg = 1;
f0120d4a:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f0120d51:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120d54:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f0120d57:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f0120d5a:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f0120d5d:	8b 45 08             	mov    0x8(%ebp),%eax
f0120d60:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0120d65:	99                   	cltd   
f0120d66:	f7 f9                	idiv   %ecx
f0120d68:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f0120d6b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0120d6e:	8d 50 01             	lea    0x1(%eax),%edx
f0120d71:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0120d74:	89 c2                	mov    %eax,%edx
f0120d76:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120d79:	01 d0                	add    %edx,%eax
f0120d7b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0120d7e:	83 c2 30             	add    $0x30,%edx
f0120d81:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0120d83:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0120d86:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0120d8b:	f7 e9                	imul   %ecx
f0120d8d:	c1 fa 02             	sar    $0x2,%edx
f0120d90:	89 c8                	mov    %ecx,%eax
f0120d92:	c1 f8 1f             	sar    $0x1f,%eax
f0120d95:	29 c2                	sub    %eax,%edx
f0120d97:	89 d0                	mov    %edx,%eax
f0120d99:	89 45 08             	mov    %eax,0x8(%ebp)
	/*2023 FIX el7 :)*/
	//} while (value % 10 != 0);
	} while (value != 0);
f0120d9c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0120da0:	75 bb                	jne    f0120d5d <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f0120da2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f0120da9:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0120dac:	48                   	dec    %eax
f0120dad:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f0120db0:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0120db4:	74 3d                	je     f0120df3 <ltostr+0xc3>
		start = 1 ;
f0120db6:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f0120dbd:	eb 34                	jmp    f0120df3 <ltostr+0xc3>
	{
		char tmp = str[start] ;
f0120dbf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120dc2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120dc5:	01 d0                	add    %edx,%eax
f0120dc7:	8a 00                	mov    (%eax),%al
f0120dc9:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f0120dcc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120dcf:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120dd2:	01 c2                	add    %eax,%edx
f0120dd4:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0120dd7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120dda:	01 c8                	add    %ecx,%eax
f0120ddc:	8a 00                	mov    (%eax),%al
f0120dde:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f0120de0:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0120de3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120de6:	01 c2                	add    %eax,%edx
f0120de8:	8a 45 eb             	mov    -0x15(%ebp),%al
f0120deb:	88 02                	mov    %al,(%edx)
		start++ ;
f0120ded:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f0120df0:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f0120df3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120df6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0120df9:	7c c4                	jl     f0120dbf <ltostr+0x8f>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f0120dfb:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0120dfe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120e01:	01 d0                	add    %edx,%eax
f0120e03:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f0120e06:	90                   	nop
f0120e07:	c9                   	leave  
f0120e08:	c3                   	ret    

f0120e09 <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f0120e09:	55                   	push   %ebp
f0120e0a:	89 e5                	mov    %esp,%ebp
f0120e0c:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f0120e0f:	ff 75 08             	pushl  0x8(%ebp)
f0120e12:	e8 73 fa ff ff       	call   f012088a <strlen>
f0120e17:	83 c4 04             	add    $0x4,%esp
f0120e1a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f0120e1d:	ff 75 0c             	pushl  0xc(%ebp)
f0120e20:	e8 65 fa ff ff       	call   f012088a <strlen>
f0120e25:	83 c4 04             	add    $0x4,%esp
f0120e28:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f0120e2b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f0120e32:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0120e39:	eb 17                	jmp    f0120e52 <strcconcat+0x49>
		final[s] = str1[s] ;
f0120e3b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0120e3e:	8b 45 10             	mov    0x10(%ebp),%eax
f0120e41:	01 c2                	add    %eax,%edx
f0120e43:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0120e46:	8b 45 08             	mov    0x8(%ebp),%eax
f0120e49:	01 c8                	add    %ecx,%eax
f0120e4b:	8a 00                	mov    (%eax),%al
f0120e4d:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f0120e4f:	ff 45 fc             	incl   -0x4(%ebp)
f0120e52:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0120e55:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120e58:	7c e1                	jl     f0120e3b <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0120e5a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f0120e61:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0120e68:	eb 1f                	jmp    f0120e89 <strcconcat+0x80>
		final[s++] = str2[i] ;
f0120e6a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0120e6d:	8d 50 01             	lea    0x1(%eax),%edx
f0120e70:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0120e73:	89 c2                	mov    %eax,%edx
f0120e75:	8b 45 10             	mov    0x10(%ebp),%eax
f0120e78:	01 c2                	add    %eax,%edx
f0120e7a:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0120e7d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0120e80:	01 c8                	add    %ecx,%eax
f0120e82:	8a 00                	mov    (%eax),%al
f0120e84:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f0120e86:	ff 45 f8             	incl   -0x8(%ebp)
f0120e89:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0120e8c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0120e8f:	7c d9                	jl     f0120e6a <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f0120e91:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0120e94:	8b 45 10             	mov    0x10(%ebp),%eax
f0120e97:	01 d0                	add    %edx,%eax
f0120e99:	c6 00 00             	movb   $0x0,(%eax)
}
f0120e9c:	90                   	nop
f0120e9d:	c9                   	leave  
f0120e9e:	c3                   	ret    

f0120e9f <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0120e9f:	55                   	push   %ebp
f0120ea0:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f0120ea2:	8b 45 14             	mov    0x14(%ebp),%eax
f0120ea5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f0120eab:	8b 45 14             	mov    0x14(%ebp),%eax
f0120eae:	8b 00                	mov    (%eax),%eax
f0120eb0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0120eb7:	8b 45 10             	mov    0x10(%ebp),%eax
f0120eba:	01 d0                	add    %edx,%eax
f0120ebc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0120ec2:	eb 0c                	jmp    f0120ed0 <strsplit+0x31>
			*string++ = 0;
f0120ec4:	8b 45 08             	mov    0x8(%ebp),%eax
f0120ec7:	8d 50 01             	lea    0x1(%eax),%edx
f0120eca:	89 55 08             	mov    %edx,0x8(%ebp)
f0120ecd:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0120ed0:	8b 45 08             	mov    0x8(%ebp),%eax
f0120ed3:	8a 00                	mov    (%eax),%al
f0120ed5:	84 c0                	test   %al,%al
f0120ed7:	74 18                	je     f0120ef1 <strsplit+0x52>
f0120ed9:	8b 45 08             	mov    0x8(%ebp),%eax
f0120edc:	8a 00                	mov    (%eax),%al
f0120ede:	0f be c0             	movsbl %al,%eax
f0120ee1:	50                   	push   %eax
f0120ee2:	ff 75 0c             	pushl  0xc(%ebp)
f0120ee5:	e8 32 fb ff ff       	call   f0120a1c <strchr>
f0120eea:	83 c4 08             	add    $0x8,%esp
f0120eed:	85 c0                	test   %eax,%eax
f0120eef:	75 d3                	jne    f0120ec4 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f0120ef1:	8b 45 08             	mov    0x8(%ebp),%eax
f0120ef4:	8a 00                	mov    (%eax),%al
f0120ef6:	84 c0                	test   %al,%al
f0120ef8:	74 5a                	je     f0120f54 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f0120efa:	8b 45 14             	mov    0x14(%ebp),%eax
f0120efd:	8b 00                	mov    (%eax),%eax
f0120eff:	83 f8 0f             	cmp    $0xf,%eax
f0120f02:	75 07                	jne    f0120f0b <strsplit+0x6c>
		{
			return 0;
f0120f04:	b8 00 00 00 00       	mov    $0x0,%eax
f0120f09:	eb 66                	jmp    f0120f71 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0120f0b:	8b 45 14             	mov    0x14(%ebp),%eax
f0120f0e:	8b 00                	mov    (%eax),%eax
f0120f10:	8d 48 01             	lea    0x1(%eax),%ecx
f0120f13:	8b 55 14             	mov    0x14(%ebp),%edx
f0120f16:	89 0a                	mov    %ecx,(%edx)
f0120f18:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0120f1f:	8b 45 10             	mov    0x10(%ebp),%eax
f0120f22:	01 c2                	add    %eax,%edx
f0120f24:	8b 45 08             	mov    0x8(%ebp),%eax
f0120f27:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f0120f29:	eb 03                	jmp    f0120f2e <strsplit+0x8f>
			string++;
f0120f2b:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f0120f2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0120f31:	8a 00                	mov    (%eax),%al
f0120f33:	84 c0                	test   %al,%al
f0120f35:	74 8b                	je     f0120ec2 <strsplit+0x23>
f0120f37:	8b 45 08             	mov    0x8(%ebp),%eax
f0120f3a:	8a 00                	mov    (%eax),%al
f0120f3c:	0f be c0             	movsbl %al,%eax
f0120f3f:	50                   	push   %eax
f0120f40:	ff 75 0c             	pushl  0xc(%ebp)
f0120f43:	e8 d4 fa ff ff       	call   f0120a1c <strchr>
f0120f48:	83 c4 08             	add    $0x8,%esp
f0120f4b:	85 c0                	test   %eax,%eax
f0120f4d:	74 dc                	je     f0120f2b <strsplit+0x8c>
			string++;
	}
f0120f4f:	e9 6e ff ff ff       	jmp    f0120ec2 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f0120f54:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f0120f55:	8b 45 14             	mov    0x14(%ebp),%eax
f0120f58:	8b 00                	mov    (%eax),%eax
f0120f5a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0120f61:	8b 45 10             	mov    0x10(%ebp),%eax
f0120f64:	01 d0                	add    %edx,%eax
f0120f66:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f0120f6c:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0120f71:	c9                   	leave  
f0120f72:	c3                   	ret    

f0120f73 <str2lower>:


char* str2lower(char *dst, const char *src)
{
f0120f73:	55                   	push   %ebp
f0120f74:	89 e5                	mov    %esp,%ebp
f0120f76:	83 ec 08             	sub    $0x8,%esp
	//[PROJECT]
	panic("str2lower is not implemented yet!");
f0120f79:	83 ec 04             	sub    $0x4,%esp
f0120f7c:	68 fc df 12 f0       	push   $0xf012dffc
f0120f81:	68 3f 01 00 00       	push   $0x13f
f0120f86:	68 1e e0 12 f0       	push   $0xf012e01e
f0120f8b:	e8 8a f3 fd ff       	call   f010031a <_panic>

f0120f90 <disk_interrupt_handler>:
#define IDE_ERR		0x01

static int diskno = 0;

void disk_interrupt_handler(struct Trapframe *tf)
{
f0120f90:	55                   	push   %ebp
f0120f91:	89 e5                	mov    %esp,%ebp
f0120f93:	83 ec 18             	sub    $0x18,%esp
f0120f96:	c7 45 f0 f7 01 00 00 	movl   $0x1f7,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0120f9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0120fa0:	89 c2                	mov    %eax,%edx
f0120fa2:	ec                   	in     (%dx),%al
f0120fa3:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f0120fa6:	8a 45 ef             	mov    -0x11(%ebp),%al
	int r;
	//cprintf("\n>>>>>>>> DISK INTERRUPT <<<<<<<<<\n");
	if (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0120fa9:	0f b6 c0             	movzbl %al,%eax
f0120fac:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0120faf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0120fb2:	25 c0 00 00 00       	and    $0xc0,%eax
f0120fb7:	83 f8 40             	cmp    $0x40,%eax
f0120fba:	75 10                	jne    f0120fcc <disk_interrupt_handler+0x3c>
	{
		//cprintf("NOT READY\n");
	}
	else
	{
		wakeup_one(&DISKchannel);
f0120fbc:	83 ec 0c             	sub    $0xc,%esp
f0120fbf:	68 00 24 55 f0       	push   $0xf0552400
f0120fc4:	e8 a7 de fe ff       	call   f010ee70 <wakeup_one>
f0120fc9:	83 c4 10             	add    $0x10,%esp
	}

}
f0120fcc:	90                   	nop
f0120fcd:	c9                   	leave  
f0120fce:	c3                   	ret    

f0120fcf <ide_init>:

void ide_init()
{
f0120fcf:	55                   	push   %ebp
f0120fd0:	89 e5                	mov    %esp,%ebp
f0120fd2:	83 ec 08             	sub    $0x8,%esp
	irq_install_handler(14, &disk_interrupt_handler);
f0120fd5:	83 ec 08             	sub    $0x8,%esp
f0120fd8:	68 90 0f 12 f0       	push   $0xf0120f90
f0120fdd:	6a 0e                	push   $0xe
f0120fdf:	e8 b4 c3 fe ff       	call   f010d398 <irq_install_handler>
f0120fe4:	83 c4 10             	add    $0x10,%esp
	//irq_install_handler(15, &disk_interrupt_handler);
	if (DISK_INT_BLK_METHOD == LCK_SLEEP)
	{
		init_channel(&DISKchannel, "DISK channel");
f0120fe7:	83 ec 08             	sub    $0x8,%esp
f0120fea:	68 2c e0 12 f0       	push   $0xf012e02c
f0120fef:	68 00 24 55 f0       	push   $0xf0552400
f0120ff4:	e8 30 de fe ff       	call   f010ee29 <init_channel>
f0120ff9:	83 c4 10             	add    $0x10,%esp
		init_spinlock(&DISKlock, "DISK channel lock");
f0120ffc:	83 ec 08             	sub    $0x8,%esp
f0120fff:	68 39 e0 12 f0       	push   $0xf012e039
f0121004:	68 40 4f 55 f0       	push   $0xf0554f40
f0121009:	e8 98 da fe ff       	call   f010eaa6 <init_spinlock>
f012100e:	83 c4 10             	add    $0x10,%esp
	}
	else if (DISK_INT_BLK_METHOD == LCK_SEMAPHORE)
	{
		init_ksemaphore(&DISKsem, 0, "DISK semaphore");
	}
}
f0121011:	90                   	nop
f0121012:	c9                   	leave  
f0121013:	c3                   	ret    

f0121014 <ide_wait_ready>:
//	}
//	return 0;
//}

static int ide_wait_ready(bool check_error)
{
f0121014:	55                   	push   %ebp
f0121015:	89 e5                	mov    %esp,%ebp
f0121017:	83 ec 18             	sub    $0x18,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f012101a:	90                   	nop
f012101b:	c7 45 f0 f7 01 00 00 	movl   $0x1f7,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0121022:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0121025:	89 c2                	mov    %eax,%edx
f0121027:	ec                   	in     (%dx),%al
f0121028:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f012102b:	8a 45 ef             	mov    -0x11(%ebp),%al
f012102e:	0f b6 c0             	movzbl %al,%eax
f0121031:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0121034:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0121037:	25 c0 00 00 00       	and    $0xc0,%eax
f012103c:	83 f8 40             	cmp    $0x40,%eax
f012103f:	75 da                	jne    f012101b <ide_wait_ready+0x7>
	/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f0121041:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0121045:	74 24                	je     f012106b <ide_wait_ready+0x57>
f0121047:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012104a:	83 e0 21             	and    $0x21,%eax
f012104d:	85 c0                	test   %eax,%eax
f012104f:	74 1a                	je     f012106b <ide_wait_ready+0x57>
	{
		panic("ERROR @ ide_wait_ready() = %x(%d)\n",r,r);
f0121051:	83 ec 0c             	sub    $0xc,%esp
f0121054:	ff 75 f4             	pushl  -0xc(%ebp)
f0121057:	ff 75 f4             	pushl  -0xc(%ebp)
f012105a:	68 4c e0 12 f0       	push   $0xf012e04c
f012105f:	6a 5d                	push   $0x5d
f0121061:	68 6f e0 12 f0       	push   $0xf012e06f
f0121066:	e8 af f2 fd ff       	call   f010031a <_panic>
		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
	}
	return 0;
f012106b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0121070:	c9                   	leave  
f0121071:	c3                   	ret    

f0121072 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f0121072:	55                   	push   %ebp
f0121073:	89 e5                	mov    %esp,%ebp
f0121075:	57                   	push   %edi
f0121076:	53                   	push   %ebx
f0121077:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f012107a:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0121081:	76 16                	jbe    f0121099 <ide_read+0x27>
f0121083:	68 7a e0 12 f0       	push   $0xf012e07a
f0121088:	68 87 e0 12 f0       	push   $0xf012e087
f012108d:	6a 68                	push   $0x68
f012108f:	68 6f e0 12 f0       	push   $0xf012e06f
f0121094:	e8 81 f2 fd ff       	call   f010031a <_panic>

	//FUTURE NOTE: This BUSY-WAIT should be replaced by Interrupt to allow the OS to schedule another process till the device become ready [el7 :)]
	ide_wait_ready(0);
f0121099:	83 ec 0c             	sub    $0xc,%esp
f012109c:	6a 00                	push   $0x0
f012109e:	e8 71 ff ff ff       	call   f0121014 <ide_wait_ready>
f01210a3:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f01210a6:	8b 45 10             	mov    0x10(%ebp),%eax
f01210a9:	0f b6 c0             	movzbl %al,%eax
f01210ac:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f01210b3:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01210b6:	8a 45 d2             	mov    -0x2e(%ebp),%al
f01210b9:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01210bc:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f01210bd:	8b 45 08             	mov    0x8(%ebp),%eax
f01210c0:	0f b6 c0             	movzbl %al,%eax
f01210c3:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f01210ca:	88 45 d3             	mov    %al,-0x2d(%ebp)
f01210cd:	8a 45 d3             	mov    -0x2d(%ebp),%al
f01210d0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01210d3:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f01210d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01210d7:	c1 e8 08             	shr    $0x8,%eax
f01210da:	0f b6 c0             	movzbl %al,%eax
f01210dd:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f01210e4:	88 45 d4             	mov    %al,-0x2c(%ebp)
f01210e7:	8a 45 d4             	mov    -0x2c(%ebp),%al
f01210ea:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01210ed:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f01210ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01210f1:	c1 e8 10             	shr    $0x10,%eax
f01210f4:	0f b6 c0             	movzbl %al,%eax
f01210f7:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f01210fe:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0121101:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0121104:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0121107:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0121108:	a1 b0 22 55 f0       	mov    0xf05522b0,%eax
f012110d:	83 e0 01             	and    $0x1,%eax
f0121110:	c1 e0 04             	shl    $0x4,%eax
f0121113:	88 c2                	mov    %al,%dl
f0121115:	8b 45 08             	mov    0x8(%ebp),%eax
f0121118:	c1 e8 18             	shr    $0x18,%eax
f012111b:	83 e0 0f             	and    $0xf,%eax
f012111e:	09 d0                	or     %edx,%eax
f0121120:	83 c8 e0             	or     $0xffffffe0,%eax
f0121123:	0f b6 c0             	movzbl %al,%eax
f0121126:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f012112d:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0121130:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0121133:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0121136:	ee                   	out    %al,(%dx)
f0121137:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f012113e:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f0121142:	8a 45 d7             	mov    -0x29(%ebp),%al
f0121145:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0121148:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0121149:	eb 55                	jmp    f01211a0 <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f012114b:	83 ec 0c             	sub    $0xc,%esp
f012114e:	6a 01                	push   $0x1
f0121150:	e8 bf fe ff ff       	call   f0121014 <ide_wait_ready>
f0121155:	83 c4 10             	add    $0x10,%esp
f0121158:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012115b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012115f:	79 05                	jns    f0121166 <ide_read+0xf4>
			return r;
f0121161:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0121164:	eb 45                	jmp    f01211ab <ide_read+0x139>
f0121166:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f012116d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121170:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0121173:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f012117a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012117d:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0121180:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0121183:	89 cb                	mov    %ecx,%ebx
f0121185:	89 df                	mov    %ebx,%edi
f0121187:	89 c1                	mov    %eax,%ecx
f0121189:	fc                   	cld    
f012118a:	f2 6d                	repnz insl (%dx),%es:(%edi)
f012118c:	89 c8                	mov    %ecx,%eax
f012118e:	89 fb                	mov    %edi,%ebx
f0121190:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0121193:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0121196:	ff 4d 10             	decl   0x10(%ebp)
f0121199:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f01211a0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01211a4:	75 a5                	jne    f012114b <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f01211a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01211ab:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01211ae:	5b                   	pop    %ebx
f01211af:	5f                   	pop    %edi
f01211b0:	5d                   	pop    %ebp
f01211b1:	c3                   	ret    

f01211b2 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f01211b2:	55                   	push   %ebp
f01211b3:	89 e5                	mov    %esp,%ebp
f01211b5:	56                   	push   %esi
f01211b6:	53                   	push   %ebx
f01211b7:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f01211ba:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f01211c1:	76 19                	jbe    f01211dc <ide_write+0x2a>
f01211c3:	68 7a e0 12 f0       	push   $0xf012e07a
f01211c8:	68 87 e0 12 f0       	push   $0xf012e087
f01211cd:	68 82 00 00 00       	push   $0x82
f01211d2:	68 6f e0 12 f0       	push   $0xf012e06f
f01211d7:	e8 3e f1 fd ff       	call   f010031a <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f01211dc:	83 ec 0c             	sub    $0xc,%esp
f01211df:	6a 00                	push   $0x0
f01211e1:	e8 2e fe ff ff       	call   f0121014 <ide_wait_ready>
f01211e6:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f01211e9:	8b 45 10             	mov    0x10(%ebp),%eax
f01211ec:	0f b6 c0             	movzbl %al,%eax
f01211ef:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f01211f6:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01211f9:	8a 45 d2             	mov    -0x2e(%ebp),%al
f01211fc:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01211ff:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0121200:	8b 45 08             	mov    0x8(%ebp),%eax
f0121203:	0f b6 c0             	movzbl %al,%eax
f0121206:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f012120d:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0121210:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0121213:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0121216:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0121217:	8b 45 08             	mov    0x8(%ebp),%eax
f012121a:	c1 e8 08             	shr    $0x8,%eax
f012121d:	0f b6 c0             	movzbl %al,%eax
f0121220:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0121227:	88 45 d4             	mov    %al,-0x2c(%ebp)
f012122a:	8a 45 d4             	mov    -0x2c(%ebp),%al
f012122d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0121230:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0121231:	8b 45 08             	mov    0x8(%ebp),%eax
f0121234:	c1 e8 10             	shr    $0x10,%eax
f0121237:	0f b6 c0             	movzbl %al,%eax
f012123a:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0121241:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0121244:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0121247:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f012124a:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f012124b:	a1 b0 22 55 f0       	mov    0xf05522b0,%eax
f0121250:	83 e0 01             	and    $0x1,%eax
f0121253:	c1 e0 04             	shl    $0x4,%eax
f0121256:	88 c2                	mov    %al,%dl
f0121258:	8b 45 08             	mov    0x8(%ebp),%eax
f012125b:	c1 e8 18             	shr    $0x18,%eax
f012125e:	83 e0 0f             	and    $0xf,%eax
f0121261:	09 d0                	or     %edx,%eax
f0121263:	83 c8 e0             	or     $0xffffffe0,%eax
f0121266:	0f b6 c0             	movzbl %al,%eax
f0121269:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0121270:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0121273:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0121276:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0121279:	ee                   	out    %al,(%dx)
f012127a:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0121281:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f0121285:	8a 45 d7             	mov    -0x29(%ebp),%al
f0121288:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012128b:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f012128c:	eb 55                	jmp    f01212e3 <ide_write+0x131>
		if ((r = ide_wait_ready(1)) < 0)
f012128e:	83 ec 0c             	sub    $0xc,%esp
f0121291:	6a 01                	push   $0x1
f0121293:	e8 7c fd ff ff       	call   f0121014 <ide_wait_ready>
f0121298:	83 c4 10             	add    $0x10,%esp
f012129b:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012129e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01212a2:	79 05                	jns    f01212a9 <ide_write+0xf7>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f01212a4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01212a7:	eb 45                	jmp    f01212ee <ide_write+0x13c>
f01212a9:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f01212b0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01212b3:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01212b6:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f01212bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01212c0:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f01212c3:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01212c6:	89 cb                	mov    %ecx,%ebx
f01212c8:	89 de                	mov    %ebx,%esi
f01212ca:	89 c1                	mov    %eax,%ecx
f01212cc:	fc                   	cld    
f01212cd:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f01212cf:	89 c8                	mov    %ecx,%eax
f01212d1:	89 f3                	mov    %esi,%ebx
f01212d3:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f01212d6:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f01212d9:	ff 4d 10             	decl   0x10(%ebp)
f01212dc:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f01212e3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01212e7:	75 a5                	jne    f012128e <ide_write+0xdc>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f01212e9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01212ee:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01212f1:	5b                   	pop    %ebx
f01212f2:	5e                   	pop    %esi
f01212f3:	5d                   	pop    %ebp
f01212f4:	c3                   	ret    

f01212f5 <get_block_size>:

//=====================================================
// 1) GET BLOCK SIZE (including size of its meta data):
//=====================================================
__inline__ uint32 get_block_size(void* va)
{
f01212f5:	55                   	push   %ebp
f01212f6:	89 e5                	mov    %esp,%ebp
f01212f8:	83 ec 10             	sub    $0x10,%esp
	uint32 *curBlkMetaData = ((uint32 *)va - 1) ;
f01212fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01212fe:	83 e8 04             	sub    $0x4,%eax
f0121301:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return (*curBlkMetaData) & ~(0x1);
f0121304:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0121307:	8b 00                	mov    (%eax),%eax
f0121309:	83 e0 fe             	and    $0xfffffffe,%eax
}
f012130c:	c9                   	leave  
f012130d:	c3                   	ret    

f012130e <is_free_block>:

//===========================
// 2) GET BLOCK STATUS:
//===========================
__inline__ int8 is_free_block(void* va)
{
f012130e:	55                   	push   %ebp
f012130f:	89 e5                	mov    %esp,%ebp
f0121311:	83 ec 10             	sub    $0x10,%esp
	uint32 *curBlkMetaData = ((uint32 *)va - 1) ;
f0121314:	8b 45 08             	mov    0x8(%ebp),%eax
f0121317:	83 e8 04             	sub    $0x4,%eax
f012131a:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return (~(*curBlkMetaData) & 0x1) ;
f012131d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0121320:	8b 00                	mov    (%eax),%eax
f0121322:	83 e0 01             	and    $0x1,%eax
f0121325:	85 c0                	test   %eax,%eax
f0121327:	0f 94 c0             	sete   %al
}
f012132a:	c9                   	leave  
f012132b:	c3                   	ret    

f012132c <alloc_block>:
//===========================
// 3) ALLOCATE BLOCK:
//===========================

void *alloc_block(uint32 size, int ALLOC_STRATEGY)
{
f012132c:	55                   	push   %ebp
f012132d:	89 e5                	mov    %esp,%ebp
f012132f:	83 ec 18             	sub    $0x18,%esp
	void *va = NULL;
f0121332:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (ALLOC_STRATEGY)
f0121339:	8b 45 0c             	mov    0xc(%ebp),%eax
f012133c:	83 f8 02             	cmp    $0x2,%eax
f012133f:	74 2b                	je     f012136c <alloc_block+0x40>
f0121341:	83 f8 02             	cmp    $0x2,%eax
f0121344:	7f 07                	jg     f012134d <alloc_block+0x21>
f0121346:	83 f8 01             	cmp    $0x1,%eax
f0121349:	74 0e                	je     f0121359 <alloc_block+0x2d>
f012134b:	eb 58                	jmp    f01213a5 <alloc_block+0x79>
f012134d:	83 f8 03             	cmp    $0x3,%eax
f0121350:	74 2d                	je     f012137f <alloc_block+0x53>
f0121352:	83 f8 04             	cmp    $0x4,%eax
f0121355:	74 3b                	je     f0121392 <alloc_block+0x66>
f0121357:	eb 4c                	jmp    f01213a5 <alloc_block+0x79>
	{
	case DA_FF:
		va = alloc_block_FF(size);
f0121359:	83 ec 0c             	sub    $0xc,%esp
f012135c:	ff 75 08             	pushl  0x8(%ebp)
f012135f:	e8 49 01 00 00       	call   f01214ad <alloc_block_FF>
f0121364:	83 c4 10             	add    $0x10,%esp
f0121367:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012136a:	eb 4a                	jmp    f01213b6 <alloc_block+0x8a>
	case DA_NF:
		va = alloc_block_NF(size);
f012136c:	83 ec 0c             	sub    $0xc,%esp
f012136f:	ff 75 08             	pushl  0x8(%ebp)
f0121372:	e8 4d 02 00 00       	call   f01215c4 <alloc_block_NF>
f0121377:	83 c4 10             	add    $0x10,%esp
f012137a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f012137d:	eb 37                	jmp    f01213b6 <alloc_block+0x8a>
	case DA_BF:
		va = alloc_block_BF(size);
f012137f:	83 ec 0c             	sub    $0xc,%esp
f0121382:	ff 75 08             	pushl  0x8(%ebp)
f0121385:	e8 c6 01 00 00       	call   f0121550 <alloc_block_BF>
f012138a:	83 c4 10             	add    $0x10,%esp
f012138d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f0121390:	eb 24                	jmp    f01213b6 <alloc_block+0x8a>
	case DA_WF:
		va = alloc_block_WF(size);
f0121392:	83 ec 0c             	sub    $0xc,%esp
f0121395:	ff 75 08             	pushl  0x8(%ebp)
f0121398:	e8 0a 02 00 00       	call   f01215a7 <alloc_block_WF>
f012139d:	83 c4 10             	add    $0x10,%esp
f01213a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		break;
f01213a3:	eb 11                	jmp    f01213b6 <alloc_block+0x8a>
	default:
		cprintf("Invalid allocation strategy\n");
f01213a5:	83 ec 0c             	sub    $0xc,%esp
f01213a8:	68 9c e0 12 f0       	push   $0xf012e09c
f01213ad:	e8 ba fb fd ff       	call   f0100f6c <cprintf>
f01213b2:	83 c4 10             	add    $0x10,%esp
		break;
f01213b5:	90                   	nop
	}
	return va;
f01213b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01213b9:	c9                   	leave  
f01213ba:	c3                   	ret    

f01213bb <print_blocks_list>:
//===========================
// 4) PRINT BLOCKS LIST:
//===========================

void print_blocks_list(struct MemBlock_LIST list)
{
f01213bb:	55                   	push   %ebp
f01213bc:	89 e5                	mov    %esp,%ebp
f01213be:	53                   	push   %ebx
f01213bf:	83 ec 14             	sub    $0x14,%esp
	cprintf("=========================================\n");
f01213c2:	83 ec 0c             	sub    $0xc,%esp
f01213c5:	68 bc e0 12 f0       	push   $0xf012e0bc
f01213ca:	e8 9d fb fd ff       	call   f0100f6c <cprintf>
f01213cf:	83 c4 10             	add    $0x10,%esp
	struct BlockElement* blk ;
	cprintf("\nDynAlloc Blocks List:\n");
f01213d2:	83 ec 0c             	sub    $0xc,%esp
f01213d5:	68 e7 e0 12 f0       	push   $0xf012e0e7
f01213da:	e8 8d fb fd ff       	call   f0100f6c <cprintf>
f01213df:	83 c4 10             	add    $0x10,%esp
	LIST_FOREACH(blk, &list)
f01213e2:	8b 45 08             	mov    0x8(%ebp),%eax
f01213e5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01213e8:	eb 37                	jmp    f0121421 <print_blocks_list+0x66>
	{
		cprintf("(size: %d, isFree: %d)\n", get_block_size(blk), is_free_block(blk)) ;
f01213ea:	83 ec 0c             	sub    $0xc,%esp
f01213ed:	ff 75 f4             	pushl  -0xc(%ebp)
f01213f0:	e8 19 ff ff ff       	call   f012130e <is_free_block>
f01213f5:	83 c4 10             	add    $0x10,%esp
f01213f8:	0f be d8             	movsbl %al,%ebx
f01213fb:	83 ec 0c             	sub    $0xc,%esp
f01213fe:	ff 75 f4             	pushl  -0xc(%ebp)
f0121401:	e8 ef fe ff ff       	call   f01212f5 <get_block_size>
f0121406:	83 c4 10             	add    $0x10,%esp
f0121409:	83 ec 04             	sub    $0x4,%esp
f012140c:	53                   	push   %ebx
f012140d:	50                   	push   %eax
f012140e:	68 ff e0 12 f0       	push   $0xf012e0ff
f0121413:	e8 54 fb fd ff       	call   f0100f6c <cprintf>
f0121418:	83 c4 10             	add    $0x10,%esp
void print_blocks_list(struct MemBlock_LIST list)
{
	cprintf("=========================================\n");
	struct BlockElement* blk ;
	cprintf("\nDynAlloc Blocks List:\n");
	LIST_FOREACH(blk, &list)
f012141b:	8b 45 10             	mov    0x10(%ebp),%eax
f012141e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0121421:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0121425:	74 07                	je     f012142e <print_blocks_list+0x73>
f0121427:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012142a:	8b 00                	mov    (%eax),%eax
f012142c:	eb 05                	jmp    f0121433 <print_blocks_list+0x78>
f012142e:	b8 00 00 00 00       	mov    $0x0,%eax
f0121433:	89 45 10             	mov    %eax,0x10(%ebp)
f0121436:	8b 45 10             	mov    0x10(%ebp),%eax
f0121439:	85 c0                	test   %eax,%eax
f012143b:	75 ad                	jne    f01213ea <print_blocks_list+0x2f>
f012143d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0121441:	75 a7                	jne    f01213ea <print_blocks_list+0x2f>
	{
		cprintf("(size: %d, isFree: %d)\n", get_block_size(blk), is_free_block(blk)) ;
	}
	cprintf("=========================================\n");
f0121443:	83 ec 0c             	sub    $0xc,%esp
f0121446:	68 bc e0 12 f0       	push   $0xf012e0bc
f012144b:	e8 1c fb fd ff       	call   f0100f6c <cprintf>
f0121450:	83 c4 10             	add    $0x10,%esp

}
f0121453:	90                   	nop
f0121454:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0121457:	c9                   	leave  
f0121458:	c3                   	ret    

f0121459 <initialize_dynamic_allocator>:
bool is_initialized = 0;
//==================================
// [1] INITIALIZE DYNAMIC ALLOCATOR:
//==================================
void initialize_dynamic_allocator(uint32 daStart, uint32 initSizeOfAllocatedSpace)
{
f0121459:	55                   	push   %ebp
f012145a:	89 e5                	mov    %esp,%ebp
f012145c:	83 ec 08             	sub    $0x8,%esp
	//==================================================================================
	//DON'T CHANGE THESE LINES==========================================================
	//==================================================================================
	{
		if (initSizeOfAllocatedSpace % 2 != 0) initSizeOfAllocatedSpace++; //ensure it's multiple of 2
f012145f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0121462:	83 e0 01             	and    $0x1,%eax
f0121465:	85 c0                	test   %eax,%eax
f0121467:	74 03                	je     f012146c <initialize_dynamic_allocator+0x13>
f0121469:	ff 45 0c             	incl   0xc(%ebp)
		if (initSizeOfAllocatedSpace == 0)
f012146c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0121470:	74 1e                	je     f0121490 <initialize_dynamic_allocator+0x37>
			return ;
		is_initialized = 1;
f0121472:	c7 05 b4 22 55 f0 01 	movl   $0x1,0xf05522b4
f0121479:	00 00 00 
	//==================================================================================
	//==================================================================================

	//TODO: [PROJECT'24.MS1 - #04] [3] DYNAMIC ALLOCATOR - initialize_dynamic_allocator
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("initialize_dynamic_allocator is not implemented yet");
f012147c:	83 ec 04             	sub    $0x4,%esp
f012147f:	68 18 e1 12 f0       	push   $0xf012e118
f0121484:	6a 6a                	push   $0x6a
f0121486:	68 4c e1 12 f0       	push   $0xf012e14c
f012148b:	e8 8a ee fd ff       	call   f010031a <_panic>
	//DON'T CHANGE THESE LINES==========================================================
	//==================================================================================
	{
		if (initSizeOfAllocatedSpace % 2 != 0) initSizeOfAllocatedSpace++; //ensure it's multiple of 2
		if (initSizeOfAllocatedSpace == 0)
			return ;
f0121490:	90                   	nop
	//TODO: [PROJECT'24.MS1 - #04] [3] DYNAMIC ALLOCATOR - initialize_dynamic_allocator
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("initialize_dynamic_allocator is not implemented yet");
	//Your Code is Here...

}
f0121491:	c9                   	leave  
f0121492:	c3                   	ret    

f0121493 <set_block_data>:
//==================================
// [2] SET BLOCK HEADER & FOOTER:
//==================================
void set_block_data(void* va, uint32 totalSize, bool isAllocated)
{
f0121493:	55                   	push   %ebp
f0121494:	89 e5                	mov    %esp,%ebp
f0121496:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #05] [3] DYNAMIC ALLOCATOR - set_block_data
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("set_block_data is not implemented yet");
f0121499:	83 ec 04             	sub    $0x4,%esp
f012149c:	68 64 e1 12 f0       	push   $0xf012e164
f01214a1:	6a 75                	push   $0x75
f01214a3:	68 4c e1 12 f0       	push   $0xf012e14c
f01214a8:	e8 6d ee fd ff       	call   f010031a <_panic>

f01214ad <alloc_block_FF>:

//=========================================
// [3] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *alloc_block_FF(uint32 size)
{
f01214ad:	55                   	push   %ebp
f01214ae:	89 e5                	mov    %esp,%ebp
f01214b0:	83 ec 28             	sub    $0x28,%esp
	//==================================================================================
	//DON'T CHANGE THESE LINES==========================================================
	//==================================================================================
	{
		if (size % 2 != 0) size++;	//ensure that the size is even (to use LSB as allocation flag)
f01214b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01214b6:	83 e0 01             	and    $0x1,%eax
f01214b9:	85 c0                	test   %eax,%eax
f01214bb:	74 03                	je     f01214c0 <alloc_block_FF+0x13>
f01214bd:	ff 45 08             	incl   0x8(%ebp)
		if (size < DYN_ALLOC_MIN_BLOCK_SIZE)
f01214c0:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
f01214c4:	77 07                	ja     f01214cd <alloc_block_FF+0x20>
			size = DYN_ALLOC_MIN_BLOCK_SIZE ;
f01214c6:	c7 45 08 08 00 00 00 	movl   $0x8,0x8(%ebp)
		if (!is_initialized)
f01214cd:	a1 b4 22 55 f0       	mov    0xf05522b4,%eax
f01214d2:	85 c0                	test   %eax,%eax
f01214d4:	75 63                	jne    f0121539 <alloc_block_FF+0x8c>
		{
			uint32 required_size = size + 2*sizeof(int) /*header & footer*/ + 2*sizeof(int) /*da begin & end*/ ;
f01214d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01214d9:	83 c0 10             	add    $0x10,%eax
f01214dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
			uint32 da_start = (uint32)sbrk(ROUNDUP(required_size, PAGE_SIZE)/PAGE_SIZE);
f01214df:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f01214e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01214e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01214ec:	01 d0                	add    %edx,%eax
f01214ee:	48                   	dec    %eax
f01214ef:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01214f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01214f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01214fa:	f7 75 f0             	divl   -0x10(%ebp)
f01214fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0121500:	29 d0                	sub    %edx,%eax
f0121502:	c1 e8 0c             	shr    $0xc,%eax
f0121505:	83 ec 0c             	sub    $0xc,%esp
f0121508:	50                   	push   %eax
f0121509:	e8 9e 75 fe ff       	call   f0108aac <sbrk>
f012150e:	83 c4 10             	add    $0x10,%esp
f0121511:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 da_break = (uint32)sbrk(0);
f0121514:	83 ec 0c             	sub    $0xc,%esp
f0121517:	6a 00                	push   $0x0
f0121519:	e8 8e 75 fe ff       	call   f0108aac <sbrk>
f012151e:	83 c4 10             	add    $0x10,%esp
f0121521:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			initialize_dynamic_allocator(da_start, da_break - da_start);
f0121524:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0121527:	2b 45 e8             	sub    -0x18(%ebp),%eax
f012152a:	83 ec 08             	sub    $0x8,%esp
f012152d:	50                   	push   %eax
f012152e:	ff 75 e8             	pushl  -0x18(%ebp)
f0121531:	e8 23 ff ff ff       	call   f0121459 <initialize_dynamic_allocator>
f0121536:	83 c4 10             	add    $0x10,%esp
	//==================================================================================
	//==================================================================================

	//TODO: [PROJECT'24.MS1 - #06] [3] DYNAMIC ALLOCATOR - alloc_block_FF
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("alloc_block_FF is not implemented yet");
f0121539:	83 ec 04             	sub    $0x4,%esp
f012153c:	68 8c e1 12 f0       	push   $0xf012e18c
f0121541:	68 93 00 00 00       	push   $0x93
f0121546:	68 4c e1 12 f0       	push   $0xf012e14c
f012154b:	e8 ca ed fd ff       	call   f010031a <_panic>

f0121550 <alloc_block_BF>:
}
//=========================================
// [4] ALLOCATE BLOCK BY BEST FIT:
//=========================================
void *alloc_block_BF(uint32 size)
{
f0121550:	55                   	push   %ebp
f0121551:	89 e5                	mov    %esp,%ebp
f0121553:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - BONUS] [3] DYNAMIC ALLOCATOR - alloc_block_BF
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("alloc_block_BF is not implemented yet");
f0121556:	83 ec 04             	sub    $0x4,%esp
f0121559:	68 b4 e1 12 f0       	push   $0xf012e1b4
f012155e:	68 9e 00 00 00       	push   $0x9e
f0121563:	68 4c e1 12 f0       	push   $0xf012e14c
f0121568:	e8 ad ed fd ff       	call   f010031a <_panic>

f012156d <free_block>:

//===================================================
// [5] FREE BLOCK WITH COALESCING:
//===================================================
void free_block(void *va)
{
f012156d:	55                   	push   %ebp
f012156e:	89 e5                	mov    %esp,%ebp
f0121570:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #07] [3] DYNAMIC ALLOCATOR - free_block
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("free_block is not implemented yet");
f0121573:	83 ec 04             	sub    $0x4,%esp
f0121576:	68 dc e1 12 f0       	push   $0xf012e1dc
f012157b:	68 aa 00 00 00       	push   $0xaa
f0121580:	68 4c e1 12 f0       	push   $0xf012e14c
f0121585:	e8 90 ed fd ff       	call   f010031a <_panic>

f012158a <realloc_block_FF>:

//=========================================
// [6] REALLOCATE BLOCK BY FIRST FIT:
//=========================================
void *realloc_block_FF(void* va, uint32 new_size)
{
f012158a:	55                   	push   %ebp
f012158b:	89 e5                	mov    %esp,%ebp
f012158d:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT'24.MS1 - #08] [3] DYNAMIC ALLOCATOR - realloc_block_FF
	//COMMENT THE FOLLOWING LINE BEFORE START CODING
	panic("realloc_block_FF is not implemented yet");
f0121590:	83 ec 04             	sub    $0x4,%esp
f0121593:	68 00 e2 12 f0       	push   $0xf012e200
f0121598:	68 b5 00 00 00       	push   $0xb5
f012159d:	68 4c e1 12 f0       	push   $0xf012e14c
f01215a2:	e8 73 ed fd ff       	call   f010031a <_panic>

f01215a7 <alloc_block_WF>:
/*********************************************************************************************/
//=========================================
// [7] ALLOCATE BLOCK BY WORST FIT:
//=========================================
void *alloc_block_WF(uint32 size)
{
f01215a7:	55                   	push   %ebp
f01215a8:	89 e5                	mov    %esp,%ebp
f01215aa:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_WF is not implemented yet");
f01215ad:	83 ec 04             	sub    $0x4,%esp
f01215b0:	68 28 e2 12 f0       	push   $0xf012e228
f01215b5:	68 c1 00 00 00       	push   $0xc1
f01215ba:	68 4c e1 12 f0       	push   $0xf012e14c
f01215bf:	e8 56 ed fd ff       	call   f010031a <_panic>

f01215c4 <alloc_block_NF>:

//=========================================
// [8] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
void *alloc_block_NF(uint32 size)
{
f01215c4:	55                   	push   %ebp
f01215c5:	89 e5                	mov    %esp,%ebp
f01215c7:	83 ec 08             	sub    $0x8,%esp
	panic("alloc_block_NF is not implemented yet");
f01215ca:	83 ec 04             	sub    $0x4,%esp
f01215cd:	68 50 e2 12 f0       	push   $0xf012e250
f01215d2:	68 ca 00 00 00       	push   $0xca
f01215d7:	68 4c e1 12 f0       	push   $0xf012e14c
f01215dc:	e8 39 ed fd ff       	call   f010031a <_panic>
f01215e1:	66 90                	xchg   %ax,%ax
f01215e3:	90                   	nop

f01215e4 <__moddi3>:
f01215e4:	55                   	push   %ebp
f01215e5:	57                   	push   %edi
f01215e6:	56                   	push   %esi
f01215e7:	53                   	push   %ebx
f01215e8:	83 ec 2c             	sub    $0x2c,%esp
f01215eb:	8b 74 24 40          	mov    0x40(%esp),%esi
f01215ef:	8b 7c 24 44          	mov    0x44(%esp),%edi
f01215f3:	8b 4c 24 48          	mov    0x48(%esp),%ecx
f01215f7:	8b 5c 24 4c          	mov    0x4c(%esp),%ebx
f01215fb:	89 d8                	mov    %ebx,%eax
f01215fd:	85 ff                	test   %edi,%edi
f01215ff:	0f 88 d3 00 00 00    	js     f01216d8 <__moddi3+0xf4>
f0121605:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
f012160c:	00 
f012160d:	85 c0                	test   %eax,%eax
f012160f:	0f 88 ab 00 00 00    	js     f01216c0 <__moddi3+0xdc>
f0121615:	89 0c 24             	mov    %ecx,(%esp)
f0121618:	89 5c 24 04          	mov    %ebx,0x4(%esp)
f012161c:	89 74 24 10          	mov    %esi,0x10(%esp)
f0121620:	89 fb                	mov    %edi,%ebx
f0121622:	8b 14 24             	mov    (%esp),%edx
f0121625:	8b 4c 24 04          	mov    0x4(%esp),%ecx
f0121629:	89 d0                	mov    %edx,%eax
f012162b:	89 54 24 18          	mov    %edx,0x18(%esp)
f012162f:	89 ca                	mov    %ecx,%edx
f0121631:	8b 0c 24             	mov    (%esp),%ecx
f0121634:	89 34 24             	mov    %esi,(%esp)
f0121637:	89 7c 24 14          	mov    %edi,0x14(%esp)
f012163b:	85 d2                	test   %edx,%edx
f012163d:	75 15                	jne    f0121654 <__moddi3+0x70>
f012163f:	89 c7                	mov    %eax,%edi
f0121641:	39 d8                	cmp    %ebx,%eax
f0121643:	76 5b                	jbe    f01216a0 <__moddi3+0xbc>
f0121645:	89 f0                	mov    %esi,%eax
f0121647:	89 da                	mov    %ebx,%edx
f0121649:	f7 f7                	div    %edi
f012164b:	89 d3                	mov    %edx,%ebx
f012164d:	89 d8                	mov    %ebx,%eax
f012164f:	31 d2                	xor    %edx,%edx
f0121651:	eb 09                	jmp    f012165c <__moddi3+0x78>
f0121653:	90                   	nop
f0121654:	39 fa                	cmp    %edi,%edx
f0121656:	76 1c                	jbe    f0121674 <__moddi3+0x90>
f0121658:	89 f0                	mov    %esi,%eax
f012165a:	89 fa                	mov    %edi,%edx
f012165c:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
f0121660:	85 c9                	test   %ecx,%ecx
f0121662:	74 07                	je     f012166b <__moddi3+0x87>
f0121664:	f7 d8                	neg    %eax
f0121666:	83 d2 00             	adc    $0x0,%edx
f0121669:	f7 da                	neg    %edx
f012166b:	83 c4 2c             	add    $0x2c,%esp
f012166e:	5b                   	pop    %ebx
f012166f:	5e                   	pop    %esi
f0121670:	5f                   	pop    %edi
f0121671:	5d                   	pop    %ebp
f0121672:	c3                   	ret    
f0121673:	90                   	nop
f0121674:	0f bd c2             	bsr    %edx,%eax
f0121677:	83 f0 1f             	xor    $0x1f,%eax
f012167a:	89 44 24 1c          	mov    %eax,0x1c(%esp)
f012167e:	75 6c                	jne    f01216ec <__moddi3+0x108>
f0121680:	39 fa                	cmp    %edi,%edx
f0121682:	72 05                	jb     f0121689 <__moddi3+0xa5>
f0121684:	3b 0c 24             	cmp    (%esp),%ecx
f0121687:	77 0e                	ja     f0121697 <__moddi3+0xb3>
f0121689:	8b 34 24             	mov    (%esp),%esi
f012168c:	29 ce                	sub    %ecx,%esi
f012168e:	19 d3                	sbb    %edx,%ebx
f0121690:	89 5c 24 14          	mov    %ebx,0x14(%esp)
f0121694:	89 34 24             	mov    %esi,(%esp)
f0121697:	8b 04 24             	mov    (%esp),%eax
f012169a:	8b 54 24 14          	mov    0x14(%esp),%edx
f012169e:	eb bc                	jmp    f012165c <__moddi3+0x78>
f01216a0:	85 c9                	test   %ecx,%ecx
f01216a2:	75 0b                	jne    f01216af <__moddi3+0xcb>
f01216a4:	b8 01 00 00 00       	mov    $0x1,%eax
f01216a9:	31 d2                	xor    %edx,%edx
f01216ab:	f7 f1                	div    %ecx
f01216ad:	89 c1                	mov    %eax,%ecx
f01216af:	89 d8                	mov    %ebx,%eax
f01216b1:	31 d2                	xor    %edx,%edx
f01216b3:	f7 f1                	div    %ecx
f01216b5:	8b 04 24             	mov    (%esp),%eax
f01216b8:	f7 f1                	div    %ecx
f01216ba:	89 d3                	mov    %edx,%ebx
f01216bc:	eb 8f                	jmp    f012164d <__moddi3+0x69>
f01216be:	66 90                	xchg   %ax,%ax
f01216c0:	89 c8                	mov    %ecx,%eax
f01216c2:	89 da                	mov    %ebx,%edx
f01216c4:	f7 d8                	neg    %eax
f01216c6:	83 d2 00             	adc    $0x0,%edx
f01216c9:	f7 da                	neg    %edx
f01216cb:	89 04 24             	mov    %eax,(%esp)
f01216ce:	89 54 24 04          	mov    %edx,0x4(%esp)
f01216d2:	e9 45 ff ff ff       	jmp    f012161c <__moddi3+0x38>
f01216d7:	90                   	nop
f01216d8:	f7 de                	neg    %esi
f01216da:	83 d7 00             	adc    $0x0,%edi
f01216dd:	f7 df                	neg    %edi
f01216df:	c7 44 24 0c ff ff ff 	movl   $0xffffffff,0xc(%esp)
f01216e6:	ff 
f01216e7:	e9 21 ff ff ff       	jmp    f012160d <__moddi3+0x29>
f01216ec:	b8 20 00 00 00       	mov    $0x20,%eax
f01216f1:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
f01216f5:	29 f8                	sub    %edi,%eax
f01216f7:	89 c6                	mov    %eax,%esi
f01216f9:	89 44 24 14          	mov    %eax,0x14(%esp)
f01216fd:	89 f9                	mov    %edi,%ecx
f01216ff:	d3 e2                	shl    %cl,%edx
f0121701:	8b 6c 24 18          	mov    0x18(%esp),%ebp
f0121705:	89 e8                	mov    %ebp,%eax
f0121707:	89 f1                	mov    %esi,%ecx
f0121709:	d3 e8                	shr    %cl,%eax
f012170b:	09 d0                	or     %edx,%eax
f012170d:	89 04 24             	mov    %eax,(%esp)
f0121710:	89 ea                	mov    %ebp,%edx
f0121712:	89 f9                	mov    %edi,%ecx
f0121714:	d3 e2                	shl    %cl,%edx
f0121716:	89 d7                	mov    %edx,%edi
f0121718:	89 da                	mov    %ebx,%edx
f012171a:	d3 e2                	shl    %cl,%edx
f012171c:	8b 6c 24 10          	mov    0x10(%esp),%ebp
f0121720:	d3 e5                	shl    %cl,%ebp
f0121722:	8b 44 24 10          	mov    0x10(%esp),%eax
f0121726:	89 f1                	mov    %esi,%ecx
f0121728:	d3 e8                	shr    %cl,%eax
f012172a:	09 d0                	or     %edx,%eax
f012172c:	d3 eb                	shr    %cl,%ebx
f012172e:	89 da                	mov    %ebx,%edx
f0121730:	f7 34 24             	divl   (%esp)
f0121733:	89 d3                	mov    %edx,%ebx
f0121735:	f7 e7                	mul    %edi
f0121737:	89 c6                	mov    %eax,%esi
f0121739:	89 d1                	mov    %edx,%ecx
f012173b:	39 d3                	cmp    %edx,%ebx
f012173d:	72 29                	jb     f0121768 <__moddi3+0x184>
f012173f:	74 33                	je     f0121774 <__moddi3+0x190>
f0121741:	89 e8                	mov    %ebp,%eax
f0121743:	29 f0                	sub    %esi,%eax
f0121745:	19 cb                	sbb    %ecx,%ebx
f0121747:	89 de                	mov    %ebx,%esi
f0121749:	8a 4c 24 14          	mov    0x14(%esp),%cl
f012174d:	d3 e6                	shl    %cl,%esi
f012174f:	8b 7c 24 1c          	mov    0x1c(%esp),%edi
f0121753:	89 f9                	mov    %edi,%ecx
f0121755:	d3 e8                	shr    %cl,%eax
f0121757:	09 c6                	or     %eax,%esi
f0121759:	89 f0                	mov    %esi,%eax
f012175b:	89 f9                	mov    %edi,%ecx
f012175d:	d3 eb                	shr    %cl,%ebx
f012175f:	89 da                	mov    %ebx,%edx
f0121761:	e9 f6 fe ff ff       	jmp    f012165c <__moddi3+0x78>
f0121766:	66 90                	xchg   %ax,%ax
f0121768:	29 f8                	sub    %edi,%eax
f012176a:	1b 14 24             	sbb    (%esp),%edx
f012176d:	89 d1                	mov    %edx,%ecx
f012176f:	89 c6                	mov    %eax,%esi
f0121771:	eb ce                	jmp    f0121741 <__moddi3+0x15d>
f0121773:	90                   	nop
f0121774:	39 c5                	cmp    %eax,%ebp
f0121776:	72 f0                	jb     f0121768 <__moddi3+0x184>
f0121778:	89 d9                	mov    %ebx,%ecx
f012177a:	eb c5                	jmp    f0121741 <__moddi3+0x15d>

f012177c <__udivdi3>:
f012177c:	55                   	push   %ebp
f012177d:	57                   	push   %edi
f012177e:	56                   	push   %esi
f012177f:	53                   	push   %ebx
f0121780:	83 ec 1c             	sub    $0x1c,%esp
f0121783:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f0121787:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f012178b:	8b 7c 24 38          	mov    0x38(%esp),%edi
f012178f:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f0121793:	89 ca                	mov    %ecx,%edx
f0121795:	89 f8                	mov    %edi,%eax
f0121797:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f012179b:	85 f6                	test   %esi,%esi
f012179d:	75 2d                	jne    f01217cc <__udivdi3+0x50>
f012179f:	39 cf                	cmp    %ecx,%edi
f01217a1:	77 65                	ja     f0121808 <__udivdi3+0x8c>
f01217a3:	89 fd                	mov    %edi,%ebp
f01217a5:	85 ff                	test   %edi,%edi
f01217a7:	75 0b                	jne    f01217b4 <__udivdi3+0x38>
f01217a9:	b8 01 00 00 00       	mov    $0x1,%eax
f01217ae:	31 d2                	xor    %edx,%edx
f01217b0:	f7 f7                	div    %edi
f01217b2:	89 c5                	mov    %eax,%ebp
f01217b4:	31 d2                	xor    %edx,%edx
f01217b6:	89 c8                	mov    %ecx,%eax
f01217b8:	f7 f5                	div    %ebp
f01217ba:	89 c1                	mov    %eax,%ecx
f01217bc:	89 d8                	mov    %ebx,%eax
f01217be:	f7 f5                	div    %ebp
f01217c0:	89 cf                	mov    %ecx,%edi
f01217c2:	89 fa                	mov    %edi,%edx
f01217c4:	83 c4 1c             	add    $0x1c,%esp
f01217c7:	5b                   	pop    %ebx
f01217c8:	5e                   	pop    %esi
f01217c9:	5f                   	pop    %edi
f01217ca:	5d                   	pop    %ebp
f01217cb:	c3                   	ret    
f01217cc:	39 ce                	cmp    %ecx,%esi
f01217ce:	77 28                	ja     f01217f8 <__udivdi3+0x7c>
f01217d0:	0f bd fe             	bsr    %esi,%edi
f01217d3:	83 f7 1f             	xor    $0x1f,%edi
f01217d6:	75 40                	jne    f0121818 <__udivdi3+0x9c>
f01217d8:	39 ce                	cmp    %ecx,%esi
f01217da:	72 0a                	jb     f01217e6 <__udivdi3+0x6a>
f01217dc:	3b 44 24 08          	cmp    0x8(%esp),%eax
f01217e0:	0f 87 9e 00 00 00    	ja     f0121884 <__udivdi3+0x108>
f01217e6:	b8 01 00 00 00       	mov    $0x1,%eax
f01217eb:	89 fa                	mov    %edi,%edx
f01217ed:	83 c4 1c             	add    $0x1c,%esp
f01217f0:	5b                   	pop    %ebx
f01217f1:	5e                   	pop    %esi
f01217f2:	5f                   	pop    %edi
f01217f3:	5d                   	pop    %ebp
f01217f4:	c3                   	ret    
f01217f5:	8d 76 00             	lea    0x0(%esi),%esi
f01217f8:	31 ff                	xor    %edi,%edi
f01217fa:	31 c0                	xor    %eax,%eax
f01217fc:	89 fa                	mov    %edi,%edx
f01217fe:	83 c4 1c             	add    $0x1c,%esp
f0121801:	5b                   	pop    %ebx
f0121802:	5e                   	pop    %esi
f0121803:	5f                   	pop    %edi
f0121804:	5d                   	pop    %ebp
f0121805:	c3                   	ret    
f0121806:	66 90                	xchg   %ax,%ax
f0121808:	89 d8                	mov    %ebx,%eax
f012180a:	f7 f7                	div    %edi
f012180c:	31 ff                	xor    %edi,%edi
f012180e:	89 fa                	mov    %edi,%edx
f0121810:	83 c4 1c             	add    $0x1c,%esp
f0121813:	5b                   	pop    %ebx
f0121814:	5e                   	pop    %esi
f0121815:	5f                   	pop    %edi
f0121816:	5d                   	pop    %ebp
f0121817:	c3                   	ret    
f0121818:	bd 20 00 00 00       	mov    $0x20,%ebp
f012181d:	89 eb                	mov    %ebp,%ebx
f012181f:	29 fb                	sub    %edi,%ebx
f0121821:	89 f9                	mov    %edi,%ecx
f0121823:	d3 e6                	shl    %cl,%esi
f0121825:	89 c5                	mov    %eax,%ebp
f0121827:	88 d9                	mov    %bl,%cl
f0121829:	d3 ed                	shr    %cl,%ebp
f012182b:	89 e9                	mov    %ebp,%ecx
f012182d:	09 f1                	or     %esi,%ecx
f012182f:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f0121833:	89 f9                	mov    %edi,%ecx
f0121835:	d3 e0                	shl    %cl,%eax
f0121837:	89 c5                	mov    %eax,%ebp
f0121839:	89 d6                	mov    %edx,%esi
f012183b:	88 d9                	mov    %bl,%cl
f012183d:	d3 ee                	shr    %cl,%esi
f012183f:	89 f9                	mov    %edi,%ecx
f0121841:	d3 e2                	shl    %cl,%edx
f0121843:	8b 44 24 08          	mov    0x8(%esp),%eax
f0121847:	88 d9                	mov    %bl,%cl
f0121849:	d3 e8                	shr    %cl,%eax
f012184b:	09 c2                	or     %eax,%edx
f012184d:	89 d0                	mov    %edx,%eax
f012184f:	89 f2                	mov    %esi,%edx
f0121851:	f7 74 24 0c          	divl   0xc(%esp)
f0121855:	89 d6                	mov    %edx,%esi
f0121857:	89 c3                	mov    %eax,%ebx
f0121859:	f7 e5                	mul    %ebp
f012185b:	39 d6                	cmp    %edx,%esi
f012185d:	72 19                	jb     f0121878 <__udivdi3+0xfc>
f012185f:	74 0b                	je     f012186c <__udivdi3+0xf0>
f0121861:	89 d8                	mov    %ebx,%eax
f0121863:	31 ff                	xor    %edi,%edi
f0121865:	e9 58 ff ff ff       	jmp    f01217c2 <__udivdi3+0x46>
f012186a:	66 90                	xchg   %ax,%ax
f012186c:	8b 54 24 08          	mov    0x8(%esp),%edx
f0121870:	89 f9                	mov    %edi,%ecx
f0121872:	d3 e2                	shl    %cl,%edx
f0121874:	39 c2                	cmp    %eax,%edx
f0121876:	73 e9                	jae    f0121861 <__udivdi3+0xe5>
f0121878:	8d 43 ff             	lea    -0x1(%ebx),%eax
f012187b:	31 ff                	xor    %edi,%edi
f012187d:	e9 40 ff ff ff       	jmp    f01217c2 <__udivdi3+0x46>
f0121882:	66 90                	xchg   %ax,%ax
f0121884:	31 c0                	xor    %eax,%eax
f0121886:	e9 37 ff ff ff       	jmp    f01217c2 <__udivdi3+0x46>
f012188b:	90                   	nop

f012188c <__umoddi3>:
f012188c:	55                   	push   %ebp
f012188d:	57                   	push   %edi
f012188e:	56                   	push   %esi
f012188f:	53                   	push   %ebx
f0121890:	83 ec 1c             	sub    $0x1c,%esp
f0121893:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f0121897:	8b 74 24 34          	mov    0x34(%esp),%esi
f012189b:	8b 7c 24 38          	mov    0x38(%esp),%edi
f012189f:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f01218a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
f01218a7:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f01218ab:	89 f3                	mov    %esi,%ebx
f01218ad:	89 fa                	mov    %edi,%edx
f01218af:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f01218b3:	89 34 24             	mov    %esi,(%esp)
f01218b6:	85 c0                	test   %eax,%eax
f01218b8:	75 1a                	jne    f01218d4 <__umoddi3+0x48>
f01218ba:	39 f7                	cmp    %esi,%edi
f01218bc:	0f 86 a2 00 00 00    	jbe    f0121964 <__umoddi3+0xd8>
f01218c2:	89 c8                	mov    %ecx,%eax
f01218c4:	89 f2                	mov    %esi,%edx
f01218c6:	f7 f7                	div    %edi
f01218c8:	89 d0                	mov    %edx,%eax
f01218ca:	31 d2                	xor    %edx,%edx
f01218cc:	83 c4 1c             	add    $0x1c,%esp
f01218cf:	5b                   	pop    %ebx
f01218d0:	5e                   	pop    %esi
f01218d1:	5f                   	pop    %edi
f01218d2:	5d                   	pop    %ebp
f01218d3:	c3                   	ret    
f01218d4:	39 f0                	cmp    %esi,%eax
f01218d6:	0f 87 ac 00 00 00    	ja     f0121988 <__umoddi3+0xfc>
f01218dc:	0f bd e8             	bsr    %eax,%ebp
f01218df:	83 f5 1f             	xor    $0x1f,%ebp
f01218e2:	0f 84 ac 00 00 00    	je     f0121994 <__umoddi3+0x108>
f01218e8:	bf 20 00 00 00       	mov    $0x20,%edi
f01218ed:	29 ef                	sub    %ebp,%edi
f01218ef:	89 fe                	mov    %edi,%esi
f01218f1:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f01218f5:	89 e9                	mov    %ebp,%ecx
f01218f7:	d3 e0                	shl    %cl,%eax
f01218f9:	89 d7                	mov    %edx,%edi
f01218fb:	89 f1                	mov    %esi,%ecx
f01218fd:	d3 ef                	shr    %cl,%edi
f01218ff:	09 c7                	or     %eax,%edi
f0121901:	89 e9                	mov    %ebp,%ecx
f0121903:	d3 e2                	shl    %cl,%edx
f0121905:	89 14 24             	mov    %edx,(%esp)
f0121908:	89 d8                	mov    %ebx,%eax
f012190a:	d3 e0                	shl    %cl,%eax
f012190c:	89 c2                	mov    %eax,%edx
f012190e:	8b 44 24 08          	mov    0x8(%esp),%eax
f0121912:	d3 e0                	shl    %cl,%eax
f0121914:	89 44 24 04          	mov    %eax,0x4(%esp)
f0121918:	8b 44 24 08          	mov    0x8(%esp),%eax
f012191c:	89 f1                	mov    %esi,%ecx
f012191e:	d3 e8                	shr    %cl,%eax
f0121920:	09 d0                	or     %edx,%eax
f0121922:	d3 eb                	shr    %cl,%ebx
f0121924:	89 da                	mov    %ebx,%edx
f0121926:	f7 f7                	div    %edi
f0121928:	89 d3                	mov    %edx,%ebx
f012192a:	f7 24 24             	mull   (%esp)
f012192d:	89 c6                	mov    %eax,%esi
f012192f:	89 d1                	mov    %edx,%ecx
f0121931:	39 d3                	cmp    %edx,%ebx
f0121933:	0f 82 87 00 00 00    	jb     f01219c0 <__umoddi3+0x134>
f0121939:	0f 84 91 00 00 00    	je     f01219d0 <__umoddi3+0x144>
f012193f:	8b 54 24 04          	mov    0x4(%esp),%edx
f0121943:	29 f2                	sub    %esi,%edx
f0121945:	19 cb                	sbb    %ecx,%ebx
f0121947:	89 d8                	mov    %ebx,%eax
f0121949:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f012194d:	d3 e0                	shl    %cl,%eax
f012194f:	89 e9                	mov    %ebp,%ecx
f0121951:	d3 ea                	shr    %cl,%edx
f0121953:	09 d0                	or     %edx,%eax
f0121955:	89 e9                	mov    %ebp,%ecx
f0121957:	d3 eb                	shr    %cl,%ebx
f0121959:	89 da                	mov    %ebx,%edx
f012195b:	83 c4 1c             	add    $0x1c,%esp
f012195e:	5b                   	pop    %ebx
f012195f:	5e                   	pop    %esi
f0121960:	5f                   	pop    %edi
f0121961:	5d                   	pop    %ebp
f0121962:	c3                   	ret    
f0121963:	90                   	nop
f0121964:	89 fd                	mov    %edi,%ebp
f0121966:	85 ff                	test   %edi,%edi
f0121968:	75 0b                	jne    f0121975 <__umoddi3+0xe9>
f012196a:	b8 01 00 00 00       	mov    $0x1,%eax
f012196f:	31 d2                	xor    %edx,%edx
f0121971:	f7 f7                	div    %edi
f0121973:	89 c5                	mov    %eax,%ebp
f0121975:	89 f0                	mov    %esi,%eax
f0121977:	31 d2                	xor    %edx,%edx
f0121979:	f7 f5                	div    %ebp
f012197b:	89 c8                	mov    %ecx,%eax
f012197d:	f7 f5                	div    %ebp
f012197f:	89 d0                	mov    %edx,%eax
f0121981:	e9 44 ff ff ff       	jmp    f01218ca <__umoddi3+0x3e>
f0121986:	66 90                	xchg   %ax,%ax
f0121988:	89 c8                	mov    %ecx,%eax
f012198a:	89 f2                	mov    %esi,%edx
f012198c:	83 c4 1c             	add    $0x1c,%esp
f012198f:	5b                   	pop    %ebx
f0121990:	5e                   	pop    %esi
f0121991:	5f                   	pop    %edi
f0121992:	5d                   	pop    %ebp
f0121993:	c3                   	ret    
f0121994:	3b 04 24             	cmp    (%esp),%eax
f0121997:	72 06                	jb     f012199f <__umoddi3+0x113>
f0121999:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f012199d:	77 0f                	ja     f01219ae <__umoddi3+0x122>
f012199f:	89 f2                	mov    %esi,%edx
f01219a1:	29 f9                	sub    %edi,%ecx
f01219a3:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f01219a7:	89 14 24             	mov    %edx,(%esp)
f01219aa:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f01219ae:	8b 44 24 04          	mov    0x4(%esp),%eax
f01219b2:	8b 14 24             	mov    (%esp),%edx
f01219b5:	83 c4 1c             	add    $0x1c,%esp
f01219b8:	5b                   	pop    %ebx
f01219b9:	5e                   	pop    %esi
f01219ba:	5f                   	pop    %edi
f01219bb:	5d                   	pop    %ebp
f01219bc:	c3                   	ret    
f01219bd:	8d 76 00             	lea    0x0(%esi),%esi
f01219c0:	2b 04 24             	sub    (%esp),%eax
f01219c3:	19 fa                	sbb    %edi,%edx
f01219c5:	89 d1                	mov    %edx,%ecx
f01219c7:	89 c6                	mov    %eax,%esi
f01219c9:	e9 71 ff ff ff       	jmp    f012193f <__umoddi3+0xb3>
f01219ce:	66 90                	xchg   %ax,%ax
f01219d0:	39 44 24 04          	cmp    %eax,0x4(%esp)
f01219d4:	72 ea                	jb     f01219c0 <__umoddi3+0x134>
f01219d6:	89 d9                	mov    %ebx,%ecx
f01219d8:	e9 62 ff ff ff       	jmp    f012193f <__umoddi3+0xb3>
